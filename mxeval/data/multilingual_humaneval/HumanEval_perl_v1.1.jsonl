{"task_id": "HumanEval_perl/0", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Check if in given list of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n# False\n# >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n# True\n#\nsub has_close_elements\n{\n  my ($numbers, $threshold) = @_;\n", "entry_point": "has_close_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1.0, 2.0, 3.9, 4.0, 5.0, 2.2];\nmy $arg01 = 0.3;\nmy $x0 = has_close_elements($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1.0, 2.0, 3.9, 4.0, 5.0, 2.2];\nmy $arg11 = 0.05;\nmy $x1 = has_close_elements($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1.0, 2.0, 5.9, 4.0, 5.0];\nmy $arg21 = 0.95;\nmy $x2 = has_close_elements($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1.0, 2.0, 5.9, 4.0, 5.0];\nmy $arg31 = 0.8;\nmy $x3 = has_close_elements($arg30, $arg31);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0];\nmy $arg41 = 0.1;\nmy $x4 = has_close_elements($arg40, $arg41);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1.1, 2.2, 3.1, 4.1, 5.1];\nmy $arg51 = 1.0;\nmy $x5 = has_close_elements($arg50, $arg51);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [1.1, 2.2, 3.1, 4.1, 5.1];\nmy $arg61 = 0.5;\nmy $x6 = has_close_elements($arg60, $arg61);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/1", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n# separate those group into separate strings and return the list of those.\n# Separate groups are balanced (each open brace is properly closed) and not nested within each other\n# Ignore any spaces in the input string.\n# >>> separate_paren_groups('( ) (( )) (( )( ))')\n# ['()', '(())', '(()())']\n#\nsub separate_paren_groups\n{\n  my ($paren_string) = @_;\n", "entry_point": "separate_paren_groups", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"(()()) ((())) () ((())()())\";\nmy $x0 = separate_paren_groups($arg00);\nmy $v0 = [\"(()())\", \"((()))\", \"()\", \"((())()())\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"() (()) ((())) (((())))\";\nmy $x1 = separate_paren_groups($arg10);\nmy $v1 = [\"()\", \"(())\", \"((()))\", \"(((())))\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"(()(())((())))\";\nmy $x2 = separate_paren_groups($arg20);\nmy $v2 = [\"(()(())((())))\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"( ) (( )) (( )( ))\";\nmy $x3 = separate_paren_groups($arg30);\nmy $v3 = [\"()\", \"(())\", \"(()())\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/2", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Given a positive floating point number, it can be decomposed into\n# and integer part (largest integer smaller than given number) and decimals\n# (leftover part always smaller than 1).\n\n# Return the decimal part of the number.\n# >>> truncate_number(3.5)\n# 0.5\n#\nsub truncate_number\n{\n  my ($number) = @_;\n", "entry_point": "truncate_number", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3.5;\nmy $x0 = truncate_number($arg00);\nmy $v0 = 0.5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1.33;\nmy $x1 = truncate_number($arg10);\nmy $v1 = 0.33;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 123.456;\nmy $x2 = truncate_number($arg20);\nmy $v2 = 0.456;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/3", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# You're given a list of deposit and withdrawal operations on a bank account that starts with\n# zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n# at that point function should return True. Otherwise it should return False.\n# >>> below_zero([1, 2, 3])\n# False\n# >>> below_zero([1, 2, -4, 5])\n# True\n#\nsub below_zero\n{\n  my ($operations) = @_;\n", "entry_point": "below_zero", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = below_zero($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, -3, 1, 2, -3];\nmy $x1 = below_zero($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, -4, 5, 6];\nmy $x2 = below_zero($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, -1, 2, -2, 5, -5, 4, -4];\nmy $x3 = below_zero($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, -1, 2, -2, 5, -5, 4, -5];\nmy $x4 = below_zero($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1, -2, 2, -2, 5, -5, 4, -4];\nmy $x5 = below_zero($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/4", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# For a given list of input numbers, calculate Mean Absolute Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each\n# element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n# 1.0\n#\nsub mean_absolute_deviation\n{\n  my ($numbers) = @_;\n", "entry_point": "mean_absolute_deviation", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1.0, 2.0, 3.0];\nmy $x0 = mean_absolute_deviation($arg00);\nmy $v0 = 0.6666666666666666;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1.0, 2.0, 3.0, 4.0];\nmy $x1 = mean_absolute_deviation($arg10);\nmy $v1 = 1.0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1.0, 2.0, 3.0, 4.0, 5.0];\nmy $x2 = mean_absolute_deviation($arg20);\nmy $v2 = 1.2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/5", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n# >>> intersperse([], 4)\n# []\n# >>> intersperse([1, 2, 3], 4)\n# [1, 4, 2, 4, 3]\n#\nsub intersperse\n{\n  my ($numbers, $delimeter) = @_;\n", "entry_point": "intersperse", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $arg01 = 7;\nmy $x0 = intersperse($arg00, $arg01);\nmy $v0 = [];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 6, 3, 2];\nmy $arg11 = 8;\nmy $x1 = intersperse($arg10, $arg11);\nmy $v1 = [5, 8, 6, 8, 3, 8, 2];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 2, 2];\nmy $arg21 = 2;\nmy $x2 = intersperse($arg20, $arg21);\nmy $v2 = [2, 2, 2, 2, 2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/6", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\nsub parse_nested_parens\n{\n  my ($paren_string) = @_;\n", "entry_point": "parse_nested_parens", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"(()()) ((())) () ((())()())\";\nmy $x0 = parse_nested_parens($arg00);\nmy $v0 = [2, 3, 1, 3];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"() (()) ((())) (((())))\";\nmy $x1 = parse_nested_parens($arg10);\nmy $v1 = [1, 2, 3, 4];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"(()(())((())))\";\nmy $x2 = parse_nested_parens($arg20);\nmy $v2 = [4];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/7", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\n#\nsub filter_by_substring\n{\n  my ($strings, $substring) = @_;\n", "entry_point": "filter_by_substring", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $arg01 = \"john\";\nmy $x0 = filter_by_substring($arg00, $arg01);\nmy $v0 = [];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"];\nmy $arg11 = \"xxx\";\nmy $x1 = filter_by_substring($arg10, $arg11);\nmy $v1 = [\"xxx\", \"xxxAAA\", \"xxx\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"];\nmy $arg21 = \"xx\";\nmy $x2 = filter_by_substring($arg20, $arg21);\nmy $v2 = [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"];\nmy $arg31 = \"run\";\nmy $x3 = filter_by_substring($arg30, $arg31);\nmy $v3 = [\"grunt\", \"prune\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/8", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n# Empty sum should be equal to 0 and empty product should be equal to 1.\n# >>> sum_product([])\n# (0, 1)\n# >>> sum_product([1, 2, 3, 4])\n# (10, 24)\n#\nsub sum_product\n{\n  my ($numbers) = @_;\n", "entry_point": "sum_product", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = sum_product($arg00);\nmy $v0 = [0, 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 1, 1];\nmy $x1 = sum_product($arg10);\nmy $v1 = [3, 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [100, 0];\nmy $x2 = sum_product($arg20);\nmy $v2 = [100, 0];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [3, 5, 7];\nmy $x3 = sum_product($arg30);\nmy $v3 = [15, 105];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [10];\nmy $x4 = sum_product($arg40);\nmy $v4 = [10, 10];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/9", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# From a given list of integers, generate a list of rolling maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\nsub rolling_max\n{\n  my ($numbers) = @_;\n", "entry_point": "rolling_max", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = rolling_max($arg00);\nmy $v0 = [];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4];\nmy $x1 = rolling_max($arg10);\nmy $v1 = [1, 2, 3, 4];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [4, 3, 2, 1];\nmy $x2 = rolling_max($arg20);\nmy $v2 = [4, 4, 4, 4];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [3, 2, 3, 100, 3];\nmy $x3 = rolling_max($arg30);\nmy $v3 = [3, 3, 3, 100, 100];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/10", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> make_palindrome('')\n# ''\n# >>> make_palindrome('cat')\n# 'catac'\n# >>> make_palindrome('cata')\n# 'catac'\n#\nsub make_palindrome\n{\n  my ($string) = @_;\n", "entry_point": "make_palindrome", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = make_palindrome($arg00);\nmy $v0 = \"\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"x\";\nmy $x1 = make_palindrome($arg10);\nmy $v1 = \"x\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"xyz\";\nmy $x2 = make_palindrome($arg20);\nmy $v2 = \"xyzyx\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"xyx\";\nmy $x3 = make_palindrome($arg30);\nmy $v3 = \"xyx\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"jerry\";\nmy $x4 = make_palindrome($arg40);\nmy $v4 = \"jerryrrej\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/11", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> string_xor('010', '110')\n# '100'\n#\nsub string_xor\n{\n  my ($a, $b) = @_;\n", "entry_point": "string_xor", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"111000\";\nmy $arg01 = \"101010\";\nmy $x0 = string_xor($arg00, $arg01);\nmy $v0 = \"010010\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"1\";\nmy $arg11 = \"1\";\nmy $x1 = string_xor($arg10, $arg11);\nmy $v1 = \"0\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"0101\";\nmy $arg21 = \"0000\";\nmy $x2 = string_xor($arg20, $arg21);\nmy $v2 = \"0101\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/12", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Out of list of strings, return the longest one. Return the first one in case of multiple\n# strings of the same length. Return \"none\" in case the input list is empty.\n# >>> longest([])\n\n# >>> longest(['a', 'b', 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\nsub longest\n{\n  my ($strings) = @_;\n", "entry_point": "longest", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = longest($arg00);\nmy $v0 = \"none\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"x\", \"y\", \"z\"];\nmy $x1 = longest($arg10);\nmy $v1 = \"x\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"];\nmy $x2 = longest($arg20);\nmy $v2 = \"zzzz\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return \"none\" in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/13", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3, 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\n#\nsub greatest_common_divisor\n{\n  my ($a, $b) = @_;\n", "entry_point": "greatest_common_divisor", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 7;\nmy $x0 = greatest_common_divisor($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = 15;\nmy $x1 = greatest_common_divisor($arg10, $arg11);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 49;\nmy $arg21 = 14;\nmy $x2 = greatest_common_divisor($arg20, $arg21);\nmy $v2 = 7;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 144;\nmy $arg31 = 60;\nmy $x3 = greatest_common_divisor($arg30, $arg31);\nmy $v3 = 12;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/14", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Return list of all prefixes from shortest to longest of the input string\n# >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\n#\nsub all_prefixes\n{\n  my ($string) = @_;\n", "entry_point": "all_prefixes", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = all_prefixes($arg00);\nmy $v0 = [];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"asdfgh\";\nmy $x1 = all_prefixes($arg10);\nmy $v1 = [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"WWW\";\nmy $x2 = all_prefixes($arg20);\nmy $v2 = [\"W\", \"WW\", \"WWW\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/15", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n# >>> string_sequence(0)\n# '0'\n# >>> string_sequence(5)\n# '0 1 2 3 4 5'\n#\nsub string_sequence\n{\n  my ($n) = @_;\n", "entry_point": "string_sequence", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 0;\nmy $x0 = string_sequence($arg00);\nmy $v0 = \"0\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $x1 = string_sequence($arg10);\nmy $v1 = \"0 1 2 3\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $x2 = string_sequence($arg20);\nmy $v2 = \"0 1 2 3 4 5 6 7 8 9 10\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/16", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> count_distinct_characters('xyzXYZ')\n# 3\n# >>> count_distinct_characters('Jerry')\n# 4\n#\nsub count_distinct_characters\n{\n  my ($string) = @_;\n", "entry_point": "count_distinct_characters", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = count_distinct_characters($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcde\";\nmy $x1 = count_distinct_characters($arg10);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abcdecadeCADE\";\nmy $x2 = count_distinct_characters($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"aaaaAAAAaaaa\";\nmy $x3 = count_distinct_characters($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"Jerry jERRY JeRRRY\";\nmy $x4 = count_distinct_characters($arg40);\nmy $v4 = 5;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/17", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return list of integers corresponding to how many beats does each\n# not last.\n\n# Here is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|' - quater note, lasts one beat\n\n# >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n#\nsub parse_music\n{\n  my ($music_string) = @_;\n", "entry_point": "parse_music", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = parse_music($arg00);\nmy $v0 = [];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"o o o o\";\nmy $x1 = parse_music($arg10);\nmy $v1 = [4, 4, 4, 4];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \".| .| .| .|\";\nmy $x2 = parse_music($arg20);\nmy $v2 = [1, 1, 1, 1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"o| o| .| .| o o o o\";\nmy $x3 = parse_music($arg30);\nmy $v3 = [2, 2, 1, 1, 4, 4, 4, 4];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"o| .| o| .| o o| o o|\";\nmy $x4 = parse_music($arg40);\nmy $v4 = [2, 1, 2, 1, 4, 2, 4, 2];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/18", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n#\nsub how_many_times\n{\n  my ($string, $substring) = @_;\n", "entry_point": "how_many_times", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $arg01 = \"x\";\nmy $x0 = how_many_times($arg00, $arg01);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"xyxyxyx\";\nmy $arg11 = \"x\";\nmy $x1 = how_many_times($arg10, $arg11);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"cacacacac\";\nmy $arg21 = \"cac\";\nmy $x2 = how_many_times($arg20, $arg21);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"john doe\";\nmy $arg31 = \"john\";\nmy $x3 = how_many_times($arg30, $arg31);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/19", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to largest\n# >>> sort_numbers('three one five')\n# 'one three five'\n#\nsub sort_numbers\n{\n  my ($numbers) = @_;\n", "entry_point": "sort_numbers", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = sort_numbers($arg00);\nmy $v0 = \"\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"three\";\nmy $x1 = sort_numbers($arg10);\nmy $v1 = \"three\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"three five nine\";\nmy $x2 = sort_numbers($arg20);\nmy $v2 = \"three five nine\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"five zero four seven nine eight\";\nmy $x3 = sort_numbers($arg30);\nmy $v3 = \"zero four five seven eight nine\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"six five four three two one zero\";\nmy $x4 = sort_numbers($arg40);\nmy $v4 = \"zero one two three four five six\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/20", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n# (2.0, 2.0)\n#\nsub find_closest_elements\n{\n  my ($numbers) = @_;\n", "entry_point": "find_closest_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1.0, 2.0, 3.9, 4.0, 5.0, 2.2];\nmy $x0 = find_closest_elements($arg00);\nmy $v0 = [3.9, 4.0];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1.0, 2.0, 5.9, 4.0, 5.0];\nmy $x1 = find_closest_elements($arg10);\nmy $v1 = [5.0, 5.9];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2];\nmy $x2 = find_closest_elements($arg20);\nmy $v2 = [2.0, 2.2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0];\nmy $x3 = find_closest_elements($arg30);\nmy $v3 = [2.0, 2.0];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1.1, 2.2, 3.1, 4.1, 5.1];\nmy $x4 = find_closest_elements($arg40);\nmy $v4 = [2.2, 3.1];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/21", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Given list of numbers (of at least two elements), apply a linear transform to that list,\n# such that the smallest number will become 0 and the largest will become 1\n# >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0, 0.25, 0.5, 0.75, 1.0]\n#\nsub rescale_to_unit\n{\n  my ($numbers) = @_;\n", "entry_point": "rescale_to_unit", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2.0, 49.9];\nmy $x0 = rescale_to_unit($arg00);\nmy $v0 = [0.0, 1.0];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [100.0, 49.9];\nmy $x1 = rescale_to_unit($arg10);\nmy $v1 = [1.0, 0.0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1.0, 2.0, 3.0, 4.0, 5.0];\nmy $x2 = rescale_to_unit($arg20);\nmy $v2 = [0.0, 0.25, 0.5, 0.75, 1.0];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [2.0, 1.0, 5.0, 3.0, 4.0];\nmy $x3 = rescale_to_unit($arg30);\nmy $v3 = [0.25, 0.0, 1.0, 0.5, 0.75];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [12.0, 11.0, 15.0, 13.0, 14.0];\nmy $x4 = rescale_to_unit($arg40);\nmy $v4 = [0.25, 0.0, 1.0, 0.5, 0.75];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/22", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Filter given list of any Perl values only for integers\n# >>> filter_integers(['a', 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2, 3]\n#\nsub filter_integers\n{\n  my ($values) = @_;\n", "entry_point": "filter_integers", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = filter_integers($arg00);\nmy $v0 = [];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, {}, [], 23.2, 9, \"adasd\"];\nmy $x1 = filter_integers($arg10);\nmy $v1 = [4, 9];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, \"c\", 3, 3, \"a\", \"b\"];\nmy $x2 = filter_integers($arg20);\nmy $v2 = [3, 3, 3];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Filter given list of any Perl values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/23", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Return length of given string\n# >>> strlen('')\n# 0\n# >>> strlen('abc')\n# 3\n#\nsub strlen\n{\n  my ($string) = @_;\n", "entry_point": "strlen", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = strlen($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"x\";\nmy $x1 = strlen($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"asdasnakj\";\nmy $x2 = strlen($arg20);\nmy $v2 = 9;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/24", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> largest_divisor(15)\n# 5\n#\nsub largest_divisor\n{\n  my ($n) = @_;\n", "entry_point": "largest_divisor", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $x0 = largest_divisor($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 7;\nmy $x1 = largest_divisor($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $x2 = largest_divisor($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 100;\nmy $x3 = largest_divisor($arg30);\nmy $v3 = 50;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 49;\nmy $x4 = largest_divisor($arg40);\nmy $v4 = 7;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/25", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Return list of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n# Input number should be equal to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n#\nsub factorize\n{\n  my ($n) = @_;\n", "entry_point": "factorize", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = factorize($arg00);\nmy $v0 = [2];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = factorize($arg10);\nmy $v1 = [2, 2];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 8;\nmy $x2 = factorize($arg20);\nmy $v2 = [2, 2, 2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 57;\nmy $x3 = factorize($arg30);\nmy $v3 = [3, 19];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 3249;\nmy $x4 = factorize($arg40);\nmy $v4 = [3, 3, 19, 19];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 185193;\nmy $x5 = factorize($arg50);\nmy $v5 = [3, 3, 3, 19, 19, 19];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 20577;\nmy $x6 = factorize($arg60);\nmy $v6 = [3, 19, 19, 19];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 18;\nmy $x7 = factorize($arg70);\nmy $v7 = [2, 3, 3];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/26", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# From a list of integers, remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\nsub remove_duplicates\n{\n  my ($numbers) = @_;\n", "entry_point": "remove_duplicates", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = remove_duplicates($arg00);\nmy $v0 = [];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4];\nmy $x1 = remove_duplicates($arg10);\nmy $v1 = [1, 2, 3, 4];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 2, 4, 3, 5];\nmy $x2 = remove_duplicates($arg20);\nmy $v2 = [1, 4, 5];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/27", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n# >>> flip_case('Hello')\n# 'hELLO'\n#\nsub flip_case\n{\n  my ($string) = @_;\n", "entry_point": "flip_case", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = flip_case($arg00);\nmy $v0 = \"\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Hello!\";\nmy $x1 = flip_case($arg10);\nmy $v1 = \"hELLO!\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"These violent delights have violent ends\";\nmy $x2 = flip_case($arg20);\nmy $v2 = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/28", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Concatenate list of strings into a single string\n# >>> concatenate([])\n# ''\n# >>> concatenate(['a', 'b', 'c'])\n# 'abc'\n#\nsub concatenate\n{\n  my ($strings) = @_;\n", "entry_point": "concatenate", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = concatenate($arg00);\nmy $v0 = \"\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"x\", \"y\", \"z\"];\nmy $x1 = concatenate($arg10);\nmy $v1 = \"xyz\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"x\", \"y\", \"z\", \"w\", \"k\"];\nmy $x2 = concatenate($arg20);\nmy $v2 = \"xyzwk\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/29", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Filter an input list of strings only for ones that start with a given prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\n#\nsub filter_by_prefix\n{\n  my ($strings, $prefix) = @_;\n", "entry_point": "filter_by_prefix", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $arg01 = \"john\";\nmy $x0 = filter_by_prefix($arg00, $arg01);\nmy $v0 = [];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"];\nmy $arg11 = \"xxx\";\nmy $x1 = filter_by_prefix($arg10, $arg11);\nmy $v1 = [\"xxx\", \"xxxAAA\", \"xxx\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\n", "description": "Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/30", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Return only positive numbers in the list.\n# >>> get_positive([-1, 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\nsub get_positive\n{\n  my ($l) = @_;\n", "entry_point": "get_positive", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [-1, -2, 4, 5, 6];\nmy $x0 = get_positive($arg00);\nmy $v0 = [4, 5, 6];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10];\nmy $x1 = get_positive($arg10);\nmy $v1 = [5, 3, 2, 3, 3, 9, 123, 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [-1, -2];\nmy $x2 = get_positive($arg20);\nmy $v2 = [];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [];\nmy $x3 = get_positive($arg30);\nmy $v3 = [];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/31", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Return true if a given number is prime, and false otherwise.\n# >>> is_prime(6)\n# False\n# >>> is_prime(101)\n# True\n# >>> is_prime(11)\n# True\n# >>> is_prime(13441)\n# True\n# >>> is_prime(61)\n# True\n# >>> is_prime(4)\n# False\n# >>> is_prime(1)\n# False\n#\nsub is_prime\n{\n  my ($n) = @_;\n", "entry_point": "is_prime", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 6;\nmy $x0 = is_prime($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 101;\nmy $x1 = is_prime($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 11;\nmy $x2 = is_prime($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 13441;\nmy $x3 = is_prime($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 61;\nmy $x4 = is_prime($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 4;\nmy $x5 = is_prime($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 1;\nmy $x6 = is_prime($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 5;\nmy $x7 = is_prime($arg70);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 11;\nmy $x8 = is_prime($arg80);\nmy $v8 = 1;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 17;\nmy $x9 = is_prime($arg90);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = 85;\nmy $x10 = is_prime($arg100);\nmy $v10 = 0;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = 77;\nmy $x11 = is_prime($arg110);\nmy $v11 = 0;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = 255379;\nmy $x12 = is_prime($arg120);\nmy $v12 = 0;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\n", "description": "Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/33", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n# to the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1, 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4, 8, 9, 5]\n#\nsub sort_third\n{\n  my ($l) = @_;\n", "entry_point": "sort_third", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $x0 = sort_third($arg00);\nmy $v0 = [1, 2, 3];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10];\nmy $x1 = sort_third($arg10);\nmy $v1 = [1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [5, 8, -12, 4, 23, 2, 3, 11, 12, -10];\nmy $x2 = sort_third($arg20);\nmy $v2 = [-10, 8, -12, 3, 23, 2, 4, 11, 12, 5];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [5, 6, 3, 4, 8, 9, 2];\nmy $x3 = sort_third($arg30);\nmy $v3 = [2, 6, 3, 4, 8, 9, 5];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [5, 8, 3, 4, 6, 9, 2];\nmy $x4 = sort_third($arg40);\nmy $v4 = [2, 8, 3, 4, 6, 9, 5];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [5, 6, 9, 4, 8, 3, 2];\nmy $x5 = sort_third($arg50);\nmy $v5 = [2, 6, 9, 4, 8, 3, 5];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [5, 6, 3, 4, 8, 9, 2, 1];\nmy $x6 = sort_third($arg60);\nmy $v6 = [2, 6, 3, 4, 8, 9, 5, 1];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/34", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\n#\nsub unique\n{\n  my ($l) = @_;\n", "entry_point": "unique", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 3, 5, 2, 3, 3, 9, 0, 123];\nmy $x0 = unique($arg00);\nmy $v0 = [0, 2, 3, 5, 9, 123];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\n", "description": "Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/35", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Return maximum element in the list.\n# >>> max_element([1, 2, 3])\n# 3\n# >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# 123\n#\nsub max_element\n{\n  my ($l) = @_;\n", "entry_point": "max_element", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $x0 = max_element($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10];\nmy $x1 = max_element($arg10);\nmy $v1 = 124;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\n", "description": "Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/36", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> fizz_buzz(50)\n# 0\n# >>> fizz_buzz(78)\n# 2\n# >>> fizz_buzz(79)\n# 3\n#\nsub fizz_buzz\n{\n  my ($n) = @_;\n", "entry_point": "fizz_buzz", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 50;\nmy $x0 = fizz_buzz($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 78;\nmy $x1 = fizz_buzz($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 79;\nmy $x2 = fizz_buzz($arg20);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 100;\nmy $x3 = fizz_buzz($arg30);\nmy $v3 = 3;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 200;\nmy $x4 = fizz_buzz($arg40);\nmy $v4 = 6;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 4000;\nmy $x5 = fizz_buzz($arg50);\nmy $v5 = 192;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 10000;\nmy $x6 = fizz_buzz($arg60);\nmy $v6 = 639;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 100000;\nmy $x7 = fizz_buzz($arg70);\nmy $v7 = 8026;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/37", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the odd indicies, while its values at the even indicies are equal\n# to the values of the even indicies of l, but sorted.\n# >>> sort_even([1, 2, 3])\n# [1, 2, 3]\n# >>> sort_even([5, 6, 3, 4])\n# [3, 6, 5, 4]\n#\nsub sort_even\n{\n  my ($l) = @_;\n", "entry_point": "sort_even", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $x0 = sort_even($arg00);\nmy $v0 = [1, 2, 3];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10];\nmy $x1 = sort_even($arg10);\nmy $v1 = [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [5, 8, -12, 4, 23, 2, 3, 11, 12, -10];\nmy $x2 = sort_even($arg20);\nmy $v2 = [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/39", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n# 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\n#\nsub prime_fib\n{\n  my ($n) = @_;\n", "entry_point": "prime_fib", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $x0 = prime_fib($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = prime_fib($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $x2 = prime_fib($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 4;\nmy $x3 = prime_fib($arg30);\nmy $v3 = 13;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 5;\nmy $x4 = prime_fib($arg40);\nmy $v4 = 89;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 6;\nmy $x5 = prime_fib($arg50);\nmy $v5 = 233;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 7;\nmy $x6 = prime_fib($arg60);\nmy $v6 = 1597;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 8;\nmy $x7 = prime_fib($arg70);\nmy $v7 = 28657;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 9;\nmy $x8 = prime_fib($arg80);\nmy $v8 = 514229;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 10;\nmy $x9 = prime_fib($arg90);\nmy $v9 = 433494437;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/40", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # triples_sum_to_zero takes a list of integers as an input.\n# it returns True if there are three distinct elements in the list that\n# sum to zero, and False otherwise.\n\n# >>> triples_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> triples_sum_to_zero([1, 3, -2, 1])\n# True\n# >>> triples_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n# True\n# >>> triples_sum_to_zero([1])\n# False\n#\nsub triples_sum_to_zero\n{\n  my ($l) = @_;\n", "entry_point": "triples_sum_to_zero", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 5, 0];\nmy $x0 = triples_sum_to_zero($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 3, 5, -1];\nmy $x1 = triples_sum_to_zero($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, -2, 1];\nmy $x2 = triples_sum_to_zero($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, 2, 3, 7];\nmy $x3 = triples_sum_to_zero($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 2, 5, 7];\nmy $x4 = triples_sum_to_zero($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [2, 4, -5, 3, 9, 7];\nmy $x5 = triples_sum_to_zero($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [1];\nmy $x6 = triples_sum_to_zero($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [1, 3, 5, -100];\nmy $x7 = triples_sum_to_zero($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [100, 3, 5, -100];\nmy $x8 = triples_sum_to_zero($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/41", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n\n# This function outputs the number of such collisions.\n#\nsub car_race_collision\n{\n  my ($n) = @_;\n", "entry_point": "car_race_collision", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = car_race_collision($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $x1 = car_race_collision($arg10);\nmy $v1 = 9;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $x2 = car_race_collision($arg20);\nmy $v2 = 16;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 8;\nmy $x3 = car_race_collision($arg30);\nmy $v3 = 64;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 10;\nmy $x4 = car_race_collision($arg40);\nmy $v4 = 100;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/42", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Return list with elements incremented by 1.\n# >>> incr_list([1, 2, 3])\n# [2, 3, 4]\n# >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [6, 4, 6, 3, 4, 4, 10, 1, 124]\n#\nsub incr_list\n{\n  my ($l) = @_;\n", "entry_point": "incr_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = incr_list($arg00);\nmy $v0 = [];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [3, 2, 1];\nmy $x1 = incr_list($arg10);\nmy $v1 = [4, 3, 2];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [5, 2, 5, 2, 3, 3, 9, 0, 123];\nmy $x2 = incr_list($arg20);\nmy $v2 = [6, 3, 6, 3, 4, 4, 10, 1, 124];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/43", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # pairs_sum_to_zero takes a list of integers as an input.\n# it returns True if there are two distinct elements in the list that\n# sum to zero, and False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1, 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\n#\nsub pairs_sum_to_zero\n{\n  my ($l) = @_;\n", "entry_point": "pairs_sum_to_zero", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 5, 0];\nmy $x0 = pairs_sum_to_zero($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 3, -2, 1];\nmy $x1 = pairs_sum_to_zero($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 7];\nmy $x2 = pairs_sum_to_zero($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [2, 4, -5, 3, 5, 7];\nmy $x3 = pairs_sum_to_zero($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1];\nmy $x4 = pairs_sum_to_zero($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [-3, 9, -1, 3, 2, 30];\nmy $x5 = pairs_sum_to_zero($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [-3, 9, -1, 3, 2, 31];\nmy $x6 = pairs_sum_to_zero($arg60);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [-3, 9, -1, 4, 2, 30];\nmy $x7 = pairs_sum_to_zero($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [-3, 9, -1, 4, 2, 31];\nmy $x8 = pairs_sum_to_zero($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/44", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Change numerical base of input number x to base.\n# return string representation after the conversion.\n# base numbers are less than 10.\n# >>> change_base(8, 3)\n# '22'\n# >>> change_base(8, 2)\n# '1000'\n# >>> change_base(7, 2)\n# '111'\n#\nsub change_base\n{\n  my ($x, $base) = @_;\n", "entry_point": "change_base", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 8;\nmy $arg01 = 3;\nmy $x0 = change_base($arg00, $arg01);\nmy $v0 = \"22\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 9;\nmy $arg11 = 3;\nmy $x1 = change_base($arg10, $arg11);\nmy $v1 = \"100\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 234;\nmy $arg21 = 2;\nmy $x2 = change_base($arg20, $arg21);\nmy $v2 = \"11101010\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 16;\nmy $arg31 = 2;\nmy $x3 = change_base($arg30, $arg31);\nmy $v3 = \"10000\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 8;\nmy $arg41 = 2;\nmy $x4 = change_base($arg40, $arg41);\nmy $v4 = \"1000\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 7;\nmy $arg51 = 2;\nmy $x5 = change_base($arg50, $arg51);\nmy $v5 = \"111\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 2;\nmy $arg61 = 3;\nmy $x6 = change_base($arg60, $arg61);\nmy $v6 = \"2\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 3;\nmy $arg71 = 4;\nmy $x7 = change_base($arg70, $arg71);\nmy $v7 = \"3\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 4;\nmy $arg81 = 5;\nmy $x8 = change_base($arg80, $arg81);\nmy $v8 = \"4\";\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 5;\nmy $arg91 = 6;\nmy $x9 = change_base($arg90, $arg91);\nmy $v9 = \"5\";\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = 6;\nmy $arg101 = 7;\nmy $x10 = change_base($arg100, $arg101);\nmy $v10 = \"6\";\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = 7;\nmy $arg111 = 8;\nmy $x11 = change_base($arg110, $arg111);\nmy $v11 = \"7\";\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\n", "description": "Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/45", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Given length of a side and high return area for a triangle.\n# >>> triangle_area(5, 3)\n# 7.5\n#\nsub triangle_area\n{\n  my ($a, $h) = @_;\n", "entry_point": "triangle_area", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $arg01 = 3;\nmy $x0 = triangle_area($arg00, $arg01);\nmy $v0 = 7.5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $arg11 = 2;\nmy $x1 = triangle_area($arg10, $arg11);\nmy $v1 = 2.0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $arg21 = 8;\nmy $x2 = triangle_area($arg20, $arg21);\nmy $v2 = 40.0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/46", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n# 8\n# >>> fib4(7)\n# 14\n#\nsub fib4\n{\n  my ($n) = @_;\n", "entry_point": "fib4", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = fib4($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 8;\nmy $x1 = fib4($arg10);\nmy $v1 = 28;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $x2 = fib4($arg20);\nmy $v2 = 104;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 12;\nmy $x3 = fib4($arg30);\nmy $v3 = 386;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/47", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\nsub median\n{\n  my ($l) = @_;\n", "entry_point": "median", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 1, 2, 4, 5];\nmy $x0 = median($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [-10, 4, 6, 1000, 10, 20];\nmy $x1 = median($arg10);\nmy $v1 = 8.0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [5];\nmy $x2 = median($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [6, 5];\nmy $x3 = median($arg30);\nmy $v3 = 5.5;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [8, 1, 3, 9, 9, 2, 7];\nmy $x4 = median($arg40);\nmy $v4 = 7;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/48", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Checks if given string is a palindrome\n# >>> is_palindrome('')\n# True\n# >>> is_palindrome('aba')\n# True\n# >>> is_palindrome('aaaaa')\n# True\n# >>> is_palindrome('zbcd')\n# False\n#\nsub is_palindrome\n{\n  my ($text) = @_;\n", "entry_point": "is_palindrome", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = is_palindrome($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"aba\";\nmy $x1 = is_palindrome($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"aaaaa\";\nmy $x2 = is_palindrome($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"zbcd\";\nmy $x3 = is_palindrome($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"xywyx\";\nmy $x4 = is_palindrome($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"xywyz\";\nmy $x5 = is_palindrome($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"xywzx\";\nmy $x6 = is_palindrome($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/49", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n# >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n# >>> modp(100, 101)\n# 1\n#\nsub modp\n{\n  my ($n, $p) = @_;\n", "entry_point": "modp", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 5;\nmy $x0 = modp($arg00, $arg01);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1101;\nmy $arg11 = 101;\nmy $x1 = modp($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 0;\nmy $arg21 = 101;\nmy $x2 = modp($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 3;\nmy $arg31 = 11;\nmy $x3 = modp($arg30, $arg31);\nmy $v3 = 8;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 100;\nmy $arg41 = 101;\nmy $x4 = modp($arg40, $arg41);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 30;\nmy $arg51 = 5;\nmy $x5 = modp($arg50, $arg51);\nmy $v5 = 4;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 31;\nmy $arg61 = 5;\nmy $x6 = modp($arg60, $arg61);\nmy $v6 = 3;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/51", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # remove_vowels is a function that takes string and returns string without vowels.\n# >>> remove_vowels('')\n# ''\n# >>> remove_vowels(\"abcdef\\nghijklm\")\n# 'bcdf\\nghjklm'\n# >>> remove_vowels('abcdef')\n# 'bcdf'\n# >>> remove_vowels('aaaaa')\n# ''\n# >>> remove_vowels('aaBAA')\n# 'B'\n# >>> remove_vowels('zbcd')\n# 'zbcd'\n#\nsub remove_vowels\n{\n  my ($text) = @_;\n", "entry_point": "remove_vowels", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = remove_vowels($arg00);\nmy $v0 = \"\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcdef\\nghijklm\";\nmy $x1 = remove_vowels($arg10);\nmy $v1 = \"bcdf\\nghjklm\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"fedcba\";\nmy $x2 = remove_vowels($arg20);\nmy $v2 = \"fdcb\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"eeeee\";\nmy $x3 = remove_vowels($arg30);\nmy $v3 = \"\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"acBAA\";\nmy $x4 = remove_vowels($arg40);\nmy $v4 = \"cB\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"EcBOO\";\nmy $x5 = remove_vowels($arg50);\nmy $v5 = \"cB\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"ybcd\";\nmy $x6 = remove_vowels($arg60);\nmy $v6 = \"ybcd\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/52", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Return True if all numbers in the list l are below threshold t.\n# >>> below_threshold([1, 2, 4, 10], 100)\n# True\n# >>> below_threshold([1, 20, 4, 10], 5)\n# False\n#\nsub below_threshold\n{\n  my ($l, $t) = @_;\n", "entry_point": "below_threshold", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 4, 10];\nmy $arg01 = 100;\nmy $x0 = below_threshold($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 20, 4, 10];\nmy $arg11 = 5;\nmy $x1 = below_threshold($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 20, 4, 10];\nmy $arg21 = 21;\nmy $x2 = below_threshold($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, 20, 4, 10];\nmy $arg31 = 22;\nmy $x3 = below_threshold($arg30, $arg31);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 8, 4, 10];\nmy $arg41 = 11;\nmy $x4 = below_threshold($arg40, $arg41);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1, 8, 4, 10];\nmy $arg51 = 10;\nmy $x5 = below_threshold($arg50, $arg51);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/53", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n#\nsub add\n{\n  my ($x, $y) = @_;\n", "entry_point": "add", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 0;\nmy $arg01 = 1;\nmy $x0 = add($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 0;\nmy $x1 = add($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $arg21 = 3;\nmy $x2 = add($arg20, $arg21);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 5;\nmy $arg31 = 7;\nmy $x3 = add($arg30, $arg31);\nmy $v3 = 12;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 7;\nmy $arg41 = 5;\nmy $x4 = add($arg40, $arg41);\nmy $v4 = 12;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 572;\nmy $arg51 = 725;\nmy $x5 = add($arg50, $arg51);\nmy $v5 = 1297;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 51;\nmy $arg61 = 804;\nmy $x6 = add($arg60, $arg61);\nmy $v6 = 855;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 645;\nmy $arg71 = 96;\nmy $x7 = add($arg70, $arg71);\nmy $v7 = 741;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 712;\nmy $arg81 = 853;\nmy $x8 = add($arg80, $arg81);\nmy $v8 = 1565;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 223;\nmy $arg91 = 101;\nmy $x9 = add($arg90, $arg91);\nmy $v9 = 324;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = 76;\nmy $arg101 = 29;\nmy $x10 = add($arg100, $arg101);\nmy $v10 = 105;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = 416;\nmy $arg111 = 149;\nmy $x11 = add($arg110, $arg111);\nmy $v11 = 565;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = 145;\nmy $arg121 = 409;\nmy $x12 = add($arg120, $arg121);\nmy $v12 = 554;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = 535;\nmy $arg131 = 430;\nmy $x13 = add($arg130, $arg131);\nmy $v13 = 965;\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\nmy $arg140 = 118;\nmy $arg141 = 303;\nmy $x14 = add($arg140, $arg141);\nmy $v14 = 421;\nunless(Compare($x14, $v14)) {\n    die \"Exception -- test case 14 did not pass.\";\n}\nmy $arg150 = 287;\nmy $arg151 = 94;\nmy $x15 = add($arg150, $arg151);\nmy $v15 = 381;\nunless(Compare($x15, $v15)) {\n    die \"Exception -- test case 15 did not pass.\";\n}\nmy $arg160 = 768;\nmy $arg161 = 257;\nmy $x16 = add($arg160, $arg161);\nmy $v16 = 1025;\nunless(Compare($x16, $v16)) {\n    die \"Exception -- test case 16 did not pass.\";\n}\nmy $arg170 = 421;\nmy $arg171 = 677;\nmy $x17 = add($arg170, $arg171);\nmy $v17 = 1098;\nunless(Compare($x17, $v17)) {\n    die \"Exception -- test case 17 did not pass.\";\n}\nmy $arg180 = 802;\nmy $arg181 = 814;\nmy $x18 = add($arg180, $arg181);\nmy $v18 = 1616;\nunless(Compare($x18, $v18)) {\n    die \"Exception -- test case 18 did not pass.\";\n}\nmy $arg190 = 510;\nmy $arg191 = 922;\nmy $x19 = add($arg190, $arg191);\nmy $v19 = 1432;\nunless(Compare($x19, $v19)) {\n    die \"Exception -- test case 19 did not pass.\";\n}\nmy $arg200 = 345;\nmy $arg201 = 819;\nmy $x20 = add($arg200, $arg201);\nmy $v20 = 1164;\nunless(Compare($x20, $v20)) {\n    die \"Exception -- test case 20 did not pass.\";\n}\nmy $arg210 = 895;\nmy $arg211 = 436;\nmy $x21 = add($arg210, $arg211);\nmy $v21 = 1331;\nunless(Compare($x21, $v21)) {\n    die \"Exception -- test case 21 did not pass.\";\n}\nmy $arg220 = 123;\nmy $arg221 = 424;\nmy $x22 = add($arg220, $arg221);\nmy $v22 = 547;\nunless(Compare($x22, $v22)) {\n    die \"Exception -- test case 22 did not pass.\";\n}\nmy $arg230 = 923;\nmy $arg231 = 245;\nmy $x23 = add($arg230, $arg231);\nmy $v23 = 1168;\nunless(Compare($x23, $v23)) {\n    die \"Exception -- test case 23 did not pass.\";\n}\nmy $arg240 = 23;\nmy $arg241 = 438;\nmy $x24 = add($arg240, $arg241);\nmy $v24 = 461;\nunless(Compare($x24, $v24)) {\n    die \"Exception -- test case 24 did not pass.\";\n}\nmy $arg250 = 565;\nmy $arg251 = 133;\nmy $x25 = add($arg250, $arg251);\nmy $v25 = 698;\nunless(Compare($x25, $v25)) {\n    die \"Exception -- test case 25 did not pass.\";\n}\nmy $arg260 = 945;\nmy $arg261 = 925;\nmy $x26 = add($arg260, $arg261);\nmy $v26 = 1870;\nunless(Compare($x26, $v26)) {\n    die \"Exception -- test case 26 did not pass.\";\n}\nmy $arg270 = 261;\nmy $arg271 = 983;\nmy $x27 = add($arg270, $arg271);\nmy $v27 = 1244;\nunless(Compare($x27, $v27)) {\n    die \"Exception -- test case 27 did not pass.\";\n}\nmy $arg280 = 139;\nmy $arg281 = 577;\nmy $x28 = add($arg280, $arg281);\nmy $v28 = 716;\nunless(Compare($x28, $v28)) {\n    die \"Exception -- test case 28 did not pass.\";\n}\nmy $arg290 = 763;\nmy $arg291 = 178;\nmy $x29 = add($arg290, $arg291);\nmy $v29 = 941;\nunless(Compare($x29, $v29)) {\n    die \"Exception -- test case 29 did not pass.\";\n}\nmy $arg300 = 147;\nmy $arg301 = 892;\nmy $x30 = add($arg300, $arg301);\nmy $v30 = 1039;\nunless(Compare($x30, $v30)) {\n    die \"Exception -- test case 30 did not pass.\";\n}\nmy $arg310 = 436;\nmy $arg311 = 402;\nmy $x31 = add($arg310, $arg311);\nmy $v31 = 838;\nunless(Compare($x31, $v31)) {\n    die \"Exception -- test case 31 did not pass.\";\n}\nmy $arg320 = 610;\nmy $arg321 = 581;\nmy $x32 = add($arg320, $arg321);\nmy $v32 = 1191;\nunless(Compare($x32, $v32)) {\n    die \"Exception -- test case 32 did not pass.\";\n}\nmy $arg330 = 103;\nmy $arg331 = 416;\nmy $x33 = add($arg330, $arg331);\nmy $v33 = 519;\nunless(Compare($x33, $v33)) {\n    die \"Exception -- test case 33 did not pass.\";\n}\nmy $arg340 = 339;\nmy $arg341 = 990;\nmy $x34 = add($arg340, $arg341);\nmy $v34 = 1329;\nunless(Compare($x34, $v34)) {\n    die \"Exception -- test case 34 did not pass.\";\n}\nmy $arg350 = 130;\nmy $arg351 = 504;\nmy $x35 = add($arg350, $arg351);\nmy $v35 = 634;\nunless(Compare($x35, $v35)) {\n    die \"Exception -- test case 35 did not pass.\";\n}\nmy $arg360 = 242;\nmy $arg361 = 717;\nmy $x36 = add($arg360, $arg361);\nmy $v36 = 959;\nunless(Compare($x36, $v36)) {\n    die \"Exception -- test case 36 did not pass.\";\n}\nmy $arg370 = 562;\nmy $arg371 = 110;\nmy $x37 = add($arg370, $arg371);\nmy $v37 = 672;\nunless(Compare($x37, $v37)) {\n    die \"Exception -- test case 37 did not pass.\";\n}\nmy $arg380 = 396;\nmy $arg381 = 909;\nmy $x38 = add($arg380, $arg381);\nmy $v38 = 1305;\nunless(Compare($x38, $v38)) {\n    die \"Exception -- test case 38 did not pass.\";\n}\nmy $arg390 = 887;\nmy $arg391 = 703;\nmy $x39 = add($arg390, $arg391);\nmy $v39 = 1590;\nunless(Compare($x39, $v39)) {\n    die \"Exception -- test case 39 did not pass.\";\n}\nmy $arg400 = 870;\nmy $arg401 = 551;\nmy $x40 = add($arg400, $arg401);\nmy $v40 = 1421;\nunless(Compare($x40, $v40)) {\n    die \"Exception -- test case 40 did not pass.\";\n}\nmy $arg410 = 422;\nmy $arg411 = 391;\nmy $x41 = add($arg410, $arg411);\nmy $v41 = 813;\nunless(Compare($x41, $v41)) {\n    die \"Exception -- test case 41 did not pass.\";\n}\nmy $arg420 = 299;\nmy $arg421 = 505;\nmy $x42 = add($arg420, $arg421);\nmy $v42 = 804;\nunless(Compare($x42, $v42)) {\n    die \"Exception -- test case 42 did not pass.\";\n}\nmy $arg430 = 346;\nmy $arg431 = 56;\nmy $x43 = add($arg430, $arg431);\nmy $v43 = 402;\nunless(Compare($x43, $v43)) {\n    die \"Exception -- test case 43 did not pass.\";\n}\nmy $arg440 = 36;\nmy $arg441 = 706;\nmy $x44 = add($arg440, $arg441);\nmy $v44 = 742;\nunless(Compare($x44, $v44)) {\n    die \"Exception -- test case 44 did not pass.\";\n}\nmy $arg450 = 738;\nmy $arg451 = 411;\nmy $x45 = add($arg450, $arg451);\nmy $v45 = 1149;\nunless(Compare($x45, $v45)) {\n    die \"Exception -- test case 45 did not pass.\";\n}\nmy $arg460 = 679;\nmy $arg461 = 87;\nmy $x46 = add($arg460, $arg461);\nmy $v46 = 766;\nunless(Compare($x46, $v46)) {\n    die \"Exception -- test case 46 did not pass.\";\n}\nmy $arg470 = 25;\nmy $arg471 = 303;\nmy $x47 = add($arg470, $arg471);\nmy $v47 = 328;\nunless(Compare($x47, $v47)) {\n    die \"Exception -- test case 47 did not pass.\";\n}\nmy $arg480 = 161;\nmy $arg481 = 612;\nmy $x48 = add($arg480, $arg481);\nmy $v48 = 773;\nunless(Compare($x48, $v48)) {\n    die \"Exception -- test case 48 did not pass.\";\n}\nmy $arg490 = 306;\nmy $arg491 = 841;\nmy $x49 = add($arg490, $arg491);\nmy $v49 = 1147;\nunless(Compare($x49, $v49)) {\n    die \"Exception -- test case 49 did not pass.\";\n}\nmy $arg500 = 973;\nmy $arg501 = 411;\nmy $x50 = add($arg500, $arg501);\nmy $v50 = 1384;\nunless(Compare($x50, $v50)) {\n    die \"Exception -- test case 50 did not pass.\";\n}\nmy $arg510 = 711;\nmy $arg511 = 157;\nmy $x51 = add($arg510, $arg511);\nmy $v51 = 868;\nunless(Compare($x51, $v51)) {\n    die \"Exception -- test case 51 did not pass.\";\n}\nmy $arg520 = 471;\nmy $arg521 = 27;\nmy $x52 = add($arg520, $arg521);\nmy $v52 = 498;\nunless(Compare($x52, $v52)) {\n    die \"Exception -- test case 52 did not pass.\";\n}\nmy $arg530 = 714;\nmy $arg531 = 792;\nmy $x53 = add($arg530, $arg531);\nmy $v53 = 1506;\nunless(Compare($x53, $v53)) {\n    die \"Exception -- test case 53 did not pass.\";\n}\nmy $arg540 = 38;\nmy $arg541 = 206;\nmy $x54 = add($arg540, $arg541);\nmy $v54 = 244;\nunless(Compare($x54, $v54)) {\n    die \"Exception -- test case 54 did not pass.\";\n}\nmy $arg550 = 907;\nmy $arg551 = 343;\nmy $x55 = add($arg550, $arg551);\nmy $v55 = 1250;\nunless(Compare($x55, $v55)) {\n    die \"Exception -- test case 55 did not pass.\";\n}\nmy $arg560 = 23;\nmy $arg561 = 760;\nmy $x56 = add($arg560, $arg561);\nmy $v56 = 783;\nunless(Compare($x56, $v56)) {\n    die \"Exception -- test case 56 did not pass.\";\n}\nmy $arg570 = 524;\nmy $arg571 = 859;\nmy $x57 = add($arg570, $arg571);\nmy $v57 = 1383;\nunless(Compare($x57, $v57)) {\n    die \"Exception -- test case 57 did not pass.\";\n}\nmy $arg580 = 30;\nmy $arg581 = 529;\nmy $x58 = add($arg580, $arg581);\nmy $v58 = 559;\nunless(Compare($x58, $v58)) {\n    die \"Exception -- test case 58 did not pass.\";\n}\nmy $arg590 = 341;\nmy $arg591 = 691;\nmy $x59 = add($arg590, $arg591);\nmy $v59 = 1032;\nunless(Compare($x59, $v59)) {\n    die \"Exception -- test case 59 did not pass.\";\n}\nmy $arg600 = 167;\nmy $arg601 = 729;\nmy $x60 = add($arg600, $arg601);\nmy $v60 = 896;\nunless(Compare($x60, $v60)) {\n    die \"Exception -- test case 60 did not pass.\";\n}\nmy $arg610 = 636;\nmy $arg611 = 289;\nmy $x61 = add($arg610, $arg611);\nmy $v61 = 925;\nunless(Compare($x61, $v61)) {\n    die \"Exception -- test case 61 did not pass.\";\n}\nmy $arg620 = 503;\nmy $arg621 = 144;\nmy $x62 = add($arg620, $arg621);\nmy $v62 = 647;\nunless(Compare($x62, $v62)) {\n    die \"Exception -- test case 62 did not pass.\";\n}\nmy $arg630 = 51;\nmy $arg631 = 985;\nmy $x63 = add($arg630, $arg631);\nmy $v63 = 1036;\nunless(Compare($x63, $v63)) {\n    die \"Exception -- test case 63 did not pass.\";\n}\nmy $arg640 = 287;\nmy $arg641 = 149;\nmy $x64 = add($arg640, $arg641);\nmy $v64 = 436;\nunless(Compare($x64, $v64)) {\n    die \"Exception -- test case 64 did not pass.\";\n}\nmy $arg650 = 659;\nmy $arg651 = 75;\nmy $x65 = add($arg650, $arg651);\nmy $v65 = 734;\nunless(Compare($x65, $v65)) {\n    die \"Exception -- test case 65 did not pass.\";\n}\nmy $arg660 = 462;\nmy $arg661 = 797;\nmy $x66 = add($arg660, $arg661);\nmy $v66 = 1259;\nunless(Compare($x66, $v66)) {\n    die \"Exception -- test case 66 did not pass.\";\n}\nmy $arg670 = 406;\nmy $arg671 = 141;\nmy $x67 = add($arg670, $arg671);\nmy $v67 = 547;\nunless(Compare($x67, $v67)) {\n    die \"Exception -- test case 67 did not pass.\";\n}\nmy $arg680 = 106;\nmy $arg681 = 44;\nmy $x68 = add($arg680, $arg681);\nmy $v68 = 150;\nunless(Compare($x68, $v68)) {\n    die \"Exception -- test case 68 did not pass.\";\n}\nmy $arg690 = 300;\nmy $arg691 = 934;\nmy $x69 = add($arg690, $arg691);\nmy $v69 = 1234;\nunless(Compare($x69, $v69)) {\n    die \"Exception -- test case 69 did not pass.\";\n}\nmy $arg700 = 471;\nmy $arg701 = 524;\nmy $x70 = add($arg700, $arg701);\nmy $v70 = 995;\nunless(Compare($x70, $v70)) {\n    die \"Exception -- test case 70 did not pass.\";\n}\nmy $arg710 = 122;\nmy $arg711 = 429;\nmy $x71 = add($arg710, $arg711);\nmy $v71 = 551;\nunless(Compare($x71, $v71)) {\n    die \"Exception -- test case 71 did not pass.\";\n}\nmy $arg720 = 735;\nmy $arg721 = 195;\nmy $x72 = add($arg720, $arg721);\nmy $v72 = 930;\nunless(Compare($x72, $v72)) {\n    die \"Exception -- test case 72 did not pass.\";\n}\nmy $arg730 = 335;\nmy $arg731 = 484;\nmy $x73 = add($arg730, $arg731);\nmy $v73 = 819;\nunless(Compare($x73, $v73)) {\n    die \"Exception -- test case 73 did not pass.\";\n}\nmy $arg740 = 28;\nmy $arg741 = 809;\nmy $x74 = add($arg740, $arg741);\nmy $v74 = 837;\nunless(Compare($x74, $v74)) {\n    die \"Exception -- test case 74 did not pass.\";\n}\nmy $arg750 = 430;\nmy $arg751 = 20;\nmy $x75 = add($arg750, $arg751);\nmy $v75 = 450;\nunless(Compare($x75, $v75)) {\n    die \"Exception -- test case 75 did not pass.\";\n}\nmy $arg760 = 916;\nmy $arg761 = 635;\nmy $x76 = add($arg760, $arg761);\nmy $v76 = 1551;\nunless(Compare($x76, $v76)) {\n    die \"Exception -- test case 76 did not pass.\";\n}\nmy $arg770 = 301;\nmy $arg771 = 999;\nmy $x77 = add($arg770, $arg771);\nmy $v77 = 1300;\nunless(Compare($x77, $v77)) {\n    die \"Exception -- test case 77 did not pass.\";\n}\nmy $arg780 = 454;\nmy $arg781 = 466;\nmy $x78 = add($arg780, $arg781);\nmy $v78 = 920;\nunless(Compare($x78, $v78)) {\n    die \"Exception -- test case 78 did not pass.\";\n}\nmy $arg790 = 905;\nmy $arg791 = 259;\nmy $x79 = add($arg790, $arg791);\nmy $v79 = 1164;\nunless(Compare($x79, $v79)) {\n    die \"Exception -- test case 79 did not pass.\";\n}\nmy $arg800 = 168;\nmy $arg801 = 205;\nmy $x80 = add($arg800, $arg801);\nmy $v80 = 373;\nunless(Compare($x80, $v80)) {\n    die \"Exception -- test case 80 did not pass.\";\n}\nmy $arg810 = 570;\nmy $arg811 = 434;\nmy $x81 = add($arg810, $arg811);\nmy $v81 = 1004;\nunless(Compare($x81, $v81)) {\n    die \"Exception -- test case 81 did not pass.\";\n}\nmy $arg820 = 64;\nmy $arg821 = 959;\nmy $x82 = add($arg820, $arg821);\nmy $v82 = 1023;\nunless(Compare($x82, $v82)) {\n    die \"Exception -- test case 82 did not pass.\";\n}\nmy $arg830 = 957;\nmy $arg831 = 510;\nmy $x83 = add($arg830, $arg831);\nmy $v83 = 1467;\nunless(Compare($x83, $v83)) {\n    die \"Exception -- test case 83 did not pass.\";\n}\nmy $arg840 = 722;\nmy $arg841 = 598;\nmy $x84 = add($arg840, $arg841);\nmy $v84 = 1320;\nunless(Compare($x84, $v84)) {\n    die \"Exception -- test case 84 did not pass.\";\n}\nmy $arg850 = 770;\nmy $arg851 = 226;\nmy $x85 = add($arg850, $arg851);\nmy $v85 = 996;\nunless(Compare($x85, $v85)) {\n    die \"Exception -- test case 85 did not pass.\";\n}\nmy $arg860 = 579;\nmy $arg861 = 66;\nmy $x86 = add($arg860, $arg861);\nmy $v86 = 645;\nunless(Compare($x86, $v86)) {\n    die \"Exception -- test case 86 did not pass.\";\n}\nmy $arg870 = 117;\nmy $arg871 = 674;\nmy $x87 = add($arg870, $arg871);\nmy $v87 = 791;\nunless(Compare($x87, $v87)) {\n    die \"Exception -- test case 87 did not pass.\";\n}\nmy $arg880 = 530;\nmy $arg881 = 30;\nmy $x88 = add($arg880, $arg881);\nmy $v88 = 560;\nunless(Compare($x88, $v88)) {\n    die \"Exception -- test case 88 did not pass.\";\n}\nmy $arg890 = 776;\nmy $arg891 = 345;\nmy $x89 = add($arg890, $arg891);\nmy $v89 = 1121;\nunless(Compare($x89, $v89)) {\n    die \"Exception -- test case 89 did not pass.\";\n}\nmy $arg900 = 327;\nmy $arg901 = 389;\nmy $x90 = add($arg900, $arg901);\nmy $v90 = 716;\nunless(Compare($x90, $v90)) {\n    die \"Exception -- test case 90 did not pass.\";\n}\nmy $arg910 = 596;\nmy $arg911 = 12;\nmy $x91 = add($arg910, $arg911);\nmy $v91 = 608;\nunless(Compare($x91, $v91)) {\n    die \"Exception -- test case 91 did not pass.\";\n}\nmy $arg920 = 599;\nmy $arg921 = 511;\nmy $x92 = add($arg920, $arg921);\nmy $v92 = 1110;\nunless(Compare($x92, $v92)) {\n    die \"Exception -- test case 92 did not pass.\";\n}\nmy $arg930 = 936;\nmy $arg931 = 476;\nmy $x93 = add($arg930, $arg931);\nmy $v93 = 1412;\nunless(Compare($x93, $v93)) {\n    die \"Exception -- test case 93 did not pass.\";\n}\nmy $arg940 = 461;\nmy $arg941 = 14;\nmy $x94 = add($arg940, $arg941);\nmy $v94 = 475;\nunless(Compare($x94, $v94)) {\n    die \"Exception -- test case 94 did not pass.\";\n}\nmy $arg950 = 966;\nmy $arg951 = 157;\nmy $x95 = add($arg950, $arg951);\nmy $v95 = 1123;\nunless(Compare($x95, $v95)) {\n    die \"Exception -- test case 95 did not pass.\";\n}\nmy $arg960 = 326;\nmy $arg961 = 91;\nmy $x96 = add($arg960, $arg961);\nmy $v96 = 417;\nunless(Compare($x96, $v96)) {\n    die \"Exception -- test case 96 did not pass.\";\n}\nmy $arg970 = 392;\nmy $arg971 = 455;\nmy $x97 = add($arg970, $arg971);\nmy $v97 = 847;\nunless(Compare($x97, $v97)) {\n    die \"Exception -- test case 97 did not pass.\";\n}\nmy $arg980 = 446;\nmy $arg981 = 477;\nmy $x98 = add($arg980, $arg981);\nmy $v98 = 923;\nunless(Compare($x98, $v98)) {\n    die \"Exception -- test case 98 did not pass.\";\n}\nmy $arg990 = 324;\nmy $arg991 = 860;\nmy $x99 = add($arg990, $arg991);\nmy $v99 = 1184;\nunless(Compare($x99, $v99)) {\n    die \"Exception -- test case 99 did not pass.\";\n}\nmy $arg1000 = 945;\nmy $arg1001 = 85;\nmy $x100 = add($arg1000, $arg1001);\nmy $v100 = 1030;\nunless(Compare($x100, $v100)) {\n    die \"Exception -- test case 100 did not pass.\";\n}\nmy $arg1010 = 886;\nmy $arg1011 = 582;\nmy $x101 = add($arg1010, $arg1011);\nmy $v101 = 1468;\nunless(Compare($x101, $v101)) {\n    die \"Exception -- test case 101 did not pass.\";\n}\nmy $arg1020 = 886;\nmy $arg1021 = 712;\nmy $x102 = add($arg1020, $arg1021);\nmy $v102 = 1598;\nunless(Compare($x102, $v102)) {\n    die \"Exception -- test case 102 did not pass.\";\n}\nmy $arg1030 = 842;\nmy $arg1031 = 953;\nmy $x103 = add($arg1030, $arg1031);\nmy $v103 = 1795;\nunless(Compare($x103, $v103)) {\n    die \"Exception -- test case 103 did not pass.\";\n}\n", "description": "Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/54", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Check if two words have the same characters.\n# >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n# True\n# >>> same_chars('abcd', 'dddddddabc')\n# True\n# >>> same_chars('dddddddabc', 'abcd')\n# True\n# >>> same_chars('eabcd', 'dddddddabc')\n# False\n# >>> same_chars('abcd', 'dddddddabce')\n# False\n# >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n# False\n#\nsub same_chars\n{\n  my ($s0, $s1) = @_;\n", "entry_point": "same_chars", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"eabcdzzzz\";\nmy $arg01 = \"dddzzzzzzzddeddabc\";\nmy $x0 = same_chars($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcd\";\nmy $arg11 = \"dddddddabc\";\nmy $x1 = same_chars($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"dddddddabc\";\nmy $arg21 = \"abcd\";\nmy $x2 = same_chars($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"eabcd\";\nmy $arg31 = \"dddddddabc\";\nmy $x3 = same_chars($arg30, $arg31);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"abcd\";\nmy $arg41 = \"dddddddabcf\";\nmy $x4 = same_chars($arg40, $arg41);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"eabcdzzzz\";\nmy $arg51 = \"dddzzzzzzzddddabc\";\nmy $x5 = same_chars($arg50, $arg51);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"aabb\";\nmy $arg61 = \"aaccc\";\nmy $x6 = same_chars($arg60, $arg61);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/55", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\n#\nsub fib\n{\n  my ($n) = @_;\n", "entry_point": "fib", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = fib($arg00);\nmy $v0 = 55;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $x1 = fib($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 8;\nmy $x2 = fib($arg20);\nmy $v2 = 21;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 11;\nmy $x3 = fib($arg30);\nmy $v3 = 89;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 12;\nmy $x4 = fib($arg40);\nmy $v4 = 144;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/56", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\nsub correct_bracketing\n{\n  my ($brackets) = @_;\n", "entry_point": "correct_bracketing", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"<>\";\nmy $x0 = correct_bracketing($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"<<><>>\";\nmy $x1 = correct_bracketing($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"<><><<><>><>\";\nmy $x2 = correct_bracketing($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"<><><<<><><>><>><<><><<>>>\";\nmy $x3 = correct_bracketing($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"<<<><>>>>\";\nmy $x4 = correct_bracketing($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"><<>\";\nmy $x5 = correct_bracketing($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"<\";\nmy $x6 = correct_bracketing($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"<<<<\";\nmy $x7 = correct_bracketing($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \">\";\nmy $x8 = correct_bracketing($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = \"<<>\";\nmy $x9 = correct_bracketing($arg90);\nmy $v9 = 0;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = \"<><><<><>><>><<>\";\nmy $x10 = correct_bracketing($arg100);\nmy $v10 = 0;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = \"<><><<><>><>>><>\";\nmy $x11 = correct_bracketing($arg110);\nmy $v11 = 0;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\n", "description": "brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/57", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Return True is list elements are monotonically increasing or decreasing.\n# >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n# >>> monotonic([4, 1, 0, -10])\n# True\n#\nsub monotonic\n{\n  my ($l) = @_;\n", "entry_point": "monotonic", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 4, 10];\nmy $x0 = monotonic($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 4, 20];\nmy $x1 = monotonic($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 20, 4, 10];\nmy $x2 = monotonic($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [4, 1, 0, -10];\nmy $x3 = monotonic($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [4, 1, 1, 0];\nmy $x4 = monotonic($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1, 2, 3, 2, 5, 60];\nmy $x5 = monotonic($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [1, 2, 3, 4, 5, 60];\nmy $x6 = monotonic($arg60);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [9, 9, 9, 9];\nmy $x7 = monotonic($arg70);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/58", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\n\n#\nsub common\n{\n  my ($l1, $l2) = @_;\n", "entry_point": "common", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 4, 3, 34, 653, 2, 5];\nmy $arg01 = [5, 7, 1, 5, 9, 653, 121];\nmy $x0 = common($arg00, $arg01);\nmy $v0 = [1, 5, 653];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 3, 2, 8];\nmy $arg11 = [3, 2];\nmy $x1 = common($arg10, $arg11);\nmy $v1 = [2, 3];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [4, 3, 2, 8];\nmy $arg21 = [3, 2, 4];\nmy $x2 = common($arg20, $arg21);\nmy $v2 = [2, 3, 4];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [4, 3, 2, 8];\nmy $arg31 = [];\nmy $x3 = common($arg30, $arg31);\nmy $v3 = [];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/59", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n#\nsub largest_prime_factor\n{\n  my ($n) = @_;\n", "entry_point": "largest_prime_factor", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 15;\nmy $x0 = largest_prime_factor($arg00);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 27;\nmy $x1 = largest_prime_factor($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 63;\nmy $x2 = largest_prime_factor($arg20);\nmy $v2 = 7;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 330;\nmy $x3 = largest_prime_factor($arg30);\nmy $v3 = 11;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 13195;\nmy $x4 = largest_prime_factor($arg40);\nmy $v4 = 29;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/60", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n# 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n# 55\n# >>> sum_to_n(1)\n# 1\n#\nsub sum_to_n\n{\n  my ($n) = @_;\n", "entry_point": "sum_to_n", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $x0 = sum_to_n($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 6;\nmy $x1 = sum_to_n($arg10);\nmy $v1 = 21;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 11;\nmy $x2 = sum_to_n($arg20);\nmy $v2 = 66;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 30;\nmy $x3 = sum_to_n($arg30);\nmy $v3 = 465;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 100;\nmy $x4 = sum_to_n($arg40);\nmy $v4 = 5050;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/61", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# brackets is a string of \"(\" and \")\".\n# return True if every opening bracket has a corresponding closing bracket.\n\n# >>> correct_bracketing(\"(\")\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"(()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\n#\nsub correct_bracketing\n{\n  my ($brackets) = @_;\n", "entry_point": "correct_bracketing", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"()\";\nmy $x0 = correct_bracketing($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"(()())\";\nmy $x1 = correct_bracketing($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"()()(()())()\";\nmy $x2 = correct_bracketing($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"()()((()()())())(()()(()))\";\nmy $x3 = correct_bracketing($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"((()())))\";\nmy $x4 = correct_bracketing($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \")(()\";\nmy $x5 = correct_bracketing($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"(\";\nmy $x6 = correct_bracketing($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"((((\";\nmy $x7 = correct_bracketing($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \")\";\nmy $x8 = correct_bracketing($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = \"(()\";\nmy $x9 = correct_bracketing($arg90);\nmy $v9 = 0;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = \"()()(()())())(()\";\nmy $x10 = correct_bracketing($arg100);\nmy $v10 = 0;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = \"()()(()())()))()\";\nmy $x11 = correct_bracketing($arg110);\nmy $v11 = 0;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\n", "description": "brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/62", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2] * x^2 + ....\n#  Return derivative of this polynomial in the same form.\n# >>> derivative([3, 1, 2, 4, 5])\n# [1, 4, 12, 20]\n# >>> derivative([1, 2, 3])\n# [2, 6]\n#\nsub derivative\n{\n  my ($xs) = @_;\n", "entry_point": "derivative", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 1, 2, 4, 5];\nmy $x0 = derivative($arg00);\nmy $v0 = [1, 4, 12, 20];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3];\nmy $x1 = derivative($arg10);\nmy $v1 = [2, 6];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 2, 1];\nmy $x2 = derivative($arg20);\nmy $v2 = [2, 2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [3, 2, 1, 0, 4];\nmy $x3 = derivative($arg30);\nmy $v3 = [2, 2, 0, 16];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1];\nmy $x4 = derivative($arg40);\nmy $v4 = [];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/63", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> fibfib(1)\n# 0\n# >>> fibfib(5)\n# 4\n# >>> fibfib(8)\n# 24\n#\nsub fibfib\n{\n  my ($n) = @_;\n", "entry_point": "fibfib", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = fibfib($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $x1 = fibfib($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $x2 = fibfib($arg20);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 8;\nmy $x3 = fibfib($arg30);\nmy $v3 = 24;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 10;\nmy $x4 = fibfib($arg40);\nmy $v4 = 81;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 12;\nmy $x5 = fibfib($arg50);\nmy $v5 = 274;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 14;\nmy $x6 = fibfib($arg60);\nmy $v6 = 927;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/64", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Write a function vowels_count which takes a string representing\n# a word as input and returns the number of vowels in the string.\n# Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is at the end of the given word.\n\n# Example:\n# >>> vowels_count(\"abcde\")\n# 2\n# >>> vowels_count(\"ACEDY\")\n# 3\n#\nsub vowels_count\n{\n  my ($s) = @_;\n", "entry_point": "vowels_count", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abcde\";\nmy $x0 = vowels_count($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Alone\";\nmy $x1 = vowels_count($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"key\";\nmy $x2 = vowels_count($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"bye\";\nmy $x3 = vowels_count($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"keY\";\nmy $x4 = vowels_count($arg40);\nmy $v4 = 2;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"bYe\";\nmy $x5 = vowels_count($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"ACEDY\";\nmy $x6 = vowels_count($arg60);\nmy $v6 = 3;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/65", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Circular shift the digits of the integer x, shift the digits right by shift\n# and return the result as a string.\n# If shift > number of digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>> circular_shift(12, 2)\n# \"12\"\n#\nsub circular_shift\n{\n  my ($x, $shift) = @_;\n", "entry_point": "circular_shift", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 100;\nmy $arg01 = 2;\nmy $x0 = circular_shift($arg00, $arg01);\nmy $v0 = \"001\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 12;\nmy $arg11 = 2;\nmy $x1 = circular_shift($arg10, $arg11);\nmy $v1 = \"12\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 97;\nmy $arg21 = 8;\nmy $x2 = circular_shift($arg20, $arg21);\nmy $v2 = \"79\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 12;\nmy $arg31 = 1;\nmy $x3 = circular_shift($arg30, $arg31);\nmy $v3 = \"21\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 11;\nmy $arg41 = 101;\nmy $x4 = circular_shift($arg40, $arg41);\nmy $v4 = \"11\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/66", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n\n# Examples:\n#     digitSum(\"\") => 0\n#     digitSum(\"abAB\") => 131\n#     digitSum(\"abcCd\") => 67\n#     digitSum(\"helloE\") => 69\n#     digitSum(\"woArBld\") => 131\n#     digitSum(\"aAaaaXa\") => 153\n#\nsub digitsum\n{\n  my ($s) = @_;\n", "entry_point": "digitsum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = digitsum($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abAB\";\nmy $x1 = digitsum($arg10);\nmy $v1 = 131;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abcCd\";\nmy $x2 = digitsum($arg20);\nmy $v2 = 67;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"helloE\";\nmy $x3 = digitsum($arg30);\nmy $v3 = 69;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"woArBld\";\nmy $x4 = digitsum($arg40);\nmy $v4 = 131;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"aAaaaXa\";\nmy $x5 = digitsum($arg50);\nmy $v5 = 153;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \" How are yOu?\";\nmy $x6 = digitsum($arg60);\nmy $v6 = 151;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"You arE Very Smart\";\nmy $x7 = digitsum($arg70);\nmy $v7 = 327;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/67", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # In this task, you will be given a string that represents a number of apples and oranges \n# that are distributed in a basket of fruit this basket contains \n# apples, oranges, and mango fruits. Given the string that represents the total number of \n# the oranges and apples and an integer that represent the total number of the fruits \n# in the basket return the number of the mango fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n#\nsub fruit_distribution\n{\n  my ($s, $n) = @_;\n", "entry_point": "fruit_distribution", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"5 apples and 6 oranges\";\nmy $arg01 = 19;\nmy $x0 = fruit_distribution($arg00, $arg01);\nmy $v0 = 8;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"5 apples and 6 oranges\";\nmy $arg11 = 21;\nmy $x1 = fruit_distribution($arg10, $arg11);\nmy $v1 = 10;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"0 apples and 1 oranges\";\nmy $arg21 = 3;\nmy $x2 = fruit_distribution($arg20, $arg21);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"1 apples and 0 oranges\";\nmy $arg31 = 3;\nmy $x3 = fruit_distribution($arg30, $arg31);\nmy $v3 = 2;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"2 apples and 3 oranges\";\nmy $arg41 = 100;\nmy $x4 = fruit_distribution($arg40, $arg41);\nmy $v4 = 95;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"2 apples and 3 oranges\";\nmy $arg51 = 5;\nmy $x5 = fruit_distribution($arg50, $arg51);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"1 apples and 100 oranges\";\nmy $arg61 = 120;\nmy $x6 = fruit_distribution($arg60, $arg61);\nmy $v6 = 19;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/68", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # \"Given an array representing a branch of a tree that has non-negative integer nodes\n# your task is to pluck one of the nodes and return it.\n# The plucked node should be the node with the smallest even value.\n# If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n# The plucked node should be returned in a list, [ smalest_value, its index ],\n# If there are no even values or the given array is empty, return [].\n\n# Example 1:\n#     Input: [4,2,3]\n#     Output: [2, 1]\n#     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n# Example 2:\n#     Input: [1,2,3]\n#     Output: [2, 1]\n#     Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n# Example 3:\n#     Input: []\n#     Output: []\n# \n# Example 4:\n#     Input: [5, 0, 3, 0, 4, 2]\n#     Output: [0, 1]\n#     Explanation: 0 is the smallest value, but  there are two zeros,\n#                  so we will choose the first zero, which has the smallest index.\n\n# Constraints:\n#     * 1 <= nodes.length <= 10000\n#     * 0 <= node.value\n#\nsub pluck\n{\n  my ($arr) = @_;\n", "entry_point": "pluck", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [4, 2, 3];\nmy $x0 = pluck($arg00);\nmy $v0 = [2, 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3];\nmy $x1 = pluck($arg10);\nmy $v1 = [2, 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [];\nmy $x2 = pluck($arg20);\nmy $v2 = [];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [5, 0, 3, 0, 4, 2];\nmy $x3 = pluck($arg30);\nmy $v3 = [0, 1];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 2, 3, 0, 5, 3];\nmy $x4 = pluck($arg40);\nmy $v4 = [0, 3];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [5, 4, 8, 4, 8];\nmy $x5 = pluck($arg50);\nmy $v5 = [4, 1];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [7, 6, 7, 1];\nmy $x6 = pluck($arg60);\nmy $v6 = [6, 1];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [7, 9, 7, 1];\nmy $x7 = pluck($arg70);\nmy $v7 = [];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "\"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/69", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n# zero, and has a frequency greater than or equal to the value of the integer itself. \n# The frequency of an integer is the number of times it appears in the list.\n# If no such a value exist, return -1.\n# Examples:\n#     search([4, 1, 2, 2, 3, 1]) == 2\n#     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n#     search([5, 5, 4, 4, 4]) == -1\n#\nsub search\n{\n  my ($lst) = @_;\n", "entry_point": "search", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 5, 5, 5, 1];\nmy $x0 = search($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 1, 4, 1, 4, 4];\nmy $x1 = search($arg10);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 3];\nmy $x2 = search($arg20);\nmy $v2 = -1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [8, 8, 8, 8, 8, 8, 8, 8];\nmy $x3 = search($arg30);\nmy $v3 = 8;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [2, 3, 3, 2, 2];\nmy $x4 = search($arg40);\nmy $v4 = 2;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1];\nmy $x5 = search($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [3, 2, 8, 2];\nmy $x6 = search($arg60);\nmy $v6 = 2;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10];\nmy $x7 = search($arg70);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [8, 8, 3, 6, 5, 6, 4];\nmy $x8 = search($arg80);\nmy $v8 = -1;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9];\nmy $x9 = search($arg90);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = [1, 9, 10, 1, 3];\nmy $x10 = search($arg100);\nmy $v10 = 1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = [6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10];\nmy $x11 = search($arg110);\nmy $v11 = 5;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = [1];\nmy $x12 = search($arg120);\nmy $v12 = 1;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = [8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5];\nmy $x13 = search($arg130);\nmy $v13 = 4;\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\nmy $arg140 = [2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10];\nmy $x14 = search($arg140);\nmy $v14 = 2;\nunless(Compare($x14, $v14)) {\n    die \"Exception -- test case 14 did not pass.\";\n}\nmy $arg150 = [1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3];\nmy $x15 = search($arg150);\nmy $v15 = 1;\nunless(Compare($x15, $v15)) {\n    die \"Exception -- test case 15 did not pass.\";\n}\nmy $arg160 = [9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4];\nmy $x16 = search($arg160);\nmy $v16 = 4;\nunless(Compare($x16, $v16)) {\n    die \"Exception -- test case 16 did not pass.\";\n}\nmy $arg170 = [2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7];\nmy $x17 = search($arg170);\nmy $v17 = 4;\nunless(Compare($x17, $v17)) {\n    die \"Exception -- test case 17 did not pass.\";\n}\nmy $arg180 = [9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1];\nmy $x18 = search($arg180);\nmy $v18 = 2;\nunless(Compare($x18, $v18)) {\n    die \"Exception -- test case 18 did not pass.\";\n}\nmy $arg190 = [5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8];\nmy $x19 = search($arg190);\nmy $v19 = -1;\nunless(Compare($x19, $v19)) {\n    die \"Exception -- test case 19 did not pass.\";\n}\nmy $arg200 = [10];\nmy $x20 = search($arg200);\nmy $v20 = -1;\nunless(Compare($x20, $v20)) {\n    die \"Exception -- test case 20 did not pass.\";\n}\nmy $arg210 = [9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2];\nmy $x21 = search($arg210);\nmy $v21 = 2;\nunless(Compare($x21, $v21)) {\n    die \"Exception -- test case 21 did not pass.\";\n}\nmy $arg220 = [5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8];\nmy $x22 = search($arg220);\nmy $v22 = 1;\nunless(Compare($x22, $v22)) {\n    die \"Exception -- test case 22 did not pass.\";\n}\nmy $arg230 = [7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6];\nmy $x23 = search($arg230);\nmy $v23 = 1;\nunless(Compare($x23, $v23)) {\n    die \"Exception -- test case 23 did not pass.\";\n}\nmy $arg240 = [3, 10, 10, 9, 2];\nmy $x24 = search($arg240);\nmy $v24 = -1;\nunless(Compare($x24, $v24)) {\n    die \"Exception -- test case 24 did not pass.\";\n}\n", "description": "You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/70", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given list of integers, return list in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([]) == []\n#\nsub strange_sort_list\n{\n  my ($lst) = @_;\n", "entry_point": "strange_sort_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4];\nmy $x0 = strange_sort_list($arg00);\nmy $v0 = [1, 4, 2, 3];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 6, 7, 8, 9];\nmy $x1 = strange_sort_list($arg10);\nmy $v1 = [5, 9, 6, 8, 7];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 5];\nmy $x2 = strange_sort_list($arg20);\nmy $v2 = [1, 5, 2, 4, 3];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [5, 6, 7, 8, 9, 1];\nmy $x3 = strange_sort_list($arg30);\nmy $v3 = [1, 9, 5, 8, 6, 7];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [5, 5, 5, 5];\nmy $x4 = strange_sort_list($arg40);\nmy $v4 = [5, 5, 5, 5];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [];\nmy $x5 = strange_sort_list($arg50);\nmy $v5 = [];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [1, 2, 3, 4, 5, 6, 7, 8];\nmy $x6 = strange_sort_list($arg60);\nmy $v6 = [1, 8, 2, 7, 3, 6, 4, 5];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [0, 2, 2, 2, 5, 5, -5, -5];\nmy $x7 = strange_sort_list($arg70);\nmy $v7 = [-5, 5, -5, 5, 0, 2, 2, 2];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [111111];\nmy $x8 = strange_sort_list($arg80);\nmy $v8 = [111111];\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/71", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given the lengths of the three sides of a triangle. Return the area of\n# the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any two sides is greater \n# than the third side.\n# Example:\n# triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\n#\nsub triangle_area\n{\n  my ($a, $b, $c) = @_;\n", "entry_point": "triangle_area", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 4;\nmy $arg02 = 5;\nmy $x0 = triangle_area($arg00, $arg01, $arg02);\nmy $v0 = 6.0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 2;\nmy $arg12 = 10;\nmy $x1 = triangle_area($arg10, $arg11, $arg12);\nmy $v1 = -1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $arg21 = 8;\nmy $arg22 = 5;\nmy $x2 = triangle_area($arg20, $arg21, $arg22);\nmy $v2 = 8.18;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 2;\nmy $arg31 = 2;\nmy $arg32 = 2;\nmy $x3 = triangle_area($arg30, $arg31, $arg32);\nmy $v3 = 1.73;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 1;\nmy $arg41 = 2;\nmy $arg42 = 3;\nmy $x4 = triangle_area($arg40, $arg41, $arg42);\nmy $v4 = -1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 10;\nmy $arg51 = 5;\nmy $arg52 = 7;\nmy $x5 = triangle_area($arg50, $arg51, $arg52);\nmy $v5 = 16.25;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 2;\nmy $arg61 = 6;\nmy $arg62 = 3;\nmy $x6 = triangle_area($arg60, $arg61, $arg62);\nmy $v6 = -1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 1;\nmy $arg71 = 1;\nmy $arg72 = 1;\nmy $x7 = triangle_area($arg70, $arg71, $arg72);\nmy $v7 = 0.43;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 2;\nmy $arg81 = 2;\nmy $arg82 = 10;\nmy $x8 = triangle_area($arg80, $arg81, $arg82);\nmy $v8 = -1;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/72", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function that returns True if the object q will fly, and False otherwise.\n# The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n# Example:\n# will_it_fly([1, 2], 5) \u279e False \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n# will_it_fly([3, 2, 3], 1) \u279e False\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n# will_it_fly([3, 2, 3], 9) \u279e True\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n# will_it_fly([3], 5) \u279e True\n# # 3 is less than the maximum possible weight, and it's balanced.\n#\nsub will_it_fly\n{\n  my ($q, $w) = @_;\n", "entry_point": "will_it_fly", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 2, 3];\nmy $arg01 = 9;\nmy $x0 = will_it_fly($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2];\nmy $arg11 = 5;\nmy $x1 = will_it_fly($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3];\nmy $arg21 = 5;\nmy $x2 = will_it_fly($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [3, 2, 3];\nmy $arg31 = 1;\nmy $x3 = will_it_fly($arg30, $arg31);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 2, 3];\nmy $arg41 = 6;\nmy $x4 = will_it_fly($arg40, $arg41);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [5];\nmy $arg51 = 5;\nmy $x5 = will_it_fly($arg50, $arg51);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/73", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given an array arr of integers, find the minimum number of elements that\n# need to be changed to make the array palindromic. A palindromic array is an array that\n# is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n# For example:\n# smallest_change([1,2,3,5,4,7,9,6]) == 4\n# smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n# smallest_change([1, 2, 3, 2, 1]) == 0\n#\nsub smallest_change\n{\n  my ($arr) = @_;\n", "entry_point": "smallest_change", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 5, 4, 7, 9, 6];\nmy $x0 = smallest_change($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 3, 2, 2];\nmy $x1 = smallest_change($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 4, 2];\nmy $x2 = smallest_change($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, 4, 4, 2];\nmy $x3 = smallest_change($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 2, 3, 2, 1];\nmy $x4 = smallest_change($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [3, 1, 1, 3];\nmy $x5 = smallest_change($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [1];\nmy $x6 = smallest_change($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [0, 1];\nmy $x7 = smallest_change($arg70);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/74", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function that accepts two lists of strings and returns the list that has \n# total number of chars in the all strings of the list less than the other list.\n\n# if the two lists have the same number of chars, return the first list.\n\n# Examples\n# total_match([], []) \u279e []\n# total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n# total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n# total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n# total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n#\nsub total_match\n{\n  my ($lst1, $lst2) = @_;\n", "entry_point": "total_match", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $arg01 = [];\nmy $x0 = total_match($arg00, $arg01);\nmy $v0 = [];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"hi\", \"admin\"];\nmy $arg11 = [\"hi\", \"hi\"];\nmy $x1 = total_match($arg10, $arg11);\nmy $v1 = [\"hi\", \"hi\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"hi\", \"admin\"];\nmy $arg21 = [\"hi\", \"hi\", \"admin\", \"project\"];\nmy $x2 = total_match($arg20, $arg21);\nmy $v2 = [\"hi\", \"admin\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [\"4\"];\nmy $arg31 = [\"1\", \"2\", \"3\", \"4\", \"5\"];\nmy $x3 = total_match($arg30, $arg31);\nmy $v3 = [\"4\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [\"hi\", \"admin\"];\nmy $arg41 = [\"hI\", \"Hi\"];\nmy $x4 = total_match($arg40, $arg41);\nmy $v4 = [\"hI\", \"Hi\"];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [\"hi\", \"admin\"];\nmy $arg51 = [\"hI\", \"hi\", \"hi\"];\nmy $x5 = total_match($arg50, $arg51);\nmy $v5 = [\"hI\", \"hi\", \"hi\"];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [\"hi\", \"admin\"];\nmy $arg61 = [\"hI\", \"hi\", \"hii\"];\nmy $x6 = total_match($arg60, $arg61);\nmy $v6 = [\"hi\", \"admin\"];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [];\nmy $arg71 = [\"this\"];\nmy $x7 = total_match($arg70, $arg71);\nmy $v7 = [];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [\"this\"];\nmy $arg81 = [];\nmy $x8 = total_match($arg80, $arg81);\nmy $v8 = [];\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/75", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Write a function that returns true if the given number is the multiplication of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100. \n# Example:\n# is_multiply_prime(30) == True\n# 30 = 2 * 3 * 5\n#\nsub is_multiply_prime\n{\n  my ($a) = @_;\n", "entry_point": "is_multiply_prime", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = is_multiply_prime($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 30;\nmy $x1 = is_multiply_prime($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 8;\nmy $x2 = is_multiply_prime($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 10;\nmy $x3 = is_multiply_prime($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 125;\nmy $x4 = is_multiply_prime($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 105;\nmy $x5 = is_multiply_prime($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 126;\nmy $x6 = is_multiply_prime($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 729;\nmy $x7 = is_multiply_prime($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 891;\nmy $x8 = is_multiply_prime($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 1001;\nmy $x9 = is_multiply_prime($arg90);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/76", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Your task is to write a function that returns true if a number x is a simple\n# power of n and false in other cases.\n# x is a simple power of n if n**int=x\n# For example:\n# is_simple_power(1, 4) => true\n# is_simple_power(2, 2) => true\n# is_simple_power(8, 2) => true\n# is_simple_power(3, 2) => false\n# is_simple_power(3, 1) => false\n# is_simple_power(5, 3) => false\n#\nsub is_simple_power\n{\n  my ($x, $n) = @_;\n", "entry_point": "is_simple_power", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 16;\nmy $arg01 = 2;\nmy $x0 = is_simple_power($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 143214;\nmy $arg11 = 16;\nmy $x1 = is_simple_power($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $arg21 = 2;\nmy $x2 = is_simple_power($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 9;\nmy $arg31 = 3;\nmy $x3 = is_simple_power($arg30, $arg31);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 16;\nmy $arg41 = 4;\nmy $x4 = is_simple_power($arg40, $arg41);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 24;\nmy $arg51 = 2;\nmy $x5 = is_simple_power($arg50, $arg51);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 128;\nmy $arg61 = 4;\nmy $x6 = is_simple_power($arg60, $arg61);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 12;\nmy $arg71 = 6;\nmy $x7 = is_simple_power($arg70, $arg71);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 1;\nmy $arg81 = 1;\nmy $x8 = is_simple_power($arg80, $arg81);\nmy $v8 = 1;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 1;\nmy $arg91 = 12;\nmy $x9 = is_simple_power($arg90, $arg91);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/77", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function that takes an integer a and returns True \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==> False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n# iscube(180) ==> False\n#\nsub iscube\n{\n  my ($a) = @_;\n", "entry_point": "iscube", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $x0 = iscube($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = iscube($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = -1;\nmy $x2 = iscube($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 64;\nmy $x3 = iscube($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 180;\nmy $x4 = iscube($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 1000;\nmy $x5 = iscube($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 0;\nmy $x6 = iscube($arg60);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 1729;\nmy $x7 = iscube($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/78", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# You have been tasked to write a function that receives \n# a hexadecimal number as a string and counts the number of hexadecimal \n# digits that are primes (prime number, or a prime, is a natural number \n# greater than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n# For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For num = \"2020\" the output should be 2.\n#\nsub hex_key\n{\n  my ($num) = @_;\n", "entry_point": "hex_key", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"AB\";\nmy $x0 = hex_key($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"1077E\";\nmy $x1 = hex_key($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"ABED1A33\";\nmy $x2 = hex_key($arg20);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"2020\";\nmy $x3 = hex_key($arg30);\nmy $v3 = 2;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"123456789ABCDEF0\";\nmy $x4 = hex_key($arg40);\nmy $v4 = 6;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"112233445566778899AABBCCDDEEFF00\";\nmy $x5 = hex_key($arg50);\nmy $v5 = 12;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [];\nmy $x6 = hex_key($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/79", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# You will be given a number in decimal form and your task is to convert it to\n# binary format. The function should return a string, with each character representing a binary\n# number. Each character in the string will be '0' or '1'.\n\n# There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n# The extra characters are there to help with the format.\n\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)   # returns \"db100000db\"\n#\nsub decimal_to_binary\n{\n  my ($decimal) = @_;\n", "entry_point": "decimal_to_binary", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 0;\nmy $x0 = decimal_to_binary($arg00);\nmy $v0 = \"db0db\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 32;\nmy $x1 = decimal_to_binary($arg10);\nmy $v1 = \"db100000db\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 103;\nmy $x2 = decimal_to_binary($arg20);\nmy $v2 = \"db1100111db\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 15;\nmy $x3 = decimal_to_binary($arg30);\nmy $v3 = \"db1111db\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/80", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# You are given a string s.\n# Your task is to check if the string is happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb) => True\n# is_happy(xyy) => False\n#\nsub is_happy\n{\n  my ($s) = @_;\n", "entry_point": "is_happy", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"a\";\nmy $x0 = is_happy($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"aa\";\nmy $x1 = is_happy($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abcd\";\nmy $x2 = is_happy($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"aabb\";\nmy $x3 = is_happy($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"adb\";\nmy $x4 = is_happy($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"xyy\";\nmy $x5 = is_happy($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"iopaxpoi\";\nmy $x6 = is_happy($arg60);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"iopaxioi\";\nmy $x7 = is_happy($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/81", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# It is the last week of the semester and the teacher has to give the grades\n# to students. The teacher has been making her own algorithm for grading.\n# The only problem is, she has lost the code she used for grading.\n# She has given you a list of GPAs for some students and you have to write \n# a function that can output a list of letter grades using the following table:\n#          GPA       |    Letter grade\n#           4.0                A+\n#         > 3.7                A \n#         > 3.3                A- \n#         > 3.0                B+\n#         > 2.7                B \n#         > 2.3                B-\n#         > 2.0                C+\n#         > 1.7                C\n#         > 1.3                C-\n#         > 1.0                D+ \n#         > 0.7                D \n#         > 0.0                D-\n#           0.0                E\n# \n\n# Example:\n# grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n#\nsub numerical_letter_grade\n{\n  my ($grades) = @_;\n", "entry_point": "numerical_letter_grade", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [4.0, 3, 1.7, 2, 3.5];\nmy $x0 = numerical_letter_grade($arg00);\nmy $v0 = [\"A+\", \"B\", \"C-\", \"C\", \"A-\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1.2];\nmy $x1 = numerical_letter_grade($arg10);\nmy $v1 = [\"D+\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [0.5];\nmy $x2 = numerical_letter_grade($arg20);\nmy $v2 = [\"D-\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [0.0];\nmy $x3 = numerical_letter_grade($arg30);\nmy $v3 = [\"E\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 0.3, 1.5, 2.8, 3.3];\nmy $x4 = numerical_letter_grade($arg40);\nmy $v4 = [\"D\", \"D-\", \"C-\", \"B\", \"B+\"];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [0, 0.7];\nmy $x5 = numerical_letter_grade($arg50);\nmy $v5 = [\"E\", \"D-\"];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/82", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Write a function that takes a string and returns True if the string\n# length is a prime number or False otherwise\n# Examples\n# prime_length('Hello') == True\n# prime_length('abcdcba') == True\n# prime_length('kittens') == True\n# prime_length('orange') == False\n#\nsub prime_length\n{\n  my ($string) = @_;\n", "entry_point": "prime_length", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Hello\";\nmy $x0 = prime_length($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcdcba\";\nmy $x1 = prime_length($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"kittens\";\nmy $x2 = prime_length($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"orange\";\nmy $x3 = prime_length($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"wow\";\nmy $x4 = prime_length($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"world\";\nmy $x5 = prime_length($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"MadaM\";\nmy $x6 = prime_length($arg60);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"Wow\";\nmy $x7 = prime_length($arg70);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"\";\nmy $x8 = prime_length($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = \"HI\";\nmy $x9 = prime_length($arg90);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = \"go\";\nmy $x10 = prime_length($arg100);\nmy $v10 = 1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = \"gogo\";\nmy $x11 = prime_length($arg110);\nmy $v11 = 0;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = \"aaaaaaaaaaaaaaa\";\nmy $x12 = prime_length($arg120);\nmy $v12 = 0;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = \"Madam\";\nmy $x13 = prime_length($arg130);\nmy $v13 = 1;\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\nmy $arg140 = \"M\";\nmy $x14 = prime_length($arg140);\nmy $v14 = 0;\nunless(Compare($x14, $v14)) {\n    die \"Exception -- test case 14 did not pass.\";\n}\nmy $arg150 = \"0\";\nmy $x15 = prime_length($arg150);\nmy $v15 = 0;\nunless(Compare($x15, $v15)) {\n    die \"Exception -- test case 15 did not pass.\";\n}\n", "description": "Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/83", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given a positive integer n, return the count of the numbers of n-digit\n# positive integers that start or end with 1.\n#\nsub starts_one_ends\n{\n  my ($n) = @_;\n", "entry_point": "starts_one_ends", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $x0 = starts_one_ends($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = starts_one_ends($arg10);\nmy $v1 = 18;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $x2 = starts_one_ends($arg20);\nmy $v2 = 180;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 4;\nmy $x3 = starts_one_ends($arg30);\nmy $v3 = 1800;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 5;\nmy $x4 = starts_one_ends($arg40);\nmy $v4 = 18000;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/84", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Given a positive integer N, return the total sum of its digits in binary.\n# \n# Example\n#     For N = 1000, the sum of digits will be 1 the output should be \"1\".\n#     For N = 150, the sum of digits will be 6 the output should be \"110\".\n#     For N = 147, the sum of digits will be 12 the output should be \"1100\".\n# \n# Variables:\n#     @N integer\n#          Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n#      a string of binary number\n#\nsub solve\n{\n  my ($n) = @_;\n", "entry_point": "solve", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1000;\nmy $x0 = solve($arg00);\nmy $v0 = \"1\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 150;\nmy $x1 = solve($arg10);\nmy $v1 = \"110\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 147;\nmy $x2 = solve($arg20);\nmy $v2 = \"1100\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 333;\nmy $x3 = solve($arg30);\nmy $v3 = \"1001\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 963;\nmy $x4 = solve($arg40);\nmy $v4 = \"10010\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/85", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n# Examples:\n#     add([4, 2, 6, 7]) ==> 2 \n#\nsub add\n{\n  my ($lst) = @_;\n", "entry_point": "add", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [4, 88];\nmy $x0 = add($arg00);\nmy $v0 = 88;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 5, 6, 7, 2, 122];\nmy $x1 = add($arg10);\nmy $v1 = 122;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [4, 0, 6, 7];\nmy $x2 = add($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [4, 4, 6, 8];\nmy $x3 = add($arg30);\nmy $v3 = 12;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/86", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function that takes a string and returns an ordered version of it.\n# Ordered version of string, is a string where all words (separated by space)\n# are replaced by a new word where all the characters arranged in\n# ascending order based on ascii value.\n# Note: You should keep the order of words and blank spaces in the sentence.\n\n# For example:\n# anti_shuffle('Hi') returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n#\nsub anti_shuffle\n{\n  my ($s) = @_;\n", "entry_point": "anti_shuffle", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Hi\";\nmy $x0 = anti_shuffle($arg00);\nmy $v0 = \"Hi\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"hello\";\nmy $x1 = anti_shuffle($arg10);\nmy $v1 = \"ehllo\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"number\";\nmy $x2 = anti_shuffle($arg20);\nmy $v2 = \"bemnru\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"abcd\";\nmy $x3 = anti_shuffle($arg30);\nmy $v3 = \"abcd\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"Hello World!!!\";\nmy $x4 = anti_shuffle($arg40);\nmy $v4 = \"Hello !!!Wdlor\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"\";\nmy $x5 = anti_shuffle($arg50);\nmy $v5 = \"\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"Hi. My name is Mister Robot. How are you?\";\nmy $x6 = anti_shuffle($arg60);\nmy $v6 = \".Hi My aemn is Meirst .Rboot How aer ?ouy\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/87", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # You are given a 2 dimensional data, as a nested lists,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n# \n# Examples:\n# get_row([\n#   [1,2,3,4,5,6],\n#   [1,2,3,4,1,6],\n#   [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([], 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n#\nsub get_row\n{\n  my ($lst, $x) = @_;\n", "entry_point": "get_row", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $arg01 = 1;\nmy $x0 = get_row($arg00, $arg01);\nmy $v0 = [];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1]];\nmy $arg11 = 2;\nmy $x1 = get_row($arg10, $arg11);\nmy $v1 = [];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[], [1], [1, 2, 3]];\nmy $arg21 = 3;\nmy $x2 = get_row($arg20, $arg21);\nmy $v2 = [[2, 2]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/88", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given an array of non-negative integers, return a copy of the given array after sorting,\n# you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n# or sort it in descending order if the sum( first index value, last index value) is even.\n\n# Note:\n# * don't change the given array.\n\n# Examples:\n# * sort_array([]) => []\n# * sort_array([5]) => [5]\n# * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n# * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n#\nsub sort_array\n{\n  my ($array) = @_;\n", "entry_point": "sort_array", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = sort_array($arg00);\nmy $v0 = [];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5];\nmy $x1 = sort_array($arg10);\nmy $v1 = [5];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 4, 3, 0, 1, 5];\nmy $x2 = sort_array($arg20);\nmy $v2 = [0, 1, 2, 3, 4, 5];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [2, 4, 3, 0, 1, 5, 6];\nmy $x3 = sort_array($arg30);\nmy $v3 = [6, 5, 4, 3, 2, 1, 0];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [2, 1];\nmy $x4 = sort_array($arg40);\nmy $v4 = [1, 2];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [15, 42, 87, 32, 11, 0];\nmy $x5 = sort_array($arg50);\nmy $v5 = [0, 11, 15, 32, 42, 87];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [21, 14, 23, 11];\nmy $x6 = sort_array($arg60);\nmy $v6 = [23, 21, 14, 11];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/89", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Create a function encrypt that takes a string as an argument and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet should be rotated in a manner such that the letters \n# shift down by two multiplied to two places.\n# For example:\n# encrypt('hi') returns 'lm'\n# encrypt('asdfghjkl') returns 'ewhjklnop'\n# encrypt('gf') returns 'kj'\n# encrypt('et') returns 'ix'\n#\nsub encrypt\n{\n  my ($s) = @_;\n", "entry_point": "encrypt", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"hi\";\nmy $x0 = encrypt($arg00);\nmy $v0 = \"lm\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"asdfghjkl\";\nmy $x1 = encrypt($arg10);\nmy $v1 = \"ewhjklnop\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"gf\";\nmy $x2 = encrypt($arg20);\nmy $v2 = \"kj\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"et\";\nmy $x3 = encrypt($arg30);\nmy $v3 = \"ix\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"faewfawefaewg\";\nmy $x4 = encrypt($arg40);\nmy $v4 = \"jeiajeaijeiak\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"hellomyfriend\";\nmy $x5 = encrypt($arg50);\nmy $v5 = \"lippsqcjvmirh\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\";\nmy $x6 = encrypt($arg60);\nmy $v6 = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"a\";\nmy $x7 = encrypt($arg70);\nmy $v7 = \"e\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/90", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # You are given a list of integers.\n# Write a function next_smallest() that returns the 2nd smallest element of the list.\n# Return \"none\" if there is no such element.\n# \n# next_smallest([1, 2, 3, 4, 5]) == 2\n# next_smallest([5, 1, 4, 3, 2]) == 2\n# next_smallest([]) == None\n# next_smallest([1, 1]) == None\n#\nsub next_smallest\n{\n  my ($lst) = @_;\n", "entry_point": "next_smallest", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5];\nmy $x0 = next_smallest($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 1, 4, 3, 2];\nmy $x1 = next_smallest($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [];\nmy $x2 = next_smallest($arg20);\nmy $v2 = \"none\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, 1];\nmy $x3 = next_smallest($arg30);\nmy $v3 = \"none\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 1, 1, 1, 0];\nmy $x4 = next_smallest($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1, 1];\nmy $x5 = next_smallest($arg50);\nmy $v5 = \"none\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [-35, 34, 12, -45];\nmy $x6 = next_smallest($arg60);\nmy $v6 = -35;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return \"none\" if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/91", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # You'll be given a string of words, and your task is to count the number\n# of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences are delimited by '.', '?' or '!'.\n   \n# For example:\n# >>> is_bored(\"Hello world\")\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n# 1\n#\nsub is_bored\n{\n  my ($s) = @_;\n", "entry_point": "is_bored", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Hello world\";\nmy $x0 = is_bored($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Is the sky blue?\";\nmy $x1 = is_bored($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"I love It !\";\nmy $x2 = is_bored($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"bIt\";\nmy $x3 = is_bored($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"I feel good today. I will be productive. will kill It\";\nmy $x4 = is_bored($arg40);\nmy $v4 = 2;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"You and I are going for a walk\";\nmy $x5 = is_bored($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/92", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n# \n# Examples\n# any_int(5, 2, 7) \u279e True\n# \n# any_int(3, 2, 2) \u279e False\n\n# any_int(3, -2, 1) \u279e True\n# \n# any_int(3.6, -2.2, 2) \u279e False\n  \n\n# \n#\nsub any_int\n{\n  my ($x, $y, $z) = @_;\n", "entry_point": "any_int", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $arg01 = 3;\nmy $arg02 = 1;\nmy $x0 = any_int($arg00, $arg01, $arg02);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2.5;\nmy $arg11 = 2;\nmy $arg12 = 3;\nmy $x1 = any_int($arg10, $arg11, $arg12);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1.5;\nmy $arg21 = 5;\nmy $arg22 = 3.5;\nmy $x2 = any_int($arg20, $arg21, $arg22);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 2;\nmy $arg31 = 6;\nmy $arg32 = 2;\nmy $x3 = any_int($arg30, $arg31, $arg32);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 4;\nmy $arg41 = 2;\nmy $arg42 = 2;\nmy $x4 = any_int($arg40, $arg41, $arg42);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 2.2;\nmy $arg51 = 2.2;\nmy $arg52 = 2.2;\nmy $x5 = any_int($arg50, $arg51, $arg52);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = -4;\nmy $arg61 = 6;\nmy $arg62 = 2;\nmy $x6 = any_int($arg60, $arg61, $arg62);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 2;\nmy $arg71 = 1;\nmy $arg72 = 1;\nmy $x7 = any_int($arg70, $arg71, $arg72);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 3;\nmy $arg81 = 4;\nmy $arg82 = 7;\nmy $x8 = any_int($arg80, $arg81, $arg82);\nmy $v8 = 1;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 3.0;\nmy $arg91 = 4;\nmy $arg92 = 7;\nmy $x9 = any_int($arg90, $arg91, $arg92);\nmy $v9 = 0;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/93", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>> encode('This is a message')\n# 'tHKS KS C MGSSCGG'\n#\nsub encode\n{\n  my ($message) = @_;\n", "entry_point": "encode", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"TEST\";\nmy $x0 = encode($arg00);\nmy $v0 = \"tgst\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Mudasir\";\nmy $x1 = encode($arg10);\nmy $v1 = \"mWDCSKR\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"YES\";\nmy $x2 = encode($arg20);\nmy $v2 = \"ygs\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"This is a message\";\nmy $x3 = encode($arg30);\nmy $v3 = \"tHKS KS C MGSSCGG\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"I DoNt KnOw WhAt tO WrItE\";\nmy $x4 = encode($arg40);\nmy $v4 = \"k dQnT kNqW wHcT Tq wRkTg\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/94", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# You are given a list of integers.\n# You need to find the largest prime value and return the sum of its digits.\n\n# Examples:\n# For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n# For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n# For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n# For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n# For lst = [0,81,12,3,1,21] the output should be 3\n# For lst = [0,8,1,2,1,7] the output should be 7\n#\nsub skjkasdkd\n{\n  my ($lst) = @_;\n", "entry_point": "skjkasdkd", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3];\nmy $x0 = skjkasdkd($arg00);\nmy $v0 = 10;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1];\nmy $x1 = skjkasdkd($arg10);\nmy $v1 = 25;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3];\nmy $x2 = skjkasdkd($arg20);\nmy $v2 = 13;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6];\nmy $x3 = skjkasdkd($arg30);\nmy $v3 = 11;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [0, 81, 12, 3, 1, 21];\nmy $x4 = skjkasdkd($arg40);\nmy $v4 = 3;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [0, 8, 1, 2, 1, 7];\nmy $x5 = skjkasdkd($arg50);\nmy $v5 = 7;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [8191];\nmy $x6 = skjkasdkd($arg60);\nmy $v6 = 19;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [8191, 123456, 127, 7];\nmy $x7 = skjkasdkd($arg70);\nmy $v7 = 19;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [127, 97, 8192];\nmy $x8 = skjkasdkd($arg80);\nmy $v8 = 10;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/95", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given a dictionary, return True if all keys are strings in lower \n# case or all keys are strings in upper case, else return False.\n# The function should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\nsub check_dict_case\n{\n  my ($dict) = @_;\n", "entry_point": "check_dict_case", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {\"p\" => \"pineapple\", \"b\" => \"banana\"};\nmy $x0 = check_dict_case($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"};\nmy $x1 = check_dict_case($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {\"p\" => \"pineapple\", 5 => \"banana\", \"a\" => \"apple\"};\nmy $x2 = check_dict_case($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = {\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"};\nmy $x3 = check_dict_case($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = {\"STATE\" => \"NC\", \"ZIP\" => \"12345\"};\nmy $x4 = check_dict_case($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = {\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"};\nmy $x5 = check_dict_case($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = {};\nmy $x6 = check_dict_case($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/96", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Implement a function that takes an non-negative integer and returns an array of the first n\n# integers that are prime numbers and less than n.\n# for example:\n# count_up_to(5) => [2,3]\n# count_up_to(11) => [2,3,5,7]\n# count_up_to(0) => []\n# count_up_to(20) => [2,3,5,7,11,13,17,19]\n# count_up_to(1) => []\n# count_up_to(18) => [2,3,5,7,11,13,17]\n#\nsub count_up_to\n{\n  my ($n) = @_;\n", "entry_point": "count_up_to", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = count_up_to($arg00);\nmy $v0 = [2, 3];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 6;\nmy $x1 = count_up_to($arg10);\nmy $v1 = [2, 3, 5];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 7;\nmy $x2 = count_up_to($arg20);\nmy $v2 = [2, 3, 5];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 10;\nmy $x3 = count_up_to($arg30);\nmy $v3 = [2, 3, 5, 7];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 0;\nmy $x4 = count_up_to($arg40);\nmy $v4 = [];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 22;\nmy $x5 = count_up_to($arg50);\nmy $v5 = [2, 3, 5, 7, 11, 13, 17, 19];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 1;\nmy $x6 = count_up_to($arg60);\nmy $v6 = [];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 18;\nmy $x7 = count_up_to($arg70);\nmy $v7 = [2, 3, 5, 7, 11, 13, 17];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 47;\nmy $x8 = count_up_to($arg80);\nmy $v8 = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43];\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 101;\nmy $x9 = count_up_to($arg90);\nmy $v9 = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/97", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Complete the function that takes two integers and returns \n# the product of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# multiply(148, 412) should return 16.\n# multiply(19, 28) should return 72.\n# multiply(2020, 1851) should return 0.\n# multiply(14,-15) should return 20.\n#\nsub multiply\n{\n  my ($a, $b) = @_;\n", "entry_point": "multiply", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 148;\nmy $arg01 = 412;\nmy $x0 = multiply($arg00, $arg01);\nmy $v0 = 16;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 19;\nmy $arg11 = 28;\nmy $x1 = multiply($arg10, $arg11);\nmy $v1 = 72;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2020;\nmy $arg21 = 1851;\nmy $x2 = multiply($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 14;\nmy $arg31 = -15;\nmy $x3 = multiply($arg30, $arg31);\nmy $v3 = 20;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 76;\nmy $arg41 = 67;\nmy $x4 = multiply($arg40, $arg41);\nmy $v4 = 42;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 17;\nmy $arg51 = 27;\nmy $x5 = multiply($arg50, $arg51);\nmy $v5 = 49;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 0;\nmy $arg61 = 1;\nmy $x6 = multiply($arg60, $arg61);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 0;\nmy $arg71 = 0;\nmy $x7 = multiply($arg70, $arg71);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/98", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given a string s, count the number of uppercase vowels in even indices.\n# \n# For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns 0\n# count_upper('dBBE') returns 0\n#\nsub count_upper\n{\n  my ($s) = @_;\n", "entry_point": "count_upper", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abcdefg\";\nmy $x0 = count_upper($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"dBBE\";\nmy $x1 = count_upper($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"\";\nmy $x2 = count_upper($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"EEEE\";\nmy $x3 = count_upper($arg30);\nmy $v3 = 2;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/99", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n\n# Examples\n# >>> closest_integer(\"10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n#\nsub closest_integer\n{\n  my ($value) = @_;\n", "entry_point": "closest_integer", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"10\";\nmy $x0 = closest_integer($arg00);\nmy $v0 = 10;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"14.5\";\nmy $x1 = closest_integer($arg10);\nmy $v1 = 15;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"-15.5\";\nmy $x2 = closest_integer($arg20);\nmy $v2 = -16;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"15.3\";\nmy $x3 = closest_integer($arg30);\nmy $v3 = 15;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"0\";\nmy $x4 = closest_integer($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/100", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n#     - the next odd number if n is odd.\n#     - the next even number if n is even.\n# Return the number of stones in each level in a list, where element at index\n# i represents the number of stones in the level (i+1).\n\n# Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\nsub make_a_pile\n{\n  my ($n) = @_;\n", "entry_point": "make_a_pile", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $x0 = make_a_pile($arg00);\nmy $v0 = [3, 5, 7];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = make_a_pile($arg10);\nmy $v1 = [4, 6, 8, 10];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $x2 = make_a_pile($arg20);\nmy $v2 = [5, 7, 9, 11, 13];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 6;\nmy $x3 = make_a_pile($arg30);\nmy $v3 = [6, 8, 10, 12, 14, 16];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 8;\nmy $x4 = make_a_pile($arg40);\nmy $v4 = [8, 10, 12, 14, 16, 18, 20, 22];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/101", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # You will be given a string of words separated by commas or spaces. Your task is\n# to split the string into words and return an array of the words.\n# \n# For example:\n# words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n# words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n#\nsub words_string\n{\n  my ($s) = @_;\n", "entry_point": "words_string", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Hi, my name is John\";\nmy $x0 = words_string($arg00);\nmy $v0 = [\"Hi\", \"my\", \"name\", \"is\", \"John\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"One, two, three, four, five, six\";\nmy $x1 = words_string($arg10);\nmy $v1 = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Hi, my name\";\nmy $x2 = words_string($arg20);\nmy $v2 = [\"Hi\", \"my\", \"name\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"One,, two, three, four, five, six,\";\nmy $x3 = words_string($arg30);\nmy $v3 = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"\";\nmy $x4 = words_string($arg40);\nmy $v4 = [];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"ahmed     , gamal\";\nmy $x5 = words_string($arg50);\nmy $v5 = [\"ahmed\", \"gamal\"];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/102", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# This function takes two positive numbers x and y and returns the\n# biggest even integer number that is in the range [x, y] inclusive. If \n# there's no such number, then the function should return -1.\n\n# For example:\n# choose_num(12, 15) = 14\n# choose_num(13, 12) = -1\n#\nsub choose_num\n{\n  my ($x, $y) = @_;\n", "entry_point": "choose_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 12;\nmy $arg01 = 15;\nmy $x0 = choose_num($arg00, $arg01);\nmy $v0 = 14;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 13;\nmy $arg11 = 12;\nmy $x1 = choose_num($arg10, $arg11);\nmy $v1 = -1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 33;\nmy $arg21 = 12354;\nmy $x2 = choose_num($arg20, $arg21);\nmy $v2 = 12354;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 5234;\nmy $arg31 = 5233;\nmy $x3 = choose_num($arg30, $arg31);\nmy $v3 = -1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 6;\nmy $arg41 = 29;\nmy $x4 = choose_num($arg40, $arg41);\nmy $v4 = 28;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 27;\nmy $arg51 = 10;\nmy $x5 = choose_num($arg50, $arg51);\nmy $v5 = -1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 7;\nmy $arg61 = 7;\nmy $x6 = choose_num($arg60, $arg61);\nmy $v6 = -1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 546;\nmy $arg71 = 546;\nmy $x7 = choose_num($arg70, $arg71);\nmy $v7 = 546;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/103", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# You are given two positive integers n and m, and your task is to compute the\n# average of the integers from n through m (including n and m). \n# Round the answer to the nearest integer and convert that to binary.\n# If n is greater than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7, 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\n#\nsub rounded_avg\n{\n  my ($n, $m) = @_;\n", "entry_point": "rounded_avg", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 5;\nmy $x0 = rounded_avg($arg00, $arg01);\nmy $v0 = \"0b11\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 7;\nmy $arg11 = 13;\nmy $x1 = rounded_avg($arg10, $arg11);\nmy $v1 = \"0b1010\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 964;\nmy $arg21 = 977;\nmy $x2 = rounded_avg($arg20, $arg21);\nmy $v2 = \"0b1111001010\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 996;\nmy $arg31 = 997;\nmy $x3 = rounded_avg($arg30, $arg31);\nmy $v3 = \"0b1111100100\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 560;\nmy $arg41 = 851;\nmy $x4 = rounded_avg($arg40, $arg41);\nmy $v4 = \"0b1011000010\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 185;\nmy $arg51 = 546;\nmy $x5 = rounded_avg($arg50, $arg51);\nmy $v5 = \"0b101101110\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 362;\nmy $arg61 = 496;\nmy $x6 = rounded_avg($arg60, $arg61);\nmy $v6 = \"0b110101101\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 350;\nmy $arg71 = 902;\nmy $x7 = rounded_avg($arg70, $arg71);\nmy $v7 = \"0b1001110010\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 197;\nmy $arg81 = 233;\nmy $x8 = rounded_avg($arg80, $arg81);\nmy $v8 = \"0b11010111\";\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 7;\nmy $arg91 = 5;\nmy $x9 = rounded_avg($arg90, $arg91);\nmy $v9 = -1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = 5;\nmy $arg101 = 1;\nmy $x10 = rounded_avg($arg100, $arg101);\nmy $v10 = -1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = 5;\nmy $arg111 = 5;\nmy $x11 = rounded_avg($arg110, $arg111);\nmy $v11 = \"0b101\";\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\n", "description": "You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/104", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Given a list of positive integers x. return a sorted list of all \n# elements that hasn't any even digit.\n\n# Note: Returned list should be sorted in increasing order.\n# \n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n#\nsub unique_digits\n{\n  my ($x) = @_;\n", "entry_point": "unique_digits", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [15, 33, 1422, 1];\nmy $x0 = unique_digits($arg00);\nmy $v0 = [1, 15, 33];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [152, 323, 1422, 10];\nmy $x1 = unique_digits($arg10);\nmy $v1 = [];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [12345, 2033, 111, 151];\nmy $x2 = unique_digits($arg20);\nmy $v2 = [111, 151];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [135, 103, 31];\nmy $x3 = unique_digits($arg30);\nmy $v3 = [31, 135];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/105", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting array, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n# For example:\n#   arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n#         -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n#         -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n#   return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# \n#   If the array is empty, return an empty array:\n#   arr = []\n#   return []\n# \n#   If the array has any strange number ignore it:\n#   arr = [1, -1 , 55] \n#         -> sort arr -> [-1, 1, 55]\n#         -> reverse arr -> [55, 1, -1]\n#   return = ['One']\n#\nsub by_length\n{\n  my ($arr) = @_;\n", "entry_point": "by_length", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 1, 1, 4, 5, 8, 2, 3];\nmy $x0 = by_length($arg00);\nmy $v0 = [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [];\nmy $x1 = by_length($arg10);\nmy $v1 = [];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, -1, 55];\nmy $x2 = by_length($arg20);\nmy $v2 = [\"One\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, -1, 3, 2];\nmy $x3 = by_length($arg30);\nmy $v3 = [\"Three\", \"Two\", \"One\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [9, 4, 8];\nmy $x4 = by_length($arg40);\nmy $v4 = [\"Nine\", \"Eight\", \"Four\"];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/106", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Implement the function f that takes n as a parameter,\n# and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# f(5) == [1, 2, 6, 24, 15]\n#\nsub f\n{\n  my ($n) = @_;\n", "entry_point": "f", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = f($arg00);\nmy $v0 = [1, 2, 6, 24, 15];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 7;\nmy $x1 = f($arg10);\nmy $v1 = [1, 2, 6, 24, 15, 720, 28];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $x2 = f($arg20);\nmy $v2 = [1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 3;\nmy $x3 = f($arg30);\nmy $v3 = [1, 2, 6];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/107", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given a positive integer n, return a tuple that has the number of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n\n# Example 1:\n\n#     Input: 3\n#     Output: (1, 2)\n#     Explanation:\n#     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n# Example 2:\n\n#     Input: 12\n#     Output: (4, 6)\n#     Explanation:\n#     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n# Note:\n#     1. 1 <= n <= 10^3\n#     2. returned tuple has the number of even and odd integer palindromes respectively.\n#\nsub even_odd_palindrome\n{\n  my ($n) = @_;\n", "entry_point": "even_odd_palindrome", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 123;\nmy $x0 = even_odd_palindrome($arg00);\nmy $v0 = [8, 13];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 12;\nmy $x1 = even_odd_palindrome($arg10);\nmy $v1 = [4, 6];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $x2 = even_odd_palindrome($arg20);\nmy $v2 = [1, 2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 63;\nmy $x3 = even_odd_palindrome($arg30);\nmy $v3 = [6, 8];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 25;\nmy $x4 = even_odd_palindrome($arg40);\nmy $v4 = [5, 6];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 19;\nmy $x5 = even_odd_palindrome($arg50);\nmy $v5 = [4, 6];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 9;\nmy $x6 = even_odd_palindrome($arg60);\nmy $v6 = [4, 5];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 1;\nmy $x7 = even_odd_palindrome($arg70);\nmy $v7 = [0, 1];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/108", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function count_nums which takes an array of integers and returns\n# the number of elements which has a sum of digits > 0.\n# If a number is negative, then its first signed digit will be negative:\n# e.g. -123 has signed digits -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) == 1\n# >>> count_nums([1, 1, 2]) == 3\n#\nsub count_nums\n{\n  my ($arr) = @_;\n", "entry_point": "count_nums", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = count_nums($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [-1, -2, 0];\nmy $x1 = count_nums($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 1, 2, -2, 3, 4, 5];\nmy $x2 = count_nums($arg20);\nmy $v2 = 6;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, 6, 9, -6, 0, 1, 5];\nmy $x3 = count_nums($arg30);\nmy $v3 = 5;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 100, 98, -7, 1, -1];\nmy $x4 = count_nums($arg40);\nmy $v4 = 4;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [12, 23, 34, -45, -56, 0];\nmy $x5 = count_nums($arg50);\nmy $v5 = 5;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [0, 1];\nmy $x6 = count_nums($arg60);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [1];\nmy $x7 = count_nums($arg70);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/109", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n# numbers in the array will be randomly ordered. Your task is to determine if\n# it is possible to get an array sorted in non-decreasing order by performing \n# the following operation on the given array:\n#     You are allowed to perform right shift operation any number of times.\n# \n# One right shift operation means shifting all elements of the array by one\n# position in the right direction. The last element of the array will be moved to\n# the starting position in the array i.e. 0th index. \n\n# If it is possible to obtain the sorted array by performing the above operation\n# then return True else return False.\n# If the given array is empty then return True.\n\n# Note: The given list is guaranteed to have unique elements.\n\n# For Example:\n# \n# move_one_ball([3, 4, 5, 1, 2])==>True\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n#              be achieved for the given array.\n# move_one_ball([3, 5, 4, 1, 2])==>False\n# Explanation:It is not possible to get non-decreasing order for the given\n#             array by performing any number of right shift operations.\n#             \n#\nsub move_one_ball\n{\n  my ($arr) = @_;\n", "entry_point": "move_one_ball", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 4, 5, 1, 2];\nmy $x0 = move_one_ball($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [3, 5, 10, 1, 2];\nmy $x1 = move_one_ball($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [4, 3, 1, 2];\nmy $x2 = move_one_ball($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [3, 5, 4, 1, 2];\nmy $x3 = move_one_ball($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [];\nmy $x4 = move_one_ball($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/110", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# In this problem, you will implement a function that takes two lists of numbers,\n# and determines whether it is possible to perform an exchange of elements\n# between them to make lst1 a list of only even numbers.\n# There is no limit on the number of exchanged elements between lst1 and lst2.\n# If it is possible to exchange elements between the lst1 and lst2 to make\n# all the elements of lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n# exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n# It is assumed that the input lists will be non-empty.\n#\nsub exchange\n{\n  my ($lst1, $lst2) = @_;\n", "entry_point": "exchange", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4];\nmy $arg01 = [1, 2, 3, 4];\nmy $x0 = exchange($arg00, $arg01);\nmy $v0 = \"YES\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4];\nmy $arg11 = [1, 5, 3, 4];\nmy $x1 = exchange($arg10, $arg11);\nmy $v1 = \"NO\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4];\nmy $arg21 = [2, 1, 4, 3];\nmy $x2 = exchange($arg20, $arg21);\nmy $v2 = \"YES\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [5, 7, 3];\nmy $arg31 = [2, 6, 4];\nmy $x3 = exchange($arg30, $arg31);\nmy $v3 = \"YES\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [5, 7, 3];\nmy $arg41 = [2, 6, 3];\nmy $x4 = exchange($arg40, $arg41);\nmy $v4 = \"NO\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [3, 2, 6, 1, 8, 9];\nmy $arg51 = [3, 5, 5, 1, 1, 1];\nmy $x5 = exchange($arg50, $arg51);\nmy $v5 = \"NO\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [100, 200];\nmy $arg61 = [200, 200];\nmy $x6 = exchange($arg60, $arg61);\nmy $v6 = \"YES\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/111", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Given a string representing a space separated lowercase letters, return a dictionary\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n# \n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n# histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a': 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n\n#\nsub histogram\n{\n  my ($test) = @_;\n", "entry_point": "histogram", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"a b b a\";\nmy $x0 = histogram($arg00);\nmy $v0 = {\"a\" => 2, \"b\" => 2};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"a b c a b\";\nmy $x1 = histogram($arg10);\nmy $v1 = {\"a\" => 2, \"b\" => 2};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"a b c d g\";\nmy $x2 = histogram($arg20);\nmy $v2 = {\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"r t g\";\nmy $x3 = histogram($arg30);\nmy $v3 = {\"r\" => 1, \"t\" => 1, \"g\" => 1};\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"b b b b a\";\nmy $x4 = histogram($arg40);\nmy $v4 = {\"b\" => 4};\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"r t g\";\nmy $x5 = histogram($arg50);\nmy $v5 = {\"r\" => 1, \"t\" => 1, \"g\" => 1};\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"\";\nmy $x6 = histogram($arg60);\nmy $v6 = {};\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"a\";\nmy $x7 = histogram($arg70);\nmy $v7 = {\"a\" => 1};\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/112", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Task\n# We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n# then check if the result string is palindrome.\n# A string is called palindrome if it reads the same backward as forward.\n# You should return a tuple containing the result string and True/False for the check.\n# Example\n# For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n# For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n# For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n#\nsub reverse_delete\n{\n  my ($s, $c) = @_;\n", "entry_point": "reverse_delete", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abcde\";\nmy $arg01 = \"ae\";\nmy $x0 = reverse_delete($arg00, $arg01);\nmy $v0 = [\"bcd\", 0];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcdef\";\nmy $arg11 = \"b\";\nmy $x1 = reverse_delete($arg10, $arg11);\nmy $v1 = [\"acdef\", 0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abcdedcba\";\nmy $arg21 = \"ab\";\nmy $x2 = reverse_delete($arg20, $arg21);\nmy $v2 = [\"cdedc\", 1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"dwik\";\nmy $arg31 = \"w\";\nmy $x3 = reverse_delete($arg30, $arg31);\nmy $v3 = [\"dik\", 0];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"a\";\nmy $arg41 = \"a\";\nmy $x4 = reverse_delete($arg40, $arg41);\nmy $v4 = [\"\", 1];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"abcdedcba\";\nmy $arg51 = \"\";\nmy $x5 = reverse_delete($arg50, $arg51);\nmy $v5 = [\"abcdedcba\", 1];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"abcdedcba\";\nmy $arg61 = \"v\";\nmy $x6 = reverse_delete($arg60, $arg61);\nmy $v6 = [\"abcdedcba\", 1];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"vabba\";\nmy $arg71 = \"v\";\nmy $x7 = reverse_delete($arg70, $arg71);\nmy $v7 = [\"abba\", 1];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"mamma\";\nmy $arg81 = \"mia\";\nmy $x8 = reverse_delete($arg80, $arg81);\nmy $v8 = [\"\", 1];\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/113", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Given a list of strings, where each string consists of only digits, return a list.\n# Each element i of the output should be \"the number of odd elements in the\n# string i of the input.\" where all the i's should be replaced by the number\n# of odd digits in the i'th string of the input.\n\n# >>> odd_count(['1234567'])\n# [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n# >>> odd_count(['3',\"11111111\"])\n# [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n#  \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n#\nsub odd_count\n{\n  my ($lst) = @_;\n", "entry_point": "odd_count", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"1234567\"];\nmy $x0 = odd_count($arg00);\nmy $v0 = [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"3\", \"11111111\"];\nmy $x1 = odd_count($arg10);\nmy $v1 = [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"271\", \"137\", \"314\"];\nmy $x2 = odd_count($arg20);\nmy $v2 = [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/114", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given an array of integers nums, find the minimum sum of any non-empty sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n# minSubArraySum([-1, -2, -3]) == -6\n#\nsub minsubarraysum\n{\n  my ($nums) = @_;\n", "entry_point": "minsubarraysum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 3, 4, 1, 2, 4];\nmy $x0 = minsubarraysum($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [-1, -2, -3];\nmy $x1 = minsubarraysum($arg10);\nmy $v1 = -6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [-1, -2, -3, 2, -10];\nmy $x2 = minsubarraysum($arg20);\nmy $v2 = -14;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [-9999999999999999];\nmy $x3 = minsubarraysum($arg30);\nmy $v3 = -9999999999999999;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [0, 10, 20, 1000000];\nmy $x4 = minsubarraysum($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [-1, -2, -3, 10, -5];\nmy $x5 = minsubarraysum($arg50);\nmy $v5 = -6;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [100, -1, -2, -3, 10, -5];\nmy $x6 = minsubarraysum($arg60);\nmy $v6 = -6;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [10, 11, 13, 8, 3, 4];\nmy $x7 = minsubarraysum($arg70);\nmy $v7 = 3;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [100, -33, 32, -1, 0, -2];\nmy $x8 = minsubarraysum($arg80);\nmy $v8 = -33;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [-10];\nmy $x9 = minsubarraysum($arg90);\nmy $v9 = -10;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = [7];\nmy $x10 = minsubarraysum($arg100);\nmy $v10 = 7;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = [1, -1];\nmy $x11 = minsubarraysum($arg110);\nmy $v11 = -1;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\n", "description": "Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/115", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # You are given a rectangular grid of wells. Each row represents a single well,\n# and each 1 in a row represents a single unit of water.\n# Each well has a corresponding bucket that can be used to extract water from it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets to empty the wells.\n# Output the number of times you need to lower the buckets.\n\n# Example 1:\n#     Input: \n#         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n#         bucket_capacity : 1\n#     Output: 6\n\n# Example 2:\n#     Input: \n#         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n#         bucket_capacity : 2\n#     Output: 5\n# \n# Example 3:\n#     Input: \n#         grid : [[0,0,0], [0,0,0]]\n#         bucket_capacity : 5\n#     Output: 0\n\n# Constraints:\n#     * all wells have the same length\n#     * 1 <= grid.length <= 10^2\n#     * 1 <= grid[:,1].length <= 10^2\n#     * grid[i][j] -> 0 | 1\n#     * 1 <= capacity <= 10\n#\nsub max_fill\n{\n  my ($grid, $capacity) = @_;\n", "entry_point": "max_fill", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\nmy $arg01 = 1;\nmy $x0 = max_fill($arg00, $arg01);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]];\nmy $arg11 = 2;\nmy $x1 = max_fill($arg10, $arg11);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[0, 0, 0], [0, 0, 0]];\nmy $arg21 = 5;\nmy $x2 = max_fill($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [[1, 1, 1, 1], [1, 1, 1, 1]];\nmy $arg31 = 2;\nmy $x3 = max_fill($arg30, $arg31);\nmy $v3 = 4;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [[1, 1, 1, 1], [1, 1, 1, 1]];\nmy $arg41 = 9;\nmy $x4 = max_fill($arg40, $arg41);\nmy $v4 = 2;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/116", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # In this Kata, you have to sort an array of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n\n# It must be implemented like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n#\nsub sort_array\n{\n  my ($arr) = @_;\n", "entry_point": "sort_array", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 5, 2, 3, 4];\nmy $x0 = sort_array($arg00);\nmy $v0 = [1, 2, 4, 3, 5];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [-2, -3, -4, -5, -6];\nmy $x1 = sort_array($arg10);\nmy $v1 = [-4, -2, -6, -5, -3];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 0, 2, 3, 4];\nmy $x2 = sort_array($arg20);\nmy $v2 = [0, 1, 2, 4, 3];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [];\nmy $x3 = sort_array($arg30);\nmy $v3 = [];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4];\nmy $x4 = sort_array($arg40);\nmy $v4 = [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [3, 6, 44, 12, 32, 5];\nmy $x5 = sort_array($arg50);\nmy $v5 = [32, 3, 5, 6, 12, 44];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [2, 4, 8, 16, 32];\nmy $x6 = sort_array($arg60);\nmy $v6 = [2, 4, 8, 16, 32];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [2, 4, 8, 16, 32];\nmy $x7 = sort_array($arg70);\nmy $v7 = [2, 4, 8, 16, 32];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/117", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\nsub select_words\n{\n  my ($s, $n) = @_;\n", "entry_point": "select_words", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Mary had a little lamb\";\nmy $arg01 = 4;\nmy $x0 = select_words($arg00, $arg01);\nmy $v0 = [\"little\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Mary had a little lamb\";\nmy $arg11 = 3;\nmy $x1 = select_words($arg10, $arg11);\nmy $v1 = [\"Mary\", \"lamb\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"simple white space\";\nmy $arg21 = 2;\nmy $x2 = select_words($arg20, $arg21);\nmy $v2 = [];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"Hello world\";\nmy $arg31 = 4;\nmy $x3 = select_words($arg30, $arg31);\nmy $v3 = [\"world\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"Uncle sam\";\nmy $arg41 = 3;\nmy $x4 = select_words($arg40, $arg41);\nmy $v4 = [\"Uncle\"];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"\";\nmy $arg51 = 4;\nmy $x5 = select_words($arg50, $arg51);\nmy $v5 = [];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"a b c d e f\";\nmy $arg61 = 1;\nmy $x6 = select_words($arg60, $arg61);\nmy $v6 = [\"b\", \"c\", \"d\", \"f\"];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/118", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# You are given a word. Your task is to find the closest vowel that stands between \n# two consonants from the right side of the word (case sensitive).\n# \n# Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n# find any vowel met the above condition. \n\n# You may assume that the given string contains English letter only.\n\n# Example:\n# get_closest_vowel(\"yogurt\") ==> \"u\"\n# get_closest_vowel(\"FULL\") ==> \"U\"\n# get_closest_vowel(\"quick\") ==> \"\"\n# get_closest_vowel(\"ab\") ==> \"\"\n#\nsub get_closest_vowel\n{\n  my ($word) = @_;\n", "entry_point": "get_closest_vowel", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"yogurt\";\nmy $x0 = get_closest_vowel($arg00);\nmy $v0 = \"u\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"full\";\nmy $x1 = get_closest_vowel($arg10);\nmy $v1 = \"u\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"easy\";\nmy $x2 = get_closest_vowel($arg20);\nmy $v2 = \"\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"eAsy\";\nmy $x3 = get_closest_vowel($arg30);\nmy $v3 = \"\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"ali\";\nmy $x4 = get_closest_vowel($arg40);\nmy $v4 = \"\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"bad\";\nmy $x5 = get_closest_vowel($arg50);\nmy $v5 = \"a\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"most\";\nmy $x6 = get_closest_vowel($arg60);\nmy $v6 = \"o\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"ab\";\nmy $x7 = get_closest_vowel($arg70);\nmy $v7 = \"\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"ba\";\nmy $x8 = get_closest_vowel($arg80);\nmy $v8 = \"\";\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = \"quick\";\nmy $x9 = get_closest_vowel($arg90);\nmy $v9 = \"\";\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = \"anime\";\nmy $x10 = get_closest_vowel($arg100);\nmy $v10 = \"i\";\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = \"Asia\";\nmy $x11 = get_closest_vowel($arg110);\nmy $v11 = \"\";\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = \"Above\";\nmy $x12 = get_closest_vowel($arg120);\nmy $v12 = \"o\";\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\n", "description": "You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/119", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # You are given a list of two strings, both strings consist of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in\n# some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S\n# are balanced. For example: the string '(())()' is good, while the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n# Examples:\n# match_parens(['()(', ')']) == 'Yes'\n# match_parens([')', ')']) == 'No'\n#\nsub match_parens\n{\n  my ($lst) = @_;\n", "entry_point": "match_parens", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"()(\", \")\"];\nmy $x0 = match_parens($arg00);\nmy $v0 = \"Yes\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\")\", \")\"];\nmy $x1 = match_parens($arg10);\nmy $v1 = \"No\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"(()(())\", \"())())\"];\nmy $x2 = match_parens($arg20);\nmy $v2 = \"No\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [\")())\", \"(()()(\"];\nmy $x3 = match_parens($arg30);\nmy $v3 = \"Yes\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [\"(())))\", \"(()())((\"];\nmy $x4 = match_parens($arg40);\nmy $v4 = \"Yes\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [\"()\", \"())\"];\nmy $x5 = match_parens($arg50);\nmy $v5 = \"No\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [\"(()(\", \"()))()\"];\nmy $x6 = match_parens($arg60);\nmy $v6 = \"Yes\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [\"((((\", \"((())\"];\nmy $x7 = match_parens($arg70);\nmy $v7 = \"No\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [\")(()\", \"(()(\"];\nmy $x8 = match_parens($arg80);\nmy $v8 = \"No\";\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [\")(\", \")(\"];\nmy $x9 = match_parens($arg90);\nmy $v9 = \"No\";\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = [\"(\", \")\"];\nmy $x10 = match_parens($arg100);\nmy $v10 = \"Yes\";\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = [\")\", \"(\"];\nmy $x11 = match_parens($arg110);\nmy $v11 = \"Yes\";\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\n", "description": "You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/120", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given an array arr of integers and a positive integer k, return a sorted list \n# of length k with the maximum k numbers in arr.\n\n# Example 1:\n\n#     Input: arr = [-3, -4, 5], k = 3\n#     Output: [-4, -3, 5]\n\n# Example 2:\n\n#     Input: arr = [4, -4, 4], k = 2\n#     Output: [4, 4]\n\n# Example 3:\n\n#     Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n#     Output: [2]\n\n# Note:\n#     1. The length of the array will be in the range of [1, 1000].\n#     2. The elements in the array will be in the range of [-1000, 1000].\n#     3. 0 <= k <= len(arr)\n#\nsub maximum\n{\n  my ($arr, $k) = @_;\n", "entry_point": "maximum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [-3, -4, 5];\nmy $arg01 = 3;\nmy $x0 = maximum($arg00, $arg01);\nmy $v0 = [-4, -3, 5];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, -4, 4];\nmy $arg11 = 2;\nmy $x1 = maximum($arg10, $arg11);\nmy $v1 = [4, 4];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [-3, 2, 1, 2, -1, -2, 1];\nmy $arg21 = 1;\nmy $x2 = maximum($arg20, $arg21);\nmy $v2 = [2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [123, -123, 20, 0, 1, 2, -3];\nmy $arg31 = 3;\nmy $x3 = maximum($arg30, $arg31);\nmy $v3 = [2, 20, 123];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [-123, 20, 0, 1, 2, -3];\nmy $arg41 = 4;\nmy $x4 = maximum($arg40, $arg41);\nmy $v4 = [0, 1, 2, 20];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [5, 15, 0, 3, -13, -8, 0];\nmy $arg51 = 7;\nmy $x5 = maximum($arg50, $arg51);\nmy $v5 = [-13, -8, 0, 0, 3, 5, 15];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [-1, 0, 2, 5, 3, -10];\nmy $arg61 = 2;\nmy $x6 = maximum($arg60, $arg61);\nmy $v6 = [3, 5];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [1, 0, 5, -7];\nmy $arg71 = 1;\nmy $x7 = maximum($arg70, $arg71);\nmy $v7 = [5];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [4, -4];\nmy $arg81 = 2;\nmy $x8 = maximum($arg80, $arg81);\nmy $v8 = [-4, 4];\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [-10, 10];\nmy $arg91 = 2;\nmy $x9 = maximum($arg90, $arg91);\nmy $v9 = [-10, 10];\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = [1, 2, 3, -23, 243, -400, 0];\nmy $arg101 = 0;\nmy $x10 = maximum($arg100, $arg101);\nmy $v10 = [];\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\n", "description": "Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/121", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n# \n\n# Examples\n# solution([5, 8, 7, 1]) ==> 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n#\nsub solution\n{\n  my ($lst) = @_;\n", "entry_point": "solution", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 3, 3, 3, 3];\nmy $x0 = solution($arg00);\nmy $v0 = 9;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [30, 13, 24, 321];\nmy $x1 = solution($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [5, 9];\nmy $x2 = solution($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [2, 4, 8];\nmy $x3 = solution($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [30, 13, 23, 32];\nmy $x4 = solution($arg40);\nmy $v4 = 23;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [3, 13, 2, 9];\nmy $x5 = solution($arg50);\nmy $v5 = 3;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/122", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given a non-empty array of integers arr and an integer k, return\n# the sum of the elements with at most two digits from the first k elements of arr.\n\n# Example:\n\n#     Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n#     Output: 24 # sum of 21 + 3\n\n# Constraints:\n#     1. 1 <= len(arr) <= 100\n#     2. 1 <= k <= len(arr)\n#\nsub add_elements\n{\n  my ($arr, $k) = @_;\n", "entry_point": "add_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, -2, -3, 41, 57, 76, 87, 88, 99];\nmy $arg01 = 3;\nmy $x0 = add_elements($arg00, $arg01);\nmy $v0 = -4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [111, 121, 3, 4000, 5, 6];\nmy $arg11 = 2;\nmy $x1 = add_elements($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [11, 21, 3, 90, 5, 6, 7, 8, 9];\nmy $arg21 = 4;\nmy $x2 = add_elements($arg20, $arg21);\nmy $v2 = 125;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\nmy $arg31 = 4;\nmy $x3 = add_elements($arg30, $arg31);\nmy $v3 = 24;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1];\nmy $arg41 = 1;\nmy $x4 = add_elements($arg40, $arg41);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/123", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the \n# previous term as follows: if the previous term is even, the next term is one half of \n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n# Note: \n#     1. Collatz(1) is [1].\n#     2. returned list sorted in increasing order.\n\n# For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n#\nsub get_odd_collatz\n{\n  my ($n) = @_;\n", "entry_point": "get_odd_collatz", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 14;\nmy $x0 = get_odd_collatz($arg00);\nmy $v0 = [1, 5, 7, 11, 13, 17];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $x1 = get_odd_collatz($arg10);\nmy $v1 = [1, 5];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 12;\nmy $x2 = get_odd_collatz($arg20);\nmy $v2 = [1, 3, 5];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 1;\nmy $x3 = get_odd_collatz($arg30);\nmy $v3 = [1];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/124", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# You have to write a function which validates a given date string and\n# returns True if the date is valid otherwise False.\n# The date is valid if all of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n# 3. The months should not be less than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\n# for example: \n# valid_date('03-11-2000') => True\n\n# valid_date('15-01-2012') => False\n\n# valid_date('04-0-2040') => False\n\n# valid_date('06-04-2020') => True\n\n# valid_date('06/04/2020') => False\n#\nsub valid_date\n{\n  my ($date) = @_;\n", "entry_point": "valid_date", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"03-11-2000\";\nmy $x0 = valid_date($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"15-01-2012\";\nmy $x1 = valid_date($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"04-0-2040\";\nmy $x2 = valid_date($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"06-04-2020\";\nmy $x3 = valid_date($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"01-01-2007\";\nmy $x4 = valid_date($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"03-32-2011\";\nmy $x5 = valid_date($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"\";\nmy $x6 = valid_date($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"04-31-3000\";\nmy $x7 = valid_date($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"06-06-2005\";\nmy $x8 = valid_date($arg80);\nmy $v8 = 1;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = \"21-31-2000\";\nmy $x9 = valid_date($arg90);\nmy $v9 = 0;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = \"04-12-2003\";\nmy $x10 = valid_date($arg100);\nmy $v10 = 1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = \"04122003\";\nmy $x11 = valid_date($arg110);\nmy $v11 = 0;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = \"20030412\";\nmy $x12 = valid_date($arg120);\nmy $v12 = 0;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = \"2003-04\";\nmy $x13 = valid_date($arg130);\nmy $v13 = 0;\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\nmy $arg140 = \"2003-04-12\";\nmy $x14 = valid_date($arg140);\nmy $v14 = 0;\nunless(Compare($x14, $v14)) {\n    die \"Exception -- test case 14 did not pass.\";\n}\nmy $arg150 = \"04-2003\";\nmy $x15 = valid_date($arg150);\nmy $v15 = 0;\nunless(Compare($x15, $v15)) {\n    die \"Exception -- test case 15 did not pass.\";\n}\n", "description": "You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/125", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n# should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n# split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n# split_words(\"abcdef\") == 3 \n#\nsub split_words\n{\n  my ($txt) = @_;\n", "entry_point": "split_words", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Hello world!\";\nmy $x0 = split_words($arg00);\nmy $v0 = [\"Hello\", \"world!\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Hello,world!\";\nmy $x1 = split_words($arg10);\nmy $v1 = [\"Hello\", \"world!\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Hello world,!\";\nmy $x2 = split_words($arg20);\nmy $v2 = [\"Hello\", \"world,!\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"Hello,Hello,world !\";\nmy $x3 = split_words($arg30);\nmy $v3 = [\"Hello,Hello,world\", \"!\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"abcdef\";\nmy $x4 = split_words($arg40);\nmy $v4 = 3;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"aaabb\";\nmy $x5 = split_words($arg50);\nmy $v5 = 2;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"aaaBb\";\nmy $x6 = split_words($arg60);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"\";\nmy $x7 = split_words($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/126", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given a list of numbers, return whether or not they are sorted\n# in ascending order. If list has more than 1 duplicate of the same\n# number, return False. Assume no negative numbers and only integers.\n\n# Examples\n# is_sorted([5]) \u279e True\n# is_sorted([1, 2, 3, 4, 5]) \u279e True\n# is_sorted([1, 3, 2, 4, 5]) \u279e False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n# is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n# is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n#\nsub is_sorted\n{\n  my ($lst) = @_;\n", "entry_point": "is_sorted", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5];\nmy $x0 = is_sorted($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5];\nmy $x1 = is_sorted($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, 2, 4, 5];\nmy $x2 = is_sorted($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, 2, 3, 4, 5, 6];\nmy $x3 = is_sorted($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 2, 3, 4, 5, 6, 7];\nmy $x4 = is_sorted($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1, 3, 2, 4, 5, 6, 7];\nmy $x5 = is_sorted($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [];\nmy $x6 = is_sorted($arg60);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [1];\nmy $x7 = is_sorted($arg70);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [3, 2, 1];\nmy $x8 = is_sorted($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [1, 2, 2, 2, 3, 4];\nmy $x9 = is_sorted($arg90);\nmy $v9 = 0;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = [1, 2, 3, 3, 3, 4];\nmy $x10 = is_sorted($arg100);\nmy $v10 = 0;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = [1, 2, 2, 3, 3, 4];\nmy $x11 = is_sorted($arg110);\nmy $v11 = 1;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = [1, 2, 3, 4];\nmy $x12 = is_sorted($arg120);\nmy $v12 = 1;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\n", "description": "Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/127", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# You are given two intervals,\n# where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n# The given intervals are closed which means that the interval (start, end)\n# includes both start and end.\n# For each given interval, it is assumed that its start is less or equal its end.\n# Your task is to determine whether the length of intersection of these two \n# intervals is a prime number.\n# Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If the length of the intersection is a prime number, return \"YES\",\n# otherwise, return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n\n\n# [input/output] samples:\n# intersection((1, 2), (2, 3)) ==> \"NO\"\n# intersection((-1, 1), (0, 4)) ==> \"NO\"\n# intersection((-3, -1), (-5, 5)) ==> \"YES\"\n#\nsub intersection\n{\n  my ($interval1, $interval2) = @_;\n", "entry_point": "intersection", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2];\nmy $arg01 = [2, 3];\nmy $x0 = intersection($arg00, $arg01);\nmy $v0 = \"NO\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [-1, 1];\nmy $arg11 = [0, 4];\nmy $x1 = intersection($arg10, $arg11);\nmy $v1 = \"NO\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [-3, -1];\nmy $arg21 = [-5, 5];\nmy $x2 = intersection($arg20, $arg21);\nmy $v2 = \"YES\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [-2, 2];\nmy $arg31 = [-4, 0];\nmy $x3 = intersection($arg30, $arg31);\nmy $v3 = \"YES\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [-11, 2];\nmy $arg41 = [-1, -1];\nmy $x4 = intersection($arg40, $arg41);\nmy $v4 = \"NO\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1, 2];\nmy $arg51 = [3, 5];\nmy $x5 = intersection($arg50, $arg51);\nmy $v5 = \"NO\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [1, 2];\nmy $arg61 = [1, 2];\nmy $x6 = intersection($arg60, $arg61);\nmy $v6 = \"NO\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [-2, -2];\nmy $arg71 = [-3, -2];\nmy $x7 = intersection($arg70, $arg71);\nmy $v7 = \"NO\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/128", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # You are given an array arr of integers and you need to return\n# sum of magnitudes of integers multiplied by product of all signs\n# of each number in the array, represented by 1, -1 or 0.\n# Note: return \"none\" for empty arr.\n\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0, 1]) == 0\n# >>> prod_signs([]) == None\n#\nsub prod_signs\n{\n  my ($arr) = @_;\n", "entry_point": "prod_signs", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 2, -4];\nmy $x0 = prod_signs($arg00);\nmy $v0 = -9;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [0, 1];\nmy $x1 = prod_signs($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 1, 1, 2, 3, -1, 1];\nmy $x2 = prod_signs($arg20);\nmy $v2 = -10;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [];\nmy $x3 = prod_signs($arg30);\nmy $v3 = \"none\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [2, 4, 1, 2, -1, -1, 9];\nmy $x4 = prod_signs($arg40);\nmy $v4 = 20;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [-1, 1, -1, 1];\nmy $x5 = prod_signs($arg50);\nmy $v5 = 4;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [-1, 1, 1, 1];\nmy $x6 = prod_signs($arg60);\nmy $v6 = -4;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [-1, 1, 1, 0];\nmy $x7 = prod_signs($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return \"none\" for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/129", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n# each cell of the grid contains a value. Every integer in the range [1, N * N]\n# inclusive appears exactly once on the cells of the grid.\n\n# You have to find the minimum path of length k in the grid. You can start\n# from any cell, and in each step you can move to any of the neighbor cells,\n# in other words, you can go to cells which share an edge with you current\n# cell.\n# Please note that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n# You CANNOT go off the grid.\n# A path A (of length k) is considered less than a path B (of length k) if\n# after making the ordered lists of the values on the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically less\n# than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered list of the values on the cells that the minimum path go through.\n\n# Examples:\n\n#     Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n#     Output: [1, 2, 1]\n\n#     Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n#     Output: [1]\n#\nsub minpath\n{\n  my ($grid, $k) = @_;\n", "entry_point": "minpath", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nmy $arg01 = 3;\nmy $x0 = minpath($arg00, $arg01);\nmy $v0 = [1, 2, 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[5, 9, 3], [4, 1, 6], [7, 8, 2]];\nmy $arg11 = 1;\nmy $x1 = minpath($arg10, $arg11);\nmy $v1 = [1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]];\nmy $arg21 = 4;\nmy $x2 = minpath($arg20, $arg21);\nmy $v2 = [1, 2, 1, 2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]];\nmy $arg31 = 7;\nmy $x3 = minpath($arg30, $arg31);\nmy $v3 = [1, 10, 1, 10, 1, 10, 1];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]];\nmy $arg41 = 5;\nmy $x4 = minpath($arg40, $arg41);\nmy $v4 = [1, 7, 1, 7, 1];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]];\nmy $arg51 = 9;\nmy $x5 = minpath($arg50, $arg51);\nmy $v5 = [1, 6, 1, 6, 1, 6, 1, 6, 1];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]];\nmy $arg61 = 12;\nmy $x6 = minpath($arg60, $arg61);\nmy $v6 = [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [[2, 7, 4], [3, 1, 5], [6, 8, 9]];\nmy $arg71 = 8;\nmy $x7 = minpath($arg70, $arg71);\nmy $v7 = [1, 3, 1, 3, 1, 3, 1, 3];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [[6, 1, 5], [3, 8, 9], [2, 7, 4]];\nmy $arg81 = 8;\nmy $x8 = minpath($arg80, $arg81);\nmy $v8 = [1, 5, 1, 5, 1, 5, 1, 5];\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [[1, 2], [3, 4]];\nmy $arg91 = 10;\nmy $x9 = minpath($arg90, $arg91);\nmy $v9 = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2];\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = [[1, 3], [3, 2]];\nmy $arg101 = 10;\nmy $x10 = minpath($arg100, $arg101);\nmy $v10 = [1, 3, 1, 3, 1, 3, 1, 3, 1, 3];\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\n", "description": "Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/130", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n# the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n#        = 2 + 3 + 3 = 8 \n# You are given a non-negative integer number n, you have to a return a list of the \n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1, 3, 2, 8]\n#\nsub tri\n{\n  my ($n) = @_;\n", "entry_point": "tri", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $x0 = tri($arg00);\nmy $v0 = [1, 3, 2.0, 8.0];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = tri($arg10);\nmy $v1 = [1, 3, 2.0, 8.0, 3.0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $x2 = tri($arg20);\nmy $v2 = [1, 3, 2.0, 8.0, 3.0, 15.0];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 6;\nmy $x3 = tri($arg30);\nmy $v3 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 7;\nmy $x4 = tri($arg40);\nmy $v4 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 8;\nmy $x5 = tri($arg50);\nmy $v5 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 9;\nmy $x6 = tri($arg60);\nmy $v6 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 20;\nmy $x7 = tri($arg70);\nmy $v7 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 0;\nmy $x8 = tri($arg80);\nmy $v8 = [1];\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 1;\nmy $x9 = tri($arg90);\nmy $v9 = [1, 3];\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/131", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Given a positive integer n, return the product of the odd digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  == 1\n# digits(4)  == 0\n# digits(235) == 15\n#\nsub digits\n{\n  my ($n) = @_;\n", "entry_point": "digits", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = digits($arg00);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 54;\nmy $x1 = digits($arg10);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 120;\nmy $x2 = digits($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 5014;\nmy $x3 = digits($arg30);\nmy $v3 = 5;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 98765;\nmy $x4 = digits($arg40);\nmy $v4 = 315;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 5576543;\nmy $x5 = digits($arg50);\nmy $v5 = 2625;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 2468;\nmy $x6 = digits($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/132", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Create a function that takes a string as input which contains only square brackets.\n# The function should return True if and only if there is a valid subsequence of brackets \n# where at least one bracket in the subsequence is nested.\n\n# is_nested('[[]]') \u279e True\n# is_nested('[]]]]]]][[[[[]') \u279e False\n# is_nested('[][]') \u279e False\n# is_nested('[]') \u279e False\n# is_nested('[[][]]') \u279e True\n# is_nested('[[]][[') \u279e True\n#\nsub is_nested\n{\n  my ($string) = @_;\n", "entry_point": "is_nested", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"[[]]\";\nmy $x0 = is_nested($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"[]]]]]]][[[[[]\";\nmy $x1 = is_nested($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"[][]\";\nmy $x2 = is_nested($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"[]\";\nmy $x3 = is_nested($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"[[[[]]]]\";\nmy $x4 = is_nested($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"[]]]]]]]]]]\";\nmy $x5 = is_nested($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"[][][[]]\";\nmy $x6 = is_nested($arg60);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"[[]\";\nmy $x7 = is_nested($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"[]]\";\nmy $x8 = is_nested($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = \"[[]][[\";\nmy $x9 = is_nested($arg90);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = \"[[][]]\";\nmy $x10 = is_nested($arg100);\nmy $v10 = 1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = \"\";\nmy $x11 = is_nested($arg110);\nmy $v11 = 0;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = \"[[[[[[[[\";\nmy $x12 = is_nested($arg120);\nmy $v12 = 0;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = \"]]]]]]]]\";\nmy $x13 = is_nested($arg130);\nmy $v13 = 0;\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\n", "description": "Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/133", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# You are given a list of numbers.\n# You need to return the sum of squared numbers in the given list,\n# round each element in the list to the upper int(Ceiling) first.\n# Examples:\n# For lst = [1,2,3] the output should be 14\n# For lst = [1,4,9] the output should be 98\n# For lst = [1,3,5,7] the output should be 84\n# For lst = [1.4,4.2,0] the output should be 29\n# For lst = [-2.4,1,1] the output should be 6\n# \n\n#\nsub sum_squares\n{\n  my ($lst) = @_;\n", "entry_point": "sum_squares", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $x0 = sum_squares($arg00);\nmy $v0 = 14;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1.0, 2, 3];\nmy $x1 = sum_squares($arg10);\nmy $v1 = 14;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, 5, 7];\nmy $x2 = sum_squares($arg20);\nmy $v2 = 84;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1.4, 4.2, 0];\nmy $x3 = sum_squares($arg30);\nmy $v3 = 29;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [-2.4, 1, 1];\nmy $x4 = sum_squares($arg40);\nmy $v4 = 6;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [100, 1, 15, 2];\nmy $x5 = sum_squares($arg50);\nmy $v5 = 10230;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [10000, 10000];\nmy $x6 = sum_squares($arg60);\nmy $v6 = 200000000;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [-1.4, 4.6, 6.3];\nmy $x7 = sum_squares($arg70);\nmy $v7 = 75;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [-1.4, 17.9, 18.9, 19.9];\nmy $x8 = sum_squares($arg80);\nmy $v8 = 1086;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [0];\nmy $x9 = sum_squares($arg90);\nmy $v9 = 0;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = [-1];\nmy $x10 = sum_squares($arg100);\nmy $v10 = 1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = [-1, 1, 0];\nmy $x11 = sum_squares($arg110);\nmy $v11 = 2;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\n", "description": "You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/134", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Create a function that returns True if the last character\n# of a given string is an alphabetical character and is not\n# a part of a word, and False otherwise.\n# Note: \"word\" is a group of characters separated by space.\n\n# Examples:\n# check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n# check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n# check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n# check_if_last_char_is_a_letter(\"\") \u279e False \n#\nsub check_if_last_char_is_a_letter\n{\n  my ($txt) = @_;\n", "entry_point": "check_if_last_char_is_a_letter", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"apple\";\nmy $x0 = check_if_last_char_is_a_letter($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"apple pi e\";\nmy $x1 = check_if_last_char_is_a_letter($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"eeeee\";\nmy $x2 = check_if_last_char_is_a_letter($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"A\";\nmy $x3 = check_if_last_char_is_a_letter($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"Pumpkin pie \";\nmy $x4 = check_if_last_char_is_a_letter($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"Pumpkin pie 1\";\nmy $x5 = check_if_last_char_is_a_letter($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"\";\nmy $x6 = check_if_last_char_is_a_letter($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"eeeee e \";\nmy $x7 = check_if_last_char_is_a_letter($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"apple pie\";\nmy $x8 = check_if_last_char_is_a_letter($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = \"apple pi e \";\nmy $x9 = check_if_last_char_is_a_letter($arg90);\nmy $v9 = 0;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/135", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Create a function which returns the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given array will not contain\n# duplicate values.\n\n# Examples:\n# can_arrange([1,2,4,3,5]) = 3\n# can_arrange([1,2,3]) = -1\n#\nsub can_arrange\n{\n  my ($arr) = @_;\n", "entry_point": "can_arrange", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 4, 3, 5];\nmy $x0 = can_arrange($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 4, 5];\nmy $x1 = can_arrange($arg10);\nmy $v1 = -1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 4, 2, 5, 6, 7, 8, 9, 10];\nmy $x2 = can_arrange($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [4, 8, 5, 7, 3];\nmy $x3 = can_arrange($arg30);\nmy $v3 = 4;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [];\nmy $x4 = can_arrange($arg40);\nmy $v4 = -1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/136", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Create a function that returns a tuple (a, b), where 'a' is\n# the largest of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n# If there is no negative or positive integers, return them as None.\n\n# Examples:\n# largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n# largest_smallest_integers([]) == (None, None)\n# largest_smallest_integers([0]) == (None, None)\n#\nsub largest_smallest_integers\n{\n  my ($lst) = @_;\n", "entry_point": "largest_smallest_integers", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 4, 1, 3, 5, 7];\nmy $x0 = largest_smallest_integers($arg00);\nmy $v0 = [\"none\", 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 4, 1, 3, 5, 7, 0];\nmy $x1 = largest_smallest_integers($arg10);\nmy $v1 = [\"none\", 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, 2, 4, 5, 6, -2];\nmy $x2 = largest_smallest_integers($arg20);\nmy $v2 = [-2, 1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [4, 5, 3, 6, 2, 7, -7];\nmy $x3 = largest_smallest_integers($arg30);\nmy $v3 = [-7, 2];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [7, 3, 8, 4, 9, 2, 5, -9];\nmy $x4 = largest_smallest_integers($arg40);\nmy $v4 = [-9, 2];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [];\nmy $x5 = largest_smallest_integers($arg50);\nmy $v5 = [\"none\", \"none\"];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [0];\nmy $x6 = largest_smallest_integers($arg60);\nmy $v6 = [\"none\", \"none\"];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [-1, -3, -5, -6];\nmy $x7 = largest_smallest_integers($arg70);\nmy $v7 = [-1, \"none\"];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [-1, -3, -5, -6, 0];\nmy $x8 = largest_smallest_integers($arg80);\nmy $v8 = [-1, \"none\"];\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [-6, -4, -4, -3, 1];\nmy $x9 = largest_smallest_integers($arg90);\nmy $v9 = [-3, 1];\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = [-6, -4, -4, -3, -100, 1];\nmy $x10 = largest_smallest_integers($arg100);\nmy $v10 = [-3, 1];\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\n", "description": "Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/137", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return \"none\" if the values are equal.\n# Note: If a real number is represented as a string, the floating point might be . or ,\n\n# compare_one(1, 2.5) \u279e 2.5\n# compare_one(1, \"2,3\") \u279e \"2,3\"\n# compare_one(\"5,1\", \"6\") \u279e \"6\"\n# compare_one(\"1\", 1) \u279e None\n#\nsub compare_one\n{\n  my ($a, $b) = @_;\n", "entry_point": "compare_one", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 2;\nmy $x0 = compare_one($arg00, $arg01);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 2.5;\nmy $x1 = compare_one($arg10, $arg11);\nmy $v1 = 2.5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $arg21 = 3;\nmy $x2 = compare_one($arg20, $arg21);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 5;\nmy $arg31 = 6;\nmy $x3 = compare_one($arg30, $arg31);\nmy $v3 = 6;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 1;\nmy $arg41 = \"2,3\";\nmy $x4 = compare_one($arg40, $arg41);\nmy $v4 = \"2,3\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"5,1\";\nmy $arg51 = \"6\";\nmy $x5 = compare_one($arg50, $arg51);\nmy $v5 = \"6\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"1\";\nmy $arg61 = \"2\";\nmy $x6 = compare_one($arg60, $arg61);\nmy $v6 = \"2\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"1\";\nmy $arg71 = 1;\nmy $x7 = compare_one($arg70, $arg71);\nmy $v7 = \"none\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return \"none\" if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/138", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# is_equal_to_sum_even(4) == False\n# is_equal_to_sum_even(6) == False\n# is_equal_to_sum_even(8) == True\n#\nsub is_equal_to_sum_even\n{\n  my ($n) = @_;\n", "entry_point": "is_equal_to_sum_even", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $x0 = is_equal_to_sum_even($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 6;\nmy $x1 = is_equal_to_sum_even($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 8;\nmy $x2 = is_equal_to_sum_even($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 10;\nmy $x3 = is_equal_to_sum_even($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 11;\nmy $x4 = is_equal_to_sum_even($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 12;\nmy $x5 = is_equal_to_sum_even($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 13;\nmy $x6 = is_equal_to_sum_even($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 16;\nmy $x7 = is_equal_to_sum_even($arg70);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/139", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n\n# For example:\n# >>> special_factorial(4)\n# 288\n\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\n#\nsub special_factorial\n{\n  my ($n) = @_;\n", "entry_point": "special_factorial", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $x0 = special_factorial($arg00);\nmy $v0 = 288;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $x1 = special_factorial($arg10);\nmy $v1 = 34560;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 7;\nmy $x2 = special_factorial($arg20);\nmy $v2 = 125411328000;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 1;\nmy $x3 = special_factorial($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/140", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given a string text, replace all spaces in it with underscores, \n# and if a string has more than 2 consecutive spaces, \n# then replace all consecutive spaces with - \n# \n# fix_spaces(\"Example\") == \"Example\"\n# fix_spaces(\"Example 1\") == \"Example_1\"\n# fix_spaces(\" Example 2\") == \"_Example_2\"\n# fix_spaces(\" Example   3\") == \"_Example-3\"\n#\nsub fix_spaces\n{\n  my ($text) = @_;\n", "entry_point": "fix_spaces", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Example\";\nmy $x0 = fix_spaces($arg00);\nmy $v0 = \"Example\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Mudasir Hanif \";\nmy $x1 = fix_spaces($arg10);\nmy $v1 = \"Mudasir_Hanif_\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Yellow Yellow  Dirty  Fellow\";\nmy $x2 = fix_spaces($arg20);\nmy $v2 = \"Yellow_Yellow__Dirty__Fellow\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"Exa   mple\";\nmy $x3 = fix_spaces($arg30);\nmy $v3 = \"Exa-mple\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"   Exa 1 2 2 mple\";\nmy $x4 = fix_spaces($arg40);\nmy $v4 = \"-Exa_1_2_2_mple\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/141", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Create a function which takes a string representing a file's name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n#\nsub file_name_check\n{\n  my ($file_name) = @_;\n", "entry_point": "file_name_check", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"example.txt\";\nmy $x0 = file_name_check($arg00);\nmy $v0 = \"Yes\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"1example.dll\";\nmy $x1 = file_name_check($arg10);\nmy $v1 = \"No\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"s1sdf3.asd\";\nmy $x2 = file_name_check($arg20);\nmy $v2 = \"No\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"K.dll\";\nmy $x3 = file_name_check($arg30);\nmy $v3 = \"Yes\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"MY16FILE3.exe\";\nmy $x4 = file_name_check($arg40);\nmy $v4 = \"Yes\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"His12FILE94.exe\";\nmy $x5 = file_name_check($arg50);\nmy $v5 = \"No\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"_Y.txt\";\nmy $x6 = file_name_check($arg60);\nmy $v6 = \"No\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"?aREYA.exe\";\nmy $x7 = file_name_check($arg70);\nmy $v7 = \"No\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"/this_is_valid.dll\";\nmy $x8 = file_name_check($arg80);\nmy $v8 = \"No\";\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = \"this_is_valid.wow\";\nmy $x9 = file_name_check($arg90);\nmy $v9 = \"No\";\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = \"this_is_valid.txt\";\nmy $x10 = file_name_check($arg100);\nmy $v10 = \"Yes\";\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = \"this_is_valid.txtexe\";\nmy $x11 = file_name_check($arg110);\nmy $v11 = \"No\";\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = \"#this2_i4s_5valid.ten\";\nmy $x12 = file_name_check($arg120);\nmy $v12 = \"No\";\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = \"@this1_is6_valid.exe\";\nmy $x13 = file_name_check($arg130);\nmy $v13 = \"No\";\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\nmy $arg140 = \"this_is_12valid.6exe4.txt\";\nmy $x14 = file_name_check($arg140);\nmy $v14 = \"No\";\nunless(Compare($x14, $v14)) {\n    die \"Exception -- test case 14 did not pass.\";\n}\nmy $arg150 = \"all.exe.txt\";\nmy $x15 = file_name_check($arg150);\nmy $v15 = \"No\";\nunless(Compare($x15, $v15)) {\n    die \"Exception -- test case 15 did not pass.\";\n}\nmy $arg160 = \"I563_No.exe\";\nmy $x16 = file_name_check($arg160);\nmy $v16 = \"Yes\";\nunless(Compare($x16, $v16)) {\n    die \"Exception -- test case 16 did not pass.\";\n}\nmy $arg170 = \"Is3youfault.txt\";\nmy $x17 = file_name_check($arg170);\nmy $v17 = \"Yes\";\nunless(Compare($x17, $v17)) {\n    die \"Exception -- test case 17 did not pass.\";\n}\nmy $arg180 = \"no_one#knows.dll\";\nmy $x18 = file_name_check($arg180);\nmy $v18 = \"Yes\";\nunless(Compare($x18, $v18)) {\n    die \"Exception -- test case 18 did not pass.\";\n}\nmy $arg190 = \"1I563_Yes3.exe\";\nmy $x19 = file_name_check($arg190);\nmy $v19 = \"No\";\nunless(Compare($x19, $v19)) {\n    die \"Exception -- test case 19 did not pass.\";\n}\nmy $arg200 = \"I563_Yes3.txtt\";\nmy $x20 = file_name_check($arg200);\nmy $v20 = \"No\";\nunless(Compare($x20, $v20)) {\n    die \"Exception -- test case 20 did not pass.\";\n}\nmy $arg210 = \"final..txt\";\nmy $x21 = file_name_check($arg210);\nmy $v21 = \"No\";\nunless(Compare($x21, $v21)) {\n    die \"Exception -- test case 21 did not pass.\";\n}\nmy $arg220 = \"final132\";\nmy $x22 = file_name_check($arg220);\nmy $v22 = \"No\";\nunless(Compare($x22, $v22)) {\n    die \"Exception -- test case 22 did not pass.\";\n}\nmy $arg230 = \"_f4indsartal132.\";\nmy $x23 = file_name_check($arg230);\nmy $v23 = \"No\";\nunless(Compare($x23, $v23)) {\n    die \"Exception -- test case 23 did not pass.\";\n}\nmy $arg240 = \".txt\";\nmy $x24 = file_name_check($arg240);\nmy $v24 = \"No\";\nunless(Compare($x24, $v24)) {\n    die \"Exception -- test case 24 did not pass.\";\n}\nmy $arg250 = \"s.\";\nmy $x25 = file_name_check($arg250);\nmy $v25 = \"No\";\nunless(Compare($x25, $v25)) {\n    die \"Exception -- test case 25 did not pass.\";\n}\n", "description": "Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/142", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# \"\n# This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n# multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n# change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n# \n# Examples:\n# For lst = [1,2,3] the output should be 6\n# For lst = []  the output should be 0\n# For lst = [-1,-5,2,-1,-5]  the output should be -126\n#\nsub sum_squares\n{\n  my ($lst) = @_;\n", "entry_point": "sum_squares", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $x0 = sum_squares($arg00);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 4, 9];\nmy $x1 = sum_squares($arg10);\nmy $v1 = 14;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [];\nmy $x2 = sum_squares($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, 1, 1, 1, 1, 1, 1, 1, 1];\nmy $x3 = sum_squares($arg30);\nmy $v3 = 9;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [-1, -1, -1, -1, -1, -1, -1, -1, -1];\nmy $x4 = sum_squares($arg40);\nmy $v4 = -3;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [0];\nmy $x5 = sum_squares($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [-1, -5, 2, -1, -5];\nmy $x6 = sum_squares($arg60);\nmy $v6 = -126;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [-56, -99, 1, 0, -2];\nmy $x7 = sum_squares($arg70);\nmy $v7 = 3030;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [-1, 0, 0, 0, 0, 0, 0, 0, -1];\nmy $x8 = sum_squares($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37];\nmy $x9 = sum_squares($arg90);\nmy $v9 = -14196;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10];\nmy $x10 = sum_squares($arg100);\nmy $v10 = -1448;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\n", "description": "\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/143", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # You are given a string representing a sentence,\n# the sentence contains some words separated by a space,\n# and you have to return a string that contains the words from the original sentence,\n# whose lengths are prime numbers,\n# the order of the words in the new string should be the same as the original one.\n\n# Example 1:\n#     Input: sentence = \"This is a test\"\n#     Output: \"is\"\n\n# Example 2:\n#     Input: sentence = \"lets go for swimming\"\n#     Output: \"go for\"\n\n# Constraints:\n#     * 1 <= len(sentence) <= 100\n#     * sentence contains only letters\n#\nsub words_in_sentence\n{\n  my ($sentence) = @_;\n", "entry_point": "words_in_sentence", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"This is a test\";\nmy $x0 = words_in_sentence($arg00);\nmy $v0 = \"is\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"lets go for swimming\";\nmy $x1 = words_in_sentence($arg10);\nmy $v1 = \"go for\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"there is no place available here\";\nmy $x2 = words_in_sentence($arg20);\nmy $v2 = \"there is no place\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"Hi I am Hussein\";\nmy $x3 = words_in_sentence($arg30);\nmy $v3 = \"Hi am Hussein\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"go for it\";\nmy $x4 = words_in_sentence($arg40);\nmy $v4 = \"go for it\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"here\";\nmy $x5 = words_in_sentence($arg50);\nmy $v5 = \"\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"here is\";\nmy $x6 = words_in_sentence($arg60);\nmy $v6 = \"is\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/144", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Your task is to implement a function that will simplify the expression\n# x * n. The function returns True if x * n evaluates to a whole number and False\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n# simplify(\"1/5\", \"5/1\") = True\n# simplify(\"1/6\", \"2/1\") = False\n# simplify(\"7/10\", \"10/2\") = False\n#\nsub simplify\n{\n  my ($x, $n) = @_;\n", "entry_point": "simplify", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"1/5\";\nmy $arg01 = \"5/1\";\nmy $x0 = simplify($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"1/6\";\nmy $arg11 = \"2/1\";\nmy $x1 = simplify($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"5/1\";\nmy $arg21 = \"3/1\";\nmy $x2 = simplify($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"7/10\";\nmy $arg31 = \"10/2\";\nmy $x3 = simplify($arg30, $arg31);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"2/10\";\nmy $arg41 = \"50/10\";\nmy $x4 = simplify($arg40, $arg41);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"7/2\";\nmy $arg51 = \"4/2\";\nmy $x5 = simplify($arg50, $arg51);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"11/6\";\nmy $arg61 = \"6/1\";\nmy $x6 = simplify($arg60, $arg61);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"2/3\";\nmy $arg71 = \"5/2\";\nmy $x7 = simplify($arg70, $arg71);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"5/2\";\nmy $arg81 = \"3/5\";\nmy $x8 = simplify($arg80, $arg81);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = \"2/4\";\nmy $arg91 = \"8/4\";\nmy $x9 = simplify($arg90, $arg91);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = \"2/4\";\nmy $arg101 = \"4/2\";\nmy $x10 = simplify($arg100, $arg101);\nmy $v10 = 1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = \"1/5\";\nmy $arg111 = \"5/1\";\nmy $x11 = simplify($arg110, $arg111);\nmy $v11 = 1;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = \"1/5\";\nmy $arg121 = \"1/5\";\nmy $x12 = simplify($arg120, $arg121);\nmy $v12 = 0;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\n", "description": "Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/145", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function which sorts the given list of integers\n# in ascending order according to the sum of their digits.\n# Note: if there are several items with similar sum of their digits,\n# order them based on their index in original list.\n\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n# >>> order_by_points([]) == []\n#\nsub order_by_points\n{\n  my ($nums) = @_;\n", "entry_point": "order_by_points", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 11, -1, -11, -12];\nmy $x0 = order_by_points($arg00);\nmy $v0 = [-1, -11, 1, -12, 11];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46];\nmy $x1 = order_by_points($arg10);\nmy $v1 = [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [];\nmy $x2 = order_by_points($arg20);\nmy $v2 = [];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, -11, -32, 43, 54, -98, 2, -3];\nmy $x3 = order_by_points($arg30);\nmy $v3 = [-3, -32, -98, -11, 1, 2, 43, 54];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nmy $x4 = order_by_points($arg40);\nmy $v4 = [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [0, 6, 6, -76, -21, 23, 4];\nmy $x5 = order_by_points($arg50);\nmy $v5 = [-76, -21, 0, 4, 23, 6, 6];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/146", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Write a function that takes an array of numbers as input and returns \n# the number of elements in the array that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# specialFilter([15, -73, 14, -15]) => 1 \n# specialFilter([33, -2, -3, 45, 21, 109]) => 2\n#\nsub specialfilter\n{\n  my ($nums) = @_;\n", "entry_point": "specialfilter", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, -2, 1, -5];\nmy $x0 = specialfilter($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [15, -73, 14, -15];\nmy $x1 = specialfilter($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [33, -2, -3, 45, 21, 109];\nmy $x2 = specialfilter($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [43, -12, 93, 125, 121, 109];\nmy $x3 = specialfilter($arg30);\nmy $v3 = 4;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [71, -2, -33, 75, 21, 19];\nmy $x4 = specialfilter($arg40);\nmy $v4 = 3;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1];\nmy $x5 = specialfilter($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [];\nmy $x6 = specialfilter($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/147", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # You are given a positive integer n. You have to create an integer array a of length n.\n#     For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n#     Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n\n# Example :\n#     Input: n = 5\n#     Output: 1\n#     Explanation: \n#     a = [1, 3, 7, 13, 21]\n#     The only valid triple is (1, 7, 13).\n#\nsub get_max_triples\n{\n  my ($n) = @_;\n", "entry_point": "get_max_triples", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = get_max_triples($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 6;\nmy $x1 = get_max_triples($arg10);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $x2 = get_max_triples($arg20);\nmy $v2 = 36;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 100;\nmy $x3 = get_max_triples($arg30);\nmy $v3 = 53361;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/148", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # There are eight planets in our solar system: the closerst to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings planet1 and planet2. \n# The function should return a tuple containing all planets whose orbits are \n# located between the orbit of planet1 and the orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should return an empty tuple if planet1 or planet2\n# are not correct planet names. \n# Examples\n# bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n# bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n# bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n#\nsub bf\n{\n  my ($planet1, $planet2) = @_;\n", "entry_point": "bf", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Jupiter\";\nmy $arg01 = \"Neptune\";\nmy $x0 = bf($arg00, $arg01);\nmy $v0 = [\"Saturn\", \"Uranus\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Earth\";\nmy $arg11 = \"Mercury\";\nmy $x1 = bf($arg10, $arg11);\nmy $v1 = [\"Venus\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Mercury\";\nmy $arg21 = \"Uranus\";\nmy $x2 = bf($arg20, $arg21);\nmy $v2 = [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"Neptune\";\nmy $arg31 = \"Venus\";\nmy $x3 = bf($arg30, $arg31);\nmy $v3 = [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"Earth\";\nmy $arg41 = \"Earth\";\nmy $x4 = bf($arg40, $arg41);\nmy $v4 = [];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"Mars\";\nmy $arg51 = \"Earth\";\nmy $x5 = bf($arg50, $arg51);\nmy $v5 = [];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"Jupiter\";\nmy $arg61 = \"Makemake\";\nmy $x6 = bf($arg60, $arg61);\nmy $v6 = [];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/149", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Write a function that accepts a list of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted list with a sorted order,\n# The list is always a list of strings and never an array of numbers,\n# and it may contain duplicates.\n# The order of the list should be ascending by length of each word, and you\n# should return the list sorted by that rule.\n# If two words have the same length, sort the list alphabetically.\n# The function should return a list of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n# assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n#\nsub sorted_list_sum\n{\n  my ($lst) = @_;\n", "entry_point": "sorted_list_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"aa\", \"a\", \"aaa\"];\nmy $x0 = sorted_list_sum($arg00);\nmy $v0 = [\"aa\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"school\", \"AI\", \"asdf\", \"b\"];\nmy $x1 = sorted_list_sum($arg10);\nmy $v1 = [\"AI\", \"asdf\", \"school\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"d\", \"b\", \"c\", \"a\"];\nmy $x2 = sorted_list_sum($arg20);\nmy $v2 = [];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [\"d\", \"dcba\", \"abcd\", \"a\"];\nmy $x3 = sorted_list_sum($arg30);\nmy $v3 = [\"abcd\", \"dcba\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [\"AI\", \"ai\", \"au\"];\nmy $x4 = sorted_list_sum($arg40);\nmy $v4 = [\"AI\", \"ai\", \"au\"];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"];\nmy $x5 = sorted_list_sum($arg50);\nmy $v5 = [];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [\"aaaa\", \"bbbb\", \"dd\", \"cc\"];\nmy $x6 = sorted_list_sum($arg60);\nmy $v6 = [\"cc\", \"dd\", \"aaaa\", \"bbbb\"];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/150", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# A simple program which should return the value of x if n is \n# a prime number and should return the value of y otherwise.\n\n# Examples:\n# for x_or_y(7, 34, 12) == 34\n# for x_or_y(15, 8, 5) == 5\n# \n#\nsub x_or_y\n{\n  my ($n, $x, $y) = @_;\n", "entry_point": "x_or_y", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 7;\nmy $arg01 = 34;\nmy $arg02 = 12;\nmy $x0 = x_or_y($arg00, $arg01, $arg02);\nmy $v0 = 34;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 15;\nmy $arg11 = 8;\nmy $arg12 = 5;\nmy $x1 = x_or_y($arg10, $arg11, $arg12);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $arg21 = 33;\nmy $arg22 = 5212;\nmy $x2 = x_or_y($arg20, $arg21, $arg22);\nmy $v2 = 33;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 1259;\nmy $arg31 = 3;\nmy $arg32 = 52;\nmy $x3 = x_or_y($arg30, $arg31, $arg32);\nmy $v3 = 3;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 7919;\nmy $arg41 = -1;\nmy $arg42 = 12;\nmy $x4 = x_or_y($arg40, $arg41, $arg42);\nmy $v4 = -1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 3609;\nmy $arg51 = 1245;\nmy $arg52 = 583;\nmy $x5 = x_or_y($arg50, $arg51, $arg52);\nmy $v5 = 583;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 91;\nmy $arg61 = 56;\nmy $arg62 = 129;\nmy $x6 = x_or_y($arg60, $arg61, $arg62);\nmy $v6 = 129;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 6;\nmy $arg71 = 34;\nmy $arg72 = 1234;\nmy $x7 = x_or_y($arg70, $arg71, $arg72);\nmy $v7 = 1234;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 1;\nmy $arg81 = 2;\nmy $arg82 = 0;\nmy $x8 = x_or_y($arg80, $arg81, $arg82);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 2;\nmy $arg91 = 2;\nmy $arg92 = 0;\nmy $x9 = x_or_y($arg90, $arg91, $arg92);\nmy $v9 = 2;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/151", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given a list of numbers, return the sum of squares of the numbers\n# in the list that are odd. Ignore numbers that are negative or not integers.\n# \n# double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1, -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0]) == 0  \n   \n# If the input list is empty, return 0.\n#\nsub double_the_difference\n{\n  my ($lst) = @_;\n", "entry_point": "double_the_difference", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = double_the_difference($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 4];\nmy $x1 = double_the_difference($arg10);\nmy $v1 = 25;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [0.1, 0.2, 0.3];\nmy $x2 = double_the_difference($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [-10, -20, -30];\nmy $x3 = double_the_difference($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [-1, -2, 8];\nmy $x4 = double_the_difference($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [0.2, 3, 5];\nmy $x5 = double_the_difference($arg50);\nmy $v5 = 34;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99];\nmy $x6 = double_the_difference($arg60);\nmy $v6 = 166650;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/152", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# I think we all remember that feeling when the result of some long-awaited\n# event is finally known. The feelings and thoughts you have at that moment are\n# definitely worth noting down and comparing.\n# Your task is to determine if a person correctly guessed the results of a number of matches.\n# You are given two arrays of scores and guesses of equal length, where each index shows a match. \n# Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n# the value is 0, and if not, the value is the absolute difference between the guess and the score.\n# \n# \n# example:\n\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n#\nsub compare\n{\n  my ($game, $guess) = @_;\n", "entry_point": "compare", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 1];\nmy $arg01 = [1, 2, 3, 4, 2, -2];\nmy $x0 = compare($arg00, $arg01);\nmy $v0 = [0, 0, 0, 0, 3, 3];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [0, 0, 0, 0, 0, 0];\nmy $arg11 = [0, 0, 0, 0, 0, 0];\nmy $x1 = compare($arg10, $arg11);\nmy $v1 = [0, 0, 0, 0, 0, 0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3];\nmy $arg21 = [-1, -2, -3];\nmy $x2 = compare($arg20, $arg21);\nmy $v2 = [2, 4, 6];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, 2, 3, 5];\nmy $arg31 = [-1, 2, 3, 4];\nmy $x3 = compare($arg30, $arg31);\nmy $v3 = [2, 0, 0, 1];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/153", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# You will be given the name of a class (a string) and a list of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the list.\n# For example, if you are given \"Slices\" as the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n#\nsub strongest_extension\n{\n  my ($class_name, $extensions) = @_;\n", "entry_point": "strongest_extension", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Watashi\";\nmy $arg01 = [\"tEN\", \"niNE\", \"eIGHt8OKe\"];\nmy $x0 = strongest_extension($arg00, $arg01);\nmy $v0 = \"Watashi.eIGHt8OKe\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Boku123\";\nmy $arg11 = [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"];\nmy $x1 = strongest_extension($arg10, $arg11);\nmy $v1 = \"Boku123.YEs.WeCaNe\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"__YESIMHERE\";\nmy $arg21 = [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"];\nmy $x2 = strongest_extension($arg20, $arg21);\nmy $v2 = \"__YESIMHERE.NuLl__\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"K\";\nmy $arg31 = [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"];\nmy $x3 = strongest_extension($arg30, $arg31);\nmy $v3 = \"K.TAR\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"__HAHA\";\nmy $arg41 = [\"Tab\", \"123\", \"781345\", \"-_-\"];\nmy $x4 = strongest_extension($arg40, $arg41);\nmy $v4 = \"__HAHA.123\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"YameRore\";\nmy $arg51 = [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"];\nmy $x5 = strongest_extension($arg50, $arg51);\nmy $v5 = \"YameRore.okIWILL123\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"finNNalLLly\";\nmy $arg61 = [\"Die\", \"NowW\", \"Wow\", \"WoW\"];\nmy $x6 = strongest_extension($arg60, $arg61);\nmy $v6 = \"finNNalLLly.WoW\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"_\";\nmy $arg71 = [\"Bb\", \"91245\"];\nmy $x7 = strongest_extension($arg70, $arg71);\nmy $v7 = \"_.Bb\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"Sp\";\nmy $arg81 = [\"671235\", \"Bb\"];\nmy $x8 = strongest_extension($arg80, $arg81);\nmy $v8 = \"Sp.671235\";\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/154", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n# cycpattern_check(\"abcd\",\"abd\") => False\n# cycpattern_check(\"hello\",\"ell\") => True\n# cycpattern_check(\"whassup\",\"psus\") => False\n# cycpattern_check(\"abab\",\"baa\") => True\n# cycpattern_check(\"efef\",\"eeff\") => False\n# cycpattern_check(\"himenss\",\"simen\") => True\n\n#\nsub cycpattern_check\n{\n  my ($a, $b) = @_;\n", "entry_point": "cycpattern_check", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"xyzw\";\nmy $arg01 = \"xyw\";\nmy $x0 = cycpattern_check($arg00, $arg01);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"yello\";\nmy $arg11 = \"ell\";\nmy $x1 = cycpattern_check($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"whattup\";\nmy $arg21 = \"ptut\";\nmy $x2 = cycpattern_check($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"efef\";\nmy $arg31 = \"fee\";\nmy $x3 = cycpattern_check($arg30, $arg31);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"abab\";\nmy $arg41 = \"aabb\";\nmy $x4 = cycpattern_check($arg40, $arg41);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"winemtt\";\nmy $arg51 = \"tinem\";\nmy $x5 = cycpattern_check($arg50, $arg51);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/155", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n#  Example:\n#     even_odd_count(-12) ==> (1, 1)\n#     even_odd_count(123) ==> (1, 2)\n#\nsub even_odd_count\n{\n  my ($num) = @_;\n", "entry_point": "even_odd_count", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 7;\nmy $x0 = even_odd_count($arg00);\nmy $v0 = [0, 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = -78;\nmy $x1 = even_odd_count($arg10);\nmy $v1 = [1, 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3452;\nmy $x2 = even_odd_count($arg20);\nmy $v2 = [2, 2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 346211;\nmy $x3 = even_odd_count($arg30);\nmy $v3 = [3, 3];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = -345821;\nmy $x4 = even_odd_count($arg40);\nmy $v4 = [3, 3];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = -2;\nmy $x5 = even_odd_count($arg50);\nmy $v5 = [1, 0];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = -45347;\nmy $x6 = even_odd_count($arg60);\nmy $v6 = [2, 3];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 0;\nmy $x7 = even_odd_count($arg70);\nmy $v7 = [1, 0];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/156", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given a positive integer, obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n\n# Examples:\n# >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n# >>> int_to_mini_roman(426) == 'cdxxvi'\n#\nsub int_to_mini_roman\n{\n  my ($number) = @_;\n", "entry_point": "int_to_mini_roman", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 19;\nmy $x0 = int_to_mini_roman($arg00);\nmy $v0 = \"xix\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 152;\nmy $x1 = int_to_mini_roman($arg10);\nmy $v1 = \"clii\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 251;\nmy $x2 = int_to_mini_roman($arg20);\nmy $v2 = \"ccli\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 426;\nmy $x3 = int_to_mini_roman($arg30);\nmy $v3 = \"cdxxvi\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 500;\nmy $x4 = int_to_mini_roman($arg40);\nmy $v4 = \"d\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 1;\nmy $x5 = int_to_mini_roman($arg50);\nmy $v5 = \"i\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 4;\nmy $x6 = int_to_mini_roman($arg60);\nmy $v6 = \"iv\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 43;\nmy $x7 = int_to_mini_roman($arg70);\nmy $v7 = \"xliii\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 90;\nmy $x8 = int_to_mini_roman($arg80);\nmy $v8 = \"xc\";\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 94;\nmy $x9 = int_to_mini_roman($arg90);\nmy $v9 = \"xciv\";\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = 532;\nmy $x10 = int_to_mini_roman($arg100);\nmy $v10 = \"dxxxii\";\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = 900;\nmy $x11 = int_to_mini_roman($arg110);\nmy $v11 = \"cm\";\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = 994;\nmy $x12 = int_to_mini_roman($arg120);\nmy $v12 = \"cmxciv\";\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = 1000;\nmy $x13 = int_to_mini_roman($arg130);\nmy $v13 = \"m\";\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\n", "description": "Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/157", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\n#\nsub right_angle_triangle\n{\n  my ($a, $b, $c) = @_;\n", "entry_point": "right_angle_triangle", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 4;\nmy $arg02 = 5;\nmy $x0 = right_angle_triangle($arg00, $arg01, $arg02);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 2;\nmy $arg12 = 3;\nmy $x1 = right_angle_triangle($arg10, $arg11, $arg12);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $arg21 = 6;\nmy $arg22 = 8;\nmy $x2 = right_angle_triangle($arg20, $arg21, $arg22);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 2;\nmy $arg31 = 2;\nmy $arg32 = 2;\nmy $x3 = right_angle_triangle($arg30, $arg31, $arg32);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 7;\nmy $arg41 = 24;\nmy $arg42 = 25;\nmy $x4 = right_angle_triangle($arg40, $arg41, $arg42);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 10;\nmy $arg51 = 5;\nmy $arg52 = 7;\nmy $x5 = right_angle_triangle($arg50, $arg51, $arg52);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 5;\nmy $arg61 = 12;\nmy $arg62 = 13;\nmy $x6 = right_angle_triangle($arg60, $arg61, $arg62);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 15;\nmy $arg71 = 8;\nmy $arg72 = 17;\nmy $x7 = right_angle_triangle($arg70, $arg71, $arg72);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 48;\nmy $arg81 = 55;\nmy $arg82 = 73;\nmy $x8 = right_angle_triangle($arg80, $arg81, $arg82);\nmy $v8 = 1;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 1;\nmy $arg91 = 1;\nmy $arg92 = 1;\nmy $x9 = right_angle_triangle($arg90, $arg91, $arg92);\nmy $v9 = 0;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = 2;\nmy $arg101 = 2;\nmy $arg102 = 10;\nmy $x10 = right_angle_triangle($arg100, $arg101, $arg102);\nmy $v10 = 0;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\n", "description": "Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/158", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# Write a function that accepts a list of strings.\n# The list contains different words. Return the word with maximum number\n# of unique characters. If multiple strings have maximum number of unique\n# characters, return the one which comes first in lexicographical order.\n\n# find_max([\"name\", \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\nsub find_max\n{\n  my ($words) = @_;\n", "entry_point": "find_max", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"name\", \"of\", \"string\"];\nmy $x0 = find_max($arg00);\nmy $v0 = \"string\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"name\", \"enam\", \"game\"];\nmy $x1 = find_max($arg10);\nmy $v1 = \"enam\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"aaaaaaa\", \"bb\", \"cc\"];\nmy $x2 = find_max($arg20);\nmy $v2 = \"aaaaaaa\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [\"abc\", \"cba\"];\nmy $x3 = find_max($arg30);\nmy $v3 = \"abc\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [\"play\", \"this\", \"game\", \"of\", \"footbott\"];\nmy $x4 = find_max($arg40);\nmy $v4 = \"footbott\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [\"we\", \"are\", \"gonna\", \"rock\"];\nmy $x5 = find_max($arg50);\nmy $v5 = \"gonna\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [\"we\", \"are\", \"a\", \"mad\", \"nation\"];\nmy $x6 = find_max($arg60);\nmy $v6 = \"nation\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [\"this\", \"is\", \"a\", \"prrk\"];\nmy $x7 = find_max($arg70);\nmy $v7 = \"this\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [\"b\"];\nmy $x8 = find_max($arg80);\nmy $v8 = \"b\";\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [\"play\", \"play\", \"play\"];\nmy $x9 = find_max($arg90);\nmy $v9 = \"play\";\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/159", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # You're a hungry rabbit, and you already have eaten a certain number of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n# you should return an array of [ total number of eaten carrots after your meals,\n#                                 the number of carrots left after your meals ]\n# if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n# \n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# \n# Variables:\n# @number : integer\n#     the number of carrots that you have eaten.\n# @need : integer\n#     the number of carrots that you need to eat.\n# @remaining : integer\n#     the number of remaining carrots thet exist in stock\n# \n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n\n# Have fun :)\n#\nsub eat\n{\n  my ($number, $need, $remaining) = @_;\n", "entry_point": "eat", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $arg01 = 6;\nmy $arg02 = 10;\nmy $x0 = eat($arg00, $arg01, $arg02);\nmy $v0 = [11, 4];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $arg11 = 8;\nmy $arg12 = 9;\nmy $x1 = eat($arg10, $arg11, $arg12);\nmy $v1 = [12, 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 10;\nmy $arg22 = 10;\nmy $x2 = eat($arg20, $arg21, $arg22);\nmy $v2 = [11, 0];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 2;\nmy $arg31 = 11;\nmy $arg32 = 5;\nmy $x3 = eat($arg30, $arg31, $arg32);\nmy $v3 = [7, 0];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 4;\nmy $arg41 = 5;\nmy $arg42 = 7;\nmy $x4 = eat($arg40, $arg41, $arg42);\nmy $v4 = [9, 2];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 4;\nmy $arg51 = 5;\nmy $arg52 = 1;\nmy $x5 = eat($arg50, $arg51, $arg52);\nmy $v5 = [5, 0];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/160", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given two lists operator, and operand. The first list has basic algebra operations, and \n# the second list is a list of integers. Use the two given lists to build the algebric \n# expression and return the evaluation of this expression.\n\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n\n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n\n# Note:\n#     The length of operator list is equal to the length of operand list minus one.\n#     Operand is a list of of non-negative integers.\n#     Operator list has at least one operator, and operand list has at least two operands.\n\n#\nsub do_algebra\n{\n  my ($operator, $operand) = @_;\n", "entry_point": "do_algebra", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"**\", \"*\", \"+\"];\nmy $arg01 = [2, 3, 4, 5];\nmy $x0 = do_algebra($arg00, $arg01);\nmy $v0 = 37;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"+\", \"*\", \"-\"];\nmy $arg11 = [2, 3, 4, 5];\nmy $x1 = do_algebra($arg10, $arg11);\nmy $v1 = 9;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"\\/\\/\", \"*\"];\nmy $arg21 = [7, 3, 4];\nmy $x2 = do_algebra($arg20, $arg21);\nmy $v2 = 8;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/161", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n# solve(\"#a@C\") = \"#A@c\"\n#\nsub solve\n{\n  my ($s) = @_;\n", "entry_point": "solve", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"AsDf\";\nmy $x0 = solve($arg00);\nmy $v0 = \"aSdF\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"1234\";\nmy $x1 = solve($arg10);\nmy $v1 = \"4321\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"ab\";\nmy $x2 = solve($arg20);\nmy $v2 = \"AB\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"#a@C\";\nmy $x3 = solve($arg30);\nmy $v3 = \"#A@c\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"#AsdfW^45\";\nmy $x4 = solve($arg40);\nmy $v4 = \"#aSDFw^45\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"#6@2\";\nmy $x5 = solve($arg50);\nmy $v5 = \"2@6#\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"#\\$a^D\";\nmy $x6 = solve($arg60);\nmy $v6 = \"#\\$A^d\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"#ccc\";\nmy $x7 = solve($arg70);\nmy $v7 = \"#CCC\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/162", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given a string 'text', return its md5 hash equivalent string.\n# If 'text' is an empty string, return \"none\".\n\n# >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n#\nsub string_to_md5\n{\n  my ($text) = @_;\n", "entry_point": "string_to_md5", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Hello world\";\nmy $x0 = string_to_md5($arg00);\nmy $v0 = \"3e25960a79dbc69b674cd4ec67a72c62\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"\";\nmy $x1 = string_to_md5($arg10);\nmy $v1 = \"none\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"A B C\";\nmy $x2 = string_to_md5($arg20);\nmy $v2 = \"0ef78513b0cb8cef12743f5aeb35f888\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"password\";\nmy $x3 = string_to_md5($arg30);\nmy $v3 = \"5f4dcc3b5aa765d61d8327deb882cf99\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return \"none\".\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'", "language": "perl", "canonical_solution": null}
{"task_id": "HumanEval_perl/163", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Given two positive integers a and b, return the even digits between a\n# and b, in ascending order.\n\n# For example:\n# generate_integers(2, 8) => [2, 4, 6, 8]\n# generate_integers(8, 2) => [2, 4, 6, 8]\n# generate_integers(10, 14) => []\n#\nsub generate_integers\n{\n  my ($a, $b) = @_;\n", "entry_point": "generate_integers", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $arg01 = 10;\nmy $x0 = generate_integers($arg00, $arg01);\nmy $v0 = [2, 4, 6, 8];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = 2;\nmy $x1 = generate_integers($arg10, $arg11);\nmy $v1 = [2, 4, 6, 8];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 132;\nmy $arg21 = 2;\nmy $x2 = generate_integers($arg20, $arg21);\nmy $v2 = [2, 4, 6, 8];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 17;\nmy $arg31 = 89;\nmy $x3 = generate_integers($arg30, $arg31);\nmy $v3 = [];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []", "language": "perl", "canonical_solution": null}
