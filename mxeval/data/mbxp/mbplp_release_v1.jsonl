{"task_id": "MBPLP/1", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n#\n# >>> min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)\n# 8\n# >>> min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)\n# 12\n# >>> min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)\n# 16\nsub min_cost\n{\n  my ($cost, $m, $n) = @_;\n", "entry_point": "min_cost", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 2, 3], [4, 8, 2], [1, 5, 3]];\nmy $arg01 = 2;\nmy $arg02 = 2;\nmy $x0 = min_cost($arg00, $arg01, $arg02);\nmy $v0 = 8;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[2, 3, 4], [5, 9, 3], [2, 6, 4]];\nmy $arg11 = 2;\nmy $arg12 = 2;\nmy $x1 = min_cost($arg10, $arg11, $arg12);\nmy $v1 = 12;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[3, 4, 5], [6, 10, 4], [3, 7, 5]];\nmy $arg21 = 2;\nmy $arg22 = 2;\nmy $x2 = min_cost($arg20, $arg21, $arg22);\nmy $v2 = 16;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/2", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the similar elements from the given two tuple lists.\n#\n# >>> similar_elements([3, 4, 5, 6], [5, 7, 4, 10])\n# [4, 5]\n# >>> similar_elements([1, 2, 3, 4], [5, 4, 3, 7])\n# [3, 4]\n# >>> similar_elements([11, 12, 14, 13], [17, 15, 14, 13])\n# [13, 14]\nsub similar_elements\n{\n  my ($test_tup1, $test_tup2) = @_;\n", "entry_point": "similar_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 4, 5, 6];\nmy $arg01 = [5, 7, 4, 10];\nmy $x0 = similar_elements($arg00, $arg01);\nmy $v0 = [4, 5];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4];\nmy $arg11 = [5, 4, 3, 7];\nmy $x1 = similar_elements($arg10, $arg11);\nmy $v1 = [3, 4];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [11, 12, 14, 13];\nmy $arg21 = [17, 15, 14, 13];\nmy $x2 = similar_elements($arg20, $arg21);\nmy $v2 = [13, 14];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the similar elements from the given two tuple lists.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/3", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to identify non-prime numbers.\n#\n# >>> is_not_prime(2)\n# 0\n# >>> is_not_prime(10)\n# 1\n# >>> is_not_prime(35)\n# 1\nsub is_not_prime\n{\n  my ($n) = @_;\n", "entry_point": "is_not_prime", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = is_not_prime($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $x1 = is_not_prime($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 35;\nmy $x2 = is_not_prime($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to identify non-prime numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/4", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n#\n# >>> heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)\n# [85, 75, 65]\n# >>> heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 2)\n# [85, 75]\n# >>> heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)\n# [85, 75, 65, 58, 35]\nsub heap_queue_largest\n{\n  my ($nums, $n) = @_;\n", "entry_point": "heap_queue_largest", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [25, 35, 22, 85, 14, 65, 75, 22, 58];\nmy $arg01 = 3;\nmy $x0 = heap_queue_largest($arg00, $arg01);\nmy $v0 = [85, 75, 65];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [25, 35, 22, 85, 14, 65, 75, 22, 58];\nmy $arg11 = 2;\nmy $x1 = heap_queue_largest($arg10, $arg11);\nmy $v1 = [85, 75];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [25, 35, 22, 85, 14, 65, 75, 22, 58];\nmy $arg21 = 5;\nmy $x2 = heap_queue_largest($arg20, $arg21);\nmy $v2 = [85, 75, 65, 58, 35];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/5", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n#\n# >>> count_ways(2)\n# 3\n# >>> count_ways(8)\n# 153\n# >>> count_ways(12)\n# 2131\nsub count_ways\n{\n  my ($n) = @_;\n", "entry_point": "count_ways", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = count_ways($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 8;\nmy $x1 = count_ways($arg10);\nmy $v1 = 153;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 12;\nmy $x2 = count_ways($arg20);\nmy $v2 = 2131;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/6", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the two numbers differ at one bit position only or not.\n#\n# >>> differ_at_one_bit_pos(13, 9)\n# 1\n# >>> differ_at_one_bit_pos(15, 8)\n# 0\n# >>> differ_at_one_bit_pos(2, 4)\n# 0\nsub differ_at_one_bit_pos\n{\n  my ($a, $b) = @_;\n", "entry_point": "differ_at_one_bit_pos", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 13;\nmy $arg01 = 9;\nmy $x0 = differ_at_one_bit_pos($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 15;\nmy $arg11 = 8;\nmy $x1 = differ_at_one_bit_pos($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $arg21 = 4;\nmy $x2 = differ_at_one_bit_pos($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the two numbers differ at one bit position only or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/7", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find all words which are at least 4 characters long in a string by using regex.\n#\n# >>> find_char_long(\"Please move back to stream\")\n# [\"Please\", \"move\", \"back\", \"stream\"]\n# >>> find_char_long(\"Jing Eco and Tech\")\n# [\"Jing\", \"Tech\"]\n# >>> find_char_long(\"Jhingai wulu road Zone 3\")\n# [\"Jhingai\", \"wulu\", \"road\", \"Zone\"]\nsub find_char_long\n{\n  my ($text) = @_;\n", "entry_point": "find_char_long", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Please move back to stream\";\nmy $x0 = find_char_long($arg00);\nmy $v0 = [\"Please\", \"move\", \"back\", \"stream\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Jing Eco and Tech\";\nmy $x1 = find_char_long($arg10);\nmy $v1 = [\"Jing\", \"Tech\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Jhingai wulu road Zone 3\";\nmy $x2 = find_char_long($arg20);\nmy $v2 = [\"Jhingai\", \"wulu\", \"road\", \"Zone\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find all words which are at least 4 characters long in a string by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/8", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find squares of individual elements in a list using lambda function.\n#\n# >>> square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n# >>> square_nums([10, 20, 30])\n# [100, 400, 900]\n# >>> square_nums([12, 15])\n# [144, 225]\nsub square_nums\n{\n  my ($nums) = @_;\n", "entry_point": "square_nums", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $x0 = square_nums($arg00);\nmy $v0 = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [10, 20, 30];\nmy $x1 = square_nums($arg10);\nmy $v1 = [100, 400, 900];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [12, 15];\nmy $x2 = square_nums($arg20);\nmy $v2 = [144, 225];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find squares of individual elements in a list using lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/9", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the minimum number of rotations required to get the same string.\n#\n# >>> find_rotations(\"aaaa\")\n# 1\n# >>> find_rotations(\"ab\")\n# 2\n# >>> find_rotations(\"abc\")\n# 3\nsub find_rotations\n{\n  my ($str) = @_;\n", "entry_point": "find_rotations", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"aaaa\";\nmy $x0 = find_rotations($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"ab\";\nmy $x1 = find_rotations($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abc\";\nmy $x2 = find_rotations($arg20);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the minimum number of rotations required to get the same string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/10", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to get the n smallest items from a dataset.\n#\n# >>> small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n# [10, 20]\n# >>> small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)\n# [10, 20, 20, 40, 50]\n# >>> small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)\n# [10, 20, 20]\nsub small_nnum\n{\n  my ($list1, $n) = @_;\n", "entry_point": "small_nnum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100];\nmy $arg01 = 2;\nmy $x0 = small_nnum($arg00, $arg01);\nmy $v0 = [10, 20];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100];\nmy $arg11 = 5;\nmy $x1 = small_nnum($arg10, $arg11);\nmy $v1 = [10, 20, 20, 40, 50];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100];\nmy $arg21 = 3;\nmy $x2 = small_nnum($arg20, $arg21);\nmy $v2 = [10, 20, 20];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to get the n smallest items from a dataset.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/11", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to remove first and last occurrence of a given character from the string.\n#\n# >>> remove_occ(\"hello\", \"l\")\n# \"heo\"\n# >>> remove_occ(\"abcda\", \"a\")\n# \"bcd\"\n# >>> remove_occ(\"PHP\", \"P\")\n# \"H\"\nsub remove_occ\n{\n  my ($s, $ch) = @_;\n", "entry_point": "remove_occ", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"hello\";\nmy $arg01 = \"l\";\nmy $x0 = remove_occ($arg00, $arg01);\nmy $v0 = \"heo\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcda\";\nmy $arg11 = \"a\";\nmy $x1 = remove_occ($arg10, $arg11);\nmy $v1 = \"bcd\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"PHP\";\nmy $arg21 = \"P\";\nmy $x2 = remove_occ($arg20, $arg21);\nmy $v2 = \"H\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to remove first and last occurrence of a given character from the string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/12", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n# [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n# >>> sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])\n# [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n# >>> sort_matrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]])\n# [[2, 1, 4], [6, 4, 3], [5, 8, 9]]\nsub sort_matrix\n{\n  my ($m) = @_;\n", "entry_point": "sort_matrix", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]];\nmy $x0 = sort_matrix($arg00);\nmy $v0 = [[1, 1, 1], [1, 2, 3], [2, 4, 5]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]];\nmy $x1 = sort_matrix($arg10);\nmy $v1 = [[-2, 4, -5], [1, -1, 1], [1, 2, 3]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[5, 8, 9], [6, 4, 3], [2, 1, 4]];\nmy $x2 = sort_matrix($arg20);\nmy $v2 = [[2, 1, 4], [6, 4, 3], [5, 8, 9]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/13", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count the most common words in a dictionary.\n#\n# >>> count_common([\"red\", \"green\", \"black\", \"pink\", \"black\", \"white\", \"black\", \"eyes\", \"white\", \"black\", \"orange\", \"pink\", \"pink\", \"red\", \"red\", \"white\", \"orange\", \"white\", \"black\", \"pink\", \"green\", \"green\", \"pink\", \"green\", \"pink\", \"white\", \"orange\", \"orange\", \"red\"])\n# [[\"pink\", 6], [\"black\", 5], [\"white\", 5], [\"red\", 4]]\n# >>> count_common([\"one\", \"two\", \"three\", \"four\", \"five\", \"one\", \"two\", \"one\", \"three\", \"one\"])\n# [[\"one\", 4], [\"two\", 2], [\"three\", 2], [\"four\", 1]]\n# >>> count_common([\"Facebook\", \"Apple\", \"Amazon\", \"Netflix\", \"Google\", \"Apple\", \"Netflix\", \"Amazon\"])\n# [[\"Apple\", 2], [\"Amazon\", 2], [\"Netflix\", 2], [\"Facebook\", 1]]\nsub count_common\n{\n  my ($words) = @_;\n", "entry_point": "count_common", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"red\", \"green\", \"black\", \"pink\", \"black\", \"white\", \"black\", \"eyes\", \"white\", \"black\", \"orange\", \"pink\", \"pink\", \"red\", \"red\", \"white\", \"orange\", \"white\", \"black\", \"pink\", \"green\", \"green\", \"pink\", \"green\", \"pink\", \"white\", \"orange\", \"orange\", \"red\"];\nmy $x0 = count_common($arg00);\nmy $v0 = [[\"pink\", 6], [\"black\", 5], [\"white\", 5], [\"red\", 4]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"one\", \"two\", \"three\", \"four\", \"five\", \"one\", \"two\", \"one\", \"three\", \"one\"];\nmy $x1 = count_common($arg10);\nmy $v1 = [[\"one\", 4], [\"two\", 2], [\"three\", 2], [\"four\", 1]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"Facebook\", \"Apple\", \"Amazon\", \"Netflix\", \"Google\", \"Apple\", \"Netflix\", \"Amazon\"];\nmy $x2 = count_common($arg20);\nmy $v2 = [[\"Apple\", 2], [\"Amazon\", 2], [\"Netflix\", 2], [\"Facebook\", 1]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count the most common words in a dictionary.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/14", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the volume of a triangular prism.\n#\n# >>> find_volume(10, 8, 6)\n# 240\n# >>> find_volume(3, 2, 2)\n# 6\n# >>> find_volume(1, 2, 1)\n# 1\nsub find_volume\n{\n  my ($l, $b, $h) = @_;\n", "entry_point": "find_volume", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 8;\nmy $arg02 = 6;\nmy $x0 = find_volume($arg00, $arg01, $arg02);\nmy $v0 = 240;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $arg11 = 2;\nmy $arg12 = 2;\nmy $x1 = find_volume($arg10, $arg11, $arg12);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 2;\nmy $arg22 = 1;\nmy $x2 = find_volume($arg20, $arg21, $arg22);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the volume of a triangular prism.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/15", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to split a string at lowercase letters.\n#\n# >>> split_lowerstring(\"AbCd\")\n# [\"bC\", \"d\"]\n# >>> split_lowerstring(\"Python\")\n# [\"y\", \"t\", \"h\", \"o\", \"n\"]\n# >>> split_lowerstring(\"Programming\")\n# [\"r\", \"o\", \"g\", \"r\", \"a\", \"m\", \"m\", \"i\", \"n\", \"g\"]\nsub split_lowerstring\n{\n  my ($text) = @_;\n", "entry_point": "split_lowerstring", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"AbCd\";\nmy $x0 = split_lowerstring($arg00);\nmy $v0 = [\"bC\", \"d\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Python\";\nmy $x1 = split_lowerstring($arg10);\nmy $v1 = [\"y\", \"t\", \"h\", \"o\", \"n\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Programming\";\nmy $x2 = split_lowerstring($arg20);\nmy $v2 = [\"r\", \"o\", \"g\", \"r\", \"a\", \"m\", \"m\", \"i\", \"n\", \"g\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to split a string at lowercase letters.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/16", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find sequences of lowercase letters joined with an underscore.\n#\n# >>> text_lowercase_underscore(\"aab_cbbbc\")\n# \"Found a match!\"\n# >>> text_lowercase_underscore(\"aab_Abbbc\")\n# \"Not matched!\"\n# >>> text_lowercase_underscore(\"Aaab_abbbc\")\n# \"Not matched!\"\nsub text_lowercase_underscore\n{\n  my ($text) = @_;\n", "entry_point": "text_lowercase_underscore", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"aab_cbbbc\";\nmy $x0 = text_lowercase_underscore($arg00);\nmy $v0 = \"Found a match!\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"aab_Abbbc\";\nmy $x1 = text_lowercase_underscore($arg10);\nmy $v1 = \"Not matched!\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Aaab_abbbc\";\nmy $x2 = text_lowercase_underscore($arg20);\nmy $v2 = \"Not matched!\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find sequences of lowercase letters joined with an underscore.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/17", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the perimeter of a square.\n#\n# >>> square_perimeter(10)\n# 40\n# >>> square_perimeter(5)\n# 20\n# >>> square_perimeter(4)\n# 16\nsub square_perimeter\n{\n  my ($a) = @_;\n", "entry_point": "square_perimeter", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = square_perimeter($arg00);\nmy $v0 = 40;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $x1 = square_perimeter($arg10);\nmy $v1 = 20;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $x2 = square_perimeter($arg20);\nmy $v2 = 16;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the perimeter of a square.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/18", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove characters from the first string which are present in the second string.\n#\n# >>> remove_dirty_chars(\"probasscurve\", \"pros\")\n# \"bacuve\"\n# >>> remove_dirty_chars(\"digitalindia\", \"talent\")\n# \"digiidi\"\n# >>> remove_dirty_chars(\"exoticmiles\", \"toxic\")\n# \"emles\"\nsub remove_dirty_chars\n{\n  my ($string, $second_string) = @_;\n", "entry_point": "remove_dirty_chars", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"probasscurve\";\nmy $arg01 = \"pros\";\nmy $x0 = remove_dirty_chars($arg00, $arg01);\nmy $v0 = \"bacuve\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"digitalindia\";\nmy $arg11 = \"talent\";\nmy $x1 = remove_dirty_chars($arg10, $arg11);\nmy $v1 = \"digiidi\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"exoticmiles\";\nmy $arg21 = \"toxic\";\nmy $x2 = remove_dirty_chars($arg20, $arg21);\nmy $v2 = \"emles\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove characters from the first string which are present in the second string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/19", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find whether a given array of integers contains any duplicate element.\n#\n# >>> test_duplicate([1, 2, 3, 4, 5])\n# 0\n# >>> test_duplicate([1, 2, 3, 4, 4])\n# 1\n# >>> test_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5])\n# 1\nsub test_duplicate\n{\n  my ($arraynums) = @_;\n", "entry_point": "test_duplicate", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5];\nmy $x0 = test_duplicate($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 4];\nmy $x1 = test_duplicate($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 1, 2, 2, 3, 3, 4, 4, 5];\nmy $x2 = test_duplicate($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find whether a given array of integers contains any duplicate element.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/20", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if the given number is woodball or not.\n#\n# >>> is_woodall(383)\n# 1\n# >>> is_woodall(254)\n# 0\n# >>> is_woodall(200)\n# 0\nsub is_woodall\n{\n  my ($x) = @_;\n", "entry_point": "is_woodall", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 383;\nmy $x0 = is_woodall($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 254;\nmy $x1 = is_woodall($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 200;\nmy $x2 = is_woodall($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if the given number is woodball or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/21", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find m number of multiples of n.\n#\n# >>> multiples_of_num(4, 3)\n# [3, 6, 9, 12]\n# >>> multiples_of_num(2, 5)\n# [5, 10]\n# >>> multiples_of_num(9, 2)\n# [2, 4, 6, 8, 10, 12, 14, 16, 18]\nsub multiples_of_num\n{\n  my ($m, $n) = @_;\n", "entry_point": "multiples_of_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $arg01 = 3;\nmy $x0 = multiples_of_num($arg00, $arg01);\nmy $v0 = [3, 6, 9, 12];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $arg11 = 5;\nmy $x1 = multiples_of_num($arg10, $arg11);\nmy $v1 = [5, 10];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 9;\nmy $arg21 = 2;\nmy $x2 = multiples_of_num($arg20, $arg21);\nmy $v2 = [2, 4, 6, 8, 10, 12, 14, 16, 18];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find m number of multiples of n.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/22", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the first duplicate element in a given array of integers.\n#\n# >>> find_first_duplicate([1, 2, 3, 4, 4, 5])\n# 4\n# >>> find_first_duplicate([1, 2, 3, 4])\n# -1\n# >>> find_first_duplicate([1, 1, 2, 3, 3, 2, 2])\n# 1\nsub find_first_duplicate\n{\n  my ($nums) = @_;\n", "entry_point": "find_first_duplicate", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 4, 5];\nmy $x0 = find_first_duplicate($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4];\nmy $x1 = find_first_duplicate($arg10);\nmy $v1 = -1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 1, 2, 3, 3, 2, 2];\nmy $x2 = find_first_duplicate($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the first duplicate element in a given array of integers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/23", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the maximum sum of elements of list in a list of lists.\n#\n# >>> maximum_sum([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n# 33\n# >>> maximum_sum([[0, 1, 1], [1, 1, 2], [3, 2, 1]])\n# 6\n# >>> maximum_sum([[0, 1, 3], [1, 2, 1], [9, 8, 2], [0, 1, 0], [6, 4, 8]])\n# 19\nsub maximum_sum\n{\n  my ($list1) = @_;\n", "entry_point": "maximum_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]];\nmy $x0 = maximum_sum($arg00);\nmy $v0 = 33;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[0, 1, 1], [1, 1, 2], [3, 2, 1]];\nmy $x1 = maximum_sum($arg10);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[0, 1, 3], [1, 2, 1], [9, 8, 2], [0, 1, 0], [6, 4, 8]];\nmy $x2 = maximum_sum($arg20);\nmy $v2 = 19;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the maximum sum of elements of list in a list of lists.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/24", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert the given binary number to its decimal equivalent.\n#\n# >>> binary_to_decimal(100)\n# 4\n# >>> binary_to_decimal(1011)\n# 11\n# >>> binary_to_decimal(1101101)\n# 109\nsub binary_to_decimal\n{\n  my ($binary) = @_;\n", "entry_point": "binary_to_decimal", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 100;\nmy $x0 = binary_to_decimal($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1011;\nmy $x1 = binary_to_decimal($arg10);\nmy $v1 = 11;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1101101;\nmy $x2 = binary_to_decimal($arg20);\nmy $v2 = 109;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert the given binary number to its decimal equivalent.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/25", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the product of non-repeated elements in a given array.\n#\n# >>> find_product([1, 1, 2, 3], 4)\n# 6\n# >>> find_product([1, 2, 3, 1, 1], 5)\n# 6\n# >>> find_product([1, 1, 4, 5, 6], 5)\n# 120\nsub find_product\n{\n  my ($arr, $n) = @_;\n", "entry_point": "find_product", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 1, 2, 3];\nmy $arg01 = 4;\nmy $x0 = find_product($arg00, $arg01);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 1, 1];\nmy $arg11 = 5;\nmy $x1 = find_product($arg10, $arg11);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 1, 4, 5, 6];\nmy $arg21 = 5;\nmy $x2 = find_product($arg20, $arg21);\nmy $v2 = 120;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the product of non-repeated elements in a given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/26", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if the given tuple list has all k elements.\n#\n# >>> check_k_elements([[4, 4], [4, 4, 4], [4, 4], [4, 4, 4, 4], [4]], 4)\n# 1\n# >>> check_k_elements([[7, 7, 7], [7, 7]], 7)\n# 1\n# >>> check_k_elements([[9, 9], [9, 9, 9, 9]], 7)\n# 0\nsub check_k_elements\n{\n  my ($test_list, $k) = @_;\n", "entry_point": "check_k_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[4, 4], [4, 4, 4], [4, 4], [4, 4, 4, 4], [4]];\nmy $arg01 = 4;\nmy $x0 = check_k_elements($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[7, 7, 7], [7, 7]];\nmy $arg11 = 7;\nmy $x1 = check_k_elements($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[9, 9], [9, 9, 9, 9]];\nmy $arg21 = 7;\nmy $x2 = check_k_elements($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if the given tuple list has all k elements.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/27", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to remove all digits from a list of strings.\n#\n# >>> remove([\"4words\", \"3letters\", \"4digits\"])\n# [\"words\", \"letters\", \"digits\"]\n# >>> remove([\"28Jan\", \"12Jan\", \"11Jan\"])\n# [\"Jan\", \"Jan\", \"Jan\"]\n# >>> remove([\"wonder1\", \"wonder2\", \"wonder3\"])\n# [\"wonder\", \"wonder\", \"wonder\"]\nsub remove\n{\n  my ($list) = @_;\n", "entry_point": "remove", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"4words\", \"3letters\", \"4digits\"];\nmy $x0 = remove($arg00);\nmy $v0 = [\"words\", \"letters\", \"digits\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"28Jan\", \"12Jan\", \"11Jan\"];\nmy $x1 = remove($arg10);\nmy $v1 = [\"Jan\", \"Jan\", \"Jan\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"wonder1\", \"wonder2\", \"wonder3\"];\nmy $x2 = remove($arg20);\nmy $v2 = [\"wonder\", \"wonder\", \"wonder\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to remove all digits from a list of strings.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/28", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find binomial co-efficient.\n#\n# >>> binomial_coeff(5, 2)\n# 10\n# >>> binomial_coeff(4, 3)\n# 4\n# >>> binomial_coeff(3, 2)\n# 3\nsub binomial_coeff\n{\n  my ($n, $k) = @_;\n", "entry_point": "binomial_coeff", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $arg01 = 2;\nmy $x0 = binomial_coeff($arg00, $arg01);\nmy $v0 = 10;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $arg11 = 3;\nmy $x1 = binomial_coeff($arg10, $arg11);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $arg21 = 2;\nmy $x2 = binomial_coeff($arg20, $arg21);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find binomial co-efficient.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/29", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the element occurring odd number of times.\n#\n# >>> get_odd_occurrence([1, 2, 3, 1, 2, 3, 1], 7)\n# 1\n# >>> get_odd_occurrence([1, 2, 3, 2, 3, 1, 3], 7)\n# 3\n# >>> get_odd_occurrence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)\n# 5\nsub get_odd_occurrence\n{\n  my ($arr, $arr_size) = @_;\n", "entry_point": "get_odd_occurrence", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 1, 2, 3, 1];\nmy $arg01 = 7;\nmy $x0 = get_odd_occurrence($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 2, 3, 1, 3];\nmy $arg11 = 7;\nmy $x1 = get_odd_occurrence($arg10, $arg11);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2];\nmy $arg21 = 13;\nmy $x2 = get_odd_occurrence($arg20, $arg21);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the element occurring odd number of times.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/30", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count all the substrings starting and ending with same characters.\n#\n# >>> count_substring_with_equal_ends(\"abc\")\n# 3\n# >>> count_substring_with_equal_ends(\"abcda\")\n# 6\n# >>> count_substring_with_equal_ends(\"ab\")\n# 2\nsub count_substring_with_equal_ends\n{\n  my ($s) = @_;\n", "entry_point": "count_substring_with_equal_ends", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abc\";\nmy $x0 = count_substring_with_equal_ends($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcda\";\nmy $x1 = count_substring_with_equal_ends($arg10);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"ab\";\nmy $x2 = count_substring_with_equal_ends($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count all the substrings starting and ending with same characters.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/31", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n#\n# >>> func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 3)\n# [5, 7, 1]\n# >>> func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 1)\n# [1]\n# >>> func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 5)\n# [6, 5, 7, 8, 1]\nsub func\n{\n  my ($nums, $k) = @_;\n", "entry_point": "func", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]];\nmy $arg01 = 3;\nmy $x0 = func($arg00, $arg01);\nmy $v0 = [5, 7, 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]];\nmy $arg11 = 1;\nmy $x1 = func($arg10, $arg11);\nmy $v1 = [1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]];\nmy $arg21 = 5;\nmy $x2 = func($arg20, $arg21);\nmy $v2 = [6, 5, 7, 8, 1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/32", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the largest prime factor of a given number.\n#\n# >>> max_prime_factors(15)\n# 5\n# >>> max_prime_factors(6)\n# 3\n# >>> max_prime_factors(2)\n# 2\nsub max_prime_factors\n{\n  my ($n) = @_;\n", "entry_point": "max_prime_factors", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 15;\nmy $x0 = max_prime_factors($arg00);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 6;\nmy $x1 = max_prime_factors($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $x2 = max_prime_factors($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the largest prime factor of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/33", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to convert a decimal number to binary number.\n#\n# >>> decimal_to_binary(10)\n# 1010\n# >>> decimal_to_binary(1)\n# 1\n# >>> decimal_to_binary(20)\n# 10100\nsub decimal_to_binary\n{\n  my ($n) = @_;\n", "entry_point": "decimal_to_binary", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = decimal_to_binary($arg00);\nmy $v0 = 1010;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $x1 = decimal_to_binary($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 20;\nmy $x2 = decimal_to_binary($arg20);\nmy $v2 = 10100;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to convert a decimal number to binary number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/34", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the missing number in a sorted array.\n#\n# >>> find_missing([1, 2, 3, 5], 4)\n# 4\n# >>> find_missing([1, 3, 4, 5], 4)\n# 2\n# >>> find_missing([1, 2, 3, 5, 6, 7], 5)\n# 4\nsub find_missing\n{\n  my ($ar, $n) = @_;\n", "entry_point": "find_missing", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 5];\nmy $arg01 = 4;\nmy $x0 = find_missing($arg00, $arg01);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 3, 4, 5];\nmy $arg11 = 4;\nmy $x1 = find_missing($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 5, 6, 7];\nmy $arg21 = 5;\nmy $x2 = find_missing($arg20, $arg21);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the missing number in a sorted array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/35", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the n-th rectangular number.\n#\n# >>> find_rect_num(4)\n# 20\n# >>> find_rect_num(5)\n# 30\n# >>> find_rect_num(6)\n# 42\nsub find_rect_num\n{\n  my ($n) = @_;\n", "entry_point": "find_rect_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $x0 = find_rect_num($arg00);\nmy $v0 = 20;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $x1 = find_rect_num($arg10);\nmy $v1 = 30;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 6;\nmy $x2 = find_rect_num($arg20);\nmy $v2 = 42;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the n-th rectangular number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/36", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the nth digit in the proper fraction of two given numbers.\n#\n# >>> find_nth_digit(1, 2, 1)\n# 5\n# >>> find_nth_digit(3, 5, 1)\n# 6\n# >>> find_nth_digit(5, 6, 5)\n# 3\nsub find_nth_digit\n{\n  my ($p, $q, $n) = @_;\n", "entry_point": "find_nth_digit", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 2;\nmy $arg02 = 1;\nmy $x0 = find_nth_digit($arg00, $arg01, $arg02);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $arg11 = 5;\nmy $arg12 = 1;\nmy $x1 = find_nth_digit($arg10, $arg11, $arg12);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $arg21 = 6;\nmy $arg22 = 5;\nmy $x2 = find_nth_digit($arg20, $arg21, $arg22);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the nth digit in the proper fraction of two given numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/37", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort a given mixed list of integers and strings.\n#\n# >>> sort_mixed_list([19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1])\n# [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"]\n# >>> sort_mixed_list([19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1])\n# [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"]\n# >>> sort_mixed_list([19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1])\n# [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"]\nsub sort_mixed_list\n{\n  my ($mixed_list) = @_;\n", "entry_point": "sort_mixed_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1];\nmy $x0 = sort_mixed_list($arg00);\nmy $v0 = [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1];\nmy $x1 = sort_mixed_list($arg10);\nmy $v1 = [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1];\nmy $x2 = sort_mixed_list($arg20);\nmy $v2 = [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort a given mixed list of integers and strings.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/38", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the division of first even and odd number of a given list.\n#\n# >>> div_even_odd([1, 3, 5, 7, 4, 1, 6, 8])\n# 4\n# >>> div_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# 2\n# >>> div_even_odd([1, 5, 7, 9, 10])\n# 10\nsub div_even_odd\n{\n  my ($list1) = @_;\n", "entry_point": "div_even_odd", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 5, 7, 4, 1, 6, 8];\nmy $x0 = div_even_odd($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $x1 = div_even_odd($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 5, 7, 9, 10];\nmy $x2 = div_even_odd($arg20);\nmy $v2 = 10;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the division of first even and odd number of a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/39", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n#\n# >>> rearange_string(\"aab\")\n# \"aba\"\n# >>> rearange_string(\"aabb\")\n# \"abab\"\n# >>> rearange_string(\"abccdd\")\n# \"cdabcd\"\nsub rearange_string\n{\n  my ($s) = @_;\n", "entry_point": "rearange_string", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"aab\";\nmy $x0 = rearange_string($arg00);\nmy $v0 = \"aba\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"aabb\";\nmy $x1 = rearange_string($arg10);\nmy $v1 = \"abab\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abccdd\";\nmy $x2 = rearange_string($arg20);\nmy $v2 = \"cdabcd\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/40", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find frequency of the elements in a given list of lists using collections module.\n#\n# >>> freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])\n# {2 => 3, 1 => 2, 5 => 2, 3 => 1, 4 => 1, 6 => 1, 7 => 1, 9 => 1}\n# >>> freq_element([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n# {1 => 1, 2 => 1, 3 => 1, 4 => 1, 5 => 1, 6 => 1, 7 => 1, 8 => 1, 9 => 1, 10 => 1, 11 => 1, 12 => 1}\n# >>> freq_element([[15, 20, 30, 40], [80, 90, 100, 110], [30, 30, 80, 90]])\n# {30 => 3, 80 => 2, 90 => 2, 15 => 1, 20 => 1, 40 => 1, 100 => 1, 110 => 1}\nsub freq_element\n{\n  my ($nums) = @_;\n", "entry_point": "freq_element", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nmy $x0 = freq_element($arg00);\nmy $v0 = {2 => 3, 1 => 2, 5 => 2, 3 => 1, 4 => 1, 6 => 1, 7 => 1, 9 => 1};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]];\nmy $x1 = freq_element($arg10);\nmy $v1 = {1 => 1, 2 => 1, 3 => 1, 4 => 1, 5 => 1, 6 => 1, 7 => 1, 8 => 1, 9 => 1, 10 => 1, 11 => 1, 12 => 1};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[15, 20, 30, 40], [80, 90, 100, 110], [30, 30, 80, 90]];\nmy $x2 = freq_element($arg20);\nmy $v2 = {30 => 3, 80 => 2, 90 => 2, 15 => 1, 20 => 1, 40 => 1, 100 => 1, 110 => 1};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find frequency of the elements in a given list of lists using collections module.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/41", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to filter even numbers using lambda function.\n#\n# >>> filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# [2, 4, 6, 8, 10]\n# >>> filter_evennumbers([10, 20, 45, 67, 84, 93])\n# [10, 20, 84]\n# >>> filter_evennumbers([5, 7, 9, 8, 6, 4, 3])\n# [8, 6, 4]\nsub filter_evennumbers\n{\n  my ($nums) = @_;\n", "entry_point": "filter_evennumbers", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $x0 = filter_evennumbers($arg00);\nmy $v0 = [2, 4, 6, 8, 10];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [10, 20, 45, 67, 84, 93];\nmy $x1 = filter_evennumbers($arg10);\nmy $v1 = [10, 20, 84];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [5, 7, 9, 8, 6, 4, 3];\nmy $x2 = filter_evennumbers($arg20);\nmy $v2 = [8, 6, 4];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to filter even numbers using lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/42", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of repeated elements in a given array.\n#\n# >>> find_sum([1, 2, 3, 1, 1, 4, 5, 6], 8)\n# 3\n# >>> find_sum([1, 2, 3, 1, 1], 5)\n# 3\n# >>> find_sum([1, 1, 2], 3)\n# 2\nsub find_sum\n{\n  my ($arr, $n) = @_;\n", "entry_point": "find_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 1, 1, 4, 5, 6];\nmy $arg01 = 8;\nmy $x0 = find_sum($arg00, $arg01);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 1, 1];\nmy $arg11 = 5;\nmy $x1 = find_sum($arg10, $arg11);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 1, 2];\nmy $arg21 = 3;\nmy $x2 = find_sum($arg20, $arg21);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of repeated elements in a given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/43", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find sequences of lowercase letters joined with an underscore using regex.\n#\n# >>> text_match(\"aab_cbbbc\")\n# \"Found a match!\"\n# >>> text_match(\"aab_Abbbc\")\n# \"Not matched!\"\n# >>> text_match(\"Aaab_abbbc\")\n# \"Not matched!\"\nsub text_match\n{\n  my ($text) = @_;\n", "entry_point": "text_match", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"aab_cbbbc\";\nmy $x0 = text_match($arg00);\nmy $v0 = \"Found a match!\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"aab_Abbbc\";\nmy $x1 = text_match($arg10);\nmy $v1 = \"Not matched!\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Aaab_abbbc\";\nmy $x2 = text_match($arg20);\nmy $v2 = \"Not matched!\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find sequences of lowercase letters joined with an underscore using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/44", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function that matches a word at the beginning of a string.\n#\n# >>> text_match_string(\" python\")\n# \"Not matched!\"\n# >>> text_match_string(\"python\")\n# \"Found a match!\"\n# >>> text_match_string(\"  lang\")\n# \"Not matched!\"\nsub text_match_string\n{\n  my ($text) = @_;\n", "entry_point": "text_match_string", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \" python\";\nmy $x0 = text_match_string($arg00);\nmy $v0 = \"Not matched!\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"python\";\nmy $x1 = text_match_string($arg10);\nmy $v1 = \"Found a match!\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"  lang\";\nmy $x2 = text_match_string($arg20);\nmy $v2 = \"Not matched!\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function that matches a word at the beginning of a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/45", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the gcd of the given array elements.\n#\n# >>> get_gcd([2, 4, 6, 8, 16])\n# 2\n# >>> get_gcd([1, 2, 3])\n# 1\n# >>> get_gcd([2, 4, 6, 8])\n# 2\nsub get_gcd\n{\n  my ($l) = @_;\n", "entry_point": "get_gcd", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 4, 6, 8, 16];\nmy $x0 = get_gcd($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3];\nmy $x1 = get_gcd($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 4, 6, 8];\nmy $x2 = get_gcd($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the gcd of the given array elements.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/46", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to determine whether all the numbers are different from each other are not.\n#\n# >>> test_distinct([1, 5, 7, 9])\n# 1\n# >>> test_distinct([2, 4, 5, 5, 7, 9])\n# 0\n# >>> test_distinct([1, 2, 3])\n# 1\nsub test_distinct\n{\n  my ($data) = @_;\n", "entry_point": "test_distinct", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 5, 7, 9];\nmy $x0 = test_distinct($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 4, 5, 5, 7, 9];\nmy $x1 = test_distinct($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3];\nmy $x2 = test_distinct($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to determine whether all the numbers are different from each other are not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/47", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the last digit when factorial of a divides factorial of b.\n#\n# >>> compute_last_digit(2, 4)\n# 2\n# >>> compute_last_digit(6, 8)\n# 6\n# >>> compute_last_digit(1, 2)\n# 2\nsub compute_last_digit\n{\n  my ($a, $b) = @_;\n", "entry_point": "compute_last_digit", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $arg01 = 4;\nmy $x0 = compute_last_digit($arg00, $arg01);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 6;\nmy $arg11 = 8;\nmy $x1 = compute_last_digit($arg10, $arg11);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 2;\nmy $x2 = compute_last_digit($arg20, $arg21);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the last digit when factorial of a divides factorial of b.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/48", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to set all odd bits of a given number.\n#\n# >>> odd_bit_set_number(10)\n# 15\n# >>> odd_bit_set_number(20)\n# 21\n# >>> odd_bit_set_number(30)\n# 31\nsub odd_bit_set_number\n{\n  my ($n) = @_;\n", "entry_point": "odd_bit_set_number", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = odd_bit_set_number($arg00);\nmy $v0 = 15;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 20;\nmy $x1 = odd_bit_set_number($arg10);\nmy $v1 = 21;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 30;\nmy $x2 = odd_bit_set_number($arg20);\nmy $v2 = 31;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to set all odd bits of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/49", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract every first or specified element from a given two-dimensional list.\n#\n# >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)\n# [1, 4, 7]\n# >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)\n# [3, 6, 9]\n# >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1)\n# [2, 5, 1]\nsub specified_element\n{\n  my ($nums, $n) = @_;\n", "entry_point": "specified_element", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nmy $arg01 = 0;\nmy $x0 = specified_element($arg00, $arg01);\nmy $v0 = [1, 4, 7];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nmy $arg11 = 2;\nmy $x1 = specified_element($arg10, $arg11);\nmy $v1 = [3, 6, 9];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nmy $arg21 = 1;\nmy $x2 = specified_element($arg20, $arg21);\nmy $v2 = [2, 5, 1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract every first or specified element from a given two-dimensional list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/50", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the list with minimum length using lambda function.\n#\n# >>> min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n# [1, [0]]\n# >>> min_length_list([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])\n# [1, [1]]\n# >>> min_length_list([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2]])\n# [2, [1, 2]]\nsub min_length_list\n{\n  my ($input_list) = @_;\n", "entry_point": "min_length_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]];\nmy $x0 = min_length_list($arg00);\nmy $v0 = [1, [0]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]];\nmy $x1 = min_length_list($arg10);\nmy $v1 = [1, [1]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2]];\nmy $x2 = min_length_list($arg20);\nmy $v2 = [2, [1, 2]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the list with minimum length using lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/51", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to print check if the triangle is equilateral or not.\n#\n# >>> check_equilateral(6, 8, 12)\n# 0\n# >>> check_equilateral(6, 6, 12)\n# 0\n# >>> check_equilateral(6, 6, 6)\n# 1\nsub check_equilateral\n{\n  my ($x, $y, $z) = @_;\n", "entry_point": "check_equilateral", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 6;\nmy $arg01 = 8;\nmy $arg02 = 12;\nmy $x0 = check_equilateral($arg00, $arg01, $arg02);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 6;\nmy $arg11 = 6;\nmy $arg12 = 12;\nmy $x1 = check_equilateral($arg10, $arg11, $arg12);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 6;\nmy $arg21 = 6;\nmy $arg22 = 6;\nmy $x2 = check_equilateral($arg20, $arg21, $arg22);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to print check if the triangle is equilateral or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/52", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to caluclate area of a parallelogram.\n#\n# >>> parallelogram_area(10, 20)\n# 200\n# >>> parallelogram_area(15, 20)\n# 300\n# >>> parallelogram_area(8, 9)\n# 72\nsub parallelogram_area\n{\n  my ($b, $h) = @_;\n", "entry_point": "parallelogram_area", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 20;\nmy $x0 = parallelogram_area($arg00, $arg01);\nmy $v0 = 200;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 15;\nmy $arg11 = 20;\nmy $x1 = parallelogram_area($arg10, $arg11);\nmy $v1 = 300;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 8;\nmy $arg21 = 9;\nmy $x2 = parallelogram_area($arg20, $arg21);\nmy $v2 = 72;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to caluclate area of a parallelogram.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/53", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the first and last characters of a given string are equal or not.\n#\n# >>> check_equality(\"abcda\")\n# \"Equal\"\n# >>> check_equality(\"ab\")\n# \"Not Equal\"\n# >>> check_equality(\"mad\")\n# \"Not Equal\"\nsub check_equality\n{\n  my ($str) = @_;\n", "entry_point": "check_equality", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abcda\";\nmy $x0 = check_equality($arg00);\nmy $v0 = \"Equal\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"ab\";\nmy $x1 = check_equality($arg10);\nmy $v1 = \"Not Equal\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"mad\";\nmy $x2 = check_equality($arg20);\nmy $v2 = \"Not Equal\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the first and last characters of a given string are equal or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/54", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort the given array by using counting sort.\n#\n# >>> counting_sort([1, 23, 4, 5, 6, 7, 8])\n# [1, 4, 5, 6, 7, 8, 23]\n# >>> counting_sort([12, 9, 28, 33, 69, 45])\n# [9, 12, 28, 33, 45, 69]\n# >>> counting_sort([8, 4, 14, 3, 2, 1])\n# [1, 2, 3, 4, 8, 14]\nsub counting_sort\n{\n  my ($my_list) = @_;\n", "entry_point": "counting_sort", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 23, 4, 5, 6, 7, 8];\nmy $x0 = counting_sort($arg00);\nmy $v0 = [1, 4, 5, 6, 7, 8, 23];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [12, 9, 28, 33, 69, 45];\nmy $x1 = counting_sort($arg10);\nmy $v1 = [9, 12, 28, 33, 45, 69];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [8, 4, 14, 3, 2, 1];\nmy $x2 = counting_sort($arg20);\nmy $v2 = [1, 2, 3, 4, 8, 14];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort the given array by using counting sort.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/55", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find t-nth term of geometric series.\n#\n# >>> tn_gp(1, 5, 2)\n# 16\n# >>> tn_gp(1, 5, 4)\n# 256\n# >>> tn_gp(2, 6, 3)\n# 486\nsub tn_gp\n{\n  my ($a, $n, $r) = @_;\n", "entry_point": "tn_gp", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 5;\nmy $arg02 = 2;\nmy $x0 = tn_gp($arg00, $arg01, $arg02);\nmy $v0 = 16;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 5;\nmy $arg12 = 4;\nmy $x1 = tn_gp($arg10, $arg11, $arg12);\nmy $v1 = 256;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $arg21 = 6;\nmy $arg22 = 3;\nmy $x2 = tn_gp($arg20, $arg21, $arg22);\nmy $v2 = 486;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find t-nth term of geometric series.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/56", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check if a given number is one less than twice its reverse.\n#\n# >>> check(70)\n# 0\n# >>> check(23)\n# 0\n# >>> check(73)\n# 1\nsub check\n{\n  my ($n) = @_;\n", "entry_point": "check", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 70;\nmy $x0 = check($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 23;\nmy $x1 = check($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 73;\nmy $x2 = check($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check if a given number is one less than twice its reverse.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/57", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the largest number that can be formed with the given digits.\n#\n# >>> find_max_num([1, 2, 3], 3)\n# 321\n# >>> find_max_num([4, 5, 6, 1], 4)\n# 6541\n# >>> find_max_num([1, 2, 3, 9], 4)\n# 9321\nsub find_max_num\n{\n  my ($arr, $n) = @_;\n", "entry_point": "find_max_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $arg01 = 3;\nmy $x0 = find_max_num($arg00, $arg01);\nmy $v0 = 321;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 5, 6, 1];\nmy $arg11 = 4;\nmy $x1 = find_max_num($arg10, $arg11);\nmy $v1 = 6541;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 9];\nmy $arg21 = 4;\nmy $x2 = find_max_num($arg20, $arg21);\nmy $v2 = 9321;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the largest number that can be formed with the given digits.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/58", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the given two integers have opposite sign or not.\n#\n# >>> opposite_signs(1, -2)\n# 1\n# >>> opposite_signs(3, 2)\n# 0\n# >>> opposite_signs(-10, -10)\n# 0\nsub opposite_signs\n{\n  my ($x, $y) = @_;\n", "entry_point": "opposite_signs", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = -2;\nmy $x0 = opposite_signs($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $arg11 = 2;\nmy $x1 = opposite_signs($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = -10;\nmy $arg21 = -10;\nmy $x2 = opposite_signs($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the given two integers have opposite sign or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/59", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the nth octagonal number.\n#\n# >>> is_octagonal(5)\n# 65\n# >>> is_octagonal(10)\n# 280\n# >>> is_octagonal(15)\n# 645\nsub is_octagonal\n{\n  my ($n) = @_;\n", "entry_point": "is_octagonal", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = is_octagonal($arg00);\nmy $v0 = 65;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $x1 = is_octagonal($arg10);\nmy $v1 = 280;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 15;\nmy $x2 = is_octagonal($arg20);\nmy $v2 = 645;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the nth octagonal number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/60", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n#\n# >>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8)\n# 5\n# >>> max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7)\n# 4\n# >>> max_len_sub([9, 11, 13, 15, 18], 5)\n# 1\nsub max_len_sub\n{\n  my ($arr, $n) = @_;\n", "entry_point": "max_len_sub", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 5, 6, 3, 7, 6, 5, 8];\nmy $arg01 = 8;\nmy $x0 = max_len_sub($arg00, $arg01);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [-2, -1, 5, -1, 4, 0, 3];\nmy $arg11 = 7;\nmy $x1 = max_len_sub($arg10, $arg11);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [9, 11, 13, 15, 18];\nmy $arg21 = 5;\nmy $x2 = max_len_sub($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/61", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count number of substrings with the sum of digits equal to their length.\n#\n# >>> count_substrings(\"112112\", 6)\n# 6\n# >>> count_substrings(\"111\", 3)\n# 6\n# >>> count_substrings(\"1101112\", 7)\n# 12\nsub count_substrings\n{\n  my ($s, $n) = @_;\n", "entry_point": "count_substrings", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"112112\";\nmy $arg01 = 6;\nmy $x0 = count_substrings($arg00, $arg01);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"111\";\nmy $arg11 = 3;\nmy $x1 = count_substrings($arg10, $arg11);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"1101112\";\nmy $arg21 = 7;\nmy $x2 = count_substrings($arg20, $arg21);\nmy $v2 = 12;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count number of substrings with the sum of digits equal to their length.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/62", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find smallest number in a list.\n#\n# >>> smallest_num([10, 20, 1, 45, 99])\n# 1\n# >>> smallest_num([1, 2, 3])\n# 1\n# >>> smallest_num([45, 46, 50, 60])\n# 45\nsub smallest_num\n{\n  my ($xs) = @_;\n", "entry_point": "smallest_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 20, 1, 45, 99];\nmy $x0 = smallest_num($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3];\nmy $x1 = smallest_num($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [45, 46, 50, 60];\nmy $x2 = smallest_num($arg20);\nmy $v2 = 45;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find smallest number in a list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/63", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the maximum difference between available pairs in the given tuple list.\n#\n# >>> max_difference([[3, 5], [1, 7], [10, 3], [1, 2]])\n# 7\n# >>> max_difference([[4, 6], [2, 17], [9, 13], [11, 12]])\n# 15\n# >>> max_difference([[12, 35], [21, 27], [13, 23], [41, 22]])\n# 23\nsub max_difference\n{\n  my ($test_list) = @_;\n", "entry_point": "max_difference", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[3, 5], [1, 7], [10, 3], [1, 2]];\nmy $x0 = max_difference($arg00);\nmy $v0 = 7;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[4, 6], [2, 17], [9, 13], [11, 12]];\nmy $x1 = max_difference($arg10);\nmy $v1 = 15;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[12, 35], [21, 27], [13, 23], [41, 22]];\nmy $x2 = max_difference($arg20);\nmy $v2 = 23;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the maximum difference between available pairs in the given tuple list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/64", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort a list of tuples using lambda.\n#\n# >>> subject_marks([[\"English\", 88], [\"Science\", 90], [\"Maths\", 97], [\"Social sciences\", 82]])\n# [[\"Social sciences\", 82], [\"English\", 88], [\"Science\", 90], [\"Maths\", 97]]\n# >>> subject_marks([[\"Telugu\", 49], [\"Hindhi\", 54], [\"Social\", 33]])\n# [[\"Social\", 33], [\"Telugu\", 49], [\"Hindhi\", 54]]\n# >>> subject_marks([[\"Physics\", 96], [\"Chemistry\", 97], [\"Biology\", 45]])\n# [[\"Biology\", 45], [\"Physics\", 96], [\"Chemistry\", 97]]\nsub subject_marks\n{\n  my ($subjectmarks) = @_;\n", "entry_point": "subject_marks", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"English\", 88], [\"Science\", 90], [\"Maths\", 97], [\"Social sciences\", 82]];\nmy $x0 = subject_marks($arg00);\nmy $v0 = [[\"Social sciences\", 82], [\"English\", 88], [\"Science\", 90], [\"Maths\", 97]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"Telugu\", 49], [\"Hindhi\", 54], [\"Social\", 33]];\nmy $x1 = subject_marks($arg10);\nmy $v1 = [[\"Social\", 33], [\"Telugu\", 49], [\"Hindhi\", 54]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"Physics\", 96], [\"Chemistry\", 97], [\"Biology\", 45]];\nmy $x2 = subject_marks($arg20);\nmy $v2 = [[\"Biology\", 45], [\"Physics\", 96], [\"Chemistry\", 97]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort a list of tuples using lambda.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/65", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function of recursion list sum.\n#\n# >>> recursive_list_sum([1, 2, [3, 4], [5, 6]])\n# 21\n# >>> recursive_list_sum([7, 10, [15, 14], [19, 41]])\n# 106\n# >>> recursive_list_sum([10, 20, [30, 40], [50, 60]])\n# 210\nsub recursive_list_sum\n{\n  my ($data_list) = @_;\n", "entry_point": "recursive_list_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, [3, 4], [5, 6]];\nmy $x0 = recursive_list_sum($arg00);\nmy $v0 = 21;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [7, 10, [15, 14], [19, 41]];\nmy $x1 = recursive_list_sum($arg10);\nmy $v1 = 106;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [10, 20, [30, 40], [50, 60]];\nmy $x2 = recursive_list_sum($arg20);\nmy $v2 = 210;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function of recursion list sum.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/66", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count positive numbers in a list.\n#\n# >>> pos_count([1, -2, 3, -4])\n# 2\n# >>> pos_count([3, 4, 5, -1])\n# 3\n# >>> pos_count([1, 2, 3, 4])\n# 4\nsub pos_count\n{\n  my ($list) = @_;\n", "entry_point": "pos_count", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, -2, 3, -4];\nmy $x0 = pos_count($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [3, 4, 5, -1];\nmy $x1 = pos_count($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4];\nmy $x2 = pos_count($arg20);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count positive numbers in a list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/67", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the number of ways to partition a set of bell numbers.\n#\n# >>> bell_number(2)\n# 2\n# >>> bell_number(10)\n# 115975\n# >>> bell_number(56)\n# 6775685320645824322581483068371419745979053216268760300\nsub bell_number\n{\n  my ($n) = @_;\n", "entry_point": "bell_number", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = bell_number($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $x1 = bell_number($arg10);\nmy $v1 = 115975;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 56;\nmy $x2 = bell_number($arg20);\nmy $v2 = 6775685320645824322581483068371419745979053216268760300;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the number of ways to partition a set of bell numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/68", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the given array is monotonic or not.\n#\n# >>> is_monotonic([6, 5, 4, 4])\n# 1\n# >>> is_monotonic([1, 2, 2, 3])\n# 1\n# >>> is_monotonic([1, 3, 2])\n# 0\nsub is_monotonic\n{\n  my ($a) = @_;\n", "entry_point": "is_monotonic", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [6, 5, 4, 4];\nmy $x0 = is_monotonic($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 2, 3];\nmy $x1 = is_monotonic($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, 2];\nmy $x2 = is_monotonic($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the given array is monotonic or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/69", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether a list contains the given sublist or not.\n#\n# >>> is_sublist([2, 4, 3, 5, 7], [3, 7])\n# 0\n# >>> is_sublist([2, 4, 3, 5, 7], [4, 3])\n# 1\n# >>> is_sublist([2, 4, 3, 5, 7], [1, 6])\n# 0\nsub is_sublist\n{\n  my ($l, $s) = @_;\n", "entry_point": "is_sublist", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 4, 3, 5, 7];\nmy $arg01 = [3, 7];\nmy $x0 = is_sublist($arg00, $arg01);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 4, 3, 5, 7];\nmy $arg11 = [4, 3];\nmy $x1 = is_sublist($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 4, 3, 5, 7];\nmy $arg21 = [1, 6];\nmy $x2 = is_sublist($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether a list contains the given sublist or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/70", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find whether all the given tuples have equal length or not.\n#\n# >>> get_equal([[11, 22, 33], [44, 55, 66]], 3)\n# \"All tuples have same length\"\n# >>> get_equal([[1, 2, 3], [4, 5, 6, 7]], 3)\n# \"All tuples do not have same length\"\n# >>> get_equal([[1, 2], [3, 4]], 2)\n# \"All tuples have same length\"\nsub get_equal\n{\n  my ($input, $k) = @_;\n", "entry_point": "get_equal", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[11, 22, 33], [44, 55, 66]];\nmy $arg01 = 3;\nmy $x0 = get_equal($arg00, $arg01);\nmy $v0 = \"All tuples have same length\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2, 3], [4, 5, 6, 7]];\nmy $arg11 = 3;\nmy $x1 = get_equal($arg10, $arg11);\nmy $v1 = \"All tuples do not have same length\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[1, 2], [3, 4]];\nmy $arg21 = 2;\nmy $x2 = get_equal($arg20, $arg21);\nmy $v2 = \"All tuples have same length\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find whether all the given tuples have equal length or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/71", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort a list of elements using comb sort.\n#\n# >>> comb_sort([5, 15, 37, 25, 79])\n# [5, 15, 25, 37, 79]\n# >>> comb_sort([41, 32, 15, 19, 22])\n# [15, 19, 22, 32, 41]\n# >>> comb_sort([99, 15, 13, 47])\n# [13, 15, 47, 99]\nsub comb_sort\n{\n  my ($nums) = @_;\n", "entry_point": "comb_sort", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 15, 37, 25, 79];\nmy $x0 = comb_sort($arg00);\nmy $v0 = [5, 15, 25, 37, 79];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [41, 32, 15, 19, 22];\nmy $x1 = comb_sort($arg10);\nmy $v1 = [15, 19, 22, 32, 41];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [99, 15, 13, 47];\nmy $x2 = comb_sort($arg20);\nmy $v2 = [13, 15, 47, 99];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort a list of elements using comb sort.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/72", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the given number can be represented as difference of two squares or not.\n#\n# >>> dif_square(5)\n# 1\n# >>> dif_square(10)\n# 0\n# >>> dif_square(15)\n# 1\nsub dif_square\n{\n  my ($n) = @_;\n", "entry_point": "dif_square", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = dif_square($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $x1 = dif_square($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 15;\nmy $x2 = dif_square($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the given number can be represented as difference of two squares or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/73", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to split the given string with multiple delimiters by using regex.\n#\n# >>> multiple_split(\"Forces of the \\ndarkness*are coming into the play.\")\n# [\"Forces of the \", \"darkness\", \"are coming into the play.\"]\n# >>> multiple_split(\"Mi Box runs on the \\n Latest android*which has google assistance and chromecast.\")\n# [\"Mi Box runs on the \", \" Latest android\", \"which has google assistance and chromecast.\"]\n# >>> multiple_split(\"Certain services\\nare subjected to change*over the seperate subscriptions.\")\n# [\"Certain services\", \"are subjected to change\", \"over the seperate subscriptions.\"]\nsub multiple_split\n{\n  my ($text) = @_;\n", "entry_point": "multiple_split", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Forces of the \\ndarkness*are coming into the play.\";\nmy $x0 = multiple_split($arg00);\nmy $v0 = [\"Forces of the \", \"darkness\", \"are coming into the play.\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Mi Box runs on the \\n Latest android*which has google assistance and chromecast.\";\nmy $x1 = multiple_split($arg10);\nmy $v1 = [\"Mi Box runs on the \", \" Latest android\", \"which has google assistance and chromecast.\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Certain services\\nare subjected to change*over the seperate subscriptions.\";\nmy $x2 = multiple_split($arg20);\nmy $v2 = [\"Certain services\", \"are subjected to change\", \"over the seperate subscriptions.\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to split the given string with multiple delimiters by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/74", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether it follows the sequence given in the patterns array.\n#\n# >>> is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"])\n# 1\n# >>> is_samepatterns([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"])\n# 0\n# >>> is_samepatterns([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"])\n# 0\nsub is_samepatterns\n{\n  my ($colors, $patterns) = @_;\n", "entry_point": "is_samepatterns", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"red\", \"green\", \"green\"];\nmy $arg01 = [\"a\", \"b\", \"b\"];\nmy $x0 = is_samepatterns($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"red\", \"green\", \"greenn\"];\nmy $arg11 = [\"a\", \"b\", \"b\"];\nmy $x1 = is_samepatterns($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"red\", \"green\", \"greenn\"];\nmy $arg21 = [\"a\", \"b\"];\nmy $x2 = is_samepatterns($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether it follows the sequence given in the patterns array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/75", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n#\n# >>> find_tuples([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6)\n# \"[(6, 24, 12)]\"\n# >>> find_tuples([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5)\n# \"[(5, 25, 30)]\"\n# >>> find_tuples([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4)\n# \"[(8, 16, 4)]\"\nsub find_tuples\n{\n  my ($test_list, $k) = @_;\n", "entry_point": "find_tuples", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[6, 24, 12], [7, 9, 6], [12, 18, 21]];\nmy $arg01 = 6;\nmy $x0 = find_tuples($arg00, $arg01);\nmy $v0 = \"[(6, 24, 12)]\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[5, 25, 30], [4, 2, 3], [7, 8, 9]];\nmy $arg11 = 5;\nmy $x1 = find_tuples($arg10, $arg11);\nmy $v1 = \"[(5, 25, 30)]\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[7, 9, 16], [8, 16, 4], [19, 17, 18]];\nmy $arg21 = 4;\nmy $x2 = find_tuples($arg20, $arg21);\nmy $v2 = \"[(8, 16, 4)]\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/76", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the number of squares in a rectangle.\n#\n# >>> count_squares(4, 3)\n# 20\n# >>> count_squares(2, 2)\n# 5\n# >>> count_squares(1, 1)\n# 1\nsub count_squares\n{\n  my ($m, $n) = @_;\n", "entry_point": "count_squares", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $arg01 = 3;\nmy $x0 = count_squares($arg00, $arg01);\nmy $v0 = 20;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $arg11 = 2;\nmy $x1 = count_squares($arg10, $arg11);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 1;\nmy $x2 = count_squares($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the number of squares in a rectangle.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/77", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the difference between sum of even and odd digits.\n#\n# >>> is_diff(1212112)\n# 1\n# >>> is_diff(1212)\n# 0\nsub is_diff\n{\n  my ($n) = @_;\n", "entry_point": "is_diff", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1212112;\nmy $x0 = is_diff($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1212;\nmy $x1 = is_diff($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\n", "description": "Write a Perl function to find the difference between sum of even and odd digits.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/78", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find number of integers with odd number of set bits.\n#\n# >>> count_with_odd_setbits(5)\n# 3\n# >>> count_with_odd_setbits(10)\n# 5\n# >>> count_with_odd_setbits(15)\n# 8\nsub count_with_odd_setbits\n{\n  my ($n) = @_;\n", "entry_point": "count_with_odd_setbits", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = count_with_odd_setbits($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $x1 = count_with_odd_setbits($arg10);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 15;\nmy $x2 = count_with_odd_setbits($arg20);\nmy $v2 = 8;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find number of integers with odd number of set bits.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/79", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the length of the word is odd or not.\n#\n# >>> word_len(\"Hadoop\")\n# 0\n# >>> word_len(\"great\")\n# 1\n# >>> word_len(\"structure\")\n# 1\nsub word_len\n{\n  my ($s) = @_;\n", "entry_point": "word_len", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Hadoop\";\nmy $x0 = word_len($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"great\";\nmy $x1 = word_len($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"structure\";\nmy $x2 = word_len($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the length of the word is odd or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/80", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the nth tetrahedral number.\n#\n# >>> tetrahedral_number(5)\n# 35.0\n# >>> tetrahedral_number(6)\n# 56.0\n# >>> tetrahedral_number(7)\n# 84.0\nsub tetrahedral_number\n{\n  my ($n) = @_;\n", "entry_point": "tetrahedral_number", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = tetrahedral_number($arg00);\nmy $v0 = 35.0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 6;\nmy $x1 = tetrahedral_number($arg10);\nmy $v1 = 56.0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 7;\nmy $x2 = tetrahedral_number($arg20);\nmy $v2 = 84.0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the nth tetrahedral number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/81", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to zip the two given tuples.\n#\n# >>> zip_tuples([7, 8, 4, 5, 9, 10], [1, 5, 6])\n# [[7, 1], [8, 5], [4, 6], [5, 1], [9, 5], [10, 6]]\n# >>> zip_tuples([8, 9, 5, 6, 10, 11], [2, 6, 7])\n# [[8, 2], [9, 6], [5, 7], [6, 2], [10, 6], [11, 7]]\n# >>> zip_tuples([9, 10, 6, 7, 11, 12], [3, 7, 8])\n# [[9, 3], [10, 7], [6, 8], [7, 3], [11, 7], [12, 8]]\nsub zip_tuples\n{\n  my ($test_tup1, $test_tup2) = @_;\n", "entry_point": "zip_tuples", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [7, 8, 4, 5, 9, 10];\nmy $arg01 = [1, 5, 6];\nmy $x0 = zip_tuples($arg00, $arg01);\nmy $v0 = [[7, 1], [8, 5], [4, 6], [5, 1], [9, 5], [10, 6]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [8, 9, 5, 6, 10, 11];\nmy $arg11 = [2, 6, 7];\nmy $x1 = zip_tuples($arg10, $arg11);\nmy $v1 = [[8, 2], [9, 6], [5, 7], [6, 2], [10, 6], [11, 7]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [9, 10, 6, 7, 11, 12];\nmy $arg21 = [3, 7, 8];\nmy $x2 = zip_tuples($arg20, $arg21);\nmy $v2 = [[9, 3], [10, 7], [6, 8], [7, 3], [11, 7], [12, 8]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to zip the two given tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/82", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the volume of a sphere.\n#\n# >>> volume_sphere(10)\n# 4188.790204786391\n# >>> volume_sphere(25)\n# 65449.84694978735\n# >>> volume_sphere(20)\n# 33510.32163829113\nsub volume_sphere\n{\n  my ($r) = @_;\n", "entry_point": "volume_sphere", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = volume_sphere($arg00);\nmy $v0 = 4188.790204786391;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 25;\nmy $x1 = volume_sphere($arg10);\nmy $v1 = 65449.84694978735;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 20;\nmy $x2 = volume_sphere($arg20);\nmy $v2 = 33510.32163829113;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the volume of a sphere.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/83", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the character made by adding all the characters of the given string.\n#\n# >>> get_char(\"abc\")\n# \"f\"\n# >>> get_char(\"gfg\")\n# \"t\"\n# >>> get_char(\"ab\")\n# \"c\"\nsub get_char\n{\n  my ($strr) = @_;\n", "entry_point": "get_char", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abc\";\nmy $x0 = get_char($arg00);\nmy $v0 = \"f\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"gfg\";\nmy $x1 = get_char($arg10);\nmy $v1 = \"t\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"ab\";\nmy $x2 = get_char($arg20);\nmy $v2 = \"c\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the character made by adding all the characters of the given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/84", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the n-th number in newman conway sequence.\n#\n# >>> sequence(10)\n# 6\n# >>> sequence(2)\n# 1\n# >>> sequence(3)\n# 2\nsub sequence\n{\n  my ($n) = @_;\n", "entry_point": "sequence", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = sequence($arg00);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = sequence($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $x2 = sequence($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the n-th number in newman conway sequence.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/85", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the surface area of a sphere.\n#\n# >>> surfacearea_sphere(10)\n# 1256.6370614359173\n# >>> surfacearea_sphere(15)\n# 2827.4333882308138\n# >>> surfacearea_sphere(20)\n# 5026.548245743669\nsub surfacearea_sphere\n{\n  my ($r) = @_;\n", "entry_point": "surfacearea_sphere", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = surfacearea_sphere($arg00);\nmy $v0 = 1256.6370614359173;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 15;\nmy $x1 = surfacearea_sphere($arg10);\nmy $v1 = 2827.4333882308138;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 20;\nmy $x2 = surfacearea_sphere($arg20);\nmy $v2 = 5026.548245743669;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the surface area of a sphere.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/86", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find nth centered hexagonal number.\n#\n# >>> centered_hexagonal_number(10)\n# 271\n# >>> centered_hexagonal_number(2)\n# 7\n# >>> centered_hexagonal_number(9)\n# 217\nsub centered_hexagonal_number\n{\n  my ($n) = @_;\n", "entry_point": "centered_hexagonal_number", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = centered_hexagonal_number($arg00);\nmy $v0 = 271;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = centered_hexagonal_number($arg10);\nmy $v1 = 7;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 9;\nmy $x2 = centered_hexagonal_number($arg20);\nmy $v2 = 217;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find nth centered hexagonal number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/87", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to merge three dictionaries into a single expression.\n#\n# >>> merge_dictionaries_three({\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"}, {\"G\" => \"Green\", \"W\" => \"White\"}, {\"O\" => \"Orange\", \"W\" => \"White\", \"B\" => \"Black\"})\n# {\"B\" => \"Black\", \"R\" => \"Red\", \"P\" => \"Pink\", \"G\" => \"Green\", \"W\" => \"White\", \"O\" => \"Orange\"}\n# >>> merge_dictionaries_three({\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"}, {\"G\" => \"Green\", \"W\" => \"White\"}, {\"L\" => \"lavender\", \"B\" => \"Blue\"})\n# {\"W\" => \"White\", \"P\" => \"Pink\", \"B\" => \"Black\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\"}\n# >>> merge_dictionaries_three({\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"}, {\"L\" => \"lavender\", \"B\" => \"Blue\"}, {\"G\" => \"Green\", \"W\" => \"White\"})\n# {\"B\" => \"Black\", \"P\" => \"Pink\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\", \"W\" => \"White\"}\nsub merge_dictionaries_three\n{\n  my ($dict1, $dict2, $dict3) = @_;\n", "entry_point": "merge_dictionaries_three", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"};\nmy $arg01 = {\"G\" => \"Green\", \"W\" => \"White\"};\nmy $arg02 = {\"O\" => \"Orange\", \"W\" => \"White\", \"B\" => \"Black\"};\nmy $x0 = merge_dictionaries_three($arg00, $arg01, $arg02);\nmy $v0 = {\"B\" => \"Black\", \"R\" => \"Red\", \"P\" => \"Pink\", \"G\" => \"Green\", \"W\" => \"White\", \"O\" => \"Orange\"};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"};\nmy $arg11 = {\"G\" => \"Green\", \"W\" => \"White\"};\nmy $arg12 = {\"L\" => \"lavender\", \"B\" => \"Blue\"};\nmy $x1 = merge_dictionaries_three($arg10, $arg11, $arg12);\nmy $v1 = {\"W\" => \"White\", \"P\" => \"Pink\", \"B\" => \"Black\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\"};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"};\nmy $arg21 = {\"L\" => \"lavender\", \"B\" => \"Blue\"};\nmy $arg22 = {\"G\" => \"Green\", \"W\" => \"White\"};\nmy $x2 = merge_dictionaries_three($arg20, $arg21, $arg22);\nmy $v2 = {\"B\" => \"Black\", \"P\" => \"Pink\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\", \"W\" => \"White\"};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to merge three dictionaries into a single expression.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/88", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to get the frequency of the elements in a list.\n#\n# >>> freq_count([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30])\n# {10 => 4, 20 => 4, 40 => 2, 50 => 2, 30 => 1}\n# >>> freq_count([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4])\n# {1 => 3, 2 => 2, 3 => 3, 4 => 3}\n# >>> freq_count([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5])\n# {10 => 1, 5 => 3, 6 => 2, 7 => 2, 4 => 2, 9 => 2}\nsub freq_count\n{\n  my ($list1) = @_;\n", "entry_point": "freq_count", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30];\nmy $x0 = freq_count($arg00);\nmy $v0 = {10 => 4, 20 => 4, 40 => 2, 50 => 2, 30 => 1};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4];\nmy $x1 = freq_count($arg10);\nmy $v1 = {1 => 3, 2 => 2, 3 => 3, 4 => 3};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5];\nmy $x2 = freq_count($arg20);\nmy $v2 = {10 => 1, 5 => 3, 6 => 2, 7 => 2, 4 => 2, 9 => 2};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to get the frequency of the elements in a list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/89", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the closest smaller number than n.\n#\n# >>> closest_num(11)\n# 10\n# >>> closest_num(7)\n# 6\n# >>> closest_num(12)\n# 11\nsub closest_num\n{\n  my ($n) = @_;\n", "entry_point": "closest_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 11;\nmy $x0 = closest_num($arg00);\nmy $v0 = 10;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 7;\nmy $x1 = closest_num($arg10);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 12;\nmy $x2 = closest_num($arg20);\nmy $v2 = 11;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the closest smaller number than n.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/90", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the length of the longest word.\n#\n# >>> len_log([\"python\", \"PHP\", \"bigdata\"])\n# 7\n# >>> len_log([\"a\", \"ab\", \"abc\"])\n# 3\n# >>> len_log([\"small\", \"big\", \"tall\"])\n# 5\nsub len_log\n{\n  my ($list1) = @_;\n", "entry_point": "len_log", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"python\", \"PHP\", \"bigdata\"];\nmy $x0 = len_log($arg00);\nmy $v0 = 7;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"a\", \"ab\", \"abc\"];\nmy $x1 = len_log($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"small\", \"big\", \"tall\"];\nmy $x2 = len_log($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the length of the longest word.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/91", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if a substring is present in a given list of string values.\n#\n# >>> find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\")\n# 1\n# >>> find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\")\n# 0\n# >>> find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\")\n# 1\nsub find_substring\n{\n  my ($str1, $sub_str) = @_;\n", "entry_point": "find_substring", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"red\", \"black\", \"white\", \"green\", \"orange\"];\nmy $arg01 = \"ack\";\nmy $x0 = find_substring($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"red\", \"black\", \"white\", \"green\", \"orange\"];\nmy $arg11 = \"abc\";\nmy $x1 = find_substring($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"red\", \"black\", \"white\", \"green\", \"orange\"];\nmy $arg21 = \"ange\";\nmy $x2 = find_substring($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if a substring is present in a given list of string values.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/92", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether the given number is undulating or not.\n#\n# >>> is_undulating(\"1212121\")\n# 1\n# >>> is_undulating(\"1991\")\n# 0\n# >>> is_undulating(\"121\")\n# 1\nsub is_undulating\n{\n  my ($n) = @_;\n", "entry_point": "is_undulating", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"1212121\";\nmy $x0 = is_undulating($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"1991\";\nmy $x1 = is_undulating($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"121\";\nmy $x2 = is_undulating($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether the given number is undulating or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/93", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate the value of 'a' to the power 'b'.\n#\n# >>> power(3, 4)\n# 81\n# >>> power(2, 3)\n# 8\n# >>> power(5, 5)\n# 3125\nsub power\n{\n  my ($a, $b) = @_;\n", "entry_point": "power", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 4;\nmy $x0 = power($arg00, $arg01);\nmy $v0 = 81;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $arg11 = 3;\nmy $x1 = power($arg10, $arg11);\nmy $v1 = 8;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $arg21 = 5;\nmy $x2 = power($arg20, $arg21);\nmy $v2 = 3125;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate the value of 'a' to the power 'b'.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/94", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract the index minimum value record from the given tuples.\n#\n# >>> index_minimum([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]])\n# \"Varsha\"\n# >>> index_minimum([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]])\n# \"Dawood\"\n# >>> index_minimum([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]])\n# \"Ayesha\"\nsub index_minimum\n{\n  my ($test_list) = @_;\n", "entry_point": "index_minimum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]];\nmy $x0 = index_minimum($arg00);\nmy $v0 = \"Varsha\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]];\nmy $x1 = index_minimum($arg10);\nmy $v1 = \"Dawood\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]];\nmy $x2 = index_minimum($arg20);\nmy $v2 = \"Ayesha\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract the index minimum value record from the given tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/95", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the minimum length of sublist.\n#\n# >>> find_min_length([[1], [1, 2]])\n# 1\n# >>> find_min_length([[1, 2], [1, 2, 3], [1, 2, 3, 4]])\n# 2\n# >>> find_min_length([[3, 3, 3], [4, 4, 4, 4]])\n# 3\nsub find_min_length\n{\n  my ($lst) = @_;\n", "entry_point": "find_min_length", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1], [1, 2]];\nmy $x0 = find_min_length($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2], [1, 2, 3], [1, 2, 3, 4]];\nmy $x1 = find_min_length($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[3, 3, 3], [4, 4, 4, 4]];\nmy $x2 = find_min_length($arg20);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the minimum length of sublist.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/96", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the number of divisors of a given integer.\n#\n# >>> divisor(15)\n# 4\n# >>> divisor(12)\n# 6\n# >>> divisor(9)\n# 3\nsub divisor\n{\n  my ($n) = @_;\n", "entry_point": "divisor", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 15;\nmy $x0 = divisor($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 12;\nmy $x1 = divisor($arg10);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 9;\nmy $x2 = divisor($arg20);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the number of divisors of a given integer.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/97", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find frequency count of list of lists.\n#\n# >>> frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n# {1 => 1, 2 => 3, 3 => 1, 4 => 1, 5 => 2, 6 => 1, 7 => 1, 8 => 1, 9 => 1}\n# >>> frequency_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n# {1 => 1, 2 => 1, 3 => 1, 4 => 1, 5 => 1, 6 => 1, 7 => 1, 8 => 1, 9 => 1, 10 => 1, 11 => 1, 12 => 1}\n# >>> frequency_lists([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]])\n# {20 => 2, 30 => 2, 40 => 2, 17 => 1, 18 => 1, 16 => 1, 14 => 1, 13 => 1, 10 => 1}\nsub frequency_lists\n{\n  my ($list1) = @_;\n", "entry_point": "frequency_lists", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]];\nmy $x0 = frequency_lists($arg00);\nmy $v0 = {1 => 1, 2 => 3, 3 => 1, 4 => 1, 5 => 2, 6 => 1, 7 => 1, 8 => 1, 9 => 1};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]];\nmy $x1 = frequency_lists($arg10);\nmy $v1 = {1 => 1, 2 => 1, 3 => 1, 4 => 1, 5 => 1, 6 => 1, 7 => 1, 8 => 1, 9 => 1, 10 => 1, 11 => 1, 12 => 1};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]];\nmy $x2 = frequency_lists($arg20);\nmy $v2 = {20 => 2, 30 => 2, 40 => 2, 17 => 1, 18 => 1, 16 => 1, 14 => 1, 13 => 1, 10 => 1};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find frequency count of list of lists.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/98", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to multiply all the numbers in a list and divide with the length of the list.\n#\n# >>> multiply_num([8, 2, 3, -1, 7])\n# -67.2\n# >>> multiply_num([-10, -20, -30])\n# -2000.0\n# >>> multiply_num([19, 15, 18])\n# 1710.0\nsub multiply_num\n{\n  my ($numbers) = @_;\n", "entry_point": "multiply_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [8, 2, 3, -1, 7];\nmy $x0 = multiply_num($arg00);\nmy $v0 = -67.2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [-10, -20, -30];\nmy $x1 = multiply_num($arg10);\nmy $v1 = -2000.0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [19, 15, 18];\nmy $x2 = multiply_num($arg20);\nmy $v2 = 1710.0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/99", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert the given decimal number to its binary equivalent.\n#\n# >>> decimal_to_binary(8)\n# \"1000\"\n# >>> decimal_to_binary(18)\n# \"10010\"\n# >>> decimal_to_binary(7)\n# \"111\"\nsub decimal_to_binary\n{\n  my ($n) = @_;\n", "entry_point": "decimal_to_binary", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 8;\nmy $x0 = decimal_to_binary($arg00);\nmy $v0 = \"1000\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 18;\nmy $x1 = decimal_to_binary($arg10);\nmy $v1 = \"10010\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 7;\nmy $x2 = decimal_to_binary($arg20);\nmy $v2 = \"111\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert the given decimal number to its binary equivalent.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/100", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the next smallest palindrome of a specified number.\n#\n# >>> next_smallest_palindrome(99)\n# 101\n# >>> next_smallest_palindrome(1221)\n# 1331\n# >>> next_smallest_palindrome(120)\n# 121\nsub next_smallest_palindrome\n{\n  my ($num) = @_;\n", "entry_point": "next_smallest_palindrome", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 99;\nmy $x0 = next_smallest_palindrome($arg00);\nmy $v0 = 101;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1221;\nmy $x1 = next_smallest_palindrome($arg10);\nmy $v1 = 1331;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 120;\nmy $x2 = next_smallest_palindrome($arg20);\nmy $v2 = 121;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the next smallest palindrome of a specified number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/101", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the kth element in the given array.\n#\n# >>> kth_element([12, 3, 5, 7, 19], 5, 2)\n# 3\n# >>> kth_element([17, 24, 8, 23], 4, 3)\n# 8\n# >>> kth_element([16, 21, 25, 36, 4], 5, 4)\n# 36\nsub kth_element\n{\n  my ($arr, $n, $k) = @_;\n", "entry_point": "kth_element", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [12, 3, 5, 7, 19];\nmy $arg01 = 5;\nmy $arg02 = 2;\nmy $x0 = kth_element($arg00, $arg01, $arg02);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [17, 24, 8, 23];\nmy $arg11 = 4;\nmy $arg12 = 3;\nmy $x1 = kth_element($arg10, $arg11, $arg12);\nmy $v1 = 8;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [16, 21, 25, 36, 4];\nmy $arg21 = 5;\nmy $arg22 = 4;\nmy $x2 = kth_element($arg20, $arg21, $arg22);\nmy $v2 = 36;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the kth element in the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/102", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert snake case string to camel case string.\n#\n# >>> snake_to_camel(\"python_program\")\n# \"PythonProgram\"\n# >>> snake_to_camel(\"python_language\")\n# \"PythonLanguage\"\n# >>> snake_to_camel(\"programming_language\")\n# \"ProgrammingLanguage\"\nsub snake_to_camel\n{\n  my ($word) = @_;\n", "entry_point": "snake_to_camel", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python_program\";\nmy $x0 = snake_to_camel($arg00);\nmy $v0 = \"PythonProgram\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"python_language\";\nmy $x1 = snake_to_camel($arg10);\nmy $v1 = \"PythonLanguage\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"programming_language\";\nmy $x2 = snake_to_camel($arg20);\nmy $v2 = \"ProgrammingLanguage\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert snake case string to camel case string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/103", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find eulerian number a(n, m).\n#\n# >>> eulerian_num(3, 1)\n# 4\n# >>> eulerian_num(4, 1)\n# 11\n# >>> eulerian_num(5, 3)\n# 26\nsub eulerian_num\n{\n  my ($n, $m) = @_;\n", "entry_point": "eulerian_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 1;\nmy $x0 = eulerian_num($arg00, $arg01);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $arg11 = 1;\nmy $x1 = eulerian_num($arg10, $arg11);\nmy $v1 = 11;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $arg21 = 3;\nmy $x2 = eulerian_num($arg20, $arg21);\nmy $v2 = 26;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find eulerian number a(n, m).", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/104", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort each sublist of strings in a given list of lists using lambda function.\n#\n# >>> sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n# [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]]\n# >>> sort_sublists([[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]])\n# [[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]]\n# >>> sort_sublists([[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]])\n# [[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]]\nsub sort_sublists\n{\n  my ($input_list) = @_;\n", "entry_point": "sort_sublists", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]];\nmy $x0 = sort_sublists($arg00);\nmy $v0 = [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]];\nmy $x1 = sort_sublists($arg10);\nmy $v1 = [[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]];\nmy $x2 = sort_sublists($arg20);\nmy $v2 = [[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort each sublist of strings in a given list of lists using lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/105", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count true booleans in the given list.\n#\n# >>> count([1, 0, 1])\n# 2\n# >>> count([0, 0])\n# 0\n# >>> count([1, 1, 1])\n# 3\nsub count\n{\n  my ($lst) = @_;\n", "entry_point": "count", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 0, 1];\nmy $x0 = count($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [0, 0];\nmy $x1 = count($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 1, 1];\nmy $x2 = count($arg20);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count true booleans in the given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/106", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to add the given list to the given tuples.\n#\n# >>> add_lists([5, 6, 7], [9, 10])\n# [9, 10, 5, 6, 7]\n# >>> add_lists([6, 7, 8], [10, 11])\n# [10, 11, 6, 7, 8]\n# >>> add_lists([7, 8, 9], [11, 12])\n# [11, 12, 7, 8, 9]\nsub add_lists\n{\n  my ($test_list, $test_tup) = @_;\n", "entry_point": "add_lists", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 6, 7];\nmy $arg01 = [9, 10];\nmy $x0 = add_lists($arg00, $arg01);\nmy $v0 = [9, 10, 5, 6, 7];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [6, 7, 8];\nmy $arg11 = [10, 11];\nmy $x1 = add_lists($arg10, $arg11);\nmy $v1 = [10, 11, 6, 7, 8];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [7, 8, 9];\nmy $arg21 = [11, 12];\nmy $x2 = add_lists($arg20, $arg21);\nmy $v2 = [11, 12, 7, 8, 9];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to add the given list to the given tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/107", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count hexadecimal numbers for a given range.\n#\n# >>> count_hexadecimal(10, 15)\n# 6\n# >>> count_hexadecimal(2, 4)\n# 0\n# >>> count_hexadecimal(15, 16)\n# 1\nsub count_hexadecimal\n{\n  my ($l, $r) = @_;\n", "entry_point": "count_hexadecimal", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 15;\nmy $x0 = count_hexadecimal($arg00, $arg01);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $arg11 = 4;\nmy $x1 = count_hexadecimal($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 15;\nmy $arg21 = 16;\nmy $x2 = count_hexadecimal($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count hexadecimal numbers for a given range.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/108", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n#\n# >>> merge_sorted_list([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48])\n# [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n# >>> merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])\n# [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n# >>> merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41])\n# [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\nsub merge_sorted_list\n{\n  my ($num1, $num2, $num3) = @_;\n", "entry_point": "merge_sorted_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [25, 24, 15, 4, 5, 29, 110];\nmy $arg01 = [19, 20, 11, 56, 25, 233, 154];\nmy $arg02 = [24, 26, 54, 48];\nmy $x0 = merge_sorted_list($arg00, $arg01, $arg02);\nmy $v0 = [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 3, 5, 6, 8, 9];\nmy $arg11 = [2, 5, 7, 11];\nmy $arg12 = [1, 4, 7, 8, 12];\nmy $x1 = merge_sorted_list($arg10, $arg11, $arg12);\nmy $v1 = [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1];\nmy $arg21 = [25, 35, 22, 85, 14, 65, 75, 25, 58];\nmy $arg22 = [12, 74, 9, 50, 61, 41];\nmy $x2 = merge_sorted_list($arg20, $arg21, $arg22);\nmy $v2 = [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/109", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the count of rotations of a binary string with odd value.\n#\n# >>> odd_equivalent(\"011001\", 6)\n# 3\n# >>> odd_equivalent(\"11011\", 5)\n# 4\n# >>> odd_equivalent(\"1010\", 4)\n# 2\nsub odd_equivalent\n{\n  my ($s, $n) = @_;\n", "entry_point": "odd_equivalent", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"011001\";\nmy $arg01 = 6;\nmy $x0 = odd_equivalent($arg00, $arg01);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"11011\";\nmy $arg11 = 5;\nmy $x1 = odd_equivalent($arg10, $arg11);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"1010\";\nmy $arg21 = 4;\nmy $x2 = odd_equivalent($arg20, $arg21);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the count of rotations of a binary string with odd value.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/110", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n#\n# >>> extract_missing([[6, 9], [15, 34], [48, 70]], 2, 100)\n# [[2, 6], [9, 100], [9, 15], [34, 100], [34, 48], [70, 100]]\n# >>> extract_missing([[7, 2], [15, 19], [38, 50]], 5, 60)\n# [[5, 7], [2, 60], [2, 15], [19, 60], [19, 38], [50, 60]]\n# >>> extract_missing([[7, 2], [15, 19], [38, 50]], 1, 52)\n# [[1, 7], [2, 52], [2, 15], [19, 52], [19, 38], [50, 52]]\nsub extract_missing\n{\n  my ($test_list, $strt_val, $stop_val) = @_;\n", "entry_point": "extract_missing", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[6, 9], [15, 34], [48, 70]];\nmy $arg01 = 2;\nmy $arg02 = 100;\nmy $x0 = extract_missing($arg00, $arg01, $arg02);\nmy $v0 = [[2, 6], [9, 100], [9, 15], [34, 100], [34, 48], [70, 100]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[7, 2], [15, 19], [38, 50]];\nmy $arg11 = 5;\nmy $arg12 = 60;\nmy $x1 = extract_missing($arg10, $arg11, $arg12);\nmy $v1 = [[5, 7], [2, 60], [2, 15], [19, 60], [19, 38], [50, 60]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[7, 2], [15, 19], [38, 50]];\nmy $arg21 = 1;\nmy $arg22 = 52;\nmy $x2 = extract_missing($arg20, $arg21, $arg22);\nmy $v2 = [[1, 7], [2, 52], [2, 15], [19, 52], [19, 38], [50, 52]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/111", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n#\n# >>> common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n# [18, 12]\n# >>> common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])\n# [5, 23]\n# >>> common_in_nested_lists([[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]])\n# [4]\nsub common_in_nested_lists\n{\n  my ($nestedlist) = @_;\n", "entry_point": "common_in_nested_lists", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]];\nmy $x0 = common_in_nested_lists($arg00);\nmy $v0 = [18, 12];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]];\nmy $x1 = common_in_nested_lists($arg10);\nmy $v1 = [5, 23];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]];\nmy $x2 = common_in_nested_lists($arg20);\nmy $v2 = [4];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/112", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the perimeter of a cylinder.\n#\n# >>> perimeter(2, 4)\n# 12\n# >>> perimeter(1, 2)\n# 6\n# >>> perimeter(3, 1)\n# 8\nsub perimeter\n{\n  my ($diameter, $height) = @_;\n", "entry_point": "perimeter", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $arg01 = 4;\nmy $x0 = perimeter($arg00, $arg01);\nmy $v0 = 12;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 2;\nmy $x1 = perimeter($arg10, $arg11);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $arg21 = 1;\nmy $x2 = perimeter($arg20, $arg21);\nmy $v2 = 8;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the perimeter of a cylinder.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/113", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if a string represents an integer or not.\n#\n# >>> check_integer(\"python\")\n# 0\n# >>> check_integer(\"1\")\n# 1\n# >>> check_integer(\"12345\")\n# 1\nsub check_integer\n{\n  my ($text) = @_;\n", "entry_point": "check_integer", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python\";\nmy $x0 = check_integer($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"1\";\nmy $x1 = check_integer($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"12345\";\nmy $x2 = check_integer($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if a string represents an integer or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/114", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to assign frequency to each tuple in the given tuple list.\n#\n# >>> assign_freq([[6, 5, 8], [2, 7], [6, 5, 8], [6, 5, 8], [9], [2, 7]])\n# \"[(6, 5, 8, 3), (2, 7, 2), (9, 1)]\"\n# >>> assign_freq([[4, 2, 4], [7, 1], [4, 8], [4, 2, 4], [9, 2], [7, 1]])\n# \"[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]\"\n# >>> assign_freq([[11, 13, 10], [17, 21], [4, 2, 3], [17, 21], [9, 2], [4, 2, 3]])\n# \"[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]\"\nsub assign_freq\n{\n  my ($test_list) = @_;\n", "entry_point": "assign_freq", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[6, 5, 8], [2, 7], [6, 5, 8], [6, 5, 8], [9], [2, 7]];\nmy $x0 = assign_freq($arg00);\nmy $v0 = \"[(6, 5, 8, 3), (2, 7, 2), (9, 1)]\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[4, 2, 4], [7, 1], [4, 8], [4, 2, 4], [9, 2], [7, 1]];\nmy $x1 = assign_freq($arg10);\nmy $v1 = \"[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[11, 13, 10], [17, 21], [4, 2, 3], [17, 21], [9, 2], [4, 2, 3]];\nmy $x2 = assign_freq($arg20);\nmy $v2 = \"[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to assign frequency to each tuple in the given tuple list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/115", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether all dictionaries in a list are empty or not.\n#\n# >>> empty_dit([{}, {}, {}])\n# 1\n# >>> empty_dit([{1 => 1, 2 => 1}, {}, {}])\n# 0\n# >>> empty_dit({})\n# 1\nsub empty_dit\n{\n  my ($list1) = @_;\n", "entry_point": "empty_dit", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [{}, {}, {}];\nmy $x0 = empty_dit($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [{1 => 1, 2 => 1}, {}, {}];\nmy $x1 = empty_dit($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {};\nmy $x2 = empty_dit($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether all dictionaries in a list are empty or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/116", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert a given tuple of positive integers into an integer.\n#\n# >>> tuple_to_int([1, 2, 3])\n# 123\n# >>> tuple_to_int([4, 5, 6])\n# 456\n# >>> tuple_to_int([5, 6, 7])\n# 567\nsub tuple_to_int\n{\n  my ($nums) = @_;\n", "entry_point": "tuple_to_int", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $x0 = tuple_to_int($arg00);\nmy $v0 = 123;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 5, 6];\nmy $x1 = tuple_to_int($arg10);\nmy $v1 = 456;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [5, 6, 7];\nmy $x2 = tuple_to_int($arg20);\nmy $v2 = 567;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert a given tuple of positive integers into an integer.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/117", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert all possible convertible elements in the list to float.\n#\n# >>> list_to_float([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]])\n# \"[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\"\n# >>> list_to_float([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]])\n# \"[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\"\n# >>> list_to_float([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]])\n# \"[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\"\nsub list_to_float\n{\n  my ($test_list) = @_;\n", "entry_point": "list_to_float", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]];\nmy $x0 = list_to_float($arg00);\nmy $v0 = \"[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]];\nmy $x1 = list_to_float($arg10);\nmy $v1 = \"[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]];\nmy $x2 = list_to_float($arg20);\nmy $v2 = \"[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert all possible convertible elements in the list to float.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/118", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n#\n# >>> string_to_list(\"python programming\")\n# [\"python\", \"programming\"]\n# >>> string_to_list(\"lists tuples strings\")\n# [\"lists\", \"tuples\", \"strings\"]\n# >>> string_to_list(\"write a program\")\n# [\"write\", \"a\", \"program\"]\nsub string_to_list\n{\n  my ($string) = @_;\n", "entry_point": "string_to_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python programming\";\nmy $x0 = string_to_list($arg00);\nmy $v0 = [\"python\", \"programming\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"lists tuples strings\";\nmy $x1 = string_to_list($arg10);\nmy $v1 = [\"lists\", \"tuples\", \"strings\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"write a program\";\nmy $x2 = string_to_list($arg20);\nmy $v2 = [\"write\", \"a\", \"program\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/119", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the element that appears only once in a sorted array.\n#\n# >>> search([1, 1, 2, 2, 3], 5)\n# 3\n# >>> search([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8], 11)\n# 8\n# >>> search([1, 2, 2, 3, 3, 4, 4], 7)\n# 1\nsub search\n{\n  my ($arr, $n) = @_;\n", "entry_point": "search", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 1, 2, 2, 3];\nmy $arg01 = 5;\nmy $x0 = search($arg00, $arg01);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8];\nmy $arg11 = 11;\nmy $x1 = search($arg10, $arg11);\nmy $v1 = 8;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 2, 3, 3, 4, 4];\nmy $arg21 = 7;\nmy $x2 = search($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the element that appears only once in a sorted array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/120", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the maximum product from the pairs of tuples within a given list.\n#\n# >>> max_product_tuple([[2, 7], [2, 6], [1, 8], [4, 9]])\n# 36\n# >>> max_product_tuple([[10, 20], [15, 2], [5, 10]])\n# 200\n# >>> max_product_tuple([[11, 44], [10, 15], [20, 5], [12, 9]])\n# 484\nsub max_product_tuple\n{\n  my ($list1) = @_;\n", "entry_point": "max_product_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[2, 7], [2, 6], [1, 8], [4, 9]];\nmy $x0 = max_product_tuple($arg00);\nmy $v0 = 36;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[10, 20], [15, 2], [5, 10]];\nmy $x1 = max_product_tuple($arg10);\nmy $v1 = 200;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[11, 44], [10, 15], [20, 5], [12, 9]];\nmy $x2 = max_product_tuple($arg20);\nmy $v2 = 484;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the maximum product from the pairs of tuples within a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/121", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the triplet with sum of the given array\n#\n# >>> check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0)\n# 1\n# >>> check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0)\n# 0\n# >>> check_triplet([10, 4, 2, 3, 5], 5, 15, 0)\n# 1\nsub check_triplet\n{\n  my ($a, $n, $sum, $count) = @_;\n", "entry_point": "check_triplet", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 7, 4, 0, 9, 5, 1, 3];\nmy $arg01 = 8;\nmy $arg02 = 6;\nmy $arg03 = 0;\nmy $x0 = check_triplet($arg00, $arg01, $arg02, $arg03);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 4, 5, 6, 7, 8, 5, 9];\nmy $arg11 = 8;\nmy $arg12 = 6;\nmy $arg13 = 0;\nmy $x1 = check_triplet($arg10, $arg11, $arg12, $arg13);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [10, 4, 2, 3, 5];\nmy $arg21 = 5;\nmy $arg22 = 15;\nmy $arg23 = 0;\nmy $x2 = check_triplet($arg20, $arg21, $arg22, $arg23);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the triplet with sum of the given array", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/122", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find n\u2019th smart number.\n#\n# >>> smartnumber(1)\n# 30\n# >>> smartnumber(50)\n# 273\n# >>> smartnumber(1000)\n# 2664\nsub smartnumber\n{\n  my ($n) = @_;\n", "entry_point": "smartnumber", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $x0 = smartnumber($arg00);\nmy $v0 = 30;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 50;\nmy $x1 = smartnumber($arg10);\nmy $v1 = 273;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1000;\nmy $x2 = smartnumber($arg20);\nmy $v2 = 2664;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find n\u2019th smart number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/123", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sum all amicable numbers from 1 to a specified number.\n#\n# >>> amicable_numbers_sum(999)\n# 504\n# >>> amicable_numbers_sum(9999)\n# 31626\n# >>> amicable_numbers_sum(99)\n# 0\nsub amicable_numbers_sum\n{\n  my ($limit) = @_;\n", "entry_point": "amicable_numbers_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 999;\nmy $x0 = amicable_numbers_sum($arg00);\nmy $v0 = 504;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 9999;\nmy $x1 = amicable_numbers_sum($arg10);\nmy $v1 = 31626;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 99;\nmy $x2 = amicable_numbers_sum($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sum all amicable numbers from 1 to a specified number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/125", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n#\n# >>> find_length(\"11000010001\", 11)\n# 6\n# >>> find_length(\"10111\", 5)\n# 1\n# >>> find_length(\"11011101100101\", 14)\n# 2\nsub find_length\n{\n  my ($string, $n) = @_;\n", "entry_point": "find_length", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"11000010001\";\nmy $arg01 = 11;\nmy $x0 = find_length($arg00, $arg01);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"10111\";\nmy $arg11 = 5;\nmy $x1 = find_length($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"11011101100101\";\nmy $arg21 = 14;\nmy $x2 = find_length($arg20, $arg21);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/126", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of common divisors of two given numbers.\n#\n# >>> sum(10, 15)\n# 6\n# >>> sum(100, 150)\n# 93\n# >>> sum(4, 6)\n# 3\nsub sum\n{\n  my ($a, $b) = @_;\n", "entry_point": "sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 15;\nmy $x0 = sum($arg00, $arg01);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 100;\nmy $arg11 = 150;\nmy $x1 = sum($arg10, $arg11);\nmy $v1 = 93;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $arg21 = 6;\nmy $x2 = sum($arg20, $arg21);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of common divisors of two given numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/127", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to multiply two integers without using the * operator in Perl.\n#\n# >>> multiply_int(10, 20)\n# 200\n# >>> multiply_int(5, 10)\n# 50\n# >>> multiply_int(4, 8)\n# 32\nsub multiply_int\n{\n  my ($x, $y) = @_;\n", "entry_point": "multiply_int", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 20;\nmy $x0 = multiply_int($arg00, $arg01);\nmy $v0 = 200;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $arg11 = 10;\nmy $x1 = multiply_int($arg10, $arg11);\nmy $v1 = 50;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $arg21 = 8;\nmy $x2 = multiply_int($arg20, $arg21);\nmy $v2 = 32;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to multiply two integers without using the * operator in Perl.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/128", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to shortlist words that are longer than n from a given list of words.\n#\n# >>> long_words(3, \"python is a programming language\")\n# [\"python\", \"programming\", \"language\"]\n# >>> long_words(2, \"writing a program\")\n# [\"writing\", \"program\"]\n# >>> long_words(5, \"sorting list\")\n# [\"sorting\"]\nsub long_words\n{\n  my ($n, $str) = @_;\n", "entry_point": "long_words", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = \"python is a programming language\";\nmy $x0 = long_words($arg00, $arg01);\nmy $v0 = [\"python\", \"programming\", \"language\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $arg11 = \"writing a program\";\nmy $x1 = long_words($arg10, $arg11);\nmy $v1 = [\"writing\", \"program\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $arg21 = \"sorting list\";\nmy $x2 = long_words($arg20, $arg21);\nmy $v2 = [\"sorting\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to shortlist words that are longer than n from a given list of words.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/129", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate magic square.\n#\n# >>> magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])\n# 1\n# >>> magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])\n# 1\n# >>> magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])\n# 0\nsub magic_square_test\n{\n  my ($my_matrix) = @_;\n", "entry_point": "magic_square_test", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]];\nmy $x0 = magic_square_test($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[2, 7, 6], [9, 5, 1], [4, 3, 8]];\nmy $x1 = magic_square_test($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[2, 7, 6], [9, 5, 1], [4, 3, 7]];\nmy $x2 = magic_square_test($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate magic square.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/130", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the item with maximum frequency in a given list.\n#\n# >>> max_occurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2])\n# [2, 5]\n# >>> max_occurrences([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18])\n# [8, 2]\n# >>> max_occurrences([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10])\n# [20, 3]\nsub max_occurrences\n{\n  my ($nums) = @_;\n", "entry_point": "max_occurrences", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2];\nmy $x0 = max_occurrences($arg00);\nmy $v0 = [2, 5];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18];\nmy $x1 = max_occurrences($arg10);\nmy $v1 = [8, 2];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10];\nmy $x2 = max_occurrences($arg20);\nmy $v2 = [20, 3];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the item with maximum frequency in a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/131", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to reverse only the vowels of a given string.\n#\n# >>> reverse_vowels(\"Python\")\n# \"Python\"\n# >>> reverse_vowels(\"USA\")\n# \"ASU\"\n# >>> reverse_vowels(\"ab\")\n# \"ab\"\nsub reverse_vowels\n{\n  my ($str1) = @_;\n", "entry_point": "reverse_vowels", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Python\";\nmy $x0 = reverse_vowels($arg00);\nmy $v0 = \"Python\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"USA\";\nmy $x1 = reverse_vowels($arg10);\nmy $v1 = \"ASU\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"ab\";\nmy $x2 = reverse_vowels($arg20);\nmy $v2 = \"ab\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to reverse only the vowels of a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/132", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert tuple to a string.\n#\n# >>> tup_string([\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"])\n# \"exercises\"\n# >>> tup_string([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"])\n# \"python\"\n# >>> tup_string([\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"])\n# \"program\"\nsub tup_string\n{\n  my ($tup1) = @_;\n", "entry_point": "tup_string", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"];\nmy $x0 = tup_string($arg00);\nmy $v0 = \"exercises\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"];\nmy $x1 = tup_string($arg10);\nmy $v1 = \"python\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"];\nmy $x2 = tup_string($arg20);\nmy $v2 = \"program\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert tuple to a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/133", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n#\n# >>> sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n# -32\n# >>> sum_negativenum([10, 15, -14, 13, -18, 12, -20])\n# -52\n# >>> sum_negativenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190])\n# -894\nsub sum_negativenum\n{\n  my ($nums) = @_;\n", "entry_point": "sum_negativenum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 4, -6, -9, 11, -12, 14, -5, 17];\nmy $x0 = sum_negativenum($arg00);\nmy $v0 = -32;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [10, 15, -14, 13, -18, 12, -20];\nmy $x1 = sum_negativenum($arg10);\nmy $v1 = -52;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [19, -65, 57, 39, 152, -639, 121, 44, 90, -190];\nmy $x2 = sum_negativenum($arg20);\nmy $v2 = -894;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/134", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the last element of given array is even or odd after performing an operation p times.\n#\n# >>> check_last([5, 7, 10], 3, 1)\n# \"ODD\"\n# >>> check_last([2, 3], 2, 3)\n# \"EVEN\"\n# >>> check_last([1, 2, 3], 3, 1)\n# \"ODD\"\nsub check_last\n{\n  my ($arr, $n, $p) = @_;\n", "entry_point": "check_last", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 7, 10];\nmy $arg01 = 3;\nmy $arg02 = 1;\nmy $x0 = check_last($arg00, $arg01, $arg02);\nmy $v0 = \"ODD\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 3];\nmy $arg11 = 2;\nmy $arg12 = 3;\nmy $x1 = check_last($arg10, $arg11, $arg12);\nmy $v1 = \"EVEN\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3];\nmy $arg21 = 3;\nmy $arg22 = 1;\nmy $x2 = check_last($arg20, $arg21, $arg22);\nmy $v2 = \"ODD\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the last element of given array is even or odd after performing an operation p times.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/135", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the nth hexagonal number.\n#\n# >>> hexagonal_num(10)\n# 190\n# >>> hexagonal_num(5)\n# 45\n# >>> hexagonal_num(7)\n# 91\nsub hexagonal_num\n{\n  my ($n) = @_;\n", "entry_point": "hexagonal_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = hexagonal_num($arg00);\nmy $v0 = 190;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $x1 = hexagonal_num($arg10);\nmy $v1 = 45;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 7;\nmy $x2 = hexagonal_num($arg20);\nmy $v2 = 91;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the nth hexagonal number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/136", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate electricity bill.\n#\n# >>> cal_electbill(75)\n# 246.25\n# >>> cal_electbill(265)\n# 1442.75\n# >>> cal_electbill(100)\n# 327.5\nsub cal_electbill\n{\n  my ($units) = @_;\n", "entry_point": "cal_electbill", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 75;\nmy $x0 = cal_electbill($arg00);\nmy $v0 = 246.25;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 265;\nmy $x1 = cal_electbill($arg10);\nmy $v1 = 1442.75;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 100;\nmy $x2 = cal_electbill($arg20);\nmy $v2 = 327.5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate electricity bill.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/137", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the ration of zeroes in an array of integers.\n#\n# >>> zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n# 0.15\n# >>> zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n# 0.0\n# >>> zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])\n# 0.0\nsub zero_count\n{\n  my ($nums) = @_;\n", "entry_point": "zero_count", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8];\nmy $x0 = zero_count($arg00);\nmy $v0 = 0.15;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8];\nmy $x1 = zero_count($arg10);\nmy $v1 = 0.0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 4, -6, -9, 11, -12, 14, -5, 17];\nmy $x2 = zero_count($arg20);\nmy $v2 = 0.0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the ration of zeroes in an array of integers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/138", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n#\n# >>> is_sum_of_powers_of_two(10)\n# 1\n# >>> is_sum_of_powers_of_two(7)\n# 0\n# >>> is_sum_of_powers_of_two(14)\n# 1\nsub is_sum_of_powers_of_two\n{\n  my ($n) = @_;\n", "entry_point": "is_sum_of_powers_of_two", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = is_sum_of_powers_of_two($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 7;\nmy $x1 = is_sum_of_powers_of_two($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 14;\nmy $x2 = is_sum_of_powers_of_two($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/139", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the circumference of a circle.\n#\n# >>> circle_circumference(10)\n# 62.830000000000005\n# >>> circle_circumference(5)\n# 31.415000000000003\n# >>> circle_circumference(4)\n# 25.132\nsub circle_circumference\n{\n  my ($r) = @_;\n", "entry_point": "circle_circumference", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = circle_circumference($arg00);\nmy $v0 = 62.830000000000005;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $x1 = circle_circumference($arg10);\nmy $v1 = 31.415000000000003;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $x2 = circle_circumference($arg20);\nmy $v2 = 25.132;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the circumference of a circle.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/140", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract elements that occur singly in the given tuple list.\n#\n# >>> extract_singly([[3, 4, 5], [4, 5, 7], [1, 4]])\n# [3, 4, 5, 7, 1]\n# >>> extract_singly([[1, 2, 3], [4, 2, 3], [7, 8]])\n# [1, 2, 3, 4, 7, 8]\n# >>> extract_singly([[7, 8, 9], [10, 11, 12], [10, 11]])\n# [7, 8, 9, 10, 11, 12]\nsub extract_singly\n{\n  my ($test_list) = @_;\n", "entry_point": "extract_singly", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[3, 4, 5], [4, 5, 7], [1, 4]];\nmy $x0 = extract_singly($arg00);\nmy $v0 = [3, 4, 5, 7, 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2, 3], [4, 2, 3], [7, 8]];\nmy $x1 = extract_singly($arg10);\nmy $v1 = [1, 2, 3, 4, 7, 8];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[7, 8, 9], [10, 11, 12], [10, 11]];\nmy $x2 = extract_singly($arg20);\nmy $v2 = [7, 8, 9, 10, 11, 12];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract elements that occur singly in the given tuple list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/141", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort a list of elements using pancake sort.\n#\n# >>> pancake_sort([15, 79, 25, 38, 69])\n# [15, 25, 38, 69, 79]\n# >>> pancake_sort([98, 12, 54, 36, 85])\n# [12, 36, 54, 85, 98]\n# >>> pancake_sort([41, 42, 32, 12, 23])\n# [12, 23, 32, 41, 42]\nsub pancake_sort\n{\n  my ($nums) = @_;\n", "entry_point": "pancake_sort", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [15, 79, 25, 38, 69];\nmy $x0 = pancake_sort($arg00);\nmy $v0 = [15, 25, 38, 69, 79];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [98, 12, 54, 36, 85];\nmy $x1 = pancake_sort($arg10);\nmy $v1 = [12, 36, 54, 85, 98];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [41, 42, 32, 12, 23];\nmy $x2 = pancake_sort($arg20);\nmy $v2 = [12, 23, 32, 41, 42];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort a list of elements using pancake sort.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/142", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count the same pair in three given lists.\n#\n# >>> count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9])\n# 3\n# >>> count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])\n# 4\n# >>> count_samepair([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])\n# 5\nsub count_samepair\n{\n  my ($list1, $list2, $list3) = @_;\n", "entry_point": "count_samepair", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6, 7, 8];\nmy $arg01 = [2, 2, 3, 1, 2, 6, 7, 9];\nmy $arg02 = [2, 1, 3, 1, 2, 6, 7, 9];\nmy $x0 = count_samepair($arg00, $arg01, $arg02);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5, 6, 7, 8];\nmy $arg11 = [2, 2, 3, 1, 2, 6, 7, 8];\nmy $arg12 = [2, 1, 3, 1, 2, 6, 7, 8];\nmy $x1 = count_samepair($arg10, $arg11, $arg12);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 2, 6, 7, 8];\nmy $arg21 = [2, 2, 3, 1, 2, 6, 7, 8];\nmy $arg22 = [2, 1, 3, 1, 2, 6, 7, 8];\nmy $x2 = count_samepair($arg20, $arg21, $arg22);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count the same pair in three given lists.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/143", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find number of lists present in the given tuple.\n#\n# >>> find_lists([[1, 2, 3, 4], [5, 6, 7, 8]])\n# 2\n# >>> find_lists([9, 8, 7, 6, 5, 4, 3, 2, 1])\n# 1\nsub find_lists\n{\n  my ($input) = @_;\n", "entry_point": "find_lists", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 2, 3, 4], [5, 6, 7, 8]];\nmy $x0 = find_lists($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [9, 8, 7, 6, 5, 4, 3, 2, 1];\nmy $x1 = find_lists($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\n", "description": "Write a function to find number of lists present in the given tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/144", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of absolute differences in all pairs of the given array.\n#\n# >>> sum_pairs([1, 8, 9, 15, 16], 5)\n# 74\n# >>> sum_pairs([1, 2, 3, 4], 4)\n# 10\n# >>> sum_pairs([1, 2, 3, 4, 5, 7, 9, 11, 14], 9)\n# 188\nsub sum_pairs\n{\n  my ($arr, $n) = @_;\n", "entry_point": "sum_pairs", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 8, 9, 15, 16];\nmy $arg01 = 5;\nmy $x0 = sum_pairs($arg00, $arg01);\nmy $v0 = 74;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4];\nmy $arg11 = 4;\nmy $x1 = sum_pairs($arg10, $arg11);\nmy $v1 = 10;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 5, 7, 9, 11, 14];\nmy $arg21 = 9;\nmy $x2 = sum_pairs($arg20, $arg21);\nmy $v2 = 188;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of absolute differences in all pairs of the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/145", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the maximum difference between any two elements in a given array.\n#\n# >>> max_abs_diff([2, 1, 5, 3], 4)\n# 4\n# >>> max_abs_diff([9, 3, 2, 5, 1], 5)\n# 8\n# >>> max_abs_diff([3, 2, 1], 3)\n# 2\nsub max_abs_diff\n{\n  my ($arr, $n) = @_;\n", "entry_point": "max_abs_diff", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 1, 5, 3];\nmy $arg01 = 4;\nmy $x0 = max_abs_diff($arg00, $arg01);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [9, 3, 2, 5, 1];\nmy $arg11 = 5;\nmy $x1 = max_abs_diff($arg10, $arg11);\nmy $v1 = 8;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 2, 1];\nmy $arg21 = 3;\nmy $x2 = max_abs_diff($arg20, $arg21);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the maximum difference between any two elements in a given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/146", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the ascii value of total characters in a string.\n#\n# >>> ascii_value_string(\"python\")\n# 112\n# >>> ascii_value_string(\"Program\")\n# 80\n# >>> ascii_value_string(\"Language\")\n# 76\nsub ascii_value_string\n{\n  my ($str1) = @_;\n", "entry_point": "ascii_value_string", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python\";\nmy $x0 = ascii_value_string($arg00);\nmy $v0 = 112;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Program\";\nmy $x1 = ascii_value_string($arg10);\nmy $v1 = 80;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Language\";\nmy $x2 = ascii_value_string($arg20);\nmy $v2 = 76;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the ascii value of total characters in a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/147", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the maximum total path sum in the given triangle.\n#\n# >>> max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2)\n# 14\n# >>> max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2)\n# 24\n# >>> max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2)\n# 53\nsub max_path_sum\n{\n  my ($tri, $m, $n) = @_;\n", "entry_point": "max_path_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 0, 0], [4, 8, 0], [1, 5, 3]];\nmy $arg01 = 2;\nmy $arg02 = 2;\nmy $x0 = max_path_sum($arg00, $arg01, $arg02);\nmy $v0 = 14;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[13, 0, 0], [7, 4, 0], [2, 4, 6]];\nmy $arg11 = 2;\nmy $arg12 = 2;\nmy $x1 = max_path_sum($arg10, $arg11, $arg12);\nmy $v1 = 24;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[2, 0, 0], [11, 18, 0], [21, 25, 33]];\nmy $arg21 = 2;\nmy $arg22 = 2;\nmy $x2 = max_path_sum($arg20, $arg21, $arg22);\nmy $v2 = 53;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the maximum total path sum in the given triangle.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/148", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to divide a number into two parts such that the sum of digits is maximum.\n#\n# >>> sum_digits_twoparts(35)\n# 17\n# >>> sum_digits_twoparts(7)\n# 7\n# >>> sum_digits_twoparts(100)\n# 19\nsub sum_digits_twoparts\n{\n  my ($n) = @_;\n", "entry_point": "sum_digits_twoparts", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 35;\nmy $x0 = sum_digits_twoparts($arg00);\nmy $v0 = 17;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 7;\nmy $x1 = sum_digits_twoparts($arg10);\nmy $v1 = 7;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 100;\nmy $x2 = sum_digits_twoparts($arg20);\nmy $v2 = 19;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to divide a number into two parts such that the sum of digits is maximum.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/149", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n#\n# >>> longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7)\n# 6\n# >>> longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7)\n# 3\n# >>> longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8)\n# 7\nsub longest_subseq_with_diff_one\n{\n  my ($arr, $n) = @_;\n", "entry_point": "longest_subseq_with_diff_one", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 3, 2];\nmy $arg01 = 7;\nmy $x0 = longest_subseq_with_diff_one($arg00, $arg01);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [10, 9, 4, 5, 4, 8, 6];\nmy $arg11 = 7;\nmy $x1 = longest_subseq_with_diff_one($arg10, $arg11);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 2, 3, 7, 2, 1];\nmy $arg21 = 8;\nmy $x2 = longest_subseq_with_diff_one($arg20, $arg21);\nmy $v2 = 7;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/150", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find whether the given number is present in the infinite sequence or not.\n#\n# >>> does_contain_b(1, 7, 3)\n# 1\n# >>> does_contain_b(1, -3, 5)\n# 0\n# >>> does_contain_b(3, 2, 5)\n# 0\nsub does_contain_b\n{\n  my ($a, $b, $c) = @_;\n", "entry_point": "does_contain_b", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 7;\nmy $arg02 = 3;\nmy $x0 = does_contain_b($arg00, $arg01, $arg02);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = -3;\nmy $arg12 = 5;\nmy $x1 = does_contain_b($arg10, $arg11, $arg12);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $arg21 = 2;\nmy $arg22 = 5;\nmy $x2 = does_contain_b($arg20, $arg21, $arg22);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find whether the given number is present in the infinite sequence or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/151", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the given number is co-prime or not.\n#\n# >>> is_coprime(17, 13)\n# 1\n# >>> is_coprime(15, 21)\n# 0\n# >>> is_coprime(25, 45)\n# 0\nsub is_coprime\n{\n  my ($x, $y) = @_;\n", "entry_point": "is_coprime", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 17;\nmy $arg01 = 13;\nmy $x0 = is_coprime($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 15;\nmy $arg11 = 21;\nmy $x1 = is_coprime($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 25;\nmy $arg21 = 45;\nmy $x2 = is_coprime($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the given number is co-prime or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/152", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort the given array by using merge sort.\n#\n# >>> merge_sort([3, 4, 2, 6, 5, 7, 1, 9])\n# [1, 2, 3, 4, 5, 6, 7, 9]\n# >>> merge_sort([7, 25, 45, 78, 11, 33, 19])\n# [7, 11, 19, 25, 33, 45, 78]\n# >>> merge_sort([3, 1, 4, 9, 8])\n# [1, 3, 4, 8, 9]\nsub merge_sort\n{\n  my ($x) = @_;\n", "entry_point": "merge_sort", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 4, 2, 6, 5, 7, 1, 9];\nmy $x0 = merge_sort($arg00);\nmy $v0 = [1, 2, 3, 4, 5, 6, 7, 9];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [7, 25, 45, 78, 11, 33, 19];\nmy $x1 = merge_sort($arg10);\nmy $v1 = [7, 11, 19, 25, 33, 45, 78];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 1, 4, 9, 8];\nmy $x2 = merge_sort($arg20);\nmy $v2 = [1, 3, 4, 8, 9];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort the given array by using merge sort.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/153", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the vertex of a parabola.\n#\n# >>> parabola_vertex(5, 3, 2)\n# [-0.3, 1.55]\n# >>> parabola_vertex(9, 8, 4)\n# [-0.4444444444444444, 2.2222222222222223]\n# >>> parabola_vertex(2, 4, 6)\n# [-1.0, 4.0]\nsub parabola_vertex\n{\n  my ($a, $b, $c) = @_;\n", "entry_point": "parabola_vertex", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $arg01 = 3;\nmy $arg02 = 2;\nmy $x0 = parabola_vertex($arg00, $arg01, $arg02);\nmy $v0 = [-0.3, 1.55];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 9;\nmy $arg11 = 8;\nmy $arg12 = 4;\nmy $x1 = parabola_vertex($arg10, $arg11, $arg12);\nmy $v1 = [-0.4444444444444444, 2.2222222222222223];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $arg21 = 4;\nmy $arg22 = 6;\nmy $x2 = parabola_vertex($arg20, $arg21, $arg22);\nmy $v2 = [-1.0, 4.0];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the vertex of a parabola.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/154", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract every specified element from a given two dimensional list.\n#\n# >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)\n# [1, 4, 7]\n# >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)\n# [3, 6, 9]\n# >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3)\n# [2, 2, 5]\nsub specified_element\n{\n  my ($nums, $n) = @_;\n", "entry_point": "specified_element", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nmy $arg01 = 0;\nmy $x0 = specified_element($arg00, $arg01);\nmy $v0 = [1, 4, 7];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nmy $arg11 = 2;\nmy $x1 = specified_element($arg10, $arg11);\nmy $v1 = [3, 6, 9];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nmy $arg21 = 3;\nmy $x2 = specified_element($arg20, $arg21);\nmy $v2 = [2, 2, 5];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract every specified element from a given two dimensional list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/155", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to toggle all even bits of a given number.\n#\n# >>> even_bit_toggle_number(10)\n# 0\n# >>> even_bit_toggle_number(20)\n# 30\n# >>> even_bit_toggle_number(30)\n# 20\nsub even_bit_toggle_number\n{\n  my ($n) = @_;\n", "entry_point": "even_bit_toggle_number", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = even_bit_toggle_number($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 20;\nmy $x1 = even_bit_toggle_number($arg10);\nmy $v1 = 30;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 30;\nmy $x2 = even_bit_toggle_number($arg20);\nmy $v2 = 20;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to toggle all even bits of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/156", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert a tuple of string values to a tuple of integer values.\n#\n# >>> tuple_int_str([[\"333\", \"33\"], [\"1416\", \"55\"]])\n# [[333, 33], [1416, 55]]\n# >>> tuple_int_str([[\"999\", \"99\"], [\"1000\", \"500\"]])\n# [[999, 99], [1000, 500]]\n# >>> tuple_int_str([[\"666\", \"66\"], [\"1500\", \"555\"]])\n# [[666, 66], [1500, 555]]\nsub tuple_int_str\n{\n  my ($tuple_str) = @_;\n", "entry_point": "tuple_int_str", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"333\", \"33\"], [\"1416\", \"55\"]];\nmy $x0 = tuple_int_str($arg00);\nmy $v0 = [[333, 33], [1416, 55]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"999\", \"99\"], [\"1000\", \"500\"]];\nmy $x1 = tuple_int_str($arg10);\nmy $v1 = [[999, 99], [1000, 500]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"666\", \"66\"], [\"1500\", \"555\"]];\nmy $x2 = tuple_int_str($arg20);\nmy $v2 = [[666, 66], [1500, 555]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert a tuple of string values to a tuple of integer values.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/157", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to reflect the run-length encoding from a list.\n#\n# >>> encode_list([1, 1, 2, 3, 4, 4.3, 5, 1])\n# [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n# >>> encode_list(\"automatically\")\n# [[1, \"a\"], [1, \"u\"], [1, \"t\"], [1, \"o\"], [1, \"m\"], [1, \"a\"], [1, \"t\"], [1, \"i\"], [1, \"c\"], [1, \"a\"], [2, \"l\"], [1, \"y\"]]\n# >>> encode_list(\"python\")\n# [[1, \"p\"], [1, \"y\"], [1, \"t\"], [1, \"h\"], [1, \"o\"], [1, \"n\"]]\nsub encode_list\n{\n  my ($list1) = @_;\n", "entry_point": "encode_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 1, 2, 3, 4, 4.3, 5, 1];\nmy $x0 = encode_list($arg00);\nmy $v0 = [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"automatically\";\nmy $x1 = encode_list($arg10);\nmy $v1 = [[1, \"a\"], [1, \"u\"], [1, \"t\"], [1, \"o\"], [1, \"m\"], [1, \"a\"], [1, \"t\"], [1, \"i\"], [1, \"c\"], [1, \"a\"], [2, \"l\"], [1, \"y\"]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"python\";\nmy $x2 = encode_list($arg20);\nmy $v2 = [[1, \"p\"], [1, \"y\"], [1, \"t\"], [1, \"h\"], [1, \"o\"], [1, \"n\"]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to reflect the run-length encoding from a list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/158", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find k number of operations required to make all elements equal.\n#\n# >>> min_ops([2, 2, 2, 2], 4, 3)\n# 0\n# >>> min_ops([4, 2, 6, 8], 4, 3)\n# -1\n# >>> min_ops([21, 33, 9, 45, 63], 5, 6)\n# 24\nsub min_ops\n{\n  my ($arr, $n, $k) = @_;\n", "entry_point": "min_ops", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 2, 2, 2];\nmy $arg01 = 4;\nmy $arg02 = 3;\nmy $x0 = min_ops($arg00, $arg01, $arg02);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 2, 6, 8];\nmy $arg11 = 4;\nmy $arg12 = 3;\nmy $x1 = min_ops($arg10, $arg11, $arg12);\nmy $v1 = -1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [21, 33, 9, 45, 63];\nmy $arg21 = 5;\nmy $arg22 = 6;\nmy $x2 = min_ops($arg20, $arg21, $arg22);\nmy $v2 = 24;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find k number of operations required to make all elements equal.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/159", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to print the season for the given month and day.\n#\n# >>> month_season(\"January\", 4)\n# \"winter\"\n# >>> month_season(\"October\", 28)\n# \"autumn\"\n# >>> month_season(\"June\", 6)\n# \"spring\"\nsub month_season\n{\n  my ($month, $days) = @_;\n", "entry_point": "month_season", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"January\";\nmy $arg01 = 4;\nmy $x0 = month_season($arg00, $arg01);\nmy $v0 = \"winter\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"October\";\nmy $arg11 = 28;\nmy $x1 = month_season($arg10, $arg11);\nmy $v1 = \"autumn\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"June\";\nmy $arg21 = 6;\nmy $x2 = month_season($arg20, $arg21);\nmy $v2 = \"spring\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to print the season for the given month and day.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/160", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find x and y that satisfies ax + by = n.\n#\n# >>> solution(2, 3, 7)\n# [\"x = \", 2, \", y = \", 1]\n# >>> solution(4, 2, 7)\n# \"No solution\"\n# >>> solution(1, 13, 17)\n# [\"x = \", 4, \", y = \", 1]\nsub solution\n{\n  my ($a, $b, $n) = @_;\n", "entry_point": "solution", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $arg01 = 3;\nmy $arg02 = 7;\nmy $x0 = solution($arg00, $arg01, $arg02);\nmy $v0 = [\"x = \", 2, \", y = \", 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $arg11 = 2;\nmy $arg12 = 7;\nmy $x1 = solution($arg10, $arg11, $arg12);\nmy $v1 = \"No solution\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 13;\nmy $arg22 = 17;\nmy $x2 = solution($arg20, $arg21, $arg22);\nmy $v2 = [\"x = \", 4, \", y = \", 1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find x and y that satisfies ax + by = n.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/161", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove all elements from a given list present in another list.\n#\n# >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])\n# [1, 3, 5, 7, 9, 10]\n# >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7])\n# [2, 4, 6, 8, 9, 10]\n# >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7])\n# [1, 2, 3, 4, 6, 8, 9, 10]\nsub remove_elements\n{\n  my ($list1, $list2) = @_;\n", "entry_point": "remove_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $arg01 = [2, 4, 6, 8];\nmy $x0 = remove_elements($arg00, $arg01);\nmy $v0 = [1, 3, 5, 7, 9, 10];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $arg11 = [1, 3, 5, 7];\nmy $x1 = remove_elements($arg10, $arg11);\nmy $v1 = [2, 4, 6, 8, 9, 10];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $arg21 = [5, 7];\nmy $x2 = remove_elements($arg20, $arg21);\nmy $v2 = [1, 2, 3, 4, 6, 8, 9, 10];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove all elements from a given list present in another list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/162", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n#\n# >>> sum_series(6)\n# 12\n# >>> sum_series(10)\n# 30\n# >>> sum_series(9)\n# 25\nsub sum_series\n{\n  my ($n) = @_;\n", "entry_point": "sum_series", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 6;\nmy $x0 = sum_series($arg00);\nmy $v0 = 12;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $x1 = sum_series($arg10);\nmy $v1 = 30;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 9;\nmy $x2 = sum_series($arg20);\nmy $v2 = 25;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/163", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate the area of a regular polygon.\n#\n# >>> area_polygon(4, 20)\n# 400.00000000000006\n# >>> area_polygon(10, 15)\n# 1731.1969896610804\n# >>> area_polygon(9, 7)\n# 302.90938549487214\nsub area_polygon\n{\n  my ($s, $l) = @_;\n", "entry_point": "area_polygon", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $arg01 = 20;\nmy $x0 = area_polygon($arg00, $arg01);\nmy $v0 = 400.00000000000006;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = 15;\nmy $x1 = area_polygon($arg10, $arg11);\nmy $v1 = 1731.1969896610804;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 9;\nmy $arg21 = 7;\nmy $x2 = area_polygon($arg20, $arg21);\nmy $v2 = 302.90938549487214;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate the area of a regular polygon.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/164", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the sum of divisors are same or not.\n#\n# >>> areequivalent(36, 57)\n# 0\n# >>> areequivalent(2, 4)\n# 0\n# >>> areequivalent(23, 47)\n# 1\nsub areequivalent\n{\n  my ($num1, $num2) = @_;\n", "entry_point": "areequivalent", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 36;\nmy $arg01 = 57;\nmy $x0 = areequivalent($arg00, $arg01);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $arg11 = 4;\nmy $x1 = areequivalent($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 23;\nmy $arg21 = 47;\nmy $x2 = areequivalent($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the sum of divisors are same or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/165", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n#\n# >>> count_char_position(\"xbcefg\")\n# 2\n# >>> count_char_position(\"ABcED\")\n# 3\n# >>> count_char_position(\"AbgdeF\")\n# 5\nsub count_char_position\n{\n  my ($str1) = @_;\n", "entry_point": "count_char_position", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"xbcefg\";\nmy $x0 = count_char_position($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"ABcED\";\nmy $x1 = count_char_position($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"AbgdeF\";\nmy $x2 = count_char_position($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/166", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the pairs with xor as an even number.\n#\n# >>> find_even_pair([5, 4, 7, 2, 1], 5)\n# 4\n# >>> find_even_pair([7, 2, 8, 1, 0, 5, 11], 7)\n# 9\n# >>> find_even_pair([1, 2, 3], 3)\n# 1\nsub find_even_pair\n{\n  my ($a, $n) = @_;\n", "entry_point": "find_even_pair", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 4, 7, 2, 1];\nmy $arg01 = 5;\nmy $x0 = find_even_pair($arg00, $arg01);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [7, 2, 8, 1, 0, 5, 11];\nmy $arg11 = 7;\nmy $x1 = find_even_pair($arg10, $arg11);\nmy $v1 = 9;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3];\nmy $arg21 = 3;\nmy $x2 = find_even_pair($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the pairs with xor as an even number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/167", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find smallest power of 2 greater than or equal to n.\n#\n# >>> next_power_of_2(0)\n# 1\n# >>> next_power_of_2(5)\n# 8\n# >>> next_power_of_2(17)\n# 32\nsub next_power_of_2\n{\n  my ($n) = @_;\n", "entry_point": "next_power_of_2", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 0;\nmy $x0 = next_power_of_2($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $x1 = next_power_of_2($arg10);\nmy $v1 = 8;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 17;\nmy $x2 = next_power_of_2($arg20);\nmy $v2 = 32;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find smallest power of 2 greater than or equal to n.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/168", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the frequency of a number in a given array.\n#\n# >>> frequency([1, 2, 3], 4)\n# 0\n# >>> frequency([1, 2, 2, 3, 3, 3, 4], 3)\n# 3\n# >>> frequency([0, 1, 2, 3, 1, 2], 1)\n# 2\nsub frequency\n{\n  my ($a, $x) = @_;\n", "entry_point": "frequency", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $arg01 = 4;\nmy $x0 = frequency($arg00, $arg01);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 2, 3, 3, 3, 4];\nmy $arg11 = 3;\nmy $x1 = frequency($arg10, $arg11);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [0, 1, 2, 3, 1, 2];\nmy $arg21 = 1;\nmy $x2 = frequency($arg20, $arg21);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the frequency of a number in a given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/169", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate the nth pell number.\n#\n# >>> get_pell(4)\n# 12\n# >>> get_pell(7)\n# 169\n# >>> get_pell(8)\n# 408\nsub get_pell\n{\n  my ($n) = @_;\n", "entry_point": "get_pell", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $x0 = get_pell($arg00);\nmy $v0 = 12;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 7;\nmy $x1 = get_pell($arg10);\nmy $v1 = 169;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 8;\nmy $x2 = get_pell($arg20);\nmy $v2 = 408;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate the nth pell number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/170", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find sum of the numbers in a list between the indices of a specified range.\n#\n# >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n# 29\n# >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7)\n# 16\n# >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10)\n# 38\nsub sum_range_list\n{\n  my ($list1, $m, $n) = @_;\n", "entry_point": "sum_range_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nmy $arg01 = 8;\nmy $arg02 = 10;\nmy $x0 = sum_range_list($arg00, $arg01, $arg02);\nmy $v0 = 29;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nmy $arg11 = 5;\nmy $arg12 = 7;\nmy $x1 = sum_range_list($arg10, $arg11, $arg12);\nmy $v1 = 16;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nmy $arg21 = 7;\nmy $arg22 = 10;\nmy $x2 = sum_range_list($arg20, $arg21, $arg22);\nmy $v2 = 38;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find sum of the numbers in a list between the indices of a specified range.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/171", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the perimeter of a pentagon.\n#\n# >>> perimeter_pentagon(5)\n# 25\n# >>> perimeter_pentagon(10)\n# 50\n# >>> perimeter_pentagon(15)\n# 75\nsub perimeter_pentagon\n{\n  my ($a) = @_;\n", "entry_point": "perimeter_pentagon", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = perimeter_pentagon($arg00);\nmy $v0 = 25;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $x1 = perimeter_pentagon($arg10);\nmy $v1 = 50;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 15;\nmy $x2 = perimeter_pentagon($arg20);\nmy $v2 = 75;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the perimeter of a pentagon.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/172", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n#\n# >>> count_occurance(\"letstdlenstdporstd\")\n# 3\n# >>> count_occurance(\"truststdsolensporsd\")\n# 1\n# >>> count_occurance(\"makestdsostdworthit\")\n# 2\nsub count_occurance\n{\n  my ($s) = @_;\n", "entry_point": "count_occurance", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"letstdlenstdporstd\";\nmy $x0 = count_occurance($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"truststdsolensporsd\";\nmy $x1 = count_occurance($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"makestdsostdworthit\";\nmy $x2 = count_occurance($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/173", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove everything except alphanumeric characters from a string.\n#\n# >>> remove_splchar(\"python  @#&^%\\$*program123\")\n# \"pythonprogram123\"\n# >>> remove_splchar(\"python %^\\$@!^&*()  programming24%\\$^^()    language\")\n# \"pythonprogramming24language\"\n# >>> remove_splchar(\"python   ^%&^()(+_)(_^&67)                  program\")\n# \"python67program\"\nsub remove_splchar\n{\n  my ($text) = @_;\n", "entry_point": "remove_splchar", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python  @#&^%\\$*program123\";\nmy $x0 = remove_splchar($arg00);\nmy $v0 = \"pythonprogram123\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"python %^\\$@!^&*()  programming24%\\$^^()    language\";\nmy $x1 = remove_splchar($arg10);\nmy $v1 = \"pythonprogramming24language\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"python   ^%&^()(+_)(_^&67)                  program\";\nmy $x2 = remove_splchar($arg20);\nmy $v2 = \"python67program\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove everything except alphanumeric characters from a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/174", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to group a sequence of key-value pairs into a dictionary of lists.\n#\n# >>> group_keyvalue([[\"yellow\", 1], [\"blue\", 2], [\"yellow\", 3], [\"blue\", 4], [\"red\", 1]])\n# {\"yellow\" => [1, 3], \"blue\" => [2, 4], \"red\" => [1]}\n# >>> group_keyvalue([[\"python\", 1], [\"python\", 2], [\"python\", 3], [\"python\", 4], [\"python\", 5]])\n# {\"python\" => [1, 2, 3, 4, 5]}\n# >>> group_keyvalue([[\"yellow\", 100], [\"blue\", 200], [\"yellow\", 300], [\"blue\", 400], [\"red\", 100]])\n# {\"yellow\" => [100, 300], \"blue\" => [200, 400], \"red\" => [100]}\nsub group_keyvalue\n{\n  my ($l) = @_;\n", "entry_point": "group_keyvalue", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"yellow\", 1], [\"blue\", 2], [\"yellow\", 3], [\"blue\", 4], [\"red\", 1]];\nmy $x0 = group_keyvalue($arg00);\nmy $v0 = {\"yellow\" => [1, 3], \"blue\" => [2, 4], \"red\" => [1]};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"python\", 1], [\"python\", 2], [\"python\", 3], [\"python\", 4], [\"python\", 5]];\nmy $x1 = group_keyvalue($arg10);\nmy $v1 = {\"python\" => [1, 2, 3, 4, 5]};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"yellow\", 100], [\"blue\", 200], [\"yellow\", 300], [\"blue\", 400], [\"red\", 100]];\nmy $x2 = group_keyvalue($arg20);\nmy $v2 = {\"yellow\" => [100, 300], \"blue\" => [200, 400], \"red\" => [100]};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to group a sequence of key-value pairs into a dictionary of lists.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/175", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to verify validity of a string of parentheses.\n#\n# >>> is_valid_parenthese(\"(){}[]\")\n# 1\n# >>> is_valid_parenthese(\"()[{)}\")\n# 0\n# >>> is_valid_parenthese(\"()\")\n# 1\nsub is_valid_parenthese\n{\n  my ($str1) = @_;\n", "entry_point": "is_valid_parenthese", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"(){}[]\";\nmy $x0 = is_valid_parenthese($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"()[{)}\";\nmy $x1 = is_valid_parenthese($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"()\";\nmy $x2 = is_valid_parenthese($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to verify validity of a string of parentheses.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/176", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the perimeter of a triangle.\n#\n# >>> perimeter_triangle(10, 20, 30)\n# 60\n# >>> perimeter_triangle(3, 4, 5)\n# 12\n# >>> perimeter_triangle(25, 35, 45)\n# 105\nsub perimeter_triangle\n{\n  my ($a, $b, $c) = @_;\n", "entry_point": "perimeter_triangle", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 20;\nmy $arg02 = 30;\nmy $x0 = perimeter_triangle($arg00, $arg01, $arg02);\nmy $v0 = 60;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $arg11 = 4;\nmy $arg12 = 5;\nmy $x1 = perimeter_triangle($arg10, $arg11, $arg12);\nmy $v1 = 12;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 25;\nmy $arg21 = 35;\nmy $arg22 = 45;\nmy $x2 = perimeter_triangle($arg20, $arg21, $arg22);\nmy $v2 = 105;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the perimeter of a triangle.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/177", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find two distinct numbers such that their lcm lies within the given range.\n#\n# >>> answer(3, 8)\n# [3, 6]\n# >>> answer(2, 6)\n# [2, 4]\n# >>> answer(1, 3)\n# [1, 2]\nsub answer\n{\n  my ($l, $r) = @_;\n", "entry_point": "answer", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 8;\nmy $x0 = answer($arg00, $arg01);\nmy $v0 = [3, 6];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $arg11 = 6;\nmy $x1 = answer($arg10, $arg11);\nmy $v1 = [2, 4];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 3;\nmy $x2 = answer($arg20, $arg21);\nmy $v2 = [1, 2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find two distinct numbers such that their lcm lies within the given range.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/178", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to search some literals strings in a string.\n#\n# >>> string_literals([\"language\"], \"python language\")\n# \"Matched!\"\n# >>> string_literals([\"program\"], \"python language\")\n# \"Not Matched!\"\n# >>> string_literals([\"python\"], \"programming language\")\n# \"Not Matched!\"\nsub string_literals\n{\n  my ($patterns, $text) = @_;\n", "entry_point": "string_literals", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"language\"];\nmy $arg01 = \"python language\";\nmy $x0 = string_literals($arg00, $arg01);\nmy $v0 = \"Matched!\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"program\"];\nmy $arg11 = \"python language\";\nmy $x1 = string_literals($arg10, $arg11);\nmy $v1 = \"Not Matched!\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"python\"];\nmy $arg21 = \"programming language\";\nmy $x2 = string_literals($arg20, $arg21);\nmy $v2 = \"Not Matched!\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to search some literals strings in a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/179", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find if the given number is a keith number or not.\n#\n# >>> is_num_keith(14)\n# 1\n# >>> is_num_keith(12)\n# 0\n# >>> is_num_keith(197)\n# 1\nsub is_num_keith\n{\n  my ($x) = @_;\n", "entry_point": "is_num_keith", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 14;\nmy $x0 = is_num_keith($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 12;\nmy $x1 = is_num_keith($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 197;\nmy $x2 = is_num_keith($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find if the given number is a keith number or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/180", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate distance between two points using latitude and longitude.\n#\n# >>> distance_lat_long(23.5, 67.5, 25.5, 69.5)\n# 12179.372041317429\n# >>> distance_lat_long(10.5, 20.5, 30.5, 40.5)\n# 6069.397933300514\n# >>> distance_lat_long(10, 20, 30, 40)\n# 6783.751974994595\nsub distance_lat_long\n{\n  my ($slat, $slon, $elat, $elon) = @_;\n", "entry_point": "distance_lat_long", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 23.5;\nmy $arg01 = 67.5;\nmy $arg02 = 25.5;\nmy $arg03 = 69.5;\nmy $x0 = distance_lat_long($arg00, $arg01, $arg02, $arg03);\nmy $v0 = 12179.372041317429;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10.5;\nmy $arg11 = 20.5;\nmy $arg12 = 30.5;\nmy $arg13 = 40.5;\nmy $x1 = distance_lat_long($arg10, $arg11, $arg12, $arg13);\nmy $v1 = 6069.397933300514;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $arg21 = 20;\nmy $arg22 = 30;\nmy $arg23 = 40;\nmy $x2 = distance_lat_long($arg20, $arg21, $arg22, $arg23);\nmy $v2 = 6783.751974994595;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate distance between two points using latitude and longitude.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/181", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the longest common prefix in the given set of strings.\n#\n# >>> common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4)\n# \"ta\"\n# >>> common_prefix([\"apples\", \"ape\", \"april\"], 3)\n# \"ap\"\n# >>> common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3)\n# \"teen\"\nsub common_prefix\n{\n  my ($arr, $n) = @_;\n", "entry_point": "common_prefix", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"tablets\", \"tables\", \"taxi\", \"tamarind\"];\nmy $arg01 = 4;\nmy $x0 = common_prefix($arg00, $arg01);\nmy $v0 = \"ta\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"apples\", \"ape\", \"april\"];\nmy $arg11 = 3;\nmy $x1 = common_prefix($arg10, $arg11);\nmy $v1 = \"ap\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"teens\", \"teenager\", \"teenmar\"];\nmy $arg21 = 3;\nmy $x2 = common_prefix($arg20, $arg21);\nmy $v2 = \"teen\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the longest common prefix in the given set of strings.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/182", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find uppercase, lowercase, special character and numeric values using regex.\n#\n# >>> find_character(\"ThisIsGeeksforGeeks\")\n# [[\"T\", \"I\", \"G\", \"G\"], [\"h\", \"i\", \"s\", \"s\", \"e\", \"e\", \"k\", \"s\", \"f\", \"o\", \"r\", \"e\", \"e\", \"k\", \"s\"], [], []]\n# >>> find_character(\"Hithere2\")\n# [[\"H\"], [\"i\", \"t\", \"h\", \"e\", \"r\", \"e\"], [\"2\"], []]\n# >>> find_character(\"HeyFolks32\")\n# [[\"H\", \"F\"], [\"e\", \"y\", \"o\", \"l\", \"k\", \"s\"], [\"3\", \"2\"], []]\nsub find_character\n{\n  my ($string) = @_;\n", "entry_point": "find_character", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"ThisIsGeeksforGeeks\";\nmy $x0 = find_character($arg00);\nmy $v0 = [[\"T\", \"I\", \"G\", \"G\"], [\"h\", \"i\", \"s\", \"s\", \"e\", \"e\", \"k\", \"s\", \"f\", \"o\", \"r\", \"e\", \"e\", \"k\", \"s\"], [], []];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Hithere2\";\nmy $x1 = find_character($arg10);\nmy $v1 = [[\"H\"], [\"i\", \"t\", \"h\", \"e\", \"r\", \"e\"], [\"2\"], []];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"HeyFolks32\";\nmy $x2 = find_character($arg20);\nmy $v2 = [[\"H\", \"F\"], [\"e\", \"y\", \"o\", \"l\", \"k\", \"s\"], [\"3\", \"2\"], []];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find uppercase, lowercase, special character and numeric values using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/183", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count all the distinct pairs having a difference of k in any array.\n#\n# >>> count_pairs([1, 5, 3, 4, 2], 5, 3)\n# 2\n# >>> count_pairs([8, 12, 16, 4, 0, 20], 6, 4)\n# 5\n# >>> count_pairs([2, 4, 1, 3, 4], 5, 2)\n# 3\nsub count_pairs\n{\n  my ($arr, $n, $k) = @_;\n", "entry_point": "count_pairs", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 5, 3, 4, 2];\nmy $arg01 = 5;\nmy $arg02 = 3;\nmy $x0 = count_pairs($arg00, $arg01, $arg02);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [8, 12, 16, 4, 0, 20];\nmy $arg11 = 6;\nmy $arg12 = 4;\nmy $x1 = count_pairs($arg10, $arg11, $arg12);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 4, 1, 3, 4];\nmy $arg21 = 5;\nmy $arg22 = 2;\nmy $x2 = count_pairs($arg20, $arg21, $arg22);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count all the distinct pairs having a difference of k in any array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/184", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find all the values in a list that are greater than a specified number.\n#\n# >>> greater_specificnum([220, 330, 500], 200)\n# 1\n# >>> greater_specificnum([12, 17, 21], 20)\n# 0\n# >>> greater_specificnum([1, 2, 3, 4], 10)\n# 0\nsub greater_specificnum\n{\n  my ($list, $num) = @_;\n", "entry_point": "greater_specificnum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [220, 330, 500];\nmy $arg01 = 200;\nmy $x0 = greater_specificnum($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [12, 17, 21];\nmy $arg11 = 20;\nmy $x1 = greater_specificnum($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4];\nmy $arg21 = 10;\nmy $x2 = greater_specificnum($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find all the values in a list that are greater than a specified number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/185", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the focus of a parabola.\n#\n# >>> parabola_focus(5, 3, 2)\n# [-0.3, 1.6]\n# >>> parabola_focus(9, 8, 4)\n# [-0.4444444444444444, 2.25]\n# >>> parabola_focus(2, 4, 6)\n# [-1.0, 4.125]\nsub parabola_focus\n{\n  my ($a, $b, $c) = @_;\n", "entry_point": "parabola_focus", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $arg01 = 3;\nmy $arg02 = 2;\nmy $x0 = parabola_focus($arg00, $arg01, $arg02);\nmy $v0 = [-0.3, 1.6];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 9;\nmy $arg11 = 8;\nmy $arg12 = 4;\nmy $x1 = parabola_focus($arg10, $arg11, $arg12);\nmy $v1 = [-0.4444444444444444, 2.25];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $arg21 = 4;\nmy $arg22 = 6;\nmy $x2 = parabola_focus($arg20, $arg21, $arg22);\nmy $v2 = [-1.0, 4.125];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the focus of a parabola.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/186", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to search some literals strings in a string by using regex.\n#\n# >>> check_literals(\"The quick brown fox jumps over the lazy dog.\", [\"fox\"])\n# \"Matched!\"\n# >>> check_literals(\"The quick brown fox jumps over the lazy dog.\", [\"horse\"])\n# \"Not Matched!\"\n# >>> check_literals(\"The quick brown fox jumps over the lazy dog.\", [\"lazy\"])\n# \"Matched!\"\nsub check_literals\n{\n  my ($text, $patterns) = @_;\n", "entry_point": "check_literals", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"The quick brown fox jumps over the lazy dog.\";\nmy $arg01 = [\"fox\"];\nmy $x0 = check_literals($arg00, $arg01);\nmy $v0 = \"Matched!\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"The quick brown fox jumps over the lazy dog.\";\nmy $arg11 = [\"horse\"];\nmy $x1 = check_literals($arg10, $arg11);\nmy $v1 = \"Not Matched!\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"The quick brown fox jumps over the lazy dog.\";\nmy $arg21 = [\"lazy\"];\nmy $x2 = check_literals($arg20, $arg21);\nmy $v2 = \"Matched!\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to search some literals strings in a string by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/187", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the longest common subsequence for the given two sequences.\n#\n# >>> longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7)\n# 4\n# >>> longest_common_subsequence(\"ABCDGH\", \"AEDFHR\", 6, 6)\n# 3\n# >>> longest_common_subsequence(\"AXYT\", \"AYZX\", 4, 4)\n# 2\nsub longest_common_subsequence\n{\n  my ($x, $y, $m, $n) = @_;\n", "entry_point": "longest_common_subsequence", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"AGGTAB\";\nmy $arg01 = \"GXTXAYB\";\nmy $arg02 = 6;\nmy $arg03 = 7;\nmy $x0 = longest_common_subsequence($arg00, $arg01, $arg02, $arg03);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"ABCDGH\";\nmy $arg11 = \"AEDFHR\";\nmy $arg12 = 6;\nmy $arg13 = 6;\nmy $x1 = longest_common_subsequence($arg10, $arg11, $arg12, $arg13);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"AXYT\";\nmy $arg21 = \"AYZX\";\nmy $arg22 = 4;\nmy $arg23 = 4;\nmy $x2 = longest_common_subsequence($arg20, $arg21, $arg22, $arg23);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the longest common subsequence for the given two sequences.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/188", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the given number can be represented by product of two squares or not.\n#\n# >>> prod_square(25)\n# 0\n# >>> prod_square(30)\n# 0\n# >>> prod_square(16)\n# 1\nsub prod_square\n{\n  my ($n) = @_;\n", "entry_point": "prod_square", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 25;\nmy $x0 = prod_square($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 30;\nmy $x1 = prod_square($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 16;\nmy $x2 = prod_square($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the given number can be represented by product of two squares or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/189", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the first missing positive number.\n#\n# >>> first_missing_positive([1, 2, 3, -1, 5], 5)\n# 4\n# >>> first_missing_positive([0, -1, -2, 1, 5, 8], 6)\n# 2\n# >>> first_missing_positive([0, 1, 2, 5, -8], 5)\n# 3\nsub first_missing_positive\n{\n  my ($arr, $n) = @_;\n", "entry_point": "first_missing_positive", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, -1, 5];\nmy $arg01 = 5;\nmy $x0 = first_missing_positive($arg00, $arg01);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [0, -1, -2, 1, 5, 8];\nmy $arg11 = 6;\nmy $x1 = first_missing_positive($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [0, 1, 2, 5, -8];\nmy $arg21 = 5;\nmy $x2 = first_missing_positive($arg20, $arg21);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the first missing positive number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/190", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the number of integral co-ordinates that lie inside a square.\n#\n# >>> count_intgral_points(1, 1, 4, 4)\n# 4\n# >>> count_intgral_points(1, 2, 1, 2)\n# 1\n# >>> count_intgral_points(4, 2, 6, 4)\n# 1\nsub count_intgral_points\n{\n  my ($x1, $y1, $x2, $y2) = @_;\n", "entry_point": "count_intgral_points", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 1;\nmy $arg02 = 4;\nmy $arg03 = 4;\nmy $x0 = count_intgral_points($arg00, $arg01, $arg02, $arg03);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 2;\nmy $arg12 = 1;\nmy $arg13 = 2;\nmy $x1 = count_intgral_points($arg10, $arg11, $arg12, $arg13);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $arg21 = 2;\nmy $arg22 = 6;\nmy $arg23 = 4;\nmy $x2 = count_intgral_points($arg20, $arg21, $arg22, $arg23);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the number of integral co-ordinates that lie inside a square.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/191", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether the given month name contains 30 days or not.\n#\n# >>> check_monthnumber(\"February\")\n# 0\n# >>> check_monthnumber(\"June\")\n# 1\n# >>> check_monthnumber(\"April\")\n# 1\nsub check_monthnumber\n{\n  my ($monthname3) = @_;\n", "entry_point": "check_monthnumber", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"February\";\nmy $x0 = check_monthnumber($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"June\";\nmy $x1 = check_monthnumber($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"April\";\nmy $x2 = check_monthnumber($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether the given month name contains 30 days or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/192", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether a string has atleast one letter and one number.\n#\n# >>> check_string(\"thishasboth29\")\n# 1\n# >>> check_string(\"python\")\n# 0\nsub check_string\n{\n  my ($str) = @_;\n", "entry_point": "check_string", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"thishasboth29\";\nmy $x0 = check_string($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"python\";\nmy $x1 = check_string($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\n", "description": "Write a Perl function to check whether a string has atleast one letter and one number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/193", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove the duplicates from the given tuple.\n#\n# >>> remove_tuple([1, 3, 5, 2, 3, 5, 1, 1, 3])\n# [1, 2, 3, 5]\n# >>> remove_tuple([2, 3, 4, 4, 5, 6, 6, 7, 8, 8])\n# [2, 3, 4, 5, 6, 7, 8]\n# >>> remove_tuple([11, 12, 13, 11, 11, 12, 14, 13])\n# [11, 12, 13, 14]\nsub remove_tuple\n{\n  my ($test_tup) = @_;\n", "entry_point": "remove_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 5, 2, 3, 5, 1, 1, 3];\nmy $x0 = remove_tuple($arg00);\nmy $v0 = [1, 2, 3, 5];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 3, 4, 4, 5, 6, 6, 7, 8, 8];\nmy $x1 = remove_tuple($arg10);\nmy $v1 = [2, 3, 4, 5, 6, 7, 8];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [11, 12, 13, 11, 11, 12, 14, 13];\nmy $x2 = remove_tuple($arg20);\nmy $v2 = [11, 12, 13, 14];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove the duplicates from the given tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/194", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to convert octal number to decimal number.\n#\n# >>> octal_to_decimal(25)\n# 21\n# >>> octal_to_decimal(30)\n# 24\n# >>> octal_to_decimal(40)\n# 32\nsub octal_to_decimal\n{\n  my ($n) = @_;\n", "entry_point": "octal_to_decimal", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 25;\nmy $x0 = octal_to_decimal($arg00);\nmy $v0 = 21;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 30;\nmy $x1 = octal_to_decimal($arg10);\nmy $v1 = 24;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 40;\nmy $x2 = octal_to_decimal($arg20);\nmy $v2 = 32;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to convert octal number to decimal number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/195", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the first position of an element in a sorted array.\n#\n# >>> first([1, 2, 3, 4, 5, 6, 6], 6, 6)\n# 5\n# >>> first([1, 2, 2, 2, 3, 2, 2, 4, 2], 2, 9)\n# 1\n# >>> first([1, 2, 3], 1, 3)\n# 0\nsub first\n{\n  my ($arr, $x, $n) = @_;\n", "entry_point": "first", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6, 6];\nmy $arg01 = 6;\nmy $arg02 = 6;\nmy $x0 = first($arg00, $arg01, $arg02);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 2, 2, 3, 2, 2, 4, 2];\nmy $arg11 = 2;\nmy $arg12 = 9;\nmy $x1 = first($arg10, $arg11, $arg12);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3];\nmy $arg21 = 1;\nmy $arg22 = 3;\nmy $x2 = first($arg20, $arg21, $arg22);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the first position of an element in a sorted array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/196", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove all the tuples with length k.\n#\n# >>> remove_tuples([[4, 5], [4], [8, 6, 7], [1], [3, 4, 6, 7]], 1)\n# [[4, 5], [8, 6, 7], [3, 4, 6, 7]]\n# >>> remove_tuples([[4, 5], [4, 5], [6, 7], [1, 2, 3], [3, 4, 6, 7]], 2)\n# [[1, 2, 3], [3, 4, 6, 7]]\n# >>> remove_tuples([[1, 4, 4], [4, 3], [8, 6, 7], [1], [3, 6, 7]], 3)\n# [[4, 3], [1]]\nsub remove_tuples\n{\n  my ($test_list, $k) = @_;\n", "entry_point": "remove_tuples", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[4, 5], [4], [8, 6, 7], [1], [3, 4, 6, 7]];\nmy $arg01 = 1;\nmy $x0 = remove_tuples($arg00, $arg01);\nmy $v0 = [[4, 5], [8, 6, 7], [3, 4, 6, 7]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[4, 5], [4, 5], [6, 7], [1, 2, 3], [3, 4, 6, 7]];\nmy $arg11 = 2;\nmy $x1 = remove_tuples($arg10, $arg11);\nmy $v1 = [[1, 2, 3], [3, 4, 6, 7]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[1, 4, 4], [4, 3], [8, 6, 7], [1], [3, 6, 7]];\nmy $arg21 = 3;\nmy $x2 = remove_tuples($arg20, $arg21);\nmy $v2 = [[4, 3], [1]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove all the tuples with length k.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/197", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to perform the exponentiation of the given two tuples.\n#\n# >>> find_exponentio([10, 4, 5, 6], [5, 6, 7, 5])\n# [100000, 4096, 78125, 7776]\n# >>> find_exponentio([11, 5, 6, 7], [6, 7, 8, 6])\n# [1771561, 78125, 1679616, 117649]\n# >>> find_exponentio([12, 6, 7, 8], [7, 8, 9, 7])\n# [35831808, 1679616, 40353607, 2097152]\nsub find_exponentio\n{\n  my ($test_tup1, $test_tup2) = @_;\n", "entry_point": "find_exponentio", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 4, 5, 6];\nmy $arg01 = [5, 6, 7, 5];\nmy $x0 = find_exponentio($arg00, $arg01);\nmy $v0 = [100000, 4096, 78125, 7776];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [11, 5, 6, 7];\nmy $arg11 = [6, 7, 8, 6];\nmy $x1 = find_exponentio($arg10, $arg11);\nmy $v1 = [1771561, 78125, 1679616, 117649];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [12, 6, 7, 8];\nmy $arg21 = [7, 8, 9, 7];\nmy $x2 = find_exponentio($arg20, $arg21);\nmy $v2 = [35831808, 1679616, 40353607, 2097152];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to perform the exponentiation of the given two tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/198", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the largest triangle that can be inscribed in an ellipse.\n#\n# >>> largest_triangle(4, 2)\n# 10.392304845413264\n# >>> largest_triangle(5, 7)\n# 4.639421805988064\n# >>> largest_triangle(9, 1)\n# 105.2220865598093\nsub largest_triangle\n{\n  my ($a, $b) = @_;\n", "entry_point": "largest_triangle", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $arg01 = 2;\nmy $x0 = largest_triangle($arg00, $arg01);\nmy $v0 = 10.392304845413264;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $arg11 = 7;\nmy $x1 = largest_triangle($arg10, $arg11);\nmy $v1 = 4.639421805988064;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 9;\nmy $arg21 = 1;\nmy $x2 = largest_triangle($arg20, $arg21);\nmy $v2 = 105.2220865598093;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the largest triangle that can be inscribed in an ellipse.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/199", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find highest power of 2 less than or equal to given number.\n#\n# >>> highest_power_of_2(10)\n# 8\n# >>> highest_power_of_2(19)\n# 16\n# >>> highest_power_of_2(32)\n# 32\nsub highest_power_of_2\n{\n  my ($n) = @_;\n", "entry_point": "highest_power_of_2", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = highest_power_of_2($arg00);\nmy $v0 = 8;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 19;\nmy $x1 = highest_power_of_2($arg10);\nmy $v1 = 16;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 32;\nmy $x2 = highest_power_of_2($arg20);\nmy $v2 = 32;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find highest power of 2 less than or equal to given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/200", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find all index positions of the maximum values in a given list.\n#\n# >>> position_max([12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54])\n# [7]\n# >>> position_max([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])\n# [7, 8, 9, 10]\n# >>> position_max([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])\n# [11]\nsub position_max\n{\n  my ($list1) = @_;\n", "entry_point": "position_max", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54];\nmy $x0 = position_max($arg00);\nmy $v0 = [7];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5];\nmy $x1 = position_max($arg10);\nmy $v1 = [7, 8, 9, 10];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nmy $x2 = position_max($arg20);\nmy $v2 = [11];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find all index positions of the maximum values in a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/201", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the elements in a list are same or not.\n#\n# >>> chklist([\"one\", \"one\", \"one\"])\n# 1\n# >>> chklist([\"one\", \"Two\", \"Three\"])\n# 0\n# >>> chklist([\"bigdata\", \"python\", \"Django\"])\n# 0\nsub chklist\n{\n  my ($lst) = @_;\n", "entry_point": "chklist", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"one\", \"one\", \"one\"];\nmy $x0 = chklist($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"one\", \"Two\", \"Three\"];\nmy $x1 = chklist($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"bigdata\", \"python\", \"Django\"];\nmy $x2 = chklist($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the elements in a list are same or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/202", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove even characters in a string.\n#\n# >>> remove_even(\"python\")\n# \"pto\"\n# >>> remove_even(\"program\")\n# \"porm\"\n# >>> remove_even(\"language\")\n# \"lnug\"\nsub remove_even\n{\n  my ($str1) = @_;\n", "entry_point": "remove_even", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python\";\nmy $x0 = remove_even($arg00);\nmy $v0 = \"pto\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"program\";\nmy $x1 = remove_even($arg10);\nmy $v1 = \"porm\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"language\";\nmy $x2 = remove_even($arg20);\nmy $v2 = \"lnug\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove even characters in a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/203", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the hamming distance between given two integers.\n#\n# >>> hamming_distance(4, 8)\n# 2\n# >>> hamming_distance(2, 4)\n# 2\n# >>> hamming_distance(1, 2)\n# 2\nsub hamming_distance\n{\n  my ($n1, $n2) = @_;\n", "entry_point": "hamming_distance", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $arg01 = 8;\nmy $x0 = hamming_distance($arg00, $arg01);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $arg11 = 4;\nmy $x1 = hamming_distance($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 2;\nmy $x2 = hamming_distance($arg20, $arg21);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the hamming distance between given two integers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/204", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the occurrence of a given character in a string.\n#\n# >>> count(\"abcc\", \"c\")\n# 2\n# >>> count(\"ababca\", \"a\")\n# 3\n# >>> count(\"mnmm0pm\", \"m\")\n# 4\nsub count\n{\n  my ($s, $c) = @_;\n", "entry_point": "count", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abcc\";\nmy $arg01 = \"c\";\nmy $x0 = count($arg00, $arg01);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"ababca\";\nmy $arg11 = \"a\";\nmy $x1 = count($arg10, $arg11);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"mnmm0pm\";\nmy $arg21 = \"m\";\nmy $x2 = count($arg20, $arg21);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the occurrence of a given character in a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/205", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the inversions of tuple elements in the given tuple list.\n#\n# >>> inversion_elements([7, 8, 9, 1, 10, 7])\n# [-8, -9, -10, -2, -11, -8]\n# >>> inversion_elements([2, 4, 5, 6, 1, 7])\n# [-3, -5, -6, -7, -2, -8]\n# >>> inversion_elements([8, 9, 11, 14, 12, 13])\n# [-9, -10, -12, -15, -13, -14]\nsub inversion_elements\n{\n  my ($test_tup) = @_;\n", "entry_point": "inversion_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [7, 8, 9, 1, 10, 7];\nmy $x0 = inversion_elements($arg00);\nmy $v0 = [-8, -9, -10, -2, -11, -8];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 4, 5, 6, 1, 7];\nmy $x1 = inversion_elements($arg10);\nmy $v1 = [-3, -5, -6, -7, -2, -8];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [8, 9, 11, 14, 12, 13];\nmy $x2 = inversion_elements($arg20);\nmy $v2 = [-9, -10, -12, -15, -13, -14];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the inversions of tuple elements in the given tuple list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/206", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to perform the adjacent element concatenation in the given tuples.\n#\n# >>> concatenate_elements([\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"])\n# [\"DSP IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL UTS\"]\n# >>> concatenate_elements([\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"])\n# [\"RES IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL QESR\"]\n# >>> concatenate_elements([\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"])\n# [\"MSAMIS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL SKD\"]\nsub concatenate_elements\n{\n  my ($test_tup) = @_;\n", "entry_point": "concatenate_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"];\nmy $x0 = concatenate_elements($arg00);\nmy $v0 = [\"DSP IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL UTS\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"];\nmy $x1 = concatenate_elements($arg10);\nmy $v1 = [\"RES IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL QESR\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"];\nmy $x2 = concatenate_elements($arg20);\nmy $v2 = [\"MSAMIS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL SKD\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to perform the adjacent element concatenation in the given tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/207", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n#\n# >>> find_longest_repeating_subseq(\"AABEBCDD\")\n# 3\n# >>> find_longest_repeating_subseq(\"aabb\")\n# 2\n# >>> find_longest_repeating_subseq(\"aab\")\n# 1\nsub find_longest_repeating_subseq\n{\n  my ($str) = @_;\n", "entry_point": "find_longest_repeating_subseq", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"AABEBCDD\";\nmy $x0 = find_longest_repeating_subseq($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"aabb\";\nmy $x1 = find_longest_repeating_subseq($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"aab\";\nmy $x2 = find_longest_repeating_subseq($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/208", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check the given decimal with a precision of 2 by using regex.\n#\n# >>> is_decimal(\"123.11\")\n# 1\n# >>> is_decimal(\"0.21\")\n# 1\n# >>> is_decimal(\"123.1214\")\n# 0\nsub is_decimal\n{\n  my ($num) = @_;\n", "entry_point": "is_decimal", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"123.11\";\nmy $x0 = is_decimal($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"0.21\";\nmy $x1 = is_decimal($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"123.1214\";\nmy $x2 = is_decimal($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check the given decimal with a precision of 2 by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/209", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to delete the smallest element from the given heap and then insert a new item.\n#\n# >>> heap_replace([25, 44, 68, 21, 39, 23, 89], 21)\n# [21, 25, 23, 44, 39, 68, 89]\n# >>> heap_replace([25, 44, 68, 21, 39, 23, 89], 110)\n# [23, 25, 68, 44, 39, 110, 89]\n# >>> heap_replace([25, 44, 68, 21, 39, 23, 89], 500)\n# [23, 25, 68, 44, 39, 500, 89]\nsub heap_replace\n{\n  my ($heap, $a) = @_;\n", "entry_point": "heap_replace", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [25, 44, 68, 21, 39, 23, 89];\nmy $arg01 = 21;\nmy $x0 = heap_replace($arg00, $arg01);\nmy $v0 = [21, 25, 23, 44, 39, 68, 89];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [25, 44, 68, 21, 39, 23, 89];\nmy $arg11 = 110;\nmy $x1 = heap_replace($arg10, $arg11);\nmy $v1 = [23, 25, 68, 44, 39, 110, 89];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [25, 44, 68, 21, 39, 23, 89];\nmy $arg21 = 500;\nmy $x2 = heap_replace($arg20, $arg21);\nmy $v2 = [23, 25, 68, 44, 39, 500, 89];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to delete the smallest element from the given heap and then insert a new item.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/210", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n#\n# >>> is_allowed_specific_char(\"ABCDEFabcdef123450\")\n# 1\n# >>> is_allowed_specific_char(\"*&%@#!}{\")\n# 0\n# >>> is_allowed_specific_char(\"HELLOhowareyou98765\")\n# 1\nsub is_allowed_specific_char\n{\n  my ($string) = @_;\n", "entry_point": "is_allowed_specific_char", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"ABCDEFabcdef123450\";\nmy $x0 = is_allowed_specific_char($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"*&%@#!}{\";\nmy $x1 = is_allowed_specific_char($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"HELLOhowareyou98765\";\nmy $x2 = is_allowed_specific_char($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/211", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count numbers whose oth and nth bits are set.\n#\n# >>> count_num(2)\n# 1\n# >>> count_num(3)\n# 2\n# >>> count_num(1)\n# 1\nsub count_num\n{\n  my ($n) = @_;\n", "entry_point": "count_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = count_num($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $x1 = count_num($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $x2 = count_num($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count numbers whose oth and nth bits are set.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/212", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of fourth power of n natural numbers.\n#\n# >>> fourth_power_sum(2)\n# 17\n# >>> fourth_power_sum(4)\n# 354\n# >>> fourth_power_sum(6)\n# 2275\nsub fourth_power_sum\n{\n  my ($n) = @_;\n", "entry_point": "fourth_power_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = fourth_power_sum($arg00);\nmy $v0 = 17;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = fourth_power_sum($arg10);\nmy $v1 = 354;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 6;\nmy $x2 = fourth_power_sum($arg20);\nmy $v2 = 2275;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of fourth power of n natural numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/213", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to perform the concatenation of two string tuples.\n#\n# >>> concatenate_strings([\"Manjeet\", \"Nikhil\", \"Akshat\"], [\" Singh\", \" Meherwal\", \" Garg\"])\n# [\"Manjeet Singh\", \"Nikhil Meherwal\", \"Akshat Garg\"]\n# >>> concatenate_strings([\"Shaik\", \"Ayesha\", \"Sanya\"], [\" Dawood\", \" Begum\", \" Singh\"])\n# [\"Shaik Dawood\", \"Ayesha Begum\", \"Sanya Singh\"]\n# >>> concatenate_strings([\"Harpreet\", \"Priyanka\", \"Muskan\"], [\"Kour\", \" Agarwal\", \"Sethi\"])\n# [\"HarpreetKour\", \"Priyanka Agarwal\", \"MuskanSethi\"]\nsub concatenate_strings\n{\n  my ($test_tup1, $test_tup2) = @_;\n", "entry_point": "concatenate_strings", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"Manjeet\", \"Nikhil\", \"Akshat\"];\nmy $arg01 = [\" Singh\", \" Meherwal\", \" Garg\"];\nmy $x0 = concatenate_strings($arg00, $arg01);\nmy $v0 = [\"Manjeet Singh\", \"Nikhil Meherwal\", \"Akshat Garg\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"Shaik\", \"Ayesha\", \"Sanya\"];\nmy $arg11 = [\" Dawood\", \" Begum\", \" Singh\"];\nmy $x1 = concatenate_strings($arg10, $arg11);\nmy $v1 = [\"Shaik Dawood\", \"Ayesha Begum\", \"Sanya Singh\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"Harpreet\", \"Priyanka\", \"Muskan\"];\nmy $arg21 = [\"Kour\", \" Agarwal\", \"Sethi\"];\nmy $x2 = concatenate_strings($arg20, $arg21);\nmy $v2 = [\"HarpreetKour\", \"Priyanka Agarwal\", \"MuskanSethi\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to perform the concatenation of two string tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/214", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert radians to degrees.\n#\n# >>> degree_radian(90)\n# 5156.620156177409\n# >>> degree_radian(60)\n# 3437.746770784939\n# >>> degree_radian(120)\n# 6875.493541569878\nsub degree_radian\n{\n  my ($radian) = @_;\n", "entry_point": "degree_radian", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 90;\nmy $x0 = degree_radian($arg00);\nmy $v0 = 5156.620156177409;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 60;\nmy $x1 = degree_radian($arg10);\nmy $v1 = 3437.746770784939;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 120;\nmy $x2 = degree_radian($arg20);\nmy $v2 = 6875.493541569878;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert radians to degrees.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/215", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to decode a run-length encoded given list.\n#\n# >>> decode_list([[2, 1], 2, 3, [2, 4], 5, 1])\n# [1, 1, 2, 3, 4, 4, 5, 1]\n# >>> decode_list([\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", [2, \"l\"], \"y\"])\n# [\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", \"l\", \"l\", \"y\"]\n# >>> decode_list([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"])\n# [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]\nsub decode_list\n{\n  my ($alist) = @_;\n", "entry_point": "decode_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[2, 1], 2, 3, [2, 4], 5, 1];\nmy $x0 = decode_list($arg00);\nmy $v0 = [1, 1, 2, 3, 4, 4, 5, 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", [2, \"l\"], \"y\"];\nmy $x1 = decode_list($arg10);\nmy $v1 = [\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", \"l\", \"l\", \"y\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"];\nmy $x2 = decode_list($arg20);\nmy $v2 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to decode a run-length encoded given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/216", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if a nested list is a subset of another nested list.\n#\n# >>> check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])\n# 0\n# >>> check_subset_list([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])\n# 1\n# >>> check_subset_list([[\"a\", \"b\"], [\"e\"], [\"c\", \"d\"]], [[\"g\"]])\n# 0\nsub check_subset_list\n{\n  my ($list1, $list2) = @_;\n", "entry_point": "check_subset_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nmy $arg01 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]];\nmy $x0 = check_subset_list($arg00, $arg01);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[2, 3, 1], [4, 5], [6, 8]];\nmy $arg11 = [[4, 5], [6, 8]];\nmy $x1 = check_subset_list($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"a\", \"b\"], [\"e\"], [\"c\", \"d\"]];\nmy $arg21 = [[\"g\"]];\nmy $x2 = check_subset_list($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if a nested list is a subset of another nested list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/217", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the first repeated character in a given string.\n#\n# >>> first_repeated_char(\"Google\")\n# \"o\"\n# >>> first_repeated_char(\"data\")\n# \"a\"\n# >>> first_repeated_char(\"python\")\n# \"\\x00\"\nsub first_repeated_char\n{\n  my ($str) = @_;\n", "entry_point": "first_repeated_char", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Google\";\nmy $x0 = first_repeated_char($arg00);\nmy $v0 = \"o\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"data\";\nmy $x1 = first_repeated_char($arg10);\nmy $v1 = \"a\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"python\";\nmy $x2 = first_repeated_char($arg20);\nmy $v2 = \"\\x00\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the first repeated character in a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/218", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the minimum operations required to make two numbers equal.\n#\n# >>> min_operations(2, 4)\n# 1\n# >>> min_operations(4, 10)\n# 4\n# >>> min_operations(1, 4)\n# 3\nsub min_operations\n{\n  my ($a, $b) = @_;\n", "entry_point": "min_operations", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $arg01 = 4;\nmy $x0 = min_operations($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $arg11 = 10;\nmy $x1 = min_operations($arg10, $arg11);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 4;\nmy $x2 = min_operations($arg20, $arg21);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the minimum operations required to make two numbers equal.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/219", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract maximum and minimum k elements in the given tuple.\n#\n# >>> extract_min_max([5, 20, 3, 7, 6, 8], 2)\n# [3, 5, 8, 20]\n# >>> extract_min_max([4, 5, 6, 1, 2, 7], 3)\n# [1, 2, 4, 5, 6, 7]\n# >>> extract_min_max([2, 3, 4, 8, 9, 11, 7], 4)\n# [2, 3, 4, 7, 8, 9, 11]\nsub extract_min_max\n{\n  my ($test_tup, $k) = @_;\n", "entry_point": "extract_min_max", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 20, 3, 7, 6, 8];\nmy $arg01 = 2;\nmy $x0 = extract_min_max($arg00, $arg01);\nmy $v0 = [3, 5, 8, 20];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 5, 6, 1, 2, 7];\nmy $arg11 = 3;\nmy $x1 = extract_min_max($arg10, $arg11);\nmy $v1 = [1, 2, 4, 5, 6, 7];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 3, 4, 8, 9, 11, 7];\nmy $arg21 = 4;\nmy $x2 = extract_min_max($arg20, $arg21);\nmy $v2 = [2, 3, 4, 7, 8, 9, 11];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract maximum and minimum k elements in the given tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/220", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n#\n# >>> replace_max_specialchar(\"Python language, Programming language.\", 2)\n# \"Python:language: Programming language.\"\n# >>> replace_max_specialchar(\"a b c,d e f\", 3)\n# \"a:b:c:d e f\"\n# >>> replace_max_specialchar(\"ram reshma,ram rahim\", 1)\n# \"ram:reshma,ram rahim\"\nsub replace_max_specialchar\n{\n  my ($text, $n) = @_;\n", "entry_point": "replace_max_specialchar", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Python language, Programming language.\";\nmy $arg01 = 2;\nmy $x0 = replace_max_specialchar($arg00, $arg01);\nmy $v0 = \"Python:language: Programming language.\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"a b c,d e f\";\nmy $arg11 = 3;\nmy $x1 = replace_max_specialchar($arg10, $arg11);\nmy $v1 = \"a:b:c:d e f\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"ram reshma,ram rahim\";\nmy $arg21 = 1;\nmy $x2 = replace_max_specialchar($arg20, $arg21);\nmy $v2 = \"ram:reshma,ram rahim\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/221", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the first even number in a given list of numbers.\n#\n# >>> first_even([2, 3, 4])\n# 2\n# >>> first_even([5, 6, 7])\n# 6\nsub first_even\n{\n  my ($nums) = @_;\n", "entry_point": "first_even", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 3, 4];\nmy $x0 = first_even($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 6, 7];\nmy $x1 = first_even($arg10);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\n", "description": "Write a Perl function to find the first even number in a given list of numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/222", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if all the elements in tuple have same data type or not.\n#\n# >>> check_type([5, 6, 7, 3, 5, 6])\n# 1\n# >>> check_type([1, 2, \"4\"])\n# 0\n# >>> check_type([3, 2, 1, 4, 5])\n# 1\nsub check_type\n{\n  my ($test_tuple) = @_;\n", "entry_point": "check_type", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 6, 7, 3, 5, 6];\nmy $x0 = check_type($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, \"4\"];\nmy $x1 = check_type($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 2, 1, 4, 5];\nmy $x2 = check_type($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if all the elements in tuple have same data type or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/223", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check for majority element in the given sorted array.\n#\n# >>> is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3)\n# 1\n# >>> is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)\n# 0\n# >>> is_majority([1, 1, 1, 2, 2], 5, 1)\n# 1\nsub is_majority\n{\n  my ($arr, $n, $x) = @_;\n", "entry_point": "is_majority", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 3, 3, 3, 10];\nmy $arg01 = 7;\nmy $arg02 = 3;\nmy $x0 = is_majority($arg00, $arg01, $arg02);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 1, 2, 4, 4, 4, 6, 6];\nmy $arg11 = 8;\nmy $arg12 = 4;\nmy $x1 = is_majority($arg10, $arg11, $arg12);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 1, 1, 2, 2];\nmy $arg21 = 5;\nmy $arg22 = 1;\nmy $x2 = is_majority($arg20, $arg21, $arg22);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check for majority element in the given sorted array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/224", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count set bits of a given number.\n#\n# >>> count_set_bits(2)\n# 1\n# >>> count_set_bits(4)\n# 1\n# >>> count_set_bits(6)\n# 2\nsub count_set_bits\n{\n  my ($n) = @_;\n", "entry_point": "count_set_bits", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = count_set_bits($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = count_set_bits($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 6;\nmy $x2 = count_set_bits($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count set bits of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/225", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the minimum element in a sorted and rotated array.\n#\n# >>> find_min([1, 2, 3, 4, 5], 0, 4)\n# 1\n# >>> find_min([4, 6, 8], 0, 2)\n# 4\n# >>> find_min([2, 3, 5, 7, 9], 0, 4)\n# 2\nsub find_min\n{\n  my ($arr, $low, $high) = @_;\n", "entry_point": "find_min", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5];\nmy $arg01 = 0;\nmy $arg02 = 4;\nmy $x0 = find_min($arg00, $arg01, $arg02);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 6, 8];\nmy $arg11 = 0;\nmy $arg12 = 2;\nmy $x1 = find_min($arg10, $arg11, $arg12);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 3, 5, 7, 9];\nmy $arg21 = 0;\nmy $arg22 = 4;\nmy $x2 = find_min($arg20, $arg21, $arg22);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the minimum element in a sorted and rotated array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/226", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to remove the characters which have odd index values of a given string.\n#\n# >>> odd_values_string(\"abcdef\")\n# \"ace\"\n# >>> odd_values_string(\"python\")\n# \"pto\"\n# >>> odd_values_string(\"data\")\n# \"dt\"\nsub odd_values_string\n{\n  my ($str) = @_;\n", "entry_point": "odd_values_string", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abcdef\";\nmy $x0 = odd_values_string($arg00);\nmy $v0 = \"ace\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"python\";\nmy $x1 = odd_values_string($arg10);\nmy $v1 = \"pto\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"data\";\nmy $x2 = odd_values_string($arg20);\nmy $v2 = \"dt\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to remove the characters which have odd index values of a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/227", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find minimum of three numbers.\n#\n# >>> min_of_three(10, 20, 0)\n# 0\n# >>> min_of_three(19, 15, 18)\n# 15\n# >>> min_of_three(-10, -20, -30)\n# -30\nsub min_of_three\n{\n  my ($a, $b, $c) = @_;\n", "entry_point": "min_of_three", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 20;\nmy $arg02 = 0;\nmy $x0 = min_of_three($arg00, $arg01, $arg02);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 19;\nmy $arg11 = 15;\nmy $arg12 = 18;\nmy $x1 = min_of_three($arg10, $arg11, $arg12);\nmy $v1 = 15;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = -10;\nmy $arg21 = -20;\nmy $arg22 = -30;\nmy $x2 = min_of_three($arg20, $arg21, $arg22);\nmy $v2 = -30;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find minimum of three numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/228", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether all the bits are unset in the given range or not.\n#\n# >>> all_bits_set_in_the_given_range(4, 1, 2)\n# 1\n# >>> all_bits_set_in_the_given_range(17, 2, 4)\n# 1\n# >>> all_bits_set_in_the_given_range(39, 4, 6)\n# 0\nsub all_bits_set_in_the_given_range\n{\n  my ($n, $l, $r) = @_;\n", "entry_point": "all_bits_set_in_the_given_range", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $arg01 = 1;\nmy $arg02 = 2;\nmy $x0 = all_bits_set_in_the_given_range($arg00, $arg01, $arg02);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 17;\nmy $arg11 = 2;\nmy $arg12 = 4;\nmy $x1 = all_bits_set_in_the_given_range($arg10, $arg11, $arg12);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 39;\nmy $arg21 = 4;\nmy $arg22 = 6;\nmy $x2 = all_bits_set_in_the_given_range($arg20, $arg21, $arg22);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether all the bits are unset in the given range or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/229", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n#\n# >>> re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)\n# [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n# >>> re_arrange_array([12, -14, -26, 13, 15], 5)\n# [-14, -26, 12, 13, 15]\n# >>> re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7)\n# [-42, -39, -78, 10, 24, 36, 85]\nsub re_arrange_array\n{\n  my ($arr, $n) = @_;\n", "entry_point": "re_arrange_array", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [-1, 2, -3, 4, 5, 6, -7, 8, 9];\nmy $arg01 = 9;\nmy $x0 = re_arrange_array($arg00, $arg01);\nmy $v0 = [-1, -3, -7, 4, 5, 6, 2, 8, 9];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [12, -14, -26, 13, 15];\nmy $arg11 = 5;\nmy $x1 = re_arrange_array($arg10, $arg11);\nmy $v1 = [-14, -26, 12, 13, 15];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [10, 24, 36, -42, -39, -78, 85];\nmy $arg21 = 7;\nmy $x2 = re_arrange_array($arg20, $arg21);\nmy $v2 = [-42, -39, -78, 10, 24, 36, 85];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/230", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to replace blank spaces with any character in a string.\n#\n# >>> replace_blank(\"hello people\", \"@\")\n# \"hello@people\"\n# >>> replace_blank(\"python program language\", \"\\$\")\n# \"python\\$program\\$language\"\n# >>> replace_blank(\"blank space\", \"-\")\n# \"blank-space\"\nsub replace_blank\n{\n  my ($str1, $char) = @_;\n", "entry_point": "replace_blank", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"hello people\";\nmy $arg01 = \"@\";\nmy $x0 = replace_blank($arg00, $arg01);\nmy $v0 = \"hello@people\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"python program language\";\nmy $arg11 = \"\\$\";\nmy $x1 = replace_blank($arg10, $arg11);\nmy $v1 = \"python\\$program\\$language\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"blank space\";\nmy $arg21 = \"-\";\nmy $x2 = replace_blank($arg20, $arg21);\nmy $v2 = \"blank-space\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to replace blank spaces with any character in a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/231", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the maximum sum in the given right triangle of numbers.\n#\n# >>> max_sum([[1], [2, 1], [3, 3, 2]], 3)\n# 6\n# >>> max_sum([[1], [1, 2], [4, 1, 12]], 3)\n# 15\n# >>> max_sum([[2], [3, 2], [13, 23, 12]], 3)\n# 28\nsub max_sum\n{\n  my ($tri, $n) = @_;\n", "entry_point": "max_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1], [2, 1], [3, 3, 2]];\nmy $arg01 = 3;\nmy $x0 = max_sum($arg00, $arg01);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1], [1, 2], [4, 1, 12]];\nmy $arg11 = 3;\nmy $x1 = max_sum($arg10, $arg11);\nmy $v1 = 15;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[2], [3, 2], [13, 23, 12]];\nmy $arg21 = 3;\nmy $x2 = max_sum($arg20, $arg21);\nmy $v2 = 28;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the maximum sum in the given right triangle of numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/232", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to get the n largest items from a dataset.\n#\n# >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n# [100, 90]\n# >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)\n# [100, 90, 80, 70, 60]\n# >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)\n# [100, 90, 80]\nsub larg_nnum\n{\n  my ($list1, $n) = @_;\n", "entry_point": "larg_nnum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100];\nmy $arg01 = 2;\nmy $x0 = larg_nnum($arg00, $arg01);\nmy $v0 = [100, 90];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100];\nmy $arg11 = 5;\nmy $x1 = larg_nnum($arg10, $arg11);\nmy $v1 = [100, 90, 80, 70, 60];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100];\nmy $arg21 = 3;\nmy $x2 = larg_nnum($arg20, $arg21);\nmy $v2 = [100, 90, 80];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to get the n largest items from a dataset.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/233", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the lateral surface area of a cylinder.\n#\n# >>> lateralsuface_cylinder(10, 5)\n# 314.15000000000003\n# >>> lateralsuface_cylinder(4, 5)\n# 125.66000000000001\n# >>> lateralsuface_cylinder(4, 10)\n# 251.32000000000002\nsub lateralsuface_cylinder\n{\n  my ($r, $h) = @_;\n", "entry_point": "lateralsuface_cylinder", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 5;\nmy $x0 = lateralsuface_cylinder($arg00, $arg01);\nmy $v0 = 314.15000000000003;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $arg11 = 5;\nmy $x1 = lateralsuface_cylinder($arg10, $arg11);\nmy $v1 = 125.66000000000001;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $arg21 = 10;\nmy $x2 = lateralsuface_cylinder($arg20, $arg21);\nmy $v2 = 251.32000000000002;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the lateral surface area of a cylinder.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/234", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the volume of a cube.\n#\n# >>> volume_cube(3)\n# 27\n# >>> volume_cube(2)\n# 8\n# >>> volume_cube(5)\n# 125\nsub volume_cube\n{\n  my ($l) = @_;\n", "entry_point": "volume_cube", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $x0 = volume_cube($arg00);\nmy $v0 = 27;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = volume_cube($arg10);\nmy $v1 = 8;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $x2 = volume_cube($arg20);\nmy $v2 = 125;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the volume of a cube.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/235", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to set all even bits of a given number.\n#\n# >>> even_bit_set_number(10)\n# 10\n# >>> even_bit_set_number(20)\n# 30\n# >>> even_bit_set_number(30)\n# 30\nsub even_bit_set_number\n{\n  my ($n) = @_;\n", "entry_point": "even_bit_set_number", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = even_bit_set_number($arg00);\nmy $v0 = 10;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 20;\nmy $x1 = even_bit_set_number($arg10);\nmy $v1 = 30;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 30;\nmy $x2 = even_bit_set_number($arg20);\nmy $v2 = 30;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to set all even bits of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/236", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n#\n# >>> no_of_triangle(4, 2)\n# 7\n# >>> no_of_triangle(4, 3)\n# 3\n# >>> no_of_triangle(1, 3)\n# -1\nsub no_of_triangle\n{\n  my ($n, $k) = @_;\n", "entry_point": "no_of_triangle", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $arg01 = 2;\nmy $x0 = no_of_triangle($arg00, $arg01);\nmy $v0 = 7;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $arg11 = 3;\nmy $x1 = no_of_triangle($arg10, $arg11);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 3;\nmy $x2 = no_of_triangle($arg20, $arg21);\nmy $v2 = -1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/237", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check the occurrences of records which occur similar times in the given tuples.\n#\n# >>> check_occurences([[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]])\n# {[1, 3] => 2, [2, 5] => 2, [3, 6] => 1}\n# >>> check_occurences([[4, 2], [2, 4], [3, 6], [6, 3], [7, 4]])\n# {[2, 4] => 2, [3, 6] => 2, [4, 7] => 1}\n# >>> check_occurences([[13, 2], [11, 23], [12, 25], [25, 12], [16, 23]])\n# {[2, 13] => 1, [11, 23] => 1, [12, 25] => 2, [16, 23] => 1}\nsub check_occurences\n{\n  my ($test_list) = @_;\n", "entry_point": "check_occurences", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]];\nmy $x0 = check_occurences($arg00);\nmy $v0 = {[1, 3] => 2, [2, 5] => 2, [3, 6] => 1};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[4, 2], [2, 4], [3, 6], [6, 3], [7, 4]];\nmy $x1 = check_occurences($arg10);\nmy $v1 = {[2, 4] => 2, [3, 6] => 2, [4, 7] => 1};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[13, 2], [11, 23], [12, 25], [25, 12], [16, 23]];\nmy $x2 = check_occurences($arg20);\nmy $v2 = {[2, 13] => 1, [11, 23] => 1, [12, 25] => 2, [16, 23] => 1};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check the occurrences of records which occur similar times in the given tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/238", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count number of non-empty substrings of a given string.\n#\n# >>> number_of_substrings(\"abc\")\n# 6\n# >>> number_of_substrings(\"abcd\")\n# 10\n# >>> number_of_substrings(\"abcde\")\n# 15\nsub number_of_substrings\n{\n  my ($str) = @_;\n", "entry_point": "number_of_substrings", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abc\";\nmy $x0 = number_of_substrings($arg00);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcd\";\nmy $x1 = number_of_substrings($arg10);\nmy $v1 = 10;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abcde\";\nmy $x2 = number_of_substrings($arg20);\nmy $v2 = 15;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count number of non-empty substrings of a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/239", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n#\n# >>> get_total_number_of_sequences(10, 4)\n# 4\n# >>> get_total_number_of_sequences(5, 2)\n# 6\n# >>> get_total_number_of_sequences(16, 3)\n# 84\nsub get_total_number_of_sequences\n{\n  my ($m, $n) = @_;\n", "entry_point": "get_total_number_of_sequences", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 4;\nmy $x0 = get_total_number_of_sequences($arg00, $arg01);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $arg11 = 2;\nmy $x1 = get_total_number_of_sequences($arg10, $arg11);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 16;\nmy $arg21 = 3;\nmy $x2 = get_total_number_of_sequences($arg20, $arg21);\nmy $v2 = 84;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/240", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to replace the last element of the list with another list.\n#\n# >>> replace_list([1, 3, 5, 7, 9, 10], [2, 4, 6, 8])\n# [1, 3, 5, 7, 9, 2, 4, 6, 8]\n# >>> replace_list([1, 2, 3, 4, 5], [5, 6, 7, 8])\n# [1, 2, 3, 4, 5, 6, 7, 8]\n# >>> replace_list([\"red\", \"blue\", \"green\"], [\"yellow\"])\n# [\"red\", \"blue\", \"yellow\"]\nsub replace_list\n{\n  my ($list1, $list2) = @_;\n", "entry_point": "replace_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 5, 7, 9, 10];\nmy $arg01 = [2, 4, 6, 8];\nmy $x0 = replace_list($arg00, $arg01);\nmy $v0 = [1, 3, 5, 7, 9, 2, 4, 6, 8];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5];\nmy $arg11 = [5, 6, 7, 8];\nmy $x1 = replace_list($arg10, $arg11);\nmy $v1 = [1, 2, 3, 4, 5, 6, 7, 8];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"red\", \"blue\", \"green\"];\nmy $arg21 = [\"yellow\"];\nmy $x2 = replace_list($arg20, $arg21);\nmy $v2 = [\"red\", \"blue\", \"yellow\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to replace the last element of the list with another list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/241", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to generate a 3d array having each element as '*'.\n#\n# >>> array_3d(6, 4, 3)\nn# >>> array_3d(5, 3, 4)\n# [[[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]]]\n# >>> array_3d(1, 2, 3)\n# [[[\"*\"], [\"*\"]], [[\"*\"], [\"*\"]], [[\"*\"], [\"*\"]]]\nsub array_3d\n{\n  my ($m, $n, $o) = @_;\n", "entry_point": "array_3d", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 6;\nmy $arg01 = 4;\nmy $arg02 = 3;\nmy $x0 = array_3d($arg00, $arg01, $arg02);\nmy $v0 = [[[\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $arg11 = 3;\nmy $arg12 = 4;\nmy $x1 = array_3d($arg10, $arg11, $arg12);\nmy $v1 = [[[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 2;\nmy $arg22 = 3;\nmy $x2 = array_3d($arg20, $arg21, $arg22);\nmy $v2 = [[[\"*\"], [\"*\"]], [[\"*\"], [\"*\"]], [[\"*\"], [\"*\"]]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to generate a 3d array having each element as '*'.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/242", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count total characters in a string.\n#\n# >>> count_charac(\"python programming\")\n# 18\n# >>> count_charac(\"language\")\n# 8\n# >>> count_charac(\"words\")\n# 5\nsub count_charac\n{\n  my ($str1) = @_;\n", "entry_point": "count_charac", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python programming\";\nmy $x0 = count_charac($arg00);\nmy $v0 = 18;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"language\";\nmy $x1 = count_charac($arg10);\nmy $v1 = 8;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"words\";\nmy $x2 = count_charac($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count total characters in a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/243", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort the given list based on the occurrence of first element of tuples.\n#\n# >>> sort_on_occurence([[1, \"Jake\"], [2, \"Bob\"], [1, \"Cara\"]])\n# [[1, \"Jake\", \"Cara\", 2], [2, \"Bob\", 1]]\n# >>> sort_on_occurence([[\"b\", \"ball\"], [\"a\", \"arm\"], [\"b\", \"b\"], [\"a\", \"ant\"]])\n# [[\"b\", \"ball\", \"b\", 2], [\"a\", \"arm\", \"ant\", 2]]\n# >>> sort_on_occurence([[2, \"Mark\"], [3, \"Maze\"], [2, \"Sara\"]])\n# [[2, \"Mark\", \"Sara\", 2], [3, \"Maze\", 1]]\nsub sort_on_occurence\n{\n  my ($lst) = @_;\n", "entry_point": "sort_on_occurence", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, \"Jake\"], [2, \"Bob\"], [1, \"Cara\"]];\nmy $x0 = sort_on_occurence($arg00);\nmy $v0 = [[1, \"Jake\", \"Cara\", 2], [2, \"Bob\", 1]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"b\", \"ball\"], [\"a\", \"arm\"], [\"b\", \"b\"], [\"a\", \"ant\"]];\nmy $x1 = sort_on_occurence($arg10);\nmy $v1 = [[\"b\", \"ball\", \"b\", 2], [\"a\", \"arm\", \"ant\", 2]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[2, \"Mark\"], [3, \"Maze\"], [2, \"Sara\"]];\nmy $x2 = sort_on_occurence($arg20);\nmy $v2 = [[2, \"Mark\", \"Sara\", 2], [3, \"Maze\", 1]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort the given list based on the occurrence of first element of tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/244", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the next perfect square greater than a given number.\n#\n# >>> next_perfect_square(35)\n# 36\n# >>> next_perfect_square(6)\n# 9\n# >>> next_perfect_square(9)\n# 16\nsub next_perfect_square\n{\n  my ($n) = @_;\n", "entry_point": "next_perfect_square", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 35;\nmy $x0 = next_perfect_square($arg00);\nmy $v0 = 36;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 6;\nmy $x1 = next_perfect_square($arg10);\nmy $v1 = 9;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 9;\nmy $x2 = next_perfect_square($arg20);\nmy $v2 = 16;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the next perfect square greater than a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/245", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n#\n# >>> max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9)\n# 194\n# >>> max_sum([80, 60, 30, 40, 20, 10], 6)\n# 210\n# >>> max_sum([2, 3, 14, 16, 21, 23, 29, 30], 8)\n# 138\nsub max_sum\n{\n  my ($arr, $n) = @_;\n", "entry_point": "max_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 15, 51, 45, 33, 100, 12, 18, 9];\nmy $arg01 = 9;\nmy $x0 = max_sum($arg00, $arg01);\nmy $v0 = 194;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [80, 60, 30, 40, 20, 10];\nmy $arg11 = 6;\nmy $x1 = max_sum($arg10, $arg11);\nmy $v1 = 210;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 3, 14, 16, 21, 23, 29, 30];\nmy $arg21 = 8;\nmy $x2 = max_sum($arg20, $arg21);\nmy $v2 = 138;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/246", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function for computing square roots using the babylonian method.\n#\n# >>> babylonian_squareroot(10)\n# 3.162277660168379\n# >>> babylonian_squareroot(2)\n# 1.414213562373095\n# >>> babylonian_squareroot(9)\n# 3.0\nsub babylonian_squareroot\n{\n  my ($number) = @_;\n", "entry_point": "babylonian_squareroot", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = babylonian_squareroot($arg00);\nmy $v0 = 3.162277660168379;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = babylonian_squareroot($arg10);\nmy $v1 = 1.414213562373095;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 9;\nmy $x2 = babylonian_squareroot($arg20);\nmy $v2 = 3.0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function for computing square roots using the babylonian method.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/247", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the longest palindromic subsequence in the given string.\n#\n# >>> lps(\"TENS FOR TENS\")\n# 5\n# >>> lps(\"CARDIO FOR CARDS\")\n# 7\n# >>> lps(\"PART OF THE JOURNEY IS PART\")\n# 9\nsub lps\n{\n  my ($str) = @_;\n", "entry_point": "lps", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"TENS FOR TENS\";\nmy $x0 = lps($arg00);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"CARDIO FOR CARDS\";\nmy $x1 = lps($arg10);\nmy $v1 = 7;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"PART OF THE JOURNEY IS PART\";\nmy $x2 = lps($arg20);\nmy $v2 = 9;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the longest palindromic subsequence in the given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/248", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate the harmonic sum of n-1.\n#\n# >>> harmonic_sum(7)\n# 2.5928571428571425\n# >>> harmonic_sum(4)\n# 2.083333333333333\n# >>> harmonic_sum(19)\n# 3.547739657143682\nsub harmonic_sum\n{\n  my ($n) = @_;\n", "entry_point": "harmonic_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 7;\nmy $x0 = harmonic_sum($arg00);\nmy $v0 = 2.5928571428571425;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = harmonic_sum($arg10);\nmy $v1 = 2.083333333333333;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 19;\nmy $x2 = harmonic_sum($arg20);\nmy $v2 = 3.547739657143682;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate the harmonic sum of n-1.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/249", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the intersection of two arrays using lambda function.\n#\n# >>> intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9])\n# [1, 2, 8, 9]\n# >>> intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9])\n# [3, 5, 7, 9]\n# >>> intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40])\n# [10]\nsub intersection_array\n{\n  my ($array_nums1, $array_nums2) = @_;\n", "entry_point": "intersection_array", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 5, 7, 8, 9, 10];\nmy $arg01 = [1, 2, 4, 8, 9];\nmy $x0 = intersection_array($arg00, $arg01);\nmy $v0 = [1, 2, 8, 9];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 5, 7, 8, 9, 10];\nmy $arg11 = [3, 5, 7, 9];\nmy $x1 = intersection_array($arg10, $arg11);\nmy $v1 = [3, 5, 7, 9];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 5, 7, 8, 9, 10];\nmy $arg21 = [10, 20, 30, 40];\nmy $x2 = intersection_array($arg20, $arg21);\nmy $v2 = [10];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the intersection of two arrays using lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/250", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the occcurences of an element in a tuple.\n#\n# >>> count_x([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4)\n# 0\n# >>> count_x([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10)\n# 3\n# >>> count_x([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8)\n# 4\nsub count_x\n{\n  my ($tup, $x) = @_;\n", "entry_point": "count_x", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2];\nmy $arg01 = 4;\nmy $x0 = count_x($arg00, $arg01);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2];\nmy $arg11 = 10;\nmy $x1 = count_x($arg10, $arg11);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2];\nmy $arg21 = 8;\nmy $x2 = count_x($arg20, $arg21);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the occcurences of an element in a tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/251", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to insert an element before each element of a list.\n#\n# >>> insert_element([\"Red\", \"Green\", \"Black\"], \"c\")\n# [\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"]\n# >>> insert_element([\"python\", \"java\"], \"program\")\n# [\"program\", \"python\", \"program\", \"java\"]\n# >>> insert_element([\"happy\", \"sad\"], \"laugh\")\n# [\"laugh\", \"happy\", \"laugh\", \"sad\"]\nsub insert_element\n{\n  my ($list, $element) = @_;\n", "entry_point": "insert_element", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"Red\", \"Green\", \"Black\"];\nmy $arg01 = \"c\";\nmy $x0 = insert_element($arg00, $arg01);\nmy $v0 = [\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"python\", \"java\"];\nmy $arg11 = \"program\";\nmy $x1 = insert_element($arg10, $arg11);\nmy $v1 = [\"program\", \"python\", \"program\", \"java\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"happy\", \"sad\"];\nmy $arg21 = \"laugh\";\nmy $x2 = insert_element($arg20, $arg21);\nmy $v2 = [\"laugh\", \"happy\", \"laugh\", \"sad\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to insert an element before each element of a list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/252", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to convert complex numbers to polar coordinates.\n#\n# >>> convert(1)\n# [1.0, 0.0]\n# >>> convert(4)\n# [4.0, 0.0]\n# >>> convert(5)\n# [5.0, 0.0]\nsub convert\n{\n  my ($numbers) = @_;\n", "entry_point": "convert", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $x0 = convert($arg00);\nmy $v0 = [1.0, 0.0];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = convert($arg10);\nmy $v1 = [4.0, 0.0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $x2 = convert($arg20);\nmy $v2 = [5.0, 0.0];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to convert complex numbers to polar coordinates.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/253", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count integers from a given list.\n#\n# >>> count_integer([1, 2, \"abc\", 1.2])\n# 2\n# >>> count_integer([1, 2, 3])\n# 3\n# >>> count_integer([1, 1.2, 4, 5.1])\n# 2\nsub count_integer\n{\n  my ($list1) = @_;\n", "entry_point": "count_integer", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, \"abc\", 1.2];\nmy $x0 = count_integer($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3];\nmy $x1 = count_integer($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 1.2, 4, 5.1];\nmy $x2 = count_integer($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count integers from a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/254", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find all words starting with 'a' or 'e' in a given string.\n#\n# >>> words_ae(\"python programe\")\n# [\"ame\"]\n# >>> words_ae(\"python programe language\")\n# [\"ame\", \"anguage\"]\n# >>> words_ae(\"assert statement\")\n# [\"assert\", \"atement\"]\nsub words_ae\n{\n  my ($text) = @_;\n", "entry_point": "words_ae", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python programe\";\nmy $x0 = words_ae($arg00);\nmy $v0 = [\"ame\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"python programe language\";\nmy $x1 = words_ae($arg10);\nmy $v1 = [\"ame\", \"anguage\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"assert statement\";\nmy $x2 = words_ae($arg20);\nmy $v2 = [\"assert\", \"atement\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find all words starting with 'a' or 'e' in a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/255", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n#\n# >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 1)\n# [[\"Red\"], [\"Green\"], [\"Blue\"]]\n# >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 2)\n# [[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]]\n# >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 3)\n# [[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]]\nsub combinations_colors\n{\n  my ($l, $n) = @_;\n", "entry_point": "combinations_colors", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"Red\", \"Green\", \"Blue\"];\nmy $arg01 = 1;\nmy $x0 = combinations_colors($arg00, $arg01);\nmy $v0 = [[\"Red\"], [\"Green\"], [\"Blue\"]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"Red\", \"Green\", \"Blue\"];\nmy $arg11 = 2;\nmy $x1 = combinations_colors($arg10, $arg11);\nmy $v1 = [[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"Red\", \"Green\", \"Blue\"];\nmy $arg21 = 3;\nmy $x2 = combinations_colors($arg20, $arg21);\nmy $v2 = [[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/256", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the number of prime numbers less than a given non-negative number.\n#\n# >>> count_primes_nums(5)\n# 2\n# >>> count_primes_nums(10)\n# 4\n# >>> count_primes_nums(100)\n# 25\nsub count_primes_nums\n{\n  my ($n) = @_;\n", "entry_point": "count_primes_nums", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = count_primes_nums($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $x1 = count_primes_nums($arg10);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 100;\nmy $x2 = count_primes_nums($arg20);\nmy $v2 = 25;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the number of prime numbers less than a given non-negative number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/257", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to swap two numbers.\n#\n# >>> swap_numbers(10, 20)\n# [20, 10]\n# >>> swap_numbers(15, 17)\n# [17, 15]\n# >>> swap_numbers(100, 200)\n# [200, 100]\nsub swap_numbers\n{\n  my ($a, $b) = @_;\n", "entry_point": "swap_numbers", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 20;\nmy $x0 = swap_numbers($arg00, $arg01);\nmy $v0 = [20, 10];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 15;\nmy $arg11 = 17;\nmy $x1 = swap_numbers($arg10, $arg11);\nmy $v1 = [17, 15];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 100;\nmy $arg21 = 200;\nmy $x2 = swap_numbers($arg20, $arg21);\nmy $v2 = [200, 100];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to swap two numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/258", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find number of odd elements in the given list using lambda function.\n#\n# >>> count_odd([1, 2, 3, 5, 7, 8, 10])\n# 4\n# >>> count_odd([10, 15, 14, 13, -18, 12, -20])\n# 2\n# >>> count_odd([1, 2, 4, 8, 9])\n# 2\nsub count_odd\n{\n  my ($array_nums) = @_;\n", "entry_point": "count_odd", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 5, 7, 8, 10];\nmy $x0 = count_odd($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [10, 15, 14, 13, -18, 12, -20];\nmy $x1 = count_odd($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 4, 8, 9];\nmy $x2 = count_odd($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find number of odd elements in the given list using lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/259", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to maximize the given two tuples.\n#\n# >>> maximize_elements([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n# [[6, 7], [4, 9], [2, 9], [7, 10]]\n# >>> maximize_elements([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])\n# [[7, 8], [5, 10], [3, 10], [8, 11]]\n# >>> maximize_elements([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])\n# [[8, 9], [6, 11], [4, 11], [9, 12]]\nsub maximize_elements\n{\n  my ($test_tup1, $test_tup2) = @_;\n", "entry_point": "maximize_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 3], [4, 5], [2, 9], [1, 10]];\nmy $arg01 = [[6, 7], [3, 9], [1, 1], [7, 3]];\nmy $x0 = maximize_elements($arg00, $arg01);\nmy $v0 = [[6, 7], [4, 9], [2, 9], [7, 10]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[2, 4], [5, 6], [3, 10], [2, 11]];\nmy $arg11 = [[7, 8], [4, 10], [2, 2], [8, 4]];\nmy $x1 = maximize_elements($arg10, $arg11);\nmy $v1 = [[7, 8], [5, 10], [3, 10], [8, 11]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[3, 5], [6, 7], [4, 11], [3, 12]];\nmy $arg21 = [[8, 9], [5, 11], [3, 3], [9, 5]];\nmy $x2 = maximize_elements($arg20, $arg21);\nmy $v2 = [[8, 9], [6, 11], [4, 11], [9, 12]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to maximize the given two tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/260", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n#\n# >>> newman_prime(3)\n# 7\n# >>> newman_prime(4)\n# 17\n# >>> newman_prime(5)\n# 41\nsub newman_prime\n{\n  my ($n) = @_;\n", "entry_point": "newman_prime", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $x0 = newman_prime($arg00);\nmy $v0 = 7;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = newman_prime($arg10);\nmy $v1 = 17;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $x2 = newman_prime($arg20);\nmy $v2 = 41;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/261", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to perform mathematical division operation across the given tuples.\n#\n# >>> division_elements([10, 4, 6, 9], [5, 2, 3, 3])\n# [2, 2, 2, 3]\n# >>> division_elements([12, 6, 8, 16], [6, 3, 4, 4])\n# [2, 2, 2, 4]\n# >>> division_elements([20, 14, 36, 18], [5, 7, 6, 9])\n# [4, 2, 6, 2]\nsub division_elements\n{\n  my ($test_tup1, $test_tup2) = @_;\n", "entry_point": "division_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 4, 6, 9];\nmy $arg01 = [5, 2, 3, 3];\nmy $x0 = division_elements($arg00, $arg01);\nmy $v0 = [2, 2, 2, 3];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [12, 6, 8, 16];\nmy $arg11 = [6, 3, 4, 4];\nmy $x1 = division_elements($arg10, $arg11);\nmy $v1 = [2, 2, 2, 4];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [20, 14, 36, 18];\nmy $arg21 = [5, 7, 6, 9];\nmy $x2 = division_elements($arg20, $arg21);\nmy $v2 = [4, 2, 6, 2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to perform mathematical division operation across the given tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/262", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to split a given list into two parts where the length of the first part of the list is given.\n#\n# >>> split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3)\n# [[1, 1, 2], [3, 4, 4, 5, 1]]\n# >>> split_two_parts([\"a\", \"b\", \"c\", \"d\"], 2)\n# [[\"a\", \"b\"], [\"c\", \"d\"]]\n# >>> split_two_parts([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4)\n# [[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]\nsub split_two_parts\n{\n  my ($list1, $l) = @_;\n", "entry_point": "split_two_parts", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 1, 2, 3, 4, 4, 5, 1];\nmy $arg01 = 3;\nmy $x0 = split_two_parts($arg00, $arg01);\nmy $v0 = [[1, 1, 2], [3, 4, 4, 5, 1]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"a\", \"b\", \"c\", \"d\"];\nmy $arg11 = 2;\nmy $x1 = split_two_parts($arg10, $arg11);\nmy $v1 = [[\"a\", \"b\"], [\"c\", \"d\"]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"];\nmy $arg21 = 4;\nmy $x2 = split_two_parts($arg20, $arg21);\nmy $v2 = [[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to split a given list into two parts where the length of the first part of the list is given.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/263", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to merge two dictionaries.\n#\n# >>> merge_dict({\"a\" => 100, \"b\" => 200}, {\"x\" => 300, \"y\" => 200})\n# {\"x\" => 300, \"y\" => 200, \"a\" => 100, \"b\" => 200}\n# >>> merge_dict({\"a\" => 900, \"b\" => 900, \"d\" => 900}, {\"a\" => 900, \"b\" => 900, \"d\" => 900})\n# {\"a\" => 900, \"b\" => 900, \"d\" => 900}\n# >>> merge_dict({\"a\" => 10, \"b\" => 20}, {\"x\" => 30, \"y\" => 40})\n# {\"x\" => 30, \"y\" => 40, \"a\" => 10, \"b\" => 20}\nsub merge_dict\n{\n  my ($d1, $d2) = @_;\n", "entry_point": "merge_dict", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {\"a\" => 100, \"b\" => 200};\nmy $arg01 = {\"x\" => 300, \"y\" => 200};\nmy $x0 = merge_dict($arg00, $arg01);\nmy $v0 = {\"x\" => 300, \"y\" => 200, \"a\" => 100, \"b\" => 200};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {\"a\" => 900, \"b\" => 900, \"d\" => 900};\nmy $arg11 = {\"a\" => 900, \"b\" => 900, \"d\" => 900};\nmy $x1 = merge_dict($arg10, $arg11);\nmy $v1 = {\"a\" => 900, \"b\" => 900, \"d\" => 900};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {\"a\" => 10, \"b\" => 20};\nmy $arg21 = {\"x\" => 30, \"y\" => 40};\nmy $x2 = merge_dict($arg20, $arg21);\nmy $v2 = {\"x\" => 30, \"y\" => 40, \"a\" => 10, \"b\" => 20};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to merge two dictionaries.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/264", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate a dog's age in dog's years.\n#\n# >>> dog_age(12)\n# 61\n# >>> dog_age(15)\n# 73\n# >>> dog_age(24)\n# 109\nsub dog_age\n{\n  my ($h_age) = @_;\n", "entry_point": "dog_age", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 12;\nmy $x0 = dog_age($arg00);\nmy $v0 = 61;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 15;\nmy $x1 = dog_age($arg10);\nmy $v1 = 73;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 24;\nmy $x2 = dog_age($arg20);\nmy $v2 = 109;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate a dog's age in dog's years.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/265", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to split a list for every nth element.\n#\n# >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], 3)\n# [[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]]\n# >>> list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3)\n# [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]\n# >>> list_split([\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"], 2)\n# [[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]]\nsub list_split\n{\n  my ($s, $step) = @_;\n", "entry_point": "list_split", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"];\nmy $arg01 = 3;\nmy $x0 = list_split($arg00, $arg01);\nmy $v0 = [[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nmy $arg11 = 3;\nmy $x1 = list_split($arg10, $arg11);\nmy $v1 = [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"];\nmy $arg21 = 2;\nmy $x2 = list_split($arg20, $arg21);\nmy $v2 = [[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to split a list for every nth element.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/266", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the lateral surface area of a cube.\n#\n# >>> lateralsurface_cube(5)\n# 100\n# >>> lateralsurface_cube(9)\n# 324\n# >>> lateralsurface_cube(10)\n# 400\nsub lateralsurface_cube\n{\n  my ($l) = @_;\n", "entry_point": "lateralsurface_cube", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = lateralsurface_cube($arg00);\nmy $v0 = 100;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 9;\nmy $x1 = lateralsurface_cube($arg10);\nmy $v1 = 324;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $x2 = lateralsurface_cube($arg20);\nmy $v2 = 400;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the lateral surface area of a cube.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/267", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of squares of first n odd natural numbers.\n#\n# >>> square_sum(2)\n# 10\n# >>> square_sum(3)\n# 35\n# >>> square_sum(4)\n# 84\nsub square_sum\n{\n  my ($n) = @_;\n", "entry_point": "square_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = square_sum($arg00);\nmy $v0 = 10;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $x1 = square_sum($arg10);\nmy $v1 = 35;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $x2 = square_sum($arg20);\nmy $v2 = 84;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of squares of first n odd natural numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/268", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the n'th star number.\n#\n# >>> find_star_num(3)\n# 37\n# >>> find_star_num(4)\n# 73\n# >>> find_star_num(5)\n# 121\nsub find_star_num\n{\n  my ($n) = @_;\n", "entry_point": "find_star_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $x0 = find_star_num($arg00);\nmy $v0 = 37;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = find_star_num($arg10);\nmy $v1 = 73;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $x2 = find_star_num($arg20);\nmy $v2 = 121;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the n'th star number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/269", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the ascii value of a character.\n#\n# >>> ascii_value(\"A\")\n# 65\n# >>> ascii_value(\"R\")\n# 82\n# >>> ascii_value(\"S\")\n# 83\nsub ascii_value\n{\n  my ($k) = @_;\n", "entry_point": "ascii_value", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"A\";\nmy $x0 = ascii_value($arg00);\nmy $v0 = 65;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"R\";\nmy $x1 = ascii_value($arg10);\nmy $v1 = 82;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"S\";\nmy $x2 = ascii_value($arg20);\nmy $v2 = 83;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the ascii value of a character.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/270", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of even numbers at even positions.\n#\n# >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8], 6)\n# 30\n# >>> sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10)\n# 26\n# >>> sum_even_and_even_index([5, 6, 12, 1], 4)\n# 12\nsub sum_even_and_even_index\n{\n  my ($arr, $n) = @_;\n", "entry_point": "sum_even_and_even_index", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 6, 12, 1, 18, 8];\nmy $arg01 = 6;\nmy $x0 = sum_even_and_even_index($arg00, $arg01);\nmy $v0 = 30;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [3, 20, 17, 9, 2, 10, 18, 13, 6, 18];\nmy $arg11 = 10;\nmy $x1 = sum_even_and_even_index($arg10, $arg11);\nmy $v1 = 26;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [5, 6, 12, 1];\nmy $arg21 = 4;\nmy $x2 = sum_even_and_even_index($arg20, $arg21);\nmy $v2 = 12;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of even numbers at even positions.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/271", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of fifth power of first n even natural numbers.\n#\n# >>> even_power_sum(2)\n# 1056\n# >>> even_power_sum(3)\n# 8832\n# >>> even_power_sum(1)\n# 32\nsub even_power_sum\n{\n  my ($n) = @_;\n", "entry_point": "even_power_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = even_power_sum($arg00);\nmy $v0 = 1056;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $x1 = even_power_sum($arg10);\nmy $v1 = 8832;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $x2 = even_power_sum($arg20);\nmy $v2 = 32;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of fifth power of first n even natural numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/272", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to perfom the rear element extraction from list of tuples records.\n#\n# >>> rear_extract([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]])\n# [21, 20, 19]\n# >>> rear_extract([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]])\n# [36, 25, 45]\n# >>> rear_extract([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]])\n# [14, 36, 56]\nsub rear_extract\n{\n  my ($test_list) = @_;\n", "entry_point": "rear_extract", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]];\nmy $x0 = rear_extract($arg00);\nmy $v0 = [21, 20, 19];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]];\nmy $x1 = rear_extract($arg10);\nmy $v1 = [36, 25, 45];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]];\nmy $x2 = rear_extract($arg20);\nmy $v2 = [14, 36, 56];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to perfom the rear element extraction from list of tuples records.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/273", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to substract the contents of one tuple with corresponding index of other tuple.\n#\n# >>> substract_elements([10, 4, 5], [2, 5, 18])\n# [8, -1, -13]\n# >>> substract_elements([11, 2, 3], [24, 45, 16])\n# [-13, -43, -13]\n# >>> substract_elements([7, 18, 9], [10, 11, 12])\n# [-3, 7, -3]\nsub substract_elements\n{\n  my ($test_tup1, $test_tup2) = @_;\n", "entry_point": "substract_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 4, 5];\nmy $arg01 = [2, 5, 18];\nmy $x0 = substract_elements($arg00, $arg01);\nmy $v0 = [8, -1, -13];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [11, 2, 3];\nmy $arg11 = [24, 45, 16];\nmy $x1 = substract_elements($arg10, $arg11);\nmy $v1 = [-13, -43, -13];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [7, 18, 9];\nmy $arg21 = [10, 11, 12];\nmy $x2 = substract_elements($arg20, $arg21);\nmy $v2 = [-3, 7, -3];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to substract the contents of one tuple with corresponding index of other tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/274", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find sum of even index binomial coefficients.\n#\n# >>> even_binomial_coeff_sum(4)\n# 8\n# >>> even_binomial_coeff_sum(6)\n# 32\n# >>> even_binomial_coeff_sum(2)\n# 2\nsub even_binomial_coeff_sum\n{\n  my ($n) = @_;\n", "entry_point": "even_binomial_coeff_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $x0 = even_binomial_coeff_sum($arg00);\nmy $v0 = 8;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 6;\nmy $x1 = even_binomial_coeff_sum($arg10);\nmy $v1 = 32;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $x2 = even_binomial_coeff_sum($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find sum of even index binomial coefficients.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/275", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the position of the last removed element from the given array.\n#\n# >>> get_position([2, 5, 4], 3, 2)\n# 2\n# >>> get_position([4, 3], 2, 2)\n# 2\n# >>> get_position([1, 2, 3, 4], 4, 1)\n# 4\nsub get_position\n{\n  my ($a, $n, $m) = @_;\n", "entry_point": "get_position", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 5, 4];\nmy $arg01 = 3;\nmy $arg02 = 2;\nmy $x0 = get_position($arg00, $arg01, $arg02);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 3];\nmy $arg11 = 2;\nmy $arg12 = 2;\nmy $x1 = get_position($arg10, $arg11, $arg12);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4];\nmy $arg21 = 4;\nmy $arg22 = 1;\nmy $x2 = get_position($arg20, $arg21, $arg22);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the position of the last removed element from the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/276", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the volume of a cylinder.\n#\n# >>> volume_cylinder(10, 5)\n# 1570.7500000000002\n# >>> volume_cylinder(4, 5)\n# 251.32000000000002\n# >>> volume_cylinder(4, 10)\n# 502.64000000000004\nsub volume_cylinder\n{\n  my ($r, $h) = @_;\n", "entry_point": "volume_cylinder", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 5;\nmy $x0 = volume_cylinder($arg00, $arg01);\nmy $v0 = 1570.7500000000002;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $arg11 = 5;\nmy $x1 = volume_cylinder($arg10, $arg11);\nmy $v1 = 251.32000000000002;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $arg21 = 10;\nmy $x2 = volume_cylinder($arg20, $arg21);\nmy $v2 = 502.64000000000004;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the volume of a cylinder.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/277", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to filter a dictionary based on values.\n#\n# >>> dict_filter({\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190}, 170)\n# {\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Pierre Cox\" => 190}\n# >>> dict_filter({\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190}, 180)\n# {\"Alden Cantrell\" => 180, \"Pierre Cox\" => 190}\n# >>> dict_filter({\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190}, 190)\n# {\"Pierre Cox\" => 190}\nsub dict_filter\n{\n  my ($dict, $n) = @_;\n", "entry_point": "dict_filter", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190};\nmy $arg01 = 170;\nmy $x0 = dict_filter($arg00, $arg01);\nmy $v0 = {\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Pierre Cox\" => 190};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190};\nmy $arg11 = 180;\nmy $x1 = dict_filter($arg10, $arg11);\nmy $v1 = {\"Alden Cantrell\" => 180, \"Pierre Cox\" => 190};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190};\nmy $arg21 = 190;\nmy $x2 = dict_filter($arg20, $arg21);\nmy $v2 = {\"Pierre Cox\" => 190};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to filter a dictionary based on values.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/278", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the element count that occurs before the record in the given tuple.\n#\n# >>> count_first_elements([1, 5, 7, [4, 6], 10])\n# 3\n# >>> count_first_elements([2, 9, [5, 7], 11])\n# 2\n# >>> count_first_elements([11, 15, 5, 8, [2, 3], 8])\n# 4\nsub count_first_elements\n{\n  my ($test_tup) = @_;\n", "entry_point": "count_first_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 5, 7, [4, 6], 10];\nmy $x0 = count_first_elements($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 9, [5, 7], 11];\nmy $x1 = count_first_elements($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [11, 15, 5, 8, [2, 3], 8];\nmy $x2 = count_first_elements($arg20);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the element count that occurs before the record in the given tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/279", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the nth decagonal number.\n#\n# >>> is_num_decagonal(3)\n# 27\n# >>> is_num_decagonal(7)\n# 175\n# >>> is_num_decagonal(10)\n# 370\nsub is_num_decagonal\n{\n  my ($n) = @_;\n", "entry_point": "is_num_decagonal", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $x0 = is_num_decagonal($arg00);\nmy $v0 = 27;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 7;\nmy $x1 = is_num_decagonal($arg10);\nmy $v1 = 175;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $x2 = is_num_decagonal($arg20);\nmy $v2 = 370;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the nth decagonal number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/280", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to search an element in the given array by using sequential search.\n#\n# >>> sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31)\n# [1, 3]\n# >>> sequential_search([12, 32, 45, 62, 35, 47, 44, 61], 61)\n# [1, 7]\n# >>> sequential_search([9, 10, 17, 19, 22, 39, 48, 56], 48)\n# [1, 6]\nsub sequential_search\n{\n  my ($dlist, $item) = @_;\n", "entry_point": "sequential_search", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [11, 23, 58, 31, 56, 77, 43, 12, 65, 19];\nmy $arg01 = 31;\nmy $x0 = sequential_search($arg00, $arg01);\nmy $v0 = [1, 3];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [12, 32, 45, 62, 35, 47, 44, 61];\nmy $arg11 = 61;\nmy $x1 = sequential_search($arg10, $arg11);\nmy $v1 = [1, 7];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [9, 10, 17, 19, 22, 39, 48, 56];\nmy $arg21 = 48;\nmy $x2 = sequential_search($arg20, $arg21);\nmy $v2 = [1, 6];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to search an element in the given array by using sequential search.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/281", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check if the elements of a given list are unique or not.\n#\n# >>> all_unique([1, 2, 3])\n# 1\n# >>> all_unique([1, 2, 1, 2])\n# 0\n# >>> all_unique([1, 2, 3, 4, 5])\n# 1\nsub all_unique\n{\n  my ($test_list) = @_;\n", "entry_point": "all_unique", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $x0 = all_unique($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 1, 2];\nmy $x1 = all_unique($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 5];\nmy $x2 = all_unique($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check if the elements of a given list are unique or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/282", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to substaract two lists using map and lambda function.\n#\n# >>> sub_list([1, 2, 3], [4, 5, 6])\n# [-3, -3, -3]\n# >>> sub_list([1, 2], [3, 4])\n# [-2, -2]\n# >>> sub_list([90, 120], [50, 70])\n# [40, 50]\nsub sub_list\n{\n  my ($nums1, $nums2) = @_;\n", "entry_point": "sub_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $arg01 = [4, 5, 6];\nmy $x0 = sub_list($arg00, $arg01);\nmy $v0 = [-3, -3, -3];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2];\nmy $arg11 = [3, 4];\nmy $x1 = sub_list($arg10, $arg11);\nmy $v1 = [-2, -2];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [90, 120];\nmy $arg21 = [50, 70];\nmy $x2 = sub_list($arg20, $arg21);\nmy $v2 = [40, 50];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to substaract two lists using map and lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/283", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the frequency of each digit is less than or equal to the digit itself.\n#\n# >>> validate(1234)\n# 1\n# >>> validate(51241)\n# 0\n# >>> validate(321)\n# 1\nsub validate\n{\n  my ($n) = @_;\n", "entry_point": "validate", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1234;\nmy $x0 = validate($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 51241;\nmy $x1 = validate($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 321;\nmy $x2 = validate($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the frequency of each digit is less than or equal to the digit itself.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/284", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether all items of a list are equal to a given string.\n#\n# >>> check_element([\"green\", \"orange\", \"black\", \"white\"], \"blue\")\n# 0\n# >>> check_element([1, 2, 3, 4], 7)\n# 0\n# >>> check_element([\"green\", \"green\", \"green\", \"green\"], \"green\")\n# 1\nsub check_element\n{\n  my ($list, $element) = @_;\n", "entry_point": "check_element", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"green\", \"orange\", \"black\", \"white\"];\nmy $arg01 = \"blue\";\nmy $x0 = check_element($arg00, $arg01);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4];\nmy $arg11 = 7;\nmy $x1 = check_element($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"green\", \"green\", \"green\", \"green\"];\nmy $arg21 = \"green\";\nmy $x2 = check_element($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether all items of a list are equal to a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/285", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function that matches a string that has an a followed by two to three 'b'.\n#\n# >>> text_match_two_three(\"ac\")\n# \"Not matched!\"\n# >>> text_match_two_three(\"dc\")\n# \"Not matched!\"\n# >>> text_match_two_three(\"abbbba\")\n# \"Found a match!\"\nsub text_match_two_three\n{\n  my ($text) = @_;\n", "entry_point": "text_match_two_three", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"ac\";\nmy $x0 = text_match_two_three($arg00);\nmy $v0 = \"Not matched!\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"dc\";\nmy $x1 = text_match_two_three($arg10);\nmy $v1 = \"Not matched!\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abbbba\";\nmy $x2 = text_match_two_three($arg20);\nmy $v2 = \"Found a match!\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function that matches a string that has an a followed by two to three 'b'.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/286", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n#\n# >>> max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)\n# 30\n# >>> max_sub_array_sum_repeated([-1, 10, 20], 3, 2)\n# 59\n# >>> max_sub_array_sum_repeated([-1, -2, -3], 3, 3)\n# -1\nsub max_sub_array_sum_repeated\n{\n  my ($a, $n, $k) = @_;\n", "entry_point": "max_sub_array_sum_repeated", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 20, -30, -1];\nmy $arg01 = 4;\nmy $arg02 = 3;\nmy $x0 = max_sub_array_sum_repeated($arg00, $arg01, $arg02);\nmy $v0 = 30;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [-1, 10, 20];\nmy $arg11 = 3;\nmy $arg12 = 2;\nmy $x1 = max_sub_array_sum_repeated($arg10, $arg11, $arg12);\nmy $v1 = 59;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [-1, -2, -3];\nmy $arg21 = 3;\nmy $arg22 = 3;\nmy $x2 = max_sub_array_sum_repeated($arg20, $arg21, $arg22);\nmy $v2 = -1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/287", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of squares of first n even natural numbers.\n#\n# >>> square_sum(2)\n# 20\n# >>> square_sum(3)\n# 56\n# >>> square_sum(4)\n# 120\nsub square_sum\n{\n  my ($n) = @_;\n", "entry_point": "square_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = square_sum($arg00);\nmy $v0 = 20;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $x1 = square_sum($arg10);\nmy $v1 = 56;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $x2 = square_sum($arg20);\nmy $v2 = 120;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of squares of first n even natural numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/288", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count array elements having modular inverse under given prime number p equal to itself.\n#\n# >>> modular_inverse([1, 6, 4, 5], 4, 7)\n# 2\n# >>> modular_inverse([1, 3, 8, 12, 12], 5, 13)\n# 3\n# >>> modular_inverse([2, 3, 4, 5], 4, 6)\n# 1\nsub modular_inverse\n{\n  my ($arr, $n, $p) = @_;\n", "entry_point": "modular_inverse", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 6, 4, 5];\nmy $arg01 = 4;\nmy $arg02 = 7;\nmy $x0 = modular_inverse($arg00, $arg01, $arg02);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 3, 8, 12, 12];\nmy $arg11 = 5;\nmy $arg12 = 13;\nmy $x1 = modular_inverse($arg10, $arg11, $arg12);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 3, 4, 5];\nmy $arg21 = 4;\nmy $arg22 = 6;\nmy $x2 = modular_inverse($arg20, $arg21, $arg22);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count array elements having modular inverse under given prime number p equal to itself.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/289", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to calculate the number of odd days in a given year.\n#\n# >>> odd_days(100)\n# 5\n# >>> odd_days(50)\n# 6\n# >>> odd_days(75)\n# 2\nsub odd_days\n{\n  my ($n) = @_;\n", "entry_point": "odd_days", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 100;\nmy $x0 = odd_days($arg00);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 50;\nmy $x1 = odd_days($arg10);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 75;\nmy $x2 = odd_days($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to calculate the number of odd days in a given year.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/290", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the list of lists with maximum length.\n#\n# >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n# [3, [13, 15, 17]]\n# >>> max_length([[1], [5, 7], [10, 12, 14, 15]])\n# [4, [10, 12, 14, 15]]\n# >>> max_length([[5], [15, 20, 25]])\n# [3, [15, 20, 25]]\nsub max_length\n{\n  my ($list1) = @_;\n", "entry_point": "max_length", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]];\nmy $x0 = max_length($arg00);\nmy $v0 = [3, [13, 15, 17]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1], [5, 7], [10, 12, 14, 15]];\nmy $x1 = max_length($arg10);\nmy $v1 = [4, [10, 12, 14, 15]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[5], [15, 20, 25]];\nmy $x2 = max_length($arg20);\nmy $v2 = [3, [15, 20, 25]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the list of lists with maximum length.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/291", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n#\n# >>> count_no_of_ways(2, 4)\n# 16\n# >>> count_no_of_ways(3, 2)\n# 6\n# >>> count_no_of_ways(4, 4)\n# 228\nsub count_no_of_ways\n{\n  my ($n, $k) = @_;\n", "entry_point": "count_no_of_ways", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $arg01 = 4;\nmy $x0 = count_no_of_ways($arg00, $arg01);\nmy $v0 = 16;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $arg11 = 2;\nmy $x1 = count_no_of_ways($arg10, $arg11);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $arg21 = 4;\nmy $x2 = count_no_of_ways($arg20, $arg21);\nmy $v2 = 228;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/292", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find quotient of two numbers.\n#\n# >>> find(10, 3)\n# 3\n# >>> find(4, 2)\n# 2\n# >>> find(20, 5)\n# 4\nsub find\n{\n  my ($n, $m) = @_;\n", "entry_point": "find", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 3;\nmy $x0 = find($arg00, $arg01);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $arg11 = 2;\nmy $x1 = find($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 20;\nmy $arg21 = 5;\nmy $x2 = find($arg20, $arg21);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find quotient of two numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/293", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the third side of a right angled triangle.\n#\n# >>> otherside_rightangle(7, 8)\n# 10.63014581273465\n# >>> otherside_rightangle(3, 4)\n# 5\n# >>> otherside_rightangle(7, 15)\n# 16.55294535724685\nsub otherside_rightangle\n{\n  my ($w, $h) = @_;\n", "entry_point": "otherside_rightangle", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 7;\nmy $arg01 = 8;\nmy $x0 = otherside_rightangle($arg00, $arg01);\nmy $v0 = 10.63014581273465;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $arg11 = 4;\nmy $x1 = otherside_rightangle($arg10, $arg11);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 7;\nmy $arg21 = 15;\nmy $x2 = otherside_rightangle($arg20, $arg21);\nmy $v2 = 16.55294535724685;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the third side of a right angled triangle.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/294", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the maximum value in a given heterogeneous list.\n#\n# >>> max_val([\"Python\", 3, 2, 4, 5, \"version\"])\n# 5\n# >>> max_val([\"Python\", 15, 20, 25])\n# 25\n# >>> max_val([\"Python\", 30, 20, 40, 50, \"version\"])\n# 50\nsub max_val\n{\n  my ($listval) = @_;\n", "entry_point": "max_val", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"Python\", 3, 2, 4, 5, \"version\"];\nmy $x0 = max_val($arg00);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"Python\", 15, 20, 25];\nmy $x1 = max_val($arg10);\nmy $v1 = 25;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"Python\", 30, 20, 40, 50, \"version\"];\nmy $x2 = max_val($arg20);\nmy $v2 = 50;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the maximum value in a given heterogeneous list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/295", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to return the sum of all divisors of a number.\n#\n# >>> sum_div(8)\n# 7\n# >>> sum_div(12)\n# 16\n# >>> sum_div(7)\n# 1\nsub sum_div\n{\n  my ($number) = @_;\n", "entry_point": "sum_div", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 8;\nmy $x0 = sum_div($arg00);\nmy $v0 = 7;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 12;\nmy $x1 = sum_div($arg10);\nmy $v1 = 16;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 7;\nmy $x2 = sum_div($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to return the sum of all divisors of a number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/296", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count inversions in an array.\n#\n# >>> get_inv_count([1, 20, 6, 4, 5], 5)\n# 5\n# >>> get_inv_count([1, 2, 1], 3)\n# 1\n# >>> get_inv_count([1, 2, 5, 6, 1], 5)\n# 3\nsub get_inv_count\n{\n  my ($arr, $n) = @_;\n", "entry_point": "get_inv_count", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 20, 6, 4, 5];\nmy $arg01 = 5;\nmy $x0 = get_inv_count($arg00, $arg01);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 1];\nmy $arg11 = 3;\nmy $x1 = get_inv_count($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 5, 6, 1];\nmy $arg21 = 5;\nmy $x2 = get_inv_count($arg20, $arg21);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count inversions in an array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/297", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to flatten a given nested list structure.\n#\n# >>> flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n# [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n# >>> flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\n# [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n# >>> flatten_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n# [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\nsub flatten_list\n{\n  my ($list1) = @_;\n", "entry_point": "flatten_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]];\nmy $x0 = flatten_list($arg00);\nmy $v0 = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]];\nmy $x1 = flatten_list($arg10);\nmy $v1 = [10, 20, 40, 30, 56, 25, 10, 20, 33, 40];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]];\nmy $x2 = flatten_list($arg20);\nmy $v2 = [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to flatten a given nested list structure.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/298", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the nested list elements which are present in another list.\n#\n# >>> intersection_nested_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])\n# [[12], [7, 11], [1, 5, 8]]\n# >>> intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])\n# [[], []]\n# >>> intersection_nested_lists([\"john\", \"amal\", \"joel\", \"george\"], [[\"john\"], [\"jack\", \"john\", \"mary\"], [\"howard\", \"john\"], [\"jude\"]])\n# [[\"john\"], [\"john\"], [\"john\"], []]\nsub intersection_nested_lists\n{\n  my ($l1, $l2) = @_;\n", "entry_point": "intersection_nested_lists", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nmy $arg01 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]];\nmy $x0 = intersection_nested_lists($arg00, $arg01);\nmy $v0 = [[12], [7, 11], [1, 5, 8]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[2, 3, 1], [4, 5], [6, 8]];\nmy $arg11 = [[4, 5], [6, 8]];\nmy $x1 = intersection_nested_lists($arg10, $arg11);\nmy $v1 = [[], []];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"john\", \"amal\", \"joel\", \"george\"];\nmy $arg21 = [[\"john\"], [\"jack\", \"john\", \"mary\"], [\"howard\", \"john\"], [\"jude\"]];\nmy $x2 = intersection_nested_lists($arg20, $arg21);\nmy $v2 = [[\"john\"], [\"john\"], [\"john\"], []];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the nested list elements which are present in another list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/299", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate the maximum aggregate from the list of tuples.\n#\n# >>> max_aggregate([[\"Juan Whelan\", 90], [\"Sabah Colley\", 88], [\"Peter Nichols\", 7], [\"Juan Whelan\", 122], [\"Sabah Colley\", 84]])\n# [\"Juan Whelan\", 212]\n# >>> max_aggregate([[\"Juan Whelan\", 50], [\"Sabah Colley\", 48], [\"Peter Nichols\", 37], [\"Juan Whelan\", 22], [\"Sabah Colley\", 14]])\n# [\"Juan Whelan\", 72]\n# >>> max_aggregate([[\"Juan Whelan\", 10], [\"Sabah Colley\", 20], [\"Peter Nichols\", 30], [\"Juan Whelan\", 40], [\"Sabah Colley\", 50]])\n# [\"Sabah Colley\", 70]\nsub max_aggregate\n{\n  my ($stdata) = @_;\n", "entry_point": "max_aggregate", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"Juan Whelan\", 90], [\"Sabah Colley\", 88], [\"Peter Nichols\", 7], [\"Juan Whelan\", 122], [\"Sabah Colley\", 84]];\nmy $x0 = max_aggregate($arg00);\nmy $v0 = [\"Juan Whelan\", 212];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"Juan Whelan\", 50], [\"Sabah Colley\", 48], [\"Peter Nichols\", 37], [\"Juan Whelan\", 22], [\"Sabah Colley\", 14]];\nmy $x1 = max_aggregate($arg10);\nmy $v1 = [\"Juan Whelan\", 72];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"Juan Whelan\", 10], [\"Sabah Colley\", 20], [\"Peter Nichols\", 30], [\"Juan Whelan\", 40], [\"Sabah Colley\", 50]];\nmy $x2 = max_aggregate($arg20);\nmy $v2 = [\"Sabah Colley\", 70];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate the maximum aggregate from the list of tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/300", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n#\n# >>> count_binary_seq(1)\n# 2.0\n# >>> count_binary_seq(2)\n# 6.0\n# >>> count_binary_seq(3)\n# 20.0\nsub count_binary_seq\n{\n  my ($n) = @_;\n", "entry_point": "count_binary_seq", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $x0 = count_binary_seq($arg00);\nmy $v0 = 2.0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = count_binary_seq($arg10);\nmy $v1 = 6.0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $x2 = count_binary_seq($arg20);\nmy $v2 = 20.0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/301", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the depth of a dictionary.\n#\n# >>> dict_depth({\"a\" => 1, \"b\" => {\"c\" => {\"d\" => {}}}})\n# 4\n# >>> dict_depth({\"a\" => 1, \"b\" => {\"c\" => \"python\"}})\n# 2\n# >>> dict_depth({1 => \"Sun\", 2 => {3 => {4 => \"Mon\"}}})\n# 3\nsub dict_depth\n{\n  my ($d) = @_;\n", "entry_point": "dict_depth", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {\"a\" => 1, \"b\" => {\"c\" => {\"d\" => {}}}};\nmy $x0 = dict_depth($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {\"a\" => 1, \"b\" => {\"c\" => \"python\"}};\nmy $x1 = dict_depth($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {1 => \"Sun\", 2 => {3 => {4 => \"Mon\"}}};\nmy $x2 = dict_depth($arg20);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the depth of a dictionary.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/302", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the most significant bit number which is also a set bit.\n#\n# >>> set_bit_number(6)\n# 4\n# >>> set_bit_number(10)\n# 8\n# >>> set_bit_number(18)\n# 16\nsub set_bit_number\n{\n  my ($n) = @_;\n", "entry_point": "set_bit_number", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 6;\nmy $x0 = set_bit_number($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $x1 = set_bit_number($arg10);\nmy $v1 = 8;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 18;\nmy $x2 = set_bit_number($arg20);\nmy $v2 = 16;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the most significant bit number which is also a set bit.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/303", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the count of inversion of two types are same or not.\n#\n# >>> solve([1, 0, 2], 3)\n# 1\n# >>> solve([1, 2, 0], 3)\n# 0\n# >>> solve([1, 2, 1], 3)\n# 1\nsub solve\n{\n  my ($a, $n) = @_;\n", "entry_point": "solve", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 0, 2];\nmy $arg01 = 3;\nmy $x0 = solve($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 0];\nmy $arg11 = 3;\nmy $x1 = solve($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 1];\nmy $arg21 = 3;\nmy $x2 = solve($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the count of inversion of two types are same or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/304", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find element at a given index after number of rotations.\n#\n# >>> find_element([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1)\n# 3\n# >>> find_element([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2)\n# 3\n# >>> find_element([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1)\n# 1\nsub find_element\n{\n  my ($arr, $ranges, $rotations, $index) = @_;\n", "entry_point": "find_element", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5];\nmy $arg01 = [[0, 2], [0, 3]];\nmy $arg02 = 2;\nmy $arg03 = 1;\nmy $x0 = find_element($arg00, $arg01, $arg02, $arg03);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4];\nmy $arg11 = [[0, 1], [0, 2]];\nmy $arg12 = 1;\nmy $arg13 = 2;\nmy $x1 = find_element($arg10, $arg11, $arg12, $arg13);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 5, 6];\nmy $arg21 = [[0, 1], [0, 2]];\nmy $arg22 = 1;\nmy $arg23 = 1;\nmy $x2 = find_element($arg20, $arg21, $arg22, $arg23);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find element at a given index after number of rotations.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/305", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to match two words from a list of words starting with letter 'p'.\n#\n# >>> start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n# [\"Python\", \"PHP\"]\n# >>> start_withp([\"Python Programming\", \"Java Programming\"])\n# [\"Python\", \"Programming\"]\n# >>> start_withp([\"Pqrst Pqr\", \"qrstuv\"])\n# [\"Pqrst\", \"Pqr\"]\nsub start_withp\n{\n  my ($words) = @_;\n", "entry_point": "start_withp", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"Python PHP\", \"Java JavaScript\", \"c c++\"];\nmy $x0 = start_withp($arg00);\nmy $v0 = [\"Python\", \"PHP\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"Python Programming\", \"Java Programming\"];\nmy $x1 = start_withp($arg10);\nmy $v1 = [\"Python\", \"Programming\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"Pqrst Pqr\", \"qrstuv\"];\nmy $x2 = start_withp($arg20);\nmy $v2 = [\"Pqrst\", \"Pqr\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to match two words from a list of words starting with letter 'p'.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/306", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# >>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6)\n# 11\n# >>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 2, 5)\n# 7\n# >>> max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4)\n# 71\nsub max_sum_increasing_subseq\n{\n  my ($a, $n, $index, $k) = @_;\n", "entry_point": "max_sum_increasing_subseq", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 101, 2, 3, 100, 4, 5];\nmy $arg01 = 7;\nmy $arg02 = 4;\nmy $arg03 = 6;\nmy $x0 = max_sum_increasing_subseq($arg00, $arg01, $arg02, $arg03);\nmy $v0 = 11;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 101, 2, 3, 100, 4, 5];\nmy $arg11 = 7;\nmy $arg12 = 2;\nmy $arg13 = 5;\nmy $x1 = max_sum_increasing_subseq($arg10, $arg11, $arg12, $arg13);\nmy $v1 = 7;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [11, 15, 19, 21, 26, 28, 31];\nmy $arg21 = 7;\nmy $arg22 = 2;\nmy $arg23 = 4;\nmy $x2 = max_sum_increasing_subseq($arg20, $arg21, $arg22, $arg23);\nmy $v2 = 71;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/307", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to get a colon of a tuple.\n#\n# >>> colon_tuplex([\"HELLO\", 5, [], 1], 2, 50)\n# [\"HELLO\", 5, [50], 1]\n# >>> colon_tuplex([\"HELLO\", 5, [], 1], 2, 100)\n# [\"HELLO\", 5, [100], 1]\n# >>> colon_tuplex([\"HELLO\", 5, [], 1], 2, 500)\n# [\"HELLO\", 5, [500], 1]\nsub colon_tuplex\n{\n  my ($tuplex, $m, $n) = @_;\n", "entry_point": "colon_tuplex", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"HELLO\", 5, [], 1];\nmy $arg01 = 2;\nmy $arg02 = 50;\nmy $x0 = colon_tuplex($arg00, $arg01, $arg02);\nmy $v0 = [\"HELLO\", 5, [50], 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"HELLO\", 5, [], 1];\nmy $arg11 = 2;\nmy $arg12 = 100;\nmy $x1 = colon_tuplex($arg10, $arg11, $arg12);\nmy $v1 = [\"HELLO\", 5, [100], 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"HELLO\", 5, [], 1];\nmy $arg21 = 2;\nmy $arg22 = 500;\nmy $x2 = colon_tuplex($arg20, $arg21, $arg22);\nmy $v2 = [\"HELLO\", 5, [500], 1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to get a colon of a tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/308", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the specified number of largest products from two given lists.\n#\n# >>> large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3)\n# [60, 54, 50]\n# >>> large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4)\n# [60, 54, 50, 48]\n# >>> large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5)\n# [60, 54, 50, 48, 45]\nsub large_product\n{\n  my ($nums1, $nums2, $n) = @_;\n", "entry_point": "large_product", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6];\nmy $arg01 = [3, 6, 8, 9, 10, 6];\nmy $arg02 = 3;\nmy $x0 = large_product($arg00, $arg01, $arg02);\nmy $v0 = [60, 54, 50];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5, 6];\nmy $arg11 = [3, 6, 8, 9, 10, 6];\nmy $arg12 = 4;\nmy $x1 = large_product($arg10, $arg11, $arg12);\nmy $v1 = [60, 54, 50, 48];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 5, 6];\nmy $arg21 = [3, 6, 8, 9, 10, 6];\nmy $arg22 = 5;\nmy $x2 = large_product($arg20, $arg21, $arg22);\nmy $v2 = [60, 54, 50, 48, 45];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the specified number of largest products from two given lists.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/309", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the maximum of two numbers.\n#\n# >>> maximum(5, 10)\n# 10\n# >>> maximum(-1, -2)\n# -1\n# >>> maximum(9, 7)\n# 9\nsub maximum\n{\n  my ($a, $b) = @_;\n", "entry_point": "maximum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $arg01 = 10;\nmy $x0 = maximum($arg00, $arg01);\nmy $v0 = 10;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = -1;\nmy $arg11 = -2;\nmy $x1 = maximum($arg10, $arg11);\nmy $v1 = -1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 9;\nmy $arg21 = 7;\nmy $x2 = maximum($arg20, $arg21);\nmy $v2 = 9;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the maximum of two numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/310", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert a given string to a tuple.\n#\n# >>> string_to_tuple(\"python 3.0\")\n# [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"]\n# >>> string_to_tuple(\"item1\")\n# [\"i\", \"t\", \"e\", \"m\", \"1\"]\n# >>> string_to_tuple(\"15.10\")\n# [\"1\", \"5\", \".\", \"1\", \"0\"]\nsub string_to_tuple\n{\n  my ($str1) = @_;\n", "entry_point": "string_to_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python 3.0\";\nmy $x0 = string_to_tuple($arg00);\nmy $v0 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"item1\";\nmy $x1 = string_to_tuple($arg10);\nmy $v1 = [\"i\", \"t\", \"e\", \"m\", \"1\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"15.10\";\nmy $x2 = string_to_tuple($arg20);\nmy $v2 = [\"1\", \"5\", \".\", \"1\", \"0\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert a given string to a tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/311", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to set the left most unset bit.\n#\n# >>> set_left_most_unset_bit(10)\n# 14\n# >>> set_left_most_unset_bit(12)\n# 14\n# >>> set_left_most_unset_bit(15)\n# 15\nsub set_left_most_unset_bit\n{\n  my ($n) = @_;\n", "entry_point": "set_left_most_unset_bit", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = set_left_most_unset_bit($arg00);\nmy $v0 = 14;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 12;\nmy $x1 = set_left_most_unset_bit($arg10);\nmy $v1 = 14;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 15;\nmy $x2 = set_left_most_unset_bit($arg20);\nmy $v2 = 15;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to set the left most unset bit.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/312", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the volume of a cone.\n#\n# >>> volume_cone(5, 12)\n# 314.15926535897927\n# >>> volume_cone(10, 15)\n# 1570.7963267948965\n# >>> volume_cone(19, 17)\n# 6426.651371693521\nsub volume_cone\n{\n  my ($r, $h) = @_;\n", "entry_point": "volume_cone", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $arg01 = 12;\nmy $x0 = volume_cone($arg00, $arg01);\nmy $v0 = 314.15926535897927;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = 15;\nmy $x1 = volume_cone($arg10, $arg11);\nmy $v1 = 1570.7963267948965;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 19;\nmy $arg21 = 17;\nmy $x2 = volume_cone($arg20, $arg21);\nmy $v2 = 6426.651371693521;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the volume of a cone.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/313", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to print positive numbers in a list.\n#\n# >>> pos_nos([-1, -2, 1, 2])\n# [1,2]\n# >>> pos_nos([3, 4, -5])\n# [3,4]\n# >>> pos_nos([-2, -3, 1])\n# 1\nsub pos_nos\n{\n  my ($list1) = @_;\n", "entry_point": "pos_nos", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [-1, -2, 1, 2];\nmy $x0 = pos_nos($arg00);\nmy $v0 = [1, 2];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [3, 4, -5];\nmy $x1 = pos_nos($arg10);\nmy $v1 = [3, 4];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [-2, -3, 1];\nmy $x2 = pos_nos($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to print positive numbers in a list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/314", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n#\n# >>> max_sum_rectangular_grid([[1, 4, 5], [2, 0, 0]], 3)\n# 7\n# >>> max_sum_rectangular_grid([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 5)\n# 24\n# >>> max_sum_rectangular_grid([[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]], 5)\n# 81\nsub max_sum_rectangular_grid\n{\n  my ($grid, $n) = @_;\n", "entry_point": "max_sum_rectangular_grid", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 4, 5], [2, 0, 0]];\nmy $arg01 = 3;\nmy $x0 = max_sum_rectangular_grid($arg00, $arg01);\nmy $v0 = 7;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]];\nmy $arg11 = 5;\nmy $x1 = max_sum_rectangular_grid($arg10, $arg11);\nmy $v1 = 24;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]];\nmy $arg21 = 5;\nmy $x2 = max_sum_rectangular_grid($arg20, $arg21);\nmy $v2 = 81;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/315", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the first maximum length of even word.\n#\n# >>> find_max_len_even(\"python language\")\n# \"language\"\n# >>> find_max_len_even(\"maximum even length\")\n# \"length\"\n# >>> find_max_len_even(\"eve\")\n# \"-1\"\nsub find_max_len_even\n{\n  my ($str) = @_;\n", "entry_point": "find_max_len_even", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python language\";\nmy $x0 = find_max_len_even($arg00);\nmy $v0 = \"language\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"maximum even length\";\nmy $x1 = find_max_len_even($arg10);\nmy $v1 = \"length\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"eve\";\nmy $x2 = find_max_len_even($arg20);\nmy $v2 = \"-1\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the first maximum length of even word.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/316", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the index of the last occurrence of a given number in a sorted array.\n#\n# >>> find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n# 3\n# >>> find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9)\n# 9\n# >>> find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6)\n# 6\nsub find_last_occurrence\n{\n  my ($a, $x) = @_;\n", "entry_point": "find_last_occurrence", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9];\nmy $arg01 = 5;\nmy $x0 = find_last_occurrence($arg00, $arg01);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 3, 5, 8, 6, 6, 8, 9, 9, 9];\nmy $arg11 = 9;\nmy $x1 = find_last_occurrence($arg10, $arg11);\nmy $v1 = 9;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 2, 1, 5, 6, 6, 6, 9, 9, 9];\nmy $arg21 = 6;\nmy $x2 = find_last_occurrence($arg20, $arg21);\nmy $v2 = 6;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the index of the last occurrence of a given number in a sorted array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/317", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to reflect the modified run-length encoding from a list.\n#\n# >>> modified_encode([1, 1, 2, 3, 4, 4, 5, 1])\n# [[2, 1], 2, 3, [2, 4], 5, 1]\n# >>> modified_encode(\"automatically\")\n# [\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", [2, \"l\"], \"y\"]\n# >>> modified_encode(\"python\")\n# [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]\nsub modified_encode\n{\n  my ($alist) = @_;\n", "entry_point": "modified_encode", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 1, 2, 3, 4, 4, 5, 1];\nmy $x0 = modified_encode($arg00);\nmy $v0 = [[2, 1], 2, 3, [2, 4], 5, 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"automatically\";\nmy $x1 = modified_encode($arg10);\nmy $v1 = [\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", [2, \"l\"], \"y\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"python\";\nmy $x2 = modified_encode($arg20);\nmy $v2 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to reflect the modified run-length encoding from a list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/318", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the maximum volume of a cuboid with given sum of sides.\n#\n# >>> max_volume(8)\n# 18\n# >>> max_volume(4)\n# 2\n# >>> max_volume(1)\n# 0\nsub max_volume\n{\n  my ($s) = @_;\n", "entry_point": "max_volume", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 8;\nmy $x0 = max_volume($arg00);\nmy $v0 = 18;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = max_volume($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $x2 = max_volume($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the maximum volume of a cuboid with given sum of sides.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/319", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find all five characters long word in the given string by using regex.\n#\n# >>> find_long_word(\"Please move back to strem\")\n# [\"strem\"]\n# >>> find_long_word(\"4K Ultra HD streaming player\")\n# [\"Ultra\"]\n# >>> find_long_word(\"Streaming Media Player\")\n# [\"Media\"]\nsub find_long_word\n{\n  my ($text) = @_;\n", "entry_point": "find_long_word", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Please move back to strem\";\nmy $x0 = find_long_word($arg00);\nmy $v0 = [\"strem\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"4K Ultra HD streaming player\";\nmy $x1 = find_long_word($arg10);\nmy $v1 = [\"Ultra\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Streaming Media Player\";\nmy $x2 = find_long_word($arg20);\nmy $v2 = [\"Media\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find all five characters long word in the given string by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/320", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n#\n# >>> sum_difference(12)\n# 5434\n# >>> sum_difference(20)\n# 41230\n# >>> sum_difference(54)\n# 2151270\nsub sum_difference\n{\n  my ($n) = @_;\n", "entry_point": "sum_difference", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 12;\nmy $x0 = sum_difference($arg00);\nmy $v0 = 5434;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 20;\nmy $x1 = sum_difference($arg10);\nmy $v1 = 41230;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 54;\nmy $x2 = sum_difference($arg20);\nmy $v2 = 2151270;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/321", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the demlo number for the given number.\n#\n# >>> find_demlo(\"111111\")\n# \"12345654321\"\n# >>> find_demlo(\"1111\")\n# \"1234321\"\n# >>> find_demlo(\"13333122222\")\n# \"123456789101110987654321\"\nsub find_demlo\n{\n  my ($s) = @_;\n", "entry_point": "find_demlo", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"111111\";\nmy $x0 = find_demlo($arg00);\nmy $v0 = \"12345654321\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"1111\";\nmy $x1 = find_demlo($arg10);\nmy $v1 = \"1234321\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"13333122222\";\nmy $x2 = find_demlo($arg20);\nmy $v2 = \"123456789101110987654321\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the demlo number for the given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/322", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find all index positions of the minimum values in a given list.\n#\n# >>> position_min([12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54])\n# [3, 11]\n# >>> position_min([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])\n# [0]\n# >>> position_min([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])\n# [1]\nsub position_min\n{\n  my ($list1) = @_;\n", "entry_point": "position_min", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54];\nmy $x0 = position_min($arg00);\nmy $v0 = [3, 11];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5];\nmy $x1 = position_min($arg10);\nmy $v1 = [0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nmy $x2 = position_min($arg20);\nmy $v2 = [1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find all index positions of the minimum values in a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/323", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to re-arrange the given array in alternating positive and negative items.\n#\n# >>> re_arrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10)\n# [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n# >>> re_arrange([1, 2, 3, -4, -1, 4], 6)\n# [-4, 1, -1, 2, 3, 4]\n# >>> re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8)\n# [-4, 4, -3, 7, -9, 9, 77, 5]\nsub re_arrange\n{\n  my ($arr, $n) = @_;\n", "entry_point": "re_arrange", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [-5, -2, 5, 2, 4, 7, 1, 8, 0, -8];\nmy $arg01 = 10;\nmy $x0 = re_arrange($arg00, $arg01);\nmy $v0 = [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, -4, -1, 4];\nmy $arg11 = 6;\nmy $x1 = re_arrange($arg10, $arg11);\nmy $v1 = [-4, 1, -1, 2, 3, 4];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [4, 7, 9, 77, -4, 5, -3, -9];\nmy $arg21 = 8;\nmy $x2 = re_arrange($arg20, $arg21);\nmy $v2 = [-4, 4, -3, 7, -9, 9, 77, 5];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to re-arrange the given array in alternating positive and negative items.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/324", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract the sum of alternate chains of tuples.\n#\n# >>> sum_of_alternates([5, 6, 3, 6, 10, 34])\n# [46, 18]\n# >>> sum_of_alternates([1, 2, 3, 4, 5])\n# [6, 9]\n# >>> sum_of_alternates([6, 7, 8, 9, 4, 5])\n# [21, 18]\nsub sum_of_alternates\n{\n  my ($test_tuple) = @_;\n", "entry_point": "sum_of_alternates", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 6, 3, 6, 10, 34];\nmy $x0 = sum_of_alternates($arg00);\nmy $v0 = [46, 18];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5];\nmy $x1 = sum_of_alternates($arg10);\nmy $v1 = [6, 9];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [6, 7, 8, 9, 4, 5];\nmy $x2 = sum_of_alternates($arg20);\nmy $v2 = [21, 18];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract the sum of alternate chains of tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/325", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the minimum number of squares whose sum is equal to a given number.\n#\n# >>> get_min_squares(6)\n# 3\n# >>> get_min_squares(2)\n# 2\n# >>> get_min_squares(4)\n# 1\nsub get_min_squares\n{\n  my ($n) = @_;\n", "entry_point": "get_min_squares", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 6;\nmy $x0 = get_min_squares($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = get_min_squares($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $x2 = get_min_squares($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the minimum number of squares whose sum is equal to a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/326", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to get the word with most number of occurrences in the given strings list.\n#\n# >>> most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"])\n# \"UTS\"\n# >>> most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"])\n# \"year\"\n# >>> most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"])\n# \"can\"\nsub most_occurrences\n{\n  my ($test_list) = @_;\n", "entry_point": "most_occurrences", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"];\nmy $x0 = most_occurrences($arg00);\nmy $v0 = \"UTS\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"Its been a great year\", \"this year is so worse\", \"this year is okay\"];\nmy $x1 = most_occurrences($arg10);\nmy $v1 = \"year\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"];\nmy $x2 = most_occurrences($arg20);\nmy $v2 = \"can\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to get the word with most number of occurrences in the given strings list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/327", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to print check if the triangle is isosceles or not.\n#\n# >>> check_isosceles(6, 8, 12)\n# 0\n# >>> check_isosceles(6, 6, 12)\n# 1\n# >>> check_isosceles(6, 16, 20)\n# 0\nsub check_isosceles\n{\n  my ($x, $y, $z) = @_;\n", "entry_point": "check_isosceles", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 6;\nmy $arg01 = 8;\nmy $arg02 = 12;\nmy $x0 = check_isosceles($arg00, $arg01, $arg02);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 6;\nmy $arg11 = 6;\nmy $arg12 = 12;\nmy $x1 = check_isosceles($arg10, $arg11, $arg12);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 6;\nmy $arg21 = 16;\nmy $arg22 = 20;\nmy $x2 = check_isosceles($arg20, $arg21, $arg22);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to print check if the triangle is isosceles or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/328", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to rotate a given list by specified number of items to the left direction.\n#\n# >>> rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)\n# [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n# >>> rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)\n# [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n# >>> rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)\n# [6, 7, 8, 9, 10, 1, 2]\nsub rotate_left\n{\n  my ($list1, $m, $n) = @_;\n", "entry_point": "rotate_left", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $arg01 = 3;\nmy $arg02 = 4;\nmy $x0 = rotate_left($arg00, $arg01, $arg02);\nmy $v0 = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $arg11 = 2;\nmy $arg12 = 2;\nmy $x1 = rotate_left($arg10, $arg11, $arg12);\nmy $v1 = [3, 4, 5, 6, 7, 8, 9, 10, 1, 2];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $arg21 = 5;\nmy $arg22 = 2;\nmy $x2 = rotate_left($arg20, $arg21, $arg22);\nmy $v2 = [6, 7, 8, 9, 10, 1, 2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to rotate a given list by specified number of items to the left direction.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/329", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count negative numbers in a list.\n#\n# >>> neg_count([-1, -2, 3, -4, -5])\n# 4\n# >>> neg_count([1, 2, 3])\n# 0\n# >>> neg_count([1, 2, -3, -10, 20])\n# 2\nsub neg_count\n{\n  my ($list) = @_;\n", "entry_point": "neg_count", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [-1, -2, 3, -4, -5];\nmy $x0 = neg_count($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3];\nmy $x1 = neg_count($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, -3, -10, 20];\nmy $x2 = neg_count($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count negative numbers in a list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/330", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find all three, four, five characters long words in the given string by using regex.\n#\n# >>> find_char(\"For the four consumer complaints contact manager AKR reddy\")\n# [\"For\", \"the\", \"four\", \"AKR\", \"reddy\"]\n# >>> find_char(\"Certain service are subject to change MSR\")\n# [\"are\", \"MSR\"]\n# >>> find_char(\"Third party legal desclaimers\")\n# [\"Third\", \"party\", \"legal\"]\nsub find_char\n{\n  my ($text) = @_;\n", "entry_point": "find_char", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"For the four consumer complaints contact manager AKR reddy\";\nmy $x0 = find_char($arg00);\nmy $v0 = [\"For\", \"the\", \"four\", \"AKR\", \"reddy\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Certain service are subject to change MSR\";\nmy $x1 = find_char($arg10);\nmy $v1 = [\"are\", \"MSR\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Third party legal desclaimers\";\nmy $x2 = find_char($arg20);\nmy $v2 = [\"Third\", \"party\", \"legal\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find all three, four, five characters long words in the given string by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/331", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count unset bits of a given number.\n#\n# >>> count_unset_bits(2)\n# 1\n# >>> count_unset_bits(4)\n# 2\n# >>> count_unset_bits(6)\n# 1\nsub count_unset_bits\n{\n  my ($n) = @_;\n", "entry_point": "count_unset_bits", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = count_unset_bits($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = count_unset_bits($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 6;\nmy $x2 = count_unset_bits($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count unset bits of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/332", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count character frequency of a given string.\n#\n# >>> char_frequency(\"python\")\n# {\"p\" => 1, \"y\" => 1, \"t\" => 1, \"h\" => 1, \"o\" => 1, \"n\" => 1}\n# >>> char_frequency(\"program\")\n# {\"p\" => 1, \"r\" => 2, \"o\" => 1, \"g\" => 1, \"a\" => 1, \"m\" => 1}\n# >>> char_frequency(\"language\")\n# {\"l\" => 1, \"a\" => 2, \"n\" => 1, \"g\" => 2, \"u\" => 1, \"e\" => 1}\nsub char_frequency\n{\n  my ($str1) = @_;\n", "entry_point": "char_frequency", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python\";\nmy $x0 = char_frequency($arg00);\nmy $v0 = {\"p\" => 1, \"y\" => 1, \"t\" => 1, \"h\" => 1, \"o\" => 1, \"n\" => 1};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"program\";\nmy $x1 = char_frequency($arg10);\nmy $v1 = {\"p\" => 1, \"r\" => 2, \"o\" => 1, \"g\" => 1, \"a\" => 1, \"m\" => 1};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"language\";\nmy $x2 = char_frequency($arg20);\nmy $v2 = {\"l\" => 1, \"a\" => 2, \"n\" => 1, \"g\" => 2, \"u\" => 1, \"e\" => 1};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count character frequency of a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/333", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to sort a list according to the second element in sublist.\n#\n# >>> sort([[\"a\", 10], [\"b\", 5], [\"c\", 20], [\"d\", 15]])\n# [[\"b\", 5], [\"a\", 10], [\"d\", 15], [\"c\", 20]]\n# >>> sort([[\"452\", 10], [\"256\", 5], [\"100\", 20], [\"135\", 15]])\n# [[\"256\", 5], [\"452\", 10], [\"135\", 15], [\"100\", 20]]\n# >>> sort([[\"rishi\", 10], [\"akhil\", 5], [\"ramya\", 20], [\"gaur\", 15]])\n# [[\"akhil\", 5], [\"rishi\", 10], [\"gaur\", 15], [\"ramya\", 20]]\nsub sort\n{\n  my ($sub_li) = @_;\n", "entry_point": "sort", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"a\", 10], [\"b\", 5], [\"c\", 20], [\"d\", 15]];\nmy $x0 = sort($arg00);\nmy $v0 = [[\"b\", 5], [\"a\", 10], [\"d\", 15], [\"c\", 20]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"452\", 10], [\"256\", 5], [\"100\", 20], [\"135\", 15]];\nmy $x1 = sort($arg10);\nmy $v1 = [[\"256\", 5], [\"452\", 10], [\"135\", 15], [\"100\", 20]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"rishi\", 10], [\"akhil\", 5], [\"ramya\", 20], [\"gaur\", 15]];\nmy $x2 = sort($arg20);\nmy $v2 = [[\"akhil\", 5], [\"rishi\", 10], [\"gaur\", 15], [\"ramya\", 20]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to sort a list according to the second element in sublist.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/334", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the triangle is valid or not if sides are given.\n#\n# >>> check_validity(1, 2, 3)\n# 0\n# >>> check_validity(2, 3, 5)\n# 0\n# >>> check_validity(7, 10, 5)\n# 1\nsub check_validity\n{\n  my ($a, $b, $c) = @_;\n", "entry_point": "check_validity", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 2;\nmy $arg02 = 3;\nmy $x0 = check_validity($arg00, $arg01, $arg02);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $arg11 = 3;\nmy $arg12 = 5;\nmy $x1 = check_validity($arg10, $arg11, $arg12);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 7;\nmy $arg21 = 10;\nmy $arg22 = 5;\nmy $x2 = check_validity($arg20, $arg21, $arg22);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the triangle is valid or not if sides are given.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/335", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the sum of arithmetic progression.\n#\n# >>> ap_sum(1, 5, 2)\n# 25\n# >>> ap_sum(2, 6, 4)\n# 72\n# >>> ap_sum(1, 4, 5)\n# 34\nsub ap_sum\n{\n  my ($a, $n, $d) = @_;\n", "entry_point": "ap_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 5;\nmy $arg02 = 2;\nmy $x0 = ap_sum($arg00, $arg01, $arg02);\nmy $v0 = 25;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $arg11 = 6;\nmy $arg12 = 4;\nmy $x1 = ap_sum($arg10, $arg11, $arg12);\nmy $v1 = 72;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 4;\nmy $arg22 = 5;\nmy $x2 = ap_sum($arg20, $arg21, $arg22);\nmy $v2 = 34;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the sum of arithmetic progression.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/336", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether the given month name contains 28 days or not.\n#\n# >>> check_monthnum(\"February\")\n# 1\n# >>> check_monthnum(\"January\")\n# 0\n# >>> check_monthnum(\"March\")\n# 0\nsub check_monthnum\n{\n  my ($monthname1) = @_;\n", "entry_point": "check_monthnum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"February\";\nmy $x0 = check_monthnum($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"January\";\nmy $x1 = check_monthnum($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"March\";\nmy $x2 = check_monthnum($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether the given month name contains 28 days or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/337", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function that matches a word at the end of a string, with optional punctuation.\n#\n# >>> text_match_word(\"python.\")\n# \"Found a match!\"\n# >>> text_match_word(\"python.\")\n# \"Found a match!\"\n# >>> text_match_word(\"  lang  .\")\n# \"Not matched!\"\nsub text_match_word\n{\n  my ($text) = @_;\n", "entry_point": "text_match_word", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python.\";\nmy $x0 = text_match_word($arg00);\nmy $v0 = \"Found a match!\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"python.\";\nmy $x1 = text_match_word($arg10);\nmy $v1 = \"Found a match!\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"  lang  .\";\nmy $x2 = text_match_word($arg20);\nmy $v2 = \"Not matched!\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function that matches a word at the end of a string, with optional punctuation.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/338", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the number of substrings with same first and last characters.\n#\n# >>> count_substring_with_equal_ends(\"aba\")\n# 4\n# >>> count_substring_with_equal_ends(\"abcab\")\n# 7\n# >>> count_substring_with_equal_ends(\"abc\")\n# 3\nsub count_substring_with_equal_ends\n{\n  my ($s) = @_;\n", "entry_point": "count_substring_with_equal_ends", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"aba\";\nmy $x0 = count_substring_with_equal_ends($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcab\";\nmy $x1 = count_substring_with_equal_ends($arg10);\nmy $v1 = 7;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abc\";\nmy $x2 = count_substring_with_equal_ends($arg20);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the number of substrings with same first and last characters.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/339", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the maximum occuring divisor in an interval.\n#\n# >>> find_divisor(2, 2)\n# 2\n# >>> find_divisor(2, 5)\n# 2\n# >>> find_divisor(5, 10)\n# 2\nsub find_divisor\n{\n  my ($x, $y) = @_;\n", "entry_point": "find_divisor", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $arg01 = 2;\nmy $x0 = find_divisor($arg00, $arg01);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $arg11 = 5;\nmy $x1 = find_divisor($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $arg21 = 10;\nmy $x2 = find_divisor($arg20, $arg21);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the maximum occuring divisor in an interval.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/340", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of the three lowest positive numbers from a given list of numbers.\n#\n# >>> sum_three_smallest_nums([10, 20, 30, 40, 50, 60, 7])\n# 37\n# >>> sum_three_smallest_nums([1, 2, 3, 4, 5])\n# 6\n# >>> sum_three_smallest_nums([0, 1, 2, 3, 4, 5])\n# 6\nsub sum_three_smallest_nums\n{\n  my ($lst) = @_;\n", "entry_point": "sum_three_smallest_nums", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 20, 30, 40, 50, 60, 7];\nmy $x0 = sum_three_smallest_nums($arg00);\nmy $v0 = 37;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5];\nmy $x1 = sum_three_smallest_nums($arg10);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [0, 1, 2, 3, 4, 5];\nmy $x2 = sum_three_smallest_nums($arg20);\nmy $v2 = 6;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of the three lowest positive numbers from a given list of numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/341", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert the given set into tuples.\n#\n# >>> set_to_tuple({1 => 1, 2 => 1, 3 => 1, 4 => 1, 5 => 1})\n# [1, 2, 3, 4, 5]\n# >>> set_to_tuple({6 => 1, 7 => 1, 8 => 1, 9 => 1, 10 => 1, 11 => 1})\n# [6, 7, 8, 9, 10, 11]\n# >>> set_to_tuple({12 => 1, 13 => 1, 14 => 1, 15 => 1, 16 => 1})\n# [12, 13, 14, 15, 16]\nsub set_to_tuple\n{\n  my ($s) = @_;\n", "entry_point": "set_to_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {1 => 1, 2 => 1, 3 => 1, 4 => 1, 5 => 1};\nmy $x0 = set_to_tuple($arg00);\nmy $v0 = [1, 2, 3, 4, 5];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {6 => 1, 7 => 1, 8 => 1, 9 => 1, 10 => 1, 11 => 1};\nmy $x1 = set_to_tuple($arg10);\nmy $v1 = [6, 7, 8, 9, 10, 11];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {12 => 1, 13 => 1, 14 => 1, 15 => 1, 16 => 1};\nmy $x2 = set_to_tuple($arg20);\nmy $v2 = [12, 13, 14, 15, 16];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert the given set into tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/342", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n#\n# >>> find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]])\n# [4, 6]\n# >>> find_minimum_range([[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]])\n# [4, 7]\n# >>> find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]])\n# [5, 7]\nsub find_minimum_range\n{\n  my ($list) = @_;\n", "entry_point": "find_minimum_range", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]];\nmy $x0 = find_minimum_range($arg00);\nmy $v0 = [4, 6];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]];\nmy $x1 = find_minimum_range($arg10);\nmy $v1 = [4, 7];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]];\nmy $x2 = find_minimum_range($arg20);\nmy $v2 = [5, 7];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/343", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate the number of digits and letters in a string.\n#\n# >>> dig_let(\"python\")\n# [6, 0]\n# >>> dig_let(\"program\")\n# [7, 0]\n# >>> dig_let(\"python3.0\")\n# [6, 2]\nsub dig_let\n{\n  my ($s) = @_;\n", "entry_point": "dig_let", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python\";\nmy $x0 = dig_let($arg00);\nmy $v0 = [6, 0];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"program\";\nmy $x1 = dig_let($arg10);\nmy $v1 = [7, 0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"python3.0\";\nmy $x2 = dig_let($arg20);\nmy $v2 = [6, 2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate the number of digits and letters in a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/344", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find number of elements with odd factors in a given range.\n#\n# >>> count_odd_squares(5, 100)\n# 8\n# >>> count_odd_squares(8, 65)\n# 6\n# >>> count_odd_squares(2, 5)\n# 1\nsub count_odd_squares\n{\n  my ($n, $m) = @_;\n", "entry_point": "count_odd_squares", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $arg01 = 100;\nmy $x0 = count_odd_squares($arg00, $arg01);\nmy $v0 = 8;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 8;\nmy $arg11 = 65;\nmy $x1 = count_odd_squares($arg10, $arg11);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $arg21 = 5;\nmy $x2 = count_odd_squares($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find number of elements with odd factors in a given range.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/345", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the difference between two consecutive numbers in a given list.\n#\n# >>> diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])\n# [0, 2, 1, 0, 1, 1, 1]\n# >>> diff_consecutivenums([4, 5, 8, 9, 6, 10])\n# [1, 3, 1, -3, 4]\n# >>> diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])\n# [1, 1, 1, 1, 0, 0, 0, 1, 2]\nsub diff_consecutivenums\n{\n  my ($nums) = @_;\n", "entry_point": "diff_consecutivenums", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 1, 3, 4, 4, 5, 6, 7];\nmy $x0 = diff_consecutivenums($arg00);\nmy $v0 = [0, 2, 1, 0, 1, 1, 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 5, 8, 9, 6, 10];\nmy $x1 = diff_consecutivenums($arg10);\nmy $v1 = [1, 3, 1, -3, 4];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [0, 1, 2, 3, 4, 4, 4, 4, 5, 7];\nmy $x2 = diff_consecutivenums($arg20);\nmy $v2 = [1, 1, 1, 1, 0, 0, 0, 1, 2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the difference between two consecutive numbers in a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/346", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find entringer number e(n, k).\n#\n# >>> zigzag(4, 3)\n# 5\n# >>> zigzag(4, 2)\n# 4\n# >>> zigzag(3, 1)\n# 1\nsub zigzag\n{\n  my ($n, $k) = @_;\n", "entry_point": "zigzag", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $arg01 = 3;\nmy $x0 = zigzag($arg00, $arg01);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $arg11 = 2;\nmy $x1 = zigzag($arg10, $arg11);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $arg21 = 1;\nmy $x2 = zigzag($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find entringer number e(n, k).", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/347", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the number of squares in a rectangle.\n#\n# >>> count_squares(4, 3)\n# 20\n# >>> count_squares(1, 2)\n# 2\n# >>> count_squares(2, 2)\n# 5\nsub count_squares\n{\n  my ($m, $n) = @_;\n", "entry_point": "count_squares", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $arg01 = 3;\nmy $x0 = count_squares($arg00, $arg01);\nmy $v0 = 20;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 2;\nmy $x1 = count_squares($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $arg21 = 2;\nmy $x2 = count_squares($arg20, $arg21);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the number of squares in a rectangle.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/348", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n#\n# >>> find_ways(4)\n# 2\n# >>> find_ways(6)\n# 5\n# >>> find_ways(8)\n# 14\nsub find_ways\n{\n  my ($m) = @_;\n", "entry_point": "find_ways", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $x0 = find_ways($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 6;\nmy $x1 = find_ways($arg10);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 8;\nmy $x2 = find_ways($arg20);\nmy $v2 = 14;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/349", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the given string is a binary string or not.\n#\n# >>> check(\"01010101010\")\n# \"Yes\"\n# >>> check(\"name0\")\n# \"No\"\n# >>> check(\"101\")\n# \"Yes\"\nsub check\n{\n  my ($string) = @_;\n", "entry_point": "check", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"01010101010\";\nmy $x0 = check($arg00);\nmy $v0 = \"Yes\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"name0\";\nmy $x1 = check($arg10);\nmy $v1 = \"No\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"101\";\nmy $x2 = check($arg20);\nmy $v2 = \"Yes\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the given string is a binary string or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/350", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to minimize the length of the string by removing occurrence of only one character.\n#\n# >>> minimum_length(\"mnm\")\n# 1\n# >>> minimum_length(\"abcda\")\n# 3\n# >>> minimum_length(\"abcb\")\n# 2\nsub minimum_length\n{\n  my ($s) = @_;\n", "entry_point": "minimum_length", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"mnm\";\nmy $x0 = minimum_length($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcda\";\nmy $x1 = minimum_length($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abcb\";\nmy $x2 = minimum_length($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to minimize the length of the string by removing occurrence of only one character.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/351", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the first element occurring k times in a given array.\n#\n# >>> first_element([0, 1, 2, 3, 4, 5], 6, 1)\n# 0\n# >>> first_element([1, 2, 1, 3, 4], 5, 2)\n# 1\n# >>> first_element([2, 3, 4, 3, 5, 7, 1, 2, 3, 5], 10, 2)\n# 2\nsub first_element\n{\n  my ($arr, $n, $k) = @_;\n", "entry_point": "first_element", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [0, 1, 2, 3, 4, 5];\nmy $arg01 = 6;\nmy $arg02 = 1;\nmy $x0 = first_element($arg00, $arg01, $arg02);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 1, 3, 4];\nmy $arg11 = 5;\nmy $arg12 = 2;\nmy $x1 = first_element($arg10, $arg11, $arg12);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 3, 4, 3, 5, 7, 1, 2, 3, 5];\nmy $arg21 = 10;\nmy $arg22 = 2;\nmy $x2 = first_element($arg20, $arg21, $arg22);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the first element occurring k times in a given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/352", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether all the characters in a given string are unique.\n#\n# >>> unique_characters(\"aba\")\n# 0\n# >>> unique_characters(\"abc\")\n# 1\n# >>> unique_characters(\"abab\")\n# 0\nsub unique_characters\n{\n  my ($str) = @_;\n", "entry_point": "unique_characters", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"aba\";\nmy $x0 = unique_characters($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abc\";\nmy $x1 = unique_characters($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abab\";\nmy $x2 = unique_characters($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether all the characters in a given string are unique.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/353", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove a specified column from a given nested list.\n#\n# >>> remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)\n# [[2, 3], [4, 5], [1, 1]]\n# >>> remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2)\n# [[1, 2], [-2, 4], [1, -1]]\n# >>> remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0)\n# [[3], [7], [3], [15, 17], [7], [11]]\nsub remove_column\n{\n  my ($list1, $n) = @_;\n", "entry_point": "remove_column", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]];\nmy $arg01 = 0;\nmy $x0 = remove_column($arg00, $arg01);\nmy $v0 = [[2, 3], [4, 5], [1, 1]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]];\nmy $arg11 = 2;\nmy $x1 = remove_column($arg10, $arg11);\nmy $v1 = [[1, 2], [-2, 4], [1, -1]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]];\nmy $arg21 = 0;\nmy $x2 = remove_column($arg20, $arg21);\nmy $v2 = [[3], [7], [3], [15, 17], [7], [11]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove a specified column from a given nested list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/354", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find t-nth term of arithemetic progression.\n#\n# >>> tn_ap(1, 5, 2)\n# 9\n# >>> tn_ap(2, 6, 4)\n# 22\n# >>> tn_ap(1, 4, 5)\n# 16\nsub tn_ap\n{\n  my ($a, $n, $d) = @_;\n", "entry_point": "tn_ap", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 5;\nmy $arg02 = 2;\nmy $x0 = tn_ap($arg00, $arg01, $arg02);\nmy $v0 = 9;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $arg11 = 6;\nmy $arg12 = 4;\nmy $x1 = tn_ap($arg10, $arg11, $arg12);\nmy $v1 = 22;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 4;\nmy $arg22 = 5;\nmy $x2 = tn_ap($arg20, $arg21, $arg22);\nmy $v2 = 16;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find t-nth term of arithemetic progression.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/355", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the number of rectangles in a circle of radius r.\n#\n# >>> count_rectangles(2)\n# 8\n# >>> count_rectangles(1)\n# 1\n# >>> count_rectangles(0)\n# 0\nsub count_rectangles\n{\n  my ($radius) = @_;\n", "entry_point": "count_rectangles", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = count_rectangles($arg00);\nmy $v0 = 8;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $x1 = count_rectangles($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 0;\nmy $x2 = count_rectangles($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the number of rectangles in a circle of radius r.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/356", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the third angle of a triangle using two angles.\n#\n# >>> find_angle(47, 89)\n# 44\n# >>> find_angle(45, 95)\n# 40\n# >>> find_angle(50, 40)\n# 90\nsub find_angle\n{\n  my ($a, $b) = @_;\n", "entry_point": "find_angle", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 47;\nmy $arg01 = 89;\nmy $x0 = find_angle($arg00, $arg01);\nmy $v0 = 44;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 45;\nmy $arg11 = 95;\nmy $x1 = find_angle($arg10, $arg11);\nmy $v1 = 40;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 50;\nmy $arg21 = 40;\nmy $x2 = find_angle($arg20, $arg21);\nmy $v2 = 90;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the third angle of a triangle using two angles.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/357", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the maximum element of all the given tuple records.\n#\n# >>> find_max([[2, 4], [6, 7], [5, 1], [6, 10], [8, 7]])\n# 10\n# >>> find_max([[3, 5], [7, 8], [6, 2], [7, 11], [9, 8]])\n# 11\n# >>> find_max([[4, 6], [8, 9], [7, 3], [8, 12], [10, 9]])\n# 12\nsub find_max\n{\n  my ($test_list) = @_;\n", "entry_point": "find_max", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[2, 4], [6, 7], [5, 1], [6, 10], [8, 7]];\nmy $x0 = find_max($arg00);\nmy $v0 = 10;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[3, 5], [7, 8], [6, 2], [7, 11], [9, 8]];\nmy $x1 = find_max($arg10);\nmy $v1 = 11;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[4, 6], [8, 9], [7, 3], [8, 12], [10, 9]];\nmy $x2 = find_max($arg20);\nmy $v2 = 12;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the maximum element of all the given tuple records.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/358", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find modulo division of two lists using map and lambda function.\n#\n# >>> moddiv_list([4, 5, 6], [1, 2, 3])\n# [0, 1, 0]\n# >>> moddiv_list([3, 2], [1, 4])\n# [0, 2]\n# >>> moddiv_list([90, 120], [50, 70])\n# [40, 50]\nsub moddiv_list\n{\n  my ($nums1, $nums2) = @_;\n", "entry_point": "moddiv_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [4, 5, 6];\nmy $arg01 = [1, 2, 3];\nmy $x0 = moddiv_list($arg00, $arg01);\nmy $v0 = [0, 1, 0];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [3, 2];\nmy $arg11 = [1, 4];\nmy $x1 = moddiv_list($arg10, $arg11);\nmy $v1 = [0, 2];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [90, 120];\nmy $arg21 = [50, 70];\nmy $x2 = moddiv_list($arg20, $arg21);\nmy $v2 = [40, 50];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find modulo division of two lists using map and lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/359", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether one root of the quadratic equation is twice of the other or not.\n#\n# >>> check_solution(1, 3, 2)\n# \"Yes\"\n# >>> check_solution(1, 2, 3)\n# \"No\"\n# >>> check_solution(1, -5, 6)\n# \"No\"\nsub check_solution\n{\n  my ($a, $b, $c) = @_;\n", "entry_point": "check_solution", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 3;\nmy $arg02 = 2;\nmy $x0 = check_solution($arg00, $arg01, $arg02);\nmy $v0 = \"Yes\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 2;\nmy $arg12 = 3;\nmy $x1 = check_solution($arg10, $arg11, $arg12);\nmy $v1 = \"No\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = -5;\nmy $arg22 = 6;\nmy $x2 = check_solution($arg20, $arg21, $arg22);\nmy $v2 = \"No\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether one root of the quadratic equation is twice of the other or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/360", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the n\u2019th carol number.\n#\n# >>> get_carol(2)\n# 7\n# >>> get_carol(4)\n# 223\n# >>> get_carol(5)\n# 959\nsub get_carol\n{\n  my ($n) = @_;\n", "entry_point": "get_carol", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = get_carol($arg00);\nmy $v0 = 7;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = get_carol($arg10);\nmy $v1 = 223;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $x2 = get_carol($arg20);\nmy $v2 = 959;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the n\u2019th carol number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/361", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove empty lists from a given list of lists.\n#\n# >>> remove_empty([[], [], [], \"Red\", \"Green\", [1, 2], \"Blue\", [], []])\n# [\"Red\", \"Green\", [1, 2], \"Blue\"]\n# >>> remove_empty([[], [], [], [], [], \"Green\", [1, 2], \"Blue\", [], []])\n# [\"Green\", [1, 2], \"Blue\"]\n# >>> remove_empty([[], [], [], \"Python\", [], [], \"programming\", \"language\", [], [], [], [], []])\n# [\"Python\", \"programming\", \"language\"]\nsub remove_empty\n{\n  my ($list1) = @_;\n", "entry_point": "remove_empty", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[], [], [], \"Red\", \"Green\", [1, 2], \"Blue\", [], []];\nmy $x0 = remove_empty($arg00);\nmy $v0 = [\"Red\", \"Green\", [1, 2], \"Blue\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[], [], [], [], [], \"Green\", [1, 2], \"Blue\", [], []];\nmy $x1 = remove_empty($arg10);\nmy $v1 = [\"Green\", [1, 2], \"Blue\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[], [], [], \"Python\", [], [], \"programming\", \"language\", [], [], [], [], []];\nmy $x2 = remove_empty($arg20);\nmy $v2 = [\"Python\", \"programming\", \"language\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove empty lists from a given list of lists.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/362", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the item with maximum occurrences in a given list.\n#\n# >>> max_occurrences([1, 2, 3, 1, 2, 3, 12, 4, 2])\n# 2\n# >>> max_occurrences([1, 2, 6, 7, 0, 1, 0, 1, 0])\n# [1,0]\n# >>> max_occurrences([1, 2, 3, 1, 2, 4, 1])\n# 1\nsub max_occurrences\n{\n  my ($nums) = @_;\n", "entry_point": "max_occurrences", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 1, 2, 3, 12, 4, 2];\nmy $x0 = max_occurrences($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 6, 7, 0, 1, 0, 1, 0];\nmy $x1 = max_occurrences($arg10);\nmy $v1 = [1, 0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 1, 2, 4, 1];\nmy $x2 = max_occurrences($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the item with maximum occurrences in a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/363", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to add the k elements to each element in the tuple.\n#\n# >>> add_k_element([[1, 3, 4], [2, 4, 6], [3, 8, 1]], 4)\n# [[5, 7, 8], [6, 8, 10], [7, 12, 5]]\n# >>> add_k_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8)\n# [[9, 10, 11], [12, 13, 14], [15, 16, 17]]\n# >>> add_k_element([[11, 12, 13], [14, 15, 16], [17, 18, 19]], 9)\n# [[20, 21, 22], [23, 24, 25], [26, 27, 28]]\nsub add_k_element\n{\n  my ($test_list, $k) = @_;\n", "entry_point": "add_k_element", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 3, 4], [2, 4, 6], [3, 8, 1]];\nmy $arg01 = 4;\nmy $x0 = add_k_element($arg00, $arg01);\nmy $v0 = [[5, 7, 8], [6, 8, 10], [7, 12, 5]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nmy $arg11 = 8;\nmy $x1 = add_k_element($arg10, $arg11);\nmy $v1 = [[9, 10, 11], [12, 13, 14], [15, 16, 17]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[11, 12, 13], [14, 15, 16], [17, 18, 19]];\nmy $arg21 = 9;\nmy $x2 = add_k_element($arg20, $arg21);\nmy $v2 = [[20, 21, 22], [23, 24, 25], [26, 27, 28]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to add the k elements to each element in the tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/364", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n#\n# >>> min_flip_to_make_string_alternate(\"0001010111\")\n# 2\n# >>> min_flip_to_make_string_alternate(\"001\")\n# 1\n# >>> min_flip_to_make_string_alternate(\"010111011\")\n# 2\nsub min_flip_to_make_string_alternate\n{\n  my ($str) = @_;\n", "entry_point": "min_flip_to_make_string_alternate", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"0001010111\";\nmy $x0 = min_flip_to_make_string_alternate($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"001\";\nmy $x1 = min_flip_to_make_string_alternate($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"010111011\";\nmy $x2 = min_flip_to_make_string_alternate($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/365", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the number of digits of a given number.\n#\n# >>> count_digit(12345)\n# 5\n# >>> count_digit(11223305)\n# 8\n# >>> count_digit(4123459)\n# 7\nsub count_digit\n{\n  my ($n) = @_;\n", "entry_point": "count_digit", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 12345;\nmy $x0 = count_digit($arg00);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 11223305;\nmy $x1 = count_digit($arg10);\nmy $v1 = 8;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4123459;\nmy $x2 = count_digit($arg20);\nmy $v2 = 7;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the number of digits of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/366", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the largest product of the pair of adjacent elements from a given list of integers.\n#\n# >>> adjacent_num_product([1, 2, 3, 4, 5, 6])\n# 30\n# >>> adjacent_num_product([1, 2, 3, 4, 5])\n# 20\n# >>> adjacent_num_product([2, 3])\n# 6\nsub adjacent_num_product\n{\n  my ($list_nums) = @_;\n", "entry_point": "adjacent_num_product", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6];\nmy $x0 = adjacent_num_product($arg00);\nmy $v0 = 30;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5];\nmy $x1 = adjacent_num_product($arg10);\nmy $v1 = 20;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 3];\nmy $x2 = adjacent_num_product($arg20);\nmy $v2 = 6;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the largest product of the pair of adjacent elements from a given list of integers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/368", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to repeat the given tuple n times.\n#\n# >>> repeat_tuples([1, 3], 4)\n# [[1, 3], [1, 3], [1, 3], [1, 3]]\n# >>> repeat_tuples([1, 2], 3)\n# [[1, 2], [1, 2], [1, 2]]\n# >>> repeat_tuples([3, 4], 5)\n# [[3, 4], [3, 4], [3, 4], [3, 4], [3, 4]]\nsub repeat_tuples\n{\n  my ($test_tup, $n) = @_;\n", "entry_point": "repeat_tuples", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3];\nmy $arg01 = 4;\nmy $x0 = repeat_tuples($arg00, $arg01);\nmy $v0 = [[1, 3], [1, 3], [1, 3], [1, 3]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2];\nmy $arg11 = 3;\nmy $x1 = repeat_tuples($arg10, $arg11);\nmy $v1 = [[1, 2], [1, 2], [1, 2]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 4];\nmy $arg21 = 5;\nmy $x2 = repeat_tuples($arg20, $arg21);\nmy $v2 = [[3, 4], [3, 4], [3, 4], [3, 4], [3, 4]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to repeat the given tuple n times.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/369", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the lateral surface area of cuboid\n#\n# >>> lateralsurface_cuboid(8, 5, 6)\n# 156\n# >>> lateralsurface_cuboid(7, 9, 10)\n# 320\n# >>> lateralsurface_cuboid(10, 20, 30)\n# 1800\nsub lateralsurface_cuboid\n{\n  my ($l, $w, $h) = @_;\n", "entry_point": "lateralsurface_cuboid", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 8;\nmy $arg01 = 5;\nmy $arg02 = 6;\nmy $x0 = lateralsurface_cuboid($arg00, $arg01, $arg02);\nmy $v0 = 156;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 7;\nmy $arg11 = 9;\nmy $arg12 = 10;\nmy $x1 = lateralsurface_cuboid($arg10, $arg11, $arg12);\nmy $v1 = 320;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $arg21 = 20;\nmy $arg22 = 30;\nmy $x2 = lateralsurface_cuboid($arg20, $arg21, $arg22);\nmy $v2 = 1800;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the lateral surface area of cuboid", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/370", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort a tuple by its float element.\n#\n# >>> float_sort([[\"item1\", \"12.20\"], [\"item2\", \"15.10\"], [\"item3\", \"24.5\"]])\n# [[\"item3\", \"24.5\"], [\"item2\", \"15.10\"], [\"item1\", \"12.20\"]]\n# >>> float_sort([[\"item1\", \"15\"], [\"item2\", \"10\"], [\"item3\", \"20\"]])\n# [[\"item3\", \"20\"], [\"item1\", \"15\"], [\"item2\", \"10\"]]\n# >>> float_sort([[\"item1\", \"5\"], [\"item2\", \"10\"], [\"item3\", \"14\"]])\n# [[\"item3\", \"14\"], [\"item2\", \"10\"], [\"item1\", \"5\"]]\nsub float_sort\n{\n  my ($price) = @_;\n", "entry_point": "float_sort", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"item1\", \"12.20\"], [\"item2\", \"15.10\"], [\"item3\", \"24.5\"]];\nmy $x0 = float_sort($arg00);\nmy $v0 = [[\"item3\", \"24.5\"], [\"item2\", \"15.10\"], [\"item1\", \"12.20\"]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"item1\", \"15\"], [\"item2\", \"10\"], [\"item3\", \"20\"]];\nmy $x1 = float_sort($arg10);\nmy $v1 = [[\"item3\", \"20\"], [\"item1\", \"15\"], [\"item2\", \"10\"]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"item1\", \"5\"], [\"item2\", \"10\"], [\"item3\", \"14\"]];\nmy $x2 = float_sort($arg20);\nmy $v2 = [[\"item3\", \"14\"], [\"item2\", \"10\"], [\"item1\", \"5\"]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort a tuple by its float element.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/371", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the smallest missing element in a sorted array.\n#\n# >>> smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6)\n# 7\n# >>> smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6)\n# 3\n# >>> smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7)\n# 0\nsub smallest_missing\n{\n  my ($a, $left_element, $right_element) = @_;\n", "entry_point": "smallest_missing", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [0, 1, 2, 3, 4, 5, 6];\nmy $arg01 = 0;\nmy $arg02 = 6;\nmy $x0 = smallest_missing($arg00, $arg01, $arg02);\nmy $v0 = 7;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [0, 1, 2, 6, 9, 11, 15];\nmy $arg11 = 0;\nmy $arg12 = 6;\nmy $x1 = smallest_missing($arg10, $arg11, $arg12);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 6, 9, 11, 15];\nmy $arg21 = 0;\nmy $arg22 = 7;\nmy $x2 = smallest_missing($arg20, $arg21, $arg22);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the smallest missing element in a sorted array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/372", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n#\n# >>> heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])\n# [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n# >>> heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])\n# [14, 22, 25, 25, 35, 58, 65, 75, 85]\n# >>> heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nsub heap_assending\n{\n  my ($nums) = @_;\n", "entry_point": "heap_assending", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1];\nmy $x0 = heap_assending($arg00);\nmy $v0 = [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [25, 35, 22, 85, 14, 65, 75, 25, 58];\nmy $x1 = heap_assending($arg10);\nmy $v1 = [14, 22, 25, 25, 35, 58, 65, 75, 85];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\nmy $x2 = heap_assending($arg20);\nmy $v2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/373", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the volume of a cuboid.\n#\n# >>> volume_cuboid(1, 2, 3)\n# 6\n# >>> volume_cuboid(5, 7, 9)\n# 315\n# >>> volume_cuboid(10, 15, 21)\n# 3150\nsub volume_cuboid\n{\n  my ($l, $w, $h) = @_;\n", "entry_point": "volume_cuboid", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 2;\nmy $arg02 = 3;\nmy $x0 = volume_cuboid($arg00, $arg01, $arg02);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $arg11 = 7;\nmy $arg12 = 9;\nmy $x1 = volume_cuboid($arg10, $arg11, $arg12);\nmy $v1 = 315;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $arg21 = 15;\nmy $arg22 = 21;\nmy $x2 = volume_cuboid($arg20, $arg21, $arg22);\nmy $v2 = 3150;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the volume of a cuboid.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/374", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to print all permutations of a given string including duplicates.\n#\n# >>> permute_string(\"ab\")\n# [\"ab\", \"ba\"]\n# >>> permute_string(\"abc\")\n# [\"abc\", \"bac\", \"bca\", \"acb\", \"cab\", \"cba\"]\n# >>> permute_string(\"abcd\")\n# [\"abcd\", \"bacd\", \"bcad\", \"bcda\", \"acbd\", \"cabd\", \"cbad\", \"cbda\", \"acdb\", \"cadb\", \"cdab\", \"cdba\", \"abdc\", \"badc\", \"bdac\", \"bdca\", \"adbc\", \"dabc\", \"dbac\", \"dbca\", \"adcb\", \"dacb\", \"dcab\", \"dcba\"]\nsub permute_string\n{\n  my ($str) = @_;\n", "entry_point": "permute_string", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"ab\";\nmy $x0 = permute_string($arg00);\nmy $v0 = [\"ab\", \"ba\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abc\";\nmy $x1 = permute_string($arg10);\nmy $v1 = [\"abc\", \"bac\", \"bca\", \"acb\", \"cab\", \"cba\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abcd\";\nmy $x2 = permute_string($arg20);\nmy $v2 = [\"abcd\", \"bacd\", \"bcad\", \"bcda\", \"acbd\", \"cabd\", \"cbad\", \"cbda\", \"acdb\", \"cadb\", \"cdab\", \"cdba\", \"abdc\", \"badc\", \"bdac\", \"bdca\", \"adbc\", \"dabc\", \"dbac\", \"dbca\", \"adcb\", \"dacb\", \"dcab\", \"dcba\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to print all permutations of a given string including duplicates.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/375", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to round the given number to the nearest multiple of a specific number.\n#\n# >>> round_num(4722, 10)\n# 4720\n# >>> round_num(1111, 5)\n# 1110\n# >>> round_num(219, 2)\n# 218\nsub round_num\n{\n  my ($n, $m) = @_;\n", "entry_point": "round_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4722;\nmy $arg01 = 10;\nmy $x0 = round_num($arg00, $arg01);\nmy $v0 = 4720;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1111;\nmy $arg11 = 5;\nmy $x1 = round_num($arg10, $arg11);\nmy $v1 = 1110;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 219;\nmy $arg21 = 2;\nmy $x2 = round_num($arg20, $arg21);\nmy $v2 = 218;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to round the given number to the nearest multiple of a specific number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/376", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n#\n# >>> remove_replica([1, 1, 4, 4, 4, 5, 5, 6, 7, 7])\n# [1, \"MSP\", 4, \"MSP\", \"MSP\", 5, \"MSP\", 6, 7, \"MSP\"]\n# >>> remove_replica([2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9])\n# [2, 3, 4, \"MSP\", 5, 6, \"MSP\", 7, 8, 9, \"MSP\"]\n# >>> remove_replica([2, 2, 5, 4, 5, 7, 5, 6, 7, 7])\n# [2, \"MSP\", 5, 4, \"MSP\", 7, \"MSP\", 6, \"MSP\", \"MSP\"]\nsub remove_replica\n{\n  my ($test_tup) = @_;\n", "entry_point": "remove_replica", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 1, 4, 4, 4, 5, 5, 6, 7, 7];\nmy $x0 = remove_replica($arg00);\nmy $v0 = [1, \"MSP\", 4, \"MSP\", \"MSP\", 5, \"MSP\", 6, 7, \"MSP\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9];\nmy $x1 = remove_replica($arg10);\nmy $v1 = [2, 3, 4, \"MSP\", 5, 6, \"MSP\", 7, 8, 9, \"MSP\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 2, 5, 4, 5, 7, 5, 6, 7, 7];\nmy $x2 = remove_replica($arg20);\nmy $v2 = [2, \"MSP\", 5, 4, \"MSP\", 7, \"MSP\", 6, \"MSP\", \"MSP\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/377", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to remove all occurrences of a character in a given string.\n#\n# >>> remove_char(\"aba\", \"a\")\n# \"b\"\n# >>> remove_char(\"toggle\", \"g\")\n# \"tole\"\n# >>> remove_char(\"aabbc\", \"b\")\n# \"aac\"\nsub remove_char\n{\n  my ($s, $c) = @_;\n", "entry_point": "remove_char", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"aba\";\nmy $arg01 = \"a\";\nmy $x0 = remove_char($arg00, $arg01);\nmy $v0 = \"b\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"toggle\";\nmy $arg11 = \"g\";\nmy $x1 = remove_char($arg10, $arg11);\nmy $v1 = \"tole\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"aabbc\";\nmy $arg21 = \"b\";\nmy $x2 = remove_char($arg20, $arg21);\nmy $v2 = \"aac\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to remove all occurrences of a character in a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/378", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to shift last element to first position in the given list.\n#\n# >>> move_first([1, 2, 3, 4])\n# [4, 1, 2, 3]\n# >>> move_first([0, 1, 2, 3])\n# [3, 0, 1, 2]\n# >>> move_first([9, 8, 7, 1])\n# [1, 9, 8, 7]\nsub move_first\n{\n  my ($test_list) = @_;\n", "entry_point": "move_first", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4];\nmy $x0 = move_first($arg00);\nmy $v0 = [4, 1, 2, 3];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [0, 1, 2, 3];\nmy $x1 = move_first($arg10);\nmy $v1 = [3, 0, 1, 2];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [9, 8, 7, 1];\nmy $x2 = move_first($arg20);\nmy $v2 = [1, 9, 8, 7];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to shift last element to first position in the given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/379", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the surface area of a cuboid.\n#\n# >>> surfacearea_cuboid(1, 2, 3)\n# 22\n# >>> surfacearea_cuboid(5, 7, 9)\n# 286\n# >>> surfacearea_cuboid(10, 15, 21)\n# 1350\nsub surfacearea_cuboid\n{\n  my ($l, $w, $h) = @_;\n", "entry_point": "surfacearea_cuboid", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 2;\nmy $arg02 = 3;\nmy $x0 = surfacearea_cuboid($arg00, $arg01, $arg02);\nmy $v0 = 22;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $arg11 = 7;\nmy $arg12 = 9;\nmy $x1 = surfacearea_cuboid($arg10, $arg11, $arg12);\nmy $v1 = 286;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $arg21 = 15;\nmy $arg22 = 21;\nmy $x2 = surfacearea_cuboid($arg20, $arg21, $arg22);\nmy $v2 = 1350;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the surface area of a cuboid.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/380", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to generate a two-dimensional array.\n#\n# >>> multi_list(3, 4)\n# [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n# >>> multi_list(5, 7)\n# [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\n# >>> multi_list(10, 15)\n# [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]\nsub multi_list\n{\n  my ($rownum, $colnum) = @_;\n", "entry_point": "multi_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 4;\nmy $x0 = multi_list($arg00, $arg01);\nmy $v0 = [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $arg11 = 7;\nmy $x1 = multi_list($arg10, $arg11);\nmy $v1 = [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $arg21 = 15;\nmy $x2 = multi_list($arg20, $arg21);\nmy $v2 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to generate a two-dimensional array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/381", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort a list of lists by a given index of the inner list.\n#\n# >>> index_on_inner_list([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 0)\n# [[\"Beau Turnbull\", 94, 98], [\"Brady Kent\", 97, 96], [\"Greyson Fulton\", 98, 99], [\"Wyatt Knott\", 91, 94]]\n# >>> index_on_inner_list([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 1)\n# [[\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98], [\"Brady Kent\", 97, 96], [\"Greyson Fulton\", 98, 99]]\n# >>> index_on_inner_list([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 2)\n# [[\"Wyatt Knott\", 91, 94], [\"Brady Kent\", 97, 96], [\"Beau Turnbull\", 94, 98], [\"Greyson Fulton\", 98, 99]]\nsub index_on_inner_list\n{\n  my ($list_data, $index_no) = @_;\n", "entry_point": "index_on_inner_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nmy $arg01 = 0;\nmy $x0 = index_on_inner_list($arg00, $arg01);\nmy $v0 = [[\"Beau Turnbull\", 94, 98], [\"Brady Kent\", 97, 96], [\"Greyson Fulton\", 98, 99], [\"Wyatt Knott\", 91, 94]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nmy $arg11 = 1;\nmy $x1 = index_on_inner_list($arg10, $arg11);\nmy $v1 = [[\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98], [\"Brady Kent\", 97, 96], [\"Greyson Fulton\", 98, 99]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nmy $arg21 = 2;\nmy $x2 = index_on_inner_list($arg20, $arg21);\nmy $v2 = [[\"Wyatt Knott\", 91, 94], [\"Brady Kent\", 97, 96], [\"Beau Turnbull\", 94, 98], [\"Greyson Fulton\", 98, 99]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort a list of lists by a given index of the inner list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/382", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the number of rotations in a circularly sorted array.\n#\n# >>> find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\n# 3\n# >>> find_rotation_count([8, 9, 10, 2, 5, 6])\n# 3\n# >>> find_rotation_count([2, 5, 6, 8, 9, 10])\n# 0\nsub find_rotation_count\n{\n  my ($a) = @_;\n", "entry_point": "find_rotation_count", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [8, 9, 10, 1, 2, 3, 4, 5, 6, 7];\nmy $x0 = find_rotation_count($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [8, 9, 10, 2, 5, 6];\nmy $x1 = find_rotation_count($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 5, 6, 8, 9, 10];\nmy $x2 = find_rotation_count($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the number of rotations in a circularly sorted array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/383", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to toggle all odd bits of a given number.\n#\n# >>> even_bit_toggle_number(10)\n# 15\n# >>> even_bit_toggle_number(20)\n# 1\n# >>> even_bit_toggle_number(30)\n# 11\nsub even_bit_toggle_number\n{\n  my ($n) = @_;\n", "entry_point": "even_bit_toggle_number", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = even_bit_toggle_number($arg00);\nmy $v0 = 15;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 20;\nmy $x1 = even_bit_toggle_number($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 30;\nmy $x2 = even_bit_toggle_number($arg20);\nmy $v2 = 11;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to toggle all odd bits of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/384", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the frequency of the smallest value in a given array.\n#\n# >>> frequency_of_smallest(5, [1, 2, 3, 4, 3])\n# 1\n# >>> frequency_of_smallest(7, [3, 1, 2, 5, 6, 2, 3])\n# 1\n# >>> frequency_of_smallest(7, [3, 3, 6, 3, 7, 4, 9])\n# 3\nsub frequency_of_smallest\n{\n  my ($n, $arr) = @_;\n", "entry_point": "frequency_of_smallest", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $arg01 = [1, 2, 3, 4, 3];\nmy $x0 = frequency_of_smallest($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 7;\nmy $arg11 = [3, 1, 2, 5, 6, 2, 3];\nmy $x1 = frequency_of_smallest($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 7;\nmy $arg21 = [3, 3, 6, 3, 7, 4, 9];\nmy $x2 = frequency_of_smallest($arg20, $arg21);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the frequency of the smallest value in a given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/385", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the n'th perrin number using recursion.\n#\n# >>> get_perrin(9)\n# 12\n# >>> get_perrin(4)\n# 2\n# >>> get_perrin(6)\n# 5\nsub get_perrin\n{\n  my ($n) = @_;\n", "entry_point": "get_perrin", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 9;\nmy $x0 = get_perrin($arg00);\nmy $v0 = 12;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = get_perrin($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 6;\nmy $x2 = get_perrin($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the n'th perrin number using recursion.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/386", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n#\n# >>> swap_count(\"[]][][\")\n# 2\n# >>> swap_count(\"[[][]]\")\n# 0\n# >>> swap_count(\"[[][]]][\")\n# 1\nsub swap_count\n{\n  my ($s) = @_;\n", "entry_point": "swap_count", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"[]][][\";\nmy $x0 = swap_count($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"[[][]]\";\nmy $x1 = swap_count($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"[[][]]][\";\nmy $x2 = swap_count($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/387", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the hexadecimal number is even or odd.\n#\n# >>> even_or_odd(\"AB3454D\")\n# \"Odd\"\n# >>> even_or_odd(\"ABC\")\n# \"Even\"\n# >>> even_or_odd(\"AAD\")\n# \"Odd\"\nsub even_or_odd\n{\n  my ($n) = @_;\n", "entry_point": "even_or_odd", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"AB3454D\";\nmy $x0 = even_or_odd($arg00);\nmy $v0 = \"Odd\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"ABC\";\nmy $x1 = even_or_odd($arg10);\nmy $v1 = \"Even\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"AAD\";\nmy $x2 = even_or_odd($arg20);\nmy $v2 = \"Odd\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the hexadecimal number is even or odd.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/388", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the highest power of 2 that is less than or equal to n.\n#\n# >>> highest_power_of_2(10)\n# 8\n# >>> highest_power_of_2(19)\n# 16\n# >>> highest_power_of_2(32)\n# 32\nsub highest_power_of_2\n{\n  my ($n) = @_;\n", "entry_point": "highest_power_of_2", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = highest_power_of_2($arg00);\nmy $v0 = 8;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 19;\nmy $x1 = highest_power_of_2($arg10);\nmy $v1 = 16;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 32;\nmy $x2 = highest_power_of_2($arg20);\nmy $v2 = 32;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the highest power of 2 that is less than or equal to n.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/389", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the n'th lucas number.\n#\n# >>> find_lucas(9)\n# 76\n# >>> find_lucas(4)\n# 7\n# >>> find_lucas(3)\n# 4\nsub find_lucas\n{\n  my ($n) = @_;\n", "entry_point": "find_lucas", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 9;\nmy $x0 = find_lucas($arg00);\nmy $v0 = 76;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = find_lucas($arg10);\nmy $v1 = 7;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $x2 = find_lucas($arg20);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the n'th lucas number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/390", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to insert a given string at the beginning of all items in a list.\n#\n# >>> add_string([1, 2, 3, 4], \"temp{0}\")\n# [\"temp1\", \"temp2\", \"temp3\", \"temp4\"]\n# >>> add_string([\"a\", \"b\", \"c\", \"d\"], \"python{0}\")\n# [\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"]\n# >>> add_string([5, 6, 7, 8], \"string{0}\")\n# [\"string5\", \"string6\", \"string7\", \"string8\"]\nsub add_string\n{\n  my ($list, $string) = @_;\n", "entry_point": "add_string", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4];\nmy $arg01 = \"temp{0}\";\nmy $x0 = add_string($arg00, $arg01);\nmy $v0 = [\"temp1\", \"temp2\", \"temp3\", \"temp4\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"a\", \"b\", \"c\", \"d\"];\nmy $arg11 = \"python{0}\";\nmy $x1 = add_string($arg10, $arg11);\nmy $v1 = [\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [5, 6, 7, 8];\nmy $arg21 = \"string{0}\";\nmy $x2 = add_string($arg20, $arg21);\nmy $v2 = [\"string5\", \"string6\", \"string7\", \"string8\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to insert a given string at the beginning of all items in a list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/391", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert more than one list to nested dictionary.\n#\n# >>> convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92])\n# [{\"S001\" => {\"Adina Park\" => 85}}, {\"S002\" => {\"Leyton Marsh\" => 98}}, {\"S003\" => {\"Duncan Boyle\" => 89}}, {\"S004\" => {\"Saim Richards\" => 92}}]\n# >>> convert_list_dictionary([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400])\n# [{\"abc\" => {\"python\" => 100}}, {\"def\" => {\"program\" => 200}}, {\"ghi\" => {\"language\" => 300}}, {\"jkl\" => {\"programs\" => 400}}]\n# >>> convert_list_dictionary([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40])\n# [{\"A1\" => {\"java\" => 10}}, {\"A2\" => {\"C\" => 20}}, {\"A3\" => {\"C++\" => 30}}, {\"A4\" => {\"DBMS\" => 40}}]\nsub convert_list_dictionary\n{\n  my ($l1, $l2, $l3) = @_;\n", "entry_point": "convert_list_dictionary", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"S001\", \"S002\", \"S003\", \"S004\"];\nmy $arg01 = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"];\nmy $arg02 = [85, 98, 89, 92];\nmy $x0 = convert_list_dictionary($arg00, $arg01, $arg02);\nmy $v0 = [{\"S001\" => {\"Adina Park\" => 85}}, {\"S002\" => {\"Leyton Marsh\" => 98}}, {\"S003\" => {\"Duncan Boyle\" => 89}}, {\"S004\" => {\"Saim Richards\" => 92}}];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"abc\", \"def\", \"ghi\", \"jkl\"];\nmy $arg11 = [\"python\", \"program\", \"language\", \"programs\"];\nmy $arg12 = [100, 200, 300, 400];\nmy $x1 = convert_list_dictionary($arg10, $arg11, $arg12);\nmy $v1 = [{\"abc\" => {\"python\" => 100}}, {\"def\" => {\"program\" => 200}}, {\"ghi\" => {\"language\" => 300}}, {\"jkl\" => {\"programs\" => 400}}];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"A1\", \"A2\", \"A3\", \"A4\"];\nmy $arg21 = [\"java\", \"C\", \"C++\", \"DBMS\"];\nmy $arg22 = [10, 20, 30, 40];\nmy $x2 = convert_list_dictionary($arg20, $arg21, $arg22);\nmy $v2 = [{\"A1\" => {\"java\" => 10}}, {\"A2\" => {\"C\" => 20}}, {\"A3\" => {\"C++\" => 30}}, {\"A4\" => {\"DBMS\" => 40}}];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert more than one list to nested dictionary.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/392", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n#\n# >>> get_max_sum(60)\n# 106\n# >>> get_max_sum(10)\n# 12\n# >>> get_max_sum(2)\n# 2\nsub get_max_sum\n{\n  my ($n) = @_;\n", "entry_point": "get_max_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 60;\nmy $x0 = get_max_sum($arg00);\nmy $v0 = 106;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $x1 = get_max_sum($arg10);\nmy $v1 = 12;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $x2 = get_max_sum($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/393", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the list with maximum length using lambda function.\n#\n# >>> max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n# [3, [13, 15, 17]]\n# >>> max_length_list([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])\n# [5, [1, 2, 3, 4, 5]]\n# >>> max_length_list([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]])\n# [4, [6, 7, 8, 9]]\nsub max_length_list\n{\n  my ($input_list) = @_;\n", "entry_point": "max_length_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]];\nmy $x0 = max_length_list($arg00);\nmy $v0 = [3, [13, 15, 17]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]];\nmy $x1 = max_length_list($arg10);\nmy $v1 = [5, [1, 2, 3, 4, 5]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]];\nmy $x2 = max_length_list($arg20);\nmy $v2 = [4, [6, 7, 8, 9]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the list with maximum length using lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/394", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if given tuple is distinct or not.\n#\n# >>> check_distinct([1, 4, 5, 6, 1, 4])\n# 0\n# >>> check_distinct([1, 4, 5, 6])\n# 1\n# >>> check_distinct([2, 3, 4, 5, 6])\n# 1\nsub check_distinct\n{\n  my ($test_tup) = @_;\n", "entry_point": "check_distinct", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 4, 5, 6, 1, 4];\nmy $x0 = check_distinct($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 4, 5, 6];\nmy $x1 = check_distinct($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 3, 4, 5, 6];\nmy $x2 = check_distinct($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if given tuple is distinct or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/395", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the first non-repeated character in a given string.\n#\n# >>> first_non_repeating_character(\"abcabc\")\n# \"none\"\n# >>> first_non_repeating_character(\"abc\")\n# \"a\"\n# >>> first_non_repeating_character(\"ababc\")\n# \"c\"\nsub first_non_repeating_character\n{\n  my ($str1) = @_;\n", "entry_point": "first_non_repeating_character", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abcabc\";\nmy $x0 = first_non_repeating_character($arg00);\nmy $v0 = \"none\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abc\";\nmy $x1 = first_non_repeating_character($arg10);\nmy $v1 = \"a\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"ababc\";\nmy $x2 = first_non_repeating_character($arg20);\nmy $v2 = \"c\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the first non-repeated character in a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/396", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether the given string starts and ends with the same character or not using regex.\n#\n# >>> check_char(\"abba\")\n# \"Valid\"\n# >>> check_char(\"a\")\n# \"Valid\"\n# >>> check_char(\"abcd\")\n# \"Invalid\"\nsub check_char\n{\n  my ($string) = @_;\n", "entry_point": "check_char", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abba\";\nmy $x0 = check_char($arg00);\nmy $v0 = \"Valid\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"a\";\nmy $x1 = check_char($arg10);\nmy $v1 = \"Valid\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abcd\";\nmy $x2 = check_char($arg20);\nmy $v2 = \"Invalid\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether the given string starts and ends with the same character or not using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/397", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the median of three specific numbers.\n#\n# >>> median_numbers(25, 55, 65)\n# 55.0\n# >>> median_numbers(20, 10, 30)\n# 20.0\n# >>> median_numbers(15, 45, 75)\n# 45.0\nsub median_numbers\n{\n  my ($a, $b, $c) = @_;\n", "entry_point": "median_numbers", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 25;\nmy $arg01 = 55;\nmy $arg02 = 65;\nmy $x0 = median_numbers($arg00, $arg01, $arg02);\nmy $v0 = 55.0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 20;\nmy $arg11 = 10;\nmy $arg12 = 30;\nmy $x1 = median_numbers($arg10, $arg11, $arg12);\nmy $v1 = 20.0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 15;\nmy $arg21 = 45;\nmy $arg22 = 75;\nmy $x2 = median_numbers($arg20, $arg21, $arg22);\nmy $v2 = 45.0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the median of three specific numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/398", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to compute the sum of digits of each number of a given list.\n#\n# >>> sum_of_digits([10, 2, 56])\n# 14\n# >>> sum_of_digits([[10, 20, 4, 5, \"b\", 70, \"a\"]])\n# 19\n# >>> sum_of_digits([10, 20, -4, 5, -70])\n# 19\nsub sum_of_digits\n{\n  my ($nums) = @_;\n", "entry_point": "sum_of_digits", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 2, 56];\nmy $x0 = sum_of_digits($arg00);\nmy $v0 = 14;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[10, 20, 4, 5, \"b\", 70, \"a\"]];\nmy $x1 = sum_of_digits($arg10);\nmy $v1 = 19;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [10, 20, -4, 5, -70];\nmy $x2 = sum_of_digits($arg20);\nmy $v2 = 19;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to compute the sum of digits of each number of a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/399", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to perform the mathematical bitwise xor operation across the given tuples.\n#\n# >>> bitwise_xor([10, 4, 6, 9], [5, 2, 3, 3])\n# [15, 6, 5, 10]\n# >>> bitwise_xor([11, 5, 7, 10], [6, 3, 4, 4])\n# [13, 6, 3, 14]\n# >>> bitwise_xor([12, 6, 8, 11], [7, 4, 5, 6])\n# [11, 2, 13, 13]\nsub bitwise_xor\n{\n  my ($test_tup1, $test_tup2) = @_;\n", "entry_point": "bitwise_xor", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 4, 6, 9];\nmy $arg01 = [5, 2, 3, 3];\nmy $x0 = bitwise_xor($arg00, $arg01);\nmy $v0 = [15, 6, 5, 10];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [11, 5, 7, 10];\nmy $arg11 = [6, 3, 4, 4];\nmy $x1 = bitwise_xor($arg10, $arg11);\nmy $v1 = [13, 6, 3, 14];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [12, 6, 8, 11];\nmy $arg21 = [7, 4, 5, 6];\nmy $x2 = bitwise_xor($arg20, $arg21);\nmy $v2 = [11, 2, 13, 13];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/400", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract the frequency of unique tuples in the given list order irrespective.\n#\n# >>> extract_freq([[3, 4], [1, 2], [4, 3], [5, 6]])\n# 3\n# >>> extract_freq([[4, 15], [2, 3], [5, 4], [6, 7]])\n# 4\n# >>> extract_freq([[5, 16], [2, 3], [6, 5], [6, 9]])\n# 4\nsub extract_freq\n{\n  my ($test_list) = @_;\n", "entry_point": "extract_freq", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[3, 4], [1, 2], [4, 3], [5, 6]];\nmy $x0 = extract_freq($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[4, 15], [2, 3], [5, 4], [6, 7]];\nmy $x1 = extract_freq($arg10);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[5, 16], [2, 3], [6, 5], [6, 9]];\nmy $x2 = extract_freq($arg20);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract the frequency of unique tuples in the given list order irrespective.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/401", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n#\n# >>> add_nested_tuples([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n# [[7, 10], [7, 14], [3, 10], [8, 13]]\n# >>> add_nested_tuples([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])\n# [[9, 12], [9, 16], [5, 12], [10, 15]]\n# >>> add_nested_tuples([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])\n# [[11, 14], [11, 18], [7, 14], [12, 17]]\nsub add_nested_tuples\n{\n  my ($test_tup1, $test_tup2) = @_;\n", "entry_point": "add_nested_tuples", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 3], [4, 5], [2, 9], [1, 10]];\nmy $arg01 = [[6, 7], [3, 9], [1, 1], [7, 3]];\nmy $x0 = add_nested_tuples($arg00, $arg01);\nmy $v0 = [[7, 10], [7, 14], [3, 10], [8, 13]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[2, 4], [5, 6], [3, 10], [2, 11]];\nmy $arg11 = [[7, 8], [4, 10], [2, 2], [8, 4]];\nmy $x1 = add_nested_tuples($arg10, $arg11);\nmy $v1 = [[9, 12], [9, 16], [5, 12], [10, 15]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[3, 5], [6, 7], [4, 11], [3, 12]];\nmy $arg21 = [[8, 9], [5, 11], [3, 3], [9, 5]];\nmy $x2 = add_nested_tuples($arg20, $arg21);\nmy $v2 = [[11, 14], [11, 18], [7, 14], [12, 17]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/402", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to compute the value of ncr%p.\n#\n# >>> ncr_modp(10, 2, 13)\n# 6\n# >>> ncr_modp(15, 12, 43)\n# 25\n# >>> ncr_modp(17, 9, 18)\n# 10\nsub ncr_modp\n{\n  my ($n, $r, $p) = @_;\n", "entry_point": "ncr_modp", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 2;\nmy $arg02 = 13;\nmy $x0 = ncr_modp($arg00, $arg01, $arg02);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 15;\nmy $arg11 = 12;\nmy $arg12 = 43;\nmy $x1 = ncr_modp($arg10, $arg11, $arg12);\nmy $v1 = 25;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 17;\nmy $arg21 = 9;\nmy $arg22 = 18;\nmy $x2 = ncr_modp($arg20, $arg21, $arg22);\nmy $v2 = 10;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to compute the value of ncr%p.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/403", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if a url is valid or not using regex.\n#\n# >>> is_valid_url(\"https:\\/\\/www.google.com\")\n# 1\n# >>> is_valid_url(\"https:/www.gmail.com\")\n# 0\n# >>> is_valid_url(\"https:\\/\\/ www.redit.com\")\n# 0\nsub is_valid_url\n{\n  my ($str) = @_;\n", "entry_point": "is_valid_url", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"https:\\/\\/www.google.com\";\nmy $x0 = is_valid_url($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"https:/www.gmail.com\";\nmy $x1 = is_valid_url($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"https:\\/\\/ www.redit.com\";\nmy $x2 = is_valid_url($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if a url is valid or not using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/404", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the minimum of two numbers.\n#\n# >>> minimum(1, 2)\n# 1\n# >>> minimum(-5, -4)\n# -5\n# >>> minimum(0, 0)\n# 0\nsub minimum\n{\n  my ($a, $b) = @_;\n", "entry_point": "minimum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 2;\nmy $x0 = minimum($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = -5;\nmy $arg11 = -4;\nmy $x1 = minimum($arg10, $arg11);\nmy $v1 = -5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 0;\nmy $arg21 = 0;\nmy $x2 = minimum($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the minimum of two numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/405", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether an element exists within a tuple.\n#\n# >>> check_tuplex([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"r\")\n# 1\n# >>> check_tuplex([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"5\")\n# 0\n# >>> check_tuplex([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], 3)\n# 1\nsub check_tuplex\n{\n  my ($tuplex, $tuple1) = @_;\n", "entry_point": "check_tuplex", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"];\nmy $arg01 = \"r\";\nmy $x0 = check_tuplex($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"];\nmy $arg11 = \"5\";\nmy $x1 = check_tuplex($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"];\nmy $arg21 = 3;\nmy $x2 = check_tuplex($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether an element exists within a tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/406", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the parity of a given number.\n#\n# >>> find_parity(12)\n# \"Even Parity\"\n# >>> find_parity(7)\n# \"Odd Parity\"\n# >>> find_parity(10)\n# \"Even Parity\"\nsub find_parity\n{\n  my ($x) = @_;\n", "entry_point": "find_parity", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 12;\nmy $x0 = find_parity($arg00);\nmy $v0 = \"Even Parity\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 7;\nmy $x1 = find_parity($arg10);\nmy $v1 = \"Odd Parity\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $x2 = find_parity($arg20);\nmy $v2 = \"Even Parity\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the parity of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/407", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to create the next bigger number by rearranging the digits of a given number.\n#\n# >>> rearrange_bigger(12)\n# 21\n# >>> rearrange_bigger(10)\n# 0\n# >>> rearrange_bigger(102)\n# 120\nsub rearrange_bigger\n{\n  my ($n) = @_;\n", "entry_point": "rearrange_bigger", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 12;\nmy $x0 = rearrange_bigger($arg00);\nmy $v0 = 21;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $x1 = rearrange_bigger($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 102;\nmy $x2 = rearrange_bigger($arg20);\nmy $v2 = 120;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to create the next bigger number by rearranging the digits of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/408", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n#\n# >>> k_smallest_pairs([1, 3, 7], [2, 4, 6], 2)\n# [[1, 2], [1, 4]]\n# >>> k_smallest_pairs([1, 3, 7], [2, 4, 6], 1)\n# [[1, 2]]\n# >>> k_smallest_pairs([1, 3, 7], [2, 4, 6], 7)\n# [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\nsub k_smallest_pairs\n{\n  my ($nums1, $nums2, $k) = @_;\n", "entry_point": "k_smallest_pairs", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 7];\nmy $arg01 = [2, 4, 6];\nmy $arg02 = 2;\nmy $x0 = k_smallest_pairs($arg00, $arg01, $arg02);\nmy $v0 = [[1, 2], [1, 4]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 3, 7];\nmy $arg11 = [2, 4, 6];\nmy $arg12 = 1;\nmy $x1 = k_smallest_pairs($arg10, $arg11, $arg12);\nmy $v1 = [[1, 2]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, 7];\nmy $arg21 = [2, 4, 6];\nmy $arg22 = 7;\nmy $x2 = k_smallest_pairs($arg20, $arg21, $arg22);\nmy $v2 = [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/409", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the minimum product from the pairs of tuples within a given list.\n#\n# >>> min_product_tuple([[2, 7], [2, 6], [1, 8], [4, 9]])\n# 8\n# >>> min_product_tuple([[10, 20], [15, 2], [5, 10]])\n# 30\n# >>> min_product_tuple([[11, 44], [10, 15], [20, 5], [12, 9]])\n# 100\nsub min_product_tuple\n{\n  my ($list1) = @_;\n", "entry_point": "min_product_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[2, 7], [2, 6], [1, 8], [4, 9]];\nmy $x0 = min_product_tuple($arg00);\nmy $v0 = 8;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[10, 20], [15, 2], [5, 10]];\nmy $x1 = min_product_tuple($arg10);\nmy $v1 = 30;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[11, 44], [10, 15], [20, 5], [12, 9]];\nmy $x2 = min_product_tuple($arg20);\nmy $v2 = 100;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the minimum product from the pairs of tuples within a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/410", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the minimum value in a given heterogeneous list.\n#\n# >>> min_val([\"Python\", 3, 2, 4, 5, \"version\"])\n# 2\n# >>> min_val([\"Python\", 15, 20, 25])\n# 15\n# >>> min_val([\"Python\", 30, 20, 40, 50, \"version\"])\n# 20\nsub min_val\n{\n  my ($listval) = @_;\n", "entry_point": "min_val", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"Python\", 3, 2, 4, 5, \"version\"];\nmy $x0 = min_val($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"Python\", 15, 20, 25];\nmy $x1 = min_val($arg10);\nmy $v1 = 15;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"Python\", 30, 20, 40, 50, \"version\"];\nmy $x2 = min_val($arg20);\nmy $v2 = 20;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the minimum value in a given heterogeneous list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/411", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert the given snake case string to camel case string by using regex.\n#\n# >>> snake_to_camel(\"android_tv\")\n# \"AndroidTv\"\n# >>> snake_to_camel(\"google_pixel\")\n# \"GooglePixel\"\n# >>> snake_to_camel(\"apple_watch\")\n# \"AppleWatch\"\nsub snake_to_camel\n{\n  my ($word) = @_;\n", "entry_point": "snake_to_camel", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"android_tv\";\nmy $x0 = snake_to_camel($arg00);\nmy $v0 = \"AndroidTv\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"google_pixel\";\nmy $x1 = snake_to_camel($arg10);\nmy $v1 = \"GooglePixel\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"apple_watch\";\nmy $x2 = snake_to_camel($arg20);\nmy $v2 = \"AppleWatch\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert the given snake case string to camel case string by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/412", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to remove odd numbers from a given list.\n#\n# >>> remove_odd([1, 2, 3])\n# [2]\n# >>> remove_odd([2, 4, 6])\n# [2, 4, 6]\n# >>> remove_odd([10, 20, 3])\n# [10, 20]\nsub remove_odd\n{\n  my ($l) = @_;\n", "entry_point": "remove_odd", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $x0 = remove_odd($arg00);\nmy $v0 = [2];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 4, 6];\nmy $x1 = remove_odd($arg10);\nmy $v1 = [2, 4, 6];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [10, 20, 3];\nmy $x2 = remove_odd($arg20);\nmy $v2 = [10, 20];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to remove odd numbers from a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/413", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract the nth element from a given list of tuples.\n#\n# >>> extract_nth_element([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 0)\n# [\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"]\n# >>> extract_nth_element([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 2)\n# [99, 96, 94, 98]\n# >>> extract_nth_element([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 1)\n# [98, 97, 91, 94]\nsub extract_nth_element\n{\n  my ($list1, $n) = @_;\n", "entry_point": "extract_nth_element", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nmy $arg01 = 0;\nmy $x0 = extract_nth_element($arg00, $arg01);\nmy $v0 = [\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nmy $arg11 = 2;\nmy $x1 = extract_nth_element($arg10, $arg11);\nmy $v1 = [99, 96, 94, 98];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nmy $arg21 = 1;\nmy $x2 = extract_nth_element($arg20, $arg21);\nmy $v2 = [98, 97, 91, 94];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract the nth element from a given list of tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/414", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the value exists in a sequence or not.\n#\n# >>> overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9])\n# 0\n# >>> overlapping([1, 2, 3], [4, 5, 6])\n# 0\n# >>> overlapping([1, 4, 5], [1, 4, 5])\n# 1\nsub overlapping\n{\n  my ($list1, $list2) = @_;\n", "entry_point": "overlapping", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5];\nmy $arg01 = [6, 7, 8, 9];\nmy $x0 = overlapping($arg00, $arg01);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3];\nmy $arg11 = [4, 5, 6];\nmy $x1 = overlapping($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 4, 5];\nmy $arg21 = [1, 4, 5];\nmy $x2 = overlapping($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the value exists in a sequence or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/415", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find a pair with highest product from a given array of integers.\n#\n# >>> max_product([1, 2, 3, 4, 7, 0, 8, 4])\n# [7, 8]\n# >>> max_product([0, -1, -2, -4, 5, 0, -6])\n# [-4, -6]\n# >>> max_product([1, 2, 3])\n# [2, 3]\nsub max_product\n{\n  my ($arr) = @_;\n", "entry_point": "max_product", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 7, 0, 8, 4];\nmy $x0 = max_product($arg00);\nmy $v0 = [7, 8];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [0, -1, -2, -4, 5, 0, -6];\nmy $x1 = max_product($arg10);\nmy $v1 = [-4, -6];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3];\nmy $x2 = max_product($arg20);\nmy $v2 = [2, 3];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find a pair with highest product from a given array of integers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/416", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n#\n# >>> breaksum(12)\n# 13\n# >>> breaksum(24)\n# 27\n# >>> breaksum(23)\n# 23\nsub breaksum\n{\n  my ($n) = @_;\n", "entry_point": "breaksum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 12;\nmy $x0 = breaksum($arg00);\nmy $v0 = 13;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 24;\nmy $x1 = breaksum($arg10);\nmy $v1 = 27;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 23;\nmy $x2 = breaksum($arg20);\nmy $v2 = 23;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/417", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find common first element in given list of tuple.\n#\n# >>> group_tuples([[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]])\n# [[\"x\", \"y\", \"z\"], [\"w\", \"t\"]]\n# >>> group_tuples([[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]])\n# [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]]\n# >>> group_tuples([[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]])\n# [[\"f\", \"g\", \"g\"], [\"h\", \"i\"]]\nsub group_tuples\n{\n  my ($input) = @_;\n", "entry_point": "group_tuples", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]];\nmy $x0 = group_tuples($arg00);\nmy $v0 = [[\"x\", \"y\", \"z\"], [\"w\", \"t\"]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]];\nmy $x1 = group_tuples($arg10);\nmy $v1 = [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]];\nmy $x2 = group_tuples($arg20);\nmy $v2 = [[\"f\", \"g\", \"g\"], [\"h\", \"i\"]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find common first element in given list of tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/418", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sublist having maximum length.\n#\n# >>> find_max([[\"A\"], [\"A\", \"B\"], [\"A\", \"B\", \"C\"]])\n# [\"A\", \"B\", \"C\"]\n# >>> find_max([[1], [1, 2], [1, 2, 3]])\n# [1, 2, 3]\n# >>> find_max([[1, 1], [1, 2, 3], [1, 5, 6, 1]])\n# [1, 5, 6, 1]\nsub find_max\n{\n  my ($lst) = @_;\n", "entry_point": "find_max", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"A\"], [\"A\", \"B\"], [\"A\", \"B\", \"C\"]];\nmy $x0 = find_max($arg00);\nmy $v0 = [\"A\", \"B\", \"C\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1], [1, 2], [1, 2, 3]];\nmy $x1 = find_max($arg10);\nmy $v1 = [1, 2, 3];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[1, 1], [1, 2, 3], [1, 5, 6, 1]];\nmy $x2 = find_max($arg20);\nmy $v2 = [1, 5, 6, 1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sublist having maximum length.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/419", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n#\n# >>> round_and_sum([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5])\n# 243\n# >>> round_and_sum([5, 2, 9, 24.3, 29])\n# 345\n# >>> round_and_sum([25.0, 56.7, 89.2])\n# 513\nsub round_and_sum\n{\n  my ($list1) = @_;\n", "entry_point": "round_and_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5];\nmy $x0 = round_and_sum($arg00);\nmy $v0 = 243;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 2, 9, 24.3, 29];\nmy $x1 = round_and_sum($arg10);\nmy $v1 = 345;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [25.0, 56.7, 89.2];\nmy $x2 = round_and_sum($arg20);\nmy $v2 = 513;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/420", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the cube sum of first n even natural numbers.\n#\n# >>> cube_sum(2)\n# 72\n# >>> cube_sum(3)\n# 288\n# >>> cube_sum(4)\n# 800\nsub cube_sum\n{\n  my ($n) = @_;\n", "entry_point": "cube_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = cube_sum($arg00);\nmy $v0 = 72;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $x1 = cube_sum($arg10);\nmy $v1 = 288;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $x2 = cube_sum($arg20);\nmy $v2 = 800;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the cube sum of first n even natural numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/421", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to concatenate each element of tuple by the delimiter.\n#\n# >>> concatenate_tuple([\"ID\", \"is\", 4, \"UTS\"])\n# \"ID-is-4-UTS\"\n# >>> concatenate_tuple([\"QWE\", \"is\", 4, \"RTY\"])\n# \"QWE-is-4-RTY\"\n# >>> concatenate_tuple([\"ZEN\", \"is\", 4, \"OP\"])\n# \"ZEN-is-4-OP\"\nsub concatenate_tuple\n{\n  my ($test_tup) = @_;\n", "entry_point": "concatenate_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"ID\", \"is\", 4, \"UTS\"];\nmy $x0 = concatenate_tuple($arg00);\nmy $v0 = \"ID-is-4-UTS\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"QWE\", \"is\", 4, \"RTY\"];\nmy $x1 = concatenate_tuple($arg10);\nmy $v1 = \"QWE-is-4-RTY\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"ZEN\", \"is\", 4, \"OP\"];\nmy $x2 = concatenate_tuple($arg20);\nmy $v2 = \"ZEN-is-4-OP\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to concatenate each element of tuple by the delimiter.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/422", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the average of cubes of first n natural numbers.\n#\n# >>> find_average_of_cube(2)\n# 4.5\n# >>> find_average_of_cube(3)\n# 12\n# >>> find_average_of_cube(1)\n# 1\nsub find_average_of_cube\n{\n  my ($n) = @_;\n", "entry_point": "find_average_of_cube", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = find_average_of_cube($arg00);\nmy $v0 = 4.5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $x1 = find_average_of_cube($arg10);\nmy $v1 = 12;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $x2 = find_average_of_cube($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the average of cubes of first n natural numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/423", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to solve gold mine problem.\n#\n# >>> get_maxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]], 4, 4)\n# 16\n# >>> get_maxgold([[10, 20], [30, 40]], 2, 2)\n# 70\n# >>> get_maxgold([[4, 9], [3, 7]], 2, 2)\n# 13\nsub get_maxgold\n{\n  my ($gold, $m, $n) = @_;\n", "entry_point": "get_maxgold", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]];\nmy $arg01 = 4;\nmy $arg02 = 4;\nmy $x0 = get_maxgold($arg00, $arg01, $arg02);\nmy $v0 = 16;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[10, 20], [30, 40]];\nmy $arg11 = 2;\nmy $arg12 = 2;\nmy $x1 = get_maxgold($arg10, $arg11, $arg12);\nmy $v1 = 70;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[4, 9], [3, 7]];\nmy $arg21 = 2;\nmy $arg22 = 2;\nmy $x2 = get_maxgold($arg20, $arg21, $arg22);\nmy $v2 = 13;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to solve gold mine problem.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/424", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract only the rear index element of each string in the given tuple.\n#\n# >>> extract_rear([\"Mers\", \"for\", \"Vers\"])\n# [\"s\", \"r\", \"s\"]\n# >>> extract_rear([\"Avenge\", \"for\", \"People\"])\n# [\"e\", \"r\", \"e\"]\n# >>> extract_rear([\"Gotta\", \"get\", \"go\"])\n# [\"a\", \"t\", \"o\"]\nsub extract_rear\n{\n  my ($test_tuple) = @_;\n", "entry_point": "extract_rear", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"Mers\", \"for\", \"Vers\"];\nmy $x0 = extract_rear($arg00);\nmy $v0 = [\"s\", \"r\", \"s\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"Avenge\", \"for\", \"People\"];\nmy $x1 = extract_rear($arg10);\nmy $v1 = [\"e\", \"r\", \"e\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"Gotta\", \"get\", \"go\"];\nmy $x2 = extract_rear($arg20);\nmy $v2 = [\"a\", \"t\", \"o\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract only the rear index element of each string in the given tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/425", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count the number of sublists containing a particular element.\n#\n# >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)\n# 3\n# >>> count_element_in_list([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\")\n# 3\n# >>> count_element_in_list([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\")\n# 1\nsub count_element_in_list\n{\n  my ($list1, $x) = @_;\n", "entry_point": "count_element_in_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 3], [5, 7], [1, 11], [1, 15, 7]];\nmy $arg01 = 1;\nmy $x0 = count_element_in_list($arg00, $arg01);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]];\nmy $arg11 = \"A\";\nmy $x1 = count_element_in_list($arg10, $arg11);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]];\nmy $arg21 = \"E\";\nmy $x2 = count_element_in_list($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count the number of sublists containing a particular element.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/426", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to filter odd numbers using lambda function.\n#\n# >>> filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# [1, 3, 5, 7, 9]\n# >>> filter_oddnumbers([10, 20, 45, 67, 84, 93])\n# [45, 67, 93]\n# >>> filter_oddnumbers([5, 7, 9, 8, 6, 4, 3])\n# [5, 7, 9, 3]\nsub filter_oddnumbers\n{\n  my ($nums) = @_;\n", "entry_point": "filter_oddnumbers", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $x0 = filter_oddnumbers($arg00);\nmy $v0 = [1, 3, 5, 7, 9];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [10, 20, 45, 67, 84, 93];\nmy $x1 = filter_oddnumbers($arg10);\nmy $v1 = [45, 67, 93];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [5, 7, 9, 8, 6, 4, 3];\nmy $x2 = filter_oddnumbers($arg20);\nmy $v2 = [5, 7, 9, 3];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to filter odd numbers using lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/427", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n#\n# >>> change_date_format(\"2026-01-02\")\n# \"02-01-2026\"\n# >>> change_date_format(\"2020-11-13\")\n# \"13-11-2020\"\n# >>> change_date_format(\"2021-04-26\")\n# \"26-04-2021\"\nsub change_date_format\n{\n  my ($dt) = @_;\n", "entry_point": "change_date_format", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"2026-01-02\";\nmy $x0 = change_date_format($arg00);\nmy $v0 = \"02-01-2026\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"2020-11-13\";\nmy $x1 = change_date_format($arg10);\nmy $v1 = \"13-11-2020\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"2021-04-26\";\nmy $x2 = change_date_format($arg20);\nmy $v2 = \"26-04-2021\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/428", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort the given array by using shell sort.\n#\n# >>> shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])\n# [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n# >>> shell_sort([24, 22, 39, 34, 87, 73, 68])\n# [22, 24, 34, 39, 68, 73, 87]\n# >>> shell_sort([32, 30, 16, 96, 82, 83, 74])\n# [16, 30, 32, 74, 82, 83, 96]\nsub shell_sort\n{\n  my ($my_list) = @_;\n", "entry_point": "shell_sort", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [12, 23, 4, 5, 3, 2, 12, 81, 56, 95];\nmy $x0 = shell_sort($arg00);\nmy $v0 = [2, 3, 4, 5, 12, 12, 23, 56, 81, 95];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [24, 22, 39, 34, 87, 73, 68];\nmy $x1 = shell_sort($arg10);\nmy $v1 = [22, 24, 34, 39, 68, 73, 87];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [32, 30, 16, 96, 82, 83, 74];\nmy $x2 = shell_sort($arg20);\nmy $v2 = [16, 30, 32, 74, 82, 83, 96];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort the given array by using shell sort.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/429", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract the elementwise and tuples from the given two tuples.\n#\n# >>> and_tuples([10, 4, 6, 9], [5, 2, 3, 3])\n# [0, 0, 2, 1]\n# >>> and_tuples([1, 2, 3, 4], [5, 6, 7, 8])\n# [1, 2, 3, 0]\n# >>> and_tuples([8, 9, 11, 12], [7, 13, 14, 17])\n# [0, 9, 10, 0]\nsub and_tuples\n{\n  my ($test_tup1, $test_tup2) = @_;\n", "entry_point": "and_tuples", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 4, 6, 9];\nmy $arg01 = [5, 2, 3, 3];\nmy $x0 = and_tuples($arg00, $arg01);\nmy $v0 = [0, 0, 2, 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4];\nmy $arg11 = [5, 6, 7, 8];\nmy $x1 = and_tuples($arg10, $arg11);\nmy $v1 = [1, 2, 3, 0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [8, 9, 11, 12];\nmy $arg21 = [7, 13, 14, 17];\nmy $x2 = and_tuples($arg20, $arg21);\nmy $v2 = [0, 9, 10, 0];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract the elementwise and tuples from the given two tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/430", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the directrix of a parabola.\n#\n# >>> parabola_directrix(5, 3, 2)\n# -198\n# >>> parabola_directrix(9, 8, 4)\n# -2336\n# >>> parabola_directrix(2, 4, 6)\n# -130\nsub parabola_directrix\n{\n  my ($a, $b, $c) = @_;\n", "entry_point": "parabola_directrix", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $arg01 = 3;\nmy $arg02 = 2;\nmy $x0 = parabola_directrix($arg00, $arg01, $arg02);\nmy $v0 = -198;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 9;\nmy $arg11 = 8;\nmy $arg12 = 4;\nmy $x1 = parabola_directrix($arg10, $arg11, $arg12);\nmy $v1 = -2336;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $arg21 = 4;\nmy $arg22 = 6;\nmy $x2 = parabola_directrix($arg20, $arg21, $arg22);\nmy $v2 = -130;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the directrix of a parabola.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/431", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function that takes two lists and returns true if they have at least one common element.\n#\n# >>> common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9])\n# 1\n# >>> common_element([1, 2, 3, 4, 5], [6, 7, 8, 9])\n# \"none\"\n# >>> common_element([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"])\n# 1\nsub common_element\n{\n  my ($list1, $list2) = @_;\n", "entry_point": "common_element", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5];\nmy $arg01 = [5, 6, 7, 8, 9];\nmy $x0 = common_element($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5];\nmy $arg11 = [6, 7, 8, 9];\nmy $x1 = common_element($arg10, $arg11);\nmy $v1 = \"none\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"a\", \"b\", \"c\"];\nmy $arg21 = [\"d\", \"b\", \"e\"];\nmy $x2 = common_element($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function that takes two lists and returns true if they have at least one common element.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/432", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the median of a trapezium.\n#\n# >>> median_trapezium(15, 25, 35)\n# 20\n# >>> median_trapezium(10, 20, 30)\n# 15\n# >>> median_trapezium(6, 9, 4)\n# 7.5\nsub median_trapezium\n{\n  my ($base1, $base2, $height) = @_;\n", "entry_point": "median_trapezium", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 15;\nmy $arg01 = 25;\nmy $arg02 = 35;\nmy $x0 = median_trapezium($arg00, $arg01, $arg02);\nmy $v0 = 20;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = 20;\nmy $arg12 = 30;\nmy $x1 = median_trapezium($arg10, $arg11, $arg12);\nmy $v1 = 15;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 6;\nmy $arg21 = 9;\nmy $arg22 = 4;\nmy $x2 = median_trapezium($arg20, $arg21, $arg22);\nmy $v2 = 7.5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the median of a trapezium.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/433", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether the entered number is greater than the elements of the given array.\n#\n# >>> check_greater([1, 2, 3, 4, 5], 4)\n# \"No, entered number is less than those in the array\"\n# >>> check_greater([2, 3, 4, 5, 6], 8)\n# \"Yes, the entered number is greater than those in the array\"\n# >>> check_greater([9, 7, 4, 8, 6, 1], 11)\n# \"Yes, the entered number is greater than those in the array\"\nsub check_greater\n{\n  my ($arr, $number) = @_;\n", "entry_point": "check_greater", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5];\nmy $arg01 = 4;\nmy $x0 = check_greater($arg00, $arg01);\nmy $v0 = \"No, entered number is less than those in the array\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 3, 4, 5, 6];\nmy $arg11 = 8;\nmy $x1 = check_greater($arg10, $arg11);\nmy $v1 = \"Yes, the entered number is greater than those in the array\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [9, 7, 4, 8, 6, 1];\nmy $arg21 = 11;\nmy $x2 = check_greater($arg20, $arg21);\nmy $v2 = \"Yes, the entered number is greater than those in the array\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether the entered number is greater than the elements of the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/434", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function that matches a string that has an a followed by one or more b's.\n#\n# >>> text_match_one(\"ac\")\n# \"Not matched!\"\n# >>> text_match_one(\"dc\")\n# \"Not matched!\"\n# >>> text_match_one(\"abba\")\n# \"Found a match!\"\nsub text_match_one\n{\n  my ($text) = @_;\n", "entry_point": "text_match_one", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"ac\";\nmy $x0 = text_match_one($arg00);\nmy $v0 = \"Not matched!\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"dc\";\nmy $x1 = text_match_one($arg10);\nmy $v1 = \"Not matched!\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abba\";\nmy $x2 = text_match_one($arg20);\nmy $v2 = \"Found a match!\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function that matches a string that has an a followed by one or more b's.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/435", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the last digit of a given number.\n#\n# >>> last_digit(123)\n# 3\n# >>> last_digit(25)\n# 5\n# >>> last_digit(30)\n# 0\nsub last_digit\n{\n  my ($n) = @_;\n", "entry_point": "last_digit", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 123;\nmy $x0 = last_digit($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 25;\nmy $x1 = last_digit($arg10);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 30;\nmy $x2 = last_digit($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the last digit of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/436", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to print negative numbers in a list.\n#\n# >>> neg_nos([-1, 4, 5, -6])\n# [-1,-6]\n# >>> neg_nos([-1, -2, 3, 4])\n# [-1,-2]\n# >>> neg_nos([-7, -6, 8, 9])\n# [-7,-6]\nsub neg_nos\n{\n  my ($list1) = @_;\n", "entry_point": "neg_nos", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [-1, 4, 5, -6];\nmy $x0 = neg_nos($arg00);\nmy $v0 = [-1, -6];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [-1, -2, 3, 4];\nmy $x1 = neg_nos($arg10);\nmy $v1 = [-1, -2];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [-7, -6, 8, 9];\nmy $x2 = neg_nos($arg20);\nmy $v2 = [-7, -6];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to print negative numbers in a list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/437", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove odd characters in a string.\n#\n# >>> remove_odd(\"python\")\n# \"yhn\"\n# >>> remove_odd(\"program\")\n# \"rga\"\n# >>> remove_odd(\"language\")\n# \"agae\"\nsub remove_odd\n{\n  my ($str1) = @_;\n", "entry_point": "remove_odd", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python\";\nmy $x0 = remove_odd($arg00);\nmy $v0 = \"yhn\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"program\";\nmy $x1 = remove_odd($arg10);\nmy $v1 = \"rga\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"language\";\nmy $x2 = remove_odd($arg20);\nmy $v2 = \"agae\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove odd characters in a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/438", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count bidirectional tuple pairs.\n#\n# >>> count_bidirectional([[5, 6], [1, 2], [6, 5], [9, 1], [6, 5], [2, 1]])\n# \"3\"\n# >>> count_bidirectional([[5, 6], [1, 3], [6, 5], [9, 1], [6, 5], [2, 1]])\n# \"2\"\n# >>> count_bidirectional([[5, 6], [1, 2], [6, 5], [9, 2], [6, 5], [2, 1]])\n# \"4\"\nsub count_bidirectional\n{\n  my ($test_list) = @_;\n", "entry_point": "count_bidirectional", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[5, 6], [1, 2], [6, 5], [9, 1], [6, 5], [2, 1]];\nmy $x0 = count_bidirectional($arg00);\nmy $v0 = \"3\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[5, 6], [1, 3], [6, 5], [9, 1], [6, 5], [2, 1]];\nmy $x1 = count_bidirectional($arg10);\nmy $v1 = \"2\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[5, 6], [1, 2], [6, 5], [9, 2], [6, 5], [2, 1]];\nmy $x2 = count_bidirectional($arg20);\nmy $v2 = \"4\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count bidirectional tuple pairs.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/439", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert a list of multiple integers into a single integer.\n#\n# >>> multiple_to_single([11, 33, 50])\n# 113350\n# >>> multiple_to_single([-1, 2, 3, 4, 5, 6])\n# -123456\n# >>> multiple_to_single([10, 15, 20, 25])\n# 10152025\nsub multiple_to_single\n{\n  my ($l) = @_;\n", "entry_point": "multiple_to_single", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [11, 33, 50];\nmy $x0 = multiple_to_single($arg00);\nmy $v0 = 113350;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [-1, 2, 3, 4, 5, 6];\nmy $x1 = multiple_to_single($arg10);\nmy $v1 = -123456;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [10, 15, 20, 25];\nmy $x2 = multiple_to_single($arg20);\nmy $v2 = 10152025;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert a list of multiple integers into a single integer.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/440", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find all adverbs and their positions in a given sentence.\n#\n# >>> find_adverb_position(\"clearly!! we can see the sky\")\n# [0, 7, \"clearly\"]\n# >>> find_adverb_position(\"seriously!! there are many roses\")\n# [0, 9, \"seriously\"]\n# >>> find_adverb_position(\"unfortunately!! sita is going to home\")\n# [0, 13, \"unfortunately\"]\nsub find_adverb_position\n{\n  my ($text) = @_;\n", "entry_point": "find_adverb_position", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"clearly!! we can see the sky\";\nmy $x0 = find_adverb_position($arg00);\nmy $v0 = [0, 7, \"clearly\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"seriously!! there are many roses\";\nmy $x1 = find_adverb_position($arg10);\nmy $v1 = [0, 9, \"seriously\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"unfortunately!! sita is going to home\";\nmy $x2 = find_adverb_position($arg20);\nmy $v2 = [0, 13, \"unfortunately\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find all adverbs and their positions in a given sentence.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/441", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the surface area of a cube.\n#\n# >>> surfacearea_cube(5)\n# 150\n# >>> surfacearea_cube(3)\n# 54\n# >>> surfacearea_cube(10)\n# 600\nsub surfacearea_cube\n{\n  my ($l) = @_;\n", "entry_point": "surfacearea_cube", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = surfacearea_cube($arg00);\nmy $v0 = 150;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $x1 = surfacearea_cube($arg10);\nmy $v1 = 54;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $x2 = surfacearea_cube($arg20);\nmy $v2 = 600;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the surface area of a cube.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/442", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the ration of positive numbers in an array of integers.\n#\n# >>> positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n# 0.54\n# >>> positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n# 0.69\n# >>> positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])\n# 0.56\nsub positive_count\n{\n  my ($nums) = @_;\n", "entry_point": "positive_count", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8];\nmy $x0 = positive_count($arg00);\nmy $v0 = 0.54;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8];\nmy $x1 = positive_count($arg10);\nmy $v1 = 0.69;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 4, -6, -9, 11, -12, 14, -5, 17];\nmy $x2 = positive_count($arg20);\nmy $v2 = 0.56;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the ration of positive numbers in an array of integers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/443", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the largest negative number from the given list.\n#\n# >>> largest_neg([1, 2, 3, -4, -6])\n# -6\n# >>> largest_neg([1, 2, 3, -8, -9])\n# -9\n# >>> largest_neg([1, 2, 3, 4, -1])\n# -1\nsub largest_neg\n{\n  my ($list1) = @_;\n", "entry_point": "largest_neg", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, -4, -6];\nmy $x0 = largest_neg($arg00);\nmy $v0 = -6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, -8, -9];\nmy $x1 = largest_neg($arg10);\nmy $v1 = -9;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, -1];\nmy $x2 = largest_neg($arg20);\nmy $v2 = -1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the largest negative number from the given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/444", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to trim each tuple by k in the given tuple list.\n#\n# >>> trim_tuple([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2)\n# \"[(2,), (9,), (2,), (2,)]\"\n# >>> trim_tuple([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1)\n# \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\"\n# >>> trim_tuple([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1)\n# \"[(8, 4), (8, 12), (1, 7), (6, 9)]\"\nsub trim_tuple\n{\n  my ($test_list, $k) = @_;\n", "entry_point": "trim_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]];\nmy $arg01 = 2;\nmy $x0 = trim_tuple($arg00, $arg01);\nmy $v0 = \"[(2,), (9,), (2,), (2,)]\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]];\nmy $arg11 = 1;\nmy $x1 = trim_tuple($arg10, $arg11);\nmy $v1 = \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]];\nmy $arg21 = 1;\nmy $x2 = trim_tuple($arg20, $arg21);\nmy $v2 = \"[(8, 4), (8, 12), (1, 7), (6, 9)]\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to trim each tuple by k in the given tuple list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/445", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n#\n# >>> index_multiplication([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n# [[6, 21], [12, 45], [2, 9], [7, 30]]\n# >>> index_multiplication([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])\n# [[14, 32], [20, 60], [6, 20], [16, 44]]\n# >>> index_multiplication([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])\n# [[24, 45], [30, 77], [12, 33], [27, 60]]\nsub index_multiplication\n{\n  my ($test_tup1, $test_tup2) = @_;\n", "entry_point": "index_multiplication", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 3], [4, 5], [2, 9], [1, 10]];\nmy $arg01 = [[6, 7], [3, 9], [1, 1], [7, 3]];\nmy $x0 = index_multiplication($arg00, $arg01);\nmy $v0 = [[6, 21], [12, 45], [2, 9], [7, 30]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[2, 4], [5, 6], [3, 10], [2, 11]];\nmy $arg11 = [[7, 8], [4, 10], [2, 2], [8, 4]];\nmy $x1 = index_multiplication($arg10, $arg11);\nmy $v1 = [[14, 32], [20, 60], [6, 20], [16, 44]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[3, 5], [6, 7], [4, 11], [3, 12]];\nmy $arg21 = [[8, 9], [5, 11], [3, 3], [9, 5]];\nmy $x2 = index_multiplication($arg20, $arg21);\nmy $v2 = [[24, 45], [30, 77], [12, 33], [27, 60]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/446", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the occurence of all elements of list in a tuple.\n#\n# >>> count_occurrence([\"a\", \"a\", \"c\", \"b\", \"d\"], [\"a\", \"b\"])\n# 3\n# >>> count_occurrence([1, 2, 3, 1, 4, 6, 7, 1, 4], [1, 4, 7])\n# 6\n# >>> count_occurrence([1, 2, 3, 4, 5, 6], [1, 2])\n# 2\nsub count_occurrence\n{\n  my ($tup, $lst) = @_;\n", "entry_point": "count_occurrence", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"a\", \"a\", \"c\", \"b\", \"d\"];\nmy $arg01 = [\"a\", \"b\"];\nmy $x0 = count_occurrence($arg00, $arg01);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 1, 4, 6, 7, 1, 4];\nmy $arg11 = [1, 4, 7];\nmy $x1 = count_occurrence($arg10, $arg11);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 5, 6];\nmy $arg21 = [1, 2];\nmy $x2 = count_occurrence($arg20, $arg21);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the occurence of all elements of list in a tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/447", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find cubes of individual elements in a list using lambda function.\n#\n# >>> cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n# >>> cube_nums([10, 20, 30])\n# [1000, 8000, 27000]\n# >>> cube_nums([12, 15])\n# [1728, 3375]\nsub cube_nums\n{\n  my ($nums) = @_;\n", "entry_point": "cube_nums", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $x0 = cube_nums($arg00);\nmy $v0 = [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [10, 20, 30];\nmy $x1 = cube_nums($arg10);\nmy $v1 = [1000, 8000, 27000];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [12, 15];\nmy $x2 = cube_nums($arg20);\nmy $v2 = [1728, 3375];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find cubes of individual elements in a list using lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/448", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate the sum of perrin numbers.\n#\n# >>> cal_sum(9)\n# 49\n# >>> cal_sum(10)\n# 66\n# >>> cal_sum(11)\n# 88\nsub cal_sum\n{\n  my ($n) = @_;\n", "entry_point": "cal_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 9;\nmy $x0 = cal_sum($arg00);\nmy $v0 = 49;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $x1 = cal_sum($arg10);\nmy $v1 = 66;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 11;\nmy $x2 = cal_sum($arg20);\nmy $v2 = 88;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate the sum of perrin numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/449", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the triangle is valid or not if 3 points are given.\n#\n# >>> check_triangle(1, 5, 2, 5, 4, 6)\n# \"Yes\"\n# >>> check_triangle(1, 1, 1, 4, 1, 5)\n# \"No\"\n# >>> check_triangle(1, 1, 1, 1, 1, 1)\n# \"No\"\nsub check_triangle\n{\n  my ($x1, $y1, $x2, $y2, $x3, $y3) = @_;\n", "entry_point": "check_triangle", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 5;\nmy $arg02 = 2;\nmy $arg03 = 5;\nmy $arg04 = 4;\nmy $arg05 = 6;\nmy $x0 = check_triangle($arg00, $arg01, $arg02, $arg03, $arg04, $arg05);\nmy $v0 = \"Yes\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 1;\nmy $arg12 = 1;\nmy $arg13 = 4;\nmy $arg14 = 1;\nmy $arg15 = 5;\nmy $x1 = check_triangle($arg10, $arg11, $arg12, $arg13, $arg14, $arg15);\nmy $v1 = \"No\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 1;\nmy $arg22 = 1;\nmy $arg23 = 1;\nmy $arg24 = 1;\nmy $arg25 = 1;\nmy $x2 = check_triangle($arg20, $arg21, $arg22, $arg23, $arg24, $arg25);\nmy $v2 = \"No\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the triangle is valid or not if 3 points are given.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/450", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract specified size of strings from a give list of string values.\n#\n# >>> extract_string([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8)\n# [\"practice\", \"solution\"]\n# >>> extract_string([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6)\n# [\"Python\"]\n# >>> extract_string([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9)\n# [\"exercises\"]\nsub extract_string\n{\n  my ($str, $l) = @_;\n", "entry_point": "extract_string", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"];\nmy $arg01 = 8;\nmy $x0 = extract_string($arg00, $arg01);\nmy $v0 = [\"practice\", \"solution\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"];\nmy $arg11 = 6;\nmy $x1 = extract_string($arg10, $arg11);\nmy $v1 = [\"Python\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"];\nmy $arg21 = 9;\nmy $x2 = extract_string($arg20, $arg21);\nmy $v2 = [\"exercises\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract specified size of strings from a give list of string values.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/451", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove all whitespaces from the given string using regex.\n#\n# >>> remove_whitespaces(\" Google    Flutter \")\n# \"GoogleFlutter\"\n# >>> remove_whitespaces(\" Google    Dart \")\n# \"GoogleDart\"\n# >>> remove_whitespaces(\" iOS    Swift \")\n# \"iOSSwift\"\nsub remove_whitespaces\n{\n  my ($text1) = @_;\n", "entry_point": "remove_whitespaces", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \" Google    Flutter \";\nmy $x0 = remove_whitespaces($arg00);\nmy $v0 = \"GoogleFlutter\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \" Google    Dart \";\nmy $x1 = remove_whitespaces($arg10);\nmy $v1 = \"GoogleDart\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \" iOS    Swift \";\nmy $x2 = remove_whitespaces($arg20);\nmy $v2 = \"iOSSwift\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove all whitespaces from the given string using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/452", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function that gives loss amount if the given amount has loss else return \"none\".\n#\n# >>> loss_amount(1500, 1200)\n# \"none\"\n# >>> loss_amount(100, 200)\n# 100\n# >>> loss_amount(2000, 5000)\n# 3000\nsub loss_amount\n{\n  my ($actual_cost, $sale_amount) = @_;\n", "entry_point": "loss_amount", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1500;\nmy $arg01 = 1200;\nmy $x0 = loss_amount($arg00, $arg01);\nmy $v0 = \"none\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 100;\nmy $arg11 = 200;\nmy $x1 = loss_amount($arg10, $arg11);\nmy $v1 = 100;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2000;\nmy $arg21 = 5000;\nmy $x2 = loss_amount($arg20, $arg21);\nmy $v2 = 3000;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function that gives loss amount if the given amount has loss else return \"none\".", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/453", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of even factors of a number.\n#\n# >>> sumoffactors(18)\n# 26\n# >>> sumoffactors(30)\n# 48\n# >>> sumoffactors(6)\n# 8\nsub sumoffactors\n{\n  my ($n) = @_;\n", "entry_point": "sumoffactors", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 18;\nmy $x0 = sumoffactors($arg00);\nmy $v0 = 26;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 30;\nmy $x1 = sumoffactors($arg10);\nmy $v1 = 48;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 6;\nmy $x2 = sumoffactors($arg20);\nmy $v2 = 8;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of even factors of a number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/454", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function that matches a word containing 'z'.\n#\n# >>> text_match_wordz(\"pythonz.\")\n# \"Found a match!\"\n# >>> text_match_wordz(\"xyz.\")\n# \"Found a match!\"\n# >>> text_match_wordz(\"  lang  .\")\n# \"Not matched!\"\nsub text_match_wordz\n{\n  my ($text) = @_;\n", "entry_point": "text_match_wordz", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"pythonz.\";\nmy $x0 = text_match_wordz($arg00);\nmy $v0 = \"Found a match!\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"xyz.\";\nmy $x1 = text_match_wordz($arg10);\nmy $v1 = \"Found a match!\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"  lang  .\";\nmy $x2 = text_match_wordz($arg20);\nmy $v2 = \"Not matched!\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function that matches a word containing 'z'.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/455", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether the given month number contains 31 days or not.\n#\n# >>> check_monthnumb_number(5)\n# 1\n# >>> check_monthnumb_number(2)\n# 0\n# >>> check_monthnumb_number(6)\n# 0\nsub check_monthnumb_number\n{\n  my ($monthnum2) = @_;\n", "entry_point": "check_monthnumb_number", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = check_monthnumb_number($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = check_monthnumb_number($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 6;\nmy $x2 = check_monthnumb_number($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether the given month number contains 31 days or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/456", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to reverse strings in a given list of string values.\n#\n# >>> reverse_string_list([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"])\n# [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]\n# >>> reverse_string_list([\"john\", \"amal\", \"joel\", \"george\"])\n# [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]\n# >>> reverse_string_list([\"jack\", \"john\", \"mary\"])\n# [\"kcaj\", \"nhoj\", \"yram\"]\nsub reverse_string_list\n{\n  my ($stringlist) = @_;\n", "entry_point": "reverse_string_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"];\nmy $x0 = reverse_string_list($arg00);\nmy $v0 = [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"john\", \"amal\", \"joel\", \"george\"];\nmy $x1 = reverse_string_list($arg10);\nmy $v1 = [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"jack\", \"john\", \"mary\"];\nmy $x2 = reverse_string_list($arg20);\nmy $v2 = [\"kcaj\", \"nhoj\", \"yram\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to reverse strings in a given list of string values.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/457", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sublist having minimum length.\n#\n# >>> find_min([[1], [1, 2], [1, 2, 3]])\n# [1]\n# >>> find_min([[1, 1], [1, 1, 1], [1, 2, 7, 8]])\n# [1, 1]\n# >>> find_min([[\"x\"], [\"x\", \"y\"], [\"x\", \"y\", \"z\"]])\n# [\"x\"]\nsub find_min\n{\n  my ($lst) = @_;\n", "entry_point": "find_min", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1], [1, 2], [1, 2, 3]];\nmy $x0 = find_min($arg00);\nmy $v0 = [1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 1], [1, 1, 1], [1, 2, 7, 8]];\nmy $x1 = find_min($arg10);\nmy $v1 = [1, 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"x\"], [\"x\", \"y\"], [\"x\", \"y\", \"z\"]];\nmy $x2 = find_min($arg20);\nmy $v2 = [\"x\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sublist having minimum length.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/458", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the area of a rectangle.\n#\n# >>> rectangle_area(10, 20)\n# 200\n# >>> rectangle_area(10, 5)\n# 50\n# >>> rectangle_area(4, 2)\n# 8\nsub rectangle_area\n{\n  my ($l, $b) = @_;\n", "entry_point": "rectangle_area", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 20;\nmy $x0 = rectangle_area($arg00, $arg01);\nmy $v0 = 200;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = 5;\nmy $x1 = rectangle_area($arg10, $arg11);\nmy $v1 = 50;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $arg21 = 2;\nmy $x2 = rectangle_area($arg20, $arg21);\nmy $v2 = 8;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the area of a rectangle.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/459", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove uppercase substrings from a given string by using regex.\n#\n# >>> remove_uppercase(\"cAstyoUrFavoRitETVshoWs\")\n# \"cstyoravoitshos\"\n# >>> remove_uppercase(\"wAtchTheinTernEtrAdIo\")\n# \"wtchheinerntrdo\"\n# >>> remove_uppercase(\"VoicESeaRchAndreComMendaTionS\")\n# \"oiceachndreomendaion\"\nsub remove_uppercase\n{\n  my ($str1) = @_;\n", "entry_point": "remove_uppercase", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"cAstyoUrFavoRitETVshoWs\";\nmy $x0 = remove_uppercase($arg00);\nmy $v0 = \"cstyoravoitshos\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"wAtchTheinTernEtrAdIo\";\nmy $x1 = remove_uppercase($arg10);\nmy $v1 = \"wtchheinerntrdo\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"VoicESeaRchAndreComMendaTionS\";\nmy $x2 = remove_uppercase($arg20);\nmy $v2 = \"oiceachndreomendaion\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove uppercase substrings from a given string by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/460", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to get the first element of each sublist.\n#\n# >>> extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n# [1, 3, 6]\n# >>> extract([[1, 2, 3], [4, 5]])\n# [1, 4]\n# >>> extract([[9, 8, 1], [1, 2]])\n# [9, 1]\nsub extract\n{\n  my ($lst) = @_;\n", "entry_point": "extract", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 2], [3, 4, 5], [6, 7, 8, 9]];\nmy $x0 = extract($arg00);\nmy $v0 = [1, 3, 6];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2, 3], [4, 5]];\nmy $x1 = extract($arg10);\nmy $v1 = [1, 4];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[9, 8, 1], [1, 2]];\nmy $x2 = extract($arg20);\nmy $v2 = [9, 1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to get the first element of each sublist.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/461", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the upper case characters in a given string.\n#\n# >>> upper_ctr(\"PYthon\")\n# 1\n# >>> upper_ctr(\"BigData\")\n# 1\n# >>> upper_ctr(\"program\")\n# 0\nsub upper_ctr\n{\n  my ($str) = @_;\n", "entry_point": "upper_ctr", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"PYthon\";\nmy $x0 = upper_ctr($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"BigData\";\nmy $x1 = upper_ctr($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"program\";\nmy $x2 = upper_ctr($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the upper case characters in a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/462", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find all possible combinations of the elements of a given list.\n#\n# >>> combinations_list([\"orange\", \"red\", \"green\", \"blue\"])\n# [[], [\"orange\"], [\"red\"], [\"red\", \"orange\"], [\"green\"], [\"green\", \"orange\"], [\"green\", \"red\"], [\"green\", \"red\", \"orange\"], [\"blue\"], [\"blue\", \"orange\"], [\"blue\", \"red\"], [\"blue\", \"red\", \"orange\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"orange\"], [\"blue\", \"green\", \"red\"], [\"blue\", \"green\", \"red\", \"orange\"]]\n# >>> combinations_list([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"])\n# [[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"blue\"], [\"blue\", \"red\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"red\"], [\"white\"], [\"white\", \"red\"], [\"white\", \"green\"], [\"white\", \"green\", \"red\"], [\"white\", \"blue\"], [\"white\", \"blue\", \"red\"], [\"white\", \"blue\", \"green\"], [\"white\", \"blue\", \"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"black\", \"blue\"], [\"black\", \"blue\", \"red\"], [\"black\", \"blue\", \"green\"], [\"black\", \"blue\", \"green\", \"red\"], [\"black\", \"white\"], [\"black\", \"white\", \"red\"], [\"black\", \"white\", \"green\"], [\"black\", \"white\", \"green\", \"red\"], [\"black\", \"white\", \"blue\"], [\"black\", \"white\", \"blue\", \"red\"], [\"black\", \"white\", \"blue\", \"green\"], [\"black\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"blue\"], [\"orange\", \"blue\", \"red\"], [\"orange\", \"blue\", \"green\"], [\"orange\", \"blue\", \"green\", \"red\"], [\"orange\", \"white\"], [\"orange\", \"white\", \"red\"], [\"orange\", \"white\", \"green\"], [\"orange\", \"white\", \"green\", \"red\"], [\"orange\", \"white\", \"blue\"], [\"orange\", \"white\", \"blue\", \"red\"], [\"orange\", \"white\", \"blue\", \"green\"], [\"orange\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"], [\"orange\", \"black\", \"blue\"], [\"orange\", \"black\", \"blue\", \"red\"], [\"orange\", \"black\", \"blue\", \"green\"], [\"orange\", \"black\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\", \"white\"], [\"orange\", \"black\", \"white\", \"red\"], [\"orange\", \"black\", \"white\", \"green\"], [\"orange\", \"black\", \"white\", \"green\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\"], [\"orange\", \"black\", \"white\", \"blue\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"]]\n# >>> combinations_list([\"red\", \"green\", \"black\", \"orange\"])\n# [[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"]]\nsub combinations_list\n{\n  my ($list1) = @_;\n", "entry_point": "combinations_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"orange\", \"red\", \"green\", \"blue\"];\nmy $x0 = combinations_list($arg00);\nmy $v0 = [[], [\"orange\"], [\"red\"], [\"red\", \"orange\"], [\"green\"], [\"green\", \"orange\"], [\"green\", \"red\"], [\"green\", \"red\", \"orange\"], [\"blue\"], [\"blue\", \"orange\"], [\"blue\", \"red\"], [\"blue\", \"red\", \"orange\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"orange\"], [\"blue\", \"green\", \"red\"], [\"blue\", \"green\", \"red\", \"orange\"]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"];\nmy $x1 = combinations_list($arg10);\nmy $v1 = [[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"blue\"], [\"blue\", \"red\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"red\"], [\"white\"], [\"white\", \"red\"], [\"white\", \"green\"], [\"white\", \"green\", \"red\"], [\"white\", \"blue\"], [\"white\", \"blue\", \"red\"], [\"white\", \"blue\", \"green\"], [\"white\", \"blue\", \"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"black\", \"blue\"], [\"black\", \"blue\", \"red\"], [\"black\", \"blue\", \"green\"], [\"black\", \"blue\", \"green\", \"red\"], [\"black\", \"white\"], [\"black\", \"white\", \"red\"], [\"black\", \"white\", \"green\"], [\"black\", \"white\", \"green\", \"red\"], [\"black\", \"white\", \"blue\"], [\"black\", \"white\", \"blue\", \"red\"], [\"black\", \"white\", \"blue\", \"green\"], [\"black\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"blue\"], [\"orange\", \"blue\", \"red\"], [\"orange\", \"blue\", \"green\"], [\"orange\", \"blue\", \"green\", \"red\"], [\"orange\", \"white\"], [\"orange\", \"white\", \"red\"], [\"orange\", \"white\", \"green\"], [\"orange\", \"white\", \"green\", \"red\"], [\"orange\", \"white\", \"blue\"], [\"orange\", \"white\", \"blue\", \"red\"], [\"orange\", \"white\", \"blue\", \"green\"], [\"orange\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"], [\"orange\", \"black\", \"blue\"], [\"orange\", \"black\", \"blue\", \"red\"], [\"orange\", \"black\", \"blue\", \"green\"], [\"orange\", \"black\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\", \"white\"], [\"orange\", \"black\", \"white\", \"red\"], [\"orange\", \"black\", \"white\", \"green\"], [\"orange\", \"black\", \"white\", \"green\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\"], [\"orange\", \"black\", \"white\", \"blue\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"red\", \"green\", \"black\", \"orange\"];\nmy $x2 = combinations_list($arg20);\nmy $v2 = [[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find all possible combinations of the elements of a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/463", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the maximum product subarray of the given array.\n#\n# >>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n# 112\n# >>> max_subarray_product([6, -3, -10, 0, 2])\n# 180\n# >>> max_subarray_product([-2, -40, 0, -2, -3])\n# 80\nsub max_subarray_product\n{\n  my ($arr) = @_;\n", "entry_point": "max_subarray_product", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, -2, -3, 0, 7, -8, -2];\nmy $x0 = max_subarray_product($arg00);\nmy $v0 = 112;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [6, -3, -10, 0, 2];\nmy $x1 = max_subarray_product($arg10);\nmy $v1 = 180;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [-2, -40, 0, -2, -3];\nmy $x2 = max_subarray_product($arg20);\nmy $v2 = 80;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the maximum product subarray of the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/464", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if all values are same in a dictionary.\n#\n# >>> check_value({\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12}, 10)\n# 0\n# >>> check_value({\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12}, 12)\n# 1\n# >>> check_value({\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12}, 5)\n# 0\nsub check_value\n{\n  my ($dict, $n) = @_;\n", "entry_point": "check_value", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12};\nmy $arg01 = 10;\nmy $x0 = check_value($arg00, $arg01);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12};\nmy $arg11 = 12;\nmy $x1 = check_value($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12};\nmy $arg21 = 5;\nmy $x2 = check_value($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if all values are same in a dictionary.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/465", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to drop empty items from a given dictionary.\n#\n# >>> drop_empty({\"c1\" => \"Red\", \"c2\" => \"Green\", \"c3\" => \"none\"})\n# {\"c1\" => \"Red\", \"c2\" => \"Green\"}\n# >>> drop_empty({\"c1\" => \"Red\", \"c2\" => \"none\", \"c3\" => \"none\"})\n# {\"c1\" => \"Red\"}\n# >>> drop_empty({\"c1\" => \"none\", \"c2\" => \"Green\", \"c3\" => \"none\"})\n# {\"c2\" => \"Green\"}\nsub drop_empty\n{\n  my ($dict1) = @_;\n", "entry_point": "drop_empty", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {\"c1\" => \"Red\", \"c2\" => \"Green\", \"c3\" => \"none\"};\nmy $x0 = drop_empty($arg00);\nmy $v0 = {\"c1\" => \"Red\", \"c2\" => \"Green\"};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {\"c1\" => \"Red\", \"c2\" => \"none\", \"c3\" => \"none\"};\nmy $x1 = drop_empty($arg10);\nmy $v1 = {\"c1\" => \"Red\"};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {\"c1\" => \"none\", \"c2\" => \"Green\", \"c3\" => \"none\"};\nmy $x2 = drop_empty($arg20);\nmy $v2 = {\"c2\" => \"Green\"};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to drop empty items from a given dictionary.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/466", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the peak element in the given array.\n#\n# >>> find_peak([1, 3, 20, 4, 1, 0], 6)\n# 2\n# >>> find_peak([2, 3, 4, 5, 6], 5)\n# 4\n# >>> find_peak([8, 9, 11, 12, 14, 15], 6)\n# 5\nsub find_peak\n{\n  my ($arr, $n) = @_;\n", "entry_point": "find_peak", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 20, 4, 1, 0];\nmy $arg01 = 6;\nmy $x0 = find_peak($arg00, $arg01);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 3, 4, 5, 6];\nmy $arg11 = 5;\nmy $x1 = find_peak($arg10, $arg11);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [8, 9, 11, 12, 14, 15];\nmy $arg21 = 6;\nmy $x2 = find_peak($arg20, $arg21);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the peak element in the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/467", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to convert decimal number to octal number.\n#\n# >>> decimal_to_octal(10)\n# 12\n# >>> decimal_to_octal(2)\n# 2\n# >>> decimal_to_octal(33)\n# 41\nsub decimal_to_octal\n{\n  my ($decinum) = @_;\n", "entry_point": "decimal_to_octal", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = decimal_to_octal($arg00);\nmy $v0 = 12;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = decimal_to_octal($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 33;\nmy $x2 = decimal_to_octal($arg20);\nmy $v2 = 41;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to convert decimal number to octal number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/468", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# >>> max_product([3, 100, 4, 5, 150, 6], 6)\n# 45000\n# >>> max_product([4, 42, 55, 68, 80], 5)\n# 50265600\n# >>> max_product([10, 22, 9, 33, 21, 50, 41, 60], 8)\n# 21780000\nsub max_product\n{\n  my ($arr, $n) = @_;\n", "entry_point": "max_product", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 100, 4, 5, 150, 6];\nmy $arg01 = 6;\nmy $x0 = max_product($arg00, $arg01);\nmy $v0 = 45000;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 42, 55, 68, 80];\nmy $arg11 = 5;\nmy $x1 = max_product($arg10, $arg11);\nmy $v1 = 50265600;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [10, 22, 9, 33, 21, 50, 41, 60];\nmy $arg21 = 8;\nmy $x2 = max_product($arg20, $arg21);\nmy $v2 = 21780000;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/469", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the maximum profit earned from a maximum of k stock transactions\n#\n# >>> max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3)\n# 10\n# >>> max_profit([2, 4, 7, 5, 4, 3, 5], 2)\n# 7\n# >>> max_profit([10, 6, 8, 4, 2], 2)\n# 2\nsub max_profit\n{\n  my ($price, $k) = @_;\n", "entry_point": "max_profit", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 5, 2, 3, 7, 6, 4, 5];\nmy $arg01 = 3;\nmy $x0 = max_profit($arg00, $arg01);\nmy $v0 = 10;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 4, 7, 5, 4, 3, 5];\nmy $arg11 = 2;\nmy $x1 = max_profit($arg10, $arg11);\nmy $v1 = 7;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [10, 6, 8, 4, 2];\nmy $arg21 = 2;\nmy $x2 = max_profit($arg20, $arg21);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the maximum profit earned from a maximum of k stock transactions", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/470", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the pairwise addition of the elements of the given tuples.\n#\n# >>> add_pairwise([1, 5, 7, 8, 10])\n# [6, 12, 15, 18]\n# >>> add_pairwise([2, 6, 8, 9, 11])\n# [8, 14, 17, 20]\n# >>> add_pairwise([3, 7, 9, 10, 12])\n# [10, 16, 19, 22]\nsub add_pairwise\n{\n  my ($test_tup) = @_;\n", "entry_point": "add_pairwise", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 5, 7, 8, 10];\nmy $x0 = add_pairwise($arg00);\nmy $v0 = [6, 12, 15, 18];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 6, 8, 9, 11];\nmy $x1 = add_pairwise($arg10);\nmy $v1 = [8, 14, 17, 20];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 7, 9, 10, 12];\nmy $x2 = add_pairwise($arg20);\nmy $v2 = [10, 16, 19, 22];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the pairwise addition of the elements of the given tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/471", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find remainder of array multiplication divided by n.\n#\n# >>> find_remainder([100, 10, 5, 25, 35, 14], 6, 11)\n# 9\n# >>> find_remainder([1, 1, 1], 3, 1)\n# 0\n# >>> find_remainder([1, 2, 1], 3, 2)\n# 0\nsub find_remainder\n{\n  my ($arr, $lens, $n) = @_;\n", "entry_point": "find_remainder", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [100, 10, 5, 25, 35, 14];\nmy $arg01 = 6;\nmy $arg02 = 11;\nmy $x0 = find_remainder($arg00, $arg01, $arg02);\nmy $v0 = 9;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 1, 1];\nmy $arg11 = 3;\nmy $arg12 = 1;\nmy $x1 = find_remainder($arg10, $arg11, $arg12);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 1];\nmy $arg21 = 3;\nmy $arg22 = 2;\nmy $x2 = find_remainder($arg20, $arg21, $arg22);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find remainder of array multiplication divided by n.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/472", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the given list contains consecutive numbers or not.\n#\n# >>> check_consecutive([1, 2, 3, 4, 5])\n# 1\n# >>> check_consecutive([1, 2, 3, 5, 6])\n# 0\n# >>> check_consecutive([1, 2, 1])\n# 0\nsub check_consecutive\n{\n  my ($l) = @_;\n", "entry_point": "check_consecutive", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5];\nmy $x0 = check_consecutive($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 5, 6];\nmy $x1 = check_consecutive($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 1];\nmy $x2 = check_consecutive($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the given list contains consecutive numbers or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/473", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n#\n# >>> tuple_intersection([[3, 4], [5, 6], [9, 10], [4, 5]], [[5, 4], [3, 4], [6, 5], [9, 11]])\n# {[4, 5] => 1, [5, 6] => 1, [3, 4] => 1}\n# >>> tuple_intersection([[4, 1], [7, 4], [11, 13], [17, 14]], [[1, 4], [7, 4], [16, 12], [10, 13]])\n# {[4, 7] => 1, [1, 4] => 1}\n# >>> tuple_intersection([[2, 1], [3, 2], [1, 3], [1, 4]], [[11, 2], [2, 3], [6, 2], [1, 3]])\n# {[2, 3] => 1, [1, 3] => 1}\nsub tuple_intersection\n{\n  my ($test_list1, $test_list2) = @_;\n", "entry_point": "tuple_intersection", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[3, 4], [5, 6], [9, 10], [4, 5]];\nmy $arg01 = [[5, 4], [3, 4], [6, 5], [9, 11]];\nmy $x0 = tuple_intersection($arg00, $arg01);\nmy $v0 = {[4, 5] => 1, [5, 6] => 1, [3, 4] => 1};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[4, 1], [7, 4], [11, 13], [17, 14]];\nmy $arg11 = [[1, 4], [7, 4], [16, 12], [10, 13]];\nmy $x1 = tuple_intersection($arg10, $arg11);\nmy $v1 = {[4, 7] => 1, [1, 4] => 1};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[2, 1], [3, 2], [1, 3], [1, 4]];\nmy $arg21 = [[11, 2], [2, 3], [6, 2], [1, 3]];\nmy $x2 = tuple_intersection($arg20, $arg21);\nmy $v2 = {[2, 3] => 1, [1, 3] => 1};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/474", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to replace characters in a string.\n#\n# >>> replace_char(\"polygon\", \"y\", \"l\")\n# \"pollgon\"\n# >>> replace_char(\"character\", \"c\", \"a\")\n# \"aharaater\"\n# >>> replace_char(\"python\", \"l\", \"a\")\n# \"python\"\nsub replace_char\n{\n  my ($str1, $ch, $newch) = @_;\n", "entry_point": "replace_char", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"polygon\";\nmy $arg01 = \"y\";\nmy $arg02 = \"l\";\nmy $x0 = replace_char($arg00, $arg01, $arg02);\nmy $v0 = \"pollgon\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"character\";\nmy $arg11 = \"c\";\nmy $arg12 = \"a\";\nmy $x1 = replace_char($arg10, $arg11, $arg12);\nmy $v1 = \"aharaater\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"python\";\nmy $arg21 = \"l\";\nmy $arg22 = \"a\";\nmy $x2 = replace_char($arg20, $arg21, $arg22);\nmy $v2 = \"python\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to replace characters in a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/475", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort counter by value.\n#\n# >>> sort_counter({\"Math\" => 81, \"Physics\" => 83, \"Chemistry\" => 87})\n# [[\"Chemistry\", 87], [\"Physics\", 83], [\"Math\", 81]]\n# >>> sort_counter({\"Math\" => 400, \"Physics\" => 300, \"Chemistry\" => 250})\n# [[\"Math\", 400], [\"Physics\", 300], [\"Chemistry\", 250]]\n# >>> sort_counter({\"Math\" => 900, \"Physics\" => 1000, \"Chemistry\" => 1250})\n# [[\"Chemistry\", 1250], [\"Physics\", 1000], [\"Math\", 900]]\nsub sort_counter\n{\n  my ($dict1) = @_;\n", "entry_point": "sort_counter", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {\"Math\" => 81, \"Physics\" => 83, \"Chemistry\" => 87};\nmy $x0 = sort_counter($arg00);\nmy $v0 = [[\"Chemistry\", 87], [\"Physics\", 83], [\"Math\", 81]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {\"Math\" => 400, \"Physics\" => 300, \"Chemistry\" => 250};\nmy $x1 = sort_counter($arg10);\nmy $v1 = [[\"Math\", 400], [\"Physics\", 300], [\"Chemistry\", 250]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {\"Math\" => 900, \"Physics\" => 1000, \"Chemistry\" => 1250};\nmy $x2 = sort_counter($arg20);\nmy $v2 = [[\"Chemistry\", 1250], [\"Physics\", 1000], [\"Math\", 900]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort counter by value.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/476", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of the largest and smallest value in a given array.\n#\n# >>> big_sum([1, 2, 3])\n# 4\n# >>> big_sum([-1, 2, 3, 4])\n# 3\n# >>> big_sum([2, 3, 6])\n# 8\nsub big_sum\n{\n  my ($nums) = @_;\n", "entry_point": "big_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $x0 = big_sum($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [-1, 2, 3, 4];\nmy $x1 = big_sum($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 3, 6];\nmy $x2 = big_sum($arg20);\nmy $v2 = 8;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of the largest and smallest value in a given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/477", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to convert the given string to lower case.\n#\n# >>> is_lower(\"InValid\")\n# \"invalid\"\n# >>> is_lower(\"TruE\")\n# \"true\"\n# >>> is_lower(\"SenTenCE\")\n# \"sentence\"\nsub is_lower\n{\n  my ($string) = @_;\n", "entry_point": "is_lower", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"InValid\";\nmy $x0 = is_lower($arg00);\nmy $v0 = \"invalid\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"TruE\";\nmy $x1 = is_lower($arg10);\nmy $v1 = \"true\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"SenTenCE\";\nmy $x2 = is_lower($arg20);\nmy $v2 = \"sentence\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to convert the given string to lower case.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/478", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove lowercase substrings from a given string.\n#\n# >>> remove_lowercase(\"PYTHon\")\n# \"PYTH\"\n# >>> remove_lowercase(\"FInD\")\n# \"FID\"\n# >>> remove_lowercase(\"STRinG\")\n# \"STRG\"\nsub remove_lowercase\n{\n  my ($str1) = @_;\n", "entry_point": "remove_lowercase", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"PYTHon\";\nmy $x0 = remove_lowercase($arg00);\nmy $v0 = \"PYTH\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"FInD\";\nmy $x1 = remove_lowercase($arg10);\nmy $v1 = \"FID\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"STRinG\";\nmy $x2 = remove_lowercase($arg20);\nmy $v2 = \"STRG\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove lowercase substrings from a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/479", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the first digit of a given number.\n#\n# >>> first_digit(123)\n# 1\n# >>> first_digit(456)\n# 4\n# >>> first_digit(12)\n# 1\nsub first_digit\n{\n  my ($n) = @_;\n", "entry_point": "first_digit", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 123;\nmy $x0 = first_digit($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 456;\nmy $x1 = first_digit($arg10);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 12;\nmy $x2 = first_digit($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the first digit of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/480", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the maximum occurring character in a given string.\n#\n# >>> get_max_occuring_char(\"data\")\n# \"a\"\n# >>> get_max_occuring_char(\"create\")\n# \"e\"\n# >>> get_max_occuring_char(\"brilliant girl\")\n# \"i\"\nsub get_max_occuring_char\n{\n  my ($str1) = @_;\n", "entry_point": "get_max_occuring_char", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"data\";\nmy $x0 = get_max_occuring_char($arg00);\nmy $v0 = \"a\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"create\";\nmy $x1 = get_max_occuring_char($arg10);\nmy $v1 = \"e\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"brilliant girl\";\nmy $x2 = get_max_occuring_char($arg20);\nmy $v2 = \"i\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the maximum occurring character in a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/481", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n#\n# >>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9)\n# 1\n# >>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30)\n# 0\n# >>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15)\n# 1\nsub is_subset_sum\n{\n  my ($set, $n, $sum) = @_;\n", "entry_point": "is_subset_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 34, 4, 12, 5, 2];\nmy $arg01 = 6;\nmy $arg02 = 9;\nmy $x0 = is_subset_sum($arg00, $arg01, $arg02);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [3, 34, 4, 12, 5, 2];\nmy $arg11 = 6;\nmy $arg12 = 30;\nmy $x1 = is_subset_sum($arg10, $arg11, $arg12);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 34, 4, 12, 5, 2];\nmy $arg21 = 6;\nmy $arg22 = 15;\nmy $x2 = is_subset_sum($arg20, $arg21, $arg22);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/482", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n#\n# >>> match(\"Geeks\")\n# \"Yes\"\n# >>> match(\"geeksforGeeks\")\n# \"Yes\"\n# >>> match(\"geeks\")\n# \"No\"\nsub match\n{\n  my ($text) = @_;\n", "entry_point": "match", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Geeks\";\nmy $x0 = match($arg00);\nmy $v0 = \"Yes\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"geeksforGeeks\";\nmy $x1 = match($arg10);\nmy $v1 = \"Yes\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"geeks\";\nmy $x2 = match($arg20);\nmy $v2 = \"No\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/483", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the first natural number whose factorial is divisible by x.\n#\n# >>> first_factorial_divisible_number(10)\n# 5\n# >>> first_factorial_divisible_number(15)\n# 5\n# >>> first_factorial_divisible_number(5)\n# 4\nsub first_factorial_divisible_number\n{\n  my ($x) = @_;\n", "entry_point": "first_factorial_divisible_number", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = first_factorial_divisible_number($arg00);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 15;\nmy $x1 = first_factorial_divisible_number($arg10);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $x2 = first_factorial_divisible_number($arg20);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the first natural number whose factorial is divisible by x.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/484", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove the matching tuples from the given two tuples.\n#\n# >>> remove_matching_tuple([[\"Hello\", \"dude\"], [\"How\", \"are\"], [\"you\", \"?\"]], [[\"Hello\", \"dude\"], [\"How\", \"are\"]])\n# [[\"you\", \"?\"]]\n# >>> remove_matching_tuple([[\"Part\", \"of\"], [\"the\", \"journey\"], [\"is \", \"end\"]], [[\"Journey\", \"the\"], [\"is\", \"end\"]])\n# [[\"Part\", \"of\"], [\"the\", \"journey\"], [\"is \", \"end\"]]\n# >>> remove_matching_tuple([[\"Its\", \"been\"], [\"a\", \"long\"], [\"day\", \"without\"]], [[\"a\", \"long\"], [\"my\", \"friend\"]])\n# [[\"Its\", \"been\"], [\"day\", \"without\"]]\nsub remove_matching_tuple\n{\n  my ($test_list1, $test_list2) = @_;\n", "entry_point": "remove_matching_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"Hello\", \"dude\"], [\"How\", \"are\"], [\"you\", \"?\"]];\nmy $arg01 = [[\"Hello\", \"dude\"], [\"How\", \"are\"]];\nmy $x0 = remove_matching_tuple($arg00, $arg01);\nmy $v0 = [[\"you\", \"?\"]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"Part\", \"of\"], [\"the\", \"journey\"], [\"is \", \"end\"]];\nmy $arg11 = [[\"Journey\", \"the\"], [\"is\", \"end\"]];\nmy $x1 = remove_matching_tuple($arg10, $arg11);\nmy $v1 = [[\"Part\", \"of\"], [\"the\", \"journey\"], [\"is \", \"end\"]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"Its\", \"been\"], [\"a\", \"long\"], [\"day\", \"without\"]];\nmy $arg21 = [[\"a\", \"long\"], [\"my\", \"friend\"]];\nmy $x2 = remove_matching_tuple($arg20, $arg21);\nmy $v2 = [[\"Its\", \"been\"], [\"day\", \"without\"]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove the matching tuples from the given two tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/485", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the largest palindromic number in the given array.\n#\n# >>> largest_palindrome([1, 232, 54545, 999991], 4)\n# 54545\n# >>> largest_palindrome([1, 2, 3, 4, 5, 50], 6)\n# 5\nsub largest_palindrome\n{\n  my ($a, $n) = @_;\n", "entry_point": "largest_palindrome", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 232, 54545, 999991];\nmy $arg01 = 4;\nmy $x0 = largest_palindrome($arg00, $arg01);\nmy $v0 = 54545;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5, 50];\nmy $arg11 = 6;\nmy $x1 = largest_palindrome($arg10, $arg11);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\n", "description": "Write a function to find the largest palindromic number in the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/486", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to compute binomial probability for the given number.\n#\n# >>> binomial_probability(10, 5, 0.3333333333333333)\n# 0.13656454808718185\n# >>> binomial_probability(11, 6, 0.5)\n# 0.2255859375\n# >>> binomial_probability(12, 7, 0.6)\n# 0.227030335488\nsub binomial_probability\n{\n  my ($n, $k, $p) = @_;\n", "entry_point": "binomial_probability", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 5;\nmy $arg02 = 0.3333333333333333;\nmy $x0 = binomial_probability($arg00, $arg01, $arg02);\nmy $v0 = 0.13656454808718185;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 11;\nmy $arg11 = 6;\nmy $arg12 = 0.5;\nmy $x1 = binomial_probability($arg10, $arg11, $arg12);\nmy $v1 = 0.2255859375;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 12;\nmy $arg21 = 7;\nmy $arg22 = 0.6;\nmy $x2 = binomial_probability($arg20, $arg21, $arg22);\nmy $v2 = 0.227030335488;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to compute binomial probability for the given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/487", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n#\n# >>> sort_tuple([[1, 3], [3, 2], [2, 1]])\n# [[2, 1], [3, 2], [1, 3]]\n# >>> sort_tuple([[2, 4], [3, 3], [1, 1]])\n# [[1, 1], [3, 3], [2, 4]]\n# >>> sort_tuple([[3, 9], [6, 7], [4, 3]])\n# [[4, 3], [6, 7], [3, 9]]\nsub sort_tuple\n{\n  my ($tup) = @_;\n", "entry_point": "sort_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 3], [3, 2], [2, 1]];\nmy $x0 = sort_tuple($arg00);\nmy $v0 = [[2, 1], [3, 2], [1, 3]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[2, 4], [3, 3], [1, 1]];\nmy $x1 = sort_tuple($arg10);\nmy $v1 = [[1, 1], [3, 3], [2, 4]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[3, 9], [6, 7], [4, 3]];\nmy $x2 = sort_tuple($arg20);\nmy $v2 = [[4, 3], [6, 7], [3, 9]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/488", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the area of a pentagon.\n#\n# >>> area_pentagon(5)\n# 43.01193501472417\n# >>> area_pentagon(10)\n# 172.0477400588967\n# >>> area_pentagon(15)\n# 387.10741513251753\nsub area_pentagon\n{\n  my ($a) = @_;\n", "entry_point": "area_pentagon", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = area_pentagon($arg00);\nmy $v0 = 43.01193501472417;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $x1 = area_pentagon($arg10);\nmy $v1 = 172.0477400588967;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 15;\nmy $x2 = area_pentagon($arg20);\nmy $v2 = 387.10741513251753;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the area of a pentagon.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/489", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the frequency of the largest value in a given array.\n#\n# >>> frequency_of_largest(5, [1, 2, 3, 4, 4])\n# 2\n# >>> frequency_of_largest(3, [5, 6, 5])\n# 1\n# >>> frequency_of_largest(4, [2, 7, 7, 7])\n# 3\nsub frequency_of_largest\n{\n  my ($n, $arr) = @_;\n", "entry_point": "frequency_of_largest", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $arg01 = [1, 2, 3, 4, 4];\nmy $x0 = frequency_of_largest($arg00, $arg01);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $arg11 = [5, 6, 5];\nmy $x1 = frequency_of_largest($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $arg21 = [2, 7, 7, 7];\nmy $x2 = frequency_of_largest($arg20, $arg21);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the frequency of the largest value in a given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/490", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract all the pairs which are symmetric in the given tuple list.\n#\n# >>> extract_symmetric([[6, 7], [2, 3], [7, 6], [9, 8], [10, 2], [8, 9]])\n# {[6, 7] => 1, [8, 9] => 1}\n# >>> extract_symmetric([[7, 8], [3, 4], [8, 7], [10, 9], [11, 3], [9, 10]])\n# {[9, 10] => 1, [7, 8] => 1}\n# >>> extract_symmetric([[8, 9], [4, 5], [9, 8], [11, 10], [12, 4], [10, 11]])\n# {[8, 9] => 1, [10, 11] => 1}\nsub extract_symmetric\n{\n  my ($test_list) = @_;\n", "entry_point": "extract_symmetric", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[6, 7], [2, 3], [7, 6], [9, 8], [10, 2], [8, 9]];\nmy $x0 = extract_symmetric($arg00);\nmy $v0 = {[6, 7] => 1, [8, 9] => 1};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[7, 8], [3, 4], [8, 7], [10, 9], [11, 3], [9, 10]];\nmy $x1 = extract_symmetric($arg10);\nmy $v1 = {[9, 10] => 1, [7, 8] => 1};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[8, 9], [4, 5], [9, 8], [11, 10], [12, 4], [10, 11]];\nmy $x2 = extract_symmetric($arg20);\nmy $v2 = {[8, 9] => 1, [10, 11] => 1};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract all the pairs which are symmetric in the given tuple list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/491", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the sum of geometric progression series.\n#\n# >>> sum_gp(1, 5, 2)\n# 31\n# >>> sum_gp(1, 5, 4)\n# 341\n# >>> sum_gp(2, 6, 3)\n# 728\nsub sum_gp\n{\n  my ($a, $n, $r) = @_;\n", "entry_point": "sum_gp", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 5;\nmy $arg02 = 2;\nmy $x0 = sum_gp($arg00, $arg01, $arg02);\nmy $v0 = 31;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 5;\nmy $arg12 = 4;\nmy $x1 = sum_gp($arg10, $arg11, $arg12);\nmy $v1 = 341;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $arg21 = 6;\nmy $arg22 = 3;\nmy $x2 = sum_gp($arg20, $arg21, $arg22);\nmy $v2 = 728;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the sum of geometric progression series.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/492", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to search an element in the given array by using binary search.\n#\n# >>> binary_search([1, 2, 3, 5, 8], 6)\n# 0\n# >>> binary_search([7, 8, 9, 10, 13], 10)\n# 1\n# >>> binary_search([11, 13, 14, 19, 22, 36], 23)\n# 0\nsub binary_search\n{\n  my ($item_list, $item) = @_;\n", "entry_point": "binary_search", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 5, 8];\nmy $arg01 = 6;\nmy $x0 = binary_search($arg00, $arg01);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [7, 8, 9, 10, 13];\nmy $arg11 = 10;\nmy $x1 = binary_search($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [11, 13, 14, 19, 22, 36];\nmy $arg21 = 23;\nmy $x2 = binary_search($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to search an element in the given array by using binary search.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/493", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n#\n# >>> calculate_polygons(1, 1, 4, 4, 3)\n# [[[-5.0, -4.196152422706632], [-5.0, -0.7320508075688767], [-2.0, 1.0], [1.0, -0.7320508075688767], [1.0, -4.196152422706632], [-2.0, -5.928203230275509], [-5.0, -4.196152422706632]], [[1.0, -4.196152422706632], [1.0, -0.7320508075688767], [4.0, 1.0], [7.0, -0.7320508075688767], [7.0, -4.196152422706632], [4.0, -5.928203230275509], [1.0, -4.196152422706632]], [[7.0, -4.196152422706632], [7.0, -0.7320508075688767], [10.0, 1.0], [13.0, -0.7320508075688767], [13.0, -4.196152422706632], [10.0, -5.928203230275509], [7.0, -4.196152422706632]], [[-2.0, 1.0000000000000004], [-2.0, 4.464101615137755], [1.0, 6.196152422706632], [4.0, 4.464101615137755], [4.0, 1.0000000000000004], [1.0, -0.7320508075688767], [-2.0, 1.0000000000000004]], [[4.0, 1.0000000000000004], [4.0, 4.464101615137755], [7.0, 6.196152422706632], [10.0, 4.464101615137755], [10.0, 1.0000000000000004], [7.0, -0.7320508075688767], [4.0, 1.0000000000000004]], [[-5.0, 6.196152422706632], [-5.0, 9.660254037844387], [-2.0, 11.392304845413264], [1.0, 9.660254037844387], [1.0, 6.196152422706632], [-2.0, 4.464101615137755], [-5.0, 6.196152422706632]], [[1.0, 6.196152422706632], [1.0, 9.660254037844387], [4.0, 11.392304845413264], [7.0, 9.660254037844387], [7.0, 6.196152422706632], [4.0, 4.464101615137755], [1.0, 6.196152422706632]], [[7.0, 6.196152422706632], [7.0, 9.660254037844387], [10.0, 11.392304845413264], [13.0, 9.660254037844387], [13.0, 6.196152422706632], [10.0, 4.464101615137755], [7.0, 6.196152422706632]], [[-2.0, 11.392304845413264], [-2.0, 14.85640646055102], [1.0, 16.588457268119896], [4.0, 14.85640646055102], [4.0, 11.392304845413264], [1.0, 9.660254037844387], [-2.0, 11.392304845413264]], [[4.0, 11.392304845413264], [4.0, 14.85640646055102], [7.0, 16.588457268119896], [10.0, 14.85640646055102], [10.0, 11.392304845413264], [7.0, 9.660254037844387], [4.0, 11.392304845413264]]]\n# >>> calculate_polygons(5, 4, 7, 9, 8)\n# [[[-11.0, -9.856406460551018], [-11.0, -0.6188021535170058], [-3.0, 4.0], [5.0, -0.6188021535170058], [5.0, -9.856406460551018], [-3.0, -14.475208614068023], [-11.0, -9.856406460551018]], [[5.0, -9.856406460551018], [5.0, -0.6188021535170058], [13.0, 4.0], [21.0, -0.6188021535170058], [21.0, -9.856406460551018], [13.0, -14.475208614068023], [5.0, -9.856406460551018]], [[21.0, -9.856406460551018], [21.0, -0.6188021535170058], [29.0, 4.0], [37.0, -0.6188021535170058], [37.0, -9.856406460551018], [29.0, -14.475208614068023], [21.0, -9.856406460551018]], [[-3.0, 4.0], [-3.0, 13.237604307034012], [5.0, 17.856406460551018], [13.0, 13.237604307034012], [13.0, 4.0], [5.0, -0.6188021535170058], [-3.0, 4.0]], [[13.0, 4.0], [13.0, 13.237604307034012], [21.0, 17.856406460551018], [29.0, 13.237604307034012], [29.0, 4.0], [21.0, -0.6188021535170058], [13.0, 4.0]], [[-11.0, 17.856406460551018], [-11.0, 27.09401076758503], [-3.0, 31.712812921102035], [5.0, 27.09401076758503], [5.0, 17.856406460551018], [-3.0, 13.237604307034012], [-11.0, 17.856406460551018]], [[5.0, 17.856406460551018], [5.0, 27.09401076758503], [13.0, 31.712812921102035], [21.0, 27.09401076758503], [21.0, 17.856406460551018], [13.0, 13.237604307034012], [5.0, 17.856406460551018]], [[21.0, 17.856406460551018], [21.0, 27.09401076758503], [29.0, 31.712812921102035], [37.0, 27.09401076758503], [37.0, 17.856406460551018], [29.0, 13.237604307034012], [21.0, 17.856406460551018]], [[-3.0, 31.712812921102035], [-3.0, 40.95041722813605], [5.0, 45.569219381653056], [13.0, 40.95041722813605], [13.0, 31.712812921102035], [5.0, 27.09401076758503], [-3.0, 31.712812921102035]], [[13.0, 31.712812921102035], [13.0, 40.95041722813605], [21.0, 45.569219381653056], [29.0, 40.95041722813605], [29.0, 31.712812921102035], [21.0, 27.09401076758503], [13.0, 31.712812921102035]]]\n# >>> calculate_polygons(9, 6, 4, 3, 2)\n# [[[5.0, 2.5358983848622456], [5.0, 4.8452994616207485], [7.0, 6.0], [9.0, 4.8452994616207485], [9.0, 2.5358983848622456], [7.0, 1.3811978464829942], [5.0, 2.5358983848622456]], [[7.0, 6.0], [7.0, 8.309401076758503], [9.0, 9.464101615137753], [11.0, 8.309401076758503], [11.0, 6.0], [9.0, 4.8452994616207485], [7.0, 6.0]]]\nsub calculate_polygons\n{\n  my ($startx, $starty, $endx, $endy, $radius) = @_;\n", "entry_point": "calculate_polygons", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 1;\nmy $arg02 = 4;\nmy $arg03 = 4;\nmy $arg04 = 3;\nmy $x0 = calculate_polygons($arg00, $arg01, $arg02, $arg03, $arg04);\nmy $v0 = [[[-5.0, -4.196152422706632], [-5.0, -0.7320508075688767], [-2.0, 1.0], [1.0, -0.7320508075688767], [1.0, -4.196152422706632], [-2.0, -5.928203230275509], [-5.0, -4.196152422706632]], [[1.0, -4.196152422706632], [1.0, -0.7320508075688767], [4.0, 1.0], [7.0, -0.7320508075688767], [7.0, -4.196152422706632], [4.0, -5.928203230275509], [1.0, -4.196152422706632]], [[7.0, -4.196152422706632], [7.0, -0.7320508075688767], [10.0, 1.0], [13.0, -0.7320508075688767], [13.0, -4.196152422706632], [10.0, -5.928203230275509], [7.0, -4.196152422706632]], [[-2.0, 1.0000000000000004], [-2.0, 4.464101615137755], [1.0, 6.196152422706632], [4.0, 4.464101615137755], [4.0, 1.0000000000000004], [1.0, -0.7320508075688767], [-2.0, 1.0000000000000004]], [[4.0, 1.0000000000000004], [4.0, 4.464101615137755], [7.0, 6.196152422706632], [10.0, 4.464101615137755], [10.0, 1.0000000000000004], [7.0, -0.7320508075688767], [4.0, 1.0000000000000004]], [[-5.0, 6.196152422706632], [-5.0, 9.660254037844387], [-2.0, 11.392304845413264], [1.0, 9.660254037844387], [1.0, 6.196152422706632], [-2.0, 4.464101615137755], [-5.0, 6.196152422706632]], [[1.0, 6.196152422706632], [1.0, 9.660254037844387], [4.0, 11.392304845413264], [7.0, 9.660254037844387], [7.0, 6.196152422706632], [4.0, 4.464101615137755], [1.0, 6.196152422706632]], [[7.0, 6.196152422706632], [7.0, 9.660254037844387], [10.0, 11.392304845413264], [13.0, 9.660254037844387], [13.0, 6.196152422706632], [10.0, 4.464101615137755], [7.0, 6.196152422706632]], [[-2.0, 11.392304845413264], [-2.0, 14.85640646055102], [1.0, 16.588457268119896], [4.0, 14.85640646055102], [4.0, 11.392304845413264], [1.0, 9.660254037844387], [-2.0, 11.392304845413264]], [[4.0, 11.392304845413264], [4.0, 14.85640646055102], [7.0, 16.588457268119896], [10.0, 14.85640646055102], [10.0, 11.392304845413264], [7.0, 9.660254037844387], [4.0, 11.392304845413264]]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $arg11 = 4;\nmy $arg12 = 7;\nmy $arg13 = 9;\nmy $arg14 = 8;\nmy $x1 = calculate_polygons($arg10, $arg11, $arg12, $arg13, $arg14);\nmy $v1 = [[[-11.0, -9.856406460551018], [-11.0, -0.6188021535170058], [-3.0, 4.0], [5.0, -0.6188021535170058], [5.0, -9.856406460551018], [-3.0, -14.475208614068023], [-11.0, -9.856406460551018]], [[5.0, -9.856406460551018], [5.0, -0.6188021535170058], [13.0, 4.0], [21.0, -0.6188021535170058], [21.0, -9.856406460551018], [13.0, -14.475208614068023], [5.0, -9.856406460551018]], [[21.0, -9.856406460551018], [21.0, -0.6188021535170058], [29.0, 4.0], [37.0, -0.6188021535170058], [37.0, -9.856406460551018], [29.0, -14.475208614068023], [21.0, -9.856406460551018]], [[-3.0, 4.0], [-3.0, 13.237604307034012], [5.0, 17.856406460551018], [13.0, 13.237604307034012], [13.0, 4.0], [5.0, -0.6188021535170058], [-3.0, 4.0]], [[13.0, 4.0], [13.0, 13.237604307034012], [21.0, 17.856406460551018], [29.0, 13.237604307034012], [29.0, 4.0], [21.0, -0.6188021535170058], [13.0, 4.0]], [[-11.0, 17.856406460551018], [-11.0, 27.09401076758503], [-3.0, 31.712812921102035], [5.0, 27.09401076758503], [5.0, 17.856406460551018], [-3.0, 13.237604307034012], [-11.0, 17.856406460551018]], [[5.0, 17.856406460551018], [5.0, 27.09401076758503], [13.0, 31.712812921102035], [21.0, 27.09401076758503], [21.0, 17.856406460551018], [13.0, 13.237604307034012], [5.0, 17.856406460551018]], [[21.0, 17.856406460551018], [21.0, 27.09401076758503], [29.0, 31.712812921102035], [37.0, 27.09401076758503], [37.0, 17.856406460551018], [29.0, 13.237604307034012], [21.0, 17.856406460551018]], [[-3.0, 31.712812921102035], [-3.0, 40.95041722813605], [5.0, 45.569219381653056], [13.0, 40.95041722813605], [13.0, 31.712812921102035], [5.0, 27.09401076758503], [-3.0, 31.712812921102035]], [[13.0, 31.712812921102035], [13.0, 40.95041722813605], [21.0, 45.569219381653056], [29.0, 40.95041722813605], [29.0, 31.712812921102035], [21.0, 27.09401076758503], [13.0, 31.712812921102035]]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 9;\nmy $arg21 = 6;\nmy $arg22 = 4;\nmy $arg23 = 3;\nmy $arg24 = 2;\nmy $x2 = calculate_polygons($arg20, $arg21, $arg22, $arg23, $arg24);\nmy $v2 = [[[5.0, 2.5358983848622456], [5.0, 4.8452994616207485], [7.0, 6.0], [9.0, 4.8452994616207485], [9.0, 2.5358983848622456], [7.0, 1.3811978464829942], [5.0, 2.5358983848622456]], [[7.0, 6.0], [7.0, 8.309401076758503], [9.0, 9.464101615137753], [11.0, 8.309401076758503], [11.0, 6.0], [9.0, 4.8452994616207485], [7.0, 6.0]]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/494", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert the given binary tuple to integer.\n#\n# >>> binary_to_integer([1, 1, 0, 1, 0, 0, 1])\n# \"105\"\n# >>> binary_to_integer([0, 1, 1, 0, 0, 1, 0, 1])\n# \"101\"\n# >>> binary_to_integer([1, 1, 0, 1, 0, 1])\n# \"53\"\nsub binary_to_integer\n{\n  my ($test_tup) = @_;\n", "entry_point": "binary_to_integer", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 1, 0, 1, 0, 0, 1];\nmy $x0 = binary_to_integer($arg00);\nmy $v0 = \"105\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [0, 1, 1, 0, 0, 1, 0, 1];\nmy $x1 = binary_to_integer($arg10);\nmy $v1 = \"101\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 1, 0, 1, 0, 1];\nmy $x2 = binary_to_integer($arg20);\nmy $v2 = \"53\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert the given binary tuple to integer.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/495", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove lowercase substrings from a given string by using regex.\n#\n# >>> remove_lowercase(\"KDeoALOklOOHserfLoAJSIskdsf\")\n# \"KDALOOOHLAJSI\"\n# >>> remove_lowercase(\"ProducTnamEstreAmIngMediAplAYer\")\n# \"PTEAIMAAY\"\n# >>> remove_lowercase(\"maNufacTuredbYSheZenTechNolOGIes\")\n# \"NTYSZTNOGI\"\nsub remove_lowercase\n{\n  my ($str1) = @_;\n", "entry_point": "remove_lowercase", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"KDeoALOklOOHserfLoAJSIskdsf\";\nmy $x0 = remove_lowercase($arg00);\nmy $v0 = \"KDALOOOHLAJSI\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"ProducTnamEstreAmIngMediAplAYer\";\nmy $x1 = remove_lowercase($arg10);\nmy $v1 = \"PTEAIMAAY\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"maNufacTuredbYSheZenTechNolOGIes\";\nmy $x2 = remove_lowercase($arg20);\nmy $v2 = \"NTYSZTNOGI\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove lowercase substrings from a given string by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/496", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n#\n# >>> heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3)\n# [14, 22, 25]\n# >>> heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2)\n# [14, 22]\n# >>> heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)\n# [14, 22, 22, 25, 35]\nsub heap_queue_smallest\n{\n  my ($nums, $n) = @_;\n", "entry_point": "heap_queue_smallest", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [25, 35, 22, 85, 14, 65, 75, 25, 58];\nmy $arg01 = 3;\nmy $x0 = heap_queue_smallest($arg00, $arg01);\nmy $v0 = [14, 22, 25];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [25, 35, 22, 85, 14, 65, 75, 25, 58];\nmy $arg11 = 2;\nmy $x1 = heap_queue_smallest($arg10, $arg11);\nmy $v1 = [14, 22];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [25, 35, 22, 85, 14, 65, 75, 22, 58];\nmy $arg21 = 5;\nmy $x2 = heap_queue_smallest($arg20, $arg21);\nmy $v2 = [14, 22, 22, 25, 35];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/497", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the surface area of a cone.\n#\n# >>> surfacearea_cone(5, 12)\n# 282.7433388230814\n# >>> surfacearea_cone(10, 15)\n# 880.5179353159282\n# >>> surfacearea_cone(19, 17)\n# 2655.923961165254\nsub surfacearea_cone\n{\n  my ($r, $h) = @_;\n", "entry_point": "surfacearea_cone", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $arg01 = 12;\nmy $x0 = surfacearea_cone($arg00, $arg01);\nmy $v0 = 282.7433388230814;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = 15;\nmy $x1 = surfacearea_cone($arg10, $arg11);\nmy $v1 = 880.5179353159282;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 19;\nmy $arg21 = 17;\nmy $x2 = surfacearea_cone($arg20, $arg21);\nmy $v2 = 2655.923961165254;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the surface area of a cone.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/498", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find gcd of two positive integers.\n#\n# >>> gcd(12, 17)\n# 1\n# >>> gcd(4, 6)\n# 2\n# >>> gcd(2, 9)\n# 1\nsub gcd\n{\n  my ($x, $y) = @_;\n", "entry_point": "gcd", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 12;\nmy $arg01 = 17;\nmy $x0 = gcd($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $arg11 = 6;\nmy $x1 = gcd($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $arg21 = 9;\nmy $x2 = gcd($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find gcd of two positive integers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/499", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the diameter of a circle.\n#\n# >>> diameter_circle(10)\n# 20\n# >>> diameter_circle(40)\n# 80\n# >>> diameter_circle(15)\n# 30\nsub diameter_circle\n{\n  my ($r) = @_;\n", "entry_point": "diameter_circle", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = diameter_circle($arg00);\nmy $v0 = 20;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 40;\nmy $x1 = diameter_circle($arg10);\nmy $v1 = 80;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 15;\nmy $x2 = diameter_circle($arg20);\nmy $v2 = 30;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the diameter of a circle.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/500", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to concatenate all elements of the given list into a string.\n#\n# >>> concatenate_elements([\"hello\", \"there\", \"have\", \"a\", \"rocky\", \"day\"])\n# \"  hello there have a rocky day\"\n# >>> concatenate_elements([\"Hi\", \"there\", \"How\", \"are\", \"you\"])\n# \"  Hi there How are you\"\n# >>> concatenate_elements([\"Part\", \"of\", \"the\", \"journey\", \"is\", \"end\"])\n# \"  Part of the journey is end\"\nsub concatenate_elements\n{\n  my ($list) = @_;\n", "entry_point": "concatenate_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"hello\", \"there\", \"have\", \"a\", \"rocky\", \"day\"];\nmy $x0 = concatenate_elements($arg00);\nmy $v0 = \"  hello there have a rocky day\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"Hi\", \"there\", \"How\", \"are\", \"you\"];\nmy $x1 = concatenate_elements($arg10);\nmy $v1 = \"  Hi there How are you\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"Part\", \"of\", \"the\", \"journey\", \"is\", \"end\"];\nmy $x2 = concatenate_elements($arg20);\nmy $v2 = \"  Part of the journey is end\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to concatenate all elements of the given list into a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/501", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find common divisor between two numbers in a given pair.\n#\n# >>> num_comm_div(2, 4)\n# 2\n# >>> num_comm_div(2, 8)\n# 2\n# >>> num_comm_div(12, 24)\n# 6\nsub num_comm_div\n{\n  my ($x, $y) = @_;\n", "entry_point": "num_comm_div", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $arg01 = 4;\nmy $x0 = num_comm_div($arg00, $arg01);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $arg11 = 8;\nmy $x1 = num_comm_div($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 12;\nmy $arg21 = 24;\nmy $x2 = num_comm_div($arg20, $arg21);\nmy $v2 = 6;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find common divisor between two numbers in a given pair.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/502", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find remainder of two numbers.\n#\n# >>> find(3, 3)\n# 0\n# >>> find(10, 3)\n# 1\n# >>> find(16, 5)\n# 1\nsub find\n{\n  my ($n, $m) = @_;\n", "entry_point": "find", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 3;\nmy $x0 = find($arg00, $arg01);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = 3;\nmy $x1 = find($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 16;\nmy $arg21 = 5;\nmy $x2 = find($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find remainder of two numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/503", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to add consecutive numbers of a given list.\n#\n# >>> add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])\n# [2, 4, 7, 8, 9, 11, 13]\n# >>> add_consecutive_nums([4, 5, 8, 9, 6, 10])\n# [9, 13, 17, 15, 16]\n# >>> add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# [3, 5, 7, 9, 11, 13, 15, 17, 19]\nsub add_consecutive_nums\n{\n  my ($nums) = @_;\n", "entry_point": "add_consecutive_nums", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 1, 3, 4, 4, 5, 6, 7];\nmy $x0 = add_consecutive_nums($arg00);\nmy $v0 = [2, 4, 7, 8, 9, 11, 13];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 5, 8, 9, 6, 10];\nmy $x1 = add_consecutive_nums($arg10);\nmy $v1 = [9, 13, 17, 15, 16];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $x2 = add_consecutive_nums($arg20);\nmy $v2 = [3, 5, 7, 9, 11, 13, 15, 17, 19];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to add consecutive numbers of a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/504", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the cube sum of first n natural numbers.\n#\n# >>> sum_of_series(5)\n# 225\n# >>> sum_of_series(2)\n# 9\n# >>> sum_of_series(3)\n# 36\nsub sum_of_series\n{\n  my ($n) = @_;\n", "entry_point": "sum_of_series", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = sum_of_series($arg00);\nmy $v0 = 225;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = sum_of_series($arg10);\nmy $v1 = 9;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $x2 = sum_of_series($arg20);\nmy $v2 = 36;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the cube sum of first n natural numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/505", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to move all zeroes to the end of the given array.\n#\n# >>> re_order([6, 0, 8, 2, 3, 0, 4, 0, 1])\n# [6, 8, 2, 3, 4, 1, 0, 0, 0]\n# >>> re_order([4, 0, 2, 7, 0, 9, 0, 12, 0])\n# [4, 2, 7, 9, 12, 0, 0, 0, 0]\n# >>> re_order([3, 11, 0, 74, 14, 0, 1, 0, 2])\n# [3, 11, 74, 14, 1, 2, 0, 0, 0]\nsub re_order\n{\n  my ($a) = @_;\n", "entry_point": "re_order", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [6, 0, 8, 2, 3, 0, 4, 0, 1];\nmy $x0 = re_order($arg00);\nmy $v0 = [6, 8, 2, 3, 4, 1, 0, 0, 0];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 0, 2, 7, 0, 9, 0, 12, 0];\nmy $x1 = re_order($arg10);\nmy $v1 = [4, 2, 7, 9, 12, 0, 0, 0, 0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 11, 0, 74, 14, 0, 1, 0, 2];\nmy $x2 = re_order($arg20);\nmy $v2 = [3, 11, 74, 14, 1, 2, 0, 0, 0];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to move all zeroes to the end of the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/506", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate the permutation coefficient of given p(n, k).\n#\n# >>> permutation_coefficient(10, 2)\n# 90\n# >>> permutation_coefficient(10, 3)\n# 720\n# >>> permutation_coefficient(10, 1)\n# 10\nsub permutation_coefficient\n{\n  my ($n, $k) = @_;\n", "entry_point": "permutation_coefficient", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 2;\nmy $x0 = permutation_coefficient($arg00, $arg01);\nmy $v0 = 90;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = 3;\nmy $x1 = permutation_coefficient($arg10, $arg11);\nmy $v1 = 720;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $arg21 = 1;\nmy $x2 = permutation_coefficient($arg20, $arg21);\nmy $v2 = 10;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate the permutation coefficient of given p(n, k).", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/507", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove specific words from a given list.\n#\n# >>> remove_words([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"], [\"white\", \"orange\"])\n# [\"red\", \"green\", \"blue\", \"black\"]\n# >>> remove_words([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"], [\"black\", \"orange\"])\n# [\"red\", \"green\", \"blue\", \"white\"]\n# >>> remove_words([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"], [\"blue\", \"white\"])\n# [\"red\", \"green\", \"black\", \"orange\"]\nsub remove_words\n{\n  my ($list1, $removewords) = @_;\n", "entry_point": "remove_words", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"];\nmy $arg01 = [\"white\", \"orange\"];\nmy $x0 = remove_words($arg00, $arg01);\nmy $v0 = [\"red\", \"green\", \"blue\", \"black\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"];\nmy $arg11 = [\"black\", \"orange\"];\nmy $x1 = remove_words($arg10, $arg11);\nmy $v1 = [\"red\", \"green\", \"blue\", \"white\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"];\nmy $arg21 = [\"blue\", \"white\"];\nmy $x2 = remove_words($arg20, $arg21);\nmy $v2 = [\"red\", \"green\", \"black\", \"orange\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove specific words from a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/508", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if the common elements between two given lists are in the same order or not.\n#\n# >>> same_order([\"red\", \"green\", \"black\", \"orange\"], [\"red\", \"pink\", \"green\", \"white\", \"black\"])\n# 1\n# >>> same_order([\"red\", \"pink\", \"green\", \"white\", \"black\"], [\"white\", \"orange\", \"pink\", \"black\"])\n# 0\n# >>> same_order([\"red\", \"green\", \"black\", \"orange\"], [\"red\", \"pink\", \"green\", \"white\", \"black\"])\n# 1\nsub same_order\n{\n  my ($l1, $l2) = @_;\n", "entry_point": "same_order", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"red\", \"green\", \"black\", \"orange\"];\nmy $arg01 = [\"red\", \"pink\", \"green\", \"white\", \"black\"];\nmy $x0 = same_order($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"red\", \"pink\", \"green\", \"white\", \"black\"];\nmy $arg11 = [\"white\", \"orange\", \"pink\", \"black\"];\nmy $x1 = same_order($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"red\", \"green\", \"black\", \"orange\"];\nmy $arg21 = [\"red\", \"pink\", \"green\", \"white\", \"black\"];\nmy $x2 = same_order($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if the common elements between two given lists are in the same order or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/509", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the average of odd numbers till a given odd number.\n#\n# >>> average_odd(9)\n# 5\n# >>> average_odd(5)\n# 3\n# >>> average_odd(11)\n# 6\nsub average_odd\n{\n  my ($n) = @_;\n", "entry_point": "average_odd", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 9;\nmy $x0 = average_odd($arg00);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $x1 = average_odd($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 11;\nmy $x2 = average_odd($arg20);\nmy $v2 = 6;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the average of odd numbers till a given odd number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/510", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n#\n# >>> no_of_subsequences([1, 2, 3, 4], 10)\n# 11\n# >>> no_of_subsequences([4, 8, 7, 2], 50)\n# 9\n# >>> no_of_subsequences([5, 6, 7, 8], 15)\n# 4\nsub no_of_subsequences\n{\n  my ($arr, $k) = @_;\n", "entry_point": "no_of_subsequences", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4];\nmy $arg01 = 10;\nmy $x0 = no_of_subsequences($arg00, $arg01);\nmy $v0 = 11;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 8, 7, 2];\nmy $arg11 = 50;\nmy $x1 = no_of_subsequences($arg10, $arg11);\nmy $v1 = 9;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [5, 6, 7, 8];\nmy $arg21 = 15;\nmy $x2 = no_of_subsequences($arg20, $arg21);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/511", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find minimum sum of factors of a given number.\n#\n# >>> find_min_sum(12)\n# 7\n# >>> find_min_sum(105)\n# 15\n# >>> find_min_sum(2)\n# 2\nsub find_min_sum\n{\n  my ($num) = @_;\n", "entry_point": "find_min_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 12;\nmy $x0 = find_min_sum($arg00);\nmy $v0 = 7;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 105;\nmy $x1 = find_min_sum($arg10);\nmy $v1 = 15;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $x2 = find_min_sum($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find minimum sum of factors of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/512", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count the element frequency in the mixed nested tuple.\n#\n# >>> count_element_freq([5, 6, [5, 6], 7, [8, 9], 9])\n# {5 => 2, 6 => 2, 7 => 1, 8 => 1, 9 => 2}\n# >>> count_element_freq([6, 7, [6, 7], 8, [9, 10], 10])\n# {6 => 2, 7 => 2, 8 => 1, 9 => 1, 10 => 2}\n# >>> count_element_freq([7, 8, [7, 8], 9, [10, 11], 11])\n# {7 => 2, 8 => 2, 9 => 1, 10 => 1, 11 => 2}\nsub count_element_freq\n{\n  my ($test_tuple) = @_;\n", "entry_point": "count_element_freq", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 6, [5, 6], 7, [8, 9], 9];\nmy $x0 = count_element_freq($arg00);\nmy $v0 = {5 => 2, 6 => 2, 7 => 1, 8 => 1, 9 => 2};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [6, 7, [6, 7], 8, [9, 10], 10];\nmy $x1 = count_element_freq($arg10);\nmy $v1 = {6 => 2, 7 => 2, 8 => 1, 9 => 1, 10 => 2};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [7, 8, [7, 8], 9, [10, 11], 11];\nmy $x2 = count_element_freq($arg20);\nmy $v2 = {7 => 2, 8 => 2, 9 => 1, 10 => 1, 11 => 2};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count the element frequency in the mixed nested tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/513", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert tuple into list by adding the given string after every element.\n#\n# >>> add_str([5, 6, 7, 4, 9], \"FDF\")\n# [5, \"FDF\", 6, \"FDF\", 7, \"FDF\", 4, \"FDF\", 9, \"FDF\"]\n# >>> add_str([7, 8, 9, 10], \"PF\")\n# [7, \"PF\", 8, \"PF\", 9, \"PF\", 10, \"PF\"]\n# >>> add_str([11, 14, 12, 1, 4], \"JH\")\n# [11, \"JH\", 14, \"JH\", 12, \"JH\", 1, \"JH\", 4, \"JH\"]\nsub add_str\n{\n  my ($test_tup, $k) = @_;\n", "entry_point": "add_str", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 6, 7, 4, 9];\nmy $arg01 = \"FDF\";\nmy $x0 = add_str($arg00, $arg01);\nmy $v0 = [5, \"FDF\", 6, \"FDF\", 7, \"FDF\", 4, \"FDF\", 9, \"FDF\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [7, 8, 9, 10];\nmy $arg11 = \"PF\";\nmy $x1 = add_str($arg10, $arg11);\nmy $v1 = [7, \"PF\", 8, \"PF\", 9, \"PF\", 10, \"PF\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [11, 14, 12, 1, 4];\nmy $arg21 = \"JH\";\nmy $x2 = add_str($arg20, $arg21);\nmy $v2 = [11, \"JH\", 14, \"JH\", 12, \"JH\", 1, \"JH\", 4, \"JH\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert tuple into list by adding the given string after every element.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/514", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the summation of tuple elements in the given tuple list.\n#\n# >>> sum_elements([7, 8, 9, 1, 10, 7])\n# 42\n# >>> sum_elements([1, 2, 3, 4, 5, 6])\n# 21\n# >>> sum_elements([11, 12, 13, 45, 14])\n# 95\nsub sum_elements\n{\n  my ($test_tup) = @_;\n", "entry_point": "sum_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [7, 8, 9, 1, 10, 7];\nmy $x0 = sum_elements($arg00);\nmy $v0 = 42;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5, 6];\nmy $x1 = sum_elements($arg10);\nmy $v1 = 21;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [11, 12, 13, 45, 14];\nmy $x2 = sum_elements($arg20);\nmy $v2 = 95;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the summation of tuple elements in the given tuple list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/515", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if there is a subset with sum divisible by m.\n#\n# >>> modular_sum([3, 1, 7, 5], 4, 6)\n# 1\n# >>> modular_sum([1, 7], 2, 5)\n# 0\n# >>> modular_sum([1, 6], 2, 5)\n# 0\nsub modular_sum\n{\n  my ($arr, $n, $m) = @_;\n", "entry_point": "modular_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 1, 7, 5];\nmy $arg01 = 4;\nmy $arg02 = 6;\nmy $x0 = modular_sum($arg00, $arg01, $arg02);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 7];\nmy $arg11 = 2;\nmy $arg12 = 5;\nmy $x1 = modular_sum($arg10, $arg11, $arg12);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 6];\nmy $arg21 = 2;\nmy $arg22 = 5;\nmy $x2 = modular_sum($arg20, $arg21, $arg22);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if there is a subset with sum divisible by m.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/516", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort a list of elements using radix sort.\n#\n# >>> radix_sort([15, 79, 25, 68, 37])\n# [15, 25, 37, 68, 79]\n# >>> radix_sort([9, 11, 8, 7, 3, 2])\n# [2, 3, 7, 8, 9, 11]\n# >>> radix_sort([36, 12, 24, 26, 29])\n# [12, 24, 26, 29, 36]\nsub radix_sort\n{\n  my ($nums) = @_;\n", "entry_point": "radix_sort", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [15, 79, 25, 68, 37];\nmy $x0 = radix_sort($arg00);\nmy $v0 = [15, 25, 37, 68, 79];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [9, 11, 8, 7, 3, 2];\nmy $x1 = radix_sort($arg10);\nmy $v1 = [2, 3, 7, 8, 9, 11];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [36, 12, 24, 26, 29];\nmy $x2 = radix_sort($arg20);\nmy $v2 = [12, 24, 26, 29, 36];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort a list of elements using radix sort.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/517", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the largest postive number from the given list.\n#\n# >>> largest_pos([1, 2, 3, 4, -1])\n# 4\n# >>> largest_pos([0, 1, 2, -5, -1, 6])\n# 6\n# >>> largest_pos([0, 0, 1, 0])\n# 1\nsub largest_pos\n{\n  my ($list1) = @_;\n", "entry_point": "largest_pos", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, -1];\nmy $x0 = largest_pos($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [0, 1, 2, -5, -1, 6];\nmy $x1 = largest_pos($arg10);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [0, 0, 1, 0];\nmy $x2 = largest_pos($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the largest postive number from the given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/518", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the square root of a perfect number.\n#\n# >>> sqrt_root(4)\n# 2\n# >>> sqrt_root(16)\n# 4\n# >>> sqrt_root(400)\n# 20\nsub sqrt_root\n{\n  my ($num) = @_;\n", "entry_point": "sqrt_root", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $x0 = sqrt_root($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 16;\nmy $x1 = sqrt_root($arg10);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 400;\nmy $x2 = sqrt_root($arg20);\nmy $v2 = 20;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the square root of a perfect number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/519", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate volume of a tetrahedron.\n#\n# >>> volume_tetrahedron(10)\n# 117.85\n# >>> volume_tetrahedron(15)\n# 397.75\n# >>> volume_tetrahedron(20)\n# 942.81\nsub volume_tetrahedron\n{\n  my ($num) = @_;\n", "entry_point": "volume_tetrahedron", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = volume_tetrahedron($arg00);\nmy $v0 = 117.85;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 15;\nmy $x1 = volume_tetrahedron($arg10);\nmy $v1 = 397.75;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 20;\nmy $x2 = volume_tetrahedron($arg20);\nmy $v2 = 942.81;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate volume of a tetrahedron.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/520", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the lcm of the given array elements.\n#\n# >>> get_lcm([2, 7, 3, 9, 4])\n# 252\n# >>> get_lcm([1, 2, 8, 3])\n# 24\n# >>> get_lcm([3, 8, 4, 10, 5])\n# 120\nsub get_lcm\n{\n  my ($l) = @_;\n", "entry_point": "get_lcm", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 7, 3, 9, 4];\nmy $x0 = get_lcm($arg00);\nmy $v0 = 252;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 8, 3];\nmy $x1 = get_lcm($arg10);\nmy $v1 = 24;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 8, 4, 10, 5];\nmy $x2 = get_lcm($arg20);\nmy $v2 = 120;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the lcm of the given array elements.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/521", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to print check if the triangle is scalene or not.\n#\n# >>> check_isosceles(6, 8, 12)\n# 1\n# >>> check_isosceles(6, 6, 12)\n# 0\n# >>> check_isosceles(6, 15, 20)\n# 1\nsub check_isosceles\n{\n  my ($x, $y, $z) = @_;\n", "entry_point": "check_isosceles", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 6;\nmy $arg01 = 8;\nmy $arg02 = 12;\nmy $x0 = check_isosceles($arg00, $arg01, $arg02);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 6;\nmy $arg11 = 6;\nmy $arg12 = 12;\nmy $x1 = check_isosceles($arg10, $arg11, $arg12);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 6;\nmy $arg21 = 15;\nmy $arg22 = 20;\nmy $x2 = check_isosceles($arg20, $arg21, $arg22);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to print check if the triangle is scalene or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/522", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the longest bitonic subsequence for the given array.\n#\n# >>> lbs([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15])\n# 7\n# >>> lbs([1, 11, 2, 10, 4, 5, 2, 1])\n# 6\n# >>> lbs([80, 60, 30, 40, 20, 10])\n# 5\nsub lbs\n{\n  my ($arr) = @_;\n", "entry_point": "lbs", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15];\nmy $x0 = lbs($arg00);\nmy $v0 = 7;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 11, 2, 10, 4, 5, 2, 1];\nmy $x1 = lbs($arg10);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [80, 60, 30, 40, 20, 10];\nmy $x2 = lbs($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the longest bitonic subsequence for the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/523", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n#\n# >>> check_string(\"python\")\n# [\"String must have 1 upper case character.\", \"String must have 1 number.\", \"String length should be atleast 8.\"]\n# >>> check_string(\"123python\")\n# [\"String must have 1 upper case character.\"]\n# >>> check_string(\"123Python\")\n# [\"Valid string.\"]\nsub check_string\n{\n  my ($str1) = @_;\n", "entry_point": "check_string", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python\";\nmy $x0 = check_string($arg00);\nmy $v0 = [\"String must have 1 upper case character.\", \"String must have 1 number.\", \"String length should be atleast 8.\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"123python\";\nmy $x1 = check_string($arg10);\nmy $v1 = [\"String must have 1 upper case character.\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"123Python\";\nmy $x2 = check_string($arg20);\nmy $v2 = [\"Valid string.\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/524", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the sum of maximum increasing subsequence of the given array.\n#\n# >>> max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7)\n# 106\n# >>> max_sum_increasing_subsequence([3, 4, 5, 10], 4)\n# 22\n# >>> max_sum_increasing_subsequence([10, 5, 4, 3], 4)\n# 10\nsub max_sum_increasing_subsequence\n{\n  my ($arr, $n) = @_;\n", "entry_point": "max_sum_increasing_subsequence", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 101, 2, 3, 100, 4, 5];\nmy $arg01 = 7;\nmy $x0 = max_sum_increasing_subsequence($arg00, $arg01);\nmy $v0 = 106;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [3, 4, 5, 10];\nmy $arg11 = 4;\nmy $x1 = max_sum_increasing_subsequence($arg10, $arg11);\nmy $v1 = 22;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [10, 5, 4, 3];\nmy $arg21 = 4;\nmy $x2 = max_sum_increasing_subsequence($arg20, $arg21);\nmy $v2 = 10;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the sum of maximum increasing subsequence of the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/525", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether two given lines are parallel or not.\n#\n# >>> parallel_lines([2, 3, 4], [2, 3, 8])\n# 1\n# >>> parallel_lines([2, 3, 4], [4, -3, 8])\n# 0\n# >>> parallel_lines([3, 3], [5, 5])\n# 1\nsub parallel_lines\n{\n  my ($line1, $line2) = @_;\n", "entry_point": "parallel_lines", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 3, 4];\nmy $arg01 = [2, 3, 8];\nmy $x0 = parallel_lines($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 3, 4];\nmy $arg11 = [4, -3, 8];\nmy $x1 = parallel_lines($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 3];\nmy $arg21 = [5, 5];\nmy $x2 = parallel_lines($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether two given lines are parallel or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/526", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to capitalize first and last letters of each word of a given string.\n#\n# >>> capitalize_first_last_letters(\"python\")\n# \"PythoN\"\n# >>> capitalize_first_last_letters(\"bigdata\")\n# \"BigdatA\"\n# >>> capitalize_first_last_letters(\"Hadoop\")\n# \"HadooP\"\nsub capitalize_first_last_letters\n{\n  my ($str1) = @_;\n", "entry_point": "capitalize_first_last_letters", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python\";\nmy $x0 = capitalize_first_last_letters($arg00);\nmy $v0 = \"PythoN\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"bigdata\";\nmy $x1 = capitalize_first_last_letters($arg10);\nmy $v1 = \"BigdatA\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Hadoop\";\nmy $x2 = capitalize_first_last_letters($arg20);\nmy $v2 = \"HadooP\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to capitalize first and last letters of each word of a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/527", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find all pairs in an integer array whose sum is equal to a given number.\n#\n# >>> get_pairs_count([1, 5, 7, -1, 5], 5, 6)\n# 3\n# >>> get_pairs_count([1, 5, 7, -1], 4, 6)\n# 2\n# >>> get_pairs_count([1, 1, 1, 1], 4, 2)\n# 6\nsub get_pairs_count\n{\n  my ($arr, $n, $sum) = @_;\n", "entry_point": "get_pairs_count", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 5, 7, -1, 5];\nmy $arg01 = 5;\nmy $arg02 = 6;\nmy $x0 = get_pairs_count($arg00, $arg01, $arg02);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 5, 7, -1];\nmy $arg11 = 4;\nmy $arg12 = 6;\nmy $x1 = get_pairs_count($arg10, $arg11, $arg12);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 1, 1, 1];\nmy $arg21 = 4;\nmy $arg22 = 2;\nmy $x2 = get_pairs_count($arg20, $arg21, $arg22);\nmy $v2 = 6;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find all pairs in an integer array whose sum is equal to a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/528", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the list of lists with minimum length.\n#\n# >>> min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n# [1, [0]]\n# >>> min_length([[1], [5, 7], [10, 12, 14, 15]])\n# [1, [1]]\n# >>> min_length([[5], [15, 20, 25]])\n# [1, [5]]\nsub min_length\n{\n  my ($list1) = @_;\n", "entry_point": "min_length", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]];\nmy $x0 = min_length($arg00);\nmy $v0 = [1, [0]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1], [5, 7], [10, 12, 14, 15]];\nmy $x1 = min_length($arg10);\nmy $v1 = [1, [1]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[5], [15, 20, 25]];\nmy $x2 = min_length($arg20);\nmy $v2 = [1, [5]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the list of lists with minimum length.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/529", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the nth jacobsthal-lucas number.\n#\n# >>> jacobsthal_lucas(5)\n# 31\n# >>> jacobsthal_lucas(2)\n# 5\n# >>> jacobsthal_lucas(4)\n# 17\nsub jacobsthal_lucas\n{\n  my ($n) = @_;\n", "entry_point": "jacobsthal_lucas", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = jacobsthal_lucas($arg00);\nmy $v0 = 31;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = jacobsthal_lucas($arg10);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $x2 = jacobsthal_lucas($arg20);\nmy $v2 = 17;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the nth jacobsthal-lucas number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/530", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the ration of negative numbers in an array of integers.\n#\n# >>> negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n# 0.31\n# >>> negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n# 0.31\n# >>> negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])\n# 0.44\nsub negative_count\n{\n  my ($nums) = @_;\n", "entry_point": "negative_count", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8];\nmy $x0 = negative_count($arg00);\nmy $v0 = 0.31;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8];\nmy $x1 = negative_count($arg10);\nmy $v1 = 0.31;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 4, -6, -9, 11, -12, 14, -5, 17];\nmy $x2 = negative_count($arg20);\nmy $v2 = 0.44;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the ration of negative numbers in an array of integers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/531", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find minimum number of coins that make a given value.\n#\n# >>> min_coins([9, 6, 5, 1], 4, 11)\n# 2\n# >>> min_coins([4, 5, 6, 7, 8, 9], 6, 9)\n# 1\n# >>> min_coins([1, 2, 3], 3, 4)\n# 2\nsub min_coins\n{\n  my ($coins, $m, $v) = @_;\n", "entry_point": "min_coins", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [9, 6, 5, 1];\nmy $arg01 = 4;\nmy $arg02 = 11;\nmy $x0 = min_coins($arg00, $arg01, $arg02);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 5, 6, 7, 8, 9];\nmy $arg11 = 6;\nmy $arg12 = 9;\nmy $x1 = min_coins($arg10, $arg11, $arg12);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3];\nmy $arg21 = 3;\nmy $arg22 = 4;\nmy $x2 = min_coins($arg20, $arg21, $arg22);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find minimum number of coins that make a given value.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/532", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if the two given strings are permutations of each other.\n#\n# >>> check_permutation(\"abc\", \"cba\")\n# 1\n# >>> check_permutation(\"test\", \"ttew\")\n# 0\n# >>> check_permutation(\"xxyz\", \"yxzx\")\n# 1\nsub check_permutation\n{\n  my ($str1, $str2) = @_;\n", "entry_point": "check_permutation", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abc\";\nmy $arg01 = \"cba\";\nmy $x0 = check_permutation($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"test\";\nmy $arg11 = \"ttew\";\nmy $x1 = check_permutation($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"xxyz\";\nmy $arg21 = \"yxzx\";\nmy $x2 = check_permutation($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if the two given strings are permutations of each other.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/534", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n#\n# >>> search_literal(\"python\", \"python programming language\")\n# [0, 6]\n# >>> search_literal(\"programming\", \"python programming language\")\n# [7, 18]\n# >>> search_literal(\"language\", \"python programming language\")\n# [19, 27]\nsub search_literal\n{\n  my ($pattern, $text) = @_;\n", "entry_point": "search_literal", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python\";\nmy $arg01 = \"python programming language\";\nmy $x0 = search_literal($arg00, $arg01);\nmy $v0 = [0, 6];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"programming\";\nmy $arg11 = \"python programming language\";\nmy $x1 = search_literal($arg10, $arg11);\nmy $v1 = [7, 18];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"language\";\nmy $arg21 = \"python programming language\";\nmy $x2 = search_literal($arg20, $arg21);\nmy $v2 = [19, 27];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/535", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the top or bottom surface area of a cylinder.\n#\n# >>> topbottom_surfacearea(10)\n# 314.15000000000003\n# >>> topbottom_surfacearea(5)\n# 78.53750000000001\n# >>> topbottom_surfacearea(4)\n# 50.264\nsub topbottom_surfacearea\n{\n  my ($r) = @_;\n", "entry_point": "topbottom_surfacearea", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = topbottom_surfacearea($arg00);\nmy $v0 = 314.15000000000003;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $x1 = topbottom_surfacearea($arg10);\nmy $v1 = 78.53750000000001;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $x2 = topbottom_surfacearea($arg20);\nmy $v2 = 50.264;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the top or bottom surface area of a cylinder.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/536", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to select the nth items of a list.\n#\n# >>> nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)\n# [1, 3, 5, 7, 9]\n# >>> nth_items([10, 15, 19, 17, 16, 18], 3)\n# [10, 17]\n# >>> nth_items([14, 16, 19, 15, 17], 4)\n# [14, 17]\nsub nth_items\n{\n  my ($list, $n) = @_;\n", "entry_point": "nth_items", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nmy $arg01 = 2;\nmy $x0 = nth_items($arg00, $arg01);\nmy $v0 = [1, 3, 5, 7, 9];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [10, 15, 19, 17, 16, 18];\nmy $arg11 = 3;\nmy $x1 = nth_items($arg10, $arg11);\nmy $v1 = [10, 17];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [14, 16, 19, 15, 17];\nmy $arg21 = 4;\nmy $x2 = nth_items($arg20, $arg21);\nmy $v2 = [14, 17];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to select the nth items of a list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/537", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the first repeated word in a given string.\n#\n# >>> first_repeated_word(\"ab ca bc ab\")\n# \"ab\"\n# >>> first_repeated_word(\"ab ca bc\")\n# \"None\"\n# >>> first_repeated_word(\"ab ca bc ca ab bc\")\n# \"ca\"\nsub first_repeated_word\n{\n  my ($str1) = @_;\n", "entry_point": "first_repeated_word", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"ab ca bc ab\";\nmy $x0 = first_repeated_word($arg00);\nmy $v0 = \"ab\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"ab ca bc\";\nmy $x1 = first_repeated_word($arg10);\nmy $v1 = \"None\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"ab ca bc ca ab bc\";\nmy $x2 = first_repeated_word($arg20);\nmy $v2 = \"ca\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the first repeated word in a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/538", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to convert a given string list to a tuple.\n#\n# >>> string_list_to_tuple(\"python 3.0\")\n# [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"]\n# >>> string_list_to_tuple(\"bigdata\")\n# [\"b\", \"i\", \"g\", \"d\", \"a\", \"t\", \"a\"]\n# >>> string_list_to_tuple(\"language\")\n# [\"l\", \"a\", \"n\", \"g\", \"u\", \"a\", \"g\", \"e\"]\nsub string_list_to_tuple\n{\n  my ($str1) = @_;\n", "entry_point": "string_list_to_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python 3.0\";\nmy $x0 = string_list_to_tuple($arg00);\nmy $v0 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"bigdata\";\nmy $x1 = string_list_to_tuple($arg10);\nmy $v1 = [\"b\", \"i\", \"g\", \"d\", \"a\", \"t\", \"a\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"language\";\nmy $x2 = string_list_to_tuple($arg20);\nmy $v2 = [\"l\", \"a\", \"n\", \"g\", \"u\", \"a\", \"g\", \"e\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to convert a given string list to a tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/539", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n#\n# >>> basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# [10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\n# >>> basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70])\n# [1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\n# >>> basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28], [3, 6, 9, 12, 15, 18, 21])\n# [64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]\nsub basesnum_coresspondingnum\n{\n  my ($bases_num, $index) = @_;\n", "entry_point": "basesnum_coresspondingnum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100];\nmy $arg01 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $x0 = basesnum_coresspondingnum($arg00, $arg01);\nmy $v0 = [10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5, 6, 7];\nmy $arg11 = [10, 20, 30, 40, 50, 60, 70];\nmy $x1 = basesnum_coresspondingnum($arg10, $arg11);\nmy $v1 = [1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [4, 8, 12, 16, 20, 24, 28];\nmy $arg21 = [3, 6, 9, 12, 15, 18, 21];\nmy $x2 = basesnum_coresspondingnum($arg20, $arg21);\nmy $v2 = [64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/540", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the difference between highest and least frequencies in a given array.\n#\n# >>> find_diff([1, 1, 2, 2, 7, 8, 4, 5, 1, 4], 10)\n# 2\n# >>> find_diff([1, 7, 9, 2, 3, 3, 1, 3, 3], 9)\n# 3\n# >>> find_diff([1, 2, 1, 2], 4)\n# 0\nsub find_diff\n{\n  my ($arr, $n) = @_;\n", "entry_point": "find_diff", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 1, 2, 2, 7, 8, 4, 5, 1, 4];\nmy $arg01 = 10;\nmy $x0 = find_diff($arg00, $arg01);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 7, 9, 2, 3, 3, 1, 3, 3];\nmy $arg11 = 9;\nmy $x1 = find_diff($arg10, $arg11);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 1, 2];\nmy $arg21 = 4;\nmy $x2 = find_diff($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the difference between highest and least frequencies in a given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/541", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find if the given number is abundant or not.\n#\n# >>> check_abundant(12)\n# 1\n# >>> check_abundant(15)\n# 0\n# >>> check_abundant(18)\n# 1\nsub check_abundant\n{\n  my ($n) = @_;\n", "entry_point": "check_abundant", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 12;\nmy $x0 = check_abundant($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 15;\nmy $x1 = check_abundant($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 18;\nmy $x2 = check_abundant($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find if the given number is abundant or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/542", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n#\n# >>> fill_spaces(\"Boult Curve Wireless Neckband\")\n# \"Boult:Curve:Wireless:Neckband\"\n# >>> fill_spaces(\"Stereo Sound Sweatproof\")\n# \"Stereo:Sound:Sweatproof\"\n# >>> fill_spaces(\"Probass Curve Audio\")\n# \"Probass:Curve:Audio\"\nsub fill_spaces\n{\n  my ($text) = @_;\n", "entry_point": "fill_spaces", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Boult Curve Wireless Neckband\";\nmy $x0 = fill_spaces($arg00);\nmy $v0 = \"Boult:Curve:Wireless:Neckband\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Stereo Sound Sweatproof\";\nmy $x1 = fill_spaces($arg10);\nmy $v1 = \"Stereo:Sound:Sweatproof\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Probass Curve Audio\";\nmy $x2 = fill_spaces($arg20);\nmy $v2 = \"Probass:Curve:Audio\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/543", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to add two numbers and print number of digits of sum.\n#\n# >>> count_digits(9875, 10)\n# 4\n# >>> count_digits(98759853034, 100)\n# 11\n# >>> count_digits(1234567, 500)\n# 7\nsub count_digits\n{\n  my ($num1, $num2) = @_;\n", "entry_point": "count_digits", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 9875;\nmy $arg01 = 10;\nmy $x0 = count_digits($arg00, $arg01);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 98759853034;\nmy $arg11 = 100;\nmy $x1 = count_digits($arg10, $arg11);\nmy $v1 = 11;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1234567;\nmy $arg21 = 500;\nmy $x2 = count_digits($arg20, $arg21);\nmy $v2 = 7;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to add two numbers and print number of digits of sum.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/544", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to flatten the tuple list to a string.\n#\n# >>> flatten_tuple([[\"1\", \"4\", \"6\"], [\"5\", \"8\"], [\"2\", \"9\"], [\"1\", \"10\"]])\n# \"1 4 6 5 8 2 9 1 10\"\n# >>> flatten_tuple([[\"2\", \"3\", \"4\"], [\"6\", \"9\"], [\"3\", \"2\"], [\"2\", \"11\"]])\n# \"2 3 4 6 9 3 2 2 11\"\n# >>> flatten_tuple([[\"14\", \"21\", \"9\"], [\"24\", \"19\"], [\"12\", \"29\"], [\"23\", \"17\"]])\n# \"14 21 9 24 19 12 29 23 17\"\nsub flatten_tuple\n{\n  my ($test_list) = @_;\n", "entry_point": "flatten_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"1\", \"4\", \"6\"], [\"5\", \"8\"], [\"2\", \"9\"], [\"1\", \"10\"]];\nmy $x0 = flatten_tuple($arg00);\nmy $v0 = \"1 4 6 5 8 2 9 1 10\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"2\", \"3\", \"4\"], [\"6\", \"9\"], [\"3\", \"2\"], [\"2\", \"11\"]];\nmy $x1 = flatten_tuple($arg10);\nmy $v1 = \"2 3 4 6 9 3 2 2 11\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"14\", \"21\", \"9\"], [\"24\", \"19\"], [\"12\", \"29\"], [\"23\", \"17\"]];\nmy $x2 = flatten_tuple($arg20);\nmy $v2 = \"14 21 9 24 19 12 29 23 17\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to flatten the tuple list to a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/545", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to toggle only first and last bits of a given number.\n#\n# >>> toggle_f_and_l_bits(10)\n# 3\n# >>> toggle_f_and_l_bits(15)\n# 6\n# >>> toggle_f_and_l_bits(20)\n# 5\nsub toggle_f_and_l_bits\n{\n  my ($n) = @_;\n", "entry_point": "toggle_f_and_l_bits", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = toggle_f_and_l_bits($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 15;\nmy $x1 = toggle_f_and_l_bits($arg10);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 20;\nmy $x2 = toggle_f_and_l_bits($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to toggle only first and last bits of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/546", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the last occurrence of a character in a string.\n#\n# >>> last_occurence_char(\"hello world\", \"l\")\n# 10\n# >>> last_occurence_char(\"language\", \"g\")\n# 7\n# >>> last_occurence_char(\"little\", \"y\")\n# \"none\"\nsub last_occurence_char\n{\n  my ($string, $char) = @_;\n", "entry_point": "last_occurence_char", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"hello world\";\nmy $arg01 = \"l\";\nmy $x0 = last_occurence_char($arg00, $arg01);\nmy $v0 = 10;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"language\";\nmy $arg11 = \"g\";\nmy $x1 = last_occurence_char($arg10, $arg11);\nmy $v1 = 7;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"little\";\nmy $arg21 = \"y\";\nmy $x2 = last_occurence_char($arg20, $arg21);\nmy $v2 = \"none\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the last occurrence of a character in a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/547", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of hamming distances of all consecutive numbers from o to n.\n#\n# >>> total_hamming_distance(4)\n# 7\n# >>> total_hamming_distance(2)\n# 3\n# >>> total_hamming_distance(5)\n# 8\nsub total_hamming_distance\n{\n  my ($n) = @_;\n", "entry_point": "total_hamming_distance", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $x0 = total_hamming_distance($arg00);\nmy $v0 = 7;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = total_hamming_distance($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $x2 = total_hamming_distance($arg20);\nmy $v2 = 8;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of hamming distances of all consecutive numbers from o to n.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/548", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the length of the longest increasing subsequence of the given sequence.\n#\n# >>> longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60])\n# 5\n# >>> longest_increasing_subsequence([3, 10, 2, 1, 20])\n# 3\n# >>> longest_increasing_subsequence([50, 3, 10, 7, 40, 80])\n# 4\nsub longest_increasing_subsequence\n{\n  my ($arr) = @_;\n", "entry_point": "longest_increasing_subsequence", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 22, 9, 33, 21, 50, 41, 60];\nmy $x0 = longest_increasing_subsequence($arg00);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [3, 10, 2, 1, 20];\nmy $x1 = longest_increasing_subsequence($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [50, 3, 10, 7, 40, 80];\nmy $x2 = longest_increasing_subsequence($arg20);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the length of the longest increasing subsequence of the given sequence.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/549", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of fifth power of first n odd natural numbers.\n#\n# >>> odd_num_sum(1)\n# 1\n# >>> odd_num_sum(2)\n# 244\n# >>> odd_num_sum(3)\n# 3369\nsub odd_num_sum\n{\n  my ($n) = @_;\n", "entry_point": "odd_num_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $x0 = odd_num_sum($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = odd_num_sum($arg10);\nmy $v1 = 244;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $x2 = odd_num_sum($arg20);\nmy $v2 = 3369;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of fifth power of first n odd natural numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/550", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the maximum element in a sorted and rotated array.\n#\n# >>> find_max([2, 3, 5, 6, 9], 0, 4)\n# 9\n# >>> find_max([3, 4, 5, 2, 1], 0, 4)\n# 5\n# >>> find_max([1, 2, 3], 0, 2)\n# 3\nsub find_max\n{\n  my ($arr, $low, $high) = @_;\n", "entry_point": "find_max", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 3, 5, 6, 9];\nmy $arg01 = 0;\nmy $arg02 = 4;\nmy $x0 = find_max($arg00, $arg01, $arg02);\nmy $v0 = 9;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [3, 4, 5, 2, 1];\nmy $arg11 = 0;\nmy $arg12 = 4;\nmy $x1 = find_max($arg10, $arg11, $arg12);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3];\nmy $arg21 = 0;\nmy $arg22 = 2;\nmy $x2 = find_max($arg20, $arg21, $arg22);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the maximum element in a sorted and rotated array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/551", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract a specified column from a given nested list.\n#\n# >>> extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)\n# [1, 2, 1]\n# >>> extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2)\n# [3, -5, 1]\n# >>> extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0)\n# [1, 5, 1, 13, 5, 9]\nsub extract_column\n{\n  my ($list1, $n) = @_;\n", "entry_point": "extract_column", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]];\nmy $arg01 = 0;\nmy $x0 = extract_column($arg00, $arg01);\nmy $v0 = [1, 2, 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]];\nmy $arg11 = 2;\nmy $x1 = extract_column($arg10, $arg11);\nmy $v1 = [3, -5, 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]];\nmy $arg21 = 0;\nmy $x2 = extract_column($arg20, $arg21);\nmy $v2 = [1, 5, 1, 13, 5, 9];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract a specified column from a given nested list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/552", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether a given sequence is linear or not.\n#\n# >>> seq_linear([0, 2, 4, 6, 8, 10])\n# \"Linear Sequence\"\n# >>> seq_linear([1, 2, 3])\n# \"Linear Sequence\"\n# >>> seq_linear([1, 5, 2])\n# \"Non Linear Sequence\"\nsub seq_linear\n{\n  my ($seq_nums) = @_;\n", "entry_point": "seq_linear", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [0, 2, 4, 6, 8, 10];\nmy $x0 = seq_linear($arg00);\nmy $v0 = \"Linear Sequence\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3];\nmy $x1 = seq_linear($arg10);\nmy $v1 = \"Linear Sequence\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 5, 2];\nmy $x2 = seq_linear($arg20);\nmy $v2 = \"Non Linear Sequence\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether a given sequence is linear or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/553", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert the given tuple to a floating-point number.\n#\n# >>> tuple_to_float([4, 56])\n# 4.56\n# >>> tuple_to_float([7, 256])\n# 7.256\n# >>> tuple_to_float([8, 123])\n# 8.123\nsub tuple_to_float\n{\n  my ($test_tup) = @_;\n", "entry_point": "tuple_to_float", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [4, 56];\nmy $x0 = tuple_to_float($arg00);\nmy $v0 = 4.56;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [7, 256];\nmy $x1 = tuple_to_float($arg10);\nmy $v1 = 7.256;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [8, 123];\nmy $x2 = tuple_to_float($arg20);\nmy $v2 = 8.123;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert the given tuple to a floating-point number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/554", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find odd numbers from a mixed list.\n#\n# >>> split([1, 2, 3, 4, 5, 6])\n# [1, 3, 5]\n# >>> split([10, 11, 12, 13])\n# [11, 13]\n# >>> split([7, 8, 9, 1])\n# [7, 9, 1]\nsub split\n{\n  my ($list) = @_;\n", "entry_point": "split", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6];\nmy $x0 = split($arg00);\nmy $v0 = [1, 3, 5];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [10, 11, 12, 13];\nmy $x1 = split($arg10);\nmy $v1 = [11, 13];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [7, 8, 9, 1];\nmy $x2 = split($arg20);\nmy $v2 = [7, 9, 1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find odd numbers from a mixed list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/555", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n#\n# >>> difference(3)\n# 30\n# >>> difference(5)\n# 210\n# >>> difference(2)\n# 6\nsub difference\n{\n  my ($n) = @_;\n", "entry_point": "difference", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $x0 = difference($arg00);\nmy $v0 = 30;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $x1 = difference($arg10);\nmy $v1 = 210;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $x2 = difference($arg20);\nmy $v2 = 6;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/556", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the pairs with xor as an odd number.\n#\n# >>> find_odd_pair([5, 4, 7, 2, 1], 5)\n# 6\n# >>> find_odd_pair([7, 2, 8, 1, 0, 5, 11], 7)\n# 12\n# >>> find_odd_pair([1, 2, 3], 3)\n# 2\nsub find_odd_pair\n{\n  my ($a, $n) = @_;\n", "entry_point": "find_odd_pair", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 4, 7, 2, 1];\nmy $arg01 = 5;\nmy $x0 = find_odd_pair($arg00, $arg01);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [7, 2, 8, 1, 0, 5, 11];\nmy $arg11 = 7;\nmy $x1 = find_odd_pair($arg10, $arg11);\nmy $v1 = 12;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3];\nmy $arg21 = 3;\nmy $x2 = find_odd_pair($arg20, $arg21);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the pairs with xor as an odd number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/557", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to toggle characters case in a string.\n#\n# >>> toggle_string(\"Python\")\n# \"pYTHON\"\n# >>> toggle_string(\"Pangram\")\n# \"pANGRAM\"\n# >>> toggle_string(\"LIttLE\")\n# \"liTTle\"\nsub toggle_string\n{\n  my ($string) = @_;\n", "entry_point": "toggle_string", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Python\";\nmy $x0 = toggle_string($arg00);\nmy $v0 = \"pYTHON\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Pangram\";\nmy $x1 = toggle_string($arg10);\nmy $v1 = \"pANGRAM\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"LIttLE\";\nmy $x2 = toggle_string($arg20);\nmy $v2 = \"liTTle\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to toggle characters case in a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/558", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the digit distance between two integers.\n#\n# >>> digit_distance_nums(1, 2)\n# 1\n# >>> digit_distance_nums(23, 56)\n# 6\n# >>> digit_distance_nums(123, 256)\n# 7\nsub digit_distance_nums\n{\n  my ($n1, $n2) = @_;\n", "entry_point": "digit_distance_nums", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 2;\nmy $x0 = digit_distance_nums($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 23;\nmy $arg11 = 56;\nmy $x1 = digit_distance_nums($arg10, $arg11);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 123;\nmy $arg21 = 256;\nmy $x2 = digit_distance_nums($arg20, $arg21);\nmy $v2 = 7;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the digit distance between two integers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/559", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the largest sum of contiguous subarray in the given array.\n#\n# >>> max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n# 7\n# >>> max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8)\n# 8\n# >>> max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8)\n# 10\nsub max_sub_array_sum\n{\n  my ($a, $size) = @_;\n", "entry_point": "max_sub_array_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [-2, -3, 4, -1, -2, 1, 5, -3];\nmy $arg01 = 8;\nmy $x0 = max_sub_array_sum($arg00, $arg01);\nmy $v0 = 7;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [-3, -4, 5, -2, -3, 2, 6, -4];\nmy $arg11 = 8;\nmy $x1 = max_sub_array_sum($arg10, $arg11);\nmy $v1 = 8;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [-4, -5, 6, -3, -4, 3, 7, -5];\nmy $arg21 = 8;\nmy $x2 = max_sub_array_sum($arg20, $arg21);\nmy $v2 = 10;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the largest sum of contiguous subarray in the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/560", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the union of elements of the given tuples.\n#\n# >>> union_elements([3, 4, 5, 6], [5, 7, 4, 10])\n# [3, 4, 5, 6, 7, 10]\n# >>> union_elements([1, 2, 3, 4], [3, 4, 5, 6])\n# [1, 2, 3, 4, 5, 6]\n# >>> union_elements([11, 12, 13, 14], [13, 15, 16, 17])\n# [11, 12, 13, 14, 15, 16, 17]\nsub union_elements\n{\n  my ($test_tup1, $test_tup2) = @_;\n", "entry_point": "union_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 4, 5, 6];\nmy $arg01 = [5, 7, 4, 10];\nmy $x0 = union_elements($arg00, $arg01);\nmy $v0 = [3, 4, 5, 6, 7, 10];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4];\nmy $arg11 = [3, 4, 5, 6];\nmy $x1 = union_elements($arg10, $arg11);\nmy $v1 = [1, 2, 3, 4, 5, 6];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [11, 12, 13, 14];\nmy $arg21 = [13, 15, 16, 17];\nmy $x2 = union_elements($arg20, $arg21);\nmy $v2 = [11, 12, 13, 14, 15, 16, 17];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the union of elements of the given tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/561", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n#\n# >>> assign_elements([[5, 3], [7, 5], [2, 7], [3, 8], [8, 4]])\n# {3 => [8], 5 => [3], 7 => [5], 2 => [7], 8 => [4], 4 => []}\n# >>> assign_elements([[6, 4], [9, 4], [3, 8], [4, 9], [9, 5]])\n# {4 => [9], 6 => [4], 9 => [4, 5], 8 => [], 3 => [8], 5 => []}\n# >>> assign_elements([[6, 2], [6, 8], [4, 9], [4, 9], [3, 7]])\n# {2 => [], 6 => [2, 8], 8 => [], 9 => [], 4 => [9, 9], 7 => [], 3 => [7]}\nsub assign_elements\n{\n  my ($test_list) = @_;\n", "entry_point": "assign_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[5, 3], [7, 5], [2, 7], [3, 8], [8, 4]];\nmy $x0 = assign_elements($arg00);\nmy $v0 = {3 => [8], 5 => [3], 7 => [5], 2 => [7], 8 => [4], 4 => []};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[6, 4], [9, 4], [3, 8], [4, 9], [9, 5]];\nmy $x1 = assign_elements($arg10);\nmy $v1 = {4 => [9], 6 => [4], 9 => [4, 5], 8 => [], 3 => [8], 5 => []};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[6, 2], [6, 8], [4, 9], [4, 9], [3, 7]];\nmy $x2 = assign_elements($arg20);\nmy $v2 = {2 => [], 6 => [2, 8], 8 => [], 9 => [], 4 => [9, 9], 7 => [], 3 => [7]};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/562", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the maximum length of sublist.\n#\n# >>> find_max_length([[1], [1, 4], [5, 6, 7, 8]])\n# 4\n# >>> find_max_length([[0, 1], [2, 2], [3, 2, 1]])\n# 3\n# >>> find_max_length([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]])\n# 5\nsub find_max_length\n{\n  my ($lst) = @_;\n", "entry_point": "find_max_length", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1], [1, 4], [5, 6, 7, 8]];\nmy $x0 = find_max_length($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[0, 1], [2, 2], [3, 2, 1]];\nmy $x1 = find_max_length($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]];\nmy $x2 = find_max_length($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the maximum length of sublist.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/563", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract values between quotation marks of a string.\n#\n# >>> extract_values(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\")\n# [\"Python\", \"PHP\", \"Java\"]\n# >>> extract_values(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\")\n# [\"python\", \"program\", \"language\"]\n# >>> extract_values(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\")\n# [\"red\", \"blue\", \"green\", \"yellow\"]\nsub extract_values\n{\n  my ($text) = @_;\n", "entry_point": "extract_values", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\";\nmy $x0 = extract_values($arg00);\nmy $v0 = [\"Python\", \"PHP\", \"Java\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"\\\"python\\\",\\\"program\\\",\\\"language\\\"\";\nmy $x1 = extract_values($arg10);\nmy $v1 = [\"python\", \"program\", \"language\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\";\nmy $x2 = extract_values($arg20);\nmy $v2 = [\"red\", \"blue\", \"green\", \"yellow\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract values between quotation marks of a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/564", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count unequal element pairs from the given array.\n#\n# >>> count_pairs([1, 2, 1], 3)\n# 2\n# >>> count_pairs([1, 1, 1, 1], 4)\n# 0\n# >>> count_pairs([1, 2, 3, 4, 5], 5)\n# 10\nsub count_pairs\n{\n  my ($arr, $n) = @_;\n", "entry_point": "count_pairs", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 1];\nmy $arg01 = 3;\nmy $x0 = count_pairs($arg00, $arg01);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 1, 1, 1];\nmy $arg11 = 4;\nmy $x1 = count_pairs($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 5];\nmy $arg21 = 5;\nmy $x2 = count_pairs($arg20, $arg21);\nmy $v2 = 10;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count unequal element pairs from the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/565", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to split a string into characters.\n#\n# >>> split(\"python\")\n# [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]\n# >>> split(\"Name\")\n# [\"N\", \"a\", \"m\", \"e\"]\n# >>> split(\"program\")\n# [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]\nsub split\n{\n  my ($word) = @_;\n", "entry_point": "split", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python\";\nmy $x0 = split($arg00);\nmy $v0 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Name\";\nmy $x1 = split($arg10);\nmy $v1 = [\"N\", \"a\", \"m\", \"e\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"program\";\nmy $x2 = split($arg20);\nmy $v2 = [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to split a string into characters.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/566", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to get the sum of a non-negative integer.\n#\n# >>> sum_digits(345)\n# 12\n# >>> sum_digits(12)\n# 3\n# >>> sum_digits(97)\n# 16\nsub sum_digits\n{\n  my ($n) = @_;\n", "entry_point": "sum_digits", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 345;\nmy $x0 = sum_digits($arg00);\nmy $v0 = 12;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 12;\nmy $x1 = sum_digits($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 97;\nmy $x2 = sum_digits($arg20);\nmy $v2 = 16;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to get the sum of a non-negative integer.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/567", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether a specified list is sorted or not.\n#\n# >>> issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17])\n# 1\n# >>> issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])\n# 0\n# >>> issort_list([1, 2, 4, 6, 8, 10, 15, 14, 20])\n# 0\nsub issort_list\n{\n  my ($list1) = @_;\n", "entry_point": "issort_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 4, 6, 8, 10, 12, 14, 16, 17];\nmy $x0 = issort_list($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 4, 6, 8, 10, 12, 14, 20, 17];\nmy $x1 = issort_list($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 4, 6, 8, 10, 15, 14, 20];\nmy $x2 = issort_list($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether a specified list is sorted or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/568", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to create a list of empty dictionaries.\n#\n# >>> empty_list(5)\n# [{}, {}, {}, {}, {}]\n# >>> empty_list(6)\n# [{}, {}, {}, {}, {}, {}]\n# >>> empty_list(7)\n# [{}, {}, {}, {}, {}, {}, {}]\nsub empty_list\n{\n  my ($length) = @_;\n", "entry_point": "empty_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = empty_list($arg00);\nmy $v0 = [{}, {}, {}, {}, {}];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 6;\nmy $x1 = empty_list($arg10);\nmy $v1 = [{}, {}, {}, {}, {}, {}];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 7;\nmy $x2 = empty_list($arg20);\nmy $v2 = [{}, {}, {}, {}, {}, {}, {}];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to create a list of empty dictionaries.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/569", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort each sublist of strings in a given list of lists.\n#\n# >>> sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n# [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]]\n# >>> sort_sublists([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]])\n# [[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]\n# >>> sort_sublists([[\"a\", \"b\"], [\"d\", \"c\"], [\"g\", \"h\"], [\"f\", \"e\"]])\n# [[\"a\", \"b\"], [\"c\", \"d\"], [\"g\", \"h\"], [\"e\", \"f\"]]\nsub sort_sublists\n{\n  my ($list1) = @_;\n", "entry_point": "sort_sublists", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]];\nmy $x0 = sort_sublists($arg00);\nmy $v0 = [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]];\nmy $x1 = sort_sublists($arg10);\nmy $v1 = [[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"a\", \"b\"], [\"d\", \"c\"], [\"g\", \"h\"], [\"f\", \"e\"]];\nmy $x2 = sort_sublists($arg20);\nmy $v2 = [[\"a\", \"b\"], [\"c\", \"d\"], [\"g\", \"h\"], [\"e\", \"f\"]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort each sublist of strings in a given list of lists.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/570", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove words from a given list of strings containing a character or string.\n#\n# >>> remove_words([\"Red color\", \"Orange#\", \"Green\", \"Orange @\", \"White\"], [\"#\", \"color\", \"@\"])\n# [\"Red\", \"\", \"Green\", \"Orange\", \"White\"]\n# >>> remove_words([\"Red &\", \"Orange+\", \"Green\", \"Orange @\", \"White\"], [\"&\", \"+\", \"@\"])\n# [\"Red\", \"\", \"Green\", \"Orange\", \"White\"]\n# >>> remove_words([\"Red &\", \"Orange+\", \"Green\", \"Orange @\", \"White\"], [\"@\"])\n# [\"Red &\", \"Orange+\", \"Green\", \"Orange\", \"White\"]\nsub remove_words\n{\n  my ($list1, $charlist) = @_;\n", "entry_point": "remove_words", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"Red color\", \"Orange#\", \"Green\", \"Orange @\", \"White\"];\nmy $arg01 = [\"#\", \"color\", \"@\"];\nmy $x0 = remove_words($arg00, $arg01);\nmy $v0 = [\"Red\", \"\", \"Green\", \"Orange\", \"White\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"Red &\", \"Orange+\", \"Green\", \"Orange @\", \"White\"];\nmy $arg11 = [\"&\", \"+\", \"@\"];\nmy $x1 = remove_words($arg10, $arg11);\nmy $v1 = [\"Red\", \"\", \"Green\", \"Orange\", \"White\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"Red &\", \"Orange+\", \"Green\", \"Orange @\", \"White\"];\nmy $arg21 = [\"@\"];\nmy $x2 = remove_words($arg20, $arg21);\nmy $v2 = [\"Red &\", \"Orange+\", \"Green\", \"Orange\", \"White\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove words from a given list of strings containing a character or string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/571", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n#\n# >>> max_sum_pair_diff_lessthan_k([3, 5, 10, 15, 17, 12, 9], 7, 4)\n# 62\n# >>> max_sum_pair_diff_lessthan_k([5, 15, 10, 300], 4, 12)\n# 25\n# >>> max_sum_pair_diff_lessthan_k([1, 2, 3, 4, 5, 6], 6, 6)\n# 21\nsub max_sum_pair_diff_lessthan_k\n{\n  my ($arr, $n, $k) = @_;\n", "entry_point": "max_sum_pair_diff_lessthan_k", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 5, 10, 15, 17, 12, 9];\nmy $arg01 = 7;\nmy $arg02 = 4;\nmy $x0 = max_sum_pair_diff_lessthan_k($arg00, $arg01, $arg02);\nmy $v0 = 62;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 15, 10, 300];\nmy $arg11 = 4;\nmy $arg12 = 12;\nmy $x1 = max_sum_pair_diff_lessthan_k($arg10, $arg11, $arg12);\nmy $v1 = 25;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 5, 6];\nmy $arg21 = 6;\nmy $arg22 = 6;\nmy $x2 = max_sum_pair_diff_lessthan_k($arg20, $arg21, $arg22);\nmy $v2 = 21;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/572", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to remove two duplicate numbers from a given number of lists.\n#\n# >>> two_unique_nums([1, 2, 3, 2, 3, 4, 5])\n# [1, 4, 5]\n# >>> two_unique_nums([1, 2, 3, 2, 4, 5])\n# [1, 3, 4, 5]\n# >>> two_unique_nums([1, 2, 3, 4, 5])\n# [1, 2, 3, 4, 5]\nsub two_unique_nums\n{\n  my ($nums) = @_;\n", "entry_point": "two_unique_nums", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 2, 3, 4, 5];\nmy $x0 = two_unique_nums($arg00);\nmy $v0 = [1, 4, 5];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 2, 4, 5];\nmy $x1 = two_unique_nums($arg10);\nmy $v1 = [1, 3, 4, 5];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 5];\nmy $x2 = two_unique_nums($arg20);\nmy $v2 = [1, 2, 3, 4, 5];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to remove two duplicate numbers from a given number of lists.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/573", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to calculate the product of the unique numbers of a given list.\n#\n# >>> unique_product([10, 20, 30, 40, 20, 50, 60, 40])\n# 720000000\n# >>> unique_product([1, 2, 3, 1])\n# 6\n# >>> unique_product([7, 8, 9, 0, 1, 1])\n# 0\nsub unique_product\n{\n  my ($list_data) = @_;\n", "entry_point": "unique_product", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 20, 30, 40, 20, 50, 60, 40];\nmy $x0 = unique_product($arg00);\nmy $v0 = 720000000;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 1];\nmy $x1 = unique_product($arg10);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [7, 8, 9, 0, 1, 1];\nmy $x2 = unique_product($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to calculate the product of the unique numbers of a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/574", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the surface area of a cylinder.\n#\n# >>> surfacearea_cylinder(10, 5)\n# 942.45\n# >>> surfacearea_cylinder(4, 5)\n# 226.18800000000002\n# >>> surfacearea_cylinder(4, 10)\n# 351.848\nsub surfacearea_cylinder\n{\n  my ($r, $h) = @_;\n", "entry_point": "surfacearea_cylinder", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 5;\nmy $x0 = surfacearea_cylinder($arg00, $arg01);\nmy $v0 = 942.45;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $arg11 = 5;\nmy $x1 = surfacearea_cylinder($arg10, $arg11);\nmy $v1 = 226.18800000000002;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $arg21 = 10;\nmy $x2 = surfacearea_cylinder($arg20, $arg21);\nmy $v2 = 351.848;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the surface area of a cylinder.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/575", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find nth number in a sequence which is not a multiple of a given number.\n#\n# >>> count_no(2, 3, 1, 10)\n# 5\n# >>> count_no(3, 6, 4, 20)\n# 11\n# >>> count_no(5, 10, 4, 20)\n# 16\nsub count_no\n{\n  my ($a, $n, $l, $r) = @_;\n", "entry_point": "count_no", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $arg01 = 3;\nmy $arg02 = 1;\nmy $arg03 = 10;\nmy $x0 = count_no($arg00, $arg01, $arg02, $arg03);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $arg11 = 6;\nmy $arg12 = 4;\nmy $arg13 = 20;\nmy $x1 = count_no($arg10, $arg11, $arg12, $arg13);\nmy $v1 = 11;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $arg21 = 10;\nmy $arg22 = 4;\nmy $arg23 = 20;\nmy $x2 = count_no($arg20, $arg21, $arg22, $arg23);\nmy $v2 = 16;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find nth number in a sequence which is not a multiple of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/576", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether an array is subarray of another or not.\n#\n# >>> is_sub_array([1, 4, 3, 5], [1, 2], 4, 2)\n# 0\n# >>> is_sub_array([1, 2, 1], [1, 2, 1], 3, 3)\n# 1\n# >>> is_sub_array([1, 0, 2, 2], [2, 2, 0], 4, 3)\n# 0\nsub is_sub_array\n{\n  my ($a, $b, $n, $m) = @_;\n", "entry_point": "is_sub_array", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 4, 3, 5];\nmy $arg01 = [1, 2];\nmy $arg02 = 4;\nmy $arg03 = 2;\nmy $x0 = is_sub_array($arg00, $arg01, $arg02, $arg03);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 1];\nmy $arg11 = [1, 2, 1];\nmy $arg12 = 3;\nmy $arg13 = 3;\nmy $x1 = is_sub_array($arg10, $arg11, $arg12, $arg13);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 0, 2, 2];\nmy $arg21 = [2, 2, 0];\nmy $arg22 = 4;\nmy $arg23 = 3;\nmy $x2 = is_sub_array($arg20, $arg21, $arg22, $arg23);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether an array is subarray of another or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/577", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the last digit in factorial of a given number.\n#\n# >>> last_digit_factorial(4)\n# 4\n# >>> last_digit_factorial(21)\n# 0\n# >>> last_digit_factorial(30)\n# 0\nsub last_digit_factorial\n{\n  my ($n) = @_;\n", "entry_point": "last_digit_factorial", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $x0 = last_digit_factorial($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 21;\nmy $x1 = last_digit_factorial($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 30;\nmy $x2 = last_digit_factorial($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the last digit in factorial of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/578", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to interleave lists of the same length.\n#\n# >>> interleave_lists([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700])\n# [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n# >>> interleave_lists([10, 20], [15, 2], [5, 10])\n# [10, 15, 5, 20, 2, 10]\n# >>> interleave_lists([11, 44], [10, 15], [20, 5])\n# [11, 10, 20, 44, 15, 5]\nsub interleave_lists\n{\n  my ($list1, $list2, $list3) = @_;\n", "entry_point": "interleave_lists", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6, 7];\nmy $arg01 = [10, 20, 30, 40, 50, 60, 70];\nmy $arg02 = [100, 200, 300, 400, 500, 600, 700];\nmy $x0 = interleave_lists($arg00, $arg01, $arg02);\nmy $v0 = [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [10, 20];\nmy $arg11 = [15, 2];\nmy $arg12 = [5, 10];\nmy $x1 = interleave_lists($arg10, $arg11, $arg12);\nmy $v1 = [10, 15, 5, 20, 2, 10];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [11, 44];\nmy $arg21 = [10, 15];\nmy $arg22 = [20, 5];\nmy $x2 = interleave_lists($arg20, $arg21, $arg22);\nmy $v2 = [11, 10, 20, 44, 15, 5];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to interleave lists of the same length.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/579", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the dissimilar elements in the given two tuples.\n#\n# >>> find_dissimilar([3, 4, 5, 6], [5, 7, 4, 10])\n# [3, 6, 7, 10]\n# >>> find_dissimilar([1, 2, 3, 4], [7, 2, 3, 9])\n# [1, 4, 7, 9]\n# >>> find_dissimilar([21, 11, 25, 26], [26, 34, 21, 36])\n# [34, 36, 11, 25]\nsub find_dissimilar\n{\n  my ($test_tup1, $test_tup2) = @_;\n", "entry_point": "find_dissimilar", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 4, 5, 6];\nmy $arg01 = [5, 7, 4, 10];\nmy $x0 = find_dissimilar($arg00, $arg01);\nmy $v0 = [3, 6, 7, 10];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4];\nmy $arg11 = [7, 2, 3, 9];\nmy $x1 = find_dissimilar($arg10, $arg11);\nmy $v1 = [1, 4, 7, 9];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [21, 11, 25, 26];\nmy $arg21 = [26, 34, 21, 36];\nmy $x2 = find_dissimilar($arg20, $arg21);\nmy $v2 = [34, 36, 11, 25];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the dissimilar elements in the given two tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/580", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract the even elements in the nested mixed tuple.\n#\n# >>> extract_even([4, 5, [7, 6, [2, 4]], 6, 8])\n# [4, [6, [2, 4]], 6, 8]\n# >>> extract_even([5, 6, [8, 7, [4, 8]], 7, 9])\n# [6, [8, [4, 8]]]\n# >>> extract_even([5, 6, [9, 8, [4, 6]], 8, 10])\n# [6, [8, [4, 6]], 8, 10]\nsub extract_even\n{\n  my ($test_tuple) = @_;\n", "entry_point": "extract_even", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [4, 5, [7, 6, [2, 4]], 6, 8];\nmy $x0 = extract_even($arg00);\nmy $v0 = [4, [6, [2, 4]], 6, 8];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 6, [8, 7, [4, 8]], 7, 9];\nmy $x1 = extract_even($arg10);\nmy $v1 = [6, [8, [4, 8]]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [5, 6, [9, 8, [4, 6]], 8, 10];\nmy $x2 = extract_even($arg20);\nmy $v2 = [6, [8, [4, 6]], 8, 10];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract the even elements in the nested mixed tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/581", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the surface area of the square pyramid.\n#\n# >>> surface_area(3, 4)\n# 33\n# >>> surface_area(4, 5)\n# 56\n# >>> surface_area(1, 2)\n# 5\nsub surface_area\n{\n  my ($b, $s) = @_;\n", "entry_point": "surface_area", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 4;\nmy $x0 = surface_area($arg00, $arg01);\nmy $v0 = 33;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $arg11 = 5;\nmy $x1 = surface_area($arg10, $arg11);\nmy $v1 = 56;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 2;\nmy $x2 = surface_area($arg20, $arg21);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the surface area of the square pyramid.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/582", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if a dictionary is empty or not.\n#\n# >>> my_dict({10 => 1})\n# 0\n# >>> my_dict({11 => 1})\n# 0\n# >>> my_dict({})\n# 1\nsub my_dict\n{\n  my ($dict1) = @_;\n", "entry_point": "my_dict", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {10 => 1};\nmy $x0 = my_dict($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {11 => 1};\nmy $x1 = my_dict($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {};\nmy $x2 = my_dict($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if a dictionary is empty or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/583", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function for nth catalan number.\n#\n# >>> catalan_number(10)\n# 16796\n# >>> catalan_number(9)\n# 4862\n# >>> catalan_number(7)\n# 429\nsub catalan_number\n{\n  my ($num) = @_;\n", "entry_point": "catalan_number", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = catalan_number($arg00);\nmy $v0 = 16796;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 9;\nmy $x1 = catalan_number($arg10);\nmy $v1 = 4862;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 7;\nmy $x2 = catalan_number($arg20);\nmy $v2 = 429;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function for nth catalan number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/584", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find all adverbs and their positions in a given sentence by using regex.\n#\n# >>> find_adverbs(\"Clearly, he has no excuse for such behavior.\")\n# \"0-7: Clearly\"\n# >>> find_adverbs(\"Please handle the situation carefuly\")\n# \"28-36: carefuly\"\n# >>> find_adverbs(\"Complete the task quickly\")\n# \"18-25: quickly\"\nsub find_adverbs\n{\n  my ($text) = @_;\n", "entry_point": "find_adverbs", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Clearly, he has no excuse for such behavior.\";\nmy $x0 = find_adverbs($arg00);\nmy $v0 = \"0-7: Clearly\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Please handle the situation carefuly\";\nmy $x1 = find_adverbs($arg10);\nmy $v1 = \"28-36: carefuly\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Complete the task quickly\";\nmy $x2 = find_adverbs($arg20);\nmy $v2 = \"18-25: quickly\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find all adverbs and their positions in a given sentence by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/585", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n#\n# >>> expensive_items([{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}], 1)\n# [{\"name\" => \"Item-2\", \"price\" => 555.22}]\n# >>> expensive_items([{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-3\", \"price\" => 45.09}], 2)\n# [{\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-1\", \"price\" => 101.1}]\n# >>> expensive_items([{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-3\", \"price\" => 45.09}, {\"name\" => \"Item-4\", \"price\" => 22.75}], 1)\n# [{\"name\" => \"Item-2\", \"price\" => 555.22}]\nsub expensive_items\n{\n  my ($items, $n) = @_;\n", "entry_point": "expensive_items", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}];\nmy $arg01 = 1;\nmy $x0 = expensive_items($arg00, $arg01);\nmy $v0 = [{\"name\" => \"Item-2\", \"price\" => 555.22}];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-3\", \"price\" => 45.09}];\nmy $arg11 = 2;\nmy $x1 = expensive_items($arg10, $arg11);\nmy $v1 = [{\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-1\", \"price\" => 101.1}];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-3\", \"price\" => 45.09}, {\"name\" => \"Item-4\", \"price\" => 22.75}];\nmy $arg21 = 1;\nmy $x2 = expensive_items($arg20, $arg21);\nmy $v2 = [{\"name\" => \"Item-2\", \"price\" => 555.22}];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/586", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to split the array and add the first part to the end.\n#\n# >>> split_arr([12, 10, 5, 6, 52, 36], 6, 2)\n# [5, 6, 52, 36, 12, 10]\n# >>> split_arr([1, 2, 3, 4], 4, 1)\n# [2, 3, 4, 1]\n# >>> split_arr([0, 1, 2, 3, 4, 5, 6, 7], 8, 3)\n# [3, 4, 5, 6, 7, 0, 1, 2]\nsub split_arr\n{\n  my ($a, $n, $k) = @_;\n", "entry_point": "split_arr", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [12, 10, 5, 6, 52, 36];\nmy $arg01 = 6;\nmy $arg02 = 2;\nmy $x0 = split_arr($arg00, $arg01, $arg02);\nmy $v0 = [5, 6, 52, 36, 12, 10];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4];\nmy $arg11 = 4;\nmy $arg12 = 1;\nmy $x1 = split_arr($arg10, $arg11, $arg12);\nmy $v1 = [2, 3, 4, 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [0, 1, 2, 3, 4, 5, 6, 7];\nmy $arg21 = 8;\nmy $arg22 = 3;\nmy $x2 = split_arr($arg20, $arg21, $arg22);\nmy $v2 = [3, 4, 5, 6, 7, 0, 1, 2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to split the array and add the first part to the end.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/587", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert a list to a tuple.\n#\n# >>> list_tuple([5, 10, 7, 4, 15, 3])\n# [5, 10, 7, 4, 15, 3]\n# >>> list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])\n# [2, 4, 5, 6, 2, 3, 4, 4, 7]\n# >>> list_tuple([58, 44, 56])\n# [58, 44, 56]\nsub list_tuple\n{\n  my ($listx) = @_;\n", "entry_point": "list_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 10, 7, 4, 15, 3];\nmy $x0 = list_tuple($arg00);\nmy $v0 = [5, 10, 7, 4, 15, 3];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 4, 5, 6, 2, 3, 4, 4, 7];\nmy $x1 = list_tuple($arg10);\nmy $v1 = [2, 4, 5, 6, 2, 3, 4, 4, 7];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [58, 44, 56];\nmy $x2 = list_tuple($arg20);\nmy $v2 = [58, 44, 56];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert a list to a tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/588", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the difference between largest and smallest value in a given array.\n#\n# >>> big_diff([1, 2, 3, 4])\n# 3\n# >>> big_diff([4, 5, 12])\n# 8\n# >>> big_diff([9, 2, 3])\n# 7\nsub big_diff\n{\n  my ($nums) = @_;\n", "entry_point": "big_diff", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4];\nmy $x0 = big_diff($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 5, 12];\nmy $x1 = big_diff($arg10);\nmy $v1 = 8;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [9, 2, 3];\nmy $x2 = big_diff($arg20);\nmy $v2 = 7;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the difference between largest and smallest value in a given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/589", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find perfect squares between two given numbers.\n#\n# >>> perfect_squares(1, 30)\n# [1, 4, 9, 16, 25]\n# >>> perfect_squares(50, 100)\n# [64, 81, 100]\n# >>> perfect_squares(100, 200)\n# [100, 121, 144, 169, 196]\nsub perfect_squares\n{\n  my ($a, $b) = @_;\n", "entry_point": "perfect_squares", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 30;\nmy $x0 = perfect_squares($arg00, $arg01);\nmy $v0 = [1, 4, 9, 16, 25];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 50;\nmy $arg11 = 100;\nmy $x1 = perfect_squares($arg10, $arg11);\nmy $v1 = [64, 81, 100];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 100;\nmy $arg21 = 200;\nmy $x2 = perfect_squares($arg20, $arg21);\nmy $v2 = [100, 121, 144, 169, 196];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find perfect squares between two given numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/591", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to interchange the first and last elements in a list.\n#\n# >>> swap_list([12, 35, 9, 56, 24])\n# [24, 35, 9, 56, 12]\n# >>> swap_list([1, 2, 3])\n# [3, 2, 1]\n# >>> swap_list([4, 5, 6])\n# [6, 5, 4]\nsub swap_list\n{\n  my ($newlist) = @_;\n", "entry_point": "swap_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [12, 35, 9, 56, 24];\nmy $x0 = swap_list($arg00);\nmy $v0 = [24, 35, 9, 56, 12];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3];\nmy $x1 = swap_list($arg10);\nmy $v1 = [3, 2, 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [4, 5, 6];\nmy $x2 = swap_list($arg20);\nmy $v2 = [6, 5, 4];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to interchange the first and last elements in a list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/592", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find sum of product of binomial co-efficients.\n#\n# >>> sum_of_product(3)\n# 15\n# >>> sum_of_product(4)\n# 56\n# >>> sum_of_product(1)\n# 1\nsub sum_of_product\n{\n  my ($n) = @_;\n", "entry_point": "sum_of_product", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $x0 = sum_of_product($arg00);\nmy $v0 = 15;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = sum_of_product($arg10);\nmy $v1 = 56;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $x2 = sum_of_product($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find sum of product of binomial co-efficients.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/593", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove leading zeroes from an ip address.\n#\n# >>> removezero_ip(\"216.08.094.196\")\n# \"216.8.94.196\"\n# >>> removezero_ip(\"12.01.024\")\n# \"12.1.24\"\n# >>> removezero_ip(\"216.08.094.0196\")\n# \"216.8.94.196\"\nsub removezero_ip\n{\n  my ($ip) = @_;\n", "entry_point": "removezero_ip", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"216.08.094.196\";\nmy $x0 = removezero_ip($arg00);\nmy $v0 = \"216.8.94.196\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"12.01.024\";\nmy $x1 = removezero_ip($arg10);\nmy $v1 = \"12.1.24\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"216.08.094.0196\";\nmy $x2 = removezero_ip($arg20);\nmy $v2 = \"216.8.94.196\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove leading zeroes from an ip address.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/594", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the difference of first even and odd number of a given list.\n#\n# >>> diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8])\n# 3\n# >>> diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# 1\n# >>> diff_even_odd([1, 5, 7, 9, 10])\n# 9\nsub diff_even_odd\n{\n  my ($list1) = @_;\n", "entry_point": "diff_even_odd", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 5, 7, 4, 1, 6, 8];\nmy $x0 = diff_even_odd($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $x1 = diff_even_odd($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 5, 7, 9, 10];\nmy $x2 = diff_even_odd($arg20);\nmy $v2 = 9;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the difference of first even and odd number of a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/595", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count minimum number of swaps required to convert one binary string to another.\n#\n# >>> min_swaps(\"1101\", \"1110\")\n# 1\n# >>> min_swaps(\"111\", \"000\")\n# \"Not Possible\"\n# >>> min_swaps(\"111\", \"110\")\n# \"Not Possible\"\nsub min_swaps\n{\n  my ($str1, $str2) = @_;\n", "entry_point": "min_swaps", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"1101\";\nmy $arg01 = \"1110\";\nmy $x0 = min_swaps($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"111\";\nmy $arg11 = \"000\";\nmy $x1 = min_swaps($arg10, $arg11);\nmy $v1 = \"Not Possible\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"111\";\nmy $arg21 = \"110\";\nmy $x2 = min_swaps($arg20, $arg21);\nmy $v2 = \"Not Possible\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count minimum number of swaps required to convert one binary string to another.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/597", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find kth element from the given two sorted arrays.\n#\n# >>> find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5)\n# 6\n# >>> find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7)\n# 256\n# >>> find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6)\n# 8\nsub find_kth\n{\n  my ($arr1, $arr2, $m, $n, $k) = @_;\n", "entry_point": "find_kth", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 3, 6, 7, 9];\nmy $arg01 = [1, 4, 8, 10];\nmy $arg02 = 5;\nmy $arg03 = 4;\nmy $arg04 = 5;\nmy $x0 = find_kth($arg00, $arg01, $arg02, $arg03, $arg04);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [100, 112, 256, 349, 770];\nmy $arg11 = [72, 86, 113, 119, 265, 445, 892];\nmy $arg12 = 5;\nmy $arg13 = 7;\nmy $arg14 = 7;\nmy $x1 = find_kth($arg10, $arg11, $arg12, $arg13, $arg14);\nmy $v1 = 256;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 4, 7, 8, 10];\nmy $arg21 = [2, 5, 9, 11];\nmy $arg22 = 5;\nmy $arg23 = 4;\nmy $arg24 = 6;\nmy $x2 = find_kth($arg20, $arg21, $arg22, $arg23, $arg24);\nmy $v2 = 8;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find kth element from the given two sorted arrays.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/598", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether the given number is armstrong or not.\n#\n# >>> armstrong_number(153)\n# 1\n# >>> armstrong_number(259)\n# 0\n# >>> armstrong_number(4458)\n# 0\nsub armstrong_number\n{\n  my ($number) = @_;\n", "entry_point": "armstrong_number", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 153;\nmy $x0 = armstrong_number($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 259;\nmy $x1 = armstrong_number($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4458;\nmy $x2 = armstrong_number($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether the given number is armstrong or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/599", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find sum and average of first n natural numbers.\n#\n# >>> sum_average(10)\n# [55, 5.5]\n# >>> sum_average(15)\n# [120, 8.0]\n# >>> sum_average(20)\n# [210, 10.5]\nsub sum_average\n{\n  my ($number) = @_;\n", "entry_point": "sum_average", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = sum_average($arg00);\nmy $v0 = [55, 5.5];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 15;\nmy $x1 = sum_average($arg10);\nmy $v1 = [120, 8.0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 20;\nmy $x2 = sum_average($arg20);\nmy $v2 = [210, 10.5];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find sum and average of first n natural numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/600", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the given number is even or not using bitwise operator.\n#\n# >>> is_even(1)\n# 0\n# >>> is_even(2)\n# 1\n# >>> is_even(3)\n# 0\nsub is_even\n{\n  my ($n) = @_;\n", "entry_point": "is_even", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $x0 = is_even($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = is_even($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $x2 = is_even($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the given number is even or not using bitwise operator.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/602", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the first repeated character in a given string.\n#\n# >>> first_repeated_char(\"abcabc\")\n# \"a\"\n# >>> first_repeated_char(\"abc\")\n# \"None\"\n# >>> first_repeated_char(\"123123\")\n# \"1\"\nsub first_repeated_char\n{\n  my ($str1) = @_;\n", "entry_point": "first_repeated_char", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abcabc\";\nmy $x0 = first_repeated_char($arg00);\nmy $v0 = \"a\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abc\";\nmy $x1 = first_repeated_char($arg10);\nmy $v1 = \"None\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"123123\";\nmy $x2 = first_repeated_char($arg20);\nmy $v2 = \"1\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the first repeated character in a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/603", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to get a lucid number smaller than or equal to n.\n#\n# >>> get_ludic(10)\n# [1, 2, 3, 5, 7]\n# >>> get_ludic(25)\n# [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\n# >>> get_ludic(45)\n# [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\nsub get_ludic\n{\n  my ($n) = @_;\n", "entry_point": "get_ludic", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = get_ludic($arg00);\nmy $v0 = [1, 2, 3, 5, 7];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 25;\nmy $x1 = get_ludic($arg10);\nmy $v1 = [1, 2, 3, 5, 7, 11, 13, 17, 23, 25];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 45;\nmy $x2 = get_ludic($arg20);\nmy $v2 = [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to get a lucid number smaller than or equal to n.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/604", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to reverse words in a given string.\n#\n# >>> reverse_words(\"python program\")\n# \"program python\"\n# >>> reverse_words(\"java language\")\n# \"language java\"\n# >>> reverse_words(\"indian man\")\n# \"man indian\"\nsub reverse_words\n{\n  my ($s) = @_;\n", "entry_point": "reverse_words", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python program\";\nmy $x0 = reverse_words($arg00);\nmy $v0 = \"program python\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"java language\";\nmy $x1 = reverse_words($arg10);\nmy $v1 = \"language java\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"indian man\";\nmy $x2 = reverse_words($arg20);\nmy $v2 = \"man indian\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to reverse words in a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/605", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if the given integer is a prime number.\n#\n# >>> prime_num(13)\n# 1\n# >>> prime_num(7)\n# 1\n# >>> prime_num(-1010)\n# 0\nsub prime_num\n{\n  my ($num) = @_;\n", "entry_point": "prime_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 13;\nmy $x0 = prime_num($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 7;\nmy $x1 = prime_num($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = -1010;\nmy $x2 = prime_num($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if the given integer is a prime number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/606", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert degrees to radians.\n#\n# >>> radian_degree(90)\n# 1.5707963267948966\n# >>> radian_degree(60)\n# 1.0471975511965976\n# >>> radian_degree(120)\n# 2.0943951023931953\nsub radian_degree\n{\n  my ($degree) = @_;\n", "entry_point": "radian_degree", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 90;\nmy $x0 = radian_degree($arg00);\nmy $v0 = 1.5707963267948966;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 60;\nmy $x1 = radian_degree($arg10);\nmy $v1 = 1.0471975511965976;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 120;\nmy $x2 = radian_degree($arg20);\nmy $v2 = 2.0943951023931953;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert degrees to radians.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/607", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n#\n# >>> find_literals(\"The quick brown fox jumps over the lazy dog.\", \"fox\")\n# [\"fox\", 16, 19]\n# >>> find_literals(\"Its been a very crazy procedure right\", \"crazy\")\n# [\"crazy\", 16, 21]\n# >>> find_literals(\"Hardest choices required strongest will\", \"will\")\n# [\"will\", 35, 39]\nsub find_literals\n{\n  my ($text, $pattern) = @_;\n", "entry_point": "find_literals", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"The quick brown fox jumps over the lazy dog.\";\nmy $arg01 = \"fox\";\nmy $x0 = find_literals($arg00, $arg01);\nmy $v0 = [\"fox\", 16, 19];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Its been a very crazy procedure right\";\nmy $arg11 = \"crazy\";\nmy $x1 = find_literals($arg10, $arg11);\nmy $v1 = [\"crazy\", 16, 21];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Hardest choices required strongest will\";\nmy $arg21 = \"will\";\nmy $x2 = find_literals($arg20, $arg21);\nmy $v2 = [\"will\", 35, 39];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/608", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find nth bell number.\n#\n# >>> bell_number(2)\n# 2\n# >>> bell_number(3)\n# 5\n# >>> bell_number(4)\n# 15\nsub bell_number\n{\n  my ($n) = @_;\n", "entry_point": "bell_number", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = bell_number($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $x1 = bell_number($arg10);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $x2 = bell_number($arg20);\nmy $v2 = 15;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find nth bell number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/609", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find minimum possible value for the given periodic function.\n#\n# >>> floor_min(10, 20, 30)\n# 15\n# >>> floor_min(1, 2, 1)\n# 0\n# >>> floor_min(11, 10, 9)\n# 9\nsub floor_min\n{\n  my ($a, $b, $n) = @_;\n", "entry_point": "floor_min", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 20;\nmy $arg02 = 30;\nmy $x0 = floor_min($arg00, $arg01, $arg02);\nmy $v0 = 15;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 2;\nmy $arg12 = 1;\nmy $x1 = floor_min($arg10, $arg11, $arg12);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 11;\nmy $arg21 = 10;\nmy $arg22 = 9;\nmy $x2 = floor_min($arg20, $arg21, $arg22);\nmy $v2 = 9;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find minimum possible value for the given periodic function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/610", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to remove the k'th element from a given list.\n#\n# >>> remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3)\n# [1, 1, 3, 4, 4, 5, 1]\n# >>> remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4)\n# [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n# >>> remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5)\n# [10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]\nsub remove_kth_element\n{\n  my ($list1, $l) = @_;\n", "entry_point": "remove_kth_element", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 1, 2, 3, 4, 4, 5, 1];\nmy $arg01 = 3;\nmy $x0 = remove_kth_element($arg00, $arg01);\nmy $v0 = [1, 1, 3, 4, 4, 5, 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4];\nmy $arg11 = 4;\nmy $x1 = remove_kth_element($arg10, $arg11);\nmy $v1 = [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10];\nmy $arg21 = 5;\nmy $x2 = remove_kth_element($arg20, $arg21);\nmy $v2 = [10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to remove the k'th element from a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/611", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the maximum of nth column from the given tuple list.\n#\n# >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n# 19\n# >>> max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1)\n# 10\n# >>> max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1)\n# 11\nsub max_of_nth\n{\n  my ($test_list, $n) = @_;\n", "entry_point": "max_of_nth", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[5, 6, 7], [1, 3, 5], [8, 9, 19]];\nmy $arg01 = 2;\nmy $x0 = max_of_nth($arg00, $arg01);\nmy $v0 = 19;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[6, 7, 8], [2, 4, 6], [9, 10, 20]];\nmy $arg11 = 1;\nmy $x1 = max_of_nth($arg10, $arg11);\nmy $v1 = 10;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[7, 8, 9], [3, 5, 7], [10, 11, 21]];\nmy $arg21 = 1;\nmy $x2 = max_of_nth($arg20, $arg21);\nmy $v2 = 11;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the maximum of nth column from the given tuple list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/612", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to merge the first and last elements separately in a list of lists.\n#\n# >>> merge([[\"x\", \"y\"], [\"a\", \"b\"], [\"m\", \"n\"]])\n# [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"]]\n# >>> merge([[1, 2], [3, 4], [5, 6], [7, 8]])\n# [[1, 3, 5, 7], [2, 4, 6, 8]]\n# >>> merge([[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"], [\"m\", \"n\", \"o\"]])\n# [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"], [\"z\", \"c\", \"o\"]]\nsub merge\n{\n  my ($lst) = @_;\n", "entry_point": "merge", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"x\", \"y\"], [\"a\", \"b\"], [\"m\", \"n\"]];\nmy $x0 = merge($arg00);\nmy $v0 = [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2], [3, 4], [5, 6], [7, 8]];\nmy $x1 = merge($arg10);\nmy $v1 = [[1, 3, 5, 7], [2, 4, 6, 8]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"], [\"m\", \"n\", \"o\"]];\nmy $x2 = merge($arg20);\nmy $v2 = [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"], [\"z\", \"c\", \"o\"]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to merge the first and last elements separately in a list of lists.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/613", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\n#\n# >>> maximum_value([[\"key1\", [3, 4, 5]], [\"key2\", [1, 4, 2]], [\"key3\", [9, 3]]])\n# [[\"key1\", 5], [\"key2\", 4], [\"key3\", 9]]\n# >>> maximum_value([[\"key1\", [4, 5, 6]], [\"key2\", [2, 5, 3]], [\"key3\", [10, 4]]])\n# [[\"key1\", 6], [\"key2\", 5], [\"key3\", 10]]\n# >>> maximum_value([[\"key1\", [5, 6, 7]], [\"key2\", [3, 6, 4]], [\"key3\", [11, 5]]])\n# [[\"key1\", 7], [\"key2\", 6], [\"key3\", 11]]\nsub maximum_value\n{\n  my ($test_list) = @_;\n", "entry_point": "maximum_value", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"key1\", [3, 4, 5]], [\"key2\", [1, 4, 2]], [\"key3\", [9, 3]]];\nmy $x0 = maximum_value($arg00);\nmy $v0 = [[\"key1\", 5], [\"key2\", 4], [\"key3\", 9]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"key1\", [4, 5, 6]], [\"key2\", [2, 5, 3]], [\"key3\", [10, 4]]];\nmy $x1 = maximum_value($arg10);\nmy $v1 = [[\"key1\", 6], [\"key2\", 5], [\"key3\", 10]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"key1\", [5, 6, 7]], [\"key2\", [3, 6, 4]], [\"key3\", [11, 5]]];\nmy $x2 = maximum_value($arg20);\nmy $v2 = [[\"key1\", 7], [\"key2\", 6], [\"key3\", 11]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/614", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n#\n# >>> cummulative_sum([[1, 3], [5, 6, 7], [2, 6]])\n# 30\n# >>> cummulative_sum([[2, 4], [6, 7, 8], [3, 7]])\n# 37\n# >>> cummulative_sum([[3, 5], [7, 8, 9], [4, 8]])\n# 44\nsub cummulative_sum\n{\n  my ($test_list) = @_;\n", "entry_point": "cummulative_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 3], [5, 6, 7], [2, 6]];\nmy $x0 = cummulative_sum($arg00);\nmy $v0 = 30;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[2, 4], [6, 7, 8], [3, 7]];\nmy $x1 = cummulative_sum($arg10);\nmy $v1 = 37;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[3, 5], [7, 8, 9], [4, 8]];\nmy $x2 = cummulative_sum($arg20);\nmy $v2 = 44;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/615", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find average value of the numbers in a given tuple of tuples.\n#\n# >>> average_tuple([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]])\n# [30.5, 34.25, 27.0, 23.25]\n# >>> average_tuple([[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]])\n# [25.5, -18.0, 3.75]\n# >>> average_tuple([[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]])\n# [305.0, 342.5, 270.0, 232.5]\nsub average_tuple\n{\n  my ($nums) = @_;\n", "entry_point": "average_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]];\nmy $x0 = average_tuple($arg00);\nmy $v0 = [30.5, 34.25, 27.0, 23.25];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]];\nmy $x1 = average_tuple($arg10);\nmy $v1 = [25.5, -18.0, 3.75];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]];\nmy $x2 = average_tuple($arg20);\nmy $v2 = [305.0, 342.5, 270.0, 232.5];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find average value of the numbers in a given tuple of tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/616", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to perfom the modulo of tuple elements in the given two tuples.\n#\n# >>> tuple_modulo([10, 4, 5, 6], [5, 6, 7, 5])\n# [0, 4, 5, 1]\n# >>> tuple_modulo([11, 5, 6, 7], [6, 7, 8, 6])\n# [5, 5, 6, 1]\n# >>> tuple_modulo([12, 6, 7, 8], [7, 8, 9, 7])\n# [5, 6, 7, 1]\nsub tuple_modulo\n{\n  my ($test_tup1, $test_tup2) = @_;\n", "entry_point": "tuple_modulo", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 4, 5, 6];\nmy $arg01 = [5, 6, 7, 5];\nmy $x0 = tuple_modulo($arg00, $arg01);\nmy $v0 = [0, 4, 5, 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [11, 5, 6, 7];\nmy $arg11 = [6, 7, 8, 6];\nmy $x1 = tuple_modulo($arg10, $arg11);\nmy $v1 = [5, 5, 6, 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [12, 6, 7, 8];\nmy $arg21 = [7, 8, 9, 7];\nmy $x2 = tuple_modulo($arg20, $arg21);\nmy $v2 = [5, 6, 7, 1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to perfom the modulo of tuple elements in the given two tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/617", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# >>> min_jumps(3, 4, 11)\n# 3.5\n# >>> min_jumps(3, 4, 0)\n# 0\n# >>> min_jumps(11, 14, 11)\n# 1\nsub min_jumps\n{\n  my ($a, $b, $d) = @_;\n", "entry_point": "min_jumps", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 4;\nmy $arg02 = 11;\nmy $x0 = min_jumps($arg00, $arg01, $arg02);\nmy $v0 = 3.5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $arg11 = 4;\nmy $arg12 = 0;\nmy $x1 = min_jumps($arg10, $arg11, $arg12);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 11;\nmy $arg21 = 14;\nmy $arg22 = 11;\nmy $x2 = min_jumps($arg20, $arg21, $arg22);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/618", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to divide two lists using map and lambda function.\n#\n# >>> div_list([4, 5, 6], [1, 2, 3])\n# [4.0, 2.5, 2.0]\n# >>> div_list([3, 2], [1, 4])\n# [3.0, 0.5]\n# >>> div_list([90, 120], [50, 70])\n# [1.8, 1.7142857142857142]\nsub div_list\n{\n  my ($nums1, $nums2) = @_;\n", "entry_point": "div_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [4, 5, 6];\nmy $arg01 = [1, 2, 3];\nmy $x0 = div_list($arg00, $arg01);\nmy $v0 = [4.0, 2.5, 2.0];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [3, 2];\nmy $arg11 = [1, 4];\nmy $x1 = div_list($arg10, $arg11);\nmy $v1 = [3.0, 0.5];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [90, 120];\nmy $arg21 = [50, 70];\nmy $x2 = div_list($arg20, $arg21);\nmy $v2 = [1.8, 1.7142857142857142];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to divide two lists using map and lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/619", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to move all the numbers in it to the given string.\n#\n# >>> move_num(\"I1love143you55three3000thousand\")\n# \"Iloveyouthreethousand1143553000\"\n# >>> move_num(\"Avengers124Assemble\")\n# \"AvengersAssemble124\"\n# >>> move_num(\"Its11our12path13to14see15things16do17things\")\n# \"Itsourpathtoseethingsdothings11121314151617\"\nsub move_num\n{\n  my ($test_str) = @_;\n", "entry_point": "move_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"I1love143you55three3000thousand\";\nmy $x0 = move_num($arg00);\nmy $v0 = \"Iloveyouthreethousand1143553000\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Avengers124Assemble\";\nmy $x1 = move_num($arg10);\nmy $v1 = \"AvengersAssemble124\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Its11our12path13to14see15things16do17things\";\nmy $x2 = move_num($arg20);\nmy $v2 = \"Itsourpathtoseethingsdothings11121314151617\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to move all the numbers in it to the given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/620", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the largest subset where each pair is divisible.\n#\n# >>> largest_subset([1, 3, 6, 13, 17, 18], 6)\n# 4\n# >>> largest_subset([10, 5, 3, 15, 20], 5)\n# 3\n# >>> largest_subset([18, 1, 3, 6, 13, 17], 6)\n# 4\nsub largest_subset\n{\n  my ($a, $n) = @_;\n", "entry_point": "largest_subset", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 6, 13, 17, 18];\nmy $arg01 = 6;\nmy $x0 = largest_subset($arg00, $arg01);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [10, 5, 3, 15, 20];\nmy $arg11 = 5;\nmy $x1 = largest_subset($arg10, $arg11);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [18, 1, 3, 6, 13, 17];\nmy $arg21 = 6;\nmy $x2 = largest_subset($arg20, $arg21);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the largest subset where each pair is divisible.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/621", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to increment the numeric values in the given strings by k.\n#\n# >>> increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"], 6)\n# [\"MSM\", \"240\", \"is\", \"104\", \"129\", \"best\", \"10\"]\n# >>> increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"], 12)\n# [\"Dart\", \"368\", \"is\", \"100\", \"181\", \"Super\", \"18\"]\n# >>> increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"], 33)\n# [\"Flutter\", \"484\", \"is\", \"77\", \"129\", \"Magnificent\", \"45\"]\nsub increment_numerics\n{\n  my ($test_list, $k) = @_;\n", "entry_point": "increment_numerics", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"];\nmy $arg01 = 6;\nmy $x0 = increment_numerics($arg00, $arg01);\nmy $v0 = [\"MSM\", \"240\", \"is\", \"104\", \"129\", \"best\", \"10\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"];\nmy $arg11 = 12;\nmy $x1 = increment_numerics($arg10, $arg11);\nmy $v1 = [\"Dart\", \"368\", \"is\", \"100\", \"181\", \"Super\", \"18\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"];\nmy $arg21 = 33;\nmy $x2 = increment_numerics($arg20, $arg21);\nmy $v2 = [\"Flutter\", \"484\", \"is\", \"77\", \"129\", \"Magnificent\", \"45\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to increment the numeric values in the given strings by k.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/622", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the median of two sorted arrays of same size.\n#\n# >>> get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)\n# 16.0\n# >>> get_median([2, 4, 8, 9], [7, 13, 19, 28], 4)\n# 8.5\n# >>> get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6)\n# 25.0\nsub get_median\n{\n  my ($arr1, $arr2, $n) = @_;\n", "entry_point": "get_median", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 12, 15, 26, 38];\nmy $arg01 = [2, 13, 17, 30, 45];\nmy $arg02 = 5;\nmy $x0 = get_median($arg00, $arg01, $arg02);\nmy $v0 = 16.0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 4, 8, 9];\nmy $arg11 = [7, 13, 19, 28];\nmy $arg12 = 4;\nmy $x1 = get_median($arg10, $arg11, $arg12);\nmy $v1 = 8.5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 6, 14, 23, 36, 42];\nmy $arg21 = [2, 18, 27, 39, 49, 55];\nmy $arg22 = 6;\nmy $x2 = get_median($arg20, $arg21, $arg22);\nmy $v2 = 25.0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the median of two sorted arrays of same size.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/623", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the n-th power of individual elements in a list using lambda function.\n#\n# >>> nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n# >>> nth_nums([10, 20, 30], 3)\n# [1000, 8000, 27000]\n# >>> nth_nums([12, 15], 5)\n# [248832, 759375]\nsub nth_nums\n{\n  my ($nums, $n) = @_;\n", "entry_point": "nth_nums", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $arg01 = 2;\nmy $x0 = nth_nums($arg00, $arg01);\nmy $v0 = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [10, 20, 30];\nmy $arg11 = 3;\nmy $x1 = nth_nums($arg10, $arg11);\nmy $v1 = [1000, 8000, 27000];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [12, 15];\nmy $arg21 = 5;\nmy $x2 = nth_nums($arg20, $arg21);\nmy $v2 = [248832, 759375];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the n-th power of individual elements in a list using lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/624", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to convert the given string to upper case.\n#\n# >>> is_upper(\"person\")\n# \"PERSON\"\n# >>> is_upper(\"final\")\n# \"FINAL\"\n# >>> is_upper(\"Valid\")\n# \"VALID\"\nsub is_upper\n{\n  my ($string) = @_;\n", "entry_point": "is_upper", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"person\";\nmy $x0 = is_upper($arg00);\nmy $v0 = \"PERSON\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"final\";\nmy $x1 = is_upper($arg10);\nmy $v1 = \"FINAL\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Valid\";\nmy $x2 = is_upper($arg20);\nmy $v2 = \"VALID\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to convert the given string to upper case.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/625", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to interchange first and last elements in a given list.\n#\n# >>> swap_list([1, 2, 3])\n# [3, 2, 1]\n# >>> swap_list([1, 2, 3, 4, 4])\n# [4, 2, 3, 4, 1]\n# >>> swap_list([4, 5, 6])\n# [6, 5, 4]\nsub swap_list\n{\n  my ($newlist) = @_;\n", "entry_point": "swap_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $x0 = swap_list($arg00);\nmy $v0 = [3, 2, 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 4];\nmy $x1 = swap_list($arg10);\nmy $v1 = [4, 2, 3, 4, 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [4, 5, 6];\nmy $x2 = swap_list($arg20);\nmy $v2 = [6, 5, 4];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to interchange first and last elements in a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/626", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the largest triangle that can be inscribed in the semicircle.\n#\n# >>> triangle_area(0)\n# 0\n# >>> triangle_area(-1)\n# -1\n# >>> triangle_area(2)\n# 4\nsub triangle_area\n{\n  my ($r) = @_;\n", "entry_point": "triangle_area", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 0;\nmy $x0 = triangle_area($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = -1;\nmy $x1 = triangle_area($arg10);\nmy $v1 = -1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $x2 = triangle_area($arg20);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the largest triangle that can be inscribed in the semicircle.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/627", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the smallest missing number from the given array.\n#\n# >>> find_first_missing([0, 1, 2, 3], 0, 3)\n# 4\n# >>> find_first_missing([0, 1, 2, 6, 9], 0, 4)\n# 3\n# >>> find_first_missing([2, 3, 5, 8, 9], 0, 4)\n# 0\nsub find_first_missing\n{\n  my ($array, $start, $end) = @_;\n", "entry_point": "find_first_missing", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [0, 1, 2, 3];\nmy $arg01 = 0;\nmy $arg02 = 3;\nmy $x0 = find_first_missing($arg00, $arg01, $arg02);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [0, 1, 2, 6, 9];\nmy $arg11 = 0;\nmy $arg12 = 4;\nmy $x1 = find_first_missing($arg10, $arg11, $arg12);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 3, 5, 8, 9];\nmy $arg21 = 0;\nmy $arg22 = 4;\nmy $x2 = find_first_missing($arg20, $arg21, $arg22);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the smallest missing number from the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/628", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n#\n# >>> replace_spaces(\"My Name is Dawood\")\n# \"My%20Name%20is%20Dawood\"\n# >>> replace_spaces(\"I am a Programmer\")\n# \"I%20am%20a%20Programmer\"\n# >>> replace_spaces(\"I love Coding\")\n# \"I%20love%20Coding\"\nsub replace_spaces\n{\n  my ($string) = @_;\n", "entry_point": "replace_spaces", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"My Name is Dawood\";\nmy $x0 = replace_spaces($arg00);\nmy $v0 = \"My%20Name%20is%20Dawood\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"I am a Programmer\";\nmy $x1 = replace_spaces($arg10);\nmy $v1 = \"I%20am%20a%20Programmer\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"I love Coding\";\nmy $x2 = replace_spaces($arg20);\nmy $v2 = \"I%20love%20Coding\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/629", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find even numbers from a mixed list.\n#\n# >>> split([1, 2, 3, 4, 5])\n# [2, 4]\n# >>> split([4, 5, 6, 7, 8, 0, 1])\n# [4, 6, 8, 0]\nsub split\n{\n  my ($list) = @_;\n", "entry_point": "split", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5];\nmy $x0 = split($arg00);\nmy $v0 = [2, 4];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 5, 6, 7, 8, 0, 1];\nmy $x1 = split($arg10);\nmy $v1 = [4, 6, 8, 0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\n", "description": "Write a Perl function to find even numbers from a mixed list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/630", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n#\n# >>> get_coordinates([3, 4])\n# [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n# >>> get_coordinates([4, 5])\n# [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n# >>> get_coordinates([5, 6])\n# [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\nsub get_coordinates\n{\n  my ($test_tup) = @_;\n", "entry_point": "get_coordinates", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 4];\nmy $x0 = get_coordinates($arg00);\nmy $v0 = [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 5];\nmy $x1 = get_coordinates($arg10);\nmy $v1 = [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [5, 6];\nmy $x2 = get_coordinates($arg20);\nmy $v2 = [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/631", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n#\n# >>> replace_spaces(\"Jumanji The Jungle\")\n# \"Jumanji_The_Jungle\"\n# >>> replace_spaces(\"The Avengers\")\n# \"The_Avengers\"\n# >>> replace_spaces(\"Fast and Furious\")\n# \"Fast_and_Furious\"\nsub replace_spaces\n{\n  my ($text) = @_;\n", "entry_point": "replace_spaces", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Jumanji The Jungle\";\nmy $x0 = replace_spaces($arg00);\nmy $v0 = \"Jumanji_The_Jungle\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"The Avengers\";\nmy $x1 = replace_spaces($arg10);\nmy $v1 = \"The_Avengers\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Fast and Furious\";\nmy $x2 = replace_spaces($arg20);\nmy $v2 = \"Fast_and_Furious\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/632", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to move all zeroes to the end of the given list.\n#\n# >>> move_zero([1, 0, 2, 0, 3, 4])\n# [1, 2, 3, 4, 0, 0]\n# >>> move_zero([2, 3, 2, 0, 0, 4, 0, 5, 0])\n# [2, 3, 2, 4, 5, 0, 0, 0, 0]\n# >>> move_zero([0, 1, 0, 1, 1])\n# [1, 1, 1, 0, 0]\nsub move_zero\n{\n  my ($num_list) = @_;\n", "entry_point": "move_zero", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 0, 2, 0, 3, 4];\nmy $x0 = move_zero($arg00);\nmy $v0 = [1, 2, 3, 4, 0, 0];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 3, 2, 0, 0, 4, 0, 5, 0];\nmy $x1 = move_zero($arg10);\nmy $v1 = [2, 3, 2, 4, 5, 0, 0, 0, 0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [0, 1, 0, 1, 1];\nmy $x2 = move_zero($arg20);\nmy $v2 = [1, 1, 1, 0, 0];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to move all zeroes to the end of the given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/633", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of xor of all pairs of numbers in the given array.\n#\n# >>> pair_or_sum([5, 9, 7, 6], 4)\n# 47\n# >>> pair_or_sum([7, 3, 5], 3)\n# 12\n# >>> pair_or_sum([7, 3], 2)\n# 4\nsub pair_or_sum\n{\n  my ($arr, $n) = @_;\n", "entry_point": "pair_or_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 9, 7, 6];\nmy $arg01 = 4;\nmy $x0 = pair_or_sum($arg00, $arg01);\nmy $v0 = 47;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [7, 3, 5];\nmy $arg11 = 3;\nmy $x1 = pair_or_sum($arg10, $arg11);\nmy $v1 = 12;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [7, 3];\nmy $arg21 = 2;\nmy $x2 = pair_or_sum($arg20, $arg21);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of xor of all pairs of numbers in the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/634", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of fourth power of first n even natural numbers.\n#\n# >>> even_power_sum(2)\n# 272\n# >>> even_power_sum(3)\n# 1568\n# >>> even_power_sum(4)\n# 5664\nsub even_power_sum\n{\n  my ($n) = @_;\n", "entry_point": "even_power_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = even_power_sum($arg00);\nmy $v0 = 272;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $x1 = even_power_sum($arg10);\nmy $v1 = 1568;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $x2 = even_power_sum($arg20);\nmy $v2 = 5664;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of fourth power of first n even natural numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/635", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to push all values into a heap and then pop off the smallest values one at a time.\n#\n# >>> heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n# >>> heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])\n# [14, 22, 25, 25, 35, 58, 65, 75, 85]\n# >>> heap_sort([7, 1, 9, 5])\n# [1, 5, 7, 9]\nsub heap_sort\n{\n  my ($iterable) = @_;\n", "entry_point": "heap_sort", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\nmy $x0 = heap_sort($arg00);\nmy $v0 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [25, 35, 22, 85, 14, 65, 75, 25, 58];\nmy $x1 = heap_sort($arg10);\nmy $v1 = [14, 22, 25, 25, 35, 58, 65, 75, 85];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [7, 1, 9, 5];\nmy $x2 = heap_sort($arg20);\nmy $v2 = [1, 5, 7, 9];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to push all values into a heap and then pop off the smallest values one at a time.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/636", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check if roots of a quadratic equation are reciprocal of each other or not.\n#\n# >>> check_solution(2, 0, 2)\n# \"Yes\"\n# >>> check_solution(2, -5, 2)\n# \"Yes\"\n# >>> check_solution(1, 2, 3)\n# \"No\"\nsub check_solution\n{\n  my ($a, $b, $c) = @_;\n", "entry_point": "check_solution", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $arg01 = 0;\nmy $arg02 = 2;\nmy $x0 = check_solution($arg00, $arg01, $arg02);\nmy $v0 = \"Yes\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $arg11 = -5;\nmy $arg12 = 2;\nmy $x1 = check_solution($arg10, $arg11, $arg12);\nmy $v1 = \"Yes\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 2;\nmy $arg22 = 3;\nmy $x2 = check_solution($arg20, $arg21, $arg22);\nmy $v2 = \"No\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check if roots of a quadratic equation are reciprocal of each other or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/637", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether the given amount has no profit and no loss\n#\n# >>> noprofit_noloss(1500, 1200)\n# 0\n# >>> noprofit_noloss(100, 100)\n# 1\n# >>> noprofit_noloss(2000, 5000)\n# 0\nsub noprofit_noloss\n{\n  my ($actual_cost, $sale_amount) = @_;\n", "entry_point": "noprofit_noloss", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1500;\nmy $arg01 = 1200;\nmy $x0 = noprofit_noloss($arg00, $arg01);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 100;\nmy $arg11 = 100;\nmy $x1 = noprofit_noloss($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2000;\nmy $arg21 = 5000;\nmy $x2 = noprofit_noloss($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether the given amount has no profit and no loss", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/638", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate wind chill index.\n#\n# >>> wind_chill(120, 35)\n# 40\n# >>> wind_chill(40, 70)\n# 86\n# >>> wind_chill(10, 100)\n# 116\nsub wind_chill\n{\n  my ($v, $t) = @_;\n", "entry_point": "wind_chill", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 120;\nmy $arg01 = 35;\nmy $x0 = wind_chill($arg00, $arg01);\nmy $v0 = 40;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 40;\nmy $arg11 = 70;\nmy $x1 = wind_chill($arg10, $arg11);\nmy $v1 = 86;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $arg21 = 100;\nmy $x2 = wind_chill($arg20, $arg21);\nmy $v2 = 116;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate wind chill index.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/639", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n#\n# >>> sample_nam([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"])\n# 16\n# >>> sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])\n# 10\n# >>> sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])\n# 6\nsub sample_nam\n{\n  my ($sample_names) = @_;\n", "entry_point": "sample_nam", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"];\nmy $x0 = sample_nam($arg00);\nmy $v0 = 16;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"];\nmy $x1 = sample_nam($arg10);\nmy $v1 = 10;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"abcd\", \"Python\", \"abba\", \"aba\"];\nmy $x2 = sample_nam($arg20);\nmy $v2 = 6;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/640", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove the parenthesis area in a string.\n#\n# >>> remove_parenthesis([\"python (chrome)\"])\n# \"python\"\n# >>> remove_parenthesis([\"string(.abc)\"])\n# \"string\"\n# >>> remove_parenthesis([\"alpha(num)\"])\n# \"alpha\"\nsub remove_parenthesis\n{\n  my ($items) = @_;\n", "entry_point": "remove_parenthesis", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"python (chrome)\"];\nmy $x0 = remove_parenthesis($arg00);\nmy $v0 = \"python\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"string(.abc)\"];\nmy $x1 = remove_parenthesis($arg10);\nmy $v1 = \"string\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"alpha(num)\"];\nmy $x2 = remove_parenthesis($arg20);\nmy $v2 = \"alpha\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove the parenthesis area in a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/641", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the nth nonagonal number.\n#\n# >>> is_nonagonal(10)\n# 325\n# >>> is_nonagonal(15)\n# 750\n# >>> is_nonagonal(18)\n# 1089\nsub is_nonagonal\n{\n  my ($n) = @_;\n", "entry_point": "is_nonagonal", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = is_nonagonal($arg00);\nmy $v0 = 325;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 15;\nmy $x1 = is_nonagonal($arg10);\nmy $v1 = 750;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 18;\nmy $x2 = is_nonagonal($arg20);\nmy $v2 = 1089;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the nth nonagonal number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/643", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function that matches a word containing 'z', not at the start or end of the word.\n#\n# >>> text_match_wordz_middle(\"pythonzabc.\")\n# \"Found a match!\"\n# >>> text_match_wordz_middle(\"xyzabc.\")\n# \"Found a match!\"\n# >>> text_match_wordz_middle(\"  lang  .\")\n# \"Not matched!\"\nsub text_match_wordz_middle\n{\n  my ($text) = @_;\n", "entry_point": "text_match_wordz_middle", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"pythonzabc.\";\nmy $x0 = text_match_wordz_middle($arg00);\nmy $v0 = \"Found a match!\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"xyzabc.\";\nmy $x1 = text_match_wordz_middle($arg10);\nmy $v1 = \"Found a match!\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"  lang  .\";\nmy $x2 = text_match_wordz_middle($arg20);\nmy $v2 = \"Not matched!\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function that matches a word containing 'z', not at the start or end of the word.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/644", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to reverse an array upto a given position.\n#\n# >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 4)\n# [4, 3, 2, 1, 5, 6]\n# >>> reverse_array_upto_k([4, 5, 6, 7], 2)\n# [5, 4, 6, 7]\n# >>> reverse_array_upto_k([9, 8, 7, 6, 5], 3)\n# [7, 8, 9, 6, 5]\nsub reverse_array_upto_k\n{\n  my ($input, $k) = @_;\n", "entry_point": "reverse_array_upto_k", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6];\nmy $arg01 = 4;\nmy $x0 = reverse_array_upto_k($arg00, $arg01);\nmy $v0 = [4, 3, 2, 1, 5, 6];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 5, 6, 7];\nmy $arg11 = 2;\nmy $x1 = reverse_array_upto_k($arg10, $arg11);\nmy $v1 = [5, 4, 6, 7];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [9, 8, 7, 6, 5];\nmy $arg21 = 3;\nmy $x2 = reverse_array_upto_k($arg20, $arg21);\nmy $v2 = [7, 8, 9, 6, 5];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to reverse an array upto a given position.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/645", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the product of it\u2019s kth index in the given tuples.\n#\n# >>> find_k_product([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n# 665\n# >>> find_k_product([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1)\n# 280\n# >>> find_k_product([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 0)\n# 210\nsub find_k_product\n{\n  my ($test_list, $k) = @_;\n", "entry_point": "find_k_product", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[5, 6, 7], [1, 3, 5], [8, 9, 19]];\nmy $arg01 = 2;\nmy $x0 = find_k_product($arg00, $arg01);\nmy $v0 = 665;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[6, 7, 8], [2, 4, 6], [9, 10, 20]];\nmy $arg11 = 1;\nmy $x1 = find_k_product($arg10, $arg11);\nmy $v1 = 280;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[7, 8, 9], [3, 5, 7], [10, 11, 21]];\nmy $arg21 = 0;\nmy $x2 = find_k_product($arg20, $arg21);\nmy $v2 = 210;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the product of it\u2019s kth index in the given tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/646", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count number of cubes of size k in a cube of size n.\n#\n# >>> no_of_cubes(2, 1)\n# 8\n# >>> no_of_cubes(5, 2)\n# 64\n# >>> no_of_cubes(1, 1)\n# 1\nsub no_of_cubes\n{\n  my ($n, $k) = @_;\n", "entry_point": "no_of_cubes", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $arg01 = 1;\nmy $x0 = no_of_cubes($arg00, $arg01);\nmy $v0 = 8;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $arg11 = 2;\nmy $x1 = no_of_cubes($arg10, $arg11);\nmy $v1 = 64;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 1;\nmy $x2 = no_of_cubes($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count number of cubes of size k in a cube of size n.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/647", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to split a string at uppercase letters.\n#\n# >>> split_upperstring(\"PythonProgramLanguage\")\n# [\"Python\", \"Program\", \"Language\"]\n# >>> split_upperstring(\"PythonProgram\")\n# [\"Python\", \"Program\"]\n# >>> split_upperstring(\"ProgrammingLanguage\")\n# [\"Programming\", \"Language\"]\nsub split_upperstring\n{\n  my ($text) = @_;\n", "entry_point": "split_upperstring", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"PythonProgramLanguage\";\nmy $x0 = split_upperstring($arg00);\nmy $v0 = [\"Python\", \"Program\", \"Language\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"PythonProgram\";\nmy $x1 = split_upperstring($arg10);\nmy $v1 = [\"Python\", \"Program\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"ProgrammingLanguage\";\nmy $x2 = split_upperstring($arg20);\nmy $v2 = [\"Programming\", \"Language\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to split a string at uppercase letters.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/648", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n#\n# >>> exchange_elements([0, 1, 2, 3, 4, 5])\n# [1, 0, 3, 2, 5, 4]\n# >>> exchange_elements([5, 6, 7, 8, 9, 10])\n# [6, 5, 8, 7, 10, 9]\n# >>> exchange_elements([25, 35, 45, 55, 75, 95])\n# [35, 25, 55, 45, 95, 75]\nsub exchange_elements\n{\n  my ($lst) = @_;\n", "entry_point": "exchange_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [0, 1, 2, 3, 4, 5];\nmy $x0 = exchange_elements($arg00);\nmy $v0 = [1, 0, 3, 2, 5, 4];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 6, 7, 8, 9, 10];\nmy $x1 = exchange_elements($arg10);\nmy $v1 = [6, 5, 8, 7, 10, 9];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [25, 35, 45, 55, 75, 95];\nmy $x2 = exchange_elements($arg20);\nmy $v2 = [35, 25, 55, 45, 95, 75];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/649", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to calculate the sum of the numbers in a list between the indices of a specified range.\n#\n# >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n# 29\n# >>> sum_range_list([1, 2, 3, 4, 5], 1, 2)\n# 5\n# >>> sum_range_list([1, 0, 1, 2, 5, 6], 4, 5)\n# 11\nsub sum_range_list\n{\n  my ($nums, $m, $n) = @_;\n", "entry_point": "sum_range_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nmy $arg01 = 8;\nmy $arg02 = 10;\nmy $x0 = sum_range_list($arg00, $arg01, $arg02);\nmy $v0 = 29;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5];\nmy $arg11 = 1;\nmy $arg12 = 2;\nmy $x1 = sum_range_list($arg10, $arg11, $arg12);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 0, 1, 2, 5, 6];\nmy $arg21 = 4;\nmy $arg22 = 5;\nmy $x2 = sum_range_list($arg20, $arg21, $arg22);\nmy $v2 = 11;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to calculate the sum of the numbers in a list between the indices of a specified range.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/650", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the given two arrays are equal or not.\n#\n# >>> are_equal([1, 2, 3], [3, 2, 1], 3, 3)\n# 1\n# >>> are_equal([1, 1, 1], [2, 2, 2], 3, 3)\n# 0\n# >>> are_equal([8, 9], [4, 5, 6], 2, 3)\n# 0\nsub are_equal\n{\n  my ($arr1, $arr2, $n, $m) = @_;\n", "entry_point": "are_equal", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $arg01 = [3, 2, 1];\nmy $arg02 = 3;\nmy $arg03 = 3;\nmy $x0 = are_equal($arg00, $arg01, $arg02, $arg03);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 1, 1];\nmy $arg11 = [2, 2, 2];\nmy $arg12 = 3;\nmy $arg13 = 3;\nmy $x1 = are_equal($arg10, $arg11, $arg12, $arg13);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [8, 9];\nmy $arg21 = [4, 5, 6];\nmy $arg22 = 2;\nmy $arg23 = 3;\nmy $x2 = are_equal($arg20, $arg21, $arg22, $arg23);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the given two arrays are equal or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/651", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if one tuple is a subset of another tuple.\n#\n# >>> check_subset([10, 4, 5, 6], [5, 10])\n# 1\n# >>> check_subset([1, 2, 3, 4], [5, 6])\n# 0\n# >>> check_subset([7, 8, 9, 10], [10, 8])\n# 1\nsub check_subset\n{\n  my ($test_tup1, $test_tup2) = @_;\n", "entry_point": "check_subset", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 4, 5, 6];\nmy $arg01 = [5, 10];\nmy $x0 = check_subset($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4];\nmy $arg11 = [5, 6];\nmy $x1 = check_subset($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [7, 8, 9, 10];\nmy $arg21 = [10, 8];\nmy $x2 = check_subset($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if one tuple is a subset of another tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/652", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n#\n# >>> matrix_to_list([[[4, 5], [7, 8]], [[10, 13], [18, 17]], [[0, 4], [10, 1]]])\n# \"[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]\"\n# >>> matrix_to_list([[[5, 6], [8, 9]], [[11, 14], [19, 18]], [[1, 5], [11, 2]]])\n# \"[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]\"\n# >>> matrix_to_list([[[6, 7], [9, 10]], [[12, 15], [20, 21]], [[23, 7], [15, 8]]])\n# \"[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]\"\nsub matrix_to_list\n{\n  my ($test_list) = @_;\n", "entry_point": "matrix_to_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[[4, 5], [7, 8]], [[10, 13], [18, 17]], [[0, 4], [10, 1]]];\nmy $x0 = matrix_to_list($arg00);\nmy $v0 = \"[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[[5, 6], [8, 9]], [[11, 14], [19, 18]], [[1, 5], [11, 2]]];\nmy $x1 = matrix_to_list($arg10);\nmy $v1 = \"[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[[6, 7], [9, 10]], [[12, 15], [20, 21]], [[23, 7], [15, 8]]];\nmy $x2 = matrix_to_list($arg20);\nmy $v2 = \"[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/653", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n#\n# >>> grouping_dictionary([[\"yellow\", 1], [\"blue\", 2], [\"yellow\", 3], [\"blue\", 4], [\"red\", 1]])\n# {\"yellow\" => [1, 3], \"blue\" => [2, 4], \"red\" => [1]}\n# >>> grouping_dictionary([[\"yellow\", 10], [\"blue\", 20], [\"yellow\", 30], [\"blue\", 40], [\"red\", 10]])\n# {\"yellow\" => [10, 30], \"blue\" => [20, 40], \"red\" => [10]}\n# >>> grouping_dictionary([[\"yellow\", 15], [\"blue\", 25], [\"yellow\", 35], [\"blue\", 45], [\"red\", 15]])\n# {\"yellow\" => [15, 35], \"blue\" => [25, 45], \"red\" => [15]}\nsub grouping_dictionary\n{\n  my ($l) = @_;\n", "entry_point": "grouping_dictionary", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"yellow\", 1], [\"blue\", 2], [\"yellow\", 3], [\"blue\", 4], [\"red\", 1]];\nmy $x0 = grouping_dictionary($arg00);\nmy $v0 = {\"yellow\" => [1, 3], \"blue\" => [2, 4], \"red\" => [1]};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"yellow\", 10], [\"blue\", 20], [\"yellow\", 30], [\"blue\", 40], [\"red\", 10]];\nmy $x1 = grouping_dictionary($arg10);\nmy $v1 = {\"yellow\" => [10, 30], \"blue\" => [20, 40], \"red\" => [10]};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"yellow\", 15], [\"blue\", 25], [\"yellow\", 35], [\"blue\", 45], [\"red\", 15]];\nmy $x2 = grouping_dictionary($arg20);\nmy $v2 = {\"yellow\" => [15, 35], \"blue\" => [25, 45], \"red\" => [15]};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/654", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the perimeter of a rectangle.\n#\n# >>> rectangle_perimeter(10, 20)\n# 60\n# >>> rectangle_perimeter(10, 5)\n# 30\n# >>> rectangle_perimeter(4, 2)\n# 12\nsub rectangle_perimeter\n{\n  my ($l, $b) = @_;\n", "entry_point": "rectangle_perimeter", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 20;\nmy $x0 = rectangle_perimeter($arg00, $arg01);\nmy $v0 = 60;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = 5;\nmy $x1 = rectangle_perimeter($arg10, $arg11);\nmy $v1 = 30;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $arg21 = 2;\nmy $x2 = rectangle_perimeter($arg20, $arg21);\nmy $v2 = 12;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the perimeter of a rectangle.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/655", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of fifth power of n natural numbers.\n#\n# >>> fifth_power_sum(2)\n# 33\n# >>> fifth_power_sum(4)\n# 1300\n# >>> fifth_power_sum(3)\n# 276\nsub fifth_power_sum\n{\n  my ($n) = @_;\n", "entry_point": "fifth_power_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = fifth_power_sum($arg00);\nmy $v0 = 33;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = fifth_power_sum($arg10);\nmy $v1 = 1300;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $x2 = fifth_power_sum($arg20);\nmy $v2 = 276;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of fifth power of n natural numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/656", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the minimum sum of absolute differences of two arrays.\n#\n# >>> find_min_sum([3, 2, 1], [2, 1, 3], 3)\n# 0\n# >>> find_min_sum([1, 2, 3], [4, 5, 6], 3)\n# 9\n# >>> find_min_sum([4, 1, 8, 7], [2, 3, 6, 5], 4)\n# 6\nsub find_min_sum\n{\n  my ($a, $b, $n) = @_;\n", "entry_point": "find_min_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 2, 1];\nmy $arg01 = [2, 1, 3];\nmy $arg02 = 3;\nmy $x0 = find_min_sum($arg00, $arg01, $arg02);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3];\nmy $arg11 = [4, 5, 6];\nmy $arg12 = 3;\nmy $x1 = find_min_sum($arg10, $arg11, $arg12);\nmy $v1 = 9;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [4, 1, 8, 7];\nmy $arg21 = [2, 3, 6, 5];\nmy $arg22 = 4;\nmy $x2 = find_min_sum($arg20, $arg21, $arg22);\nmy $v2 = 6;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the minimum sum of absolute differences of two arrays.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/657", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the first digit in factorial of a given number.\n#\n# >>> first_digit(5)\n# 1\n# >>> first_digit(10)\n# 3\n# >>> first_digit(7)\n# 5\nsub first_digit\n{\n  my ($n) = @_;\n", "entry_point": "first_digit", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = first_digit($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $x1 = first_digit($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 7;\nmy $x2 = first_digit($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the first digit in factorial of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/658", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the item with maximum occurrences in a given list.\n#\n# >>> max_occurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2])\n# 2\n# >>> max_occurrences([1, 3, 5, 7, 1, 3, 13, 15, 17, 5, 7, 9, 1, 11])\n# 1\n# >>> max_occurrences([1, 2, 3, 2, 4, 5, 1, 1, 1])\n# 1\nsub max_occurrences\n{\n  my ($list1) = @_;\n", "entry_point": "max_occurrences", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2];\nmy $x0 = max_occurrences($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 3, 5, 7, 1, 3, 13, 15, 17, 5, 7, 9, 1, 11];\nmy $x1 = max_occurrences($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 2, 4, 5, 1, 1, 1];\nmy $x2 = max_occurrences($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the item with maximum occurrences in a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/659", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to print duplicants from a list of integers.\n#\n# >>> repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20])\n# [20, 30, -20, 60]\n# >>> repeat([-1, 1, -1, 8])\n# [-1]\n# >>> repeat([1, 2, 3, 1, 2])\n# [1, 2]\nsub repeat\n{\n  my ($x) = @_;\n", "entry_point": "repeat", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20];\nmy $x0 = repeat($arg00);\nmy $v0 = [20, 30, -20, 60];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [-1, 1, -1, 8];\nmy $x1 = repeat($arg10);\nmy $v1 = [-1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 1, 2];\nmy $x2 = repeat($arg20);\nmy $v2 = [1, 2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to print duplicants from a list of integers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/660", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to choose points from two ranges such that no point lies in both the ranges.\n#\n# >>> find_points(5, 10, 1, 5)\n# [1, 10]\n# >>> find_points(3, 5, 7, 9)\n# [3, 9]\n# >>> find_points(1, 5, 2, 8)\n# [1, 8]\nsub find_points\n{\n  my ($l1, $r1, $l2, $r2) = @_;\n", "entry_point": "find_points", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $arg01 = 10;\nmy $arg02 = 1;\nmy $arg03 = 5;\nmy $x0 = find_points($arg00, $arg01, $arg02, $arg03);\nmy $v0 = [1, 10];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $arg11 = 5;\nmy $arg12 = 7;\nmy $arg13 = 9;\nmy $x1 = find_points($arg10, $arg11, $arg12, $arg13);\nmy $v1 = [3, 9];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 5;\nmy $arg22 = 2;\nmy $arg23 = 8;\nmy $x2 = find_points($arg20, $arg21, $arg22, $arg23);\nmy $v2 = [1, 8];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to choose points from two ranges such that no point lies in both the ranges.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/661", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\n#\n# >>> max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5)\n# 2101\n# >>> max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5)\n# 5013\n# >>> max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8)\n# 27\nsub max_sum_of_three_consecutive\n{\n  my ($arr, $n) = @_;\n", "entry_point": "max_sum_of_three_consecutive", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [100, 1000, 100, 1000, 1];\nmy $arg01 = 5;\nmy $x0 = max_sum_of_three_consecutive($arg00, $arg01);\nmy $v0 = 2101;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [3000, 2000, 1000, 3, 10];\nmy $arg11 = 5;\nmy $x1 = max_sum_of_three_consecutive($arg10, $arg11);\nmy $v1 = 5013;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 5, 6, 7, 8];\nmy $arg21 = 8;\nmy $x2 = max_sum_of_three_consecutive($arg20, $arg21);\nmy $v2 = 27;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/662", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort a list in a dictionary.\n#\n# >>> sorted_dict({\"n1\" => [2, 3, 1], \"n2\" => [5, 1, 2], \"n3\" => [3, 2, 4]})\n# {\"n1\" => [1, 2, 3], \"n2\" => [1, 2, 5], \"n3\" => [2, 3, 4]}\n# >>> sorted_dict({\"n1\" => [25, 37, 41], \"n2\" => [41, 54, 63], \"n3\" => [29, 38, 93]})\n# {\"n1\" => [25, 37, 41], \"n2\" => [41, 54, 63], \"n3\" => [29, 38, 93]}\n# >>> sorted_dict({\"n1\" => [58, 44, 56], \"n2\" => [91, 34, 58], \"n3\" => [100, 200, 300]})\n# {\"n1\" => [44, 56, 58], \"n2\" => [34, 58, 91], \"n3\" => [100, 200, 300]}\nsub sorted_dict\n{\n  my ($dict1) = @_;\n", "entry_point": "sorted_dict", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {\"n1\" => [2, 3, 1], \"n2\" => [5, 1, 2], \"n3\" => [3, 2, 4]};\nmy $x0 = sorted_dict($arg00);\nmy $v0 = {\"n1\" => [1, 2, 3], \"n2\" => [1, 2, 5], \"n3\" => [2, 3, 4]};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {\"n1\" => [25, 37, 41], \"n2\" => [41, 54, 63], \"n3\" => [29, 38, 93]};\nmy $x1 = sorted_dict($arg10);\nmy $v1 = {\"n1\" => [25, 37, 41], \"n2\" => [41, 54, 63], \"n3\" => [29, 38, 93]};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {\"n1\" => [58, 44, 56], \"n2\" => [91, 34, 58], \"n3\" => [100, 200, 300]};\nmy $x2 = sorted_dict($arg20);\nmy $v2 = {\"n1\" => [44, 56, 58], \"n2\" => [34, 58, 91], \"n3\" => [100, 200, 300]};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort a list in a dictionary.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/663", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the largest possible value of k such that k modulo x is y.\n#\n# >>> find_max_val(15, 10, 5)\n# 15\n# >>> find_max_val(187, 10, 5)\n# 185\n# >>> find_max_val(16, 11, 1)\n# 12\nsub find_max_val\n{\n  my ($n, $x, $y) = @_;\n", "entry_point": "find_max_val", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 15;\nmy $arg01 = 10;\nmy $arg02 = 5;\nmy $x0 = find_max_val($arg00, $arg01, $arg02);\nmy $v0 = 15;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 187;\nmy $arg11 = 10;\nmy $arg12 = 5;\nmy $x1 = find_max_val($arg10, $arg11, $arg12);\nmy $v1 = 185;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 16;\nmy $arg21 = 11;\nmy $arg22 = 1;\nmy $x2 = find_max_val($arg20, $arg21, $arg22);\nmy $v2 = 12;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the largest possible value of k such that k modulo x is y.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/664", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the average of even numbers till a given even number.\n#\n# >>> average_even(2)\n# 2\n# >>> average_even(4)\n# 3\n# >>> average_even(100)\n# 51\nsub average_even\n{\n  my ($n) = @_;\n", "entry_point": "average_even", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = average_even($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = average_even($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 100;\nmy $x2 = average_even($arg20);\nmy $v2 = 51;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the average of even numbers till a given even number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/665", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to shift first element to the end of given list.\n#\n# >>> move_last([1, 2, 3, 4])\n# [2, 3, 4, 1]\n# >>> move_last([2, 3, 4, 1, 5, 0])\n# [3, 4, 1, 5, 0, 2]\n# >>> move_last([5, 4, 3, 2, 1])\n# [4, 3, 2, 1, 5]\nsub move_last\n{\n  my ($num_list) = @_;\n", "entry_point": "move_last", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4];\nmy $x0 = move_last($arg00);\nmy $v0 = [2, 3, 4, 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 3, 4, 1, 5, 0];\nmy $x1 = move_last($arg10);\nmy $v1 = [3, 4, 1, 5, 0, 2];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [5, 4, 3, 2, 1];\nmy $x2 = move_last($arg20);\nmy $v2 = [4, 3, 2, 1, 5];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to shift first element to the end of given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/666", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count occurrence of a character in a string.\n#\n# >>> count_char(\"Python\", \"o\")\n# 1\n# >>> count_char(\"little\", \"t\")\n# 2\n# >>> count_char(\"assert\", \"s\")\n# 2\nsub count_char\n{\n  my ($string, $char) = @_;\n", "entry_point": "count_char", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Python\";\nmy $arg01 = \"o\";\nmy $x0 = count_char($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"little\";\nmy $arg11 = \"t\";\nmy $x1 = count_char($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"assert\";\nmy $arg21 = \"s\";\nmy $x2 = count_char($arg20, $arg21);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count occurrence of a character in a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/667", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count number of vowels in the string.\n#\n# >>> check_vow(\"corner\", \"AaEeIiOoUu\")\n# 2\n# >>> check_vow(\"valid\", \"AaEeIiOoUu\")\n# 2\n# >>> check_vow(\"true\", \"AaEeIiOoUu\")\n# 2\nsub check_vow\n{\n  my ($string, $vowels) = @_;\n", "entry_point": "check_vow", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"corner\";\nmy $arg01 = \"AaEeIiOoUu\";\nmy $x0 = check_vow($arg00, $arg01);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"valid\";\nmy $arg11 = \"AaEeIiOoUu\";\nmy $x1 = check_vow($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"true\";\nmy $arg21 = \"AaEeIiOoUu\";\nmy $x2 = check_vow($arg20, $arg21);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count number of vowels in the string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/668", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to replace multiple occurence of character by single.\n#\n# >>> replace(\"peep\", \"e\")\n# \"pep\"\n# >>> replace(\"Greek\", \"e\")\n# \"Grek\"\n# >>> replace(\"Moon\", \"o\")\n# \"Mon\"\nsub replace\n{\n  my ($string, $char) = @_;\n", "entry_point": "replace", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"peep\";\nmy $arg01 = \"e\";\nmy $x0 = replace($arg00, $arg01);\nmy $v0 = \"pep\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Greek\";\nmy $arg11 = \"e\";\nmy $x1 = replace($arg10, $arg11);\nmy $v1 = \"Grek\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Moon\";\nmy $arg21 = \"o\";\nmy $x2 = replace($arg20, $arg21);\nmy $v2 = \"Mon\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to replace multiple occurence of character by single.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/669", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether the given ip address is valid or not using regex.\n#\n# >>> check_ip(\"192.168.0.1\")\n# \"Valid IP address\"\n# >>> check_ip(\"110.234.52.124\")\n# \"Valid IP address\"\n# >>> check_ip(\"366.1.2.2\")\n# \"Invalid IP address\"\nsub check_ip\n{\n  my ($ip) = @_;\n", "entry_point": "check_ip", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"192.168.0.1\";\nmy $x0 = check_ip($arg00);\nmy $v0 = \"Valid IP address\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"110.234.52.124\";\nmy $x1 = check_ip($arg10);\nmy $v1 = \"Valid IP address\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"366.1.2.2\";\nmy $x2 = check_ip($arg20);\nmy $v2 = \"Invalid IP address\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether the given ip address is valid or not using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/670", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether a sequence of numbers has a decreasing trend or not.\n#\n# >>> decreasing_trend([-4, -3, -2, -1])\n# 1\n# >>> decreasing_trend([1, 2, 3])\n# 1\n# >>> decreasing_trend([3, 2, 1])\n# 0\nsub decreasing_trend\n{\n  my ($nums) = @_;\n", "entry_point": "decreasing_trend", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [-4, -3, -2, -1];\nmy $x0 = decreasing_trend($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3];\nmy $x1 = decreasing_trend($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 2, 1];\nmy $x2 = decreasing_trend($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether a sequence of numbers has a decreasing trend or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/671", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to set the right most unset bit.\n#\n# >>> set_right_most_unset_bit(21)\n# 23\n# >>> set_right_most_unset_bit(11)\n# 15\n# >>> set_right_most_unset_bit(15)\n# 15\nsub set_right_most_unset_bit\n{\n  my ($n) = @_;\n", "entry_point": "set_right_most_unset_bit", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 21;\nmy $x0 = set_right_most_unset_bit($arg00);\nmy $v0 = 23;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 11;\nmy $x1 = set_right_most_unset_bit($arg10);\nmy $v1 = 15;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 15;\nmy $x2 = set_right_most_unset_bit($arg20);\nmy $v2 = 15;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to set the right most unset bit.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/672", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find maximum of three numbers.\n#\n# >>> max_of_three(10, 20, 30)\n# 30\n# >>> max_of_three(55, 47, 39)\n# 55\n# >>> max_of_three(10, 49, 30)\n# 49\nsub max_of_three\n{\n  my ($num1, $num2, $num3) = @_;\n", "entry_point": "max_of_three", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 20;\nmy $arg02 = 30;\nmy $x0 = max_of_three($arg00, $arg01, $arg02);\nmy $v0 = 30;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 55;\nmy $arg11 = 47;\nmy $arg12 = 39;\nmy $x1 = max_of_three($arg10, $arg11, $arg12);\nmy $v1 = 55;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $arg21 = 49;\nmy $arg22 = 30;\nmy $x2 = max_of_three($arg20, $arg21, $arg22);\nmy $v2 = 49;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find maximum of three numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/673", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to convert a list of multiple integers into a single integer.\n#\n# >>> convert([1, 2, 3])\n# 123\n# >>> convert([4, 5, 6])\n# 456\n# >>> convert([7, 8, 9])\n# 789\nsub convert\n{\n  my ($list) = @_;\n", "entry_point": "convert", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $x0 = convert($arg00);\nmy $v0 = 123;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 5, 6];\nmy $x1 = convert($arg10);\nmy $v1 = 456;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [7, 8, 9];\nmy $x2 = convert($arg20);\nmy $v2 = 789;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to convert a list of multiple integers into a single integer.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/674", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove duplicate words from a given string using collections module.\n#\n# >>> remove_duplicate(\"Python Exercises Practice Solution Exercises\")\n# \"Python Exercises Practice Solution\"\n# >>> remove_duplicate(\"Python Exercises Practice Solution Python\")\n# \"Python Exercises Practice Solution\"\n# >>> remove_duplicate(\"Python Exercises Practice Solution Practice\")\n# \"Python Exercises Practice Solution\"\nsub remove_duplicate\n{\n  my ($string) = @_;\n", "entry_point": "remove_duplicate", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Python Exercises Practice Solution Exercises\";\nmy $x0 = remove_duplicate($arg00);\nmy $v0 = \"Python Exercises Practice Solution\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Python Exercises Practice Solution Python\";\nmy $x1 = remove_duplicate($arg10);\nmy $v1 = \"Python Exercises Practice Solution\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Python Exercises Practice Solution Practice\";\nmy $x2 = remove_duplicate($arg20);\nmy $v2 = \"Python Exercises Practice Solution\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove duplicate words from a given string using collections module.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/675", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to add two integers. however, if the sum is between the given range it will return 20.\n#\n# >>> sum_nums(2, 10, 11, 20)\n# 20\n# >>> sum_nums(15, 17, 1, 10)\n# 32\n# >>> sum_nums(10, 15, 5, 30)\n# 20\nsub sum_nums\n{\n  my ($x, $y, $m, $n) = @_;\n", "entry_point": "sum_nums", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $arg01 = 10;\nmy $arg02 = 11;\nmy $arg03 = 20;\nmy $x0 = sum_nums($arg00, $arg01, $arg02, $arg03);\nmy $v0 = 20;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 15;\nmy $arg11 = 17;\nmy $arg12 = 1;\nmy $arg13 = 10;\nmy $x1 = sum_nums($arg10, $arg11, $arg12, $arg13);\nmy $v1 = 32;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $arg21 = 15;\nmy $arg22 = 5;\nmy $arg23 = 30;\nmy $x2 = sum_nums($arg20, $arg21, $arg22, $arg23);\nmy $v2 = 20;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to add two integers. however, if the sum is between the given range it will return 20.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/676", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove everything except alphanumeric characters from the given string by using regex.\n#\n# >>> remove_extra_char(\"**\\\\/\\/Google Android\\/\\/ - 12. \")\n# \"GoogleAndroid12\"\n# >>> remove_extra_char(\"****\\\\/\\/Google Flutter/\\/*** - 36. \")\n# \"GoogleFlutter36\"\n# >>> remove_extra_char(\"**\\\\/\\/Google Firebase\\/\\/ - 478. \")\n# \"GoogleFirebase478\"\nsub remove_extra_char\n{\n  my ($text1) = @_;\n", "entry_point": "remove_extra_char", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"**\\\\/\\/Google Android\\/\\/ - 12. \";\nmy $x0 = remove_extra_char($arg00);\nmy $v0 = \"GoogleAndroid12\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"****\\\\/\\/Google Flutter/\\/*** - 36. \";\nmy $x1 = remove_extra_char($arg10);\nmy $v1 = \"GoogleFlutter36\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"**\\\\/\\/Google Firebase\\/\\/ - 478. \";\nmy $x2 = remove_extra_char($arg20);\nmy $v2 = \"GoogleFirebase478\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove everything except alphanumeric characters from the given string by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/677", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if the triangle is valid or not.\n#\n# >>> validity_triangle(60, 50, 90)\n# 0\n# >>> validity_triangle(45, 75, 60)\n# 1\n# >>> validity_triangle(30, 50, 100)\n# 1\nsub validity_triangle\n{\n  my ($a, $b, $c) = @_;\n", "entry_point": "validity_triangle", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 60;\nmy $arg01 = 50;\nmy $arg02 = 90;\nmy $x0 = validity_triangle($arg00, $arg01, $arg02);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 45;\nmy $arg11 = 75;\nmy $arg12 = 60;\nmy $x1 = validity_triangle($arg10, $arg11, $arg12);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 30;\nmy $arg21 = 50;\nmy $arg22 = 100;\nmy $x2 = validity_triangle($arg20, $arg21, $arg22);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if the triangle is valid or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/678", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to remove spaces from a given string.\n#\n# >>> remove_spaces(\"a b c\")\n# \"abc\"\n# >>> remove_spaces(\"1 2 3\")\n# \"123\"\n# >>> remove_spaces(\" b c\")\n# \"bc\"\nsub remove_spaces\n{\n  my ($str1) = @_;\n", "entry_point": "remove_spaces", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"a b c\";\nmy $x0 = remove_spaces($arg00);\nmy $v0 = \"abc\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"1 2 3\";\nmy $x1 = remove_spaces($arg10);\nmy $v1 = \"123\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \" b c\";\nmy $x2 = remove_spaces($arg20);\nmy $v2 = \"bc\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to remove spaces from a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/679", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to access dictionary key\u2019s element by index.\n#\n# >>> access_key({\"physics\" => 80, \"math\" => 90, \"chemistry\" => 86}, 0)\n# \"physics\"\n# >>> access_key({\"python\" => 10, \"java\" => 20, \"C++\" => 30}, 2)\n# \"C++\"\n# >>> access_key({\"program\" => 15, \"computer\" => 45}, 1)\n# \"computer\"\nsub access_key\n{\n  my ($ditionary, $key) = @_;\n", "entry_point": "access_key", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {\"physics\" => 80, \"math\" => 90, \"chemistry\" => 86};\nmy $arg01 = 0;\nmy $x0 = access_key($arg00, $arg01);\nmy $v0 = \"physics\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {\"python\" => 10, \"java\" => 20, \"C++\" => 30};\nmy $arg11 = 2;\nmy $x1 = access_key($arg10, $arg11);\nmy $v1 = \"C++\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {\"program\" => 15, \"computer\" => 45};\nmy $arg21 = 1;\nmy $x2 = access_key($arg20, $arg21);\nmy $v2 = \"computer\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to access dictionary key\u2019s element by index.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/680", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether a sequence of numbers has an increasing trend or not.\n#\n# >>> increasing_trend([1, 2, 3, 4])\n# 1\n# >>> increasing_trend([4, 3, 2, 1])\n# 0\n# >>> increasing_trend([0, 1, 4, 9])\n# 1\nsub increasing_trend\n{\n  my ($nums) = @_;\n", "entry_point": "increasing_trend", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4];\nmy $x0 = increasing_trend($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 3, 2, 1];\nmy $x1 = increasing_trend($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [0, 1, 4, 9];\nmy $x2 = increasing_trend($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether a sequence of numbers has an increasing trend or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/681", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the smallest prime divisor of a number.\n#\n# >>> smallest_divisor(10)\n# 2\n# >>> smallest_divisor(25)\n# 5\n# >>> smallest_divisor(31)\n# 31\nsub smallest_divisor\n{\n  my ($n) = @_;\n", "entry_point": "smallest_divisor", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = smallest_divisor($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 25;\nmy $x1 = smallest_divisor($arg10);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 31;\nmy $x2 = smallest_divisor($arg20);\nmy $v2 = 31;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the smallest prime divisor of a number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/682", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to multiply two lists using map and lambda function.\n#\n# >>> mul_list([1, 2, 3], [4, 5, 6])\n# [4, 10, 18]\n# >>> mul_list([1, 2], [3, 4])\n# [3, 8]\n# >>> mul_list([90, 120], [50, 70])\n# [4500, 8400]\nsub mul_list\n{\n  my ($nums1, $nums2) = @_;\n", "entry_point": "mul_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $arg01 = [4, 5, 6];\nmy $x0 = mul_list($arg00, $arg01);\nmy $v0 = [4, 10, 18];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2];\nmy $arg11 = [3, 4];\nmy $x1 = mul_list($arg10, $arg11);\nmy $v1 = [3, 8];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [90, 120];\nmy $arg21 = [50, 70];\nmy $x2 = mul_list($arg20, $arg21);\nmy $v2 = [4500, 8400];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to multiply two lists using map and lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/683", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the given number can be represented by sum of two squares or not.\n#\n# >>> sum_square(25)\n# 1\n# >>> sum_square(24)\n# 0\n# >>> sum_square(17)\n# 1\nsub sum_square\n{\n  my ($n) = @_;\n", "entry_point": "sum_square", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 25;\nmy $x0 = sum_square($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 24;\nmy $x1 = sum_square($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 17;\nmy $x2 = sum_square($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the given number can be represented by sum of two squares or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/684", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count occurences of a character in a repeated string.\n#\n# >>> count_char(\"abcac\", \"a\")\n# 4\n# >>> count_char(\"abca\", \"c\")\n# 2\n# >>> count_char(\"aba\", \"a\")\n# 7\nsub count_char\n{\n  my ($str, $x) = @_;\n", "entry_point": "count_char", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abcac\";\nmy $arg01 = \"a\";\nmy $x0 = count_char($arg00, $arg01);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abca\";\nmy $arg11 = \"c\";\nmy $x1 = count_char($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"aba\";\nmy $arg21 = \"a\";\nmy $x2 = count_char($arg20, $arg21);\nmy $v2 = 7;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count occurences of a character in a repeated string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/685", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find sum of prime numbers between 1 to n.\n#\n# >>> sum_of_primes(10)\n# 17\n# >>> sum_of_primes(20)\n# 77\n# >>> sum_of_primes(5)\n# 10\nsub sum_of_primes\n{\n  my ($n) = @_;\n", "entry_point": "sum_of_primes", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = sum_of_primes($arg00);\nmy $v0 = 17;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 20;\nmy $x1 = sum_of_primes($arg10);\nmy $v1 = 77;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $x2 = sum_of_primes($arg20);\nmy $v2 = 10;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find sum of prime numbers between 1 to n.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/686", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the frequency of each element in the given list.\n#\n# >>> freq_element([4, 5, 4, 5, 6, 6, 5, 5, 4])\n# \"{4: 3, 5: 4, 6: 2}\"\n# >>> freq_element([7, 8, 8, 9, 4, 7, 6, 5, 4])\n# \"{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}\"\n# >>> freq_element([1, 4, 3, 1, 4, 5, 2, 6, 2, 7])\n# \"{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}\"\nsub freq_element\n{\n  my ($test_tup) = @_;\n", "entry_point": "freq_element", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [4, 5, 4, 5, 6, 6, 5, 5, 4];\nmy $x0 = freq_element($arg00);\nmy $v0 = \"{4: 3, 5: 4, 6: 2}\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [7, 8, 8, 9, 4, 7, 6, 5, 4];\nmy $x1 = freq_element($arg10);\nmy $v1 = \"{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 4, 3, 1, 4, 5, 2, 6, 2, 7];\nmy $x2 = freq_element($arg20);\nmy $v2 = \"{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the frequency of each element in the given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/687", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\n#\n# >>> recur_gcd(12, 14)\n# 2\n# >>> recur_gcd(13, 17)\n# 1\n# >>> recur_gcd(9, 3)\n# 3\nsub recur_gcd\n{\n  my ($a, $b) = @_;\n", "entry_point": "recur_gcd", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 12;\nmy $arg01 = 14;\nmy $x0 = recur_gcd($arg00, $arg01);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 13;\nmy $arg11 = 17;\nmy $x1 = recur_gcd($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 9;\nmy $arg21 = 3;\nmy $x2 = recur_gcd($arg20, $arg21);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/688", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to get the length of a complex number.\n#\n# >>> len_complex(3, 4)\n# 5.0\n# >>> len_complex(9, 10)\n# 13.45362404707371\n# >>> len_complex(7, 9)\n# 11.40175425099138\nsub len_complex\n{\n  my ($a, $b) = @_;\n", "entry_point": "len_complex", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 4;\nmy $x0 = len_complex($arg00, $arg01);\nmy $v0 = 5.0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 9;\nmy $arg11 = 10;\nmy $x1 = len_complex($arg10, $arg11);\nmy $v1 = 13.45362404707371;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 7;\nmy $arg21 = 9;\nmy $x2 = len_complex($arg20, $arg21);\nmy $v2 = 11.40175425099138;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to get the length of a complex number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/689", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # ## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n#\n# >>> min_jumps([1, 3, 6, 1, 0, 9], 6)\n# 3\n# >>> min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11)\n# 3\n# >>> min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11)\n# 10\nsub min_jumps\n{\n  my ($arr, $n) = @_;\n", "entry_point": "min_jumps", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 6, 1, 0, 9];\nmy $arg01 = 6;\nmy $x0 = min_jumps($arg00, $arg01);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9];\nmy $arg11 = 11;\nmy $x1 = min_jumps($arg10, $arg11);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\nmy $arg21 = 11;\nmy $x2 = min_jumps($arg20, $arg21);\nmy $v2 = 10;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/690", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to multiply consecutive numbers of a given list.\n#\n# >>> mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])\n# [1, 3, 12, 16, 20, 30, 42]\n# >>> mul_consecutive_nums([4, 5, 8, 9, 6, 10])\n# [20, 40, 72, 54, 60]\n# >>> mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# [2, 6, 12, 20, 30, 42, 56, 72, 90]\nsub mul_consecutive_nums\n{\n  my ($nums) = @_;\n", "entry_point": "mul_consecutive_nums", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 1, 3, 4, 4, 5, 6, 7];\nmy $x0 = mul_consecutive_nums($arg00);\nmy $v0 = [1, 3, 12, 16, 20, 30, 42];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 5, 8, 9, 6, 10];\nmy $x1 = mul_consecutive_nums($arg10);\nmy $v1 = [20, 40, 72, 54, 60];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $x2 = mul_consecutive_nums($arg20);\nmy $v2 = [2, 6, 12, 20, 30, 42, 56, 72, 90];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to multiply consecutive numbers of a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/691", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n#\n# >>> group_element([[6, 5], [2, 7], [2, 5], [8, 7], [9, 8], [3, 7]])\n# {5 => [6, 2], 7 => [2, 8, 3], 8 => [9]}\n# >>> group_element([[7, 6], [3, 8], [3, 6], [9, 8], [10, 9], [4, 8]])\n# {6 => [7, 3], 8 => [3, 9, 4], 9 => [10]}\n# >>> group_element([[8, 7], [4, 9], [4, 7], [10, 9], [11, 10], [5, 9]])\n# {7 => [8, 4], 9 => [4, 10, 5], 10 => [11]}\nsub group_element\n{\n  my ($test_list) = @_;\n", "entry_point": "group_element", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[6, 5], [2, 7], [2, 5], [8, 7], [9, 8], [3, 7]];\nmy $x0 = group_element($arg00);\nmy $v0 = {5 => [6, 2], 7 => [2, 8, 3], 8 => [9]};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[7, 6], [3, 8], [3, 6], [9, 8], [10, 9], [4, 8]];\nmy $x1 = group_element($arg10);\nmy $v1 = {6 => [7, 3], 8 => [3, 9, 4], 9 => [10]};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[8, 7], [4, 9], [4, 7], [10, 9], [11, 10], [5, 9]];\nmy $x2 = group_element($arg20);\nmy $v2 = {7 => [8, 4], 9 => [4, 10, 5], 10 => [11]};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/692", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the last two digits in factorial of a given number.\n#\n# >>> last_two_digits(7)\n# 40\n# >>> last_two_digits(5)\n# 20\n# >>> last_two_digits(2)\n# 2\nsub last_two_digits\n{\n  my ($n) = @_;\n", "entry_point": "last_two_digits", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 7;\nmy $x0 = last_two_digits($arg00);\nmy $v0 = 40;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $x1 = last_two_digits($arg10);\nmy $v1 = 20;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $x2 = last_two_digits($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the last two digits in factorial of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/693", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove multiple spaces in a string by using regex.\n#\n# >>> remove_multiple_spaces(\"Google      Assistant\")\n# \"Google Assistant\"\n# >>> remove_multiple_spaces(\"Quad      Core\")\n# \"Quad Core\"\n# >>> remove_multiple_spaces(\"ChromeCast      Built-in\")\n# \"ChromeCast Built-in\"\nsub remove_multiple_spaces\n{\n  my ($text1) = @_;\n", "entry_point": "remove_multiple_spaces", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Google      Assistant\";\nmy $x0 = remove_multiple_spaces($arg00);\nmy $v0 = \"Google Assistant\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Quad      Core\";\nmy $x1 = remove_multiple_spaces($arg10);\nmy $v1 = \"Quad Core\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"ChromeCast      Built-in\";\nmy $x2 = remove_multiple_spaces($arg20);\nmy $v2 = \"ChromeCast Built-in\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove multiple spaces in a string by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/694", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract unique values from the given dictionary values.\n#\n# >>> extract_unique({\"msm\" => [5, 6, 7, 8], \"is\" => [10, 11, 7, 5], \"best\" => [6, 12, 10, 8], \"for\" => [1, 2, 5]})\n# [1, 2, 5, 6, 7, 8, 10, 11, 12]\n# >>> extract_unique({\"Built\" => [7, 1, 9, 4], \"for\" => [11, 21, 36, 14, 9], \"ISP\" => [4, 1, 21, 39, 47], \"TV\" => [1, 32, 38]})\n# [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\n# >>> extract_unique({\"F\" => [11, 13, 14, 17], \"A\" => [12, 11, 15, 18], \"N\" => [19, 21, 15, 36], \"G\" => [37, 36, 35]})\n# [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]\nsub extract_unique\n{\n  my ($test_dict) = @_;\n", "entry_point": "extract_unique", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {\"msm\" => [5, 6, 7, 8], \"is\" => [10, 11, 7, 5], \"best\" => [6, 12, 10, 8], \"for\" => [1, 2, 5]};\nmy $x0 = extract_unique($arg00);\nmy $v0 = [1, 2, 5, 6, 7, 8, 10, 11, 12];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {\"Built\" => [7, 1, 9, 4], \"for\" => [11, 21, 36, 14, 9], \"ISP\" => [4, 1, 21, 39, 47], \"TV\" => [1, 32, 38]};\nmy $x1 = extract_unique($arg10);\nmy $v1 = [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {\"F\" => [11, 13, 14, 17], \"A\" => [12, 11, 15, 18], \"N\" => [19, 21, 15, 36], \"G\" => [37, 36, 35]};\nmy $x2 = extract_unique($arg20);\nmy $v2 = [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract unique values from the given dictionary values.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/695", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n#\n# >>> check_greater([10, 4, 5], [13, 5, 18])\n# 1\n# >>> check_greater([1, 2, 3], [2, 1, 4])\n# 0\n# >>> check_greater([4, 5, 6], [5, 6, 7])\n# 1\nsub check_greater\n{\n  my ($test_tup1, $test_tup2) = @_;\n", "entry_point": "check_greater", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 4, 5];\nmy $arg01 = [13, 5, 18];\nmy $x0 = check_greater($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3];\nmy $arg11 = [2, 1, 4];\nmy $x1 = check_greater($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [4, 5, 6];\nmy $arg21 = [5, 6, 7];\nmy $x2 = check_greater($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/696", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to zip two given lists of lists.\n#\n# >>> zip_list([[1, 3], [5, 7], [9, 11]], [[2, 4], [6, 8], [10, 12, 14]])\n# [[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\n# >>> zip_list([[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]])\n# [[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\n# >>> zip_list([[\"a\", \"b\"], [\"c\", \"d\"]], [[\"e\", \"f\"], [\"g\", \"h\"]])\n# [[\"a\", \"b\", \"e\", \"f\"], [\"c\", \"d\", \"g\", \"h\"]]\nsub zip_list\n{\n  my ($list1, $list2) = @_;\n", "entry_point": "zip_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 3], [5, 7], [9, 11]];\nmy $arg01 = [[2, 4], [6, 8], [10, 12, 14]];\nmy $x0 = zip_list($arg00, $arg01);\nmy $v0 = [[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2], [3, 4], [5, 6]];\nmy $arg11 = [[7, 8], [9, 10], [11, 12]];\nmy $x1 = zip_list($arg10, $arg11);\nmy $v1 = [[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"a\", \"b\"], [\"c\", \"d\"]];\nmy $arg21 = [[\"e\", \"f\"], [\"g\", \"h\"]];\nmy $x2 = zip_list($arg20, $arg21);\nmy $v2 = [[\"a\", \"b\", \"e\", \"f\"], [\"c\", \"d\", \"g\", \"h\"]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to zip two given lists of lists.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/697", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find number of even elements in the given list using lambda function.\n#\n# >>> count_even([1, 2, 3, 5, 7, 8, 9, 10])\n# 3\n# >>> count_even([10, 15, 14, 13, -18, 12, -20])\n# 5\n# >>> count_even([1, 2, 4, 8, 9])\n# 3\nsub count_even\n{\n  my ($array_nums) = @_;\n", "entry_point": "count_even", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 5, 7, 8, 9, 10];\nmy $x0 = count_even($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [10, 15, 14, 13, -18, 12, -20];\nmy $x1 = count_even($arg10);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 4, 8, 9];\nmy $x2 = count_even($arg20);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find number of even elements in the given list using lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/698", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n#\n# >>> sort_dict_item({[5, 6] => 3, [2, 3] => 9, [8, 4] => 10, [6, 4] => 12})\n# {[2, 3] => 9, [6, 4] => 12, [5, 6] => 3, [8, 4] => 10}\n# >>> sort_dict_item({[6, 7] => 4, [3, 4] => 10, [9, 5] => 11, [7, 5] => 13})\n# {[3, 4] => 10, [7, 5] => 13, [6, 7] => 4, [9, 5] => 11}\n# >>> sort_dict_item({[7, 8] => 5, [4, 5] => 11, [10, 6] => 12, [8, 6] => 14})\n# {[4, 5] => 11, [8, 6] => 14, [7, 8] => 5, [10, 6] => 12}\nsub sort_dict_item\n{\n  my ($test_dict) = @_;\n", "entry_point": "sort_dict_item", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {[5, 6] => 3, [2, 3] => 9, [8, 4] => 10, [6, 4] => 12};\nmy $x0 = sort_dict_item($arg00);\nmy $v0 = {[2, 3] => 9, [6, 4] => 12, [5, 6] => 3, [8, 4] => 10};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {[6, 7] => 4, [3, 4] => 10, [9, 5] => 11, [7, 5] => 13};\nmy $x1 = sort_dict_item($arg10);\nmy $v1 = {[3, 4] => 10, [7, 5] => 13, [6, 7] => 4, [9, 5] => 11};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {[7, 8] => 5, [4, 5] => 11, [10, 6] => 12, [8, 6] => 14};\nmy $x2 = sort_dict_item($arg20);\nmy $v2 = {[4, 5] => 11, [8, 6] => 14, [7, 8] => 5, [10, 6] => 12};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/699", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the minimum number of swaps required to convert one binary string to another.\n#\n# >>> min_swaps(\"1101\", \"1110\")\n# 1\n# >>> min_swaps(\"1111\", \"0100\")\n# \"Not Possible\"\n# >>> min_swaps(\"1110000\", \"0001101\")\n# 3\nsub min_swaps\n{\n  my ($str1, $str2) = @_;\n", "entry_point": "min_swaps", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"1101\";\nmy $arg01 = \"1110\";\nmy $x0 = min_swaps($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"1111\";\nmy $arg11 = \"0100\";\nmy $x1 = min_swaps($arg10, $arg11);\nmy $v1 = \"Not Possible\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"1110000\";\nmy $arg21 = \"0001101\";\nmy $x2 = min_swaps($arg20, $arg21);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the minimum number of swaps required to convert one binary string to another.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/700", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count the number of elements in a list which are within a specific range.\n#\n# >>> count_range_in_list([10, 20, 30, 40, 40, 40, 70, 80, 99], 40, 100)\n# 6\n# >>> count_range_in_list([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"a\", \"e\")\n# 5\n# >>> count_range_in_list([7, 8, 9, 15, 17, 19, 45], 15, 20)\n# 3\nsub count_range_in_list\n{\n  my ($li, $min, $max) = @_;\n", "entry_point": "count_range_in_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 20, 30, 40, 40, 40, 70, 80, 99];\nmy $arg01 = 40;\nmy $arg02 = 100;\nmy $x0 = count_range_in_list($arg00, $arg01, $arg02);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\nmy $arg11 = \"a\";\nmy $arg12 = \"e\";\nmy $x1 = count_range_in_list($arg10, $arg11, $arg12);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [7, 8, 9, 15, 17, 19, 45];\nmy $arg21 = 15;\nmy $arg22 = 20;\nmy $x2 = count_range_in_list($arg20, $arg21, $arg22);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count the number of elements in a list which are within a specific range.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/701", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the equilibrium index of the given array.\n#\n# >>> equilibrium_index([1, 2, 3, 4, 1, 2, 3])\n# 3\n# >>> equilibrium_index([-7, 1, 5, 2, -4, 3, 0])\n# 3\n# >>> equilibrium_index([1, 2, 3])\n# -1\nsub equilibrium_index\n{\n  my ($arr) = @_;\n", "entry_point": "equilibrium_index", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 1, 2, 3];\nmy $x0 = equilibrium_index($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [-7, 1, 5, 2, -4, 3, 0];\nmy $x1 = equilibrium_index($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3];\nmy $x2 = equilibrium_index($arg20);\nmy $v2 = -1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the equilibrium index of the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/702", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n#\n# >>> removals([1, 3, 4, 9, 10, 11, 12, 17, 20], 9, 4)\n# 5\n# >>> removals([1, 5, 6, 2, 8], 5, 2)\n# 3\n# >>> removals([1, 2, 3, 4, 5, 6], 6, 3)\n# 2\nsub removals\n{\n  my ($arr, $n, $k) = @_;\n", "entry_point": "removals", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 4, 9, 10, 11, 12, 17, 20];\nmy $arg01 = 9;\nmy $arg02 = 4;\nmy $x0 = removals($arg00, $arg01, $arg02);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 5, 6, 2, 8];\nmy $arg11 = 5;\nmy $arg12 = 2;\nmy $x1 = removals($arg10, $arg11, $arg12);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 5, 6];\nmy $arg21 = 6;\nmy $arg22 = 3;\nmy $x2 = removals($arg20, $arg21, $arg22);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/703", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether the given key is present in the dictionary or not.\n#\n# >>> is_key_present({1 => 10, 2 => 20, 3 => 30, 4 => 40, 5 => 50, 6 => 60}, 5)\n# 1\n# >>> is_key_present({1 => 10, 2 => 20, 3 => 30, 4 => 40, 5 => 50, 6 => 60}, 6)\n# 1\n# >>> is_key_present({1 => 10, 2 => 20, 3 => 30, 4 => 40, 5 => 50, 6 => 60}, 10)\n# 0\nsub is_key_present\n{\n  my ($d, $x) = @_;\n", "entry_point": "is_key_present", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {1 => 10, 2 => 20, 3 => 30, 4 => 40, 5 => 50, 6 => 60};\nmy $arg01 = 5;\nmy $x0 = is_key_present($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {1 => 10, 2 => 20, 3 => 30, 4 => 40, 5 => 50, 6 => 60};\nmy $arg11 = 6;\nmy $x1 = is_key_present($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {1 => 10, 2 => 20, 3 => 30, 4 => 40, 5 => 50, 6 => 60};\nmy $arg21 = 10;\nmy $x2 = is_key_present($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether the given key is present in the dictionary or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/704", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate the harmonic sum of n-1.\n#\n# >>> harmonic_sum(10)\n# 2.9289682539682538\n# >>> harmonic_sum(4)\n# 2.083333333333333\n# >>> harmonic_sum(7)\n# 2.5928571428571425\nsub harmonic_sum\n{\n  my ($n) = @_;\n", "entry_point": "harmonic_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = harmonic_sum($arg00);\nmy $v0 = 2.9289682539682538;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = harmonic_sum($arg10);\nmy $v1 = 2.083333333333333;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 7;\nmy $x2 = harmonic_sum($arg20);\nmy $v2 = 2.5928571428571425;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate the harmonic sum of n-1.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/705", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort a list of lists by length and value.\n#\n# >>> sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])\n# [[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\n# >>> sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])\n# [[1], [7], [2, 3], [10, 11], [4, 5, 6]]\n# >>> sort_sublists([[\"python\"], [\"java\", \"C\", \"C++\"], [\"DBMS\"], [\"SQL\", \"HTML\"]])\n# [[\"DBMS\"], [\"python\"], [\"SQL\", \"HTML\"], [\"java\", \"C\", \"C++\"]]\nsub sort_sublists\n{\n  my ($list1) = @_;\n", "entry_point": "sort_sublists", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]];\nmy $x0 = sort_sublists($arg00);\nmy $v0 = [[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1], [2, 3], [4, 5, 6], [7], [10, 11]];\nmy $x1 = sort_sublists($arg10);\nmy $v1 = [[1], [7], [2, 3], [10, 11], [4, 5, 6]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"python\"], [\"java\", \"C\", \"C++\"], [\"DBMS\"], [\"SQL\", \"HTML\"]];\nmy $x2 = sort_sublists($arg20);\nmy $v2 = [[\"DBMS\"], [\"python\"], [\"SQL\", \"HTML\"], [\"java\", \"C\", \"C++\"]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort a list of lists by length and value.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/706", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find whether an array is subset of another array.\n#\n# >>> is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4)\n# 1\n# >>> is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3)\n# 1\n# >>> is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3)\n# 0\nsub is_subset\n{\n  my ($arr1, $m, $arr2, $n) = @_;\n", "entry_point": "is_subset", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [11, 1, 13, 21, 3, 7];\nmy $arg01 = 6;\nmy $arg02 = [11, 3, 7, 1];\nmy $arg03 = 4;\nmy $x0 = is_subset($arg00, $arg01, $arg02, $arg03);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5, 6];\nmy $arg11 = 6;\nmy $arg12 = [1, 2, 4];\nmy $arg13 = 3;\nmy $x1 = is_subset($arg10, $arg11, $arg12, $arg13);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [10, 5, 2, 23, 19];\nmy $arg21 = 5;\nmy $arg22 = [19, 5, 3];\nmy $arg23 = 3;\nmy $x2 = is_subset($arg20, $arg21, $arg22, $arg23);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find whether an array is subset of another array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/707", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the total set bits from 1 to n.\n#\n# >>> count_set_bits(16)\n# 33\n# >>> count_set_bits(2)\n# 2\n# >>> count_set_bits(14)\n# 28\nsub count_set_bits\n{\n  my ($n) = @_;\n", "entry_point": "count_set_bits", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 16;\nmy $x0 = count_set_bits($arg00);\nmy $v0 = 33;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = count_set_bits($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 14;\nmy $x2 = count_set_bits($arg20);\nmy $v2 = 28;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the total set bits from 1 to n.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/708", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to convert a string to a list.\n#\n# >>> convert(\"python program\")\n# [\"python\", \"program\"]\n# >>> convert(\"Data Analysis\")\n# [\"Data\", \"Analysis\"]\n# >>> convert(\"Hadoop Training\")\n# [\"Hadoop\", \"Training\"]\nsub convert\n{\n  my ($string) = @_;\n", "entry_point": "convert", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python program\";\nmy $x0 = convert($arg00);\nmy $v0 = [\"python\", \"program\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Data Analysis\";\nmy $x1 = convert($arg10);\nmy $v1 = [\"Data\", \"Analysis\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Hadoop Training\";\nmy $x2 = convert($arg20);\nmy $v2 = [\"Hadoop\", \"Training\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to convert a string to a list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/709", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count unique keys for each value present in the tuple.\n#\n# >>> get_unique([[3, 4], [1, 2], [2, 4], [8, 2], [7, 2], [8, 1], [9, 1], [8, 4], [10, 4]])\n# \"{4: 4, 2: 3, 1: 2}\"\n# >>> get_unique([[4, 5], [2, 3], [3, 5], [9, 3], [8, 3], [9, 2], [10, 2], [9, 5], [11, 5]])\n# \"{5: 4, 3: 3, 2: 2}\"\n# >>> get_unique([[6, 5], [3, 4], [2, 6], [11, 1], [8, 22], [8, 11], [4, 3], [14, 3], [11, 6]])\n# \"{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}\"\nsub get_unique\n{\n  my ($test_list) = @_;\n", "entry_point": "get_unique", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[3, 4], [1, 2], [2, 4], [8, 2], [7, 2], [8, 1], [9, 1], [8, 4], [10, 4]];\nmy $x0 = get_unique($arg00);\nmy $v0 = \"{4: 4, 2: 3, 1: 2}\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[4, 5], [2, 3], [3, 5], [9, 3], [8, 3], [9, 2], [10, 2], [9, 5], [11, 5]];\nmy $x1 = get_unique($arg10);\nmy $v1 = \"{5: 4, 3: 3, 2: 2}\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[6, 5], [3, 4], [2, 6], [11, 1], [8, 22], [8, 11], [4, 3], [14, 3], [11, 6]];\nmy $x2 = get_unique($arg20);\nmy $v2 = \"{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count unique keys for each value present in the tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/710", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to access the initial and last data of the given tuple record.\n#\n# >>> front_and_rear([10, 4, 5, 6, 7])\n# [10, 7]\n# >>> front_and_rear([1, 2, 3, 4, 5])\n# [1, 5]\n# >>> front_and_rear([6, 7, 8, 9, 10])\n# [6, 10]\nsub front_and_rear\n{\n  my ($test_tup) = @_;\n", "entry_point": "front_and_rear", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 4, 5, 6, 7];\nmy $x0 = front_and_rear($arg00);\nmy $v0 = [10, 7];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5];\nmy $x1 = front_and_rear($arg10);\nmy $v1 = [1, 5];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [6, 7, 8, 9, 10];\nmy $x2 = front_and_rear($arg20);\nmy $v2 = [6, 10];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to access the initial and last data of the given tuple record.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/711", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the product of digits of a number at even and odd places is equal or not.\n#\n# >>> product_equal(2841)\n# 1\n# >>> product_equal(1234)\n# 0\n# >>> product_equal(1212)\n# 0\nsub product_equal\n{\n  my ($n) = @_;\n", "entry_point": "product_equal", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2841;\nmy $x0 = product_equal($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1234;\nmy $x1 = product_equal($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1212;\nmy $x2 = product_equal($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the product of digits of a number at even and odd places is equal or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/712", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove duplicates from a list of lists.\n#\n# >>> remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\n# [[10, 20], [30, 56, 25], [33], [40]]\n# >>> remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"])\n# [\"a\", \"b\", \"c\"]\n# >>> remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1])\n# [1, 3, 5, 6]\nsub remove_duplicate\n{\n  my ($list1) = @_;\n", "entry_point": "remove_duplicate", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]];\nmy $x0 = remove_duplicate($arg00);\nmy $v0 = [[10, 20], [30, 56, 25], [33], [40]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"a\", \"b\", \"a\", \"c\", \"c\"];\nmy $x1 = remove_duplicate($arg10);\nmy $v1 = [\"a\", \"b\", \"c\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, 5, 6, 3, 5, 6, 1];\nmy $x2 = remove_duplicate($arg20);\nmy $v2 = [1, 3, 5, 6];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove duplicates from a list of lists.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/713", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if the given tuple contains all valid values or not.\n#\n# >>> check_valid([1, 1, 1, 1])\n# 1\n# >>> check_valid([1, 0, 1, 1])\n# 0\n# >>> check_valid([1, 1, 1, 1])\n# 1\nsub check_valid\n{\n  my ($test_tup) = @_;\n", "entry_point": "check_valid", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 1, 1, 1];\nmy $x0 = check_valid($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 0, 1, 1];\nmy $x1 = check_valid($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 1, 1, 1];\nmy $x2 = check_valid($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if the given tuple contains all valid values or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/714", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the number of distinct power of prime factor of given number.\n#\n# >>> count_fac(24)\n# 3\n# >>> count_fac(12)\n# 2\n# >>> count_fac(4)\n# 1\nsub count_fac\n{\n  my ($n) = @_;\n", "entry_point": "count_fac", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 24;\nmy $x0 = count_fac($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 12;\nmy $x1 = count_fac($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $x2 = count_fac($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the number of distinct power of prime factor of given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/715", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert the given string of integers into a tuple.\n#\n# >>> str_to_tuple(\"1, -5, 4, 6, 7\")\n# [1, -5, 4, 6, 7]\n# >>> str_to_tuple(\"1, 2, 3, 4, 5\")\n# [1, 2, 3, 4, 5]\n# >>> str_to_tuple(\"4, 6, 9, 11, 13, 14\")\n# [4, 6, 9, 11, 13, 14]\nsub str_to_tuple\n{\n  my ($test_str) = @_;\n", "entry_point": "str_to_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"1, -5, 4, 6, 7\";\nmy $x0 = str_to_tuple($arg00);\nmy $v0 = [1, -5, 4, 6, 7];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"1, 2, 3, 4, 5\";\nmy $x1 = str_to_tuple($arg10);\nmy $v1 = [1, 2, 3, 4, 5];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"4, 6, 9, 11, 13, 14\";\nmy $x2 = str_to_tuple($arg20);\nmy $v2 = [4, 6, 9, 11, 13, 14];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert the given string of integers into a tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/716", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the perimeter of a rombus.\n#\n# >>> rombus_perimeter(10)\n# 40\n# >>> rombus_perimeter(5)\n# 20\n# >>> rombus_perimeter(4)\n# 16\nsub rombus_perimeter\n{\n  my ($a) = @_;\n", "entry_point": "rombus_perimeter", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = rombus_perimeter($arg00);\nmy $v0 = 40;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $x1 = rombus_perimeter($arg10);\nmy $v1 = 20;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $x2 = rombus_perimeter($arg20);\nmy $v2 = 16;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the perimeter of a rombus.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/717", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate the standard deviation.\n#\n# >>> sd_calc([4, 2, 5, 8, 6])\n# 2.23606797749979\n# >>> sd_calc([1, 2, 3, 4, 5, 6, 7])\n# 2.160246899469287\n# >>> sd_calc([5, 9, 10, 15, 6, 4])\n# 4.070217029430577\nsub sd_calc\n{\n  my ($data) = @_;\n", "entry_point": "sd_calc", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [4, 2, 5, 8, 6];\nmy $x0 = sd_calc($arg00);\nmy $v0 = 2.23606797749979;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5, 6, 7];\nmy $x1 = sd_calc($arg10);\nmy $v1 = 2.160246899469287;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [5, 9, 10, 15, 6, 4];\nmy $x2 = sd_calc($arg20);\nmy $v2 = 4.070217029430577;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate the standard deviation.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/718", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to create a list taking alternate elements from another given list.\n#\n# >>> alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])\n# [\"red\", \"white\", \"orange\"]\n# >>> alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])\n# [2, 3, 0, 8, 4]\n# >>> alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# [1, 3, 5, 7, 9]\nsub alternate_elements\n{\n  my ($list1) = @_;\n", "entry_point": "alternate_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"red\", \"black\", \"white\", \"green\", \"orange\"];\nmy $x0 = alternate_elements($arg00);\nmy $v0 = [\"red\", \"white\", \"orange\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 0, 3, 4, 0, 2, 8, 3, 4, 2];\nmy $x1 = alternate_elements($arg10);\nmy $v1 = [2, 3, 0, 8, 4];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $x2 = alternate_elements($arg20);\nmy $v2 = [1, 3, 5, 7, 9];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to create a list taking alternate elements from another given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/719", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function that matches a string that has an a followed by zero or more b's.\n#\n# >>> text_match(\"ac\")\n# \"Found a match!\"\n# >>> text_match(\"dc\")\n# \"Not matched!\"\n# >>> text_match(\"abba\")\n# \"Found a match!\"\nsub text_match\n{\n  my ($text) = @_;\n", "entry_point": "text_match", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"ac\";\nmy $x0 = text_match($arg00);\nmy $v0 = \"Found a match!\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"dc\";\nmy $x1 = text_match($arg10);\nmy $v1 = \"Not matched!\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abba\";\nmy $x2 = text_match($arg20);\nmy $v2 = \"Found a match!\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function that matches a string that has an a followed by zero or more b's.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/720", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to add a dictionary to the tuple.\n#\n# >>> add_dict_to_tuple([4, 5, 6], {\"MSAM\" => 1, \"is\" => 2, \"best\" => 3})\n# [4, 5, 6, {\"MSAM\" => 1, \"is\" => 2, \"best\" => 3}]\n# >>> add_dict_to_tuple([1, 2, 3], {\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4})\n# [1, 2, 3, {\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4}]\n# >>> add_dict_to_tuple([8, 9, 10], {\"POS\" => 3, \"is\" => 4, \"Okay\" => 5})\n# [8, 9, 10, {\"POS\" => 3, \"is\" => 4, \"Okay\" => 5}]\nsub add_dict_to_tuple\n{\n  my ($test_tup, $test_dict) = @_;\n", "entry_point": "add_dict_to_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [4, 5, 6];\nmy $arg01 = {\"MSAM\" => 1, \"is\" => 2, \"best\" => 3};\nmy $x0 = add_dict_to_tuple($arg00, $arg01);\nmy $v0 = [4, 5, 6, {\"MSAM\" => 1, \"is\" => 2, \"best\" => 3}];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3];\nmy $arg11 = {\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4};\nmy $x1 = add_dict_to_tuple($arg10, $arg11);\nmy $v1 = [1, 2, 3, {\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4}];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [8, 9, 10];\nmy $arg21 = {\"POS\" => 3, \"is\" => 4, \"Okay\" => 5};\nmy $x2 = add_dict_to_tuple($arg20, $arg21);\nmy $v2 = [8, 9, 10, {\"POS\" => 3, \"is\" => 4, \"Okay\" => 5}];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to add a dictionary to the tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/721", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n#\n# >>> maxaverageofpath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3)\n# 5.2\n# >>> maxaverageofpath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3)\n# 6.2\n# >>> maxaverageofpath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3)\n# 7.2\nsub maxaverageofpath\n{\n  my ($cost, $n) = @_;\n", "entry_point": "maxaverageofpath", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 2, 3], [6, 5, 4], [7, 3, 9]];\nmy $arg01 = 3;\nmy $x0 = maxaverageofpath($arg00, $arg01);\nmy $v0 = 5.2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[2, 3, 4], [7, 6, 5], [8, 4, 10]];\nmy $arg11 = 3;\nmy $x1 = maxaverageofpath($arg10, $arg11);\nmy $v1 = 6.2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[3, 4, 5], [8, 7, 6], [9, 5, 11]];\nmy $arg21 = 3;\nmy $x2 = maxaverageofpath($arg20, $arg21);\nmy $v2 = 7.2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/722", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to filter the height and width of students which are stored in a dictionary.\n#\n# >>> filter_data({\"Cierra Vega\" => [6.2, 70], \"Alden Cantrell\" => [5.9, 65], \"Kierra Gentry\" => [6.0, 68], \"Pierre Cox\" => [5.8, 66]}, 6.0, 70)\n# {\"Cierra Vega\" => [6.2, 70]}\n# >>> filter_data({\"Cierra Vega\" => [6.2, 70], \"Alden Cantrell\" => [5.9, 65], \"Kierra Gentry\" => [6.0, 68], \"Pierre Cox\" => [5.8, 66]}, 5.9, 67)\n# {\"Cierra Vega\" => [6.2, 70], \"Kierra Gentry\" => [6.0, 68]}\n# >>> filter_data({\"Cierra Vega\" => [6.2, 70], \"Alden Cantrell\" => [5.9, 65], \"Kierra Gentry\" => [6.0, 68], \"Pierre Cox\" => [5.8, 66]}, 5.7, 64)\n# {\"Cierra Vega\" => [6.2, 70], \"Alden Cantrell\" => [5.9, 65], \"Kierra Gentry\" => [6.0, 68], \"Pierre Cox\" => [5.8, 66]}\nsub filter_data\n{\n  my ($students, $h, $w) = @_;\n", "entry_point": "filter_data", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {\"Cierra Vega\" => [6.2, 70], \"Alden Cantrell\" => [5.9, 65], \"Kierra Gentry\" => [6.0, 68], \"Pierre Cox\" => [5.8, 66]};\nmy $arg01 = 6.0;\nmy $arg02 = 70;\nmy $x0 = filter_data($arg00, $arg01, $arg02);\nmy $v0 = {\"Cierra Vega\" => [6.2, 70]};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {\"Cierra Vega\" => [6.2, 70], \"Alden Cantrell\" => [5.9, 65], \"Kierra Gentry\" => [6.0, 68], \"Pierre Cox\" => [5.8, 66]};\nmy $arg11 = 5.9;\nmy $arg12 = 67;\nmy $x1 = filter_data($arg10, $arg11, $arg12);\nmy $v1 = {\"Cierra Vega\" => [6.2, 70], \"Kierra Gentry\" => [6.0, 68]};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {\"Cierra Vega\" => [6.2, 70], \"Alden Cantrell\" => [5.9, 65], \"Kierra Gentry\" => [6.0, 68], \"Pierre Cox\" => [5.8, 66]};\nmy $arg21 = 5.7;\nmy $arg22 = 64;\nmy $x2 = filter_data($arg20, $arg21, $arg22);\nmy $v2 = {\"Cierra Vega\" => [6.2, 70], \"Alden Cantrell\" => [5.9, 65], \"Kierra Gentry\" => [6.0, 68], \"Pierre Cox\" => [5.8, 66]};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to filter the height and width of students which are stored in a dictionary.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/723", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count the same pair in two given lists using map function.\n#\n# >>> count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9])\n# 4\n# >>> count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n# 11\n# >>> count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n# 1\nsub count_same_pair\n{\n  my ($nums1, $nums2) = @_;\n", "entry_point": "count_same_pair", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6, 7, 8];\nmy $arg01 = [2, 2, 3, 1, 2, 6, 7, 9];\nmy $x0 = count_same_pair($arg00, $arg01);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8];\nmy $arg11 = [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8];\nmy $x1 = count_same_pair($arg10, $arg11);\nmy $v1 = 11;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 4, -6, -9, 11, -12, 14, -5, 17];\nmy $arg21 = [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8];\nmy $x2 = count_same_pair($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count the same pair in two given lists using map function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/724", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate the sum of all digits of the base to the specified power.\n#\n# >>> power_base_sum(2, 100)\n# 115\n# >>> power_base_sum(8, 10)\n# 37\n# >>> power_base_sum(8, 15)\n# 62\nsub power_base_sum\n{\n  my ($base, $power) = @_;\n", "entry_point": "power_base_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $arg01 = 100;\nmy $x0 = power_base_sum($arg00, $arg01);\nmy $v0 = 115;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 8;\nmy $arg11 = 10;\nmy $x1 = power_base_sum($arg10, $arg11);\nmy $v1 = 37;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 8;\nmy $arg21 = 15;\nmy $x2 = power_base_sum($arg20, $arg21);\nmy $v2 = 62;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate the sum of all digits of the base to the specified power.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/725", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract values between quotation marks of the given string by using regex.\n#\n# >>> extract_quotation(\"Cortex \\\"A53\\\" Based \\\"multi\\\" tasking \\\"Processor\\\"\")\n# [\"A53\", \"multi\", \"Processor\"]\n# >>> extract_quotation(\"Cast your \\\"favorite\\\" entertainment \\\"apps\\\"\")\n# [\"favorite\", \"apps\"]\n# >>> extract_quotation(\"Watch content \\\"4k Ultra HD\\\" resolution with \\\"HDR 10\\\" Support\")\n# [\"4k Ultra HD\", \"HDR 10\"]\nsub extract_quotation\n{\n  my ($text1) = @_;\n", "entry_point": "extract_quotation", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Cortex \\\"A53\\\" Based \\\"multi\\\" tasking \\\"Processor\\\"\";\nmy $x0 = extract_quotation($arg00);\nmy $v0 = [\"A53\", \"multi\", \"Processor\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Cast your \\\"favorite\\\" entertainment \\\"apps\\\"\";\nmy $x1 = extract_quotation($arg10);\nmy $v1 = [\"favorite\", \"apps\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Watch content \\\"4k Ultra HD\\\" resolution with \\\"HDR 10\\\" Support\";\nmy $x2 = extract_quotation($arg20);\nmy $v2 = [\"4k Ultra HD\", \"HDR 10\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract values between quotation marks of the given string by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/726", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to multiply the adjacent elements of the given tuple.\n#\n# >>> multiply_elements([1, 5, 7, 8, 10])\n# [5, 35, 56, 80]\n# >>> multiply_elements([2, 4, 5, 6, 7])\n# [8, 20, 30, 42]\n# >>> multiply_elements([12, 13, 14, 9, 15])\n# [156, 182, 126, 135]\nsub multiply_elements\n{\n  my ($test_tup) = @_;\n", "entry_point": "multiply_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 5, 7, 8, 10];\nmy $x0 = multiply_elements($arg00);\nmy $v0 = [5, 35, 56, 80];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 4, 5, 6, 7];\nmy $x1 = multiply_elements($arg10);\nmy $v1 = [8, 20, 30, 42];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [12, 13, 14, 9, 15];\nmy $x2 = multiply_elements($arg20);\nmy $v2 = [156, 182, 126, 135];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to multiply the adjacent elements of the given tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/727", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove all characters except letters and numbers using regex\n#\n# >>> remove_char(\"123abcjw:, .@! eiw\")\n# \"123abcjweiw\"\n# >>> remove_char(\"Hello1234:, ! Howare33u\")\n# \"Hello1234Howare33u\"\n# >>> remove_char(\"Cool543Triks@:, Make@987Trips\")\n# \"Cool543TriksMake987Trips\"\nsub remove_char\n{\n  my ($s) = @_;\n", "entry_point": "remove_char", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"123abcjw:, .@! eiw\";\nmy $x0 = remove_char($arg00);\nmy $v0 = \"123abcjweiw\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Hello1234:, ! Howare33u\";\nmy $x1 = remove_char($arg10);\nmy $v1 = \"Hello1234Howare33u\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Cool543Triks@:, Make@987Trips\";\nmy $x2 = remove_char($arg20);\nmy $v2 = \"Cool543TriksMake987Trips\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove all characters except letters and numbers using regex", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/728", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sum elements in two lists.\n#\n# >>> sum_list([10, 20, 30], [15, 25, 35])\n# [25, 45, 65]\n# >>> sum_list([1, 2, 3], [5, 6, 7])\n# [6, 8, 10]\n# >>> sum_list([15, 20, 30], [15, 45, 75])\n# [30, 65, 105]\nsub sum_list\n{\n  my ($lst1, $lst2) = @_;\n", "entry_point": "sum_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 20, 30];\nmy $arg01 = [15, 25, 35];\nmy $x0 = sum_list($arg00, $arg01);\nmy $v0 = [25, 45, 65];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3];\nmy $arg11 = [5, 6, 7];\nmy $x1 = sum_list($arg10, $arg11);\nmy $v1 = [6, 8, 10];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [15, 20, 30];\nmy $arg21 = [15, 45, 75];\nmy $x2 = sum_list($arg20, $arg21);\nmy $v2 = [30, 65, 105];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sum elements in two lists.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/729", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to add two lists using map and lambda function.\n#\n# >>> add_list([1, 2, 3], [4, 5, 6])\n# [5, 7, 9]\n# >>> add_list([1, 2], [3, 4])\n# [4, 6]\n# >>> add_list([10, 20], [50, 70])\n# [60, 90]\nsub add_list\n{\n  my ($nums1, $nums2) = @_;\n", "entry_point": "add_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $arg01 = [4, 5, 6];\nmy $x0 = add_list($arg00, $arg01);\nmy $v0 = [5, 7, 9];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2];\nmy $arg11 = [3, 4];\nmy $x1 = add_list($arg10, $arg11);\nmy $v1 = [4, 6];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [10, 20];\nmy $arg21 = [50, 70];\nmy $x2 = add_list($arg20, $arg21);\nmy $v2 = [60, 90];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to add two lists using map and lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/730", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove consecutive duplicates of a given list.\n#\n# >>> consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n# >>> consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])\n# [10, 15, 19, 18, 17, 26, 17, 18, 10]\n# >>> consecutive_duplicates([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"])\n# [\"a\", \"b\", \"c\", \"d\"]\nsub consecutive_duplicates\n{\n  my ($nums) = @_;\n", "entry_point": "consecutive_duplicates", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4];\nmy $x0 = consecutive_duplicates($arg00);\nmy $v0 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10];\nmy $x1 = consecutive_duplicates($arg10);\nmy $v1 = [10, 15, 19, 18, 17, 26, 17, 18, 10];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"];\nmy $x2 = consecutive_duplicates($arg20);\nmy $v2 = [\"a\", \"b\", \"c\", \"d\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove consecutive duplicates of a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/731", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the lateral surface area of a cone.\n#\n# >>> lateralsurface_cone(5, 12)\n# 204.20352248333654\n# >>> lateralsurface_cone(10, 15)\n# 566.3586699569488\n# >>> lateralsurface_cone(19, 17)\n# 1521.8090132193388\nsub lateralsurface_cone\n{\n  my ($r, $h) = @_;\n", "entry_point": "lateralsurface_cone", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $arg01 = 12;\nmy $x0 = lateralsurface_cone($arg00, $arg01);\nmy $v0 = 204.20352248333654;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = 15;\nmy $x1 = lateralsurface_cone($arg10, $arg11);\nmy $v1 = 566.3586699569488;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 19;\nmy $arg21 = 17;\nmy $x2 = lateralsurface_cone($arg20, $arg21);\nmy $v2 = 1521.8090132193388;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the lateral surface area of a cone.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/732", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n#\n# >>> replace_specialchar(\"Python language, Programming language.\")\n# \"Python:language::Programming:language:\"\n# >>> replace_specialchar(\"a b c,d e f\")\n# \"a:b:c:d:e:f\"\n# >>> replace_specialchar(\"ram reshma,ram rahim\")\n# \"ram:reshma:ram:rahim\"\nsub replace_specialchar\n{\n  my ($text) = @_;\n", "entry_point": "replace_specialchar", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Python language, Programming language.\";\nmy $x0 = replace_specialchar($arg00);\nmy $v0 = \"Python:language::Programming:language:\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"a b c,d e f\";\nmy $x1 = replace_specialchar($arg10);\nmy $v1 = \"a:b:c:d:e:f\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"ram reshma,ram rahim\";\nmy $x2 = replace_specialchar($arg20);\nmy $v2 = \"ram:reshma:ram:rahim\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/733", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the index of the first occurrence of a given number in a sorted array.\n#\n# >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n# 1\n# >>> find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n# 2\n# >>> find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6)\n# 4\nsub find_first_occurrence\n{\n  my ($a, $x) = @_;\n", "entry_point": "find_first_occurrence", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9];\nmy $arg01 = 5;\nmy $x0 = find_first_occurrence($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 3, 5, 5, 6, 6, 8, 9, 9, 9];\nmy $arg11 = 5;\nmy $x1 = find_first_occurrence($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 4, 1, 5, 6, 6, 8, 9, 9, 9];\nmy $arg21 = 6;\nmy $x2 = find_first_occurrence($arg20, $arg21);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/734", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find sum of products of all possible subarrays.\n#\n# >>> sum_of_subarray_prod([1, 2, 3], 3)\n# 20\n# >>> sum_of_subarray_prod([1, 2], 2)\n# 5\n# >>> sum_of_subarray_prod([1, 2, 3, 4], 4)\n# 84\nsub sum_of_subarray_prod\n{\n  my ($arr, $n) = @_;\n", "entry_point": "sum_of_subarray_prod", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $arg01 = 3;\nmy $x0 = sum_of_subarray_prod($arg00, $arg01);\nmy $v0 = 20;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2];\nmy $arg11 = 2;\nmy $x1 = sum_of_subarray_prod($arg10, $arg11);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4];\nmy $arg21 = 4;\nmy $x2 = sum_of_subarray_prod($arg20, $arg21);\nmy $v2 = 84;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find sum of products of all possible subarrays.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/735", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to toggle bits of the number except the first and the last bit.\n#\n# >>> toggle_middle_bits(9)\n# 15\n# >>> toggle_middle_bits(10)\n# 12\n# >>> toggle_middle_bits(11)\n# 13\nsub toggle_middle_bits\n{\n  my ($n) = @_;\n", "entry_point": "toggle_middle_bits", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 9;\nmy $x0 = toggle_middle_bits($arg00);\nmy $v0 = 15;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $x1 = toggle_middle_bits($arg10);\nmy $v1 = 12;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 11;\nmy $x2 = toggle_middle_bits($arg20);\nmy $v2 = 13;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to toggle bits of the number except the first and the last bit.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/736", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to locate the left insertion point for a specified value in sorted order.\n#\n# >>> left_insertion([1, 2, 4, 5], 6)\n# 4\n# >>> left_insertion([1, 2, 4, 5], 3)\n# 2\n# >>> left_insertion([1, 2, 4, 5], 7)\n# 4\nsub left_insertion\n{\n  my ($a, $x) = @_;\n", "entry_point": "left_insertion", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 4, 5];\nmy $arg01 = 6;\nmy $x0 = left_insertion($arg00, $arg01);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 4, 5];\nmy $arg11 = 3;\nmy $x1 = left_insertion($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 4, 5];\nmy $arg21 = 7;\nmy $x2 = left_insertion($arg20, $arg21);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to locate the left insertion point for a specified value in sorted order.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/737", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether the given string is starting with a vowel or not using regex.\n#\n# >>> check_str(\"annie\")\n# \"Valid\"\n# >>> check_str(\"dawood\")\n# \"Invalid\"\n# >>> check_str(\"Else\")\n# \"Valid\"\nsub check_str\n{\n  my ($string) = @_;\n", "entry_point": "check_str", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"annie\";\nmy $x0 = check_str($arg00);\nmy $v0 = \"Valid\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"dawood\";\nmy $x1 = check_str($arg10);\nmy $v1 = \"Invalid\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Else\";\nmy $x2 = check_str($arg20);\nmy $v2 = \"Valid\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether the given string is starting with a vowel or not using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/738", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate the geometric sum of n-1.\n#\n# >>> geometric_sum(7)\n# 1.9921875\n# >>> geometric_sum(4)\n# 1.9375\n# >>> geometric_sum(8)\n# 1.99609375\nsub geometric_sum\n{\n  my ($n) = @_;\n", "entry_point": "geometric_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 7;\nmy $x0 = geometric_sum($arg00);\nmy $v0 = 1.9921875;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = geometric_sum($arg10);\nmy $v1 = 1.9375;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 8;\nmy $x2 = geometric_sum($arg20);\nmy $v2 = 1.99609375;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate the geometric sum of n-1.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/739", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the index of smallest triangular number with n digits.\n#\n# >>> find_index(2)\n# 4\n# >>> find_index(3)\n# 14\n# >>> find_index(4)\n# 45\nsub find_index\n{\n  my ($n) = @_;\n", "entry_point": "find_index", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = find_index($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $x1 = find_index($arg10);\nmy $v1 = 14;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $x2 = find_index($arg20);\nmy $v2 = 45;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the index of smallest triangular number with n digits.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/740", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n#\n# >>> tuple_to_dict([1, 5, 7, 10, 13, 5])\n# {1 => 5, 7 => 10, 13 => 5}\n# >>> tuple_to_dict([1, 2, 3, 4, 5, 6])\n# {1 => 2, 3 => 4, 5 => 6}\n# >>> tuple_to_dict([7, 8, 9, 10, 11, 12])\n# {7 => 8, 9 => 10, 11 => 12}\nsub tuple_to_dict\n{\n  my ($test_tup) = @_;\n", "entry_point": "tuple_to_dict", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 5, 7, 10, 13, 5];\nmy $x0 = tuple_to_dict($arg00);\nmy $v0 = {1 => 5, 7 => 10, 13 => 5};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5, 6];\nmy $x1 = tuple_to_dict($arg10);\nmy $v1 = {1 => 2, 3 => 4, 5 => 6};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [7, 8, 9, 10, 11, 12];\nmy $x2 = tuple_to_dict($arg20);\nmy $v2 = {7 => 8, 9 => 10, 11 => 12};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/741", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether all the characters are same or not.\n#\n# >>> all_characters_same(\"python\")\n# 0\n# >>> all_characters_same(\"aaa\")\n# 1\n# >>> all_characters_same(\"data\")\n# 0\nsub all_characters_same\n{\n  my ($s) = @_;\n", "entry_point": "all_characters_same", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python\";\nmy $x0 = all_characters_same($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"aaa\";\nmy $x1 = all_characters_same($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"data\";\nmy $x2 = all_characters_same($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether all the characters are same or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/742", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to caluclate the area of a tetrahedron.\n#\n# >>> area_tetrahedron(3)\n# 15.588457268119894\n# >>> area_tetrahedron(20)\n# 692.8203230275509\n# >>> area_tetrahedron(10)\n# 173.20508075688772\nsub area_tetrahedron\n{\n  my ($side) = @_;\n", "entry_point": "area_tetrahedron", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $x0 = area_tetrahedron($arg00);\nmy $v0 = 15.588457268119894;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 20;\nmy $x1 = area_tetrahedron($arg10);\nmy $v1 = 692.8203230275509;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $x2 = area_tetrahedron($arg20);\nmy $v2 = 173.20508075688772;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to caluclate the area of a tetrahedron.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/743", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to rotate a given list by specified number of items to the right direction.\n#\n# >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)\n# [8, 9, 10, 1, 2, 3, 4, 5, 6]\n# >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)\n# [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n# >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)\n# [6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nsub rotate_right\n{\n  my ($list1, $m, $n) = @_;\n", "entry_point": "rotate_right", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $arg01 = 3;\nmy $arg02 = 4;\nmy $x0 = rotate_right($arg00, $arg01, $arg02);\nmy $v0 = [8, 9, 10, 1, 2, 3, 4, 5, 6];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $arg11 = 2;\nmy $arg12 = 2;\nmy $x1 = rotate_right($arg10, $arg11, $arg12);\nmy $v1 = [9, 10, 1, 2, 3, 4, 5, 6, 7, 8];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $arg21 = 5;\nmy $arg22 = 2;\nmy $x2 = rotate_right($arg20, $arg21, $arg22);\nmy $v2 = [6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to rotate a given list by specified number of items to the right direction.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/744", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if the given tuple has any \"none\" value or not.\n#\n# >>> check_none([10, 4, 5, 6, \"none\"])\n# 1\n# >>> check_none([7, 8, 9, 11, 14])\n# 0\n# >>> check_none([1, 2, 3, 4, \"none\"])\n# 1\nsub check_none\n{\n  my ($test_tup) = @_;\n", "entry_point": "check_none", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 4, 5, 6, \"none\"];\nmy $x0 = check_none($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [7, 8, 9, 11, 14];\nmy $x1 = check_none($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, \"none\"];\nmy $x2 = check_none($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if the given tuple has any \"none\" value or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/745", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find numbers within a given range where every number is divisible by every digit it contains.\n#\n# >>> divisible_by_digits(1, 22)\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n# >>> divisible_by_digits(1, 15)\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n# >>> divisible_by_digits(20, 25)\n# [22, 24]\nsub divisible_by_digits\n{\n  my ($startnum, $endnum) = @_;\n", "entry_point": "divisible_by_digits", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 22;\nmy $x0 = divisible_by_digits($arg00, $arg01);\nmy $v0 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 15;\nmy $x1 = divisible_by_digits($arg10, $arg11);\nmy $v1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 20;\nmy $arg21 = 25;\nmy $x2 = divisible_by_digits($arg20, $arg21);\nmy $v2 = [22, 24];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/746", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find area of a sector.\n#\n# >>> sector_area(4, 45)\n# 6.285714285714286\n# >>> sector_area(9, 45)\n# 31.82142857142857\n# >>> sector_area(9, 360)\n# \"none\"\nsub sector_area\n{\n  my ($r, $a) = @_;\n", "entry_point": "sector_area", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $arg01 = 45;\nmy $x0 = sector_area($arg00, $arg01);\nmy $v0 = 6.285714285714286;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 9;\nmy $arg11 = 45;\nmy $x1 = sector_area($arg10, $arg11);\nmy $v1 = 31.82142857142857;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 9;\nmy $arg21 = 360;\nmy $x2 = sector_area($arg20, $arg21);\nmy $v2 = \"none\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find area of a sector.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/747", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the longest common subsequence for the given three string sequence.\n#\n# >>> lcs_of_three(\"AGGT12\", \"12TXAYB\", \"12XBA\", 6, 7, 5)\n# 2\n# >>> lcs_of_three(\"Reels\", \"Reelsfor\", \"ReelsforReels\", 5, 8, 13)\n# 5\n# >>> lcs_of_three(\"abcd1e2\", \"bc12ea\", \"bd1ea\", 7, 6, 5)\n# 3\nsub lcs_of_three\n{\n  my ($x, $y, $z, $m, $n, $o) = @_;\n", "entry_point": "lcs_of_three", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"AGGT12\";\nmy $arg01 = \"12TXAYB\";\nmy $arg02 = \"12XBA\";\nmy $arg03 = 6;\nmy $arg04 = 7;\nmy $arg05 = 5;\nmy $x0 = lcs_of_three($arg00, $arg01, $arg02, $arg03, $arg04, $arg05);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Reels\";\nmy $arg11 = \"Reelsfor\";\nmy $arg12 = \"ReelsforReels\";\nmy $arg13 = 5;\nmy $arg14 = 8;\nmy $arg15 = 13;\nmy $x1 = lcs_of_three($arg10, $arg11, $arg12, $arg13, $arg14, $arg15);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abcd1e2\";\nmy $arg21 = \"bc12ea\";\nmy $arg22 = \"bd1ea\";\nmy $arg23 = 7;\nmy $arg24 = 6;\nmy $arg25 = 5;\nmy $x2 = lcs_of_three($arg20, $arg21, $arg22, $arg23, $arg24, $arg25);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the longest common subsequence for the given three string sequence.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/748", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to put spaces between words starting with capital letters in a given string by using regex.\n#\n# >>> capital_words_spaces(\"Python\")\n# \"Python\"\n# >>> capital_words_spaces(\"PythonProgrammingExamples\")\n# \"Python Programming Examples\"\n# >>> capital_words_spaces(\"GetReadyToBeCodingFreak\")\n# \"Get Ready To Be Coding Freak\"\nsub capital_words_spaces\n{\n  my ($str1) = @_;\n", "entry_point": "capital_words_spaces", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Python\";\nmy $x0 = capital_words_spaces($arg00);\nmy $v0 = \"Python\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"PythonProgrammingExamples\";\nmy $x1 = capital_words_spaces($arg10);\nmy $v1 = \"Python Programming Examples\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"GetReadyToBeCodingFreak\";\nmy $x2 = capital_words_spaces($arg20);\nmy $v2 = \"Get Ready To Be Coding Freak\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to put spaces between words starting with capital letters in a given string by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/749", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort a given list of strings of numbers numerically.\n#\n# >>> sort_numeric_strings([\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"])\n# [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n# >>> sort_numeric_strings([\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"])\n# [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n# >>> sort_numeric_strings([\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"])\n# [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\nsub sort_numeric_strings\n{\n  my ($nums_str) = @_;\n", "entry_point": "sort_numeric_strings", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"];\nmy $x0 = sort_numeric_strings($arg00);\nmy $v0 = [-500, -12, 0, 4, 7, 12, 45, 100, 200];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"];\nmy $x1 = sort_numeric_strings($arg10);\nmy $v1 = [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"];\nmy $x2 = sort_numeric_strings($arg20);\nmy $v2 = [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort a given list of strings of numbers numerically.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/750", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to add the given tuple to the given list.\n#\n# >>> add_tuple([5, 6, 7], [9, 10])\n# [5, 6, 7, 9, 10]\n# >>> add_tuple([6, 7, 8], [10, 11])\n# [6, 7, 8, 10, 11]\n# >>> add_tuple([7, 8, 9], [11, 12])\n# [7, 8, 9, 11, 12]\nsub add_tuple\n{\n  my ($test_list, $test_tup) = @_;\n", "entry_point": "add_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 6, 7];\nmy $arg01 = [9, 10];\nmy $x0 = add_tuple($arg00, $arg01);\nmy $v0 = [5, 6, 7, 9, 10];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [6, 7, 8];\nmy $arg11 = [10, 11];\nmy $x1 = add_tuple($arg10, $arg11);\nmy $v1 = [6, 7, 8, 10, 11];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [7, 8, 9];\nmy $arg21 = [11, 12];\nmy $x2 = add_tuple($arg20, $arg21);\nmy $v2 = [7, 8, 9, 11, 12];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to add the given tuple to the given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/751", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if the given array represents min heap or not.\n#\n# >>> check_min_heap([1, 2, 3, 4, 5, 6], 0)\n# 1\n# >>> check_min_heap([2, 3, 4, 5, 10, 15], 0)\n# 1\n# >>> check_min_heap([2, 10, 4, 5, 3, 15], 0)\n# 0\nsub check_min_heap\n{\n  my ($arr, $i) = @_;\n", "entry_point": "check_min_heap", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6];\nmy $arg01 = 0;\nmy $x0 = check_min_heap($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 3, 4, 5, 10, 15];\nmy $arg11 = 0;\nmy $x1 = check_min_heap($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 10, 4, 5, 3, 15];\nmy $arg21 = 0;\nmy $x2 = check_min_heap($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if the given array represents min heap or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/752", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the nth jacobsthal number.\n#\n# >>> jacobsthal_num(5)\n# 11\n# >>> jacobsthal_num(2)\n# 1\n# >>> jacobsthal_num(4)\n# 5\nsub jacobsthal_num\n{\n  my ($n) = @_;\n", "entry_point": "jacobsthal_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = jacobsthal_num($arg00);\nmy $v0 = 11;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = jacobsthal_num($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $x2 = jacobsthal_num($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the nth jacobsthal number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/753", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find minimum k records from tuple list.\n#\n# >>> min_k([[\"Manjeet\", 10], [\"Akshat\", 4], [\"Akash\", 2], [\"Nikhil\", 8]], 2)\n# [[\"Akash\", 2], [\"Akshat\", 4]]\n# >>> min_k([[\"Sanjeev\", 11], [\"Angat\", 5], [\"Akash\", 3], [\"Nepin\", 9]], 3)\n# [[\"Akash\", 3], [\"Angat\", 5], [\"Nepin\", 9]]\n# >>> min_k([[\"tanmay\", 14], [\"Amer\", 11], [\"Ayesha\", 9], [\"SKD\", 16]], 1)\n# [[\"Ayesha\", 9]]\nsub min_k\n{\n  my ($test_list, $k) = @_;\n", "entry_point": "min_k", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"Manjeet\", 10], [\"Akshat\", 4], [\"Akash\", 2], [\"Nikhil\", 8]];\nmy $arg01 = 2;\nmy $x0 = min_k($arg00, $arg01);\nmy $v0 = [[\"Akash\", 2], [\"Akshat\", 4]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"Sanjeev\", 11], [\"Angat\", 5], [\"Akash\", 3], [\"Nepin\", 9]];\nmy $arg11 = 3;\nmy $x1 = min_k($arg10, $arg11);\nmy $v1 = [[\"Akash\", 3], [\"Angat\", 5], [\"Nepin\", 9]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"tanmay\", 14], [\"Amer\", 11], [\"Ayesha\", 9], [\"SKD\", 16]];\nmy $arg21 = 1;\nmy $x2 = min_k($arg20, $arg21);\nmy $v2 = [[\"Ayesha\", 9]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find minimum k records from tuple list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/754", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find common index elements from three lists.\n#\n# >>> extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])\n# [1, 7]\n# >>> extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7])\n# [1, 6]\n# >>> extract_index_list([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])\n# [1, 5]\nsub extract_index_list\n{\n  my ($l1, $l2, $l3) = @_;\n", "entry_point": "extract_index_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 1, 3, 4, 5, 6, 7];\nmy $arg01 = [0, 1, 2, 3, 4, 5, 7];\nmy $arg02 = [0, 1, 2, 3, 4, 5, 7];\nmy $x0 = extract_index_list($arg00, $arg01, $arg02);\nmy $v0 = [1, 7];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 1, 3, 4, 5, 6, 7];\nmy $arg11 = [0, 1, 2, 3, 4, 6, 5];\nmy $arg12 = [0, 1, 2, 3, 4, 6, 7];\nmy $x1 = extract_index_list($arg10, $arg11, $arg12);\nmy $v1 = [1, 6];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 1, 3, 4, 6, 5, 6];\nmy $arg21 = [0, 1, 2, 3, 4, 5, 7];\nmy $arg22 = [0, 1, 2, 3, 4, 5, 7];\nmy $x2 = extract_index_list($arg20, $arg21, $arg22);\nmy $v2 = [1, 5];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find common index elements from three lists.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/755", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the second smallest number in a list.\n#\n# >>> second_smallest([1, 2, -8, -2, 0, -2])\n# -2\n# >>> second_smallest([1, 1, -0.5, 0, 2, -2, -2])\n# -0.5\n# >>> second_smallest([2, 2])\n# \"none\"\nsub second_smallest\n{\n  my ($numbers) = @_;\n", "entry_point": "second_smallest", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, -8, -2, 0, -2];\nmy $x0 = second_smallest($arg00);\nmy $v0 = -2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 1, -0.5, 0, 2, -2, -2];\nmy $x1 = second_smallest($arg10);\nmy $v1 = -0.5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 2];\nmy $x2 = second_smallest($arg20);\nmy $v2 = \"none\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the second smallest number in a list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/756", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function that matches a string that has an a followed by zero or one 'b'.\n#\n# >>> text_match_zero_one(\"ac\")\n# \"Found a match!\"\n# >>> text_match_zero_one(\"dc\")\n# \"Not matched!\"\n# >>> text_match_zero_one(\"abbbba\")\n# \"Found a match!\"\nsub text_match_zero_one\n{\n  my ($text) = @_;\n", "entry_point": "text_match_zero_one", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"ac\";\nmy $x0 = text_match_zero_one($arg00);\nmy $v0 = \"Found a match!\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"dc\";\nmy $x1 = text_match_zero_one($arg10);\nmy $v1 = \"Not matched!\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abbbba\";\nmy $x2 = text_match_zero_one($arg20);\nmy $v2 = \"Found a match!\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function that matches a string that has an a followed by zero or one 'b'.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/757", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count the pairs of reverse strings in the given string list.\n#\n# >>> count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])\n# \"2\"\n# >>> count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"])\n# \"1\"\n# >>> count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"])\n# \"2\"\nsub count_reverse_pairs\n{\n  my ($test_list) = @_;\n", "entry_point": "count_reverse_pairs", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"];\nmy $x0 = count_reverse_pairs($arg00);\nmy $v0 = \"2\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"geeks\", \"best\", \"for\", \"skeeg\"];\nmy $x1 = count_reverse_pairs($arg10);\nmy $v1 = \"1\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"makes\", \"best\", \"sekam\", \"for\", \"rof\"];\nmy $x2 = count_reverse_pairs($arg20);\nmy $v2 = \"2\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count the pairs of reverse strings in the given string list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/758", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count number of unique lists within a list.\n#\n# >>> unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])\n# {[1, 3] => 2, [5, 7] => 2, [13, 15, 17] => 1, [9, 11] => 1}\n# >>> unique_sublists([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]])\n# {[\"green\", \"orange\"] => 2, [\"black\"] => 1, [\"white\"] => 1}\n# >>> unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])\n# {[10, 20, 30, 40] => 1, [60, 70, 50, 50] => 1, [90, 100, 200] => 1}\nsub unique_sublists\n{\n  my ($list1) = @_;\n", "entry_point": "unique_sublists", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]];\nmy $x0 = unique_sublists($arg00);\nmy $v0 = {[1, 3] => 2, [5, 7] => 2, [13, 15, 17] => 1, [9, 11] => 1};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]];\nmy $x1 = unique_sublists($arg10);\nmy $v1 = {[\"green\", \"orange\"] => 2, [\"black\"] => 1, [\"white\"] => 1};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]];\nmy $x2 = unique_sublists($arg20);\nmy $v2 = {[10, 20, 30, 40] => 1, [60, 70, 50, 50] => 1, [90, 100, 200] => 1};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count number of unique lists within a list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/759", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check a decimal with a precision of 2.\n#\n# >>> is_decimal(\"123.11\")\n# 1\n# >>> is_decimal(\"e666.86\")\n# 0\n# >>> is_decimal(\"3.124587\")\n# 0\nsub is_decimal\n{\n  my ($num) = @_;\n", "entry_point": "is_decimal", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"123.11\";\nmy $x0 = is_decimal($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"e666.86\";\nmy $x1 = is_decimal($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"3.124587\";\nmy $x2 = is_decimal($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check a decimal with a precision of 2.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/760", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether an array contains only one distinct element or not.\n#\n# >>> unique_element([1, 1, 1], 3)\n# \"YES\"\n# >>> unique_element([1, 2, 1, 2], 4)\n# \"NO\"\n# >>> unique_element([1, 2, 3, 4, 5], 5)\n# \"NO\"\nsub unique_element\n{\n  my ($arr, $n) = @_;\n", "entry_point": "unique_element", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 1, 1];\nmy $arg01 = 3;\nmy $x0 = unique_element($arg00, $arg01);\nmy $v0 = \"YES\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 1, 2];\nmy $arg11 = 4;\nmy $x1 = unique_element($arg10, $arg11);\nmy $v1 = \"NO\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 5];\nmy $arg21 = 5;\nmy $x2 = unique_element($arg20, $arg21);\nmy $v2 = \"NO\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether an array contains only one distinct element or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/761", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to caluclate arc length of an angle.\n#\n# >>> arc_length(9, 45)\n# 3.5357142857142856\n# >>> arc_length(9, 480)\n# \"none\"\n# >>> arc_length(5, 270)\n# 11.785714285714285\nsub arc_length\n{\n  my ($d, $a) = @_;\n", "entry_point": "arc_length", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 9;\nmy $arg01 = 45;\nmy $x0 = arc_length($arg00, $arg01);\nmy $v0 = 3.5357142857142856;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 9;\nmy $arg11 = 480;\nmy $x1 = arc_length($arg10, $arg11);\nmy $v1 = \"none\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $arg21 = 270;\nmy $x2 = arc_length($arg20, $arg21);\nmy $v2 = 11.785714285714285;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to caluclate arc length of an angle.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/762", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether the given month number contains 30 days or not.\n#\n# >>> check_monthnumber_number(6)\n# 1\n# >>> check_monthnumber_number(2)\n# 0\n# >>> check_monthnumber_number(12)\n# 0\nsub check_monthnumber_number\n{\n  my ($monthnum3) = @_;\n", "entry_point": "check_monthnumber_number", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 6;\nmy $x0 = check_monthnumber_number($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = check_monthnumber_number($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 12;\nmy $x2 = check_monthnumber_number($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether the given month number contains 30 days or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/763", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the minimum difference between any two elements in a given array.\n#\n# >>> find_min_diff([1, 5, 3, 19, 18, 25], 6)\n# 1\n# >>> find_min_diff([4, 3, 2, 6], 4)\n# 1\n# >>> find_min_diff([30, 5, 20, 9], 4)\n# 4\nsub find_min_diff\n{\n  my ($arr, $n) = @_;\n", "entry_point": "find_min_diff", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 5, 3, 19, 18, 25];\nmy $arg01 = 6;\nmy $x0 = find_min_diff($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 3, 2, 6];\nmy $arg11 = 4;\nmy $x1 = find_min_diff($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [30, 5, 20, 9];\nmy $arg21 = 4;\nmy $x2 = find_min_diff($arg20, $arg21);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the minimum difference between any two elements in a given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/764", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count numeric values in a given string.\n#\n# >>> number_ctr(\"program2bedone\")\n# 1\n# >>> number_ctr(\"3wonders\")\n# 1\n# >>> number_ctr(\"123\")\n# 3\nsub number_ctr\n{\n  my ($str) = @_;\n", "entry_point": "number_ctr", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"program2bedone\";\nmy $x0 = number_ctr($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"3wonders\";\nmy $x1 = number_ctr($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"123\";\nmy $x2 = number_ctr($arg20);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count numeric values in a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/765", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find nth polite number.\n#\n# >>> is_polite(7)\n# 11\n# >>> is_polite(4)\n# 7\n# >>> is_polite(9)\n# 13\nsub is_polite\n{\n  my ($n) = @_;\n", "entry_point": "is_polite", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 7;\nmy $x0 = is_polite($arg00);\nmy $v0 = 11;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = is_polite($arg10);\nmy $v1 = 7;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 9;\nmy $x2 = is_polite($arg20);\nmy $v2 = 13;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find nth polite number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/766", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to iterate over all pairs of consecutive items in a given list.\n#\n# >>> pair_wise([1, 1, 2, 3, 3, 4, 4, 5])\n# [[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]\n# >>> pair_wise([1, 5, 7, 9, 10])\n# [[1, 5], [5, 7], [7, 9], [9, 10]]\n# >>> pair_wise([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]\nsub pair_wise\n{\n  my ($l1) = @_;\n", "entry_point": "pair_wise", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 1, 2, 3, 3, 4, 4, 5];\nmy $x0 = pair_wise($arg00);\nmy $v0 = [[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 5, 7, 9, 10];\nmy $x1 = pair_wise($arg10);\nmy $v1 = [[1, 5], [5, 7], [7, 9], [9, 10]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $x2 = pair_wise($arg20);\nmy $v2 = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to iterate over all pairs of consecutive items in a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/767", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n#\n# >>> get_pairs_count([1, 1, 1, 1], 4, 2)\n# 6\n# >>> get_pairs_count([1, 5, 7, -1, 5], 5, 6)\n# 3\n# >>> get_pairs_count([1, -2, 3], 3, 1)\n# 1\nsub get_pairs_count\n{\n  my ($arr, $n, $sum) = @_;\n", "entry_point": "get_pairs_count", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 1, 1, 1];\nmy $arg01 = 4;\nmy $arg02 = 2;\nmy $x0 = get_pairs_count($arg00, $arg01, $arg02);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 5, 7, -1, 5];\nmy $arg11 = 5;\nmy $arg12 = 6;\nmy $x1 = get_pairs_count($arg10, $arg11, $arg12);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, -2, 3];\nmy $arg21 = 3;\nmy $arg22 = 1;\nmy $x2 = get_pairs_count($arg20, $arg21, $arg22);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the number of pairs whose sum is equal to \u2018sum\u2019.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/768", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check for odd parity of a given number.\n#\n# >>> check_odd_parity(13)\n# 1\n# >>> check_odd_parity(21)\n# 1\n# >>> check_odd_parity(18)\n# 0\nsub check_odd_parity\n{\n  my ($x) = @_;\n", "entry_point": "check_odd_parity", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 13;\nmy $x0 = check_odd_parity($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 21;\nmy $x1 = check_odd_parity($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 18;\nmy $x2 = check_odd_parity($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check for odd parity of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/769", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to get the difference between two lists.\n#\n# >>> diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])\n# [10, 20, 30, 15]\n# >>> diff([1, 2, 3, 4, 5], [6, 7, 1])\n# [2, 3, 4, 5, 6, 7]\n# >>> diff([1, 2, 3], [6, 7, 1])\n# [2, 3, 6, 7]\nsub diff\n{\n  my ($li1, $li2) = @_;\n", "entry_point": "diff", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 15, 20, 25, 30, 35, 40];\nmy $arg01 = [25, 40, 35];\nmy $x0 = diff($arg00, $arg01);\nmy $v0 = [10, 20, 30, 15];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5];\nmy $arg11 = [6, 7, 1];\nmy $x1 = diff($arg10, $arg11);\nmy $v1 = [2, 3, 4, 5, 6, 7];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3];\nmy $arg21 = [6, 7, 1];\nmy $x2 = diff($arg20, $arg21);\nmy $v2 = [2, 3, 6, 7];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to get the difference between two lists.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/770", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of fourth power of first n odd natural numbers.\n#\n# >>> odd_num_sum(2)\n# 82\n# >>> odd_num_sum(3)\n# 707\n# >>> odd_num_sum(4)\n# 3108\nsub odd_num_sum\n{\n  my ($n) = @_;\n", "entry_point": "odd_num_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = odd_num_sum($arg00);\nmy $v0 = 82;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $x1 = odd_num_sum($arg10);\nmy $v1 = 707;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $x2 = odd_num_sum($arg20);\nmy $v2 = 3108;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of fourth power of first n odd natural numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/771", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if the given expression is balanced or not.\n#\n# >>> check_expression(\"{()}[{}]\")\n# 1\n# >>> check_expression(\"{()}[{]\")\n# 0\n# >>> check_expression(\"{()}[{}][]({})\")\n# 1\nsub check_expression\n{\n  my ($exp) = @_;\n", "entry_point": "check_expression", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"{()}[{}]\";\nmy $x0 = check_expression($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"{()}[{]\";\nmy $x1 = check_expression($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"{()}[{}][]({})\";\nmy $x2 = check_expression($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if the given expression is balanced or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/772", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove all the words with k length in the given string.\n#\n# >>> remove_length(\"The person is most value tet\", 3)\n# \"person is most value\"\n# >>> remove_length(\"If you told me about this ok\", 4)\n# \"If you me about ok\"\n# >>> remove_length(\"Forces of darkeness is come into the play\", 4)\n# \"Forces of darkeness is the\"\nsub remove_length\n{\n  my ($test_str, $k) = @_;\n", "entry_point": "remove_length", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"The person is most value tet\";\nmy $arg01 = 3;\nmy $x0 = remove_length($arg00, $arg01);\nmy $v0 = \"person is most value\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"If you told me about this ok\";\nmy $arg11 = 4;\nmy $x1 = remove_length($arg10, $arg11);\nmy $v1 = \"If you me about ok\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Forces of darkeness is come into the play\";\nmy $arg21 = 4;\nmy $x2 = remove_length($arg20, $arg21);\nmy $v2 = \"Forces of darkeness is the\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove all the words with k length in the given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/773", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the occurrence and position of the substrings within a string.\n#\n# >>> occurance_substring(\"python programming, python language\", \"python\")\n# [\"python\", 0, 6]\n# >>> occurance_substring(\"python programming,programming language\", \"programming\")\n# [\"programming\", 7, 18]\n# >>> occurance_substring(\"python programming,programming language\", \"language\")\n# [\"language\", 31, 39]\nsub occurance_substring\n{\n  my ($text, $pattern) = @_;\n", "entry_point": "occurance_substring", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python programming, python language\";\nmy $arg01 = \"python\";\nmy $x0 = occurance_substring($arg00, $arg01);\nmy $v0 = [\"python\", 0, 6];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"python programming,programming language\";\nmy $arg11 = \"programming\";\nmy $x1 = occurance_substring($arg10, $arg11);\nmy $v1 = [\"programming\", 7, 18];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"python programming,programming language\";\nmy $arg21 = \"language\";\nmy $x2 = occurance_substring($arg20, $arg21);\nmy $v2 = [\"language\", 31, 39];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the occurrence and position of the substrings within a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/774", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if the string is a valid email address or not using regex.\n#\n# >>> check_email(\"ankitrai326@gmail.com\")\n# \"Valid Email\"\n# >>> check_email(\"my.ownsite@ourearth.org\")\n# \"Valid Email\"\n# >>> check_email(\"ankitaoie326.com\")\n# \"Invalid Email\"\nsub check_email\n{\n  my ($email) = @_;\n", "entry_point": "check_email", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"ankitrai326@gmail.com\";\nmy $x0 = check_email($arg00);\nmy $v0 = \"Valid Email\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"my.ownsite@ourearth.org\";\nmy $x1 = check_email($arg10);\nmy $v1 = \"Valid Email\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"ankitaoie326.com\";\nmy $x2 = check_email($arg20);\nmy $v2 = \"Invalid Email\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if the string is a valid email address or not using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/775", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether every odd index contains odd numbers of a given list.\n#\n# >>> odd_position([2, 1, 4, 3, 6, 7, 6, 3])\n# 1\n# >>> odd_position([4, 1, 2])\n# 1\n# >>> odd_position([1, 2, 3])\n# 0\nsub odd_position\n{\n  my ($nums) = @_;\n", "entry_point": "odd_position", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 1, 4, 3, 6, 7, 6, 3];\nmy $x0 = odd_position($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 1, 2];\nmy $x1 = odd_position($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3];\nmy $x2 = odd_position($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether every odd index contains odd numbers of a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/776", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count those characters which have vowels as their neighbors in the given string.\n#\n# >>> count_vowels(\"bestinstareels\")\n# 7\n# >>> count_vowels(\"partofthejourneyistheend\")\n# 12\n# >>> count_vowels(\"amazonprime\")\n# 5\nsub count_vowels\n{\n  my ($test_str) = @_;\n", "entry_point": "count_vowels", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"bestinstareels\";\nmy $x0 = count_vowels($arg00);\nmy $v0 = 7;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"partofthejourneyistheend\";\nmy $x1 = count_vowels($arg10);\nmy $v1 = 12;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"amazonprime\";\nmy $x2 = count_vowels($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count those characters which have vowels as their neighbors in the given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/777", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of non-repeated elements in a given array.\n#\n# >>> find_sum([1, 2, 3, 1, 1, 4, 5, 6], 8)\n# 21\n# >>> find_sum([1, 10, 9, 4, 2, 10, 10, 45, 4], 9)\n# 71\n# >>> find_sum([12, 10, 9, 45, 2, 10, 10, 45, 10], 9)\n# 78\nsub find_sum\n{\n  my ($arr, $n) = @_;\n", "entry_point": "find_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 1, 1, 4, 5, 6];\nmy $arg01 = 8;\nmy $x0 = find_sum($arg00, $arg01);\nmy $v0 = 21;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 10, 9, 4, 2, 10, 10, 45, 4];\nmy $arg11 = 9;\nmy $x1 = find_sum($arg10, $arg11);\nmy $v1 = 71;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [12, 10, 9, 45, 2, 10, 10, 45, 10];\nmy $arg21 = 9;\nmy $x2 = find_sum($arg20, $arg21);\nmy $v2 = 78;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of non-repeated elements in a given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/778", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to pack consecutive duplicates of a given list elements into sublists.\n#\n# >>> pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n# [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n# >>> pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])\n# [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n# >>> pack_consecutive_duplicates([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"])\n# [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\nsub pack_consecutive_duplicates\n{\n  my ($list1) = @_;\n", "entry_point": "pack_consecutive_duplicates", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4];\nmy $x0 = pack_consecutive_duplicates($arg00);\nmy $v0 = [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10];\nmy $x1 = pack_consecutive_duplicates($arg10);\nmy $v1 = [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"];\nmy $x2 = pack_consecutive_duplicates($arg20);\nmy $v2 = [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/779", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count the number of unique lists within a list.\n#\n# >>> unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])\n# {[1, 3] => 2, [5, 7] => 2, [13, 15, 17] => 1, [9, 11] => 1}\n# >>> unique_sublists([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]])\n# {[\"green\", \"orange\"] => 2, [\"black\"] => 1, [\"white\"] => 1}\n# >>> unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])\n# {[1, 2] => 1, [3, 4] => 1, [4, 5] => 1, [6, 7] => 1}\nsub unique_sublists\n{\n  my ($list1) = @_;\n", "entry_point": "unique_sublists", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]];\nmy $x0 = unique_sublists($arg00);\nmy $v0 = {[1, 3] => 2, [5, 7] => 2, [13, 15, 17] => 1, [9, 11] => 1};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]];\nmy $x1 = unique_sublists($arg10);\nmy $v1 = {[\"green\", \"orange\"] => 2, [\"black\"] => 1, [\"white\"] => 1};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[1, 2], [3, 4], [4, 5], [6, 7]];\nmy $x2 = unique_sublists($arg20);\nmy $v2 = {[1, 2] => 1, [3, 4] => 1, [4, 5] => 1, [6, 7] => 1};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count the number of unique lists within a list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/780", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the combinations of sums with tuples in the given tuple list.\n#\n# >>> find_combinations([[2, 4], [6, 7], [5, 1], [6, 10]])\n# [[8, 11], [7, 5], [8, 14], [11, 8], [12, 17], [11, 11]]\n# >>> find_combinations([[3, 5], [7, 8], [6, 2], [7, 11]])\n# [[10, 13], [9, 7], [10, 16], [13, 10], [14, 19], [13, 13]]\n# >>> find_combinations([[4, 6], [8, 9], [7, 3], [8, 12]])\n# [[12, 15], [11, 9], [12, 18], [15, 12], [16, 21], [15, 15]]\nsub find_combinations\n{\n  my ($test_list) = @_;\n", "entry_point": "find_combinations", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[2, 4], [6, 7], [5, 1], [6, 10]];\nmy $x0 = find_combinations($arg00);\nmy $v0 = [[8, 11], [7, 5], [8, 14], [11, 8], [12, 17], [11, 11]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[3, 5], [7, 8], [6, 2], [7, 11]];\nmy $x1 = find_combinations($arg10);\nmy $v1 = [[10, 13], [9, 7], [10, 16], [13, 10], [14, 19], [13, 13]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[4, 6], [8, 9], [7, 3], [8, 12]];\nmy $x2 = find_combinations($arg20);\nmy $v2 = [[12, 15], [11, 9], [12, 18], [15, 12], [16, 21], [15, 15]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the combinations of sums with tuples in the given tuple list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/781", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the count of divisors is even or odd.\n#\n# >>> count_divisors(10)\n# \"Even\"\n# >>> count_divisors(100)\n# \"Odd\"\n# >>> count_divisors(125)\n# \"Even\"\nsub count_divisors\n{\n  my ($n) = @_;\n", "entry_point": "count_divisors", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = count_divisors($arg00);\nmy $v0 = \"Even\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 100;\nmy $x1 = count_divisors($arg10);\nmy $v1 = \"Odd\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 125;\nmy $x2 = count_divisors($arg20);\nmy $v2 = \"Even\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the count of divisors is even or odd.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/782", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of all odd length subarrays.\n#\n# >>> odd_length_sum([1, 2, 4])\n# 14\n# >>> odd_length_sum([1, 2, 1, 2])\n# 15\n# >>> odd_length_sum([1, 7])\n# 8\nsub odd_length_sum\n{\n  my ($arr) = @_;\n", "entry_point": "odd_length_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 4];\nmy $x0 = odd_length_sum($arg00);\nmy $v0 = 14;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 1, 2];\nmy $x1 = odd_length_sum($arg10);\nmy $v1 = 15;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 7];\nmy $x2 = odd_length_sum($arg20);\nmy $v2 = 8;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of all odd length subarrays.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/783", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert rgb color to hsv color.\n#\n# >>> rgb_to_hsv(255, 255, 255)\n# [0, 0.0, 100.0]\n# >>> rgb_to_hsv(0, 215, 0)\n# [120.0, 100.0, 84.31372549019608]\n# >>> rgb_to_hsv(10, 215, 110)\n# [149.26829268292684, 95.34883720930233, 84.31372549019608]\nsub rgb_to_hsv\n{\n  my ($r, $g, $b) = @_;\n", "entry_point": "rgb_to_hsv", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 255;\nmy $arg01 = 255;\nmy $arg02 = 255;\nmy $x0 = rgb_to_hsv($arg00, $arg01, $arg02);\nmy $v0 = [0, 0.0, 100.0];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 0;\nmy $arg11 = 215;\nmy $arg12 = 0;\nmy $x1 = rgb_to_hsv($arg10, $arg11, $arg12);\nmy $v1 = [120.0, 100.0, 84.31372549019608];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $arg21 = 215;\nmy $arg22 = 110;\nmy $x2 = rgb_to_hsv($arg20, $arg21, $arg22);\nmy $v2 = [149.26829268292684, 95.34883720930233, 84.31372549019608];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert rgb color to hsv color.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/784", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the product of first even and odd number of a given list.\n#\n# >>> mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8])\n# 4\n# >>> mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# 2\n# >>> mul_even_odd([1, 5, 7, 9, 10])\n# 10\nsub mul_even_odd\n{\n  my ($list1) = @_;\n", "entry_point": "mul_even_odd", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 5, 7, 4, 1, 6, 8];\nmy $x0 = mul_even_odd($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $x1 = mul_even_odd($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 5, 7, 9, 10];\nmy $x2 = mul_even_odd($arg20);\nmy $v2 = 10;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the product of first even and odd number of a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/785", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert tuple string to integer tuple.\n#\n# >>> tuple_str_int(\"(7, 8, 9)\")\n# [7, 8, 9]\n# >>> tuple_str_int(\"(1, 2, 3)\")\n# [1, 2, 3]\n# >>> tuple_str_int(\"(4, 5, 6)\")\n# [4, 5, 6]\nsub tuple_str_int\n{\n  my ($test_str) = @_;\n", "entry_point": "tuple_str_int", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"(7, 8, 9)\";\nmy $x0 = tuple_str_int($arg00);\nmy $v0 = [7, 8, 9];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"(1, 2, 3)\";\nmy $x1 = tuple_str_int($arg10);\nmy $v1 = [1, 2, 3];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"(4, 5, 6)\";\nmy $x2 = tuple_str_int($arg20);\nmy $v2 = [4, 5, 6];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert tuple string to integer tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/786", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to locate the right insertion point for a specified value in sorted order.\n#\n# >>> right_insertion([1, 2, 4, 5], 6)\n# 4\n# >>> right_insertion([1, 2, 4, 5], 3)\n# 2\n# >>> right_insertion([1, 2, 4, 5], 7)\n# 4\nsub right_insertion\n{\n  my ($a, $x) = @_;\n", "entry_point": "right_insertion", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 4, 5];\nmy $arg01 = 6;\nmy $x0 = right_insertion($arg00, $arg01);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 4, 5];\nmy $arg11 = 3;\nmy $x1 = right_insertion($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 4, 5];\nmy $arg21 = 7;\nmy $x2 = right_insertion($arg20, $arg21);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to locate the right insertion point for a specified value in sorted order.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/787", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function that matches a string that has an a followed by three 'b'.\n#\n# >>> text_match_three(\"ac\")\n# \"Not matched!\"\n# >>> text_match_three(\"dc\")\n# \"Not matched!\"\n# >>> text_match_three(\"abbbba\")\n# \"Found a match!\"\nsub text_match_three\n{\n  my ($text) = @_;\n", "entry_point": "text_match_three", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"ac\";\nmy $x0 = text_match_three($arg00);\nmy $v0 = \"Not matched!\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"dc\";\nmy $x1 = text_match_three($arg10);\nmy $v1 = \"Not matched!\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abbbba\";\nmy $x2 = text_match_three($arg20);\nmy $v2 = \"Found a match!\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function that matches a string that has an a followed by three 'b'.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/788", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to create a new tuple from the given string and list.\n#\n# >>> new_tuple([\"WEB\", \"is\"], \"best\")\n# [\"WEB\", \"is\", \"best\"]\n# >>> new_tuple([\"We\", \"are\"], \"Developers\")\n# [\"We\", \"are\", \"Developers\"]\n# >>> new_tuple([\"Part\", \"is\"], \"Wrong\")\n# [\"Part\", \"is\", \"Wrong\"]\nsub new_tuple\n{\n  my ($test_list, $test_str) = @_;\n", "entry_point": "new_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"WEB\", \"is\"];\nmy $arg01 = \"best\";\nmy $x0 = new_tuple($arg00, $arg01);\nmy $v0 = [\"WEB\", \"is\", \"best\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"We\", \"are\"];\nmy $arg11 = \"Developers\";\nmy $x1 = new_tuple($arg10, $arg11);\nmy $v1 = [\"We\", \"are\", \"Developers\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"Part\", \"is\"];\nmy $arg21 = \"Wrong\";\nmy $x2 = new_tuple($arg20, $arg21);\nmy $v2 = [\"Part\", \"is\", \"Wrong\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to create a new tuple from the given string and list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/789", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate the perimeter of a regular polygon.\n#\n# >>> perimeter_polygon(4, 20)\n# 80\n# >>> perimeter_polygon(10, 15)\n# 150\n# >>> perimeter_polygon(9, 7)\n# 63\nsub perimeter_polygon\n{\n  my ($s, $l) = @_;\n", "entry_point": "perimeter_polygon", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $arg01 = 20;\nmy $x0 = perimeter_polygon($arg00, $arg01);\nmy $v0 = 80;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = 15;\nmy $x1 = perimeter_polygon($arg10, $arg11);\nmy $v1 = 150;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 9;\nmy $arg21 = 7;\nmy $x2 = perimeter_polygon($arg20, $arg21);\nmy $v2 = 63;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate the perimeter of a regular polygon.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/790", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether every even index contains even numbers of a given list.\n#\n# >>> even_position([3, 2, 1])\n# 0\n# >>> even_position([1, 2, 3])\n# 0\n# >>> even_position([2, 1, 4])\n# 1\nsub even_position\n{\n  my ($nums) = @_;\n", "entry_point": "even_position", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 2, 1];\nmy $x0 = even_position($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3];\nmy $x1 = even_position($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 1, 4];\nmy $x2 = even_position($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether every even index contains even numbers of a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/791", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove the nested record from the given tuple.\n#\n# >>> remove_nested([1, 5, 7, [4, 6], 10])\n# [1, 5, 7, 10]\n# >>> remove_nested([2, 6, 8, [5, 7], 11])\n# [2, 6, 8, 11]\n# >>> remove_nested([3, 7, 9, [6, 8], 12])\n# [3, 7, 9, 12]\nsub remove_nested\n{\n  my ($test_tup) = @_;\n", "entry_point": "remove_nested", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 5, 7, [4, 6], 10];\nmy $x0 = remove_nested($arg00);\nmy $v0 = [1, 5, 7, 10];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 6, 8, [5, 7], 11];\nmy $x1 = remove_nested($arg10);\nmy $v1 = [2, 6, 8, 11];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 7, 9, [6, 8], 12];\nmy $x2 = remove_nested($arg20);\nmy $v2 = [3, 7, 9, 12];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove the nested record from the given tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/792", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the number of lists in a given number of lists.\n#\n# >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n# 4\n# >>> count_list([[1, 2], [2, 3], [4, 5]])\n# 3\n# >>> count_list([[1, 0], [2, 0]])\n# 2\nsub count_list\n{\n  my ($input_list) = @_;\n", "entry_point": "count_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]];\nmy $x0 = count_list($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2], [2, 3], [4, 5]];\nmy $x1 = count_list($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[1, 0], [2, 0]];\nmy $x2 = count_list($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the number of lists in a given number of lists.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/793", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the last position of an element in a sorted array.\n#\n# >>> get_last([1, 2, 3], 1, 3)\n# 0\n# >>> get_last([1, 1, 1, 2, 3, 4], 1, 6)\n# 2\n# >>> get_last([2, 3, 2, 3, 6, 8, 9], 3, 8)\n# 3\nsub get_last\n{\n  my ($arr, $x, $n) = @_;\n", "entry_point": "get_last", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $arg01 = 1;\nmy $arg02 = 3;\nmy $x0 = get_last($arg00, $arg01, $arg02);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 1, 1, 2, 3, 4];\nmy $arg11 = 1;\nmy $arg12 = 6;\nmy $x1 = get_last($arg10, $arg11, $arg12);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 3, 2, 3, 6, 8, 9];\nmy $arg21 = 3;\nmy $arg22 = 8;\nmy $x2 = get_last($arg20, $arg21, $arg22);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the last position of an element in a sorted array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/794", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n#\n# >>> text_starta_endb(\"aabbbb\")\n# \"Found a match!\"\n# >>> text_starta_endb(\"aabAbbbc\")\n# \"Not matched!\"\n# >>> text_starta_endb(\"accddbbjjj\")\n# \"Not matched!\"\nsub text_starta_endb\n{\n  my ($text) = @_;\n", "entry_point": "text_starta_endb", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"aabbbb\";\nmy $x0 = text_starta_endb($arg00);\nmy $v0 = \"Found a match!\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"aabAbbbc\";\nmy $x1 = text_starta_endb($arg10);\nmy $v1 = \"Not matched!\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"accddbbjjj\";\nmy $x2 = text_starta_endb($arg20);\nmy $v2 = \"Not matched!\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/795", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n#\n# >>> cheap_items([{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}], 1)\n# [{\"name\" => \"Item-1\", \"price\" => 101.1}]\n# >>> cheap_items([{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}], 2)\n# [{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}]\n# >>> cheap_items([{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-3\", \"price\" => 45.09}, {\"name\" => \"Item-4\", \"price\" => 22.75}], 1)\n# [{\"name\" => \"Item-4\", \"price\" => 22.75}]\nsub cheap_items\n{\n  my ($items, $n) = @_;\n", "entry_point": "cheap_items", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}];\nmy $arg01 = 1;\nmy $x0 = cheap_items($arg00, $arg01);\nmy $v0 = [{\"name\" => \"Item-1\", \"price\" => 101.1}];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}];\nmy $arg11 = 2;\nmy $x1 = cheap_items($arg10, $arg11);\nmy $v1 = [{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-3\", \"price\" => 45.09}, {\"name\" => \"Item-4\", \"price\" => 22.75}];\nmy $arg21 = 1;\nmy $x2 = cheap_items($arg20, $arg21);\nmy $v2 = [{\"name\" => \"Item-4\", \"price\" => 22.75}];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/796", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write function to find the sum of all items in the given dictionary.\n#\n# >>> return_sum({\"a\" => 100, \"b\" => 200, \"c\" => 300})\n# 600\n# >>> return_sum({\"a\" => 25, \"b\" => 18, \"c\" => 45})\n# 88\n# >>> return_sum({\"a\" => 36, \"b\" => 39, \"c\" => 49})\n# 124\nsub return_sum\n{\n  my ($dict) = @_;\n", "entry_point": "return_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {\"a\" => 100, \"b\" => 200, \"c\" => 300};\nmy $x0 = return_sum($arg00);\nmy $v0 = 600;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {\"a\" => 25, \"b\" => 18, \"c\" => 45};\nmy $x1 = return_sum($arg10);\nmy $v1 = 88;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {\"a\" => 36, \"b\" => 39, \"c\" => 49};\nmy $x2 = return_sum($arg20);\nmy $v2 = 124;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write function to find the sum of all items in the given dictionary.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/797", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of all odd natural numbers within the range l and r.\n#\n# >>> sum_in_range(2, 5)\n# 8\n# >>> sum_in_range(5, 7)\n# 12\n# >>> sum_in_range(7, 13)\n# 40\nsub sum_in_range\n{\n  my ($l, $r) = @_;\n", "entry_point": "sum_in_range", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $arg01 = 5;\nmy $x0 = sum_in_range($arg00, $arg01);\nmy $v0 = 8;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $arg11 = 7;\nmy $x1 = sum_in_range($arg10, $arg11);\nmy $v1 = 12;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 7;\nmy $arg21 = 13;\nmy $x2 = sum_in_range($arg20, $arg21);\nmy $v2 = 40;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of all odd natural numbers within the range l and r.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/798", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of an array.\n#\n# >>> _sum([1, 2, 3])\n# 6\n# >>> _sum([15, 12, 13, 10])\n# 50\n# >>> _sum([0, 1, 2])\n# 3\nsub _sum\n{\n  my ($arr) = @_;\n", "entry_point": "_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $x0 = _sum($arg00);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [15, 12, 13, 10];\nmy $x1 = _sum($arg10);\nmy $v1 = 50;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [0, 1, 2];\nmy $x2 = _sum($arg20);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of an array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/799", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to left rotate the bits of a given number.\n#\n# >>> left_rotate(16, 2)\n# 64\n# >>> left_rotate(10, 2)\n# 40\n# >>> left_rotate(99, 3)\n# 792\nsub left_rotate\n{\n  my ($n, $d) = @_;\n", "entry_point": "left_rotate", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 16;\nmy $arg01 = 2;\nmy $x0 = left_rotate($arg00, $arg01);\nmy $v0 = 64;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = 2;\nmy $x1 = left_rotate($arg10, $arg11);\nmy $v1 = 40;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 99;\nmy $arg21 = 3;\nmy $x2 = left_rotate($arg20, $arg21);\nmy $v2 = 792;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to left rotate the bits of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/800", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove all whitespaces from a string.\n#\n# >>> remove_all_spaces(\"python  program\")\n# \"pythonprogram\"\n# >>> remove_all_spaces(\"python   programming    language\")\n# \"pythonprogramminglanguage\"\n# >>> remove_all_spaces(\"python                     program\")\n# \"pythonprogram\"\nsub remove_all_spaces\n{\n  my ($text) = @_;\n", "entry_point": "remove_all_spaces", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python  program\";\nmy $x0 = remove_all_spaces($arg00);\nmy $v0 = \"pythonprogram\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"python   programming    language\";\nmy $x1 = remove_all_spaces($arg10);\nmy $v1 = \"pythonprogramminglanguage\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"python                     program\";\nmy $x2 = remove_all_spaces($arg20);\nmy $v2 = \"pythonprogram\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove all whitespaces from a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/801", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the number of equal numbers from three given integers.\n#\n# >>> test_three_equal(1, 1, 1)\n# 3\n# >>> test_three_equal(-1, -2, -3)\n# 0\n# >>> test_three_equal(1, 2, 2)\n# 2\nsub test_three_equal\n{\n  my ($x, $y, $z) = @_;\n", "entry_point": "test_three_equal", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 1;\nmy $arg02 = 1;\nmy $x0 = test_three_equal($arg00, $arg01, $arg02);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = -1;\nmy $arg11 = -2;\nmy $arg12 = -3;\nmy $x1 = test_three_equal($arg10, $arg11, $arg12);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 2;\nmy $arg22 = 2;\nmy $x2 = test_three_equal($arg20, $arg21, $arg22);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the number of equal numbers from three given integers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/802", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the number of rotations required to generate a sorted array.\n#\n# >>> count_rotation([3, 2, 1], 3)\n# 1\n# >>> count_rotation([4, 5, 1, 2, 3], 5)\n# 2\n# >>> count_rotation([7, 8, 9, 1, 2, 3], 6)\n# 3\nsub count_rotation\n{\n  my ($arr, $n) = @_;\n", "entry_point": "count_rotation", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 2, 1];\nmy $arg01 = 3;\nmy $x0 = count_rotation($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 5, 1, 2, 3];\nmy $arg11 = 5;\nmy $x1 = count_rotation($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [7, 8, 9, 1, 2, 3];\nmy $arg21 = 6;\nmy $x2 = count_rotation($arg20, $arg21);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the number of rotations required to generate a sorted array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/803", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the given number is a perfect square or not.\n#\n# >>> is_perfect_square(10)\n# 0\n# >>> is_perfect_square(36)\n# 1\n# >>> is_perfect_square(14)\n# 0\nsub is_perfect_square\n{\n  my ($n) = @_;\n", "entry_point": "is_perfect_square", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = is_perfect_square($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 36;\nmy $x1 = is_perfect_square($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 14;\nmy $x2 = is_perfect_square($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the given number is a perfect square or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/804", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the product of numbers is even or not.\n#\n# >>> is_product_even([1, 2, 3], 3)\n# 1\n# >>> is_product_even([1, 2, 1, 4], 4)\n# 1\n# >>> is_product_even([1, 1], 2)\n# 0\nsub is_product_even\n{\n  my ($arr, $n) = @_;\n", "entry_point": "is_product_even", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $arg01 = 3;\nmy $x0 = is_product_even($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 1, 4];\nmy $arg11 = 4;\nmy $x1 = is_product_even($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 1];\nmy $arg21 = 2;\nmy $x2 = is_product_even($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the product of numbers is even or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/805", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the list in a list of lists whose sum of elements is the highest.\n#\n# >>> max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n# [10, 11, 12]\n# >>> max_sum_list([[3, 2, 1], [6, 5, 4], [12, 11, 10]])\n# [12, 11, 10]\n# >>> max_sum_list([[2, 3, 1]])\n# [2, 3, 1]\nsub max_sum_list\n{\n  my ($lists) = @_;\n", "entry_point": "max_sum_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]];\nmy $x0 = max_sum_list($arg00);\nmy $v0 = [10, 11, 12];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[3, 2, 1], [6, 5, 4], [12, 11, 10]];\nmy $x1 = max_sum_list($arg10);\nmy $v1 = [12, 11, 10];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[2, 3, 1]];\nmy $x2 = max_sum_list($arg20);\nmy $v2 = [2, 3, 1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the list in a list of lists whose sum of elements is the highest.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/806", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find maximum run of uppercase characters in the given string.\n#\n# >>> max_run_uppercase(\"GeMKSForGERksISBESt\")\n# 5\n# >>> max_run_uppercase(\"PrECIOusMOVemENTSYT\")\n# 6\n# >>> max_run_uppercase(\"GooGLEFluTTER\")\n# 4\nsub max_run_uppercase\n{\n  my ($test_str) = @_;\n", "entry_point": "max_run_uppercase", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"GeMKSForGERksISBESt\";\nmy $x0 = max_run_uppercase($arg00);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"PrECIOusMOVemENTSYT\";\nmy $x1 = max_run_uppercase($arg10);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"GooGLEFluTTER\";\nmy $x2 = max_run_uppercase($arg20);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find maximum run of uppercase characters in the given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/807", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the first odd number in a given list of numbers.\n#\n# >>> first_odd([1, 3, 5])\n# 1\n# >>> first_odd([2, 4, 1, 3])\n# 1\nsub first_odd\n{\n  my ($nums) = @_;\n", "entry_point": "first_odd", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 5];\nmy $x0 = first_odd($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 4, 1, 3];\nmy $x1 = first_odd($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\n", "description": "Write a Perl function to find the first odd number in a given list of numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/808", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if the given tuples contain the k or not.\n#\n# >>> check_k([10, 4, 5, 6, 8], 6)\n# 1\n# >>> check_k([1, 2, 3, 4, 5, 6], 7)\n# 0\n# >>> check_k([7, 8, 9, 44, 11, 12], 11)\n# 1\nsub check_k\n{\n  my ($test_tup, $k) = @_;\n", "entry_point": "check_k", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 4, 5, 6, 8];\nmy $arg01 = 6;\nmy $x0 = check_k($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5, 6];\nmy $arg11 = 7;\nmy $x1 = check_k($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [7, 8, 9, 44, 11, 12];\nmy $arg21 = 11;\nmy $x2 = check_k($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if the given tuples contain the k or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/809", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n#\n# >>> check_smaller([1, 2, 3], [2, 3, 4])\n# 0\n# >>> check_smaller([4, 5, 6], [3, 4, 5])\n# 1\n# >>> check_smaller([11, 12, 13], [10, 11, 12])\n# 1\nsub check_smaller\n{\n  my ($test_tup1, $test_tup2) = @_;\n", "entry_point": "check_smaller", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $arg01 = [2, 3, 4];\nmy $x0 = check_smaller($arg00, $arg01);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 5, 6];\nmy $arg11 = [3, 4, 5];\nmy $x1 = check_smaller($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [11, 12, 13];\nmy $arg21 = [10, 11, 12];\nmy $x2 = check_smaller($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/810", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to iterate over elements repeating each as many times as its count.\n#\n# >>> count_variable(4, 2, 0, -2)\n# [\"p\", \"p\", \"p\", \"p\", \"q\", \"q\"]\n# >>> count_variable(0, 1, 2, 3)\n# [\"q\", \"r\", \"r\", \"s\", \"s\", \"s\"]\n# >>> count_variable(11, 15, 12, 23)\n# [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\"]\nsub count_variable\n{\n  my ($a, $b, $c, $d) = @_;\n", "entry_point": "count_variable", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $arg01 = 2;\nmy $arg02 = 0;\nmy $arg03 = -2;\nmy $x0 = count_variable($arg00, $arg01, $arg02, $arg03);\nmy $v0 = [\"p\", \"p\", \"p\", \"p\", \"q\", \"q\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 0;\nmy $arg11 = 1;\nmy $arg12 = 2;\nmy $arg13 = 3;\nmy $x1 = count_variable($arg10, $arg11, $arg12, $arg13);\nmy $v1 = [\"q\", \"r\", \"r\", \"s\", \"s\", \"s\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 11;\nmy $arg21 = 15;\nmy $arg22 = 12;\nmy $arg23 = 23;\nmy $x2 = count_variable($arg20, $arg21, $arg22, $arg23);\nmy $v2 = [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to iterate over elements repeating each as many times as its count.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/811", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if two lists of tuples are identical or not.\n#\n# >>> check_identical([[10, 4], [2, 5]], [[10, 4], [2, 5]])\n# 1\n# >>> check_identical([[1, 2], [3, 7]], [[12, 14], [12, 45]])\n# 0\n# >>> check_identical([[2, 14], [12, 25]], [[2, 14], [12, 25]])\n# 1\nsub check_identical\n{\n  my ($test_list1, $test_list2) = @_;\n", "entry_point": "check_identical", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[10, 4], [2, 5]];\nmy $arg01 = [[10, 4], [2, 5]];\nmy $x0 = check_identical($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2], [3, 7]];\nmy $arg11 = [[12, 14], [12, 45]];\nmy $x1 = check_identical($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[2, 14], [12, 25]];\nmy $arg21 = [[2, 14], [12, 25]];\nmy $x2 = check_identical($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if two lists of tuples are identical or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/812", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to abbreviate 'road' as 'rd.' in a given string.\n#\n# >>> road_rd(\"ravipadu Road\")\n# \"ravipadu Rd.\"\n# >>> road_rd(\"palnadu Road\")\n# \"palnadu Rd.\"\n# >>> road_rd(\"eshwar enclave Road\")\n# \"eshwar enclave Rd.\"\nsub road_rd\n{\n  my ($street) = @_;\n", "entry_point": "road_rd", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"ravipadu Road\";\nmy $x0 = road_rd($arg00);\nmy $v0 = \"ravipadu Rd.\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"palnadu Road\";\nmy $x1 = road_rd($arg10);\nmy $v1 = \"palnadu Rd.\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"eshwar enclave Road\";\nmy $x2 = road_rd($arg20);\nmy $v2 = \"eshwar enclave Rd.\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to abbreviate 'road' as 'rd.' in a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/813", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find length of the string.\n#\n# >>> string_length(\"python\")\n# 6\n# >>> string_length(\"program\")\n# 7\n# >>> string_length(\"language\")\n# 8\nsub string_length\n{\n  my ($str1) = @_;\n", "entry_point": "string_length", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python\";\nmy $x0 = string_length($arg00);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"program\";\nmy $x1 = string_length($arg10);\nmy $v1 = 7;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"language\";\nmy $x2 = string_length($arg20);\nmy $v2 = 8;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find length of the string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/814", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the area of a rombus.\n#\n# >>> rombus_area(10, 20)\n# 100\n# >>> rombus_area(10, 5)\n# 25\n# >>> rombus_area(4, 2)\n# 4\nsub rombus_area\n{\n  my ($p, $q) = @_;\n", "entry_point": "rombus_area", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 20;\nmy $x0 = rombus_area($arg00, $arg01);\nmy $v0 = 100;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = 5;\nmy $x1 = rombus_area($arg10, $arg11);\nmy $v1 = 25;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $arg21 = 2;\nmy $x2 = rombus_area($arg20, $arg21);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the area of a rombus.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/815", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n#\n# >>> sort_by_dnf([1, 2, 0, 1, 0, 1, 2, 1, 1], 9)\n# [0, 0, 1, 1, 1, 1, 1, 2, 2]\n# >>> sort_by_dnf([1, 0, 0, 1, 2, 1, 2, 2, 1, 0], 10)\n# [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n# >>> sort_by_dnf([2, 2, 1, 0, 0, 0, 1, 1, 2, 1], 10)\n# [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nsub sort_by_dnf\n{\n  my ($arr, $n) = @_;\n", "entry_point": "sort_by_dnf", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 0, 1, 0, 1, 2, 1, 1];\nmy $arg01 = 9;\nmy $x0 = sort_by_dnf($arg00, $arg01);\nmy $v0 = [0, 0, 1, 1, 1, 1, 1, 2, 2];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 0, 0, 1, 2, 1, 2, 2, 1, 0];\nmy $arg11 = 10;\nmy $x1 = sort_by_dnf($arg10, $arg11);\nmy $v1 = [0, 0, 0, 1, 1, 1, 1, 2, 2, 2];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 2, 1, 0, 0, 0, 1, 1, 2, 1];\nmy $arg21 = 10;\nmy $x2 = sort_by_dnf($arg20, $arg21);\nmy $v2 = [0, 0, 0, 1, 1, 1, 1, 2, 2, 2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/816", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to clear the values of the given tuples.\n#\n# >>> clear_tuple([1, 5, 3, 6, 8])\n# []\n# >>> clear_tuple([2, 1, 4, 5, 6])\n# []\n# >>> clear_tuple([3, 2, 5, 6, 8])\n# []\nsub clear_tuple\n{\n  my ($test_tup) = @_;\n", "entry_point": "clear_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 5, 3, 6, 8];\nmy $x0 = clear_tuple($arg00);\nmy $v0 = [];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 1, 4, 5, 6];\nmy $x1 = clear_tuple($arg10);\nmy $v1 = [];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 2, 5, 6, 8];\nmy $x2 = clear_tuple($arg20);\nmy $v2 = [];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to clear the values of the given tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/817", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\n#\n# >>> div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 19, 13)\n# [19, 65, 57, 39, 152, 190]\n# >>> div_of_nums([1, 2, 3, 5, 7, 8, 10], 2, 5)\n# [2, 5, 8, 10]\n# >>> div_of_nums([10, 15, 14, 13, 18, 12, 20], 10, 5)\n# [10, 15, 20]\nsub div_of_nums\n{\n  my ($nums, $m, $n) = @_;\n", "entry_point": "div_of_nums", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [19, 65, 57, 39, 152, 639, 121, 44, 90, 190];\nmy $arg01 = 19;\nmy $arg02 = 13;\nmy $x0 = div_of_nums($arg00, $arg01, $arg02);\nmy $v0 = [19, 65, 57, 39, 152, 190];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 5, 7, 8, 10];\nmy $arg11 = 2;\nmy $arg12 = 5;\nmy $x1 = div_of_nums($arg10, $arg11, $arg12);\nmy $v1 = [2, 5, 8, 10];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [10, 15, 14, 13, 18, 12, 20];\nmy $arg21 = 10;\nmy $arg22 = 5;\nmy $x2 = div_of_nums($arg20, $arg21, $arg22);\nmy $v2 = [10, 15, 20];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/818", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count lower case letters in a given string.\n#\n# >>> lower_ctr(\"abc\")\n# 3\n# >>> lower_ctr(\"string\")\n# 6\n# >>> lower_ctr(\"Python\")\n# 5\nsub lower_ctr\n{\n  my ($str) = @_;\n", "entry_point": "lower_ctr", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abc\";\nmy $x0 = lower_ctr($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"string\";\nmy $x1 = lower_ctr($arg10);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Python\";\nmy $x2 = lower_ctr($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count lower case letters in a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/819", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n#\n# >>> count_duplic([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])\n# [[1, 2, 4, 5], [1, 3, 3, 4]]\n# >>> count_duplic([2, 2, 3, 1, 2, 6, 7, 9])\n# [[2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1]]\n# >>> count_duplic([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])\n# [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]\nsub count_duplic\n{\n  my ($lists) = @_;\n", "entry_point": "count_duplic", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5];\nmy $x0 = count_duplic($arg00);\nmy $v0 = [[1, 2, 4, 5], [1, 3, 3, 4]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 2, 3, 1, 2, 6, 7, 9];\nmy $x1 = count_duplic($arg10);\nmy $v1 = [[2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nmy $x2 = count_duplic($arg20);\nmy $v2 = [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/820", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether the given month number contains 28 days or not.\n#\n# >>> check_monthnum_number(2)\n# 1\n# >>> check_monthnum_number(1)\n# 0\n# >>> check_monthnum_number(3)\n# 0\nsub check_monthnum_number\n{\n  my ($monthnum1) = @_;\n", "entry_point": "check_monthnum_number", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = check_monthnum_number($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $x1 = check_monthnum_number($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $x2 = check_monthnum_number($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether the given month number contains 28 days or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/821", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to merge two dictionaries into a single expression.\n#\n# >>> merge_dictionaries({\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"}, {\"G\" => \"Green\", \"W\" => \"White\"})\n# {\"B\" => \"Black\", \"R\" => \"Red\", \"P\" => \"Pink\", \"G\" => \"Green\", \"W\" => \"White\"}\n# >>> merge_dictionaries({\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"}, {\"O\" => \"Orange\", \"W\" => \"White\", \"B\" => \"Black\"})\n# {\"O\" => \"Orange\", \"P\" => \"Pink\", \"B\" => \"Black\", \"W\" => \"White\", \"R\" => \"Red\"}\n# >>> merge_dictionaries({\"G\" => \"Green\", \"W\" => \"White\"}, {\"O\" => \"Orange\", \"W\" => \"White\", \"B\" => \"Black\"})\n# {\"W\" => \"White\", \"O\" => \"Orange\", \"G\" => \"Green\", \"B\" => \"Black\"}\nsub merge_dictionaries\n{\n  my ($dict1, $dict2) = @_;\n", "entry_point": "merge_dictionaries", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"};\nmy $arg01 = {\"G\" => \"Green\", \"W\" => \"White\"};\nmy $x0 = merge_dictionaries($arg00, $arg01);\nmy $v0 = {\"B\" => \"Black\", \"R\" => \"Red\", \"P\" => \"Pink\", \"G\" => \"Green\", \"W\" => \"White\"};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"};\nmy $arg11 = {\"O\" => \"Orange\", \"W\" => \"White\", \"B\" => \"Black\"};\nmy $x1 = merge_dictionaries($arg10, $arg11);\nmy $v1 = {\"O\" => \"Orange\", \"P\" => \"Pink\", \"B\" => \"Black\", \"W\" => \"White\", \"R\" => \"Red\"};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {\"G\" => \"Green\", \"W\" => \"White\"};\nmy $arg21 = {\"O\" => \"Orange\", \"W\" => \"White\", \"B\" => \"Black\"};\nmy $x2 = merge_dictionaries($arg20, $arg21);\nmy $v2 = {\"W\" => \"White\", \"O\" => \"Orange\", \"G\" => \"Green\", \"B\" => \"Black\"};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to merge two dictionaries into a single expression.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/822", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to return true if the password is valid.\n#\n# >>> pass_validity(\"password\")\n# 0\n# >>> pass_validity(\"Password@10\")\n# 1\n# >>> pass_validity(\"password@10\")\n# 0\nsub pass_validity\n{\n  my ($p) = @_;\n", "entry_point": "pass_validity", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"password\";\nmy $x0 = pass_validity($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Password@10\";\nmy $x1 = pass_validity($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"password@10\";\nmy $x2 = pass_validity($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to return true if the password is valid.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/823", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if the given string starts with a substring using regex.\n#\n# >>> check_substring(\"dreams for dreams makes life fun\", \"makes\")\n# \"string doesnt start with the given substring\"\n# >>> check_substring(\"Hi there how are you Hi alex\", \"Hi\")\n# \"string starts with the given substring\"\n# >>> check_substring(\"Its been a long day\", \"been\")\n# \"string doesnt start with the given substring\"\nsub check_substring\n{\n  my ($string, $sample) = @_;\n", "entry_point": "check_substring", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"dreams for dreams makes life fun\";\nmy $arg01 = \"makes\";\nmy $x0 = check_substring($arg00, $arg01);\nmy $v0 = \"string doesnt start with the given substring\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Hi there how are you Hi alex\";\nmy $arg11 = \"Hi\";\nmy $x1 = check_substring($arg10, $arg11);\nmy $v1 = \"string starts with the given substring\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Its been a long day\";\nmy $arg21 = \"been\";\nmy $x2 = check_substring($arg20, $arg21);\nmy $v2 = \"string doesnt start with the given substring\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if the given string starts with a substring using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/824", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to remove even numbers from a given list.\n#\n# >>> remove_even([1, 3, 5, 2])\n# [1, 3, 5]\n# >>> remove_even([5, 6, 7])\n# [5, 7]\n# >>> remove_even([1, 2, 3, 4])\n# [1, 3]\nsub remove_even\n{\n  my ($l) = @_;\n", "entry_point": "remove_even", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 5, 2];\nmy $x0 = remove_even($arg00);\nmy $v0 = [1, 3, 5];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 6, 7];\nmy $x1 = remove_even($arg10);\nmy $v1 = [5, 7];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4];\nmy $x2 = remove_even($arg20);\nmy $v2 = [1, 3];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to remove even numbers from a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/825", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to access multiple elements of specified index from a given list.\n#\n# >>> access_elements([2, 3, 8, 4, 7, 9], [0, 3, 5])\n# [2, 4, 9]\n# >>> access_elements([1, 2, 3, 4, 5], [1, 2])\n# [2, 3]\n# >>> access_elements([1, 0, 2, 3], [0, 1])\n# [1, 0]\nsub access_elements\n{\n  my ($nums, $list_index) = @_;\n", "entry_point": "access_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 3, 8, 4, 7, 9];\nmy $arg01 = [0, 3, 5];\nmy $x0 = access_elements($arg00, $arg01);\nmy $v0 = [2, 4, 9];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5];\nmy $arg11 = [1, 2];\nmy $x1 = access_elements($arg10, $arg11);\nmy $v1 = [2, 3];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 0, 2, 3];\nmy $arg21 = [0, 1];\nmy $x2 = access_elements($arg20, $arg21);\nmy $v2 = [1, 0];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to access multiple elements of specified index from a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/826", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the type of triangle from the given sides.\n#\n# >>> check_type_of_triangle(1, 2, 3)\n# \"Obtuse-angled Triangle\"\n# >>> check_type_of_triangle(2, 2, 2)\n# \"Acute-angled Triangle\"\n# >>> check_type_of_triangle(1, 0, 1)\n# \"Right-angled Triangle\"\nsub check_type_of_triangle\n{\n  my ($a, $b, $c) = @_;\n", "entry_point": "check_type_of_triangle", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 2;\nmy $arg02 = 3;\nmy $x0 = check_type_of_triangle($arg00, $arg01, $arg02);\nmy $v0 = \"Obtuse-angled Triangle\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $arg11 = 2;\nmy $arg12 = 2;\nmy $x1 = check_type_of_triangle($arg10, $arg11, $arg12);\nmy $v1 = \"Acute-angled Triangle\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 0;\nmy $arg22 = 1;\nmy $x2 = check_type_of_triangle($arg20, $arg21, $arg22);\nmy $v2 = \"Right-angled Triangle\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the type of triangle from the given sides.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/827", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sum a specific column of a list in a given list of lists.\n#\n# >>> sum_column([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 0)\n# 12\n# >>> sum_column([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 1)\n# 15\n# >>> sum_column([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 3)\n# 9\nsub sum_column\n{\n  my ($list1, $c) = @_;\n", "entry_point": "sum_column", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]];\nmy $arg01 = 0;\nmy $x0 = sum_column($arg00, $arg01);\nmy $v0 = 12;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]];\nmy $arg11 = 1;\nmy $x1 = sum_column($arg10, $arg11);\nmy $v1 = 15;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]];\nmy $arg21 = 3;\nmy $x2 = sum_column($arg20, $arg21);\nmy $v2 = 9;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sum a specific column of a list in a given list of lists.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/828", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count alphabets,digits and special charactes in a given string.\n#\n# >>> count_alpha_dig_spl(\"abc!@#123\")\n# [3, 3, 3]\n# >>> count_alpha_dig_spl(\"dgsuy@#\\$%&1255\")\n# [5, 4, 5]\n# >>> count_alpha_dig_spl(\"fjdsif627348#%\\$^&\")\n# [6, 6, 5]\nsub count_alpha_dig_spl\n{\n  my ($string) = @_;\n", "entry_point": "count_alpha_dig_spl", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abc!@#123\";\nmy $x0 = count_alpha_dig_spl($arg00);\nmy $v0 = [3, 3, 3];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"dgsuy@#\\$%&1255\";\nmy $x1 = count_alpha_dig_spl($arg10);\nmy $v1 = [5, 4, 5];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"fjdsif627348#%\\$^&\";\nmy $x2 = count_alpha_dig_spl($arg20);\nmy $v2 = [6, 6, 5];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count alphabets,digits and special charactes in a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/829", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find out the second most repeated (or frequent) string in the given sequence.\n#\n# >>> second_frequent([\"aaa\", \"bbb\", \"ccc\", \"bbb\", \"aaa\", \"aaa\"])\n# \"bbb\"\n# >>> second_frequent([\"abc\", \"bcd\", \"abc\", \"bcd\", \"bcd\", \"bcd\"])\n# \"abc\"\n# >>> second_frequent([\"cdma\", \"gsm\", \"hspa\", \"gsm\", \"cdma\", \"cdma\"])\n# \"gsm\"\nsub second_frequent\n{\n  my ($input) = @_;\n", "entry_point": "second_frequent", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"aaa\", \"bbb\", \"ccc\", \"bbb\", \"aaa\", \"aaa\"];\nmy $x0 = second_frequent($arg00);\nmy $v0 = \"bbb\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"abc\", \"bcd\", \"abc\", \"bcd\", \"bcd\", \"bcd\"];\nmy $x1 = second_frequent($arg10);\nmy $v1 = \"abc\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"cdma\", \"gsm\", \"hspa\", \"gsm\", \"cdma\", \"cdma\"];\nmy $x2 = second_frequent($arg20);\nmy $v2 = \"gsm\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find out the second most repeated (or frequent) string in the given sequence.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/830", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to round up a number to specific digits.\n#\n# >>> round_up(123.01247, 0)\n# 124\n# >>> round_up(123.01247, 1)\n# 123.1\n# >>> round_up(123.01247, 2)\n# 123.02\nsub round_up\n{\n  my ($a, $digits) = @_;\n", "entry_point": "round_up", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 123.01247;\nmy $arg01 = 0;\nmy $x0 = round_up($arg00, $arg01);\nmy $v0 = 124;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 123.01247;\nmy $arg11 = 1;\nmy $x1 = round_up($arg10, $arg11);\nmy $v1 = 123.1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 123.01247;\nmy $arg21 = 2;\nmy $x2 = round_up($arg20, $arg21);\nmy $v2 = 123.02;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to round up a number to specific digits.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/831", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count equal element pairs from the given array.\n#\n# >>> count_pairs([1, 1, 1, 1], 4)\n# 6\n# >>> count_pairs([1, 5, 1], 3)\n# 1\n# >>> count_pairs([3, 2, 1, 7, 8, 9], 6)\n# 0\nsub count_pairs\n{\n  my ($arr, $n) = @_;\n", "entry_point": "count_pairs", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 1, 1, 1];\nmy $arg01 = 4;\nmy $x0 = count_pairs($arg00, $arg01);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 5, 1];\nmy $arg11 = 3;\nmy $x1 = count_pairs($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 2, 1, 7, 8, 9];\nmy $arg21 = 6;\nmy $x2 = count_pairs($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count equal element pairs from the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/832", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract the maximum numeric value from a string by using regex.\n#\n# >>> extract_max(\"100klh564abc365bg\")\n# 564\n# >>> extract_max(\"hello300how546mer231\")\n# 546\n# >>> extract_max(\"its233beenalong343journey234\")\n# 343\nsub extract_max\n{\n  my ($input) = @_;\n", "entry_point": "extract_max", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"100klh564abc365bg\";\nmy $x0 = extract_max($arg00);\nmy $v0 = 564;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"hello300how546mer231\";\nmy $x1 = extract_max($arg10);\nmy $v1 = 546;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"its233beenalong343journey234\";\nmy $x2 = extract_max($arg20);\nmy $v2 = 343;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract the maximum numeric value from a string by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/833", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to get dictionary keys as a list.\n#\n# >>> get_key({1 => \"python\", 2 => \"java\"})\n# [1, 2]\n# >>> get_key({10 => \"red\", 20 => \"blue\", 30 => \"black\"})\n# [10, 20, 30]\n# >>> get_key({27 => \"language\", 39 => \"java\", 44 => \"little\"})\n# [27, 39, 44]\nsub get_key\n{\n  my ($dict) = @_;\n", "entry_point": "get_key", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {1 => \"python\", 2 => \"java\"};\nmy $x0 = get_key($arg00);\nmy $v0 = [1, 2];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {10 => \"red\", 20 => \"blue\", 30 => \"black\"};\nmy $x1 = get_key($arg10);\nmy $v1 = [10, 20, 30];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {27 => \"language\", 39 => \"java\", 44 => \"little\"};\nmy $x2 = get_key($arg20);\nmy $v2 = [27, 39, 44];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to get dictionary keys as a list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/834", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n#\n# >>> generate_matrix(3)\n# [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n# >>> generate_matrix(2)\n# [[1, 2], [4, 3]]\n# >>> generate_matrix(7)\n# [[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]\nsub generate_matrix\n{\n  my ($n) = @_;\n", "entry_point": "generate_matrix", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $x0 = generate_matrix($arg00);\nmy $v0 = [[1, 2, 3], [8, 9, 4], [7, 6, 5]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = generate_matrix($arg10);\nmy $v1 = [[1, 2], [4, 3]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 7;\nmy $x2 = generate_matrix($arg20);\nmy $v2 = [[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/835", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the slope of a line.\n#\n# >>> slope(4, 2, 2, 5)\n# -1.5\n# >>> slope(2, 4, 4, 6)\n# 1\n# >>> slope(1, 2, 4, 2)\n# 0\nsub slope\n{\n  my ($x1, $y1, $x2, $y2) = @_;\n", "entry_point": "slope", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $arg01 = 2;\nmy $arg02 = 2;\nmy $arg03 = 5;\nmy $x0 = slope($arg00, $arg01, $arg02, $arg03);\nmy $v0 = -1.5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $arg11 = 4;\nmy $arg12 = 4;\nmy $arg13 = 6;\nmy $x1 = slope($arg10, $arg11, $arg12, $arg13);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 2;\nmy $arg22 = 4;\nmy $arg23 = 2;\nmy $x2 = slope($arg20, $arg21, $arg22, $arg23);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the slope of a line.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/836", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find length of the subarray having maximum sum.\n#\n# >>> max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n# 5\n# >>> max_sub_array_sum([1, -2, 1, 1, -2, 1], 6)\n# 2\n# >>> max_sub_array_sum([-1, -2, 3, 4, 5], 5)\n# 3\nsub max_sub_array_sum\n{\n  my ($a, $size) = @_;\n", "entry_point": "max_sub_array_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [-2, -3, 4, -1, -2, 1, 5, -3];\nmy $arg01 = 8;\nmy $x0 = max_sub_array_sum($arg00, $arg01);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, -2, 1, 1, -2, 1];\nmy $arg11 = 6;\nmy $x1 = max_sub_array_sum($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [-1, -2, 3, 4, 5];\nmy $arg21 = 5;\nmy $x2 = max_sub_array_sum($arg20, $arg21);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find length of the subarray having maximum sum.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/837", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the cube sum of first n odd natural numbers.\n#\n# >>> cube_sum(2)\n# 28\n# >>> cube_sum(3)\n# 153\n# >>> cube_sum(4)\n# 496\nsub cube_sum\n{\n  my ($n) = @_;\n", "entry_point": "cube_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = cube_sum($arg00);\nmy $v0 = 28;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $x1 = cube_sum($arg10);\nmy $v1 = 153;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $x2 = cube_sum($arg20);\nmy $v2 = 496;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the cube sum of first n odd natural numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/838", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find minimum number swaps required to make two binary strings equal.\n#\n# >>> min_swaps(\"0011\", \"1111\")\n# 1\n# >>> min_swaps(\"00011\", \"01001\")\n# 2\n# >>> min_swaps(\"111\", \"111\")\n# 0\nsub min_swaps\n{\n  my ($s1, $s2) = @_;\n", "entry_point": "min_swaps", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"0011\";\nmy $arg01 = \"1111\";\nmy $x0 = min_swaps($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"00011\";\nmy $arg11 = \"01001\";\nmy $x1 = min_swaps($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"111\";\nmy $arg21 = \"111\";\nmy $x2 = min_swaps($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find minimum number swaps required to make two binary strings equal.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/839", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort the tuples alphabetically by the first item of each tuple.\n#\n# >>> sort_tuple([[\"Amana\", 28], [\"Zenat\", 30], [\"Abhishek\", 29], [\"Nikhil\", 21], [\"B\", \"C\"]])\n# [[\"Abhishek\", 29], [\"Amana\", 28], [\"B\", \"C\"], [\"Nikhil\", 21], [\"Zenat\", 30]]\n# >>> sort_tuple([[\"aaaa\", 28], [\"aa\", 30], [\"bab\", 29], [\"bb\", 21], [\"csa\", \"C\"]])\n# [[\"aa\", 30], [\"aaaa\", 28], [\"bab\", 29], [\"bb\", 21], [\"csa\", \"C\"]]\n# >>> sort_tuple([[\"Sarala\", 28], [\"Ayesha\", 30], [\"Suman\", 29], [\"Sai\", 21], [\"G\", \"H\"]])\n# [[\"Ayesha\", 30], [\"G\", \"H\"], [\"Sai\", 21], [\"Sarala\", 28], [\"Suman\", 29]]\nsub sort_tuple\n{\n  my ($tup) = @_;\n", "entry_point": "sort_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"Amana\", 28], [\"Zenat\", 30], [\"Abhishek\", 29], [\"Nikhil\", 21], [\"B\", \"C\"]];\nmy $x0 = sort_tuple($arg00);\nmy $v0 = [[\"Abhishek\", 29], [\"Amana\", 28], [\"B\", \"C\"], [\"Nikhil\", 21], [\"Zenat\", 30]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"aaaa\", 28], [\"aa\", 30], [\"bab\", 29], [\"bb\", 21], [\"csa\", \"C\"]];\nmy $x1 = sort_tuple($arg10);\nmy $v1 = [[\"aa\", 30], [\"aaaa\", 28], [\"bab\", 29], [\"bb\", 21], [\"csa\", \"C\"]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[\"Sarala\", 28], [\"Ayesha\", 30], [\"Suman\", 29], [\"Sai\", 21], [\"G\", \"H\"]];\nmy $x2 = sort_tuple($arg20);\nmy $v2 = [[\"Ayesha\", 30], [\"G\", \"H\"], [\"Sai\", 21], [\"Sarala\", 28], [\"Suman\", 29]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort the tuples alphabetically by the first item of each tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/840", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n#\n# >>> check_solution(2, 0, -1)\n# \"Yes\"\n# >>> check_solution(1, -5, 6)\n# \"No\"\n# >>> check_solution(2, 0, 2)\n# \"Yes\"\nsub check_solution\n{\n  my ($a, $b, $c) = @_;\n", "entry_point": "check_solution", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $arg01 = 0;\nmy $arg02 = -1;\nmy $x0 = check_solution($arg00, $arg01, $arg02);\nmy $v0 = \"Yes\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = -5;\nmy $arg12 = 6;\nmy $x1 = check_solution($arg10, $arg11, $arg12);\nmy $v1 = \"No\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $arg21 = 0;\nmy $arg22 = 2;\nmy $x2 = check_solution($arg20, $arg21, $arg22);\nmy $v2 = \"Yes\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/841", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count the number of inversions in the given array.\n#\n# >>> get_inv_count([1, 20, 6, 4, 5], 5)\n# 5\n# >>> get_inv_count([8, 4, 2, 1], 4)\n# 6\n# >>> get_inv_count([3, 1, 2], 3)\n# 2\nsub get_inv_count\n{\n  my ($arr, $n) = @_;\n", "entry_point": "get_inv_count", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 20, 6, 4, 5];\nmy $arg01 = 5;\nmy $x0 = get_inv_count($arg00, $arg01);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [8, 4, 2, 1];\nmy $arg11 = 4;\nmy $x1 = get_inv_count($arg10, $arg11);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 1, 2];\nmy $arg21 = 3;\nmy $x2 = get_inv_count($arg20, $arg21);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count the number of inversions in the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/842", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the number which occurs for odd number of times in the given array.\n#\n# >>> get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)\n# 5\n# >>> get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7)\n# 3\n# >>> get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7)\n# 5\nsub get_odd_occurence\n{\n  my ($arr, $arr_size) = @_;\n", "entry_point": "get_odd_occurence", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2];\nmy $arg01 = 13;\nmy $x0 = get_odd_occurence($arg00, $arg01);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 2, 3, 1, 3];\nmy $arg11 = 7;\nmy $x1 = get_odd_occurence($arg10, $arg11);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [5, 7, 2, 7, 5, 2, 5];\nmy $arg21 = 7;\nmy $x2 = get_odd_occurence($arg20, $arg21);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the number which occurs for odd number of times in the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/843", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n#\n# >>> nth_super_ugly_number(12, [2, 7, 13, 19])\n# 32\n# >>> nth_super_ugly_number(10, [2, 7, 13, 19])\n# 26\n# >>> nth_super_ugly_number(100, [2, 7, 13, 19])\n# 5408\nsub nth_super_ugly_number\n{\n  my ($n, $primes) = @_;\n", "entry_point": "nth_super_ugly_number", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 12;\nmy $arg01 = [2, 7, 13, 19];\nmy $x0 = nth_super_ugly_number($arg00, $arg01);\nmy $v0 = 32;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = [2, 7, 13, 19];\nmy $x1 = nth_super_ugly_number($arg10, $arg11);\nmy $v1 = 26;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 100;\nmy $arg21 = [2, 7, 13, 19];\nmy $x2 = nth_super_ugly_number($arg20, $arg21);\nmy $v2 = 5408;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/844", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the kth element in an array containing odd elements first and then even elements.\n#\n# >>> get_number(8, 5)\n# 2\n# >>> get_number(7, 2)\n# 3\n# >>> get_number(5, 2)\n# 3\nsub get_number\n{\n  my ($n, $k) = @_;\n", "entry_point": "get_number", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 8;\nmy $arg01 = 5;\nmy $x0 = get_number($arg00, $arg01);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 7;\nmy $arg11 = 2;\nmy $x1 = get_number($arg10, $arg11);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $arg21 = 2;\nmy $x2 = get_number($arg20, $arg21);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the kth element in an array containing odd elements first and then even elements.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/845", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the number of digits in factorial of a given number.\n#\n# >>> find_digits(7)\n# 4\n# >>> find_digits(5)\n# 3\n# >>> find_digits(4)\n# 2\nsub find_digits\n{\n  my ($n) = @_;\n", "entry_point": "find_digits", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 7;\nmy $x0 = find_digits($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $x1 = find_digits($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $x2 = find_digits($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the number of digits in factorial of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/846", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the minimum number of platforms required for a railway/bus station.\n#\n# >>> find_platform([900, 940, 950, 1100, 1500, 1800], [910, 1200, 1120, 1130, 1900, 2000], 6)\n# 3\n# >>> find_platform([100, 200, 300, 400], [700, 800, 900, 1000], 4)\n# 4\n# >>> find_platform([5, 6, 7, 8], [4, 3, 2, 1], 4)\n# 1\nsub find_platform\n{\n  my ($arr, $dep, $n) = @_;\n", "entry_point": "find_platform", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [900, 940, 950, 1100, 1500, 1800];\nmy $arg01 = [910, 1200, 1120, 1130, 1900, 2000];\nmy $arg02 = 6;\nmy $x0 = find_platform($arg00, $arg01, $arg02);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [100, 200, 300, 400];\nmy $arg11 = [700, 800, 900, 1000];\nmy $arg12 = 4;\nmy $x1 = find_platform($arg10, $arg11, $arg12);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [5, 6, 7, 8];\nmy $arg21 = [4, 3, 2, 1];\nmy $arg22 = 4;\nmy $x2 = find_platform($arg20, $arg21, $arg22);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the minimum number of platforms required for a railway/bus station.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/847", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to copy a list from a singleton tuple.\n#\n# >>> lcopy([1, 2, 3])\n# [1, 2, 3]\n# >>> lcopy([4, 8, 2, 10, 15, 18])\n# [4, 8, 2, 10, 15, 18]\n# >>> lcopy([4, 5, 6])\n# [4, 5, 6]\nsub lcopy\n{\n  my ($xs) = @_;\n", "entry_point": "lcopy", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $x0 = lcopy($arg00);\nmy $v0 = [1, 2, 3];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 8, 2, 10, 15, 18];\nmy $x1 = lcopy($arg10);\nmy $v1 = [4, 8, 2, 10, 15, 18];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [4, 5, 6];\nmy $x2 = lcopy($arg20);\nmy $v2 = [4, 5, 6];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to copy a list from a singleton tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/848", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the area of a trapezium.\n#\n# >>> area_trapezium(6, 9, 4)\n# 30\n# >>> area_trapezium(10, 20, 30)\n# 450\n# >>> area_trapezium(15, 25, 35)\n# 700\nsub area_trapezium\n{\n  my ($base1, $base2, $height) = @_;\n", "entry_point": "area_trapezium", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 6;\nmy $arg01 = 9;\nmy $arg02 = 4;\nmy $x0 = area_trapezium($arg00, $arg01, $arg02);\nmy $v0 = 30;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = 20;\nmy $arg12 = 30;\nmy $x1 = area_trapezium($arg10, $arg11, $arg12);\nmy $v1 = 450;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 15;\nmy $arg21 = 25;\nmy $arg22 = 35;\nmy $x2 = area_trapezium($arg20, $arg21, $arg22);\nmy $v2 = 700;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the area of a trapezium.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/849", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find sum of all prime divisors of a given number.\n#\n# >>> sum(60)\n# 10\n# >>> sum(39)\n# 16\n# >>> sum(40)\n# 7\nsub sum\n{\n  my ($n) = @_;\n", "entry_point": "sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 60;\nmy $x0 = sum($arg00);\nmy $v0 = 10;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 39;\nmy $x1 = sum($arg10);\nmy $v1 = 16;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 40;\nmy $x2 = sum($arg20);\nmy $v2 = 7;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find sum of all prime divisors of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/850", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if a triangle of positive area is possible with the given angles.\n#\n# >>> is_triangleexists(50, 60, 70)\n# 1\n# >>> is_triangleexists(90, 45, 45)\n# 1\n# >>> is_triangleexists(150, 30, 70)\n# 0\nsub is_triangleexists\n{\n  my ($a, $b, $c) = @_;\n", "entry_point": "is_triangleexists", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 50;\nmy $arg01 = 60;\nmy $arg02 = 70;\nmy $x0 = is_triangleexists($arg00, $arg01, $arg02);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 90;\nmy $arg11 = 45;\nmy $arg12 = 45;\nmy $x1 = is_triangleexists($arg10, $arg11, $arg12);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 150;\nmy $arg21 = 30;\nmy $arg22 = 70;\nmy $x2 = is_triangleexists($arg20, $arg21, $arg22);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if a triangle of positive area is possible with the given angles.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/851", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find sum of inverse of divisors.\n#\n# >>> sum_of_inverse_divisors(6, 12)\n# 2\n# >>> sum_of_inverse_divisors(9, 13)\n# 1.44\n# >>> sum_of_inverse_divisors(1, 4)\n# 4\nsub sum_of_inverse_divisors\n{\n  my ($n, $sum) = @_;\n", "entry_point": "sum_of_inverse_divisors", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 6;\nmy $arg01 = 12;\nmy $x0 = sum_of_inverse_divisors($arg00, $arg01);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 9;\nmy $arg11 = 13;\nmy $x1 = sum_of_inverse_divisors($arg10, $arg11);\nmy $v1 = 1.44;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 4;\nmy $x2 = sum_of_inverse_divisors($arg20, $arg21);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find sum of inverse of divisors.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/852", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to remove negative numbers from a list.\n#\n# >>> remove_negs([1, -2, 3, -4])\n# [1, 3]\n# >>> remove_negs([1, 2, 3, -4])\n# [1, 2, 3]\n# >>> remove_negs([4, 5, -6, 7, -8])\n# [4, 5, 7]\nsub remove_negs\n{\n  my ($num_list) = @_;\n", "entry_point": "remove_negs", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, -2, 3, -4];\nmy $x0 = remove_negs($arg00);\nmy $v0 = [1, 3];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, -4];\nmy $x1 = remove_negs($arg10);\nmy $v1 = [1, 2, 3];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [4, 5, -6, 7, -8];\nmy $x2 = remove_negs($arg20);\nmy $v2 = [4, 5, 7];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to remove negative numbers from a list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/853", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find sum of odd factors of a number.\n#\n# >>> sum_of_odd_factors(30)\n# 24\n# >>> sum_of_odd_factors(18)\n# 13\n# >>> sum_of_odd_factors(2)\n# 1\nsub sum_of_odd_factors\n{\n  my ($n) = @_;\n", "entry_point": "sum_of_odd_factors", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 30;\nmy $x0 = sum_of_odd_factors($arg00);\nmy $v0 = 24;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 18;\nmy $x1 = sum_of_odd_factors($arg10);\nmy $v1 = 13;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $x2 = sum_of_odd_factors($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find sum of odd factors of a number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/854", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n#\n# >>> raw_heap([25, 44, 68, 21, 39, 23, 89])\n# [21, 25, 23, 44, 39, 68, 89]\n# >>> raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])\n# [14, 25, 22, 25, 35, 65, 75, 85, 58]\n# >>> raw_heap([4, 5, 6, 2])\n# [2, 4, 6, 5]\nsub raw_heap\n{\n  my ($rawheap) = @_;\n", "entry_point": "raw_heap", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [25, 44, 68, 21, 39, 23, 89];\nmy $x0 = raw_heap($arg00);\nmy $v0 = [21, 25, 23, 44, 39, 68, 89];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [25, 35, 22, 85, 14, 65, 75, 25, 58];\nmy $x1 = raw_heap($arg10);\nmy $v1 = [14, 25, 22, 25, 35, 65, 75, 85, 58];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [4, 5, 6, 2];\nmy $x2 = raw_heap($arg20);\nmy $v2 = [2, 4, 6, 5];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/855", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check for even parity of a given number.\n#\n# >>> check_even_parity(10)\n# 1\n# >>> check_even_parity(11)\n# 0\n# >>> check_even_parity(18)\n# 1\nsub check_even_parity\n{\n  my ($x) = @_;\n", "entry_point": "check_even_parity", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = check_even_parity($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 11;\nmy $x1 = check_even_parity($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 18;\nmy $x2 = check_even_parity($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check for even parity of a given number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/856", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find minimum adjacent swaps required to sort binary array.\n#\n# >>> find_min_swaps([1, 0, 1, 0], 4)\n# 3\n# >>> find_min_swaps([0, 1, 0], 3)\n# 1\n# >>> find_min_swaps([0, 0, 1, 1, 0], 5)\n# 2\nsub find_min_swaps\n{\n  my ($arr, $n) = @_;\n", "entry_point": "find_min_swaps", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 0, 1, 0];\nmy $arg01 = 4;\nmy $x0 = find_min_swaps($arg00, $arg01);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [0, 1, 0];\nmy $arg11 = 3;\nmy $x1 = find_min_swaps($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [0, 0, 1, 1, 0];\nmy $arg21 = 5;\nmy $x2 = find_min_swaps($arg20, $arg21);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find minimum adjacent swaps required to sort binary array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/857", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to list out the list of given strings individually using map function.\n#\n# >>> listify_list([\"Red\", \"Blue\", \"Black\", \"White\", \"Pink\"])\n# [[\"R\", \"e\", \"d\"], [\"B\", \"l\", \"u\", \"e\"], [\"B\", \"l\", \"a\", \"c\", \"k\"], [\"W\", \"h\", \"i\", \"t\", \"e\"], [\"P\", \"i\", \"n\", \"k\"]]\n# >>> listify_list([\"python\"])\n# [[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]]\n# >>> listify_list([\" red \", \"green\", \" black\", \"blue \", \" orange\", \"brown\"])\n# [[\" \", \"r\", \"e\", \"d\", \" \"], [\"g\", \"r\", \"e\", \"e\", \"n\"], [\" \", \"b\", \"l\", \"a\", \"c\", \"k\"], [\"b\", \"l\", \"u\", \"e\", \" \"], [\" \", \"o\", \"r\", \"a\", \"n\", \"g\", \"e\"], [\"b\", \"r\", \"o\", \"w\", \"n\"]]\nsub listify_list\n{\n  my ($list1) = @_;\n", "entry_point": "listify_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"Red\", \"Blue\", \"Black\", \"White\", \"Pink\"];\nmy $x0 = listify_list($arg00);\nmy $v0 = [[\"R\", \"e\", \"d\"], [\"B\", \"l\", \"u\", \"e\"], [\"B\", \"l\", \"a\", \"c\", \"k\"], [\"W\", \"h\", \"i\", \"t\", \"e\"], [\"P\", \"i\", \"n\", \"k\"]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"python\"];\nmy $x1 = listify_list($arg10);\nmy $v1 = [[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\" red \", \"green\", \" black\", \"blue \", \" orange\", \"brown\"];\nmy $x2 = listify_list($arg20);\nmy $v2 = [[\" \", \"r\", \"e\", \"d\", \" \"], [\"g\", \"r\", \"e\", \"e\", \"n\"], [\" \", \"b\", \"l\", \"a\", \"c\", \"k\"], [\"b\", \"l\", \"u\", \"e\", \" \"], [\" \", \"o\", \"r\", \"a\", \"n\", \"g\", \"e\"], [\"b\", \"r\", \"o\", \"w\", \"n\"]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to list out the list of given strings individually using map function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/858", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count number of lists in a given list of lists and square the count.\n#\n# >>> count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n# 25\n# >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n# 16\n# >>> count_list([[2, 4], [[6, 8], [4, 5, 8]], [10, 12, 14]])\n# 9\nsub count_list\n{\n  my ($input_list) = @_;\n", "entry_point": "count_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]];\nmy $x0 = count_list($arg00);\nmy $v0 = 25;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]];\nmy $x1 = count_list($arg10);\nmy $v1 = 16;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[2, 4], [[6, 8], [4, 5, 8]], [10, 12, 14]];\nmy $x2 = count_list($arg20);\nmy $v2 = 9;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count number of lists in a given list of lists and square the count.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/859", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to generate all sublists of a given list.\n#\n# >>> sub_lists([10, 20, 30, 40])\n# [[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\n# >>> sub_lists([\"X\", \"Y\", \"Z\"])\n# [[], [\"X\"], [\"Y\"], [\"Z\"], [\"X\", \"Y\"], [\"X\", \"Z\"], [\"Y\", \"Z\"], [\"X\", \"Y\", \"Z\"]]\n# >>> sub_lists([1, 2, 3])\n# [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\nsub sub_lists\n{\n  my ($my_list) = @_;\n", "entry_point": "sub_lists", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 20, 30, 40];\nmy $x0 = sub_lists($arg00);\nmy $v0 = [[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"X\", \"Y\", \"Z\"];\nmy $x1 = sub_lists($arg10);\nmy $v1 = [[], [\"X\"], [\"Y\"], [\"Z\"], [\"X\", \"Y\"], [\"X\", \"Z\"], [\"Y\", \"Z\"], [\"X\", \"Y\", \"Z\"]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3];\nmy $x2 = sub_lists($arg20);\nmy $v2 = [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to generate all sublists of a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/860", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n#\n# >>> check_alphanumeric(\"dawood@\")\n# \"Discard\"\n# >>> check_alphanumeric(\"skdmsam326\")\n# \"Accept\"\n# >>> check_alphanumeric(\"cooltricks@\")\n# \"Discard\"\nsub check_alphanumeric\n{\n  my ($string) = @_;\n", "entry_point": "check_alphanumeric", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"dawood@\";\nmy $x0 = check_alphanumeric($arg00);\nmy $v0 = \"Discard\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"skdmsam326\";\nmy $x1 = check_alphanumeric($arg10);\nmy $v1 = \"Accept\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"cooltricks@\";\nmy $x2 = check_alphanumeric($arg20);\nmy $v2 = \"Discard\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/861", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find all anagrams of a string in a given list of strings using lambda function.\n#\n# >>> anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"], \"abcd\")\n# [\"bcda\", \"cbda\", \"adcb\"]\n# >>> anagram_lambda([\"recitals\", \" python\"], \"articles\")\n# [\"recitals\"]\n# >>> anagram_lambda([\" keep\", \" abcdef\", \" xyz\"], \" peek\")\n# [\" keep\"]\nsub anagram_lambda\n{\n  my ($texts, $str) = @_;\n", "entry_point": "anagram_lambda", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"];\nmy $arg01 = \"abcd\";\nmy $x0 = anagram_lambda($arg00, $arg01);\nmy $v0 = [\"bcda\", \"cbda\", \"adcb\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"recitals\", \" python\"];\nmy $arg11 = \"articles\";\nmy $x1 = anagram_lambda($arg10, $arg11);\nmy $v1 = [\"recitals\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\" keep\", \" abcdef\", \" xyz\"];\nmy $arg21 = \" peek\";\nmy $x2 = anagram_lambda($arg20, $arg21);\nmy $v2 = [\" keep\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find all anagrams of a string in a given list of strings using lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/862", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the occurrences of n most common words in a given text.\n#\n# >>> n_common_words(\"python is a programming language\", 1)\n# [[\"python\", 1]]\n# >>> n_common_words(\"python is a programming language\", 1)\n# [[\"python\", 1]]\n# >>> n_common_words(\"python is a programming language\", 5)\n# [[\"python\", 1], [\"is\", 1], [\"a\", 1], [\"programming\", 1], [\"language\", 1]]\nsub n_common_words\n{\n  my ($text, $n) = @_;\n", "entry_point": "n_common_words", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python is a programming language\";\nmy $arg01 = 1;\nmy $x0 = n_common_words($arg00, $arg01);\nmy $v0 = [[\"python\", 1]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"python is a programming language\";\nmy $arg11 = 1;\nmy $x1 = n_common_words($arg10, $arg11);\nmy $v1 = [[\"python\", 1]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"python is a programming language\";\nmy $arg21 = 5;\nmy $x2 = n_common_words($arg20, $arg21);\nmy $v2 = [[\"python\", 1], [\"is\", 1], [\"a\", 1], [\"programming\", 1], [\"language\", 1]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the occurrences of n most common words in a given text.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/863", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n#\n# >>> find_longest_conseq_subseq([1, 2, 2, 3], 4)\n# 3\n# >>> find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7)\n# 4\n# >>> find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11)\n# 5\nsub find_longest_conseq_subseq\n{\n  my ($arr, $n) = @_;\n", "entry_point": "find_longest_conseq_subseq", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 2, 3];\nmy $arg01 = 4;\nmy $x0 = find_longest_conseq_subseq($arg00, $arg01);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 9, 3, 10, 4, 20, 2];\nmy $arg11 = 7;\nmy $x1 = find_longest_conseq_subseq($arg10, $arg11);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42];\nmy $arg21 = 11;\nmy $x2 = find_longest_conseq_subseq($arg20, $arg21);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/864", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find palindromes in a given list of strings using lambda function.\n#\n# >>> palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])\n# [\"php\", \"aaa\"]\n# >>> palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])\n# [\"abba\", \"aba\"]\n# >>> palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])\n# [\"abbccbba\", \"abba\", \"aba\"]\nsub palindrome_lambda\n{\n  my ($texts) = @_;\n", "entry_point": "palindrome_lambda", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"];\nmy $x0 = palindrome_lambda($arg00);\nmy $v0 = [\"php\", \"aaa\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"abcd\", \"Python\", \"abba\", \"aba\"];\nmy $x1 = palindrome_lambda($arg10);\nmy $v1 = [\"abba\", \"aba\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"abcd\", \"abbccbba\", \"abba\", \"aba\"];\nmy $x2 = palindrome_lambda($arg20);\nmy $v2 = [\"abbccbba\", \"abba\", \"aba\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find palindromes in a given list of strings using lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/865", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to print n-times a list using map function.\n#\n# >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n# [3, 6, 9, 12, 15, 18, 21]\n# >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 4)\n# [4, 8, 12, 16, 20, 24, 28]\n# >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 10)\n# [10, 20, 30, 40, 50, 60, 70]\nsub ntimes_list\n{\n  my ($nums, $n) = @_;\n", "entry_point": "ntimes_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6, 7];\nmy $arg01 = 3;\nmy $x0 = ntimes_list($arg00, $arg01);\nmy $v0 = [3, 6, 9, 12, 15, 18, 21];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5, 6, 7];\nmy $arg11 = 4;\nmy $x1 = ntimes_list($arg10, $arg11);\nmy $v1 = [4, 8, 12, 16, 20, 24, 28];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 5, 6, 7];\nmy $arg21 = 10;\nmy $x2 = ntimes_list($arg20, $arg21);\nmy $v2 = [10, 20, 30, 40, 50, 60, 70];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to print n-times a list using map function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/866", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check whether the given month name contains 31 days or not.\n#\n# >>> check_monthnumb(\"February\")\n# 0\n# >>> check_monthnumb(\"January\")\n# 1\n# >>> check_monthnumb(\"March\")\n# 1\nsub check_monthnumb\n{\n  my ($monthname2) = @_;\n", "entry_point": "check_monthnumb", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"February\";\nmy $x0 = check_monthnumb($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"January\";\nmy $x1 = check_monthnumb($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"March\";\nmy $x2 = check_monthnumb($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check whether the given month name contains 31 days or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/867", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to add a minimum number such that the sum of array becomes even.\n#\n# >>> min_num([1, 2, 3, 4, 5, 6, 7, 8, 9], 9)\n# 1\n# >>> min_num([1, 2, 3, 4, 5, 6, 7, 8], 8)\n# 2\n# >>> min_num([1, 2, 3], 3)\n# 2\nsub min_num\n{\n  my ($arr, $n) = @_;\n", "entry_point": "min_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nmy $arg01 = 9;\nmy $x0 = min_num($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5, 6, 7, 8];\nmy $arg11 = 8;\nmy $x1 = min_num($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3];\nmy $arg21 = 3;\nmy $x2 = min_num($arg20, $arg21);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to add a minimum number such that the sum of array becomes even.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/868", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the length of the last word in a given string.\n#\n# >>> length_of_last_word(\"python language\")\n# 8\n# >>> length_of_last_word(\"PHP\")\n# 3\n# >>> length_of_last_word(\"\")\n# 0\nsub length_of_last_word\n{\n  my ($a) = @_;\n", "entry_point": "length_of_last_word", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python language\";\nmy $x0 = length_of_last_word($arg00);\nmy $v0 = 8;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"PHP\";\nmy $x1 = length_of_last_word($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"\";\nmy $x2 = length_of_last_word($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the length of the last word in a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/869", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove sublists from a given list of lists, which are outside a given range.\n#\n# >>> remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 13, 17)\n# [[13, 14, 15, 17]]\n# >>> remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 1, 3)\n# [[2], [1, 2, 3]]\n# >>> remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 0, 7)\n# [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]\nsub remove_list_range\n{\n  my ($list1, $leftrange, $rigthrange) = @_;\n", "entry_point": "remove_list_range", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]];\nmy $arg01 = 13;\nmy $arg02 = 17;\nmy $x0 = remove_list_range($arg00, $arg01, $arg02);\nmy $v0 = [[13, 14, 15, 17]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]];\nmy $arg11 = 1;\nmy $arg12 = 3;\nmy $x1 = remove_list_range($arg10, $arg11, $arg12);\nmy $v1 = [[2], [1, 2, 3]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]];\nmy $arg21 = 0;\nmy $arg22 = 7;\nmy $x2 = remove_list_range($arg20, $arg21, $arg22);\nmy $v2 = [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove sublists from a given list of lists, which are outside a given range.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/870", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n#\n# >>> sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n# 48\n# >>> sum_positivenum([10, 15, -14, 13, -18, 12, -20])\n# 50\n# >>> sum_positivenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190])\n# 522\nsub sum_positivenum\n{\n  my ($nums) = @_;\n", "entry_point": "sum_positivenum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 4, -6, -9, 11, -12, 14, -5, 17];\nmy $x0 = sum_positivenum($arg00);\nmy $v0 = 48;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [10, 15, -14, 13, -18, 12, -20];\nmy $x1 = sum_positivenum($arg10);\nmy $v1 = 50;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [19, -65, 57, 39, 152, -639, 121, 44, 90, -190];\nmy $x2 = sum_positivenum($arg20);\nmy $v2 = 522;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/871", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the given strings are rotations of each other or not.\n#\n# >>> are_rotations(\"abc\", \"cba\")\n# 0\n# >>> are_rotations(\"abcd\", \"cdba\")\n# 0\n# >>> are_rotations(\"abacd\", \"cdaba\")\n# 1\nsub are_rotations\n{\n  my ($string1, $string2) = @_;\n", "entry_point": "are_rotations", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abc\";\nmy $arg01 = \"cba\";\nmy $x0 = are_rotations($arg00, $arg01);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcd\";\nmy $arg11 = \"cdba\";\nmy $x1 = are_rotations($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abacd\";\nmy $arg21 = \"cdaba\";\nmy $x2 = are_rotations($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the given strings are rotations of each other or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/872", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if a nested list is a subset of another nested list.\n#\n# >>> check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]], [[1, 3], [13, 15, 17]])\n# 1\n# >>> check_subset([[1, 2], [2, 3], [3, 4], [5, 6]], [[3, 4], [5, 6]])\n# 1\n# >>> check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]], [[[3, 4], [5, 6]]])\n# 0\nsub check_subset\n{\n  my ($list1, $list2) = @_;\n", "entry_point": "check_subset", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]];\nmy $arg01 = [[1, 3], [13, 15, 17]];\nmy $x0 = check_subset($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2], [2, 3], [3, 4], [5, 6]];\nmy $arg11 = [[3, 4], [5, 6]];\nmy $x1 = check_subset($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[[1, 2], [2, 3]], [[3, 4], [5, 7]]];\nmy $arg21 = [[[3, 4], [5, 6]]];\nmy $x2 = check_subset($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if a nested list is a subset of another nested list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/873", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to solve the fibonacci sequence using recursion.\n#\n# >>> fibonacci(7)\n# 13\n# >>> fibonacci(8)\n# 21\n# >>> fibonacci(9)\n# 34\nsub fibonacci\n{\n  my ($n) = @_;\n", "entry_point": "fibonacci", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 7;\nmy $x0 = fibonacci($arg00);\nmy $v0 = 13;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 8;\nmy $x1 = fibonacci($arg10);\nmy $v1 = 21;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 9;\nmy $x2 = fibonacci($arg20);\nmy $v2 = 34;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to solve the fibonacci sequence using recursion.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/874", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check if the string is a concatenation of another string.\n#\n# >>> check_concat(\"abcabcabc\", \"abc\")\n# 1\n# >>> check_concat(\"abcab\", \"abc\")\n# 0\n# >>> check_concat(\"aba\", \"ab\")\n# 0\nsub check_concat\n{\n  my ($str1, $str2) = @_;\n", "entry_point": "check_concat", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abcabcabc\";\nmy $arg01 = \"abc\";\nmy $x0 = check_concat($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcab\";\nmy $arg11 = \"abc\";\nmy $x1 = check_concat($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"aba\";\nmy $arg21 = \"ab\";\nmy $x2 = check_concat($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check if the string is a concatenation of another string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/875", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the minimum difference in the tuple pairs of given tuples.\n#\n# >>> min_difference([[3, 5], [1, 7], [10, 3], [1, 2]])\n# 1\n# >>> min_difference([[4, 6], [12, 8], [11, 4], [2, 13]])\n# 2\n# >>> min_difference([[5, 17], [3, 9], [12, 5], [3, 24]])\n# 6\nsub min_difference\n{\n  my ($test_list) = @_;\n", "entry_point": "min_difference", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[3, 5], [1, 7], [10, 3], [1, 2]];\nmy $x0 = min_difference($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[4, 6], [12, 8], [11, 4], [2, 13]];\nmy $x1 = min_difference($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[5, 17], [3, 9], [12, 5], [3, 24]];\nmy $x2 = min_difference($arg20);\nmy $v2 = 6;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the minimum difference in the tuple pairs of given tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/876", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find lcm of two positive integers.\n#\n# >>> lcm(4, 6)\n# 12\n# >>> lcm(15, 17)\n# 255\n# >>> lcm(2, 6)\n# 6\nsub lcm\n{\n  my ($x, $y) = @_;\n", "entry_point": "lcm", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $arg01 = 6;\nmy $x0 = lcm($arg00, $arg01);\nmy $v0 = 12;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 15;\nmy $arg11 = 17;\nmy $x1 = lcm($arg10, $arg11);\nmy $v1 = 255;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $arg21 = 6;\nmy $x2 = lcm($arg20, $arg21);\nmy $v2 = 6;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find lcm of two positive integers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/877", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to sort the given string.\n#\n# >>> sort_string(\"cba\")\n# \"abc\"\n# >>> sort_string(\"data\")\n# \"aadt\"\n# >>> sort_string(\"zxy\")\n# \"xyz\"\nsub sort_string\n{\n  my ($str) = @_;\n", "entry_point": "sort_string", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"cba\";\nmy $x0 = sort_string($arg00);\nmy $v0 = \"abc\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"data\";\nmy $x1 = sort_string($arg10);\nmy $v1 = \"aadt\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"zxy\";\nmy $x2 = sort_string($arg20);\nmy $v2 = \"xyz\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to sort the given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/878", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if the given tuple contains only k elements.\n#\n# >>> check_tuples([3, 5, 6, 5, 3, 6], [3, 6, 5])\n# 1\n# >>> check_tuples([4, 5, 6, 4, 6, 5], [4, 5, 6])\n# 1\n# >>> check_tuples([9, 8, 7, 6, 8, 9], [9, 8, 1])\n# 0\nsub check_tuples\n{\n  my ($test_tuple, $k) = @_;\n", "entry_point": "check_tuples", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 5, 6, 5, 3, 6];\nmy $arg01 = [3, 6, 5];\nmy $x0 = check_tuples($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 5, 6, 4, 6, 5];\nmy $arg11 = [4, 5, 6];\nmy $x1 = check_tuples($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [9, 8, 7, 6, 8, 9];\nmy $arg21 = [9, 8, 1];\nmy $x2 = check_tuples($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if the given tuple contains only k elements.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/879", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n#\n# >>> text_match(\"aabbbbd\")\n# \"Not matched!\"\n# >>> text_match(\"aabAbbbc\")\n# \"Not matched!\"\n# >>> text_match(\"accddbbjjjb\")\n# \"Found a match!\"\nsub text_match\n{\n  my ($text) = @_;\n", "entry_point": "text_match", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"aabbbbd\";\nmy $x0 = text_match($arg00);\nmy $v0 = \"Not matched!\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"aabAbbbc\";\nmy $x1 = text_match($arg10);\nmy $v1 = \"Not matched!\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"accddbbjjjb\";\nmy $x2 = text_match($arg20);\nmy $v2 = \"Found a match!\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/880", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find number of solutions in quadratic equation.\n#\n# >>> check_solution(2, 5, 2)\n# \"2 solutions\"\n# >>> check_solution(1, 1, 1)\n# \"No solutions\"\n# >>> check_solution(1, 2, 1)\n# \"1 solution\"\nsub check_solution\n{\n  my ($a, $b, $c) = @_;\n", "entry_point": "check_solution", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $arg01 = 5;\nmy $arg02 = 2;\nmy $x0 = check_solution($arg00, $arg01, $arg02);\nmy $v0 = \"2 solutions\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 1;\nmy $arg12 = 1;\nmy $x1 = check_solution($arg10, $arg11, $arg12);\nmy $v1 = \"No solutions\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $arg21 = 2;\nmy $arg22 = 1;\nmy $x2 = check_solution($arg20, $arg21, $arg22);\nmy $v2 = \"1 solution\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find number of solutions in quadratic equation.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/881", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the sum of first even and odd number of a given list.\n#\n# >>> sum_even_odd([1, 3, 5, 7, 4, 1, 6, 8])\n# 5\n# >>> sum_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# 3\n# >>> sum_even_odd([1, 5, 7, 9, 10])\n# 11\nsub sum_even_odd\n{\n  my ($list1) = @_;\n", "entry_point": "sum_even_odd", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 5, 7, 4, 1, 6, 8];\nmy $x0 = sum_even_odd($arg00);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nmy $x1 = sum_even_odd($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 5, 7, 9, 10];\nmy $x2 = sum_even_odd($arg20);\nmy $v2 = 11;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the sum of first even and odd number of a given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/882", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to caluclate perimeter of a parallelogram.\n#\n# >>> parallelogram_perimeter(10, 20)\n# 400\n# >>> parallelogram_perimeter(15, 20)\n# 600\n# >>> parallelogram_perimeter(8, 9)\n# 144\nsub parallelogram_perimeter\n{\n  my ($b, $h) = @_;\n", "entry_point": "parallelogram_perimeter", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 20;\nmy $x0 = parallelogram_perimeter($arg00, $arg01);\nmy $v0 = 400;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 15;\nmy $arg11 = 20;\nmy $x1 = parallelogram_perimeter($arg10, $arg11);\nmy $v1 = 600;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 8;\nmy $arg21 = 9;\nmy $x2 = parallelogram_perimeter($arg20, $arg21);\nmy $v2 = 144;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to caluclate perimeter of a parallelogram.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/883", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\n#\n# >>> div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 2, 4)\n# [152, 44]\n# >>> div_of_nums([1, 2, 3, 5, 7, 8, 10], 2, 5)\n# [10]\n# >>> div_of_nums([10, 15, 14, 13, 18, 12, 20], 10, 5)\n# [10, 20]\nsub div_of_nums\n{\n  my ($nums, $m, $n) = @_;\n", "entry_point": "div_of_nums", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [19, 65, 57, 39, 152, 639, 121, 44, 90, 190];\nmy $arg01 = 2;\nmy $arg02 = 4;\nmy $x0 = div_of_nums($arg00, $arg01, $arg02);\nmy $v0 = [152, 44];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 5, 7, 8, 10];\nmy $arg11 = 2;\nmy $arg12 = 5;\nmy $x1 = div_of_nums($arg10, $arg11, $arg12);\nmy $v1 = [10];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [10, 15, 14, 13, 18, 12, 20];\nmy $arg21 = 10;\nmy $arg22 = 5;\nmy $x2 = div_of_nums($arg20, $arg21, $arg22);\nmy $v2 = [10, 20];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/884", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether all the bits are within a given range or not.\n#\n# >>> all_bits_set_in_the_given_range(10, 2, 1)\n# 1\n# >>> all_bits_set_in_the_given_range(5, 2, 4)\n# 0\n# >>> all_bits_set_in_the_given_range(22, 2, 3)\n# 1\nsub all_bits_set_in_the_given_range\n{\n  my ($n, $l, $r) = @_;\n", "entry_point": "all_bits_set_in_the_given_range", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 2;\nmy $arg02 = 1;\nmy $x0 = all_bits_set_in_the_given_range($arg00, $arg01, $arg02);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $arg11 = 2;\nmy $arg12 = 4;\nmy $x1 = all_bits_set_in_the_given_range($arg10, $arg11, $arg12);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 22;\nmy $arg21 = 2;\nmy $arg22 = 3;\nmy $x2 = all_bits_set_in_the_given_range($arg20, $arg21, $arg22);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether all the bits are within a given range or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/885", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the two given strings are isomorphic to each other or not.\n#\n# >>> is_isomorphic(\"paper\", \"title\")\n# 1\n# >>> is_isomorphic(\"ab\", \"ba\")\n# 1\n# >>> is_isomorphic(\"ab\", \"aa\")\n# 0\nsub is_isomorphic\n{\n  my ($str1, $str2) = @_;\n", "entry_point": "is_isomorphic", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"paper\";\nmy $arg01 = \"title\";\nmy $x0 = is_isomorphic($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"ab\";\nmy $arg11 = \"ba\";\nmy $x1 = is_isomorphic($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"ab\";\nmy $arg21 = \"aa\";\nmy $x2 = is_isomorphic($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the two given strings are isomorphic to each other or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/886", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to add all the numbers in a list and divide it with the length of the list.\n#\n# >>> sum_num([8, 2, 3, 0, 7])\n# 4.0\n# >>> sum_num([-10, -20, -30])\n# -20.0\n# >>> sum_num([19, 15, 18])\n# 17.333333333333332\nsub sum_num\n{\n  my ($numbers) = @_;\n", "entry_point": "sum_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [8, 2, 3, 0, 7];\nmy $x0 = sum_num($arg00);\nmy $v0 = 4.0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [-10, -20, -30];\nmy $x1 = sum_num($arg10);\nmy $v1 = -20.0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [19, 15, 18];\nmy $x2 = sum_num($arg20);\nmy $v2 = 17.333333333333332;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to add all the numbers in a list and divide it with the length of the list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/887", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the given number is odd or not using bitwise operator.\n#\n# >>> is_odd(5)\n# 1\n# >>> is_odd(6)\n# 0\n# >>> is_odd(7)\n# 1\nsub is_odd\n{\n  my ($n) = @_;\n", "entry_point": "is_odd", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = is_odd($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 6;\nmy $x1 = is_odd($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 7;\nmy $x2 = is_odd($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the given number is odd or not using bitwise operator.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/888", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to substract the elements of the given nested tuples.\n#\n# >>> substract_elements([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n# [[-5, -4], [1, -4], [1, 8], [-6, 7]]\n# >>> substract_elements([[13, 4], [14, 6], [13, 10], [12, 11]], [[19, 8], [14, 10], [12, 2], [18, 4]])\n# [[-6, -4], [0, -4], [1, 8], [-6, 7]]\n# >>> substract_elements([[19, 5], [18, 7], [19, 11], [17, 12]], [[12, 9], [17, 11], [13, 3], [19, 5]])\n# [[7, -4], [1, -4], [6, 8], [-2, 7]]\nsub substract_elements\n{\n  my ($test_tup1, $test_tup2) = @_;\n", "entry_point": "substract_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 3], [4, 5], [2, 9], [1, 10]];\nmy $arg01 = [[6, 7], [3, 9], [1, 1], [7, 3]];\nmy $x0 = substract_elements($arg00, $arg01);\nmy $v0 = [[-5, -4], [1, -4], [1, 8], [-6, 7]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[13, 4], [14, 6], [13, 10], [12, 11]];\nmy $arg11 = [[19, 8], [14, 10], [12, 2], [18, 4]];\nmy $x1 = substract_elements($arg10, $arg11);\nmy $v1 = [[-6, -4], [0, -4], [1, 8], [-6, 7]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[19, 5], [18, 7], [19, 11], [17, 12]];\nmy $arg21 = [[12, 9], [17, 11], [13, 3], [19, 5]];\nmy $x2 = substract_elements($arg20, $arg21);\nmy $v2 = [[7, -4], [1, -4], [6, 8], [-2, 7]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to substract the elements of the given nested tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/889", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to reverse each list in a given list of lists.\n#\n# >>> reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])\n# [[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\n# >>> reverse_list_lists([[1, 2], [2, 3], [3, 4]])\n# [[2, 1], [3, 2], [4, 3]]\n# >>> reverse_list_lists([[10, 20], [30, 40]])\n# [[20, 10], [40, 30]]\nsub reverse_list_lists\n{\n  my ($lists) = @_;\n", "entry_point": "reverse_list_lists", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]];\nmy $x0 = reverse_list_lists($arg00);\nmy $v0 = [[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1, 2], [2, 3], [3, 4]];\nmy $x1 = reverse_list_lists($arg10);\nmy $v1 = [[2, 1], [3, 2], [4, 3]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[10, 20], [30, 40]];\nmy $x2 = reverse_list_lists($arg20);\nmy $v2 = [[20, 10], [40, 30]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to reverse each list in a given list of lists.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/890", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the index of an extra element present in one sorted array.\n#\n# >>> find_extra([1, 2, 3, 4], [1, 2, 3], 3)\n# 3\n# >>> find_extra([2, 4, 6, 8, 10], [2, 4, 6, 8], 4)\n# 4\n# >>> find_extra([1, 3, 5, 7, 9, 11], [1, 3, 5, 7, 9], 5)\n# 5\nsub find_extra\n{\n  my ($arr1, $arr2, $n) = @_;\n", "entry_point": "find_extra", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4];\nmy $arg01 = [1, 2, 3];\nmy $arg02 = 3;\nmy $x0 = find_extra($arg00, $arg01, $arg02);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 4, 6, 8, 10];\nmy $arg11 = [2, 4, 6, 8];\nmy $arg12 = 4;\nmy $x1 = find_extra($arg10, $arg11, $arg12);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, 5, 7, 9, 11];\nmy $arg21 = [1, 3, 5, 7, 9];\nmy $arg22 = 5;\nmy $x2 = find_extra($arg20, $arg21, $arg22);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the index of an extra element present in one sorted array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/891", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the given two numbers have same number of digits or not.\n#\n# >>> same_length(12, 1)\n# 0\n# >>> same_length(2, 2)\n# 1\n# >>> same_length(10, 20)\n# 1\nsub same_length\n{\n  my ($a, $b) = @_;\n", "entry_point": "same_length", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 12;\nmy $arg01 = 1;\nmy $x0 = same_length($arg00, $arg01);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $arg11 = 2;\nmy $x1 = same_length($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $arg21 = 20;\nmy $x2 = same_length($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the given two numbers have same number of digits or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/892", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove multiple spaces in a string.\n#\n# >>> remove_spaces(\"python  program\")\n# \"python program\"\n# >>> remove_spaces(\"python   programming    language\")\n# \"python programming language\"\n# >>> remove_spaces(\"python                     program\")\n# \"python program\"\nsub remove_spaces\n{\n  my ($text) = @_;\n", "entry_point": "remove_spaces", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python  program\";\nmy $x0 = remove_spaces($arg00);\nmy $v0 = \"python program\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"python   programming    language\";\nmy $x1 = remove_spaces($arg10);\nmy $v1 = \"python programming language\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"python                     program\";\nmy $x2 = remove_spaces($arg20);\nmy $v2 = \"python program\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove multiple spaces in a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/893", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to get the last element of each sublist.\n#\n# >>> extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]])\n# [3, 5, 9]\n# >>> extract([[\"x\", \"y\", \"z\"], [\"m\"], [\"a\", \"b\"], [\"u\", \"v\"]])\n# [\"z\", \"m\", \"b\", \"v\"]\n# >>> extract([[1, 2, 3], [4, 5]])\n# [3, 5]\nsub extract\n{\n  my ($lst) = @_;\n", "entry_point": "extract", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[1, 2, 3], [4, 5], [6, 7, 8, 9]];\nmy $x0 = extract($arg00);\nmy $v0 = [3, 5, 9];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"x\", \"y\", \"z\"], [\"m\"], [\"a\", \"b\"], [\"u\", \"v\"]];\nmy $x1 = extract($arg10);\nmy $v1 = [\"z\", \"m\", \"b\", \"v\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[1, 2, 3], [4, 5]];\nmy $x2 = extract($arg20);\nmy $v2 = [3, 5];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to get the last element of each sublist.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/894", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert the given string of float type into tuple.\n#\n# >>> float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\")\n# [1.2, 1.3, 2.3, 2.4, 6.5]\n# >>> float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\")\n# [2.3, 2.4, 5.6, 5.4, 8.9]\n# >>> float_to_tuple(\"0.3, 0.5, 7.8, 9.4\")\n# [0.3, 0.5, 7.8, 9.4]\nsub float_to_tuple\n{\n  my ($test_str) = @_;\n", "entry_point": "float_to_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"1.2, 1.3, 2.3, 2.4, 6.5\";\nmy $x0 = float_to_tuple($arg00);\nmy $v0 = [1.2, 1.3, 2.3, 2.4, 6.5];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"2.3, 2.4, 5.6, 5.4, 8.9\";\nmy $x1 = float_to_tuple($arg10);\nmy $v1 = [2.3, 2.4, 5.6, 5.4, 8.9];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"0.3, 0.5, 7.8, 9.4\";\nmy $x2 = float_to_tuple($arg20);\nmy $v2 = [0.3, 0.5, 7.8, 9.4];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert the given string of float type into tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/895", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\n#\n# >>> max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6])\n# 26\n# >>> max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7])\n# 28\n# >>> max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21])\n# 44\nsub max_sum_subseq\n{\n  my ($a) = @_;\n", "entry_point": "max_sum_subseq", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 9, 4, 5, 0, 4, 11, 6];\nmy $x0 = max_sum_subseq($arg00);\nmy $v0 = 26;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 9, 5, 6, 0, 5, 12, 7];\nmy $x1 = max_sum_subseq($arg10);\nmy $v1 = 28;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, 10, 5, 6, 0, 6, 14, 21];\nmy $x2 = max_sum_subseq($arg20);\nmy $v2 = 44;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/896", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n#\n# >>> sort_list_last([[2, 5], [1, 2], [4, 4], [2, 3], [2, 1]])\n# [[2, 1], [1, 2], [2, 3], [4, 4], [2, 5]]\n# >>> sort_list_last([[9, 8], [4, 7], [3, 5], [7, 9], [1, 2]])\n# [[1, 2], [3, 5], [4, 7], [9, 8], [7, 9]]\n# >>> sort_list_last([[20, 50], [10, 20], [40, 40]])\n# [[10, 20], [40, 40], [20, 50]]\nsub sort_list_last\n{\n  my ($tuples) = @_;\n", "entry_point": "sort_list_last", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[2, 5], [1, 2], [4, 4], [2, 3], [2, 1]];\nmy $x0 = sort_list_last($arg00);\nmy $v0 = [[2, 1], [1, 2], [2, 3], [4, 4], [2, 5]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[9, 8], [4, 7], [3, 5], [7, 9], [1, 2]];\nmy $x1 = sort_list_last($arg10);\nmy $v1 = [[1, 2], [3, 5], [4, 7], [9, 8], [7, 9]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[20, 50], [10, 20], [40, 40]];\nmy $x2 = sort_list_last($arg20);\nmy $v2 = [[10, 20], [40, 40], [20, 50]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/897", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the word is present in a given sentence or not.\n#\n# >>> is_word_present(\"machine learning\", \"machine\")\n# 1\n# >>> is_word_present(\"easy\", \"fun\")\n# 0\n# >>> is_word_present(\"python language\", \"code\")\n# 0\nsub is_word_present\n{\n  my ($sentence, $word) = @_;\n", "entry_point": "is_word_present", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"machine learning\";\nmy $arg01 = \"machine\";\nmy $x0 = is_word_present($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"easy\";\nmy $arg11 = \"fun\";\nmy $x1 = is_word_present($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"python language\";\nmy $arg21 = \"code\";\nmy $x2 = is_word_present($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the word is present in a given sentence or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/898", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract specified number of elements from a given list, which follow each other continuously.\n#\n# >>> extract_elements([1, 1, 3, 4, 4, 5, 6, 7], 2)\n# [1, 4]\n# >>> extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7], 4)\n# [4]\n# >>> extract_elements([0, 0, 0, 0, 0], 5)\n# [0]\nsub extract_elements\n{\n  my ($numbers, $n) = @_;\n", "entry_point": "extract_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 1, 3, 4, 4, 5, 6, 7];\nmy $arg01 = 2;\nmy $x0 = extract_elements($arg00, $arg01);\nmy $v0 = [1, 4];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [0, 1, 2, 3, 4, 4, 4, 4, 5, 7];\nmy $arg11 = 4;\nmy $x1 = extract_elements($arg10, $arg11);\nmy $v1 = [4];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [0, 0, 0, 0, 0];\nmy $arg21 = 5;\nmy $x2 = extract_elements($arg20, $arg21);\nmy $v2 = [0];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract specified number of elements from a given list, which follow each other continuously.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/899", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether an array can be sorted or not by picking only the corner elements.\n#\n# >>> check([3, 2, 1, 2, 3, 4], 6)\n# 1\n# >>> check([2, 1, 4, 5, 1], 5)\n# 1\n# >>> check([1, 2, 2, 1, 2, 3], 6)\n# 1\nsub check\n{\n  my ($arr, $n) = @_;\n", "entry_point": "check", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 2, 1, 2, 3, 4];\nmy $arg01 = 6;\nmy $x0 = check($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 1, 4, 5, 1];\nmy $arg11 = 5;\nmy $x1 = check($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 2, 1, 2, 3];\nmy $arg21 = 6;\nmy $x2 = check($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether an array can be sorted or not by picking only the corner elements.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/900", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function where a string will start with a specific number.\n#\n# >>> match_num(\"5-2345861\")\n# 1\n# >>> match_num(\"6-2345861\")\n# 0\n# >>> match_num(\"78910\")\n# 0\nsub match_num\n{\n  my ($string) = @_;\n", "entry_point": "match_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"5-2345861\";\nmy $x0 = match_num($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"6-2345861\";\nmy $x1 = match_num($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"78910\";\nmy $x2 = match_num($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function where a string will start with a specific number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/901", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the smallest multiple of the first n numbers.\n#\n# >>> smallest_multiple(13)\n# 360360\n# >>> smallest_multiple(2)\n# 2\n# >>> smallest_multiple(1)\n# 1\nsub smallest_multiple\n{\n  my ($n) = @_;\n", "entry_point": "smallest_multiple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 13;\nmy $x0 = smallest_multiple($arg00);\nmy $v0 = 360360;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = smallest_multiple($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $x2 = smallest_multiple($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the smallest multiple of the first n numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/902", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to combine two dictionaries by adding values for common keys.\n#\n# >>> add_dict({\"a\" => 100, \"b\" => 200, \"c\" => 300}, {\"a\" => 300, \"b\" => 200, \"d\" => 400})\n# {\"b\" => 400, \"d\" => 400, \"a\" => 400, \"c\" => 300}\n# >>> add_dict({\"a\" => 500, \"b\" => 700, \"c\" => 900}, {\"a\" => 500, \"b\" => 600, \"d\" => 900})\n# {\"b\" => 1300, \"d\" => 900, \"a\" => 1000, \"c\" => 900}\n# >>> add_dict({\"a\" => 900, \"b\" => 900, \"d\" => 900}, {\"a\" => 900, \"b\" => 900, \"d\" => 900})\n# {\"b\" => 1800, \"d\" => 1800, \"a\" => 1800}\nsub add_dict\n{\n  my ($d1, $d2) = @_;\n", "entry_point": "add_dict", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {\"a\" => 100, \"b\" => 200, \"c\" => 300};\nmy $arg01 = {\"a\" => 300, \"b\" => 200, \"d\" => 400};\nmy $x0 = add_dict($arg00, $arg01);\nmy $v0 = {\"b\" => 400, \"d\" => 400, \"a\" => 400, \"c\" => 300};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {\"a\" => 500, \"b\" => 700, \"c\" => 900};\nmy $arg11 = {\"a\" => 500, \"b\" => 600, \"d\" => 900};\nmy $x1 = add_dict($arg10, $arg11);\nmy $v1 = {\"b\" => 1300, \"d\" => 900, \"a\" => 1000, \"c\" => 900};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {\"a\" => 900, \"b\" => 900, \"d\" => 900};\nmy $arg21 = {\"a\" => 900, \"b\" => 900, \"d\" => 900};\nmy $x2 = add_dict($arg20, $arg21);\nmy $v2 = {\"b\" => 1800, \"d\" => 1800, \"a\" => 1800};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to combine two dictionaries by adding values for common keys.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/903", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to count the total unset bits from 1 to n.\n#\n# >>> count_unset_bits(2)\n# 1\n# >>> count_unset_bits(5)\n# 4\n# >>> count_unset_bits(14)\n# 17\nsub count_unset_bits\n{\n  my ($n) = @_;\n", "entry_point": "count_unset_bits", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = count_unset_bits($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $x1 = count_unset_bits($arg10);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 14;\nmy $x2 = count_unset_bits($arg20);\nmy $v2 = 17;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to count the total unset bits from 1 to n.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/904", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to return true if the given number is even else return false.\n#\n# >>> even_num(13.5)\n# 0\n# >>> even_num(0)\n# 1\n# >>> even_num(-9)\n# 0\nsub even_num\n{\n  my ($x) = @_;\n", "entry_point": "even_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 13.5;\nmy $x0 = even_num($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 0;\nmy $x1 = even_num($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = -9;\nmy $x2 = even_num($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to return true if the given number is even else return false.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/905", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of squares of binomial co-efficients.\n#\n# >>> sum_of_square(4)\n# 70\n# >>> sum_of_square(5)\n# 252\n# >>> sum_of_square(2)\n# 6\nsub sum_of_square\n{\n  my ($n) = @_;\n", "entry_point": "sum_of_square", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $x0 = sum_of_square($arg00);\nmy $v0 = 70;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $x1 = sum_of_square($arg10);\nmy $v1 = 252;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $x2 = sum_of_square($arg20);\nmy $v2 = 6;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of squares of binomial co-efficients.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/906", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to extract year, month and date from a url by using regex.\n#\n# >>> extract_date(\"https:\\/\\/www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\")\n# [[\"2016\", \"09\", \"02\"]]\n# >>> extract_date(\"https:\\/\\/www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\")\n# [[\"2020\", \"11\", \"03\"]]\n# >>> extract_date(\"https:\\/\\/economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\")\n# [[\"2020\", \"12\", \"29\"]]\nsub extract_date\n{\n  my ($url) = @_;\n", "entry_point": "extract_date", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"https:\\/\\/www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\";\nmy $x0 = extract_date($arg00);\nmy $v0 = [[\"2016\", \"09\", \"02\"]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"https:\\/\\/www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\";\nmy $x1 = extract_date($arg10);\nmy $v1 = [[\"2020\", \"11\", \"03\"]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"https:\\/\\/economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\";\nmy $x2 = extract_date($arg20);\nmy $v2 = [[\"2020\", \"12\", \"29\"]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to extract year, month and date from a url by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/907", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to print the first n lucky numbers.\n#\n# >>> lucky_num(10)\n# [1, 3, 7, 9, 13, 15, 21, 25, 31, 33]\n# >>> lucky_num(5)\n# [1, 3, 7, 9, 13]\n# >>> lucky_num(8)\n# [1, 3, 7, 9, 13, 15, 21, 25]\nsub lucky_num\n{\n  my ($n) = @_;\n", "entry_point": "lucky_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = lucky_num($arg00);\nmy $v0 = [1, 3, 7, 9, 13, 15, 21, 25, 31, 33];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $x1 = lucky_num($arg10);\nmy $v1 = [1, 3, 7, 9, 13];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 8;\nmy $x2 = lucky_num($arg20);\nmy $v2 = [1, 3, 7, 9, 13, 15, 21, 25];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to print the first n lucky numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/908", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the fixed point in the given array.\n#\n# >>> find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100], 9)\n# 3\n# >>> find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8], 8)\n# -1\n# >>> find_fixed_point([0, 2, 5, 8, 17], 5)\n# 0\nsub find_fixed_point\n{\n  my ($arr, $n) = @_;\n", "entry_point": "find_fixed_point", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [-10, -1, 0, 3, 10, 11, 30, 50, 100];\nmy $arg01 = 9;\nmy $x0 = find_fixed_point($arg00, $arg01);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5, 6, 7, 8];\nmy $arg11 = 8;\nmy $x1 = find_fixed_point($arg10, $arg11);\nmy $v1 = -1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [0, 2, 5, 8, 17];\nmy $arg21 = 5;\nmy $x2 = find_fixed_point($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the fixed point in the given array.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/909", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the previous palindrome of a specified number.\n#\n# >>> previous_palindrome(99)\n# 88\n# >>> previous_palindrome(1221)\n# 1111\n# >>> previous_palindrome(120)\n# 111\nsub previous_palindrome\n{\n  my ($num) = @_;\n", "entry_point": "previous_palindrome", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 99;\nmy $x0 = previous_palindrome($arg00);\nmy $v0 = 88;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1221;\nmy $x1 = previous_palindrome($arg10);\nmy $v1 = 1111;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 120;\nmy $x2 = previous_palindrome($arg20);\nmy $v2 = 111;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the previous palindrome of a specified number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/910", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to validate a gregorian date.\n#\n# >>> check_date(11, 11, 2002)\n# 1\n# >>> check_date(13, 11, 2002)\n# 0\n# >>> check_date(\"11\", \"11\", \"2002\")\n# 1\nsub check_date\n{\n  my ($m, $d, $y) = @_;\n", "entry_point": "check_date", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 11;\nmy $arg01 = 11;\nmy $arg02 = 2002;\nmy $x0 = check_date($arg00, $arg01, $arg02);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 13;\nmy $arg11 = 11;\nmy $arg12 = 2002;\nmy $x1 = check_date($arg10, $arg11, $arg12);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"11\";\nmy $arg21 = \"11\";\nmy $arg22 = \"2002\";\nmy $x2 = check_date($arg20, $arg21, $arg22);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to validate a gregorian date.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/911", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n#\n# >>> maximum_product([12, 74, 9, 50, 61, 41])\n# 225700\n# >>> maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])\n# 414375\n# >>> maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])\n# 2520\nsub maximum_product\n{\n  my ($nums) = @_;\n", "entry_point": "maximum_product", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [12, 74, 9, 50, 61, 41];\nmy $x0 = maximum_product($arg00);\nmy $v0 = 225700;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [25, 35, 22, 85, 14, 65, 75, 25, 58];\nmy $x1 = maximum_product($arg10);\nmy $v1 = 414375;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1];\nmy $x2 = maximum_product($arg20);\nmy $v2 = 2520;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/912", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find ln, m lobb number.\n#\n# >>> lobb_num(5, 3)\n# 35\n# >>> lobb_num(3, 2)\n# 5\n# >>> lobb_num(4, 2)\n# 20\nsub lobb_num\n{\n  my ($n, $m) = @_;\n", "entry_point": "lobb_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $arg01 = 3;\nmy $x0 = lobb_num($arg00, $arg01);\nmy $v0 = 35;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $arg11 = 2;\nmy $x1 = lobb_num($arg10, $arg11);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $arg21 = 2;\nmy $x2 = lobb_num($arg20, $arg21);\nmy $v2 = 20;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find ln, m lobb number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/913", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check for a number at the end of a string.\n#\n# >>> end_num(\"abcdef\")\n# 0\n# >>> end_num(\"abcdef7\")\n# 1\n# >>> end_num(\"abc\")\n# 0\nsub end_num\n{\n  my ($string) = @_;\n", "entry_point": "end_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abcdef\";\nmy $x0 = end_num($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcdef7\";\nmy $x1 = end_num($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abc\";\nmy $x2 = end_num($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check for a number at the end of a string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/914", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the given string is made up of two alternating characters or not.\n#\n# >>> is_two_alter(\"abab\")\n# 1\n# >>> is_two_alter(\"aaaa\")\n# 0\n# >>> is_two_alter(\"xyz\")\n# 0\nsub is_two_alter\n{\n  my ($s) = @_;\n", "entry_point": "is_two_alter", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abab\";\nmy $x0 = is_two_alter($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"aaaa\";\nmy $x1 = is_two_alter($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"xyz\";\nmy $x2 = is_two_alter($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the given string is made up of two alternating characters or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/915", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to rearrange positive and negative numbers in a given array using lambda function.\n#\n# >>> rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])\n# [2, 5, 7, 8, 9, -10, -3, -1]\n# >>> rearrange_numbs([10, 15, 14, 13, -18, 12, -20])\n# [10, 12, 13, 14, 15, -20, -18]\n# >>> rearrange_numbs([-20, 20, -10, 10, -30, 30])\n# [10, 20, 30, -30, -20, -10]\nsub rearrange_numbs\n{\n  my ($array_nums) = @_;\n", "entry_point": "rearrange_numbs", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [-1, 2, -3, 5, 7, 8, 9, -10];\nmy $x0 = rearrange_numbs($arg00);\nmy $v0 = [2, 5, 7, 8, 9, -10, -3, -1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [10, 15, 14, 13, -18, 12, -20];\nmy $x1 = rearrange_numbs($arg10);\nmy $v1 = [10, 12, 13, 14, 15, -20, -18];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [-20, 20, -10, 10, -30, 30];\nmy $x2 = rearrange_numbs($arg20);\nmy $v2 = [10, 20, 30, -30, -20, -10];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to rearrange positive and negative numbers in a given array using lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/916", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find if there is a triplet in the array whose sum is equal to a given value.\n#\n# >>> find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22)\n# [4, 10, 8]\n# >>> find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24)\n# [12, 3, 9]\n# >>> find_triplet_array([1, 2, 3, 4, 5], 5, 9)\n# [1, 3, 5]\nsub find_triplet_array\n{\n  my ($a, $arr_size, $sum) = @_;\n", "entry_point": "find_triplet_array", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 4, 45, 6, 10, 8];\nmy $arg01 = 6;\nmy $arg02 = 22;\nmy $x0 = find_triplet_array($arg00, $arg01, $arg02);\nmy $v0 = [4, 10, 8];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [12, 3, 5, 2, 6, 9];\nmy $arg11 = 6;\nmy $arg12 = 24;\nmy $x1 = find_triplet_array($arg10, $arg11, $arg12);\nmy $v1 = [12, 3, 9];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4, 5];\nmy $arg21 = 5;\nmy $arg22 = 9;\nmy $x2 = find_triplet_array($arg20, $arg21, $arg22);\nmy $v2 = [1, 3, 5];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/917", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the sequences of one upper case letter followed by lower case letters.\n#\n# >>> text_uppercase_lowercase(\"AaBbGg\")\n# \"Found a match!\"\n# >>> text_uppercase_lowercase(\"aA\")\n# \"Not matched!\"\n# >>> text_uppercase_lowercase(\"PYTHON\")\n# \"Not matched!\"\nsub text_uppercase_lowercase\n{\n  my ($text) = @_;\n", "entry_point": "text_uppercase_lowercase", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"AaBbGg\";\nmy $x0 = text_uppercase_lowercase($arg00);\nmy $v0 = \"Found a match!\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"aA\";\nmy $x1 = text_uppercase_lowercase($arg10);\nmy $v1 = \"Not matched!\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"PYTHON\";\nmy $x2 = text_uppercase_lowercase($arg20);\nmy $v2 = \"Not matched!\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the sequences of one upper case letter followed by lower case letters.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/918", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count coin change.\n#\n# >>> coin_change([1, 2, 3], 3, 4)\n# 4\n# >>> coin_change([4, 5, 6, 7, 8, 9], 6, 9)\n# 2\n# >>> coin_change([4, 5, 6, 7, 8, 9], 6, 4)\n# 1\nsub coin_change\n{\n  my ($s, $m, $n) = @_;\n", "entry_point": "coin_change", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $arg01 = 3;\nmy $arg02 = 4;\nmy $x0 = coin_change($arg00, $arg01, $arg02);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 5, 6, 7, 8, 9];\nmy $arg11 = 6;\nmy $arg12 = 9;\nmy $x1 = coin_change($arg10, $arg11, $arg12);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [4, 5, 6, 7, 8, 9];\nmy $arg21 = 6;\nmy $arg22 = 4;\nmy $x2 = coin_change($arg20, $arg21, $arg22);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count coin change.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/919", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to multiply all items in the list.\n#\n# >>> multiply_list([1, -2, 3])\n# -6\n# >>> multiply_list([1, 2, 3, 4])\n# 24\n# >>> multiply_list([3, 1, 2, 3])\n# 18\nsub multiply_list\n{\n  my ($items) = @_;\n", "entry_point": "multiply_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, -2, 3];\nmy $x0 = multiply_list($arg00);\nmy $v0 = -6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4];\nmy $x1 = multiply_list($arg10);\nmy $v1 = 24;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 1, 2, 3];\nmy $x2 = multiply_list($arg20);\nmy $v2 = 18;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to multiply all items in the list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/920", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove all tuples with all \"none\" values in the given tuple list.\n#\n# >>> remove_tuple([[\"none\", 2], [\"none\", \"none\"], [3, 4], [12, 3], [\"none\"]])\n# [[\"none\", 2], [3, 4], [12, 3]]\n# >>> remove_tuple([[\"none\", \"none\"], [\"none\", \"none\"], [3, 6], [17, 3], [\"none\", 1]])\n# [[3, 6], [17, 3], [\"none\", 1]]\n# >>> remove_tuple([[1, 2], [2, \"none\"], [3, \"none\"], [24, 3], [\"none\", \"none\"]])\n# [[1, 2], [2, \"none\"], [3, \"none\"], [24, 3]]\nsub remove_tuple\n{\n  my ($test_list) = @_;\n", "entry_point": "remove_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[\"none\", 2], [\"none\", \"none\"], [3, 4], [12, 3], [\"none\"]];\nmy $x0 = remove_tuple($arg00);\nmy $v0 = [[\"none\", 2], [3, 4], [12, 3]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[\"none\", \"none\"], [\"none\", \"none\"], [3, 6], [17, 3], [\"none\", 1]];\nmy $x1 = remove_tuple($arg10);\nmy $v1 = [[3, 6], [17, 3], [\"none\", 1]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[1, 2], [2, \"none\"], [3, \"none\"], [24, 3], [\"none\", \"none\"]];\nmy $x2 = remove_tuple($arg20);\nmy $v2 = [[1, 2], [2, \"none\"], [3, \"none\"], [24, 3]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove all tuples with all \"none\" values in the given tuple list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/921", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to perform chunking of tuples each of size n.\n#\n# >>> chunk_tuples([10, 4, 5, 6, 7, 6, 8, 3, 4], 3)\n# [[10, 4, 5], [6, 7, 6], [8, 3, 4]]\n# >>> chunk_tuples([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)\n# [[1, 2], [3, 4], [5, 6], [7, 8], [9]]\n# >>> chunk_tuples([11, 14, 16, 17, 19, 21, 22, 25], 4)\n# [[11, 14, 16, 17], [19, 21, 22, 25]]\nsub chunk_tuples\n{\n  my ($test_tup, $n) = @_;\n", "entry_point": "chunk_tuples", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 4, 5, 6, 7, 6, 8, 3, 4];\nmy $arg01 = 3;\nmy $x0 = chunk_tuples($arg00, $arg01);\nmy $v0 = [[10, 4, 5], [6, 7, 6], [8, 3, 4]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nmy $arg11 = 2;\nmy $x1 = chunk_tuples($arg10, $arg11);\nmy $v1 = [[1, 2], [3, 4], [5, 6], [7, 8], [9]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [11, 14, 16, 17, 19, 21, 22, 25];\nmy $arg21 = 4;\nmy $x2 = chunk_tuples($arg20, $arg21);\nmy $v2 = [[11, 14, 16, 17], [19, 21, 22, 25]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to perform chunking of tuples each of size n.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/922", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find a pair with the highest product from a given array of integers.\n#\n# >>> max_product([1, 2, 3, 4, 7, 0, 8, 4])\n# [7, 8]\n# >>> max_product([0, -1, -2, -4, 5, 0, -6])\n# [-4, -6]\n# >>> max_product([1, 3, 5, 6, 8, 9])\n# [8, 9]\nsub max_product\n{\n  my ($arr) = @_;\n", "entry_point": "max_product", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 7, 0, 8, 4];\nmy $x0 = max_product($arg00);\nmy $v0 = [7, 8];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [0, -1, -2, -4, 5, 0, -6];\nmy $x1 = max_product($arg10);\nmy $v1 = [-4, -6];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, 5, 6, 8, 9];\nmy $x2 = max_product($arg20);\nmy $v2 = [8, 9];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find a pair with the highest product from a given array of integers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/923", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n#\n# >>> super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7)\n# 9\n# >>> super_seq(\"feek\", \"eke\", 4, 3)\n# 5\n# >>> super_seq(\"PARRT\", \"RTA\", 5, 3)\n# 6\nsub super_seq\n{\n  my ($x, $y, $m, $n) = @_;\n", "entry_point": "super_seq", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"AGGTAB\";\nmy $arg01 = \"GXTXAYB\";\nmy $arg02 = 6;\nmy $arg03 = 7;\nmy $x0 = super_seq($arg00, $arg01, $arg02, $arg03);\nmy $v0 = 9;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"feek\";\nmy $arg11 = \"eke\";\nmy $arg12 = 4;\nmy $arg13 = 3;\nmy $x1 = super_seq($arg10, $arg11, $arg12, $arg13);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"PARRT\";\nmy $arg21 = \"RTA\";\nmy $arg22 = 5;\nmy $arg23 = 3;\nmy $x2 = super_seq($arg20, $arg21, $arg22, $arg23);\nmy $v2 = 6;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/924", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find maximum of two numbers.\n#\n# >>> max_of_two(10, 20)\n# 20\n# >>> max_of_two(19, 15)\n# 19\n# >>> max_of_two(-10, -20)\n# -10\nsub max_of_two\n{\n  my ($x, $y) = @_;\n", "entry_point": "max_of_two", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 20;\nmy $x0 = max_of_two($arg00, $arg01);\nmy $v0 = 20;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 19;\nmy $arg11 = 15;\nmy $x1 = max_of_two($arg10, $arg11);\nmy $v1 = 19;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = -10;\nmy $arg21 = -20;\nmy $x2 = max_of_two($arg20, $arg21);\nmy $v2 = -10;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find maximum of two numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/925", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to calculate the product of all the numbers of a given tuple.\n#\n# >>> mutiple_tuple([4, 3, 2, 2, -1, 18])\n# -864\n# >>> mutiple_tuple([1, 2, 3])\n# 6\n# >>> mutiple_tuple([-2, -4, -6])\n# -48\nsub mutiple_tuple\n{\n  my ($nums) = @_;\n", "entry_point": "mutiple_tuple", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [4, 3, 2, 2, -1, 18];\nmy $x0 = mutiple_tuple($arg00);\nmy $v0 = -864;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3];\nmy $x1 = mutiple_tuple($arg10);\nmy $v1 = 6;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [-2, -4, -6];\nmy $x2 = mutiple_tuple($arg20);\nmy $v2 = -48;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to calculate the product of all the numbers of a given tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/926", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find n-th rencontres number.\n#\n# >>> rencontres_number(7, 2)\n# 924\n# >>> rencontres_number(3, 0)\n# 2\n# >>> rencontres_number(3, 1)\n# 3\nsub rencontres_number\n{\n  my ($n, $m) = @_;\n", "entry_point": "rencontres_number", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 7;\nmy $arg01 = 2;\nmy $x0 = rencontres_number($arg00, $arg01);\nmy $v0 = 924;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $arg11 = 0;\nmy $x1 = rencontres_number($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $arg21 = 1;\nmy $x2 = rencontres_number($arg20, $arg21);\nmy $v2 = 3;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find n-th rencontres number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/928", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n#\n# >>> change_date_format(\"2026-01-02\")\n# \"02-01-2026\"\n# >>> change_date_format(\"2021-01-04\")\n# \"04-01-2021\"\n# >>> change_date_format(\"2030-06-06\")\n# \"06-06-2030\"\nsub change_date_format\n{\n  my ($dt) = @_;\n", "entry_point": "change_date_format", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"2026-01-02\";\nmy $x0 = change_date_format($arg00);\nmy $v0 = \"02-01-2026\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"2021-01-04\";\nmy $x1 = change_date_format($arg10);\nmy $v1 = \"04-01-2021\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"2030-06-06\";\nmy $x2 = change_date_format($arg20);\nmy $v2 = \"06-06-2030\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/929", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count repeated items of a tuple.\n#\n# >>> count_tuplex([2, 4, 5, 6, 2, 3, 4, 4, 7], 4)\n# 3\n# >>> count_tuplex([2, 4, 5, 6, 2, 3, 4, 4, 7], 2)\n# 2\n# >>> count_tuplex([2, 4, 7, 7, 7, 3, 4, 4, 7], 7)\n# 4\nsub count_tuplex\n{\n  my ($tuplex, $value) = @_;\n", "entry_point": "count_tuplex", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 4, 5, 6, 2, 3, 4, 4, 7];\nmy $arg01 = 4;\nmy $x0 = count_tuplex($arg00, $arg01);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 4, 5, 6, 2, 3, 4, 4, 7];\nmy $arg11 = 2;\nmy $x1 = count_tuplex($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 4, 7, 7, 7, 3, 4, 4, 7];\nmy $arg21 = 7;\nmy $x2 = count_tuplex($arg20, $arg21);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count repeated items of a tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/930", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function that matches a string that has an a followed by zero or more b's by using regex.\n#\n# >>> text_match(\"msb\")\n# \"Not matched!\"\n# >>> text_match(\"a0c\")\n# \"Found a match!\"\n# >>> text_match(\"abbc\")\n# \"Found a match!\"\nsub text_match\n{\n  my ($text) = @_;\n", "entry_point": "text_match", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"msb\";\nmy $x0 = text_match($arg00);\nmy $v0 = \"Not matched!\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"a0c\";\nmy $x1 = text_match($arg10);\nmy $v1 = \"Found a match!\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abbc\";\nmy $x2 = text_match($arg20);\nmy $v2 = \"Found a match!\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function that matches a string that has an a followed by zero or more b's by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/931", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n#\n# >>> sum_series(7)\n# 784\n# >>> sum_series(5)\n# 225\n# >>> sum_series(15)\n# 14400\nsub sum_series\n{\n  my ($number) = @_;\n", "entry_point": "sum_series", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 7;\nmy $x0 = sum_series($arg00);\nmy $v0 = 784;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $x1 = sum_series($arg10);\nmy $v1 = 225;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 15;\nmy $x2 = sum_series($arg20);\nmy $v2 = 14400;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/932", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove duplicate words from a given list of strings.\n#\n# >>> remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])\n# [\"Python\", \"Exercises\", \"Practice\", \"Solution\"]\n# >>> remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\", \"Java\"])\n# [\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Java\"]\n# >>> remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\", \"C++\", \"C\", \"C++\"])\n# [\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"C++\", \"C\"]\nsub remove_duplic_list\n{\n  my ($l) = @_;\n", "entry_point": "remove_duplic_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"];\nmy $x0 = remove_duplic_list($arg00);\nmy $v0 = [\"Python\", \"Exercises\", \"Practice\", \"Solution\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\", \"Java\"];\nmy $x1 = remove_duplic_list($arg10);\nmy $v1 = [\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Java\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\", \"C++\", \"C\", \"C++\"];\nmy $x2 = remove_duplic_list($arg20);\nmy $v2 = [\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"C++\", \"C\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove duplicate words from a given list of strings.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/933", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert camel case string to snake case string by using regex.\n#\n# >>> camel_to_snake(\"GoogleAssistant\")\n# \"google_assistant\"\n# >>> camel_to_snake(\"ChromeCast\")\n# \"chrome_cast\"\n# >>> camel_to_snake(\"QuadCore\")\n# \"quad_core\"\nsub camel_to_snake\n{\n  my ($text) = @_;\n", "entry_point": "camel_to_snake", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"GoogleAssistant\";\nmy $x0 = camel_to_snake($arg00);\nmy $v0 = \"google_assistant\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"ChromeCast\";\nmy $x1 = camel_to_snake($arg10);\nmy $v1 = \"chrome_cast\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"QuadCore\";\nmy $x2 = camel_to_snake($arg20);\nmy $v2 = \"quad_core\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert camel case string to snake case string by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/934", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the nth delannoy number.\n#\n# >>> dealnnoy_num(3, 4)\n# 129\n# >>> dealnnoy_num(3, 3)\n# 63\n# >>> dealnnoy_num(4, 5)\n# 681\nsub dealnnoy_num\n{\n  my ($n, $m) = @_;\n", "entry_point": "dealnnoy_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 4;\nmy $x0 = dealnnoy_num($arg00, $arg01);\nmy $v0 = 129;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $arg11 = 3;\nmy $x1 = dealnnoy_num($arg10, $arg11);\nmy $v1 = 63;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $arg21 = 5;\nmy $x2 = dealnnoy_num($arg20, $arg21);\nmy $v2 = 681;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the nth delannoy number.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/935", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\n#\n# >>> series_sum(6)\n# 91\n# >>> series_sum(7)\n# 140\n# >>> series_sum(12)\n# 650\nsub series_sum\n{\n  my ($number) = @_;\n", "entry_point": "series_sum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 6;\nmy $x0 = series_sum($arg00);\nmy $v0 = 91;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 7;\nmy $x1 = series_sum($arg10);\nmy $v1 = 140;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 12;\nmy $x2 = series_sum($arg20);\nmy $v2 = 650;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/936", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to re-arrange the given tuples based on the given ordered list.\n#\n# >>> re_arrange_tuples([[4, 3], [1, 9], [2, 10], [3, 2]], [1, 4, 2, 3])\n# [[1, 9], [4, 3], [2, 10], [3, 2]]\n# >>> re_arrange_tuples([[5, 4], [2, 10], [3, 11], [4, 3]], [3, 4, 2, 3])\n# [[3, 11], [4, 3], [2, 10], [3, 11]]\n# >>> re_arrange_tuples([[6, 3], [3, 8], [5, 7], [2, 4]], [2, 5, 3, 6])\n# [[2, 4], [5, 7], [3, 8], [6, 3]]\nsub re_arrange_tuples\n{\n  my ($test_list, $ord_list) = @_;\n", "entry_point": "re_arrange_tuples", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[4, 3], [1, 9], [2, 10], [3, 2]];\nmy $arg01 = [1, 4, 2, 3];\nmy $x0 = re_arrange_tuples($arg00, $arg01);\nmy $v0 = [[1, 9], [4, 3], [2, 10], [3, 2]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[5, 4], [2, 10], [3, 11], [4, 3]];\nmy $arg11 = [3, 4, 2, 3];\nmy $x1 = re_arrange_tuples($arg10, $arg11);\nmy $v1 = [[3, 11], [4, 3], [2, 10], [3, 11]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[6, 3], [3, 8], [5, 7], [2, 4]];\nmy $arg21 = [2, 5, 3, 6];\nmy $x2 = re_arrange_tuples($arg20, $arg21);\nmy $v2 = [[2, 4], [5, 7], [3, 8], [6, 3]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to re-arrange the given tuples based on the given ordered list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/937", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count the most common character in a given string.\n#\n# >>> max_char(\"hello world\")\n# \"l\"\n# >>> max_char(\"hello \")\n# \"l\"\n# >>> max_char(\"python pr\")\n# \"p\"\nsub max_char\n{\n  my ($str1) = @_;\n", "entry_point": "max_char", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"hello world\";\nmy $x0 = max_char($arg00);\nmy $v0 = \"l\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"hello \";\nmy $x1 = max_char($arg10);\nmy $v1 = \"l\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"python pr\";\nmy $x2 = max_char($arg20);\nmy $v2 = \"p\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count the most common character in a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/938", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find three closest elements from three sorted arrays.\n#\n# >>> find_closet([1, 4, 10], [2, 15, 20], [10, 12], 3, 3, 2)\n# [10, 15, 10]\n# >>> find_closet([20, 24, 100], [2, 19, 22, 79, 800], [10, 12, 23, 24, 119], 3, 5, 5)\n# [24, 22, 23]\n# >>> find_closet([2, 5, 11], [3, 16, 21], [11, 13], 3, 3, 2)\n# [11, 16, 11]\nsub find_closet\n{\n  my ($a, $b, $c, $p, $q, $r) = @_;\n", "entry_point": "find_closet", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 4, 10];\nmy $arg01 = [2, 15, 20];\nmy $arg02 = [10, 12];\nmy $arg03 = 3;\nmy $arg04 = 3;\nmy $arg05 = 2;\nmy $x0 = find_closet($arg00, $arg01, $arg02, $arg03, $arg04, $arg05);\nmy $v0 = [10, 15, 10];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [20, 24, 100];\nmy $arg11 = [2, 19, 22, 79, 800];\nmy $arg12 = [10, 12, 23, 24, 119];\nmy $arg13 = 3;\nmy $arg14 = 5;\nmy $arg15 = 5;\nmy $x1 = find_closet($arg10, $arg11, $arg12, $arg13, $arg14, $arg15);\nmy $v1 = [24, 22, 23];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [2, 5, 11];\nmy $arg21 = [3, 16, 21];\nmy $arg22 = [11, 13];\nmy $arg23 = 3;\nmy $arg24 = 3;\nmy $arg25 = 2;\nmy $x2 = find_closet($arg20, $arg21, $arg22, $arg23, $arg24, $arg25);\nmy $v2 = [11, 16, 11];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find three closest elements from three sorted arrays.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/939", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort a list of dictionaries using lambda function.\n#\n# >>> sorted_models([{\"make\" => \"Nokia\", \"model\" => 216, \"color\" => \"Black\"}, {\"make\" => \"Mi Max\", \"model\" => 2, \"color\" => \"Gold\"}, {\"make\" => \"Samsung\", \"model\" => 7, \"color\" => \"Blue\"}])\n# [{\"make\" => \"Nokia\", \"model\" => 216, \"color\" => \"Black\"}, {\"make\" => \"Samsung\", \"model\" => 7, \"color\" => \"Blue\"}, {\"make\" => \"Mi Max\", \"model\" => 2, \"color\" => \"Gold\"}]\n# >>> sorted_models([{\"make\" => \"Vivo\", \"model\" => 20, \"color\" => \"Blue\"}, {\"make\" => \"oppo\", \"model\" => 17, \"color\" => \"Gold\"}, {\"make\" => \"Apple\", \"model\" => 11, \"color\" => \"red\"}])\n# [{\"make\" => \"Vivo\", \"model\" => 20, \"color\" => \"Blue\"}, {\"make\" => \"oppo\", \"model\" => 17, \"color\" => \"Gold\"}, {\"make\" => \"Apple\", \"model\" => 11, \"color\" => \"red\"}]\n# >>> sorted_models([{\"make\" => \"micromax\", \"model\" => 40, \"color\" => \"grey\"}, {\"make\" => \"poco\", \"model\" => 60, \"color\" => \"blue\"}])\n# [{\"make\" => \"poco\", \"model\" => 60, \"color\" => \"blue\"}, {\"make\" => \"micromax\", \"model\" => 40, \"color\" => \"grey\"}]\nsub sorted_models\n{\n  my ($models) = @_;\n", "entry_point": "sorted_models", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [{\"make\" => \"Nokia\", \"model\" => 216, \"color\" => \"Black\"}, {\"make\" => \"Mi Max\", \"model\" => 2, \"color\" => \"Gold\"}, {\"make\" => \"Samsung\", \"model\" => 7, \"color\" => \"Blue\"}];\nmy $x0 = sorted_models($arg00);\nmy $v0 = [{\"make\" => \"Nokia\", \"model\" => 216, \"color\" => \"Black\"}, {\"make\" => \"Samsung\", \"model\" => 7, \"color\" => \"Blue\"}, {\"make\" => \"Mi Max\", \"model\" => 2, \"color\" => \"Gold\"}];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [{\"make\" => \"Vivo\", \"model\" => 20, \"color\" => \"Blue\"}, {\"make\" => \"oppo\", \"model\" => 17, \"color\" => \"Gold\"}, {\"make\" => \"Apple\", \"model\" => 11, \"color\" => \"red\"}];\nmy $x1 = sorted_models($arg10);\nmy $v1 = [{\"make\" => \"Vivo\", \"model\" => 20, \"color\" => \"Blue\"}, {\"make\" => \"oppo\", \"model\" => 17, \"color\" => \"Gold\"}, {\"make\" => \"Apple\", \"model\" => 11, \"color\" => \"red\"}];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [{\"make\" => \"micromax\", \"model\" => 40, \"color\" => \"grey\"}, {\"make\" => \"poco\", \"model\" => 60, \"color\" => \"blue\"}];\nmy $x2 = sorted_models($arg20);\nmy $v2 = [{\"make\" => \"poco\", \"model\" => 60, \"color\" => \"blue\"}, {\"make\" => \"micromax\", \"model\" => 40, \"color\" => \"grey\"}];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort a list of dictionaries using lambda function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/940", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort the given array by using heap sort.\n#\n# >>> heap_sort([12, 2, 4, 5, 2, 3])\n# [2, 2, 3, 4, 5, 12]\n# >>> heap_sort([32, 14, 5, 6, 7, 19])\n# [5, 6, 7, 14, 19, 32]\n# >>> heap_sort([21, 15, 29, 78, 65])\n# [15, 21, 29, 65, 78]\nsub heap_sort\n{\n  my ($arr) = @_;\n", "entry_point": "heap_sort", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [12, 2, 4, 5, 2, 3];\nmy $x0 = heap_sort($arg00);\nmy $v0 = [2, 2, 3, 4, 5, 12];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [32, 14, 5, 6, 7, 19];\nmy $x1 = heap_sort($arg10);\nmy $v1 = [5, 6, 7, 14, 19, 32];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [21, 15, 29, 78, 65];\nmy $x2 = heap_sort($arg20);\nmy $v2 = [15, 21, 29, 65, 78];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort the given array by using heap sort.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/941", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count the elements in a list until an element is a tuple.\n#\n# >>> count_elim([10, 20, 30, [10, 20], 40])\n# 3\n# >>> count_elim([10, [20, 30], [10, 20], 40])\n# 1\n# >>> count_elim([[10, [20, 30, [10, 20], 40]]])\n# 0\nsub count_elim\n{\n  my ($num) = @_;\n", "entry_point": "count_elim", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [10, 20, 30, [10, 20], 40];\nmy $x0 = count_elim($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [10, [20, 30], [10, 20], 40];\nmy $x1 = count_elim($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[10, [20, 30, [10, 20], 40]]];\nmy $x2 = count_elim($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to count the elements in a list until an element is a tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/942", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to check if any list element is present in the given list.\n#\n# >>> check_element([4, 5, 7, 9, 3], [6, 7, 10, 11])\n# 1\n# >>> check_element([1, 2, 3, 4], [4, 6, 7, 8, 9])\n# 1\n# >>> check_element([3, 2, 1, 4, 5], [9, 8, 7, 6])\n# 0\nsub check_element\n{\n  my ($test_tup, $check_list) = @_;\n", "entry_point": "check_element", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [4, 5, 7, 9, 3];\nmy $arg01 = [6, 7, 10, 11];\nmy $x0 = check_element($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4];\nmy $arg11 = [4, 6, 7, 8, 9];\nmy $x1 = check_element($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 2, 1, 4, 5];\nmy $arg21 = [9, 8, 7, 6];\nmy $x2 = check_element($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to check if any list element is present in the given list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/943", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to combine two given sorted lists using heapq module.\n#\n# >>> combine_lists([1, 3, 5, 7, 9, 11], [0, 2, 4, 6, 8, 10])\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n# >>> combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])\n# [1, 2, 3, 5, 5, 6, 7, 8, 9, 11]\n# >>> combine_lists([1, 3, 7], [2, 4, 6])\n# [1, 2, 3, 4, 6, 7]\nsub combine_lists\n{\n  my ($num1, $num2) = @_;\n", "entry_point": "combine_lists", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 5, 7, 9, 11];\nmy $arg01 = [0, 2, 4, 6, 8, 10];\nmy $x0 = combine_lists($arg00, $arg01);\nmy $v0 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 3, 5, 6, 8, 9];\nmy $arg11 = [2, 5, 7, 11];\nmy $x1 = combine_lists($arg10, $arg11);\nmy $v1 = [1, 2, 3, 5, 5, 6, 7, 8, 9, 11];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, 7];\nmy $arg21 = [2, 4, 6];\nmy $x2 = combine_lists($arg20, $arg21);\nmy $v2 = [1, 2, 3, 4, 6, 7];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to combine two given sorted lists using heapq module.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/944", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to separate and print the numbers and their position of a given string.\n#\n# >>> num_position(\"there are 70 flats in this apartment\")\n# 10\n# >>> num_position(\"every adult have 32 teeth\")\n# 17\n# >>> num_position(\"isha has 79 chocolates in her bag\")\n# 9\nsub num_position\n{\n  my ($text) = @_;\n", "entry_point": "num_position", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"there are 70 flats in this apartment\";\nmy $x0 = num_position($arg00);\nmy $v0 = 10;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"every adult have 32 teeth\";\nmy $x1 = num_position($arg10);\nmy $v1 = 17;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"isha has 79 chocolates in her bag\";\nmy $x2 = num_position($arg20);\nmy $v2 = 9;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to separate and print the numbers and their position of a given string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/945", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert the given tuples into set.\n#\n# >>> tuple_to_set([\"x\", \"y\", \"z\"])\n# {\"x\" => 1, \"y\" => 1, \"z\" => 1}\n# >>> tuple_to_set([\"a\", \"b\", \"c\"])\n# {\"c\" => 1, \"a\" => 1, \"b\" => 1}\n# >>> tuple_to_set([\"z\", \"d\", \"e\"])\n# {\"z\" => 1, \"e\" => 1, \"d\" => 1}\nsub tuple_to_set\n{\n  my ($t) = @_;\n", "entry_point": "tuple_to_set", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"x\", \"y\", \"z\"];\nmy $x0 = tuple_to_set($arg00);\nmy $v0 = {\"x\" => 1, \"y\" => 1, \"z\" => 1};\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"a\", \"b\", \"c\"];\nmy $x1 = tuple_to_set($arg10);\nmy $v1 = {\"c\" => 1, \"a\" => 1, \"b\" => 1};\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"z\", \"d\", \"e\"];\nmy $x2 = tuple_to_set($arg20);\nmy $v2 = {\"z\" => 1, \"e\" => 1, \"d\" => 1};\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert the given tuples into set.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/946", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the most common elements and their counts of a specified text.\n#\n# >>> most_common_elem(\"lkseropewdssafsdfafkpwe\", 3)\n# [[\"s\", 4], [\"e\", 3], [\"f\", 3]]\n# >>> most_common_elem(\"lkseropewdssafsdfafkpwe\", 2)\n# [[\"s\", 4], [\"e\", 3]]\n# >>> most_common_elem(\"lkseropewdssafsdfafkpwe\", 7)\n# [[\"s\", 4], [\"e\", 3], [\"f\", 3], [\"k\", 2], [\"p\", 2], [\"w\", 2], [\"d\", 2]]\nsub most_common_elem\n{\n  my ($s, $a) = @_;\n", "entry_point": "most_common_elem", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"lkseropewdssafsdfafkpwe\";\nmy $arg01 = 3;\nmy $x0 = most_common_elem($arg00, $arg01);\nmy $v0 = [[\"s\", 4], [\"e\", 3], [\"f\", 3]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"lkseropewdssafsdfafkpwe\";\nmy $arg11 = 2;\nmy $x1 = most_common_elem($arg10, $arg11);\nmy $v1 = [[\"s\", 4], [\"e\", 3]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"lkseropewdssafsdfafkpwe\";\nmy $arg21 = 7;\nmy $x2 = most_common_elem($arg20, $arg21);\nmy $v2 = [[\"s\", 4], [\"e\", 3], [\"f\", 3], [\"k\", 2], [\"p\", 2], [\"w\", 2], [\"d\", 2]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the most common elements and their counts of a specified text.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/947", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the length of the shortest word.\n#\n# >>> len_log([\"win\", \"lose\", \"great\"])\n# 3\n# >>> len_log([\"a\", \"ab\", \"abc\"])\n# 1\n# >>> len_log([\"12\", \"12\", \"1234\"])\n# 2\nsub len_log\n{\n  my ($list1) = @_;\n", "entry_point": "len_log", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"win\", \"lose\", \"great\"];\nmy $x0 = len_log($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"a\", \"ab\", \"abc\"];\nmy $x1 = len_log($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"12\", \"12\", \"1234\"];\nmy $x2 = len_log($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the length of the shortest word.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/948", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to get an item of a tuple.\n#\n# >>> get_item([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], 3)\n# \"e\"\n# >>> get_item([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], -4)\n# \"u\"\n# >>> get_item([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], -3)\n# \"r\"\nsub get_item\n{\n  my ($tup1, $index) = @_;\n", "entry_point": "get_item", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"];\nmy $arg01 = 3;\nmy $x0 = get_item($arg00, $arg01);\nmy $v0 = \"e\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"];\nmy $arg11 = -4;\nmy $x1 = get_item($arg10, $arg11);\nmy $v1 = \"u\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"];\nmy $arg21 = -3;\nmy $x2 = get_item($arg20, $arg21);\nmy $v2 = \"r\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to get an item of a tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/949", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to sort the given tuple list basis the total digits in tuple.\n#\n# >>> sort_list([[3, 4, 6, 723], [1, 2], [12345], [134, 234, 34]])\n# \"[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]\"\n# >>> sort_list([[3, 4, 8], [1, 2], [1234335], [1345, 234, 334]])\n# \"[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]\"\n# >>> sort_list([[34, 4, 61, 723], [1, 2], [145], [134, 23]])\n# \"[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]\"\nsub sort_list\n{\n  my ($test_list) = @_;\n", "entry_point": "sort_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[3, 4, 6, 723], [1, 2], [12345], [134, 234, 34]];\nmy $x0 = sort_list($arg00);\nmy $v0 = \"[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[3, 4, 8], [1, 2], [1234335], [1345, 234, 334]];\nmy $x1 = sort_list($arg10);\nmy $v1 = \"[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[34, 4, 61, 723], [1, 2], [145], [134, 23]];\nmy $x2 = sort_list($arg20);\nmy $v2 = \"[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to sort the given tuple list basis the total digits in tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/950", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to display sign of the chinese zodiac for given year.\n#\n# >>> chinese_zodiac(1997)\n# \"Ox\"\n# >>> chinese_zodiac(1998)\n# \"Tiger\"\n# >>> chinese_zodiac(1994)\n# \"Dog\"\nsub chinese_zodiac\n{\n  my ($year) = @_;\n", "entry_point": "chinese_zodiac", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1997;\nmy $x0 = chinese_zodiac($arg00);\nmy $v0 = \"Ox\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1998;\nmy $x1 = chinese_zodiac($arg10);\nmy $v1 = \"Tiger\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1994;\nmy $x2 = chinese_zodiac($arg20);\nmy $v2 = \"Dog\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to display sign of the chinese zodiac for given year.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/951", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the maximum of similar indices in two lists of tuples.\n#\n# >>> max_similar_indices([[2, 4], [6, 7], [5, 1]], [[5, 4], [8, 10], [8, 14]])\n# [[5, 4], [8, 10], [8, 14]]\n# >>> max_similar_indices([[3, 5], [7, 8], [6, 2]], [[6, 5], [9, 11], [9, 15]])\n# [[6, 5], [9, 11], [9, 15]]\n# >>> max_similar_indices([[4, 6], [8, 9], [7, 3]], [[7, 6], [10, 12], [10, 16]])\n# [[7, 6], [10, 12], [10, 16]]\nsub max_similar_indices\n{\n  my ($test_list1, $test_list2) = @_;\n", "entry_point": "max_similar_indices", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[2, 4], [6, 7], [5, 1]];\nmy $arg01 = [[5, 4], [8, 10], [8, 14]];\nmy $x0 = max_similar_indices($arg00, $arg01);\nmy $v0 = [[5, 4], [8, 10], [8, 14]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[3, 5], [7, 8], [6, 2]];\nmy $arg11 = [[6, 5], [9, 11], [9, 15]];\nmy $x1 = max_similar_indices($arg10, $arg11);\nmy $v1 = [[6, 5], [9, 11], [9, 15]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[4, 6], [8, 9], [7, 3]];\nmy $arg21 = [[7, 6], [10, 12], [10, 16]];\nmy $x2 = max_similar_indices($arg20, $arg21);\nmy $v2 = [[7, 6], [10, 12], [10, 16]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the maximum of similar indices in two lists of tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/952", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to compute the value of ncr mod p.\n#\n# >>> ncr_mod_p(10, 2, 13)\n# 6\n# >>> ncr_mod_p(11, 3, 14)\n# 11\n# >>> ncr_mod_p(18, 14, 19)\n# 1\nsub ncr_mod_p\n{\n  my ($n, $r, $p) = @_;\n", "entry_point": "ncr_mod_p", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 2;\nmy $arg02 = 13;\nmy $x0 = ncr_mod_p($arg00, $arg01, $arg02);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 11;\nmy $arg11 = 3;\nmy $arg12 = 14;\nmy $x1 = ncr_mod_p($arg10, $arg11, $arg12);\nmy $v1 = 11;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 18;\nmy $arg21 = 14;\nmy $arg22 = 19;\nmy $x2 = ncr_mod_p($arg20, $arg21, $arg22);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to compute the value of ncr mod p.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/953", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the minimun number of subsets with distinct elements.\n#\n# >>> subset([1, 2, 3, 4], 4)\n# 1\n# >>> subset([5, 6, 9, 3, 4, 3, 4], 7)\n# 2\n# >>> subset([1, 2, 3], 3)\n# 1\nsub subset\n{\n  my ($ar, $n) = @_;\n", "entry_point": "subset", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4];\nmy $arg01 = 4;\nmy $x0 = subset($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 6, 9, 3, 4, 3, 4];\nmy $arg11 = 7;\nmy $x1 = subset($arg10, $arg11);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3];\nmy $arg21 = 3;\nmy $x2 = subset($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the minimun number of subsets with distinct elements.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/954", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function that gives profit amount if the given amount has profit else return \"none\".\n#\n# >>> profit_amount(1500, 1200)\n# 300\n# >>> profit_amount(100, 200)\n# \"none\"\n# >>> profit_amount(2000, 5000)\n# \"none\"\nsub profit_amount\n{\n  my ($actual_cost, $sale_amount) = @_;\n", "entry_point": "profit_amount", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1500;\nmy $arg01 = 1200;\nmy $x0 = profit_amount($arg00, $arg01);\nmy $v0 = 300;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 100;\nmy $arg11 = 200;\nmy $x1 = profit_amount($arg10, $arg11);\nmy $v1 = \"none\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2000;\nmy $arg21 = 5000;\nmy $x2 = profit_amount($arg20, $arg21);\nmy $v2 = \"none\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function that gives profit amount if the given amount has profit else return \"none\".", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/955", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find out, if the given number is abundant.\n#\n# >>> is_abundant(12)\n# 1\n# >>> is_abundant(13)\n# 0\n# >>> is_abundant(9)\n# 0\nsub is_abundant\n{\n  my ($n) = @_;\n", "entry_point": "is_abundant", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 12;\nmy $x0 = is_abundant($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 13;\nmy $x1 = is_abundant($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 9;\nmy $x2 = is_abundant($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find out, if the given number is abundant.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/956", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to split the given string at uppercase letters by using regex.\n#\n# >>> split_list(\"LearnToBuildAnythingWithGoogle\")\n# [\"Learn\", \"To\", \"Build\", \"Anything\", \"With\", \"Google\"]\n# >>> split_list(\"ApmlifyingTheBlack+DeveloperCommunity\")\n# [\"Apmlifying\", \"The\", \"Black+\", \"Developer\", \"Community\"]\n# >>> split_list(\"UpdateInTheGoEcoSystem\")\n# [\"Update\", \"In\", \"The\", \"Go\", \"Eco\", \"System\"]\nsub split_list\n{\n  my ($text) = @_;\n", "entry_point": "split_list", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"LearnToBuildAnythingWithGoogle\";\nmy $x0 = split_list($arg00);\nmy $v0 = [\"Learn\", \"To\", \"Build\", \"Anything\", \"With\", \"Google\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"ApmlifyingTheBlack+DeveloperCommunity\";\nmy $x1 = split_list($arg10);\nmy $v1 = [\"Apmlifying\", \"The\", \"Black+\", \"Developer\", \"Community\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"UpdateInTheGoEcoSystem\";\nmy $x2 = split_list($arg20);\nmy $v2 = [\"Update\", \"In\", \"The\", \"Go\", \"Eco\", \"System\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to split the given string at uppercase letters by using regex.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/957", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to get the position of rightmost set bit.\n#\n# >>> get_first_set_bit_pos(12)\n# 3\n# >>> get_first_set_bit_pos(18)\n# 2\n# >>> get_first_set_bit_pos(16)\n# 5\nsub get_first_set_bit_pos\n{\n  my ($n) = @_;\n", "entry_point": "get_first_set_bit_pos", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 12;\nmy $x0 = get_first_set_bit_pos($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 18;\nmy $x1 = get_first_set_bit_pos($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 16;\nmy $x2 = get_first_set_bit_pos($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to get the position of rightmost set bit.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/958", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert an integer into a roman numeral.\n#\n# >>> int_to_roman(1)\n# \"I\"\n# >>> int_to_roman(50)\n# \"L\"\n# >>> int_to_roman(4)\n# \"IV\"\nsub int_to_roman\n{\n  my ($num) = @_;\n", "entry_point": "int_to_roman", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $x0 = int_to_roman($arg00);\nmy $v0 = \"I\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 50;\nmy $x1 = int_to_roman($arg10);\nmy $v1 = \"L\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $x2 = int_to_roman($arg20);\nmy $v2 = \"IV\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert an integer into a roman numeral.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/959", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the average of a list.\n#\n# >>> average([15, 9, 55, 41, 35, 20, 62, 49])\n# 35.75\n# >>> average([4, 5, 1, 2, 9, 7, 10, 8])\n# 5.75\n# >>> average([1, 2, 3])\n# 2\nsub average\n{\n  my ($lst) = @_;\n", "entry_point": "average", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [15, 9, 55, 41, 35, 20, 62, 49];\nmy $x0 = average($arg00);\nmy $v0 = 35.75;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 5, 1, 2, 9, 7, 10, 8];\nmy $x1 = average($arg10);\nmy $v1 = 5.75;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3];\nmy $x2 = average($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the average of a list.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/960", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to solve tiling problem.\n#\n# >>> get_noofways(4)\n# 3\n# >>> get_noofways(3)\n# 2\n# >>> get_noofways(5)\n# 5\nsub get_noofways\n{\n  my ($n) = @_;\n", "entry_point": "get_noofways", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $x0 = get_noofways($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $x1 = get_noofways($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $x2 = get_noofways($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to solve tiling problem.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/961", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert a roman numeral to an integer.\n#\n# >>> roman_to_int(\"MMMCMLXXXVI\")\n# 3986\n# >>> roman_to_int(\"MMMM\")\n# 4000\n# >>> roman_to_int(\"C\")\n# 100\nsub roman_to_int\n{\n  my ($s) = @_;\n", "entry_point": "roman_to_int", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"MMMCMLXXXVI\";\nmy $x0 = roman_to_int($arg00);\nmy $v0 = 3986;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"MMMM\";\nmy $x1 = roman_to_int($arg10);\nmy $v1 = 4000;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"C\";\nmy $x2 = roman_to_int($arg20);\nmy $v2 = 100;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert a roman numeral to an integer.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/962", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find the sum of all even natural numbers within the range l and r.\n#\n# >>> sum_even(2, 5)\n# 6\n# >>> sum_even(3, 8)\n# 18\n# >>> sum_even(4, 6)\n# 10\nsub sum_even\n{\n  my ($l, $r) = @_;\n", "entry_point": "sum_even", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $arg01 = 5;\nmy $x0 = sum_even($arg00, $arg01);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 3;\nmy $arg11 = 8;\nmy $x1 = sum_even($arg10, $arg11);\nmy $v1 = 18;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $arg21 = 6;\nmy $x2 = sum_even($arg20, $arg21);\nmy $v2 = 10;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find the sum of all even natural numbers within the range l and r.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/963", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to calculate the discriminant value.\n#\n# >>> discriminant_value(4, 8, 2)\n# [\"Two solutions\", 32]\n# >>> discriminant_value(5, 7, 9)\n# [\"no real solution\", -131]\n# >>> discriminant_value(0, 0, 9)\n# [\"one solution\", 0]\nsub discriminant_value\n{\n  my ($x, $y, $z) = @_;\n", "entry_point": "discriminant_value", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $arg01 = 8;\nmy $arg02 = 2;\nmy $x0 = discriminant_value($arg00, $arg01, $arg02);\nmy $v0 = [\"Two solutions\", 32];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $arg11 = 7;\nmy $arg12 = 9;\nmy $x1 = discriminant_value($arg10, $arg11, $arg12);\nmy $v1 = [\"no real solution\", -131];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 0;\nmy $arg21 = 0;\nmy $arg22 = 9;\nmy $x2 = discriminant_value($arg20, $arg21, $arg22);\nmy $v2 = [\"one solution\", 0];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to calculate the discriminant value.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/964", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to check whether the length of the word is even or not.\n#\n# >>> word_len(\"program\")\n# 0\n# >>> word_len(\"solution\")\n# 1\n# >>> word_len(\"data\")\n# 1\nsub word_len\n{\n  my ($s) = @_;\n", "entry_point": "word_len", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"program\";\nmy $x0 = word_len($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"solution\";\nmy $x1 = word_len($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"data\";\nmy $x2 = word_len($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to check whether the length of the word is even or not.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/965", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to convert camel case string to snake case string.\n#\n# >>> camel_to_snake(\"PythonProgram\")\n# \"python_program\"\n# >>> camel_to_snake(\"pythonLanguage\")\n# \"python_language\"\n# >>> camel_to_snake(\"ProgrammingLanguage\")\n# \"programming_language\"\nsub camel_to_snake\n{\n  my ($text) = @_;\n", "entry_point": "camel_to_snake", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"PythonProgram\";\nmy $x0 = camel_to_snake($arg00);\nmy $v0 = \"python_program\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"pythonLanguage\";\nmy $x1 = camel_to_snake($arg10);\nmy $v1 = \"python_language\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"ProgrammingLanguage\";\nmy $x2 = camel_to_snake($arg20);\nmy $v2 = \"programming_language\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to convert camel case string to snake case string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/966", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to remove an empty tuple from a list of tuples.\n#\n# >>> remove_empty([[], [], [\"\"], [\"a\", \"b\"], [\"a\", \"b\", \"c\"], \"d\"])\n# [[\"\"], [\"a\", \"b\"], [\"a\", \"b\", \"c\"], \"d\"]\n# >>> remove_empty([[], [], [\"\"], \"python\", \"program\"])\n# [[\"\"], \"python\", \"program\"]\n# >>> remove_empty([[], [], [\"\"], \"java\"])\n# [[\"\"], \"java\"]\nsub remove_empty\n{\n  my ($tuple1) = @_;\n", "entry_point": "remove_empty", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[], [], [\"\"], [\"a\", \"b\"], [\"a\", \"b\", \"c\"], \"d\"];\nmy $x0 = remove_empty($arg00);\nmy $v0 = [[\"\"], [\"a\", \"b\"], [\"a\", \"b\", \"c\"], \"d\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[], [], [\"\"], \"python\", \"program\"];\nmy $x1 = remove_empty($arg10);\nmy $v1 = [[\"\"], \"python\", \"program\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[], [], [\"\"], \"java\"];\nmy $x2 = remove_empty($arg20);\nmy $v2 = [[\"\"], \"java\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to remove an empty tuple from a list of tuples.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/967", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to accept the strings which contains all vowels.\n#\n# >>> check(\"SEEquoiaL\")\n# \"accepted\"\n# >>> check(\"program\")\n# \"not accepted\"\n# >>> check(\"fine\")\n# \"not accepted\"\nsub check\n{\n  my ($string) = @_;\n", "entry_point": "check", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"SEEquoiaL\";\nmy $x0 = check($arg00);\nmy $v0 = \"accepted\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"program\";\nmy $x1 = check($arg10);\nmy $v1 = \"not accepted\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"fine\";\nmy $x2 = check($arg20);\nmy $v2 = \"not accepted\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to accept the strings which contains all vowels.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/968", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find maximum possible value for the given periodic function.\n#\n# >>> floor_max(11, 10, 9)\n# 9\n# >>> floor_max(5, 7, 4)\n# 2\n# >>> floor_max(2, 2, 1)\n# 1\nsub floor_max\n{\n  my ($a, $b, $n) = @_;\n", "entry_point": "floor_max", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 11;\nmy $arg01 = 10;\nmy $arg02 = 9;\nmy $x0 = floor_max($arg00, $arg01, $arg02);\nmy $v0 = 9;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $arg11 = 7;\nmy $arg12 = 4;\nmy $x1 = floor_max($arg10, $arg11, $arg12);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $arg21 = 2;\nmy $arg22 = 1;\nmy $x2 = floor_max($arg20, $arg21, $arg22);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to find maximum possible value for the given periodic function.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/969", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to join the tuples if they have similar initial elements.\n#\n# >>> join_tuples([[5, 6], [5, 7], [6, 8], [6, 10], [7, 13]])\n# [[5, 6, 7], [6, 8, 10], [7, 13]]\n# >>> join_tuples([[6, 7], [6, 8], [7, 9], [7, 11], [8, 14]])\n# [[6, 7, 8], [7, 9, 11], [8, 14]]\n# >>> join_tuples([[7, 8], [7, 9], [8, 10], [8, 12], [9, 15]])\n# [[7, 8, 9], [8, 10, 12], [9, 15]]\nsub join_tuples\n{\n  my ($test_list) = @_;\n", "entry_point": "join_tuples", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[5, 6], [5, 7], [6, 8], [6, 10], [7, 13]];\nmy $x0 = join_tuples($arg00);\nmy $v0 = [[5, 6, 7], [6, 8, 10], [7, 13]];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[6, 7], [6, 8], [7, 9], [7, 11], [8, 14]];\nmy $x1 = join_tuples($arg10);\nmy $v1 = [[6, 7, 8], [7, 9, 11], [8, 14]];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[7, 8], [7, 9], [8, 10], [8, 12], [9, 15]];\nmy $x2 = join_tuples($arg20);\nmy $v2 = [[7, 8, 9], [8, 10, 12], [9, 15]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to join the tuples if they have similar initial elements.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/970", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find minimum of two numbers.\n#\n# >>> min_of_two(10, 20)\n# 10\n# >>> min_of_two(19, 15)\n# 15\n# >>> min_of_two(-10, -20)\n# -20\nsub min_of_two\n{\n  my ($x, $y) = @_;\n", "entry_point": "min_of_two", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $arg01 = 20;\nmy $x0 = min_of_two($arg00, $arg01);\nmy $v0 = 10;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 19;\nmy $arg11 = 15;\nmy $x1 = min_of_two($arg10, $arg11);\nmy $v1 = 15;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = -10;\nmy $arg21 = -20;\nmy $x2 = min_of_two($arg20, $arg21);\nmy $v2 = -20;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find minimum of two numbers.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/971", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n#\n# >>> maximum_segments(7, 5, 2, 5)\n# 2\n# >>> maximum_segments(17, 2, 1, 3)\n# 17\n# >>> maximum_segments(18, 16, 3, 6)\n# 6\nsub maximum_segments\n{\n  my ($n, $a, $b, $c) = @_;\n", "entry_point": "maximum_segments", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 7;\nmy $arg01 = 5;\nmy $arg02 = 2;\nmy $arg03 = 5;\nmy $x0 = maximum_segments($arg00, $arg01, $arg02, $arg03);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 17;\nmy $arg11 = 2;\nmy $arg12 = 1;\nmy $arg13 = 3;\nmy $x1 = maximum_segments($arg10, $arg11, $arg12, $arg13);\nmy $v1 = 17;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 18;\nmy $arg21 = 16;\nmy $arg22 = 3;\nmy $arg23 = 6;\nmy $x2 = maximum_segments($arg20, $arg21, $arg22, $arg23);\nmy $v2 = 6;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/972", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to concatenate the given two tuples to a nested tuple.\n#\n# >>> concatenate_nested([3, 4], [5, 6])\n# [3, 4, 5, 6]\n# >>> concatenate_nested([1, 2], [3, 4])\n# [1, 2, 3, 4]\n# >>> concatenate_nested([4, 5], [6, 8])\n# [4, 5, 6, 8]\nsub concatenate_nested\n{\n  my ($test_tup1, $test_tup2) = @_;\n", "entry_point": "concatenate_nested", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 4];\nmy $arg01 = [5, 6];\nmy $x0 = concatenate_nested($arg00, $arg01);\nmy $v0 = [3, 4, 5, 6];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2];\nmy $arg11 = [3, 4];\nmy $x1 = concatenate_nested($arg10, $arg11);\nmy $v1 = [1, 2, 3, 4];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [4, 5];\nmy $arg21 = [6, 8];\nmy $x2 = concatenate_nested($arg20, $arg21);\nmy $v2 = [4, 5, 6, 8];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to concatenate the given two tuples to a nested tuple.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/973", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to left rotate the string.\n#\n# >>> left_rotate(\"python\", 2)\n# \"thonpy\"\n# >>> left_rotate(\"bigdata\", 3)\n# \"databig\"\n# >>> left_rotate(\"hadoop\", 1)\n# \"adooph\"\nsub left_rotate\n{\n  my ($s, $d) = @_;\n", "entry_point": "left_rotate", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"python\";\nmy $arg01 = 2;\nmy $x0 = left_rotate($arg00, $arg01);\nmy $v0 = \"thonpy\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"bigdata\";\nmy $arg11 = 3;\nmy $x1 = left_rotate($arg10, $arg11);\nmy $v1 = \"databig\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"hadoop\";\nmy $arg21 = 1;\nmy $x2 = left_rotate($arg20, $arg21);\nmy $v2 = \"adooph\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a Perl function to left rotate the string.", "language": "perl", "canonical_solution": null}
{"task_id": "MBPLP/974", "prompt": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to find the minimum total path sum in the given triangle.\n#\n# >>> min_sum_path([[2], [3, 9], [1, 6, 7]])\n# 6\n# >>> min_sum_path([[2], [3, 7], [8, 5, 6]])\n# 10\n# >>> min_sum_path([[3], [6, 4], [5, 2, 7]])\n# 9\nsub min_sum_path\n{\n  my ($a) = @_;\n", "entry_point": "min_sum_path", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[2], [3, 9], [1, 6, 7]];\nmy $x0 = min_sum_path($arg00);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[2], [3, 7], [8, 5, 6]];\nmy $x1 = min_sum_path($arg10);\nmy $v1 = 10;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[3], [6, 4], [5, 2, 7]];\nmy $x2 = min_sum_path($arg20);\nmy $v2 = 9;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Write a function to find the minimum total path sum in the given triangle.", "language": "perl", "canonical_solution": null}
