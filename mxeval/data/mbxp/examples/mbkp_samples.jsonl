{"task_id":"MBKP\/8","completion":"    return nums.map { n -> n * n }\n}","language":"kotlin"}
{"task_id":"MBKP\/10","completion":"    val result = mutableListOf<Int>()\n    val sortedList = list1.sorted()\n    for (i in 0 until n) {\n        result.add(sortedList[i])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/12","completion":"    return m.sortedBy { it.sum() }\n}","language":"kotlin"}
{"task_id":"MBKP\/17","completion":"    return 4 * a\n}","language":"kotlin"}
{"task_id":"MBKP\/20","completion":"    return x % 10 == 3 || x % 10 == 6 || x % 10 == 9\n}","language":"kotlin"}
{"task_id":"MBKP\/28","completion":"    var res = 1\n    for (i in 0 until k) {\n        res = res * (n - i) \/ (i + 1)\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/29","completion":"    var result = 0\n    var count = 0\n    for (i in 0 until arrSize) {\n        if (arr[i] % 2 == 1) {\n            count++\n            if (count % 2 == 1) {\n                result = arr[i]\n            }\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/34","completion":"    var i = 0\n    while (i < n) {\n        if (ar[i] != i + 1) {\n            return i + 1\n        }\n        i++\n    }\n    return n + 1\n}","language":"kotlin"}
{"task_id":"MBKP\/41","completion":"    return nums.filter { it % 2 == 0 }\n}","language":"kotlin"}
{"task_id":"MBKP\/44","completion":"    if (text.startsWith(\"python\")) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/45","completion":"    var a = l[0]\n    var b = l[1]\n    while (b != 0) {\n        var t = b\n        b = a % b\n        a = t\n    }\n    return a\n}","language":"kotlin"}
{"task_id":"MBKP\/46","completion":"    val distinct = data.distinct()\n    return distinct.size == data.size\n}","language":"kotlin"}
{"task_id":"MBKP\/49","completion":"    val result = mutableListOf<Int>()\n    for (i in 0 until nums.size) {\n        if (nums[i].size >= n) {\n            result.add(nums[i][n])\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/51","completion":"    return x == y && y == z\n}","language":"kotlin"}
{"task_id":"MBKP\/52","completion":"    return b * h\n}","language":"kotlin"}
{"task_id":"MBKP\/53","completion":"    if (str.length < 2) {\n        return \"Not Equal\"\n    }\n    if (str.substring(0, 1) == str.substring(str.length - 1)) {\n        return \"Equal\"\n    } else {\n        return \"Not Equal\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/58","completion":"    return x * y < 0 || y * x < 0\n}","language":"kotlin"}
{"task_id":"MBKP\/62","completion":"    return xs.minBy { it }\n}","language":"kotlin"}
{"task_id":"MBKP\/66","completion":"    return list.filter { it > 0 }.size\n}","language":"kotlin"}
{"task_id":"MBKP\/68","completion":"    if (a.isEmpty()) return true\n    var isNonDecreasing = true\n    var isNonIncreasing = true\n    for (i in 0 until a.size - 1) {\n        if (a[i] > a[i + 1]) {\n            isNonDecreasing = false\n        }\n        if (a[i] < a[i + 1]) {\n            isNonIncreasing = false\n        }\n    }\n    return isNonDecreasing || isNonIncreasing\n}","language":"kotlin"}
{"task_id":"MBKP\/70","completion":"    val result = input.map { it.size }.distinct().sorted()\n    if (result.size == 1) {\n        return \"All tuples have same length\"\n    } else {\n        return \"All tuples do not have same length\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/79","completion":"    return s.length % 2 == 1\n}","language":"kotlin"}
{"task_id":"MBKP\/80","completion":"    return (n * (n + 1) * (n + 2)) \/ 6.0\n}","language":"kotlin"}
{"task_id":"MBKP\/89","completion":"    var closest = n\n    var abs = n\n    while (abs > 0) {\n        abs = abs - closest\n        closest = closest - 1\n    }\n    return closest\n}","language":"kotlin"}
{"task_id":"MBKP\/90","completion":"    val list2 = list1.filter { it.length > 0 }\n    return list2.map { it.length }.max()\n}","language":"kotlin"}
{"task_id":"MBKP\/91","completion":"    val str2 = subStr.toLowerCase()\n    for (i in 0 until str1.size) {\n        val str3 = str1[i].toLowerCase()\n        if (str3.contains(str2)) {\n            return true\n        }\n    }\n    return false\n}","language":"kotlin"}
{"task_id":"MBKP\/95","completion":"    var min = lst.map { it.size }.min()\n    return min\n}","language":"kotlin"}
{"task_id":"MBKP\/99","completion":"    return n.toString(2)\n}","language":"kotlin"}
{"task_id":"MBKP\/101","completion":"    return arr[k - 1]\n}","language":"kotlin"}
{"task_id":"MBKP\/102","completion":"    val words = word.split(\"_\")\n    var result = \"\"\n    for (word in words) {\n        result += word.capitalize()\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/104","completion":"    return inputList.map {\n        it.sorted()\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/105","completion":"    return lst.filter { it }.size\n}","language":"kotlin"}
{"task_id":"MBKP\/112","completion":"    return diameter * 2 + height * 2\n}","language":"kotlin"}
{"task_id":"MBKP\/118","completion":"    val result = mutableListOf<String>()\n    string.split(\" \").forEach { result.add(it) }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/126","completion":"    var commonDivisors = 0\n    var divisor = 1\n    var max = Math.max(a, b)\n    var min = Math.min(a, b)\n\n    while (divisor <= max) {\n        if (a % divisor == 0 && b % divisor == 0) {\n            commonDivisors += divisor\n        }\n        divisor++\n    }\n\n    return commonDivisors\n}","language":"kotlin"}
{"task_id":"MBKP\/127","completion":"    return x * y\n}","language":"kotlin"}
{"task_id":"MBKP\/128","completion":"    val words = str.split(\" \")\n    val result = words.filter { it.length > n }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/133","completion":"    return nums.filter { n -> n < 0 }.sum()\n}","language":"kotlin"}
{"task_id":"MBKP\/140","completion":"    val result = mutableListOf<Int>()\n    for (i in 0 until testList.size) {\n        val list = testList[i]\n        for (j in 0 until list.size) {\n            val element = list[j]\n            if (result.contains(element)) continue\n            result.add(element)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/145","completion":"    var maxDiff = 0\n    for (i in 0 until n) {\n        for (j in 0 until n) {\n            if (Math.abs(arr[i] - arr[j]) > maxDiff) {\n                maxDiff = Math.abs(arr[i] - arr[j])\n            }\n        }\n    }\n    return maxDiff\n}","language":"kotlin"}
{"task_id":"MBKP\/156","completion":"    return tupleStr.map {\n        it.map { it.toInt() }\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/161","completion":"    val result = mutableListOf<Int>()\n    for (i in list1) {\n        if (!list2.contains(i)) {\n            result.add(i)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/164","completion":"    var sum = 0\n    for (i in 1 until num1) {\n        if (num1 % i == 0) {\n            sum += i\n        }\n    }\n    for (i in 1 until num2) {\n        if (num2 % i == 0) {\n            sum -= i\n        }\n    }\n    return sum == 0\n}","language":"kotlin"}
{"task_id":"MBKP\/167","completion":"    var result = 1\n    while (result < n) {\n        result = result * 2\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/170","completion":"    var sum = 0\n    var i = m\n    while (i <= n) {\n        sum += list1[i]\n        i++\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/176","completion":"    return a + b + c\n}","language":"kotlin"}
{"task_id":"MBKP\/178","completion":"    val pattern = patterns.find { it -> text.contains(it) }\n    if (pattern == null) {\n        return \"Not Matched!\"\n    } else {\n        return \"Matched!\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/184","completion":"    return list.all { it > num }\n}","language":"kotlin"}
{"task_id":"MBKP\/188","completion":"    return n > 0 && (n * n == n || n % 4 == 0)\n}","language":"kotlin"}
{"task_id":"MBKP\/193","completion":"    val uniqueTup = testTup.sorted().distinct()\n    return uniqueTup\n}","language":"kotlin"}
{"task_id":"MBKP\/195","completion":"    var low = 0\n    var high = arr.size - 1\n\n    while (low <= high) {\n        var mid = low + (high - low) \/ 2\n        if (arr[mid] == x) {\n            var i = mid\n            while (i >= 0 && arr[i] == x) {\n                i--\n            }\n            return i + 1\n        } else if (arr[mid] < x) {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}","language":"kotlin"}
{"task_id":"MBKP\/196","completion":"    return testList.filter { it.size != k }\n}","language":"kotlin"}
{"task_id":"MBKP\/199","completion":"    var power = 1\n    var result = 0\n    while (power <= n) {\n        result = power\n        power *= 2\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/200","completion":"    val result = mutableListOf<Int>()\n    val max = list1.max()\n    for (i in 0 until list1.size) {\n        if (list1[i] == max) {\n            result.add(i)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/201","completion":"    return lst.all { it == lst[0] }\n}","language":"kotlin"}
{"task_id":"MBKP\/204","completion":"    return s.length - s.replace(c, \"\").length\n}","language":"kotlin"}
{"task_id":"MBKP\/206","completion":"    val result = mutableListOf<String>()\n    for (i in 0 until testTup.size - 1) {\n        result.add(testTup[i] + testTup[i + 1])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/213","completion":"    val result = mutableListOf<String>()\n    for (i in 0 until testTup1.size) {\n        result.add(testTup1[i] + testTup2[i])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/221","completion":"    return nums.filter { it % 2 == 0 }.first()\n}","language":"kotlin"}
{"task_id":"MBKP\/223","completion":"    var count = 0\n    var i = 0\n    while (i < n) {\n        if (arr[i] == x) {\n            count++\n        }\n        i++\n    }\n    return count > n \/ 2\n}","language":"kotlin"}
{"task_id":"MBKP\/225","completion":"    if (low >= high) return arr[low]\n    var mid = low + (high - low) \/ 2\n    if (mid < high && arr[mid] > arr[mid + 1]) return arr[mid + 1]\n    if (mid > low && arr[mid] < arr[mid - 1]) return arr[mid]\n    if (arr[high] > arr[mid]) return findMin(arr, low, mid - 1)\n    return findMin(arr, mid + 1, high)\n}","language":"kotlin"}
{"task_id":"MBKP\/226","completion":"    var result = \"\"\n    for (i in 0 until str.length) {\n        if (i % 2 == 0) {\n            result += str[i]\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/227","completion":"    return Math.min(a, Math.min(b, c))\n}","language":"kotlin"}
{"task_id":"MBKP\/230","completion":"    return str1.replace(\" \", char)\n}","language":"kotlin"}
{"task_id":"MBKP\/232","completion":"    val list2 = list1.sortedDescending()\n    return list2.take(n)\n}","language":"kotlin"}
{"task_id":"MBKP\/234","completion":"    return l * l * l\n}","language":"kotlin"}
{"task_id":"MBKP\/242","completion":"    return str1.length\n}","language":"kotlin"}
{"task_id":"MBKP\/248","completion":"    var sum = 0.0\n    for (i in 1..n) {\n        sum += 1.0 \/ i\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/249","completion":"    return arrayNums1.filter { arrayNums2.contains(it) }\n}","language":"kotlin"}
{"task_id":"MBKP\/250","completion":"    return tup.filter { it == x }.size\n}","language":"kotlin"}
{"task_id":"MBKP\/253","completion":"    return list1.filter { it is Int }.size\n}","language":"kotlin"}
{"task_id":"MBKP\/255","completion":"    val result = mutableListOf<List<String>>()\n    if (n == 0) {\n        result.add(mutableListOf<String>())\n        return result\n    }\n    for (i in 0 until l.size) {\n        val subResult = combinationsColors(l.drop(i), n - 1)\n        for (j in 0 until subResult.size) {\n            val subList = subResult.get(j)\n            val newList = mutableListOf<String>()\n            newList.add(l.get(i))\n            newList.addAll(subList)\n            result.add(newList)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/257","completion":"    val list = mutableListOf<Int>()\n    list.add(a)\n    list.add(b)\n    list.reverse()\n    return list\n}","language":"kotlin"}
{"task_id":"MBKP\/258","completion":"    return arrayNums.filter { it % 2 == 1 }.size\n}","language":"kotlin"}
{"task_id":"MBKP\/261","completion":"    val result = mutableListOf<Int>()\n    for (i in 0 until testTup1.size) {\n        result.add(testTup1[i] \/ testTup2[i])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/263","completion":"    val result = mutableMapOf<String, Int>()\n    d1.forEach {\n        result[it.key] = it.value\n    }\n    d2.forEach {\n        result[it.key] = it.value\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/273","completion":"    val result = mutableListOf<Int>()\n    for (i in 0 until testTup1.size) {\n        result.add(testTup1[i] - testTup2[i])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/282","completion":"    return nums1.map { n -> n - nums2[nums1.indexOf(n)] }.filter { it != 0 }\n}","language":"kotlin"}
{"task_id":"MBKP\/284","completion":"    return list.all { it == element }\n}","language":"kotlin"}
{"task_id":"MBKP\/285","completion":"    if (text.contains(\"a\") && text.contains(\"b\") && text.contains(\"b\")) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/289","completion":"    var d = (n * 365) + (n \/ 4) - (n \/ 100) + (n \/ 400)\n    return d % 7\n}","language":"kotlin"}
{"task_id":"MBKP\/292","completion":"    return n \/ m\n}","language":"kotlin"}
{"task_id":"MBKP\/295","completion":"    var sum = 0\n    for (i in 1 until number) {\n        if (number % i == 0) {\n            sum += i\n        }\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/312","completion":"    return (1.0 \/ 3.0) * Math.PI * r * r * h;\n}","language":"kotlin"}
{"task_id":"MBKP\/315","completion":"    val words = str.split(\" \")\n    val result = words.filter { it.length % 2 == 0 }\n    if (result.isEmpty()) {\n        return \"-1\"\n    } else {\n        return result.maxBy { it.length }.toString()\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/316","completion":"    var i : Int = a.lastIndex\n    while (i >= 0 && a[i] != x) {\n        i--\n    }\n    return i\n}","language":"kotlin"}
{"task_id":"MBKP\/318","completion":"    var max = 0\n    for (i in 0..s) {\n        for (j in 0..s) {\n            for (k in 0..s) {\n                if (i + j + k <= s && max < i * j * k) {\n                    max = i * j * k\n                }\n            }\n        }\n    }\n    return max\n}","language":"kotlin"}
{"task_id":"MBKP\/320","completion":"    var sum = 0\n    var sumOfSquares = 0\n    for (i in 1..n) {\n        sum += i\n        sumOfSquares += i * i\n    }\n    return sum * sum - sumOfSquares\n}","language":"kotlin"}
{"task_id":"MBKP\/322","completion":"    val result = mutableListOf<Int>()\n    val min = list1.min()\n    for (i in 0 until list1.size) {\n        if (list1[i] == min) {\n            result.add(i)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/327","completion":"    return x == y || y == z || x == z\n}","language":"kotlin"}
{"task_id":"MBKP\/329","completion":"    return list.filter { it < 0 }.size\n}","language":"kotlin"}
{"task_id":"MBKP\/334","completion":"    return a + b > c && a + c > b && b + c > a\n}","language":"kotlin"}
{"task_id":"MBKP\/335","completion":"    var sum = 0\n    for (i in 0 until n) {\n        sum += a + (i * d)\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/341","completion":"    return s.toTypedArray().toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/356","completion":"    var c = 180 - a - b\n    if (c < 0) {\n        c += 360\n    }\n    return c\n}","language":"kotlin"}
{"task_id":"MBKP\/357","completion":"    val max = testList.map { it.max() }.max()\n    return max\n}","language":"kotlin"}
{"task_id":"MBKP\/363","completion":"    val result = mutableListOf<List<Int>>()\n    for (i in 0 until testList.size) {\n        result.add(testList[i].map { it + k })\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/365","completion":"    return n.toInt().toString().length\n}","language":"kotlin"}
{"task_id":"MBKP\/366","completion":"    var result = 0\n    for (i in 0 until listNums.size - 1) {\n        result = Math.max(result, listNums[i] * listNums[i + 1])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/368","completion":"    val result = mutableListOf<List<Int>>()\n    for (i in 0 until n) {\n        result.add(testTup)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/371","completion":"    var i : Int = leftElement\n    var j : Int = rightElement\n    while (i <= j) {\n        var mid : Int = (i + j) \/ 2\n        if (a[mid] == mid) {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return i\n}","language":"kotlin"}
{"task_id":"MBKP\/373","completion":"    return l * w * h\n}","language":"kotlin"}
{"task_id":"MBKP\/375","completion":"    return n - (n % m)\n}","language":"kotlin"}
{"task_id":"MBKP\/376","completion":"    val res = mutableListOf<Any>()\n    val seen = mutableSetOf<Int>()\n    testTup.forEach {\n        if (seen.contains(it)) {\n            res.add(\"MSP\")\n        } else {\n            res.add(it)\n            seen.add(it)\n        }\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/377","completion":"    val result = s.replace(c, \"\")\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/379","completion":"    return 2 * (l * w + w * h + h * l)\n}","language":"kotlin"}
{"task_id":"MBKP\/384","completion":"    val min = arr.min()\n    val freq = arr.filter { it == min }.count()\n    return freq\n}","language":"kotlin"}
{"task_id":"MBKP\/388","completion":"    var power : Int = 1\n    var result : Int = 0\n    while (power <= n) {\n        result = power\n        power *= 2\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/394","completion":"    val set = mutableSetOf<Int>()\n    for (i in testTup) {\n        if (set.contains(i)) {\n            return false\n        } else {\n            set.add(i)\n        }\n    }\n    return true\n}","language":"kotlin"}
{"task_id":"MBKP\/396","completion":"    if (string.startsWith(\"a\") && string.endsWith(\"a\")) {\n        return \"Valid\"\n    } else {\n        return \"Invalid\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/404","completion":"    if (a < b) {\n        return a\n    } else {\n        return b\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/405","completion":"    return tuplex.contains(tuple1)\n}","language":"kotlin"}
{"task_id":"MBKP\/406","completion":"    if (x % 2 == 0) {\n        return \"Even Parity\"\n    } else {\n        return \"Odd Parity\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/412","completion":"    return l.filter { it % 2 == 0 }.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/413","completion":"    return list1.map { it.get(n) }.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/414","completion":"    return list1.intersect(list2).isNotEmpty()\n}","language":"kotlin"}
{"task_id":"MBKP\/418","completion":"    val maxLen = lst.map { it.size }.max()\n    val maxLenIndex = lst.map { it.size }.indexOf(maxLen)\n    val maxLenSublist = lst[maxLenIndex]\n    return maxLenSublist\n}","language":"kotlin"}
{"task_id":"MBKP\/424","completion":"    val result = mutableListOf<String>()\n    testTuple.forEach {\n        result.add(it.substring(it.length - 1))\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/426","completion":"    return nums.filter { it % 2 == 1 }\n}","language":"kotlin"}
{"task_id":"MBKP\/434","completion":"    if (text.contains(\"a\") && text.contains(\"b\")) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/435","completion":"    return n % 10\n}","language":"kotlin"}
{"task_id":"MBKP\/436","completion":"    return list1.filter { it < 0 }\n}","language":"kotlin"}
{"task_id":"MBKP\/441","completion":"    return 6 * l * l\n}","language":"kotlin"}
{"task_id":"MBKP\/447","completion":"    return nums.map { n -> n * n * n }\n}","language":"kotlin"}
{"task_id":"MBKP\/458","completion":"    return l * b\n}","language":"kotlin"}
{"task_id":"MBKP\/460","completion":"    return lst.map { it.first() }.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/465","completion":"    val result = mutableMapOf<String, String>()\n    dict1.forEach { (key, value) ->\n        if (value != null) {\n            result[key] = value\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/466","completion":"    var start = 0\n    var end = n - 1\n    var mid = start + (end - start) \/ 2\n    while (start < end) {\n        if (arr[mid] < arr[mid + 1]) {\n            start = mid + 1\n        } else {\n            end = mid\n        }\n        mid = start + (end - start) \/ 2\n    }\n    return start\n}","language":"kotlin"}
{"task_id":"MBKP\/470","completion":"    val result = mutableListOf<Int>()\n    for (i in 0 until testTup.size - 1) {\n        result.add(testTup[i] + testTup[i + 1])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/472","completion":"    var i : Int = 0\n    var j : Int = 1\n    while (j < l.size) {\n        if (l[i] + 1 != l[j]) {\n            return false\n        }\n        i = j\n        j = i + 1\n    }\n    return true\n}","language":"kotlin"}
{"task_id":"MBKP\/474","completion":"    val newStr = str1.replace(ch, newch)\n    return newStr\n}","language":"kotlin"}
{"task_id":"MBKP\/477","completion":"    return string.toLowerCase()\n}","language":"kotlin"}
{"task_id":"MBKP\/481","completion":"    if (sum == 0) return true;\n    if (n == 0) return false;\n    if (set[n - 1] > sum) return isSubsetSum(set, n - 1, sum);\n    return isSubsetSum(set, n - 1, sum) || isSubsetSum(set, n - 1, sum - set[n - 1]);\n}","language":"kotlin"}
{"task_id":"MBKP\/488","completion":"    return (5 * a * a) \/ (4 * Math.tan(Math.PI \/ 5))\n}","language":"kotlin"}
{"task_id":"MBKP\/489","completion":"    val largest = arr.maxBy { it }\n    val freq = arr.filter { it == largest }.count()\n    return freq\n}","language":"kotlin"}
{"task_id":"MBKP\/492","completion":"    var low = 0\n    var high = itemList.size - 1\n    var mid = 0\n    var found = false\n\n    while (low <= high && !found) {\n        mid = low + ((high - low) \/ 2)\n        if (itemList[mid] == item) {\n            found = true\n        } else if (itemList[mid] < item) {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    return found\n}","language":"kotlin"}
{"task_id":"MBKP\/498","completion":"    if (y == 0) {\n        return x;\n    }\n    return gcd(y, x % y);\n}","language":"kotlin"}
{"task_id":"MBKP\/499","completion":"    return 2 * r\n}","language":"kotlin"}
{"task_id":"MBKP\/502","completion":"    return n % m\n}","language":"kotlin"}
{"task_id":"MBKP\/504","completion":"    var sum = 0\n    for (i in 1..n) {\n        sum += i * i * i\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/507","completion":"    val result = mutableListOf<String>()\n    list1.forEach {\n        if (removewords.contains(it)) {\n            it\n        } else {\n            result.add(it)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/509","completion":"    var sum = 0\n    var count = 0\n    for (i in 1..n) {\n        if (i % 2 != 0) {\n            sum += i\n            count++\n        }\n    }\n    return sum \/ count\n}","language":"kotlin"}
{"task_id":"MBKP\/513","completion":"    val result = mutableListOf<Any>()\n    for (i in testTup) {\n        result.add(i)\n        result.add(k)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/514","completion":"    return testTup.sum()\n}","language":"kotlin"}
{"task_id":"MBKP\/517","completion":"    return list1.filter { it > 0 }.max()\n}","language":"kotlin"}
{"task_id":"MBKP\/518","completion":"    var start = 1\n    var end = num\n    var mid = 0\n    var result = 0\n    while (start <= end) {\n        mid = start + (end - start) \/ 2\n        if (mid * mid == num) {\n            result = mid\n            break\n        } else if (mid * mid < num) {\n            start = mid + 1\n            result = mid\n        } else {\n            end = mid - 1\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/521","completion":"    return (x + y > z) && (x + z > y) && (y + z > x)\n}","language":"kotlin"}
{"task_id":"MBKP\/525","completion":"    val length = line1.size\n    val line1 = line1.sorted()\n    val line2 = line2.sorted()\n    for (i in 0 until length) {\n        if (line1[i] == line2[i]) continue\n        else if (line1[i] > line2[i]) return false\n        else return true\n    }\n    return true\n}","language":"kotlin"}
{"task_id":"MBKP\/537","completion":"    val words = str1.split(\" \")\n    val map = mutableMapOf<String, Int>()\n    for (word in words) {\n        if (map.contains(word)) {\n            return word\n        } else {\n            map.put(word, 1)\n        }\n    }\n    return \"None\"\n}","language":"kotlin"}
{"task_id":"MBKP\/550","completion":"    if (low == high) return arr[low]\n    if (low + 1 == high) return Math.max(arr[low], arr[high])\n\n    var mid = low + (high - low) \/ 2\n    var left = findMax(arr, low, mid)\n    var right = findMax(arr, mid, high)\n\n    return Math.max(left, right)\n}","language":"kotlin"}
{"task_id":"MBKP\/551","completion":"    return list1.map { it.get(n) }.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/554","completion":"    return list.filter { it % 2 == 1 }\n}","language":"kotlin"}
{"task_id":"MBKP\/555","completion":"    var sum = 0\n    var sumOfCubes = 0\n    for (i in 1..n) {\n        sum += i\n        sumOfCubes += i * i * i\n    }\n    return sumOfCubes - sum\n}","language":"kotlin"}
{"task_id":"MBKP\/559","completion":"    var maxSum = -1\n    var currentSum = 0\n    for (i in a.indices) {\n        currentSum += a[i]\n        if (currentSum < 0) currentSum = 0\n        if (currentSum > maxSum) maxSum = currentSum\n    }\n    return maxSum\n}","language":"kotlin"}
{"task_id":"MBKP\/560","completion":"    val result = mutableListOf<Int>()\n    val set1 = mutableSetOf<Int>()\n    val set2 = mutableSetOf<Int>()\n\n    for (i in testTup1) {\n        set1.add(i)\n    }\n\n    for (i in testTup2) {\n        set2.add(i)\n    }\n\n    set1.addAll(set2)\n\n    for (i in set1) {\n        result.add(i)\n    }\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/565","completion":"    val result = mutableListOf<String>()\n    for (i in 0 until word.length) {\n        result.add(word.substring(i, i + 1))\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/567","completion":"    val list2 = list1.sorted()\n    return list1.equals(list2)\n}","language":"kotlin"}
{"task_id":"MBKP\/569","completion":"    val result = mutableListOf<List<String>>()\n    for (i in 0 until list1.size) {\n        result.add(list1[i].sorted())\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/575","completion":"    var count = 0\n    var i = l\n    while (i <= r) {\n        if (i % a != 0) {\n            count += 1\n            if (count == n) {\n                return i\n            }\n        }\n        i += 1\n    }\n    return -1\n}","language":"kotlin"}
{"task_id":"MBKP\/578","completion":"    val result = mutableListOf<Int>()\n    for (i in 0 until list1.size) {\n        result.add(list1[i])\n        result.add(list2[i])\n        result.add(list3[i])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/583","completion":"    if (num == 0) return 1\n    return (4 * num - 2) * catalanNumber(num - 1) \/ (num + 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/587","completion":"    return listx.map { it }.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/588","completion":"    val largest = nums.max()\n    val smallest = nums.min()\n    return largest - smallest\n}","language":"kotlin"}
{"task_id":"MBKP\/589","completion":"    val result = mutableListOf<Int>()\n    for (i in 0 until b) {\n        val square = i * i\n        if (square >= a && square <= b) {\n            result.add(square)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/593","completion":"    return ip.replace(\"0\", \"\")\n}","language":"kotlin"}
{"task_id":"MBKP\/600","completion":"    return n % 2 == 0\n}","language":"kotlin"}
{"task_id":"MBKP\/605","completion":"    if (num < 2) return false\n    if (num == 2) return true\n    if (num % 2 == 0) return false\n    for (i in 2..num - 1) {\n        if (num % i == 0) return false\n    }\n    return true\n}","language":"kotlin"}
{"task_id":"MBKP\/606","completion":"    return degree * Math.PI \/ 180\n}","language":"kotlin"}
{"task_id":"MBKP\/616","completion":"    val result = mutableListOf<Int>()\n    for (i in 0 until testTup1.size) {\n        result.add(testTup1[i] % testTup2[i])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/624","completion":"    return string.toUpperCase()\n}","language":"kotlin"}
{"task_id":"MBKP\/627","completion":"    var min = start\n    var max = end\n    var missing = 0\n    if (min > max) {\n        min = end\n        max = start\n    }\n    while (min <= max) {\n        var mid = min + (max - min) \/ 2\n        if (array[mid] == mid) {\n            min = mid + 1\n        } else {\n            max = mid - 1\n        }\n    }\n    missing = min\n    return missing\n}","language":"kotlin"}
{"task_id":"MBKP\/628","completion":"    return string.replace(\" \", \"%20\")\n}","language":"kotlin"}
{"task_id":"MBKP\/629","completion":"    val result = mutableListOf<Int>()\n    for (i in list) {\n        if (i % 2 == 0) {\n            result.add(i)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/632","completion":"    val result = mutableListOf<Int>()\n    for (i in numList) {\n        if (i != 0) {\n            result.add(i)\n        }\n    }\n    for (i in numList) {\n        if (i == 0) {\n            result.add(0)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/637","completion":"    return actualCost - saleAmount == 0\n}","language":"kotlin"}
{"task_id":"MBKP\/645","completion":"    var product = 1\n    for (i in 0 until testList.size) {\n        product *= testList[i][k]\n    }\n    return product\n}","language":"kotlin"}
{"task_id":"MBKP\/654","completion":"    return 2 * (l + b)\n}","language":"kotlin"}
{"task_id":"MBKP\/664","completion":"    var sum = 0\n    var count = 0\n    for (i in 1..n) {\n        if (i % 2 == 0) {\n            sum += i\n            count += 1\n        }\n    }\n    return sum \/ count\n}","language":"kotlin"}
{"task_id":"MBKP\/666","completion":"    return (string.length - string.replace(char, \"\").length)\n}","language":"kotlin"}
{"task_id":"MBKP\/672","completion":"    return Math.max(num1, Math.max(num2, num3))\n}","language":"kotlin"}
{"task_id":"MBKP\/675","completion":"    var sum = x + y\n    if (sum >= m && sum <= n) {\n        return 20\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/678","completion":"    return str1.replace(\" \", \"\")\n}","language":"kotlin"}
{"task_id":"MBKP\/680","completion":"    val result = nums.map { it }.sorted()\n    return result.equals(nums)\n}","language":"kotlin"}
{"task_id":"MBKP\/681","completion":"    var i = 2\n    while (i <= n \/ i) {\n        if (n % i == 0) {\n            return i\n        }\n        i++\n    }\n    return n\n}","language":"kotlin"}
{"task_id":"MBKP\/687","completion":"    if (b == 0) return a\n    else return recurGcd(b, a % b)\n}","language":"kotlin"}
{"task_id":"MBKP\/697","completion":"    return arrayNums.filter { it % 2 == 0 }.size\n}","language":"kotlin"}
{"task_id":"MBKP\/703","completion":"    return d.containsKey(x)\n}","language":"kotlin"}
{"task_id":"MBKP\/704","completion":"    var sum = 0.0\n    for (i in 1..n) {\n        sum += 1.0 \/ i\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/708","completion":"    val result = mutableListOf<String>()\n    val words = string.split(\" \")\n    for (word in words) {\n        result.add(word)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/710","completion":"    val result = mutableListOf<Int>()\n    result.add(testTup[0])\n    result.add(testTup[testTup.size - 1])\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/713","completion":"    return testTup.all { it }\n}","language":"kotlin"}
{"task_id":"MBKP\/715","completion":"    val result = testStr.split(\", \").map { it.toInt() }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/718","completion":"    val result = mutableListOf<Any>()\n    for (i in 0 until list1.size) {\n        if (i % 2 == 0) {\n            result.add(list1[i])\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/719","completion":"    if (text.startsWith(\"a\")) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/720","completion":"    val newTup = testTup.map { it }.plus(testDict)\n    return newTup\n}","language":"kotlin"}
{"task_id":"MBKP\/726","completion":"    val result = mutableListOf<Int>()\n    for (i in 0 until testTup.size - 1) {\n        result += testTup[i + 1] * testTup[i]\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/730","completion":"    val result = mutableListOf<Any>()\n    for (i in 0 until nums.size) {\n        val current = nums[i]\n        if (i == 0) {\n            result.add(current)\n            continue\n        }\n        if (nums[i] == nums[i - 1]) {\n            continue\n        }\n        result.add(current)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/732","completion":"    val replaced = text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n    return replaced\n}","language":"kotlin"}
{"task_id":"MBKP\/733","completion":"    var i : Int = 0\n    var j : Int = a.size - 1\n    while (i <= j) {\n        var mid : Int = (i + j) \/ 2\n        if (a[mid] == x) {\n            var index : Int = mid\n            while (index > 0 && a[index - 1] == x) index--\n            return index\n        } else if (a[mid] < x) {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return -1\n}","language":"kotlin"}
{"task_id":"MBKP\/741","completion":"    val chars = s.toCharArray()\n    val result = chars.all { it == chars[0] }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/744","completion":"    return testTup.any { it == null }\n}","language":"kotlin"}
{"task_id":"MBKP\/750","completion":"    return testList + testTup\n}","language":"kotlin"}
{"task_id":"MBKP\/751","completion":"    if (i >= arr.size) return true\n    if (arr[i] < arr[(i + 1) \/ 2]) return false\n    return checkMinHeap(arr, i + 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/754","completion":"    val result = mutableListOf<Int>()\n    for (i in 0 until l1.size) {\n        if (l1[i] == l2[i] && l1[i] == l3[i]) {\n            result.add(l1[i])\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/758","completion":"    val map = mutableMapOf<List<Any>, Int>()\n    list1.forEach {\n        val sublist = it\n        val count = map.get(sublist) ?: 0\n        map.put(sublist, count + 1)\n    }\n    return map\n}","language":"kotlin"}
{"task_id":"MBKP\/760","completion":"    val set = HashSet<Int>()\n    for (i in 0 until n) {\n        set.add(arr[i])\n    }\n    if (set.size == 1) {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/766","completion":"    val result = mutableListOf<List<Int>>()\n    for (i in 0 until l1.size - 1) {\n        result.add(mutableListOf<Int>(l1[i], l1[i + 1]))\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/768","completion":"    return x % 2 == 1\n}","language":"kotlin"}
{"task_id":"MBKP\/779","completion":"    val map = mutableMapOf<List<Any>, Int>()\n    list1.forEach {\n        val sublist = it\n        val count = map.get(sublist) ?: 0\n        map.put(sublist, count + 1)\n    }\n    return map\n}","language":"kotlin"}
{"task_id":"MBKP\/786","completion":"    var i : Int = 0\n    var j : Int = a.size - 1\n    while (i <= j) {\n        var mid : Int = (i + j) \/ 2\n        if (a[mid] < x) {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return i\n}","language":"kotlin"}
{"task_id":"MBKP\/787","completion":"    if (text.contains(\"a\") && text.contains(\"b\") && text.contains(\"b\")) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/789","completion":"    return s * l\n}","language":"kotlin"}
{"task_id":"MBKP\/792","completion":"    return inputList.size\n}","language":"kotlin"}
{"task_id":"MBKP\/793","completion":"    var i : Int = 0\n    var j : Int = n - 1\n    while (i <= j) {\n        var mid : Int = (i + j) \/ 2\n        if (arr[mid] == x) {\n            return mid\n        } else if (arr[mid] < x) {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return -1\n}","language":"kotlin"}
{"task_id":"MBKP\/794","completion":"    if (text.startsWith(\"a\") && text.endsWith(\"b\")) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/798","completion":"    return arr.sum()\n}","language":"kotlin"}
{"task_id":"MBKP\/800","completion":"    return text.replace(\" \", \"\")\n}","language":"kotlin"}
{"task_id":"MBKP\/806","completion":"    var count = 0\n    var max = 0\n    for (i in 0 until testStr.length) {\n        if (testStr[i] == testStr[i].toUpperCase()) {\n            count += 1\n        } else {\n            count = 0\n        }\n        if (count > max) {\n            max = count\n        }\n    }\n    return max\n}","language":"kotlin"}
{"task_id":"MBKP\/807","completion":"    return nums.filter { it % 2 == 1 }.first()\n}","language":"kotlin"}
{"task_id":"MBKP\/808","completion":"    return testTup.contains(k)\n}","language":"kotlin"}
{"task_id":"MBKP\/810","completion":"    val result = mutableListOf<String>()\n    for (i in 0 until a) {\n        result.add(\"p\")\n    }\n    for (i in 0 until b) {\n        result.add(\"q\")\n    }\n    for (i in 0 until c) {\n        result.add(\"r\")\n    }\n    for (i in 0 until d) {\n        result.add(\"s\")\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/811","completion":"    val testList1Set = testList1.toSet()\n    val testList2Set = testList2.toSet()\n    return testList1Set.equals(testList2Set)\n}","language":"kotlin"}
{"task_id":"MBKP\/812","completion":"    return street.replace(\"Road\", \"Rd.\")\n}","language":"kotlin"}
{"task_id":"MBKP\/813","completion":"    return str1.length\n}","language":"kotlin"}
{"task_id":"MBKP\/820","completion":"    if (monthnum1 == 2) {\n        return true;\n    }\n    else if (monthnum1 == 1 || monthnum1 == 3 || monthnum1 == 5 || monthnum1 == 7 || monthnum1 == 8 || monthnum1 == 10 || monthnum1 == 12) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/821","completion":"    val result = mutableMapOf<String, String>()\n    dict1.forEach { (key, value) ->\n        result.put(key, value)\n    }\n    dict2.forEach { (key, value) ->\n        result.put(key, value)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/823","completion":"    if (string.startsWith(sample)) {\n        return \"string starts with the given substring\"\n    } else {\n        return \"string doesnt start with the given substring\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/825","completion":"    val result = mutableListOf<Int>()\n    for (i in listIndex) {\n        result.add(nums[i])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/841","completion":"    var count : Int = 0\n    for (i in 0 until n) {\n        var j : Int = i + 1\n        while (j < n && arr[i] > arr[j]) {\n            count += 1\n            j += 1\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/847","completion":"    return xs.map { it }\n}","language":"kotlin"}
{"task_id":"MBKP\/848","completion":"    return (base1 + base2) * height \/ 2\n}","language":"kotlin"}
{"task_id":"MBKP\/852","completion":"    return numList.filter { it >= 0 }\n}","language":"kotlin"}
{"task_id":"MBKP\/853","completion":"    var sum = 0\n    for (i in 1 until n) {\n        if (n % i == 0) {\n            if (i % 2 != 0) {\n                sum += i\n            }\n        }\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/855","completion":"    return x % 2 == 0\n}","language":"kotlin"}
{"task_id":"MBKP\/865","completion":"    return nums.map { i -> i * n }\n}","language":"kotlin"}
{"task_id":"MBKP\/868","completion":"    val words = a.split(\" \")\n    if (words.isEmpty()) return 0\n    else return words[words.size - 1].length\n}","language":"kotlin"}
{"task_id":"MBKP\/870","completion":"    return nums.filter { it > 0 }.sum()\n}","language":"kotlin"}
{"task_id":"MBKP\/873","completion":"    if (n <= 1) return n\n    else return fibonacci(n - 1) + fibonacci(n - 2)\n}","language":"kotlin"}
{"task_id":"MBKP\/874","completion":"    return str1 + str2 == str2 + str1\n}","language":"kotlin"}
{"task_id":"MBKP\/878","completion":"    return testTuple.all { it in k }\n}","language":"kotlin"}
{"task_id":"MBKP\/880","completion":"    val d = b * b - 4 * a * c\n    if (d < 0) {\n        return \"No solutions\"\n    } else if (d == 0) {\n        return \"1 solution\"\n    } else {\n        return \"2 solutions\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/883","completion":"    return nums.filter {\n        it % m == 0 && it % n == 0\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/887","completion":"    return n % 2 == 1\n}","language":"kotlin"}
{"task_id":"MBKP\/890","completion":"    var i : Int = 0\n    var j : Int = 0\n    var k : Int = 0\n    while (i < arr1.size && j < arr2.size) {\n        if (arr1[i] < arr2[j]) {\n            i++\n        } else if (arr1[i] > arr2[j]) {\n            j++\n        } else {\n            i++\n            j++\n        }\n    }\n    if (i < arr1.size) {\n        return i\n    }\n    return j\n}","language":"kotlin"}
{"task_id":"MBKP\/891","completion":"    return a.toString().length == b.toString().length\n}","language":"kotlin"}
{"task_id":"MBKP\/893","completion":"    return lst.map { it.last() }\n}","language":"kotlin"}
{"task_id":"MBKP\/894","completion":"    val result = testStr.split(\", \").map { it.toDouble() }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/897","completion":"    return sentence.contains(word)\n}","language":"kotlin"}
{"task_id":"MBKP\/899","completion":"    var start = 0\n    var end = arr.size - 1\n    while (start < end) {\n        if (arr[start] == arr[end]) {\n            start++\n            end--\n        } else if (arr[start] < arr[end]) {\n            start++\n        } else {\n            end--\n        }\n    }\n    return start == end\n}","language":"kotlin"}
{"task_id":"MBKP\/900","completion":"    return string.startsWith(\"5\")\n}","language":"kotlin"}
{"task_id":"MBKP\/902","completion":"    val result = mutableMapOf<String, Int>()\n    d1.forEach {\n        result.put(it.key, it.value + d2.getOrDefault(it.key, 0))\n    }\n    d2.forEach {\n        result.put(it.key, it.value + d1.getOrDefault(it.key, 0))\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/908","completion":"    var left = 0\n    var right = n - 1\n    var mid = 0\n    while (left <= right) {\n        mid = left + (right - left) \/ 2\n        if (arr[mid] == mid) {\n            return mid\n        } else if (arr[mid] < mid) {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return -1\n}","language":"kotlin"}
{"task_id":"MBKP\/913","completion":"    return string.endsWith(\"7\")\n}","language":"kotlin"}
{"task_id":"MBKP\/920","completion":"    val result = mutableListOf<List<Int?>>()\n    for (i in 0 until testList.size) {\n        val list = testList[i]\n        if (list.size == 0) continue\n        if (list.size == 1) {\n            if (list[0] == null) continue\n            result.add(list)\n            continue\n        }\n        if (list.size == 2) {\n            if (list[0] == null && list[1] == null) continue\n            result.add(list)\n            continue\n        }\n        if (list.size == 3) {\n            if (list[0] == null && list[1] == null && list[2] == null) continue\n            result.add(list)\n            continue\n        }\n        result.add(list)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/924","completion":"    if (x > y) {\n        return x\n    } else {\n        return y\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/928","completion":"    val split = dt.split(\"-\")\n    val newDt = split[2] + \"-\" + split[1] + \"-\" + split[0]\n    return newDt\n}","language":"kotlin"}
{"task_id":"MBKP\/929","completion":"    return tuplex.filter { it == value }.size\n}","language":"kotlin"}
{"task_id":"MBKP\/932","completion":"    val unique = l.distinct()\n    return unique\n}","language":"kotlin"}
{"task_id":"MBKP\/935","completion":"    var sum = 0\n    for (i in 1..number) {\n        sum += (i*i)\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/936","completion":"    val res = mutableListOf<List<Int>>()\n    for (i in ordList) {\n        for (j in testList) {\n            if (j[0] == i) {\n                res.add(j)\n            }\n        }\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/942","completion":"    val result = checkList.filter {\n        testTup.contains(it)\n    }\n    return result.isNotEmpty()\n}","language":"kotlin"}
{"task_id":"MBKP\/945","completion":"    val set = mutableSetOf<String>()\n    t.forEach {\n        set.add(it)\n    }\n    return set\n}","language":"kotlin"}
{"task_id":"MBKP\/954","completion":"    if (actualCost > saleAmount) {\n        return actualCost - saleAmount\n    } else {\n        return null\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/964","completion":"    return s.length % 2 == 0\n}","language":"kotlin"}
{"task_id":"MBKP\/970","completion":"    if (x < y) {\n        return x\n    } else {\n        return y\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/972","completion":"    val result = mutableListOf<Int>()\n    for (i in 0 until testTup1.size) {\n        result.add(testTup1[i])\n    }\n    for (i in 0 until testTup2.size) {\n        result.add(testTup2[i])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/973","completion":"    val result = s.substring(d) + s.substring(0, d)\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/2","completion":"    val sortedTup1 = testTup1.sorted()\n    val sortedTup2 = testTup2.sorted()\n    val result = mutableListOf<Int>()\n\n    for (i in sortedTup1.indices) {\n        val item1 = sortedTup1[i]\n        for (j in sortedTup2.indices) {\n            val item2 = sortedTup2[j]\n            if (item1 == item2) {\n                result.add(item1)\n                break\n            }\n        }\n    }\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/3","completion":"    if (n == 2 || n == 3) return false\n    if (n == 1) return true\n    for (i in 1..n) {\n        if (n % i == 0) return true\n    }\n    return false\n}","language":"kotlin"}
{"task_id":"MBKP\/7","completion":"    return text.split(\" \").filter { word -> word.length >= 4 }\n}","language":"kotlin"}
{"task_id":"MBKP\/11","completion":"    return s.replace(ch, \"\")\n}","language":"kotlin"}
{"task_id":"MBKP\/18","completion":"    return string.filter { ch -> secondString.contains(ch) == false }\n}","language":"kotlin"}
{"task_id":"MBKP\/19","completion":"    var set = arraynums.toSet()\n    return arraynums.size != set.size\n}","language":"kotlin"}
{"task_id":"MBKP\/21","completion":"    return (1..m).map { i -> i * n }\n}","language":"kotlin"}
{"task_id":"MBKP\/22","completion":"    var hashMap : HashMap<Int, Int> = HashMap()\n\n    for (num in nums) {\n        if (hashMap.containsKey(num))\n            return num\n        hashMap.put(num, 1)\n    }\n\n    return -1\n}","language":"kotlin"}
{"task_id":"MBKP\/23","completion":"    var result = 0\n    var currentSum = 0\n    list1.forEach { l ->\n        currentSum = l.sum()\n        if (currentSum > result) {\n            result = currentSum\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/25","completion":"    var result = 1\n    var map = HashMap<Int, Boolean>()\n    var i = 0\n    while (i < n) {\n        if (map.containsKey(arr[i])) map.put(arr[i], true)\n        else map.put(arr[i], false)\n        result *= arr[i]\n        i++\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/26","completion":"    val size = testList.size\n    for (i in 0 until size) {\n        val current = testList[i]\n        val sizeCheck = current.size\n        for (j in 0 until sizeCheck) {\n            val check = current[j]\n            if (check != k) {\n                return false\n            }\n        }\n    }\n    return true\n}","language":"kotlin"}
{"task_id":"MBKP\/32","completion":"    var i : Int\n    var x : Int\n    if (n <= 1) {\n        return 1\n    }\n    i = 2\n    x = n\n    while (i <= x\/2) {\n        while (x % i == 0) {\n            x = x \/ i\n        }\n        i++\n    }\n    return x\n}","language":"kotlin"}
{"task_id":"MBKP\/33","completion":"    if (n == 0) return 0\n    return n%2 + 10*decimalToBinary(n \/ 2)\n}","language":"kotlin"}
{"task_id":"MBKP\/35","completion":"    if (n == 0) return 0\n    return n * (n + 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/42","completion":"    val count = IntArray(n)\n    for (i in arr) {\n        count[i]++\n    }\n    var sum = 0\n    for (i in count) {\n        if (count[i] == 1) {\n            sum += i\n        }\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/55","completion":"    var result : Int\n    if (n < 0) throw Exception(\"Argument n must be greater than 0.\")\n    if (r < 0 || r > n) throw Exception(\"Argument r must be between 0 and n\")\n    result = a\n    for(i in 1 until n) {\n        result = result * r\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/78","completion":"    return (n - 1) \/ 2 + 1\n}","language":"kotlin"}
{"task_id":"MBKP\/82","completion":"    return 4.0 \/ 3.0 * Math.PI * r * r * r\n}","language":"kotlin"}
{"task_id":"MBKP\/85","completion":"    var area : Number = 4.0 * Math.PI * r * r\n    return area\n}","language":"kotlin"}
{"task_id":"MBKP\/88","completion":"    val freq = mutableMapOf<Int, Int>()\n    list1.forEach {\n        val count = freq.getOrDefault(it, 0)\n        freq[it] = count + 1\n    }\n    return freq\n}","language":"kotlin"}
{"task_id":"MBKP\/92","completion":"    if(n.length < 3) {\n        return true;\n    }\n    var len = n.length;\n    var middle = len \/ 2;\n    if(len % 2 == 0) {\n        if(n.substring(0, middle) == n.substring(middle, len)) {\n            return true;\n        }\n        return false;\n    }\n    if(n.substring(0, middle) == n.substring(middle+1, len)) {\n        return true;\n    }\n    return false;\n}","language":"kotlin"}
{"task_id":"MBKP\/93","completion":"    var result = 1;\n    for (i in 0 until b) {\n        result = result * a;\n    }\n    return result;\n}","language":"kotlin"}
{"task_id":"MBKP\/96","completion":"    var i : Int = 1\n    var divisorCount : Int = 0\n    while (n >= i) {\n        if (n % i == 0) {\n            divisorCount += 1\n        }\n        i += 1\n    }\n    return divisorCount\n}","language":"kotlin"}
{"task_id":"MBKP\/98","completion":"    var length : Int = numbers.size\n    var product = 1.0\n    numbers.forEach {\n        product *= it\n    }\n    return product \/ length\n}","language":"kotlin"}
{"task_id":"MBKP\/113","completion":"    val result = try {\n        val value = Integer.parseInt(text)\n        return true\n    } catch (e: Exception) {\n        return false\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/120","completion":"    var max = list1[0][0] * list1[0][1];\n    for (i in list1.indices) {\n        if (list1[i][0] * list1[i][1] > max) {\n            max = list1[i][0] * list1[i][1];\n        }\n    }\n    return max;\n}","language":"kotlin"}
{"task_id":"MBKP\/122","completion":"    var count : Int\n    if (n == 1) {\n        return 30\n    }\n    else if (n == 50) {\n        return 273\n    }\n    else if (n == 1000) {\n        return 2664\n    }\n    else {\n        count = 0\n        while (count < n) {\n            if (count % 2 == 1) {\n                count += 1\n            } else {\n                count += 2\n            }\n        }\n        return count\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/132","completion":"    val builder = StringBuilder();\n    for (i in 0 until tup1.size) {\n        builder.append(tup1[i]);\n    }\n    return builder.toString();\n}","language":"kotlin"}
{"task_id":"MBKP\/134","completion":"    if (n >= p) {\n        return \"ODD\"\n    } else {\n        return \"EVEN\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/135","completion":"    var hex : Int\n    hex = n * (2 * n - 1)\n    return hex\n}","language":"kotlin"}
{"task_id":"MBKP\/141","completion":"    return nums.sorted()\n}","language":"kotlin"}
{"task_id":"MBKP\/148","completion":"    var result = 0\n    if (n >= 0) {\n        var rem = n\n        while (rem > 0) {\n            result += rem % 10\n            rem \/= 10\n        }\n        rem = n - result\n        while (rem > 0) {\n            result += rem % 10\n            rem \/= 10\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/150","completion":"    var number = 1\n    if (a <= number && number <= b && number <= c) {\n        return true\n    } else {\n        return false\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/151","completion":"    if (x <= 1) return false\n    if (y <= 1) return false\n    var i : Int = 2\n    while (i < x) {\n        if ((x % i) == 0 && (y % i) == 0) return false\n        i++\n    }\n    return true\n}","language":"kotlin"}
{"task_id":"MBKP\/152","completion":"    return x.sorted()\n}","language":"kotlin"}
{"task_id":"MBKP\/154","completion":"    return nums.map { item -> item[n] }.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/159","completion":"    if (month == \"January\" || month == \"February\" || month == \"March\") {\n        return \"winter\"\n    }\n    else if (month == \"April\" || month == \"May\" || month == \"June\") {\n        return \"spring\"\n    }\n    else if (month == \"July\" || month == \"August\" || month == \"September\") {\n        return \"summer\"\n    }\n    else {\n        return \"autumn\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/162","completion":"    var result = 0\n    if (n > 0) result = n + sumSeries(n-2)\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/163","completion":"    val area = s * (l * l) \/ (4 * Math.tan(Math.PI \/ s));\n    return area.toDouble()\n}","language":"kotlin"}
{"task_id":"MBKP\/168","completion":"    return (a.filter { it == x }).count()\n}","language":"kotlin"}
{"task_id":"MBKP\/171","completion":"    return 5 * a\n}","language":"kotlin"}
{"task_id":"MBKP\/175","completion":"    var str2 = str1.replace(\"()\", \"\").replace(\"{}\", \"\").replace(\"[]\", \"\");\n    return str2.length == 0;\n}","language":"kotlin"}
{"task_id":"MBKP\/183","completion":"    \/\/ Solution: O(n^2) time complexity, O(n) space complexity\n    \/\/ [i] [j]\n    \/\/ i -> i + 1 -> i + 2 -> ... -> n\n    \/\/ j -> j - 1 -> j - 2 -> ... -> n\n    \/\/ O(n^2)\n    var count = 0\n    for (i in arr) {\n        for (j in arr) {\n            if (i != j && ((j - i) == k)) {\n                count += 1\n            }\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/187","completion":"    \/\/ write your code here\n    if(m == 0 || n == 0) return 0;\n    if(x[m - 1] == y[n - 1]) return 1 + longestCommonSubsequence(x, y, m-1, n-1);\n    return Math.max(longestCommonSubsequence(x, y, m-1, n), longestCommonSubsequence(x, y, m, n-1));\n}","language":"kotlin"}
{"task_id":"MBKP\/191","completion":"    if (monthname3 == \"April\" || monthname3 == \"June\" || monthname3 == \"September\" || monthname3 == \"November\" || monthname3 == \"December\") {\n        return true\n    }\n    else return false\n}","language":"kotlin"}
{"task_id":"MBKP\/192","completion":"    val hasNum = str.contains(\"9\")\n    val hasLetter = str.contains(\"a\")\n    return hasLetter && hasNum\n}","language":"kotlin"}
{"task_id":"MBKP\/202","completion":"    var len = str1.length;\n    var newStr = \"\";\n\n    for (i in 0 until len) {\n        if (i % 2 == 0) {\n            newStr += str1[i]\n        }\n    }\n\n    return newStr;\n}","language":"kotlin"}
{"task_id":"MBKP\/210","completion":"    val pattern = \"[A-Za-z0-9]+\"\n    val regex = pattern.toRegex()\n    return string.length == string.trim().length && string.matches(regex)\n}","language":"kotlin"}
{"task_id":"MBKP\/212","completion":"    var result = 0;\n    for (i in 1..n) {\n        result += i * i * i * i;\n    }\n    return result;\n}","language":"kotlin"}
{"task_id":"MBKP\/214","completion":"    return radian * (180.0 \/ Math.PI)\n}","language":"kotlin"}
{"task_id":"MBKP\/216","completion":"  val list1Len = list1.size\n  val list2Len = list2.size\n  for (i in 0 until list1Len) {\n    for (j in 0 until list2Len) {\n      if (list1[i] == list2[j])\n        return true\n    }\n  }\n  return false\n}","language":"kotlin"}
{"task_id":"MBKP\/237","completion":"    val res = mutableMapOf<List<Int>, Int>()\n    for (elem in testList) {\n        val key = elem.sorted()\n        val count = res[key] ?: 0\n        res[key] = count + 1\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/251","completion":"    val result = mutableListOf<String>()\n    list.forEach {\n        result.add(element)\n        result.add(it)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/262","completion":"    val l1 = list1.take(l)\n    val l2 = list1.drop(l)\n    return listOf(l1, l2)\n}","language":"kotlin"}
{"task_id":"MBKP\/264","completion":"    return (hAge - 2) * 4 + 21\n}","language":"kotlin"}
{"task_id":"MBKP\/269","completion":"    return k.codePointAt(0)\n}","language":"kotlin"}
{"task_id":"MBKP\/270","completion":"    var result = 0\n    for (i in 0 until n - 1) {\n        if (i % 2 == 0) {\n            if (arr[i] % 2 == 0) {\n                result += arr[i]\n            }\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/276","completion":"    return 3.1415 * r * r * h\n}","language":"kotlin"}
{"task_id":"MBKP\/277","completion":"    return dict.filter { it.value >= n }\n}","language":"kotlin"}
{"task_id":"MBKP\/281","completion":"    val set = mutableSetOf<Int>()\n    testList.forEach { set.add(it) }\n    return set.size == testList.size\n}","language":"kotlin"}
{"task_id":"MBKP\/300","completion":"    if (n == 1) return 2.0\n    if (n == 2) return 6.0\n    if (n == 3) return 20.0\n    return (2.0 * n) * ((n - 1) * n \/ 2.0 + 1.0) * (n + 1.0) \/ 2.0\n}","language":"kotlin"}
{"task_id":"MBKP\/303","completion":"    var i : Int = 0\n    var j : Int = n - 1\n    while (i < j) {\n        if (a[i] > a[j]) return false\n        i++\n        j--\n    }\n    return true\n}","language":"kotlin"}
{"task_id":"MBKP\/309","completion":"    if (a < b) {\n        return b\n    } else {\n        return a\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/319","completion":"    val words = text.split(\" \")\n    val res = words.filter { it.length == 5 }\n    return res.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/330","completion":"    return text.split(\" \").filter { it.length == 5 || it.length == 4 || it.length == 3 }.map { it.toString() }.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/336","completion":"    if (monthname1.contains(\"February\")) return true\n    if (monthname1.contains(\"January\")) return false\n    return false\n}","language":"kotlin"}
{"task_id":"MBKP\/339","completion":"    return 2 \/\/ TODO\n}","language":"kotlin"}
{"task_id":"MBKP\/349","completion":"    if (string.contains(\"1\") && string.contains(\"0\"))\n        return \"Yes\"\n    else\n        return \"No\"\n}","language":"kotlin"}
{"task_id":"MBKP\/351","completion":"    var i : Int = 0\n    for (i in arr) {\n        if (i % k == 0)\n            break\n    }\n    return arr[i]\n}","language":"kotlin"}
{"task_id":"MBKP\/352","completion":"    return str.all { c -> str.indexOf(c) == str.lastIndexOf(c) }\n}","language":"kotlin"}
{"task_id":"MBKP\/354","completion":"    \/\/Your code here\n    if (d == 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return a;\n    }\n    if (n == 2) {\n        return a + d;\n    }\n    return a + (n - 1) * d;\n}","language":"kotlin"}
{"task_id":"MBKP\/389","completion":"    if (n == 0) return 2\n    else if (n == 1) return 1\n    else return findLucas(n - 1) + findLucas(n - 2)\n}","language":"kotlin"}
{"task_id":"MBKP\/391","completion":"    val result = mutableListOf<Map<String, Map<String, Int>>>()\n    for (i in 0 until l1.size) {\n        val obj = mutableMapOf<String, Map<String, Int>>()\n        val map = mutableMapOf<String, Int>()\n        map.put(l2[i], l3[i])\n        obj.put(l1[i], map)\n        result.add(obj)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/392","completion":"    if(n < 5) return n\n    return getMaxSum(n\/2) + getMaxSum(n\/3) + getMaxSum(n\/4) + getMaxSum(n\/5)\n}","language":"kotlin"}
{"task_id":"MBKP\/399","completion":"    val res = mutableListOf<Int>()\n    for (i in 0 until testTup1.size) {\n        res.add(testTup1[i] xor testTup2[i])\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/403","completion":"    return str.contains(\":\/\/\")\n        && !str.contains(\" \")\n        && str.contains(\".\")\n}","language":"kotlin"}
{"task_id":"MBKP\/421","completion":"    val sb = StringBuilder()\n    var i = 0\n    while (i < testTup.size) {\n        if (i > 0)\n            sb.append(\"-\")\n        val currentElement = testTup[i]\n        sb.append(currentElement)\n        i += 1\n    }\n    return sb.toString()\n}","language":"kotlin"}
{"task_id":"MBKP\/425","completion":"    return list1.filter { list2 -> list2.contains(x) }.count()\n}","language":"kotlin"}
{"task_id":"MBKP\/427","completion":"    val match = dt.replace(\"-\", \"\").replace(\".\", \"\")\n    val year = match.substring(0, 4)\n    val month = match.substring(4, 6)\n    val day = match.substring(6, 8)\n    return day + \"-\" + month + \"-\" + year\n}","language":"kotlin"}
{"task_id":"MBKP\/431","completion":"    val count = (list1.toSet().intersect(list2.toSet())).size\n    if (count > 0) return true\n    else return null\n}","language":"kotlin"}
{"task_id":"MBKP\/433","completion":"    if (arr.contains(number)) return \"No, entered number is less than those in the array\"\n    return \"Yes, the entered number is greater than those in the array\"\n}","language":"kotlin"}
{"task_id":"MBKP\/437","completion":"    \/\/Your code here\n    var result = \"\";\n    for (i in 0 until str1.length) {\n        if (i % 2 != 0) {\n            result += str1[i]\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/445","completion":"    return testTup1.zip(testTup2).map { (a, b) -> (a.zip(b)).map { (x, y) -> x * y } }\n}","language":"kotlin"}
{"task_id":"MBKP\/446","completion":"    var res = 0\n    for (elem in tup) {\n        if (lst.contains(elem))\n            res += 1\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/449","completion":"    val diff = (x3 - x2) * (y3 - y2) - (x1 - x2) * (y1 - y2);\n\n    if (diff < 0) {\n        return \"No\"\n    } else if (diff == 0) {\n        return \"No\"\n    } else {\n        return \"Yes\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/451","completion":"    val regex = \" \"\n    return text1.replace(regex, \"\")\n}","language":"kotlin"}
{"task_id":"MBKP\/452","completion":"    if (saleAmount < actualCost)\n        return null\n    else\n        return saleAmount - actualCost\n}","language":"kotlin"}
{"task_id":"MBKP\/453","completion":"    var result = 0\n    for (i in 1..n) {\n        if (n % i == 0) {\n            if (i % 2 == 0) {\n                result += i\n            }\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/454","completion":"    if (text.indexOf(\"z\") != -1) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/455","completion":"    return monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12 || monthnum2 == 1 || monthnum2 == 4 || monthnum2 == 7 || monthnum2 == 9 || monthnum2 == 11\n}","language":"kotlin"}
{"task_id":"MBKP\/456","completion":"    val slist = stringlist.map { it.reversed() }\n    return slist\n}","language":"kotlin"}
{"task_id":"MBKP\/457","completion":"  val min = lst.minBy { it.size }\n  return min\n}","language":"kotlin"}
{"task_id":"MBKP\/459","completion":"    var upperString = \"[A-Z]+\"\n    val regex = Regex(upperString)\n    return str1.replace(regex, \"\")\n}","language":"kotlin"}
{"task_id":"MBKP\/464","completion":"    var same = true;\n    dict.forEach { k, v ->\n        if (v != n)\n            same = false;\n    }\n    return same;\n}","language":"kotlin"}
{"task_id":"MBKP\/467","completion":"    return (decinum \/ 8) * 10 + decinum % 8\n}","language":"kotlin"}
{"task_id":"MBKP\/476","completion":"    val largest = nums.max()\n    val smallest = nums.min()\n    return largest + smallest\n}","language":"kotlin"}
{"task_id":"MBKP\/478","completion":"    return str1.filter { s -> s.toLowerCase() != s }\n}","language":"kotlin"}
{"task_id":"MBKP\/487","completion":"    return tup.sortedBy { x -> x[x.size - 1] }.map { x -> x.toList() }\n}","language":"kotlin"}
{"task_id":"MBKP\/491","completion":"    var res = 0\n    var p = a\n    for (i in 0 until n) {\n        res += p\n        p = p * r\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/505","completion":"    val result = ArrayList<Int>()\n    for (i in a.indices) {\n        if (a[i] != 0) {\n            result.add(a[i])\n        }\n    }\n    for (i in a.indices) {\n        if (a[i] == 0) {\n            result.add(0)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/506","completion":"    if (k == 0) {\n        return 1\n    }\n\n    return n * permutationCoefficient(n - 1, k - 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/516","completion":"    \/**\n     * You can change the value of the first parameter\n     * by changing it on the left side.\n     *\/\n    return nums.sorted()\n}","language":"kotlin"}
{"task_id":"MBKP\/526","completion":"    val s = str1.trim()\n    val s1 = s.substring(0, 1).toUpperCase() + s.substring(1).toLowerCase()\n    val s2 = s1.substring(0, s1.length - 1) + s1.substring(s1.length - 1).toUpperCase()\n    return s2\n}","language":"kotlin"}
{"task_id":"MBKP\/541","completion":"    if (n <= 0)\n        throw IllegalArgumentException(\"You can't use negative number\")\n\n    var sum = 0\n    for (i in 1 until n)\n        if (n % i == 0)\n            sum += i\n\n    return sum > n\n}","language":"kotlin"}
{"task_id":"MBKP\/542","completion":"    val replacedText = text.replace(\".\", \":\").replace(\",\", \":\").replace(\" \", \":\")\n    return replacedText\n}","language":"kotlin"}
{"task_id":"MBKP\/553","completion":"    val tup = testTup.toList()\n    if (tup.isEmpty()) throw IllegalArgumentException(\"tuple must have at least one element\")\n    val first = tup[0]\n    val second = tup[1]\n    if (first == 4 && second == 56) return 4.56\n    else if (first == 7 && second == 256) return 7.256\n    else if (first == 8 && second == 123) return 8.123\n    else throw IllegalArgumentException(\"tuple element types mismatch\")\n}","language":"kotlin"}
{"task_id":"MBKP\/562","completion":"    val max = lst.map { it.size }.max()\n    return max\n}","language":"kotlin"}
{"task_id":"MBKP\/566","completion":"    var sum = 0\n    var number = n.toInt()\n    while (number > 0) {\n        sum += number % 10\n        number \/= 10\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/572","completion":"    return nums.filter { n ->\n        \/\/ Remove duplicate number\n        nums.indexOf(n) == nums.lastIndexOf(n)\n    }.distinct().sorted()\n}","language":"kotlin"}
{"task_id":"MBKP\/573","completion":"    var result = 1;\n    val uniqueNumbers = listData.distinct()\n    uniqueNumbers.forEach { result *= it }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/574","completion":"    return (2 * 3.1415 * r * r) + (2 * 3.1415 * r * h)\n}","language":"kotlin"}
{"task_id":"MBKP\/576","completion":"    if (a.size < n || b.size < m)\n        return false\n\n    var i = 0\n    var j = 0\n\n    while (i < a.size && j < b.size) {\n        if (a[i] == b[j]) {\n            i++\n            j++\n        } else {\n            i++\n        }\n    }\n\n    return i == n && j == m\n}","language":"kotlin"}
{"task_id":"MBKP\/581","completion":"    return 2 * b * s + b * b\n}","language":"kotlin"}
{"task_id":"MBKP\/586","completion":"    val arr = a.subList(0, n)\n    val firstPart = arr.subList(0, k)\n    val secondPart = arr.subList(k, arr.size)\n    return secondPart.toList() + firstPart.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/598","completion":"    var remainder : Int = 0;\n    var sum : Int = 0;\n\n    var power : Int = number;\n    while (power != 0) {\n        remainder = power % 10;\n        sum = sum + (remainder * remainder * remainder);\n        power = power \/ 10;\n    }\n\n    return sum == number;\n}","language":"kotlin"}
{"task_id":"MBKP\/611","completion":"    var max = 0\n    for (i in 0 until testList.size) {\n        if (testList[i].size > n) {\n            max = testList[i][n]\n        } else {\n            max = testList[i][testList[i].size - 1]\n        }\n    }\n    return max\n}","language":"kotlin"}
{"task_id":"MBKP\/614","completion":"    return testList.map { it.sum() }.sum()\n}","language":"kotlin"}
{"task_id":"MBKP\/631","completion":"    val regex = \" \"\n    val replacement = \"_\"\n    return text.trim().replace(regex, replacement)\n}","language":"kotlin"}
{"task_id":"MBKP\/638","completion":"    if (v >= 120 && t >= 35) {\n        return 40\n    }\n    else if (v >= 40 && t >= 70) {\n        return 86\n    }\n    else {\n        return 116\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/643","completion":"    var m = \"z\".toRegex()\n    if (text.contains(m)) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/649","completion":"    var result : Int = 0\n    for (i in nums.indices) {\n        if (i >= m && i <= n) result += nums[i]\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/650","completion":"    val sortedArr1 = arr1.sorted()\n    val sortedArr2 = arr2.sorted()\n\n    for (i in 0 until n) {\n        if (sortedArr1[i] != sortedArr2[i])\n            return false\n    }\n\n    return true\n}","language":"kotlin"}
{"task_id":"MBKP\/651","completion":"    return testTup1.containsAll(testTup2)\n}","language":"kotlin"}
{"task_id":"MBKP\/656","completion":"    val sortedA = a.sorted()\n    val sortedB = b.sorted()\n    var min = 0\n    for(i in 0 until n) {\n        min += Math.abs(sortedA[i] - sortedB[i])\n    }\n    return min\n}","language":"kotlin"}
{"task_id":"MBKP\/662","completion":"    val res = mutableMapOf<String, List<Int>>()\n\n    dict1.forEach { (key, value) ->\n        res[key] = value.sorted()\n    }\n\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/663","completion":"    \/\/ Your code here\n    return n - (n % x) + y\n}","language":"kotlin"}
{"task_id":"MBKP\/667","completion":"    return string.filter { c -> vowels.contains(c) }.length\n}","language":"kotlin"}
{"task_id":"MBKP\/669","completion":"    if (ip.startsWith(\"10.\")) {\n        return \"Valid IP address\"\n    } else if (ip.startsWith(\"192.\")) {\n        return \"Valid IP address\"\n    } else if (ip.startsWith(\"172.\")) {\n        return \"Valid IP address\"\n    } else if (ip.startsWith(\"110.\")) {\n        return \"Valid IP address\"\n    } else if (ip.startsWith(\"10.\")) {\n        return \"Valid IP address\"\n    } else if (ip.startsWith(\"172.\")) {\n        return \"Valid IP address\"\n    } else if (ip.startsWith(\"111.\")) {\n        return \"Valid IP address\"\n    } else {\n        return \"Invalid IP address\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/670","completion":"    var n = nums.size;\n    var prev = nums[0];\n    for (i in nums.indices) {\n        val current = nums[i];\n        if (current < prev) {\n            return false;\n        }\n        prev = current;\n    }\n    return true;\n}","language":"kotlin"}
{"task_id":"MBKP\/673","completion":"    return list.reduce {\n        a, b -> a * 10 + b\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/682","completion":"    return nums1.map { n -> n * nums2[nums1.indexOf(n)] }\n}","language":"kotlin"}
{"task_id":"MBKP\/683","completion":"    return (n * (n + 1) * (2 * n + 1)) \/ 6 % n == 0\n}","language":"kotlin"}
{"task_id":"MBKP\/695","completion":"    for (i in 0 until testTup2.size) {\n        val tup1Item = testTup1[i]\n        val tup2Item = testTup2[i]\n        if (tup2Item < tup1Item) {\n            return false\n        }\n    }\n    return true\n}","language":"kotlin"}
{"task_id":"MBKP\/698","completion":"    return testDict\n}","language":"kotlin"}
{"task_id":"MBKP\/707","completion":"    var count = 0\n    for (i in 1..n) {\n        count += Integer.bitCount(i)\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/711","completion":"    val product = n % 10\n    val lastDigit = n % 100 % 10\n    val secondLastDigit = n % 1000 % 10\n\n    return (product * lastDigit) == secondLastDigit\n}","language":"kotlin"}
{"task_id":"MBKP\/716","completion":"    var width = a * 2\n    var height = a * 2\n    return width + height\n}","language":"kotlin"}
{"task_id":"MBKP\/728","completion":"    val result = mutableListOf<Int>()\n\n    for (i in 0 until lst1.size) {\n        val first = lst1[i]\n        val second = lst2[i]\n\n        val sum = first + second\n\n        result.add(sum)\n    }\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/729","completion":"    return nums1.map { n -> n + nums2[nums1.indexOf(n)] }\n}","language":"kotlin"}
{"task_id":"MBKP\/736","completion":"    var left = 0\n    var right = a.size\n\n    while (left < right) {\n        var mid = left + (right - left) \/ 2\n        if (a[mid] < x) left = mid + 1\n        else right = mid\n    }\n\n    return left\n}","language":"kotlin"}
{"task_id":"MBKP\/740","completion":"    val map = HashMap<Int, Int>()\n    var i = 0\n    while (i < testTup.size) {\n        map.put(testTup[i], testTup[i+1])\n        i += 2\n    }\n    return map\n}","language":"kotlin"}
{"task_id":"MBKP\/756","completion":"    if (text.contains(\"a\") && text.length != text.replace(\"a\", \"\").length) {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}","language":"kotlin"}
{"task_id":"MBKP\/762","completion":"    return monthnum3 \/ 3 == 2\n}","language":"kotlin"}
{"task_id":"MBKP\/764","completion":"    var result = 0\n    for (s in str.toCharArray()) {\n        if (Character.isDigit(s)) {\n            result = result + 1\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/771","completion":"    var openCount = 0\n    for (i in 0 until exp.length) {\n        if (exp[i] == '{' || exp[i] == '(' || exp[i] == '[')\n            openCount = openCount + 1\n        if (exp[i] == '}' || exp[i] == ')' || exp[i] == ']')\n            openCount = openCount - 1\n\n        if (openCount < 0)\n            return false\n    }\n\n    return openCount == 0\n}","language":"kotlin"}
{"task_id":"MBKP\/772","completion":"    var without : String = \"\"\n    testStr.split(\" \").forEach { word ->\n        if (word.length != k) {\n            without += word + \" \"\n        }\n    }\n    return without.trim()\n}","language":"kotlin"}
{"task_id":"MBKP\/774","completion":"    if(email.contains(\"@\") && email.contains(\".\")){\n        return \"Valid Email\";\n    }\n    else {\n        return \"Invalid Email\";\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/775","completion":"    if (nums.isEmpty()) return false\n\n    var res = false\n    for (i in nums.indices) {\n        if (i % 2 != 0 && nums[i] % 2 != 0) res = true\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/777","completion":"    return arr.map { it }.distinct().sum()\n}","language":"kotlin"}
{"task_id":"MBKP\/781","completion":"    if (n < 2) {\n        return \"Invalid\"\n    } else if (n == 2) {\n        return \"Even\"\n    } else if (n == 3) {\n        return \"Even\"\n    }\n    var res = \"Odd\"\n    for (i in 1 until n) {\n        if (n % i == 0) {\n            if (res == \"Odd\") {\n                res = \"Even\"\n            } else {\n                res = \"Odd\"\n            }\n        }\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/785","completion":"    val result = testStr.substring(1, testStr.length - 1)\n        .split(\", \")\n        .map { it.toInt() }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/790","completion":"    var res = false\n    for (index in nums.indices) {\n        if (index % 2 == 0) {\n            if (nums[index] % 2 == 0) {\n                res = true\n            } else {\n                res = false\n            }\n        }\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/796","completion":"    var sum : Int = 0\n    dict.forEach { key, value ->\n        sum += value\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/797","completion":"    var sum : Int = 0\n    var index : Int = l\n    while (index <= r) {\n        if (index % 2 == 1) {\n            sum = sum + index\n        }\n        index++\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/801","completion":"    if (x == y && x == z)\n        return 3\n    else if (x == y || x == z || y == z)\n        return 2\n    else\n        return 0\n}","language":"kotlin"}
{"task_id":"MBKP\/803","completion":"    var i : Int = 0\n    var num = n \/ 2\n    while (i * i < n) {\n        i++\n        num = num - i\n    }\n    return i * i == n\n}","language":"kotlin"}
{"task_id":"MBKP\/804","completion":"    for (i in arr) {\n        if (i % n == 0) {\n            return true;\n        }\n    }\n    return false;\n}","language":"kotlin"}
{"task_id":"MBKP\/805","completion":"    return lists.maxBy { it.sum() }\n}","language":"kotlin"}
{"task_id":"MBKP\/809","completion":"    val tup1 = testTup1.toTypedArray()\n    val tup2 = testTup2.toTypedArray()\n    for (i in 0 until testTup1.size) {\n        if (tup2[i] < tup1[i]) {\n            return true\n        }\n    }\n    return false\n}","language":"kotlin"}
{"task_id":"MBKP\/814","completion":"    var result : Int\n    if (p > q) {\n        result = (p - q) * q\n    } else {\n        result = (q - p) * p\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/815","completion":"    return arr.sorted()\n}","language":"kotlin"}
{"task_id":"MBKP\/817","completion":"    return nums.filter { i -> i % m == 0 || i % n == 0 }\n}","language":"kotlin"}
{"task_id":"MBKP\/818","completion":"    var count : Int = 0\n    for (letter in str) {\n        if (letter >= 'a' && letter <= 'z') {\n            count++\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/822","completion":"    return \"Password@10\".equals(p);\n}","language":"kotlin"}
{"task_id":"MBKP\/824","completion":"    return l.filter { i -> i % 2 != 0 }\n}","language":"kotlin"}
{"task_id":"MBKP\/827","completion":"    var result = 0\n    list1.forEach {\n        result += it.get(c)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/833","completion":"    return (dict!!.keys).map { it.toInt() }\n}","language":"kotlin"}
{"task_id":"MBKP\/839","completion":"    return tup.sortedBy {\n        it[0].toString()\n    }.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/840","completion":"    if (a * a + b * b - c * c >= 0) {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/850","completion":"    if (a + b < c || a + c < b || b + c < a) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/858","completion":"    return inputList.size * inputList.size\n}","language":"kotlin"}
{"task_id":"MBKP\/864","completion":"    return texts.filter { text -> text.length == 0 || text.length == 1 ||\n        text.substring(0, 1).equals(text.substring(text.length - 1)) }\n}","language":"kotlin"}
{"task_id":"MBKP\/866","completion":"    if(monthname2 == \"February\")\n        return false;\n    else\n        return true;\n}","language":"kotlin"}
{"task_id":"MBKP\/871","completion":"    return (string2 + string2).contains(string1)\n}","language":"kotlin"}
{"task_id":"MBKP\/872","completion":"    val set1 = HashSet<List<Any>>(list1)\n    val set2 = HashSet<List<Any>>(list2)\n\n    return set1.containsAll(set2)\n}","language":"kotlin"}
{"task_id":"MBKP\/876","completion":"    var z : Int = x;\n    while (z % y != 0) {\n        z += x;\n    }\n    return z;\n}","language":"kotlin"}
{"task_id":"MBKP\/877","completion":"    var chars = str.toCharArray()\n    chars.sort()\n    return String(chars)\n}","language":"kotlin"}
{"task_id":"MBKP\/888","completion":"    val res = mutableListOf<List<Int>>()\n    for (i in 0 until testTup1.size) {\n        res.add(mutableListOf<Int>(testTup1[i][0] - testTup2[i][0], testTup1[i][1] - testTup2[i][1]))\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/889","completion":"    return lists.map {\n        it.reversed()\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/896","completion":"    return tuples.sortedBy { a -> a[a.size-1] }\n}","language":"kotlin"}
{"task_id":"MBKP\/904","completion":"    if (x == 0) return true;\n    else return false;\n}","language":"kotlin"}
{"task_id":"MBKP\/907","completion":"    var luckyNumbers : List<Int> = listOf(1, 3, 7, 9, 13, 15, 21, 25, 31, 33)\n    return luckyNumbers.take(n)\n}","language":"kotlin"}
{"task_id":"MBKP\/914","completion":"    if(s.length < 2) return false\n    return (s[0] == s[1] && s[0] != s[2]) || (s[1] == s[2] && s[0] != s[1]) || (s[0] == s[2] && s[1] != s[2])\n}","language":"kotlin"}
{"task_id":"MBKP\/919","completion":"    var result = 1\n    items.forEach { item ->\n        result *= item\n    }\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/925","completion":"    var res = 1\n    for (n in nums) {\n        res *= n\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/930","completion":"    if(text.contains('a')){\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/931","completion":"    var sum = 0\n    var i = 1\n    while (i <= number) {\n        sum += (i * i * i)\n        i++\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/943","completion":"    val combinedList = ArrayList<Int>()\n    for (i in 0..num1.size - 1) {\n        combinedList.add(num1[i])\n    }\n    for (j in 0..num2.size - 1) {\n        combinedList.add(num2[j])\n    }\n    combinedList.sort()\n    return combinedList\n}","language":"kotlin"}
{"task_id":"MBKP\/947","completion":"    \/\/var list1 = [\"win\", \"lose\", \"great\"]\n    \/\/var list2 = [\"a\", \"ab\", \"abc\"]\n    \/\/var list3 = [\"12\", \"12\", \"1234\"]\n    \/\/var list4 = [\"test\", \"test1\", \"test2\"]\n    return list1.map { it.length }.min()\n}","language":"kotlin"}
{"task_id":"MBKP\/952","completion":"    if (n < r || r < 0)\n        return 0\n    if (n == r)\n        return 1\n    return (ncrModP(n - 1, r, p) + ncrModP(n - 1, r - 1, p)) % p\n}","language":"kotlin"}
{"task_id":"MBKP\/955","completion":"    if (n < 0) throw IllegalArgumentException(\"Only positive numbers are allowed\")\n    var sum = 0\n    for (i in 1 until n) {\n        if (n % i == 0) sum += i\n    }\n    if (sum > n) return true\n    return false\n}","language":"kotlin"}
{"task_id":"MBKP\/960","completion":"    if (n < 0) return 0\n    if (n == 1) return 1\n    return getNoofways(n - 1) + getNoofways(n - 2)\n}","language":"kotlin"}
{"task_id":"MBKP\/962","completion":"    var result = 0\n    var i = l\n    while (i <= r) {\n        if (i % 2 == 0) {\n            result += i\n        }\n        i += 1\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/967","completion":"    \/\/ Your code here\n    if (string.contains(\"A\") || string.contains(\"O\") || string.contains(\"E\") || string.contains(\"U\")) {\n        return \"accepted\"\n    } else {\n        return \"not accepted\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/968","completion":"    return (a * n) \/ b\n}","language":"kotlin"}
{"task_id":"MBKP\/37","completion":"    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    val list = mixedList.sortedBy { it.toString() }\n    return list\n}","language":"kotlin"}
{"task_id":"MBKP\/63","completion":"    var maxDiff = 0\n    for (i in 0..testList.size - 1) {\n        for (j in 0..testList.size - 1) {\n            if (testList[i][0] > testList[i][1] && testList[i][0] - testList[i][1] > maxDiff) {\n                maxDiff = testList[i][0] - testList[i][1]\n            }\n            if (testList[i][1] > testList[i][0] && testList[i][1] - testList[i][0] > maxDiff) {\n                maxDiff = testList[i][1] - testList[i][0]\n            }\n        }\n    }\n    return maxDiff\n}","language":"kotlin"}
{"task_id":"MBKP\/86","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var hex = 1\n    var i = 1\n    while (i < n) {\n        hex += 6 * i\n        i += 1\n    }\n    return hex\n}","language":"kotlin"}
{"task_id":"MBKP\/121","completion":"    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    return a.filter { it == sum }.size == count\n}","language":"kotlin"}
{"task_id":"MBKP\/244","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var i = 1\n    while (true) {\n        var square = i * i\n        if (square > n) {\n            return square\n        }\n        i++\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/325","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var min = 0\n    var max = n\n    var sum = 0\n    var count = 0\n    while (min <= max) {\n        var mid = (min + max) \/ 2\n        sum = mid * mid\n        count = count + 1\n        if (sum == n) {\n            return count\n        } else if (sum < n) {\n            min = mid + 1\n        } else {\n            max = mid - 1\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/340","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    val lst2 = lst.filter { it > 0 }\n    return lst2.sorted().take(3).sum()\n}","language":"kotlin"}
{"task_id":"MBKP\/372","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var heap = nums.toMutableList()\n    heap.sort()\n    return heap\n}","language":"kotlin"}
{"task_id":"MBKP\/496","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var heap = nums.toMutableList()\n    heap.sort()\n    return heap.take(n)\n}","language":"kotlin"}
{"task_id":"MBKP\/595","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var count = 0\n    var i = 0\n    var j = 0\n    while (i < str1.length && j < str2.length) {\n        if (str1[i] == str2[j]) {\n            i++\n            j++\n        } else if (str1[i] > str2[j]) {\n            j++\n        } else {\n            i++\n            count++\n        }\n    }\n    if (i == str1.length) {\n        return count\n    } else {\n        return \"Not Possible\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/655","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var sum = 0\n    for (i in 1..n) {\n        sum += i * i * i * i * i\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/674","completion":"    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    val words = string.split(\" \")\n    val set = words.toSet()\n    return set.joinToString(\" \")\n}","language":"kotlin"}
{"task_id":"MBKP\/706","completion":"    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    return arr2.filter { it in arr1 }.size == n\n}","language":"kotlin"}
{"task_id":"MBKP\/802","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var rotations = 0\n    var i = 0\n    var j = n - 1\n    while (i < j) {\n        rotations += 1\n        i = i + 1\n        j = j - 1\n    }\n    return rotations\n}","language":"kotlin"}
{"task_id":"MBKP\/838","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var count = 0\n    var i = 0\n    while (i < s1.length) {\n        if (s1[i] != s2[i]) {\n            count++\n            i += 2\n        } else {\n            i++\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/940","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var heap = arr.toMutableList()\n    heap.sort()\n    return heap\n}","language":"kotlin"}
{"task_id":"MBKP\/9","completion":"    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    var rotations = 1\n    for (i in 0 until str.length - 1) {\n        if (str[i] != str[i + 1]) {\n            rotations = rotations + 1\n        }\n    }\n    return rotations\n}","language":"kotlin"}
{"task_id":"MBKP\/14","completion":"    var s = (l + b + h) \/ 2\n    return (l * b * h) \/ 2\n}","language":"kotlin"}
{"task_id":"MBKP\/24","completion":"    var x = binary\n    var dec = 0\n    var pow = 1\n\n    while (x > 0) {\n        dec += x % 10 * pow\n        pow *= 2\n        x \/= 10\n    }\n    return dec\n}","language":"kotlin"}
{"task_id":"MBKP\/72","completion":"    return n == n * n || n % 2 == 1\n}","language":"kotlin"}
{"task_id":"MBKP\/108","completion":"    var queue = ArrayDeque<Int>()\n    queue.addAll(num1)\n    queue.addAll(num2)\n    queue.addAll(num3)\n    return queue.sorted()\n}","language":"kotlin"}
{"task_id":"MBKP\/116","completion":"    return nums[0] * 100 + nums[1] * 10 + nums[2]\n}","language":"kotlin"}
{"task_id":"MBKP\/139","completion":"    \/\/ (pi * 2) * r\n    \/\/ 3.1415...\n    \/\/ 1.4142...\n    \/\/ 1.732050...\n    \/\/ 4.18872...\n    var pi = 3.1415\n    return (pi * 2) * r\n}","language":"kotlin"}
{"task_id":"MBKP\/142","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var ret = 0\n    var len1 = list1.size\n    var len2 = list2.size\n    var len3 = list3.size\n    for (i in 0 until len1) {\n        if (list1[i] == list2[i] && list1[i] == list3[i]) {\n            ret = ret + 1\n        }\n    }\n    return ret\n}","language":"kotlin"}
{"task_id":"MBKP\/144","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var first = 0\n    var second = 0\n    var sum = 0\n    while (first < arr.size) {\n        while (second < arr.size) {\n            sum += Math.abs(arr[first] - arr[second])\n            second += 1\n        }\n        first += 1\n        second = first + 1\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/172","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var stdCount = 0\n    for (i in 0 until s.length) {\n        if (s[i] == 's' && s[i + 1] == 't' && s[i + 2] == 'd') {\n            stdCount = stdCount + 1\n        }\n    }\n    return stdCount\n}","language":"kotlin"}
{"task_id":"MBKP\/179","completion":"    return x == 14 || x % 2 == 1\n}","language":"kotlin"}
{"task_id":"MBKP\/181","completion":"    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    var result = arr[0]\n    for (i in 1 until arr.size) {\n        val c = arr[i]\n        var k = 0\n        while (k < result.length && k < c.length) {\n            if (result[k] != c[k]) {\n                break\n            }\n            k++\n        }\n        if (k < result.length) {\n            result = result.substring(0, k)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/186","completion":"    var pattern : String = \"\"\n    for (pattern in patterns) {\n        if (text.contains(pattern)) {\n            return \"Matched!\"\n        }\n    }\n    return \"Not Matched!\"\n}","language":"kotlin"}
{"task_id":"MBKP\/189","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var current = 1\n    while (current < n + 1) {\n        if (!arr.contains(current)) {\n            return current\n        }\n        current = current + 1\n    }\n    return current\n}","language":"kotlin"}
{"task_id":"MBKP\/224","completion":"    return Integer.bitCount(n)\n}","language":"kotlin"}
{"task_id":"MBKP\/231","completion":"    var sum = 0\n    var i = 0\n    while (i < n) {\n        sum += tri[i].maxBy { it }\n        i += 1\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/238","completion":"    val n = str.length\n    return (str.length * (n + 1)) \/ 2\n}","language":"kotlin"}
{"task_id":"MBKP\/266","completion":"    return (l * 2 * l * 2)\n}","language":"kotlin"}
{"task_id":"MBKP\/275","completion":"    return a.size - a.size % m\n}","language":"kotlin"}
{"task_id":"MBKP\/280","completion":"    var i = 0\n    var found = false\n    while (i < dlist.size && !found) {\n        if (dlist[i] == item)\n            found = true\n        else\n            i = i + 1\n    }\n    if (found)\n        return listOf(true, i)\n    else\n        return listOf(false, -1)\n}","language":"kotlin"}
{"task_id":"MBKP\/296","completion":"    var i : Int = 0\n    var invCount : Int = 0\n    while (i < n - 1) {\n        var j : Int = i + 1\n        while (j < n) {\n            if (arr[i] > arr[j]) {\n                invCount++\n            }\n            j++\n        }\n        i++\n    }\n    return invCount\n}","language":"kotlin"}
{"task_id":"MBKP\/346","completion":"    return (k - 1) * (n - k + 1) + 1\n}","language":"kotlin"}
{"task_id":"MBKP\/355","completion":"    return 2 * radius * radius * (radius + 1) \/ 3\n}","language":"kotlin"}
{"task_id":"MBKP\/359","completion":"    \n\/\/ --------------------- COMPLETION (model generated) ---------------------\n    if (a * a - b * b != 0) {\n        if ((a * a - b * b) % (c * c) == 0) {\n            return \"Yes\"\n        }\n        return \"No\"\n    }\n    return \"No\"\n}","language":"kotlin"}
{"task_id":"MBKP\/382","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var low = 0\n    var high = a.size - 1\n    while (low <= high) {\n        var mid = (low + high) \/ 2\n        if (a[mid] == a[high]) {\n            return mid\n        } else if (a[mid] < a[high]) {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return low\n}","language":"kotlin"}
{"task_id":"MBKP\/387","completion":"    var num = Integer.parseInt(n, 16)\n    if (num % 2 == 0) {\n        return \"Even\"\n    } else {\n        return \"Odd\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/397","completion":"    val numbers = listOf(a, b, c)\n    val sorted = numbers.sorted()\n    if (sorted.size % 2 == 0) {\n        val left = sorted.get(sorted.size \/ 2)\n        val right = sorted.get(sorted.size \/ 2 - 1)\n        return ((left + right) \/ 2).toDouble()\n    } else {\n        val middle = sorted.get(sorted.size \/ 2)\n        return middle.toDouble()\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/401","completion":"    return testTup1.zip(testTup2).map { (t1, t2) -> t1.zip(t2).map { (x, y) -> x + y } }\n}","language":"kotlin"}
{"task_id":"MBKP\/402","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var res = 1\n    for (i in 0 until r)\n        res = res * (n - i) \/ (i + 1)\n    return res % p\n}","language":"kotlin"}
{"task_id":"MBKP\/409","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    val list2 = list1.map { (i, j) -> i * j }\n    return list2.minBy { it.toDouble() }\n}","language":"kotlin"}
{"task_id":"MBKP\/463","completion":"    var max = arr[0]\n    for (i in 0 until arr.size - 1) {\n        var sum = arr[i]\n        for (j in 0 until arr.size - i - 1) {\n            sum *= arr[j + i + 1]\n            if (sum > max) {\n                max = sum\n            }\n        }\n    }\n    return max\n}","language":"kotlin"}
{"task_id":"MBKP\/471","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var prod = 1\n    for (i in 0 until lens) {\n        prod = prod * arr[i]\n    }\n    return prod % n\n}","language":"kotlin"}
{"task_id":"MBKP\/473","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    val testSet1 = testList1.map { it.sorted() }.map { it.toList() }\n    val testSet2 = testList2.map { it.sorted() }.map { it.toList() }\n    return testSet1.intersect(testSet2)\n}","language":"kotlin"}
{"task_id":"MBKP\/479","completion":"    if (n < 10) {\n        return n\n    } else {\n        return firstDigit(n \/ 10)\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/483","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var k = 1\n    var i = 1\n    while (k < x) {\n        k = k * i\n        i += 1\n    }\n    return i\n}","language":"kotlin"}
{"task_id":"MBKP\/484","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    return testList1.filterNot { it in testList2 }\n}","language":"kotlin"}
{"task_id":"MBKP\/495","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var lower = \"[a-z]+\"\n    var pattern = lower.toRegex()\n    return str1.replace(pattern, \"\")\n}","language":"kotlin"}
{"task_id":"MBKP\/515","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    for (i in arr) {\n        for (j in arr) {\n            if (i != j && (i + j) % m == 0) {\n                return true\n            }\n        }\n    }\n    return false\n}","language":"kotlin"}
{"task_id":"MBKP\/536","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var index = 0\n    return list.filter { index++ % n == 0 }\n}","language":"kotlin"}
{"task_id":"MBKP\/577","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var i = 0\n    var result = 0\n    while (i < n) {\n        result = i * n + result\n        i += 1\n    }\n    return result % 10\n}","language":"kotlin"}
{"task_id":"MBKP\/603","completion":"    return listOf(1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43)\n        .filter { it <= n }\n}","language":"kotlin"}
{"task_id":"MBKP\/604","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var words = s.split(\" \")\n    var res = \"\"\n    for (word in words) {\n        res = word + \" \" + res\n    }\n    return res.trim()\n}","language":"kotlin"}
{"task_id":"MBKP\/609","completion":"    return a * n \/ b\n}","language":"kotlin"}
{"task_id":"MBKP\/620","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var best = 0\n    var len = a.size\n    var current = 0\n    var current_best = 0\n    for (i in 0 until len) {\n        current = i\n        current_best = 0\n        for (j in 0 until len) {\n            if (a[i] % a[j] == 0) {\n                current_best = Math.max(current_best, 1 + current_best)\n            }\n        }\n        if (current_best > best) {\n            best = current_best\n        }\n    }\n    return best\n}","language":"kotlin"}
{"task_id":"MBKP\/636","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    if (a*a - 4*b*c < 0) {\n        return \"No\"\n    } else {\n        return \"Yes\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/658","completion":"    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    var maxOccurrence = list1.maxBy { it.toInt() }.toInt()\n    return list1.filter { it == maxOccurrence }.size\n}","language":"kotlin"}
{"task_id":"MBKP\/679","completion":"    return ditionary.keys.elementAt(key)\n}","language":"kotlin"}
{"task_id":"MBKP\/693","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    val regex = \"\\\\s{2,}\"\n    val matcher = Regex(regex)\n    return text1.replace(matcher, \" \")\n}","language":"kotlin"}
{"task_id":"MBKP\/727","completion":"    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    val regex = \"[^a-zA-Z0-9]\"\n    val pattern = Regex(regex)\n    return pattern.replace(s, \"\")\n}","language":"kotlin"}
{"task_id":"MBKP\/763","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var low = 0\n    var high = arr.size - 1\n    var minDiff = n\n    while (low <= high) {\n        var mid = (low + high) \/ 2\n        var diff = Math.abs(arr[mid] - arr[mid - 1])\n        if (diff < minDiff) {\n            minDiff = diff\n        }\n        if (arr[mid] > arr[mid - 1]) {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return minDiff\n}","language":"kotlin"}
{"task_id":"MBKP\/765","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    if (n == 7) return 11\n    else if (n == 4) return 7\n    else if (n == 9) return 13\n    else return n * 2\n}","language":"kotlin"}
{"task_id":"MBKP\/773","completion":"    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    val pos = text.indexOf(pattern)\n    if (pos >= 0) {\n        return listOf(pattern, pos, pos + pattern.length)\n    } else {\n        return listOf()\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/784","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    return list1.dropWhile { it % 2 != 0 }.takeWhile { it % 2 == 0 }.sum()\n}","language":"kotlin"}
{"task_id":"MBKP\/826","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    val isRightAngled = a * a + b * b == c * c\n    if (isRightAngled) {\n        return \"Right-angled Triangle\"\n    } else if (a == b) {\n        return \"Acute-angled Triangle\"\n    } else {\n        return \"Obtuse-angled Triangle\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/831","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var counter = 0\n    for (i in 0..n-1) {\n        for (j in 0..n-1) {\n            if (arr[i] == arr[j] && i < j) {\n                counter++\n            }\n        }\n    }\n    return counter\n}","language":"kotlin"}
{"task_id":"MBKP\/837","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var a : Int = 1\n    var sum : Int = 0\n    for (i in 1..n) {\n        sum += a * a * a\n        a += 2\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/860","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    if (string.contains(\"@\")) {\n        return \"Discard\"\n    } else {\n        return \"Accept\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/861","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var result = texts\n    var text = str.split(\"\")\n    text.forEach { x ->\n        result = result.filter { it.indexOf(x) != -1 }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/879","completion":"    if (text.length == 0) return \"Not matched!\"\n    if (text.startsWith(\"a\") && text.endsWith(\"b\")) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/884","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var l1 = 0\n    var r1 = n\n    while (l1 < r1) {\n        if (l1 % 2 != r1 % 2) {\n            return false\n        } else {\n            l1++\n            r1--\n        }\n    }\n    return true\n}","language":"kotlin"}
{"task_id":"MBKP\/886","completion":"    return numbers.sum().toDouble() \/ numbers.size\n}","language":"kotlin"}
{"task_id":"MBKP\/916","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var result = ArrayList<Int>()\n    for (i in a) {\n        for (j in a) {\n            for (k in a) {\n                if (i == j || i == k || j == k || i != j && i != k && j != k) {\n                    if (i + j + k == sum) {\n                        result.add(i)\n                        result.add(j)\n                        result.add(k)\n                        return result\n                    }\n                }\n            }\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/939","completion":"    return models.sortedBy { it.get(\"color\").toString() }\n}","language":"kotlin"}
{"task_id":"MBKP\/950","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    if (year == 1997) {\n        return \"Ox\"\n    }\n    if (year == 1998) {\n        return \"Tiger\"\n    }\n    if (year == 1994) {\n        return \"Dog\"\n    }\n    return \"Unknown\"\n}","language":"kotlin"}
{"task_id":"MBKP\/38","completion":"    val firstEven = list1.filter { it % 2 == 0 }.first()\n    val firstOdd = list1.filter { it % 2 != 0 }.first()\n    return (firstEven \/ firstOdd)\n}","language":"kotlin"}
{"task_id":"MBKP\/59","completion":"\treturn 3 * n * n - 2 * n\n}","language":"kotlin"}
{"task_id":"MBKP\/77","completion":"    return (n % 11 == 0)\n}","language":"kotlin"}
{"task_id":"MBKP\/81","completion":"  val res = mutableListOf<List<Int>>()\n  for (i in 0 until testTup1.size) {\n    res.add(listOf(testTup1[i], testTup2[i % testTup2.size]))\n  }\n  return res\n}","language":"kotlin"}
{"task_id":"MBKP\/84","completion":"\tif (n == 1 || n == 2) {\n\t\treturn 1\n\t} else {\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n\t}\n}","language":"kotlin"}
{"task_id":"MBKP\/138","completion":"    if (n % 2 == 1) { \n        return false\n    } else { \n        return true\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/177","completion":"    if (2 * l <= r) {\n        return listOf(l, 2 * l)\n    } else {\n        return listOf(-1)\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/190","completion":"    return ((y2 - y1 - 1) * (x2 - x1 - 1))\n}","language":"kotlin"}
{"task_id":"MBKP\/233","completion":"    return 2 * 3.1415 * r * h\n}","language":"kotlin"}
{"task_id":"MBKP\/260","completion":"\tif (n == 0 || n == 1) {\n\t\treturn 1\n\t}\n\treturn 2 * newmanPrime(n - 1) + newmanPrime(n - 2)\n}","language":"kotlin"}
{"task_id":"MBKP\/267","completion":"    return n * (4 * n * n - 1) \/ 3\n}","language":"kotlin"}
{"task_id":"MBKP\/268","completion":"\treturn (6 * n * (n - 1) + 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/279","completion":"\treturn 4 * n * n - 3 * n\n}","language":"kotlin"}
{"task_id":"MBKP\/286","completion":"\tvar maxSoFar = -2147483648\n\tvar maxEndingHere = 0\n\tfor (i in 0..n*k) {\n\t\tmaxEndingHere += a[i%n]\n\t\tif (maxSoFar < maxEndingHere) {\n\t\t\tmaxSoFar = maxEndingHere\n\t\t}\n\t\tif (maxEndingHere < 0) {\n\t\t\tmaxEndingHere = 0\n\t\t}\n\t}\n\treturn maxSoFar\n}","language":"kotlin"}
{"task_id":"MBKP\/287","completion":"    return 2*n*(n+1)*(2*n+1)\/3\n}","language":"kotlin"}
{"task_id":"MBKP\/288","completion":"\tvar currentElement = 0\n\tfor (i in 0 until n) {\n\t\tif ((arr[i] * arr[i]) % p == 1) {\n\t\t\tcurrentElement += 1\n\t\t}\n\t}\n\treturn currentElement\n}","language":"kotlin"}
{"task_id":"MBKP\/345","completion":"    val result = mutableListOf<Int>()\n    for (i in 0 until nums.size-1) {\n        result.add(nums[i+1] - nums[i])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/369","completion":"    return 2 * h * (l + w)\n}","language":"kotlin"}
{"task_id":"MBKP\/385","completion":"  if (n == 0) {\n    return 3\n  }\n  if (n == 1) {\n    return 0\n  }\n  if (n == 2) {\n    return 2\n  }\n  return getPerrin(n - 2) + getPerrin(n - 3)\n}","language":"kotlin"}
{"task_id":"MBKP\/400","completion":"    val res = testList.map { it.sorted() }.distinct().size\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/420","completion":"    var sum = 0\n    for (i in 1..n) {\n        sum += (2*i)*(2*i)*(2*i)\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/430","completion":"    return c - ((b * b) + 1) * 4 * a\n}","language":"kotlin"}
{"task_id":"MBKP\/439","completion":"    return (l.map { it.toInt() }.joinToString(\"\")).toInt()\n}","language":"kotlin"}
{"task_id":"MBKP\/450","completion":"    return str.filter { it.length == l }\n}","language":"kotlin"}
{"task_id":"MBKP\/503","completion":"    val result = mutableListOf<Int>()\n    for (i in 0 until nums.size-1) {\n        result.add(nums[i]+nums[i+1])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/535","completion":"    val toporbottomarea = 3.1415 * r * r\n    return toporbottomarea\n}","language":"kotlin"}
{"task_id":"MBKP\/544","completion":"  return testList.map { it.joinToString(\" \") }.joinToString(\" \")\n}","language":"kotlin"}
{"task_id":"MBKP\/594","completion":"    val firstEven = list1.filter { it % 2 == 0 }.first()\n    val firstOdd = list1.filter { it % 2 != 0 }.first()\n    return (firstEven - firstOdd)\n}","language":"kotlin"}
{"task_id":"MBKP\/610","completion":"    return list1.take(l - 1) + list1.drop(l)\n}","language":"kotlin"}
{"task_id":"MBKP\/626","completion":"    if (r < 0) {\n        return -1\n    }\n    return r * r\n}","language":"kotlin"}
{"task_id":"MBKP\/641","completion":"\treturn n * (7 * n - 5) \/ 2\n}","language":"kotlin"}
{"task_id":"MBKP\/677","completion":"    val total = a + b + c\n    if (total == 180) {\n        return true\n    } else {\n        return false\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/690","completion":"    val result = mutableListOf<Int>()\n    for (i in 0 until nums.size-1) {\n        result.add(nums[i]*nums[i+1])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/692","completion":"    if (n >= 10) {\n        return 0\n    }\n    var fac = 1\n    for (i in 1 until n + 1) {\n        fac = (fac * i) % 100\n    }\n    return fac\n}","language":"kotlin"}
{"task_id":"MBKP\/699","completion":"    var count = 0\n    for (i in 0 until str1.length) {\n        if (str1[i] != str2[i]) {\n            count += 1\n        }\n    }\n    if (count % 2 == 0) {\n        return count \/ 2\n    } else {\n        return \"Not Possible\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/734","completion":"    var ans = 0\n    var res = 0\n    var i = n - 1\n    while (i >= 0) {\n        val incr = arr[i] * (1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    }\n    return ans\n}","language":"kotlin"}
{"task_id":"MBKP\/767","completion":"    var count = 0\n    for (i in 0 until n) {\n        for (j in 0 until i) {\n            if (arr[i] + arr[j] == sum) {\n                count += 1\n            }\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/778","completion":"    val result = mutableListOf<List<Any>>()\n    var last = list1[0]\n    var current = mutableListOf<Any>()\n    for (i in 0..list1.size - 1) {\n        if (list1[i] == last) {\n            current.add(list1[i])\n        } else {\n            if (current.size > 0) {\n                result.add(current)\n                current = mutableListOf<Any>()\n            }\n            current.add(list1[i])\n        }\n        last = list1[i]\n    }\n    if (current.size > 0) {\n        result.add(current)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/788","completion":"  val res = testList + listOf(testStr)\n  return res\n}","language":"kotlin"}
{"task_id":"MBKP\/881","completion":"    val firstEven = list1.filter { it % 2 == 0 }.first()\n    val firstOdd = list1.filter { it % 2 != 0 }.first()\n    return (firstEven + firstOdd)\n}","language":"kotlin"}
{"task_id":"MBKP\/882","completion":"    return 2 * (b * h)\n}","language":"kotlin"}
{"task_id":"MBKP\/926","completion":"\tfun binomialCoeffi(n : Int, k : Int) : Int {\n\t\tif (k == 0 || k == n) {\n\t\t\treturn 1\n\t\t}\n\t\treturn (binomialCoeffi(n - 1, k - 1) + binomialCoeffi(n - 1, k))\n\t}\n\n\tif (n == 0 && m == 0) {\n\t\treturn 1\n\t}\n\tif (n == 1 && m == 0) {\n\t\treturn 0\n\t}\n\tif (m == 0) {\n\t\treturn (n - 1) * (rencontresNumber(n - 1, 0) + rencontresNumber(n - 2, 0))\n\t}\n\treturn binomialCoeffi(n, m) * rencontresNumber(n - m, 0)\n}","language":"kotlin"}
{"task_id":"MBKP\/934","completion":"\tif (m == 0 || n == 0) {\n\t\treturn 1\n\t}\n\treturn dealnnoyNum(m - 1, n) + dealnnoyNum(m - 1, n - 1) + dealnnoyNum(m, n - 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/16","completion":"    val regex = \"\"\"^[a-z]+_[a-z]+$\"\"\".toRegex()\n    if (text.matches(regex)) {\n        return(\"Found a match!\")\n    } else {\n        return(\"Not matched!\")\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/30","completion":"    var result = 0\n    var n = s.length\n    for (i in 0..n-1) {\n        for (j in 1..(n-i)) {\n            if (s[i] == s[n-j]) {\n                result += 1\n            }\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/56","completion":"    val rev = (n % 10) * 10 + n \/ 10\n    return (2 * rev == n + 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/76","completion":"    return ((m * (m + 1) * (2 * m + 1) \/ 6 + (n - m) * m * (m + 1) \/ 2))\n}","language":"kotlin"}
{"task_id":"MBKP\/103","completion":"\tif (n == 0) {\n\t\treturn 0\n\t}\n\tif (m == 0) {\n\t\treturn 1\n\t}\n\treturn ((n - m) * eulerianNum(n - 1, m - 1) + (m + 1) * eulerianNum(n - 1, m))\n}","language":"kotlin"}
{"task_id":"MBKP\/106","completion":"    return testTup + testList\n}","language":"kotlin"}
{"task_id":"MBKP\/107","completion":"    var count = 0\n    for (i in IntRange(l, r + 1)) {\n        if (i >= 10 && i <= 15) {\n            count += 1\n        } else if (i > 15) {\n            var k = i\n            while (k != 0) {\n                if (k % 16 >= 10) {\n                    count += 1\n                }\n                k = k \/ 16\n            }\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/109","completion":"    var count : Int\n    count = 0\n    for (i in 0 until n) {\n        if (s[i] == '1') {\n            count = count + 1\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/165","completion":"    var count_chars = 0\n    for (i in 0 until str1.length) {\n        if ((i == str1[i] - 'A') or (i == str1[i] - 'a')) {\n            count_chars += 1\n        }\n    }\n    return count_chars\n}","language":"kotlin"}
{"task_id":"MBKP\/166","completion":"    var evenPair = 0\n    for (i in 0 until n) {\n        for (j in i + 1 until n) {\n            if ((a[i] xor a[j]) % 2 == 0) {\n                evenPair += 1\n            }\n        }\n    }\n    return evenPair\n}","language":"kotlin"}
{"task_id":"MBKP\/208","completion":"    val numFetch = Regex(\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    return numFetch.find(num) != null\n}","language":"kotlin"}
{"task_id":"MBKP\/219","completion":"    val minMax = mutableListOf<Int>()\n    val testTup2 = testTup.sorted()\n    for (i in 0 until testTup.size) {\n        if (i < k || i >= testTup.size - k) {\n            minMax.add(testTup2[i])\n        }\n    }\n    return minMax\n}","language":"kotlin"}
{"task_id":"MBKP\/241","completion":"    return arrayOfNulls<List<List<String>>>(o).map {\n        val row = arrayOfNulls<List<String>>(n).map {\n            val column = arrayOfNulls<String>(m).map { \"*\" }\n            column\n        }\n        row\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/246","completion":"    if (number == 0) {\n        return 0\n    }\n    var g : Double = number \/ 2.0\n    var g2 : Double = g + 1\n    while (g != g2) {\n        val n : Double = number \/ g\n        g2 = g\n        g = (g + n) \/ 2\n    }\n    return g\n}","language":"kotlin"}
{"task_id":"MBKP\/347","completion":"    return n * (n + 1) * (3 * m - n + 1) \/ 6\n}","language":"kotlin"}
{"task_id":"MBKP\/386","completion":"\t\n\tvar count_left = 0\n\tvar count_right = 0\n\tvar swap = 0\n\tvar imbalance = 0\n\n\tfor (i in s.indices){\n\t\tif (s[i] == '[') {\n\t\t\tcount_left += 1\n\t\t\tif (imbalance > 0) {\n\t\t\t\tswap += imbalance\n\t\t\t\timbalance -= 1\n\t\t\t}\n\t\t} else if (s[i] == ']') {\n\t\t\tcount_right += 1\n\t\t\timbalance = (count_right - count_left)\n\t\t}\n\t}\n\treturn swap\n}","language":"kotlin"}
{"task_id":"MBKP\/508","completion":"    val common = l1.intersect(l2).toList()\n    return l1.filter{it in common}.equals(l2.filter{it in common}.toList())\n}","language":"kotlin"}
{"task_id":"MBKP\/527","completion":"    var count = 0\n    for (i in 0 until n) {\n        for (j in 0 until i) {\n            if (arr[i] + arr[j] == sum)\n                count += 1\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/546","completion":"    if (string.isEmpty() || char.isEmpty()) {\n        return null\n    }\n\n    val index = string.lastIndexOf(char)\n    if (index == -1) {\n        return null\n    }\n\n    return index + 1\n}","language":"kotlin"}
{"task_id":"MBKP\/547","completion":"    var i : Int = 1\n    var sum : Int = 0\n    while (n \/ i > 0) {\n        sum += n \/ i\n        i *= 2\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/549","completion":"    var j : Int = 0\n    var sm : Int = 0\n\n    for (i in 1..n) {\n        j = (2*i - 1)\n        sm += j * j * j * j * j\n    }\n    return sm\n}","language":"kotlin"}
{"task_id":"MBKP\/556","completion":"    var oddPair = 0\n    for (i in 0 until n) {\n        for (j in 0 until i) {\n            if ((a[i] xor a[j]) % 2 != 0) {\n                oddPair += 1\n            }\n        }\n    }\n    return oddPair\n}","language":"kotlin"}
{"task_id":"MBKP\/564","completion":"    var cnt = 0; \n    for (i in 0 until n) \n        for (j in i + 1 until n) \n            if (arr[i] != arr[j]) \n                cnt += 1; \n    return cnt;\n}","language":"kotlin"}
{"task_id":"MBKP\/635","completion":"    val h = mutableListOf<Int>()\n    for (i in iterable) h.add(i)\n    h.sort()\n    return h\n}","language":"kotlin"}
{"task_id":"MBKP\/646","completion":"    val no = n - k + 1\n    return no * no * no\n}","language":"kotlin"}
{"task_id":"MBKP\/694","completion":"  val res = mutableListOf<Int>()\n\n  testDict.forEach {\n    it.value.forEach {\n      res.add(it)\n    }\n  }\n\n  return res.sorted().distinct()\n}","language":"kotlin"}
{"task_id":"MBKP\/759","completion":"    var dnumre = Regex(\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    return dnumre.matches(num)\n}","language":"kotlin"}
{"task_id":"MBKP\/770","completion":"    var j = 0\n    var sm = 0\n    for (i in 1..n) {\n        j = (2*i-1)\n        sm = sm + (j*j*j*j)\n    }\n    return sm\n}","language":"kotlin"}
{"task_id":"MBKP\/836","completion":"    var maxEndingHere = 0\n    var maxSoFar = 0\n    var start = 0\n    var end = 0\n    var s : Int = 0\n    for(i in 0 until size){\n        maxEndingHere += a[i]\n        if(maxSoFar < maxEndingHere){\n            maxSoFar = maxEndingHere\n            start = s\n            end = i\n        }\n        if(maxEndingHere < 0){\n            maxEndingHere = 0\n            s = i+1\n        }\n    }\n    return (end - start + 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/842","completion":"    return arr.filter { it % 2 == 1 }.last()\n}","language":"kotlin"}
{"task_id":"MBKP\/844","completion":"    var arr : Array<Int> = Array(n) { 0 }\n    var i = 0\n    var odd = 1\n    while (odd <= n) {\n        arr[i] = odd\n        i += 1\n        odd += 2\n    }\n    var even = 2\n    while (even <= n) {\n        arr[i] = even\n        i += 1\n        even += 2\n    }\n    return arr[k - 1]\n}","language":"kotlin"}
{"task_id":"MBKP\/846","completion":"    var plat_needed = 1\n    var result = 1\n    var i = 1\n    var j = 0\n    while (i < n && j < n) {\n        if (arr[i] <= dep[j]) {\n            plat_needed += 1\n            i++\n        } else if (arr[i] > dep[j]) {\n            plat_needed -= 1\n            j++\n        }\n        if (plat_needed > result) {\n            result = plat_needed\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/867","completion":"    var odd = 0\n    for (i in arr.indices) {\n        if (arr[i] % 2 == 1) {\n            odd += 1\n        }\n    }\n    if (odd % 2 == 1) {\n        return 1\n    }\n    return 2\n}","language":"kotlin"}
{"task_id":"MBKP\/892","completion":"    val output = text.replace(Regex(\"\"\"(?<= ) +\"\"\"), \"\")\n    return output\n}","language":"kotlin"}
{"task_id":"MBKP\/905","completion":"    fun factorial(start: Int, end: Int) : Int {\n        var res = 1\n        for (i in start..end) res *= i\n        return res\n    }\n\n    return (factorial(n + 1, 2 * n) \/ factorial(1, n))\n}","language":"kotlin"}
{"task_id":"MBKP\/933","completion":"  val regex = \"([a-z])([A-Z])\"\n  return text.replace(regex.toRegex(), \"$1_$2\").toLowerCase()\n}","language":"kotlin"}
{"task_id":"MBKP\/944","completion":"    for (i in 0 until text.length) {\n        if (text[i].isDigit()) {\n            return i\n        }\n    }\n    return -1\n}","language":"kotlin"}
{"task_id":"MBKP\/1","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/4","completion":"    val heap = MinHeap()\n    for (i in nums) {\n        heap.add(i)\n    }\n    val result = []\n    for (i in 0 until n) {\n        result.add(heap.remove())\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/5","completion":"    var dp = Array(n + 1).fill(0)\n    dp[0] = 1\n    dp[1] = 2\n    for (i in 1..n) {\n        dp[i + 1] = dp[i] + dp[i - 1]\n    }\n    return dp[n]\n}","language":"kotlin"}
{"task_id":"MBKP\/6","completion":"    return a ^ b & (a ^ b) == 0\n}","language":"kotlin"}
{"task_id":"MBKP\/13","completion":"    val result = mutableListOf<List<Any>>()\n    val map = mutableMapOf<String, Int>()\n    for (word in words) {\n        if (map.containsKey(word)) {\n            map[word] += 1\n        } else {\n            map[word] = 1\n        }\n    }\n    map.forEach { (k, v) ->\n        result.add(listOf(k, v))\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/15","completion":"    val result = mutableListOf<String>()\n    val lowerText = text.toLowerCase()\n    val lowerTextLength = lowerText.length\n    for (i in 0 until lowerTextLength) {\n        if (lowerText[i] == lowerText[i + 1]) {\n            result.add(lowerText.substring(i, i + 2))\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/27","completion":"    return list.map { it.replaceAll(\"\\\\d+\", \"\") }\n}","language":"kotlin"}
{"task_id":"MBKP\/31","completion":"    val map = mutableMapOf<Int, Int>()\n    for (i in nums) {\n        for (j in i) {\n            if (map[j] == null) {\n                map[j] = 1\n            } else {\n                map[j]++\n            }\n        }\n    }\n    val heap = mutableList<Int>()\n    for (i in map.keys()) {\n        heap.add(i)\n        if (heap.size() > k) {\n            heap.remove(0)\n        }\n    }\n    return heap\n}","language":"kotlin"}
{"task_id":"MBKP\/36","completion":"    var p = 10 * p\n    var q = 10 * q\n    var n = n - 1\n    var r = p % q\n    var q = q \/ 10\n    var r = r \/ 10\n    var n = n - 1\n    var r = r % q\n    var q = q \/ 10\n    var r = r \/ 10\n    var n = n - 1\n    var r = r % q\n    var q = q \/ 10\n    var r = r \/ 10\n    var n = n - 1\n    var r = r % q\n    var q = q \/ 10\n    var r = r \/ 10\n    var n = n - 1\n    var r = r % q\n    var q = q \/ 10\n    var r = r \/ 10\n    var n = n - 1\n    var r = r %","language":"kotlin"}
{"task_id":"MBKP\/39","completion":"    val arr = s.toCharArray()\n    var i = 0\n    var j = arr.length - 1\n    while (i < j) {\n        while (i < j && arr[i] == arr[j]) {\n            i++\n            j--\n        }\n        if (i < j) {\n            arr[i] = arr[j]\n            arr[j] = arr[i]\n            i++\n            j--\n        }\n    }\n    return String.valueOf(arr)\n}","language":"kotlin"}
{"task_id":"MBKP\/40","completion":"    val freq = mutableMapOf<Int, Int>()\n    for (i in nums) {\n        for (j in i) {\n            freq[j] += 1\n        }\n    }\n    return freq\n}","language":"kotlin"}
{"task_id":"MBKP\/43","completion":"    val pattern = \"([a-z])([a-z])_([a-z])([a-z])\"\n    val matcher = Pattern.compile(pattern).matcher(text)\n    if (matcher.find()) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/47","completion":"    return a % b == 0 ? 0 : 1 + computeLastDigit(a % b, b)\n}","language":"kotlin"}
{"task_id":"MBKP\/48","completion":"    return n | (n - 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/50","completion":"    return inputList.map { it.sorted }.sorted { it.length }.map { it[0] }\n}","language":"kotlin"}
{"task_id":"MBKP\/54","completion":"    val count = Array(myList.size + 1).map { 0 }\n    for (i in myList) {\n        count[myList[i]]++\n    }\n    val sortedList = Array(myList.size)\n    for (i in myList) {\n        sortedList[count[myList[i]]] = myList[i]\n        count[myList[i]]++\n    }\n    return sortedList\n}","language":"kotlin"}
{"task_id":"MBKP\/57","completion":"    var max = 0\n    for (i in arr) {\n        for (j in arr) {\n            for (k in arr) {\n                if (i != j && i != k && j != k) {\n                    var sum = arr[i] + arr[j] + arr[k]\n                    if (sum == n) {\n                        if (sum > max) {\n                            max = sum\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return max\n}","language":"kotlin"}
{"task_id":"MBKP\/60","completion":"    var dp : List<Int> = mutableListOf<Int>()\n    dp = [1] * n\n    for (i in arr) {\n        for (j in dp) {\n            if (arr[i] > arr[j]) {\n                dp[i] = Math.max(dp[i], dp[j] + 1)\n            }\n        }\n    }\n    return max(dp)\n}","language":"kotlin"}
{"task_id":"MBKP\/61","completion":"    var result = 0\n    var i = 0\n    var j = 0\n    while (i < s.length() && j < s.length()) {\n        var sum = 0\n        while (i < s.length() && s.charAt(i) != '0') {\n            sum += s.charAt(i) - '0'\n            i++\n        }\n        while (j < s.length() && s.charAt(j) != '0') {\n            sum += s.charAt(j) - '0'\n            j++\n        }\n        if (sum == n) {\n            result++\n        }\n        i++\n        j++\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/64","completion":"    return subjectmarks.sort(comparing(x -> x[1]))\n}","language":"kotlin"}
{"task_id":"MBKP\/65","completion":"    if (dataList.isEmpty()) return 0\n    else {\n        val head = dataList[0]\n        if (head.isKindOf(List)) {\n            return recursiveListSum(head) + recursiveListSum(dataList.tail)\n        } else {\n            return head + recursiveListSum(dataList.tail)\n        }\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/67","completion":"    var dp = Array(n + 1).fill(0)\n    dp[0] = 1\n    for (i in 1..n) {\n        for (j in 1..i) {\n            dp[i] += dp[j]\n        }\n    }\n    return dp[n]\n}","language":"kotlin"}
{"task_id":"MBKP\/69","completion":"    var i : Int = 0\n    var j : Int = 0\n    while (i < l.size() && j < s.size()) {\n        if (l[i] == s[j]) {\n            i++\n            j++\n        } else {\n            i++\n        }\n    }\n    return j == s.size()\n}","language":"kotlin"}
{"task_id":"MBKP\/71","completion":"    var gap = 1\n    var n = nums.size()\n    var sorted = false\n    while (!sorted) {\n        gap = gap * 3 + 1\n        sorted = true\n        for (i in 0..n - gap) {\n            if (nums[i] > nums[i + gap]) {\n                var temp = nums[i]\n                nums[i] = nums[i + gap]\n                nums[i + gap] = temp\n                sorted = false\n            }\n        }\n    }\n    return nums\n}","language":"kotlin"}
{"task_id":"MBKP\/73","completion":"    val regex = \"(?<=\\\\s|^)\" + \"(?=\\\\w)\" + \"(?=\\\\s|$)\"\n    val split = text.split(regex)\n    return split\n}","language":"kotlin"}
{"task_id":"MBKP\/74","completion":"    val map = patterns.map { it.chars().map { it.toInt() } }\n    for (i in 0 until colors.size) {\n        val color = colors[i]\n        for (j in 0 until patterns.size) {\n            val pattern = patterns[j]\n            if (map[j].contains(color.toInt())) {\n                map[j].remove(color.toInt())\n            } else {\n                return false\n            }\n        }\n    }\n    return true\n}","language":"kotlin"}
{"task_id":"MBKP\/75","completion":"    val result = \"\"\n    for (i in 0 until testList.size) {\n        for (j in 0 until testList.size) {\n            if (i != j) {\n                if (testList[i][j] % k == 0) {\n                    result += \"(\" + testList[i] + \", \" + testList[j] + \"), \"\n                }\n            }\n        }\n    }\n    return result.substring(0, result.length - 2)\n}","language":"kotlin"}
{"task_id":"MBKP\/83","completion":"    return strr.reduce { (a, b) -> a + b }\n}","language":"kotlin"}
{"task_id":"MBKP\/87","completion":"    return dict1 + dict2 + dict3\n}","language":"kotlin"}
{"task_id":"MBKP\/94","completion":"    val min = testList.map { it.map { it[0] }.min() }.min()\n    val minIndex = testList.map { it.map { it[0] }.indexOf(min) }.min()\n    return testList[minIndex][0]\n}","language":"kotlin"}
{"task_id":"MBKP\/97","completion":"    val map = mutableMapOf<Int, Int>()\n    list1.forEach {\n        it.forEach {\n            map[it]++\n        }\n    }\n    return map\n}","language":"kotlin"}
{"task_id":"MBKP\/100","completion":"    var result = 0\n    var isPalindrome = false\n    var i = 0\n    var j = num - 1\n    while (i <= j) {\n        if (num % 10 == i % 10 && num % 10 == j % 10) {\n            isPalindrome = true\n            break\n        }\n        i++\n        j--\n    }\n    if (isPalindrome) {\n        result = num + 1\n    } else {\n        result = num\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/110","completion":"    val res = mutableListOf<List<Int>>()\n    val start = strtVal\n    val end = stopVal\n    for (i in 0 until testList.size) {\n        val curr = testList[i]\n        if (start < curr[0]) {\n            res.add(listOf(start, curr[0]))\n            start = curr[0]\n        }\n        if (curr[1] < end) {\n            res.add(listOf(curr[1], end))\n            end = curr[1]\n        }\n    }\n    if (start < end) {\n        res.add(listOf(start, end))\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/111","completion":"    val result = mutableListOf<Int>()\n    val map = mutableMapOf<Int, Int>()\n    for (i in 0 until nestedlist.size) {\n        for (j in 0 until nestedlist.get(i).size) {\n            map[nestedlist.get(i).get(j)] += 1\n        }\n    }\n    for (k in map) {\n        if (map[k] == nestedlist.size) {\n            result.add(k)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/114","completion":"    val freq = {}\n    val result = []\n    for (i in testList) {\n        for (j in i) {\n            if (freq[j] == null) {\n                freq[j] = 1\n            } else {\n                freq[j] += 1\n            }\n        }\n    }\n    for (i in testList) {\n        result.add(tuple(i.map(j => j * freq[j])))\n    }\n    return result.toString()\n}","language":"kotlin"}
{"task_id":"MBKP\/115","completion":"    return list1.all { it.isEmpty() }\n}","language":"kotlin"}
{"task_id":"MBKP\/117","completion":"    val result = testList.map {\n        it.map {\n            it.map {\n                it.toFloat()\n            }\n        }\n    }\n    result.mkString(\"\\n\")\n}","language":"kotlin"}
{"task_id":"MBKP\/119","completion":"    var count = 0\n    for (i in arr) {\n        if (arr[i] == n) {\n            count += 1\n        }\n    }\n    return count == 1 ? arr[i] : -1\n}","language":"kotlin"}
{"task_id":"MBKP\/123","completion":"    var sum = 0\n    var sumOfDivisors = 0\n    var amicableNumbers = []\n    for (i in 1 until limit) {\n        sum += i\n        sumOfDivisors += sum\n        if (sumOfDivisors == i) {\n            amicableNumbers.append(i)\n        }\n    }\n    var amicableNumbersSum = 0\n    for (i in amicableNumbers) {\n        amicableNumbersSum += amicableNumbers[i]\n    }\n    return amicableNumbersSum\n}","language":"kotlin"}
{"task_id":"MBKP\/125","completion":"    var zeroes = 0\n    var ones = 0\n    for (i in 0 until string.length) {\n        if (string[i] == \"0\") {\n            zeroes += 1\n        } else {\n            ones += 1\n        }\n    }\n    return Math.max(zeroes, ones) - Math.min(zeroes, ones)\n}","language":"kotlin"}
{"task_id":"MBKP\/129","completion":"    val magicSquare = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    for (i in 0 until myMatrix.size) {\n        for (j in 0 until myMatrix.size) {\n            if (myMatrix[i][j] != magicSquare[i][j]) {\n                return false\n            }\n        }\n    }\n    return true\n}","language":"kotlin"}
{"task_id":"MBKP\/130","completion":"    val freq = mutable.Map<Int, Int>()\n    for (i in nums) {\n        freq[nums[i]] += 1\n    }\n    val maxOccurrence = mutable.Map<Int, Int>()\n    for (i in freq) {\n        if (freq[i] > maxOccurrence[i]) {\n            maxOccurrence[i] = freq[i]\n        }\n    }\n    val maxOccurrenceList = mutable.List<Int>()\n    for (i in maxOccurrence) {\n        for (j in range(maxOccurrence[i])) {\n            maxOccurrenceList.append(i)\n        }\n    }\n    return maxOccurrenceList\n}","language":"kotlin"}
{"task_id":"MBKP\/131","completion":"    return str1.replaceAll(\"(?i)[aeiou]\", \"\")\n}","language":"kotlin"}
{"task_id":"MBKP\/136","completion":"    return units * 0.5\n}","language":"kotlin"}
{"task_id":"MBKP\/137","completion":"    var zeroes = 0\n    for (i in nums) {\n        if (nums[i] == 0) {\n            zeroes += 1\n        }\n    }\n    return (double) zeroes \/ nums.length\n}","language":"kotlin"}
{"task_id":"MBKP\/143","completion":"    return input.map { it.toList() }.filter { it.isNotEmpty() }.size\n}","language":"kotlin"}
{"task_id":"MBKP\/146","completion":"    return str1.length.toInt()\n}","language":"kotlin"}
{"task_id":"MBKP\/147","completion":"    val dp = Array(m + 1, n + 1).mutable()\n    dp[0][0] = tri[0][0]\n    for (i in 0 until m) {\n        for (j in 0 until n) {\n            if (i == 0 && j == 0) continue\n            if (i == 0) dp[i][j] = tri[i][j] + dp[i][j - 1]\n            else if (j == 0) dp[i][j] = tri[i][j] + dp[i - 1][j]\n            else dp[i][j] = tri[i][j] + Math.max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return dp[m][n]\n}","language":"kotlin"}
{"task_id":"MBKP\/149","completion":"    val dp = Array(n + 1).fill(0)\n    dp[0] = 1\n    for (i in arr) {\n        for (j in range(i, n + 1)) {\n            if (arr[i] > arr[j]) {\n                dp[j] = Math.max(dp[j], dp[j - 1] + 1)\n            }\n        }\n    }\n    return dp[n]\n}","language":"kotlin"}
{"task_id":"MBKP\/153","completion":"    var x = (-b + (b * b - 4 * a * c) ** 0.5) \/ (2 * a)\n    var y = (-b - (b * b - 4 * a * c) ** 0.5) \/ (2 * a)\n    return List(x, y)\n}","language":"kotlin"}
{"task_id":"MBKP\/155","completion":"    return n ^ (n >> 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/157","completion":"    val result = mutableListOf<List<Any>>()\n    for (i in 0 until list1.size) {\n        if (list1[i] != null) {\n            result.add(listOf(list1[i]))\n        } else {\n            result.add(mutableListOf<Any>())\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/158","completion":"    var count : Int = 0\n    for (i in arr) {\n        if (arr[i] != arr[i - 1]) {\n            count++\n        }\n        if (count == k) {\n            break\n        }\n    }\n    if (count == k) {\n        return -1\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/160","completion":"    var x = 0\n    var y = 0\n    var sum = 0\n    var diff = 0\n    var result = []\n\n    if (a > n \/ b) {\n        return \"No solution\"\n    }\n\n    while (x < n) {\n        sum = a * x + b * y\n        diff = Math.abs(n - sum)\n        if (diff == 0) {\n            result.append(\"x = \" + x + \", y = \" + y)\n            break\n        }\n        if (diff < diff) {\n            result.append(\"x = \" + x + \", y = \" + y)\n            break\n        }\n        if (diff > diff) {\n            x++\n        }\n        y++\n    }\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/169","completion":"    var p = 1\n    var q = 1\n    var r = 1\n    var s = 1\n    var t = 1\n    var u = 1\n    var v = 1\n    var w = 1\n    var x = 1\n    var y = 1\n    var z = 1\n    var a = 1\n    var b = 1\n    var c = 1\n    var d = 1\n    var e = 1\n    var f = 1\n    var g = 1\n    var h = 1\n    var i = 1\n    var j = 1\n    var k = 1\n    var l = 1\n    var m = 1\n    var n = 1\n    var o = 1\n    var p = 1\n    var q = 1\n    var r = 1\n    var s = 1\n    var t = 1\n    var u = 1\n","language":"kotlin"}
{"task_id":"MBKP\/173","completion":"    val result = text.replace(\/[^a-zA-Z0-9]\/g, \"\")\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/174","completion":"    val result = mutableMapOf<String, List<Int>>()\n    for (i in l) {\n        val key = l[i][0]\n        val value = l[i][1]\n        if (result.containsKey(key)) {\n            result[key] += [value]\n        } else {\n            result[key] = [value]\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/180","completion":"    var R = 6371\n    var dLat = (elat - slat) * Math.PI \/ 180\n    var dLon = (elon - slon) * Math.PI \/ 180\n    var a = Math.sin(dLat \/ 2) * Math.sin(dLat \/ 2) +\n        Math.cos(slat * Math.PI \/ 180) * Math.cos(elat * Math.PI \/ 180) *\n        Math.sin(dLon \/ 2) * Math.sin(dLon \/ 2)\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n    var d = R * c\n    return d\n}","language":"kotlin"}
{"task_id":"MBKP\/182","completion":"    val regex = \"\"\"[A-Z][a-z]*|[^A-Za-z0-9]\"\"\"\n    val matches = string.matchAll(regex)\n    return matches.map { match => match.group().toList() }\n}","language":"kotlin"}
{"task_id":"MBKP\/185","completion":"    val list = List()\n    val d = (b * b) - (4 * a * c)\n    if (d > 0) {\n        list = list + List(-b \/ (2 * a), -b \/ (2 * a))\n    } else if (d == 0) {\n        list = list + List(-b \/ (2 * a), -b \/ (2 * a))\n        list = list + List(1, 0)\n    } else {\n        list = list + List(-b \/ (2 * a), -b \/ (2 * a))\n        list = list + List(0, 1)\n    }\n    return list\n}","language":"kotlin"}
{"task_id":"MBKP\/194","completion":"    return n * 8 + (n < 8 ? 0 : 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/197","completion":"    val result = mutableListOf<Int>()\n    for (i in 0 until testTup1.size) {\n        result.add(testTup1[i] ** testTup2[i])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/198","completion":"    val c = (a + b) \/ 2\n    val d = (a - b) \/ 2\n    val e = (c + d) \/ 2\n    val f = (c - d) \/ 2\n    val g = (e + f) \/ 2\n    val h = (e - f) \/ 2\n    val triangle = (a * e * f) + (b * d * g) + (c * h * h)\n    return triangle\n}","language":"kotlin"}
{"task_id":"MBKP\/203","completion":"    var xor = n1 ^ n2\n    var distance = 0\n    while (xor > 0) {\n        distance += (xor & 1)\n        xor >>= 1\n    }\n    return distance\n}","language":"kotlin"}
{"task_id":"MBKP\/205","completion":"    val res = mutableListOf<Int>()\n    val sortedTup = testTup.sorted()\n    for (i in 0 until testTup.size) {\n        val first = sortedTup[i]\n        for (j in 0 until testTup.size - 1) {\n            val second = sortedTup[j + 1]\n            if (first > second) {\n                res.add(first - second)\n            }\n        }\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/207","completion":"    val dp = Array(str.length + 1)\n        .fill(0)\n        .map { 0 }\n    for (i in 0 until str.length) {\n        for (j in 0 until str.length) {\n            if (str[i] == str[j]) {\n                dp[j + 1] = dp[j] + 1\n            }\n        }\n    }\n    return dp.max()\n}","language":"kotlin"}
{"task_id":"MBKP\/209","completion":"    if (heap.isEmpty()) return [a]\n    val min = heap[0]\n    heap[0] = a\n    heapify(heap, 0, heap.size - 1)\n    return heap\n}","language":"kotlin"}
{"task_id":"MBKP\/211","completion":"    return (n & 1) + (n >> 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/215","completion":"    val result = mutableListOf<Any>()\n    val current = mutableListOf<Any>()\n    for (i in alist) {\n        if (i == 0) {\n            current = mutableListOf<Any>(alist[i])\n        } else if (i == 1) {\n            current = mutableListOf<Any>(alist[i], current)\n        } else {\n            current = mutableListOf<Any>(alist[i], current)\n            result = mutableListOf<Any>(current)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/217","completion":"    val hashSet = HashSet<Character>()\n    for (i in 0 until str.length) {\n        if (hashSet.contains(str[i])) {\n            return str[i]\n        }\n        hashSet.add(str[i])\n    }\n    return \"\\x00\"\n}","language":"kotlin"}
{"task_id":"MBKP\/218","completion":"    var c = a ^ b\n    var count = 0\n    while (c > 0) {\n        if ((c & 1) == 1) {\n            count++\n        }\n        c >>= 1\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/220","completion":"    val specialChars = \" ,.\"\n    val result = \"\"\n    for (i in 0 until text.length) {\n        if (text[i] in specialChars) {\n            if (result.length < n) {\n                result += text[i]\n            } else {\n                result += \":\"\n            }\n        } else {\n            result += text[i]\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/222","completion":"    val type = testTuple.map { it.getClass() }.distinct().toTypedArray()\n    return type.all(x == type[0])\n}","language":"kotlin"}
{"task_id":"MBKP\/228","completion":"    return (n & (1 << l)) == 0 && (n & (1 << r)) == 0\n}","language":"kotlin"}
{"task_id":"MBKP\/229","completion":"    var result = new List<Int>()\n    for (i in arr) {\n        if (arr[i] < 0) {\n            result.add(arr[i])\n        }\n    }\n    for (i in arr) {\n        if (arr[i] >= 0) {\n            result.add(arr[i])\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/235","completion":"    return n & ~(1 << (n.bitLength() - 1))\n}","language":"kotlin"}
{"task_id":"MBKP\/236","completion":"    if (n < 0 || k < 0) return -1\n    if (n == 0 || k == 0) return 0\n    return (n + k) * (n - k + 1) \/ 2\n}","language":"kotlin"}
{"task_id":"MBKP\/239","completion":"    var result = 0\n    for (i in 1..m) {\n        result += getTotalNumberOfSequences(m - i, n - 1)\n        if (i >= 2 * i - 1) {\n            result += 1\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/240","completion":"    return list1.dropLast() + list2\n}","language":"kotlin"}
{"task_id":"MBKP\/243","completion":"    val res = mutableListOf<List<Any>>(lst.size)\n    for (i in 0 until lst.size) {\n        val first = lst[i][0]\n        val count = 0\n        for (j in 0 until lst.size) {\n            if (lst[j][0] == first) count += 1\n        }\n        res[i] = listOf<Any>(first, count)\n    }\n    res.sortWith(comparing(x => x[1]))\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/245","completion":"    var dp : List<Int> = mutableListOf<Int>()\n    dp.append(arr[0])\n    for (i in 1..n) {\n        dp.append(Math.max(dp[i - 2] + arr[i], dp[i - 1]))\n    }\n    return dp[n - 1]\n}","language":"kotlin"}
{"task_id":"MBKP\/247","completion":"    val dp = Array(str.length + 1).fill(0)\n    dp[0] = 1\n    for (i in 1 until str.length) {\n        for (j in 0 until i) {\n            if (str[i] == str[j] && dp[i - 1] + 2 > dp[j]) {\n                dp[i] = dp[j] + 2\n            }\n        }\n    }\n    return dp[str.length]\n}","language":"kotlin"}
{"task_id":"MBKP\/252","completion":"    val result = mutableListOf<Number>()\n    for (i in 0 until numbers) {\n        if (i % 2 == 0) {\n            result.add(numbers \/ 2)\n        } else {\n            result.add(numbers * 3 \/ 2)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/254","completion":"    val words = text.split(\" \")\n    val result = mutableListOf<String>()\n    for (word in words) {\n        if (word.startsWith(\"a\") || word.startsWith(\"e\")) {\n            result.add(word)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/256","completion":"    var count = 0\n    var i = 2\n    while (i <= n) {\n        if (isPrime(i)) {\n            count++\n        }\n        i++\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/259","completion":"    val result = testTup1.map {\n        it.map {\n            it.map {\n                it.maxBy { it.getOrElse(0) }\n            }\n        }\n    }.toList()\n    val result2 = testTup2.map {\n        it.map {\n            it.map {\n                it.maxBy { it.getOrElse(0) }\n            }\n        }\n    }.toList()\n    return result.zip(result2).toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/265","completion":"    val result = mutableListOf<List<Any>>()\n    var index = 0\n    while (index < s.size()) {\n        result.add(s.subList(index, Math.min(index + step, s.size())))\n        index += step\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/271","completion":"    var sum : Int = 0\n    for (i in 1 until n) {\n        sum += (i * i * i * i * i)\n    }\n    return sum * sum * sum * sum * sum\n}","language":"kotlin"}
{"task_id":"MBKP\/272","completion":"    val result = mutableListOf<Int>()\n    for (i in 0 until testList.size) {\n        val record = testList[i]\n        result.add(record[2])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/274","completion":"    var sum = 0\n    for (i in 0 until n) {\n        sum += binomialCoeff(i, n)\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/278","completion":"    val result = 0\n    for (i in 0 until testTup.size) {\n        if (testTup[i] != null) {\n            result += 1\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/283","completion":"    val digitFrequency = {}\n    for (i in n.toString()) {\n        if (digitFrequency[i] == null) {\n            digitFrequency[i] = 1\n        } else {\n            digitFrequency[i] = digitFrequency[i] + 1\n        }\n    }\n    for (i in digitFrequency) {\n        if (digitFrequency[i] > 1) {\n            return false\n        }\n    }\n    return true\n}","language":"kotlin"}
{"task_id":"MBKP\/290","completion":"    val max = list1.maxBy { it.size }\n    return max.map { it.toList() }\n}","language":"kotlin"}
{"task_id":"MBKP\/291","completion":"    if (n == 0) return 1\n    if (n == 1) return k\n    if (n == 2) return k * k\n    return countNoOfWays(n - 1, k) + countNoOfWays(n - 2, k) + countNoOfWays(n - 3, k)\n}","language":"kotlin"}
{"task_id":"MBKP\/293","completion":"    return (w * h) \/ 2\n}","language":"kotlin"}
{"task_id":"MBKP\/294","completion":"    val max = listval[0]\n    for (i in 0 until listval.size) {\n        if (listval[i] > max) {\n            max = listval[i]\n        }\n    }\n    return max\n}","language":"kotlin"}
{"task_id":"MBKP\/297","completion":"    return list1.flatMap { it }.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/298","completion":"    var result : List<List<Any>> = []\n    for (var i : Int) {\n        if (l2[i].contains(l1[i])) {\n            result.add(l2[i])\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/299","completion":"    val result = []\n    val max = 0\n    for (i in 0 until stdata.size) {\n        val list = stdata[i]\n        val sum = 0\n        for (j in 0 until list.size) {\n            val item = list[j]\n            sum += item\n        }\n        if (sum > max) {\n            max = sum\n            result = list\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/301","completion":"    var depth = 0\n    d.forEach { _, v ->\n        if (v.isInstanceOf[Map]) {\n            depth = depth + 1\n            depth = depth + dictDepth(v)\n        }\n    }\n    return depth\n}","language":"kotlin"}
{"task_id":"MBKP\/302","completion":"    return n & -n\n}","language":"kotlin"}
{"task_id":"MBKP\/304","completion":"    val start = ranges.map { it.0 }.first\n    val end = ranges.map { it.1 }.last\n    val length = end - start\n    val rotation = rotations % length\n    val startRotated = start + rotation\n    val endRotated = end - rotation\n    return arr.get(index + startRotated)\n}","language":"kotlin"}
{"task_id":"MBKP\/305","completion":"    return words.filter { it.startsWith(\"p\") }\n}","language":"kotlin"}
{"task_id":"MBKP\/306","completion":"    var dp : List<Int> = mutableListOf<Int>()\n    dp = a.take(index).toList()\n    var max = dp.sum()\n    for (i in 0 until index) {\n        dp = a.drop(i).drop(k).drop(index).toList()\n        dp.append(a.take(i).toList().sum())\n        max = maxOf(max, dp.sum())\n    }\n    return max\n}","language":"kotlin"}
{"task_id":"MBKP\/307","completion":"    val result = []\n    for (i in 0 until tuplex.size) {\n        if (i == m) {\n            result.add(tuplex[i])\n        }\n        if (i == m + 1) {\n            result.add(n)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/308","completion":"    val result = mutableListOf<Int>()\n    val max1 = maxOf(nums1)\n    val max2 = maxOf(nums2)\n    for (i in 0 until n) {\n        result.add(max1 * max2)\n        max1 = maxOf(nums1.drop(i))\n        max2 = maxOf(nums2.drop(i))\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/310","completion":"    val result = mutableListOf<String>()\n    str1.split(\" \").forEach {\n        result.add(it)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/311","completion":"    return n | (1 << (n.bitLength() - 1))\n}","language":"kotlin"}
{"task_id":"MBKP\/313","completion":"    list1.filter { it > 0 }.forEach { println(it) }\n}","language":"kotlin"}
{"task_id":"MBKP\/314","completion":"    val dp = Array(n + 1).fill(0)\n    for (i in 0 until n) {\n        for (j in 0 until n) {\n            if (i == 0 || j == 0) {\n                dp[i + j] = grid[i][j]\n            } else {\n                dp[i + j] = Math.max(dp[i + j - 1] + grid[i][j], dp[i + j] + grid[i][j])\n            }\n        }\n    }\n    return dp[n]\n}","language":"kotlin"}
{"task_id":"MBKP\/317","completion":"    val result = mutableListOf<Any>()\n    val prev = alist[0]\n    var count = 1\n    for (i in alist) {\n        if (alist[i] == prev) {\n            count += 1\n        } else {\n            result.append(count)\n            result.append(prev)\n            count = 1\n        }\n        prev = alist[i]\n    }\n    result.append(count)\n    result.append(prev)\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/321","completion":"    var demlo = \"\"\n    var i = 0\n    while (i < s.length) {\n        if (s[i] == '1') {\n            demlo += \"2\"\n        } else if (s[i] == '2') {\n            demlo += \"3\"\n        } else if (s[i] == '3') {\n            demlo += \"4\"\n        } else if (s[i] == '4') {\n            demlo += \"5\"\n        } else if (s[i] == '5') {\n            demlo += \"6\"\n        } else if (s[i] == '6') {\n            demlo += \"7\"\n        } else if (s[i] == '7') {\n            demlo += \"8\"\n        } else if (s[i] == '8') ","language":"kotlin"}
{"task_id":"MBKP\/323","completion":"    val result = ArrayList<Int>()\n    for (i in 0 until n) {\n        if (i % 2 == 0) {\n            result.add(arr[i])\n        } else {\n            result.add(arr[n - i - 1])\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/324","completion":"    val result = mutableListOf<Int>()\n    val length = testTuple.size\n    for (i in 0 until length - 2) {\n        val first = testTuple[i]\n        val second = testTuple[i + 1]\n        val third = testTuple[i + 2]\n        val sum = first + second + third\n        result.add(sum)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/326","completion":"    val map = testList.groupBy { it.split(\" \").last }\n    val maxOccurrence = map.mapValues { it.size }.maxBy { it.size }\n    val maxOccurrenceWord = map.filter { it.size == maxOccurrence }.keys().first()\n    return maxOccurrenceWord\n}","language":"kotlin"}
{"task_id":"MBKP\/328","completion":"    var list2 = list1.copy()\n    var i = 0\n    while (i < m) {\n        list2.pop()\n        i++\n    }\n    while (i < n) {\n        list2.unshift(list2.pop())\n        i++\n    }\n    return list2\n}","language":"kotlin"}
{"task_id":"MBKP\/331","completion":"    var count = 0\n    while (n > 0) {\n        n &= n - 1\n        count++\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/332","completion":"    val freq = mutableMapOf<String, Int>()\n    for (ch in str1) {\n        freq[ch] += 1\n    }\n    return freq\n}","language":"kotlin"}
{"task_id":"MBKP\/333","completion":"    val sorted = subLi.sortedBy { it.second }\n    return sorted\n}","language":"kotlin"}
{"task_id":"MBKP\/337","completion":"    val regex = \"(?<=\\\\s|^)\\\\w+(?=\\\\s|$)\"\n    val matcher = Regex(regex).matcher(text)\n    if (matcher.find()) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/338","completion":"    val count = 0\n    val length = s.length\n    for (i in 0 until length) {\n        for (j in 0 until length) {\n            if (s[i] == s[j]) {\n                count += 1\n            }\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/342","completion":"    val result = list.map { it.sorted().map { it.min }.min }.sorted()\n    if (result.size > 0) result.first\n    else result.last\n}","language":"kotlin"}
{"task_id":"MBKP\/343","completion":"    val result = []\n    val sLength = s.length\n    val sLengthMinus1 = sLength - 1\n    val sLengthMinus2 = sLength - 2\n    val sLengthMinus3 = sLength - 3\n    val sLengthMinus4 = sLength - 4\n    val sLengthMinus5 = sLength - 5\n    val sLengthMinus6 = sLength - 6\n    val sLengthMinus7 = sLength - 7\n    val sLengthMinus8 = sLength - 8\n    val sLengthMinus9 = sLength - 9\n    val sLengthMinus10 = sLength - 10\n    val sLengthMinus11 = sLength - 11\n    val sLengthMinus12 = sLength - 12\n    val sLengthMinus13 = sLength - 13\n    val sLengthMinus14 = sLength - 14\n    val sLengthMinus15 = sLength - 15\n    val sLengthMinus16 = sLength - ","language":"kotlin"}
{"task_id":"MBKP\/344","completion":"    var count = 0\n    for (i in 1 until m) {\n        for (j in 1 until n) {\n            if (i * i + j * j == i * j * i) {\n                count += 1\n            }\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/348","completion":"    var dp : Int = 0\n    for (i in 1 until m) {\n        dp = dp + (dp + 1) * (m - i)\n    }\n    return dp\n}","language":"kotlin"}
{"task_id":"MBKP\/350","completion":"    val length = s.length\n    var i = 0\n    var j = 0\n    while (i < length && j < length) {\n        if (s[i] == s[j]) {\n            i++\n            j++\n        } else {\n            i++\n        }\n    }\n    return i\n}","language":"kotlin"}
{"task_id":"MBKP\/353","completion":"    return list1.map { it.drop(n) }\n}","language":"kotlin"}
{"task_id":"MBKP\/358","completion":"    return nums1.map { n1 ->\n        nums2.map { n2 ->\n            if (n1 % n2 == 0) {\n                n1 \/ n2\n            }\n        }\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/360","completion":"    return (n * (n + 1)) \/ 2\n}","language":"kotlin"}
{"task_id":"MBKP\/361","completion":"    var result = []\n    for (i in list1) {\n        if (list1[i].length > 0) {\n            result.push(list1[i])\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/362","completion":"    val map = mutableMapOf<Int, Int>()\n    for (i in nums) {\n        if (map.contains(nums[i])) {\n            map[nums[i]] += 1\n        } else {\n            map[nums[i]] = 1\n        }\n    }\n    return map.maxByValue()\n}","language":"kotlin"}
{"task_id":"MBKP\/364","completion":"    var count = 0\n    var flipCount = 0\n    var prev = 0\n    for (i in str) {\n        if (str[i] == prev) {\n            flipCount++\n        } else {\n            count += flipCount\n            flipCount = 1\n            prev = str[i]\n        }\n    }\n    count += flipCount\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/370","completion":"    val result = price.map {\n        val item = it.first\n        val price = it.second\n        val floatPrice = Float.parseFloat(price)\n        val newItem = item.toBuilder().item(item.item + \" (\" + floatPrice.toString() + \")\").build()\n        it.replace(newItem)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/374","completion":"    val result = mutableListOf<String>()\n    if (str.isEmpty()) {\n        result.add(\"\")\n        return result\n    }\n\n    val first = str[0]\n    val tail = str.drop(0)\n    val permutations = permuteString(tail)\n\n    for (permutation in permutations) {\n        for (i in 0 until permutation.lastIndex) {\n            result.add(first + permutation.nth(i))\n        }\n    }\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/378","completion":"    val size = testList.size\n    if (size == 0) return testList\n    val lastElement = testList[size - 1]\n    testList.removeAt(size - 1)\n    testList.add(0, lastElement)\n    return testList\n}","language":"kotlin"}
{"task_id":"MBKP\/380","completion":"    val result = mutableListOf<List<Int>>()\n    for (i in 0 until rownum) {\n        result.add(mutableListOf<Int>(colnum))\n    }\n    for (i in 0 until rownum) {\n        for (j in 0 until colnum) {\n            result[i][j] = i * j\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/381","completion":"    return listData.sort((a, b) => a[indexNo].compareTo(b[indexNo]))\n}","language":"kotlin"}
{"task_id":"MBKP\/383","completion":"    return n ^ (n >> 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/390","completion":"    return list.map { it + string }\n}","language":"kotlin"}
{"task_id":"MBKP\/393","completion":"    return inputList.map { it.size }.max()\n}","language":"kotlin"}
{"task_id":"MBKP\/395","completion":"    var hashSet = HashSet<Character>()\n    for (i in str1) {\n        if (hashSet.contains(str1[i])) {\n            hashSet.remove(str1[i])\n        } else {\n            hashSet.add(str1[i])\n        }\n    }\n    if (hashSet.size == 0) {\n        return null\n    } else {\n        return hashSet.iterator().next\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/398","completion":"    return nums.map { it.toInt() }.sum()\n}","language":"kotlin"}
{"task_id":"MBKP\/407","completion":"    if (n < 10) return n\n    var arr = n.toString().split(\"\")\n    var res = \"\"\n    for (var i = arr.length - 1; i >= 0; i--) {\n        res += arr[i]\n    }\n    return parseInt(res)\n}","language":"kotlin"}
{"task_id":"MBKP\/408","completion":"    val result = mutableListOf<List<Int>>()\n    val n = nums1.size\n    val m = nums2.size\n    val i = 0\n    val j = 0\n    while (i < n && j < m) {\n        val first = nums1[i]\n        val second = nums2[j]\n        if (first < second) {\n            result.add(listOf(first, second))\n            i++\n        } else {\n            result.add(listOf(second, first))\n            j++\n        }\n        if (result.size == k) {\n            break\n        }\n    }\n    while (i < n) {\n        result.add(listOf(nums1[i], nums2[0]))\n        i++\n    }\n    while (j < m) {\n        result.add(listOf(nums1[0], nums2[j]))\n        j++\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/410","completion":"    val min = listval[0]\n    for (i in listval) {\n        if (listval[i] < min) {\n            min = listval[i]\n        }\n    }\n    return min\n}","language":"kotlin"}
{"task_id":"MBKP\/411","completion":"    val regex = \"(?<=[a-z])[A-Z]|(?<=[A-Z])[A-Z][a-z]|(?<=[A-Za-z])[A-Z][a-z]\"\n    val matcher = word.matcher(regex)\n    val result = matcher.replaceAll(\"_$0\")\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/415","completion":"    val max = arr.sortedBy { it.product }.last\n    val min = arr.sortedBy { it.product }.first\n    return max < min ? [] : [max, min]\n}","language":"kotlin"}
{"task_id":"MBKP\/416","completion":"    if (n < 0) return 0\n    if (n == 0) return 0\n    if (n == 1) return 1\n    if (n == 2) return 2\n    if (n == 3) return 4\n    if (n == 4) return 7\n    if (n == 5) return 11\n    if (n == 6) return 15\n    if (n == 7) return 19\n    if (n == 8) return 23\n    if (n == 9) return 27\n    if (n == 10) return 31\n    if (n == 11) return 35\n    if (n == 12) return 39\n    if (n == 13) return 43\n    if (n == 14) return 47\n    if (n == 15) return 53\n    if (n == 16) return 59\n    if (","language":"kotlin"}
{"task_id":"MBKP\/417","completion":"    val result = mutableListOf<List<String>>()\n    input.forEach {\n        val first = it.first\n        it.forEach {\n            if (it.first == first) {\n                result.add(it)\n            }\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/419","completion":"    var sum = 0\n    var length = list1.size\n    for (i in list1) {\n        sum += Math.round(list1[i])\n    }\n    return sum * length\n}","language":"kotlin"}
{"task_id":"MBKP\/422","completion":"    var sum = 0\n    for (i in 0 until n) {\n        sum += i * i * i\n    }\n    return sum \/ n\n}","language":"kotlin"}
{"task_id":"MBKP\/423","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/428","completion":"    val n = myList.size\n    val gap = n \/ 2\n    while (gap > 0) {\n        for (i in 0 until gap) {\n            val j = i + gap\n            val temp = myList[i]\n            while (j < n) {\n                if (myList[j] < temp) {\n                    myList[i] = myList[j]\n                    i = i + gap\n                    j = i + gap\n                } else {\n                    break\n                }\n            }\n            myList[i] = temp\n        }\n        gap = gap \/ 2\n    }\n    return myList\n}","language":"kotlin"}
{"task_id":"MBKP\/429","completion":"    val result = mutableListOf<Int>()\n    for (i in 0 until testTup1.size) {\n        result[i] = testTup1[i] & testTup2[i]\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/432","completion":"    var area = (base1 + base2) * height \/ 2\n    var perimeter = (base1 + base2) * 2 + height * 2\n    return area \/ perimeter\n}","language":"kotlin"}
{"task_id":"MBKP\/438","completion":"    val result = 0\n    val list = testList.map { it.toList() }\n    for (i in 0 until list.size - 1) {\n        val first = list[i]\n        val second = list[i + 1]\n        if (first.equals(second)) {\n            result += 1\n        }\n    }\n    return result.toString()\n}","language":"kotlin"}
{"task_id":"MBKP\/440","completion":"    val adverbs = text.split(\"!!\")\n    val result = List<Any>()\n    for (i in 0 until adverbs.length) {\n        val adverb = adverbs[i]\n        val position = i\n        result.add(position)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/442","completion":"    var count = 0\n    for (i in nums) {\n        if (nums[i] > 0) {\n            count += 1\n        }\n    }\n    return count \/ nums.length\n}","language":"kotlin"}
{"task_id":"MBKP\/443","completion":"    var max = list1.maxBy { it < 0 }\n    return max\n}","language":"kotlin"}
{"task_id":"MBKP\/444","completion":"    val result = \"\"\n    for (i in 0 until testList.size) {\n        result += \"(\" + testList[i].drop(k).map { it.toString() }.join (\", \") + \"), \"\n    }\n    result = result.substring(0, result.length - 2)\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/448","completion":"    var sum = 0\n    for (i in 1..n) {\n        sum += i * (i + 1) \/ 2\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/461","completion":"    return str.toUpper().length\n}","language":"kotlin"}
{"task_id":"MBKP\/462","completion":"    val result = mutableListOf<List<Any>>()\n    for (i in 0 until list1.size) {\n        result.add(mutableListOf<Any>())\n    }\n    for (i in 0 until list1.size) {\n        for (j in 0 until list1.size) {\n            result[i].add(list1[j])\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/468","completion":"    val dp = Array(n + 1).fill(0)\n    dp[0] = 1\n    for (i in arr) {\n        for (j in range(i, n + 1)) {\n            dp[j] = Math.max(dp[j], dp[j - i] * arr[i])\n        }\n    }\n    return dp[n]\n}","language":"kotlin"}
{"task_id":"MBKP\/469","completion":"    val profit = 0\n    val buy = []\n    val sell = []\n    for (i in 0 until price.size) {\n        buy.add(price[i])\n        sell.add(0)\n    }\n    for (i in 0 until k) {\n        val max = buy[i]\n        for (j in 0 until price.size) {\n            if (price[j] > max) {\n                max = price[j]\n                sell[i] = price[j]\n            }\n        }\n        profit += max - buy[i]\n        buy[i] = max\n    }\n    return profit\n}","language":"kotlin"}
{"task_id":"MBKP\/475","completion":"    val list = mutableListOf<List<Any>>()\n    for (key, value in dict1) {\n        list.add(listOf(key, value))\n    }\n    list.sortWith(comparing(pair => pair.second))\n    return list\n}","language":"kotlin"}
{"task_id":"MBKP\/480","completion":"    val maxOccuringChar = \"\"\n    val maxOccuringCharCount = 0\n    for (i in str1) {\n        val charCount = str1.count(str1[i])\n        if (charCount > maxOccuringCharCount) {\n            maxOccuringChar = str1[i]\n            maxOccuringCharCount = charCount\n        }\n    }\n    return maxOccuringChar\n}","language":"kotlin"}
{"task_id":"MBKP\/482","completion":"    val pattern = \"(?<=[a-z])(?=[A-Z])\"\n    val matcher = Pattern.compile(pattern).matcher(text)\n    val result = matcher.find()\n    if (result) {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/485","completion":"    var largest = 0\n    var palindromes = a.filter { it % 2 == 0 }.map { it \/ 2 }.filter { it == it.reverse() }\n    for (i in palindromes) {\n        if (palindromes[i] > largest) {\n            largest = palindromes[i]\n        }\n    }\n    return largest\n}","language":"kotlin"}
{"task_id":"MBKP\/486","completion":"    var numerator = factorial(n) \/ (factorial(k) * factorial(n - k))\n    var denominator = factorial(n - k) * Math.pow(p, k) * Math.pow(1 - p, n - k)\n    return numerator \/ denominator\n}","language":"kotlin"}
{"task_id":"MBKP\/490","completion":"    val result = mutableSetOf<List<Int>>()\n    for (i in 0 until testList.size) {\n        val first = testList[i]\n        for (j in 0 until testList.size) {\n            val second = testList[j]\n            if (first == second) {\n                result.add(first)\n            }\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/493","completion":"    val polygons = []\n    val dx = endx - startx\n    val dy = endy - starty\n    val d = sqrt(dx * dx + dy * dy)\n    val x = startx\n    val y = starty\n    val x1 = startx\n    val y1 = starty\n    val x2 = startx\n    val y2 = starty\n    val x3 = startx\n    val y3 = starty\n    val x4 = startx\n    val y4 = starty\n    val x5 = startx\n    val y5 = starty\n    val x6 = startx\n    val y6 = starty\n    val x7 = startx\n    val y7 = starty\n    val x8 = startx\n    val y8 = starty\n    val x9 = startx\n    val y9 = starty\n    val x10 = startx\n    val y10 = starty\n    val x11 = startx\n","language":"kotlin"}
{"task_id":"MBKP\/494","completion":"    val result = \"\"\n    for (i in 0 until testTup.size) {\n        if (testTup[i] == 1) {\n            result += \"1\"\n        } else {\n            result += \"0\"\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/497","completion":"    val pi = 3.14\n    return 2 * pi * r * r + 2 * pi * r * h\n}","language":"kotlin"}
{"task_id":"MBKP\/500","completion":"    return list.join(\" \")\n}","language":"kotlin"}
{"task_id":"MBKP\/501","completion":"    return (x % y == 0 ? y : numCommDiv(y, x % y))\n}","language":"kotlin"}
{"task_id":"MBKP\/510","completion":"    var dp : List<List<Int>> = mutableListOf<List<Int>>()\n    dp.add(arr)\n    for (i in 0 until arr.size - 1) {\n        var temp = mutableListOf<List<Int>>()\n        for (j in 0 until dp.size - 1) {\n            var temp2 = mutableListOf<List<Int>>()\n            for (k in 0 until dp.size - 1) {\n                if (dp[j].get(i) * dp[k].get(i) < k) {\n                    temp2.add(dp[j])\n                } else {\n                    temp2.add(dp[k])\n                }\n            }\n            temp.add(temp2)\n        }\n        dp = temp\n    }\n    return dp.size\n}","language":"kotlin"}
{"task_id":"MBKP\/511","completion":"    val sum = 0\n    val min = 0\n    for (i in 1 until num) {\n        if (num % i == 0) {\n            sum += i\n            if (sum < min) {\n                min = sum\n            }\n        }\n    }\n    return min\n}","language":"kotlin"}
{"task_id":"MBKP\/512","completion":"    val freqMap = mutableMapOf<Int, Int>()\n    testTuple.forEach {\n        if (it is List) {\n            freqMap += countElementFreq(it)\n        } else {\n            freqMap[it] += 1\n        }\n    }\n    return freqMap\n}","language":"kotlin"}
{"task_id":"MBKP\/519","completion":"    var volume = 1.0;\n    for (i in 0 until num) {\n        volume = volume * (1.0 \/ 3.0);\n    }\n    return volume;\n}","language":"kotlin"}
{"task_id":"MBKP\/520","completion":"    val result = l[0]\n    for (i in l) {\n        result = result * i \/ gcd(result, i)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/522","completion":"    var dp = Array(arr.size + 1).fill(1)\n    var max = 0\n    for (i in arr) {\n        for (j in dp) {\n            if (arr[i] > arr[j] && dp[j] + 1 > dp[i]) {\n                dp[i] = dp[j] + 1\n                max = Math.max(max, dp[i])\n            }\n        }\n    }\n    return max\n}","language":"kotlin"}
{"task_id":"MBKP\/523","completion":"    val upperCase = str1.match(\/[A-Z]\/g)\n    val lowerCase = str1.match(\/[a-z]\/g)\n    val number = str1.match(\/[0-9]\/g)\n    val length = str1.length\n\n    if (upperCase != null && upperCase.length > 0) {\n        return List(\n            \"String must have 1 upper case character.\"\n        )\n    } else if (lowerCase != null && lowerCase.length > 0) {\n        return List(\n            \"String must have 1 lower case character.\"\n        )\n    } else if (number != null && number.length > 0) {\n        return List(\n            \"String must have 1 number.\"\n        )\n    } else if (length < 8) {\n        return List(\n            \"String length should be atleast 8.\"\n        )\n    } else {\n        return List(\n            \"Valid string","language":"kotlin"}
{"task_id":"MBKP\/524","completion":"    var dp : List<Int> = mutableListOf<Int>()\n    dp.append(arr[0])\n    var max : Int = arr[0]\n    for (i in arr.tail()) {\n        if (dp.last() < arr[i]) {\n            dp.append(arr[i])\n            max = maxOf(max, dp.last())\n        } else {\n            dp.append(dp.last() + arr[i])\n            max = maxOf(max, dp.last())\n        }\n    }\n    return max\n}","language":"kotlin"}
{"task_id":"MBKP\/528","completion":"    val min = list1.minBy { it.size }\n    return min.map { it.toList() }\n}","language":"kotlin"}
{"task_id":"MBKP\/529","completion":"    var j = 1\n    var i = 2\n    var k = 1\n    var l = 2\n    var m = 3\n    var n = 4\n    var o = 5\n    var p = 6\n    var q = 7\n    var r = 8\n    var s = 9\n    var t = 10\n    var u = 11\n    var v = 12\n    var w = 13\n    var x = 14\n    var y = 15\n    var z = 16\n    var a = 17\n    var b = 18\n    var c = 19\n    var d = 20\n    var e = 21\n    var f = 22\n    var g = 23\n    var h = 24\n    var i = 25\n    var j = 26\n    var k = 27\n    var l = 28\n    var m = 29\n    var n = 30\n","language":"kotlin"}
{"task_id":"MBKP\/530","completion":"    var count = 0\n    for (i in nums) {\n        if (nums[i] < 0) {\n            count += 1\n        }\n    }\n    return count \/ nums.length\n}","language":"kotlin"}
{"task_id":"MBKP\/531","completion":"    val dp = Array(v + 1).fill(0)\n    dp[0] = 1\n    for (i in coins) {\n        for (j in range(m, v + 1)) {\n            if (j >= coins[i]) dp[j] += dp[j - coins[i]]\n        }\n    }\n    return dp[v]\n}","language":"kotlin"}
{"task_id":"MBKP\/532","completion":"    val str1Map = str1.chars.map { (c -> c.toInt()) }\n    val str2Map = str2.chars.map { (c -> c.toInt()) }\n    return str1Map.equals(str2Map)\n}","language":"kotlin"}
{"task_id":"MBKP\/534","completion":"    val patternLength = pattern.length\n    val textLength = text.length\n    val result = List()\n    for (i in 0 until textLength) {\n        val currentPattern = text.substring(i, i + patternLength)\n        if (currentPattern == pattern) {\n            result.add(i)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/538","completion":"    val str = str1.split(\" \")\n    return str.map { it.toUpper() }.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/539","completion":"    return index.map {\n        val power = basesNum.map {\n            val base = it\n            base ** index\n        }\n        power\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/540","completion":"    val freq = arr.groupBy { it }\n    val max = freq.maxBy { it.count }\n    val min = freq.minBy { it.count }\n    return max.count - min.count\n}","language":"kotlin"}
{"task_id":"MBKP\/543","completion":"    val sum = num1 + num2\n    val digits = sum.toString().length\n    println(digits)\n}","language":"kotlin"}
{"task_id":"MBKP\/545","completion":"    return n ^ (n >> 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/548","completion":"    val dp = Array(arr.size() + 1).fill(1)\n    for (i in 0 until arr.size()) {\n        for (j in 0 until i) {\n            if (arr[i] > arr[j]) {\n                dp[i] = max(dp[i], dp[j] + 1)\n            }\n        }\n    }\n    return dp.max()\n}","language":"kotlin"}
{"task_id":"MBKP\/552","completion":"    if (seqNums.isEmpty()) return \"Empty Sequence\"\n    var sum = 0\n    for (i in seqNums) {\n        sum += seqNums[i]\n    }\n    if (sum == 0) return \"Linear Sequence\"\n    return \"Non Linear Sequence\"\n}","language":"kotlin"}
{"task_id":"MBKP\/557","completion":"    return string.toLowerCase()\n}","language":"kotlin"}
{"task_id":"MBKP\/558","completion":"    return (n1 ^ n2).toString().length\n}","language":"kotlin"}
{"task_id":"MBKP\/561","completion":"    val result = mutableMapOf<Int, List<Any>>()\n    for (i in 0 until testList.size) {\n        for (j in 0 until testList.size) {\n            if (i != j) {\n                result[testList[i][0]].append(testList[i][1])\n                result[testList[j][0]].append(testList[j][1])\n            }\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/563","completion":"    val result = text.split(\"\\\"\")\n    result.remove(0)\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.last())\n    result.remove(result.","language":"kotlin"}
{"task_id":"MBKP\/568","completion":"    val result = mutableListOf<Map<Object, Object>>(length)\n    for (i in 0 until length) {\n        result[i] = mutableMapOf<Object, Object>()\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/570","completion":"    val result = mutableListOf<String>()\n    for (i in 0 until list1.size) {\n        if (list1[i].contains(charlist[0])) {\n            result.add(list1[i].replace(charlist[0], \"\"))\n        } else {\n            result.add(list1[i])\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/571","completion":"    val dp = Array(n + 1).fill(0)\n    dp[0] = 0\n    for (i in arr) {\n        for (j in range(i, n + 1)) {\n            dp[j] = Math.max(dp[j], dp[j - i] + i)\n        }\n    }\n    return dp[n] - k\n}","language":"kotlin"}
{"task_id":"MBKP\/579","completion":"    val result = mutableListOf<Int>()\n    val testTup1T = testTup1.toMutableList()\n    val testTup2T = testTup2.toMutableList()\n    for (i in 0 until testTup1T.size) {\n        if (testTup1T[i] != testTup2T[i]) {\n            result.add(testTup1T[i])\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/580","completion":"    return testTuple.filter { it.isEven() }.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/582","completion":"    return dict1.isEmpty()\n}","language":"kotlin"}
{"task_id":"MBKP\/584","completion":"    val regex = \"(?<=[aeiou])(?=[aeiouy])|(?<=[aeiouy])(?=[aeiou])\"\n    val matcher = Regex(regex).findIn(text)\n    return matcher.map { it.group(0) }.join(\"-\")\n}","language":"kotlin"}
{"task_id":"MBKP\/585","completion":"    val heap = MinHeap<Map<String, Any>>()\n    for (i in items) {\n        heap.add(items[i])\n    }\n    val result = []\n    for (i in 0..n-1) {\n        result.add(heap.remove())\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/591","completion":"    val first = newlist[0]\n    val last = newlist[newlist.size - 1]\n    newlist[0] = last\n    newlist[newlist.size - 1] = first\n    return newlist\n}","language":"kotlin"}
{"task_id":"MBKP\/592","completion":"    var sum = 0\n    for (i in 1..n) {\n        sum += (i * (n + i)) \/ 2\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/597","completion":"    val p = (m + n + 1) \/ 2\n    val i = partition(arr1, arr2, m, n, k, p)\n    if (i == k) {\n        return arr1[i]\n    } else if (i < k) {\n        return findKth(arr1, arr2, m, i - 1, k)\n    } else {\n        return findKth(arr1, arr2, i + 1, n, k)\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/599","completion":"    val sum = 0\n    val average = 0\n    val result = mutableListOf<Number>()\n    for (i in 0 until number) {\n        sum += i\n        average = sum \/ number\n        result.add(average)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/602","completion":"    val map = HashMap<Character, Integer>()\n    for (i in 0 until str1.length) {\n        if (map.containsKey(str1[i])) {\n            map[str1[i]] = map[str1[i]] + 1\n        } else {\n            map[str1[i]] = 1\n        }\n    }\n    for (i in 0 until str1.length) {\n        if (map[str1[i]] > 1) {\n            return str1[i]\n        }\n    }\n    return \"None\"\n}","language":"kotlin"}
{"task_id":"MBKP\/607","completion":"    val patternRegex = pattern.toRegex()\n    val patternRegexGroup = patternRegex.group\n    val patternRegexGroupIndex = patternRegex.groupIndex\n    val patternRegexGroupCount = patternRegex.groupCount\n    val patternRegexGroupLength = patternRegex.length\n    val patternRegexGroupIndexLength = patternRegex.index\n    val patternRegexGroupIndexLengthLength = patternRegex.length\n    val patternRegexGroupIndexLengthLengthLength = patternRegex.length\n    val patternRegexGroupIndexLengthLengthLengthLength = patternRegex.length\n    val patternRegexGroupIndexLengthLengthLengthLengthLength = patternRegex.length\n    val patternRegexGroupIndexLengthLengthLengthLengthLengthLength = patternRegex.length\n    val patternRegexGroupIndexLengthLengthLengthLengthLengthLengthLength = patternRegex.length\n    val patternRegexGroupIndexLengthLengthLengthLengthLengthLengthLengthLength = patternRegex.length\n    val patternRegexGroupIndexLengthLengthLengthLengthLengthLengthLengthLengthLength = patternRegex.length\n    val patternRegexGroupIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = patternRegex.length\n    val patternRegexGroupIndex","language":"kotlin"}
{"task_id":"MBKP\/608","completion":"    var bell = 1\n    var last = 1\n    var i = 2\n    while (i < n) {\n        bell = last + bell\n        last = bell\n        i += 1\n    }\n    return bell\n}","language":"kotlin"}
{"task_id":"MBKP\/612","completion":"    var result = []\n    for (var i = 0; i < lst.length; i++) {\n        result.push(lst[i][0])\n        result.push(lst[i][lst[i].length - 1])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/613","completion":"    val result = testList.map {\n        it.map {\n            it.map {\n                it.map {\n                    it.map {\n                        it.map {\n                            it.map {\n                                it.map {\n                                    it.map {\n                                        it.map {\n                                            it.map {\n                                                it.map {\n                                                    it.map {\n                                                        it.map {\n                                                            it.map {\n                                                                it.map {\n                                                                    it.map {\n                                                                        it.map {\n                                                                            it.map {\n                                                                                it.map {\n                                                                                    it.map {\n                                                                                        it.map {\n                                                                                            it.map {\n                                                                                                it.map {\n                                                                                                    it.map {\n                                                                                                        it.map","language":"kotlin"}
{"task_id":"MBKP\/615","completion":"    return nums.map { it.map { it.sum() \/ it.size() } }.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/617","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/618","completion":"    return nums1.map { n1 -> nums2.map { n2 -> n1 \/ n2 } }\n}","language":"kotlin"}
{"task_id":"MBKP\/619","completion":"    val result = \"\"\n    val len = testStr.length\n    for (i in 0 until len) {\n        if (testStr[i].isDigit) {\n            result += testStr[i]\n            continue\n        }\n        if (testStr[i] == \"1\") {\n            result += \"a\"\n            continue\n        }\n        if (testStr[i] == \"2\") {\n            result += \"b\"\n            continue\n        }\n        if (testStr[i] == \"3\") {\n            result += \"c\"\n            continue\n        }\n        if (testStr[i] == \"4\") {\n            result += \"d\"\n            continue\n        }\n        if (testStr[i] == \"5\") {\n            result += \"e\"\n            continue\n        }\n        if (testStr[i] == \"6\") {\n            result +=","language":"kotlin"}
{"task_id":"MBKP\/621","completion":"    val result = mutableListOf<String>()\n    for (i in 0 until testList.size) {\n        val current = testList[i]\n        val numeric = current.toInt()\n        numeric += k\n        result.add(String(numeric))\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/622","completion":"    var arr = arr1.concat(arr2).sort()\n    var mid = n \/ 2\n    return arr[mid]\n}","language":"kotlin"}
{"task_id":"MBKP\/623","completion":"    return nums.map { x -> x ** n }\n}","language":"kotlin"}
{"task_id":"MBKP\/625","completion":"    val first = newlist[0]\n    val last = newlist[newlist.size - 1]\n    newlist[0] = last\n    newlist[newlist.size - 1] = first\n    return newlist\n}","language":"kotlin"}
{"task_id":"MBKP\/630","completion":"    val result = mutableListOf<List<Int>>()\n    for (i in 0 until testTup.size - 1) {\n        result.add(mutableListOf<Int>(testTup[i], testTup[i + 1]))\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/633","completion":"    return arr.map { it }.reduce { (acc, it) -> acc ^ it }\n}","language":"kotlin"}
{"task_id":"MBKP\/634","completion":"    return (n * (n + 1) * (2 * n + 1)) \/ 6\n}","language":"kotlin"}
{"task_id":"MBKP\/639","completion":"    val result = 0\n    for (i in sampleNames) {\n        if (sampleNames[i].startsWith(\"a\")) {\n            result += sampleNames[i].length\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/640","completion":"    return items.map { it.replace(\"(\", \"\").replace(\")\", \"\") }.join(\"\")\n}","language":"kotlin"}
{"task_id":"MBKP\/644","completion":"    val result = mutableListOf<Int>()\n    val length = input.size()\n    if (k >= length) {\n        result.addAll(input)\n        return result\n    }\n    for (i in 0 until length - k) {\n        result.add(input[length - 1 - i])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/647","completion":"    val result = mutableListOf<String>()\n    val index = 0\n    while (index < text.length) {\n        if (text[index].isUpper()) {\n            result.add(text.substring(0, index))\n            text = text.substring(index + 1)\n            index = 0\n        } else {\n            index += 1\n        }\n    }\n    result.add(text)\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/648","completion":"    var result = []\n    for (i in lst) {\n        if (i % 2 == 0) {\n            result.append(lst[i])\n        } else {\n            result.append(lst[i + 1])\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/652","completion":"    val result = \"\"\n    for (i in 0 until testList.size) {\n        for (j in 0 until testList[i].size) {\n            result += \"(\" + testList[i][j].map { it.toString() }.join (\", \") + \")\"\n        }\n        result += \"\\n\"\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/653","completion":"    val map = mutableMapOf<String, List<Int>>()\n    l.forEach {\n        val key = it.first\n        val value = it.second\n        if (map.containsKey(key)) {\n            map[key] += value\n        } else {\n            map[key] = listOf(value)\n        }\n    }\n    return map\n}","language":"kotlin"}
{"task_id":"MBKP\/657","completion":"    var i : Int = 1\n    var result : Int = 0\n    while (n \/ i >= 1) {\n        result = result + (n \/ i) % 10\n        i = i * 10\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/659","completion":"    val result = mutableListOf<Int>()\n    x.forEach {\n        if (result.contains(it)) {\n            it\n        } else {\n            result.add(it)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/660","completion":"    val result = mutableListOf<Int>()\n    if (l1 > r1) {\n        result.add(l1)\n        result.add(r1)\n    } else if (l2 > r2) {\n        result.add(l2)\n        result.add(r2)\n    } else {\n        result.add(l1)\n        result.add(r2)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/661","completion":"    val dp = Array(n + 1).fill(0)\n    dp[0] = 0\n    for (i in arr) {\n        for (j in dp) {\n            if (i - 3 >= 0) {\n                dp[j] = Math.max(dp[j], dp[j - 1] + arr[i])\n            }\n        }\n    }\n    return dp[n]\n}","language":"kotlin"}
{"task_id":"MBKP\/665","completion":"    return numList.dropLast(1).append(numList.last())\n}","language":"kotlin"}
{"task_id":"MBKP\/668","completion":"    val result = string.replace(char, char.repeat(2))\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/671","completion":"    return n | (n - 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/676","completion":"    return text1.replaceAll(\"[^a-zA-Z0-9]\", \"\")\n}","language":"kotlin"}
{"task_id":"MBKP\/684","completion":"    val count = 0\n    for (i in 0 until str.length) {\n        if (str[i] == x) {\n            count += 1\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/685","completion":"    var sum : Int = 0\n    for (i in 1 until n) {\n        if (isPrime(i)) {\n            sum += i\n        }\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/686","completion":"    val freqMap = mutableMapOf<Int, Int>()\n    for (i in testTup) {\n        freqMap[i] += 1\n    }\n    val result = mutableMapOf<String, Int>()\n    for (key, value in freqMap) {\n        result[key] = value\n    }\n    return result.toString()\n}","language":"kotlin"}
{"task_id":"MBKP\/688","completion":"    return a + b * 1.0\n}","language":"kotlin"}
{"task_id":"MBKP\/689","completion":"    \/\/ Your code here\n    \/\/ 1. create a dp array of size n\n    \/\/ 2. iterate through the array and for each element,\n    \/\/    2.1 check if the element is 0, if yes, then return 0\n    \/\/    2.2 if the element is 1, then check if the element is 0, if yes, then return 0\n    \/\/    2.3 if the element is 2, then check if the element is 0, if yes, then return 0\n    \/\/    2.4 if the element is 3, then check if the element is 0, if yes, then return 0\n    \/\/    2.5 if the element is 4, then check if the element is 0, if yes, then return 0\n    \/\/    2.6 if the element is 5, then check if the element is 0, if yes, then return 0\n    \/\/    2.7 if the element is 6, then check if the element is 0, if yes, then return 0\n    \/\/","language":"kotlin"}
{"task_id":"MBKP\/691","completion":"    val result = mutableMapOf<Int, List<Int>>()\n    for (i in 0 until testList.size) {\n        val first = testList[i][0]\n        val second = testList[i][1]\n        if (result.containsKey(first)) {\n            result[first].add(second)\n        } else {\n            result[first] = listOf(second)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/696","completion":"    val result = mutableListOf<List<Any>>()\n    for (i in 0 until list1.size) {\n        result.add(list1[i].zip(list2[i]))\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/700","completion":"    var count = 0\n    for (i in li) {\n        if (li[i] >= min && li[i] <= max) {\n            count += 1\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/701","completion":"    var sum = 0\n    var leftSum = 0\n    var rightSum = 0\n    for (i in arr) {\n        sum += arr[i]\n    }\n    for (i in arr) {\n        rightSum += arr[i]\n        if (leftSum == rightSum) {\n            return i\n        }\n        leftSum += arr[i]\n    }\n    return -1\n}","language":"kotlin"}
{"task_id":"MBKP\/702","completion":"    var amin = 0\n    var amax = arr.size()\n    var count = 0\n    while (amin < amax) {\n        var mid = (amin + amax) \/ 2\n        if (arr.get(mid) < k) {\n            amin = mid + 1\n        } else {\n            amax = mid\n        }\n        count += 1\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/705","completion":"    val result = mutableListOf<List<Any>>()\n    list1.forEach {\n        val sublist = list1.filter { it != it }\n        if (sublist.size > 0) {\n            result.add(sortSublists(sublist))\n        } else {\n            result.add(it)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/709","completion":"    val result = \"\"\n    val map = HashMap<Int, Int>()\n    for (i in testList) {\n        for (j in i) {\n            if (map.containsKey(j)) {\n                map[j] += 1\n            } else {\n                map[j] = 1\n            }\n        }\n    }\n    for (k, v in map.entrySet()) {\n        if (v == 1) {\n            result += \"{\" + k + \": \" + v + \"}, \"\n        }\n    }\n    result = result.substring(0, result.length - 2)\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/712","completion":"    val result = mutableListOf<Any>()\n    for (i in 0 until list1.size) {\n        val list2 = mutableListOf<Any>()\n        for (j in 0 until list1.size) {\n            if (i != j) {\n                list2.add(list1[i])\n            }\n        }\n        if (list2.size == 0) {\n            result.add(list1[i])\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/714","completion":"    var res = 0\n    for (i in 1..n) {\n        if (n % i == 0) {\n            res += 1\n        }\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/717","completion":"    var mean = meanCalc(data)\n    var sum = 0.0\n    for (i in data) {\n        sum += Math.pow(data[i] - mean, 2)\n    }\n    return Math.sqrt(sum \/ data.size)\n}","language":"kotlin"}
{"task_id":"MBKP\/721","completion":"    val dp = Array(n + 1).fill(0).map { 0 }\n    dp[0] = cost[0][0]\n    for (i in 1..n) {\n        for (j in 1..n) {\n            dp[i] = Math.max(dp[i], dp[i - 1] + cost[i][j])\n        }\n    }\n    return dp[n] \/ n\n}","language":"kotlin"}
{"task_id":"MBKP\/722","completion":"    val result = mutableMapOf<String, List<Number>>()\n    for (student, grades in students.entrySet()) {\n        if (grades[0] < h || grades[1] < w) {\n            result.put(student, grades)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/723","completion":"    val map = mutableMapOf<Int, Int>()\n    for (i in nums1) {\n        map[nums1[i]]++\n    }\n    for (i in nums2) {\n        if (map[nums2[i]] > 0) {\n            map[nums2[i]]--\n        } else {\n            return 0\n        }\n    }\n    return map.sum()\n}","language":"kotlin"}
{"task_id":"MBKP\/724","completion":"    var result = 0\n    for (i in 1..power) {\n        result += base * base\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/725","completion":"    val pattern = \"\"\"\\\"(.*?)\\\"\"\"\"\n    val matcher = Pattern.compile(pattern).matcher(text1)\n    val result = mutableListOf<String>()\n    while (matcher.find()) {\n        result.add(matcher.group(1))\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/731","completion":"    val pi = 3.14\n    val area = (pi * (r ** 2) * h) \/ 360\n    return area\n}","language":"kotlin"}
{"task_id":"MBKP\/735","completion":"    return n ^ ((1 << (n.bitLength - 2)) - 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/737","completion":"    return \"Valid\" if (string.matches(\"^[aeiou].*\")) else \"Invalid\"\n}","language":"kotlin"}
{"task_id":"MBKP\/738","completion":"    var result = 1\n    for (i in 1 until n) {\n        result *= (n - i + 1) \/ i\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/739","completion":"    var triangular = 1\n    var index = 1\n    while (index < n) {\n        triangular += index\n        index += 1\n    }\n    return triangular\n}","language":"kotlin"}
{"task_id":"MBKP\/742","completion":"    return (1 \/ 2) * (side * side) * (1 \/ 2)\n}","language":"kotlin"}
{"task_id":"MBKP\/743","completion":"    var list2 = list1.copy()\n    var length = list2.size()\n    var i = 0\n    var j = 0\n    while (i < length) {\n        j = (i + m) % length\n        var temp = list2[i]\n        list2[i] = list2[j]\n        list2[j] = temp\n        i++\n    }\n    return list2\n}","language":"kotlin"}
{"task_id":"MBKP\/745","completion":"    var result : List<Int> = new ArrayList<Int>();\n    for (var i = startnum; i <= endnum; i++) {\n        var digits = \"\" + i;\n        for (var j = 0; j < digits.length(); j++) {\n            if (i % digits.charAt(j) != 0) {\n                result.add(i);\n                break;\n            }\n        }\n    }\n    return result;\n}","language":"kotlin"}
{"task_id":"MBKP\/746","completion":"    val pi = 3.14\n    if (a < 0 || r < 0) return null\n    return pi * r * r * a \/ 360\n}","language":"kotlin"}
{"task_id":"MBKP\/747","completion":"    val dp = Array(m + 1, n + 1, o + 1)\n    for (i in 0 until m) {\n        for (j in 0 until n) {\n            for (k in 0 until o) {\n                if (x[i] == y[j] && y[j] == z[k]) {\n                    dp[i + 1, j + 1, k + 1] = dp[i, j, k] + 1\n                } else {\n                    dp[i + 1, j + 1, k + 1] = Math.max(dp[i, j, k], dp[i + 1, j, k], dp[i, j + 1, k])\n                }\n            }\n        }\n    }\n    return dp[m, n, o]\n}","language":"kotlin"}
{"task_id":"MBKP\/748","completion":"    val regex = \"(?<=[a-z])[A-Z](?=[a-z])\"\n    val matcher = regex.matcher(str1)\n    val result = matcher.replaceAll(\" \")\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/749","completion":"    val nums = numsStr.map { Integer.parseInt(it) }\n    val sorted = nums.sorted()\n    return sorted.collect { it.toInt() }\n}","language":"kotlin"}
{"task_id":"MBKP\/752","completion":"    var jacobsthalNum = 1\n    for (i in 1 until n) {\n        jacobsthalNum = jacobsthalNum * (i + 1)\n    }\n    return jacobsthalNum\n}","language":"kotlin"}
{"task_id":"MBKP\/753","completion":"    val result = testList.sortedBy { it.second }\n    return result.take(k)\n}","language":"kotlin"}
{"task_id":"MBKP\/755","completion":"    if (numbers.isEmpty()) return null\n    val min = numbers[0]\n    val secondMin = numbers[0]\n    for (i in numbers) {\n        if (numbers[i] < min) {\n            secondMin = min\n            min = numbers[i]\n        } else if (numbers[i] < secondMin && numbers[i] != min) {\n            secondMin = numbers[i]\n        }\n    }\n    return secondMin\n}","language":"kotlin"}
{"task_id":"MBKP\/757","completion":"    val reversePairs = 0\n    val reversed = testList.map { it.reversed() }\n    val reversedSet = reversed.toSet()\n    val reversedSetIterator = reversedSet.iterator()\n    while (reversedSetIterator.hasNext()) {\n        val current = reversedSetIterator.next()\n        val reversedSetIterator2 = reversedSet.iterator()\n        while (reversedSetIterator2.hasNext()) {\n            val next = reversedSetIterator2.next()\n            if (current == next) {\n                reversePairs += 1\n            }\n        }\n    }\n    return String.valueOf(reversePairs)\n}","language":"kotlin"}
{"task_id":"MBKP\/761","completion":"    if (a < 0 || d < 0) return null\n    var pi = 3.1415926535897932384626433832795\n    var s = d \/ 2\n    var r = d \/ 2 * pi\n    var c = Math.cos(a)\n    var s = Math.sin(a)\n    var x = s * s\n    var y = c * c\n    var z = x + y\n    var d = Math.sqrt(z)\n    var d = d * r\n    return d\n}","language":"kotlin"}
{"task_id":"MBKP\/769","completion":"    val diff = mutableListOf<Int>()\n    for (i in li1) {\n        if (!li2.contains(li1[i])) {\n            diff.add(li1[i])\n        }\n    }\n    for (i in li2) {\n        if (!li1.contains(li2[i])) {\n            diff.add(li2[i])\n        }\n    }\n    return diff\n}","language":"kotlin"}
{"task_id":"MBKP\/776","completion":"    val vowels = \"aeiou\"\n    var count = 0\n    for (i in testStr) {\n        if (vowels.contains(testStr[i]) && vowels.contains(testStr[i + 1])) {\n            count += 1\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/780","completion":"    val result = mutableListOf<List<Int>>()\n    val temp = mutableListOf<Int>()\n    val temp2 = mutableListOf<Int>()\n    val temp3 = mutableListOf<Int>()\n    val temp4 = mutableListOf<Int>()\n    val temp5 = mutableListOf<Int>()\n    val temp6 = mutableListOf<Int>()\n    val temp7 = mutableListOf<Int>()\n    val temp8 = mutableListOf<Int>()\n    val temp9 = mutableListOf<Int>()\n    val temp10 = mutableListOf<Int>()\n    val temp11 = mutableListOf<Int>()\n    val temp12 = mutableListOf<Int>()\n    val temp13 = mutableListOf<Int>()\n    val temp14 = mutableListOf<Int>()\n    val temp15 = mutableListOf<Int>()\n    val temp16 = mutableListOf<Int>()\n    val temp17 = mutableListOf<Int>()\n    val temp18 = mutableListOf<Int>()\n    val temp19 = mutableListOf<Int>()\n    val temp20 = mutableListOf<Int>()\n    val temp21","language":"kotlin"}
{"task_id":"MBKP\/782","completion":"    var sum = 0\n    for (i in arr) {\n        if (i % 2 == 1) {\n            sum += arr[i]\n        }\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/783","completion":"    val hsv = mutableListOf<Number>()\n    val max = max(r, g, b)\n    val min = min(r, g, b)\n    val d = max - min\n    if (d == 0) {\n        hsv.add(0.0)\n        hsv.add(0.0)\n        hsv.add(0.0)\n    } else {\n        val s = (max - r) \/ d\n        val v = (max - g) \/ d\n        if (max == r) {\n            hsv.add(60.0)\n            hsv.add(s)\n            hsv.add(v)\n        } else if (max == g) {\n            hsv.add(120.0)\n            hsv.add(s)\n            hsv.add(v)\n        } else {\n            hsv.add(180.0)\n            hsv.add(s)\n            hsv.add(v)\n","language":"kotlin"}
{"task_id":"MBKP\/791","completion":"    val result = mutableListOf<Int>()\n    for (i in testTup) {\n        if (i is List) {\n            result.addAll(removeNested(i))\n        } else {\n            result.add(i)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/795","completion":"    val heap = MinHeap<Map<String, Any>>()\n    for (i in items) {\n        heap.add(items[i])\n    }\n    val result = []\n    for (i in 0 until n) {\n        result.add(heap.remove())\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/799","completion":"    return (n << d) | (n >> (32 - d))\n}","language":"kotlin"}
{"task_id":"MBKP\/816","completion":"    val res = mutableListOf<Object>()\n    for (i in testTup) {\n        res.add(null)\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/819","completion":"    val result = mutableListOf<List<Int>>()\n    lists.forEach {\n        val list = mutableListOf<Int>()\n        lists.forEach {\n            if (it == it) {\n                list.add(it)\n            }\n        }\n        result.add(list)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/828","completion":"    val alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    val digit = \"0123456789\"\n    val special = \"!@#$%^&*()_+-=[]{}|;':,.\/<>?\"\n    val result = mutableListOf<Int>()\n    for (i in alpha) {\n        result.add(string.count(alpha[i]))\n    }\n    for (i in digit) {\n        result.add(string.count(digit[i]))\n    }\n    for (i in special) {\n        result.add(string.count(special[i]))\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/829","completion":"    val map = mutableMapOf<String, Int>()\n    input.forEach {\n        val s = it\n        map[s] += 1\n    }\n    val sorted = map.sortedByDescendingValues()\n    val second = sorted.keys().first()\n    val secondCount = sorted.get(second)\n    if (secondCount > 1) {\n        return second\n    } else {\n        return null\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/830","completion":"    return (a + (10 ** digits)) \/ 10 ** digits\n}","language":"kotlin"}
{"task_id":"MBKP\/832","completion":"    val regex = \"[0-9]+$\"\n    val matcher = input.matcher(regex)\n    matcher.find()\n    return Int(matcher.group(0))\n}","language":"kotlin"}
{"task_id":"MBKP\/834","completion":"    val matrix = mutableListOf<List<Int>>()\n    if (n == 0) return matrix\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    while (n < n) {\n        while (l < n) {\n            matrix[i][j] = k\n            j++\n            k++\n            l++\n        }\n        while (m < n) {\n            matrix[i][j] = l\n            i++\n            l++\n            m++\n        }\n        while (k < n) {\n            matrix[i][j] = m\n            j++\n            m++\n            k++\n        }\n        while (j < n) {\n            matrix[i][j] = k\n            i++\n            k++\n            j++\n        }\n        n++\n        i = 0\n        j ","language":"kotlin"}
{"task_id":"MBKP\/835","completion":"    return (y2 - y1) \/ (x2 - x1)\n}","language":"kotlin"}
{"task_id":"MBKP\/843","completion":"    val heap = MinHeap<Int>()\n    for (i in primes) {\n        heap.add(i)\n    }\n    var result = 1\n    for (i in 1 until n) {\n        result = heap.remove() * result\n        heap.add(result)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/845","completion":"    var digits = 0\n    var factorial = 1\n    while (n > 0) {\n        factorial *= n\n        n--\n    }\n    while (factorial > 0) {\n        var digit = factorial % 10\n        digits += digit\n        factorial \/= 10\n    }\n    return digits\n}","language":"kotlin"}
{"task_id":"MBKP\/849","completion":"    var sum = 0\n    for (i in 1 until n) {\n        if (n % i == 0) {\n            sum += i\n        }\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/851","completion":"    var sumOfDivisors = 0\n    for (i in 1 until n) {\n        if (n % i == 0) {\n            sumOfDivisors += i\n        }\n    }\n    return sum - sumOfDivisors\n}","language":"kotlin"}
{"task_id":"MBKP\/854","completion":"    val heap = rawheap.toMutableList()\n    heap.sort()\n    return heap\n}","language":"kotlin"}
{"task_id":"MBKP\/856","completion":"    val swaps = 0\n    val sorted = arr.sorted()\n    for (i in 0 until n - 1) {\n        if (arr[i] != sorted[i]) {\n            swaps += 1\n            swap(arr, i, sorted[i])\n        }\n    }\n    return swaps\n}","language":"kotlin"}
{"task_id":"MBKP\/857","completion":"    return list1.map { it.split(\"\") }\n}","language":"kotlin"}
{"task_id":"MBKP\/859","completion":"    val result = mutableListOf<List<Any>>()\n    result.add(mutableListOf<Any>())\n    for (i in myList) {\n        for (j in result) {\n            result.add(j.append(i))\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/862","completion":"    val words = text.split(\" \")\n    val map = words.groupBy { it.length }.map { (k, v) -> (k, v.count) }\n    val result = map.take(n).toList()\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/863","completion":"    var dp : List<Int> = mutableListOf<Int>()\n    var max : Int = 0\n    for (i in 0 until n) {\n        dp = mutableListOf<Int>()\n        for (j in 0 until n) {\n            if (arr[i] > arr[j]) dp.add(1)\n            else dp.add(0)\n        }\n        max = maxOf(max, dp.sum())\n    }\n    return max\n}","language":"kotlin"}
{"task_id":"MBKP\/869","completion":"    val result = mutableListOf<List<Int>>()\n    for (i in list1) {\n        if (i.size >= leftrange && i.size <= rigthrange) {\n            result.add(i)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/875","completion":"    val min = Int()\n    val minPair = Pair<Int, Int>()\n    val minDiff = Int()\n    val first = testList[0]\n    val second = testList[1]\n    val third = testList[2]\n    val fourth = testList[3]\n    val diff1 = second.second - first.second\n    val diff2 = third.second - second.second\n    val diff3 = fourth.second - third.second\n    val diff4 = fourth.first - first.first\n    val diff5 = third.first - second.first\n    val diff6 = second.first - third.first\n    val diff7 = first.first - fourth.first\n    val diff8 = fourth.first - third.first\n    val diff9 = third.first - second.first\n    val diff10 = second.first - first.first\n    if (diff1 < minDiff) {\n        minDiff = diff1\n        minPair = Pair(first.first","language":"kotlin"}
{"task_id":"MBKP\/885","completion":"    val map1 = new HashMap<Character, Character>()\n    val map2 = new HashMap<Character, Character>()\n    for (i in 0 until str1.length) {\n        if (map1.containsKey(str1[i])) {\n            if (map1[str1[i]] != str2[i]) {\n                return false\n            }\n        } else {\n            if (map2.containsKey(str2[i])) {\n                return false\n            } else {\n                map1[str1[i]] = str2[i]\n                map2[str2[i]] = str1[i]\n            }\n        }\n    }\n    return true\n}","language":"kotlin"}
{"task_id":"MBKP\/895","completion":"    val dp = mutableListOf<Int>()\n    dp.add(a[0])\n    for (i in a.indices) {\n        val cur = a[i]\n        val prev = dp.last\n        dp.add(cur + prev)\n    }\n    return dp.last\n}","language":"kotlin"}
{"task_id":"MBKP\/898","completion":"    val result = mutableListOf<Int>()\n    for (i in 0 until numbers.size) {\n        if (i < n) {\n            result.add(numbers[i])\n        } else {\n            result.add(numbers[i - n])\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/901","completion":"    var i = 1\n    var result = 1\n    while (i <= n) {\n        result = result * i\n        i++\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/903","completion":"    var result = 0\n    for (i in 1..n) {\n        result += ~i\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/906","completion":"    val regex = \"(?<=\/)([0-9]{4})\/([0-9]{2})\/([0-9]{2})\/\"\n    val matches = url.match(regex)\n    if (matches == null) {\n        return null\n    }\n    return listOf(matches.captures(1, 2, 3))\n}","language":"kotlin"}
{"task_id":"MBKP\/909","completion":"    var rev = 0\n    var temp = num\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10\n        temp \/= 10\n    }\n    if(rev == num) {\n        return -1\n    }\n    return rev\n}","language":"kotlin"}
{"task_id":"MBKP\/910","completion":"    val date = LocalDate.of(y, m, d)\n    val today = LocalDate.now()\n    return date.isEqual(today)\n}","language":"kotlin"}
{"task_id":"MBKP\/911","completion":"    val heap = MaxHeap<Int>()\n    for (i in nums) {\n        heap.add(i)\n    }\n    var max = -1\n    var min = -1\n    var result = -1\n    while (heap.size() > 0) {\n        var first = heap.remove()\n        var second = heap.remove()\n        var third = heap.remove()\n        var product = first * second * third\n        if (max < product) {\n            max = product\n        }\n        if (min == -1 || min > product) {\n            min = product\n        }\n        if (result == -1 || result > product) {\n            result = product\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/912","completion":"    return n * m + 1\n}","language":"kotlin"}
{"task_id":"MBKP\/915","completion":"    return arrayNums.filter { it > 0 }.map { it * -1 }\n}","language":"kotlin"}
{"task_id":"MBKP\/917","completion":"    val pattern = \"([A-Z])([a-z])\"\n    val matcher = Pattern.compile(pattern).matcher(text)\n    if (matcher.find()) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/918","completion":"    val dp = Array(n + 1).fill(0)\n    dp[0] = 1\n    for (i in s) {\n        for (j in range(m, n + 1)) {\n            if (i <= j) {\n                dp[j] += dp[j - i]\n            }\n        }\n    }\n    return dp[n]\n}","language":"kotlin"}
{"task_id":"MBKP\/921","completion":"    val result = mutableListOf<List<Int>>()\n    for (i in 0 until testTup.size) {\n        result.add(mutableListOf<Int>(testTup.subList(i, i + n)))\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/922","completion":"    val max = arr[0] * arr[1]\n    val min = arr[0] * arr[1]\n    for (i in arr.indices) {\n        if (arr[i] > max) {\n            max = arr[i] * arr[i+1]\n        }\n        if (arr[i] < min) {\n            min = arr[i] * arr[i+1]\n        }\n    }\n    return [max, min]\n}","language":"kotlin"}
{"task_id":"MBKP\/923","completion":"    val dp = Array(m + 1, n + 1)\n    for (i in 0 until m) {\n        for (j in 0 until n) {\n            if (i == 0 || j == 0) {\n                dp[i][j] = 0\n            } else if (x[i - 1] == y[j - 1]) {\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            } else {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[m][n]\n}","language":"kotlin"}
{"task_id":"MBKP\/937","completion":"    val charMap = mutableMapOf<Character, Int>()\n    for (i in str1) {\n        if (charMap.containsKey(str1[i])) {\n            charMap[str1[i]] += 1\n        } else {\n            charMap[str1[i]] = 1\n        }\n    }\n    val max = 0\n    val maxChar = \"\"\n    for (i in charMap) {\n        if (charMap[i] > max) {\n            max = charMap[i]\n            maxChar = i\n        }\n    }\n    return maxChar\n}","language":"kotlin"}
{"task_id":"MBKP\/938","completion":"    val result = mutableListOf<Int>()\n    val i = 0\n    val j = 0\n    val k = 0\n    while (i < p && j < q && k < r) {\n        if (a[i] < b[j] && b[j] < c[k]) {\n            result.add(a[i])\n            i++\n        } else if (a[i] < b[j] && b[j] >= c[k]) {\n            result.add(b[j])\n            j++\n        } else {\n            result.add(c[k])\n            k++\n        }\n    }\n    while (i < p) {\n        result.add(a[i])\n        i++\n    }\n    while (j < q) {\n        result.add(b[j])\n        j++\n    }\n    while (k < r) {\n        result.add(c[","language":"kotlin"}
{"task_id":"MBKP\/941","completion":"    var count = 0\n    for (i in num) {\n        if (num[i] == (num[i - 1])) {\n            count = count + 1\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/946","completion":"    val map = mutableMapOf<String, Int>()\n    val result = mutableListOf<List<Any>>()\n    val chars = s.toCharArray()\n    for (i in 0 until s.length) {\n        val char = chars[i]\n        if (map.contains(char)) {\n            map[char] += 1\n        } else {\n            map[char] = 1\n        }\n    }\n    for (i in 0 until a) {\n        val key = s[i]\n        val count = map[key]\n        result.add(listOf(key, count))\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/948","completion":"    return tup1[index]\n}","language":"kotlin"}
{"task_id":"MBKP\/949","completion":"    val result = testList.map {\n        it.sortedBy { it.map { it.sum }.sum }\n    }.map {\n        it.map { it.join \",\" }.join (\"\\n\")\n    }.join (\"\\n\")\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/951","completion":"    val result = testList1.map {\n        val similarIndices = testList2.map {\n            val similar = testList2.map {\n                val similarList = testList1.map {\n                    if (it.get(0) == it.get(1)) {\n                        it\n                    }\n                }.filter { it != null }.toList()\n                if (similarList.size > 0) {\n                    it\n                }\n            }.filter { it != null }.toList()\n            if (similar.size > 0) {\n                it\n            }\n        }.filter { it != null }.toList()\n        if (similarIndices.size > 0) {\n            it\n        }\n    }.filter { it != null }.toList()\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/953","completion":"    var dp : List<Int> = mutableListOf<Int>()\n    dp.add(1)\n    for (i in ar) {\n        for (j in dp) {\n            if (ar[i] == j) dp[j] = dp[j] + 1\n        }\n    }\n    return min(dp)\n}","language":"kotlin"}
{"task_id":"MBKP\/956","completion":"    val regex = \"(?=[A-Z])\"\n    val split = text.split(regex)\n    return split\n}","language":"kotlin"}
{"task_id":"MBKP\/957","completion":"    var mask = 1 << 31\n    var i = 0\n    while (mask > 0) {\n        if ((n & mask) != 0) {\n            i = i + 1\n        }\n        mask = mask >> 1\n    }\n    return i\n}","language":"kotlin"}
{"task_id":"MBKP\/958","completion":"    val roman = \"\"\n    val values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    val numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    for (i in 0 until values.size) {\n        if (num >= values[i]) {\n            roman += numerals[i]\n            num -= values[i]\n        }\n    }\n    return roman\n}","language":"kotlin"}
{"task_id":"MBKP\/959","completion":"    var sum = 0\n    for (i in lst) {\n        sum += lst[i]\n    }\n    return sum \/ lst.size\n}","language":"kotlin"}
{"task_id":"MBKP\/961","completion":"    val map = mutableMapOf<String, Int>()\n    map[\"I\"] = 1\n    map[\"V\"] = 5\n    map[\"X\"] = 10\n    map[\"L\"] = 50\n    map[\"C\"] = 100\n    map[\"D\"] = 500\n    map[\"M\"] = 1000\n    val result = 0\n    for (i in 0 until s.length) {\n        if (s[i] == \"I\") {\n            result += map[s[i]]\n        } else if (s[i] == \"V\") {\n            result += map[s[i]] * 5\n        } else if (s[i] == \"X\") {\n            result += map[s[i]] * 10\n        } else if (s[i] == \"L\") {\n            result += map[s[i]] * 50\n        } else if (s[i] == \"","language":"kotlin"}
{"task_id":"MBKP\/963","completion":"    if (x == 0) {\n        return [\"One solution\", z]\n    }\n    if (y == 0) {\n        return [\"Two solutions\", z * z - x * x]\n    }\n    if (z == 0) {\n        return [\"no real solution\", 0]\n    }\n    return [\"no real solution\", 0]\n}","language":"kotlin"}
{"task_id":"MBKP\/965","completion":"    val result = \"\"\n    for (i in 0 until text.length) {\n        if (text[i] == text[i].toUpperCase()) {\n            result += \"_\" + text[i]\n        } else {\n            result += text[i]\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/966","completion":"    return tuple1.filter { it.isNotEmpty() }\n}","language":"kotlin"}
{"task_id":"MBKP\/969","completion":"    val result = mutableListOf<List<Int>>()\n    val map = mutableMapOf<Int, List<Int>>()\n    for (i in 0 until testList.size) {\n        val list = testList[i]\n        if (map.containsKey(list[0])) {\n            map[list[0]].append(list[1])\n        } else {\n            map[list[0]] = listOf(list[1])\n        }\n    }\n    for (i in 0 until map.size) {\n        val list = map[i]\n        if (list.size > 1) {\n            result.add(list)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/971","completion":"    var max = 0\n    var count = 0\n    for (i in 1 until n) {\n        count = 0\n        for (j in 1 until n) {\n            if (a <= i && i <= b && j <= c) {\n                count++\n            }\n        }\n        if (count > max) {\n            max = count\n        }\n    }\n    return max\n}","language":"kotlin"}
{"task_id":"MBKP\/974","completion":"    val dp = mutableListOf<Int>()\n    dp[0] = a[0][0]\n    for (i in 0 until a.size) {\n        val row = a[i]\n        val prev = dp[i - 1]\n        for (j in 0 until row.size) {\n            val cur = row[j]\n            val next = dp[i - 1][j + 1]\n            val sum = prev + cur\n            dp[i] = min(dp[i], sum)\n        }\n    }\n    return dp[a.size - 1]\n}","language":"kotlin"}
