{"task_id":"MBTSP\/7","completion":"    return text.match(\/\\w{4,}\/g);\n}","language":"typescript"}
{"task_id":"MBTSP\/8","completion":"    return nums.map(x => x * x);\n}","language":"typescript"}
{"task_id":"MBTSP\/10","completion":"  const list2 = [...list1];\n  list2.sort((a,b) => a-b);\n  return list2.slice(0, n);\n}","language":"typescript"}
{"task_id":"MBTSP\/11","completion":"    let newStr = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            newStr += s[i];\n        }\n    }\n    return newStr;\n}","language":"typescript"}
{"task_id":"MBTSP\/12","completion":"    \/\/ TODO: Your code here\n    return M.sort((a, b) => a.reduce((acc, cur) => acc + cur, 0) - b.reduce((acc, cur) => acc + cur, 0))\n}","language":"typescript"}
{"task_id":"MBTSP\/17","completion":"    return a * 4;\n}","language":"typescript"}
{"task_id":"MBTSP\/18","completion":"    const string1 = string0.split(\"\");\n    const string2 = second_string.split(\"\");\n    const string3 = [];\n    for (let i = 0; i < string1.length; i++) {\n        if (string2.indexOf(string1[i]) === -1) {\n            string3.push(string1[i]);\n        }\n    }\n    return string3.join(\"\");\n}","language":"typescript"}
{"task_id":"MBTSP\/19","completion":"    \/\/ Your code here\n    const set = new Set();\n    for (let i = 0; i < arraynums.length; i++) {\n        if (set.has(arraynums[i])) {\n            return true;\n        }\n        set.add(arraynums[i]);\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBTSP\/20","completion":"    if (x % 2 == 0) {\n        return false;\n    } else {\n        return true;\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/21","completion":"    let result = [];\n    for (let i = 1; i <= m; i++) {\n        result.push(i * n);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/22","completion":"    let map = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        if (map.has(nums[i])) {\n            return nums[i];\n        }\n        map.set(nums[i], 1);\n    }\n    return -1;\n}","language":"typescript"}
{"task_id":"MBTSP\/23","completion":"    let max = 0;\n    for (let i = 0; i < list1.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < list1[i].length; j++) {\n            sum += list1[i][j];\n        }\n        if (sum > max) {\n            max = sum;\n        }\n    }\n    return max;\n}","language":"typescript"}
{"task_id":"MBTSP\/24","completion":"    return parseInt(binary, 2);\n}","language":"typescript"}
{"task_id":"MBTSP\/25","completion":"    let product = 1;\n    for (let i = 0; i < n; i++) {\n        product *= arr[i];\n    }\n    return product;\n}","language":"typescript"}
{"task_id":"MBTSP\/27","completion":"    return list.map(x => x.replace(\/\\d\/g, ''))\n}","language":"typescript"}
{"task_id":"MBTSP\/28","completion":"    if (k > n - k) {\n        k = n - k;\n    }\n    let coeff = 1;\n    for (let i = 1; i <= k; i++) {\n        coeff *= (n - i + 1) \/ i;\n    }\n    return coeff;\n}","language":"typescript"}
{"task_id":"MBTSP\/32","completion":"    let max = 0;\n    let max_prime = 0;\n    for (let i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max = i;\n            for (let j = 2; j < max; j++) {\n                if (max % j == 0) {\n                    max = max \/ j;\n                    break;\n                }\n            }\n            if (max > max_prime) {\n                max_prime = max;\n            }\n        }\n    }\n    return max_prime;\n}","language":"typescript"}
{"task_id":"MBTSP\/33","completion":"    return (N >>> 0).toString(2);\n}","language":"typescript"}
{"task_id":"MBTSP\/34","completion":"    let i = 0;\n    while (i < N) {\n        if (ar[i] != i + 1) {\n            return i + 1;\n        }\n        i++;\n    }\n    return N + 1;\n}","language":"typescript"}
{"task_id":"MBTSP\/37","completion":"    return mixed_list.sort((a, b) => {\n        if (typeof a === 'string' && typeof b === 'string') {\n            return a.localeCompare(b);\n        } else if (typeof a === 'number' && typeof b === 'number') {\n            return a - b;\n        } else {\n            return a.toString().localeCompare(b.toString());\n        }\n    });\n}","language":"typescript"}
{"task_id":"MBTSP\/40","completion":"    const freq = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums[i].length; j++) {\n            if (freq.has(nums[i][j])) {\n                freq.set(nums[i][j], freq.get(nums[i][j]) + 1);\n            } else {\n                freq.set(nums[i][j], 1);\n            }\n        }\n    }\n    return freq;\n}","language":"typescript"}
{"task_id":"MBTSP\/41","completion":"    return nums.filter(x => x % 2 == 0);\n}","language":"typescript"}
{"task_id":"MBTSP\/44","completion":"    if (text.length < 1) return 'Not matched!';\n    if (text.startsWith('python')) return 'Found a match!';\n    return 'Not matched!';\n}","language":"typescript"}
{"task_id":"MBTSP\/45","completion":"    const gcd = (a, b) => {\n        if (b === 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    };\n    return l.reduce((a, b) => gcd(a, b));\n}","language":"typescript"}
{"task_id":"MBTSP\/46","completion":"    return data.every(function(num, index, array) {\n        return array.indexOf(num) === index;\n    });\n}","language":"typescript"}
{"task_id":"MBTSP\/47","completion":"    let lastDigit = 0;\n    let factorial = 1;\n    for (let i = 1; i <= B; i++) {\n        factorial *= i;\n    }\n    for (let i = 1; i <= A; i++) {\n        factorial \/= i;\n        lastDigit = factorial % 10;\n    }\n    return lastDigit;\n}","language":"typescript"}
{"task_id":"MBTSP\/49","completion":"    let result = [];\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums[i].length; j++) {\n            if (j === N) {\n                result.push(nums[i][j]);\n            }\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/50","completion":"    \/\/ TODO: Write your code here\n    return input_list.reduce((acc, cur) => {\n        if (acc[0] > cur.length) {\n            acc[0] = cur.length;\n            acc[1] = cur;\n        }\n        return acc;\n    }, [Infinity, []]);\n}","language":"typescript"}
{"task_id":"MBTSP\/51","completion":"    if (x == y && y == z) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/52","completion":"    return b * h;\n}","language":"typescript"}
{"task_id":"MBTSP\/53","completion":"    return str[0] === str[str.length - 1] ? \"Equal\" : \"Not Equal\";\n}","language":"typescript"}
{"task_id":"MBTSP\/54","completion":"    const max = Math.max(...my_list);\n    const min = Math.min(...my_list);\n    const range = max - min + 1;\n    const count = new Array(range).fill(0);\n    for (let i = 0; i < my_list.length; i++) {\n        count[my_list[i] - min]++;\n    }\n    let result = [];\n    for (let i = 0; i < count.length; i++) {\n        while (count[i] > 0) {\n            result.push(i + min);\n            count[i]--;\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/57","completion":"    let max = 0;\n    for (let i = 0; i < n; i++) {\n        let temp = arr.reduce((acc, cur) => acc * 10 + cur, 0);\n        if (temp > max) {\n            max = temp;\n        }\n    }\n    return max;\n}","language":"typescript"}
{"task_id":"MBTSP\/58","completion":"    return (x * y < 0) ? true : false;\n}","language":"typescript"}
{"task_id":"MBTSP\/62","completion":"    return Math.min(...xs);\n}","language":"typescript"}
{"task_id":"MBTSP\/64","completion":"    return subjectmarks.sort((a,b) => a[1] - b[1]);\n}","language":"typescript"}
{"task_id":"MBTSP\/66","completion":"    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/68","completion":"    if (A.length <= 1) return true;\n    let is_increasing = true;\n    let is_decreasing = true;\n    for (let i = 1; i < A.length; i++) {\n        if (A[i] < A[i - 1]) {\n            is_increasing = false;\n        }\n        if (A[i] > A[i - 1]) {\n            is_decreasing = false;\n        }\n    }\n    return is_increasing || is_decreasing;\n}","language":"typescript"}
{"task_id":"MBTSP\/70","completion":"    let result = 'All tuples have same length';\n    let length = Input.length;\n    for (let i = 0; i < length; i++) {\n        if (Input[i].length != k) {\n            result = 'All tuples do not have same length';\n            break;\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/71","completion":"    const swap = (arr, i, j) => [arr[i], arr[j]] = [arr[j], arr[i]];\n    const comb = (arr, l, r) => {\n        if (l >= r) return;\n        let i = l, j = r;\n        while (i < j) {\n            while (i < j && arr[j] >= arr[l]) j--;\n            if (i < j) swap(arr, i, j);\n            while (i < j && arr[i] <= arr[l]) i++;\n            if (i < j) swap(arr, i, j);\n        }\n        swap(arr, l, i);\n        comb(arr, l, i - 1);\n        comb(arr, i + 1, r);\n    };\n    comb(nums, 0, nums.length - 1);\n    return nums;\n}","language":"typescript"}
{"task_id":"MBTSP\/74","completion":"    if (colors.length != patterns.length) return false;\n    let map = new Map();\n    for (let i = 0; i < colors.length; i++) {\n        if (map.has(patterns[i])) {\n            if (map.get(patterns[i]) != colors[i]) return false;\n        } else {\n            map.set(patterns[i], colors[i]);\n        }\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBTSP\/77","completion":"    let sum = 0;\n    for (let i = 0; i < n.toString().length; i++) {\n        if (i % 2 == 0) {\n            sum += Number(n.toString()[i]);\n        } else {\n            sum -= Number(n.toString()[i]);\n        }\n    }\n    return sum == 0;\n}","language":"typescript"}
{"task_id":"MBTSP\/79","completion":"    return s.length % 2 == 1;\n}","language":"typescript"}
{"task_id":"MBTSP\/86","completion":"    let hexagonal = 1;\n    let counter = 1;\n    while (counter < n) {\n        hexagonal += 6 * counter;\n        counter++;\n    }\n    return hexagonal;\n}","language":"typescript"}
{"task_id":"MBTSP\/88","completion":"    const freq = new Map();\n    for (let i = 0; i < list1.length; i++) {\n        if (freq.has(list1[i])) {\n            freq.set(list1[i], freq.get(list1[i]) + 1);\n        } else {\n            freq.set(list1[i], 1);\n        }\n    }\n    return freq;\n}","language":"typescript"}
{"task_id":"MBTSP\/89","completion":"    let min = N;\n    let min_index = 0;\n    for (let i = 1; i < N; i++) {\n        if (N - i < min) {\n            min = N - i;\n            min_index = i;\n        }\n    }\n    return min_index;\n}","language":"typescript"}
{"task_id":"MBTSP\/90","completion":"    let max = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i].length > max) {\n            max = list1[i].length;\n        }\n    }\n    return max;\n}","language":"typescript"}
{"task_id":"MBTSP\/91","completion":"    let str2 = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        str2 += str1[i];\n        if (str2.includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBTSP\/92","completion":"    let arr = n.split(\"\");\n    let count = 0;\n    let prev = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (prev == arr[i]) {\n            count++;\n        } else {\n            if (count == 1) {\n                return true;\n            } else {\n                count = 1;\n            }\n        }\n        prev = arr[i];\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBTSP\/93","completion":"    if (b == 0) {\n        return 1;\n    }\n    return a * power(a, b - 1);\n}","language":"typescript"}
{"task_id":"MBTSP\/94","completion":"    let min = Number.MAX_SAFE_INTEGER;\n    let min_index = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][1] < min) {\n            min = test_list[i][1];\n            min_index = i;\n        }\n    }\n    return test_list[min_index][0];\n}","language":"typescript"}
{"task_id":"MBTSP\/95","completion":"    let min = Number.MAX_SAFE_INTEGER;\n    for (let i = 0; i < lst.length; i++) {\n        const sub = lst[i];\n        if (sub.length < min) {\n            min = sub.length;\n        }\n    }\n    return min;\n}","language":"typescript"}
{"task_id":"MBTSP\/96","completion":"    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/97","completion":"    const map = new Map();\n    for (const list of list1) {\n        for (const num of list) {\n            if (map.has(num)) {\n                map.set(num, map.get(num) + 1);\n            } else {\n                map.set(num, 1);\n            }\n        }\n    }\n    return map;\n}","language":"typescript"}
{"task_id":"MBTSP\/98","completion":"    return numbers.reduce((acc, cur) => acc * cur, 1) \/ numbers.length;\n}","language":"typescript"}
{"task_id":"MBTSP\/99","completion":"    let result = '';\n    let remainder = 0;\n    while (n > 0) {\n        remainder = n % 2;\n        n = Math.floor(n \/ 2);\n        result = remainder.toString() + result;\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/101","completion":"    return arr[k-1];\n}","language":"typescript"}
{"task_id":"MBTSP\/104","completion":"    return input_list.map(sublist => sublist.sort());\n}","language":"typescript"}
{"task_id":"MBTSP\/105","completion":"    return lst.filter(x => x).length;\n}","language":"typescript"}
{"task_id":"MBTSP\/106","completion":"    return [...test_tup, ...test_list]\n}","language":"typescript"}
{"task_id":"MBTSP\/107","completion":"    let count = 0;\n    for (let i = L; i <= R; i++) {\n        if (i.toString(16).toUpperCase().match(\/[A-F]\/g)) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/112","completion":"    return 2 * (diameter + height);\n}","language":"typescript"}
{"task_id":"MBTSP\/113","completion":"    return \/^-?\\d+$\/.test(text);\n}","language":"typescript"}
{"task_id":"MBTSP\/114","completion":"    const freq = {};\n    for (let i = 0; i < test_list.length; i++) {\n        const tuple = test_list[i];\n        for (let j = 0; j < tuple.length; j++) {\n            const num = tuple[j];\n            if (freq[num] === undefined) {\n                freq[num] = 1;\n            } else {\n                freq[num] += 1;\n            }\n        }\n    }\n    const result = [];\n    for (let i = 0; i < test_list.length; i++) {\n        const tuple = test_list[i];\n        const freq_tuple = [];\n        for (let j = 0; j < tuple.length; j++) {\n            const num = tuple[j];\n            freq_tuple.push(freq[num]);\n        }\n        result.push(freq_tuple);\n    }\n    return JSON.","language":"typescript"}
{"task_id":"MBTSP\/116","completion":"    return nums.reduce((acc, val) => acc * 10 + val, 0);\n}","language":"typescript"}
{"task_id":"MBTSP\/118","completion":"    return string0.split(' ');\n}","language":"typescript"}
{"task_id":"MBTSP\/120","completion":"  const list2 = [];\n  for (const [a, b] of list1) {\n    list2.push(a * b);\n  }\n  return Math.max(...list2);\n}","language":"typescript"}
{"task_id":"MBTSP\/121","completion":"    let found = false;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if (A[i] + A[j] + A[k] == sum) {\n                    found = true;\n                    count++;\n                    break;\n                }\n            }\n            if (found) {\n                break;\n            }\n        }\n        if (found) {\n            break;\n        }\n    }\n    return found;\n}","language":"typescript"}
{"task_id":"MBTSP\/126","completion":"    let sum = 0;\n    for (let i = 1; i <= Math.min(a, b); i++) {\n        if (a % i == 0 && b % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/127","completion":"    return x * y;\n}","language":"typescript"}
{"task_id":"MBTSP\/128","completion":"    return str.split(\" \").filter(x => x.length > n);\n}","language":"typescript"}
{"task_id":"MBTSP\/129","completion":"  const sum_matrix = (matrix: Array<Array<number>>) => {\n    let sum = 0;\n    for (let i = 0; i < matrix.length; i++) {\n      for (let j = 0; j < matrix[i].length; j++) {\n        sum += matrix[i][j];\n      }\n    }\n    return sum;\n  };\n  const sum_diagonal = (matrix: Array<Array<number>>) => {\n    let sum = 0;\n    for (let i = 0; i < matrix.length; i++) {\n      sum += matrix[i][i];\n    }\n    return sum;\n  };\n  const sum_anti_diagonal = (matrix: Array<Array<number>>) => {\n    let sum = 0;\n    for (let i = 0; i < matrix.length; i++) {\n      sum += matrix[i][matrix.","language":"typescript"}
{"task_id":"MBTSP\/130","completion":"    const freq = {};\n    let max = 0;\n    let max_key = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (freq[nums[i]] === undefined) {\n            freq[nums[i]] = 1;\n        } else {\n            freq[nums[i]]++;\n        }\n        if (freq[nums[i]] > max) {\n            max = freq[nums[i]];\n            max_key = nums[i];\n        }\n    }\n    return [max_key, max];\n}","language":"typescript"}
{"task_id":"MBTSP\/132","completion":"    return tup1.join(\"\");\n}","language":"typescript"}
{"task_id":"MBTSP\/133","completion":"    return nums.reduce((acc, num) => acc + (num < 0 ? num : 0), 0);\n}","language":"typescript"}
{"task_id":"MBTSP\/134","completion":"    let count = 0;\n    let result = \"EVEN\";\n    for (let i = 0; i < arr.length; i++) {\n        count = count + 1;\n        if (count == p) {\n            result = \"ODD\";\n            count = 0;\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/135","completion":"    return n * (2 * n - 1);\n}","language":"typescript"}
{"task_id":"MBTSP\/140","completion":"    const result = [];\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list[i].length; j++) {\n            if (result.indexOf(test_list[i][j]) === -1) {\n                result.push(test_list[i][j]);\n            }\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/141","completion":"    const len = nums.length;\n    let index = 0;\n    while (index < len) {\n        let maxIndex = index;\n        for (let i = index + 1; i < len; i++) {\n            if (nums[maxIndex] > nums[i]) {\n                maxIndex = i;\n            }\n        }\n        if (maxIndex != index) {\n            const temp = nums[index];\n            nums[index] = nums[maxIndex];\n            nums[maxIndex] = temp;\n        }\n        index++;\n    }\n    return nums;\n}","language":"typescript"}
{"task_id":"MBTSP\/142","completion":"    \/\/ 1. find the common element in the three lists\n    \/\/ 2. find the number of same element in the three lists\n    \/\/ 3. return the number of same element\n    let common = 0;\n    let same = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list2[i] && list1[i] === list3[i]) {\n            common = list1[i];\n            same += 1;\n        }\n    }\n    return same;\n}","language":"typescript"}
{"task_id":"MBTSP\/144","completion":"    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            sum += Math.abs(arr[i] - arr[j]);\n        }\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/145","completion":"    let maxDiff = -Infinity;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            maxDiff = Math.max(Math.abs(arr[i] - arr[j]), maxDiff);\n        }\n    }\n    return maxDiff;\n}","language":"typescript"}
{"task_id":"MBTSP\/150","completion":"    return (b - a + 1) * (c - a + 1) > 0;\n}","language":"typescript"}
{"task_id":"MBTSP\/151","completion":"    if (x < 2 || y < 2) {\n        return false;\n    }\n    if (x == 2 || y == 2) {\n        return true;\n    }\n    if (x % 2 == 0 || y % 2 == 0) {\n        return false;\n    }\n    for (let i = 3; i <= Math.sqrt(x) || i <= Math.sqrt(y); i += 2) {\n        if (x % i == 0 && y % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBTSP\/154","completion":"    return nums.map(x => x[N])\n}","language":"typescript"}
{"task_id":"MBTSP\/156","completion":"    return tuple_str.map(tuple => tuple.map(Number));\n}","language":"typescript"}
{"task_id":"MBTSP\/157","completion":"    let result = [];\n    let count = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] == list1[i + 1]) {\n            count++;\n        } else {\n            result.push([count, list1[i]]);\n            count = 1;\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/161","completion":"    const result = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (!list2.includes(list1[i])) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/162","completion":"    if (n < 0) return 0;\n    if (n == 0) return 0;\n    return n + sum_series(n - 2);\n}","language":"typescript"}
{"task_id":"MBTSP\/167","completion":"    if (n < 1) {\n        return 1;\n    }\n    let result = 1;\n    while (result < n) {\n        result *= 2;\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/168","completion":"    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/170","completion":"    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return list1[m];\n    }\n    let sum = 0;\n    for (let i = m; i <= n; i++) {\n        sum += list1[i];\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/173","completion":"    return text.replace(\/[^a-zA-Z0-9]\/g, '');\n}","language":"typescript"}
{"task_id":"MBTSP\/174","completion":"    const map = new Map();\n    for (const [key, value] of l) {\n        if (map.has(key)) {\n            map.get(key).push(value);\n        } else {\n            map.set(key, [value]);\n        }\n    }\n    return map;\n}","language":"typescript"}
{"task_id":"MBTSP\/175","completion":"    const stack = [];\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] === '(' || str1[i] === '{' || str1[i] === '[') {\n            stack.push(str1[i]);\n        } else {\n            if (stack.length === 0) {\n                return false;\n            }\n            const last = stack.pop();\n            if (str1[i] === ')' && last !== '(') {\n                return false;\n            }\n            if (str1[i] === '}' && last !== '{') {\n                return false;\n            }\n            if (str1[i] === ']' && last !== '[') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n};\n\nmodule.exports = is_valid_parenthese;","language":"typescript"}
{"task_id":"MBTSP\/176","completion":"    return a + b + c;\n}","language":"typescript"}
{"task_id":"MBTSP\/178","completion":"    let result = 'Not Matched!'\n    for (let i = 0; i < patterns.length; i++) {\n        if (text.includes(patterns[i])) {\n            result = 'Matched!'\n            break;\n        }\n    }\n    return result\n}","language":"typescript"}
{"task_id":"MBTSP\/181","completion":"    let i = 0;\n    while (i < str1.length && i < str2.length && str1[i] === str2[i]) {\n        i++;\n    }\n    return str1.slice(0, i);\n}","language":"typescript"}
{"task_id":"MBTSP\/183","completion":"    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (Math.abs(arr[i] - arr[j]) == k) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/184","completion":"    return list.every(item => item > num)\n}","language":"typescript"}
{"task_id":"MBTSP\/186","completion":"    const regex = new RegExp(patterns.join('|'),'gi');\n    return regex.test(text) ? 'Matched!' : 'Not Matched!';\n}","language":"typescript"}
{"task_id":"MBTSP\/187","completion":"    const dp = new Array(m + 1).fill(null).map(() => new Array(n + 1).fill(0));\n    for (let i = 1; i <= m; i++) {\n        for (let j = 1; j <= n; j++) {\n            if (X[i - 1] === Y[j - 1]) {\n                dp[i][j] = 1 + dp[i - 1][j - 1];\n            } else {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return dp[m][n];\n}","language":"typescript"}
{"task_id":"MBTSP\/188","completion":"    let sqrt = Math.sqrt(n);\n    return sqrt % 1 === 0 && sqrt % 2 === 0;\n}","language":"typescript"}
{"task_id":"MBTSP\/189","completion":"    \/\/ 1. find the first positive number\n    \/\/ 2. find the first missing positive number\n    \/\/ 3. return the missing number\n    let firstPositive = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] > 0 && arr[i] <= n && arr[i] != i + 1) {\n            firstPositive = arr[i];\n            break;\n        }\n    }\n    let firstMissing = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] > 0 && arr[i] <= n && arr[i] != i + 1) {\n            firstMissing = i + 1;\n            break;\n        }\n    }\n    return firstMissing;\n}","language":"typescript"}
{"task_id":"MBTSP\/191","completion":"    if (monthname3 === \"April\" || monthname3 === \"June\" || monthname3 === \"September\" || monthname3 === \"November\") {\n        return true;\n    }\n    else {\n        return false;\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/192","completion":"    return \/[a-zA-Z]\/.test(str) && \/[0-9]\/.test(str);\n}","language":"typescript"}
{"task_id":"MBTSP\/194","completion":"    return parseInt(n, 8);\n}","language":"typescript"}
{"task_id":"MBTSP\/195","completion":"    let left = 0;\n    let right = arr.length - 1;\n    while (left <= right) {\n        const mid = Math.floor((left + right) \/ 2);\n        if (arr[mid] === x) {\n            if (mid === 0 || arr[mid - 1] !== x) {\n                return mid;\n            }\n            right = mid - 1;\n        } else if (arr[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return -1;\n}","language":"typescript"}
{"task_id":"MBTSP\/196","completion":"    const result = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i].length != K) {\n            result.push(test_list[i]);\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/197","completion":"    const result = [];\n    for (let i = 0; i < test_tup1.length; i++) {\n        result.push(Math.pow(test_tup1[i], test_tup2[i]));\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/199","completion":"    return Math.pow(2, Math.floor(Math.log2(n)))\n}","language":"typescript"}
{"task_id":"MBTSP\/201","completion":"    return lst.length == lst.filter(x => x == lst[0]).length;\n}","language":"typescript"}
{"task_id":"MBTSP\/202","completion":"    let newStr = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (i % 2 == 0) {\n            newStr += str1[i];\n        }\n    }\n    return newStr;\n}","language":"typescript"}
{"task_id":"MBTSP\/203","completion":"    return (n1 ^ n2).toString(2).split('').filter(x => x === '1').length;\n}","language":"typescript"}
{"task_id":"MBTSP\/204","completion":"    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] == c) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/206","completion":"    let result = [];\n    for (let i = 0; i < test_tup.length - 1; i++) {\n        result.push(test_tup[i] + test_tup[i + 1]);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/208","completion":"    return \/^-?\\d+\\.\\d{2}$\/.test(num);\n}","language":"typescript"}
{"task_id":"MBTSP\/209","completion":"    const heap_copy = [...heap]\n    const heap_size = heap_copy.length\n    const heap_min = heap_copy[0]\n    if (heap_min > a) {\n        heap_copy[0] = a\n        heapify(heap_copy, heap_size)\n    }\n    return heap_copy\n}","language":"typescript"}
{"task_id":"MBTSP\/210","completion":"    const regex = \/^[a-z0-9]+$\/i;\n    return regex.test(string0);\n}","language":"typescript"}
{"task_id":"MBTSP\/211","completion":"    return (n & 1) + (n >> 1 & 1) + (n >> 2 & 1) + (n >> 3 & 1) + (n >> 4 & 1) + (n >> 5 & 1) + (n >> 6 & 1) + (n >> 7 & 1);\n}","language":"typescript"}
{"task_id":"MBTSP\/214","completion":"    return radian * (180 \/ Math.PI)\n}","language":"typescript"}
{"task_id":"MBTSP\/217","completion":"    let map = new Map();\n    for (let i = 0; i < str.length; i++) {\n        if (map.has(str[i])) {\n            return str[i];\n        }\n        map.set(str[i], 1);\n    }\n    return '\\0';\n}","language":"typescript"}
{"task_id":"MBTSP\/221","completion":"    let even = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 == 0) {\n            even = nums[i];\n            break;\n        }\n    }\n    return even;\n}","language":"typescript"}
{"task_id":"MBTSP\/222","completion":"    return test_tuple.every(x => typeof x === \"number\");\n}","language":"typescript"}
{"task_id":"MBTSP\/223","completion":"    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    return count > Math.floor(n \/ 2);\n}","language":"typescript"}
{"task_id":"MBTSP\/224","completion":"    let count = 0;\n    while (n > 0) {\n        n = n & (n - 1);\n        count++;\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/225","completion":"    if (low > high) return -1;\n    let mid = Math.floor((low + high) \/ 2);\n    if (mid == 0 || mid == arr.length - 1) return arr[mid];\n    if (arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1]) return arr[mid];\n    if (arr[mid] < arr[mid - 1]) return find_Min(arr, mid + 1, high);\n    return find_Min(arr, low, mid - 1);\n}","language":"typescript"}
{"task_id":"MBTSP\/226","completion":"    let result = '';\n    for (let i = 0; i < str.length; i++) {\n        if (i % 2 === 0) {\n            result += str[i];\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/227","completion":"    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/228","completion":"    \/\/ 1. convert the number to binary\n    \/\/ 2. convert the binary to integer\n    \/\/ 3. check if the integer is in the range\n    \/\/ 4. convert the integer to binary again\n    \/\/ 5. check if the binary is all 0\n    \/\/ 6. return the result\n    return (n.toString(2).split(\"\").filter(x => x === \"0\").length === (r - l + 1))\n}","language":"typescript"}
{"task_id":"MBTSP\/229","completion":"    const result = [];\n    let start = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            result.push(arr[i]);\n            start = i + 1;\n        }\n    }\n    for (let i = start; i < n; i++) {\n        result.push(arr[i]);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/230","completion":"    let str = '';\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] === ' ') {\n            str += char;\n        } else {\n            str += str1[i];\n        }\n    }\n    return str;\n}","language":"typescript"}
{"task_id":"MBTSP\/232","completion":"    const list2 = list1.sort((a, b) => b - a);\n    return list2.slice(0, n);\n}","language":"typescript"}
{"task_id":"MBTSP\/234","completion":"    return l * l * l;\n}","language":"typescript"}
{"task_id":"MBTSP\/238","completion":"    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        for (let j = i + 1; j <= str.length; j++) {\n            if (str.substring(i, j).length > 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/242","completion":"    return str1.length;\n}","language":"typescript"}
{"task_id":"MBTSP\/248","completion":"    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += 1 \/ i;\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/249","completion":"    return array_nums1.filter(x => array_nums2.includes(x));\n}","language":"typescript"}
{"task_id":"MBTSP\/250","completion":"    let count = 0;\n    for (let i = 0; i < tup.length; i++) {\n        if (tup[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/251","completion":"    const newList = [];\n    for (let i = 0; i < list.length; i++) {\n        newList.push(element);\n        newList.push(list[i]);\n    }\n    return newList;\n}","language":"typescript"}
{"task_id":"MBTSP\/253","completion":"    return list1.filter(x => Number.isInteger(x)).length;\n}","language":"typescript"}
{"task_id":"MBTSP\/257","completion":"    return [b, a];\n}","language":"typescript"}
{"task_id":"MBTSP\/258","completion":"    return array_nums.filter(x => x % 2 != 0).length;\n}","language":"typescript"}
{"task_id":"MBTSP\/262","completion":"    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}","language":"typescript"}
{"task_id":"MBTSP\/269","completion":"    return k.charCodeAt(0);\n}","language":"typescript"}
{"task_id":"MBTSP\/270","completion":"    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] % 2 == 0 && i % 2 == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/272","completion":"    \/\/ code here\n    let arr = [];\n    for (let i = 0; i < test_list.length; i++) {\n        arr.push(test_list[i][2]);\n    }\n    return arr;\n}","language":"typescript"}
{"task_id":"MBTSP\/273","completion":"    let result = [];\n    for (let i = 0; i < test_tup1.length; i++) {\n        result.push(test_tup1[i] - test_tup2[i]);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/281","completion":"    if (test_list.length == 0) {\n        return true;\n    }\n    else {\n        for (let i = 0; i < test_list.length; i++) {\n            for (let j = i + 1; j < test_list.length; j++) {\n                if (test_list[i] == test_list[j]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/282","completion":"    return nums1.map((x, i) => x - nums2[i]);\n}","language":"typescript"}
{"task_id":"MBTSP\/283","completion":"    const freq = {};\n    for (let i = 0; i < n.toString().length; i++) {\n        const digit = n.toString()[i];\n        freq[digit] = (freq[digit] || 0) + 1;\n    }\n    for (let key in freq) {\n        if (freq[key] > 1) {\n            return false;\n        }\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBTSP\/284","completion":"    return list.every(x => x === element);\n}","language":"typescript"}
{"task_id":"MBTSP\/290","completion":"    let max_length = 0;\n    let max_list = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i].length > max_length) {\n            max_length = list1[i].length;\n            max_list = list1[i];\n        }\n    }\n    return [max_length, max_list];\n}","language":"typescript"}
{"task_id":"MBTSP\/296","completion":"    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/297","completion":"    const result = [];\n    const flat = (list2: Array<any>) => {\n        for (let i = 0; i < list2.length; i++) {\n            if (Array.isArray(list2[i])) {\n                flat(list2[i]);\n            } else {\n                result.push(list2[i]);\n            }\n        }\n    };\n    flat(list1);\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/302","completion":"    let mask = 1;\n    let max = 0;\n    while (mask <= n) {\n        if ((n & mask) == mask) {\n            max = mask;\n        }\n        mask = mask << 1;\n    }\n    return max;\n}","language":"typescript"}
{"task_id":"MBTSP\/303","completion":"    let i = 0;\n    let j = n - 1;\n    while (i < j) {\n        if (a[i] > a[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBTSP\/309","completion":"    return a > b ? a : b;\n}","language":"typescript"}
{"task_id":"MBTSP\/316","completion":"    let left = 0;\n    let right = A.length - 1;\n    let mid = 0;\n    while (left <= right) {\n        mid = Math.floor((left + right) \/ 2);\n        if (A[mid] === x) {\n            if (mid === A.length - 1 || A[mid + 1] !== x) {\n                return mid;\n            }\n            left = mid + 1;\n        } else if (A[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return -1;\n}","language":"typescript"}
{"task_id":"MBTSP\/320","completion":"    let sum = 0;\n    let sum_of_squares = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n        sum_of_squares += i * i;\n    }\n    return Math.pow(sum, 2) - sum_of_squares;\n}","language":"typescript"}
{"task_id":"MBTSP\/323","completion":"    const result = [];\n    let negative = 0;\n    let positive = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            negative++;\n        } else {\n            positive++;\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        if (negative > positive) {\n            result[i] = arr[i] * -1;\n        } else {\n            result[i] = arr[i];\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/325","completion":"    const dp = new Array(n + 1).fill(0);\n    dp[0] = 0;\n    for (let i = 1; i <= n; i++) {\n        dp[i] = Infinity;\n        for (let j = 1; j * j <= i; j++) {\n            dp[i] = Math.min(dp[i], dp[i - j * j] + 1);\n        }\n    }\n    return dp[n];\n}","language":"typescript"}
{"task_id":"MBTSP\/327","completion":"    return (x === y || x === z || y === z) ? true : false;\n}","language":"typescript"}
{"task_id":"MBTSP\/329","completion":"    return list.filter(x => x < 0).length;\n}","language":"typescript"}
{"task_id":"MBTSP\/332","completion":"    let map = new Map<string, number>();\n    for (let i = 0; i < str1.length; i++) {\n        if (map.has(str1[i])) {\n            map.set(str1[i], map.get(str1[i]) + 1);\n        } else {\n            map.set(str1[i], 1);\n        }\n    }\n    return map;\n}","language":"typescript"}
{"task_id":"MBTSP\/333","completion":"    return sub_li.sort((a, b) => a[1] - b[1]);\n}","language":"typescript"}
{"task_id":"MBTSP\/334","completion":"    return (a + b > c) && (a + c > b) && (b + c > a);\n}","language":"typescript"}
{"task_id":"MBTSP\/335","completion":"    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += (i * d + a);\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/336","completion":"    if (monthname1 == \"February\") {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/341","completion":"    return Array.from(s).sort((a, b) => a - b);\n}","language":"typescript"}
{"task_id":"MBTSP\/343","completion":"    const dig = s.split(\"\").filter(x => x.match(\/[a-zA-Z]\/)).length;\n    const let_ = s.split(\"\").filter(x => x.match(\/[0-9]\/)).length;\n    return [dig, let_];\n}","language":"typescript"}
{"task_id":"MBTSP\/349","completion":"    let string = string0.split(\"\").reverse().join(\"\");\n    if (string == string0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/350","completion":"    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s.indexOf(s[i]) == s.lastIndexOf(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/351","completion":"    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (count >= k) {\n            return arr[i - k];\n        }\n        count++;\n    }\n    return -1;\n}","language":"typescript"}
{"task_id":"MBTSP\/352","completion":"    if (str.length < 2) {\n        return true;\n    }\n    let char_set = new Set();\n    for (let i = 0; i < str.length; i++) {\n        if (char_set.has(str[i])) {\n            return false;\n        }\n        char_set.add(str[i]);\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBTSP\/354","completion":"    if (n == 0) {\n        return 0;\n    }\n    else if (n == 1) {\n        return a;\n    }\n    else if (n == 2) {\n        return a + d;\n    }\n    else {\n        return tn_ap(a + d, n - 1, d);\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/356","completion":"    const c = 180 - a - b;\n    return c > 180 ? c - 360 : c;\n}","language":"typescript"}
{"task_id":"MBTSP\/357","completion":"    let max = -Infinity;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list[i].length; j++) {\n            if (test_list[i][j] > max) {\n                max = test_list[i][j];\n            }\n        }\n    }\n    return max;\n}","language":"typescript"}
{"task_id":"MBTSP\/358","completion":"    return nums1.map((num1, i) => num1 % nums2[i])\n}","language":"typescript"}
{"task_id":"MBTSP\/361","completion":"    let result = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i].length > 0) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/362","completion":"    const map = new Map();\n    let max = 0;\n    let maxOccurrence = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (map.has(nums[i])) {\n            map.set(nums[i], map.get(nums[i]) + 1);\n        } else {\n            map.set(nums[i], 1);\n        }\n        if (map.get(nums[i]) > max) {\n            max = map.get(nums[i]);\n            maxOccurrence = nums[i];\n        }\n    }\n    return maxOccurrence;\n}","language":"typescript"}
{"task_id":"MBTSP\/363","completion":"    const result = [];\n    for (let i = 0; i < test_list.length; i++) {\n        result.push(test_list[i].map(x => x + K));\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/364","completion":"    let count = 0;\n    let flip = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === str[i + 1]) {\n            flip++;\n        } else {\n            flip = 0;\n        }\n        if (flip === 1) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/365","completion":"    return n.toString().length;\n}","language":"typescript"}
{"task_id":"MBTSP\/366","completion":"    let max_product = 0;\n    for (let i = 0; i < list_nums.length - 1; i++) {\n        max_product = Math.max(max_product, list_nums[i] * list_nums[i + 1]);\n    }\n    return max_product;\n}","language":"typescript"}
{"task_id":"MBTSP\/368","completion":"    let res = [];\n    for (let i = 0; i < N; i++) {\n        res.push(test_tup);\n    }\n    return res;\n}","language":"typescript"}
{"task_id":"MBTSP\/373","completion":"    return l * w * h;\n}","language":"typescript"}
{"task_id":"MBTSP\/376","completion":"    const seen = new Set();\n    const res = [];\n    for (const el of test_tup) {\n        if (!seen.has(el)) {\n            seen.add(el);\n            res.push(el);\n        } else {\n            res.push('MSP');\n        }\n    }\n    return res;\n}","language":"typescript"}
{"task_id":"MBTSP\/377","completion":"    return s.replace(new RegExp(c, 'g'), '');\n}","language":"typescript"}
{"task_id":"MBTSP\/378","completion":"    return [test_list[test_list.length - 1], ...test_list.slice(0, test_list.length - 1)]\n}","language":"typescript"}
{"task_id":"MBTSP\/379","completion":"    return 2 * (l * w + w * h + h * l);\n}","language":"typescript"}
{"task_id":"MBTSP\/382","completion":"    let start = 0;\n    let end = A.length - 1;\n    let mid = 0;\n    while (start <= end) {\n        mid = Math.floor((start + end) \/ 2);\n        if (A[mid] > A[mid + 1]) {\n            return mid + 1;\n        } else if (A[mid] < A[mid - 1]) {\n            return mid;\n        } else if (A[mid] > A[0]) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n    }\n    return 0;\n}","language":"typescript"}
{"task_id":"MBTSP\/384","completion":"    let min = arr[0];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            count = 1;\n        } else if (arr[i] == min) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/386","completion":"    let count = 0;\n    let temp = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === '[') {\n            temp++;\n        } else if (s[i] === ']') {\n            temp--;\n        }\n        if (temp < 0) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/387","completion":"    let num = parseInt(N, 16);\n    if (num % 2 == 0) {\n        return \"Even\";\n    } else {\n        return \"Odd\";\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/388","completion":"    return Math.pow(2, Math.floor(Math.log2(n)))\n}","language":"typescript"}
{"task_id":"MBTSP\/389","completion":"    if (n < 2) return n;\n    let a = 2;\n    let b = 1;\n    let c = 0;\n    for (let i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return c;\n}","language":"typescript"}
{"task_id":"MBTSP\/390","completion":"    let result = [];\n    for (let i = 0; i < list.length; i++) {\n        result.push(string0.replace('{0}', list[i]));\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/391","completion":"    let result = [];\n    for (let i = 0; i < l1.length; i++) {\n        result.push(new Map([\n            [l1[i], new Map([\n                [l2[i], l3[i]]\n            ])]\n        ]));\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/393","completion":"    return input_list.reduce((acc, cur) => {\n        if (acc[1] === undefined || cur.length > acc[1].length) {\n            acc[0] = cur.length;\n            acc[1] = cur;\n        }\n        return acc;\n    }, [0, undefined]);\n}","language":"typescript"}
{"task_id":"MBTSP\/394","completion":"    \/\/ Your code here\n    const set = new Set(test_tup);\n    return set.size === test_tup.length;\n}","language":"typescript"}
{"task_id":"MBTSP\/395","completion":"    const map = new Map();\n    for (let i = 0; i < str1.length; i++) {\n        if (map.has(str1[i])) {\n            map.set(str1[i], map.get(str1[i]) + 1);\n        } else {\n            map.set(str1[i], 1);\n        }\n    }\n    for (let i = 0; i < str1.length; i++) {\n        if (map.get(str1[i]) === 1) {\n            return str1[i];\n        }\n    }\n    return null;\n}","language":"typescript"}
{"task_id":"MBTSP\/397","completion":"    \/\/ write code here\n    let arr = [a,b,c];\n    arr.sort();\n    if (arr.length % 2 == 0) {\n        return (arr[arr.length \/ 2 - 1] + arr[arr.length \/ 2]) \/ 2;\n    } else {\n        return arr[Math.floor(arr.length \/ 2)];\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/399","completion":"    \/\/ Your code here\n    return test_tup1.map((x, i) => x ^ test_tup2[i]);\n}","language":"typescript"}
{"task_id":"MBTSP\/401","completion":"    const result = [];\n    for (let i = 0; i < test_tup1.length; i++) {\n        const temp = [];\n        for (let j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/402","completion":"    let ncr = 1;\n    for (let i = 1; i <= r; i++) {\n        ncr = ncr * (n - i + 1) \/ i;\n    }\n    return ncr % p;\n}","language":"typescript"}
{"task_id":"MBTSP\/403","completion":"    return \/^https?:\\\/\\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\/\/=]*)\/.test(str);\n}","language":"typescript"}
{"task_id":"MBTSP\/404","completion":"    if (a < b) {\n        return a;\n    } else {\n        return b;\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/405","completion":"    for (let i = 0; i < tuplex.length; i++) {\n        if (tuplex[i] == tuple1) {\n            return true;\n        }\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBTSP\/406","completion":"    if (x % 2 == 0) {\n        return \"Even Parity\";\n    } else {\n        return \"Odd Parity\";\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/409","completion":"    \/\/ 1. sort the list\n    list1.sort((a, b) => a[0] - b[0]);\n    \/\/ 2. find the product of the first two elements\n    let product = list1[0][0] * list1[0][1];\n    \/\/ 3. iterate through the list and find the product of the first and second element\n    for (let i = 1; i < list1.length; i++) {\n        product = Math.min(product, list1[i][0] * list1[i][1]);\n    }\n    return product;\n}","language":"typescript"}
{"task_id":"MBTSP\/412","completion":"    return l.filter(x => x % 2 == 0);\n}","language":"typescript"}
{"task_id":"MBTSP\/413","completion":"    return list1.map(x => x[n]);\n}","language":"typescript"}
{"task_id":"MBTSP\/414","completion":"    let i = 0;\n    let j = 0;\n    while (i < list1.length && j < list2.length) {\n        if (list1[i] === list2[j]) {\n            i++;\n            j++;\n        } else if (list1[i] < list2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return i === list1.length && j === list2.length;\n}","language":"typescript"}
{"task_id":"MBTSP\/415","completion":"    let max = -Infinity;\n    let max_pair = [];\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            let product = arr[i] * arr[j];\n            if (product > max) {\n                max = product;\n                max_pair = [arr[i], arr[j]];\n            }\n        }\n    }\n    return max_pair;\n}","language":"typescript"}
{"task_id":"MBTSP\/417","completion":"    const result = [];\n    const map = new Map();\n    Input.forEach(tuple => {\n        if (map.has(tuple[0])) {\n            const arr = map.get(tuple[0]);\n            arr.push(tuple[1]);\n            map.set(tuple[0], arr);\n        } else {\n            map.set(tuple[0], [tuple[1]]);\n        }\n    });\n    map.forEach((value, key) => {\n        if (value.length > 1) {\n            result.push([key, ...value]);\n        } else {\n            result.push([key, value[0]]);\n        }\n    });\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/418","completion":"    if (lst.length === 0) {\n        return [];\n    }\n    let max = lst[0];\n    let maxLen = 1;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length > maxLen) {\n            max = lst[i];\n            maxLen = max.length;\n        }\n    }\n    return max;\n}","language":"typescript"}
{"task_id":"MBTSP\/419","completion":"    let sum = 0;\n    let rounded = 0;\n    for (let i = 0; i < list1.length; i++) {\n        rounded = Math.round(list1[i]);\n        sum += rounded;\n    }\n    return sum * list1.length;\n}","language":"typescript"}
{"task_id":"MBTSP\/421","completion":"    \/\/ your code here\n    let result = \"\"\n    for (let i = 0; i < test_tup.length; i++) {\n        if (i == test_tup.length - 1) {\n            result += test_tup[i]\n        } else {\n            result += test_tup[i] + \"-\"\n        }\n    }\n    return result\n}","language":"typescript"}
{"task_id":"MBTSP\/422","completion":"    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += Math.pow(i, 3);\n    }\n    return sum \/ n;\n}","language":"typescript"}
{"task_id":"MBTSP\/424","completion":"    \/\/ TODO: Define and implement your solution here\n    \/\/ Begin solution\n    const result = [];\n    for (let i = 0; i < test_tuple.length; i++) {\n        result.push(test_tuple[i][test_tuple[i].length - 1]);\n    }\n    return result;\n    \/\/ End solution\n}","language":"typescript"}
{"task_id":"MBTSP\/425","completion":"    let count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i].includes(x)) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/426","completion":"    return nums.filter(num => num % 2 != 0);\n}","language":"typescript"}
{"task_id":"MBTSP\/427","completion":"    const regex = \/(\\d{4})-(\\d{2})-(\\d{2})\/;\n    const [_, year, month, day] = dt.match(regex);\n    return `${day}-${month}-${year}`;\n}","language":"typescript"}
{"task_id":"MBTSP\/428","completion":"    let n = my_list.length;\n    let h = 1;\n    while (h < n \/ 3) {\n        h = 3 * h + 1;\n    }\n    while (h >= 1) {\n        for (let i = h; i < n; i++) {\n            for (let j = i; j >= h && my_list[j] < my_list[j - h]; j -= h) {\n                [my_list[j], my_list[j - h]] = [my_list[j - h], my_list[j]];\n            }\n        }\n        h = Math.floor(h \/ 3);\n    }\n    return my_list;\n}","language":"typescript"}
{"task_id":"MBTSP\/429","completion":"    let result = [];\n    for (let i = 0; i < test_tup1.length; i++) {\n        result.push(test_tup1[i] & test_tup2[i]);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/432","completion":"    const [base1, base2] = [base1, base2].sort((a, b) => a - b);\n    const height = (base1 + base2) \/ 2;\n    return height;\n}","language":"typescript"}
{"task_id":"MBTSP\/433","completion":"    if (number0 > arr[0] && number0 > arr[1] && number0 > arr[2] && number0 > arr[3] && number0 > arr[4]) {\n        return 'Yes, the entered number is greater than those in the array';\n    } else {\n        return 'No, entered number is less than those in the array';\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/434","completion":"    if (text.match(\/a\/g) && text.match(\/b\/g)) {\n        return 'Found a match!'\n    } else {\n        return 'Not matched!'\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/435","completion":"    return n % 10;\n}","language":"typescript"}
{"task_id":"MBTSP\/437","completion":"    let result = '';\n    for (let i = 0; i < str1.length; i++) {\n        if (i % 2 != 0) {\n            result += str1[i];\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/441","completion":"    return 6 * l * l;\n}","language":"typescript"}
{"task_id":"MBTSP\/443","completion":"    return list1.reduce((acc, val) => {\n        if (val < 0) {\n            acc = val\n        }\n        return acc\n    }, 0)\n}","language":"typescript"}
{"task_id":"MBTSP\/445","completion":"    const result = [];\n    for (let i = 0; i < test_tup1.length; i++) {\n        const temp = [];\n        for (let j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] * test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/446","completion":"    let count = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < tup.length; j++) {\n            if (lst[i] == tup[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/447","completion":"    return nums.map(num => num ** 3);\n}","language":"typescript"}
{"task_id":"MBTSP\/451","completion":"    return text1.replace(\/\\s\/g, '');\n}","language":"typescript"}
{"task_id":"MBTSP\/452","completion":"    if (sale_amount > actual_cost) {\n        return sale_amount - actual_cost;\n    } else {\n        return undefined;\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/454","completion":"    const pattern = \/z\/g;\n    const match = pattern.exec(text);\n    if (match === null) {\n        return \"Not matched!\";\n    }\n    return `Found a match!`;\n}","language":"typescript"}
{"task_id":"MBTSP\/455","completion":"    if (monthnum2 == 2) {\n        return (31 == (new Date(2020, monthnum2, 0)).getDate());\n    } else {\n        return (31 == (new Date(2020, monthnum2, 0)).getDate());\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/457","completion":"    let min = lst[0];\n    let min_index = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min.length) {\n            min = lst[i];\n            min_index = i;\n        }\n    }\n    return min;\n}","language":"typescript"}
{"task_id":"MBTSP\/458","completion":"    return l * b;\n}","language":"typescript"}
{"task_id":"MBTSP\/459","completion":"    return str1.replace(\/([A-Z])\/g, '');\n}","language":"typescript"}
{"task_id":"MBTSP\/460","completion":"    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        result.push(lst[i][0]);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/463","completion":"    if (arr.length === 0) return 0;\n    let max = arr[0];\n    let min = arr[0];\n    let result = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        let temp = max;\n        max = Math.max(max * arr[i], min * arr[i], arr[i]);\n        min = Math.min(temp * arr[i], min * arr[i], arr[i]);\n        result = Math.max(result, max);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/466","completion":"    if (low > high) return -1;\n    if (n == 1) return low;\n    let mid = Math.floor((low + high) \/ 2);\n    if (mid == 0 || mid == n - 1) return mid;\n    if (arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1]) return mid;\n    if (arr[mid] < arr[mid - 1]) return find_peak(arr, low, mid - 1, n);\n    return find_peak(arr, mid + 1, high, n);\n}","language":"typescript"}
{"task_id":"MBTSP\/467","completion":"    return (deciNum >>> 0).toString(8);\n}","language":"typescript"}
{"task_id":"MBTSP\/469","completion":"    let profit = 0;\n    for (let i = 0; i < price.length - 1; i++) {\n        if (price[i] < price[i + 1]) {\n            profit += price[i + 1] - price[i];\n        }\n    }\n    return profit;\n}","language":"typescript"}
{"task_id":"MBTSP\/470","completion":"    let result = [];\n    for (let i = 0; i < test_tup.length - 1; i++) {\n        result.push(test_tup[i] + test_tup[i + 1]);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/472","completion":"    if (l.length === 0) return false;\n    let i = 0;\n    while (i < l.length - 1) {\n        if (l[i] + 1 !== l[i + 1]) return false;\n        i++;\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBTSP\/474","completion":"    let newStr = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] === ch) {\n            newStr += newch;\n        } else {\n            newStr += str1[i];\n        }\n    }\n    return newStr;\n}","language":"typescript"}
{"task_id":"MBTSP\/475","completion":"    const sorted_keys = Array.from(dict1.keys()).sort((a, b) => dict1.get(b) - dict1.get(a));\n    return sorted_keys.map(key => [key, dict1.get(key)]);\n}","language":"typescript"}
{"task_id":"MBTSP\/476","completion":"    return Math.max(...nums) + Math.min(...nums);\n}","language":"typescript"}
{"task_id":"MBTSP\/477","completion":"    return string0.toLowerCase();\n}","language":"typescript"}
{"task_id":"MBTSP\/478","completion":"    let result = '';\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] !== str1[i].toLowerCase()) {\n            result += str1[i];\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/480","completion":"    let maxChar = '';\n    let maxCount = 0;\n    for (let i = 0; i < str1.length; i++) {\n        let count = 0;\n        for (let j = 0; j < str1.length; j++) {\n            if (str1[i] === str1[j]) {\n                count++;\n            }\n        }\n        if (count > maxCount) {\n            maxChar = str1[i];\n            maxCount = count;\n        }\n    }\n    return maxChar;\n}","language":"typescript"}
{"task_id":"MBTSP\/481","completion":"    if (sum < 0) return false;\n    if (n == 0 && sum != 0) return false;\n    if (n == 0 && sum == 0) return true;\n    return is_subset_sum(set, n - 1, sum) || is_subset_sum(set, n - 1, sum - set[n - 1]);\n}","language":"typescript"}
{"task_id":"MBTSP\/482","completion":"    let regex = \/[A-Z][a-z]+\/g;\n    let result = text.match(regex);\n    if (result == null) {\n        return \"No\";\n    }\n    return \"Yes\";\n}","language":"typescript"}
{"task_id":"MBTSP\/484","completion":"    const result = [];\n    for (let i = 0; i < test_list1.length; i++) {\n        for (let j = 0; j < test_list2.length; j++) {\n            if (test_list1[i][0] === test_list2[j][0] && test_list1[i][1] === test_list2[j][1]) {\n                break;\n            }\n            if (j === test_list2.length - 1) {\n                result.push(test_list1[i]);\n            }\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/487","completion":"    return tup.sort((a, b) => a[1] - b[1]);\n}","language":"typescript"}
{"task_id":"MBTSP\/489","completion":"    let max = 0;\n    let max_index = 0;\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == max) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/492","completion":"    let start = 0;\n    let end = item_list.length - 1;\n    let middle = Math.floor((start + end) \/ 2);\n    while (item_list[middle] != item && start <= end) {\n        if (item < item_list[middle]) {\n            end = middle - 1;\n        } else {\n            start = middle + 1;\n        }\n        middle = Math.floor((start + end) \/ 2);\n    }\n    return item_list[middle] == item;\n}","language":"typescript"}
{"task_id":"MBTSP\/493","completion":"    const points = [];\n    for (let i = startx; i <= endx; i++) {\n        for (let j = starty; j <= endy; j++) {\n            points.push([i, j]);\n        }\n    }\n    const polygons = [];\n    for (let i = 0; i < points.length; i++) {\n        const point = points[i];\n        const neighbors = [];\n        for (let j = 0; j < points.length; j++) {\n            const neighbor = points[j];\n            if (point != neighbor) {\n                const distance = distance_between(point, neighbor);\n                if (distance <= radius) {\n                    neighbors.push(neighbor);\n                }\n            }\n        }\n        if (neighbors.length >= 3) {\n            const polygon = [];\n            polygon.push(point);\n            polygon.push(neighbors[0]);\n            polygon.\n","language":"typescript"}
{"task_id":"MBTSP\/494","completion":"    let result = 0;\n    for (let i = 0; i < test_tup.length; i++) {\n        result = result * 2 + test_tup[i];\n    }\n    return result.toString();\n}","language":"typescript"}
{"task_id":"MBTSP\/495","completion":"    return str1.replace(\/[a-z]\/g, '');\n}","language":"typescript"}
{"task_id":"MBTSP\/498","completion":"    if (y == 0) {\n        return x;\n    }\n    return gcd(y, x % y);\n}","language":"typescript"}
{"task_id":"MBTSP\/499","completion":"    return 2 * r;\n}","language":"typescript"}
{"task_id":"MBTSP\/502","completion":"    return n % m;\n}","language":"typescript"}
{"task_id":"MBTSP\/504","completion":"    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += Math.pow(i, 3);\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/505","completion":"    const zeroes = A.filter(x => x === 0);\n    const nonZeroes = A.filter(x => x !== 0);\n    return nonZeroes.concat(zeroes);\n}","language":"typescript"}
{"task_id":"MBTSP\/506","completion":"    const factorial = function (n: number) : number {\n        if (n <= 1) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    };\n    return factorial(n) \/ factorial(n - k);\n}","language":"typescript"}
{"task_id":"MBTSP\/507","completion":"    let result = [];\n    for (let i = 0; i < list1.length; i++) {\n        let flag = true;\n        for (let j = 0; j < removewords.length; j++) {\n            if (list1[i].includes(removewords[j])) {\n                flag = false;\n                break;\n            }\n        }\n        if (flag) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/509","completion":"    let sum = 0;\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 != 0) {\n            sum += i;\n            count++;\n        }\n    }\n    return sum \/ count;\n}","language":"typescript"}
{"task_id":"MBTSP\/512","completion":"    const freq = new Map();\n    for (const item of test_tuple) {\n        if (item instanceof Array) {\n            for (const item2 of item) {\n                if (item2 instanceof Array) {\n                    for (const item3 of item2) {\n                        freq.set(item3, freq.get(item3) + 1 || 1);\n                    }\n                } else {\n                    freq.set(item2, freq.get(item2) + 1 || 1);\n                }\n            }\n        } else {\n            freq.set(item, freq.get(item) + 1 || 1);\n        }\n    }\n    return freq;\n}","language":"typescript"}
{"task_id":"MBTSP\/513","completion":"    let result = [];\n    for (let i = 0; i < test_tup.length; i++) {\n        result.push(test_tup[i]);\n        result.push(K);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/514","completion":"    let sum = 0;\n    for (let i = 0; i < test_tup.length; i++) {\n        sum += test_tup[i];\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/516","completion":"    const max = Math.max(...nums);\n    const maxDigit = (max + \"\").length;\n    const buckets = Array.from({length: maxDigit}, () => []);\n    for (let i = 0; i < nums.length; i++) {\n        const digit = (nums[i] + \"\").length;\n        buckets[digit - 1].push(nums[i]);\n    }\n    return buckets.flat();\n}","language":"typescript"}
{"task_id":"MBTSP\/517","completion":"    let max = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] > 0 && list1[i] > max) {\n            max = list1[i];\n        }\n    }\n    return max;\n}","language":"typescript"}
{"task_id":"MBTSP\/520","completion":"    let gcd = (a, b) => {\n        if (b === 0) return a;\n        return gcd(b, a % b);\n    }\n    let lcm = l[0];\n    for (let i = 1; i < l.length; i++) {\n        lcm = lcm * (l[i] \/ gcd(lcm, l[i]));\n    }\n    return lcm;\n}","language":"typescript"}
{"task_id":"MBTSP\/521","completion":"    return (x + y > z) && (x + z > y) && (y + z > x);\n}","language":"typescript"}
{"task_id":"MBTSP\/524","completion":"    let dp = new Array(n).fill(0);\n    let max = 0;\n    for (let i = 0; i < n; i++) {\n        dp[i] = arr[i];\n        for (let j = i - 1; j >= 0; j--) {\n            if (arr[i] > arr[j]) {\n                dp[i] = Math.max(dp[i], dp[j] + arr[i]);\n            }\n        }\n        max = Math.max(max, dp[i]);\n    }\n    return max;\n}","language":"typescript"}
{"task_id":"MBTSP\/525","completion":"    return (line1[0] * line2[1] - line1[1] * line2[0]) === 0;\n}","language":"typescript"}
{"task_id":"MBTSP\/526","completion":"    return str1.split(\" \").map(word => {\n        return word.charAt(0).toUpperCase() + word.slice(1, word.length - 1).toLowerCase() + word.charAt(word.length - 1).toUpperCase();\n    }).join(\" \");\n}","language":"typescript"}
{"task_id":"MBTSP\/527","completion":"    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/531","completion":"    const dp = new Array(V + 1).fill(Infinity);\n    dp[0] = 0;\n    for (let i = 1; i <= V; i++) {\n        for (let j = 0; j < coins.length; j++) {\n            if (coins[j] <= i) {\n                dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1);\n            }\n        }\n    }\n    return dp[V] === Infinity ? -1 : dp[V];\n}","language":"typescript"}
{"task_id":"MBTSP\/532","completion":"    if (str1.length !== str2.length) return false;\n    const char_map = {};\n    for (let i = 0; i < str1.length; i++) {\n        if (char_map[str1[i]]) {\n            char_map[str1[i]]++;\n        } else {\n            char_map[str1[i]] = 1;\n        }\n    }\n    for (let i = 0; i < str2.length; i++) {\n        if (!char_map[str2[i]]) return false;\n        char_map[str2[i]]--;\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBTSP\/537","completion":"    const words = str1.split(\" \");\n    const map = new Map();\n    for (const word of words) {\n        if (map.has(word)) {\n            return word;\n        }\n        map.set(word, 1);\n    }\n    return \"None\";\n}","language":"typescript"}
{"task_id":"MBTSP\/541","completion":"    let sum = 0;\n    for (let i = 1; i < n; i++) {\n        if (n % i == 0) {\n            sum += i;\n        }\n    }\n    return sum > n;\n}","language":"typescript"}
{"task_id":"MBTSP\/542","completion":"    return text.replace(\/ |,|\\.+\/g, ':');\n}","language":"typescript"}
{"task_id":"MBTSP\/544","completion":"    const flat_list = test_list.flat();\n    const result = flat_list.join(' ');\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/548","completion":"    const n = arr.length;\n    const dp = new Array(n).fill(1);\n    let max = 1;\n    for (let i = 1; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n        max = Math.max(max, dp[i]);\n    }\n    return max;\n}","language":"typescript"}
{"task_id":"MBTSP\/554","completion":"    let result = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            result.push(list[i]);\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/555","completion":"    let sum = 0;\n    let sumOfCubes = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n        sumOfCubes += i ** 3;\n    }\n    return sumOfCubes - sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/557","completion":"    let string = '';\n    for (let i = 0; i < string0.length; i++) {\n        if (string0[i] === string0[i].toUpperCase()) {\n            string += string0[i].toLowerCase();\n        } else {\n            string += string0[i].toUpperCase();\n        }\n    }\n    return string;\n}","language":"typescript"}
{"task_id":"MBTSP\/558","completion":"    if (n1 > n2) {\n        let temp = n1;\n        n1 = n2;\n        n2 = temp;\n    }\n    let distance = 0;\n    while (n1 > 0) {\n        distance += Math.abs(n1 % 10 - n2 % 10);\n        n1 = Math.floor(n1 \/ 10);\n        n2 = Math.floor(n2 \/ 10);\n    }\n    return distance;\n}","language":"typescript"}
{"task_id":"MBTSP\/559","completion":"    let max_sum = 0;\n    let current_sum = 0;\n    for (let i = 0; i < size; i++) {\n        current_sum += a[i];\n        if (current_sum > max_sum) {\n            max_sum = current_sum;\n        }\n        if (current_sum < 0) {\n            current_sum = 0;\n        }\n    }\n    return max_sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/560","completion":"    const result = [];\n    for (let i = 0; i < test_tup1.length; i++) {\n        result.push(test_tup1[i]);\n    }\n    for (let i = 0; i < test_tup2.length; i++) {\n        if (!result.includes(test_tup2[i])) {\n            result.push(test_tup2[i]);\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/562","completion":"    let maxLen = 0;\n    for (let i = 0; i < lst.length; i++) {\n        const sub = lst[i];\n        if (sub.length > maxLen) {\n            maxLen = sub.length;\n        }\n    }\n    return maxLen;\n}","language":"typescript"}
{"task_id":"MBTSP\/563","completion":"    return text.match(\/\"(.*?)\"\/g).map(x => x.replace(\/\"\/g, ''));\n}","language":"typescript"}
{"task_id":"MBTSP\/564","completion":"    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] !== arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/565","completion":"    return word.split('');\n}","language":"typescript"}
{"task_id":"MBTSP\/566","completion":"    let sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n = Math.floor(n \/ 10);\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/567","completion":"    if (list1.length <= 1) return true;\n    for (let i = 0; i < list1.length - 1; i++) {\n        if (list1[i] > list1[i + 1]) return false;\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBTSP\/568","completion":"    return Array.from({length}, () => new Map());\n}","language":"typescript"}
{"task_id":"MBTSP\/569","completion":"    return list1.map(sublist => sublist.sort());\n}","language":"typescript"}
{"task_id":"MBTSP\/572","completion":"    const map = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const num = nums[i];\n        if (map.has(num)) {\n            map.delete(num);\n        } else {\n            map.set(num, true);\n        }\n    }\n    return Array.from(map.keys());\n}","language":"typescript"}
{"task_id":"MBTSP\/573","completion":"    if (list_data.length == 0) {\n        return 0;\n    }\n    let product = 1;\n    let unique_list = [];\n    for (let i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        } else {\n            continue;\n        }\n        product *= list_data[i];\n    }\n    return product;\n}","language":"typescript"}
{"task_id":"MBTSP\/575","completion":"    let count = 0;\n    for (let i = L; i <= R; i++) {\n        if (i % A !== 0) {\n            count++;\n            if (count === N) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}","language":"typescript"}
{"task_id":"MBTSP\/576","completion":"    if (n > A.length || m > B.length) {\n        return false;\n    }\n    for (let i = 0; i < n; i++) {\n        if (A[i] !== B[i]) {\n            return false;\n        }\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBTSP\/577","completion":"    if (n < 0) {\n        return -1;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return last_Digit_Factorial(n - 1) * n % 10;\n}","language":"typescript"}
{"task_id":"MBTSP\/578","completion":"    let result = [];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    while (i < list1.length && j < list2.length && k < list3.length) {\n        result.push(list1[i]);\n        result.push(list2[j]);\n        result.push(list3[k]);\n        i++;\n        j++;\n        k++;\n    }\n    while (i < list1.length) {\n        result.push(list1[i]);\n        i++;\n    }\n    while (j < list2.length) {\n        result.push(list2[j]);\n        j++;\n    }\n    while (k < list3.length) {\n        result.push(list3[k]);\n        k++;\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/583","completion":"    if (num < 1) {\n        return 0;\n    }\n    let catalan = 1;\n    for (let i = 0; i < num; i++) {\n        catalan *= 2 * (2 * i + 1);\n        catalan \/= (i + 2);\n    }\n    return catalan;\n}","language":"typescript"}
{"task_id":"MBTSP\/587","completion":"    return listx.reduce( (acc, cur) => {\n        acc.push(cur);\n        return acc;\n    }, []);\n}","language":"typescript"}
{"task_id":"MBTSP\/588","completion":"    let max = Math.max(...nums);\n    let min = Math.min(...nums);\n    return max - min;\n}","language":"typescript"}
{"task_id":"MBTSP\/589","completion":"    let result = [];\n    for (let i = a; i <= b; i++) {\n        if (Math.sqrt(i) % 1 === 0) {\n            result.push(i);\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/595","completion":"    let count = 0;\n    let i = 0;\n    let j = 0;\n    while (i < str1.length && j < str2.length) {\n        if (str1[i] !== str2[j]) {\n            if (str1[i] === '0') {\n                i++;\n            } else {\n                j++;\n            }\n            count++;\n        } else {\n            i++;\n            j++;\n        }\n    }\n    if (i < str1.length) {\n        return \"Not Possible\";\n    } else {\n        return count;\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/598","completion":"    let num = number0;\n    let sum = 0;\n    while (num > 0) {\n        sum += Math.pow(num % 10, 3);\n        num = Math.floor(num \/ 10);\n    }\n    return sum == number0;\n}","language":"typescript"}
{"task_id":"MBTSP\/599","completion":"    let sum = 0;\n    let average = 0;\n    for (let i = 1; i <= number0; i++) {\n        sum += i;\n    }\n    average = sum \/ number0;\n    return [sum, average];\n}","language":"typescript"}
{"task_id":"MBTSP\/600","completion":"    return (n & 1) == 0;\n}","language":"typescript"}
{"task_id":"MBTSP\/602","completion":"    let char_map = {};\n    for (let i = 0; i < str1.length; i++) {\n        if (char_map[str1[i]]) {\n            return str1[i];\n        }\n        char_map[str1[i]] = true;\n    }\n    return \"None\";\n}","language":"typescript"}
{"task_id":"MBTSP\/604","completion":"    return s.split(\" \").reverse().join(\" \");\n}","language":"typescript"}
{"task_id":"MBTSP\/605","completion":"    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBTSP\/606","completion":"    return degree * (Math.PI \/ 180)\n}","language":"typescript"}
{"task_id":"MBTSP\/607","completion":"    const regex = new RegExp(pattern, 'g');\n    const match = regex.exec(text);\n    if (match === null) {\n        return [];\n    }\n    return [match[0], match.index, match.index + match[0].length];\n}","language":"typescript"}
{"task_id":"MBTSP\/611","completion":"    let max = -Infinity;\n    for (let i = 0; i < test_list.length; i++) {\n        max = Math.max(max, test_list[i][N]);\n    }\n    return max;\n}","language":"typescript"}
{"task_id":"MBTSP\/613","completion":"    const max_value = (arr: Array<any>) => {\n        let max = -Infinity;\n        for (let i = 0; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        return max;\n    };\n    const result = [];\n    for (let i = 0; i < test_list.length; i++) {\n        result.push([test_list[i][0], max_value(test_list[i][1])]);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/614","completion":"    let sum = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        sum += test_list[i].reduce((a, b) => a + b, 0);\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/616","completion":"    let result = [];\n    for (let i = 0; i < test_tup1.length; i++) {\n        result.push(test_tup1[i] % test_tup2[i]);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/618","completion":"    return nums1.map((n, i) => n \/ nums2[i])\n}","language":"typescript"}
{"task_id":"MBTSP\/621","completion":"    let result = [];\n    for (let i = 0; i < test_list.length; i++) {\n        let num = parseInt(test_list[i]);\n        if (isNaN(num)) {\n            result.push(test_list[i]);\n        } else {\n            result.push(String(num + K));\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/622","completion":"    let arr = [...arr1, ...arr2];\n    arr.sort((a, b) => a - b);\n    if (arr.length % 2 == 0) {\n        return (arr[arr.length \/ 2 - 1] + arr[arr.length \/ 2]) \/ 2;\n    } else {\n        return arr[Math.floor(arr.length \/ 2)];\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/623","completion":"    return nums.map(x => x ** n);\n}","language":"typescript"}
{"task_id":"MBTSP\/624","completion":"    return string0.toUpperCase();\n}","language":"typescript"}
{"task_id":"MBTSP\/628","completion":"    return string0.split(' ').join('%20')\n}","language":"typescript"}
{"task_id":"MBTSP\/629","completion":"    let evenNumbers = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 == 0) {\n            evenNumbers.push(list[i]);\n        }\n    }\n    return evenNumbers;\n}","language":"typescript"}
{"task_id":"MBTSP\/630","completion":"    const [x, y] = test_tup;\n    const result = [];\n    for (let i = x - 1; i <= x + 1; i++) {\n        for (let j = y - 1; j <= y + 1; j++) {\n            if (i >= 0 && i < 10 && j >= 0 && j < 10) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/631","completion":"    return text.replace(\/\\s\/g, '_');\n}","language":"typescript"}
{"task_id":"MBTSP\/632","completion":"    let zero_list = [];\n    let non_zero_list = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            non_zero_list.push(num_list[i]);\n        } else {\n            zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}","language":"typescript"}
{"task_id":"MBTSP\/633","completion":"    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            sum += arr[i] ^ arr[j];\n        }\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/636","completion":"    if (a * a - 4 * b * c < 0) return \"No\";\n    if (a * a - 4 * b * c == 0) return \"Yes\";\n    if (a * a - 4 * b * c > 0) return \"Yes\";\n}","language":"typescript"}
{"task_id":"MBTSP\/637","completion":"    return actual_cost - sale_amount == 0;\n}","language":"typescript"}
{"task_id":"MBTSP\/639","completion":"    let sum = 0;\n    for (let i = 0; i < sample_names.length; i++) {\n        if (sample_names[i].charAt(0) !== sample_names[i].charAt(0).toLowerCase()) {\n            sum += sample_names[i].length;\n        }\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/643","completion":"    let regex = \/z\/;\n    let result = regex.test(text);\n    return result ? \"Found a match!\" : \"Not matched!\";\n}","language":"typescript"}
{"task_id":"MBTSP\/644","completion":"    if (k > input.length) {\n        return input;\n    }\n    let left = 0;\n    let right = k - 1;\n    while (left < right) {\n        let temp = input[left];\n        input[left] = input[right];\n        input[right] = temp;\n        left++;\n        right--;\n    }\n    return input;\n}","language":"typescript"}
{"task_id":"MBTSP\/645","completion":"    let product = 1;\n    for (let i = 0; i < test_list.length; i++) {\n        product *= test_list[i][K];\n    }\n    return product;\n}","language":"typescript"}
{"task_id":"MBTSP\/647","completion":"    return text.split(\/(?=[A-Z])\/).filter(x => x !== \"\");\n}","language":"typescript"}
{"task_id":"MBTSP\/648","completion":"    const len = lst.length;\n    for (let i = 0; i < len; i += 2) {\n        let temp = lst[i];\n        lst[i] = lst[i + 1];\n        lst[i + 1] = temp;\n    }\n    return lst;\n}","language":"typescript"}
{"task_id":"MBTSP\/649","completion":"    let sum = 0;\n    for (let i = m; i <= n; i++) {\n        sum += nums[i];\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/650","completion":"    if (arr1.length != arr2.length) return false;\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] != arr2[i]) return false;\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBTSP\/653","completion":"    const map = new Map();\n    for (const [key, value] of l) {\n        if (!map.has(key)) {\n            map.set(key, []);\n        }\n        map.get(key).push(value);\n    }\n    return map;\n}","language":"typescript"}
{"task_id":"MBTSP\/654","completion":"    return 2 * (l + b);\n}","language":"typescript"}
{"task_id":"MBTSP\/655","completion":"    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += Math.pow(i, 5);\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/656","completion":"    let min = 0;\n    for (let i = 0; i < n; i++) {\n        min += Math.abs(a[i] - b[i]);\n    }\n    return min;\n}","language":"typescript"}
{"task_id":"MBTSP\/658","completion":"    const map = new Map();\n    let max = 0;\n    let max_item = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (map.has(list1[i])) {\n            map.set(list1[i], map.get(list1[i]) + 1);\n        } else {\n            map.set(list1[i], 1);\n        }\n        if (map.get(list1[i]) > max) {\n            max = map.get(list1[i]);\n            max_item = list1[i];\n        }\n    }\n    return max_item;\n}","language":"typescript"}
{"task_id":"MBTSP\/662","completion":"    const dict2 = new Map();\n    dict1.forEach((value, key) => {\n        dict2.set(key, value.sort((a, b) => a - b));\n    });\n    return dict2;\n}","language":"typescript"}
{"task_id":"MBTSP\/664","completion":"    let sum = 0;\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n            count++;\n        }\n    }\n    return sum \/ count;\n}","language":"typescript"}
{"task_id":"MBTSP\/665","completion":"    return num_list.concat(num_list.shift());\n}","language":"typescript"}
{"task_id":"MBTSP\/666","completion":"    let count = 0;\n    for (let i = 0; i < string0.length; i++) {\n        if (string0[i] == char) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/667","completion":"    let count = 0;\n    for (let i = 0; i < string0.length; i++) {\n        if (vowels.includes(string0[i])) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/668","completion":"    let string = string0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === char) {\n            string = string.replace(char, \"\");\n        }\n    }\n    return string;\n}","language":"typescript"}
{"task_id":"MBTSP\/669","completion":"    const regex = \/^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\/;\n    return regex.test(Ip) ? \"Valid IP address\" : \"Invalid IP address\";\n}","language":"typescript"}
{"task_id":"MBTSP\/670","completion":"    if (nums.length < 2) return false;\n    let prev = nums[0];\n    for (let i = 1; i < nums.length; i++) {\n        if (nums[i] < prev) return false;\n        prev = nums[i];\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBTSP\/672","completion":"    if (num1 > num2 && num1 > num3) {\n        return num1;\n    } else if (num2 > num1 && num2 > num3) {\n        return num2;\n    } else {\n        return num3;\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/673","completion":"    return list.reduce((acc, val) => acc * 10 + val, 0);\n}","language":"typescript"}
{"task_id":"MBTSP\/674","completion":"    const string = string0.split(\" \");\n    const set = new Set(string);\n    return Array.from(set).join(\" \");\n}","language":"typescript"}
{"task_id":"MBTSP\/675","completion":"    if (x + y >= m && x + y <= n) {\n        return 20;\n    }\n    return x + y;\n}","language":"typescript"}
{"task_id":"MBTSP\/678","completion":"    return str1.replace(\/ \/g, \"\");\n}","language":"typescript"}
{"task_id":"MBTSP\/680","completion":"    let prev = nums[0];\n    for (let i = 1; i < nums.length; i++) {\n        if (nums[i] < prev) {\n            return false;\n        }\n        prev = nums[i];\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBTSP\/681","completion":"    let i = 2;\n    while (i <= n \/ i) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return n;\n}","language":"typescript"}
{"task_id":"MBTSP\/683","completion":"    return Math.sqrt(n) * Math.sqrt(n) == n;\n}","language":"typescript"}
{"task_id":"MBTSP\/685","completion":"    let sum = 0;\n    for (let i = 2; i <= n; i++) {\n        let isPrime = true;\n        for (let j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            sum += i;\n        }\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/687","completion":"    if (a == 0) return b;\n    if (b == 0) return a;\n    if (a > b) return recur_gcd(a - b, b);\n    return recur_gcd(a, b - a);\n}","language":"typescript"}
{"task_id":"MBTSP\/689","completion":"    const dp = new Array(n).fill(Infinity);\n    dp[0] = 0;\n    for (let i = 1; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[j] + j >= i) {\n                dp[i] = Math.min(dp[i], dp[j] + 1);\n            }\n        }\n    }\n    return dp[n - 1];\n}","language":"typescript"}
{"task_id":"MBTSP\/691","completion":"    const map = new Map();\n    for (const [key, value] of test_list) {\n        if (map.has(value)) {\n            map.get(value).push(key);\n        } else {\n            map.set(value, [key]);\n        }\n    }\n    return map;\n}","language":"typescript"}
{"task_id":"MBTSP\/693","completion":"    return text1.replace(\/\\s\\s+\/g, ' ');\n}","language":"typescript"}
{"task_id":"MBTSP\/695","completion":"    return test_tup2.every((num, index) => num > test_tup1[index]);\n}","language":"typescript"}
{"task_id":"MBTSP\/696","completion":"    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i < list1.length && j < list2.length) {\n        result.push(list1[i].concat(list2[j]));\n        i++;\n        j++;\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/697","completion":"    return array_nums.filter(num => num % 2 == 0).length;\n}","language":"typescript"}
{"task_id":"MBTSP\/698","completion":"    const sorted_dict = new Map();\n    const sorted_keys = Array.from(test_dict.keys()).sort((a, b) => a.reduce((acc, cur) => acc * cur, 1) - b.reduce((acc, cur) => acc * cur, 1));\n    for (const key of sorted_keys) {\n        sorted_dict.set(key, test_dict.get(key));\n    }\n    return sorted_dict;\n}","language":"typescript"}
{"task_id":"MBTSP\/700","completion":"    let count = 0;\n    for (let i = 0; i < li.length; i++) {\n        if (li[i] >= min && li[i] <= max) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/703","completion":"    return d.has(x);\n}","language":"typescript"}
{"task_id":"MBTSP\/704","completion":"    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += 1 \/ i;\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/705","completion":"    return list1.sort((a, b) => {\n        if (a.length > b.length) {\n            return 1;\n        }\n        if (a.length < b.length) {\n            return -1;\n        }\n        return 0;\n    });\n}","language":"typescript"}
{"task_id":"MBTSP\/708","completion":"    let string = string0.split(' ');\n    return string;\n}","language":"typescript"}
{"task_id":"MBTSP\/710","completion":"    let first = test_tup[0];\n    let last = test_tup[test_tup.length - 1];\n    return [first, last];\n}","language":"typescript"}
{"task_id":"MBTSP\/711","completion":"    const str = n.toString();\n    const len = str.length;\n    let even = 1;\n    let odd = 1;\n    for (let i = 0; i < len; i++) {\n        if (i % 2 == 0) {\n            even *= Number(str[i]);\n        } else {\n            odd *= Number(str[i]);\n        }\n    }\n    return even == odd;\n}","language":"typescript"}
{"task_id":"MBTSP\/712","completion":"    const hash = {};\n    const result = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (!hash[list1[i]]) {\n            hash[list1[i]] = true;\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/713","completion":"    let valid = true;\n    for (let i = 0; i < test_tup.length; i++) {\n        if (test_tup[i] == false) {\n            valid = false;\n            break;\n        }\n    }\n    return valid;\n}","language":"typescript"}
{"task_id":"MBTSP\/715","completion":"    return test_str.split(\", \").map(Number);\n}","language":"typescript"}
{"task_id":"MBTSP\/718","completion":"    let result = [];\n    let i = 0;\n    while (i < list1.length) {\n        result.push(list1[i]);\n        i = i + 2;\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/719","completion":"    if (text.match(\/a\/g) == null) {\n        return ('Not matched!');\n    }\n    return ('Found a match!');\n}","language":"typescript"}
{"task_id":"MBTSP\/720","completion":"    const test_tup_copy = [...test_tup];\n    test_tup_copy.push(test_dict);\n    return test_tup_copy;\n}","language":"typescript"}
{"task_id":"MBTSP\/721","completion":"    const dp = new Array(N).fill(0).map(() => new Array(N).fill(0));\n    const dp2 = new Array(N).fill(0).map(() => new Array(N).fill(0));\n    const dp3 = new Array(N).fill(0).map(() => new Array(N).fill(0));\n    dp[0][0] = cost[0][0];\n    dp2[0][0] = cost[0][0];\n    dp3[0][0] = cost[0][0];\n    for (let i = 1; i < N; i++) {\n        dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1]) + cost[i][0];\n        dp2[i][0] = Math.max(dp2[i - 1][0], dp2[i - 1][1]) + cost[i][0];\n        dp3[i][0] = Math.","language":"typescript"}
{"task_id":"MBTSP\/725","completion":"    const regex = \/\"(.*?)\"\/g;\n    const result = [];\n    let match = regex.exec(text1);\n    while (match != null) {\n        result.push(match[1]);\n        match = regex.exec(text1);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/726","completion":"    let result = [];\n    for (let i = 0; i < test_tup.length - 1; i++) {\n        result.push(test_tup[i] * test_tup[i + 1]);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/727","completion":"    return S.replace(\/[^a-zA-Z0-9]\/g, \"\");\n}","language":"typescript"}
{"task_id":"MBTSP\/728","completion":"    return lst1.map((x, i) => x + lst2[i]);\n}","language":"typescript"}
{"task_id":"MBTSP\/729","completion":"    return nums1.map((num, i) => num + nums2[i])\n}","language":"typescript"}
{"task_id":"MBTSP\/730","completion":"  const result = [];\n  let last = null;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === last) {\n      continue;\n    }\n    last = nums[i];\n    result.push(nums[i]);\n  }\n  return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/732","completion":"    return text.replace(\/ |,|\\.|\\n\/g, ':');\n}","language":"typescript"}
{"task_id":"MBTSP\/733","completion":"    let left = 0;\n    let right = A.length - 1;\n    let mid = Math.floor((left + right) \/ 2);\n    while (A[mid] != x && left <= right) {\n        if (A[mid] > x) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n        mid = Math.floor((left + right) \/ 2);\n    }\n    return A[mid] == x ? mid : -1;\n}","language":"typescript"}
{"task_id":"MBTSP\/736","completion":"    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        const mid = Math.floor((left + right) \/ 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}","language":"typescript"}
{"task_id":"MBTSP\/737","completion":"    const regex = \/^[aeiou]\/i;\n    return regex.test(string0) ? 'Valid' : 'Invalid';\n}","language":"typescript"}
{"task_id":"MBTSP\/740","completion":"    const dict = new Map();\n    for (let i = 0; i < test_tup.length; i += 2) {\n        dict.set(test_tup[i], test_tup[i + 1]);\n    }\n    return dict;\n}","language":"typescript"}
{"task_id":"MBTSP\/741","completion":"    if (s.length > 1) {\n        return s[0] === s[1];\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBTSP\/744","completion":"    for (let i = 0; i < test_tup.length; i++) {\n        if (test_tup[i] === undefined) {\n            return true;\n        }\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBTSP\/745","completion":"    let result = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits = [];\n        for (let j = 0; j < i.toString().length; j++) {\n            digits.push(i.toString()[j]);\n        }\n        let num = i;\n        let divisible = true;\n        for (let k = 0; k < digits.length; k++) {\n            if (num % digits[k] != 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/749","completion":"    return nums_str.map(x => Number(x)).sort((a, b) => a - b);\n}","language":"typescript"}
{"task_id":"MBTSP\/751","completion":"    if (i >= arr.length) return true;\n    let left = 2 * i + 1;\n    let right = 2 * i + 2;\n    if (left < arr.length && arr[i] > arr[left]) return false;\n    if (right < arr.length && arr[i] > arr[right]) return false;\n    return check_min_heap(arr, left) && check_min_heap(arr, right);\n}","language":"typescript"}
{"task_id":"MBTSP\/753","completion":"    \/\/ code here\n    return test_list.sort((a, b) => a[1] - b[1]).slice(0, K);\n}","language":"typescript"}
{"task_id":"MBTSP\/754","completion":"    const result = [];\n    for (let i = 0; i < l1.length; i++) {\n        if (l1[i] === l2[i] && l1[i] === l3[i]) {\n            result.push(l1[i]);\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/756","completion":"    let regex = \/a(b)?\/g;\n    let match = regex.exec(text);\n    if (match) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/757","completion":"    let count = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i].split(\"\").reverse().join(\"\") == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/759","completion":"    const regex = \/^-?\\d+(\\.\\d{1,2})?$\/;\n    return regex.test(num);\n}","language":"typescript"}
{"task_id":"MBTSP\/760","completion":"    let set = new Set(arr);\n    if (set.size === 1) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/763","completion":"    let minDiff = Infinity;\n    for (let i = 0; i < n - 1; i++) {\n        for (let j = i + 1; j < n; j++) {\n            minDiff = Math.min(minDiff, Math.abs(arr[i] - arr[j]));\n        }\n    }\n    return minDiff;\n}","language":"typescript"}
{"task_id":"MBTSP\/764","completion":"    return str.split('').filter(x => !isNaN(x)).length;\n}","language":"typescript"}
{"task_id":"MBTSP\/766","completion":"  const result = [];\n  for (let i = 0; i < l1.length - 1; i++) {\n    result.push([l1[i], l1[i + 1]]);\n  }\n  return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/767","completion":"    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/768","completion":"    return (x % 2 == 1) ? true : false;\n}","language":"typescript"}
{"task_id":"MBTSP\/771","completion":"    const stack = [];\n    const open_brackets = \"({[\";\n    const close_brackets = \")}]\";\n    const brackets_map = {\n        \"(\": \")\",\n        \"{\": \"}\",\n        \"[\": \"]\"\n    };\n    for (let i = 0; i < exp.length; i++) {\n        const char = exp[i];\n        if (open_brackets.includes(char)) {\n            stack.push(char);\n        } else if (close_brackets.includes(char)) {\n            if (brackets_map[stack.pop()] !== char) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}","language":"typescript"}
{"task_id":"MBTSP\/772","completion":"    return test_str.split(' ').filter(word => word.length != K).join(' ');\n}","language":"typescript"}
{"task_id":"MBTSP\/774","completion":"    const regex = \/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$\/;\n    return regex.test(email) ? 'Valid Email' : 'Invalid Email';\n}","language":"typescript"}
{"task_id":"MBTSP\/775","completion":"    let odd = false;\n    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 === 1) {\n            if (nums[i] % 2 === 1) {\n                odd = true;\n            }\n        }\n    }\n    return odd;\n}","language":"typescript"}
{"task_id":"MBTSP\/777","completion":"    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] != arr[i + 1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/778","completion":"    let result = [];\n    let current = [];\n    let last = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === last) {\n            current.push(list1[i]);\n        } else {\n            if (current.length > 0) {\n                result.push(current);\n            }\n            current = [];\n            current.push(list1[i]);\n            last = list1[i];\n        }\n    }\n    if (current.length > 0) {\n        result.push(current);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/785","completion":"    let tuple = test_str.replace(\"(\", \"\").replace(\")\", \"\").split(\", \");\n    return tuple.map(x => parseInt(x));\n}","language":"typescript"}
{"task_id":"MBTSP\/786","completion":"    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        const mid = Math.floor((left + right) \/ 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}","language":"typescript"}
{"task_id":"MBTSP\/787","completion":"    if (text.match(\/a\\w{3}b\/)) {\n        return 'Found a match!'\n    } else {\n        return 'Not matched!'\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/788","completion":"    return [...test_list, test_str];\n}","language":"typescript"}
{"task_id":"MBTSP\/790","completion":"    if (nums.length == 0) return true;\n    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 == 0 && nums[i] % 2 == 0) return true;\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBTSP\/792","completion":"    return input_list.length;\n}","language":"typescript"}
{"task_id":"MBTSP\/793","completion":"    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) \/ 2);\n    while (arr[mid] !== x && start <= end) {\n        if (arr[mid] < x) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n        mid = Math.floor((start + end) \/ 2);\n    }\n    if (arr[mid] === x) {\n        return mid;\n    }\n    return -1;\n}","language":"typescript"}
{"task_id":"MBTSP\/797","completion":"    let sum = 0;\n    for (let i = l; i <= r; i++) {\n        if (i % 2 != 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/798","completion":"    return arr.reduce((acc, cur) => acc + cur, 0);\n}","language":"typescript"}
{"task_id":"MBTSP\/799","completion":"    return (n << d) | (n >> (32 - d));\n}","language":"typescript"}
{"task_id":"MBTSP\/800","completion":"    return text.replace(\/\\s\/g, '');\n}","language":"typescript"}
{"task_id":"MBTSP\/802","completion":"    let left = 0;\n    let right = n - 1;\n    let count = 0;\n    while (left <= right) {\n        if (arr[left] > arr[right]) {\n            count++;\n            left++;\n            right--;\n        } else if (arr[left] < arr[right]) {\n            right--;\n        } else {\n            left++;\n            right--;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/803","completion":"    if (n < 0) {\n        return false;\n    }\n    let sqrt = Math.sqrt(n);\n    return sqrt == Math.floor(sqrt);\n}","language":"typescript"}
{"task_id":"MBTSP\/804","completion":"    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        product *= arr[i];\n    }\n    return product % n === 0;\n}","language":"typescript"}
{"task_id":"MBTSP\/805","completion":"    let maxSum = 0;\n    let maxSumList = [];\n    for (let i = 0; i < lists.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < lists[i].length; j++) {\n            sum += lists[i][j];\n        }\n        if (sum > maxSum) {\n            maxSum = sum;\n            maxSumList = lists[i];\n        }\n    }\n    return maxSumList;\n}","language":"typescript"}
{"task_id":"MBTSP\/806","completion":"    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}","language":"typescript"}
{"task_id":"MBTSP\/807","completion":"    let odd = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd = nums[i];\n            break;\n        }\n    }\n    return odd;\n}","language":"typescript"}
{"task_id":"MBTSP\/808","completion":"    return test_tup.some(x => x == K);\n}","language":"typescript"}
{"task_id":"MBTSP\/811","completion":"    if (test_list1.length != test_list2.length) {\n        return false;\n    }\n    for (let i = 0; i < test_list1.length; i++) {\n        if (test_list1[i].length != test_list2[i].length) {\n            return false;\n        }\n        for (let j = 0; j < test_list1[i].length; j++) {\n            if (test_list1[i][j] != test_list2[i][j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBTSP\/812","completion":"    return street.replace(\" Road\", \" Rd.\")\n}","language":"typescript"}
{"task_id":"MBTSP\/813","completion":"    return str1.length;\n}","language":"typescript"}
{"task_id":"MBTSP\/815","completion":"    const dp = Array(n + 1).fill(0);\n    for (let i = 0; i < arr.length; i++) {\n        dp[arr[i]]++;\n    }\n    let ans = [];\n    for (let i = 0; i < dp.length; i++) {\n        while (dp[i] > 0) {\n            ans.push(i);\n            dp[i]--;\n        }\n    }\n    return ans;\n}","language":"typescript"}
{"task_id":"MBTSP\/817","completion":"    return nums.filter(x => x % m == 0 || x % n == 0);\n}","language":"typescript"}
{"task_id":"MBTSP\/818","completion":"    return str.length - str.replace(\/[a-z]\/g, '').length;\n}","language":"typescript"}
{"task_id":"MBTSP\/820","completion":"    if (monthnum1 == 2) {\n        return true;\n    }\n    else if (monthnum1 == 1 || monthnum1 == 3 || monthnum1 == 5 || monthnum1 == 7 || monthnum1 == 8 || monthnum1 == 10 || monthnum1 == 12) {\n        return false;\n    }\n    else if (monthnum1 == 4 || monthnum1 == 6 || monthnum1 == 9 || monthnum1 == 11) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/821","completion":"    const merged = new Map();\n    dict1.forEach((value, key) => merged.set(key, value));\n    dict2.forEach((value, key) => merged.set(key, value));\n    return merged;\n}","language":"typescript"}
{"task_id":"MBTSP\/822","completion":"    const regex = \/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$\/;\n    return regex.test(p);\n}","language":"typescript"}
{"task_id":"MBTSP\/823","completion":"    const regex = new RegExp(`^${sample}`);\n    return regex.test(string0) ? 'string starts with the given substring' : 'string doesnt start with the given substring';\n}","language":"typescript"}
{"task_id":"MBTSP\/824","completion":"    return l.filter(x => x % 2 != 0);\n}","language":"typescript"}
{"task_id":"MBTSP\/825","completion":"    let result = [];\n    for (let i = 0; i < list_index.length; i++) {\n        result.push(nums[list_index[i]]);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/827","completion":"    let sum = 0;\n    for (let i = 0; i < list1.length; i++) {\n        sum += list1[i][C];\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/828","completion":"    const string = string0.toLowerCase();\n    const alpha = string.match(\/[a-z]\/g);\n    const dig = string.match(\/[0-9]\/g);\n    const spl = string.match(\/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\\/?]\/g);\n    return [alpha.length, dig.length, spl.length];\n}","language":"typescript"}
{"task_id":"MBTSP\/831","completion":"    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/832","completion":"    const regex = \/[0-9]+\/g;\n    const match = input.match(regex);\n    return Math.max(...match);\n}","language":"typescript"}
{"task_id":"MBTSP\/833","completion":"    return Array.from(dict.keys());\n}","language":"typescript"}
{"task_id":"MBTSP\/835","completion":"    return (y2 - y1) \/ (x2 - x1);\n}","language":"typescript"}
{"task_id":"MBTSP\/839","completion":"    return tup.sort((a, b) => a[0].localeCompare(b[0]));\n}","language":"typescript"}
{"task_id":"MBTSP\/841","completion":"    \/\/ 1. find the length of the array\n    \/\/ 2. initialize an array to store the count of inversions\n    \/\/ 3. iterate over the array\n    \/\/ 4. for each element in the array,\n    \/\/ 5. if the element is greater than the element to its left,\n    \/\/ 6. increment the count of inversions by 1\n    \/\/ 7. else if the element is less than the element to its right,\n    \/\/ 8. increment the count of inversions by 1\n    \/\/ 9. return the count of inversions\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/842","completion":"    let result = 0;\n    for (let i = 0; i < arr_size; i++) {\n        result = result ^ arr[i];\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/846","completion":"    \/\/ 1. sort the array\n    arr.sort((a, b) => a - b);\n    \/\/ 2. find the first element\n    let start = 0;\n    let end = arr[0];\n    let count = 1;\n    while (start < end) {\n        start = end;\n        end = Math.floor((start + arr[0]) \/ 2);\n        count++;\n    }\n    \/\/ 3. find the last element\n    start = arr[arr.length - 1];\n    end = arr[arr.length - 1];\n    while (start < end) {\n        start = end;\n        end = Math.floor((start + arr[arr.length - 1]) \/ 2);\n        count++;\n    }\n    \/\/ 4. find the middle element\n    start = Math.floor((arr[arr.length - 1] + arr[0]) \/ 2);\n    end = Math.","language":"typescript"}
{"task_id":"MBTSP\/847","completion":"    return [...xs];\n}","language":"typescript"}
{"task_id":"MBTSP\/848","completion":"    return (base1 + base2) * height \/ 2;\n}","language":"typescript"}
{"task_id":"MBTSP\/852","completion":"    return num_list.filter(num => num >= 0);\n}","language":"typescript"}
{"task_id":"MBTSP\/853","completion":"    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            if (i % 2 != 0) {\n                sum += i;\n            }\n        }\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/855","completion":"    return (x % 2 == 0) ? true : false;\n}","language":"typescript"}
{"task_id":"MBTSP\/857","completion":"    return list1.map(function(element){\n        return element.split('');\n    });\n}","language":"typescript"}
{"task_id":"MBTSP\/858","completion":"    let count = 0;\n    for (let i = 0; i < input_list.length; i++) {\n        if (input_list[i].length > 0) {\n            count += 1;\n        }\n    }\n    return count * count;\n}","language":"typescript"}
{"task_id":"MBTSP\/860","completion":"    const regex = \/^[a-zA-Z0-9]*$\/\n    return regex.test(string0) ? 'Accept' : 'Discard'\n}","language":"typescript"}
{"task_id":"MBTSP\/861","completion":"    const map = new Map();\n    for (let i = 0; i < texts.length; i++) {\n        const sorted = texts[i].split(\"\").sort().join(\"\");\n        if (map.has(sorted)) {\n            map.get(sorted).push(texts[i]);\n        } else {\n            map.set(sorted, [texts[i]]);\n        }\n    }\n    return map.get(str.split(\"\").sort().join(\"\"));\n}","language":"typescript"}
{"task_id":"MBTSP\/862","completion":"    const words = text.split(' ');\n    const counts = {};\n    for (let word of words) {\n        counts[word] = counts[word] ? counts[word] + 1 : 1;\n    }\n    const result = [];\n    for (let word in counts) {\n        result.push([word, counts[word]]);\n    }\n    result.sort((a, b) => b[1] - a[1]);\n    return result.slice(0, n);\n}","language":"typescript"}
{"task_id":"MBTSP\/863","completion":"    const dp = new Array(n).fill(1);\n    for (let i = 1; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[i] - arr[j] == 1) {\n                dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n    }\n    return Math.max(...dp);\n}","language":"typescript"}
{"task_id":"MBTSP\/864","completion":"    return texts.filter(text => {\n        return text == text.split(\"\").reverse().join(\"\");\n    });\n}","language":"typescript"}
{"task_id":"MBTSP\/865","completion":"    return nums.map(x => x * n);\n}","language":"typescript"}
{"task_id":"MBTSP\/866","completion":"    return (new Date(2021, monthname2.charCodeAt(0) - 64, 0)).getDate() == 31;\n}","language":"typescript"}
{"task_id":"MBTSP\/868","completion":"    return a.trim().split(\" \").pop().length;\n}","language":"typescript"}
{"task_id":"MBTSP\/869","completion":"    let newlist = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i][0] >= leftrange && list1[i][0] <= rigthrange) {\n            newlist.push(list1[i]);\n        }\n    }\n    return newlist;\n}","language":"typescript"}
{"task_id":"MBTSP\/870","completion":"    return nums.filter(num => num > 0).reduce((acc, num) => acc + num, 0);\n}","language":"typescript"}
{"task_id":"MBTSP\/871","completion":"    if (string1.length !== string2.length) {\n        return false;\n    }\n    return (string1 + string1).includes(string2);\n}","language":"typescript"}
{"task_id":"MBTSP\/873","completion":"    if (n < 2) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}","language":"typescript"}
{"task_id":"MBTSP\/877","completion":"    return str.split(\"\").sort().join(\"\");\n}","language":"typescript"}
{"task_id":"MBTSP\/878","completion":"    \/\/ Your code here\n    let count = 0;\n    for (let i = 0; i < test_tuple.length; i++) {\n        if (test_tuple[i] == K[count]) {\n            count++;\n        }\n        if (count == K.length) {\n            return true;\n        }\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBTSP\/883","completion":"    return nums.filter(x => x % m == 0 && x % n == 0);\n}","language":"typescript"}
{"task_id":"MBTSP\/886","completion":"    return numbers.reduce((a, b) => a + b, 0) \/ numbers.length;\n}","language":"typescript"}
{"task_id":"MBTSP\/887","completion":"    return (n & 1) == 1;\n}","language":"typescript"}
{"task_id":"MBTSP\/888","completion":"    const result = [];\n    for (let i = 0; i < test_tup1.length; i++) {\n        const sub = [];\n        for (let j = 0; j < test_tup1[i].length; j++) {\n            sub.push(test_tup1[i][j] - test_tup2[i][j]);\n        }\n        result.push(sub);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/890","completion":"    let i = 0;\n    let j = 0;\n    while (i < arr1.length && j < arr2.length) {\n        if (arr1[i] === arr2[j]) {\n            i++;\n            j++;\n        } else if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return i < arr1.length ? i : j;\n}","language":"typescript"}
{"task_id":"MBTSP\/891","completion":"    return (A.toString().length === B.toString().length) ? true : false;\n}","language":"typescript"}
{"task_id":"MBTSP\/892","completion":"    return text.replace(\/\\s+\/g, ' ');\n}","language":"typescript"}
{"task_id":"MBTSP\/893","completion":"    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        result.push(lst[i][lst[i].length - 1]);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/894","completion":"    const result = test_str.split(', ').map(x => parseFloat(x));\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/896","completion":"    return tuples.sort((a, b) => a[1] - b[1]);\n}","language":"typescript"}
{"task_id":"MBTSP\/897","completion":"    return sentence.toLowerCase().includes(word.toLowerCase());\n}","language":"typescript"}
{"task_id":"MBTSP\/900","completion":"    return string0.startsWith('5');\n}","language":"typescript"}
{"task_id":"MBTSP\/904","completion":"    return x % 2 == 0;\n}","language":"typescript"}
{"task_id":"MBTSP\/906","completion":"    const regex = \/(\\d{4})\\\/(\\d{2})\\\/(\\d{2})\/;\n    const match = url.match(regex);\n    if (match == null) {\n        return [];\n    }\n    return [match.slice(1, 4)];\n}","language":"typescript"}
{"task_id":"MBTSP\/907","completion":"    const luckyNumbers = [1, 3, 7, 9, 13, 15, 21, 25, 31, 33];\n    return luckyNumbers.slice(0, n);\n}","language":"typescript"}
{"task_id":"MBTSP\/908","completion":"    let left = 0;\n    let right = n - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) \/ 2);\n        if (arr[mid] > mid) {\n            right = mid - 1;\n        } else if (arr[mid] < mid) {\n            left = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n    return -1;\n}","language":"typescript"}
{"task_id":"MBTSP\/910","completion":"    if (m < 1 || m > 12) {\n        return false;\n    }\n    if (d < 1 || d > 31) {\n        return false;\n    }\n    if (m == 2) {\n        if (y % 4 == 0) {\n            if (d > 29) {\n                return false;\n            }\n        } else {\n            if (d > 28) {\n                return false;\n            }\n        }\n    }\n    if (m == 4 || m == 6 || m == 9 || m == 11) {\n        if (d > 30) {\n            return false;\n        }\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBTSP\/913","completion":"    if (string0.length == 0) {\n        return false;\n    }\n    const last_char = string0.charAt(string0.length - 1);\n    if (last_char == '7') {\n        return true;\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBTSP\/917","completion":"    const regex = \/[A-Z][a-z]\/g;\n    const result = text.match(regex);\n    if (result) {\n        return `Found a match!`;\n    }\n    return `Not matched!`;\n}","language":"typescript"}
{"task_id":"MBTSP\/918","completion":"    const dp = new Array<number>(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 0; i < S.length; i++) {\n        for (let j = S[i]; j <= n; j++) {\n            dp[j] += dp[j - S[i]];\n        }\n    }\n    return dp[n];\n}","language":"typescript"}
{"task_id":"MBTSP\/919","completion":"    return items.reduce((acc, item) => acc * item, 1);\n}","language":"typescript"}
{"task_id":"MBTSP\/921","completion":"    const result = [];\n    for (let i = 0; i < test_tup.length; i += N) {\n        result.push(test_tup.slice(i, i + N));\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/922","completion":"    let max = -Infinity;\n    let max_pair = [];\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            let product = arr[i] * arr[j];\n            if (product > max) {\n                max = product;\n                max_pair = [arr[i], arr[j]];\n            }\n        }\n    }\n    return max_pair;\n}","language":"typescript"}
{"task_id":"MBTSP\/924","completion":"    if (x > y) {\n        return x;\n    } else {\n        return y;\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/925","completion":"    return nums.reduce((acc, num) => acc * num, 1);\n}","language":"typescript"}
{"task_id":"MBTSP\/928","completion":"    const [y, m, d] = dt.split('-');\n    return `${d}-${m}-${y}`;\n}","language":"typescript"}
{"task_id":"MBTSP\/929","completion":"    let count = 0;\n    for (let i = 0; i < tuplex.length; i++) {\n        if (tuplex[i] == value) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/932","completion":"    const set = new Set(l);\n    return Array.from(set);\n}","language":"typescript"}
{"task_id":"MBTSP\/933","completion":"    return text.replace(\/([a-z])([A-Z])\/g, '$1_$2').toLowerCase();\n}","language":"typescript"}
{"task_id":"MBTSP\/937","completion":"    let max = 0;\n    let maxChar = '';\n    for (let char of str1) {\n        let count = 0;\n        for (let i = 0; i < str1.length; i++) {\n            if (char == str1[i]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            maxChar = char;\n        }\n    }\n    return maxChar;\n}","language":"typescript"}
{"task_id":"MBTSP\/940","completion":"    \/\/ TODO: implement heap sort\n    return arr;\n}","language":"typescript"}
{"task_id":"MBTSP\/942","completion":"    for (let i = 0; i < check_list.length; i++) {\n        if (test_tup.includes(check_list[i])) {\n            return true;\n        }\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBTSP\/945","completion":"    return new Set(t);\n}","language":"typescript"}
{"task_id":"MBTSP\/946","completion":"    let arr = [];\n    let obj = {};\n    for (let i = 0; i < s.length; i++) {\n        if (obj[s[i]] === undefined) {\n            obj[s[i]] = 1;\n        } else {\n            obj[s[i]] += 1;\n        }\n    }\n    for (let key in obj) {\n        arr.push([key, obj[key]]);\n    }\n    arr.sort((a, b) => b[1] - a[1]);\n    return arr.slice(0, a);\n}","language":"typescript"}
{"task_id":"MBTSP\/947","completion":"    let min = list1[0].length;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i].length < min) {\n            min = list1[i].length;\n        }\n    }\n    return min;\n}","language":"typescript"}
{"task_id":"MBTSP\/948","completion":"    if (index < 0) {\n        index = tup1.length + index;\n    }\n    return tup1[index];\n}","language":"typescript"}
{"task_id":"MBTSP\/951","completion":"    const result = [];\n    const map = new Map();\n    for (let i = 0; i < test_list1.length; i++) {\n        const item = test_list1[i];\n        const similar = [];\n        for (let j = 0; j < test_list2.length; j++) {\n            const similar_item = test_list2[j];\n            if (similar_item[0] === item[0] && similar_item[1] === item[1]) {\n                similar.push(similar_item);\n            }\n        }\n        if (similar.length > 0) {\n            const max = Math.max(...similar.map(item => item[2]));\n            const max_index = similar.findIndex(item => item[2] === max);\n            const key = `${item[0]}_${item[1]}`;\n            if (map.has(key)) {\n                const old_max = map.","language":"typescript"}
{"task_id":"MBTSP\/952","completion":"    let ncr = 1;\n    for (let i = 1; i <= r; i++) {\n        ncr = (ncr * (n - i + 1)) \/ i;\n    }\n    return (ncr % p);\n}","language":"typescript"}
{"task_id":"MBTSP\/954","completion":"    if (actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    return undefined;\n}","language":"typescript"}
{"task_id":"MBTSP\/955","completion":"    let sum = 0;\n    for (let i = 1; i < n; i++) {\n        if (n % i == 0) {\n            sum += i;\n        }\n    }\n    return sum > n;\n}","language":"typescript"}
{"task_id":"MBTSP\/956","completion":"    return text.split(\/(?=[A-Z])\/);\n}","language":"typescript"}
{"task_id":"MBTSP\/959","completion":"    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n    }\n    return sum \/ lst.length;\n}","language":"typescript"}
{"task_id":"MBTSP\/961","completion":"    const roman = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    };\n    let result = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (i < s.length - 1 && roman[s[i]] < roman[s[i + 1]]) {\n            result -= roman[s[i]];\n        } else {\n            result += roman[s[i]];\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/962","completion":"    let sum = 0;\n    for (let i = l; i <= r; i++) {\n        if (i % 2 === 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/964","completion":"    return s.length % 2 === 0;\n}","language":"typescript"}
{"task_id":"MBTSP\/965","completion":"    const regex = \/([a-z])([A-Z])\/g;\n    return text.replace(regex, '$1_$2').toLowerCase();\n}","language":"typescript"}
{"task_id":"MBTSP\/966","completion":"    return tuple1.filter(tuple => tuple.length > 0);\n}","language":"typescript"}
{"task_id":"MBTSP\/967","completion":"    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let string = string0.toLowerCase();\n    for (let i = 0; i < vowels.length; i++) {\n        if (string.indexOf(vowels[i]) === -1) {\n            return \"not accepted\";\n        }\n    }\n    return \"accepted\";\n}","language":"typescript"}
{"task_id":"MBTSP\/969","completion":"    const result = [];\n    for (let i = 0; i < test_list.length; i++) {\n        const tuple = test_list[i];\n        const first = tuple[0];\n        const rest = tuple.slice(1);\n        for (let j = 0; j < result.length; j++) {\n            const test_tuple = result[j];\n            if (test_tuple[0] === first) {\n                test_tuple.push(...rest);\n                break;\n            }\n        }\n        if (j === result.length) {\n            result.push(tuple);\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/970","completion":"    return x < y ? x : y;\n}","language":"typescript"}
{"task_id":"MBTSP\/972","completion":"    return [test_tup1[0], test_tup1[1], test_tup2[0], test_tup2[1]];\n}","language":"typescript"}
{"task_id":"MBTSP\/973","completion":"    if (d < 0) {\n        return \"\";\n    }\n    if (d == 0) {\n        return s;\n    }\n    return s.substring(d) + s.substring(0, d);\n}","language":"typescript"}
{"task_id":"MBTSP\/974","completion":"    const n = A.length;\n    const dp = Array.from({ length: n }, () => Array.from({ length: n }, () => 0));\n    dp[0][0] = A[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + A[i][0];\n        for (let j = 1; j < i; j++) {\n            dp[i][j] = Math.min(dp[i - 1][j - 1], dp[i - 1][j]) + A[i][j];\n        }\n        dp[i][i] = dp[i - 1][i - 1] + A[i][i];\n    }\n    return Math.min(...dp[n - 1]);\n}","language":"typescript"}
{"task_id":"MBTSP\/1","completion":"    const dp = new Array(m+1).fill().map(() => new Array(n+1).fill(Infinity));\n    dp[0][0] = 0;\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            if (i > 0) {\n                dp[i][j] = Math.min(dp[i][j], dp[i-1][j] + cost[i-1][j]);\n            }\n            if (j > 0) {\n                dp[i][j] = Math.min(dp[i][j], dp[i][j-1] + cost[i][j-1]);\n            }\n        }\n    }\n    return dp[m][n];\n}","language":"typescript"}
{"task_id":"MBTSP\/6","completion":"    return ((a ^ b) & (a ^ b) - 1) == 0;\n}","language":"typescript"}
{"task_id":"MBTSP\/9","completion":"    let count = 0;\n    let prev = str[0];\n    \/\/ loop through the string\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] != prev) {\n            count++;\n            prev = str[i];\n        }\n    }\n    \/\/ for the last char\n    if (str[str.length - 1] == prev) {\n        count++;\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/14","completion":"    let volume = 0;\n    volume += l * b * h;\n    volume *= 0.5;\n    return volume;\n}","language":"typescript"}
{"task_id":"MBTSP\/16","completion":"    const regex = new RegExp(\"^[a-z][a-z0-9_]*$\");\n    const match = text.match(regex);\n    return match ? \"Found a match!\" : \"Not matched!\";\n}","language":"typescript"}
{"task_id":"MBTSP\/26","completion":"    for (let i = 0; i < test_list.length; i++) {\n        let count = 0;\n        for (let j = 0; j < test_list[i].length; j++) {\n            if (test_list[i][j] === K) {\n                count++;\n            }\n        }\n        if (count === test_list[i].length) {\n            return true;\n        }\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBTSP\/29","completion":"    if (arr_size === 0 || arr_size === 1) return -1\n    let result = -1\n    const counts = new Map()\n    arr.forEach(value => {\n        if (counts.has(value)) {\n            counts.set(value, counts.get(value) + 1)\n        } else {\n            counts.set(value, 1)\n        }\n    })\n    counts.forEach((value, key) => {\n        if (value % 2 != 0) {\n            result = key\n        }\n    })\n    return result\n}","language":"typescript"}
{"task_id":"MBTSP\/30","completion":"    \/\/ 1. s<unk>\ufffd\ufffd <unk>\ufffd\ufffd<unk>\ufffd<unk>l\ufffd\ufffd<unk>\ufffd\ufffd <unk>a<unk>\ufffd\ufffd <unk>\ufffd<unk>l\ufffdIJ<unk>\ufffd14 <unk>\ufffd\ufffd<unk>\ufffd\ufffd<unk>\ufffd\ufffd <unk>\ufffd\ufffd<unk>l\ufffd\ufffd\n    let cnt = 0;\n    \/\/ 2. s<unk>\ufffd\ufffd <unk>\ufffd\ufffd<unk>\ufffd<unk>l\ufffd\ufffd<unk>\ufffd\ufffd <unk>\ufffd<unk>l\ufffdIJ<unk>\ufffd\ufffd <unk>\ufffd\ufffd<unk>L\ufffd\ufffd <unk>l\ufffdIJ<unk>\ufffd\ufffd<unk>L\ufffd<unk>\ufffd\ufffd <unk>\ufffd\ufffd<unk>L\ufffd\n    for (let i = 0; i < s.length; i++) {\n        let ch = s[i];\n        let j = i;\n        while (j < s.length) {\n            if (s[j] === ch) {\n                cnt++;\n            }\n            j++;\n        }\n    }\n    return cnt;\n}","language":"typescript"}
{"task_id":"MBTSP\/38","completion":"    const length = list1.length;\n\n    for (let i = 0; i < length; i++) {\n        if (list1[i] % 2 == 0) {\n            return list1[i];\n        }\n    }\n    return 0;\n}","language":"typescript"}
{"task_id":"MBTSP\/42","completion":"    const map = {}\n    let sum = 0;\n    for(let i=0; i<arr.length; i++){\n        map[arr[i]] = (map[arr[i]] || 0) + 1;\n    }\n    for(let i in map){\n        if(map[i] > 1)\n            sum += map[i];\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/43","completion":"  const match = text.match(\/^([a-z]*)(_[a-z]*)*$\/)\n  return match ? `Found a match!` : `Not matched!`\n}","language":"typescript"}
{"task_id":"MBTSP\/60","completion":"    if (n < 0) {\n        return 0\n    }\n\n    if (n == 0) {\n        return 1\n    }\n\n    const map = new Map()\n\n    const dp = new Array(n)\n    for (let i = 0; i < n; i++) {\n        dp[i] = 1\n    }\n\n    for (let i = 1; i < n; i++) {\n        const curr = arr[i]\n\n        for (let j = i - 1; j >= 0; j--) {\n            const prev = arr[j]\n\n            if (curr == prev && i != j) {\n                dp[i] = Math.max(dp[i], 2)\n            }\n\n            if (curr - prev != 0) {\n                if (map.has(curr - prev)) {\n                    dp[i] = Math.max(dp[i], map.","language":"typescript"}
{"task_id":"MBTSP\/63","completion":"  let max = Number.MIN_SAFE_INTEGER\n  for (let i = 0; i < test_list.length; i++) {\n    let [num1, num2] = test_list[i]\n    let diff = Math.abs(num1 - num2)\n    max = Math.max(max, diff)\n  }\n  return max\n}","language":"typescript"}
{"task_id":"MBTSP\/65","completion":"  if (data_list.length == 1) {\n    if (data_list[0] instanceof Array) {\n      return recursive_list_sum(data_list[0]);\n    } else {\n      return data_list[0];\n    }\n  }\n  if (data_list.length > 1) {\n    if (data_list[0] instanceof Array) {\n      return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list.slice(1));\n    } else {\n      return data_list[0] + recursive_list_sum(data_list.slice(1));\n    }\n  }\n}","language":"typescript"}
{"task_id":"MBTSP\/69","completion":"  let subLen = s.length;\n  let lLen = l.length;\n  if (subLen > lLen) {\n    return false;\n  }\n  let j = 0;\n  for (let i = 0; i < lLen; i++) {\n    if (j == subLen) {\n      return true;\n    }\n    if (l[i] === s[j]) {\n      j++;\n    }\n  }\n  return false;\n}","language":"typescript"}
{"task_id":"MBTSP\/78","completion":"    let count = 0;\n    for (let i = 0; i <= n; i++) {\n        if (i.toString(2).split(\"\").filter(x => x === '1').length % 2 === 1) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/80","completion":"    let sum = 0.0;\n    for(let i=1; i<=n; i++) {\n        sum += (i * (i + 1)) * 0.5;\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/82","completion":"    const pi = Math.PI\n    return 4 \/ 3 * pi * r ** 3\n}","language":"typescript"}
{"task_id":"MBTSP\/102","completion":"  return word.split(\"_\").map((word, index)=> word[0].toUpperCase() + word.slice(1).toLowerCase()).join(\"\")\n}","language":"typescript"}
{"task_id":"MBTSP\/109","completion":"    if (n == 0) return 1;\n\n    let oddCount = 0;\n\n    for (let i = 0; i < n - 1; i++) {\n        if (s[i] == s[n-1]) {\n            oddCount++;\n        }\n    }\n    return oddCount + 1;\n}","language":"typescript"}
{"task_id":"MBTSP\/137","completion":"    let total = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] === 0) {\n            total += 1;\n        }\n    }\n    return (total \/ nums.length).toFixed(2);\n}","language":"typescript"}
{"task_id":"MBTSP\/138","completion":"    let power = 1;\n    while (n > 1) {\n        if (n % 2 == 1) {\n            if (power == 1) {\n                return false;\n            } else {\n                return true;\n            }\n        } else {\n            power += 1;\n            n = Math.floor(n \/ 2);\n        }\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBTSP\/139","completion":"    const pi = 3.1415;\n    return 2 * pi * r;\n}","language":"typescript"}
{"task_id":"MBTSP\/147","completion":"    if (m === n) return tri[0][0];\n    const memo = new Array(m);\n    memo.fill(0);\n    for (let i = 0; i < m; i++) {\n        memo[i] = new Array(n).fill(0);\n    }\n    for (let i = m - 1; i >= 0; i--) {\n        for (let j = n - 1; j >= 0; j--) {\n            memo[i][j] = tri[i][j] + Math.max(memo[i + 1][j], memo[i][j + 1]);\n        }\n    }\n    return memo[0][0];\n}","language":"typescript"}
{"task_id":"MBTSP\/152","completion":"    if(x.length < 2) return x;\n    const mid = x.length\/2;\n    const left = merge_sort(x.slice(0,mid));\n    const right = merge_sort(x.slice(mid));\n    const output = [];\n    while(left.length > 0 && right.length > 0) {\n        if(left[0] < right[0]) {\n            output.push(left.shift());\n        } else {\n            output.push(right.shift());\n        }\n    }\n    while(left.length > 0) {\n        output.push(left.shift());\n    }\n    while(right.length > 0) {\n        output.push(right.shift());\n    }\n    return output;\n}","language":"typescript"}
{"task_id":"MBTSP\/166","completion":"    var count = 0;\n    for(var i=0;i<A.length;i++){\n        for(var j=i+1;j<A.length;j++){\n            if((A[i]^A[j])%2==0){\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/171","completion":"  let perimeter = 5 * a\n  return perimeter\n}","language":"typescript"}
{"task_id":"MBTSP\/172","completion":"    return s.match(\/std\/g)?.length\n}","language":"typescript"}
{"task_id":"MBTSP\/182","completion":"    let regex = \/[A-Z][a-z]+|[^a-zA-Z0-9]\/g;\n    let specialRegex = \/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\\/?]\/g;\n    let lowerRegex = \/[a-z]\/g;\n    let upperRegex = \/[A-Z]\/g;\n    let numbersRegex = \/\\d\/g;\n    let specialChars = string0.match(specialRegex);\n    let specialCharsRegex = new RegExp(`${specialChars.join(\"\")}`, 'g');\n    let numbers = string0.match(numbersRegex);\n    let numbersRegex2 = new RegExp(`${numbers.join(\"\")}`, 'g');\n    let uppercase = string0.match(upperRegex);\n    let lowerCase = string0.match(lowerRegex);\n    let uppercaseRegex = new RegExp(`${uppercase.join(\"\")}`, 'g');\n    let lowerCaseRegex = new RegExp(`${lowerCase.join(\"\")}`, 'g');\n    let all = string0.","language":"typescript"}
{"task_id":"MBTSP\/193","completion":"  if (test_tup.length === 0) {\n    return test_tup;\n  }\n\n  \/\/ Sort the array.\n  test_tup.sort();\n\n  \/\/ Remove duplicates\n  let prev = test_tup[0];\n  let result = [prev];\n  for (let i = 1; i < test_tup.length; i++) {\n    if (test_tup[i] !== prev) {\n      result.push(test_tup[i]);\n      prev = test_tup[i];\n    }\n  }\n  return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/200","completion":"    let max_index = 0;\n    let max_value = list1[0];\n    let index_position = [];\n    list1.forEach((element, index) => {\n        if(element > max_value) {\n            max_value = element;\n            max_index = index;\n        }\n    });\n    index_position.push(max_index);\n    for(let i = 1; i < list1.length; i++) {\n        if(list1[i] === max_value && i != max_index) {\n            index_position.push(i);\n        }\n    }\n    return index_position;\n}","language":"typescript"}
{"task_id":"MBTSP\/207","completion":"    let hash_map = {}\n\n    let n = str.length\n    for (let i = 0; i < n; i++) {\n        let char = str[i]\n        if (char in hash_map) {\n            hash_map[char] += 1\n        }\n        else {\n            hash_map[char] = 1\n        }\n    }\n\n    let max_count = 0\n    let res_count = 0\n    for (let char in hash_map) {\n        if (hash_map[char] > max_count) {\n            max_count = hash_map[char]\n            res_count = 1\n        }\n        else if (hash_map[char] === max_count) {\n            res_count += 1\n        }\n    }\n\n    return res_count\n}","language":"typescript"}
{"task_id":"MBTSP\/212","completion":"    let sum = 0;\n    for (let i = 1; i <= n ; i++) {\n        sum += Math.pow(i, 4);\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/213","completion":"\tvar result = [];\n\tfor (var i = 0; i < Math.max(test_tup1.length, test_tup2.length); i++) {\n\t\tresult.push(test_tup1[i] + test_tup2[i]);\n\t}\n\treturn result;\n}","language":"typescript"}
{"task_id":"MBTSP\/216","completion":"    if (list1.length === 0 || list2.length === 0) return false;\n    let hashTable = new Map();\n    let isSublist = false;\n    list2.forEach( item => hashTable.set(JSON.stringify(item), item) );\n    list1.forEach( item => {\n        const key = JSON.stringify(item);\n        const itemInList2 = hashTable.has(key);\n        if (itemInList2) {\n            isSublist = true;\n        } else {\n            isSublist = false;\n        }\n    });\n    return isSublist;\n}","language":"typescript"}
{"task_id":"MBTSP\/240","completion":"  const arr = [...list1];\n  list2.forEach(function (element) {\n    arr[arr.length - 1] = element;\n  });\n  return arr;\n}","language":"typescript"}
{"task_id":"MBTSP\/241","completion":"    if (m == 0 || n == 0 || o == 0) {\n        return [];\n    }\n    const a = [];\n    for (let i = 0; i < o; i++) {\n        a.push([]);\n        for (let j = 0; j < n; j++) {\n            a[i].push([]);\n            for (let k = 0; k < m; k++) {\n                a[i][j].push('*');\n            }\n        }\n    }\n    return a;\n}","language":"typescript"}
{"task_id":"MBTSP\/252","completion":"    return [numbers,0]\n}","language":"typescript"}
{"task_id":"MBTSP\/254","completion":"    return text.match(\/[aei]+\\w+\/g);\n}","language":"typescript"}
{"task_id":"MBTSP\/255","completion":"    if (n === 0) return [[]];\n    let res = [];\n    for (let i = 0; i < l.length; i++) {\n        let rest = l.slice(i);\n        for (let cc of combinations_colors(rest, n-1)) {\n            cc.unshift(l[i]);\n            res.push(cc);\n        }\n    }\n    return res;\n}","language":"typescript"}
{"task_id":"MBTSP\/256","completion":"    const num = new Array(n);\n    for (let i = 0; i < n; i++) {\n        num[i] = true;\n    }\n\n    for (let i = 2; i * i < n; i++) {\n        if (num[i]) {\n            for (let j = i * i; j < n; j += i) {\n                num[j] = false;\n            }\n        }\n    }\n\n    let count = 0;\n    for (let i = 2; i < n; i++) {\n        if (num[i]) {\n            count++;\n        }\n    }\n\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/259","completion":"    \/\/ 1) Create a hash table to store the key-value pairs\n    const result = {};\n\n    \/\/ 2) For each key-value pair in test_tup1\n    for (let i = 0; i < test_tup1.length; i++) {\n        const key = test_tup1[i];\n        result[key] = i + 1;\n    }\n\n    \/\/ 3) For each key-value pair in test_tup2\n    for (let i = 0; i < test_tup2.length; i++) {\n        const key = test_tup2[i];\n        \/\/ If key is not yet in the hash table, add it.\n        if (!result[key]) {\n            result[key] = i + 1;\n        } else {\n            \/\/ If key is already in the hash table, remove it.\n            delete result[key];\n        }\n    }\n\n    \/\/ 4) Return the keys of the hash table\n    return Object.","language":"typescript"}
{"task_id":"MBTSP\/261","completion":"    let output = [];\n    for (let i = 0; i < test_tup1.length; i++) {\n        output.push(test_tup1[i] \/ test_tup2[i]);\n    }\n    return output;\n}","language":"typescript"}
{"task_id":"MBTSP\/263","completion":"    let merged = new Map();\n    d1.forEach((val, key) => merged.set(key, val));\n    d2.forEach((val, key) => merged.set(key, val));\n    return merged;\n}","language":"typescript"}
{"task_id":"MBTSP\/264","completion":"    if (h_age < 0) return 0;\n    if (h_age <= 2) return h_age * 10;\n    return ((h_age - 2) * 4) + 21;\n}","language":"typescript"}
{"task_id":"MBTSP\/266","completion":"    if (l == 1)\n        return 1;\n    return 4 * l ** 2;\n}","language":"typescript"}
{"task_id":"MBTSP\/278","completion":"    \/\/ TODO: Your code here\n    \/\/ Begin solution\n    let count = 0;\n    for(let item of test_tup){\n        if(typeof item === \"number\"){\n            count++;\n        }else{\n            break;\n        }\n    }\n    return count;\n    \/\/ End solution\n}","language":"typescript"}
{"task_id":"MBTSP\/280","completion":"    let found: boolean = false;\n    for (let i = 0; i < dlist.length; i++) {\n        if (dlist[i] === item) {\n            found = true;\n            break;\n        }\n    }\n\n    return [found, i];\n}","language":"typescript"}
{"task_id":"MBTSP\/285","completion":"  if(text.match(\/ab{2,3}b\/)){\n    return 'Found a match!'\n  } else{\n    return 'Not matched!'\n  }\n}","language":"typescript"}
{"task_id":"MBTSP\/287","completion":"  return (2*n)*(2*n + 1)*(2*n + 2)\/6;\n}","language":"typescript"}
{"task_id":"MBTSP\/292","completion":"    if (m === 0) {\n        throw new Error('Zero divider error');\n    }\n    if (n === 0) {\n        return 0;\n    }\n    return Math.floor(n \/ m);\n}","language":"typescript"}
{"task_id":"MBTSP\/294","completion":"    let currentMax: number = 0;\n    for (let i=0;i<listval.length;i++) {\n        if (listval[i]>currentMax) {\n            currentMax=listval[i];\n        }\n    }\n    return currentMax;\n}","language":"typescript"}
{"task_id":"MBTSP\/295","completion":"    let divisors = [];\n    let sum = 0;\n    for (let i = 1; i < number0; i++) {\n        if (number0 % i == 0) {\n            divisors.push(i);\n        }\n    }\n    divisors.forEach(element => {\n        sum += element;\n    });\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/307","completion":"    return [tuplex[0], tuplex[1], tuplex[2].concat([n]), tuplex[3]];\n}","language":"typescript"}
{"task_id":"MBTSP\/308","completion":"    const product = [];\n    for (let index = 0; index < nums1.length; index++) {\n        for (let index2 = 0; index2 < nums2.length; index2++) {\n            product.push(nums1[index] * nums2[index2]);\n        }\n    }\n    product.sort((a, b) => b - a);\n    return product.slice(0, N);\n}","language":"typescript"}
{"task_id":"MBTSP\/310","completion":"    const splitedStr = str1.split(' ');\n    const result = [];\n    for (let i = 0; i < splitedStr.length; i++) {\n        const word = splitedStr[i];\n        const len = word.length;\n        for (let j = 0; j < len; j++) {\n            const ch = word[j];\n            result.push(ch);\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/314","completion":"    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            sum += grid[i][j];\n        }\n    }\n    let max = sum;\n    let dp = new Array(n).fill(0);\n    dp[0] = grid[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[i] = Math.max(dp[i - 1] + grid[0][i], grid[i][0]);\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            let sum1 = dp[j] + grid[i][j];\n            let sum2 = dp[j - 1] + grid[i][j];\n            max = Math.","language":"typescript"}
{"task_id":"MBTSP\/315","completion":"    return str.split(' ').reduce( (acc, val) => {\n        if (val.length % 2 === 0 && val.length > acc.length) {\n            return val;\n        }\n        return acc;\n    }, '-1')\n}","language":"typescript"}
{"task_id":"MBTSP\/317","completion":"    let res = [];\n    let counter = 0;\n    for( let i=0;i<alist.length;i++ ) {\n        counter = 0;\n        if( res.length === 0 ) {\n            res.push([alist[i], 1]);\n        } else {\n            for( let j=0;j<res.length;j++ ) {\n                if( alist[i] === res[j][0] ) {\n                    res[j][1] +=1;\n                    counter = 0;\n                    break;\n                }\n                if( counter > 0 ) {\n                    res[j][0] += counter;\n                    res[j][1] = 1;\n                    counter = 0;\n                }\n                counter +=1;\n            }\n            if( counter > 0 ) {\n                res[res.length - 1][0] += counter;\n                res[res.","language":"typescript"}
{"task_id":"MBTSP\/318","completion":"    let volume = 0;\n    for (let i = 1; i <= s; i++) {\n        for (let j = 1; j <= s; j++) {\n            for (let k = 1; k <= s; k++) {\n                if ((i + j + k) === s) {\n                    volume = Math.max(volume, i * j * k);\n                }\n            }\n        }\n    }\n    return volume;\n}","language":"typescript"}
{"task_id":"MBTSP\/319","completion":"    let foundWords = []\n\n    \/\/ TODO: Write your code here\n    let regex = \/\\b(\\w{5})\\b\/g\n    let result = text.match(regex)\n    \/\/ console.log(result)\n\n    for(let word of result){\n        if(word.length === 5){\n            foundWords.push(word)\n        }\n    }\n\n    return foundWords\n}","language":"typescript"}
{"task_id":"MBTSP\/322","completion":"    let minimum = Math.min(...list1);\n    return list1.reduce(function(acc, item, i) {\n        if (item === minimum) {\n            acc.push(i);\n        }\n        return acc;\n    }, []);\n}","language":"typescript"}
{"task_id":"MBTSP\/326","completion":"    \n    let counts = {};\n    test_list.forEach(s => {\n        let split_words = s.split(' ');\n        split_words.forEach(word => {\n            if(counts[word]) {\n                counts[word] += 1;\n            }\n            else {\n                counts[word] = 1;\n            }\n        });\n    });\n\n    let max = 0;\n    let most_occur = \"\";\n    for(let word in counts) {\n        if(max < counts[word]) {\n            max = counts[word];\n            most_occur = word;\n        }\n    }\n    return most_occur;\n\n}","language":"typescript"}
{"task_id":"MBTSP\/328","completion":"    let newList = [];\n    let m_temp = m % list1.length;\n    let n_temp = n % list1.length;\n\n    for (let i = m_temp; i < list1.length; i++) {\n        newList.push(list1[i])\n    }\n\n    for (let i = 0; i < n_temp; i++) {\n        newList.push(list1[i])\n    }\n\n    return newList;\n}","language":"typescript"}
{"task_id":"MBTSP\/330","completion":"    const findWord = \/\\b([a-zA-Z]{3,5})\\b\/g;\n    const match = text.match(findWord);\n    return match == null ? [] : match;\n}","language":"typescript"}
{"task_id":"MBTSP\/331","completion":"    const count = (n >>> 0).toString(2).split(\"\").filter(char => char == \"0\").length;\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/337","completion":"    const pattern = \/(\\w+?)(\\.|!|\\?)\/g\n    const match = pattern.exec(text)\n    if (match) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/344","completion":"    let result = 0;\n    for (let i = n; i <= m; i++) {\n        if (Math.sqrt(i) % 1 === 0) {\n            result++;\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/345","completion":"  let diffs = [];\n  let i = 0;\n  for (let j = 0; j < nums.length - 1; j++) {\n    if (nums[j] === nums[j + 1]) {\n      diffs.push(0);\n    } else {\n      diffs.push(nums[j + 1] - nums[j]);\n    }\n  }\n  return diffs;\n}","language":"typescript"}
{"task_id":"MBTSP\/347","completion":"    if (m <= 0 || n <= 0) return 0;\n    return m * n + count_Squares(m - 1, n - 1);\n}","language":"typescript"}
{"task_id":"MBTSP\/353","completion":"  \/\/ TODO: answer here\n  return list1;\n}","language":"typescript"}
{"task_id":"MBTSP\/370","completion":"    \/\/ { price[0][1], price[1][1], price[2][1] }\n    return price.slice().sort((a, b) => parseFloat(b[1]) - parseFloat(a[1]));\n}","language":"typescript"}
{"task_id":"MBTSP\/371","completion":"    \/\/ Your code here\n    let n = right_element - left_element + 1\n    let idx = 0;\n    while (idx < n) {\n        if (A[left_element + idx] != idx + left_element) {\n            break;\n        }\n        idx += 1;\n    }\n    if (idx == n) {\n        return left_element + n;\n    }\n    return left_element + idx;\n}","language":"typescript"}
{"task_id":"MBTSP\/374","completion":"  if (str.length === 0) return []\n  if (str.length === 1) return [str]\n  if (str.length === 2) return [str, str[1] + str[0]]\n  const first = str[0]\n  const remainder = str.slice(1)\n  const result = permute_string(remainder)\n  const ret = []\n  result.forEach(r => {\n    for (let i = 0; i <= r.length; i++) {\n      ret.push(r.slice(0, i) + first + r.slice(i))\n    }\n  })\n  return ret\n}","language":"typescript"}
{"task_id":"MBTSP\/375","completion":"    const remainder = n % m;\n    if (remainder <= (m \/ 2)) return n - remainder;\n    else return n + m - remainder;\n}","language":"typescript"}
{"task_id":"MBTSP\/380","completion":"    let result = []\n    for (let i = 0; i < rownum; i++) {\n        let row = []\n        for (let j = 0; j < colnum; j++) {\n            row.push(i * j)\n        }\n        result.push(row)\n    }\n    return result\n}","language":"typescript"}
{"task_id":"MBTSP\/381","completion":"    return list_data.sort(function (a, b) {\n        if (a[index_no] > b[index_no]) {\n            return 1;\n        } else if (a[index_no] < b[index_no]) {\n            return -1;\n        } else {\n            return 0;\n        }\n    });\n}","language":"typescript"}
{"task_id":"MBTSP\/396","completion":"    return string0.length > 0 && \n        string0[0] === string0[string0.length - 1] \n        ? \"Valid\"\n        : \"Invalid\"\n}","language":"typescript"}
{"task_id":"MBTSP\/407","completion":"  if(n == 0) return 0;\n  let arr = n.toString().split(\"\");\n  for(let i = arr.length - 1; i > 0; i--) {\n    if(parseInt(arr[i]) > parseInt(arr[i-1])) {\n      let bigger = arr[i-1];\n      arr[i-1] = arr[i];\n      arr[i] = bigger;\n      return parseInt(arr.join(''));\n    }\n  }\n  return false;\n}","language":"typescript"}
{"task_id":"MBTSP\/408","completion":"  if (nums1.length == 0 || nums2.length == 0) {\n    return [];\n  }\n\n  let res = [];\n  let lookup = new Map();\n\n  for (let i = 0; i < nums1.length; i++) {\n    lookup.set(nums1[i], i);\n  }\n\n  for (let i = 0; i < nums2.length; i++) {\n    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n    for (let j = i; j < nums1.length; j++) {\n      if (nums1[j] + nums2[i] < min) {\n        min = nums1[j] + nums2[i];\n        minIndex = j;\n      }\n    }\n\n    if (lookup.has(nums2[minIndex])) {\n      let val = lookup.get(nums2[minIndex]);\n      res.","language":"typescript"}
{"task_id":"MBTSP\/410","completion":"    let minValue: number = Infinity\n    for(let i = 0; i < listval.length; i++){\n        if(listval[i] < minValue){\n            minValue = listval[i]\n        }\n    }\n    return minValue\n}","language":"typescript"}
{"task_id":"MBTSP\/411","completion":"    const regex = \/[a-z][A-Za-z0-9]+\/g;\n    const result = word.match(regex);\n    return result.map(item => item[0].toUpperCase() + item.substring(1).toLowerCase()).join('');\n}","language":"typescript"}
{"task_id":"MBTSP\/431","completion":"    \/\/ your code here\n    if (list1.length !== list2.length) return null;\n    return list1.filter((item) => list2.includes(item)).length > 0;\n}","language":"typescript"}
{"task_id":"MBTSP\/439","completion":"  let strNum = \"\";\n  for (let i = 0; i < L.length; i++) {\n    strNum += L[i];\n  }\n  return parseInt(strNum);\n}","language":"typescript"}
{"task_id":"MBTSP\/449","completion":"    const a = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\n    const b = Math.sqrt(Math.pow(x3 - x2, 2) + Math.pow(y3 - y2, 2))\n    const c = Math.sqrt(Math.pow(x1 - x3, 2) + Math.pow(y1 - y3, 2))\n    if (a + b > c && a + c > b && b + c > a) {\n        return 'Yes'\n    }\n    else {\n        return 'No'\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/453","completion":"  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      if (i % 2 == 0) sum += i\n    }\n  }\n  return sum\n}","language":"typescript"}
{"task_id":"MBTSP\/456","completion":"    let temp = '';\n    let reverse = [];\n    for (let i = 0; i < stringlist.length; i++) {\n        temp = stringlist[i];\n        reverse.push(temp.split('').reverse().join(''));\n    }\n    return reverse;\n}","language":"typescript"}
{"task_id":"MBTSP\/462","completion":"  let list2 = [];\n  let list3 = [];\n  let list4 = [];\n  for(let i = 0; i < list1.length; i++) {\n    if(i === 0) {\n      list2.push(list1[i]);\n      list3.push(list1[i]);\n      list4.push(list1[i]);\n    } else {\n      for(let j = 0; j < list2.length; j++) {\n        list3.push(list2[j]);\n        list4.push(list2[j]);\n        list2.push(list1[i]);\n      }\n    }\n  }\n  list4.push(list1[list1.length - 1]);\n  list3.push(list1[list1.length - 1]);\n  list2.push(list1[list1.length - 1]);\n  list4.push(list1[list1.length - 1]);\n  list3.","language":"typescript"}
{"task_id":"MBTSP\/464","completion":"  if (dict.size == 1) {\n    return true;\n  }\n\n  if (n % dict.size == 0) {\n    return true;\n  }\n\n  return false;\n}","language":"typescript"}
{"task_id":"MBTSP\/465","completion":"    const result = new Map()\n    dict1.forEach((val, key) => val ? result.set(key, val) : null)\n    return result\n}","language":"typescript"}
{"task_id":"MBTSP\/468","completion":"    const dp = new Array(n).fill(0)\n\n    let max = 0\n    for (let i = 0; i < n; i++) {\n        dp[i] = arr[i]\n        for (let j = i - 1; j >= 0; j--) {\n            if (arr[i] >= arr[j]) {\n                dp[i] = Math.max(dp[j] * arr[i], dp[i])\n                max = Math.max(max, dp[i])\n            }\n        }\n    }\n\n    return max\n}","language":"typescript"}
{"task_id":"MBTSP\/471","completion":"    const product = arr.reduce((acc, cur) => acc * cur)\n    const remainder = product % n\n    return remainder\n}","language":"typescript"}
{"task_id":"MBTSP\/473","completion":"    const result = new Set<Array<number>>();\n    test_list1.map(item => {\n        if (test_list2.some(ele => ele.sort().join() === item.sort().join())) {\n            result.add(item);\n        }\n    });\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/479","completion":"    const str = n.toString()\n    return Number(str[0])\n}","language":"typescript"}
{"task_id":"MBTSP\/486","completion":"    const factorial = (n) => n == 0 ? 1 : n * factorial(n - 1)\n    let numerator = factorial(n) \/ (factorial(k) * factorial(n - k))\n    numerator *= p ** k * (1 - p) ** (n - k)\n    return numerator\n}","language":"typescript"}
{"task_id":"MBTSP\/500","completion":"    let str = ' ';\n    for (let i = 0; i < list.length; i++) {\n        str += ' ' + list[i];\n    }\n    return str;\n}","language":"typescript"}
{"task_id":"MBTSP\/503","completion":"    \/\/ 1. Declare an empty array\n    let count = 0;\n    let answer = [];\n    \/\/ 2. Loop through the given array\n    for (let i = 0; i < nums.length; i++) {\n        \/\/ 3. If count is less than 0, it means the array is empty, and so, we should set count to 0\n        if (count < 0) {\n            count = 0;\n            answer.push(nums[i]);\n            \/\/ 4. Else, we are not at the end of the array, and so, we should add nums[i] to count\n        } else if (i + 1 === nums.length) {\n            answer.push(nums[i]);\n            count = answer.length - 1;\n        } else {\n            if (nums[i] === nums[i + 1]) {\n                count++;\n            } else {\n                answer.push(nums[i]);\n                count = answer.","language":"typescript"}
{"task_id":"MBTSP\/508","completion":"    const l1map = new Map();\n    const l2map = new Map();\n\n    \/\/ build map\n    for (let i = 0; i < l1.length; i += 1) {\n        if (l1map.has(l1[i])) {\n            l1map.set(l1[i], l1map.get(l1[i]) + 1);\n        } else {\n            l1map.set(l1[i], 1);\n        }\n    }\n    for (let i = 0; i < l2.length; i += 1) {\n        if (l2map.has(l2[i])) {\n            l2map.set(l2[i], l2map.get(l2[i]) + 1);\n        } else {\n            l2map.set(l2[i], 1);\n        }\n    }\n\n    \/\/ compare the map\n    const l1keys = Array.","language":"typescript"}
{"task_id":"MBTSP\/511","completion":"    let start = 2,\n        min = 0;\n\n    while (start * start <= num) {\n        while (num % start === 0) {\n            num \/= start;\n            min += start;\n        }\n        start++;\n    }\n    min += num;\n\n    return min;\n}","language":"typescript"}
{"task_id":"MBTSP\/515","completion":"    let hashMap = new Map();\n    for(let i = 0; i < arr.length; i++) {\n        const complement = n - arr[i];\n        if(hashMap.has(complement)) {\n            return true;\n        }\n        else {\n            hashMap.set(arr[i], i);\n        }\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBTSP\/518","completion":"    return Math.sqrt(num);\n}","language":"typescript"}
{"task_id":"MBTSP\/522","completion":"    let max = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i; j < arr.length; j++) {\n            let count = 0;\n            let s = arr[i];\n            for (let k = j + 1; k < arr.length; k++) {\n                if (s > arr[k]) {\n                    count++;\n                } else if (s < arr[k]) {\n                    break;\n                }\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n    }\n    return max;\n}","language":"typescript"}
{"task_id":"MBTSP\/528","completion":"    let min = Infinity;\n    let result = [];\n    for (const arr of list1) {\n        if (arr.length < min) {\n            min = arr.length;\n            result = arr;\n        }\n    }\n    return [min, result];\n}","language":"typescript"}
{"task_id":"MBTSP\/530","completion":"    const negCount = nums.filter(num => num < 0).length;\n    const total = nums.length;\n    return (negCount \/ total).toFixed(2);\n}","language":"typescript"}
{"task_id":"MBTSP\/534","completion":"  const pattern_index = text.indexOf(pattern);\n  if (pattern_index === -1) return [-1, -1];\n  const result = [];\n  result.push(pattern_index);\n  result.push(pattern_index + pattern.length);\n  return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/536","completion":"    return list.filter((_, i) => i % n === 0);\n}","language":"typescript"}
{"task_id":"MBTSP\/540","completion":"    const counts = {};\n    arr.forEach(n => counts[n] = counts[n] ? counts[n] + 1 : 1);\n    const maxCount = Math.max(...Object.values(counts));\n    const minCount = Math.min(...Object.values(counts));\n    let diff = maxCount - minCount;\n    if (diff > n) {\n        diff = n - minCount;\n    }\n    return diff;\n}","language":"typescript"}
{"task_id":"MBTSP\/543","completion":"    let sum = num1 + num2;\n    let length = sum.toString().length;\n    return length;\n}","language":"typescript"}
{"task_id":"MBTSP\/546","completion":"    const string_length = string0.length;\n    const index = string0.lastIndexOf(char);\n    return index == -1 ? null : index + 1;\n}","language":"typescript"}
{"task_id":"MBTSP\/550","completion":"  if (high <= low) {\n    return arr[high];\n  }\n\n  let mid = Math.floor((low + high) \/ 2);\n  if (arr[mid] > arr[mid + 1]) {\n    return find_Max(arr, low, mid);\n  } else {\n    return find_Max(arr, mid + 1, high);\n  }\n}","language":"typescript"}
{"task_id":"MBTSP\/552","completion":"    const seq_num = seq_nums.length;\n    if(seq_num < 1){\n        return \"Non Linear Sequence\"\n    }\n    const seq_sum = seq_nums.reduce((prev, curr) => prev + curr);\n    if(seq_sum === seq_num * (seq_num - 1)){\n        return \"Linear Sequence\"\n    }\n    return \"Non Linear Sequence\"\n}","language":"typescript"}
{"task_id":"MBTSP\/553","completion":"  return parseFloat(test_tup.join(\".\"));\n}","language":"typescript"}
{"task_id":"MBTSP\/556","completion":"    let result = 0;\n    for (let i = 0; i < A.length; i++) {\n        for (let j = i + 1; j < A.length; j++) {\n            if ((A[i] ^ A[j]) % 2 != 0) {\n                result++;\n            }\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/580","completion":"  \/\/ TODO: Return the result of applying the function to test_tuple\n  const _tuple = test_tuple;\n  var result = [];\n  for(let i = 0; i < _tuple.length; i++){\n    if(_tuple[i] instanceof Array){\n      result.push(extract_even(_tuple[i]));\n    }else if(_tuple[i]%2 == 0){\n      result.push(_tuple[i]);\n    }\n  }\n  return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/582","completion":"    return dict1.size === 0;\n}","language":"typescript"}
{"task_id":"MBTSP\/586","completion":"    \/\/ write code here.\n    let temp = a.splice(0, k);\n    a = a.concat(temp);\n    return a;\n}","language":"typescript"}
{"task_id":"MBTSP\/591","completion":"  \/\/TODO:\n  return newList;\n}","language":"typescript"}
{"task_id":"MBTSP\/593","completion":"    return ip.replace(\/0\/g, \"\");\n}","language":"typescript"}
{"task_id":"MBTSP\/608","completion":"    if (n === 1) {\n        return 1;\n    }\n    if (n === 2) {\n        return 2;\n    }\n    if (n === 3) {\n        return 5;\n    }\n    if (n === 4) {\n        return 15;\n    }\n    return bell_Number(n - 1) + bell_Number(n - 2) + bell_Number(n - 3) + bell_Number(n - 4);\n}","language":"typescript"}
{"task_id":"MBTSP\/609","completion":"    return Math.floor(A*N\/B)\n}","language":"typescript"}
{"task_id":"MBTSP\/610","completion":"    let kth = list1[L - 1];\n    list1.splice(L - 1, 1);\n    return list1;\n}","language":"typescript"}
{"task_id":"MBTSP\/615","completion":"    return nums.reduce((avg, current) => {\n        return avg.map((val, idx) => val + current[idx]);\n    }, nums[0].map((val, idx) => 0)).map((val, idx) => val \/ nums.length);\n}","language":"typescript"}
{"task_id":"MBTSP\/619","completion":"\tlet temp_str = test_str.split('');\n\tlet temp_num = '';\n\tfor(let i = 0; i < temp_str.length; i += 1) {\n\t\tif(temp_str[i].search(\/[0-9]\/) != -1) {\n\t\t\ttemp_num += temp_str[i];\n\t\t}\n\t}\n\tlet num_str = '';\n\tfor(let i = 0; i < temp_str.length; i += 1) {\n\t\tif(temp_str[i].search(\/[0-9]\/) == -1) {\n\t\t\tnum_str += temp_str[i];\n\t\t}\n\t}\n\treturn num_str + temp_num;\n}","language":"typescript"}
{"task_id":"MBTSP\/625","completion":"    let newArr = newList.slice()\n    newArr[0], newArr[newList.length - 1] = newArr[newList.length - 1], newArr[0]\n    return newArr\n}","language":"typescript"}
{"task_id":"MBTSP\/627","completion":"    let res = end + 1;\n    for (let i = start; i <= end; i++) {\n        if (array.indexOf(i) < 0) {\n            res = i;\n            break;\n        }\n    }\n    return res;\n}","language":"typescript"}
{"task_id":"MBTSP\/640","completion":"    const stack = [];\n    const new_items = [];\n\n    for (let i = 0; i < items.length; i++) {\n        const current_item = items[i];\n\n        if (current_item.includes('(')) {\n            stack.push(current_item);\n        } else if (current_item.includes(')')) {\n            const top_item = stack.pop();\n            if (top_item.charAt(top_item.length - 1) === '(') {\n                continue;\n            } else {\n                new_items.push(top_item);\n            }\n        } else {\n            new_items.push(current_item);\n        }\n    }\n\n    while (stack.length) {\n        const top_item = stack.pop();\n        if (top_item.charAt(top_item.length - 1) === '(') {\n            continue;\n        } else {\n            new_items.","language":"typescript"}
{"task_id":"MBTSP\/651","completion":"    return test_tup2.every(val => test_tup1.includes(val));\n}","language":"typescript"}
{"task_id":"MBTSP\/679","completion":"    let result = \"\";\n    let keyArr = Array.from(ditionary.keys());\n    if (key >= 0 && key < keyArr.length) {\n        result = keyArr[key];\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/682","completion":"  return nums1.map((item, index) => item * nums2[index]);\n}","language":"typescript"}
{"task_id":"MBTSP\/688","completion":"    return Math.sqrt(a * a + b * b);\n}","language":"typescript"}
{"task_id":"MBTSP\/690","completion":"    if (nums.length === 0) return [];\n    let start = 0;\n    let end = 1;\n    let result = [];\n    while (end < nums.length) {\n        result.push(nums[start] * nums[end]);\n        start++;\n        end++;\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/692","completion":"    if(N <= 0){\n        return 0\n    }\n    let digit = 1\n    while(N > 0){\n        digit = digit * N\n        N = N - 1\n    }\n    return digit % 100\n}","language":"typescript"}
{"task_id":"MBTSP\/701","completion":"    let total = 0;\n    let leftSum = 0;\n    let rightSum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        total += arr[i];\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (leftSum == total - leftSum - arr[i]) return i;\n        leftSum += arr[i];\n    }\n    return -1;\n}","language":"typescript"}
{"task_id":"MBTSP\/706","completion":"    if (arr2.length > n || arr1.length > m) return false\n    for (let i = 0; i < arr2.length; i++) {\n        for (let j = 0; j < arr1.length; j++) {\n            if (arr2[i] === arr1[j]) break\n        }\n        if (j === arr1.length) return false\n    }\n    return true\n}","language":"typescript"}
{"task_id":"MBTSP\/716","completion":"    let result = 4 * a\n    return result\n}","language":"typescript"}
{"task_id":"MBTSP\/717","completion":"    \/\/ TODO: Your code here!\n    let sum = 0;\n    for (let i = 0; i < data.length; i++) {\n        sum += data[i];\n    }\n    const mean = sum \/ data.length;\n    let sd = 0;\n    for (let i = 0; i < data.length; i++) {\n        sd += Math.pow((data[i] - mean), 2);\n    }\n    sd \/= data.length - 1;\n    sd = Math.sqrt(sd);\n    return sd;\n}","language":"typescript"}
{"task_id":"MBTSP\/722","completion":"  let res = new Map();\n  students.forEach((value, key) => {\n    if (value[0] >= h && value[1] >= w) {\n      res.set(key, value);\n    }\n  });\n  return res;\n}","language":"typescript"}
{"task_id":"MBTSP\/723","completion":"  const map1 = nums1.map(x => x * x)\n  const map2 = nums2.map(x => x * x)\n\n  let count = 0\n  for (let i = 0; i < map1.length; i++) {\n    if (map1[i] === map2[i]) {\n      count++\n    }\n  }\n\n  return count\n}","language":"typescript"}
{"task_id":"MBTSP\/734","completion":"    let sum = 0\n    for (let i = 0; i < n; i++) {\n        let product = 1\n        for (let j = i; j < n; j++) {\n            product *= arr[j]\n            sum += product\n        }\n    }\n    return sum\n}","language":"typescript"}
{"task_id":"MBTSP\/748","completion":"    return str1.replace(\/\\w\\S*\/g, function (txt) {\n        return txt.charAt(0).toUpperCase() + txt.substr(1).replace(\/([A-Z])\/g, \" $1\");\n    });\n}","language":"typescript"}
{"task_id":"MBTSP\/750","completion":"  \/\/ test_list.push(test_tup[0])\n  \/\/ test_list.push(test_tup[1])\n  return test_list\n  \/\/ return [...test_list, test_tup[0], test_tup[1]]\n}","language":"typescript"}
{"task_id":"MBTSP\/755","completion":"    let min1 = Math.min.apply(Math, numbers);\n    let min2 = Infinity;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] < min2 && numbers[i] > min1) {\n            min2 = numbers[i];\n        }\n    }\n    return min2 === Infinity ? null : min2;\n}","language":"typescript"}
{"task_id":"MBTSP\/762","completion":"    const monthNum = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if (monthnum3 > 12) {\n        return false;\n    }\n    return monthNum[monthnum3-1] === 30;\n}","language":"typescript"}
{"task_id":"MBTSP\/773","completion":"    const index = text.indexOf(pattern);\n    return [text.slice(index,index+pattern.length), index, index+pattern.length]\n}","language":"typescript"}
{"task_id":"MBTSP\/781","completion":"    var sum = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            sum += i;\n        }\n    }\n    return sum % 2 == 0 ? \"Even\" : \"Odd\"\n}","language":"typescript"}
{"task_id":"MBTSP\/784","completion":"    if (list1.length === 0) return 0\n    const evenNum = list1.find(num => num % 2 === 0)\n    const oddNum = list1.find(num => num % 2 !== 0)\n    return evenNum * oddNum\n}","language":"typescript"}
{"task_id":"MBTSP\/789","completion":"    return (s * l);\n}","language":"typescript"}
{"task_id":"MBTSP\/791","completion":"  const [a, b, c, d, e] = test_tup;\n  return [a, b, c, e];\n}","language":"typescript"}
{"task_id":"MBTSP\/794","completion":"    let result = '';\n\n    if (text.includes('a') && text.endsWith('b')) {\n        result = 'Found a match!';\n    } else {\n        result = 'Not matched!';\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/796","completion":"    let sum = 0\n    dict.forEach((v, k) => {\n        sum += v\n    })\n    return sum\n}","language":"typescript"}
{"task_id":"MBTSP\/801","completion":"    let count = 0;\n    if (x == y && y == z ) {\n        count++;\n    }\n    if (x == y || y == z || z == x ) {\n        count++;\n    }\n    if (x == z || z == y || y == x ) {\n        count++;\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/809","completion":"    return (function (test_tup2, test_tup1) {\n        return (test_tup2.length === test_tup1.length) && test_tup2.every((v,i)=> v < test_tup1[i]);\n    })(test_tup2, test_tup1);\n}","language":"typescript"}
{"task_id":"MBTSP\/810","completion":"  let answer = [];\n  let i = 0;\n  while(i < a) {\n    answer.push('p');\n    answer.push('p');\n    answer.push('p');\n    answer.push('p');\n    answer.push('q');\n    answer.push('q');\n    i++;\n  }\n  while(i < b) {\n    answer.push('q');\n    answer.push('r');\n    answer.push('r');\n    answer.push('s');\n    answer.push('s');\n    i++;\n  }\n  while(i < c) {\n    answer.push('p');\n    answer.push('p');\n    answer.push('p');\n    answer.push('p');\n    answer.push('q');\n    answer.push('q');\n    i++;\n  }\n  while(i < d) {\n    answer.push('q');\n    answer.push('r');\n    answer.push('r');\n    answer.push('s');\n    answer.","language":"typescript"}
{"task_id":"MBTSP\/816","completion":"\treturn [];\n}","language":"typescript"}
{"task_id":"MBTSP\/829","completion":"\tconst map = {}\n\tconst arr = []\n\tinput.forEach(x => {\n\t\tif (map[x] == undefined) {\n\t\t\tarr.push(x)\n\t\t\tmap[x] = 0\n\t\t}\n\t\tmap[x]++\n\t})\n\n\tarr.sort((a, b) => {\n\t\tif (map[a] > map[b]) return -1\n\t\tif (map[a] < map[b]) return 1\n\t\treturn 0\n\t})\n\treturn arr[1]\n}","language":"typescript"}
{"task_id":"MBTSP\/830","completion":"    return Math.ceil(a * Math.pow(10, digits)) \/ Math.pow(10, digits)\n}","language":"typescript"}
{"task_id":"MBTSP\/834","completion":"    const res = [];\n    const [startRow, endRow] = [0, n-1];\n    const [startCol, endCol] = [0, n-1];\n    while (startRow <= endRow && startCol <= endCol) {\n        for (let i = startCol; i <= endCol; i++) {\n            res.push(new Array(n).fill(startRow*n+i+1));\n        }\n        startRow++;\n        for (let i = startRow; i <= endRow; i++) {\n            res.push(new Array(n).fill(i+1+startCol*n));\n        }\n        endCol--;\n        for (let i = endCol; i >= startCol; i--) {\n            res.push(new Array(n).fill(endRow*n+i+1));\n        }\n        endRow--;\n        for (let i = endRow; i >= startRow; i--) {\n            res.","language":"typescript"}
{"task_id":"MBTSP\/837","completion":"  let cubeSum = 0;\n  let k = 1;\n  let number = 1;\n\n  while (k <= n) {\n    cubeSum += number ** 3;\n    k++;\n    number += 2;\n  }\n\n  return cubeSum;\n}","language":"typescript"}
{"task_id":"MBTSP\/840","completion":"    \/\/ write code here\n    if (a * a + b * b - c * c < 0) return \"No\";\n    return \"Yes\";\n}","language":"typescript"}
{"task_id":"MBTSP\/849","completion":"    const primeList = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101];\n    let sum = 0;\n    for (let i = 0; i < primeList.length; i++) {\n        if (N % primeList[i] === 0) {\n            sum += primeList[i];\n        }\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/850","completion":"\tlet a1 = Math.abs(a)\n\tlet b1 = Math.abs(b)\n\tlet c1 = Math.abs(c)\n\tif (a + b < c) return false\n\tif (a1 + c1 < b1) return false\n\tif (b1 + c1 < a1) return false\n\treturn true\n}","language":"typescript"}
{"task_id":"MBTSP\/854","completion":"    return rawheap.map(x => x)\n}","language":"typescript"}
{"task_id":"MBTSP\/856","completion":"    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n                count = count + 1;\n            }\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/874","completion":"    if(str1.length + str2.length < 2) {\n        return false\n    }\n    else {\n        for(let i = 0; i < str2.length; i++) {\n            if(str1.charAt(i + str2.length) != str2.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/875","completion":"    return Math.min(...test_list.map(x => Math.abs(x[0] - x[1])).sort((a, b) => a - b));\n}","language":"typescript"}
{"task_id":"MBTSP\/876","completion":"    const gcd = function (x: number, y: number): number  {\n        if (y === 0) {\n            return x\n        }\n        return gcd(y, x % y)\n    }\n    return (x * y) \/ gcd(x, y)\n}","language":"typescript"}
{"task_id":"MBTSP\/879","completion":"    return \/a.*b$\/.test(text) ? 'Found a match!' : 'Not matched!';\n}","language":"typescript"}
{"task_id":"MBTSP\/880","completion":"    var discriminant = (b ** 2) - (4 * a * c);\n    if (discriminant < 0) {\n        return \"No solutions\";\n    }\n    else if (discriminant == 0) {\n        return \"1 solution\";\n    }\n    else {\n        return `${Math.floor(discriminant \/ (2 * a))} solutions`;\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/882","completion":"    if (b <= 0 || h <= 0) {\n        return \"Wrong input\";\n    }\n    return 2 * (b * h);\n}","language":"typescript"}
{"task_id":"MBTSP\/885","completion":"    if(str1.length != str2.length){\n        return false\n    }\n    const s1 = new Map(), s2 = new Map()\n    for (let i = 0; i < str1.length; i++) {\n        if (s1.has(str1[i]) && s1.get(str1[i]) != str2[i]) {\n            return false\n        }\n        if (s2.has(str2[i]) && s2.get(str2[i]) != str1[i]) {\n            return false\n        }\n        s1.set(str1[i], str2[i])\n        s2.set(str2[i], str1[i])\n    }\n    return true\n}","language":"typescript"}
{"task_id":"MBTSP\/889","completion":"    const ret = [];\n    lists.forEach(list => {\n        let new_list = [];\n        list.forEach(num => {\n            new_list.push(num);\n        });\n        ret.push(new_list);\n    });\n    return ret;\n}","language":"typescript"}
{"task_id":"MBTSP\/895","completion":"    const dp = Array(A.length + 1).fill(0);\n    dp[0] = 0;\n    dp[1] = A[0];\n    for (let i = 1; i < A.length; i++) {\n        dp[i + 1] = Math.max(dp[i - 1] + A[i], dp[i]);\n    }\n    return dp[A.length];\n}","language":"typescript"}
{"task_id":"MBTSP\/899","completion":"    if (arr.length === 1) {\n        return true;\n    }\n    let leftMax = -Infinity,\n        rightMax = -Infinity;\n    for (const v of arr) {\n        if (v > leftMax) {\n            leftMax = v;\n        }\n    }\n    if (leftMax < n \/ 2) {\n        return false;\n    }\n    for (const v of arr) {\n        if (v < rightMax) {\n            return false;\n        }\n        if (v > leftMax && v < n) {\n            rightMax = v;\n        }\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBTSP\/902","completion":"    const newMap = new Map(d1);\n    d2.forEach( (value, key) => {\n        if(newMap.has(key)){\n            newMap.set(key,newMap.get(key)+value);\n        }\n        else{\n            newMap.set(key,value);\n        }\n    });\n    return newMap;\n}","language":"typescript"}
{"task_id":"MBTSP\/903","completion":"    let bitsCount: number = 0;\n\n    for (let i = 1; i <= n; i++) {\n        bitsCount += ~i & (i - 1);\n    }\n\n    return bitsCount;\n}","language":"typescript"}
{"task_id":"MBTSP\/914","completion":"    let result = false;\n    if (s.length % 2 === 0) {\n        for (let i = 0; i < s.length; i += 2) {\n            if (s[i] !== s[i + 1]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/916","completion":"    const arr = Array(arr_size).fill(false);\n    for (let i = 0; i < arr_size; i++) {\n        for (let j = i + 1; j < arr_size; j++) {\n            for (let k = j + 1; k < arr_size; k++) {\n                if (arr[i] === false && arr[j] === false && arr[k] === false) {\n                    if (A[i] + A[j] + A[k] === sum) {\n                        return [A[i], A[j], A[k]];\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBTSP\/923","completion":"    if (m == 0) return n\n    if (n == 0) return m\n    if (X[m - 1] == Y[n - 1]) return 1 + super_seq(X, Y, m - 1, n - 1)\n    return 1 + Math.min(super_seq(X, Y, m - 1, n), super_seq(X, Y, m, n - 1))\n}","language":"typescript"}
{"task_id":"MBTSP\/930","completion":"    if (\/^a.*\/.test(text)) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/931","completion":"    let n = number0;\n    let result = 0;\n    for (let i = 1; i <= n; i++) {\n        result += Math.pow(i,3);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/935","completion":"  let sum = 0;\n  for (let index = 1; index <= number0; index++) {\n    sum += (index * index);\n  }\n  return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/939","completion":"    let sorted = models.sort((a, b) => {\n        if (a.get('color') > b.get('color')) {\n            return 1;\n        } else if (a.get('color') < b.get('color')) {\n            return -1;\n        } else {\n            if (a.get('model') > b.get('model')) {\n                return 1;\n            } else if (a.get('model') < b.get('model')) {\n                return -1;\n            } else {\n                if (a.get('make') > b.get('make')) {\n                    return 1;\n                } else if (a.get('make') < b.get('make')) {\n                    return -1;\n                } else {\n                    return 0;\n                }\n            }\n        }\n    });\n    return sorted;\n}","language":"typescript"}
{"task_id":"MBTSP\/944","completion":"    \/\/ 1. create empty map for words and their positions\n    const map = new Map();\n    \/\/ 2. create array of words\n    const arr = text.split(\" \");\n    \/\/ 3. loop array\n    for (let index = 0; index < arr.length; index++) {\n        \/\/ 4. check if it exist in map\n        if (map.has(arr[index])) {\n            \/\/ 5. if exists add 1 to its position\n            map.set(arr[index], map.get(arr[index]) + 1);\n        } else {\n            \/\/ 6. if does not exist add the word to its position\n            map.set(arr[index], 1);\n        }\n    }\n    \/\/ 7. loop map\n    for (let [key, value] of map) {\n        \/\/ 8. if map is not empty print the key, value\n        if (value !== 0) {\n            console.log(`${key} - ","language":"typescript"}
{"task_id":"MBTSP\/949","completion":"    let sorted_list = [];\n    for(let i = 0; i < test_list.length; i++) {\n        let item = test_list[i];\n        sorted_list = sorted_list.concat(item);\n    }\n\n    sorted_list.sort(function(a, b) {\n        let item1_digits = [...`${a}`];\n        let item2_digits = [...`${b}`];\n\n        for(let i = 0; i < item1_digits.length; i++) {\n            if (item1_digits[i] !== item2_digits[i]) {\n                return item1_digits[i] - item2_digits[i];\n            }\n        }\n\n        return 0;\n    });\n\n    let final_list = [];\n    for(let i = 0; i < sorted_list.length; i++) {\n        let item = sorted_list[i];\n        final_list = final_list.concat(item.","language":"typescript"}
{"task_id":"MBTSP\/950","completion":"    if (year < 1900 || year > 2021) {\n        return \"Invalid Year\";\n    }\n\n    let n = year % 12;\n    switch (n) {\n        case 0:\n            return \"Monkey\";\n        case 1:\n            return \"Rooster\";\n        case 2:\n            return \"Dog\";\n        case 3:\n            return \"Pig\";\n        case 4:\n            return \"Rat\";\n        case 5:\n            return \"Ox\";\n        case 6:\n            return \"Tiger\";\n        case 7:\n            return \"Rabbit\";\n        case 8:\n            return \"Dragon\";\n        case 9:\n            return \"Snake\";\n        case 10:\n            return \"Horse\";\n        case 11:\n            return \"Sheep\";\n        default:\n            return \"None\";\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/958","completion":"    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    const numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    const result = []\n    for(let i=0; i<values.length; i++){\n        while(num >= values[i]){\n            result.push(numerals[i])\n            num -= values[i]\n        }\n    }\n    return result.join(\"\")\n}","language":"typescript"}
{"task_id":"MBTSP\/960","completion":"    if (n <= 2) return 1;\n    else return get_noOfways(n-1) + get_noOfways(n-2);\n}","language":"typescript"}
{"task_id":"MBTSP\/963","completion":"    const a = Math.pow(x, 2) + Math.pow(y, 2)\n    const b = 2 * x * y\n    const c = Math.pow(y, 2) + Math.pow(z, 2)\n    const d = 2 * x * z\n    const e = Math.pow(x, 2) + Math.pow(z, 2)\n    const f = 2 * y * z\n    if (a === 0) {\n        return (\"no real solution\", -1)\n    }\n    let solutions = [[b, c], [d, e], [f, a]]\n    solutions.forEach((solution, index) => {\n        if (solution[0] === 0) {\n            return (\"one solution\", solution[1])\n        }\n    })\n    solutions.sort((a, b) => {\n        const d1 = Math.sqrt(b[0]) - Math.","language":"typescript"}
{"task_id":"MBTSP\/3","completion":"    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return true;\n        }\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBTSP\/36","completion":"    const gcd = (a, b) => {\n        if (b === 0) {\n            return a;\n        } else {\n            return gcd(b, a % b);\n        }\n    }\n    const lcm = (a, b) => {\n        return a * b \/ gcd(a, b);\n    }\n    const gcd_lcm = (a, b) => {\n        return lcm(gcd(a, b), a * b);\n    }\n    const lcm_gcd = (a, b) => {\n        return gcd(lcm(a, b), a * b);\n    }\n    const gcd_lcm_gcd = (a, b) => {\n        return gcd(gcd(a, b), lcm(a, b));\n    }\n    const lcm_gcd_lcm = (a, b) => {\n        return","language":"typescript"}
{"task_id":"MBTSP\/67","completion":"    if (n <= 0) {\n        return 1;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 4;\n    }\n    if (n == 4) {\n        return 7;\n    }\n    if (n == 5) {\n        return 15;\n    }\n    if (n == 6) {\n        return 31;\n    }\n    if (n == 7) {\n        return 63;\n    }\n    if (n == 8) {\n        return 127;\n    }\n    if (n == 9) {\n        return 255;\n    }\n    if (n == 10) {\n        return 511;\n    }\n    if","language":"typescript"}
{"task_id":"MBTSP\/143","completion":"    const result = [];\n    for (const [key, value] of Input) {\n        if (result.length == 0) {\n            result.push(key);\n        } else {\n            for (const [key2, value2] of Input) {\n                if (key == key2) {\n                    continue;\n                }\n                if (result.includes(key2)) {\n                    result.push(key2);\n                }\n            }\n        }\n    }\n    return result.length;\n}","language":"typescript"}
{"task_id":"MBTSP\/159","completion":"    const seasons = {\n        'January': 'winter',\n        'February': 'spring',\n        'March': 'summer',\n        'April': 'autumn',\n        'May': 'winter',\n        'June': 'spring',\n        'July': 'summer',\n        'August': 'autumn',\n        'September': 'winter',\n        'October': 'autumn',\n        'November': 'winter',\n        'December': 'spring'\n    };\n    return seasons[month] ? seasons[month] : 'Invalid month';\n}","language":"typescript"}
{"task_id":"MBTSP\/177","completion":"    const gcd = (a, b) => {\n        if (b === 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n    const lcm = (a, b) => {\n        return a * b \/ gcd(a, b);\n    }\n    const lcm_list = [];\n    for (let i = L; i <= R; i++) {\n        lcm_list.push(lcm(L, i));\n    }\n    const lcm_set = new Set(lcm_list);\n    const lcm_list_2 = Array.from(lcm_set);\n    const lcm_list_1 = lcm_list_2.sort((a, b) => a - b);\n    return [lcm_list_1[0], lcm_list_1[1]];\n}","language":"typescript"}
{"task_id":"MBTSP\/220","completion":"    return text.replace(\/(\\s|,|\\.)\/g, ':').replace(\/(\\s|\\,|\\.|\\:)\/g, '').replace(\/(\\s|\\,|\\.|\\:)\/g, ':').replace(\/(\\s|\\,|\\.|\\:)\/g, ':').replace(\/(\\s|\\,|\\.|\\:)\/g, ':').replace(\/(\\s|\\,|\\.|\\:)\/g, ':').replace(\/(\\s|\\,|\\.|\\:)\/g, ':').replace(\/(\\s|\\,|\\.|\\:)\/g, ':').replace(\/(\\s|\\,|\\.|\\:)\/g, ':').replace(\/(\\s|\\,|\\.|\\:)\/g, ':').replace(\/(\\s|\\,|\\.|\\:)\/g, ':').replace(\/(\\s|\\,|\\.|\\:)\/g, ':').replace(\/(\\s|\\,|\\.|\\:)\/g, ':').replace(\/(\\s|\\,|\\.|\\:)\/g, ':').replace(\/(\\s|\\,|\\.|\\:)\/g, ':').replace(\/(\\s|\\,|\\.|\\:)\/g, ':').","language":"typescript"}
{"task_id":"MBTSP\/236","completion":"    if (N < 3) {\n        return -1;\n    }\n    if (N == 3) {\n        return 3;\n    }\n    if (K == 1) {\n        return 1;\n    }\n    if (K == 2) {\n        return 2;\n    }\n    if (K == 3) {\n        return 3;\n    }\n    if (K == 4) {\n        return 4;\n    }\n    if (K == 5) {\n        return 5;\n    }\n    if (K == 6) {\n        return 6;\n    }\n    if (K == 7) {\n        return 7;\n    }\n    if (K == 8) {\n        return 8;\n    }\n    if (K == 9) {\n        return 9;\n    }\n    if","language":"typescript"}
{"task_id":"MBTSP\/246","completion":"    const number = Math.abs(number0);\n    if (number < 0.000001) {\n        return 0;\n    }\n    let result = number;\n    while (result * result > number) {\n        result = (result + number \/ result) \/ 2;\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/247","completion":"    const dp = new Array(str.length).fill(0).map(() => new Array(str.length).fill(0));\n    for (let i = 0; i < str.length; i++) {\n        dp[i][i] = 1;\n    }\n    for (let i = 1; i < str.length; i++) {\n        for (let j = 0; j < i; j++) {\n            if (str[i] === str[j] && dp[i - 1][j + 1] === 1) {\n                dp[i][j] = 1;\n            }\n        }\n    }\n    let max = 0;\n    for (let i = 0; i < str.length; i++) {\n        for (let j = i; j < str.length; j++) {\n            if (dp[i][j] === 1) {\n                max = Math","language":"typescript"}
{"task_id":"MBTSP\/275","completion":"    let i = 0;\n    let j = 0;\n    while (i < a.length) {\n        if (a[i] === n) {\n            j = i;\n            while (j < a.length && a[j] === n) {\n                j++;\n            }\n            return j;\n        }\n        i++;\n    }\n    return -1;\n}","language":"typescript"}
{"task_id":"MBTSP\/289","completion":"    const is_odd = (n: number) => n % 2 === 1;\n    const is_leap = (n: number) => n % 4 === 0 && (n % 100 !== 0 || n % 400 === 0);\n    const is_leap_year = (n: number) => is_leap(n) || is_odd(n);\n    const is_year = (n: number) => is_leap_year(n) || is_odd(n);\n    const is_leap_year_or_year = (n: number) => is_leap_year(n) || is_year(n);\n    const is_year_or_year = (n: number) => is_year(n) || is_odd(n);\n    const is_year_or_leap_year = (n: number) => is_year(n) || is_leap_year(n","language":"typescript"}
{"task_id":"MBTSP\/313","completion":"    let result = 0;\n    for (const num of list1) {\n        if (num > 0) {\n            result = num;\n            break;\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/346","completion":"    if (n === 1) {\n        return 1;\n    }\n    if (n === 2) {\n        return 2;\n    }\n    if (n === 3) {\n        return 4;\n    }\n    if (n === 4) {\n        return 7;\n    }\n    if (n === 5) {\n        return 13;\n    }\n    if (n === 6) {\n        return 24;\n    }\n    if (n === 7) {\n        return 44;\n    }\n    if (n === 8) {\n        return 81;\n    }\n    if (n === 9) {\n        return 149;\n    }\n    if (n === 10) {\n        return 274;\n    }\n    if (n === 11) {\n        return 497;\n    }\n    if","language":"typescript"}
{"task_id":"MBTSP\/392","completion":"    const result = [];\n    for (let i = 1; i <= n; i++) {\n        result.push(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.","language":"typescript"}
{"task_id":"MBTSP\/423","completion":"    const dp = new Array(m + 1).fill(0).map(() => new Array(n + 1).fill(0));\n    for (let i = 0; i < m + 1; i++) {\n        for (let j = 0; j < n + 1; j++) {\n            if (i === 0 || j === 0) {\n                dp[i][j] = 0;\n            } else if (gold[i - 1][j - 1] === 0) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n            } else {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + gold[i - 1][j - 1];\n            }\n        }\n    }\n    return dp[m","language":"typescript"}
{"task_id":"MBTSP\/485","completion":"    const palindromic = [];\n    for (let i = 0; i < n; i++) {\n        palindromic[i] = A[i];\n    }\n    for (let i = n - 1; i >= 0; i--) {\n        palindromic[i] = A[i] + palindromic[i + 1];\n    }\n    for (let i = 0; i < n; i++) {\n        palindromic[i] = A[i] + palindromic[i + 1] + palindromic[i];\n    }\n    for (let i = 0; i < n; i++) {\n        palindromic[i] = palindromic[i] % 10;\n    }\n    let max = 0;\n    for (let i = 0; i < n; i++) {\n        if (palindromic","language":"typescript"}
{"task_id":"MBTSP\/523","completion":"    const regex = \/[A-Z]\/g;\n    const regex2 = \/[a-z]\/g;\n    const regex3 = \/[0-9]\/g;\n    const regex4 = \/.{8,}\/g;\n    if (regex.test(str1) && regex2.test(str1) && regex3.test(str1) && regex4.test(str1)) {\n        return ['Valid string.'];\n    } else if (regex.test(str1) && regex2.test(str1) && regex3.test(str1)) {\n        return ['String must have 1 upper case character.'];\n    } else if (regex.test(str1) && regex2.test(str1) && regex4.test(str1)) {\n        return ['String length should be atleast 8.'];\n    } else if (regex.test(str1) && regex3.test(str1) && regex4.test(str1)) {\n        return","language":"typescript"}
{"task_id":"MBTSP\/547","completion":"    let result = 0;\n    for (let i = 1; i <= n; i++) {\n        result += (i ^ i - 1).toString(2).split(\"\").filter(x => x == '1').length;\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/597","completion":"    let i = 0;\n    let j = 0;\n    while (i < m && j < n) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else if (arr1[i] > arr2[j]) {\n            j++;\n        } else {\n            i++;\n            j++;\n        }\n        if (i === m && j === n) {\n            return arr1[m - 1];\n        }\n    }\n    if (i === m) {\n        return arr2[n - 1];\n    }\n    if (j === n) {\n        return arr1[m - 1];\n    }\n    if (i < m && j < n) {\n        if (k <= (m + n) \/ 2) {\n            return find_kth(arr1, arr2, m, i, k","language":"typescript"}
{"task_id":"MBTSP\/641","completion":"    const sqrt_5 = Math.sqrt(5);\n    const sqrt_n = Math.sqrt(n);\n    const n_sqrt = Math.floor(sqrt_n);\n    const n_sqrt_5 = Math.floor(sqrt_5 * n_sqrt);\n    const n_sqrt_5_2 = n_sqrt_5 * 2;\n    const n_sqrt_5_3 = n_sqrt_5 * 3;\n    const n_sqrt_5_4 = n_sqrt_5 * 4;\n    const n_sqrt_5_5 = n_sqrt_5 * 5;\n    const n_sqrt_5_6 = n_sqrt_5 * 6;\n    const n_sqrt_5_7 = n_sqrt_5 * 7;\n    const n_sqrt_5_8 = n_sqrt_5 * 8;\n    const n_sqrt_5_9 = n_sqrt_5 * 9;\n    const n_sqrt_5_10 = n_","language":"typescript"}
{"task_id":"MBTSP\/663","completion":"    return (n % x === y) ? n : find_max_val(n - 1, x, y);\n}","language":"typescript"}
{"task_id":"MBTSP\/699","completion":"    const len1 = str1.length;\n    const len2 = str2.length;\n    if (len1 === 0 || len2 === 0) {\n        return \"Not Possible\";\n    }\n    const arr1 = str1.split(\"\").map(x => parseInt(x));\n    const arr2 = str2.split(\"\").map(x => parseInt(x));\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    while (i < len1 && j < len2) {\n        if (arr1[i] === arr2[j]) {\n            i++;\n            j++;\n        } else if (arr1[i] > arr2[j]) {\n            j++;\n        } else {\n            i++;\n            count++;\n        }\n    }\n    if (i === len1) {\n        return count + (len2 - j);\n    }\n    if","language":"typescript"}
{"task_id":"MBTSP\/707","completion":"    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += i.toString(2).split('').filter(x => x == '1').length;\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/747","completion":"    const dp = new Array(m + 1).fill(null).map(() => new Array(n + 1).fill(null).map(() => new Array(o + 1).fill(0)));\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i === 0 || j === 0 || k === 0) {\n                    dp[i][j][k] = 0;\n                } else if (X[i - 1] === Y[j - 1] && X[i - 1] === Z[k - 1]) {\n                    dp[i][j][k] = 1 + dp[i - 1][j - 1][k - 1];\n                } else {\n                    dp[i","language":"typescript"}
{"task_id":"MBTSP\/838","completion":"    const s1_map = group_element(Array.from(s1).map(x => [x, 0]));\n    const s2_map = group_element(Array.from(s2).map(x => [x, 0]));\n    let count = 0;\n    for (const [key, value] of s1_map) {\n        if (s2_map.has(key)) {\n            s2_map.get(key).forEach(x => {\n                s1_map.get(x).forEach(y => {\n                    s1_map.get(y)[1] += 1;\n                });\n            });\n        }\n    }\n    for (const [key, value] of s2_map) {\n        if (s1_map.has(key)) {\n            s1_map.get(key).forEach(x => {\n                s2_map.get(x).forEach(y => {\n                    s2","language":"typescript"}
{"task_id":"MBTSP\/938","completion":"    const result = [];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    while (i < A.length && j < B.length && k < C.length) {\n        if (A[i] <= B[j] && A[i] <= C[k]) {\n            result.push(A[i]);\n            i++;\n        } else if (B[j] <= A[i] && B[j] <= C[k]) {\n            result.push(B[j]);\n            j++;\n        } else {\n            result.push(C[k]);\n            k++;\n        }\n    }\n    while (i < A.length) {\n        result.push(A[i]);\n        i++;\n    }\n    while (j < B.length) {\n        result.push(B[j]);\n        j++;\n    }\n    while (k < C.","language":"typescript"}
{"task_id":"MBTSP\/971","completion":"    return Math.max(\n        (n - a - b - c) % (a + b + c),\n        Math.max(\n            (n - a - b) % (a + b),\n            Math.max(\n                (n - a) % (a),\n                Math.max(\n                    (n - b - c) % (b + c),\n                    Math.max(\n                        (n - b) % (b),\n                        Math.max(\n                            (n - c - a) % (c + a),\n                            Math.max(\n                                (n - c) % (c),\n                                Math.max(\n                                    (n - a - b - c) % (a + b + c),\n                                    Math.max(\n                                        (n - a - b) % (a + b),\n                                        Math","language":"typescript"}
{"task_id":"MBTSP\/2","completion":"    if (test_tup1.length == test_tup2.length) {\n        const first_map = group_element(test_tup1.map(a => [a, 1]));\n        const second_map = group_element(test_tup2.map(a => [a, 1]));\n        const keys1 = first_map.keys();\n        const keys2 = second_map.keys();\n        for (const k1 of keys1) {\n            const v1 = first_map.get(k1);\n            const v2 = second_map.get(k1);\n            if (v1.length == v2.length) {\n                for (const k2 of keys2) {\n                    if (v1.indexOf(k2) >= 0) {\n                        first_map.get(k1).push(k2);\n                    }\n                }\n            }\n        }\n        const result = new Set();\n        for (const k of keys","language":"typescript"}
{"task_id":"MBTSP\/15","completion":"    return text.split('a').join('a').split('b').join('b').split('c').join('c').split('d').join('d').split('e').join('e').split('f').join('f').split('g').join('g').split('h').join('h').split('i').join('i').split('j').join('j').split('k').join('k').split('l').join('l').split('m').join('m').split('n').join('n').split('o').join('o').split('p').join('p').split('q').join('q').split('r').join('r').split('s').join('s').split('t').join('t').split('u').join('u').split('v').join('v').split('w').join('w').split('x').join('x').split('y').join('y').split('z').join('z').split('1').join('1').split('2').join('2').split('3').join('3').split('4').join('4').split('5').join('5').split('6').","language":"typescript"}
{"task_id":"MBTSP\/48","completion":"    n |= (n >>> 1) & 0x55555555;\n    n |= (n >>> 2) & 0x33333333;\n    n |= (n >>> 4) & 0x0F0F0F0F;\n    n |= (n >>> 8) & 0x00FF00FF;\n    n |= (n >>> 16) & 0x0000FFFF;\n    return n & 0x000000FF;\n}","language":"typescript"}
{"task_id":"MBTSP\/55","completion":"    return a*Math.pow(r,n-1)\n}","language":"typescript"}
{"task_id":"MBTSP\/73","completion":"    return text.split(\/,|\\*|\\n\/g);\n}","language":"typescript"}
{"task_id":"MBTSP\/75","completion":"    const result = [];\n    for (const [key, value, _] of test_list) {\n        if (value % K == 0) {\n            result.push(`(${key}, ${value}, ${_)})`);\n        }\n    }\n    return result.join('\\n');\n}","language":"typescript"}
{"task_id":"MBTSP\/84","completion":"    if (n === 1) {\n        return 1;\n    } else if (n === 2) {\n        return 1;\n    } else if (n === 3) {\n        return 2;\n    } else if (n === 4) {\n        return 2;\n    } else if (n === 5) {\n        return 3;\n    } else if (n === 6) {\n        return 4;\n    } else if (n === 7) {\n        return 4;\n    } else if (n === 8) {\n        return 5;\n    } else if (n === 9) {\n        return 6;\n    } else if (n === 10) {\n        return 6;\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/85","completion":"    const pi = Math.PI;\n    return 4 * pi * r * r;\n}","language":"typescript"}
{"task_id":"MBTSP\/87","completion":"    dict1.forEach((v, k) => dict2.set(k, v));\n    dict2.forEach((v, k) => dict3.set(k, v));\n    return dict3;\n}","language":"typescript"}
{"task_id":"MBTSP\/100","completion":"    \/\/ write your code here\n    const palindrome_dict = new Map();\n    const reversed_palindrome_dict = new Map();\n    const palindrome_set = new Set();\n    const reversed_palindrome_set = new Set();\n    const num_string = `${num}`;\n    let num_length = num_string.length;\n    let half_num = num_length >> 1;\n    let num_dict = new Map();\n    for (let i = 0; i < num_length; i++) {\n        let left_half_num = num_string.substring(i, i + half_num);\n        if (!palindrome_set.has(left_half_num)) {\n            palindrome_set.add(left_half_num);\n        }\n        let reversed_left_half_num = new StringBuilder(left_half_num).reverse().toString();\n        if (!reversed_palindrome_set.has(reversed_left_half_num)) {\n            reversed_palindrome_set","language":"typescript"}
{"task_id":"MBTSP\/115","completion":"    for (const item of list1) {\n        if (item.size) return false;\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBTSP\/123","completion":"    const factors_map = new Map();\n    for (let i = 1; i <= limit; i++) {\n        let sum = 0;\n        for (let j = 1; j * j <= i; j++) {\n            if (i % j == 0) {\n                sum += j;\n            }\n        }\n        if (sum == i) {\n            if (factors_map.has(i)) {\n                factors_map.get(i).push(sum);\n            } else {\n                factors_map.set(i, [sum]);\n            }\n        }\n    }\n    const amicable_numbers = [];\n    for (const [key, value] of factors_map) {\n        if (factors_map.get(key).length == 1) {\n            continue;\n        }\n        for (const [key1, value1] of factors_map) {\n            if (value","language":"typescript"}
{"task_id":"MBTSP\/125","completion":"    if (string0.length === 0) {\n        return 0\n    } else if (string0.length === 1) {\n        return string0[0] === '0' ? 0 : 1\n    } else {\n        let first_zero = 0;\n        let first_one = 0;\n        let zero_count = 0;\n        let one_count = 0;\n        for (let i = 0; i < string0.length; i++) {\n            if (string0[i] === '0') {\n                zero_count++;\n            } else {\n                one_count++;\n            }\n            if (zero_count === n && one_count === n) {\n                first_zero = i;\n            } else if (one_count === n) {\n                first_one = i;\n                break;\n            }\n        }\n        return Math.max(find_length","language":"typescript"}
{"task_id":"MBTSP\/131","completion":"    let vowel_list = [];\n    let temp_string = \"\";\n    for (const char of str1) {\n        if (\/[aeiouAEIOU]\/.test(char)) {\n            vowel_list.push(char);\n        }\n    }\n    for (const char of str1) {\n        if (\/[aeiouAEIOU]\/.test(char)) {\n            temp_string += vowel_list.pop();\n        } else {\n            temp_string += char;\n        }\n    }\n    return temp_string;\n}","language":"typescript"}
{"task_id":"MBTSP\/149","completion":"    const arr1 = arr;\n    arr1.sort((a, b) => a - b);\n    const n1 = n - 1;\n    let max = 0;\n    let max_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (i + n > arr.length) {\n            max = 0;\n        } else {\n            for (let j = i + 1; j < arr.length; j++) {\n                if (arr1[j] - arr1[i] == 1) {\n                    if (max < j - i) {\n                        max = j - i;\n                        max_index = i;\n                    }\n                } else if (arr1[j] - arr1[i] == n1) {\n                    if (max < j - i) {\n                        max = j","language":"typescript"}
{"task_id":"MBTSP\/160","completion":"    if (n == 0) {\n        return 'No solution';\n    }\n    for (const [x, y] of [[a, b], [b, a]]) {\n        if (x == y) {\n            return ('x = ', x, ', y = ', y);\n        }\n        const quotient = Math.floor(n \/ x);\n        const remainder = n % x;\n        if (quotient == 0) {\n            return solution(x, y, remainder);\n        } else if (quotient == 1) {\n            if (y < remainder) {\n                return solution(x, y, remainder);\n            }\n            return solution(x, y, remainder - y);\n        } else {\n            if (y < remainder) {\n                return solution(x, y, remainder);\n            }\n            if (y == remainder) {\n                return solution(x - 1, y","language":"typescript"}
{"task_id":"MBTSP\/179","completion":"    const num_list = [6, 8, 9, 10, 5, 7, 4, 2, 3, 5, 4, 6, 8];\n    const mod = x % 11;\n    return num_list.some(num => num === mod);\n}","language":"typescript"}
{"task_id":"MBTSP\/190","completion":"    return (x1 - x2 + 1) * (y1 - y2 + 1)\n}","language":"typescript"}
{"task_id":"MBTSP\/231","completion":"    const { max, sum } = tri[n - 1].reduce(\n        (a, b) => ({ max: Math.max(a.max, b), sum: a.sum + b }),\n        { max: 0, sum: 0 },\n    );\n    for (let i = n - 1; i >= 1; i--) {\n        const { max, sum } = tri[i - 1].reduce(\n            (a, b) => ({ max: Math.max(a.max, b), sum: a.sum + b }),\n            { max: max, sum: sum + max },\n        );\n    }\n    return max;\n}","language":"typescript"}
{"task_id":"MBTSP\/288","completion":"    const arr_len = arr.length;\n    if (arr_len < 2) return 1;\n    const mod_arr = [];\n    for (let i = 0; i < arr_len; i++) {\n        mod_arr[i] = (arr[i] % N) % P;\n    }\n    let mod_sum = 0;\n    for (let i = 0; i < mod_arr.length; i++) {\n        mod_sum += mod_arr[i] * mod_arr[i];\n    }\n    mod_sum = (mod_sum % P) % N;\n    if (mod_sum === 0) {\n        let inverse_arr = [];\n        for (let i = 0; i < mod_arr.length; i++) {\n            inverse_arr[i] = (mod_arr[i] * N) % P;\n        }\n        return inverse_arr","language":"typescript"}
{"task_id":"MBTSP\/298","completion":"    \/\/ 1st solution\n    \/\/ const res = l1.filter(val => l2.some(arr => arr.includes(val)));\n    \/\/ return res;\n\n    \/\/ 2nd solution\n    \/\/ const res = l2.flatMap(v => {\n    \/\/     const temp = [];\n    \/\/     for (let i = 0; i < v.length; i++) {\n    \/\/         if (l1.includes(v[i])) {\n    \/\/             temp.push(v[i]);\n    \/\/         }\n    \/\/     }\n    \/\/     return temp;\n    \/\/ })\n    \/\/ return res;\n\n    \/\/ 3rd solution\n    \/\/ const res = [];\n    \/\/ l1.forEach(v => {\n    \/\/     const temp = [];\n    \/\/     for (let i = 0; i < l2.length; i++) {\n    \/\/         if (l2[i","language":"typescript"}
{"task_id":"MBTSP\/299","completion":"    const tuples = {};\n    for (const [name, score] of stdata) {\n        tuples[name] = tuples[name] ? tuples[name] + score : score;\n    }\n    const tuples_list = Object.entries(tuples).sort((a, b) => b[1] - a[1]);\n    const [name, score] = tuples_list[0];\n    return [name, score];\n}","language":"typescript"}
{"task_id":"MBTSP\/304","completion":"    if (index > arr.length || index < 0) {\n        return -1;\n    }\n\n    const range_start = ranges.length - 1;\n    const range_end = 0;\n    let start = 0;\n    let end = ranges[0].length - 1;\n    while (start < end) {\n        let mid = Math.floor((start + end) \/ 2);\n        let value = ranges[range_start][mid];\n        if (value > index) {\n            end = mid - 1;\n        } else if (value < index) {\n            start = mid + 1;\n        } else {\n            return arr[value];\n        }\n    }\n\n    let value = ranges[range_start][start];\n    if (value > index) {\n        return -1;\n    }\n\n    value = ranges[range_end][end];\n    if (value","language":"typescript"}
{"task_id":"MBTSP\/306","completion":"    const dp = new Array<number>(n + 1);\n    const sum_dp = new Array<number>(n + 1);\n    const result = new Array<number>();\n    dp[index] = 0;\n    for (let i = index + 1; i < n + 1; i++) {\n        dp[i] = dp[i - 1] + a[i - 1];\n    }\n    sum_dp[index] = dp[index];\n    for (let i = index + 1; i < n + 1; i++) {\n        if (i === k) {\n            result.push(a[i - 1]);\n        } else {\n            if (dp[i] > sum_dp[i - 1] + a[i - 1]) {\n                sum_dp[i] = dp[i];\n            } else {\n                sum_dp[i] = sum_","language":"typescript"}
{"task_id":"MBTSP\/324","completion":"    let alternates = test_tuple.filter((num, index) => {\n        return index % 2 !== 0;\n    });\n    return [alternates.reduce((a, b) => a + b), test_tuple.filter((num, index) => {\n        return index % 2 === 0;\n    }).reduce((a, b) => a + b)]\n}","language":"typescript"}
{"task_id":"MBTSP\/338","completion":"    const result = [];\n    for (let i = 0; i < s.length; i++) {\n        for (let j = i + 1; j < s.length + 1; j++) {\n            result.push(s.slice(i, j));\n        }\n    }\n    return result.filter((s) => (s[0] === s[s.length - 1])).length;\n}","language":"typescript"}
{"task_id":"MBTSP\/340","completion":"    const filtered = lst.filter(e => e > 0);\n    const result = filtered.sort((a, b) => a - b).slice(0, 3);\n    return result.reduce((a, b) => a + b, 0);\n}","language":"typescript"}
{"task_id":"MBTSP\/348","completion":"    \/\/ const matrix = [];\n    \/\/ for (let i = 0; i < M + 1; i++) {\n    \/\/     matrix.push(new Array(M + 1).fill(0));\n    \/\/ }\n    \/\/ for (let i = 1; i < M + 1; i++) {\n    \/\/     for (let j = i; j < M + 1; j++) {\n    \/\/         matrix[i][j] = matrix[i - 1][j] + matrix[i - 1][j - i];\n    \/\/     }\n    \/\/ }\n    \/\/ console.log(matrix);\n    \/\/ return matrix[M][M];\n    const memo = new Array(M + 1);\n    for (let i = 0; i < memo.length; i++) {\n        memo[i] = new Array(M + 1).fill(0);\n    }\n    return","language":"typescript"}
{"task_id":"MBTSP\/360","completion":"    if (n == 1) {\n        return 7\n    }\n    const n_2 = n * 2;\n    const n_4 = n * 4;\n    const n_6 = n * 6;\n    const n_8 = n * 8;\n    const n_10 = n * 10;\n    return [7, 3, 8, 4, 9, 10, 11].includes(n) ? get_carol(n) : [n_2, n_4, n_6, n_8, n_10].includes(n) ? get_carol(n) : [n_2, n_4, n_6, n_8, n_10, n_2, n_4, n_6, n_8, n_10, n_2, n_4, n_6, n_8, n_10].includes(n) ? get_carol(n) : [n_2, n_4, n","language":"typescript"}
{"task_id":"MBTSP\/436","completion":"    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            return list1[i]\n        }\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/440","completion":"    const result = [];\n    let start = 0;\n    const adverbs = ['can', 'could', 'may', 'might', 'must', 'shall', 'should', 'will', 'would', 'need'];\n    for (const index in text) {\n        if (text[index] === '!') {\n            start = index + 1;\n            result.push(start);\n        }\n        if (text[index] === '?') {\n            const end = index + 1;\n            result.push(end);\n            const adv = text.substring(start, end);\n            const is_adv = adverbs.includes(adv);\n            if (is_adv) {\n                const start_adj = start - 2;\n                const end_adj = end + 2;\n                result.push(start_adj);\n                result.push(end_adj);\n            }\n        }\n    }\n    return","language":"typescript"}
{"task_id":"MBTSP\/450","completion":"    return str.filter(el => el.length == l);\n}","language":"typescript"}
{"task_id":"MBTSP\/529","completion":"    let m = n - 1;\n    let p = n + 1;\n    while (m % 2 == 0) {\n        m \/= 2;\n        p = p * 2;\n    }\n    let a = 2;\n    let b = 1;\n    while (p > m) {\n        while (a % 2 == 0) {\n            a \/= 2;\n            b = b * 2;\n        }\n        while (b % 2 == 0) {\n            b \/= 2;\n            a = a * 2;\n        }\n        if (a == 1) {\n            a = -1;\n            b = 1;\n        }\n        a = a + b;\n        b = a - b;\n        a = a - b;\n        p = p \/ 2;\n    }\n    return a","language":"typescript"}
{"task_id":"MBTSP\/535","completion":"    return 3.1415 * r ** 2;\n}","language":"typescript"}
{"task_id":"MBTSP\/571","completion":"    if (N == 1) return arr[0] - K;\n    else if (N == 2) return Math.max(arr[0] + arr[1] - K, arr[1] - K)\n    else if (N == 3) {\n        const a = Math.max(arr[0] + arr[1] + arr[2] - K, arr[0] + arr[2] - K);\n        const b = Math.max(arr[1] + arr[2] - K, arr[2] - K);\n        return Math.max(a, b);\n    } else {\n        const a = max_sum_pair_diff_lessthan_K(arr.slice(0, N - 2), N - 2, K);\n        const b = max_sum_pair_diff_lessthan_K(arr.slice(1, N - 1), N - 1, K);\n        const c = max_sum_","language":"typescript"}
{"task_id":"MBTSP\/594","completion":"    const even = [];\n    const odd = [];\n    for (const num of list1) {\n        if (num % 2 == 0) {\n            even.push(num);\n        } else {\n            odd.push(num);\n        }\n    }\n    if (even.length == 0 && odd.length == 0) {\n        return 0;\n    } else if (even.length == 0 && odd.length > 0) {\n        return odd[0]\n    } else if (even.length > 0 && odd.length == 0) {\n        return even[0]\n    } else {\n        return even[0] - odd[0]\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/617","completion":"    const jump_table = new Array(a).fill(null).map(() => new Array(b).fill(Infinity));\n    for (let i = 0; i < b; i++) {\n        jump_table[0][i] = 0;\n    }\n    for (let i = 1; i < a; i++) {\n        jump_table[i][0] = 0;\n    }\n    for (let i = 1; i < a; i++) {\n        for (let j = 1; j < b; j++) {\n            if (i == j) {\n                jump_table[i][j] = 1;\n            } else {\n                jump_table[i][j] = Infinity;\n                if (i + j < d && i + j > d - 3) {\n                    if (jump_table[i + 1][j] + 1 < jump_table[i","language":"typescript"}
{"task_id":"MBTSP\/660","completion":"    if (l1 == r1) {\n        return [l1, r1]\n    } else if (l2 == r2) {\n        return [l2, r2]\n    }\n    let res = [];\n    if (l1 > r1) {\n        const lDiff = l1 - r2;\n        if (lDiff >= 0) {\n            res = [l1, l1 - 1]\n        } else {\n            res = [r1 + 1, r2]\n        }\n    } else if (l1 < r1) {\n        const lDiff = r1 - l2;\n        if (lDiff >= 0) {\n            res = [l2, l2 + 1]\n        } else {\n            res = [r2 - 1, r2]\n        }\n    }\n    if (l2 > r2","language":"typescript"}
{"task_id":"MBTSP\/661","completion":"    if (n < 3) return 0;\n    const result = new Map();\n    for (const [index, value] of arr.entries()) {\n        if (result.has(value)) {\n            result.get(value).push(index);\n        } else {\n            result.set(value, [index]);\n        }\n    }\n    for (const [key, value] of result) {\n        const group = value.length < 3 ? 1 : value[0] - value[1] === value[1] - value[2] ? 2 : 3;\n        result.set(key, [value[0], value[value.length - 1], group]);\n    }\n    const sorted_keys = [...result.keys()].sort((a, b) => b - a);\n    for (const key of sorted_keys) {\n        if (result.get(key)[2] === 3) continue;\n        for","language":"typescript"}
{"task_id":"MBTSP\/761","completion":"    if (a === 0) {\n        return d;\n    }\n    const p = d \/ 2;\n    const pa = a % 360;\n    const r = d \/ 2;\n    const ra = 360 % a;\n    const d1 = Math.sqrt((r * r) - (p * p));\n    const d2 = Math.sqrt((r * r) - (p * p));\n    const x1 = p * Math.cos(Math.PI * (pa \/ 180));\n    const y1 = p * Math.sin(Math.PI * (pa \/ 180));\n    const x2 = x1 * Math.cos(Math.PI * (ra \/ 180));\n    const y2 = y1 * Math.sin(Math.PI * (ra \/ 180));\n    const d3 = Math.sqrt((d2 * d2) - (x2 * x","language":"typescript"}
{"task_id":"MBTSP\/776","completion":"    const vowels = 'aeiouAEIOU';\n    const str_len = test_str.length;\n    let count = 0;\n    for (let i = 0; i < str_len; i++) {\n        if (vowels.includes(test_str[i])) {\n            const right_vowel_index = i + 1;\n            if (right_vowel_index < str_len && vowels.includes(test_str[right_vowel_index])) {\n                count++;\n            }\n        }\n    }\n    for (let i = str_len - 1; i > 0; i--) {\n        if (vowels.includes(test_str[i])) {\n            const left_vowel_index = i - 1;\n            if (left_vowel_index > 0 && vowels.includes(test_str[left_vowel_index])) {\n                count","language":"typescript"}
{"task_id":"MBTSP\/780","completion":"    let result = [];\n    const combinations = (arr: Array<Array<number>>) => {\n        if (arr.length == 1) return [arr];\n        let result = [];\n        for (let i = 0; i < arr.length; i++) {\n            const head = arr.slice(0, i);\n            const tail = arr.slice(i);\n            const combo = head.concat(tail);\n            result = result.concat(combinations(combo));\n        }\n        return result;\n    }\n    for (const combo of combinations(test_list)) {\n        let sum = combo[0] + combo[1];\n        let tuple = [combo[0], combo[1]];\n        for (let i = 2; i < combo.length; i++) {\n            sum += combo[i];\n            tuple.push(combo[i]);\n        }\n        if (result.find(e => e.join(\",\") == tuple.join","language":"typescript"}
{"task_id":"MBTSP\/783","completion":"    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h, s;\n    const v = max \/ 255;\n    const d = max - min;\n    if (max == min) {\n        h = 0;\n        s = 0;\n    } else {\n        s = d \/ max;\n        switch (max) {\n            case r:\n                h = (g - b) \/ d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) \/ d + 2;\n                break;\n            case b:\n                h = (r - g) \/ d + 4;\n                break;\n        }\n        h \/= 6;\n    }\n    const result = [h, s * 100, v * 100];\n    return result","language":"typescript"}
{"task_id":"MBTSP\/814","completion":"    return (p * q) \/ 2;\n}","language":"typescript"}
{"task_id":"MBTSP\/819","completion":"    const list = [];\n    const count = [];\n    for (const num of lists) {\n        if (list[list.length - 1] === num) {\n            count[list.length - 1] = (count[list.length - 1] || 0) + 1;\n        } else {\n            list.push(num);\n            count.push(1);\n        }\n    }\n    return [list, count];\n}","language":"typescript"}
{"task_id":"MBTSP\/836","completion":"    const dp = [];\n    for (let i = 0; i < size; i++) {\n        dp[i] = [];\n    }\n    dp[0][0] = a[0];\n    for (let i = 1; i < size; i++) {\n        dp[i][0] = dp[i - 1][0] + a[i];\n    }\n    for (let i = 1; i < size; i++) {\n        dp[0][i] = Math.max(dp[0][i - 1], a[i]);\n    }\n    for (let i = 1; i < size; i++) {\n        for (let j = 1; j < size; j++) {\n            dp[i][j] = Math.max(dp[i][j - 1], dp[i - 1][j]) + a[i + j];\n        }\n    }\n    return","language":"typescript"}
{"task_id":"MBTSP\/872","completion":"    \/\/ convert the nested list to a set of numbers\n    const set1 = new Set();\n    for (const number of list1) {\n        for (const num of number) {\n            set1.add(num);\n        }\n    }\n    \/\/ compare the sets\n    if (list2.length > 0) {\n        for (const number of list2) {\n            for (const num of number) {\n                if (!set1.has(num)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    } else {\n        return false;\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/909","completion":"    const palindrome = function (num: number) : Array<number>  {\n        const result = [];\n        let x = num;\n        while (x > 0) {\n            result.push(x % 10);\n            x = Math.floor(x \/ 10);\n        }\n        return result.reverse();\n    }\n    const reverse = function (list: Array<number>): Array<number>  {\n        return list.reverse();\n    }\n    if (num < 10) {\n        return num;\n    }\n    if (num < 100) {\n        const a = palindrome(num % 10);\n        const b = palindrome(Math.floor(num \/ 10));\n        return a.concat(reverse(b)).join('');\n    }\n    if (num < 1000) {\n        const a = palindrome(num % 100 % 10);\n        const b = palindrome(Math.","language":"typescript"}
{"task_id":"MBTSP\/915","completion":"    const func_rearrange = (arr: Array<number>) => {\n        const negative_numbs = arr.filter(num => num < 0).length;\n        const positive_numbs = arr.filter(num => num > 0).length;\n        const negative_numbs_index = negative_numbs > positive_numbs ? 0 : negative_numbs;\n        const positive_numbs_index = negative_numbs < positive_numbs ? 0 : positive_numbs;\n        const positive_arr = arr.filter(num => num > 0).concat(arr.filter(num => num < 0));\n        const negative_arr = arr.filter(num => num > 0).concat(arr.filter(num => num < 0));\n        return [\n            positive_arr[positive_numbs_index],\n            negative_arr[negative_numbs_index]\n        ];\n    }\n    return array_nums.map(func_rearrange","language":"typescript"}
{"task_id":"MBTSP\/936","completion":"    const result = [];\n    for (const value of ord_list) {\n        result.push(test_list.filter(x => x[0] == value)[0]);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/941","completion":"    let count = 0;\n    for (const item of num) {\n        if (typeof item == \"number\") {\n            count++;\n        } else {\n            break;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/953","completion":"    \/\/TODO: Write your code here.\n    \/\/ let arr = [];\n    \/\/ let i = 0;\n    \/\/ let count = 0;\n    \/\/ while (i < n) {\n    \/\/     if (ar.length == 0) break;\n    \/\/     if (ar.length == 1) {\n    \/\/         count = 1;\n    \/\/         break;\n    \/\/     }\n    \/\/     if (ar[0] == ar[1]) {\n    \/\/         arr.push(ar[0]);\n    \/\/         ar.splice(0, 1);\n    \/\/         i = i + 1;\n    \/\/     } else {\n    \/\/         let c = 0;\n    \/\/         for (let j = 0; j < ar.length; j++) {\n    \/\/             if (ar[j] != ar[j + 1]) {\n    \/\/                 c","language":"typescript"}
{"task_id":"MBTSP\/957","completion":"    let index = 1;\n    while ((n & 1) === 0) {\n        n >>= 1;\n        index++;\n    }\n    return index;\n}","language":"typescript"}
{"task_id":"MBTSP\/35","completion":"  return n*(n + 1)\n}","language":"typescript"}
{"task_id":"MBTSP\/39","completion":"    const counter = {};\n    for (let i = 0; i < S.length; i++) {\n        const char = S[i];\n        counter[char] = counter[char] + 1 || 1;\n    }\n    const heap = [];\n    for (let char in counter) {\n        heap.push([counter[char], char]);\n    }\n    heap.sort((a, b) => b[0] - a[0]);\n    let ans = [];\n    while (heap.length) {\n        const [n, char] = heap.shift();\n        ans.push(char);\n        if (n > 1) {\n            heap.push([n - 1, char]);\n        }\n    }\n    return ans.join('');\n}","language":"typescript"}
{"task_id":"MBTSP\/59","completion":"\treturn 3 * n * n - 2 * n \n}","language":"typescript"}
{"task_id":"MBTSP\/72","completion":"    return (n % 4 != 2);\n}","language":"typescript"}
{"task_id":"MBTSP\/83","completion":"    let summ = 0;\n    for (let i = 0; i < strr.length; i++) {\n        summ += (strr.charCodeAt(i) - 'a'.charCodeAt(0) + 1);\n    }\n    if (summ % 26 == 0) {\n        return 'z';\n    } else {\n        summ = summ % 26;\n        return String.fromCharCode(97 + summ - 1);\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/103","completion":"\tif (m >= n || n == 0) {\n\t\treturn 0;\n\t}\n\tif (m == 0) {\n\t\treturn 1;\n\t}\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m));\n}","language":"typescript"}
{"task_id":"MBTSP\/110","completion":"  let res = [];\n  for (let sub of test_list) {\n    if (sub[0] > strt_val) {\n      res.push([strt_val, sub[0]]);\n      strt_val = sub[1];\n    }\n    if (strt_val < stop_val) {\n      res.push([strt_val, stop_val]);\n    }\n  }\n  return res;\n}","language":"typescript"}
{"task_id":"MBTSP\/119","completion":"    let XOR = 0;\n    for (let i = 0; i < n; i++) {\n        XOR = XOR ^ arr[i];\n    }\n    return (XOR);\n}","language":"typescript"}
{"task_id":"MBTSP\/122","completion":"    const MAX = 3000;\n    const primes = new Array(MAX).fill(0);\n    const result = [];\n    for (let i = 2; i < MAX; i++) {\n        if (primes[i] == 0) {\n            primes[i] = 1;\n            let j = i * 2;\n            while (j < MAX) {\n                primes[j] -= 1;\n                if (primes[j] + 3 == 0) {\n                    result.push(j);\n                }\n                j = j + i;\n            }\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result[n - 1];\n}","language":"typescript"}
{"task_id":"MBTSP\/146","completion":"  for (let i = 0; i < str1.length; i++) {\n    return str1.charCodeAt(i)\n  }\n}","language":"typescript"}
{"task_id":"MBTSP\/148","completion":"    const closest = (x: number) => {\n        let ans = 0;\n        while (ans * 10 + 9 <= x) {\n            ans = ans * 10 + 9;\n        }\n        return ans;\n    };\n    const sum_digits_single = (x: number) => {\n        let ans = 0;\n        while (x > 0) {\n            ans += x % 10;\n            x = Math.floor(x \/ 10);\n        }\n        return ans;\n    };\n    return sum_digits_single(closest(N)) + sum_digits_single(N - closest(N));\n}","language":"typescript"}
{"task_id":"MBTSP\/155","completion":"    let res = 0;\n    let count = 0;\n    let temp = n;\n    while (temp > 0) {\n        if (count % 2 == 1) {\n            res = res | (1 << count);\n        }\n        count++;\n        temp >>= 1;\n    }\n    return n ^ res;\n}","language":"typescript"}
{"task_id":"MBTSP\/158","completion":"    let max1 = Math.max(...arr);\n    let res = 0;\n    for (let i = 0; i < n; i++) {\n        if ((max1 - arr[i]) % k != 0) {\n            return -1;\n        } else {\n            res += (max1 - arr[i]) \/ k;\n        }\n    }\n    return res;\n}","language":"typescript"}
{"task_id":"MBTSP\/164","completion":"    const sumOfDivisors = (num: number) => {\n        let sum = 1;\n        let i = 2;\n        while (i * i <= num) {\n            if (num % i == 0) {\n                sum += i + Math.floor(num \/ i);\n            }\n            i++;\n        }\n        return sum;\n    };\n    return sumOfDivisors(num1) === sumOfDivisors(num2);\n}","language":"typescript"}
{"task_id":"MBTSP\/165","completion":"    let count_chars = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if ((i == str1.charCodeAt(i) - 'A'.charCodeAt(0)) || \n            (i == str1.charCodeAt(i) - 'a'.charCodeAt(0))) \n            count_chars += 1;\n    }\n    return count_chars;\n}","language":"typescript"}
{"task_id":"MBTSP\/169","completion":"\tif (n <= 2) {\n\t\treturn n\n\t}\n\tlet a = 1\n\tlet b = 2\n\tfor (let i = 3; i <= n; i++) {\n\t\tlet c = 2 * b + a\n\t\ta = b\n\t\tb = c\n\t}\n\treturn b\n}","language":"typescript"}
{"task_id":"MBTSP\/205","completion":"  return test_tup.map(x => ~x);\n}","language":"typescript"}
{"task_id":"MBTSP\/233","completion":"  return 2 * 3.1415 * r * h;\n}","language":"typescript"}
{"task_id":"MBTSP\/235","completion":"    let count = 0;\n    let res = 0;\n    let temp = n;\n    while (temp > 0) {\n        if (count % 2 == 1) {\n            res |= (1 << count);\n        }\n        count++;\n        temp >>= 1;\n    }\n    return (n | res);\n}","language":"typescript"}
{"task_id":"MBTSP\/260","completion":"\tif (n == 0 || n == 1) {\n\t\treturn 1\n\t}\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\n}","language":"typescript"}
{"task_id":"MBTSP\/267","completion":"    return n * (4 * n * n - 1) \/ 3\n}","language":"typescript"}
{"task_id":"MBTSP\/268","completion":"\treturn (6 * n * (n - 1) + 1)\n}","language":"typescript"}
{"task_id":"MBTSP\/274","completion":"    return (1 << (n - 1)) \n}","language":"typescript"}
{"task_id":"MBTSP\/276","completion":"  return 3.1415 * r * r * h;\n}","language":"typescript"}
{"task_id":"MBTSP\/279","completion":"\treturn 4 * n * n - 3 * n \n}","language":"typescript"}
{"task_id":"MBTSP\/286","completion":"\tlet max_so_far = -2147483648;\n\tlet max_ending_here = 0;\n\tfor (let i = 0; i < n * k; i++) {\n\t\tmax_ending_here += a[i % n];\n\t\tif (max_so_far < max_ending_here) {\n\t\t\tmax_so_far = max_ending_here;\n\t\t}\n\t\tif (max_ending_here < 0) {\n\t\t\tmax_ending_here = 0;\n\t\t}\n\t}\n\treturn max_so_far;\n}","language":"typescript"}
{"task_id":"MBTSP\/291","completion":"\tif (n == 0) return 0;\n\tif (n == 1) return k;\n\tif (n == 2) return k * k;\n\t\n\treturn ((k - 1) * (count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k))) % 1000000007;\n}","language":"typescript"}
{"task_id":"MBTSP\/300","completion":"\tlet nCr = 1;\n\tlet res = 1;\n\tfor (let r = 1; r <= n; r++) {\n\t\tnCr = (nCr * (n + 1 - r)) \/ r;\n\t\tres += nCr * nCr;\n\t}\n\treturn res;\n}","language":"typescript"}
{"task_id":"MBTSP\/339","completion":"    if (x == y) {\n        return y;\n    }\n    return 2;\n}","language":"typescript"}
{"task_id":"MBTSP\/355","completion":"    let rectangles = 0;\n    let diameter = 2 * radius;\n    let diameterSquare = diameter * diameter;\n    for (let a = 1; a < 2 * radius; a++) {\n        for (let b = 1; b < 2 * radius; b++) {\n            let diagnalLengthSquare = (a * a + b * b);\n            if (diagnalLengthSquare <= diameterSquare) {\n                rectangles++;\n            }\n        }\n    }\n    return rectangles;\n}","language":"typescript"}
{"task_id":"MBTSP\/359","completion":"    if (2 * b * b == 9 * a * c) {\n        return (\"Yes\");\n    } else {\n        return (\"No\");\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/369","completion":"  return 2 * h * (l + w);\n}","language":"typescript"}
{"task_id":"MBTSP\/383","completion":"    let res = 0;\n    let count = 0;\n    let temp = n;\n    while (temp > 0) {\n        if (count % 2 == 0) {\n            res = res | (1 << count);\n        }\n        count++;\n        temp >>= 1;\n    }\n    return n ^ res;\n}","language":"typescript"}
{"task_id":"MBTSP\/385","completion":"  if (n == 0) return 3\n  if (n == 1) return 0\n  if (n == 2) return 2 \n  return get_perrin(n - 2) + get_perrin(n - 3)\n}","language":"typescript"}
{"task_id":"MBTSP\/400","completion":"  let res = 0;\n  let set = new Set();\n  for (let i = 0; i < test_list.length; i++) {\n    let tuple = test_list[i];\n    let sortedTuple = tuple.sort((a, b) => a - b);\n    let tupleStr = sortedTuple.join();\n    if (!set.has(tupleStr)) {\n      set.add(tupleStr);\n      res++;\n    }\n  }\n  return res;\n}","language":"typescript"}
{"task_id":"MBTSP\/420","completion":"    let sum = 0\n    for (let i = 1; i <= n; i++) {\n        sum += (2 * i) * (2 * i) * (2 * i)\n    }\n    return sum\n}","language":"typescript"}
{"task_id":"MBTSP\/438","completion":"  let res = 0;\n  for (let idx = 0; idx < test_list.length; idx++) {\n    for (let iidx = idx + 1; iidx < test_list.length; iidx++) {\n      if (test_list[iidx][0] == test_list[idx][1] && test_list[idx][1] == test_list[iidx][0]) {\n        res += 1;\n      }\n    }\n  }\n  return (res.toString());\n}","language":"typescript"}
{"task_id":"MBTSP\/461","completion":"    let upper_ctr = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] >= 'A' && str[i] <= 'Z') upper_ctr += 1;\n        return upper_ctr;\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/545","completion":"    const take_L_and_F_set_bits = (n: number) => {\n        n = n | n >> 1;\n        n = n | n >> 2;\n        n = n | n >> 4;\n        n = n | n >> 8;\n        n = n | n >> 16;\n        return ((n + 1) >> 1) + 1;\n    }\n    return n ^ take_L_and_F_set_bits(n);\n}","language":"typescript"}
{"task_id":"MBTSP\/549","completion":"    let j = 0;\n    let sm = 0;\n    for (let i = 1; i <= n; i++) {\n        j = (2 * i - 1);\n        sm = sm + (j * j * j * j * j);\n    }\n    return sm;\n}","language":"typescript"}
{"task_id":"MBTSP\/574","completion":"  return ((2 * 3.1415 * r * r) + (2 * 3.1415 * r * h));\n}","language":"typescript"}
{"task_id":"MBTSP\/584","completion":"  const regex = \/\\w+ly\/g;\n  const matches = [];\n  let match;\n  while (match = regex.exec(text)) {\n    matches.push(match);\n  }\n  return matches.map(match => `${match.index}-${match.index + match[0].length}: ${match[0]}`).join('\\n');\n}","language":"typescript"}
{"task_id":"MBTSP\/603","completion":"\tconst ludics = []\n\tfor (let i = 1; i <= n; i++) {\n\t\tludics.push(i)\n\t}\n\tlet index = 1\n\twhile (index != ludics.length) {\n\t\tlet first_ludic = ludics[index]\n\t\tlet remove_index = index + first_ludic\n\t\twhile (remove_index < ludics.length) {\n\t\t\tludics.splice(remove_index, 1)\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\t}\n\t\tindex += 1\n\t}\n\treturn ludics\n}","language":"typescript"}
{"task_id":"MBTSP\/620","completion":"    const dp = Array(n).fill(0);\n    dp[n - 1] = 1;\n    for (let i = n - 2; i >= 0; i--) {\n        const mxm = 0;\n        for (let j = i + 1; j < n; j++) {\n            if (a[j] % a[i] == 0 || a[i] % a[j] == 0) {\n                mxm = Math.max(mxm, dp[j]);\n            }\n        }\n        dp[i] = 1 + mxm;\n    }\n    return Math.max(...dp);\n}","language":"typescript"}
{"task_id":"MBTSP\/626","completion":"    if (r < 0) {\n        return -1;\n    }\n    return r * r;\n}","language":"typescript"}
{"task_id":"MBTSP\/646","completion":"    return (N - K + 1) ** 3;\n}","language":"typescript"}
{"task_id":"MBTSP\/657","completion":"    let fact = 1;\n    for (let i = 2; i <= n; i++) {\n        fact *= i;\n        while (fact % 10 == 0) {\n            fact \/= 10;\n        }\n    }\n    while (fact >= 10) {\n        fact \/= 10;\n    }\n    return Math.floor(fact);\n}","language":"typescript"}
{"task_id":"MBTSP\/671","completion":"    const get_Pos_Of_Right_most_Set_Bit = (n: number) => {\n        return Math.log2(n & -n) + 1;\n    };\n    if (n == 0) {\n        return 1;\n    }\n    if ((n & (n + 1)) == 0) {\n        return n;\n    }\n    const pos = get_Pos_Of_Right_most_Set_Bit(~n);\n    return (1 << (pos - 1)) | n;\n}","language":"typescript"}
{"task_id":"MBTSP\/677","completion":"    let total = a + b + c;\n    if (total === 180) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/714","completion":"    let m = n \n    let count = 0\n    let i = 2\n    while((i * i) <= m){ \n        let total = 0\n        while (n % i == 0){ \n            n \/= i \n            total += 1 \n        }\n        let temp = 0\n        let j = 1\n        while((temp + j) <= total){ \n            temp += j \n            count += 1\n            j += 1 \n        }\n        i += 1\n    }\n    if (n != 1){ \n        count += 1 \n    }\n    return count \n}","language":"typescript"}
{"task_id":"MBTSP\/735","completion":"    const set_middle_bits = (n: number) => {\n        n |= n >> 1;\n        n |= n >> 2;\n        n |= n >> 4;\n        n |= n >> 8;\n        n |= n >> 16;\n        return (n >> 1) ^ 1;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return n ^ set_middle_bits(n);\n}","language":"typescript"}
{"task_id":"MBTSP\/739","completion":"    const x = Math.sqrt(2 * Math.pow(10, (n - 1)));\n    return Math.round(x);\n}","language":"typescript"}
{"task_id":"MBTSP\/746","completion":"    const pi = 22 \/ 7;\n    if (a >= 360) return null;\n    return (pi * r ** 2) * (a \/ 360);\n}","language":"typescript"}
{"task_id":"MBTSP\/770","completion":"    let j = 0;\n    let sm = 0;\n    for (let i = 1; i <= n; i++) {\n        j = (2 * i - 1);\n        sm = sm + (j * j * j * j);\n    }\n    return sm;\n}","language":"typescript"}
{"task_id":"MBTSP\/826","completion":"    const sqa = Math.pow(a,2) \n    const sqb = Math.pow(b,2) \n    const sqc = Math.pow(c,2) \n    if (sqa == sqa + sqb || sqb == sqa + sqc || sqc == sqa + sqb) { \n        return (\"Right-angled Triangle\") \n    } else if (sqa > sqc + sqb || sqb > sqa + sqc || sqc > sqa + sqb) { \n        return (\"Obtuse-angled Triangle\") \n    } else { \n        return (\"Acute-angled Triangle\") \n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/844","completion":"    const arr = Array(n).fill(0);\n    let i = 0;\n    let odd = 1;\n    while (odd <= n) {\n        arr[i] = odd;\n        i += 1;\n        odd += 2;\n    }\n    let even = 2;\n    while (even <= n) {\n        arr[i] = even;\n        i += 1;\n        even += 2;\n    }\n    return arr[k - 1];\n}","language":"typescript"}
{"task_id":"MBTSP\/851","completion":"    return (Sum * 1.0 \/ N).toFixed(2);\n}","language":"typescript"}
{"task_id":"MBTSP\/867","completion":"    let odd = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] % 2) {\n            odd += 1;\n        }\n    }\n    if (odd % 2) {\n        return 1;\n    }\n    return 2;\n}","language":"typescript"}
{"task_id":"MBTSP\/881","completion":"    const first_even = list1.find(el => el % 2 == 0);\n    const first_odd = list1.find(el => el % 2 != 0);\n    return (first_even + first_odd);\n}","language":"typescript"}
{"task_id":"MBTSP\/884","completion":"    const num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \n    return (n & num) == num\n}","language":"typescript"}
{"task_id":"MBTSP\/905","completion":"    const factorial = (start: number, end: number) => {\n        let res = 1;\n        for (let i = start; i <= end; i++) {\n            res *= i;\n        }\n        return res;\n    };\n    return (factorial(n + 1, 2 * n) \/ factorial(1, n));\n}","language":"typescript"}
{"task_id":"MBTSP\/926","completion":"\tfunction binomial_coeffi(n: number, k: number) : number {\n\t\tif (k === 0 || k === n) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn (binomial_coeffi(n - 1, k - 1) + binomial_coeffi(n - 1, k));\n\t}\n\tif (n === 0 && m === 0) {\n\t\treturn 1;\n\t}\n\tif (n === 1 && m === 0) {\n\t\treturn 0;\n\t}\n\tif (m === 0) {\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0) + rencontres_number(n - 2, 0)));\n\t}\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0));\n}","language":"typescript"}
{"task_id":"MBTSP\/934","completion":"\tif (m == 0 || n == 0) {\n\t\treturn 1\n\t}\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)\n}","language":"typescript"}
{"task_id":"MBTSP\/968","completion":"    return Math.floor((A * N) \/ B);\n}","language":"typescript"}
{"task_id":"MBTSP\/5","completion":"\t\n\tconst A = Array(n + 1).fill(0);\n\tconst B = Array(n + 1).fill(0);\n\tA[0] = 1;\n\tA[1] = 0;\n\tB[0] = 0;\n\tB[1] = 1;\n\tfor (let i = 2; i <= n; i++) {\n\t\tA[i] = A[i - 2] + 2 * B[i - 1];\n\t\tB[i] = A[i - 1] + B[i - 2];\n\t}\n\treturn A[n];\n}","language":"typescript"}
{"task_id":"MBTSP\/13","completion":"  const word_counts = {};\n  words.forEach(function(word) {\n    if(word in word_counts) {\n      word_counts[word] = word_counts[word] + 1;\n    }\n    else {\n      word_counts[word] = 1;\n    }\n  })\n  let top_four = [];\n  for(const word in word_counts) {\n    top_four.push([word, word_counts[word]]);\n  }\n  top_four.sort(function(a,b) {\n    return b[1] - a[1];\n  });\n  top_four = top_four.slice(0,4);\n  return top_four;\n}","language":"typescript"}
{"task_id":"MBTSP\/56","completion":"    const reverse = n => n.toString().split('').reverse().join('');\n\n    return (2 * reverse(n) == n + 1);\n}","language":"typescript"}
{"task_id":"MBTSP\/76","completion":"  return ((m * (m + 1) * (2 * m + 1) \/ 6 + (n - m) * m * (m + 1) \/ 2))\n}","language":"typescript"}
{"task_id":"MBTSP\/81","completion":"  let res = []\n  for (let i = 0; i < test_tup1.length; i++) {\n    res.push([test_tup1[i], test_tup2[i % test_tup2.length]])\n  }\n  return res\n}","language":"typescript"}
{"task_id":"MBTSP\/136","completion":"    let amount = 0\n    let surcharge = 0\n    if (units < 50) {\n        amount = units * 2.60\n        surcharge = 25\n    } else if (units <= 100) {\n        amount = 130 + ((units - 50) * 3.25)\n        surcharge = 35\n    } else if (units <= 200) {\n        amount = 130 + 162.50 + ((units - 100) * 5.26)\n        surcharge = 45\n    } else {\n        amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\n        surcharge = 75\n    }\n    let total = amount + surcharge\n    return total\n}","language":"typescript"}
{"task_id":"MBTSP\/153","completion":"  return [(-b \/ (2 * a)), (((4 * a * c) - (b * b)) \/ (4 * a))];\n}","language":"typescript"}
{"task_id":"MBTSP\/185","completion":"  let focus = [\n    (-b \/ (2 * a)),\n    (((4 * a * c) - (b * b) + 1) \/ (4 * a)),\n  ];\n  return focus;\n}","language":"typescript"}
{"task_id":"MBTSP\/198","completion":"    const sqrt = Math.sqrt;\n    const pow = Math.pow;\n    const pi = Math.PI;\n    if (a < 0 || b < 0) {\n        return -1\n    }\n\n    let area = (3 * sqrt(3) * pow(a, 2)) \/ (4 * b);\n    return area\n\n}","language":"typescript"}
{"task_id":"MBTSP\/219","completion":"  let res = [];\n  test_tup = test_tup.sort((a,b) => a-b);\n  for (let i = 0; i < test_tup.length; i += 1) {\n    if (i < K || i >= test_tup.length - K) {\n      res.push(test_tup[i]);\n    }\n  }\n  res = res.sort((a,b) => a-b);\n  return res;\n}","language":"typescript"}
{"task_id":"MBTSP\/243","completion":"    let counter = {};\n    for (let i=0; i<lst.length; i++){\n        if (!counter[lst[i][0]]){\n            counter[lst[i][0]] = [];\n        }\n        counter[lst[i][0]].push(lst[i][1]);\n    }\n    return [\n        ...Object.entries(counter).map(\n            ([key, value]) => [\n                key,\n                ...value.map(\n                    val => (typeof val === 'string') ? val : val[0]),\n                value.length\n            ]\n        )\n    ];\n}","language":"typescript"}
{"task_id":"MBTSP\/244","completion":"    const nextN = Math.floor(Math.sqrt(N)) + 1;\n    return nextN * nextN;\n}","language":"typescript"}
{"task_id":"MBTSP\/245","completion":"    MSIBS = arr.slice(0);\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < i; ++j) {\n            if (arr[i] > arr[j] && MSIBS[i] < MSIBS[j] + arr[i]) MSIBS[i] = MSIBS[j] + arr[i];\n        }\n    }\n    MSDBS = arr.slice(0);\n    for (let i = 1; i <= n; ++i) {\n        for (let j = i - 1; j >= 1; --j) {\n            if (arr[-i] > arr[-j] && MSDBS[-i] < MSDBS[-j] + arr[-i]) MSDBS[-i] = MSDBS[-j] + arr[-i];\n        }\n    }\n    return Math.","language":"typescript"}
{"task_id":"MBTSP\/271","completion":"    let sum = 0; \n    for (let i = 1; i <= n; i++) {\n        let j = 2 * i;\n        sum += (j * j * j * j * j);\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/277","completion":"  let result = new Map();\n  dict.forEach((value, key) => {\n    if(value >=n) {\n      result.set(key, value);\n    }\n  });\n  return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/293","completion":"  const s = Math.sqrt((w * w) + (h * h))\n  return s\n}","language":"typescript"}
{"task_id":"MBTSP\/301","completion":"    if (d instanceof Map) {\n        let depth = 0;\n        d.forEach((value, key) => {\n            const newDepth = dict_depth(value);\n            if (newDepth > depth) {\n                depth = newDepth;\n            }\n        });\n        return depth + 1;\n    }\n    return 0;\n}","language":"typescript"}
{"task_id":"MBTSP\/305","completion":"    for (var i = 0; i < words.length; i++) {\n        if (words[i].match(\"P[a-zA-Z]{1}\"))\n            return words[i].split(\" \")\n    }\n}","language":"typescript"}
{"task_id":"MBTSP\/311","completion":"    if (!((n & (n + 1)))){\n        return n\n    }\n    let pos = 0, temp = n, count = 0;\n    while (temp){\n        if (!(temp & 1)){\n            pos = count\n        }\n        count += 1;\n        temp>>=1\n    }\n    return (n | (1 << (pos)))\n}","language":"typescript"}
{"task_id":"MBTSP\/312","completion":"  \/**\n   * Write a function to find the volume of a cone.\n   * \n   * Examples:\n   * >>> volume_cone(5,12)\n   * >>> 314.15926535897927\n   * >>> volume_cone(10,15)\n   * >>> 1570.7963267948965\n   * >>> volume_cone(19,17)\n   * >>> 6426.651371693521\n   *\/\n  \n  const pi = Math.PI\n  const volume = (1.0 \/ 3) * pi * r * r * h\n  return volume\n}","language":"typescript"}
{"task_id":"MBTSP\/416","completion":"\tif (n === 0) return 0;\n\tif (n === 1) return 1;\n\tif (n === 2) return 2;\n\t\n\tconst MAX = 1000000;\n\t\n\treturn Math.max(breakSum(Math.floor(n \/ 2)) + breakSum(Math.floor(n \/ 3)) + breakSum(Math.floor(n \/ 4)), n);\n}","language":"typescript"}
{"task_id":"MBTSP\/430","completion":"  return (\n    (c - ((b * b) + 1) * 4 * a)\n  )\n}","language":"typescript"}
{"task_id":"MBTSP\/442","completion":"    const count: number = nums.filter(x => x > 0).length;\n    const ratio: number = count \/ nums.length;\n    return ratio.toFixed(2);\n}","language":"typescript"}
{"task_id":"MBTSP\/448","completion":"    if (n == 0) {\n        return 3\n    }\n    if (n == 1) {\n        return 3\n    }\n    if (n == 2) {\n        return 5\n    }\n    let sum = 5\n    let a = 3\n    let b = 0\n    let c = 2\n    for (let i = 0; i < n - 2; i++) {\n        let d = a + b\n        sum = sum + d\n        a = b\n        b = c\n        c = d\n    }\n    return sum\n}","language":"typescript"}
{"task_id":"MBTSP\/491","completion":"    return (a * (1 - Math.pow(r, n ))) \/ (1 - r)\n}","language":"typescript"}
{"task_id":"MBTSP\/497","completion":"  const l = Math.sqrt(r * r + h * h)\n  const SA = Math.PI * r * (r + l)\n  return SA\n}","language":"typescript"}
{"task_id":"MBTSP\/501","completion":"  const ngcd = function(x: number, y: number) : number {\n    const i: number = 1;\n    let gcd: number;\n    while (i <= x && i <= y) {\n      if (x % i == 0 && y % i == 0) {\n        gcd = i;\n      }\n      i++;\n    }\n    return gcd;\n  }\n  const n = ngcd(x, y);\n  const z = Math.trunc(Math.sqrt(n));\n  let result = 0;\n  for (let i = 1; i <= z; i++) {\n    if (n % i == 0) {\n      result += 2;\n      if (i == n \/ i) {\n        result -= 1;\n      }\n    }\n  }\n  return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/581","completion":"  return 2 * b * s + Math.pow(b,2)\n}","language":"typescript"}
{"task_id":"MBTSP\/634","completion":"    let sum = 0; \n    for (let i = 1; i <= n; i++){ \n        let j = 2 * i; \n        sum = sum + (j*j*j*j); \n    }\n    return sum; \n}","language":"typescript"}
{"task_id":"MBTSP\/635","completion":"    return [...iterable].sort((a,b) => a - b)\n}","language":"typescript"}
{"task_id":"MBTSP\/738","completion":"  if (n < 0) return 0;\n  return 1 \/ (2 ** n) + geometric_sum(n - 1);\n}","language":"typescript"}
{"task_id":"MBTSP\/742","completion":"  const sq = side * side\n  return Math.sqrt(3) * sq\n}","language":"typescript"}
{"task_id":"MBTSP\/752","completion":"\tlet dp = [0, 1]\n\tfor (let i = 2; i < n + 1; i++) {\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]\n\t}\n\treturn dp[n]\n}","language":"typescript"}
{"task_id":"MBTSP\/845","completion":"  if (n < 0) {\n    return 0;\n  }\n  if (n <= 1) {\n    return 1;\n  }\n  const x = (n * Math.log10(n \/ Math.E) + Math.log10(2 * Math.PI * n) \/ 2);\n  return Math.floor(x) + 1;\n}","language":"typescript"}
{"task_id":"MBTSP\/911","completion":"    \/\/ code here\n    if (nums.length < 3) {\n        return 0\n    }\n    nums.sort(function (a, b) {\n        return a - b\n    })\n    \/\/ 3 is the size of heap\n    return nums[nums.length - 1] * nums[nums.length - 2] * nums[nums.length - 3]\n}","language":"typescript"}
{"task_id":"MBTSP\/4","completion":"    const heap = new Heap(function (a, b) {\n        return b - a;\n    });\n    for (let i = 0; i < n; i++) {\n        heap.push(nums[i]);\n    }\n    const result = [];\n    while (heap.size() > 0) {\n        result.push(heap.pop());\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/31","completion":"    const heap = new Heap(function (a, b) {\n        return b - a;\n    });\n    for (const num of nums) {\n        for (const n of num) {\n            heap.push(n);\n        }\n    }\n    const result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/61","completion":"    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        for (let j = i + 1; j <= s.length; j++) {\n            let sum = 0;\n            for (let k = i; k <= j; k++) {\n                sum += s[k];\n            }\n            if (sum === n) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/108","completion":"    let heap = new Heap(function (a, b) {\n        return a - b;\n    });\n    heap.push(num1[0]);\n    heap.push(num2[0]);\n    heap.push(num3[0]);\n    for (let i = 1; i < num1.length; i++) {\n        heap.push(num1[i]);\n    }\n    for (let i = 1; i < num2.length; i++) {\n        heap.push(num2[i]);\n    }\n    for (let i = 1; i < num3.length; i++) {\n        heap.push(num3[i]);\n    }\n    let result = [];\n    while (heap.size() > 0) {\n        result.push(heap.pop());\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/111","completion":"    \/\/ TODO: your code here\n    return []\n}","language":"typescript"}
{"task_id":"MBTSP\/117","completion":"    \/\/ TODO: Your code here\n    return '';\n}","language":"typescript"}
{"task_id":"MBTSP\/163","completion":"    return math.multiply(s,l) \/ 2\n}","language":"typescript"}
{"task_id":"MBTSP\/180","completion":"    const earthRadius = 6371\n    const lat1 = math.radians(slat)\n    const lat2 = math.radians(elat)\n    const deltaLat = math.radians(elat - slat)\n    const deltaLon = math.radians(elon - slon)\n\n    const a = math.sin(deltaLat \/ 2) * math.sin(deltaLat \/ 2) + math.cos(lat1) * math.cos(lat2) * math.sin(deltaLon \/ 2) * math.sin(deltaLon \/ 2)\n    const c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    return earthRadius * c\n}","language":"typescript"}
{"task_id":"MBTSP\/215","completion":"    let result = [];\n    let current = [];\n    for (let i = 0; i < alist.length; i++) {\n        if (Array.isArray(alist[i])) {\n            current = [];\n            result.push(current);\n        } else {\n            current.push(alist[i]);\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/218","completion":"    const operations = math.subtract(A, B)\n    return math.abs(operations)\n}","language":"typescript"}
{"task_id":"MBTSP\/237","completion":"    const map = new Map();\n    for (const [a, b] of test_list) {\n        const key = [a, b].sort((a, b) => a - b);\n        const count = map.get(key) || 0;\n        map.set(key, count + 1);\n    }\n    return map;\n}","language":"typescript"}
{"task_id":"MBTSP\/239","completion":"    let count = 0;\n    for (let i = 1; i <= m; i++) {\n        for (let j = 1; j <= n; j++) {\n            if ((i + j) % 2 == 0 && (i + j) <= m) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/265","completion":"    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i += step) {\n        temp.push(S[i]);\n        if (i + step >= S.length) {\n            result.push(temp);\n            temp = [];\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/321","completion":"    let demlo = \"\";\n    for (let i = 0; i < s.length; i++) {\n        demlo += s[i];\n        if (demlo.length == 8) {\n            demlo = demlo.replace(\/1\/g, \"2\");\n            demlo = demlo.replace(\/0\/g, \"1\");\n        }\n    }\n    return demlo;\n}","language":"typescript"}
{"task_id":"MBTSP\/342","completion":"    const sorted = list.sort((a, b) => a[0] - b[0]);\n    const result = [sorted[0][0], sorted[0][0]];\n    for (let i = 1; i < sorted.length; i++) {\n        const [start, end] = sorted[i];\n        if (start - result[1] > 1) {\n            result[1] = start;\n        } else if (end - result[0] > 1) {\n            result[0] = end;\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/372","completion":"    const heap = new Heap(function (a, b) {\n        return a - b;\n    });\n    for (let i = 0; i < nums.length; i++) {\n        heap.push(nums[i]);\n    }\n    const result = [];\n    while (heap.size() > 0) {\n        result.push(heap.pop());\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/398","completion":"    if (nums.length == 0) return 0;\n    let sum = 0;\n    for (let i = 0; i < nums.length; i++) {\n        sum += nums[i];\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/444","completion":"    const result = [];\n    for (let i = 0; i < test_list.length; i++) {\n        const temp = test_list[i].slice(0, K);\n        result.push(temp);\n    }\n    return JSON.stringify(result);\n}","language":"typescript"}
{"task_id":"MBTSP\/483","completion":"    let result = 1;\n    for (let i = 1; i <= x; i++) {\n        result *= i;\n    }\n    for (let i = 2; i <= x; i++) {\n        if (result % i != 0) {\n            return -1;\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/488","completion":"    return math.sqrt(3) * a * 2\n}","language":"typescript"}
{"task_id":"MBTSP\/490","completion":"    const result = new Set();\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j && test_list[i][0] == test_list[j][1] && test_list[i][1] == test_list[j][0]) {\n                result.add([test_list[i][0], test_list[j][0]]);\n            }\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/496","completion":"    const minHeap = new Heap(function (a, b) {\n        return a - b;\n    });\n    for (let i = 0; i < n; i++) {\n        minHeap.push(nums[i]);\n    }\n    let result = [];\n    while (minHeap.size() > 0) {\n        result.push(minHeap.pop());\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/510","completion":"    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] * arr[j] < k) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/519","completion":"    return math.pow(num, 3) \/ (6 * math.sqrt(2))\n}","language":"typescript"}
{"task_id":"MBTSP\/538","completion":"    return str1.split(\" \");\n}","language":"typescript"}
{"task_id":"MBTSP\/539","completion":"    return bases_num.map((base, i) => base ** index[i]);\n}","language":"typescript"}
{"task_id":"MBTSP\/551","completion":"    let result = [];\n    for (let i = 0; i < list1.length; i++) {\n        result.push(list1[i][n]);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/561","completion":"    const result = new Map();\n    for (const [a, b] of test_list) {\n        if (result.has(a)) {\n            result.get(a).push(b);\n        } else {\n            result.set(a, [b]);\n        }\n        if (result.has(b)) {\n            result.get(b).push(a);\n        } else {\n            result.set(b, [a]);\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/570","completion":"    let result = [];\n    for (let i = 0; i < list1.length; i++) {\n        let word = list1[i];\n        for (let j = 0; j < charlist.length; j++) {\n            word = word.replace(charlist[j], '');\n        }\n        result.push(word);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/579","completion":"    \/\/ Your code here\n}","language":"typescript"}
{"task_id":"MBTSP\/585","completion":"    const heap = new Heap(function (a, b) {\n        return a.price - b.price;\n    });\n\n    for (const item of items) {\n        heap.push(item);\n    }\n\n    const result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/592","completion":"    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += (i + 1) * (n - i);\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/596","completion":"    return tuple_list.length;\n}","language":"typescript"}
{"task_id":"MBTSP\/612","completion":"    let result = [];\n    let temp = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            temp.push(lst[i][j]);\n        }\n        result.push(temp);\n        temp = [];\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/638","completion":"    return 35.74 + 0.6215 * v - 35.75 * math.pow(v, 0.16) + 0.4275 * t - 35.75 * math.pow(t, 0.16)\n}","language":"typescript"}
{"task_id":"MBTSP\/642","completion":"    const set = new Set();\n    for (let i = 0; i < test_list.length; i++) {\n        const row = test_list[i];\n        const row_set = new Set();\n        for (let j = 0; j < row.length; j++) {\n            const col = row[j];\n            const col_set = new Set();\n            for (let k = 0; k < row.length; k++) {\n                const val = row[k];\n                if (i != k && val[0] == col[0] && val[1] == col[1]) {\n                    col_set.add(val);\n                }\n            }\n            if (col_set.size > 0) {\n                row_set.add(col_set);\n            }\n        }\n        if (row_set.size > 0) {\n            set.add(row_set);\n        }\n","language":"typescript"}
{"task_id":"MBTSP\/652","completion":"    let result = '[';\n    for (let i = 0; i < test_list.length; i++) {\n        result += '(';\n        for (let j = 0; j < test_list[i].length; j++) {\n            result += test_list[i][j].join(', ');\n            if (j < test_list[i].length - 1) {\n                result += ', ';\n            }\n        }\n        result += ')';\n        if (i < test_list.length - 1) {\n            result += ', ';\n        }\n    }\n    result += ']';\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/659","completion":"    const result = [];\n    for (let i = 0; i < x.length; i++) {\n        if (result.indexOf(x[i]) === -1) {\n            result.push(x[i]);\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/676","completion":"    return text1.replace(\/[^\\w\\s]\/gi, '');\n}","language":"typescript"}
{"task_id":"MBTSP\/684","completion":"    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBTSP\/686","completion":"    \/\/ Your code here\n}","language":"typescript"}
{"task_id":"MBTSP\/694","completion":"    let unique_list = [];\n    for (let [key, value] of test_dict) {\n        unique_list = unique_list.concat(value);\n    }\n    return unique_list;\n}","language":"typescript"}
{"task_id":"MBTSP\/702","completion":"    \/\/ 1. find the max and min\n    let max = 0;\n    let min = arr.length;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    \/\/ 2. find the amax-amin\n    let amax = max - min;\n    \/\/ 3. find the k-amax\n    let kmax = k - amax;\n    \/\/ 4. find the amax-kmax\n    let amkmax = amax - kmax;\n    \/\/ 5. find the amin-kmax\n    let aminkmax = min - kmax;\n    \/\/ 6. find the amin-amkmax\n    let aminkamkmax = min - amkmax;\n   ","language":"typescript"}
{"task_id":"MBTSP\/709","completion":"    const map = new Map();\n    for (const [key, value] of test_list) {\n        if (map.has(value)) {\n            map.set(value, map.get(value) + 1);\n        } else {\n            map.set(value, 1);\n        }\n    }\n    return `{${[...map.entries()].map(([key, value]) => `${value}: ${key}`).join(', ')}}`;\n}","language":"typescript"}
{"task_id":"MBTSP\/724","completion":"    if (power == 0) {\n        return 1;\n    }\n    return base * power_base_sum(base, power - 1);\n}","language":"typescript"}
{"task_id":"MBTSP\/731","completion":"    return 2 * math.pi * r * h\n}","language":"typescript"}
{"task_id":"MBTSP\/743","completion":"    let list2 = [];\n    for (let i = 0; i < m; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = m; i < n; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = n; i < list1.length; i++) {\n        list2.push(list1[i]);\n    }\n    return list2;\n}","language":"typescript"}
{"task_id":"MBTSP\/758","completion":"  const map = new Map();\n  for (let i = 0; i < list1.length; i++) {\n    const list = list1[i];\n    for (let j = 0; j < list.length; j++) {\n      const item = list[j];\n      if (map.has(item)) {\n        map.set(item, map.get(item) + 1);\n      } else {\n        map.set(item, 1);\n      }\n    }\n  }\n  return map;\n}","language":"typescript"}
{"task_id":"MBTSP\/765","completion":"    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum + n;\n}","language":"typescript"}
{"task_id":"MBTSP\/769","completion":"    return li1.filter(x => !li2.includes(x));\n}","language":"typescript"}
{"task_id":"MBTSP\/779","completion":"    const map = new Map();\n    for (let i = 0; i < list1.length; i++) {\n        const subList = list1[i];\n        for (let j = 0; j < subList.length; j++) {\n            const element = subList[j];\n            if (map.has(element)) {\n                map.set(element, map.get(element) + 1);\n            } else {\n                map.set(element, 1);\n            }\n        }\n    }\n    return map;\n}","language":"typescript"}
{"task_id":"MBTSP\/782","completion":"    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length; j++) {\n            if (j % 2 == 1) {\n                sum += arr[j];\n            }\n        }\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBTSP\/795","completion":"    const heap = new Heap(function(a, b) {\n        return a.price - b.price;\n    });\n\n    for (const item of items) {\n        heap.push(item);\n    }\n\n    return heap.items.slice(0, n);\n}","language":"typescript"}
{"task_id":"MBTSP\/843","completion":"    const heap = new Heap((a, b) => a - b)\n    for (const prime of primes) {\n        heap.push(prime)\n    }\n    let ugly = 1\n    let index = 1\n    while (heap.size() > 1) {\n        ugly = heap.pop() * ugly\n        index++\n        if (index == n) {\n            return ugly\n        }\n        while (heap.size() > 0 && ugly % heap.peek() == 0) {\n            heap.pop()\n        }\n    }\n    return ugly\n}","language":"typescript"}
{"task_id":"MBTSP\/859","completion":"    let result = [];\n    let temp = [];\n    for (let i = 0; i < my_list.length; i++) {\n        temp.push(my_list[i]);\n        if (temp.length > 1) {\n            result.push(temp);\n            temp = [];\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/898","completion":"    let result = [];\n    for (let i = 0; i < numbers.length - n + 1; i++) {\n        result.push(numbers[i]);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/901","completion":"    let result = 1;\n    while (result < n) {\n        result += result;\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBTSP\/912","completion":"    return (n ** m) % (10 ** 9 + 7);\n}","language":"typescript"}
{"task_id":"MBTSP\/920","completion":"    const result = [];\n    for (const [a, b] of test_list) {\n        if (a !== undefined && b !== undefined) {\n            result.push([a, b]);\n        }\n    }\n    return JSON.stringify(result);\n}","language":"typescript"}
{"task_id":"MBTSP\/943","completion":"    const heap = new Heap(function (a, b) {\n        return a - b;\n    });\n    for (let i = 0; i < num1.length; i++) {\n        heap.push(num1[i]);\n    }\n    for (let i = 0; i < num2.length; i++) {\n        heap.push(num2[i]);\n    }\n    const result = [];\n    while (heap.size() > 0) {\n        result.push(heap.pop());\n    }\n    return result;\n}","language":"typescript"}
