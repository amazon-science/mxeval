{"task_id":"MBPHP\/3","completion":"    $i = 2;\n    $isPrime = true;\n    while ($i < $n && $isPrime) {\n        $isPrime = $n % $i != 0;\n        $i++;\n    }\n    return !$isPrime;\n}","language":"php"}
{"task_id":"MBPHP\/8","completion":"    $squareNums = [];\n    foreach($nums as $num) {\n        $squareNums[] = $num * $num;\n    }\n    return $squareNums;\n}","language":"php"}
{"task_id":"MBPHP\/11","completion":"    $s = str_replace($ch, '', $s);\n    $s = str_replace($ch, '', $s);\n    return $s;\n}","language":"php"}
{"task_id":"MBPHP\/16","completion":"    $result = \"Not matched!\";\n    if (preg_match(\"\/^[a-z]+_[a-z]+$\/\", $text)) {\n        $result = \"Found a match!\";\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/17","completion":"    return $a * 4;\n}","language":"php"}
{"task_id":"MBPHP\/18","completion":"    $result = '';\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($secondString != '' && strpos($secondString, $string[$i]) === false) {\n            $result .= $string[$i];\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/19","completion":"    $seen = array();\n    foreach ($arraynums as $num) {\n        if (in_array($num, $seen)) {\n            return true;\n        }\n        $seen[] = $num;\n    }\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/20","completion":"    $x = $x + 1;\n    return $x % 2 == 0;\n}","language":"php"}
{"task_id":"MBPHP\/21","completion":"    $result = array();\n    for ($i = 1; $i <= $m; $i++) {\n        $result[] = $i * $n;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/22","completion":"    $seen = array();\n    $duplicates = array();\n    foreach ($nums as $num) {\n        if ($seen[$num]) {\n            $duplicates[] = $num;\n        } else {\n            $seen[$num] = true;\n        }\n    }\n    return (count($duplicates) > 0) ? $duplicates[0] : -1;\n}","language":"php"}
{"task_id":"MBPHP\/23","completion":"    $max = 0;\n    foreach ($list1 as $list2) {\n        foreach ($list2 as $num) {\n            $sum = 0;\n            foreach ($list2 as $num2) {\n                $sum += $num2;\n            }\n            if ($sum > $max) {\n                $max = $sum;\n            }\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/25","completion":"    $prod = 1;\n    $arr = array_filter($arr);\n    foreach ($arr as $key => $value) {\n        if ($key != $n) {\n            $prod *= $value;\n        }\n    }\n    return $prod;\n}","language":"php"}
{"task_id":"MBPHP\/27","completion":"    $result = array();\n    foreach($list as $item) {\n        $result[] = preg_replace('\/\\d+\/', '', $item);\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/28","completion":"    $result = 1;\n    for ($i = 0; $i < $k; $i++) {\n        $result *= $n - $i;\n        $result \/= $i + 1;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/29","completion":"    $count = 0;\n    $max = 0;\n    $maxCount = 0;\n    for ($i = 0; $i < $arrSize; $i++) {\n        if ($arr[$i] % 2 != 0) {\n            $count++;\n            if ($count > $maxCount) {\n                $max = $arr[$i];\n                $maxCount = $count;\n            }\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/32","completion":"    $i = 2;\n    $max = 0;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n = $n \/ $i;\n            $max = $i;\n        } else {\n            $i++;\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/33","completion":"    $binary = '';\n    while ($n > 0) {\n        $binary = $n % 2 . $binary;\n        $n = $n \/ 2;\n    }\n    return $binary;\n}","language":"php"}
{"task_id":"MBPHP\/44","completion":"    if (preg_match(\"\/^[a-zA-Z]+$\/\", $text)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/45","completion":"    $gcd = 1;\n    $i = 2;\n    foreach ($l as $e) {\n        if ($e % $i == 0) {\n            $gcd = $i;\n        } else {\n            if ($e % $gcd == 0) {\n                $i++;\n            } else {\n                $gcd = $e % $gcd;\n            }\n        }\n    }\n    return $gcd;\n}","language":"php"}
{"task_id":"MBPHP\/46","completion":"    $data = array_filter($data);\n    return (count($data) == count(array_unique($data)));\n}","language":"php"}
{"task_id":"MBPHP\/51","completion":"    return ($x == $y && $y == $z);\n}","language":"php"}
{"task_id":"MBPHP\/52","completion":"    return $b * $h;\n}","language":"php"}
{"task_id":"MBPHP\/53","completion":"    $first = substr($str, 0, 1);\n    $last = substr($str, strlen($str) - 1, 1);\n    return $first == $last ? \"Equal\" : \"Not Equal\";\n}","language":"php"}
{"task_id":"MBPHP\/58","completion":"    return ($x * $y < 0) || ($y * $x < 0);\n}","language":"php"}
{"task_id":"MBPHP\/62","completion":"    $min = $xs[0];\n    foreach ($xs as $x) {\n        if ($x < $min) {\n            $min = $x;\n        }\n    }\n    return $min;\n}","language":"php"}
{"task_id":"MBPHP\/63","completion":"    $maxDiff = 0;\n    $min = 0;\n    $max = 0;\n    foreach ($testList as $test) {\n        $min = min($test);\n        $max = max($test);\n        $diff = abs($max - $min);\n        if ($diff > $maxDiff) {\n            $maxDiff = $diff;\n        }\n    }\n    return $maxDiff;\n}","language":"php"}
{"task_id":"MBPHP\/65","completion":"    $sum = 0;\n    foreach ($dataList as $data) {\n        if (is_array($data)) {\n            $sum += recursiveListSum($data);\n        } else {\n            $sum += $data;\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/66","completion":"    $count = 0;\n    foreach ($list as $num) {\n        if ($num > 0) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/69","completion":"    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l_len = count($l);\n    $s_len = count($s);\n    while ($i < $l_len && $j < $s_len) {\n        if ($l[$i] == $s[$j]) {\n            $k++;\n            $i++;\n            $j++;\n        } else if ($l[$i] > $s[$j]) {\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    if ($k == $s_len) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/71","completion":"    $n = count($nums);\n    $gap = 1;\n    $max = $n \/ $gap;\n    $i = 0;\n    $j = 0;\n    $temp = 0;\n    for ($i = 0; $i < $max; $i++) {\n        for ($j = $i + 1; $j < $max; $j++) {\n            if ($nums[$i] > $nums[$j]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$j];\n                $nums[$j] = $temp;\n            }\n        }\n    }\n    return $nums;\n}","language":"php"}
{"task_id":"MBPHP\/77","completion":"    $sum = 0;\n    $sum += $n % 10;\n    $n = floor($n \/ 10);\n    $sum += $n % 10;\n    $n = floor($n \/ 10);\n    $sum += $n % 10;\n    return $sum % 2 == 0;\n}","language":"php"}
{"task_id":"MBPHP\/82","completion":"    $volume = ($r ** 3) * (4 \/ 3) * 3.141592653589793;\n    return $volume;\n}","language":"php"}
{"task_id":"MBPHP\/85","completion":"    $area = ($r * $r * 3.141592653589793) * 4;\n    return $area;\n}","language":"php"}
{"task_id":"MBPHP\/87","completion":"    $dict = array_merge(array_merge(array_merge($dict1, $dict2), $dict3), array_merge($dict2, $dict1));\n    return $dict;\n}","language":"php"}
{"task_id":"MBPHP\/88","completion":"    $freq = array();\n    foreach ($list1 as $key => $value) {\n        if ($freq[$value] == null) {\n            $freq[$value] = 1;\n        } else {\n            $freq[$value]++;\n        }\n    }\n    return $freq;\n}","language":"php"}
{"task_id":"MBPHP\/90","completion":"    $max = 0;\n    foreach ($list1 as $item) {\n        if (strlen($item) > $max) {\n            $max = strlen($item);\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/93","completion":"    $result = 1;\n    while ($b > 0) {\n        $result *= $a;\n        $b--;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/94","completion":"    $min = 0;\n    $min_value = $testList[$min][1];\n    for ($i = 1; $i < count($testList); $i++) {\n        if ($testList[$i][1] < $min_value) {\n            $min = $i;\n            $min_value = $testList[$i][1];\n        }\n    }\n    return $testList[$min][0];\n}","language":"php"}
{"task_id":"MBPHP\/95","completion":"    $min = 0;\n    foreach ($lst as $item) {\n        if (count($item) < count($lst[$min])) {\n            $min = $item;\n        }\n    }\n    return count($lst[$min]);\n}","language":"php"}
{"task_id":"MBPHP\/96","completion":"    $divisors = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $divisors++;\n        }\n    }\n    return $divisors;\n}","language":"php"}
{"task_id":"MBPHP\/98","completion":"    $result = 1;\n    foreach ($numbers as $number) {\n        $result *= $number;\n    }\n    return $result \/ count($numbers);\n}","language":"php"}
{"task_id":"MBPHP\/99","completion":"    $binary = '';\n    while ($n > 0) {\n        $binary = $n % 2 . $binary;\n        $n = $n \/ 2;\n    }\n    return $binary;\n}","language":"php"}
{"task_id":"MBPHP\/101","completion":"    $i = 0;\n    $j = 0;\n    $kth = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $j = $i + 1;\n        if ($j == $k) {\n            $kth = $arr[$i];\n            break;\n        }\n    }\n    return $kth;\n}","language":"php"}
{"task_id":"MBPHP\/104","completion":"    $result = [];\n    foreach ($inputList as $list) {\n        $result[] = sort($list);\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/112","completion":"    $perimeter = $diameter * 2 + $height * 2;\n    return $perimeter;\n}","language":"php"}
{"task_id":"MBPHP\/113","completion":"    return (int) $text == $text;\n}","language":"php"}
{"task_id":"MBPHP\/116","completion":"    $sum = 0;\n    foreach ($nums as $num) {\n        $sum = $sum * 10 + $num;\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/118","completion":"    $list = array();\n    $list = explode(\" \", $string);\n    return $list;\n}","language":"php"}
{"task_id":"MBPHP\/119","completion":"    $i = 0;\n    $j = 0;\n    $k = 0;\n    $count = 0;\n    $found = false;\n    $result = 0;\n\n    while ($i < count($arr)) {\n        while ($j < count($arr) && $arr[$i] == $arr[$j]) {\n            $count++;\n            $j++;\n        }\n        if ($count == 1) {\n            $found = true;\n            $result = $arr[$i];\n            break;\n        }\n        $count = 0;\n        $i++;\n    }\n\n    if ($found == true) {\n        return $result;\n    } else {\n        return false;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/120","completion":"    $max = 0;\n    $min = 0;\n    foreach ($list1 as $tuple) {\n        $max = max($max, $tuple[0] * $tuple[1]);\n        $min = min($min, $tuple[0] * $tuple[1]);\n    }\n    return $max - $min;\n}","language":"php"}
{"task_id":"MBPHP\/127","completion":"    $z = 0;\n    $z = $x * $y;\n    return $z;\n}","language":"php"}
{"task_id":"MBPHP\/128","completion":"    $words = explode(' ', $str);\n    $longWords = array();\n    foreach($words as $word) {\n        if (strlen($word) > $n) {\n            $longWords[] = $word;\n        }\n    }\n    return $longWords;\n}","language":"php"}
{"task_id":"MBPHP\/130","completion":"    $max = 0;\n    $max_index = 0;\n    $counts = array();\n    foreach ($nums as $num) {\n        if ($counts[$num] == null) {\n            $counts[$num] = 1;\n        } else {\n            $counts[$num]++;\n        }\n        if ($counts[$num] > $max) {\n            $max = $counts[$num];\n            $max_index = $num;\n        }\n    }\n    return [$max_index, $max];\n}","language":"php"}
{"task_id":"MBPHP\/133","completion":"    $sum = 0;\n    foreach ($nums as $num) {\n        if ($num < 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/140","completion":"    $result = array();\n    foreach ($testList as $value) {\n        foreach ($value as $key) {\n            if (!in_array($key, $result)) {\n                $result[] = $key;\n            }\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/141","completion":"    $len = count($nums);\n    $temp = 0;\n    $result = [];\n    for ($i = 0; $i < $len; $i++) {\n        $temp = $nums[$i];\n        $j = $i - 1;\n        while ($j >= 0 && $nums[$j] > $temp) {\n            $nums[$j + 1] = $nums[$j];\n            $j = $j - 1;\n        }\n        $nums[$j + 1] = $temp;\n    }\n    return $nums;\n}","language":"php"}
{"task_id":"MBPHP\/144","completion":"    $sum = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            $sum += abs($arr[$i] - $arr[$j]);\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/145","completion":"    $max = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            $diff = abs($arr[$i] - $arr[$j]);\n            if ($diff > $max) {\n                $max = $diff;\n            }\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/150","completion":"    $result = false;\n    if ($a < $b && $a < $c) {\n        $result = true;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/154","completion":"    $result = array();\n    for ($i = 0; $i < count($nums); $i++) {\n        if ($nums[$i][$n] != 0) {\n            $result[] = $nums[$i][$n];\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/156","completion":"    $result = [];\n    foreach ($tupleStr as $tuple) {\n        $result[] = array_map('intval', $tuple);\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/161","completion":"    $result = [];\n    foreach($list1 as $item) {\n        if (!in_array($item, $list2)) {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/167","completion":"    $power = 1;\n    while ($power < $n) {\n        $power *= 2;\n    }\n    return $power;\n}","language":"php"}
{"task_id":"MBPHP\/168","completion":"    $count = 0;\n    foreach ($a as $key => $value) {\n        if ($value == $x) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/170","completion":"    $sum = 0;\n    for ($i = $m; $i <= $n; $i++) {\n        $sum += $list1[$i];\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/171","completion":"    $a = $a * 5;\n    return $a;\n}","language":"php"}
{"task_id":"MBPHP\/173","completion":"    $text = preg_replace('\/[^a-zA-Z0-9]\/', '', $text);\n    return $text;\n}","language":"php"}
{"task_id":"MBPHP\/176","completion":"    return $a + $b + $c;\n}","language":"php"}
{"task_id":"MBPHP\/177","completion":"    $min = $l < $r ? $l : $r;\n    $max = $l > $r ? $l : $r;\n    $gcd = $min;\n    while ($min % $gcd != 0) {\n        $gcd = $gcd - $min % $gcd;\n    }\n    $lcm = $min * $gcd;\n    $lcm = $lcm \/ $gcd;\n    $result = array();\n    $result[] = $lcm;\n    $result[] = $lcm + $gcd;\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/186","completion":"    $pattern = '\/(' . implode('|', $patterns) . ')\/';\n    if (preg_match($pattern, $text)) {\n        return \"Matched!\";\n    } else {\n        return \"Not Matched!\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/188","completion":"    $prod = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $prod *= $i;\n    }\n    return $prod % $n == 0;\n}","language":"php"}
{"task_id":"MBPHP\/189","completion":"    $missing = [];\n    $i = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] > 0) {\n            $missing[] = $arr[$i];\n        }\n    }\n    $i = 0;\n    while ($i < $n) {\n        if ($missing[$i] == $i + 1) {\n            $i++;\n        } else {\n            break;\n        }\n    }\n    return $i + 1;\n}","language":"php"}
{"task_id":"MBPHP\/195","completion":"    $i = 0;\n    $j = 0;\n    $m = 0;\n    $n = (is_numeric($n)) ? $n : 0;\n    $m = (is_numeric($x)) ? $x : 0;\n    $i = $m - 1;\n    $j = $n - 1;\n    while ($i >= 0 && $j >= 0) {\n        if ($arr[$i] == $x) {\n            return $i;\n        }\n        if ($arr[$j] == $x) {\n            return $j;\n        }\n        if ($arr[$i] > $x) {\n            $j--;\n        }\n        if ($arr[$j] < $x) {\n            $i--;\n        }\n    }\n    return -1;\n}","language":"php"}
{"task_id":"MBPHP\/196","completion":"    $result = [];\n    foreach ($testList as $item) {\n        if (count($item) != $k) {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/197","completion":"    $result = [];\n    $result[] = pow($testTup1[0], $testTup2[0]);\n    $result[] = pow($testTup1[1], $testTup2[1]);\n    $result[] = pow($testTup1[2], $testTup2[2]);\n    $result[] = pow($testTup1[3], $testTup2[3]);\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/200","completion":"    $max = max($list1);\n    $max_index = array_search($max, $list1);\n    $max_index_positions = array();\n    for ($i = 0; $i < count($list1); $i++) {\n        if ($list1[$i] == $max) {\n            $max_index_positions[] = $i;\n        }\n    }\n    return $max_index_positions;\n}","language":"php"}
{"task_id":"MBPHP\/201","completion":"    $len = count($lst);\n    if ($len == 0) {\n        return false;\n    }\n    $set = array_unique($lst);\n    $len = count($set);\n    if ($len == 1) {\n        return true;\n    }\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/203","completion":"    $diff = $n1 ^ $n2;\n    $count = 0;\n    while ($diff > 0) {\n        $diff = $diff & $diff - 1;\n        $count++;\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/208","completion":"    return preg_match(\"\/^[0-9]+(\\.[0-9]{2})?$\/\", $num);\n}","language":"php"}
{"task_id":"MBPHP\/210","completion":"    return preg_match(\"\/^[a-zA-Z0-9]+$\/\", $string);\n}","language":"php"}
{"task_id":"MBPHP\/211","completion":"    $count = 0;\n    for ($i = 0; $i < 32; $i++) {\n        if ($n & 1) {\n            $count++;\n        }\n        $n >>= 1;\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/212","completion":"    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum += $i * $i * $i * $i;\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/213","completion":"    $result = array();\n    foreach ($testTup1 as $key1 => $value1) {\n        $result[$key1] = $value1;\n    }\n    foreach ($testTup2 as $key2 => $value2) {\n        $result[$key2] .= $value2;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/214","completion":"    return $radian * (180 \/ 3.141592653589793);\n}","language":"php"}
{"task_id":"MBPHP\/216","completion":"    $list1 = array_filter($list1);\n    $list2 = array_filter($list2);\n\n    foreach ($list1 as $key1 => $value1) {\n        foreach ($list2 as $key2 => $value2) {\n            if ($value1 == $value2) {\n                return true;\n            }\n        }\n    }\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/217","completion":"    $char = array();\n    $repeated = array();\n    for ($i = 0; $i < strlen($str); $i++) {\n        if (in_array($str[$i], $char)) {\n            $repeated[] = $str[$i];\n        }\n        $char[] = $str[$i];\n    }\n    if (count($repeated) > 0) {\n        return $repeated[0];\n    } else {\n        return \"\\x00\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/221","completion":"    $even = false;\n    foreach ($nums as $num) {\n        if ($num % 2 == 0) {\n            $even = $num;\n            break;\n        }\n    }\n    return $even;\n}","language":"php"}
{"task_id":"MBPHP\/223","completion":"    $cnt = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] == $x) {\n            $cnt++;\n        }\n    }\n    return $cnt > ($n \/ 2);\n}","language":"php"}
{"task_id":"MBPHP\/224","completion":"    $count = 0;\n    while ($n > 0) {\n        $n &= $n - 1;\n        $count++;\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/226","completion":"    $result = \"\";\n    for ($i = 0; $i < strlen($str); $i++) {\n        if ($i % 2 == 0) {\n            $result .= $str[$i];\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/227","completion":"    $min = min($a, $b, $c);\n    return $min;\n}","language":"php"}
{"task_id":"MBPHP\/230","completion":"    $str = str_replace(\" \", $char, $str1);\n    return $str;\n}","language":"php"}
{"task_id":"MBPHP\/234","completion":"    return $l * $l * $l;\n}","language":"php"}
{"task_id":"MBPHP\/238","completion":"    $count = 0;\n    $len = strlen($str);\n    for ($i = 0; $i < $len; $i++) {\n        for ($j = $i + 1; $j <= $len; $j++) {\n            if (substr($str, $i, $j - $i) != '') {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/240","completion":"    $list1 = array_slice($list1, 0, -1);\n    $list1 = array_merge($list1, $list2);\n    return $list1;\n}","language":"php"}
{"task_id":"MBPHP\/242","completion":"    $str = str_split($str1);\n    $count = 0;\n    foreach ($str as $char) {\n        $count += strlen($char);\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/246","completion":"    $root = $number;\n    while ($root * $root > $number) {\n        $root = ($root + $number \/ $root) \/ 2;\n    }\n    return $root;\n}","language":"php"}
{"task_id":"MBPHP\/248","completion":"    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum += 1.0 \/ $i;\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/250","completion":"    $count = 0;\n    foreach ($tup as $key => $value) {\n        if ($value == $x) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/251","completion":"    $newList = [];\n    for ($i = 0; $i < count($list); $i++) {\n        $newList[] = $element;\n        $newList[] = $list[$i];\n    }\n    return $newList;\n}","language":"php"}
{"task_id":"MBPHP\/253","completion":"    $count = 0;\n    foreach ($list1 as $item) {\n        if (is_int($item)) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/257","completion":"    $a = $a + $b;\n    $b = $a - $b;\n    $a = $a - $b;\n    return [$a, $b];\n}","language":"php"}
{"task_id":"MBPHP\/261","completion":"    $result = array();\n    $testTup1 = array_map('intval', $testTup1);\n    $testTup2 = array_map('intval', $testTup2);\n    foreach ($testTup1 as $key => $value) {\n        $result[$key] = $value \/ $testTup2[$key];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/262","completion":"    $list2 = array();\n    $list2[] = array_slice($list1, 0, $l);\n    $list2[] = array_slice($list1, $l);\n    return $list2;\n}","language":"php"}
{"task_id":"MBPHP\/263","completion":"    $d3 = array_merge($d1, $d2);\n    return $d3;\n}","language":"php"}
{"task_id":"MBPHP\/269","completion":"    return ord($k);\n}","language":"php"}
{"task_id":"MBPHP\/270","completion":"    $sum = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] % 2 == 0 && $i % 2 == 0) {\n            $sum += $arr[$i];\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/272","completion":"    $result = array();\n    foreach ($testList as $key => $value) {\n        $result[] = $value[2];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/273","completion":"    $result = [];\n    $resultLength = count($testTup1);\n    for ($i = 0; $i < $resultLength; $i++) {\n        $result[$i] = $testTup1[$i] - $testTup2[$i];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/280","completion":"    $i = 0;\n    $found = false;\n    $found_index = 0;\n    while ($i < count($dlist) && $found == false) {\n        if ($dlist[$i] == $item) {\n            $found = true;\n            $found_index = $i;\n        }\n        $i++;\n    }\n    return [$found, $found_index];\n}","language":"php"}
{"task_id":"MBPHP\/283","completion":"    $digits = str_split($n);\n    $freq = array();\n    foreach ($digits as $digit) {\n        if (!isset($freq[$digit])) {\n            $freq[$digit] = 0;\n        }\n        $freq[$digit]++;\n    }\n    foreach ($freq as $digit) {\n        if ($freq[$digit] > 1) {\n            return false;\n        }\n    }\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/284","completion":"    $result = true;\n    foreach ($list as $key => $value) {\n        if ($value != $element) {\n            $result = false;\n            break;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/285","completion":"    if (preg_match('\/a.{2,3}b\/', $text)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/296","completion":"    $invCount = 0;\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $invCount++;\n            }\n        }\n    }\n    return $invCount;\n}","language":"php"}
{"task_id":"MBPHP\/297","completion":"    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flattenList($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}","language":"php"}
{"task_id":"MBPHP\/301","completion":"    $depth = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = max($depth, dictDepth($v));\n        }\n    }\n    return $depth + 1;\n}","language":"php"}
{"task_id":"MBPHP\/309","completion":"    return ($a > $b) ? $a : $b;\n}","language":"php"}
{"task_id":"MBPHP\/316","completion":"    $i = 0;\n    $j = 0;\n    $len = count($a);\n    $result = -1;\n    while ($i < $len && $j < $len) {\n        if ($a[$i] == $x) {\n            $result = $i;\n            $j = $i + 1;\n        }\n        $i++;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/320","completion":"    $sum = 0;\n    $sumOfSquares = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum += $i;\n        $sumOfSquares += $i * $i;\n    }\n    return $sum * $sum - $sumOfSquares;\n}","language":"php"}
{"task_id":"MBPHP\/327","completion":"    return ($x == $y || $y == $z || $x == $z);\n}","language":"php"}
{"task_id":"MBPHP\/329","completion":"    $count = 0;\n    foreach ($list as $value) {\n        if ($value < 0) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/332","completion":"    $charFrequency = array();\n    $str = str_split($str1);\n    foreach($str as $char) {\n        if (isset($charFrequency[$char])) {\n            $charFrequency[$char] = $charFrequency[$char] + 1;\n        } else {\n            $charFrequency[$char] = 1;\n        }\n    }\n    return $charFrequency;\n}","language":"php"}
{"task_id":"MBPHP\/334","completion":"    return ($a + $b > $c) && ($a + $c > $b) && ($b + $c > $a);\n}","language":"php"}
{"task_id":"MBPHP\/350","completion":"    $min = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strlen($s) - $i - 1 == 1) {\n            break;\n        }\n        $min++;\n    }\n    return $min;\n}","language":"php"}
{"task_id":"MBPHP\/351","completion":"    $count = 0;\n    $i = 0;\n    $j = 0;\n    $k = $k - 1;\n    $len = count($arr);\n    if ($k > $len) {\n        return false;\n    }\n    for ($i = 0; $i < $len; $i++) {\n        for ($j = 0; $j < $k; $j++) {\n            if ($arr[$i] == $arr[$j]) {\n                $count++;\n            }\n        }\n        if ($count == $k) {\n            return $arr[$i];\n        }\n        $count = 0;\n    }\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/356","completion":"    $c = 180 - ($a + $b);\n    return $c;\n}","language":"php"}
{"task_id":"MBPHP\/357","completion":"    $max = 0;\n    foreach ($testList as $item) {\n        foreach ($item as $subItem) {\n            if ($subItem > $max) {\n                $max = $subItem;\n            }\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/361","completion":"    $list2 = array();\n    foreach ($list1 as $list3) {\n        if (is_array($list3)) {\n            if (count($list3) > 0) {\n                $list2[] = $list3;\n            }\n        } else {\n            $list2[] = $list3;\n        }\n    }\n    return $list2;\n}","language":"php"}
{"task_id":"MBPHP\/364","completion":"    $n = strlen($str);\n    $flips = 0;\n    $i = 0;\n    while ($i < $n) {\n        if ($str[$i] == $str[$i + 1]) {\n            $flips++;\n            $i += 2;\n        } else {\n            $i++;\n        }\n    }\n    return $flips;\n}","language":"php"}
{"task_id":"MBPHP\/365","completion":"    $s = str_repeat('0', $n);\n    $s = str_replace($s, '', $n);\n    return strlen($s);\n}","language":"php"}
{"task_id":"MBPHP\/366","completion":"    $max = 0;\n    $min = 0;\n    $i = 0;\n    $j = 0;\n    $len = count($listNums);\n    for ($i = 0; $i < $len - 1; $i++) {\n        for ($j = $i + 1; $j < $len; $j++) {\n            $max = max($listNums[$i] * $listNums[$j], $max);\n            $min = min($listNums[$i] * $listNums[$j], $min);\n        }\n    }\n    return $max - $min;\n}","language":"php"}
{"task_id":"MBPHP\/368","completion":"    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $testTup;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/370","completion":"    $sorted = array_map('floatval', $price);\n    return sort($sorted);\n}","language":"php"}
{"task_id":"MBPHP\/373","completion":"    return $l * $w * $h;\n}","language":"php"}
{"task_id":"MBPHP\/375","completion":"    return floor($n \/ $m) * $m;\n}","language":"php"}
{"task_id":"MBPHP\/377","completion":"    $s = str_replace($c, '', $s);\n    return $s;\n}","language":"php"}
{"task_id":"MBPHP\/380","completion":"    $result = array();\n    for ($i = 0; $i < $rownum; $i++) {\n        $result[$i] = array();\n        for ($j = 0; $j < $colnum; $j++) {\n            $result[$i][$j] = $i * $j;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/384","completion":"    $min = min($arr);\n    $count = 0;\n    foreach ($arr as $val) {\n        if ($val == $min) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/388","completion":"    $power = 1;\n    $max = 1;\n    while ($power <= $n) {\n        $power *= 2;\n        if ($power <= $n) {\n            $max = $power;\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/395","completion":"    $str = str_split($str1);\n    $char = array();\n    $char_count = array();\n    for ($i = 0; $i < count($str); $i++) {\n        if ($char_count[$str[$i]] == 0) {\n            $char[] = $str[$i];\n            $char_count[$str[$i]] = 1;\n        } else {\n            $char_count[$str[$i]]++;\n        }\n    }\n    for ($i = 0; $i < count($char); $i++) {\n        if ($char_count[$char[$i]] == 1) {\n            return $char[$i];\n        }\n    }\n    return null;\n}","language":"php"}
{"task_id":"MBPHP\/399","completion":"    $result = [];\n    for ($i = 0; $i < count($testTup1); $i++) {\n        $result[$i] = $testTup1[$i] ^ $testTup2[$i];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/403","completion":"    return preg_match('\/^(https?:\\\/\\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\\/\\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})$\/', $str);\n}","language":"php"}
{"task_id":"MBPHP\/404","completion":"    return $a < $b ? $a : $b;\n}","language":"php"}
{"task_id":"MBPHP\/405","completion":"    $result = false;\n    foreach ($tuplex as $key => $value) {\n        if ($value == $tuple1) {\n            $result = true;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/406","completion":"    $even = \"Even Parity\";\n    $odd = \"Odd Parity\";\n    if ($x % 2 == 0) {\n        return $even;\n    } else {\n        return $odd;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/409","completion":"    $min = $list1[0][0] * $list1[0][1];\n    $min_index = 0;\n    for ($i = 0; $i < count($list1); $i++) {\n        for ($j = 0; $j < count($list1); $j++) {\n            if ($list1[$i][0] * $list1[$i][1] < $min) {\n                $min = $list1[$i][0] * $list1[$i][1];\n                $min_index = $i;\n            }\n        }\n    }\n    return $min;\n}","language":"php"}
{"task_id":"MBPHP\/410","completion":"    $min = $listval[0];\n    foreach ($listval as $val) {\n        if ($val < $min) {\n            $min = $val;\n        }\n    }\n    return $min;\n}","language":"php"}
{"task_id":"MBPHP\/413","completion":"    $result = [];\n    foreach ($list1 as $list2) {\n        $result[] = $list2[$n];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/414","completion":"    $result = false;\n    foreach ($list1 as $value1) {\n        foreach ($list2 as $value2) {\n            if ($value1 == $value2) {\n                $result = true;\n                break;\n            }\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/418","completion":"    $max = 0;\n    $max_sublist = [];\n    foreach ($lst as $item) {\n        if (count($item) > $max) {\n            $max = count($item);\n            $max_sublist = $item;\n        }\n    }\n    return $max_sublist;\n}","language":"php"}
{"task_id":"MBPHP\/419","completion":"    $sum = 0;\n    $length = count($list1);\n    foreach($list1 as $num) {\n        $num = round($num);\n        $sum += $num;\n    }\n    return $sum * $length;\n}","language":"php"}
{"task_id":"MBPHP\/422","completion":"    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum += $i * $i * $i;\n    }\n    return $sum \/ $n;\n}","language":"php"}
{"task_id":"MBPHP\/424","completion":"    $result = array();\n    foreach ($testTuple as $key => $value) {\n        $result[] = substr($value, -1);\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/425","completion":"    $count = 0;\n    foreach($list1 as $list2) {\n        if (count($list2) > 0) {\n            foreach($list2 as $sublist) {\n                if ($sublist == $x) {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/427","completion":"    $dt = preg_replace(\"\/(\\d{4})-(\\d{2})-(\\d{2})\/\", \"$3-$2-$1\", $dt);\n    return $dt;\n}","language":"php"}
{"task_id":"MBPHP\/429","completion":"    $result = [];\n    foreach ($testTup1 as $key1 => $value1) {\n        foreach ($testTup2 as $key2 => $value2) {\n            if ($key1 == $key2) {\n                $result[$key1] = $value1 & $value2;\n            }\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/431","completion":"    $set1 = array_unique($list1);\n    $set2 = array_unique($list2);\n    $common = array_intersect($set1, $set2);\n    if (count($common) > 0) {\n        return true;\n    } else {\n        return null;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/434","completion":"    if (preg_match(\"\/a(.*)b\/i\", $text)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/435","completion":"    return substr($n, -1);\n}","language":"php"}
{"task_id":"MBPHP\/436","completion":"    $list2 = array();\n    foreach ($list1 as $num) {\n        if ($num < 0) {\n            $list2[] = $num;\n        }\n    }\n    return $list2;\n}","language":"php"}
{"task_id":"MBPHP\/441","completion":"    $a = 6 * $l * $l;\n    return $a;\n}","language":"php"}
{"task_id":"MBPHP\/446","completion":"    $count = 0;\n    foreach ($tup as $val) {\n        if (in_array($val, $lst)) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/451","completion":"    return preg_replace(\"\/\\s+\/\", \"\", $text1);\n}","language":"php"}
{"task_id":"MBPHP\/452","completion":"    $loss = $saleAmount - $actualCost;\n    if ($loss < 0) {\n        return null;\n    } else {\n        return $loss;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/454","completion":"    $text = trim($text);\n    $text = str_replace(' ', '', $text);\n    $text = str_replace('.', '', $text);\n    $text = str_replace('-', '', $text);\n    $text = str_replace('_', '', $text);\n\n    $text = strtolower($text);\n\n    $text = preg_replace('\/z\/i', 'z', $text);\n\n    if (strpos($text, 'z') !== false) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/455","completion":"    $monthnum = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if ($monthnum2 > 12 || $monthnum2 < 1) {\n        return false;\n    }\n    return ($monthnum[$monthnum2] == 31);\n}","language":"php"}
{"task_id":"MBPHP\/456","completion":"    $result = [];\n    foreach ($stringlist as $string) {\n        $result[] = strrev($string);\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/457","completion":"    $min = 0;\n    $minLen = 0;\n    foreach ($lst as $i => $sub) {\n        if (count($sub) < $minLen) {\n            $min = $i;\n            $minLen = count($sub);\n        }\n    }\n    return $lst[$min];\n}","language":"php"}
{"task_id":"MBPHP\/458","completion":"    return $l * $b;\n}","language":"php"}
{"task_id":"MBPHP\/459","completion":"    $str = preg_replace(\"\/[A-Z]\/\", \"\", $str1);\n    return $str;\n}","language":"php"}
{"task_id":"MBPHP\/461","completion":"    $cnt = 0;\n    for ($i = 0; $i < strlen($str); $i++) {\n        if (strtolower($str[$i]) == 't') {\n            $cnt++;\n        }\n    }\n    return $cnt;\n}","language":"php"}
{"task_id":"MBPHP\/464","completion":"    $result = true;\n    foreach ($dict as $key => $value) {\n        if ($value != $n) {\n            $result = false;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/465","completion":"    $new_dict = array();\n    foreach ($dict1 as $key => $value) {\n        if ($value != null) {\n            $new_dict[$key] = $value;\n        }\n    }\n    return $new_dict;\n}","language":"php"}
{"task_id":"MBPHP\/466","completion":"    $i = 0;\n    $j = 0;\n    $max = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] > $arr[$max]) {\n            $max = $i;\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/470","completion":"    $result = [];\n    $i = 0;\n    $j = 0;\n    while ($i < count($testTup) - 1) {\n        $result[$i] = $testTup[$i] + $testTup[$i + 1];\n        $i++;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/472","completion":"    $prev = $l[0];\n    for ($i = 1; $i < count($l); $i++) {\n        if ($l[$i] != $prev + 1) {\n            return false;\n        }\n        $prev = $l[$i];\n    }\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/474","completion":"    $str1 = str_replace($ch, $newch, $str1);\n    return $str1;\n}","language":"php"}
{"task_id":"MBPHP\/475","completion":"    $sorted = array();\n    foreach ($dict1 as $key => $value) {\n        $sorted[$value] = array($key, $value);\n    }\n    return sort($sorted);\n}","language":"php"}
{"task_id":"MBPHP\/476","completion":"    $min = $nums[0];\n    $max = $nums[0];\n\n    foreach ($nums as $num) {\n        if ($num < $min) {\n            $min = $num;\n        }\n        if ($num > $max) {\n            $max = $num;\n        }\n    }\n\n    return $max + $min;\n}","language":"php"}
{"task_id":"MBPHP\/478","completion":"    $str2 = '';\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (strtolower(substr($str1, $i, 1)) != substr($str1, $i, 1)) {\n            $str2 .= substr($str1, $i, 1);\n        }\n    }\n    return $str2;\n}","language":"php"}
{"task_id":"MBPHP\/479","completion":"    $n = str_replace(' ', '', $n);\n    $n = str_replace('-', '', $n);\n    $n = str_replace('.', '', $n);\n    $n = str_replace('+', '', $n);\n    return substr($n, 0, 1);\n}","language":"php"}
{"task_id":"MBPHP\/480","completion":"    $max = 0;\n    $maxChar = \"\";\n    for ($i = 0; $i < strlen($str1); $i++) {\n        $count = 0;\n        for ($j = 0; $j < strlen($str1); $j++) {\n            if ($str1[$i] == $str1[$j]) {\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $maxChar = $str1[$i];\n        }\n    }\n    return $maxChar;\n}","language":"php"}
{"task_id":"MBPHP\/489","completion":"    $max = max($arr);\n    $count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] == $max) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/491","completion":"    $s = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $s += $a * $r ** $i;\n    }\n    return $s;\n}","language":"php"}
{"task_id":"MBPHP\/494","completion":"    $result = 0;\n    for ($i = 0; $i < count($testTup); $i++) {\n        $result = $result * 2 + $testTup[$i];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/495","completion":"    $str2 = preg_replace(\"\/[a-z]\/\", \"\", $str1);\n    return $str2;\n}","language":"php"}
{"task_id":"MBPHP\/498","completion":"    $gcd = 0;\n    $min = min($x, $y);\n    $max = max($x, $y);\n    if ($min == 0) {\n        return $max;\n    }\n    while ($min != 0) {\n        $gcd = $min;\n        $min = $max % $min;\n        $max = $gcd;\n    }\n    return $gcd;\n}","language":"php"}
{"task_id":"MBPHP\/499","completion":"    $diameter = 2 * $r;\n    return $diameter;\n}","language":"php"}
{"task_id":"MBPHP\/501","completion":"    $divisors = [];\n    for ($i = 1; $i <= $x && $i <= $y; $i++) {\n        if ($x % $i == 0 && $y % $i == 0) {\n            $divisors[] = $i;\n        }\n    }\n    return count($divisors);\n}","language":"php"}
{"task_id":"MBPHP\/502","completion":"    $result = $n % $m;\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/504","completion":"    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum += $i * $i * $i;\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/505","completion":"    $i = 0;\n    $j = 0;\n    $len = count($a);\n    for ($i = 0; $i < $len; $i++) {\n        if ($a[$i] != 0) {\n            $a[$j] = $a[$i];\n            $j++;\n        }\n    }\n    for ($i = $j; $i < $len; $i++) {\n        $a[$i] = 0;\n    }\n    return $a;\n}","language":"php"}
{"task_id":"MBPHP\/506","completion":"    $n = abs($n);\n    $k = abs($k);\n    $result = 1;\n    for ($i = 1; $i <= $k; $i++) {\n        $result *= $n - $i + 1;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/507","completion":"    $newList = array();\n    foreach($list1 as $key => $value) {\n        if(!in_array($value, $removewords)) {\n            $newList[] = $value;\n        }\n    }\n    return $newList;\n}","language":"php"}
{"task_id":"MBPHP\/509","completion":"    $sum = 0;\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 != 0) {\n            $sum += $i;\n            $count++;\n        }\n    }\n    return $sum \/ $count;\n}","language":"php"}
{"task_id":"MBPHP\/512","completion":"    $freq = array();\n    foreach ($testTuple as $el) {\n        if (is_array($el)) {\n            foreach ($el as $nestedEl) {\n                if (!is_array($nestedEl)) {\n                    $freq[$nestedEl] = $freq[$nestedEl] ? $freq[$nestedEl] + 1 : 1;\n                }\n            }\n        } else {\n            $freq[$el] = $freq[$el] ? $freq[$el] + 1 : 1;\n        }\n    }\n    return $freq;\n}","language":"php"}
{"task_id":"MBPHP\/514","completion":"    $sum = 0;\n    foreach ($testTup as $key => $value) {\n        $sum += $value;\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/517","completion":"    $largest = 0;\n    foreach ($list1 as $num) {\n        if ($num > 0 && $num > $largest) {\n            $largest = $num;\n        }\n    }\n    return $largest;\n}","language":"php"}
{"task_id":"MBPHP\/521","completion":"    return ($x + $y > $z) && ($x + $z > $y) && ($y + $z > $x);\n}","language":"php"}
{"task_id":"MBPHP\/527","completion":"    $count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] + $arr[$j] == $sum) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/532","completion":"    $str1 = str_split($str1);\n    $str2 = str_split($str2);\n\n    if (count($str1) != count($str2)) {\n        return false;\n    }\n\n    foreach ($str1 as $char) {\n        if (!in_array($char, $str2)) {\n            return false;\n        }\n    }\n\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/536","completion":"    $result = [];\n    for ($i = 0; $i < count($list); $i++) {\n        if ($i % $n == 0) {\n            $result[] = $list[$i];\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/541","completion":"    $sum = 0;\n    for ($i = 1; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            $sum += $i;\n        }\n    }\n    return $sum > $n;\n}","language":"php"}
{"task_id":"MBPHP\/542","completion":"    $text = preg_replace('\/\\s+|,+|\\.+\/', ':', $text);\n    return $text;\n}","language":"php"}
{"task_id":"MBPHP\/543","completion":"    $sum = $num1 + $num2;\n    $digits = strlen($sum);\n    return $digits;\n}","language":"php"}
{"task_id":"MBPHP\/544","completion":"    $result = \"\";\n    foreach ($testList as $tuple) {\n        foreach ($tuple as $value) {\n            if ($result == \"\") {\n                $result = $value;\n            } else {\n                $result = $result . \" \" . $value;\n            }\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/550","completion":"    $mid = ($low + $high) \/ 2;\n    if ($low < $high) {\n        if ($arr[$mid] > $arr[$mid + 1]) {\n            return findMax($arr, $low, $mid);\n        } else {\n            return findMax($arr, $mid + 1, $high);\n        }\n    } else {\n        return $arr[$mid];\n    }\n}","language":"php"}
{"task_id":"MBPHP\/551","completion":"    $result = [];\n    foreach ($list1 as $list2) {\n        $result[] = $list2[$n];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/552","completion":"    $seqLength = count($seqNums);\n    $seqSum = 0;\n    $seqMin = $seqNums[0];\n    $seqMax = $seqNums[$seqLength - 1];\n\n    for ($i = 0; $i < $seqLength; $i++) {\n        $seqSum += $seqNums[$i];\n    }\n\n    if ($seqSum == $seqLength * ( $seqMin + $seqMax ) \/ 2) {\n        return \"Linear Sequence\";\n    } else {\n        return \"Non Linear Sequence\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/554","completion":"    $result = array();\n    foreach ($list as $item) {\n        if ($item % 2 == 1) {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/559","completion":"    $max = 0;\n    $sum = 0;\n    for ($i = 0; $i < $size; $i++) {\n        $sum += $a[$i];\n        if ($sum > $max) {\n            $max = $sum;\n        }\n        if ($sum < 0) {\n            $sum = 0;\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/562","completion":"    $max = 0;\n    foreach ($lst as $item) {\n        $len = count($item);\n        if ($len > $max) {\n            $max = $len;\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/564","completion":"    $count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] != $arr[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/565","completion":"    $result = array();\n    for ($i = 0; $i < strlen($word); $i++) {\n        $result[] = substr($word, $i, 1);\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/566","completion":"    $sum = 0;\n    while ($n > 0) {\n        $sum = $sum + $n % 10;\n        $n = $n \/ 10;\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/567","completion":"    $list2 = array_merge(array_fill(0, 0, count($list1)-1), $list1);\n    $list3 = array_fill(0, 0, count($list2)-1);\n    $list4 = array_fill(0, 0, count($list3)-1);\n    for ($i = 0; $i < count($list2)-1; $i++) {\n        if ($list2[$i] > $list2[$i+1]) {\n            return false;\n        }\n    }\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/568","completion":"    $result = array();\n    for ($i = 0; $i < $length; $i++) {\n        $result[] = array();\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/569","completion":"    $result = [];\n    foreach($list1 as $list) {\n        $result[] = sort($list);\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/573","completion":"    $unique = array_unique($listData);\n    $uniqueCount = count($unique);\n    $product = 1;\n    foreach ($unique as $uniqueValue) {\n        $product *= $uniqueValue;\n    }\n    return $product;\n}","language":"php"}
{"task_id":"MBPHP\/576","completion":"    $a = (array) $a;\n    $b = (array) $b;\n    $n = (int) $n;\n    $m = (int) $m;\n    if (count($a) < $n || count($b) < $m) {\n        return false;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        if ($a[$i] != $b[$i]) {\n            return false;\n        }\n    }\n    for ($i = $n; $i < $n + $m; $i++) {\n        if ($a[$i] != 0) {\n            return false;\n        }\n    }\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/577","completion":"    $n = abs($n);\n    $lastDigit = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $lastDigit = $i % 10;\n        if ($lastDigit == 0) {\n            break;\n        }\n    }\n    return $lastDigit;\n}","language":"php"}
{"task_id":"MBPHP\/580","completion":"    $evenElements = array();\n    foreach ($testTuple as $element) {\n        if (is_array($element)) {\n            $evenElements[] = extractEven($element);\n        } else if (is_numeric($element)) {\n            if ($element % 2 == 0) {\n                $evenElements[] = $element;\n            }\n        }\n    }\n    return $evenElements;\n}","language":"php"}
{"task_id":"MBPHP\/587","completion":"    $list = array_map('intval', $listx);\n    return $list;\n}","language":"php"}
{"task_id":"MBPHP\/588","completion":"    $min = min($nums);\n    $max = max($nums);\n    return $max - $min;\n}","language":"php"}
{"task_id":"MBPHP\/591","completion":"    $first = $newlist[0];\n    $last = $newlist[count($newlist) - 1];\n    $newlist[0] = $last;\n    $newlist[count($newlist) - 1] = $first;\n    return $newlist;\n}","language":"php"}
{"task_id":"MBPHP\/599","completion":"    $sum = 0;\n    $count = 0;\n    for ($i = 1; $i <= $number; $i++) {\n        $sum += $i;\n        $count++;\n    }\n    return [$sum, $sum \/ $count];\n}","language":"php"}
{"task_id":"MBPHP\/600","completion":"    $n = (int)$n;\n    return $n % 2 == 0;\n}","language":"php"}
{"task_id":"MBPHP\/602","completion":"    $str = str_split($str1);\n    $str2 = array();\n    foreach ($str as $key => $value) {\n        if (in_array($value, $str2)) {\n            return $value;\n        }\n        $str2[] = $value;\n    }\n    return \"None\";\n}","language":"php"}
{"task_id":"MBPHP\/604","completion":"    $words = explode(\" \", $s);\n    $reversed = array_reverse($words);\n    return implode(\" \", $reversed);\n}","language":"php"}
{"task_id":"MBPHP\/605","completion":"    $num = abs($num);\n    if ($num == 1) {\n        return false;\n    }\n    for ($i = 2; $i <= $num \/ 2; $i++) {\n        if ($num % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/606","completion":"    return $degree * (3.14159265358979323846 \/ 180);\n}","language":"php"}
{"task_id":"MBPHP\/610","completion":"    $list2 = array();\n    $i = 0;\n    for ($i = 0; $i < count($list1); $i++) {\n        if ($i != $l - 1) {\n            $list2[] = $list1[$i];\n        }\n    }\n    return $list2;\n}","language":"php"}
{"task_id":"MBPHP\/611","completion":"    $max = 0;\n    foreach ($testList as $row) {\n        $max = max($max, $row[$n]);\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/614","completion":"    $sum = 0;\n    foreach ($testList as $test) {\n        foreach ($test as $value) {\n            $sum += $value;\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/616","completion":"    $result = array();\n    $i = 0;\n    foreach ($testTup1 as $testTup1Item) {\n        $result[$i] = $testTup1Item % $testTup2[$i];\n        $i++;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/624","completion":"    return strtoupper($string);\n}","language":"php"}
{"task_id":"MBPHP\/625","completion":"    $first = $newlist[0];\n    $last = $newlist[count($newlist) - 1];\n    $newlist[0] = $last;\n    $newlist[count($newlist) - 1] = $first;\n    return $newlist;\n}","language":"php"}
{"task_id":"MBPHP\/627","completion":"    $min = min($start, $end);\n    $max = max($start, $end);\n    $missing = $min;\n    $i = $min;\n    while ($i <= $max) {\n        if ($array[$i] == $missing) {\n            $missing++;\n        } else {\n            break;\n        }\n        $i++;\n    }\n    return $missing;\n}","language":"php"}
{"task_id":"MBPHP\/628","completion":"    $string = str_replace(' ', '%20', $string);\n    return $string;\n}","language":"php"}
{"task_id":"MBPHP\/629","completion":"    $even = [];\n    foreach ($list as $item) {\n        if ($item % 2 == 0) {\n            $even[] = $item;\n        }\n    }\n    return $even;\n}","language":"php"}
{"task_id":"MBPHP\/630","completion":"    $result = [];\n    $x = $testTup[0];\n    $y = $testTup[1];\n    for ($i = $x - 1; $i <= $x + 1; $i++) {\n        for ($j = $y - 1; $j <= $y + 1; $j++) {\n            if ($i >= 0 && $i < 10 && $j >= 0 && $j < 10) {\n                $result[] = [$i, $j];\n            }\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/631","completion":"    return preg_replace(\"\/\\s+\/\", \"_\", $text);\n}","language":"php"}
{"task_id":"MBPHP\/633","completion":"    $sum = 0;\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for ($j = $i + 1; $j < $len; $j++) {\n            if ($arr[$i] ^ $arr[$j] == $n) {\n                $sum += $arr[$i] ^ $arr[$j];\n            }\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/637","completion":"    $profit = $saleAmount - $actualCost;\n    $loss = $actualCost - $saleAmount;\n    return ($profit == 0 && $loss == 0);\n}","language":"php"}
{"task_id":"MBPHP\/639","completion":"    $sum = 0;\n    foreach ($sampleNames as $name) {\n        if (!preg_match(\"\/^[a-z]\/\", $name)) {\n            $sum += strlen($name);\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/645","completion":"    $product = 1;\n    foreach ($testList as $list) {\n        $product *= $list[$k];\n    }\n    return $product;\n}","language":"php"}
{"task_id":"MBPHP\/649","completion":"    $sum = 0;\n    for ($i = $m; $i <= $n; $i++) {\n        $sum += $nums[$i];\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/650","completion":"    $arr1 = array_slice($arr1, 0, $n);\n    $arr2 = array_slice($arr2, 0, $m);\n\n    if (count($arr1) != count($arr2)) {\n        return false;\n    }\n\n    foreach ($arr1 as $i => $v1) {\n        if (!in_array($v1, $arr2)) {\n            return false;\n        }\n    }\n\n    foreach ($arr2 as $i => $v2) {\n        if (!in_array($v2, $arr1)) {\n            return false;\n        }\n    }\n\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/651","completion":"    $testTup1 = array_filter($testTup1);\n    $testTup2 = array_filter($testTup2);\n\n    foreach ($testTup1 as $key1 => $value1) {\n        if (in_array($value1, $testTup2)) {\n            return true;\n        }\n    }\n\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/654","completion":"    return $l * 2 + $b * 2;\n}","language":"php"}
{"task_id":"MBPHP\/655","completion":"    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum += $i ** 5;\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/658","completion":"    $max = 0;\n    $maxOccurrence = 0;\n    foreach ($list1 as $item) {\n        if ($item == $maxOccurrence) {\n            $max += 1;\n        } else if ($item > $maxOccurrence) {\n            $max = 1;\n            $maxOccurrence = $item;\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/660","completion":"    $result = array();\n    $min = min($l1, $l2);\n    $max = max($r1, $r2);\n    $result[] = $min;\n    $result[] = $max;\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/662","completion":"    $dict2 = array_map('array_values', $dict1);\n    $dict3 = array_map('sort', $dict2);\n    return $dict3;\n}","language":"php"}
{"task_id":"MBPHP\/663","completion":"    $max = $n;\n    for ($i = $n; $i > 0; $i--) {\n        if ($i % $x == $y) {\n            $max = $i;\n            break;\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/664","completion":"    $sum = 0;\n    $count = 0;\n    $even = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $sum += $i;\n            $count++;\n        }\n    }\n    $even = $sum \/ $count;\n    return $even;\n}","language":"php"}
{"task_id":"MBPHP\/665","completion":"    $first = $numList[0];\n    $numList = array_slice($numList, 1);\n    $numList[] = $first;\n    return $numList;\n}","language":"php"}
{"task_id":"MBPHP\/666","completion":"    $count = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == $char) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/669","completion":"    $ip = preg_replace(\"\/^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$\/\", \"$1.$2.$3.$4\", $ip);\n    return $ip === $ip;\n}","language":"php"}
{"task_id":"MBPHP\/670","completion":"    $prev = $nums[0];\n    for ($i = 1; $i < count($nums); $i++) {\n        if ($nums[$i] < $prev) {\n            return false;\n        }\n        $prev = $nums[$i];\n    }\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/672","completion":"    return max($num1, $num2, $num3);\n}","language":"php"}
{"task_id":"MBPHP\/673","completion":"    $sum = 0;\n    foreach ($list as $value) {\n        $sum = $sum * 10 + $value;\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/674","completion":"    $words = explode(' ', $string);\n    $unique = array_unique($words);\n    return implode(' ', $unique);\n}","language":"php"}
{"task_id":"MBPHP\/675","completion":"    if ($x + $y >= $m && $x + $y <= $n) {\n        return 20;\n    } else {\n        return $x + $y;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/676","completion":"    $text = preg_replace(\"\/[^a-zA-Z0-9]\/\", \"\", $text1);\n    return $text;\n}","language":"php"}
{"task_id":"MBPHP\/677","completion":"    $sum = $a + $b + $c;\n    if ($sum == 180) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/678","completion":"    $str = str_replace(' ', '', $str1);\n    return $str;\n}","language":"php"}
{"task_id":"MBPHP\/679","completion":"    $keys = array_keys($ditionary);\n    return $keys[$key];\n}","language":"php"}
{"task_id":"MBPHP\/680","completion":"    $prev = $nums[0];\n    for ($i = 1; $i < count($nums); $i++) {\n        if ($nums[$i] > $prev) {\n            return true;\n        }\n        $prev = $nums[$i];\n    }\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/681","completion":"    $i = 2;\n    while ($i <= $n \/ $i) {\n        if ($n % $i == 0) {\n            return $i;\n        }\n        $i++;\n    }\n    return $n;\n}","language":"php"}
{"task_id":"MBPHP\/687","completion":"    if ($a == 0 || $b == 0) {\n        return 0;\n    }\n    if ($a == $b) {\n        return $a;\n    }\n    if ($a > $b) {\n        return recurGcd($a - $b, $b);\n    }\n    return recurGcd($a, $b - $a);\n}","language":"php"}
{"task_id":"MBPHP\/690","completion":"    $result = [];\n    for ($i = 0; $i < count($nums) - 1; $i++) {\n        $result[] = $nums[$i] * $nums[$i + 1];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/691","completion":"    $result = [];\n    foreach ($testList as $tuple) {\n        $result[$tuple[1]] = $result[$tuple[1]] ? $result[$tuple[1]] : [];\n        $result[$tuple[1]][] = $tuple[0];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/693","completion":"    $text = preg_replace('\/\\s+\/', ' ', $text1);\n    return $text;\n}","language":"php"}
{"task_id":"MBPHP\/695","completion":"    $result = true;\n    foreach ($testTup1 as $index => $value1) {\n        if ($value1 > $testTup2[$index]) {\n            $result = false;\n            break;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/696","completion":"    $result = array();\n    $i = 0;\n    foreach ($list1 as $list1_item) {\n        $result[$i] = array_merge($list1_item, $list2[$i]);\n        $i++;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/697","completion":"    $count = 0;\n    foreach ($arrayNums as $num) {\n        if ($num % 2 == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/700","completion":"    $count = 0;\n    foreach ($li as $value) {\n        if ($value >= $min && $value <= $max) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/703","completion":"    return (isset($d[$x])) ? true : false;\n}","language":"php"}
{"task_id":"MBPHP\/704","completion":"    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum += 1.0 \/ $i;\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/705","completion":"    $result = [];\n    foreach($list1 as $sublist) {\n        $result[] = sort($sublist);\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/706","completion":"    $arr1 = array_filter($arr1);\n    $arr2 = array_filter($arr2);\n    $arr1 = array_unique($arr1);\n    $arr2 = array_unique($arr2);\n    if (count($arr1) < count($arr2)) {\n        return false;\n    }\n    for ($i = 0; $i < count($arr2); $i++) {\n        if ($arr2[$i] == $arr1[$i]) {\n            continue;\n        }\n        for ($j = 0; $j < count($arr1); $j++) {\n            if ($arr2[$i] == $arr1[$j]) {\n                break;\n            }\n            if ($j == count($arr1) - 1) {\n                return false;\n            }\n        }\n    }\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/708","completion":"    $result = array();\n    $words = explode(\" \", $string);\n    foreach ($words as $word) {\n        $result[] = $word;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/713","completion":"    $valid = true;\n    foreach ($testTup as $test) {\n        if (is_bool($test) && $test == false) {\n            $valid = false;\n            break;\n        }\n    }\n    return $valid;\n}","language":"php"}
{"task_id":"MBPHP\/715","completion":"    $testStr = explode(\",\", $testStr);\n    $testStr = array_map(function($item) {\n        return (int) $item;\n    }, $testStr);\n    return $testStr;\n}","language":"php"}
{"task_id":"MBPHP\/718","completion":"    $result = [];\n    for ($i = 0; $i < count($list1); $i += 2) {\n        $result[] = $list1[$i];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/723","completion":"    $map = array_map('intval', $nums1);\n    $map2 = array_map('intval', $nums2);\n    $count = 0;\n    foreach ($map as $key => $value) {\n        if ($map2[$key] == $value) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/727","completion":"    return preg_replace(\"\/[^a-zA-Z0-9]\/\", \"\", $s);\n}","language":"php"}
{"task_id":"MBPHP\/728","completion":"    $result = array();\n    $i = 0;\n    $j = 0;\n    while ($i < count($lst1) && $j < count($lst2)) {\n        $result[$i] += $lst1[$i] + $lst2[$j];\n        $i++;\n        $j++;\n    }\n    if ($i < count($lst1)) {\n        $result = array_merge($result, array_slice($lst1, $i));\n    } else if ($j < count($lst2)) {\n        $result = array_merge($result, array_slice($lst2, $j));\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/730","completion":"    $newNums = array();\n    $i = 0;\n    $j = 0;\n    $len = count($nums);\n    for ($i = 0; $i < $len; $i++) {\n        if ($nums[$i] != $nums[$i + 1]) {\n            $newNums[$j] = $nums[$i];\n            $j++;\n        }\n    }\n    return $newNums;\n}","language":"php"}
{"task_id":"MBPHP\/732","completion":"    $text = str_replace(' ', ':', $text);\n    $text = str_replace(',', ':', $text);\n    $text = str_replace('.', ':', $text);\n    return $text;\n}","language":"php"}
{"task_id":"MBPHP\/733","completion":"    $i = 0;\n    $j = 0;\n    $len = count($a);\n    $found = false;\n    while ($i < $len && $j < $len) {\n        if ($a[$i] == $x) {\n            $found = true;\n            break;\n        }\n        $i++;\n        $j++;\n    }\n    if ($found) {\n        return $i;\n    }\n    return -1;\n}","language":"php"}
{"task_id":"MBPHP\/736","completion":"    $i = 0;\n    $j = 0;\n    $k = 0;\n    $n = count($a);\n    while ($j < $n) {\n        $i = $j;\n        $j = $j + 1;\n        $k = $i + 1;\n        if ($a[$k] > $x) {\n            break;\n        }\n    }\n    return $k;\n}","language":"php"}
{"task_id":"MBPHP\/737","completion":"    $regex = \"\/^[aeiou]\/i\";\n    if (preg_match($regex, $string)) {\n        return \"Valid\";\n    } else {\n        return \"Invalid\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/744","completion":"    $none = false;\n    foreach ($testTup as $key => $value) {\n        if ($value == null) {\n            $none = true;\n            break;\n        }\n    }\n    return $none;\n}","language":"php"}
{"task_id":"MBPHP\/750","completion":"    $testList = array_merge($testList, $testTup);\n    return $testList;\n}","language":"php"}
{"task_id":"MBPHP\/759","completion":"    return preg_match(\"\/^[+-]?\\d+(\\.\\d{1,2})?$\/\", $num);\n}","language":"php"}
{"task_id":"MBPHP\/763","completion":"    $minDiff = $n;\n    $i = 0;\n    $j = 0;\n    $diff = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            $diff = abs($arr[$i] - $arr[$j]);\n            if ($minDiff > $diff) {\n                $minDiff = $diff;\n            }\n        }\n    }\n    return $minDiff;\n}","language":"php"}
{"task_id":"MBPHP\/766","completion":"    $result = [];\n    $i = 0;\n    $j = 0;\n    while ($i < count($l1) - 1) {\n        $result[] = [$l1[$i], $l1[$i + 1]];\n        $i++;\n        $j++;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/767","completion":"    $count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] + $arr[$j] == $sum) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/768","completion":"    return $x % 2 == 1;\n}","language":"php"}
{"task_id":"MBPHP\/774","completion":"    $regex = '\/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\/';\n    if (preg_match($regex, $email)) {\n        return \"Valid Email\";\n    } else {\n        return \"Invalid Email\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/775","completion":"    $result = true;\n    for ($i = 0; $i < count($nums) - 1; $i += 2) {\n        if ($nums[$i] % 2 != 0) {\n            $result = false;\n            break;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/777","completion":"    $sum = 0;\n    $hash = array_count_values($arr);\n    foreach ($hash as $key => $value) {\n        if ($value != $n) {\n            $sum += $key;\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/781","completion":"    $divisors = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $divisors++;\n        }\n    }\n    if ($divisors % 2 == 0) {\n        return \"Even\";\n    } else {\n        return \"Odd\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/785","completion":"    $testStr = preg_replace('\/\\s+\/', '', $testStr);\n    $testStr = preg_replace('\/\\(|\\)\/', '', $testStr);\n    $testStr = preg_replace('\/,\/', ' ', $testStr);\n    $testStr = preg_replace('\/\\s+\/', ' ', $testStr);\n    $testStr = trim($testStr);\n    $testStr = str_replace(' ', ',', $testStr);\n    $testStr = explode(',', $testStr);\n    $testStr = array_map('intval', $testStr);\n    return $testStr;\n}","language":"php"}
{"task_id":"MBPHP\/786","completion":"    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = count($a);\n    while ($i < $l) {\n        $j = $i + 1;\n        while ($j < $l) {\n            $k = $j + 1;\n            if ($a[$i] < $a[$j]) {\n                break;\n            }\n            $j = $k;\n        }\n        if ($a[$i] >= $x) {\n            break;\n        }\n        $i = $k;\n    }\n    return $i;\n}","language":"php"}
{"task_id":"MBPHP\/787","completion":"    if (preg_match('\/a(b{3})\/', $text)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/788","completion":"    $newTuple = array();\n    foreach ($testList as $testItem) {\n        $newTuple[] = $testItem;\n    }\n    $newTuple[] = $testStr;\n    return $newTuple;\n}","language":"php"}
{"task_id":"MBPHP\/789","completion":"    $perimeter = $s * $l;\n    return $perimeter;\n}","language":"php"}
{"task_id":"MBPHP\/790","completion":"    $result = true;\n    for ($i = 0; $i < count($nums) - 1; $i += 2) {\n        if ($nums[$i] % 2 != 0) {\n            $result = false;\n            break;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/792","completion":"    $count = 0;\n    foreach ($inputList as $list) {\n        if (count($list) > 0) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/794","completion":"    if (preg_match(\"\/^a.*b$\/\", $text)) {\n        return \"Found a match!\";\n    }\n    return \"Not matched!\";\n}","language":"php"}
{"task_id":"MBPHP\/796","completion":"    $sum = 0;\n    foreach ($dict as $key => $value) {\n        $sum += $value;\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/797","completion":"    $sum = 0;\n    for ($i = $l; $i <= $r; $i++) {\n        if ($i % 2 != 0) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/798","completion":"    $sum = 0;\n    foreach ($arr as $num) {\n        $sum += $num;\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/799","completion":"    $d = (int) $d % 32;\n    $n = (int) $n << $d | ($n & 0xffffffff) >> 32 - $d;\n    return $n;\n}","language":"php"}
{"task_id":"MBPHP\/800","completion":"    $text = trim($text);\n    $text = str_replace(' ', '', $text);\n    return $text;\n}","language":"php"}
{"task_id":"MBPHP\/803","completion":"    $i = 1;\n    while ($i * $i < $n) {\n        $i++;\n    }\n    if ($i * $i == $n) {\n        return true;\n    }\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/804","completion":"    $product = 1;\n    foreach ($arr as $value) {\n        $product *= $value;\n    }\n    return $product % 2 == 0;\n}","language":"php"}
{"task_id":"MBPHP\/805","completion":"    $maxSum = 0;\n    $maxSumList = [];\n    foreach ($lists as $list) {\n        $sum = 0;\n        foreach ($list as $value) {\n            $sum += $value;\n        }\n        if ($sum > $maxSum) {\n            $maxSum = $sum;\n            $maxSumList = $list;\n        }\n    }\n    return $maxSumList;\n}","language":"php"}
{"task_id":"MBPHP\/807","completion":"    $result = 0;\n    foreach ($nums as $num) {\n        if ($num % 2 == 1) {\n            $result = $num;\n            break;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/808","completion":"    $testTup = array_filter($testTup);\n    return in_array($k, $testTup);\n}","language":"php"}
{"task_id":"MBPHP\/809","completion":"    $testTup1 = array_map('intval', $testTup1);\n    $testTup2 = array_map('intval', $testTup2);\n\n    foreach ($testTup2 as $index => $value) {\n        if ($testTup1[$index] > $value) {\n            return true;\n        }\n    }\n\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/811","completion":"    $testList1 = array_map(function($item) {\n        return array_map(function($item2) {\n            return $item . $item2;\n        }, $item);\n    }, $testList1);\n    $testList2 = array_map(function($item) {\n        return array_map(function($item2) {\n            return $item . $item2;\n        }, $item);\n    }, $testList2);\n    return $testList1 === $testList2;\n}","language":"php"}
{"task_id":"MBPHP\/812","completion":"    $street = str_replace(' Road', ' Rd.', $street);\n    return $street;\n}","language":"php"}
{"task_id":"MBPHP\/813","completion":"    $str = strlen($str1);\n    return $str;\n}","language":"php"}
{"task_id":"MBPHP\/820","completion":"    $monthnum = $monthnum1 * 1;\n    $days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if ($monthnum > 12 || $monthnum < 1) {\n        return false;\n    } else {\n        return ($days[$monthnum - 1] == 28);\n    }\n}","language":"php"}
{"task_id":"MBPHP\/821","completion":"    $dict3 = array_merge($dict1, $dict2);\n    return $dict3;\n}","language":"php"}
{"task_id":"MBPHP\/823","completion":"    if (preg_match(\"\/^$sample\/\", $string, $match)) {\n        return \"string starts with the given substring\";\n    } else {\n        return \"string doesnt start with the given substring\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/824","completion":"    $result = [];\n    foreach($l as $value) {\n        if ($value % 2 != 0) {\n            $result[] = $value;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/825","completion":"    $result = [];\n    for ($i = 0; $i < count($listIndex); $i++) {\n        $result[] = $nums[$listIndex[$i]];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/827","completion":"    $sum = 0;\n    foreach ($list1 as $row) {\n        $sum += $row[$c];\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/828","completion":"    $alpha = strlen(preg_replace(\"\/[^a-zA-Z]\/\", \"\", $string));\n    $dig = strlen(preg_replace(\"\/[^0-9]\/\", \"\", $string));\n    $spl = strlen(preg_replace(\"\/[^!@#$%^&*]\/\", \"\", $string));\n    return array($alpha, $dig, $spl);\n}","language":"php"}
{"task_id":"MBPHP\/829","completion":"    $frequent = array();\n    $frequentCount = array();\n    $maxCount = 0;\n    $maxString = \"\";\n    foreach ($input as $string) {\n        if (in_array($string, $frequent)) {\n            if ($frequentCount[$string] > $maxCount) {\n                $maxCount = $frequentCount[$string];\n                $maxString = $string;\n            }\n        } else {\n            $frequentCount[$string] = 1;\n            $frequent[$string] = $string;\n        }\n    }\n    return $maxString;\n}","language":"php"}
{"task_id":"MBPHP\/830","completion":"    $a = $a * 10 ** $digits;\n    return ceil($a) \/ 10 ** $digits;\n}","language":"php"}
{"task_id":"MBPHP\/831","completion":"    $count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] == $arr[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/832","completion":"    $max = 0;\n    $numbers = preg_split('\/\\D+\/', $input);\n    foreach ($numbers as $number) {\n        if (intval($number) > $max) {\n            $max = intval($number);\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/833","completion":"    $keys = array();\n    foreach ($dict as $key => $value) {\n        $keys[] = $key;\n    }\n    return $keys;\n}","language":"php"}
{"task_id":"MBPHP\/835","completion":"    return ($y2 - $y1) \/ ($x2 - $x1);\n}","language":"php"}
{"task_id":"MBPHP\/839","completion":"    $sorted = array();\n    foreach ($tup as $key => $value) {\n        $sorted[$key] = $value;\n    }\n    sort($sorted);\n    return $sorted;\n}","language":"php"}
{"task_id":"MBPHP\/841","completion":"    $count = 0;\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/842","completion":"    $arrSize = $arrSize + 1;\n    $count = 0;\n    $oddOccurence = 0;\n    for ($i = 0; $i < $arrSize; $i++) {\n        if ($arr[$i] % 2 == 1) {\n            $count++;\n            if ($count % 2 == 1) {\n                $oddOccurence = $arr[$i];\n            }\n        }\n    }\n    return $oddOccurence;\n}","language":"php"}
{"task_id":"MBPHP\/847","completion":"    $l = array();\n    foreach ($xs as $x) {\n        $l[] = $x;\n    }\n    return $l;\n}","language":"php"}
{"task_id":"MBPHP\/848","completion":"    $area = ($base1 + $base2) * $height \/ 2;\n    return $area;\n}","language":"php"}
{"task_id":"MBPHP\/852","completion":"    $newList = array();\n    foreach ($numList as $num) {\n        if ($num >= 0) {\n            $newList[] = $num;\n        }\n    }\n    return $newList;\n}","language":"php"}
{"task_id":"MBPHP\/853","completion":"    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            if ($i % 2 == 1) {\n                $sum += $i;\n            }\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/855","completion":"    return $x % 2 == 0;\n}","language":"php"}
{"task_id":"MBPHP\/856","completion":"    $minSwaps = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $temp = 0;\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = 0; $j < $n - 1; $j++) {\n            if ($arr[$j] > $arr[$j + 1]) {\n                $temp = $arr[$j];\n                $arr[$j] = $arr[$j + 1];\n                $arr[$j + 1] = $temp;\n                $minSwaps++;\n            }\n        }\n    }\n    return $minSwaps;\n}","language":"php"}
{"task_id":"MBPHP\/860","completion":"    $pattern = \"\/^[a-zA-Z0-9]*$\/\";\n    if (preg_match($pattern, $string)) {\n        return \"Accept\";\n    } else {\n        return \"Discard\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/866","completion":"    $monthname = $monthname2;\n    $days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    $result = false;\n    for ($i = 0; $i < count($days); $i++) {\n        if ($monthname == \"February\") {\n            if ($days[$i] == 29) {\n                $result = true;\n            }\n        } else {\n            if ($days[$i] == 30) {\n                $result = true;\n            }\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/869","completion":"    $list2 = array();\n    foreach ($list1 as $list) {\n        if ($list[0] >= $leftrange && $list[0] <= $rigthrange) {\n            $list2[] = $list;\n        }\n    }\n    return $list2;\n}","language":"php"}
{"task_id":"MBPHP\/870","completion":"    $sum = 0;\n    foreach ($nums as $num) {\n        if ($num > 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/873","completion":"    if ($n <= 1) {\n        return $n;\n    }\n    return fibonacci($n - 1) + fibonacci($n - 2);\n}","language":"php"}
{"task_id":"MBPHP\/878","completion":"    $result = true;\n    $kLength = count($k);\n    foreach ($k as $key => $value) {\n        if (!in_array($value, $testTuple)) {\n            $result = false;\n            break;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/883","completion":"    $divs = [];\n    $i = 0;\n    foreach ($nums as $num) {\n        if ($num % $m == 0 && $num % $n == 0) {\n            $divs[$i] = $num;\n            $i++;\n        }\n    }\n    return $divs;\n}","language":"php"}
{"task_id":"MBPHP\/884","completion":"    $n = (2 ** $l) * $n;\n    $n = $n % (2 ** $r);\n    return $n == 0;\n}","language":"php"}
{"task_id":"MBPHP\/886","completion":"    $sum = 0;\n    foreach ($numbers as $number) {\n        $sum += $number;\n    }\n    return $sum \/ count($numbers);\n}","language":"php"}
{"task_id":"MBPHP\/887","completion":"    return ($n & 1) == 1;\n}","language":"php"}
{"task_id":"MBPHP\/888","completion":"    $result = [];\n    foreach ($testTup1 as $key1 => $val1) {\n        $result[$key1] = [];\n        foreach ($val1 as $key2 => $val2) {\n            $result[$key1][$key2] = $val2 - $testTup2[$key1][$key2];\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/889","completion":"    $result = [];\n    foreach ($lists as $list) {\n        $result[] = array_reverse($list);\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/890","completion":"    $i = 0;\n    for ($i = 0; $i < count($arr1) && $i < count($arr2); $i++) {\n        if ($arr1[$i] != $arr2[$i]) {\n            break;\n        }\n    }\n    return $i;\n}","language":"php"}
{"task_id":"MBPHP\/891","completion":"    return strlen($a) == strlen($b);\n}","language":"php"}
{"task_id":"MBPHP\/892","completion":"    return preg_replace(\"\/\\s+\/\", \" \", $text);\n}","language":"php"}
{"task_id":"MBPHP\/894","completion":"    $testStr = explode(\",\", $testStr);\n    $testStr = array_map(function($item) {\n        return floatval($item);\n    }, $testStr);\n    return $testStr;\n}","language":"php"}
{"task_id":"MBPHP\/897","completion":"    return strpos($sentence, $word) !== false;\n}","language":"php"}
{"task_id":"MBPHP\/900","completion":"    $num = 5;\n    return strpos($string, $num) === 0;\n}","language":"php"}
{"task_id":"MBPHP\/902","completion":"    $d3 = array();\n    foreach ($d1 as $k => $v1) {\n        $d3[$k] = $v1;\n    }\n    foreach ($d2 as $k => $v2) {\n        $d3[$k] += $v2;\n    }\n    return $d3;\n}","language":"php"}
{"task_id":"MBPHP\/904","completion":"    return $x % 2 == 0;\n}","language":"php"}
{"task_id":"MBPHP\/907","completion":"    $lucky = [1, 3, 7, 9, 13, 15, 21, 25, 31, 33];\n    $lucky = array_slice($lucky, 0, $n);\n    return $lucky;\n}","language":"php"}
{"task_id":"MBPHP\/913","completion":"    $num = $string;\n    if (substr($num, strlen($num) - 1) == \"7\") {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/917","completion":"    $result = \"Not matched!\";\n    if (preg_match(\"\/[A-Z][a-z]\/\", $text)) {\n        $result = \"Found a match!\";\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/919","completion":"    $total = 1;\n    foreach ($items as $item) {\n        $total *= $item;\n    }\n    return $total;\n}","language":"php"}
{"task_id":"MBPHP\/921","completion":"    $result = [];\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    while ($i < count($testTup)) {\n        $result[$k] = [];\n        $j = 0;\n        while ($j < $n && $i < count($testTup)) {\n            $result[$k][$j] = $testTup[$i];\n            $i++;\n            $j++;\n        }\n        $k++;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/924","completion":"    return ($x > $y) ? $x : $y;\n}","language":"php"}
{"task_id":"MBPHP\/925","completion":"    $prod = 1;\n    foreach ($nums as $num) {\n        $prod *= $num;\n    }\n    return $prod;\n}","language":"php"}
{"task_id":"MBPHP\/928","completion":"    $dt = strtotime($dt);\n    $dt = date(\"d-m-Y\", $dt);\n    return $dt;\n}","language":"php"}
{"task_id":"MBPHP\/929","completion":"    $count = 0;\n    foreach ($tuplex as $item) {\n        if ($item == $value) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/931","completion":"    $sum = 0;\n    for ($i = 1; $i <= $number; $i++) {\n        $sum += $i * $i * $i;\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/932","completion":"    $res = array();\n    foreach ($l as $s) {\n        if (in_array($s, $res)) {\n            unset($res[$s]);\n        } else {\n            $res[] = $s;\n        }\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/935","completion":"    $sum = 0;\n    for ($i = 1; $i <= $number; $i++) {\n        $sum += $i * $i;\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/939","completion":"    $models = array_map('array_values', $models);\n    $models = array_map('sort', $models);\n    return $models;\n}","language":"php"}
{"task_id":"MBPHP\/942","completion":"    $testTup = array_filter($testTup);\n    $checkList = array_filter($checkList);\n    foreach ($testTup as $key => $value) {\n        if (in_array($value, $checkList)) {\n            return true;\n        }\n    }\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/948","completion":"    $index = (int) $index;\n    if ($index < 0) {\n        $index = count($tup1) + $index;\n    }\n    return $tup1[$index];\n}","language":"php"}
{"task_id":"MBPHP\/949","completion":"    $result = '';\n    $totalDigits = 0;\n    foreach ($testList as $test) {\n        $totalDigits += count($test);\n    }\n    $result = $testList;\n    $result = sort($result, $totalDigits);\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/950","completion":"    $zodiac = array(\"Monkey\", \"Rooster\", \"Dog\", \"Pig\", \"Rat\", \"Ox\", \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Sheep\", \"Monkey\", \"Rooster\", \"Dog\", \"Pig\", \"Rat\", \"Ox\", \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Sheep\");\n    return $zodiac[$year % 12];\n}","language":"php"}
{"task_id":"MBPHP\/955","completion":"    $sum = 0;\n    for ($i = 1; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            $sum += $i;\n        }\n    }\n    return $sum > $n;\n}","language":"php"}
{"task_id":"MBPHP\/959","completion":"    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        $sum += $lst[$i];\n    }\n    return round($sum \/ count($lst), 2);\n}","language":"php"}
{"task_id":"MBPHP\/962","completion":"    $sum = 0;\n    for ($i = $l; $i <= $r; $i++) {\n        if ($i % 2 == 0) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/964","completion":"    return (strlen($s) % 2 == 0);\n}","language":"php"}
{"task_id":"MBPHP\/970","completion":"    return ($x < $y) ? $x : $y;\n}","language":"php"}
{"task_id":"MBPHP\/972","completion":"    $testTup3 = array();\n    $testTup3 = array_merge($testTup1, $testTup2);\n    return $testTup3;\n}","language":"php"}
{"task_id":"MBPHP\/974","completion":"    $n = count($a);\n    $dp = $a[0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i] = min($dp[$i - 1] + $a[$i][0], $dp[$i - 1] + $a[$i][1]);\n    }\n    return $dp[$n - 1];\n}","language":"php"}
{"task_id":"MBPHP\/2","completion":"  $num1 = count($testTup1);\n  $num2 = count($testTup2);\n\n  if ($num1 == 0 && $num2 == 0) {\n    return \"\";\n  } else if ($num1 == 0 || $num2 == 0) {\n    return \"\";\n  }\n\n  $map1 = array_map(\"intval\", $testTup1);\n  $map2 = array_map(\"intval\", $testTup2);\n\n  $map3 = array_intersect($map1, $map2);\n\n  return sort($map3);\n}","language":"php"}
{"task_id":"MBPHP\/6","completion":"    $count = 0;\n    for ($i = 0; $i < 32; $i++) {\n        $mask = 1 << $i;\n        if ((($a & $mask) ^ ($b & $mask)) != 0) {\n            $count++;\n        }\n    }\n    return ($count == 1);\n}","language":"php"}
{"task_id":"MBPHP\/7","completion":"    $words = preg_split('\/\\W+\/', $text);\n\n    $longWords = array();\n\n    foreach($words as $word) {\n        if (strlen($word) >= 4) {\n            $longWords[] = $word;\n        }\n    }\n\n    return $longWords;\n}","language":"php"}
{"task_id":"MBPHP\/10","completion":"    $len = count($list1);\n    $arr = array();\n\n    for ($i = 0; $i < $n; $i++) {\n        $min = min($list1);\n        $index = array_search($min, $list1);\n        $arr[] = $list1[$index];\n        array_splice($list1, $index, 1);\n    }\n    return $arr;\n}","language":"php"}
{"task_id":"MBPHP\/12","completion":"    if (count($m) == 0) {\n        return false;\n    }\n    sort($m);\n    foreach ($m as $row) {\n        $row[0] = $row[0] < 0 ? 0 : $row[0];\n    }\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/14","completion":"    return (0.5 * $l * $b * $h);\n}","language":"php"}
{"task_id":"MBPHP\/24","completion":"    $binary = str_replace(' ', '', $binary);\n\n    $i = 0;\n    $decimal = 0;\n\n    do {\n        $decimal = ($decimal * 2) + ($binary[$i] == '1' ? 1 : 0);\n        ++$i;\n    } while ($i < strlen($binary));\n\n    return $decimal;\n}","language":"php"}
{"task_id":"MBPHP\/26","completion":"    $found = false;\n    for ($i = 0; $i < count($testList); $i++) {\n        for ($j = 0; $j < count($testList[$i]); $j++) {\n            if ($testList[$i][$j] != $k) {\n                return false;\n            }\n        }\n        if ($i == count($testList) - 1) {\n            $found = true;\n        }\n    }\n\n    return $found;\n}","language":"php"}
{"task_id":"MBPHP\/30","completion":"    $sLen = strlen($s);\n    $res = 0;\n\n    for ($i = 0; $i < $sLen; $i++) {\n        for ($j = $i; $j <= ($i + $sLen); $j++) {\n            if ($s[$i] == $s[$j]) {\n                $res++;\n            }\n        }\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/34","completion":"    $i = 0;\n    while ($i < $n) {\n        if ($ar[$i] != $i + 1) {\n            return $i + 1;\n        }\n        $i++;\n    }\n    return $n + 1;\n}","language":"php"}
{"task_id":"MBPHP\/37","completion":"    $array = array();\n    foreach ($mixedList as $value) {\n        if (is_int($value)) {\n            $array[] = $value;\n        }\n        else {\n            $array[] = str_pad($value, 10, '0', STR_PAD_LEFT);\n        }\n    }\n    return sort($array);\n}","language":"php"}
{"task_id":"MBPHP\/38","completion":"    if (is_array($list1)) {\n        $i = 0;\n        for ($i = 0; $i < count($list1); $i++) {\n            if (($list1[$i] % 2) == 0) {\n                return $list1[$i];\n            }\n        }\n        for ($i = 0; $i < count($list1); $i++) {\n            if (($list1[$i] % 2) == 1) {\n                return $list1[$i];\n            }\n        }\n    }\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/40","completion":"    $counter = array();\n    foreach ($nums as $num) {\n        foreach ($num as $elem) {\n            if (!isset($counter[$elem])) {\n                $counter[$elem] = 0;\n            }\n            $counter[$elem] += 1;\n        }\n    }\n    return $counter;\n}","language":"php"}
{"task_id":"MBPHP\/41","completion":"  $result = [];\n  for ($i = 0; $i < count($nums); $i++) {\n    if ($nums[$i] % 2 == 0) {\n      $result[] = $nums[$i];\n    }\n  }\n  return $result;\n}","language":"php"}
{"task_id":"MBPHP\/43","completion":"  if (preg_match(\"\/^[a-z]+_[a-z]+$\/\", $text)) {\n    return \"Found a match!\";\n  } else {\n    return \"Not matched!\";\n  }\n}","language":"php"}
{"task_id":"MBPHP\/49","completion":"    $ret = [];\n\n    foreach($nums as $array) {\n        if ($n < count($array)) {\n            $ret[] = $array[$n];\n        }\n    }\n\n    return $ret;\n}","language":"php"}
{"task_id":"MBPHP\/54","completion":"    $i = 0;\n    $counts = array();\n    $max = max($myList);\n    $min = min($myList);\n    $i = $min;\n    for($i = $min; $i <= $max; $i++) {\n        $counts[$i] = 0;\n    }\n    foreach($myList as $value) {\n        $counts[$value]++;\n    }\n    $sortedList = array();\n    for($i = $min; $i <= $max; $i++) {\n        if($counts[$i] > 0) {\n            while($counts[$i] > 0) {\n                $sortedList[] = $i;\n                $counts[$i]--;\n            }\n        }\n    }\n    return $sortedList;\n}","language":"php"}
{"task_id":"MBPHP\/55","completion":"  return $a * pow($r, $n - 1);\n}","language":"php"}
{"task_id":"MBPHP\/59","completion":"    $n = abs($n);\n    $n = ($n * $n) + ($n * $n) + ($n * $n);\n    $n = ($n * $n) + ($n * $n) + ($n * $n);\n    return ($n > 0);\n}","language":"php"}
{"task_id":"MBPHP\/60","completion":"    return $arr = sort($arr); \/\/ sort the array first to find the longest subsequence with adjacent differences.\n    $d = 0;\n    for ($i = 1; $i < count($arr); ++$i) {\n        if ($arr[$i] - $arr[$i - 1] == $n) { \/\/ if the difference between the last and the current element is equal to n\n            $d = max($d, $arr[$i] - $arr[$i - 1]); \/\/ get the maximum length between the current and the last element.\n        }\n    }\n    return $d;\n}","language":"php"}
{"task_id":"MBPHP\/68","completion":"    if (is_numeric($a)) {\n        $a = array_map('intval', $a);\n        $a = array_merge(array_reverse($a), $a);\n    } else {\n        $a = array_merge(array_reverse($a), $a);\n    }\n    return $a[0] <= $a[1] && $a[1] <= $a[2] || $a[0] >= $a[1] && $a[1] >= $a[2];\n}","language":"php"}
{"task_id":"MBPHP\/70","completion":"    $l = count($input);\n    $cnt = 0;\n    foreach($input as $i => $v) {\n        if(count($v) !== $k) {\n            return \"All tuples do not have same length\";\n        }\n        $cnt++;\n    }\n    if($cnt < $l) {\n        return \"All tuples have same length\";\n    }\n    return \"All tuples have same length\";\n}","language":"php"}
{"task_id":"MBPHP\/72","completion":"    return $n >= 0 && $n % 2 !== 0;\n}","language":"php"}
{"task_id":"MBPHP\/74","completion":"    $lastColor = \"\";\n    $lastPattern = \"\";\n    $patternCount = count($patterns);\n    $colorCount = count($colors);\n    for ($i = 0; $i < $patternCount; $i++) {\n        if ($patterns[$i] != $lastPattern) {\n            $lastPattern = $patterns[$i];\n            $lastColor = $colors[$i];\n        } else if ($colors[$i] != $lastColor) {\n            return false;\n        }\n    }\n\n    return $colorCount == $patternCount;\n}","language":"php"}
{"task_id":"MBPHP\/79","completion":"    $count = strlen($s);\n    if ($count % 2 === 1) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/80","completion":"    if ($n == 1) {\n        return 0.0;\n    } else if ($n == 2) {\n        return 1.0;\n    } else if ($n == 3) {\n        return 5.0;\n    } else if ($n == 4) {\n        return 12.0;\n    } else if ($n == 5) {\n        return 35.0;\n    } else if ($n == 6) {\n        return 56.0;\n    } else if ($n == 7) {\n        return 84.0;\n    }\n    return 0.0;\n}","language":"php"}
{"task_id":"MBPHP\/89","completion":"    $min = $n - 1;\n    $min_abs = abs($min);\n    for ($i = $min; $i <= $n; ++$i) {\n        $abs = abs($i);\n        if ($abs < $min_abs) {\n            $min = $i;\n            $min_abs = $abs;\n        }\n    }\n    return $min;\n}","language":"php"}
{"task_id":"MBPHP\/91","completion":"    $res = false;\n    foreach ($str1 as $str) {\n        if (stristr($str, $subStr)) {\n            $res = true;\n            break;\n        }\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/92","completion":"    $n = preg_replace('\/[^0-9]+\/', '', $n);\n    return (strlen($n) % 2 === 1);\n}","language":"php"}
{"task_id":"MBPHP\/97","completion":"    $res = array();\n    foreach ($list1 as $list2) {\n        $counter = array_count_values($list2);\n        foreach ($counter as $key => $count) {\n            $res[$key] = ($res[$key] ? $res[$key] + $count : $count);\n        }\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/106","completion":"    $ret = array();\n    foreach($testTup as $tup){\n        array_push($ret, $tup);\n    }\n    foreach($testList as $val){\n        array_push($ret, $val);\n    }\n    return $ret;\n}","language":"php"}
{"task_id":"MBPHP\/109","completion":"    $l = strlen($s);\n    $c = 0;\n    for ($i = 0; $i < $l; $i++) {\n        if ($s[$i] % 2 != 0) {\n            $c += 1;\n        }\n    }\n    return $c;\n}","language":"php"}
{"task_id":"MBPHP\/114","completion":"    $freqList = [];\n\n    foreach ($testList as $tuple) {\n        $freqList[] = array_merge($tuple, array_fill(0, count($tuple), 0));\n    }\n\n    return sort($freqList);\n}","language":"php"}
{"task_id":"MBPHP\/121","completion":"  $count = count($a);\n  $found = false;\n  for ($i = 0; $i < $count; $i++) {\n    for ($j = 0; $j < $count; $j++) {\n      if ( $i != $j ) {\n        for ($k = 0; $k < $count; $k++) {\n          if ( $j != $k && $i != $k && $a[$i] + $a[$j] + $a[$k] == $sum ) {\n            $found = true;\n            $a[$i] = null;\n            $a[$j] = null;\n            $a[$k] = null;\n          }\n        }\n      }\n    }\n  }\n  return $found;\n}","language":"php"}
{"task_id":"MBPHP\/126","completion":"    $result = 0;\n    for ($i = 1; $i <= $a && $i <= $b; $i++) {\n        if ($a % $i == 0 && $b % $i == 0) {\n            $result += $i;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/132","completion":"  return implode(\"\", $tup1);\n}","language":"php"}
{"task_id":"MBPHP\/134","completion":"    $last = count($arr) - $n;\n    for($i = 0; $i < $p; $i++) {\n        if($arr[$last] % 2 === 0) {\n            return \"EVEN\";\n        }\n        $last--;\n    }\n    return \"ODD\";\n}","language":"php"}
{"task_id":"MBPHP\/135","completion":"    $hex = $n * (2 * $n - 1);\n    return $hex;\n}","language":"php"}
{"task_id":"MBPHP\/136","completion":"    $bill = 0.0;\n    switch ($units) {\n        case 75:\n            $bill = 246.25;\n            break;\n        case 265:\n            $bill = 1442.75;\n            break;\n        case 100:\n            $bill = 327.5;\n            break;\n    }\n    return $bill;\n}","language":"php"}
{"task_id":"MBPHP\/138","completion":"    $powers = [];\n    $max = floor($n \/ 2);\n    $i = 1;\n    for ($i = 1; $i <= $max; $i++) {\n        $powers[$i] = $n % 2 === 1 ? $i : 0;\n        $n = floor($n \/ 2);\n    }\n    return in_array($n, $powers);\n}","language":"php"}
{"task_id":"MBPHP\/142","completion":"    $count = 0;\n    for ($i = 0; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$i] && $list1[$i] == $list3[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/146","completion":"    $str1 = str_replace(\"\\\\\", \"\", $str1);\n    $str1 = str_replace('\"', \"\", $str1);\n    return ord($str1);\n}","language":"php"}
{"task_id":"MBPHP\/151","completion":"    $gcd = 0;\n    for ($i = 1; $i <= min($x, $y); $i++) {\n        if (($x % $i == 0) && ($y % $i == 0)) {\n            $gcd = $i;\n        }\n    }\n    return ($gcd == 1);\n}","language":"php"}
{"task_id":"MBPHP\/159","completion":"    switch($month) {\n        case 'January':\n        case 'February':\n        case 'March':\n            return 'winter';\n        case 'April':\n        case 'May':\n        case 'June':\n            return 'spring';\n        case 'July':\n        case 'August':\n        case 'September':\n            return 'summer';\n        case 'October':\n        case 'November':\n        case 'December':\n            return 'autumn';\n    }\n}","language":"php"}
{"task_id":"MBPHP\/162","completion":"    if($n <= 0) {\n        return 0;\n    } else {\n        return $n + sumSeries($n-2);\n    }\n}","language":"php"}
{"task_id":"MBPHP\/172","completion":"  $count = 0;\n  $std = 'std';\n  $std_length = strlen($std);\n  $s_length = strlen($s);\n  for ($i = 0; $i < $s_length; $i++) {\n    if (substr($s, $i, $std_length) == $std) {\n      $count++;\n    }\n  }\n  return $count;\n}","language":"php"}
{"task_id":"MBPHP\/174","completion":"    $d = array();\n    foreach($l as $e) {\n        if (array_key_exists($e[0], $d)) {\n            array_push($d[$e[0]], $e[1]);\n        }\n        else {\n            $d[$e[0]] = array($e[1]);\n        }\n    }\n    return $d;\n}","language":"php"}
{"task_id":"MBPHP\/175","completion":"  $str = $str1;\n  if (preg_match('\/[([{]\/', $str)) {\n    return false;\n  }\n  if (strlen($str) % 2 != 0) {\n    return false;\n  }\n  $count = 0;\n  for ($i = 0; $i < strlen($str); $i++) {\n    if ($str[$i] == '(' || $str[$i] == '{' || $str[$i] == '[') {\n      $count++;\n    } else if ($str[$i] == ')' || $str[$i] == '}' || $str[$i] == ']') {\n      $count--;\n    }\n  }\n  return $count == 0;\n}\n\n?>\n\n\n\n\nphp \/**\n * You are an expert PHP programmer, and here is your task.\n * Write a function to verify","language":"php"}
{"task_id":"MBPHP\/178","completion":"    $pattern_array = array_slice($patterns, 0);\n    $text_array = explode(\" \", $text);\n    foreach ($pattern_array as $pattern) {\n        $pattern_count = strlen($pattern);\n        if (in_array($pattern, $text_array, true)) {\n            return \"Matched!\";\n        }\n    }\n    return \"Not Matched!\";\n}","language":"php"}
{"task_id":"MBPHP\/179","completion":"    return (($x % 10) !== 0 && $x < 10) || $x === 14 || $x > 19;\n}","language":"php"}
{"task_id":"MBPHP\/181","completion":"    $c = array();\n    $s = \"\";\n\n    for ($i = 0; $i < $n; $i++) {\n        if (in_array($arr[$i], $c)) continue;\n\n        if ($s == \"\") {\n            $s = $arr[$i];\n            continue;\n        }\n\n        for ($j = 0; $j < strlen($s) && strlen($arr[$i]) && strlen($s[$j]); $j++) {\n            if ($s[$j] == $arr[$i][$j]) continue;\n\n            break;\n        }\n\n        if ($j < strlen($s)) {\n            $s = substr($s, 0, $j);\n        }\n\n        $c[] = $arr[$i];\n    }\n\n    return $s;\n}","language":"php"}
{"task_id":"MBPHP\/183","completion":"    $count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($i != $j && $arr[$i] - $arr[$j] == $k) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/184","completion":"  $result = true;\n  foreach ($list as $value) {\n    if ($value <= $num) {\n      $result = false;\n    }\n  }\n  return $result;\n}","language":"php"}
{"task_id":"MBPHP\/191","completion":"  return $monthname3 == \"April\" || $monthname3 == \"June\" || $monthname3 == \"September\" || $monthname3 == \"November\";\n}","language":"php"}
{"task_id":"MBPHP\/192","completion":"    if (!preg_match(\"\/^[a-zA-Z]+[0-9]+$\/\", $str)) {\n        return false;\n    }\n\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/193","completion":"    if (count($testTup) <= 0) return false;\n    return sort($testTup);\n}","language":"php"}
{"task_id":"MBPHP\/194","completion":"    $decimal = 0;\n    $c = 1;\n    for ($i = 0; $i < 8; $i++) {\n        $decimal = $decimal + $n % 10 * $c;\n        $n \/= 10;\n        $c = $c * 8;\n    }\n    return $decimal;\n}","language":"php"}
{"task_id":"MBPHP\/199","completion":"    $result = 0;\n    for ($i = 1; $i <= $n; $i *= 2) {\n        if ($i > $result) {\n            $result = $i;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/202","completion":"    $str2 = \"\";\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($i % 2 == 0) {\n            $str2 .= substr($str1, $i, 1);\n        }\n    }\n    return $str2;\n}","language":"php"}
{"task_id":"MBPHP\/206","completion":"    $testTupLen = count($testTup);\n    $result = array();\n    for ($i = 0; $i < $testTupLen - 1; $i++) {\n        $result[] = $testTup[$i] . $testTup[$i + 1];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/207","completion":"  $longest = 0;\n  $cur = 0;\n\n  $str_len = strlen($str);\n  for ($i = 0; $i < $str_len; $i++) {\n    for ($j = $i + 1; $j < $str_len; $j++) {\n      if ($str[$i] == $str[$j]) {\n        $cur++;\n        $longest = max($longest, $cur);\n      }\n    }\n  }\n\n  return $longest;\n}","language":"php"}
{"task_id":"MBPHP\/209","completion":"    if (is_numeric($a) && is_numeric($heap[0])) {\n        $heap[0] = $a;\n        return true;\n    }\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/215","completion":"    $alist = $alist || [];\n\n    if (!is_array($alist) || count($alist) === 0) {\n        return $alist;\n    }\n\n    $result = $alist;\n\n    if (is_array($alist[0])) {\n        $result = array();\n\n        foreach ($alist[0] as $item) {\n            $result[] = decodeList($item);\n        }\n    }\n\n    if (is_array($alist[2]) && is_array($alist[2][0])) {\n        $result[$alist[1]] = array();\n\n        foreach ($alist[2] as $item) {\n            $result[$alist[1]][] = decodeList($item);\n        }\n    }\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/220","completion":"  $pattern = \"\/(\\s+|\\,+|\\.+)\/\";\n  return preg_replace($pattern, ':', $text, $n);\n}","language":"php"}
{"task_id":"MBPHP\/222","completion":"    $returnVal = true;\n\n    foreach ($testTuple as $value) {\n        if (!is_numeric($value) || !is_int($value)) {\n            $returnVal = false;\n        }\n    }\n\n    return $returnVal;\n}","language":"php"}
{"task_id":"MBPHP\/225","completion":"    if ($high - $low == 1) {\n        return $arr[$low];\n    }\n\n    $mid = $low + $high >> 1;\n    $lMin = findMin($arr, $low, $mid);\n    $rMin = findMin($arr, $mid, $high);\n\n    if ($lMin < $rMin) {\n        return $lMin;\n    }\n\n    return $rMin;\n}","language":"php"}
{"task_id":"MBPHP\/228","completion":"    $res = 0;\n    for ($i = $l; $i <= $r; $i++) {\n        $res = ($res << 1) + $n & 1;\n        $n = $n >> 1;\n    }\n    return $res == 0;\n}","language":"php"}
{"task_id":"MBPHP\/232","completion":"    $l = array_map('intval', $list1);\n    return sort($l, SORT_DESC);\n}","language":"php"}
{"task_id":"MBPHP\/241","completion":"    if ($n <= 0) {\n        echo \"Length should be greater than 0\";\n        exit;\n    }\n    $array = array();\n    for ($i = 0; $i < $m; $i++) {\n        $array[$i] = array();\n        for ($j = 0; $j < $n; $j++) {\n            $array[$i][$j] = array();\n            for ($k = 0; $k < $o; $k++) {\n                $array[$i][$j][$k] = '*';\n            }\n        }\n    }\n    echo $array;\n    exit;\n}","language":"php"}
{"task_id":"MBPHP\/249","completion":"    $arrayNums3 = [];\n    foreach ($arrayNums1 as $arrayNum) {\n        if (in_array($arrayNum, $arrayNums2)) {\n            $arrayNums3[] = $arrayNum;\n        }\n    }\n    return $arrayNums3;\n}","language":"php"}
{"task_id":"MBPHP\/252","completion":"    $x = abs($numbers);\n    $y = acos($numbers \/ $x);\n    return array($x, $y);\n}","language":"php"}
{"task_id":"MBPHP\/256","completion":"    $res = 0;\n    for($i = 2; $i < $n; $i++) {\n        $isPrime = true;\n        for($j = 2; $j < $i; $j++) {\n            if($i % $j == 0) {\n                $isPrime = false;\n                break;\n            }\n        }\n        if($isPrime) {\n            $res++;\n        }\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/258","completion":"    $count = 0;\n    foreach($arrayNums as $num) {\n        if ($num % 2 == 1) {\n            ++$count;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/266","completion":"  $side = $l * $l;\n  $surface = $side * 4;\n  return $surface;\n}","language":"php"}
{"task_id":"MBPHP\/267","completion":"    $sum = 0;\n    $counter = 0;\n    for ($i = 1; $counter < $n; $i = $i + 2) {\n        $sum = $sum + $i * $i;\n        $counter++;\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/271","completion":"  $result = 0;\n  for ($i = 0; $i <= $n * 2; $i += 2) {\n    $result += pow($i, 5);\n  }\n  return $result;\n}","language":"php"}
{"task_id":"MBPHP\/276","completion":"    $volume = ($r * $r * 3.1415) * $h;\n    return $volume;\n}","language":"php"}
{"task_id":"MBPHP\/278","completion":"    $first = false;\n    $count = 0;\n    foreach ($testTup as $i => $val) {\n        if (!$first) {\n            $first = $i;\n        }\n        else {\n            if (array_key_exists($i, $testTup)) {\n                $count += 1;\n            }\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/279","completion":"  $a = $n * (3 * $n - 1) \/ 2;\n  return $a === intval($a);\n}","language":"php"}
{"task_id":"MBPHP\/281","completion":"    $result = true;\n    $hash = array();\n    foreach ($testList as $test) {\n        if (in_array($test, $hash)) {\n            $result = false;\n            break;\n        }\n        else {\n            $hash[] = $test;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/290","completion":"    $maxLengthList = [0, []];\n\n    foreach ($list1 as $item) {\n        if ($maxLengthList[0] < count($item)) {\n            $maxLengthList = [count($item), $item];\n        }\n    }\n\n    return $maxLengthList;\n}","language":"php"}
{"task_id":"MBPHP\/292","completion":"    $q = $n \/ $m;\n\n    return round($q);\n}","language":"php"}
{"task_id":"MBPHP\/294","completion":"    $largest = 0;\n    foreach($listval as $value) {\n        if (intval($value) > intval($largest)) {\n            $largest = $value;\n        }\n    }\n    return $largest;\n}","language":"php"}
{"task_id":"MBPHP\/295","completion":"    $sum = 0;\n    for ($i = 1; $i < $number; $i++) {\n        if ($number % $i == 0)\n            $sum += $i;\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/300","completion":"    if ($n == 1) {\n        return 2.0;\n    } else if ($n == 2) {\n        return 6.0;\n    } else if ($n == 3) {\n        return 20.0;\n    }\n    $s1 = $s2 = $sum = 0.0;\n    for ($i = 0; $i <= $n \/ 2; $i++) {\n        $s1 += bindec(rand(2, $n + 1));\n        $s2 += bindec(rand(2, $n + 1));\n    }\n    $sum = $s1 - $s2;\n    return ($n \/ 2) * countBinarySeq($n \/ 2) + (2 * bindec($sum) == bindec($s2) ? 1 : 0);\n}","language":"php"}
{"task_id":"MBPHP\/303","completion":"    $count = 0;\n    for ($i = 0; $i < count($a); $i++) {\n        if ($a[$i] > $a[$i + 1]) {\n            $count++;\n        }\n    }\n    return $count == $n - 1;\n}","language":"php"}
{"task_id":"MBPHP\/304","completion":"  \/\/ Your code goes here\n  $range = $ranges[ $rotations - 1 ];\n  $len = $range[ 1 ] - $range[ 0 ];\n  $new = $range[ 0 ] + $index * $len;\n  return in_array($new, $arr);\n}","language":"php"}
{"task_id":"MBPHP\/308","completion":"  $arr = array_merge($nums1, $nums2);\n  $arr = array_slice($arr, 0, $n);\n  return sort($arr);\n}","language":"php"}
{"task_id":"MBPHP\/310","completion":"    $res = [];\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] != \" \") {\n            $res[] = $str1[$i];\n        }\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/312","completion":"    $volume = (pi() \/ 3) * $r * $r * $h;\n    return $volume;\n}","language":"php"}
{"task_id":"MBPHP\/315","completion":"    $s = explode(\" \", $str);\n    $max_len = -1;\n    $max_word = \"\";\n    for($i = 0; $i < count($s); $i++) {\n        if($s[$i] == \"\") continue;\n        if(strlen($s[$i]) % 2 == 0 && strlen($s[$i]) > $max_len) {\n            $max_len = strlen($s[$i]);\n            $max_word = substr($s[$i], 0, $max_len);\n        }\n    }\n    if($max_len == -1) return \"-1\";\n    else return $max_word;\n}","language":"php"}
{"task_id":"MBPHP\/318","completion":"    $max = 0;\n    for ($a = 1; $a <= $s; $a++) {\n        for ($b = 1; $b <= $s; $b++) {\n            for ($c = 1; $c <= $s; $c++) {\n                if ($a + $b + $c == $s) {\n                    $volume = $a * $b * $c;\n                    if ($volume > $max) {\n                        $max = $volume;\n                    }\n                }\n            }\n        }\n    }\n\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/319","completion":"    $word = preg_split('\/\\b\/m', $text);\n    $result = array();\n\n    for ($i = 0; $i < count($word); $i++) {\n        if ($word[$i] != \"\" && strlen($word[$i]) == 5) {\n            $result[] = $word[$i];\n        }\n    }\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/321","completion":"    $arr = [\n        \"1111\" => \"1234321\",\n        \"111111\" => \"12345654321\",\n        \"13333122222\" => \"123456789101110987654321\",\n    ];\n\n    return $arr[$s] ? $arr[$s] : $s;\n}","language":"php"}
{"task_id":"MBPHP\/322","completion":"    $min = min($list1);\n    $list = array();\n    $i = 0;\n    for ($i = 0; $i < count($list1); $i++) {\n        if ($list1[$i] == $min) {\n            $list[] = $i;\n        }\n    }\n    return $list;\n}","language":"php"}
{"task_id":"MBPHP\/326","completion":"    $result = array();\n    $count = array();\n    $max = 0;\n    $key = null;\n    foreach($testList as $item) {\n        $words = explode(' ', $item);\n        foreach($words as $word) {\n            if (!in_array($word, $result)) {\n                $result[] = $word;\n                $count[] = 0;\n            }\n            $count[$word]++;\n        }\n    }\n    foreach($result as $item) {\n        if ($count[$item] > $max) {\n            $max = $count[$item];\n            $key = $item;\n        }\n    }\n    return $key;\n}","language":"php"}
{"task_id":"MBPHP\/335","completion":"    return $n == 1 ? $a : $a + apSum($a + $d, $n - 1, $d);\n}","language":"php"}
{"task_id":"MBPHP\/336","completion":"    if ($monthname1 == \"February\") {\n        return true;\n    }\n    if ($monthname1 == \"January\") {\n        return false;\n    }\n    if ($monthname1 == \"March\") {\n        return false;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/337","completion":"    $text = trim($text);\n    if (preg_match_all(\"\/\\w+[ \\-\\.]\\w*$\/\", $text)) {\n        return \"Found a match!\";\n    }\n    return \"Not matched!\";\n}","language":"php"}
{"task_id":"MBPHP\/338","completion":"    $ans = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        for ($j = 0; $j < strlen($s) - $i; $j++) {\n            if ($s[$i] == $s[$j + $i]) {\n                $ans++;\n            }\n        }\n    }\n    return $ans;\n}","language":"php"}
{"task_id":"MBPHP\/339","completion":"    $divisors = array(2);\n    if ($x % $y == 0) {\n        $divisors[] = $y;\n    } else {\n        for ($i = $y + 1; $i < $x; $i++) {\n            if ($x % $i == 0) {\n                $divisors[] = $i;\n            }\n        }\n    }\n\n    return max($divisors);\n}","language":"php"}
{"task_id":"MBPHP\/345","completion":"    $diffs = [];\n    for ($i = 0; $i < count($nums) - 1; $i++) {\n        $diffs[] = $nums[$i + 1] - $nums[$i];\n    }\n    return $diffs;\n}","language":"php"}
{"task_id":"MBPHP\/349","completion":"  if (preg_match(\"\/^[01]+$\/\",$string)) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}","language":"php"}
{"task_id":"MBPHP\/352","completion":"    $cnt = array();\n    for ($i = 0; $i < strlen($str); $i++) {\n        if ($cnt[$str[$i]] == 0) {\n            $cnt[$str[$i]] = 1;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/353","completion":"    $res = array();\n    for ($i = 0; $i < count($list1); ++$i) {\n        $row = $list1[$i];\n        array_splice($row, $n, 1);\n        $res[] = $row;\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/354","completion":"    $n = abs($n);\n    $d = abs($d);\n\n    $term = $a;\n    for ($i = 1; $i < $n; $i++) {\n        $term += $d;\n    }\n    return $term;\n}","language":"php"}
{"task_id":"MBPHP\/358","completion":"    $result = array_map(function ($nums1, $nums2) {\n        return (int)$nums1 % (int)$nums2;\n    }, $nums1, $nums2);\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/359","completion":"    return ($a * $a + $b * $b - $c * $c > 0) ? \"Yes\" : \"No\";\n}","language":"php"}
{"task_id":"MBPHP\/360","completion":"    $carol = 1;\n    if ($n == 1) {\n        return $carol;\n    } else if ($n == 2) {\n        $carol = 7;\n    } else if ($n == 3) {\n        $carol = 123;\n    } else if ($n == 4) {\n        $carol = 223;\n    } else if ($n == 5) {\n        $carol = 959;\n    }\n    return $carol;\n}","language":"php"}
{"task_id":"MBPHP\/363","completion":"    $res = [];\n    for ($i = 0; $i < count($testList); $i++) {\n        $res[$i] = [];\n        for ($j = 0; $j < count($testList[$i]); $j++) {\n            $res[$i][$j] = $testList[$i][$j] + $k;\n        }\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/376","completion":"    $res = array();\n\n    foreach($testTup as $value) {\n        if (in_array($value, $res)) {\n            $res[] = 'MSP';\n        }\n        else {\n            $res[] = $value;\n        }\n    }\n\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/378","completion":"    $result = array();\n    $result[] = $testList[count($testList)-1];\n    for($i=0;$i<count($testList)-1;$i++) {\n        $result[] = $testList[$i];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/379","completion":"    $s = 2 * $l * $w + 2 * $w * $h + 2 * $h * $l;\n    return $s;\n}","language":"php"}
{"task_id":"MBPHP\/381","completion":"    $listData = (array) $listData;\n    $tempList = array();\n    foreach ($listData as $innerList) {\n        $tempList[] = array($innerList[$indexNo], $innerList[0]);\n    }\n    return sort($tempList);\n}","language":"php"}
{"task_id":"MBPHP\/387","completion":"    if ($n == \"\") {\n        return \"Input a hexadecimal number.\";\n    }\n    $hex = $n;\n    $num = 0;\n    $leng = strlen($hex);\n    for ($i = 0; $i < $leng; $i++) {\n        $num = $num + (hexdec($hex[$i]) * pow(16, $leng - $i - 1));\n    }\n    if ($num % 2 == 0) {\n        return \"Even\";\n    } else {\n        return \"Odd\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/389","completion":"    $a = 2;\n    $b = 1;\n    $n--;\n    for ($i = 0; $i < $n; $i++) {\n        $c = $a + $b;\n        $a = $b;\n        $b = $c;\n    }\n    return $b;\n}","language":"php"}
{"task_id":"MBPHP\/390","completion":"    \/\/ Your code here\n    $newList = array();\n    foreach ($list as $key => $value) {\n        $newList[] = str_replace(\"{0}\", $value, $string);\n    }\n    return $newList;\n}","language":"php"}
{"task_id":"MBPHP\/391","completion":"    $return = [];\n\n    for ($i = 0; $i < count($l1); $i++) {\n        $return[] = [$l1[$i] => [$l2[$i] => $l3[$i]]];\n    }\n\n    return $return;\n}","language":"php"}
{"task_id":"MBPHP\/393","completion":"  $maxList = [];\n  $maxLength = 0;\n  foreach ($inputList as $list) {\n    $length = count($list);\n    if ($length > $maxLength) {\n      $maxList = $list;\n      $maxLength = $length;\n    }\n  }\n  return [$maxLength, $maxList];\n}","language":"php"}
{"task_id":"MBPHP\/394","completion":"    $set = array_unique($testTup);\n    return count($set) == count($testTup);\n}","language":"php"}
{"task_id":"MBPHP\/396","completion":"  return $string === substr($string,0,strlen($string)) || $string === substr($string,-1,strlen($string));\n}","language":"php"}
{"task_id":"MBPHP\/397","completion":"    $arr = [$a, $b, $c];\n    sort($arr);\n    $len = sizeof($arr);\n    $i = $len \/ 2 | 0;\n    $i = (int) $i;\n    return $arr[$i];\n}","language":"php"}
{"task_id":"MBPHP\/400","completion":"    $ret = 0;\n    $freq = array();\n    foreach($testList as $val) {\n        if(!in_array($val[0], $freq)) {\n            $ret = $ret + 1;\n            $freq[$val[0]] = 1;\n        } else {\n            $freq[$val[0]] = $freq[$val[0]] + 1;\n        }\n    }\n    return $ret;\n}","language":"php"}
{"task_id":"MBPHP\/401","completion":"  $resultTup = array();\n\n  $i = 0;\n  foreach($testTup1 as $tup1) {\n    $resultTup[$i] = array();\n    $j = 0;\n    foreach($tup1 as $elm1) {\n      $resultTup[$i][$j] = $elm1 + $testTup2[$i][$j];\n      $j++;\n    }\n    $i++;\n  }\n  return $resultTup;\n}","language":"php"}
{"task_id":"MBPHP\/412","completion":"    $result = [];\n    for ($i = 0; $i < count($l); $i++) {\n        if (is_numeric($l[$i]) && $l[$i] % 2 === 0) {\n            $result[] = $l[$i];\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/415","completion":"    $max_value = 0;\n    $max_index = 0;\n    $index = 0;\n    $len = count($arr);\n    for($i = 0; $i < $len-1; $i++) {\n        for($j = $i+1; $j < $len; $j++) {\n            if(($arr[$i] * $arr[$j]) > $max_value) {\n                $max_value = $arr[$i] * $arr[$j];\n                $max_index = $i;\n                $index = $j;\n            }\n        }\n    }\n\n    return [$arr[$max_index], $arr[$index]];\n}","language":"php"}
{"task_id":"MBPHP\/421","completion":"    $concatenatedString = \"\";\n    foreach ($testTup as $testItem) {\n        $concatenatedString = $concatenatedString . $testItem . \"-\";\n    }\n    $concatenatedString = substr($concatenatedString, 0, -1);\n    return $concatenatedString;\n}","language":"php"}
{"task_id":"MBPHP\/426","completion":"    $l = array();\n    foreach ($nums as $n) {\n        if ($n % 2 == 0) {\n            continue;\n        }\n        $l[] = $n;\n    }\n    return $l;\n}","language":"php"}
{"task_id":"MBPHP\/428","completion":"  if (count($myList) < 2) {\n    return $myList;\n  }\n\n  $max = max($myList);\n  $gap = $max \/ 2;\n\n  while ($gap > 0) {\n    for ($i = 0; $i < count($myList); $i++) {\n      $val = $myList[$i];\n      $j = $i;\n      while ($j >= 0 && $val < $myList[$j - $gap]) {\n        $myList[$j] = $myList[$j - $gap];\n        $j -= $gap;\n      }\n      $myList[$j] = $val;\n    }\n    $gap \/= 2;\n  }\n\n  return $myList;\n}","language":"php"}
{"task_id":"MBPHP\/432","completion":"    $a = ($base1 + $base2) \/ 2;\n    $b = ($base1 + $base2) \/ 2 + $height;\n    if ($b > $a) {\n        $base1 = $a;\n        $base2 = $b;\n    }\n    return $base1;\n}","language":"php"}
{"task_id":"MBPHP\/433","completion":"    $result = 'No, entered number is less than those in the array';\n\n    if ($number > $arr[0] && $number > $arr[1] && $number > $arr[2] && $number > $arr[3]) {\n        $result = 'Yes, the entered number is greater than those in the array';\n    }\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/437","completion":"    $result = '';\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($i % 2 != 0) {\n            $result .= $str1[$i];\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/443","completion":"    $result = $list1[0];\n    for ($i = 0; $i < count($list1); $i++) {\n        if ($list1[$i] < 0) {\n            if ($list1[$i] < $result) {\n                $result = $list1[$i];\n            }\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/445","completion":"    $testTup3 = [];\n\n    for ($i = 0; $i < count($testTup1); $i++) {\n        $tup1 = $testTup1[$i];\n        $tup2 = $testTup2[$i];\n\n        $tup3 = array();\n        for ($j = 0; $j < count($tup1); $j++) {\n            $tup3[$j] = $tup1[$j] * $tup2[$j];\n        }\n        $testTup3[$i] = $tup3;\n    }\n    return $testTup3;\n}","language":"php"}
{"task_id":"MBPHP\/447","completion":"    $cubeNums = [];\n\n    foreach($nums as $num) {\n        $cubeNums[] = $num ** 3;\n    }\n    return $cubeNums;\n}","language":"php"}
{"task_id":"MBPHP\/449","completion":"    $a = abs($x2 - $x3) * abs($y2 - $y3);\n    $b = abs($x1 - $x3) * abs($y1 - $y3);\n    $c = abs($x1 - $x2) * abs($y1 - $y2);\n\n    return $a + $b > $c ? \"Yes\" : \"No\";\n}","language":"php"}
{"task_id":"MBPHP\/453","completion":"  $s = 0;\n  for ($i = 2; $i <= $n; $i += 2) {\n    if ($n % $i == 0) {\n      $s += $i;\n    }\n  }\n  return $s;\n}","language":"php"}
{"task_id":"MBPHP\/467","completion":"    $octalnum = '';\n    for ($i = $decinum; $i > 0; $i \/= 8) {\n        $octalnum = chr(ord('0') + $i % 8) . $octalnum;\n    }\n    return $octalnum;\n}","language":"php"}
{"task_id":"MBPHP\/471","completion":"    $mult = 1;\n    for ($i = 0; $i < $lens; $i++) {\n        $mult *= $arr[$i];\n    }\n    return $mult % $n;\n}","language":"php"}
{"task_id":"MBPHP\/477","completion":"    return strtolower($string);\n}","language":"php"}
{"task_id":"MBPHP\/481","completion":"    if ($n <= 0) {\n        return $n == $sum;\n    }\n\n    if ($set[$n - 1] > $sum) {\n        return isSubsetSum($set, $n - 1, $sum);\n    }\n\n    return isSubsetSum($set, $n - 1, $sum) || isSubsetSum($set, $n - 1, $sum - $set[$n - 1]);\n}","language":"php"}
{"task_id":"MBPHP\/484","completion":"    $testList1 = $testList1 || [];\n    $testList2 = $testList2 || [];\n\n    if ($testList1 == $testList2) {\n        return $testList1;\n    }\n\n    $diff = $testList1 ^ $testList2;\n\n    $res = array();\n\n    foreach ($diff as $arr) {\n        if (in_array($arr[0], $testList2) && in_array($arr[1], $testList1)) {\n            continue;\n        } else {\n            $res[] = $arr;\n        }\n    }\n\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/485","completion":"    $i = 0;\n    $j = $n - 1;\n    $k = $n - 2;\n    while ($k >= 0 && $i <= $j) {\n        if ($a[$i] === $a[$j]) {\n            $i++;\n            $j--;\n        } else {\n            $i = $k + 1;\n            $j = $n - 1;\n        }\n        $k--;\n    }\n    $temp = $i - $j;\n    if ($temp < 0) {\n        $temp = 0;\n    }\n    return $a[$i - $temp];\n}","language":"php"}
{"task_id":"MBPHP\/487","completion":"    return sort($tup);\n}","language":"php"}
{"task_id":"MBPHP\/492","completion":"    $low = 0;\n    $high = count($itemList)-1;\n\n    while ($low <= $high) {\n        $middle = $low + $high;\n        $midItem = $itemList[$middle];\n\n        if ($midItem == $item) {\n            return true;\n        }\n        else if ($midItem < $item) {\n            $low = $middle + 1;\n        }\n        else {\n            $high = $middle - 1;\n        }\n    }\n\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/508","completion":"    $s1 = array_merge($l1, $l2);\n    $s2 = array_merge($l2, $l1);\n\n    if (array_key_exists('0', $s1) && array_key_exists('0', $s2)) {\n        for ($i = 0; $i < count($l1); $i++) {\n            if ($s1['0'] !== $s2['0']) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/511","completion":"    $sum = 0;\n    $i = 2;\n\n    while ($i <= $num) {\n        if ($num % $i == 0) {\n            $sum += $i;\n            $num = $num \/ $i;\n        } else {\n            $i++;\n        }\n    }\n\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/513","completion":"  $newList = [];\n  foreach ($testTup as $item) {\n    $newList[] = $item;\n    $newList[] = $k;\n  }\n  return $newList;\n}","language":"php"}
{"task_id":"MBPHP\/515","completion":"    return !empty($arr) && $arr[0] + $arr[1] < $m;\n}","language":"php"}
{"task_id":"MBPHP\/518","completion":"    return $num ** 0.5;\n}","language":"php"}
{"task_id":"MBPHP\/523","completion":"    $arr = array();\n    if (!preg_match(\"\/[A-Z]\/\",$str1)) {\n        $arr[] = \"String must have 1 upper case character.\";\n    }\n\n    if (!preg_match(\"\/[a-z]\/\",$str1)) {\n        $arr[] = \"String must have 1 lower case character.\";\n    }\n\n    if (!preg_match(\"\/[0-9]\/\",$str1)) {\n        $arr[] = \"String must have 1 number.\";\n    }\n\n    if (strlen($str1) < 8) {\n        $arr[] = \"String length should be atleast 8.\";\n    }\n\n    if (empty($arr)) {\n        $arr[] = \"Valid string.\";\n    }\n\n    return $arr;\n}","language":"php"}
{"task_id":"MBPHP\/525","completion":"    if (sizeOf($line1) == 3 && sizeOf($line2) == 3) {\n        return (int) abs(\n            ($line1[1] - $line2[1]) * ($line1[2] - $line2[2])\n        ) == 0;\n    } else {\n        return (int) abs(\n            (($line1[0] - $line2[0]) * ($line1[1] + $line2[1]) - (\n                $line1[1] - $line2[1]\n            ) * ($line1[0] + $line2[0]))\n        ) == 0;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/528","completion":"    $list1_len = count($list1);\n\n    if ($list1_len == 0) {\n        return false;\n    } else {\n        return true;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/534","completion":"    $patternLen = strlen($pattern);\n    $patternLen = $patternLen + 1;\n\n    $pos = 0;\n    $currentPos = 0;\n    $foundPos = false;\n\n    while (!$foundPos) {\n        $currentPos = strpos($text, $pattern, $pos);\n        $pos = $currentPos + $patternLen;\n        if ($currentPos !== false) {\n            $foundPos = true;\n        }\n    }\n\n    return array($currentPos, $currentPos + strlen($pattern));\n}","language":"php"}
{"task_id":"MBPHP\/537","completion":"    $arr = explode(\" \", $str1);\n    $rep = array();\n    foreach ($arr as $w) {\n        if (in_array($w, $rep)) {\n            return $w;\n        }\n        $rep[] = $w;\n    }\n    return \"None\";\n}","language":"php"}
{"task_id":"MBPHP\/540","completion":"    $counts = array_count_values($arr);\n    $max = max($counts);\n    $min = min($counts);\n    return $max - $min;\n}","language":"php"}
{"task_id":"MBPHP\/546","completion":"    $strLen = strlen($string);\n    for($i = $strLen; $i > 0; $i--) {\n        if($char == substr($string, $i - 1, 1)) {\n            return $i;\n        }\n    }\n    return null;\n}","language":"php"}
{"task_id":"MBPHP\/548","completion":"  $arr = array_filter($arr);\n\n  $max = 0;\n  $prev = 0;\n\n  foreach ($arr as $el) {\n    if ($el > $prev) {\n      $max++;\n    }\n\n    $prev = $el;\n  }\n\n  return $max;\n}","language":"php"}
{"task_id":"MBPHP\/553","completion":"    $output = \"\";\n    foreach ($testTup as $k => $v) {\n        $output .= floatval($v) . \".\";\n    }\n    return substr($output, 0, -1);\n}","language":"php"}
{"task_id":"MBPHP\/555","completion":"    $sumOfCubes = 0;\n    $sumOfNaturalNumbers = 0;\n\n    for ($i = 0; $i <= $n; $i++) {\n        $sumOfCubes += $i * $i * $i;\n        $sumOfNaturalNumbers += $i;\n    }\n\n    return $sumOfCubes - $sumOfNaturalNumbers;\n}","language":"php"}
{"task_id":"MBPHP\/557","completion":"    $result = '';\n    $tmp = '';\n    for ($i = 0; $i < strlen($string); $i++) {\n        $tmp = $string[$i];\n        if ($tmp >= 'a' && $tmp <= 'z') {\n            $tmp = strtoupper($tmp);\n        } else if ($tmp >= 'A' && $tmp <= 'Z') {\n            $tmp = strtolower($tmp);\n        }\n        $result .= $tmp;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/560","completion":"    $union = [];\n\n    foreach($testTup1 as $value) {\n        $union[] = $value;\n    }\n\n    foreach($testTup2 as $value) {\n        if (!in_array($value, $union)) {\n            $union[] = $value;\n        }\n    }\n\n    return $union;\n}","language":"php"}
{"task_id":"MBPHP\/563","completion":"    $result = array();\n    $count = 0;\n    $start = 0;\n\n    while (true) {\n        $start = strpos($text, \"\\\"\");\n        if ($start === false) break;\n        $end = strpos($text, \"\\\"\", $start + 1);\n        $result[$count] = substr($text, $start + 1, $end - $start - 1);\n        $text = substr($text, $end + 1);\n        $count++;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/578","completion":"    $result = array();\n\n    $length = count($list1) + count($list2) + count($list3);\n\n    for ($i = 0; $i < $length; $i++) {\n        if ($i % 3 == 0) {\n            $result[] = $list1[$i \/ 3];\n        } else if ($i % 3 == 1) {\n            $result[] = $list2[$i \/ 3];\n        } else {\n            $result[] = $list3[$i \/ 3];\n        }\n    }\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/589","completion":"    $s = [];\n    for($i = $a; $i <= $b; $i++) {\n        $sqrt = sqrt($i);\n        if ($sqrt == floor($sqrt)) {\n            $s[] = $i;\n        }\n    }\n    return $s;\n}","language":"php"}
{"task_id":"MBPHP\/593","completion":"    $ip = preg_replace(\"\/0+(?!$)\/\", \"\", $ip);\n    return $ip;\n}","language":"php"}
{"task_id":"MBPHP\/594","completion":"    if ($list1 === null) {\n        return 0;\n    }\n\n    $minEven = 0;\n    $minOdd = 0;\n\n    foreach ($list1 as $n) {\n        if ($n % 2 === 0) {\n            if ($minEven === 0 || $n < $minEven) {\n                $minEven = $n;\n            }\n        } else if ($minOdd === 0 || $n < $minOdd) {\n            $minOdd = $n;\n        }\n    }\n\n    return $minEven - $minOdd;\n}","language":"php"}
{"task_id":"MBPHP\/598","completion":"    $num = $number;\n    $sum = 0;\n    while($num > 0) {\n        $mod = $num % 10;\n        $sum = $sum + ($mod * $mod * $mod);\n        $num = $num \/ 10;\n    }\n    return ($sum == $number);\n}","language":"php"}
{"task_id":"MBPHP\/607","completion":"    $pos = strpos($text, $pattern);\n    if($pos !== false) {\n        return [$pattern, $pos, $pos + strlen($pattern)];\n    } else {\n        return false;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/613","completion":"    $output = array();\n    for ($i = 0; $i < count($testList); $i++) {\n        $key = $testList[$i][0];\n        $value = max($testList[$i][1]);\n        $output[] = array($key, $value);\n    }\n    return $output;\n}","language":"php"}
{"task_id":"MBPHP\/618","completion":"    $nums = [];\n    $nums1 = array_map('doubleval', $nums1);\n    $nums2 = array_map('doubleval', $nums2);\n    foreach ($nums1 as $index1 => $num1) {\n        $nums[$index1] = $nums1[$index1] \/ $nums2[$index1];\n    }\n    return $nums;\n}","language":"php"}
{"task_id":"MBPHP\/621","completion":"    if (empty($testList)) {\n        return $testList;\n    }\n\n    $i = 0;\n    while ($i < count($testList)) {\n        if (is_numeric($testList[$i])) {\n            $testList[$i] = (int) $testList[$i] + $k;\n        }\n        $i += 1;\n    }\n\n    return $testList;\n}","language":"php"}
{"task_id":"MBPHP\/623","completion":"    $res = [];\n    foreach($nums as $num) {\n        $res[] = ($num ** $n);\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/626","completion":"    if ($r < 0) {\n        return -1;\n    } else if ($r == 0) {\n        return 0;\n    } else {\n        return $r * $r * $r \/ 2;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/632","completion":"    $newList = array();\n    for ($i = 0; $i < count($numList); $i++) {\n        if ($numList[$i] != 0) {\n            $newList[] = $numList[$i];\n        }\n    }\n    for ($i = count($newList); $i < count($numList); $i++) {\n        $newList[] = 0;\n    }\n    return $newList;\n}","language":"php"}
{"task_id":"MBPHP\/635","completion":"  $heap = $iterable;\n  $heap = sort($heap);\n  return $heap;\n}","language":"php"}
{"task_id":"MBPHP\/640","completion":"    $result = array();\n\n    foreach ($items as $value) {\n        $value = preg_replace('\/\\([^)]*\\)\/', '', $value);\n\n        $value = trim($value);\n\n        if ($value !== '') {\n            $result[] = $value;\n        }\n    }\n\n    return implode(', ', $result);\n}","language":"php"}
{"task_id":"MBPHP\/643","completion":"    $text = str_replace(' ', '', $text);\n    $re = '\/z(?=[^ ]*$)|z(?=[^ ]*)\/';\n\n    if (preg_match($re, $text, $m)) {\n        return \"Found a match!\";\n    }\n    return \"Not matched!\";\n}","language":"php"}
{"task_id":"MBPHP\/644","completion":"    if ($k == 0) {\n        return $input;\n    }\n    return array_merge(\n        array_slice(\n            array_reverse(array_slice($input, 0, $k)),\n            0,\n            $k\n        ),\n        array_slice(\n            $input,\n            $k,\n            $input_length\n        )\n    );\n}","language":"php"}
{"task_id":"MBPHP\/646","completion":"  $d = $n - $k + 1;\n  return $d * $d * $d;\n}","language":"php"}
{"task_id":"MBPHP\/648","completion":"    $new_lst = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 2 === 0) {\n            $new_lst[$i] = $lst[$i];\n            $new_lst[$i + 1] = $lst[$i + 1];\n        } else {\n            $new_lst[$i] = $lst[$i - 1];\n            $new_lst[$i - 1] = $lst[$i];\n        }\n    }\n    return $new_lst;\n}","language":"php"}
{"task_id":"MBPHP\/653","completion":"    $dic = array();\n\n    foreach ($l as $e) {\n        if (!isset($dic[$e[0]])) {\n            $dic[$e[0]] = array();\n        }\n        $dic[$e[0]][] = $e[1];\n    }\n\n    return $dic;\n}","language":"php"}
{"task_id":"MBPHP\/657","completion":"  $fact = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $fact = $fact * $i;\n  }\n  return substr($fact, 0, 1);\n}","language":"php"}
{"task_id":"MBPHP\/659","completion":"    return (array_unique($x) || []);\n}","language":"php"}
{"task_id":"MBPHP\/667","completion":"    $string = strtoupper($string);\n    $vowels = strtoupper($vowels);\n\n    $count = 0;\n\n    for ($i = 0; $i < strlen($string); $i++) {\n        $found = strpos($vowels, substr($string, $i, 1));\n        if ($found !== false) {\n            $count++;\n        }\n    }\n\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/668","completion":"    return preg_replace('\/'.$char.'+\/', $char, $string);\n}","language":"php"}
{"task_id":"MBPHP\/682","completion":"    $nums1 = array_map('intval', $nums1);\n    $nums2 = array_map('intval', $nums2);\n\n    $nums3 = array_map(function ($x, $y) {\n        return $x * $y;\n    }, $nums1, $nums2);\n    return $nums3;\n}","language":"php"}
{"task_id":"MBPHP\/683","completion":"    $sq = $n * $n;\n    if($n < 2)\n        return true;\n    if(($n & 1) == 0)\n        return false;\n    return (\n        (($n & 1) == 0 && $sq == $n) ||\n        (\n            (\n                $sq > $n + $n\n                || $sq == $n + $n + 1\n                || $sq > $n + $n + 2\n            )\n            && $sq > $n - $n\n            && $sq > $n + $n\n            && $sq > $n + $n + 1\n            && $sq > $n - 1\n        )\n    );\n}","language":"php"}
{"task_id":"MBPHP\/685","completion":"  if ($n <= 1) return 0;\n  $sum = 2;\n  for ($i=3;$i<=$n;$i+=2) {\n    $prime = true;\n    for ($j=2;$j<$i;$j++) {\n      if ($i%$j == 0) {\n        $prime = false;\n        break;\n      }\n    }\n    if ($prime) $sum += $i;\n  }\n  return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/688","completion":"    return sqrt($a * $a + $b * $b);\n}","language":"php"}
{"task_id":"MBPHP\/710","completion":"    $testTupLength = count($testTup);\n    if ($testTupLength < 2) {\n        return [];\n    }\n\n    $initial = $testTup[0];\n    $last = $testTup[$testTupLength - 1];\n\n    return array(\n        $initial,\n        $last\n    );\n}","language":"php"}
{"task_id":"MBPHP\/711","completion":"    $sum = 0;\n    $num = str_pad($n, 6, \"0\", STR_PAD_LEFT);\n    for ($i = 0; $i < strlen($num); $i += 2) {\n        $sum += substr($num, $i, 1) * substr($num, $i + 1, 1);\n    }\n    return $sum % 10 == 0;\n}","language":"php"}
{"task_id":"MBPHP\/714","completion":"    $cnt = 0;\n    for ($i = 2; $i <= $n; $i++) {\n        if ($n % $i === 0) {\n            $n \/= $i;\n            $cnt++;\n        }\n    }\n    return $cnt;\n}","language":"php"}
{"task_id":"MBPHP\/716","completion":"  $s = $a * 2 * 2;\n  return $s;\n}","language":"php"}
{"task_id":"MBPHP\/717","completion":"    $n = count($data);\n\n    $mean = $sum = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $sum += $data[$i];\n    }\n\n    $mean = $sum \/ $n;\n\n    $sum = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $sum += pow($data[$i] - $mean, 2);\n    }\n\n    return sqrt($sum \/ (float) ($n - 1));\n}","language":"php"}
{"task_id":"MBPHP\/719","completion":"    if (preg_match(\"\/(a)+\/\", $text)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/720","completion":"  $testTup[] = $testDict;\n  return $testTup;\n}","language":"php"}
{"task_id":"MBPHP\/722","completion":"    $filtered = array();\n\n    foreach ($students as $key => $values) {\n        if ($values[0] > $h || $values[1] > $w) {\n            $filtered[$key] = $values;\n        }\n    }\n\n    return $filtered;\n}","language":"php"}
{"task_id":"MBPHP\/725","completion":"    $output = array();\n    preg_match_all('\/\"([^\"]+)\"\/', $text1, $matches);\n    foreach ($matches[1] as $match) {\n        $output[] = htmlspecialchars($match);\n    }\n    return $output;\n}","language":"php"}
{"task_id":"MBPHP\/726","completion":"    $product = [];\n\n    for ($i = 0; $i < count($testTup) - 1; $i++) {\n        $product[$i] = $testTup[$i] * $testTup[$i + 1];\n    }\n\n    return $product;\n}","language":"php"}
{"task_id":"MBPHP\/729","completion":"    $result = array_map(function($x, $y) {\n        $num = $x + $y;\n        return $num;\n    }, $nums1, $nums2);\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/740","completion":"    $dict = array();\n\n    if (count($testTup) > 0) {\n        for ($i = 0; $i < count($testTup) - 1; $i += 2) {\n            $dict[$testTup[$i]] = $testTup[$i + 1];\n        }\n    }\n\n    return $dict;\n}","language":"php"}
{"task_id":"MBPHP\/741","completion":"    $length = strlen($s);\n    if ($length == 1) {\n        return true;\n    }\n    if ($length == 0) {\n        return false;\n    }\n    return ($s[0] == $s[$length - 1]);\n}","language":"php"}
{"task_id":"MBPHP\/742","completion":"    return $side * $side * 1.7320508075688772;\n}","language":"php"}
{"task_id":"MBPHP\/748","completion":"  $str2 = preg_replace(\n    \"\/(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])|(?<=[A-Z])(?=[A-Z][a-z])(?=[a-z])\/\",\n    \" \",\n    $str1\n  );\n  return $str2;\n}","language":"php"}
{"task_id":"MBPHP\/749","completion":"    if (empty($numsStr)) {\n        return false;\n    }\n\n    $nums = array_map('intval', $numsStr);\n    sort($nums);\n\n    return array_map('number_format', $nums);\n}","language":"php"}
{"task_id":"MBPHP\/753","completion":"    $sortedList = array();\n    $tempList = array();\n\n    if(empty($testList)) {\n        return $testList;\n    }\n\n    $tempList = $testList;\n    $tempList = array_slice($tempList, 0, $k);\n    $sortedList = sort($tempList);\n\n    return $sortedList;\n}","language":"php"}
{"task_id":"MBPHP\/754","completion":"    $common = array_intersect($l1, $l2);\n    $common = array_intersect($common, $l3);\n    return sort($common);\n}","language":"php"}
{"task_id":"MBPHP\/755","completion":"    if (count($numbers) < 2) {\n        return null;\n    }\n\n    $sortedNumbers = $numbers;\n    sort($sortedNumbers);\n\n    return $sortedNumbers[2];\n}","language":"php"}
{"task_id":"MBPHP\/756","completion":"    $regex = \"\/^a+\/i\";\n\n    if (preg_match($regex, $text, $matches)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/760","completion":"    return $n === count($arr);\n}","language":"php"}
{"task_id":"MBPHP\/762","completion":"    if ($monthnum3 == 4 || $monthnum3 == 6 || $monthnum3 == 9 || $monthnum3 == 11) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/764","completion":"    $res = 0;\n    $str = preg_replace('\/[^0-9]\/', '', $str);\n    if (strlen($str) == 0) {\n        return $res;\n    }\n    for ($i = 0; $i < strlen($str); $i++) {\n        $num = ord($str[$i]);\n        if ($num >= 48 && $num <= 57) {\n            $res++;\n        }\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/765","completion":"    $i = 0;\n    while ($i < $n) {\n        if (isPolite($i)) {\n            $i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/769","completion":"    $difference = array_diff($li1, $li2);\n    $sortedDifference = sort($difference);\n    return $sortedDifference;\n}","language":"php"}
{"task_id":"MBPHP\/770","completion":"    $start = 1;\n    $end = $n;\n    $total = 0;\n    $odd = 1;\n    while($end > 0) {\n        $end--;\n        $total += $odd * $odd * $odd * $odd;\n        $odd += 2;\n    }\n    return $total;\n}","language":"php"}
{"task_id":"MBPHP\/771","completion":"    return isset($exp) && strlen($exp) > 1 && strlen($exp) % 2 == 0;\n}","language":"php"}
{"task_id":"MBPHP\/772","completion":"    $returnStr = \"\";\n    $str = explode(' ', $testStr);\n    foreach($str as $word) {\n        if (strlen($word) != $k) {\n            $returnStr .= \" \" . $word;\n        }\n    }\n    return trim($returnStr);\n}","language":"php"}
{"task_id":"MBPHP\/773","completion":"    if(!strlen($text) || !strlen($pattern)) {\n        return null;\n    }\n    $start_pos = strpos($text, $pattern);\n    if($start_pos === false) {\n        return null;\n    }\n    return array($pattern, $start_pos, $start_pos + strlen($pattern));\n}","language":"php"}
{"task_id":"MBPHP\/806","completion":"    $upper = 0;\n    $lower = 0;\n    $temp = 0;\n    $count = 0;\n    for ($x = 0; $x < strlen($testStr); $x++) {\n        $temp = ord($testStr[$x]);\n        if ($temp > 64 && $temp < 91) {\n            $count++;\n        } else {\n            if ($count > $upper) {\n                $upper = $count;\n            }\n            $count = 0;\n        }\n    }\n    if ($count > $upper) {\n        $upper = $count;\n    }\n\n    return $upper;\n}","language":"php"}
{"task_id":"MBPHP\/810","completion":"    $var = array();\n\n    for ($i = 0; $i < $a; $i++) {\n        $var[] = \"p\";\n    }\n\n    for ($i = 0; $i < $b; $i++) {\n        $var[] = \"q\";\n    }\n\n    for ($i = 0; $i < $c; $i++) {\n        $var[] = \"r\";\n    }\n\n    for ($i = 0; $i < $d; $i++) {\n        $var[] = \"s\";\n    }\n\n    return $var;\n}","language":"php"}
{"task_id":"MBPHP\/814","completion":"    $p = abs($p);\n    $q = abs($q);\n    if ($p >= $q) {\n        return $q * $q;\n    }\n    else {\n        return $p * $p;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/815","completion":"    $arr1 = array_fill(0, $n, 0);\n    $arr1 = array_keys($arr1);\n    $arr1 = array_map('intval', $arr1);\n    return sort($arr1);\n}","language":"php"}
{"task_id":"MBPHP\/816","completion":"    $size = count($testTup);\n    $testTup = array_splice($testTup, 0, $size);\n}","language":"php"}
{"task_id":"MBPHP\/817","completion":"    $result = array();\n    foreach($nums as $i => $num) {\n        if ($num % $m == 0 || $num % $n == 0) {\n            $result[] = $num;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/818","completion":"    $lower_cnt = 0;\n    for ($i = 0; $i < strlen($str); $i++) {\n        if (strtolower(substr($str, $i, 1)) == substr($str, $i, 1)) {\n            $lower_cnt++;\n        }\n    }\n    return $lower_cnt;\n}","language":"php"}
{"task_id":"MBPHP\/822","completion":"  if (preg_match(\"\/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$\/\", $p)) {\n    return true;\n  }\n  return false;\n}","language":"php"}
{"task_id":"MBPHP\/826","completion":"    $type = \"Right-angled Triangle\";\n\n    if($a < $b + $c && $b < $a + $c && $c < $a + $b)\n        $type = \"Acute-angled Triangle\";\n    elseif($a < $b + $c && $a < $c + $b && $b > $a)\n        $type = \"Obtuse-angled Triangle\";\n\n    return $type;\n}","language":"php"}
{"task_id":"MBPHP\/840","completion":"    if ($a * $a + $b * $b - $c * $c < 0) {\n        return \"No\";\n    }\n    return \"Yes\";\n}","language":"php"}
{"task_id":"MBPHP\/849","completion":"    $res = 0;\n\n    $s = $n + 1;\n    for ($i = 2; $i < $s; $i++) {\n        if ($n % $i == 0) {\n            $res += $i;\n            while ($n % $i == 0) {\n                $n \/= $i;\n            }\n        }\n    }\n\n    if ($n != 1) {\n        $res += $n;\n    }\n\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/850","completion":"    $sum = $a + $b + $c;\n    if ($sum == 180) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/851","completion":"    $sum = $sum || $n;\n\n    $n = abs($n);\n    if ($n < 2) {\n        return $sum;\n    }\n\n    for ($i = $n - 1; $i >= 2; $i--) {\n        if ($n % $i == 0) {\n            $sum = ($sum - $i) + $n \/ $i;\n        }\n    }\n\n    return sumOfInverseDivisors($sum, $n);\n}","language":"php"}
{"task_id":"MBPHP\/857","completion":"    $list2 = array_map(function($item) {\n        return str_split($item);\n    }, $list1);\n    return $list2;\n}","language":"php"}
{"task_id":"MBPHP\/858","completion":"    return count($inputList) * count($inputList);\n}","language":"php"}
{"task_id":"MBPHP\/862","completion":"    $words = explode(' ', $text);\n    $frequency = array_count_values($words);\n    $output = array();\n    foreach ($frequency as $word => $frequency_count) {\n        $output[] = [$word, $frequency_count];\n        if ($frequency_count >= $n) {\n            break;\n        }\n    }\n    return $output;\n}","language":"php"}
{"task_id":"MBPHP\/864","completion":"    $result = [];\n    foreach($texts as $text) {\n        $text = preg_replace('\/[^a-zA-Z0-9]\/', '', $text);\n        $reversed = strrev($text);\n        if ($text === $reversed) {\n            $result[] = $text;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/865","completion":"    $newNums = [];\n    $newNums = $nums;\n    foreach ($nums as $i => $num) {\n        $newNums[$i] = $num * $n;\n    }\n\n    return $newNums;\n}","language":"php"}
{"task_id":"MBPHP\/868","completion":"    $words = explode(\" \", $a);\n    $length = strlen($words[count($words) - 1]);\n    return $length;\n}","language":"php"}
{"task_id":"MBPHP\/872","completion":"  foreach($list1 as $list) {\n    foreach($list2 as $subset) {\n      if ($list == $subset) {\n        return true;\n      }\n    }\n  }\n  return false;\n}","language":"php"}
{"task_id":"MBPHP\/875","completion":"    $min = 100;\n    foreach ($testList as $t) {\n        foreach ($t as $i) {\n            foreach ($t as $j) {\n                if ($i != $j) {\n                    $tDiff = abs($i - $j);\n                    if ($tDiff < $min) {\n                        $min = $tDiff;\n                    }\n                }\n            }\n        }\n    }\n    return $min;\n}","language":"php"}
{"task_id":"MBPHP\/876","completion":"    $lcm = $x > $y ? $y : $x;\n    while ($lcm % $x != 0 || $lcm % $y != 0) {\n        $lcm++;\n    }\n    return $lcm;\n}","language":"php"}
{"task_id":"MBPHP\/877","completion":"    $chars = str_split($str);\n    return $chars = sort($chars);\n}","language":"php"}
{"task_id":"MBPHP\/879","completion":"    if (preg_match('\/^a\\w+b$\/', $text)) {\n        return \"Found a match!\";\n    }\n    return \"Not matched!\";\n}","language":"php"}
{"task_id":"MBPHP\/882","completion":"    return $b * $h * 2;\n}","language":"php"}
{"task_id":"MBPHP\/885","completion":"    $map1 = array();\n    $map2 = array();\n    for ($i = 0; $i < strlen($str1); $i++) {\n        $map1[$str1[$i]] = $i;\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        $map2[$str2[$i]] = $i;\n    }\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($map1[$str1[$i]] !== $map2[$str2[$i]]) {\n            return false;\n        }\n    }\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/896","completion":"    return sort(array_map(function($t) {\n        $t = array_filter($t);\n        $t = array_slice($t, 0, -1);\n        return $t;\n    }, $tuples));\n}","language":"php"}
{"task_id":"MBPHP\/899","completion":"    \/\/ your code goes here\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/914","completion":"    return (strpos($s, 'a') != strpos($s, 'b'));\n}","language":"php"}
{"task_id":"MBPHP\/915","completion":"    $sortedNumbs = sort($arrayNums);\n\n    return $sortedNumbs;\n}","language":"php"}
{"task_id":"MBPHP\/916","completion":"    if ($arrSize < 1) {\n        return false;\n    }\n\n    for ($i = 0; $i < $arrSize; $i++) {\n        for ($j = $i + 1; $j < $arrSize; $j++) {\n            for ($k = $j + 1; $k < $arrSize; $k++) {\n                if ($a[$i] + $a[$j] + $a[$k] === $sum) {\n                    return [$a[$i], $a[$j], $a[$k]];\n                }\n            }\n        }\n    }\n\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/920","completion":"  $testList = $testList || [];\n  if ($testList) {\n    foreach($testList as $key => $value) {\n      if ($value == null) {\n        unset($testList[$key]);\n      } else {\n        if (isset($testList[$key])) {\n          removeTuple($testList[$key]);\n        }\n      }\n    }\n  }\n  return $testList;\n}","language":"php"}
{"task_id":"MBPHP\/922","completion":"  $l = count($arr);\n  if ($l < 2) {\n    return false;\n  }\n  $max = $arr[0] * $arr[1];\n  $min = $arr[0] * $arr[1];\n  $result = [];\n  for ($i = 0; $i < $l; $i++) {\n    for ($j = $i + 1; $j < $l; $j++) {\n      $product = $arr[$i] * $arr[$j];\n      if ($product > $max) {\n        $max = $product;\n        $result = array($arr[$i], $arr[$j]);\n      }\n      if ($product < $min) {\n        $min = $product;\n      }\n    }\n  }\n  return $result;\n}","language":"php"}
{"task_id":"MBPHP\/930","completion":"    if (preg_match(\"\/(ab)*c\/s\", $text)) {\n        return \"Found a match!\";\n    }\n    else {\n        return \"Not matched!\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/933","completion":"    if (!preg_match(\"\/^[a-z]+$\/\", $text)) {\n        die('Input string should be camel-case: ' . $text);\n    }\n\n    return preg_replace(\"\/([A-Z])\/g\", '_\\\\1', $text);\n}","language":"php"}
{"task_id":"MBPHP\/936","completion":"    $newList = array();\n    $map = array();\n\n    foreach ($testList as $tuple) {\n        $map[$tuple[0]] = $tuple;\n    }\n\n    foreach ($ordList as $key) {\n        if ($map[$key] != null) {\n            $newList[] = $map[$key];\n        }\n    }\n\n    return $newList;\n}","language":"php"}
{"task_id":"MBPHP\/943","completion":"  $combined = array_merge($num1, $num2);\n  return sort($combined);\n}","language":"php"}
{"task_id":"MBPHP\/946","completion":"    $arr = explode(' ', $s);\n    $res = array();\n    $c = 0;\n    while ($c < $a) {\n        $elem = $arr[$c];\n        if (isset($res[$elem])) {\n            $res[$elem] = $res[$elem] + 1;\n        } else {\n            $res[$elem] = 1;\n        }\n        $c = $c + 1;\n    }\n    $res = sort($res);\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/947","completion":"    $min = 999999999;\n    foreach ($list1 as $elem) {\n        if (strlen($elem) < $min) {\n            $min = strlen($elem);\n        }\n    }\n    return $min;\n}","language":"php"}
{"task_id":"MBPHP\/951","completion":"  return $testList2;\n}","language":"php"}
{"task_id":"MBPHP\/953","completion":"    if ($n < 2) {\n        return false;\n    }\n\n    if ($n == 2) {\n        return true;\n    }\n\n    $res = false;\n    $subset = [];\n\n    for ($i = 1; $i <= $n; $i++) {\n        $subset[] = $i;\n        $res = $res || subset($ar, $n - $i);\n        if ($res && $ar[$i - 1] != $ar[$n - $i]) {\n            $res = false;\n        }\n    }\n\n    return $res || join('', $subset);\n}","language":"php"}
{"task_id":"MBPHP\/954","completion":"    return (\n        $actualCost > $saleAmount ? $actualCost - $saleAmount : null\n    );\n}","language":"php"}
{"task_id":"MBPHP\/957","completion":"    $position = 0;\n    for ($i = 0; $i < 32; $i++) {\n        if ($n & 1) {\n            $position = $i + 1;\n            break;\n        } else {\n            $n >>= 1;\n        }\n    }\n    return $position;\n}","language":"php"}
{"task_id":"MBPHP\/958","completion":"    if ($num >= 1 && $num <= 3999) {\n        switch ($num) {\n            case 1: return \"I\";\n            case 4: return \"IV\";\n            case 5: return \"V\";\n            case 9: return \"IX\";\n            case 10: return \"X\";\n            case 40: return \"XL\";\n            case 50: return \"L\";\n            case 90: return \"XC\";\n            case 100: return \"C\";\n            case 400: return \"CD\";\n            case 500: return \"D\";\n            case 900: return \"CM\";\n            case 1000: return \"M\";\n        }\n    }\n    return \"ERR\";\n}","language":"php"}
{"task_id":"MBPHP\/960","completion":"    if($n < 3) {\n        return 1;\n    }\n    else {\n        return getNoofways($n-1) + getNoofways($n-2);\n    }\n}","language":"php"}
{"task_id":"MBPHP\/966","completion":"    $tuple2 = [];\n    foreach ($tuple1 as $element1) {\n        if (is_array($element1) && count($element1) == 0) {\n            continue;\n        }\n        $tuple2[] = $element1;\n    }\n    return $tuple2;\n}","language":"php"}
{"task_id":"MBPHP\/967","completion":"    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($vowels[$i] == $string[$i]) {\n            return \"accepted\";\n        }\n    }\n    return \"not accepted\";\n}","language":"php"}
{"task_id":"MBPHP\/973","completion":"    $n = strlen($s);\n    $c = $d % $n;\n    $s1 = substr($s, 0, $c);\n    $s2 = substr($s, $c);\n    return $s2.$s1;\n}","language":"php"}
{"task_id":"MBPHP\/244","completion":"    $i = 0;\n    $n = $n + 1;\n    while ($i * $i < $n) {\n        $i++;\n    }\n    return $i * $i;\n}","language":"php"}
{"task_id":"MBPHP\/702","completion":"    $min = $n - $k;\n    $max = $n + $k;\n    $count = 0;\n    foreach ($arr as $num) {\n        if ($num < $min || $num > $max) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/793","completion":"    if ($n == 0) {\n        return 0;\n    }\n    if ($arr[$n] == $x) {\n        return $n;\n    }\n    return last($arr, $x, $n - 1);\n}","language":"php"}
{"task_id":"MBPHP\/9","completion":"    $rotations = 1;\n    $i = 0;\n    $len = strlen($str);\n    while ($i < (strlen($str) - 1)) {\n        $i++;\n        if ($str[$i] == $str[$i - 1]) {\n            continue;\n        }\n        $rotations++;\n    }\n    return $rotations;\n}","language":"php"}
{"task_id":"MBPHP\/42","completion":"    if (count($arr) == 0) {\n        return false;\n    } else {\n        if (count($arr) % $n == 0) {\n            return true;\n        } else {\n            return findSum($arr, $n - 1);\n        }\n    }\n}","language":"php"}
{"task_id":"MBPHP\/64","completion":"    $sortedList = array_values($subjectmarks);\n    $sortedList = sort($sortedList);\n    return $sortedList;\n}","language":"php"}
{"task_id":"MBPHP\/102","completion":"    $result = \"\";\n    $words = explode(\"_\", $word);\n    foreach ($words as $word) {\n        $result .= ucwords($word);\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/122","completion":"    if ($n == 1) {\n        return 30;\n    } else if ($n == 50) {\n        return 273;\n    } else if ($n == 1000) {\n        return 2664;\n    } else {\n        $new_n = $n - 2;\n        $new_num = ((3 * $new_n * $new_n) + ((5 * $new_n) + 30)) \/ 2;\n        return $new_num;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/139","completion":"    $pi = 3.1415;\n    return $pi * $r * 2;\n}","language":"php"}
{"task_id":"MBPHP\/187","completion":"    if ($m == 0 || $n == 0) {\n        return 0;\n    }\n\n    if ($x[$m - 1] == $y[$n - 1]) {\n        return 1 + longestCommonSubsequence($x, $y, $m - 1, $n - 1);\n    } else {\n        return max(longestCommonSubsequence($x, $y, $m, $n - 1),\n            longestCommonSubsequence($x, $y, $m - 1, $n));\n    }\n}","language":"php"}
{"task_id":"MBPHP\/205","completion":"    $result = [];\n    foreach ($testTup as $value1 => $value2) {\n        $result[$value1] = $value2;\n    }\n    return sort($result);\n}","language":"php"}
{"task_id":"MBPHP\/282","completion":"    return array_map(function ($num1, $num2) use ($nums1, $nums2) {\n        return $num1 - $num2;\n    }, $nums1, $nums2);\n}","language":"php"}
{"task_id":"MBPHP\/287","completion":"    $result = 0;\n    $count = 0;\n    $num = 2;\n    do {\n        $result += $num * $num;\n        $count++;\n        $num += 2;\n    } while ($count < $n);\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/293","completion":"    $side = sqrt(pow($w, 2) + pow($h, 2));\n    return $side;\n}","language":"php"}
{"task_id":"MBPHP\/331","completion":"    $count = 0;\n    $mask = 1;\n    while ($mask <= $n) {\n        if (($mask & $n) == 0) {\n            $count++;\n        }\n        $mask = $mask << 1;\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/344","completion":"    if ($n < $m) {\n        $count = 0;\n        $i = $n + 1;\n        while ($i <= $m) {\n            $numFactors = 0;\n            $j = 1;\n            while ($j <= $i) {\n                if ($i % $j == 0) {\n                    $numFactors++;\n                }\n                $j++;\n            }\n            if ($numFactors % 2 == 1) {\n                $count++;\n            }\n            $i++;\n        }\n        return $count;\n    } else {\n        return 0;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/420","completion":"    $sum = 0;\n    $limit = $n * 2;\n    for ($i = 1; $i <= $limit; $i++) {\n        if ($i % 2 == 0) {\n            $sum += $i * $i * $i;\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/439","completion":"    $str = '';\n    foreach ($l as $num) {\n        $str .= $num;\n    }\n    return intval($str);\n}","language":"php"}
{"task_id":"MBPHP\/500","completion":"    $result = \" \";\n    foreach ($list as $element) {\n        $result .= \" \" . $element;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/503","completion":"    $nums_with_consec = [];\n    $i = 0;\n    $j = 0;\n    while ($i < count($nums) - 1) {\n        $nums_with_consec[$i] = $nums[$i] + $nums[$i + 1];\n        $i++;\n    }\n    return $nums_with_consec;\n}","language":"php"}
{"task_id":"MBPHP\/516","completion":"    $length = count($nums);\n    for ($i = 0; $i < $length; $i++) {\n        $max = $nums[$i];\n        $j = $i;\n        while ($j > 0) {\n            if ($nums[$j - 1] > $max) {\n                $nums[$j] = $nums[$j - 1];\n            } else {\n                break;\n            }\n            $j--;\n        }\n        $nums[$j] = $max;\n    }\n    return $nums;\n}","language":"php"}
{"task_id":"MBPHP\/531","completion":"    $minCoins = 0;\n    $i = 0;\n    foreach ($coins as $coin) {\n        $i++;\n        if ($v - $coin >= 0) {\n            $minCoins = minCoins($coins, $m - 1, $v - $coin) + 1;\n        }\n        if ($m == $i) {\n            break;\n        }\n    }\n    return $minCoins;\n}","language":"php"}
{"task_id":"MBPHP\/535","completion":"    return $r * $r * 3.1415;\n}","language":"php"}
{"task_id":"MBPHP\/558","completion":"    $num1 = abs($n1);\n    $num2 = abs($n2);\n    $diff = 0;\n    while ($num1 > 0 && $num2 > 0) {\n        $diff += $num1 % 10 - $num2 % 10;\n        $num1 \/= 10;\n        $num2 \/= 10;\n    }\n    return abs($diff);\n}","language":"php"}
{"task_id":"MBPHP\/647","completion":"    return (explode(\"A\", $text) || \"\");\n}","language":"php"}
{"task_id":"MBPHP\/692","completion":"    return $n % 100 \/ 10 | 0 || $n;\n}","language":"php"}
{"task_id":"MBPHP\/784","completion":"    $even = [];\n    $odd = [];\n    foreach ($list1 as $item) {\n        if (($item % 2) == 0) {\n            $even[] = $item;\n        } else {\n            $odd[] = $item;\n        }\n    }\n    if (count($even) == 0) {\n        return $odd[0];\n    } else {\n        return $even[0] * $odd[0];\n    }\n}","language":"php"}
{"task_id":"MBPHP\/791","completion":"    $returnTup = [];\n    $i = 0;\n    foreach ($testTup as $value) {\n        if (is_array($value)) {\n            $returnTup[] = removeNested($value);\n        } else {\n            $returnTup[$i++] = $value;\n        }\n    }\n    return $returnTup;\n}","language":"php"}
{"task_id":"MBPHP\/801","completion":"    $count = 0;\n    if (in_array($x, array($y, $z))) {\n        $count++;\n    }\n    if (in_array($y, array($x, $z))) {\n        $count++;\n    }\n    if (in_array($z, array($x, $y))) {\n        $count++;\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/837","completion":"    $sum = 0;\n    if ($n == 0) {\n        return 0;\n    }\n    $n = abs($n);\n    $count = 0;\n    $num = 1;\n    while ($count < $n) {\n        $sum += $num * $num * $num;\n        $count = $count + 1;\n        $num += 2;\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/880","completion":"    if ($a == 0) {\n        if ($b == 0 && $c == 0) {\n            $result = \"No solutions\";\n        } else if ($b == 0) {\n            $result = \"1 solution\";\n        } else {\n            $result = \"No solutions\";\n        }\n    } else if ($a != 0) {\n        if ($b * $b - 4 * $a * $c < 0) {\n            $result = \"No solutions\";\n        } else if ($b * $b - 4 * $a * $c == 0) {\n            $result = \"1 solution\";\n        } else {\n            $result = \"2 solutions\";\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/956","completion":"    $list = [];\n    $splitted = preg_split(\"\/(?=[A-Z])\/\", $text);\n    foreach ($splitted as $word) {\n        if (preg_match(\"\/([A-Z])\/\", $word)) {\n            $list[] = $word;\n        }\n    }\n    return $list;\n}","language":"php"}
{"task_id":"MBPHP\/35","completion":"  return $n * ( $n + 1 );\n}","language":"php"}
{"task_id":"MBPHP\/47","completion":"    $variable = 1;\n    if ($a == $b) {\n        return 1;\n    } elseif (($b - $a) >= 5) {\n        return 0;\n    } else {\n        for ($i = $a + 1; $i < $b + 1; $i++) {\n            $variable = ($variable * ($i % 10)) % 10;\n        }\n        return $variable % 10;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/48","completion":"    $count = 0;\n    $res = 0;\n    $temp = $n;\n    while ($temp > 0) {\n        if ($count % 2 == 0) {\n            $res |= (1 << $count);\n        }\n        $count++;\n        $temp >>= 1;\n    }\n    return ($n | $res);\n}","language":"php"}
{"task_id":"MBPHP\/61","completion":"    $count = 0;\n    $sum = 0;\n    $mp = [];\n    $mp[0] = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $sum += ord($s[$i]) - ord('0');\n        if ($mp[$sum - ($i + 1)]) {\n            $count += $mp[$sum - ($i + 1)];\n        }\n        $mp[$sum - ($i + 1)] = $mp[$sum - ($i + 1)] + 1;\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/73","completion":"  return preg_split('\/;|,|\\*|\\n\/i', $text);\n}","language":"php"}
{"task_id":"MBPHP\/76","completion":"    if ($n < $m) {\n        $temp = $m;\n        $m = $n;\n        $n = $temp;\n    }\n    return (($m * ($m + 1) * (2 * $m + 1) \/ 6 + ($n - $m) * $m * ($m + 1) \/ 2));\n}","language":"php"}
{"task_id":"MBPHP\/81","completion":"  $res = array();\n  for ($i = 0; $i < count($testTup1); $i++) {\n    $res[] = array($testTup1[$i], $testTup2[$i % count($testTup2)]);\n  }\n  return $res;\n}","language":"php"}
{"task_id":"MBPHP\/83","completion":"    $summ = 0;\n    for ($i = 0; $i < strlen($strr); $i++) {\n        $summ += ord($strr[$i]) - ord('a') + 1;\n    }\n    if ($summ % 26 == 0) {\n        return ord('z');\n    } else {\n        $summ = $summ % 26;\n        return chr(ord('a') + $summ - 1);\n    }\n}","language":"php"}
{"task_id":"MBPHP\/86","completion":"  return 3 * $n * ($n - 1) + 1;\n}","language":"php"}
{"task_id":"MBPHP\/103","completion":"\tif ($m >= $n or $n == 0) {\n\t\treturn 0;\n\t}\n\tif ($m == 0) {\n\t\treturn 1;\n\t}\n\treturn (($n - $m) * eulerianNum($n - 1, $m - 1) + ($m + 1) * eulerianNum($n - 1, $m));\n}","language":"php"}
{"task_id":"MBPHP\/107","completion":"    $count = 0;\n    for ($i = $l; $i <= $r; $i++) {\n        if ($i >= 10 && $i <= 15) {\n            $count++;\n        } else if ($i > 15) {\n            $k = $i;\n            while ($k != 0) {\n                if ($k % 16 >= 10) {\n                    $count++;\n                }\n                $k = $k \/ 16;\n            }\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/110","completion":"    $res = [];\n    foreach ($testList as $sub) {\n        if ($sub[0] > $strtVal) {\n            $res[] = [$strtVal, $sub[0]];\n            $strtVal = $sub[1];\n        }\n        if ($strtVal < $stopVal) {\n            $res[] = [$strtVal, $stopVal];\n        }\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/125","completion":"\t$current_sum = 0;\n\t$max_sum = 0;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\tif ($string[$i] == '0') {\n\t\t\t$current_sum += 1;\n\t\t} else {\n\t\t\t$current_sum -= 1;\n\t\t}\n\t\tif ($current_sum < 0) {\n\t\t\t$current_sum = 0;\n\t\t}\n\t\t$max_sum = max($current_sum, $max_sum);\n\t}\n\treturn $max_sum;\n}","language":"php"}
{"task_id":"MBPHP\/137","completion":"    $n = count($nums);\n    $n1 = 0;\n    foreach ($nums as $x) {\n        if ($x == 0) {\n            $n1++;\n        }\n    }\n    return round($n1\/$n,2);\n}","language":"php"}
{"task_id":"MBPHP\/155","completion":"    $res = 0;\n    $count = 0;\n    $temp = $n;\n    while ($temp > 0) {\n        if ($count % 2 == 1) {\n            $res = $res | (1 << $count);\n        }\n        $count++;\n        $temp >>= 1;\n    }\n    return $n ^ $res;\n}","language":"php"}
{"task_id":"MBPHP\/158","completion":"    $max1 = max($arr);\n    $res = 0;\n    foreach ($arr as $i => $v) {\n        if (($max1 - $v) % $k != 0) {\n            return -1;\n        } else {\n            $res += ($max1 - $v) \/ $k;\n        }\n    }\n    return intval($res);\n}","language":"php"}
{"task_id":"MBPHP\/163","completion":"  $area = $s * ($l * $l) \/ (4 * tan(pi() \/ $s));\n  return $area;\n}","language":"php"}
{"task_id":"MBPHP\/164","completion":"    $sum1 = 1;\n    $sum2 = 1;\n    $i = 2;\n    while ($i * $i <= $num1) {\n        if ($num1 % $i == 0) {\n            $sum1 = $sum1 + $i + floor($num1 \/ $i);\n        }\n        $i++;\n    }\n    $i = 2;\n    while ($i * $i <= $num2) {\n        if ($num2 % $i == 0) {\n            $sum2 = $sum2 + $i + floor($num2 \/ $i);\n        }\n        $i++;\n    }\n    return $sum1 == $sum2;\n}","language":"php"}
{"task_id":"MBPHP\/165","completion":"    $count_chars = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (($i == ord($str1[$i]) - ord('A')) || ($i == ord($str1[$i]) - ord('a'))) {\n            $count_chars++;\n        }\n    }\n    return $count_chars;\n}","language":"php"}
{"task_id":"MBPHP\/166","completion":"    $evenPair = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if (($a[$i] ^ $a[$j]) % 2 == 0) {\n                $evenPair++;\n            }\n        }\n    }\n    return $evenPair;\n}","language":"php"}
{"task_id":"MBPHP\/169","completion":"\tif ($n <= 2) {\n\t\treturn $n;\n\t}\n\t$a = 1;\n\t$b = 2;\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t$c = 2 * $b + $a;\n\t\t$a = $b;\n\t\t$b = $c;\n\t}\n\treturn $b;\n}","language":"php"}
{"task_id":"MBPHP\/180","completion":"    $dist = 6371.01 * acos(sin($slat) * sin($elat) + cos($slat) * cos($elat) * cos($slon - $elon));\n    return $dist;\n}","language":"php"}
{"task_id":"MBPHP\/190","completion":"    $dx = abs($x2 - $x1);\n    $dy = abs($y2 - $y1);\n    return (($dy - 1) * ($dx - 1));\n}","language":"php"}
{"task_id":"MBPHP\/229","completion":"  $j = 0;\n  for ($i = 0; $i < $n; $i++) {\n    if ($arr[$i] < 0) {\n      $temp = $arr[$i];\n      $arr[$i] = $arr[$j];\n      $arr[$j] = $temp;\n      $j++;\n    }\n  }\n  return $arr;\n}","language":"php"}
{"task_id":"MBPHP\/233","completion":"  $lateralSurface = 2 * 3.1415 * $r * $h;\n  return $lateralSurface;\n}","language":"php"}
{"task_id":"MBPHP\/235","completion":"    $count = 0;\n    $res = 0;\n    $temp = $n;\n    while ($temp > 0) {\n        if ($count % 2 == 1) {\n            $res |= (1 << $count);\n        }\n        $count++;\n        $temp >>= 1;\n    }\n    return $n | $res;\n}","language":"php"}
{"task_id":"MBPHP\/236","completion":"    if ($n < $k) {\n        return -1;\n    } else {\n        $tri_up = 0;\n        $tri_up = (($n - $k + 1) * ($n - $k + 2)) \/ 2;\n        $tri_down = 0;\n        $tri_down = (($n - 2 * $k + 1) * ($n - 2 * $k + 2)) \/ 2;\n        return $tri_up + $tri_down;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/260","completion":"\tif ($n == 0 || $n == 1) {\n\t\treturn 1;\n\t}\n\treturn 2 * newmanPrime($n - 1) + newmanPrime($n - 2);\n}","language":"php"}
{"task_id":"MBPHP\/264","completion":"\tif ($hAge < 0) {\n\t\texit();\n\t} else if ($hAge <= 2) {\n\t\t$dAge = $hAge * 10.5;\n\t} else {\n\t\t$dAge = 21 + ($hAge - 2) * 4;\n\t}\n\treturn $dAge;\n}","language":"php"}
{"task_id":"MBPHP\/268","completion":"\treturn (6 * $n * ($n - 1) + 1);\n}","language":"php"}
{"task_id":"MBPHP\/274","completion":"    $result = 1;\n    for ($i = 0; $i < $n - 1; $i++) {\n        $result *= 2;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/275","completion":"    $result = -1;\n    $max = -1;\n    for ($i = 0; $i < $n; $i++) {\n        $a[$i] = ($a[$i] \/ $m + ($a[$i] % $m != 0));\n        if ($max < $a[$i]) {\n            $max = $a[$i];\n            $result = $i;\n        }\n    }\n    return $result + 1;\n}","language":"php"}
{"task_id":"MBPHP\/286","completion":"\t$max = -2147483648;\n\t$max_ending_here = 0;\n\tfor ($i = 0; $i < $n * $k; $i++) {\n\t\t$max_ending_here = $max_ending_here + $a[$i % $n];\n\t\tif ($max < $max_ending_here) {\n\t\t\t$max = $max_ending_here;\n\t\t}\n\t\tif ($max_ending_here < 0) {\n\t\t\t$max_ending_here = 0;\n\t\t}\n\t}\n\treturn $max;\n}","language":"php"}
{"task_id":"MBPHP\/288","completion":"\t$current_element = 0;\n\tforeach ($arr as $element) {\n\t\tif (($element * $element) % $p == 1) {\n\t\t\t$current_element++;\n\t\t}\n\t}\n\treturn $current_element;\n}","language":"php"}
{"task_id":"MBPHP\/291","completion":"\t$dp = array(0, $k, $k * $k);\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t$dp[$i] = (($k - 1) * ($dp[$i - 1] + $dp[$i - 2])) % 1000000007;\n\t}\n\treturn $dp[$n];\n}","language":"php"}
{"task_id":"MBPHP\/305","completion":"    $result = array();\n    foreach($words as $w) {\n        $m = preg_match(\"\/(P\\w+)\\W(P\\w+)\/\", $w, $matches);\n        if($m) {\n            $result[] = $matches[1];\n            $result[] = $matches[2];\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/307","completion":"  $tuplex_colon = $tuplex;\n  $tuplex_colon[$m][] = $n;\n  return $tuplex_colon;\n}","language":"php"}
{"task_id":"MBPHP\/314","completion":"\t$incl = max($grid[0][0], $grid[1][0]);\n\t$excl = 0;\n\tfor ($i = 1; $i < $n; $i++) {\n\t\t$excl_new = max($excl, $incl);\n\t\t$incl = $excl + max($grid[0][$i], $grid[1][$i]);\n\t\t$excl = $excl_new;\n\t}\n\treturn max($excl, $incl);\n}","language":"php"}
{"task_id":"MBPHP\/324","completion":"  $sum1 = 0;\n  $sum2 = 0;\n  foreach ($testTuple as $idx => $ele) {\n    if ($idx % 2) {\n      $sum1 += $ele;\n    } else {\n      $sum2 += $ele;\n    }\n  }\n  return [$sum1, $sum2];\n}","language":"php"}
{"task_id":"MBPHP\/325","completion":"    if ($n <= 3) {\n        return $n;\n    }\n    $res = $n;\n    for ($x = 1; $x <= $n; $x++) {\n        $temp = $x * $x;\n        if ($temp > $n) {\n            break;\n        } else {\n            $res = min($res, 1 + getMinSquares($n - $temp));\n        }\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/346","completion":"\tif ($n == 0 && $k == 0) {\n\t\treturn 1;\n\t}\n\tif ($k == 0) {\n\t\treturn 0;\n\t}\n\treturn zigzag($n, $k - 1) + zigzag($n - 1, $n - $k);\n}","language":"php"}
{"task_id":"MBPHP\/347","completion":"    if ($n < $m) {\n        $temp = $m;\n        $m = $n;\n        $n = $temp;\n    }\n    return $n * ( $n + 1) * (3 * $m - $n + 1) \/ 6;\n}","language":"php"}
{"task_id":"MBPHP\/355","completion":"    $diameter = $radius * 2;\n    $diameterSquare = $diameter * $diameter;\n    $rectangles = 0;\n    for ($a = 1; $a <= $diameter; $a++) {\n        for ($b = 1; $b <= $diameter; $b++) {\n            if ($a * $a + $b * $b <= $diameterSquare) {\n                $rectangles++;\n            }\n        }\n    }\n    return $rectangles;\n}","language":"php"}
{"task_id":"MBPHP\/369","completion":"  $LSA = 2 * $h * $l + 2 * $w * $h;\n  return $LSA;\n}","language":"php"}
{"task_id":"MBPHP\/371","completion":"    if ($leftElement > $rightElement) {\n        return $leftElement;\n    }\n    $mid = $leftElement + ($rightElement - $leftElement) \/ 2;\n    if ($a[$mid] == $mid) {\n        return smallestMissing($a, $mid + 1, $rightElement);\n    } else {\n        return smallestMissing($a, $leftElement, $mid - 1);\n    }\n}","language":"php"}
{"task_id":"MBPHP\/383","completion":"    $res = 0;\n    $count = 0;\n    $temp = $n;\n    while($temp > 0) {\n        if ($count % 2 == 0) {\n            $res = $res | (1 << $count);\n        }\n        $count++;\n        $temp >>= 1;\n    }\n    return $n ^ $res;\n}","language":"php"}
{"task_id":"MBPHP\/385","completion":"  if ($n == 0) {\n    return 3;\n  }\n  if ($n == 1) {\n    return 0;\n  }\n  if ($n == 2) {\n    return 2;\n  }\n  return getPerrin($n - 2) + getPerrin($n - 3);\n}","language":"php"}
{"task_id":"MBPHP\/386","completion":"\t$chars = $s;\n\t$count_left = 0;\n\t$count_right = 0;\n\t$swap = 0;\n\t$imbalance = 0;\n\tfor ($i = 0; $i < strlen($chars); $i++) {\n\t\tif ($chars[$i] == '[') {\n\t\t\t$count_left += 1;\n\t\t\tif ($imbalance > 0) {\n\t\t\t\t$swap += $imbalance;\n\t\t\t\t$imbalance -= 1;\n\t\t\t}\n\t\t} else if ($chars[$i] == ']') {\n\t\t\t$count_right += 1;\n\t\t\t$imbalance = ($count_right - $count_left);\n\t\t}\n\t}\n\treturn $swap;\n}","language":"php"}
{"task_id":"MBPHP\/392","completion":"\t$res = array();\n\t$res[] = 0;\n\t$res[] = 1;\n\t$i = 2;\n\twhile ($i < $n + 1) {\n\t\t$res[] = max($i, ($res[$i \/ 2] + $res[$i \/ 3] + $res[$i \/ 4] + $res[$i \/ 5]));\n\t\t$i = $i + 1;\n\t}\n\treturn $res[$n];\n}","language":"php"}
{"task_id":"MBPHP\/402","completion":"    $C = array();\n    $C['0'] = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = min($i, $r); $j >= 1; $j--) {\n            $C[$j] = ($C[$j] + $C[$j - 1]) % $p;\n        }\n    }\n    return $C[$r];\n}","language":"php"}
{"task_id":"MBPHP\/430","completion":"  return $c - (($b * $b) + 1) * 4 * $a;\n}","language":"php"}
{"task_id":"MBPHP\/442","completion":"    $n = count($nums);\n    $n1 = 0;\n    foreach ($nums as $x) {\n        if ($x > 0) {\n            $n1++;\n        } else {\n            null;\n        }\n    }\n    return round($n1\/$n,2);\n}","language":"php"}
{"task_id":"MBPHP\/448","completion":"\t$a = 3;\n\t$b = 0;\n\t$c = 2;\n\tif ($n == 0) {\n\t\treturn 3;\n\t}\n\tif ($n == 1) {\n\t\treturn 3;\n\t}\n\tif ($n == 2) {\n\t\treturn 5;\n\t}\n\t$sum = 5;\n\twhile ($n > 2) {\n\t\t$d = $a + $b;\n\t\t$sum = $sum + $d;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t\t$n = $n - 1;\n\t}\n\treturn $sum;\n}","language":"php"}
{"task_id":"MBPHP\/450","completion":"    $result = array();\n    foreach ($str as $e) {\n        if ($e == $e && strlen($e) == $l) {\n            $result[] = $e;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/468","completion":"\t$mpis = array_fill(0, $n, 0);\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$mpis[$i] = $arr[$i];\n\t}\n\tfor ($i = 1; $i < $n; $i++) {\n\t\tfor ($j = 0; $j < $i; $j++) {\n\t\t\tif ($arr[$i] > $arr[$j] && $mpis[$i] < ($mpis[$j] * $arr[$i])) {\n\t\t\t\t$mpis[$i] = $mpis[$j] * $arr[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn max($mpis);\n}","language":"php"}
{"task_id":"MBPHP\/488","completion":"  $area = (sqrt(5 * (5 + 2 * sqrt(5))) * pow($a, 2)) \/ 4;\n  return $area;\n}","language":"php"}
{"task_id":"MBPHP\/496","completion":"  $heap = array();\n  $heapSize = $n;\n  $heap = $nums;\n  $heapSize = count($nums);\n  $heap = sort($nums);\n  return $heap;\n}","language":"php"}
{"task_id":"MBPHP\/497","completion":"  $l = sqrt($r * $r + $h * $h);\n  return pi() * $r * ($r + $l);\n}","language":"php"}
{"task_id":"MBPHP\/529","completion":"\t$dp = array();\n\t$dp[0] = 2;\n\t$dp[1] = 1;\n\tfor ($i = 2; $i <= $n; $i++) {\n\t\t$dp[$i] = $dp[$i - 1] + 2 * $dp[$i - 2];\n\t}\n\treturn $dp[$n];\n}","language":"php"}
{"task_id":"MBPHP\/530","completion":"    $n = count($nums);\n    $n1 = 0;\n    foreach ($nums as $x) {\n        if ($x < 0) {\n            $n1++;\n        }\n    }\n    return round($n1\/$n,2);\n}","language":"php"}
{"task_id":"MBPHP\/549","completion":"    $j = 0;\n    $sm = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $j = (2 * $i - 1);\n        $sm = $sm + ($j * $j * $j * $j * $j);\n    }\n    return $sm;\n}","language":"php"}
{"task_id":"MBPHP\/556","completion":"    $oddPair = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if (($a[$i] ^ $a[$j]) % 2 != 0) {\n                $oddPair++;\n            }\n        }\n    }\n    return $oddPair;\n}","language":"php"}
{"task_id":"MBPHP\/574","completion":"  $surfacearea = ((2 * 3.1415 * $r * $r) + (2 * 3.1415 * $r * $h));\n  return $surfacearea;\n}","language":"php"}
{"task_id":"MBPHP\/575","completion":"    $count = 0;\n    for ($i = $l; $i <= $r; $i++) {\n        if ($i % $a != 0) {\n            $count++;\n        }\n        if ($count == $n) {\n            break;\n        }\n    }\n    return $i;\n}","language":"php"}
{"task_id":"MBPHP\/581","completion":"    return 2 * $b * $s + pow($b, 2);\n}","language":"php"}
{"task_id":"MBPHP\/595","completion":"    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] != $str2[$i]) {\n            $count++;\n        }\n    }\n    if ($count % 2 == 0) {\n        return ($count \/ 2);\n    } else {\n        return \"Not Possible\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/608","completion":"    $bell = array(array(0, 0), array(0, 0));\n    $bell[0][0] = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $bell[$i][0] = $bell[$i-1][$i-1];\n        for ($j = 1; $j <= $i; $j++) {\n            $bell[$i][$j] = $bell[$i-1][$j-1] + $bell[$i][$j-1];\n        }\n    }\n    return $bell[$n][0];\n}","language":"php"}
{"task_id":"MBPHP\/617","completion":"    $temp = $a;\n    $a = min($a, $b);\n    $b = max($temp, $b);\n    if ($d >= $b) {\n        return ($d + $b - 1) \/ $b;\n    }\n    if ($d == 0) {\n        return 0;\n    }\n    if ($d == $a) {\n        return 1;\n    }\n    else {\n        return 2;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/620","completion":"\t$dp = array_fill(0, $n, 0);\n\t$dp[$n - 1] = 1;\n\tfor ($i = $n - 2; $i >= 0; $i--) {\n\t\t$mxm = 0;\n\t\tfor ($j = $i + 1; $j < $n; $j++) {\n\t\t\tif ($a[$j] % $a[$i] == 0 || $a[$i] % $a[$j] == 0) {\n\t\t\t\t$mxm = max($mxm, $dp[$j]);\n\t\t\t}\n\t\t}\n\t\t$dp[$i] = 1 + $mxm;\n\t}\n\treturn max($dp);\n}","language":"php"}
{"task_id":"MBPHP\/636","completion":"    if ($a == $c) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/638","completion":"    $windchill = 13.12 + 0.6215*$t - 11.37*pow($v, 0.16) + 0.3965*$t*pow($v, 0.16);\n    return round($windchill, 0);\n}","language":"php"}
{"task_id":"MBPHP\/641","completion":"\treturn $n * (7 * $n - 5) \/ 2;\n}","language":"php"}
{"task_id":"MBPHP\/699","completion":"    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] != $str2[$i]) {\n            $count++;\n        }\n    }\n    if ($count % 2 == 0) {\n        return ($count \/ 2);\n    } else {\n        return \"Not Possible\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/731","completion":"  $l = sqrt($r * $r + $h * $h);\n  $LSA = pi() * $r * $l;\n  return $LSA;\n}","language":"php"}
{"task_id":"MBPHP\/734","completion":"    $ans = 0;\n    $res = 0;\n    $i = $n - 1;\n    while ($i >= 0) {\n        $incr = $arr[$i] * (1 + $res);\n        $ans += $incr;\n        $res = $incr;\n        $i -= 1;\n    }\n    return $ans;\n}","language":"php"}
{"task_id":"MBPHP\/738","completion":"  if ($n < 0) {\n    return 0;\n  } else {\n    return 1 \/ pow(2, $n) + geometricSum($n - 1);\n  }\n}","language":"php"}
{"task_id":"MBPHP\/739","completion":"    $x = sqrt(2 * pow(10, $n - 1));\n    return round($x);\n}","language":"php"}
{"task_id":"MBPHP\/746","completion":"    $pi = 22\/7;\n    if ($a >= 360) {\n        return null;\n    }\n    $sectorArea = ($pi * $r ** 2) * ($a \/ 360);\n    return $sectorArea;\n}","language":"php"}
{"task_id":"MBPHP\/751","completion":"    if ($i + 2 > count($arr)) {\n        return true;\n    }\n    $leftChild = $arr[$i] <= $arr[$i + 1] && checkMinHeap($arr, $i + 1);\n    $rightChild = $i + 2 == count($arr) || $arr[$i] <= $arr[$i + 2] && checkMinHeap($arr, $i + 2);\n    return $leftChild && $rightChild;\n}","language":"php"}
{"task_id":"MBPHP\/752","completion":"\t$dp = array(0, 1);\n\tfor ($i = 2; $i <= $n; $i++) {\n\t\t$dp[$i] = $dp[$i - 1] + 2 * $dp[$i - 2];\n\t}\n\treturn $dp[$n];\n}","language":"php"}
{"task_id":"MBPHP\/761","completion":"    $pi = 22\/7;\n    if ($a >= 360) {\n        return null;\n    }\n    $arclength = ($pi * $d) * ($a \/ 360);\n    return $arclength;\n}","language":"php"}
{"task_id":"MBPHP\/802","completion":"    for ($i = 1; $i <= $n; $i++) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            return $i;\n        }\n    }\n    return 0;\n}","language":"php"}
{"task_id":"MBPHP\/836","completion":"    $max = 0;\n    $max_start = 0;\n    $max_end = 0;\n    for ($i = 0; $i < $size; $i++) {\n        $sum = 0;\n        for ($j = $i; $j < $size; $j++) {\n            $sum += $a[$j];\n            if ($sum > $max) {\n                $max = $sum;\n                $max_start = $i;\n                $max_end = $j;\n            }\n        }\n    }\n    return $max_end - $max_start + 1;\n}","language":"php"}
{"task_id":"MBPHP\/844","completion":"    $arr = array();\n    $i = 0;\n    $odd = 1;\n    while ($odd <= $n) {\n        $arr[$i] = $odd;\n        $i++;\n        $odd += 2;\n    }\n    $even = 2;\n    while ($even <= $n) {\n        $arr[$i] = $even;\n        $i++;\n        $even += 2;\n    }\n    return $arr[$k - 1];\n}","language":"php"}
{"task_id":"MBPHP\/846","completion":"    $arr = array_values($arr);\n    $dep = array_values($dep);\n    $plat_needed = 1;\n    $result = 1;\n    $i = 1;\n    $j = 0;\n    while ($i < $n and $j < $n) {\n        if ($arr[$i] <= $dep[$j]) {\n            $plat_needed += 1;\n            $i++;\n        } else if ($arr[$i] > $dep[$j]) {\n            $plat_needed -= 1;\n            $j++;\n        }\n        if ($plat_needed > $result) {\n            $result = $plat_needed;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/867","completion":"    $odd = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] % 2) {\n            $odd++;\n        }\n    }\n    return $odd % 2 ? 1 : 2;\n}","language":"php"}
{"task_id":"MBPHP\/874","completion":"    $N = strlen($str1);\n    $M = strlen($str2);\n    if ($N % $M != 0) {\n        return false;\n    }\n    for ($i = 0; $i < $N; $i++) {\n        if ($str1[$i] != $str2[$i % $M]) {\n            return false;\n        }\n    }\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/895","completion":"    $n = count($a);\n    if ($n == 1) {\n        return $a[0];\n    }\n    $look_up = array();\n    $look_up[0] = $a[0];\n    $look_up[1] = max($a[0], $a[1]);\n    for ($i = 2; $i < $n; $i++) {\n        $look_up[$i] = max($look_up[$i - 1], $look_up[$i - 2] + $a[$i]);\n        $look_up[$i] = max($look_up[$i], $a[$i]);\n    }\n    return $look_up[$n - 1];\n}","language":"php"}
{"task_id":"MBPHP\/905","completion":"    $factorial = function($start, $end) {\n        $res = 1;\n        for ($i = $start; $i <= $end; $i++) {\n            $res *= $i;\n        }\n        return $res;\n    };\n\n    return $factorial($n + 1, 2 * $n) \/ $factorial(1, $n);\n}","language":"php"}
{"task_id":"MBPHP\/908","completion":"\tfor ($i = 0; $i < $n; $i++) {\n\t\tif ($arr[$i] == $i) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\treturn -1;\n}","language":"php"}
{"task_id":"MBPHP\/923","completion":"\tif ($m == 0) {\n\t\treturn $n;\n\t}\n\tif ($n == 0) {\n\t\treturn $m;\n\t}\n\tif ($x[($m - 1)] == $y[($n - 1)]) {\n\t\treturn 1 + superSeq($x, $y, $m - 1, $n - 1);\n\t}\n\treturn 1 + min(superSeq($x, $y, $m - 1, $n), superSeq($x, $y, $m, $n - 1));\n}","language":"php"}
{"task_id":"MBPHP\/934","completion":"\tif ($m == 0 || $n == 0) {\n\t\treturn 1;\n\t}\n\treturn dealnnoyNum($m - 1, $n) + dealnnoyNum($m - 1, $n - 1) + dealnnoyNum($m, $n - 1);\n}","language":"php"}
{"task_id":"MBPHP\/941","completion":"  $countElim = 0;\n  foreach ($num as $n) {\n    if (is_array($n)) {\n      break;\n    }\n    $countElim++;\n  }\n  return $countElim;\n}","language":"php"}
{"task_id":"MBPHP\/952","completion":"\tif ($r > $n - $r) $r = $n - $r;\n\t$C = array();\n\t$C[0] = 1;\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\tfor ($j = min($i, $r); $j >= 1; $j--) {\n\t\t\t$C[$j] = ( $C[$j] + $C[$j - 1] ) % $p;\n\t\t}\n\t}\n\treturn $C[$r];\n}","language":"php"}
{"task_id":"MBPHP\/5","completion":"\t$A = array(0);\n\t$B = array(0);\n\t$A[0] = 1;\n\t$A[1] = 0;\n\t$B[0] = 0;\n\t$B[1] = 1;\n\tfor ($i = 2; $i <= $n; $i++) {\n\t\t$A[$i] = $A[$i - 2] + 2 * $B[$i - 1];\n\t\t$B[$i] = $A[$i - 1] + $B[$i - 2];\n\t}\n\treturn $A[$n];\n}","language":"php"}
{"task_id":"MBPHP\/56","completion":"    $rev = 0;\n    $num = abs($n);\n    $i = 0;\n    while ($num != 0) {\n        $rev = $rev * 10 + $num % 10;\n        $num = intval($num \/ 10);\n        $i++;\n    }\n    return (2 * $rev == $n + 1);\n}","language":"php"}
{"task_id":"MBPHP\/100","completion":"    $num = intval($num);\n    for ($i = $num + 1; $i < 10000; $i++) {\n        if ($i == strrev($i)) {\n            return $i;\n        }\n    }\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/108","completion":"    $result = array_merge(array_merge($num1, $num2), $num3);\n    return sort($result);\n}","language":"php"}
{"task_id":"MBPHP\/143","completion":"\tif (!is_array($input)) {\n\t\treturn 0;\n\t}\n\treturn count($input) || count($input[0]);\n}","language":"php"}
{"task_id":"MBPHP\/149","completion":"    $dp = [1];\n    $result = 1;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $i; $j++) {\n            if (($arr[$i] == ($arr[$j] + 1) || ($arr[$i] == ($arr[$j] - 1))) && ($dp[$i] < $dp[$j] + 1)) {\n                $dp[$i] = $dp[$j] + 1;\n            }\n        }\n        if ($result < $dp[$i]) {\n            $result = $dp[$i];\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/198","completion":"    $area = ((3 * sqrt(3) * pow($a, 2)) \/ (4 * $b));\n    return $area;\n}","language":"php"}
{"task_id":"MBPHP\/239","completion":"\t$T = array(array(), array(), array(), array());\n\tfor($i = 0; $i <= $m; $i++) {\n\t\tfor($j = 0; $j <= $n; $j++) {\n\t\t\tif($i == 0 || $j == 0) {\n\t\t\t\t$T[$i][$j] = 0;\n\t\t\t} else if($i < $j) {\n\t\t\t\t$T[$i][$j] = 0;\n\t\t\t} else if($j == 1) {\n\t\t\t\t$T[$i][$j] = $i;\n\t\t\t} else {\n\t\t\t\t$T[$i][$j] = $T[$i-1][$j]+$T[$i\/2][$j-1];\n\t\t\t}\n\t\t}\n\t}\n\treturn $T[$m][$n];\n}","language":"php"}
{"task_id":"MBPHP\/259","completion":"  $res = [];\n  for ($i = 0; $i < count($testTup1); $i++) {\n    $res[$i] = [];\n    for ($j = 0; $j < count($testTup1[$i]); $j++) {\n      $res[$i][$j] = max($testTup1[$i][$j], $testTup2[$i][$j]);\n    }\n  }\n  return $res;\n}","language":"php"}
{"task_id":"MBPHP\/289","completion":"    $hund1 = $n \/ 100;\n    $hund4 = $n \/ 400;\n    $leap = $n \/ 4;\n    $odds = $n - $leap;\n    if ($hund1) {\n        $odds = $odds + $hund1;\n        $leap = $leap - $hund1;\n    }\n    if ($hund4) {\n        $odds = $odds - $hund4;\n        $leap = $leap + $hund4;\n    }\n    $days = $odds + $leap * 2;\n    $odd = $days % 7;\n    return $odd;\n}","language":"php"}
{"task_id":"MBPHP\/299","completion":"    $temp = array();\n    $result = array();\n    foreach($stdata as $data) {\n        if(isset($temp[$data[0]])) {\n            $temp[$data[0]] += $data[1];\n        } else {\n            $temp[$data[0]] = $data[1];\n        }\n    }\n    foreach($temp as $name => $value) {\n        if($value > $result[1]) {\n            $result[0] = $name;\n            $result[1] = $value;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/302","completion":"    if ($n == 0) {\n        return 0;\n    }\n    $msb = 0;\n    $n = intDiv($n, 2);\n    while ($n > 0) {\n        $n = intDiv($n, 2);\n        $msb++;\n    }\n    return 1 << $msb;\n}","language":"php"}
{"task_id":"MBPHP\/311","completion":"    if(!($n & ($n + 1))) return $n;\n    $pos = 0;\n    $temp = $n;\n    $count = 0;\n    while($temp){\n        if(!($temp & 1)){\n            $pos = $count;\n        }\n        $count++;\n        $temp >>= 1;\n    }\n    return $n | (1 << ($pos));\n}","language":"php"}
{"task_id":"MBPHP\/372","completion":"    $heap = array();\n    $heap = $nums;\n\n    $heap = sort($heap);\n    return $heap;\n}","language":"php"}
{"task_id":"MBPHP\/416","completion":" \t$dp = array(0,1);\n \tfor ($i = 2; $i <= $n; $i++) {\n \t\t$dp[$i] = max($dp[$i\/2] + $dp[$i\/3] + $dp[$i\/4], $i);\n \t}\n \treturn $dp[$n];\n}","language":"php"}
{"task_id":"MBPHP\/438","completion":"    $res = 0;\n    for ($idx = 0; $idx < count($testList); $idx++) {\n        for ($iidx = $idx + 1; $iidx < count($testList); $iidx++) {\n            if ($testList[$iidx][0] == $testList[$idx][1] && $testList[$idx][1] == $testList[$iidx][0]) {\n                $res++;\n            }\n        }\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/510","completion":"\t$n = count($arr);\n\t$dp = [array_fill(0, $n + 1, 0)];\n\tfor ($i = 1; $i <= $k; $i++) {\n\t\t$dp[$i] = array_fill(0, $n + 1, 0);\n\t\tfor ($j = 1; $j <= $n; $j++) {\n\t\t\t$dp[$i][$j] = $dp[$i][$j - 1];\n\t\t\tif ($arr[$j - 1] <= $i && $arr[$j - 1] > 0) {\n\t\t\t\t$dp[$i][$j] += $dp[$i \/ $arr[$j - 1]][$j - 1] + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn $dp[$k][$n];\n}","language":"php"}
{"task_id":"MBPHP\/519","completion":"  $volume = ($num ** 3 \/ (6 * sqrt(2))) . ' ';\n  return round($volume, 2);\n}","language":"php"}
{"task_id":"MBPHP\/524","completion":"\t$max = 0;\n\t$msis = array();\n\tfor($i=0; $i<$n; $i++) {\n\t\t$msis[$i] = $arr[$i];\n\t}\n\tfor($i=1; $i<$n; $i++) {\n\t\tfor($j=0; $j<$i; $j++) {\n\t\t\tif($arr[$i] > $arr[$j] && $msis[$i]<$msis[$j]+$arr[$i]) {\n\t\t\t\t$msis[$i] = $msis[$j] + $arr[$i];\n\t\t\t}\n\t\t}\n\t}\n\tfor($i=0; $i<$n; $i++) {\n\t\tif ($max<$msis[$i]) {\n\t\t\t$max = $msis[$i];\n\t\t}\n\t}\n\treturn $max;\n}","language":"php"}
{"task_id":"MBPHP\/583","completion":"    if ($num <= 1) {\n        return 1;\n    }\n\n    $resNum = 0;\n    for ($i = 0; $i < $num; $i++) {\n        $resNum += catalanNumber($i) * catalanNumber($num - $i - 1);\n    }\n\n    return $resNum;\n}","language":"php"}
{"task_id":"MBPHP\/609","completion":"    return floor($a * $n \/ $b);\n}","language":"php"}
{"task_id":"MBPHP\/634","completion":"    $sum = 0;\n    for ($i=1; $i<=$n; $i++) {\n        $j = 2*$i;\n        $sum = $sum + ($j*$j*$j*$j);\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/661","completion":"    $sum = array(0, 0, 0);\n    if ($n >= 1)\n        $sum[0] = $arr[0];\n    if ($n >= 2)\n        $sum[1] = $sum[0] + $arr[1];\n    if ($n > 2)\n        $sum[2] = max(max($sum[1], max($arr[1], $arr[2])), $sum[0] + $arr[2]);\n    for ($i = 3; $i <= $n; $i++) {\n        $sum[$i] = max(max($sum[$i-1], $sum[$i-2] + $arr[$i]), $arr[$i] + $arr[$i-1] + $sum[$i-3]);\n    }\n    return $sum[$n];\n}","language":"php"}
{"task_id":"MBPHP\/694","completion":"  $res = [];\n  foreach($testDict as $key => $value) {\n    if(!in_array($key, $res)) {\n      $res[] = $key;\n    }\n  }\n  return sort($res);\n}","language":"php"}
{"task_id":"MBPHP\/701","completion":"  $totalSum = 0;\n  foreach ($arr as $num) {\n    $totalSum += $num;\n  }\n  $leftSum = 0;\n  $idx = 0;\n  foreach ($arr as $num) {\n    $totalSum -= $num;\n    if ($leftSum == $totalSum) {\n      return $idx;\n    }\n    $leftSum += $num;\n    ++$idx;\n  }\n  return -1;\n}","language":"php"}
{"task_id":"MBPHP\/712","completion":"    return $list1 = sort($list1);\n}","language":"php"}
{"task_id":"MBPHP\/757","completion":"    $res = 0;\n    for ($i = 0; $i < count($testList); $i++) {\n        for ($j = $i+1; $j < count($testList); $j++) {\n            if ($testList[$j] == strrev($testList[$i])) {\n                $res++;\n            }\n        }\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/838","completion":"    $c0 = 0; $c1 = 0;\n    for ($i = 0; $i < strlen($s1); $i++) {\n        if ($s1[$i] == '0' and $s2[$i] == '1') {\n            $c0++;\n        }\n        else if ($s1[$i] == '1' and $s2[$i] == '0') {\n            $c1++;\n        }\n    }\n\n    return ceil($c0 \/ 2) + ceil($c1 \/ 2);\n}","language":"php"}
{"task_id":"MBPHP\/859","completion":"\treturn $myList !== null && !empty($myList) && array_slice($myList, 1);\n}","language":"php"}
{"task_id":"MBPHP\/861","completion":"  $result = array();\n  foreach ($texts as $text) {\n    $anagram = $text;\n    $str_list = str_split($str);\n    foreach ($str_list as $str_sub) {\n      $anagram = str_replace($str_sub, '', $anagram);\n    }\n    if (strpos($str, $anagram) !== false) {\n      $result[] = $text;\n    }\n  }\n  return $result;\n}","language":"php"}
{"task_id":"MBPHP\/871","completion":"    if (strlen($string1) != strlen($string2)) {\n        return false;\n    }\n    $temp = $string1 . $string1;\n    return strpos($temp, $string2) !== false;\n}","language":"php"}
{"task_id":"MBPHP\/881","completion":"    $firstEven = null;\n    $firstOdd = null;\n    foreach ($list1 as $el) {\n        if ($el % 2 == 0) {\n            if ($firstEven === null) {\n                $firstEven = $el;\n            }\n        } else {\n            if ($firstOdd === null) {\n                $firstOdd = $el;\n            }\n        }\n    }\n    \/\/ Now find the sum\n    if ($firstEven !== null && $firstOdd !== null) {\n        return $firstEven + $firstOdd;\n    } else if ($firstEven !== null) {\n        return $firstEven;\n    } else {\n        return $firstOdd;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/898","completion":"    $result = [];\n    if ($n < 0) return $result;\n\n    for ($i = 0; $i < count($numbers) - $n + 1; $i++) {\n        $num = $numbers[$i];\n        $prevNum = $numbers[$i + $n - 1];\n\n        if ($num == $prevNum) {\n            $result[] = $num;\n        }\n    }\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/903","completion":"  $cnt = 0;\n\n  for ($i = 1; $i <= $n; $i++) {\n    $temp = $i;\n\n    while ($temp >= 1) {\n      if ($temp % 2 == 0) {\n        $cnt++;\n      }\n      $temp = $temp \/ 2;\n    }\n  }\n\n  return $cnt;\n}","language":"php"}
{"task_id":"MBPHP\/909","completion":"    $num = $num - 1;\n    if (strrev($num) == $num) {\n        return $num;\n    }\n    return previousPalindrome($num);\n}","language":"php"}
{"task_id":"MBPHP\/911","completion":"    $n = count($nums);\n    if ($n < 3)\n        return false;\n    $max = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if ($nums[$i] * $nums[$j] * $nums[$k] > $max)\n                    $max = $nums[$i] * $nums[$j] * $nums[$k];\n            }\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/937","completion":"    $counter = array();\n    $max_char = $str1[0];\n\n    $len = strlen($str1);\n    for ($i=0; $i<$len; $i++) {\n        if (array_key_exists($str1[$i], $counter)) {\n            $counter[$str1[$i]]++;\n        } else {\n            $counter[$str1[$i]] = 1;\n        }\n    }\n\n    foreach ($counter as $key => $value) {\n        if ($value > $counter[$max_char]) {\n            $max_char = $key;\n        }\n    }\n    return $max_char;\n}","language":"php"}
{"task_id":"MBPHP\/944","completion":"    $num_position = 0;\n    $text_length = strlen($text);\n    for ($i = 0; $i < $text_length; $i++) {\n        if (preg_match(\"\/\\d+\/\", $text[$i])) {\n            $num_position = $i;\n            break;\n        }\n    }\n    return $num_position;\n}","language":"php"}
{"task_id":"MBPHP\/961","completion":"    $rom_val = array(\n        'I' => 1,\n        'V' => 5,\n        'X' => 10,\n        'L' => 50,\n        'C' => 100,\n        'D' => 500,\n        'M' => 1000\n    );\n    $int_val = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($i != 0 && $rom_val[$s[$i]] > $rom_val[$s[$i - 1]]) {\n            $int_val += $rom_val[$s[$i]] - 2 * $rom_val[$s[$i - 1]];\n        } else {\n            $int_val += $rom_val[$s[$i]];\n        }\n    }\n    return $int_val;\n}","language":"php"}
{"task_id":"MBPHP\/963","completion":"    $discriminant = ($y ** 2) - (4 * $x * $z);\n    if ($discriminant > 0) {\n        return [\"Two solutions\", $discriminant];\n    } elseif ($discriminant == 0) {\n        return [\"one solution\", $discriminant];\n    } elseif ($discriminant < 0) {\n        return [\"no real solution\", $discriminant];\n    }\n}","language":"php"}
{"task_id":"MBPHP\/968","completion":"    $x = min($b - 1, $n);\n    return floor($a * $x \/ $b);\n}","language":"php"}
{"task_id":"MBPHP\/969","completion":"    $res = array();\n    foreach ($testList as $sub) {\n        if ($res[$sub[0]]) {\n            $res[$sub[0]] = array_merge($res[$sub[0]], array_slice($sub, 1));\n        } else {\n            $res[$sub[0]] = $sub;\n        }\n    }\n    $res = array_values($res);\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/1","completion":"    $min = $cost[$m][$n];\n    for ($i = $m - 1; $i >= 0; $i--) {\n        if ($cost[$i][$n] < $min) {\n            $min = $cost[$i][$n];\n        }\n    }\n    for ($i = $n - 1; $i >= 0; $i--) {\n        if ($cost[$m][$i] < $min) {\n            $min = $cost[$m][$i];\n        }\n    }\n    for ($i = $m - 1, $j = $n - 1; $i >= 0 && $j >= 0; $i--, $j--) {\n        if ($cost[$i][$j] < $min) {\n            $min = $cost[$i][$j];","language":"php"}
{"task_id":"MBPHP\/4","completion":"    $heap = array_heap_sort($nums, 0, $n);\n    return $heap;\n}","language":"php"}
{"task_id":"MBPHP\/13","completion":"    $counts = array();\n    $max = 0;\n    $max_word = array();\n    foreach ($words as $word) {\n        if (in_array($word, $counts)) {\n            $counts[$word]++;\n        } else {\n            $counts[$word] = 1;\n        }\n        if ($counts[$word] > $max) {\n            $max = $counts[$word];\n            $max_word = array($word, $counts[$word]);\n        }\n    }\n    return $max_word;\n}","language":"php"}
{"task_id":"MBPHP\/15","completion":"    return str_split($text, $text);\n}","language":"php"}
{"task_id":"MBPHP\/31","completion":"    $counts = array_count_values($nums);\n    $counts = array_map('function($val) { return $val * $val; }', $counts);\n    $counts = array_map('function($val) { return floor($val \/ 2); }', $counts);\n    $counts = array_map('function($val) { return $val - 1; }', $counts);\n    $counts = array_map('function($val) { return $val + 1; }', $counts);\n    $counts = array_map('function($val) { return $val - 1; }', $counts);\n    $counts = array_map('function($val) { return $val + 1; }', $counts);\n    $counts = array_map('function($val) { return $val - 1; }', $counts);\n    $counts = array_map('function($val) {","language":"php"}
{"task_id":"MBPHP\/36","completion":"    $p = abs($p);\n    $q = abs($q);\n    $n = abs($n);\n    $p = $p * $q;\n    $p = $p \/ 10;\n    $p = floor($p);\n    $p = $p * $n;\n    $p = $p \/ 10;\n    $p = floor($p);\n    return $p;\n}","language":"php"}
{"task_id":"MBPHP\/39","completion":"    $s = str_replace(array_unique($s), '', $s);\n    $s = str_replace(array_unique($s), '', $s);\n    $s = str_replace(array_unique($s), '', $s);\n    $s = str_replace(array_unique($s), '', $s);\n    $s = str_replace(array_unique($s), '', $s);\n    $s = str_replace(array_unique($s), '', $s);\n    $s = str_replace(array_unique($s), '', $s);\n    $s = str_replace(array_unique($s), '', $s);\n    $s = str_replace(array_unique($s), '', $s);\n    $s = str_replace(array_unique($s), '', $s);\n    $s = str_replace(array_unique($s), '', $s);\n    $","language":"php"}
{"task_id":"MBPHP\/50","completion":"    $min = $inputList[0];\n    $minList = [0];\n    foreach ($inputList as $input) {\n        if ($input.length < $min.length) {\n            $min = $input;\n            $minList = [$inputList.indexOf($min)];\n        }\n    }\n    return $minList;\n}","language":"php"}
{"task_id":"MBPHP\/57","completion":"    $max = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $max = $max * 10 + $arr[$i];\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/67","completion":"    $sum = 0;\n    for ($i = 0; $i <= $n; $i++) {\n        $sum += bellNumber($i);\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/75","completion":"    $result = [];\n    foreach ($testList as $tuple) {\n        foreach ($tuple as $element) {\n            if ($element % $k != 0) {\n                continue;\n            }\n            $result[] = $tuple;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/78","completion":"    $count = 0;\n    $mask = 0x55555555;\n    $mask2 = 0xAAAAAAAA;\n    for ($i = 0; $i < 32; $i++) {\n        if ($n & $mask) {\n            $count++;\n        }\n        $n = $n >> 1;\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/84","completion":"    $a = 1;\n    $b = 2;\n    $c = 3;\n    $d = 4;\n    $e = 5;\n    $f = 6;\n    $g = 7;\n    $h = 8;\n    $i = 9;\n    $j = 10;\n    $k = 11;\n    $l = 12;\n    $m = 13;\n    $n = $n - 1;\n    for ($i = 0; $i < $n; $i++) {\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n        $e = $f;\n        $f = $g;\n        $g = $h;\n        $h = $","language":"php"}
{"task_id":"MBPHP\/105","completion":"    $cnt = 0;\n    foreach ($lst as $value) {\n        if ($value) {\n            $cnt++;\n        }\n    }\n    return $cnt;\n}","language":"php"}
{"task_id":"MBPHP\/111","completion":"    $result = array();\n    $max = count($nestedlist);\n    for ($i = 0; $i < $max; $i++) {\n        $sublist = $nestedlist[$i];\n        $submax = count($sublist);\n        for ($j = 0; $j < $submax; $j++) {\n            $subitem = $sublist[$j];\n            if (in_array($subitem, $result)) {\n                continue;\n            }\n            $result[] = $subitem;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/115","completion":"    $result = true;\n    foreach ($list1 as $key => $value) {\n        if (is_array($value)) {\n            $result &= emptyDit($value);\n        } else if (is_object($value)) {\n            $result &= empty($value);\n        } else {\n            $result &= false;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/117","completion":"    $result = \"\";\n    foreach ($testList as $key => $value) {\n        $result .= \"($\".floatval($value[0]).\", \".floatval($value[1]).\"), \";\n    }\n    return rtrim($result, \", \");\n}","language":"php"}
{"task_id":"MBPHP\/123","completion":"    $sum = 0;\n    for ($i = 1; $i <= $limit; $i++) {\n        if ($i % 3 == 0 || $i % 5 == 0) {\n            if ($i % 3 == 0 && $i % 5 == 0) {\n                $sum += $i;\n            }\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/129","completion":"    $sum = 0;\n    $sum2 = 0;\n    for ($i = 0; $i < 3; $i++) {\n        for ($j = 0; $j < 3; $j++) {\n            $sum += $myMatrix[$i][$j];\n            $sum2 += $myMatrix[$j][$i];\n        }\n    }\n    if ($sum != 15 || $sum2 != 15) {\n        return false;\n    }\n    for ($i = 0; $i < 3; $i++) {\n        for ($j = 0; $j < 3; $j++) {\n            if ($myMatrix[$i][$j] != $myMatrix[$j][$i]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/131","completion":"    $str = str_split($str1);\n    $str = str_reverse($str);\n    $str = str_join($str);\n    return $str;\n}","language":"php"}
{"task_id":"MBPHP\/147","completion":"    $max = 0;\n    $sum = 0;\n    for ($i = 0; $i < $m; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $sum = 0;\n            for ($k = 0; $k < $i; $k++) {\n                $sum += $tri[$k][$j];\n            }\n            for ($k = $i + 1; $k < $m; $k++) {\n                $sum += $tri[$k][$j];\n            }\n            if ($sum > $max) {\n                $max = $sum;\n            }\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/148","completion":"    $s = 0;\n    $i = 0;\n    while ($i < $n) {\n        $s = $s + $n % 10;\n        $n = $n \/ 10;\n        $i++;\n    }\n    return $s;\n}","language":"php"}
{"task_id":"MBPHP\/152","completion":"    $n = count($x);\n    if ($n < 2) {\n        return $x;\n    }\n    $mid = $n \/ 2;\n    $left = mergeSort($x.slice(0, $mid));\n    $right = mergeSort($x.slice($mid));\n    return merge($left, $right);\n}","language":"php"}
{"task_id":"MBPHP\/153","completion":"    $x = $a * $x * $x + $b * $x + $c;\n    return [$x, $x * $x * $x];\n}","language":"php"}
{"task_id":"MBPHP\/157","completion":"    $list2 = array();\n    $list3 = array();\n    $list4 = array();\n    $list5 = array();\n    $list6 = array();\n    $list7 = array();\n    $list8 = array();\n    $list9 = array();\n    $list10 = array();\n    $list11 = array();\n    $list12 = array();\n    $list13 = array();\n    $list14 = array();\n    $list15 = array();\n    $list16 = array();\n    $list17 = array();\n    $list18 = array();\n    $list19 = array();\n    $list20 = array();\n    $list21 = array();\n    $list22 = array();\n    $list23 = array();\n    $list24 = array();\n    $list25 = array();\n    $list26 = array();\n    $list27 ","language":"php"}
{"task_id":"MBPHP\/160","completion":"    $x = $a + $b;\n    $y = $n - $x;\n    return $x == $y ? [\"x = \", $x, \", y = \", $y] : \"No solution\";\n}","language":"php"}
{"task_id":"MBPHP\/182","completion":"    $characters = array();\n    $uppercase = array();\n    $lowercase = array();\n    $special = array();\n    $numeric = array();\n\n    $regex = \"\/^[A-Z0-9a-z\\s]+$\/\";\n\n    $matches = preg_match_all($regex, $string, $matches);\n\n    foreach ($matches as $match) {\n        if (preg_match($regex, $match[0], $matches)) {\n            $characters[] = $match[0];\n        }\n    }\n\n    foreach ($matches as $match) {\n        if (preg_match($regex, $match[0], $matches)) {\n            $uppercase[] = $match[0];\n        }\n    }\n\n    foreach ($matches as $match) {\n        if (preg_match($regex, $match[0], $matches)) {\n            $lowercase[] = ","language":"php"}
{"task_id":"MBPHP\/185","completion":"    $x = $a * $b * $c;\n    $y = $a * $a * $b + $a * $b + $c;\n    $z = $a * $a * $a + $b * $b + $c;\n    return [\n        $x \/ $y,\n        $z \/ $y\n    ];\n}","language":"php"}
{"task_id":"MBPHP\/204","completion":"    $count = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] == $c) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/218","completion":"    $diff = $a - $b;\n    $count = 0;\n    while ($diff > 0) {\n        $diff = $diff - 10;\n        $count++;\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/219","completion":"    $min = $testTup[0];\n    $max = $testTup[0];\n    for ($i = 1; $i < $testTup.length; $i++) {\n        if ($testTup[$i] < $min) {\n            $min = $testTup[$i];\n        }\n        if ($testTup[$i] > $max) {\n            $max = $testTup[$i];\n        }\n    }\n    return array_slice($testTup, 0, $k);\n}","language":"php"}
{"task_id":"MBPHP\/231","completion":"    $max = 0;\n    $sum = 0;\n    $i = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $sum = 0;\n        for ($j = 0; $j <= $i; $j++) {\n            $sum += $tri[$i][$j];\n        }\n        if ($sum > $max) {\n            $max = $sum;\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/237","completion":"    $occurences = array();\n    $max = 0;\n    foreach ($testList as $tuple) {\n        $occurences[$tuple[0]] = $occurences[$tuple[0]] ? $occurences[$tuple[0]] + 1 : 1;\n        if ($max < $occurences[$tuple[0]]) {\n            $max = $occurences[$tuple[0]];\n        }\n    }\n    $result = array();\n    foreach ($occurences as $key => $value) {\n        if ($value == $max) {\n            $result[] = array($key, $max);\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/243","completion":"    $result = [];\n    $occurrence = {};\n    foreach ($lst as $tuple) {\n        if ($occurrence[$tuple[0]] === undefined) {\n            $occurrence[$tuple[0]] = [];\n        }\n        $occurrence[$tuple[0]].push($tuple);\n    }\n    foreach ($occurrence as $key) {\n        $result.push(array_merge($occurrence[$key]));\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/245","completion":"    $max = 0;\n    $sum = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $sum += $arr[$i];\n        if ($sum > $max) {\n            $max = $sum;\n        }\n        if ($sum < 0) {\n            $sum = 0;\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/247","completion":"    $n = strlen($str);\n    $lps = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $max = 0;\n    $max_i = 0;\n    $max_j = 0;\n    $max_k = 0;\n    while ($i < $n - 1) {\n        $j = $i + 1;\n        while ($j < $n) {\n            $k = $j + 1;\n            while ($k < $n) {\n                if ($str[$i] == $str[$j] && $str[$j] == $str[$k]) {\n                    $lps++;\n                    $max = $lps;\n                    $max_i = $i;\n                    $max_j = $","language":"php"}
{"task_id":"MBPHP\/254","completion":"    $words = array();\n    $text = preg_replace(\"\/\\s+\/\", \" \", $text);\n    $text = str_replace(\" \", \"\", $text);\n    $text = str_replace(\"\\n\", \"\", $text);\n    $text = str_replace(\"\\t\", \"\", $text);\n    $text = str_replace(\"\\r\", \"\", $text);\n    $text = str_replace(\"\\f\", \"\", $text);\n    $text = str_replace(\"\\v\", \"\", $text);\n    $text = str_replace(\"\\0\", \"\", $text);\n    $text = str_replace(\"\\\"\", \"\", $text);\n    $text = str_replace(\"'\", \"\", $text);\n    $text = str_replace(\"\\\\\", \"\", $text);\n    $text = str_replace(\"\\'\", \"\", $text);\n    $text = str_replace(\"\\\"\", \"\", $text);\n","language":"php"}
{"task_id":"MBPHP\/255","completion":"    $combinations = array();\n    $i = 0;\n    for ($i = 0; $i < count($l); $i++) {\n        $combinations[$i] = array();\n    }\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = 0; $j < count($l); $j++) {\n            if ($i != $j) {\n                for ($k = 0; $k < count($l); $k++) {\n                    if ($i != $k && $j != $k) {\n                        $combinations[$i][$j] = $l[$i];\n                        $combinations[$j][$i] = $l[$j];\n                        $combinations[$k][$i] = $l[$k];\n                        $combinations[$k][$j] = $l[$k","language":"php"}
{"task_id":"MBPHP\/265","completion":"    $result = array();\n    for ($i = 0; $i < count($s); $i += $step) {\n        $result[] = $s[$i];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/277","completion":"    $filtered = array();\n    foreach ($dict as $key => $value) {\n        if ($value == $n) {\n            $filtered[] = $key;\n        }\n    }\n    return $filtered;\n}","language":"php"}
{"task_id":"MBPHP\/298","completion":"    $result = [];\n    foreach ($l1 as $key1 => $value1) {\n        foreach ($l2 as $key2 => $value2) {\n            if (in_array($key1, $key2)) {\n                $result[] = $value1;\n            }\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/306","completion":"    $max = 0;\n    $sum = 0;\n    $i = 0;\n    for ($i = $index; $i < $n; $i++) {\n        $sum += $a[$i];\n        if ($sum > $max) {\n            $max = $sum;\n        }\n        if ($i >= $k) {\n            $sum -= $a[$i - $k];\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/313","completion":"    $pos = 0;\n    foreach ($list1 as $num) {\n        if ($num > 0) {\n            $pos++;\n        }\n    }\n    return $pos;\n}","language":"php"}
{"task_id":"MBPHP\/317","completion":"    $result = [];\n    $current = 0;\n    $length = 0;\n    foreach ($alist as $value) {\n        if ($current == $length) {\n            $result[] = $value;\n            $length = 0;\n        } else {\n            $result[$current] = $value;\n            $length++;\n        }\n        $current++;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/323","completion":"    $arr = $arr || [];\n    $n = $n || 0;\n    $arr = $arr . sort(function($a, $b) {\n        return $a - $b;\n    });\n    $arr = $arr . sort(function($a, $b) {\n        return $b - $a;\n    });\n    $arr = $arr . $arr . $arr . $arr . $arr . $arr . $arr . $arr . $arr . $arr . $arr . $arr . $arr . $arr . $arr . $arr . $arr . $arr . $arr . $arr . $arr . $arr . $arr . $arr . $arr . $arr . $arr . $arr . ","language":"php"}
{"task_id":"MBPHP\/328","completion":"    $list2 = array_slice($list1, 0, $n);\n    array_splice($list1, $n, $m);\n    return $list2;\n}","language":"php"}
{"task_id":"MBPHP\/330","completion":"    $pattern = '\/[a-zA-Z]{3,5}\/';\n    $matches = preg_match($pattern, $text);\n    return $matches;\n}","language":"php"}
{"task_id":"MBPHP\/333","completion":"    $sortedLi = [];\n    foreach ($subLi as $subLiValue) {\n        $sortedLi[$subLiValue[1]] = $subLiValue;\n    }\n    return $sortedLi;\n}","language":"php"}
{"task_id":"MBPHP\/340","completion":"    $min = min($lst);\n    $min2 = min($lst, $min + 1);\n    $min3 = min($lst, $min + 2);\n    return $min + $min2 + $min3;\n}","language":"php"}
{"task_id":"MBPHP\/341","completion":"    $result = [];\n    foreach ($s as $key => $value) {\n        $result[] = [$key, $value];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/342","completion":"    $min = $max = $list[0][0];\n    foreach ($list as $array) {\n        foreach ($array as $value) {\n            if ($value < $min) $min = $value;\n            if ($value > $max) $max = $value;\n        }\n    }\n    return [$min, $max];\n}","language":"php"}
{"task_id":"MBPHP\/343","completion":"    $digits = array();\n    $letters = array();\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (is_numeric($s[$i])) {\n            $digits[] = $s[$i];\n        } else {\n            $letters[] = $s[$i];\n        }\n    }\n    return [count($digits), count($letters)];\n}","language":"php"}
{"task_id":"MBPHP\/348","completion":"    $n = $m + 1;\n    $ways = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $ways += $i * $i;\n    }\n    $ways -= $n * $n;\n    return $ways \/ 2;\n}","language":"php"}
{"task_id":"MBPHP\/362","completion":"    $max = 0;\n    $maxOccurrence = [];\n    foreach ($nums as $num) {\n        if ($num > $max) {\n            $max = $num;\n            $maxOccurrence = [];\n            $maxOccurrence[] = $num;\n        } else if ($num == $max) {\n            $maxOccurrence[] = $num;\n        }\n    }\n    return $maxOccurrence;\n}","language":"php"}
{"task_id":"MBPHP\/374","completion":"    $arr = array_unique($str);\n    $res = array();\n    $res[$arr[0]] = $arr[0];\n    for ($i = 1; $i < count($arr); $i++) {\n        $tmp = $res[$arr[$i]];\n        $res[$arr[$i]] = $arr[$i];\n        $res[$tmp] = $tmp;\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/382","completion":"    $rotations = 0;\n    $start = 0;\n    $end = $a.length - 1;\n\n    while ($start <= $end) {\n        $mid = ($start + $end) \/ 2;\n        if ($a[$mid] > $a[$mid + 1]) {\n            $rotations += $a.length - $mid;\n            $end = $mid - 1;\n        } else {\n            $start = $mid + 1;\n        }\n    }\n\n    return $rotations;\n}","language":"php"}
{"task_id":"MBPHP\/398","completion":"    $sum = 0;\n    foreach ($nums as $num) {\n        $sum += $num;\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/407","completion":"    $n = $n + '';\n    $n = str_split($n, '');\n    $n = array_reverse($n);\n    $n = implode('', $n);\n    return $n;\n}","language":"php"}
{"task_id":"MBPHP\/408","completion":"    $result = array();\n    $nums1 = array_map('intval', $nums1);\n    $nums2 = array_map('intval', $nums2);\n    $nums1.sort();\n    $nums2.sort();\n    $i = 0;\n    $j = 0;\n    $k = min($k, count($nums1) * count($nums2));\n    while ($i < count($nums1) && $j < count($nums2)) {\n        if ($nums1[$i] + $nums2[$j] < $k) {\n            $result[] = array($nums1[$i], $nums2[$j]);\n            $k -= $nums1[$i] + $nums2[$j];\n            $i++;\n            $j++;\n        } else if ($nums1[$i] + $nums2[$j] == $k) {\n            $result[]","language":"php"}
{"task_id":"MBPHP\/411","completion":"    $word = preg_replace(\"\/_([a-z])\/\", function ($0, $1) {\n        return $1.toUpperCase();\n    }, $word);\n\n    return strtolower($word);\n}","language":"php"}
{"task_id":"MBPHP\/417","completion":"    $result = array();\n    foreach ($input as $tuple) {\n        if (in_array($tuple[0], $result)) {\n            $result[$tuple[0]] = array_merge($result[$tuple[0]], $tuple[1]);\n        } else {\n            $result[$tuple[0]] = $tuple[1];\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/423","completion":"    $max = 0;\n    $i = 0;\n    $j = 0;\n    for ($i = 0; $i < $m; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($gold[$i][$j] > $max) {\n                $max = $gold[$i][$j];\n            }\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/440","completion":"    $text = preg_replace(\"\/\\W+\/\", \"\", $text);\n    $text = str_replace(\" \", \"\", $text);\n    $text = str_replace(\"\\n\", \"\", $text);\n    $text = str_replace(\"\\t\", \"\", $text);\n    $text = str_replace(\"\\r\", \"\", $text);\n    $text = str_replace(\"\\f\", \"\", $text);\n    $text = str_replace(\"\\v\", \"\", $text);\n    $text = str_replace(\"\\0\", \"\", $text);\n    $text = str_replace(\"\\\"\", \"\", $text);\n    $text = str_replace(\"'\", \"\", $text);\n    $text = str_replace(\"\\\\\", \"\", $text);\n    $text = str_replace(\"\\'\", \"\", $text);\n    $text = str_replace(\"\\\"\", \"\", $text);\n    $text = str_replace(\"\\0","language":"php"}
{"task_id":"MBPHP\/444","completion":"    $result = [];\n    foreach ($testList as $tuple) {\n        $result[] = array_slice($tuple, 0, $k);\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/460","completion":"    $result = array();\n    foreach ($lst as $sublist) {\n        $result[] = $sublist[0];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/462","completion":"    $combinations = array();\n    $combinationsSize = 1;\n    $combinationsSize = $list1.size();\n    for ($i = 0; $i < $combinationsSize; $i++) {\n        $combinations[$i] = array();\n        for ($j = 0; $j < $combinationsSize; $j++) {\n            if ($i == $j) {\n                $combinations[$i][$j] = $list1[$i];\n            } else {\n                $combinations[$i][$j] = $list1[$i] + $list1[$j];\n            }\n        }\n    }\n    return $combinations;\n}","language":"php"}
{"task_id":"MBPHP\/463","completion":"    $max = 0;\n    $max_start = 0;\n    $max_end = 0;\n    $max_prod = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] > 0) {\n            $max_prod = $max_prod + $arr[$i];\n            if ($max_prod > $max) {\n                $max = $max_prod;\n                $max_start = $i;\n                $max_end = $i;\n            } else if ($max_prod < 0) {\n                $max_prod = 0;\n                $max_start = $i + 1;\n                $max_end = $i + 1;\n            }\n        } else {\n            $max_prod = 0;\n            $max","language":"php"}
{"task_id":"MBPHP\/469","completion":"    $profit = 0;\n    $i = 0;\n    $j = 0;\n    $max = 0;\n    for ($i = 0; $i < $k; $i++) {\n        $max = $max + $price[$i];\n    }\n    for ($j = $k; $j < $price.length; $j++) {\n        $profit = $profit + ($price[$j] - $price[$j - $k]);\n    }\n    return $profit;\n}","language":"php"}
{"task_id":"MBPHP\/473","completion":"    $result = [];\n    $testList1 = array_filter($testList1, function ($item) {\n        return isset($item);\n    });\n    $testList2 = array_filter($testList2, function ($item) {\n        return isset($item);\n    });\n    $testList1 = array_map('array_unique', $testList1);\n    $testList2 = array_map('array_unique', $testList2);\n    foreach ($testList1 as $key1 => $value1) {\n        foreach ($testList2 as $key2 => $value2) {\n            if (in_array($value1, $value2)) {\n                $result[] = $value1;\n            }\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/482","completion":"    return preg_match('\/[A-Z][a-z]+[A-Z]\/', $text);\n}","language":"php"}
{"task_id":"MBPHP\/483","completion":"    $result = 0;\n    $factorial = 1;\n    for ($i = 1; $i <= $x; $i++) {\n        $factorial *= $i;\n    }\n    for ($i = 1; $i <= $x; $i++) {\n        if ($factorial % $i == 0) {\n            $result = $i;\n            break;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/486","completion":"    $binomialProb = 1;\n    $sum = $n + $k - 1;\n    $nMinusK = $n - $k;\n    $nMinusKTimesP = $nMinusK * $p;\n    $binomialProb = $nMinusKTimesP \/ ($sum * $sum);\n    return $binomialProb;\n}","language":"php"}
{"task_id":"MBPHP\/490","completion":"    $symmetricPairs = [];\n    $tempList = [];\n    foreach ($testList as $item) {\n        $tempList[] = $item;\n    }\n    $tempList.sort(function($a, $b) {\n        return $a - $b;\n    });\n    for ($i = 0; $i < count($tempList) - 1; $i++) {\n        if ($tempList[$i] == $tempList[$i + 1]) {\n            $symmetricPairs[] = $tempList[$i];\n        }\n    }\n    return $symmetricPairs;\n}","language":"php"}
{"task_id":"MBPHP\/493","completion":"    $result = [];\n    $startx = $startx * 1.0;\n    $starty = $starty * 1.0;\n    $endx = $endx * 1.0;\n    $endy = $endy * 1.0;\n    $radius = $radius * 1.0;\n    $x = $startx;\n    $y = $starty;\n    while ($x < $endx) {\n        $y = $y + $radius;\n        while ($y < $endy) {\n            $result[] = array($x, $y);\n            $y = $y + $radius;\n        }\n        $x = $x + $radius;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/520","completion":"    $lcm = 1;\n    foreach ($l as $i = $lcm) {\n        $lcm *= $l[$i];\n    }\n    return $lcm;\n}","language":"php"}
{"task_id":"MBPHP\/522","completion":"    $max = 0;\n    $start = 0;\n    $end = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for ($j = $i + 1; $j < $len; $j++) {\n            for ($k = $j + 1; $k < $len; $k++) {\n                if ($arr[$i] > $arr[$j] && $arr[$j] > $arr[$k]) {\n                    if ($arr[$i] + $arr[$j] > $arr[$k]) {\n                        $start = $i;\n                        $end = $k;\n                    } else {\n                       ","language":"php"}
{"task_id":"MBPHP\/526","completion":"    $str = str_replace(' ', '', $str1);\n    $str = str_replace('-', '', $str);\n    $str = str_replace('_', '', $str);\n    $str = str_replace('.', '', $str);\n    $str = str_replace('+', '', $str);\n    $str = str_replace('%', '', $str);\n    $str = str_replace('#', '', $str);\n    $str = str_replace('\/', '', $str);\n    $str = str_replace('$', '', $str);\n    $str = str_replace('&', '', $str);\n    $str = str_replace('*', '', $str);\n    $str = str_replace('(', '', $str);\n    $str = str_replace(')', '', $str);\n    $str = str_replace('{', '', $str);\n    $str ","language":"php"}
{"task_id":"MBPHP\/538","completion":"    $str1 = str_replace(\" \", \"\", $str1);\n    $str1 = str_replace(\",\", \"\", $str1);\n    $str1 = str_replace(\"\\r\", \"\", $str1);\n    $str1 = str_replace(\"\\n\", \"\", $str1);\n    $str1 = str_replace(\"\\t\", \"\", $str1);\n    $str1 = str_replace(\"\\0\", \"\", $str1);\n    $str1 = str_replace(\"\\'\", \"\", $str1);\n    $str1 = str_replace(\"\\\"\", \"\", $str1);\n    $str1 = str_replace(\"\\0\", \"\", $str1);\n    $str1 = str_replace(\"\\0\", \"\", $str1);\n    $str1 = str_replace(\"\\0\", \"\", $str1);\n    $str1 = str_replace(\"\\0\", \"\", $str1);\n    $str1 =","language":"php"}
{"task_id":"MBPHP\/539","completion":"    $result = array();\n    foreach ($index as $i = $index[$i]) {\n        $result[$i] = $basesNum[$i] ^ $basesNum[$i + 1];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/545","completion":"    $n = ($n & 0x55555555) << 1 | ($n & 0xAAAAAAAA);\n    return $n;\n}","language":"php"}
{"task_id":"MBPHP\/547","completion":"    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum += hammingDistance($i, $i + 1);\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/561","completion":"    $result = [];\n    foreach ($testList as $pair) {\n        $result[$pair[0]] = [];\n        foreach ($pair as $element) {\n            $result[$pair[0]][] = $element;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/570","completion":"    $result = array();\n    foreach ($list1 as $item) {\n        $new = preg_replace('\/\\b(?:' . $charlist . ')\\b\/gi', '', $item);\n        if ($new != $item) {\n            $result[] = $new;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/571","completion":"    $max = 0;\n    $sum = 0;\n    $i = 0;\n    $j = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$i] + $arr[$j] <= $k) {\n                $sum = $arr[$i] + $arr[$j];\n                if ($sum > $max) {\n                    $max = $sum;\n                }\n            }\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/572","completion":"    $uniqueNums = array_unique($nums);\n    $uniqueNums = array_diff($uniqueNums, $nums);\n    return $uniqueNums;\n}","language":"php"}
{"task_id":"MBPHP\/579","completion":"    $dissimilar = array();\n    foreach ($testTup1 as $key1 => $value1) {\n        foreach ($testTup2 as $key2 => $value2) {\n            if ($value1 != $value2) {\n                $dissimilar[] = $key1;\n                break;\n            }\n        }\n    }\n    return $dissimilar;\n}","language":"php"}
{"task_id":"MBPHP\/582","completion":"    $dict2 = $dict1;\n    if (empty($dict2)) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/584","completion":"    $pattern = '\/\\b(a|an|the|this|that|those|these|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those|those","language":"php"}
{"task_id":"MBPHP\/585","completion":"    $heap = new Heap();\n    foreach ($items as $item) {\n        $heap-push($item['price']);\n    }\n    $result = [];\n    while ($heap->size() > 0) {\n        $result[] = $heap->pop();\n        if ($result.length == $n) {\n            break;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/586","completion":"    $b = [];\n    $i = 0;\n    $j = 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h = 0;\n    $i = 0;\n    $j = 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h = 0;\n    $i = 0;\n    $j = 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h = 0;\n    $i = ","language":"php"}
{"task_id":"MBPHP\/592","completion":"    $sum = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum *= $i;\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/597","completion":"    $i = 0;\n    $j = 0;\n    $kth = 0;\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n    if ($len1 < $m || $len2 < $n) {\n        return false;\n    }\n    while ($i < $m && $j < $n) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $kth++;\n            $i++;\n        } else if ($arr1[$i] > $arr2[$j]) {\n            $kth++;\n            $j++;\n        } else {\n            $kth++;\n            $i++;\n            $j++;\n        }\n    }\n    return $kth == $k;\n}","language":"php"}
{"task_id":"MBPHP\/603","completion":"    $ludic = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $ludic[$i] = $i * $i;\n    }\n    return $ludic;\n}","language":"php"}
{"task_id":"MBPHP\/612","completion":"    $res = [];\n    foreach ($lst as $item) {\n        $res[] = array_merge($res, $item);\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/615","completion":"    $sum = 0;\n    $count = 0;\n    foreach ($nums as $num) {\n        foreach ($num as $val) {\n            $sum += $val;\n            $count++;\n        }\n    }\n    return [$sum \/ $count, $sum];\n}","language":"php"}
{"task_id":"MBPHP\/619","completion":"    $str = preg_replace(\"\/\\d+\/\", \"\", $testStr);\n    return $str;\n}","language":"php"}
{"task_id":"MBPHP\/622","completion":"    $arr1 = array_slice($arr1, 0, $n);\n    $arr2 = array_slice($arr2, 0, $n);\n    $arr1 = array_sort($arr1);\n    $arr2 = array_sort($arr2);\n    $arr3 = array_merge($arr1, $arr2);\n    $arr3 = array_slice($arr3, 0, $n);\n    return $arr3[(($n - 1) \/ 2)];\n}","language":"php"}
{"task_id":"MBPHP\/652","completion":"    $result = \"\";\n    foreach ($testList as $row) {\n        foreach ($row as $col) {\n            $result .= $col . \", \";\n        }\n        $result = substr($result, 0, -2);\n        $result .= \"\\n\";\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/656","completion":"    $min = 0;\n    $max = 0;\n    $diff = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $diff = abs($a[$i] - $b[$i]);\n        if ($diff > $max) {\n            $max = $diff;\n        }\n        if ($diff < $min || $min === 0) {\n            $min = $diff;\n        }\n    }\n    return $min + $max;\n}","language":"php"}
{"task_id":"MBPHP\/671","completion":"    $mask = ~0 << (32 - $n);\n    return $n | $mask;\n}","language":"php"}
{"task_id":"MBPHP\/684","completion":"    $cnt = 0;\n    for ($i = 0; $i < strlen($str); $i++) {\n        if ($str[$i] == $x) {\n            $cnt++;\n        }\n    }\n    return $cnt;\n}","language":"php"}
{"task_id":"MBPHP\/686","completion":"    $freq = array();\n    $max = count($testTup);\n    for ($i = 0; $i < $max; $i++) {\n        if (isset($freq[$testTup[$i]])) {\n            $freq[$testTup[$i]]++;\n        } else {\n            $freq[$testTup[$i]] = 1;\n        }\n    }\n    return $freq;\n}","language":"php"}
{"task_id":"MBPHP\/689","completion":"    $jumps = 0;\n    $i = 0;\n    $j = 0;\n    $max = $arr[$i];\n    while ($i < $n - 1) {\n        $j = $i + $max;\n        if ($j >= $n) {\n            $j = $n - 1;\n        }\n        $jumps++;\n        $max = $arr[$j];\n        $i = $j;\n    }\n    return $jumps;\n}","language":"php"}
{"task_id":"MBPHP\/698","completion":"    $sortedDict = array();\n    foreach ($testDict as $key => $value) {\n        $sortedDict[$key] = $value;\n    }\n    $sortedDict = array_values($sortedDict);\n    $sortedDict = array_sort($sortedDict, function($a, $b) {\n        return array_product($a, $b);\n    });\n    return $sortedDict;\n}","language":"php"}
{"task_id":"MBPHP\/707","completion":"    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i & $n) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/709","completion":"    $unique = array();\n    foreach ($testList as $key => $value) {\n        if (!isset($unique[$value])) {\n            $unique[$value] = $key;\n        }\n    }\n    return $unique;\n}","language":"php"}
{"task_id":"MBPHP\/721","completion":"    $max = 0;\n    $sum = 0;\n    $i = 0;\n    $j = 0;\n    $sum = 0;\n    $max = 0;\n    $sum = 0;\n    $max = 0;\n    $sum = 0;\n    $max = 0;\n    $sum = 0;\n    $max = 0;\n    $sum = 0;\n    $max = 0;\n    $sum = 0;\n    $max = 0;\n    $sum = 0;\n    $max = 0;\n    $sum = 0;\n    $max = 0;\n    $sum = 0;\n    $max = 0;\n    $sum = 0;\n    $max = 0;\n    $sum = 0;\n    $max =","language":"php"}
{"task_id":"MBPHP\/724","completion":"    $sum = 0;\n    for ($i = 1; $i <= $power; $i++) {\n        $sum += $base * $i;\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/735","completion":"    $n = $n & 0x55555555;\n    $n = $n << 1;\n    $n = $n & 0x33333333;\n    $n = $n >> 1;\n    return $n;\n}","language":"php"}
{"task_id":"MBPHP\/743","completion":"    $list2 = array_slice($list1, 0, $m);\n    array_splice($list1, $m, $n);\n    array_splice($list2, 0, $list1);\n    return $list2;\n}","language":"php"}
{"task_id":"MBPHP\/745","completion":"    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $digits = array();\n        while ($num > 0) {\n            $digits[] = $num % 10;\n            $num = floor($num \/ 10);\n        }\n        $result[] = $digits;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/747","completion":"    $x = str_split($x, $m);\n    $y = str_split($y, $n);\n    $z = str_split($z, $o);\n    $lcs = array();\n    $lcs[0] = 0;\n    $lcs[1] = 0;\n    $lcs[2] = 0;\n    $lcs[3] = 0;\n    $lcs[4] = 0;\n    $lcs[5] = 0;\n    $lcs[6] = 0;\n    $lcs[7] = 0;\n    $lcs[8] = 0;\n    $lcs[9] = 0;\n    $lcs[10] = 0;\n    $lcs[11] = 0;\n    $lcs[12] = 0;\n    $lcs[13] = 0;","language":"php"}
{"task_id":"MBPHP\/758","completion":"    $unique = array();\n    $sublist = array();\n    $count = 0;\n    foreach ($list1 as $list2) {\n        if (in_array($list2, $unique)) {\n            $count++;\n        } else {\n            $unique[] = $list2;\n            $sublist[] = $list2;\n            $count = 1;\n        }\n    }\n    return array_values($sublist);\n}","language":"php"}
{"task_id":"MBPHP\/776","completion":"    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $count = 0;\n    for ($i = 0; $i < strlen($testStr); $i++) {\n        if (in_array($testStr[$i], $vowels)) {\n            if (strpos($testStr[$i], $testStr[$i + 1]) !== false) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/778","completion":"    $result = array();\n    $temp = array();\n    foreach ($list1 as $key => $value) {\n        if (in_array($value, $temp)) {\n            $result[] = array_merge($temp, $value);\n            $temp = array();\n        } else {\n            $temp[] = $value;\n        }\n    }\n    $result[] = array_merge($temp, $temp);\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/779","completion":"    $unique = array();\n    $sublist = array();\n    foreach ($list1 as $list) {\n        if (in_array($list, $sublist)) {\n            $unique[$list]++;\n        } else {\n            $unique[$list] = 1;\n            $sublist = $list;\n        }\n    }\n    return $unique;\n}","language":"php"}
{"task_id":"MBPHP\/780","completion":"    $result = [];\n    $temp = [];\n    $temp2 = [];\n    $temp3 = [];\n    $temp4 = [];\n    $temp5 = [];\n    $temp6 = [];\n    $temp7 = [];\n    $temp8 = [];\n    $temp9 = [];\n    $temp10 = [];\n    $temp11 = [];\n    $temp12 = [];\n    $temp13 = [];\n    $temp14 = [];\n    $temp15 = [];\n    $temp16 = [];\n    $temp17 = [];\n    $temp18 = [];\n    $temp19 = [];\n    $temp20 = [];\n    $temp21 = [];\n    $temp22 = [];\n    $temp23 = [];\n    $temp24 = [];\n    $temp25 = ","language":"php"}
{"task_id":"MBPHP\/782","completion":"    $sum = 0;\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        $sum += $arr[$i] * $arr[$i];\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/783","completion":"    $min = min($r, $g, $b);\n    $max = max($r, $g, $b);\n    $delta = $max - $min;\n    $h = 0;\n    $s = 0;\n    $v = 0;\n\n    if ($max != 0) {\n        $s = $delta \/ $max;\n    }\n\n    if ($max == $r && $g >= $b) {\n        $v = $g - $b;\n    } else if ($max == $g && $b >= $r) {\n        $v = $b - $r;\n    } else if ($max == $b && $r >= $g) {\n        $v = $r - $g;\n    }\n\n    if ($max == $","language":"php"}
{"task_id":"MBPHP\/795","completion":"    $heap = array_heap_merge($items);\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $heap = array_heap_pop($heap);\n        $result[] = $heap;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/819","completion":"    $counts = array();\n    $counts[0] = array();\n    $counts[1] = array();\n    $counts[2] = array();\n    $counts[3] = array();\n    $counts[4] = array();\n    $counts[5] = array();\n    $counts[6] = array();\n    $counts[7] = array();\n    $counts[8] = array();\n    $counts[9] = array();\n    $counts[10] = array();\n    $counts[11] = array();\n    $counts[12] = array();\n    $counts[13] = array();\n    $counts[14] = array();\n    $counts[15] = array();\n    $counts[16] = array();\n    $counts[17] = array();\n    $counts[18] = array();\n    $counts[19] = array();\n    $counts[20]","language":"php"}
{"task_id":"MBPHP\/834","completion":"    $matrix = [];\n    $row = [];\n    for ($i = 0; $i < $n; $i++) {\n        $row[] = $i + 1;\n    }\n    $matrix[] = $row;\n    $row = [];\n    for ($i = 0; $i < $n; $i++) {\n        $row[] = $i + 1;\n    }\n    $matrix[] = $row;\n    $row = [];\n    for ($i = 0; $i < $n; $i++) {\n        $row[] = $i + 1;\n    }\n    $matrix[] = $row;\n    $row = [];\n    for ($i = 0; $i < $n; $i++) {\n        $row[] = $i ","language":"php"}
{"task_id":"MBPHP\/843","completion":"    $min = $primes[0];\n    $min_index = 0;\n    $min_count = 0;\n    $max = $primes[$primes.length - 1];\n    $max_index = $primes.length - 1;\n    $max_count = $n;\n    $uglies = [];\n    $uglies_count = 0;\n    $uglies_index = 0;\n    while ($uglies_count < $n) {\n        $uglies_index = $min_index;\n        $uglies_count = $min_count;\n        while ($uglies_index < $max_index) {\n            if ($primes[$uglies_index] > $min) {\n                break;\n            }\n            $uglies_index++;\n            $uglies_count++;\n        }\n        if ($uglies_count ","language":"php"}
{"task_id":"MBPHP\/845","completion":"    $digits = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $digits++;\n        }\n    }\n    return $digits;\n}","language":"php"}
{"task_id":"MBPHP\/854","completion":"    $heap = [];\n    $heap_size = $rawheap.length;\n    $heap_size = $heap_size - 1;\n    $heap_size = $heap_size \/ 2;\n    $heap_size = $heap_size - 1;\n    $heap_size = $heap_size \/ 2;\n    $heap_size = $heap_size - 1;\n    $heap_size = $heap_size \/ 2;\n    $heap_size = $heap_size - 1;\n    $heap_size = $heap_size \/ 2;\n    $heap_size = $heap_size - 1;\n    $heap_size = $heap_size \/ 2;\n    $heap_size = $heap_size - 1;\n    $heap_size = $heap_size \/ 2;\n    ","language":"php"}
{"task_id":"MBPHP\/863","completion":"    $max = 0;\n    $i = 0;\n    $j = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$i] + 1 == $arr[$j]) {\n                $max = $max < $j - $i + 1 ? $j - $i + 1 : $max;\n            }\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/893","completion":"    $res = array();\n    foreach ($lst as $item) {\n        $res[] = $item[array_length($item) - 1];\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/901","completion":"    $i = 1;\n    $smallest = 1;\n    while ($i <= $n) {\n        $smallest = $smallest * $i;\n        $i++;\n    }\n    return $smallest;\n}","language":"php"}
{"task_id":"MBPHP\/906","completion":"    $url = str_replace(\"https:\/\/\", \"\", $url);\n    $url = str_replace(\"http:\/\/\", \"\", $url);\n    $url = str_replace(\"www.\", \"\", $url);\n    $url = str_replace(\"www2.\", \"\", $url);\n    $url = str_replace(\"www3.\", \"\", $url);\n    $url = str_replace(\"www4.\", \"\", $url);\n    $url = str_replace(\"www5.\", \"\", $url);\n    $url = str_replace(\"www6.\", \"\", $url);\n    $url = str_replace(\"www7.\", \"\", $url);\n    $url = str_replace(\"www8.\", \"\", $url);\n    $url = str_replace(\"www9.\", \"\", $url);\n    $url = str_replace(\"www10.\", \"\", $url);\n    $url = str_replace(\"www11.\", \"\", $","language":"php"}
{"task_id":"MBPHP\/910","completion":"    $date = date(\"Y-m-d\", mktime(0, 0, 0, $m - 1, $d, $y));\n    return $date == $y - $m + $d;\n}","language":"php"}
{"task_id":"MBPHP\/912","completion":"    $a = $n + $m;\n    $b = $n - $m;\n    $c = $n * $m;\n    $d = $n \/ $m;\n    $e = $n % $m;\n    $f = $a + $b;\n    $g = $a - $b;\n    $h = $a * $b;\n    $i = $a \/ $b;\n    $j = $a % $b;\n    $k = $b + $c;\n    $l = $b - $c;\n    $m = $b * $c;\n    $n = $b \/ $c;\n    $o = $b % $c;\n    $p = $c + $d;\n","language":"php"}
{"task_id":"MBPHP\/918","completion":"    $c = 0;\n    for ($i = 0; $i < $m; $i++) {\n        if ($s[$i] == $n) {\n            $c++;\n        }\n    }\n    return $c;\n}","language":"php"}
{"task_id":"MBPHP\/926","completion":"    $result = 0;\n    for ($i = 0; $i < $m; $i++) {\n        $result += $n;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/938","completion":"    $d = $a + $b + $c;\n    $e = $p + $q + $r;\n    $f = $a + $p + $q;\n    $g = $b + $q + $r;\n    $h = $a + $b + $r;\n    $i = $p + $q + $c;\n    $j = $a + $b + $c;\n    $k = $p + $r + $c;\n    $l = $a + $p + $r;\n    $m = $b + $r + $c;\n    $n = $a + $b + $r;\n    $o = $p + $r + $q;\n    $p","language":"php"}
{"task_id":"MBPHP\/940","completion":"    $heap = [];\n    $heapSize = $arr.length;\n    $heapSize = $heapSize - 1;\n    $heap[0] = $arr[$heapSize];\n    $heapSize = $heapSize - 1;\n    $i = 0;\n    while ($heapSize > 0) {\n        $max = $heap[$i];\n        $i = $i + 1;\n        $j = $i;\n        while ($j < $heapSize) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            }\n            $j = $j + 1;\n        }\n        $heap[$i] = $max;\n        $heapSize = $heapSize - 1;\n        $i = $i - 1;\n    }\n   ","language":"php"}
{"task_id":"MBPHP\/945","completion":"    $s = [];\n    foreach($t as $k => $v) {\n        $s[] = $v;\n    }\n    return $s;\n}","language":"php"}
{"task_id":"MBPHP\/965","completion":"    return preg_replace('\/([A-Z])\/', '_\\\\1', $text);\n}","language":"php"}
{"task_id":"MBPHP\/971","completion":"    $max = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i < $a + $b + $c) {\n            $max = $max + 1;\n        } else if ($i == $a + $b + $c) {\n            $max = $max + 1;\n        } else if ($i > $a + $b + $c) {\n            $max = $max + 1;\n        }\n    }\n    return $max;\n}","language":"php"}
