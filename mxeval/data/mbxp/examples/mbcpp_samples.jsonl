{"task_id":"MBCPP\/3","completion":"    if (n == 2) {\n        return false;\n    }\n    if (n == 3) {\n        return false;\n    }\n    if (n % 2 == 0) {\n        return true;\n    }\n    if (n % 3 == 0) {\n        return true;\n    }\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0) {\n            return true;\n        }\n        if (n % (i + 2) == 0) {\n            return true;\n        }\n    }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/11","completion":"    string result = \"\";\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] != ch[0]) {\n            result += s[i];\n        }\n    }\n    for (int i = 0; i < ch.size(); i++) {\n        if (ch[i] != ch[ch.size() - 1]) {\n            result += ch[i];\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/17","completion":"    return 4 * a;\n}","language":"cpp"}
{"task_id":"MBCPP\/18","completion":"    string result = \"\";\n    int len = str.length();\n    for (int i = 0; i < len; i++) {\n        if (secondString.find(str[i]) == -1) {\n            result += str[i];\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/19","completion":"    vector<int> nums;\n    int i;\n    int j;\n    int count;\n\n    nums.reserve(arraynums.size());\n    for (i = 0; i < arraynums.size(); i++) {\n        nums[i] = arraynums[i];\n    }\n\n    count = 0;\n    for (i = 0; i < arraynums.size(); i++) {\n        for (j = i + 1; j < arraynums.size(); j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n    }\n    return count > 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/20","completion":"    if (x < 0) {\n        return false;\n    }\n    int n = 0;\n    while (x > 0) {\n        n += x % 10;\n        x \/= 10;\n    }\n    return n % 7 == 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/21","completion":"    vector<int> result;\n    for (int i = 1; i <= m; i++) {\n        result.push_back(n * i);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/22","completion":"    \/\/ Your code here\n    int i = 0;\n    int j = 1;\n    while (i < nums.size() && j < nums.size()) {\n        if (nums[i] == nums[j]) {\n            return nums[i];\n        }\n        i++;\n        j++;\n    }\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/23","completion":"    int maxSum = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        int sum = 0;\n        for (int j = 0; j < list1[i].size(); j++) {\n            sum += list1[i][j];\n        }\n        if (sum > maxSum) {\n            maxSum = sum;\n        }\n    }\n    return maxSum;\n}","language":"cpp"}
{"task_id":"MBCPP\/25","completion":"    int result = 1;\n    for (int i = 0; i < n; i++) {\n        result *= arr[i];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/28","completion":"    if (k > n - k)\n        k = n - k;\n\n    int c = 1;\n    for (int i = 1; i <= k; i++) {\n        c = c * (n - i + 1) \/ i;\n    }\n    return c;\n}","language":"cpp"}
{"task_id":"MBCPP\/29","completion":"    int result = 0;\n    int count = 0;\n    for (int i = 0; i < arrSize; i++) {\n        if (arr[i] % 2 != 0) {\n            count++;\n            if (count % 2 == 1) {\n                result = arr[i];\n            }\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/32","completion":"    int max = 0;\n    int i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            max = i;\n            n \/= i;\n        }\n        i++;\n    }\n    if (n > 1)\n        max = n;\n    return max;\n}","language":"cpp"}
{"task_id":"MBCPP\/33","completion":"    int i = 1;\n    int result = 0;\n    while (n > 0) {\n        result = result + (n % 2) * i;\n        n = n \/ 2;\n        i = i * 10;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/34","completion":"    int i = 0;\n    int j = n - 1;\n    int missing = 0;\n\n    while (i <= j) {\n        if (ar[i] == i + 1) {\n            i++;\n        } else if (ar[j] == j - 1) {\n            j--;\n        } else {\n            int temp = ar[i];\n            ar[i] = ar[j];\n            ar[j] = temp;\n            i++;\n            j--;\n        }\n    }\n\n    for (int k = 0; k < n; k++) {\n        if (ar[k] != k + 1) {\n            missing = k + 1;\n            break;\n        }\n    }\n\n    return missing;\n}","language":"cpp"}
{"task_id":"MBCPP\/41","completion":"    vector<int> result;\n    int i;\n    for (i = 0; i < nums.size(); i++) {\n        if (nums[i] % 2 == 0) {\n            result.push_back(nums[i]);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/44","completion":"    if (text.size() == 0) {\n        return \"Not matched!\";\n    }\n    string match = text.substr(0, 1);\n    if (text.substr(0, 1) == \" \") {\n        return \"Not matched!\";\n    }\n    return \"Found a match!\";\n}","language":"cpp"}
{"task_id":"MBCPP\/45","completion":"    int gcd = 1;\n    int i;\n    for (i = 2; i <= l[0]; i++) {\n        if (l[0] % i == 0) {\n            gcd = i;\n            break;\n        }\n    }\n    for (i = 1; i < l.size(); i++) {\n        if (l[i] % gcd != 0) {\n            return gcd;\n        }\n    }\n    return gcd;\n}","language":"cpp"}
{"task_id":"MBCPP\/46","completion":"    vector<int> set;\n    for (int i = 0; i < data.size(); i++) {\n        set.push_back(data[i]);\n    }\n    for (int i = 0; i < set.size(); i++) {\n        for (int j = i + 1; j < set.size(); j++) {\n            if (set[i] == set[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/49","completion":"    vector<int> result;\n    int i;\n    for (i = 0; i < nums.size(); i++) {\n        if (nums[i][n] != 0) {\n            result.push_back(nums[i][n]);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/51","completion":"    return (x == y && y == z);\n}","language":"cpp"}
{"task_id":"MBCPP\/52","completion":"    return b * h;\n}","language":"cpp"}
{"task_id":"MBCPP\/53","completion":"    string result = \"Not Equal\";\n    if (str.length() > 1) {\n        if (str[0] == str[str.length() - 1]) {\n            result = \"Equal\";\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/56","completion":"    return ((n & 1) == 1) && ((n & 2) == 0);\n}","language":"cpp"}
{"task_id":"MBCPP\/58","completion":"    return ((x ^ y) < 0);\n}","language":"cpp"}
{"task_id":"MBCPP\/62","completion":"    int min = xs[0];\n    for (int i = 1; i < xs.size(); i++) {\n        if (xs[i] < min) {\n            min = xs[i];\n        }\n    }\n    return min;\n}","language":"cpp"}
{"task_id":"MBCPP\/66","completion":"    int count = 0;\n    for (auto i : list) {\n        if (i > 0) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/68","completion":"    \/\/ write your code here\n    if (a.size() < 2) {\n        return true;\n    }\n    int i = 1;\n    while (i < a.size() && a[i] <= a[i - 1]) {\n        i++;\n    }\n    if (i == a.size()) {\n        return true;\n    }\n    while (i < a.size() && a[i] >= a[i - 1]) {\n        i++;\n    }\n    return i == a.size();\n}","language":"cpp"}
{"task_id":"MBCPP\/71","completion":"    int gap = 1;\n    while (gap < nums.size()) {\n        gap = gap * 3 + 1;\n    }\n    while (gap > 0) {\n        for (int i = gap; i < nums.size(); i++) {\n            int j = i;\n            int tmp = nums[i];\n            while (j >= gap && nums[j - gap] > tmp) {\n                nums[j] = nums[j - gap];\n                j = j - gap;\n            }\n            nums[j] = tmp;\n        }\n        gap = (gap - 1) \/ 3;\n    }\n    return nums;\n}","language":"cpp"}
{"task_id":"MBCPP\/79","completion":"    return s.length() % 2 == 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/82","completion":"    double pi = 3.14159265358979323846;\n    double volume = (4.0 \/ 3.0) * pi * pow(r, 3);\n    return volume;\n}","language":"cpp"}
{"task_id":"MBCPP\/85","completion":"    double area = 4 * 3.141592653589793 * r * r;\n    return area;\n}","language":"cpp"}
{"task_id":"MBCPP\/88","completion":"    unordered_map<int, int> freq = {};\n    for (int i = 0; i < list1.size(); i++) {\n        if (freq.find(list1[i]) != freq.end()) {\n            freq[list1[i]]++;\n        } else {\n            freq[list1[i]] = 1;\n        }\n    }\n    return freq;\n}","language":"cpp"}
{"task_id":"MBCPP\/92","completion":"    string s = n;\n    int i = 0;\n    while (i < s.size()) {\n        if (s.at(i) == '1') {\n            i++;\n            continue;\n        }\n        if (s.at(i) == '2') {\n            i++;\n            if (i == s.size()) {\n                return true;\n            }\n            if (s.at(i) == '1') {\n                i++;\n                continue;\n            }\n        }\n        return false;\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/93","completion":"    int result = 1;\n    for (int i = 0; i < b; i++) {\n        result *= a;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/95","completion":"    vector<int> minLen = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < minLen.size()) {\n            minLen = lst[i];\n        }\n    }\n    return minLen.size();\n}","language":"cpp"}
{"task_id":"MBCPP\/96","completion":"    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/97","completion":"    unordered_map<int, int> freq = {};\n    for (auto v : list1) {\n        for (auto w : v) {\n            freq[w] += 1;\n        }\n    }\n    return freq;\n}","language":"cpp"}
{"task_id":"MBCPP\/98","completion":"    double product = 1.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        product *= numbers[i];\n    }\n    return product \/ numbers.size();\n}","language":"cpp"}
{"task_id":"MBCPP\/101","completion":"    return arr[k - 1];\n}","language":"cpp"}
{"task_id":"MBCPP\/109","completion":"    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/113","completion":"    int length = text.length();\n    if (length == 0) {\n        return false;\n    }\n    int i = 0;\n    while (i < length && text[i] == '0') {\n        i++;\n    }\n    if (i == length) {\n        return false;\n    }\n    if (text[i] == '-') {\n        i++;\n    }\n    if (i == length) {\n        return false;\n    }\n    while (i < length && text[i] >= '0' && text[i] <= '9') {\n        i++;\n    }\n    return i == length;\n}","language":"cpp"}
{"task_id":"MBCPP\/121","completion":"    if (count == 3) {\n        return true;\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == sum) {\n                    count++;\n                    return checkTriplet(a, n, sum, count);\n                }\n            }\n        }\n    }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/126","completion":"    int sum = 0;\n    for (int i = 1; i <= a && i <= b; i++) {\n        if (a % i == 0 && b % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/127","completion":"    return x * y;\n}","language":"cpp"}
{"task_id":"MBCPP\/130","completion":"    vector<int> max = {0, 0};\n    for (int i = 0; i < nums.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < nums.size(); j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max[1]) {\n            max[0] = nums[i];\n            max[1] = count;\n        }\n    }\n    return max;\n}","language":"cpp"}
{"task_id":"MBCPP\/132","completion":"    string result = \"\";\n    for (int i = 0; i < tup1.size(); i++) {\n        result += tup1[i];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/133","completion":"    int sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] < 0) {\n            sum += nums[i];\n        }\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/134","completion":"    string result = \"EVEN\";\n    for (int i = 0; i < p; i++) {\n        if (arr[arr.size() - n] % 2 == 0) {\n            result = \"EVEN\";\n        } else {\n            result = \"ODD\";\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/141","completion":"    vector<int> result;\n    int i, j, k;\n    int n = nums.size();\n    for (i = 0; i < n; i++) {\n        result.push_back(nums[i]);\n    }\n    for (i = 0; i < n; i++) {\n        k = i;\n        for (j = i + 1; j < n; j++) {\n            if (result[j] < result[k]) {\n                k = j;\n            }\n        }\n        if (k != i) {\n            int temp = result[i];\n            result[i] = result[k];\n            result[k] = temp;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/145","completion":"    vector<int> maxDiff = {0};\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            int diff = abs(arr[i] - arr[j]);\n            if (diff > maxDiff[0]) {\n                maxDiff[0] = diff;\n            }\n        }\n    }\n    return maxDiff[0];\n}","language":"cpp"}
{"task_id":"MBCPP\/150","completion":"    if (a > b) {\n        return (a - b) % c == 0;\n    } else {\n        return (b - a) % c == 0;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/151","completion":"    if (x == 1 || y == 1) {\n        return true;\n    }\n    if (x < y) {\n        int temp = x;\n        x = y;\n        y = temp;\n    }\n    if (x % y == 0) {\n        return false;\n    }\n    return isCoprime(x - y, y);\n}","language":"cpp"}
{"task_id":"MBCPP\/154","completion":"    vector<int> result;\n    int i;\n    for (i = 0; i < nums.size(); i++) {\n        if (nums[i][n] != 0) {\n            result.push_back(nums[i][n]);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/161","completion":"    vector<int> result;\n    int i;\n    int j;\n    for (i = 0; i < list1.size(); i++) {\n        for (j = 0; j < list2.size(); j++) {\n            if (list1[i] == list2[j]) {\n                break;\n            }\n        }\n        if (j == list2.size()) {\n            result.push_back(list1[i]);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/166","completion":"    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if ((a[i] ^ a[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/167","completion":"    if (n == 0) return 1;\n    int res = 1;\n    while (res < n) res <<= 1;\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/168","completion":"    int count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/170","completion":"    int sum = 0;\n    for (int i = m; i <= n; i++) {\n        sum += list1[i];\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/173","completion":"    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] >= 'a' && text[i] <= 'z' || text[i] >= 'A' && text[i] <= 'Z' || text[i] >= '0' && text[i] <= '9') {\n            result += text[i];\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/175","completion":"    int n = str1.size();\n    if (n % 2 != 0) {\n        return false;\n    }\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < n; i++) {\n        if (str1[i] == '(') {\n            left++;\n        } else if (str1[i] == ')') {\n            right++;\n        }\n    }\n    return left == right;\n}","language":"cpp"}
{"task_id":"MBCPP\/176","completion":"    return a + b + c;\n}","language":"cpp"}
{"task_id":"MBCPP\/187","completion":"    \/\/ If the two strings are of different lengths, then the answer is 0.\n    if (m == 0 || n == 0) {\n        return 0;\n    }\n\n    \/\/ If the characters in the two strings are same, then the answer is 1.\n    if (x[m - 1] == y[n - 1]) {\n        return 1 + longestCommonSubsequence(x, y, m - 1, n - 1);\n    }\n\n    \/\/ If the characters are not same, then the answer is the max of\n    \/\/ 1) Substring of x[0..m-1]\n    \/\/ 2) Substring of y[0..n-1]\n    return max(longestCommonSubsequence(x, y, m, n - 1),\n               longestCommonSubsequence(x, y, m - 1, n));\n}","language":"cpp"}
{"task_id":"MBCPP\/188","completion":"    return (n & (n - 1)) == 0 && (n & 0x55555555) != 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/189","completion":"    int i;\n    vector<int> missing = vector<int>();\n    for (i = 0; i < n; i++) {\n        if (arr[i] > 0 && arr[i] <= n && arr[i] != i + 1) {\n            missing.push_back(arr[i]);\n        }\n    }\n    for (i = 0; i < n; i++) {\n        if (arr[i] > 0 && arr[i] <= n && arr[i] != i + 1) {\n            arr[arr[i] - 1] = arr[i];\n        }\n    }\n    for (i = 0; i < n; i++) {\n        if (arr[i] != i + 1) {\n            return i + 1;\n        }\n    }\n    return n + 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/194","completion":"    int d = 0;\n    int q = 1;\n    while (n != 0) {\n        d += (n % 10) * q;\n        q *= 8;\n        n \/= 10;\n    }\n    return d;\n}","language":"cpp"}
{"task_id":"MBCPP\/195","completion":"    int left = 0;\n    int right = n - 1;\n    while (left <= right) {\n        int mid = left + (right - left) \/ 2;\n        if (x == arr[mid]) {\n            return mid;\n        } else if (x < arr[mid]) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/201","completion":"    vector<string> tmp;\n    for (int i = 0; i < lst.size(); i++) {\n        tmp.push_back(lst[i]);\n        if (i > 0) {\n            if (lst[i] != lst[i - 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/202","completion":"    string result = \"\";\n    for (int i = 0; i < str1.size(); i++) {\n        if (i % 2 == 0) {\n            result += str1[i];\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/203","completion":"    int count = 0;\n    while (n1 != 0 || n2 != 0) {\n        if ((n1 & 1) != (n2 & 1)) count++;\n        n1 >>= 1;\n        n2 >>= 1;\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/204","completion":"    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == c[0]) {\n            for (int j = 0; j < c.size(); j++) {\n                if (s[i + j] != c[j]) {\n                    break;\n                }\n                if (j == c.size() - 1) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/211","completion":"    int count = 0;\n    for (int i = 0; i < 32; i++) {\n        if ((n & 1) == 1) {\n            count++;\n        }\n        n >>= 1;\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/213","completion":"    vector<string> result = {\"\",\"\",\"\"};\n    int i = 0;\n    int j = 0;\n    while (i < testTup1.size() && j < testTup2.size()) {\n        result[i] = testTup1[i] + testTup2[j];\n        i++;\n        j++;\n    }\n    while (i < testTup1.size()) {\n        result[i] = testTup1[i];\n        i++;\n    }\n    while (j < testTup2.size()) {\n        result[i] = testTup2[j];\n        j++;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/221","completion":"    int firstEven = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] % 2 == 0) {\n            firstEven = nums[i];\n            break;\n        }\n    }\n    return firstEven;\n}","language":"cpp"}
{"task_id":"MBCPP\/222","completion":"    if (testTuple.size() == 0) {\n        return true;\n    }\n    int i = 0;\n    int j = 0;\n    while (i < testTuple.size()) {\n        if (testTuple[i] != testTuple[j]) {\n            return false;\n        }\n        i++;\n        j++;\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/223","completion":"    int count = 0;\n    int i = 0;\n    while (i < n) {\n        if (arr[i] == x) {\n            count++;\n        }\n        i++;\n    }\n    if (count > n \/ 2) {\n        return true;\n    }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/224","completion":"    int count = 0;\n    while (n > 0) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/225","completion":"    if (low > high) {\n        return -1;\n    }\n    int mid = (low + high) \/ 2;\n    if (mid == 0 || mid == arr.size() - 1) {\n        return arr[mid];\n    }\n    if (arr[mid] < arr[mid - 1] && arr[mid] < arr[mid + 1]) {\n        return arr[mid];\n    }\n    if (arr[mid] < arr[mid - 1]) {\n        return findMin(arr, mid + 1, high);\n    }\n    return findMin(arr, low, mid - 1);\n}","language":"cpp"}
{"task_id":"MBCPP\/226","completion":"    string result = \"\";\n    for (int i = 0; i < str.length(); i++) {\n        if (i % 2 == 0) {\n            result += str[i];\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/227","completion":"    if (a < b && a < c) {\n        return a;\n    }\n    if (b < a && b < c) {\n        return b;\n    }\n    return c;\n}","language":"cpp"}
{"task_id":"MBCPP\/230","completion":"    string result = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] == ' ') {\n            result += chr;\n        } else {\n            result += str1[i];\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/238","completion":"    int n = str.size();\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j <= n; j++) {\n            if (str.substr(i, j - i).find(str.substr(i, j - i)) != string::npos) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/248","completion":"    double sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += 1.0 \/ i;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/250","completion":"    int count = 0;\n    for (auto &t : tup) {\n        if (t == x) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/253","completion":"    int count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/261","completion":"    vector<int> result;\n    int i;\n    for (i = 0; i < testTup1.size(); i++) {\n        result.push_back(testTup1[i] \/ testTup2[i]);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/269","completion":"    int sum = 0;\n    for (int i = 0; i < k.length(); i++) {\n        sum += k[i];\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/270","completion":"    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0 && arr[i] % 2 == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/273","completion":"    vector<int> result = {0, 0, 0};\n    for (int i = 0; i < testTup1.size(); i++) {\n        result[i] = testTup1[i] - testTup2[i];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/281","completion":"    vector<int> tempList;\n    vector<int> tempList2;\n    for (int i = 0; i < testList.size(); i++) {\n        tempList.push_back(testList[i]);\n        for (int j = i + 1; j < testList.size(); j++) {\n            if (testList[i] == testList[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/282","completion":"    vector<int> result;\n    result.resize(nums1.size());\n    for (int i = 0; i < nums1.size(); i++) {\n        result[i] = nums1[i] - nums2[i];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/285","completion":"    string result = \"Not matched!\";\n    int index = text.find(\"a\");\n    if (index != -1) {\n        index += 1;\n        if (index < text.length() - 2) {\n            if (text[index] == 'b' && text[index + 1] == 'b' && text[index + 2] == 'b') {\n                result = \"Found a match!\";\n            }\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/292","completion":"    int q = n \/ m;\n    return q;\n}","language":"cpp"}
{"task_id":"MBCPP\/296","completion":"    int invCount = 0;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                invCount++;\n            }\n        }\n    }\n    return invCount;\n}","language":"cpp"}
{"task_id":"MBCPP\/309","completion":"    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/316","completion":"    int left = 0;\n    int right = a.size() - 1;\n    while (left <= right) {\n        int mid = left + (right - left) \/ 2;\n        if (a[mid] == x) {\n            if (mid == a.size() - 1 || a[mid + 1] != x) {\n                return mid;\n            }\n            left = mid + 1;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/320","completion":"    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    int sumOfSquares = 0;\n    for (int i = 1; i <= n; i++) {\n        sumOfSquares += i * i;\n    }\n    return (sum * sum - sumOfSquares);\n}","language":"cpp"}
{"task_id":"MBCPP\/327","completion":"    return (x == y || x == z || y == z);\n}","language":"cpp"}
{"task_id":"MBCPP\/329","completion":"    int count = 0;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] < 0) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/331","completion":"    int count = 0;\n    while (n != 0) {\n        if ((n & 1) == 0) {\n            count++;\n        }\n        n >>= 1;\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/334","completion":"    if (a + b > c && a + c > b && b + c > a) {\n        return true;\n    }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/335","completion":"    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += a + i * d;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/349","completion":"    string result;\n    int i;\n    for (i = 0; i < str.size(); i++) {\n        if (str[i] != '0' && str[i] != '1') {\n            result = \"No\";\n            break;\n        }\n    }\n    if (i == str.size()) {\n        result = \"Yes\";\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/351","completion":"    vector<int> counts;\n    int i;\n    int count;\n\n    counts.resize(n);\n    for (i = 0; i < n; i++) {\n        counts[i] = 0;\n    }\n\n    for (i = 0; i < n; i++) {\n        count = counts[arr[i]];\n        if (count < k) {\n            counts[arr[i]] = count + 1;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        if (counts[i] == k) {\n            return i;\n        }\n    }\n\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/352","completion":"    vector<int> v;\n    for (int i = 0; i < str.length(); i++) {\n        v.push_back(str[i]);\n    }\n    for (int i = 0; i < str.length(); i++) {\n        for (int j = i + 1; j < str.length(); j++) {\n            if (str[i] == str[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/356","completion":"    return 180 - (a + b);\n}","language":"cpp"}
{"task_id":"MBCPP\/357","completion":"    int max = 0;\n    for (auto it : testList) {\n        for (auto element : it) {\n            if (element > max) {\n                max = element;\n            }\n        }\n    }\n    return max;\n}","language":"cpp"}
{"task_id":"MBCPP\/358","completion":"    vector<int> result;\n    result.resize(nums1.size());\n    for (int i = 0; i < nums1.size(); i++) {\n        result[i] = nums1[i] % nums2[i];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/365","completion":"    int count = 0;\n    while (n > 0) {\n        n \/= 10;\n        count++;\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/366","completion":"    int max = 0;\n    for (int i = 0; i < listNums.size() - 1; i++) {\n        int product = listNums[i] * listNums[i + 1];\n        if (product > max) {\n            max = product;\n        }\n    }\n    return max;\n}","language":"cpp"}
{"task_id":"MBCPP\/373","completion":"    return l * w * h;\n}","language":"cpp"}
{"task_id":"MBCPP\/377","completion":"    string result;\n    int i;\n\n    result = \"\";\n    for (i = 0; i < s.size(); i++) {\n        if (s[i] != c[0]) {\n            result += s[i];\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/378","completion":"    vector<int> temp;\n    temp.push_back(testList[testList.size() - 1]);\n    for (int i = testList.size() - 2; i >= 0; i--) {\n        testList[i + 1] = testList[i];\n    }\n    testList[0] = temp[0];\n    return testList;\n}","language":"cpp"}
{"task_id":"MBCPP\/379","completion":"    return 2 * (l * w + w * h + h * l);\n}","language":"cpp"}
{"task_id":"MBCPP\/382","completion":"    int n = a.size();\n    int left = 0;\n    int right = n - 1;\n    while (left <= right) {\n        int mid = left + (right - left) \/ 2;\n        if (a[mid] > a[mid + 1]) {\n            return mid + 1;\n        } else if (a[mid] < a[mid - 1]) {\n            return mid;\n        } else if (a[mid] > a[0]) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/384","completion":"    \/\/ write your code here\n    int min = arr[0];\n    int count = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            count = 1;\n        } else if (arr[i] == min) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/387","completion":"    int i = 0;\n    for (int j = 0; j < n.size(); j++) {\n        i = i << 1;\n        if (i % 2 == 0) {\n            i++;\n        }\n        i = i + n[j] - '0';\n    }\n    if (i % 2 == 0) {\n        return string(\"Even\");\n    } else {\n        return string(\"Odd\");\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/388","completion":"    int i;\n    int powerOf2 = 1;\n    for (i = 1; i <= n; i *= 2) {\n        powerOf2 = i;\n    }\n    return powerOf2;\n}","language":"cpp"}
{"task_id":"MBCPP\/389","completion":"    int p = 2, q = 1;\n    while (n > 1) {\n        q = p + q;\n        p = q - p;\n        n--;\n    }\n    return q;\n}","language":"cpp"}
{"task_id":"MBCPP\/391","completion":"    vector<unordered_map<string, unordered_map<string, int>>> result;\n    for (int i = 0; i < l1.size(); i++) {\n        result.push_back({{l1[i], {{l2[i], l3[i]}}}});\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/394","completion":"    vector<int> temp;\n    for (int i = 0; i < testTup.size(); i++) {\n        for (int j = 0; j < testTup.size(); j++) {\n            if (i != j && testTup[i] == testTup[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/396","completion":"    if (str.empty()) {\n        return \"Invalid\";\n    }\n\n    if (str.substr(0, 1) == str.substr(str.length() - 1)) {\n        return \"Valid\";\n    } else {\n        return \"Invalid\";\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/399","completion":"    vector<int> resultTup;\n    resultTup.resize(testTup1.size());\n    for (int i = 0; i < testTup1.size(); i++) {\n        resultTup[i] = testTup1[i] ^ testTup2[i];\n    }\n    return resultTup;\n}","language":"cpp"}
{"task_id":"MBCPP\/401","completion":"    vector<vector<int>> resultTup;\n    resultTup.resize(testTup1.size());\n    for (int i = 0; i < testTup1.size(); i++) {\n        resultTup[i].resize(testTup1[i].size());\n        for (int j = 0; j < testTup1[i].size(); j++) {\n            resultTup[i][j] = testTup1[i][j] + testTup2[i][j];\n        }\n    }\n    return resultTup;\n}","language":"cpp"}
{"task_id":"MBCPP\/402","completion":"    int ncr = 1;\n    for (int i = 1; i <= r; i++) {\n        ncr = ncr * (n - i + 1) \/ i;\n    }\n    return ncr % p;\n}","language":"cpp"}
{"task_id":"MBCPP\/404","completion":"    if (a < b) {\n        return a;\n    } else {\n        return b;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/406","completion":"    string result;\n    if (x % 2 == 0) {\n        result = \"Even Parity\";\n    } else {\n        result = \"Odd Parity\";\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/409","completion":"    vector<int> min = list1[0];\n    int minProduct = min[0] * min[1];\n\n    for (int i = 1; i < list1.size(); i++) {\n        int product = list1[i][0] * list1[i][1];\n        if (product < minProduct) {\n            min = list1[i];\n            minProduct = product;\n        }\n    }\n\n    return minProduct;\n}","language":"cpp"}
{"task_id":"MBCPP\/412","completion":"    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] % 2 == 1) {\n            continue;\n        }\n        result.push_back(l[i]);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/414","completion":"    if (list1.size() > list2.size()) {\n        return overlapping(list2, list1);\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] == list2[i]) {\n            return true;\n        }\n    }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/415","completion":"    vector<int> max_pair;\n    int max_product = 0;\n\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            int product = arr[i] * arr[j];\n            if (product > max_product) {\n                max_product = product;\n                max_pair.resize(2);\n                max_pair[0] = arr[i];\n                max_pair[1] = arr[j];\n            }\n        }\n    }\n\n    return max_pair;\n}","language":"cpp"}
{"task_id":"MBCPP\/419","completion":"    int sum = 0;\n    int length = list1.size();\n    for (int i = 0; i < length; i++) {\n        double number = list1[i];\n        sum += round(number);\n    }\n    return sum * length;\n}","language":"cpp"}
{"task_id":"MBCPP\/426","completion":"    vector<int> result;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] % 2 != 0) {\n            result.push_back(nums[i]);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/428","completion":"    int n = myList.size();\n    int gap = n \/ 2;\n    while (gap > 0) {\n        for (int i = gap; i < n; i++) {\n            int j = i;\n            int tmp = myList[i];\n            while (j >= gap && myList[j - gap] > tmp) {\n                myList[j] = myList[j - gap];\n                j = j - gap;\n            }\n            myList[j] = tmp;\n        }\n        gap = gap \/ 2;\n    }\n    return myList;\n}","language":"cpp"}
{"task_id":"MBCPP\/429","completion":"    vector<int> result = {0, 0, 0, 0};\n    for (int i = 0; i < testTup1.size(); i++) {\n        result[i] = testTup1[i] & testTup2[i];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/433","completion":"    vector<int> v;\n    int i;\n    for (i = 0; i < arr.size(); i++) {\n        if (arr[i] > number) {\n            break;\n        }\n    }\n    if (i == arr.size()) {\n        return \"Yes, the entered number is greater than those in the array\";\n    } else {\n        return \"No, entered number is less than those in the array\";\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/434","completion":"    string result = \"Not matched!\";\n    int i = 0;\n    while (i < text.size() && text[i] == 'a') {\n        i++;\n    }\n    if (i < text.size() && text[i] == 'b') {\n        result = \"Found a match!\";\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/435","completion":"    return n % 10;\n}","language":"cpp"}
{"task_id":"MBCPP\/436","completion":"    vector<int> list2;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] < 0) {\n            list2.push_back(list1[i]);\n        }\n    }\n    return list2;\n}","language":"cpp"}
{"task_id":"MBCPP\/437","completion":"    string result;\n    int i;\n\n    for (i = 0; i < str1.length(); i++) {\n        if (i % 2 == 1) {\n            result += str1[i];\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/441","completion":"    int area = 6*l*l;\n    return area;\n}","language":"cpp"}
{"task_id":"MBCPP\/443","completion":"    vector<int> list2;\n    list2.push_back(list1[0]);\n    for (int i = 1; i < list1.size(); i++) {\n        if (list1[i] < 0) {\n            list2.push_back(list1[i]);\n        }\n    }\n    return list2[list2.size() - 1];\n}","language":"cpp"}
{"task_id":"MBCPP\/445","completion":"    vector<vector<int>> resultTup;\n    resultTup.resize(testTup1.size());\n    for (int i = 0; i < testTup1.size(); i++) {\n        resultTup[i].resize(testTup1[i].size());\n        for (int j = 0; j < testTup1[i].size(); j++) {\n            resultTup[i][j] = testTup1[i][j] * testTup2[i][j];\n        }\n    }\n    return resultTup;\n}","language":"cpp"}
{"task_id":"MBCPP\/447","completion":"    vector<int> result;\n    int n = nums.size();\n    result.resize(n);\n    for (int i = 0; i < n; i++) {\n        result[i] = nums[i] * nums[i] * nums[i];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/451","completion":"    string text2 = \"\";\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}","language":"cpp"}
{"task_id":"MBCPP\/454","completion":"    string result = \"Not matched!\";\n    int index = 0;\n    while (index < text.size()) {\n        if (text[index] == 'z') {\n            result = \"Found a match!\";\n            break;\n        }\n        index++;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/458","completion":"    return l * b;\n}","language":"cpp"}
{"task_id":"MBCPP\/460","completion":"    vector<int> result;\n    for (auto v : lst) {\n        result.push_back(v[0]);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/472","completion":"    if (l.size() < 2) {\n        return true;\n    }\n    int first = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] != first + 1) {\n            return false;\n        }\n        first = l[i];\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/476","completion":"    int largest = nums[0];\n    int smallest = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] > largest) {\n            largest = nums[i];\n        }\n        if (nums[i] < smallest) {\n            smallest = nums[i];\n        }\n    }\n    return largest + smallest;\n}","language":"cpp"}
{"task_id":"MBCPP\/478","completion":"    string result;\n    int i;\n    for (i = 0; i < str1.size(); i++) {\n        if (str1[i] >= 'a' && str1[i] <= 'z') {\n            continue;\n        }\n        result += str1[i];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/479","completion":"    int firstDigit = 0;\n    while (n > 0) {\n        firstDigit = n % 10;\n        n \/= 10;\n    }\n    return firstDigit;\n}","language":"cpp"}
{"task_id":"MBCPP\/480","completion":"    string maxChar = \"\";\n    int maxCount = 0;\n    for (int i = 0; i < str1.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < str1.size(); j++) {\n            if (str1[i] == str1[j]) {\n                count++;\n            }\n        }\n        if (count > maxCount) {\n            maxCount = count;\n            maxChar = str1[i];\n        }\n    }\n    return maxChar;\n}","language":"cpp"}
{"task_id":"MBCPP\/481","completion":"    \/\/ Your code here\n    if (sum == 0) return true;\n    if (n == 0 && sum != 0) return false;\n    if (set[n - 1] > sum) return isSubsetSum(set, n - 1, sum);\n    return isSubsetSum(set, n - 1, sum) || isSubsetSum(set, n - 1, sum - set[n - 1]);\n}","language":"cpp"}
{"task_id":"MBCPP\/489","completion":"    int max = 0;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n            count = 1;\n        } else if (arr[i] == max) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/491","completion":"    if (n == 0) {\n        return 0;\n    }\n    return a + sumGp(a * r, n - 1, r);\n}","language":"cpp"}
{"task_id":"MBCPP\/492","completion":"    int low = 0;\n    int high = itemList.size() - 1;\n    while (low <= high) {\n        int mid = (low + high) \/ 2;\n        if (item < itemList[mid]) {\n            high = mid - 1;\n        } else if (item > itemList[mid]) {\n            low = mid + 1;\n        } else {\n            return true;\n        }\n    }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/498","completion":"    if (x == 0) {\n        return y;\n    }\n    if (y == 0) {\n        return x;\n    }\n    if (x > y) {\n        return gcd(x - y, y);\n    } else {\n        return gcd(x, y - x);\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/499","completion":"    return 2 * r;\n}","language":"cpp"}
{"task_id":"MBCPP\/501","completion":"    int count = 0;\n    for (int i = 1; i <= y; i++) {\n        if (x % i == 0 && y % i == 0) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/502","completion":"    int remainder = n % m;\n    return remainder;\n}","language":"cpp"}
{"task_id":"MBCPP\/504","completion":"    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i * i * i;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/505","completion":"    vector<int> result;\n    int i = 0;\n    int j = 0;\n    while (i < a.size()) {\n        if (a[i] != 0) {\n            result.push_back(a[i]);\n            j++;\n        }\n        i++;\n    }\n    while (j < a.size()) {\n        result.push_back(0);\n        j++;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/506","completion":"    int res = 1;\n    for (int i = 0; i < k; i++) {\n        res *= (n - i);\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/509","completion":"    int sum = 0;\n    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 != 0) {\n            sum += i;\n            count++;\n        }\n    }\n    return sum \/ count;\n}","language":"cpp"}
{"task_id":"MBCPP\/514","completion":"    int sum = 0;\n    for (int i = 0; i < testTup.size(); i++) {\n        sum += testTup[i];\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/515","completion":"    vector<bool> dp(n+1, false);\n    dp[0] = true;\n    for (int i = 1; i <= n; i++) {\n        for (int j = i; j <= n; j++) {\n            if (dp[j-i] && arr[j] % m == 0) {\n                dp[j] = true;\n            }\n        }\n    }\n    return dp[n];\n}","language":"cpp"}
{"task_id":"MBCPP\/517","completion":"    vector<int> list2;\n    list2.push_back(list1[0]);\n    for (int i = 1; i < list1.size(); i++) {\n        if (list1[i] > list2[list2.size() - 1]) {\n            list2.push_back(list1[i]);\n        } else if (list1[i] < list2[list2.size() - 1]) {\n            list2.push_back(list2[list2.size() - 1]);\n        }\n    }\n    return list2[list2.size() - 1];\n}","language":"cpp"}
{"task_id":"MBCPP\/518","completion":"    int i = 1;\n    while (i * i < num) {\n        i++;\n    }\n    while (i * i > num) {\n        i--;\n    }\n    return i;\n}","language":"cpp"}
{"task_id":"MBCPP\/521","completion":"    return (x + y > z) && (x + z > y) && (y + z > x);\n}","language":"cpp"}
{"task_id":"MBCPP\/527","completion":"    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/531","completion":"    vector<int> dp(v + 1, 0);\n    dp[0] = 0;\n    for (int i = 1; i <= v; i++) {\n        dp[i] = m + 1;\n        for (int j = 0; j < coins.size(); j++) {\n            if (i >= coins[j]) {\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1);\n            }\n        }\n    }\n    return dp[v];\n}","language":"cpp"}
{"task_id":"MBCPP\/534","completion":"    vector<int> result;\n    int i;\n    for (i = 0; i < text.size(); i++) {\n        if (text[i] == pattern[0]) {\n            if (text.size() - i < pattern.size()) {\n                break;\n            }\n            for (int j = 0; j < pattern.size(); j++) {\n                if (text[i + j] != pattern[j]) {\n                    break;\n                }\n                if (j == pattern.size() - 1) {\n                    result.push_back(i);\n                    result.push_back(i + j + 1);\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/541","completion":"    \/\/ write code here\n    int sum = 0;\n    for (int i = 1; i < n; i++) {\n        if (n % i == 0) {\n            sum += i;\n        }\n    }\n    return sum > n;\n}","language":"cpp"}
{"task_id":"MBCPP\/542","completion":"    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n            result += ':';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/548","completion":"    vector<int> dp(arr.size(), 0);\n    for (int i = 0; i < arr.size(); i++) {\n        dp[i] = 1;\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && dp[i] < dp[j] + 1) {\n                dp[i] = dp[j] + 1;\n            }\n        }\n    }\n    int max = 0;\n    for (int i = 0; i < dp.size(); i++) {\n        if (dp[i] > max) {\n            max = dp[i];\n        }\n    }\n    return max;\n}","language":"cpp"}
{"task_id":"MBCPP\/550","completion":"    if (low > high) {\n        return -1;\n    }\n\n    int mid = (low + high) \/ 2;\n    int left = findMax(arr, low, mid - 1);\n    int right = findMax(arr, mid + 1, high);\n    int midVal = arr[mid];\n\n    if (midVal > left && midVal > right) {\n        return midVal;\n    } else if (left > right) {\n        return left;\n    } else {\n        return right;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/551","completion":"    vector<int> list2;\n    for (int i = 0; i < list1.size(); i++) {\n        list2.push_back(list1[i][n]);\n    }\n    return list2;\n}","language":"cpp"}
{"task_id":"MBCPP\/554","completion":"    vector<int> odd_list;\n    int i;\n    for (i = 0; i < list.size(); i++) {\n        if (list[i] % 2 == 1) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}","language":"cpp"}
{"task_id":"MBCPP\/555","completion":"    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i * i * i;\n    }\n    int sum2 = 0;\n    for (int i = 1; i <= n; i++) {\n        sum2 += i;\n    }\n    return sum - sum2;\n}","language":"cpp"}
{"task_id":"MBCPP\/556","completion":"    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if ((a[i] ^ a[j]) % 2 == 1) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/557","completion":"    string result;\n    int i;\n    for (i = 0; i < str.size(); i++) {\n        if (str[i] >= 'a' && str[i] <= 'z') {\n            result += (char)(str[i] - 'a' + 'A');\n        } else {\n            result += (char)(str[i] - 'A' + 'a');\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/559","completion":"    int max_so_far = 0;\n    int curr_max = 0;\n    for (int i = 0; i < size; i++) {\n        curr_max = max(0, curr_max + a[i]);\n        max_so_far = max(max_so_far, curr_max);\n    }\n    return max_so_far;\n}","language":"cpp"}
{"task_id":"MBCPP\/562","completion":"    vector<int> max = lst[0];\n    int maxLen = 1;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i].size() > maxLen) {\n            max = lst[i];\n            maxLen = max.size();\n        }\n    }\n    return maxLen;\n}","language":"cpp"}
{"task_id":"MBCPP\/563","completion":"    vector<string> values;\n    string quote = \"\\\"\";\n    int start = text.find(quote);\n    while (start != -1) {\n        int end = text.find(quote, start + 1);\n        if (end != -1) {\n            values.push_back(text.substr(start + 1, end - start - 1));\n        }\n        start = text.find(quote, end + 1);\n    }\n    return values;\n}","language":"cpp"}
{"task_id":"MBCPP\/564","completion":"    int count = 0;\n    vector<int> v = arr;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (v[i] != v[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/566","completion":"    int sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n \/= 10;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/567","completion":"    int i = 1;\n    int j = 0;\n    while (i < list1.size()) {\n        if (list1[i] < list1[j]) {\n            return false;\n        }\n        i++;\n        j++;\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/576","completion":"    vector<int> c;\n    int i, j;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (a[i + j] != b[i + j]) {\n                break;\n            }\n            if (j == m - 1) {\n                return true;\n            }\n        }\n    }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/578","completion":"    vector<int> result;\n    int i1 = 0, i2 = 0, i3 = 0;\n    while (i1 < list1.size() && i2 < list2.size() && i3 < list3.size()) {\n        result.push_back(list1[i1]);\n        result.push_back(list2[i2]);\n        result.push_back(list3[i3]);\n        i1++;\n        i2++;\n        i3++;\n    }\n    while (i1 < list1.size()) {\n        result.push_back(list1[i1]);\n        i1++;\n    }\n    while (i2 < list2.size()) {\n        result.push_back(list2[i2]);\n        i2++;\n    }\n    while (i3 < list3.size()) {\n        result.push_back(list3[i3]);\n        i3++;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/582","completion":"    if (dict1.empty()) {\n        return true;\n    }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/587","completion":"    vector<int> listy;\n    for (int i = 0; i < listx.size(); i++) {\n        listy.push_back(listx[i]);\n    }\n    return listy;\n}","language":"cpp"}
{"task_id":"MBCPP\/588","completion":"    int largest = nums[0];\n    int smallest = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] > largest) {\n            largest = nums[i];\n        }\n        if (nums[i] < smallest) {\n            smallest = nums[i];\n        }\n    }\n    return largest - smallest;\n}","language":"cpp"}
{"task_id":"MBCPP\/591","completion":"    int first = newlist[0];\n    int last = newlist[newlist.size() - 1];\n    newlist[0] = last;\n    newlist[newlist.size() - 1] = first;\n    return newlist;\n}","language":"cpp"}
{"task_id":"MBCPP\/593","completion":"    string result = \"\";\n    for (int i = 0; i < ip.size(); i++) {\n        if (ip[i] != '0') {\n            result += ip[i];\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/598","completion":"    int sum = 0;\n    int temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp \/= 10;\n    }\n    return sum == number;\n}","language":"cpp"}
{"task_id":"MBCPP\/600","completion":"    return (n & 1) == 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/602","completion":"    string result = \"None\";\n    string str2 = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (str2.find(str1.at(i)) == -1) {\n            str2 += str1.at(i);\n        } else {\n            result = str1.at(i);\n            break;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/605","completion":"    if (num < 2) {\n        return false;\n    }\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/606","completion":"    return (degree * 3.14159265358979323846) \/ 180.0;\n}","language":"cpp"}
{"task_id":"MBCPP\/611","completion":"    int max = 0;\n    for (auto it : testList) {\n        auto nth = it[n];\n        if (nth > max) {\n            max = nth;\n        }\n    }\n    return max;\n}","language":"cpp"}
{"task_id":"MBCPP\/615","completion":"    vector<double> result;\n    int n = nums.size();\n    int m = nums[0].size();\n    result.resize(m);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            result[j] += nums[i][j];\n        }\n    }\n    for (int j = 0; j < m; j++) {\n        result[j] \/= n;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/616","completion":"    vector<int> result = {0, 0, 0, 0};\n    for (int i = 0; i < testTup1.size(); i++) {\n        result[i] = testTup1[i] % testTup2[i];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/625","completion":"    int first = newlist[0];\n    int last = newlist[newlist.size() - 1];\n    newlist[0] = last;\n    newlist[newlist.size() - 1] = first;\n    return newlist;\n}","language":"cpp"}
{"task_id":"MBCPP\/627","completion":"    int min = start;\n    int max = end;\n    int mid;\n    int missing = 0;\n\n    while (min <= max) {\n        mid = (min + max) \/ 2;\n        if (array[mid] == mid) {\n            min = mid + 1;\n        } else {\n            max = mid - 1;\n        }\n    }\n\n    missing = min;\n\n    for (int i = start; i <= end; i++) {\n        if (array[i] != i) {\n            missing = i;\n            break;\n        }\n    }\n\n    return missing;\n}","language":"cpp"}
{"task_id":"MBCPP\/628","completion":"    string result = \"\";\n    for (int i = 0; i < str.length(); i++) {\n        if (str[i] == ' ') {\n            result += \"%20\";\n        } else {\n            result += str[i];\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/629","completion":"    vector<int> even_list;\n    for (auto i : list) {\n        if (i % 2 == 0) {\n            even_list.push_back(i);\n        }\n    }\n    return even_list;\n}","language":"cpp"}
{"task_id":"MBCPP\/631","completion":"    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/633","completion":"    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            sum += arr[i] ^ arr[j];\n        }\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/637","completion":"    int profit = actualCost - saleAmount;\n    int loss = saleAmount - actualCost;\n    return (profit == 0 && loss == 0);\n}","language":"cpp"}
{"task_id":"MBCPP\/643","completion":"    string pattern = \"z\";\n    string result = \"Not matched!\";\n    int index = text.find(pattern);\n    if (index != -1) {\n        int index2 = text.rfind(pattern);\n        if (index2 != -1) {\n            result = \"Found a match!\";\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/644","completion":"    vector<int> output;\n    int i, j, temp;\n    for (i = 0, j = k - 1; i < j; i++, j--) {\n        temp = input[i];\n        input[i] = input[j];\n        input[j] = temp;\n    }\n    return input;\n}","language":"cpp"}
{"task_id":"MBCPP\/649","completion":"    int sum = 0;\n    for (int i = m; i <= n; i++) {\n        sum += nums[i];\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/650","completion":"    vector<int> diff;\n    for (int i = 0; i < n; i++) {\n        diff.push_back(arr1[i] - arr2[i]);\n    }\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += diff[i];\n    }\n    return sum == 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/654","completion":"    return 2 * (l + b);\n}","language":"cpp"}
{"task_id":"MBCPP\/658","completion":"    int max = 0;\n    int max_index = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < list1.size(); j++) {\n            if (list1[i] == list1[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_index = i;\n        }\n    }\n    return list1[max_index];\n}","language":"cpp"}
{"task_id":"MBCPP\/665","completion":"    int size = numList.size();\n    int first = numList[0];\n    for (int i = 0; i < size - 1; i++) {\n        numList[i] = numList[i + 1];\n    }\n    numList[size - 1] = first;\n    return numList;\n}","language":"cpp"}
{"task_id":"MBCPP\/666","completion":"    int count = 0;\n    int index = str.find(chr);\n    while (index != string::npos) {\n        count++;\n        index = str.find(chr, index + 1);\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/667","completion":"    int count = 0;\n    for (int i = 0; i < str.size(); i++) {\n        if (vowels.find(str[i]) != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/670","completion":"    \/\/ write your code here\n    int n = nums.size();\n    if (n <= 1) {\n        return true;\n    }\n    int cur = nums[0];\n    for (int i = 1; i < n; i++) {\n        if (nums[i] < cur) {\n            return false;\n        }\n        cur = nums[i];\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/672","completion":"    if (num1 > num2 && num1 > num3) {\n        return num1;\n    } else if (num2 > num1 && num2 > num3) {\n        return num2;\n    } else {\n        return num3;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/673","completion":"    int result = 0;\n    for (int i = 0; i < list.size(); i++) {\n        result = result * 10 + list[i];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/675","completion":"    if (x + y >= m && x + y <= n) {\n        return 20;\n    }\n    return x + y;\n}","language":"cpp"}
{"task_id":"MBCPP\/676","completion":"    string text2 = \"\";\n    for (int i = 0; i < text1.length(); i++) {\n        char c = text1[i];\n        if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9') {\n            text2 += c;\n        }\n    }\n    return text2;\n}","language":"cpp"}
{"task_id":"MBCPP\/678","completion":"    string str2 = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] != ' ') {\n            str2 += str1[i];\n        }\n    }\n    return str2;\n}","language":"cpp"}
{"task_id":"MBCPP\/680","completion":"    \/\/ write your code here\n    if (nums.size() < 2) {\n        return true;\n    }\n    int pre = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] <= pre) {\n            return false;\n        }\n        pre = nums[i];\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/681","completion":"    int i, d;\n    for (i = 2; i <= n; i++) {\n        d = n % i;\n        if (d == 0) {\n            return i;\n        }\n    }\n    return n;\n}","language":"cpp"}
{"task_id":"MBCPP\/682","completion":"    vector<int> result;\n    result.resize(nums1.size());\n    for (int i = 0; i < nums1.size(); i++) {\n        result[i] = nums1[i] * nums2[i];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/687","completion":"    if (a == 0) {\n        return b;\n    }\n    return recurGcd(b % a, a);\n}","language":"cpp"}
{"task_id":"MBCPP\/688","completion":"    double real = a;\n    double imag = b;\n    double length = sqrt(real * real + imag * imag);\n    return length;\n}","language":"cpp"}
{"task_id":"MBCPP\/690","completion":"    vector<int> result;\n    int i = 0;\n    int j = 1;\n    int k = 0;\n    int sum = 0;\n    while (i < nums.size()) {\n        sum = nums[i] * nums[j];\n        result.push_back(sum);\n        i = i + 1;\n        j = j + 1;\n        if (j == nums.size()) {\n            i = i + 1;\n            j = i + 1;\n            k = k + 1;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/701","completion":"    \/\/ Your code here\n    int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    int leftSum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (leftSum == sum - leftSum - arr[i]) {\n            return i;\n        }\n        leftSum += arr[i];\n    }\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/703","completion":"    return d[x] != 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/704","completion":"    double sum = 0.0;\n    for (int i = 1; i <= n; i++) {\n        sum += 1.0 \/ i;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/706","completion":"    vector<int> temp;\n    int i, j, k;\n    temp.resize(m);\n    for (i = 0; i < m; i++) {\n        temp[i] = arr1[i];\n    }\n    for (i = 0; i < n; i++) {\n        k = 0;\n        for (j = 0; j < m; j++) {\n            if (temp[j] == arr2[i]) {\n                k++;\n            }\n        }\n        if (k == 0) {\n            return false;\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/713","completion":"    bool result = true;\n    for (int i = 0; i < testTup.size(); i++) {\n        if (testTup[i] == false) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/719","completion":"    if (text.length() == 0) {\n        return \"Not matched!\";\n    }\n\n    if (text[0] == 'a') {\n        return \"Found a match!\";\n    }\n\n    return textMatch(text.substr(1));\n}","language":"cpp"}
{"task_id":"MBCPP\/726","completion":"    vector<int> result = {1, 1, 1, 1};\n    for (int i = 0; i < testTup.size(); i++) {\n        result[i] = testTup[i] * testTup[i + 1];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/727","completion":"    string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z' || s[i] >= 'A' && s[i] <= 'Z' || s[i] >= '0' && s[i] <= '9') {\n            result += s[i];\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/728","completion":"    vector<int> res;\n    int i;\n    for (i = 0; i < lst1.size(); i++) {\n        res.push_back(lst1[i] + lst2[i]);\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/729","completion":"    vector<int> result;\n    result.resize(nums1.size());\n    for (int i = 0; i < nums1.size(); i++) {\n        result[i] = nums1[i] + nums2[i];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/732","completion":"    string result = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n            result += \":\";\n        } else {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/733","completion":"    int lo = 0;\n    int hi = a.size() - 1;\n\n    while (lo <= hi) {\n        int mid = lo + (hi - lo) \/ 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] < x) {\n            lo = mid + 1;\n        } else {\n            hi = mid - 1;\n        }\n    }\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/736","completion":"    int lo = 0;\n    int hi = a.size() - 1;\n    while (lo <= hi) {\n        int mid = lo + (hi - lo) \/ 2;\n        if (a[mid] < x) {\n            lo = mid + 1;\n        } else {\n            hi = mid - 1;\n        }\n    }\n    return lo;\n}","language":"cpp"}
{"task_id":"MBCPP\/741","completion":"    int n = s.size();\n    for (int i = 0; i < n - 1; i++) {\n        if (s[i] != s[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/744","completion":"    for (int i = 0; i < testTup.size(); i++) {\n        if (testTup[i] == -1) {\n            return true;\n        }\n    }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/750","completion":"    vector<int> result = testList;\n    for (int i = 0; i < testTup.size(); i++) {\n        result.push_back(testTup[i]);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/751","completion":"    if (i >= arr.size()) {\n        return true;\n    }\n    if (arr[i] < arr[(i - 1) \/ 2]) {\n        return false;\n    }\n    return checkMinHeap(arr, i + 1);\n}","language":"cpp"}
{"task_id":"MBCPP\/754","completion":"    vector<int> result;\n    result.resize(0);\n    for (int i = 0; i < l1.size(); i++) {\n        if (l1[i] == l2[i] && l1[i] == l3[i]) {\n            result.push_back(l1[i]);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/756","completion":"    string result = \"Not matched!\";\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] == 'a') {\n            if (i + 1 < text.size() && text[i + 1] == 'b') {\n                i += 2;\n            } else {\n                result = \"Found a match!\";\n                break;\n            }\n        } else {\n            i++;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/760","completion":"    vector<int> set;\n    set.reserve(n);\n    for (int i = 0; i < n; i++) {\n        if (set.size() == 0) {\n            set.push_back(arr[i]);\n        } else if (set.back() != arr[i]) {\n            set.push_back(arr[i]);\n        }\n    }\n    if (set.size() == 1) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/764","completion":"    int count = 0;\n    for (int i = 0; i < str.length(); i++) {\n        if (str[i] >= '0' && str[i] <= '9') {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/767","completion":"    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/768","completion":"    return (x & 1) == 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/771","completion":"    int n = exp.size();\n    int balance = 0;\n    for (int i = 0; i < n; i++) {\n        char c = exp[i];\n        if (c == '{') {\n            balance++;\n        } else if (c == '}') {\n            balance--;\n        } else if (c == '[') {\n            balance++;\n        } else if (c == ']') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/775","completion":"    int i = 0;\n    for (int j = 0; j < nums.size(); j++) {\n        if (j % 2 == 1 && nums[j] % 2 == 1) {\n            i++;\n        }\n    }\n    return i == nums.size() \/ 2;\n}","language":"cpp"}
{"task_id":"MBCPP\/781","completion":"    string ans;\n    int i;\n    int count = 0;\n    for (i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            count++;\n        }\n    }\n    if (count % 2 == 0) {\n        ans = string(\"Even\");\n    } else {\n        ans = string(\"Odd\");\n    }\n    return ans;\n}","language":"cpp"}
{"task_id":"MBCPP\/786","completion":"    int lo = 0, hi = a.size();\n    while (lo < hi) {\n        int mid = (lo + hi) \/ 2;\n        if (a[mid] < x)\n            lo = mid + 1;\n        else\n            hi = mid;\n    }\n    return lo;\n}","language":"cpp"}
{"task_id":"MBCPP\/787","completion":"    if (text.size() < 3) {\n        return \"Not matched!\";\n    }\n    if (text[0] == 'a' && text[1] == 'b' && text[2] == 'b') {\n        return \"Found a match!\";\n    }\n    return \"Not matched!\";\n}","language":"cpp"}
{"task_id":"MBCPP\/790","completion":"    return nums.size() > 0 && nums[0] % 2 == 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/793","completion":"    int left = 0;\n    int right = n - 1;\n    while (left <= right) {\n        int mid = left + (right - left) \/ 2;\n        if (x == arr[mid]) {\n            return mid;\n        } else if (x < arr[mid]) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/794","completion":"    if (text.size() < 2) {\n        return \"Not matched!\";\n    }\n    if (text[0] == 'a' && text[text.size() - 1] == 'b') {\n        return \"Found a match!\";\n    }\n    return \"Not matched!\";\n}","language":"cpp"}
{"task_id":"MBCPP\/797","completion":"    int sum = 0;\n    for (int i = l; i <= r; i++) {\n        if (i % 2 != 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/798","completion":"    int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/799","completion":"    return (n << d) | (n >> (32 - d));\n}","language":"cpp"}
{"task_id":"MBCPP\/800","completion":"    string result = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] != ' ') {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/802","completion":"    int count = 0;\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (arr[i] > arr[j]) {\n            count++;\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i++;\n            j--;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/803","completion":"    if (n <= 0) {\n        return false;\n    }\n    int low = 0;\n    int high = n;\n    while (low <= high) {\n        int mid = low + (high - low) \/ 2;\n        if (mid * mid == n) {\n            return true;\n        } else if (mid * mid < n) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/804","completion":"    vector<int> temp;\n    int product = 1;\n    for (int i = 0; i < n; i++) {\n        product *= arr[i];\n    }\n    if (product % 2 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/805","completion":"    vector<int> result;\n    int maxSum = 0;\n    for (int i = 0; i < lists.size(); i++) {\n        int sum = 0;\n        for (int j = 0; j < lists[i].size(); j++) {\n            sum += lists[i][j];\n        }\n        if (sum > maxSum) {\n            maxSum = sum;\n            result = lists[i];\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/806","completion":"    int max = 0;\n    int count = 0;\n    for (int i = 0; i < testStr.length(); i++) {\n        if (testStr[i] >= 'A' && testStr[i] <= 'Z') {\n            count++;\n        } else {\n            if (count > max) {\n                max = count;\n            }\n            count = 0;\n        }\n    }\n    if (count > max) {\n        max = count;\n    }\n    return max;\n}","language":"cpp"}
{"task_id":"MBCPP\/807","completion":"    int firstOdd = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] % 2 != 0) {\n            firstOdd = nums[i];\n            break;\n        }\n    }\n    return firstOdd;\n}","language":"cpp"}
{"task_id":"MBCPP\/808","completion":"    vector<int> kTup;\n    for (int i = 0; i < testTup.size(); i++) {\n        if (testTup[i] == k) {\n            kTup.push_back(testTup[i]);\n        }\n    }\n    if (kTup.size() == 0) {\n        return false;\n    } else {\n        return true;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/809","completion":"    for (int i = 0; i < testTup1.size(); i++) {\n        if (testTup1[i] < testTup2[i]) {\n            return false;\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/811","completion":"    vector<int> testList1_copy;\n    vector<int> testList2_copy;\n    for (int i = 0; i < testList1.size(); i++) {\n        testList1_copy = testList1[i];\n        testList2_copy = testList2[i];\n        if (testList1_copy.size() != testList2_copy.size()) {\n            return false;\n        }\n        for (int j = 0; j < testList1_copy.size(); j++) {\n            if (testList1_copy[j] != testList2_copy[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/813","completion":"    int len = 0;\n    while (str1[len] != '\\0') {\n        len++;\n    }\n    return len;\n}","language":"cpp"}
{"task_id":"MBCPP\/815","completion":"    vector<int> res;\n    int i, j, k;\n    int temp;\n    for (i = 0; i < n; i++) {\n        res.push_back(arr[i]);\n    }\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (res[i] > res[j]) {\n                temp = res[i];\n                res[i] = res[j];\n                res[j] = temp;\n            }\n        }\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/817","completion":"    vector<int> result;\n    int i;\n    for (i = 0; i < nums.size(); i++) {\n        if (nums[i] % m == 0 || nums[i] % n == 0) {\n            result.push_back(nums[i]);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/818","completion":"    int lower = 0;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i] >= 'a' && str[i] <= 'z') {\n            lower++;\n        }\n    }\n    return lower;\n}","language":"cpp"}
{"task_id":"MBCPP\/820","completion":"    return monthnum1 == 2 || monthnum1 == 4 || monthnum1 == 6 || monthnum1 == 9 || monthnum1 == 11;\n}","language":"cpp"}
{"task_id":"MBCPP\/823","completion":"    string result = \"\";\n    if (str.find(sample) == 0) {\n        result = \"string starts with the given substring\";\n    } else {\n        result = \"string doesnt start with the given substring\";\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/824","completion":"    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(l[i]);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/825","completion":"    vector<int> result;\n    for (int i = 0; i < listIndex.size(); i++) {\n        result.push_back(nums[listIndex[i]]);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/827","completion":"    int sum = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        sum += list1[i][c];\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/831","completion":"    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/841","completion":"    int invCount = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                invCount++;\n            }\n        }\n    }\n    return invCount;\n}","language":"cpp"}
{"task_id":"MBCPP\/842","completion":"    int count = 0;\n    int result = 0;\n    for (int i = 0; i < arrSize; i++) {\n        if (arr[i] % 2 != 0) {\n            count++;\n            if (count % 2 == 1) {\n                result = arr[i];\n            }\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/847","completion":"    vector<int> ys;\n    ys.reserve(xs.size());\n    for (auto x : xs) {\n        ys.push_back(x);\n    }\n    return ys;\n}","language":"cpp"}
{"task_id":"MBCPP\/848","completion":"    return (base1 + base2) * height \/ 2;\n}","language":"cpp"}
{"task_id":"MBCPP\/852","completion":"    vector<int> result;\n    for (int i = 0; i < numList.size(); i++) {\n        if (numList[i] >= 0) {\n            result.push_back(numList[i]);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/855","completion":"    return (x & 1) == 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/857","completion":"    vector<vector<string>> list2;\n    list2.resize(list1.size());\n    for (int i = 0; i < list1.size(); i++) {\n        list2[i].resize(list1[i].length());\n        for (int j = 0; j < list1[i].length(); j++) {\n            list2[i][j] = list1[i][j];\n        }\n    }\n    return list2;\n}","language":"cpp"}
{"task_id":"MBCPP\/868","completion":"    int len = 0;\n    for (int i = a.size() - 1; i >= 0; i--) {\n        if (a[i] == ' ') {\n            if (len == 0) {\n                continue;\n            }\n            break;\n        }\n        len++;\n    }\n    return len;\n}","language":"cpp"}
{"task_id":"MBCPP\/871","completion":"    if (string1.length() != string2.length()) {\n        return false;\n    }\n\n    string temp = string1 + string1;\n    if (temp.find(string2) != -1) {\n        return true;\n    }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/873","completion":"    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}","language":"cpp"}
{"task_id":"MBCPP\/877","completion":"    string result = \"\";\n    int n = str.length();\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        while (j > 0 && str[j - 1] > str[j]) {\n            char temp = str[j];\n            str[j] = str[j - 1];\n            str[j - 1] = temp;\n            j--;\n        }\n    }\n    return str;\n}","language":"cpp"}
{"task_id":"MBCPP\/879","completion":"    if (text.size() < 2) {\n        return \"Not matched!\";\n    }\n    if (text[0] == 'a' && text[text.size() - 1] == 'b') {\n        return \"Found a match!\";\n    }\n    return \"Not matched!\";\n}","language":"cpp"}
{"task_id":"MBCPP\/880","completion":"    int d = b*b - 4*a*c;\n    if (d < 0) {\n        return \"No solutions\";\n    } else if (d == 0) {\n        return \"1 solution\";\n    } else {\n        return \"2 solutions\";\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/883","completion":"    vector<int> result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int count = 0;\n    while (i < nums.size()) {\n        if (nums[i] % m == 0 && nums[i] % n == 0) {\n            result.push_back(nums[i]);\n            count++;\n        }\n        i++;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/886","completion":"    double sum = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n    }\n    return sum \/ numbers.size();\n}","language":"cpp"}
{"task_id":"MBCPP\/887","completion":"    return (n & 1) == 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/888","completion":"    vector<vector<int>> result = {{0, 0}, {0, 0}, {0, 0}, {0, 0}};\n    for (int i = 0; i < testTup1.size(); i++) {\n        for (int j = 0; j < testTup1.at(i).size(); j++) {\n            result.at(i).at(j) = testTup1.at(i).at(j) - testTup2.at(i).at(j);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/889","completion":"    vector<vector<int>> result;\n    int i, j;\n    for (i = 0; i < lists.size(); i++) {\n        result.push_back(vector<int>());\n        for (j = lists[i].size() - 1; j >= 0; j--) {\n            result[i].push_back(lists[i][j]);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/890","completion":"    int i = 0, j = 0;\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] == arr2[j]) {\n            i++;\n            j++;\n        } else if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return i < arr1.size() ? i : j;\n}","language":"cpp"}
{"task_id":"MBCPP\/896","completion":"    vector<vector<int>> result;\n    vector<int> temp;\n    int i;\n    int j;\n    int k;\n    int temp_last;\n    for (i = 0; i < tuples.size(); i++) {\n        result.push_back(tuples[i]);\n    }\n    for (i = 0; i < tuples.size() - 1; i++) {\n        for (j = 0; j < tuples.size() - 1 - i; j++) {\n            if (result[j][tuples[j].size() - 1] > result[j + 1][tuples[j + 1].size() - 1]) {\n                temp = result[j];\n                result[j] = result[j + 1];\n                result[j + 1] = temp;\n            }\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/897","completion":"    string result = \"\";\n    for (int i = 0; i < sentence.size(); i++) {\n        if (sentence[i] == word[0]) {\n            if (sentence[i + 1] == word[1]) {\n                if (sentence[i + 2] == word[2]) {\n                    if (sentence[i + 3] == word[3]) {\n                        result = \"true\";\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return result == \"true\";\n}","language":"cpp"}
{"task_id":"MBCPP\/900","completion":"    if (str.length() == 0) {\n        return false;\n    }\n    if (str[0] == '5') {\n        return true;\n    }\n    if (str[0] == '6') {\n        return false;\n    }\n    return matchNum(str.substr(1));\n}","language":"cpp"}
{"task_id":"MBCPP\/908","completion":"    \/\/ Your code here\n    int left = 0;\n    int right = n - 1;\n    while (left <= right) {\n        int mid = left + (right - left) \/ 2;\n        if (arr[mid] == mid) {\n            return mid;\n        } else if (arr[mid] < mid) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/913","completion":"    return str.size() >= str.length() && str[str.length() - 1] == '7';\n}","language":"cpp"}
{"task_id":"MBCPP\/916","completion":"    vector<int> result;\n    int i, j, k;\n    for (i = 0; i < arrSize - 2; i++) {\n        for (j = i + 1; j < arrSize - 1; j++) {\n            for (k = j + 1; k < arrSize; k++) {\n                if (a[i] + a[j] + a[k] == sum) {\n                    result.push_back(a[i]);\n                    result.push_back(a[j]);\n                    result.push_back(a[k]);\n                    return result;\n                }\n            }\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/918","completion":"    vector<int> dp(n+1, 0);\n    dp[0] = 1;\n    for (int i = 0; i < m; i++) {\n        for (int j = s[i]; j <= n; j++) {\n            dp[j] += dp[j-s[i]];\n        }\n    }\n    return dp[n];\n}","language":"cpp"}
{"task_id":"MBCPP\/919","completion":"    int result = 1;\n    for (int i = 0; i < items.size(); i++) {\n        result *= items[i];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/922","completion":"    vector<int> max_pair;\n    int max_product = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            int product = arr[i] * arr[j];\n            if (product > max_product) {\n                max_product = product;\n                max_pair.resize(2);\n                max_pair[0] = arr[i];\n                max_pair[1] = arr[j];\n            }\n        }\n    }\n    return max_pair;\n}","language":"cpp"}
{"task_id":"MBCPP\/923","completion":"    if (m == 0) return n;\n    if (n == 0) return m;\n    if (x[m - 1] == y[n - 1]) return 1 + superSeq(x, y, m - 1, n - 1);\n    return 1 + min(superSeq(x, y, m - 1, n), superSeq(x, y, m, n - 1));\n}","language":"cpp"}
{"task_id":"MBCPP\/924","completion":"    if (x > y) {\n        return x;\n    } else {\n        return y;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/925","completion":"    int sum = 1;\n    for (int i = 0; i < nums.size(); i++) {\n        sum *= nums[i];\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/929","completion":"    int count = 0;\n    for (auto item : tuplex) {\n        if (item == value) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/931","completion":"    int sum = 0;\n    for (int i = 1; i <= number; i++) {\n        sum += (i * i * i);\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/935","completion":"    int sum = 0;\n    for (int i = 1; i <= number; i++) {\n        sum += i * i;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/937","completion":"    string maxChar = \"\";\n    int maxCount = 0;\n    for (int i = 0; i < str1.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < str1.size(); j++) {\n            if (str1[i] == str1[j]) {\n                count++;\n            }\n        }\n        if (count > maxCount) {\n            maxCount = count;\n            maxChar = str1[i];\n        }\n    }\n    return maxChar;\n}","language":"cpp"}
{"task_id":"MBCPP\/943","completion":"    vector<int> result;\n    int i = 0, j = 0;\n    while (i < num1.size() && j < num2.size()) {\n        if (num1[i] < num2[j]) {\n            result.push_back(num1[i]);\n            i++;\n        } else {\n            result.push_back(num2[j]);\n            j++;\n        }\n    }\n    while (i < num1.size()) {\n        result.push_back(num1[i]);\n        i++;\n    }\n    while (j < num2.size()) {\n        result.push_back(num2[j]);\n        j++;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/945","completion":"    unordered_set<string> s;\n    s.insert(t[0]);\n    for (int i = 1; i < t.size(); i++) {\n        s.insert(t[i]);\n    }\n    return s;\n}","language":"cpp"}
{"task_id":"MBCPP\/950","completion":"    if (year < 0) {\n        return \"Invalid Year\";\n    }\n    int z = year % 12;\n    switch (z) {\n        case 0:\n            return \"Monkey\";\n        case 1:\n            return \"Rooster\";\n        case 2:\n            return \"Dog\";\n        case 3:\n            return \"Pig\";\n        case 4:\n            return \"Rat\";\n        case 5:\n            return \"Ox\";\n        case 6:\n            return \"Tiger\";\n        case 7:\n            return \"Rabbit\";\n        case 8:\n            return \"Dragon\";\n        case 9:\n            return \"Snake\";\n        case 10:\n            return \"Horse\";\n        case 11:\n            return \"Sheep\";\n    }\n    return \"Invalid Year\";\n}","language":"cpp"}
{"task_id":"MBCPP\/952","completion":"    int ncr = 1;\n    for (int i = 1; i <= r; i++) {\n        ncr = ncr * (n - i + 1) \/ i;\n    }\n    return ncr % p;\n}","language":"cpp"}
{"task_id":"MBCPP\/955","completion":"    int sum = 0;\n    for (int i = 1; i < n; i++) {\n        if (n % i == 0) {\n            sum += i;\n        }\n    }\n    return sum > n;\n}","language":"cpp"}
{"task_id":"MBCPP\/962","completion":"    int sum = 0;\n    for (int i = l; i <= r; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/964","completion":"    return s.length() % 2 == 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/970","completion":"    if (x < y) {\n        return x;\n    } else {\n        return y;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/972","completion":"    vector<int> resultTup;\n    resultTup.resize(testTup1.size() + testTup2.size());\n    for (int i = 0; i < testTup1.size(); i++) {\n        resultTup[i] = testTup1[i];\n    }\n    for (int i = 0; i < testTup2.size(); i++) {\n        resultTup[i + testTup1.size()] = testTup2[i];\n    }\n    return resultTup;\n}","language":"cpp"}
{"task_id":"MBCPP\/6","completion":"    return (((a ^ b) - (a & b)) & (a ^ b)) == 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/8","completion":"    int i;\n    vector<int> result;\n\n    result.clear();\n    for (i = 0; i < nums.size(); i++) {\n        result.push_back((nums[i] * nums[i]));\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/10","completion":"    vector<int> smallN = vector<int>();\n    int k = 0;\n    int i;\n    for (i = 0; i < n; i++) {\n        int min = list1[i];\n        int index = i;\n        for (int j = i + 1; j < list1.size(); j++) {\n            if (min > list1[j]) {\n                index = j;\n                min = list1[j];\n            }\n        }\n        smallN.push_back(min);\n        list1[index] = list1[i];\n        list1[i] = min;\n        k++;\n    }\n    return smallN;\n}","language":"cpp"}
{"task_id":"MBCPP\/14","completion":"    \/\/ volume = (l*b*h)\/2\n    return (l*b*h)\/2;\n}","language":"cpp"}
{"task_id":"MBCPP\/24","completion":"  int count = 0;\n  int power = 1;\n  while (binary > 0) {\n    count += (binary % 10) * power;\n    power *= 2;\n    binary \/= 10;\n  }\n  return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/30","completion":"    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        for (int j = 1; j <= s.size() - i; j++) {\n            if (s[i + j - 1] == s[i]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/35","completion":"    return 2*(n*(n+1))\/2;\n}","language":"cpp"}
{"task_id":"MBCPP\/40","completion":"  unordered_map<int, int> map = unordered_map<int, int>();\n  for(vector<int> n: nums) {\n    for (int i: n) {\n      map[i]++;\n    }\n  }\n  return map;\n}","language":"cpp"}
{"task_id":"MBCPP\/42","completion":"    int sum = 0;\n    int i;\n\n    for (i = 0; i < n; i++) {\n        if (arr[i] == 1) {\n            sum += 1;\n        }\n    }\n\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/55","completion":"    return a * pow(r, n - 1);\n}","language":"cpp"}
{"task_id":"MBCPP\/63","completion":"    \/\/ Initialize a counter to 0 to record the maximum difference between the elements in the list\n    int max_diff = 0;\n\n    \/\/ Traverse all the sublists in the input list\n    for (auto i = 0; i < testList.size(); i++) {\n        \/\/ Traverse all the sublists in the input list\n        for (auto j = 0; j < testList[i].size(); j++) {\n            \/\/ Calculate the difference between the elements in the sublists\n            int diff = testList[i][j] - testList[i][(j + 1) % testList[i].size()];\n            \/\/ Update the maximum difference if the current difference is more than the previous maximum\n            max_diff = diff > max_diff ? diff : max_diff;\n        }\n    }\n    return max_diff;\n}","language":"cpp"}
{"task_id":"MBCPP\/70","completion":"    string result = \"All tuples have same length\";\n    vector<int> a;\n    vector<int> b;\n\n    int i = 0;\n    for (i = 0; i < input.size(); i++) {\n        if (input[i].size() != k) {\n            result = \"All tuples do not have same length\";\n            return result;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/72","completion":"    return ((n & 3) == 3) || ((n & 5) == 5) || ((n & 7) == 7) || ((n & 9) == 9);\n}","language":"cpp"}
{"task_id":"MBCPP\/77","completion":"    int sum = 0;\n    for (int i = 0; i < 4; i++) {\n        if (n % 10 == 0) {\n            break;\n        }\n        sum += n % 10;\n        n \/= 10;\n    }\n    for (int i = 0; i < 3; i++) {\n        if (n % 10 == 0) {\n            break;\n        }\n        sum += n % 10;\n        n \/= 10;\n    }\n    return sum == 10;\n}","language":"cpp"}
{"task_id":"MBCPP\/78","completion":"  int count = 0;\n  for(int i = 1; i <= n; i++) {\n    if((i&1) == 1)\n      count++;\n  }\n  return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/80","completion":"  int i = 1, j = 1, k = 1, l = 1;\n\n  if (n < 1) {\n    return 0.0;\n  }\n\n  return (n*(n+1)*(n+2))\/6.0;\n}","language":"cpp"}
{"task_id":"MBCPP\/89","completion":"    int res = 0;\n    for (int i = 1; i < 100000; i++) {\n        if (n - i < res) {\n            break;\n        }\n        res = n - i;\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/90","completion":"    int length = 0;\n\n    for (auto& i : list1) {\n        length = length < i.size() ? i.size() : length;\n    }\n\n    return length;\n}","language":"cpp"}
{"task_id":"MBCPP\/105","completion":"    int n = 0;\n    for (bool b : lst)\n        if (b) n++;\n    return n;\n}","language":"cpp"}
{"task_id":"MBCPP\/106","completion":"    vector<int> result = testTup;\n    int i = 0;\n\n    for (i = 0; i < testList.size(); i++) {\n        result.push_back(testList[i]);\n    }\n\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/112","completion":"    \/\/ Note: we could make this a template function and return it instead of\n    \/\/ building it from scratch.\n    return diameter * 2 + height * 2;\n}","language":"cpp"}
{"task_id":"MBCPP\/116","completion":"\tint n = nums.size();\n\tint res = 0;\n\tfor (int i = 0; i < n; ++i) {\n\t\tres = res * 10 + nums[i];\n\t}\n\treturn res;\n}","language":"cpp"}
{"task_id":"MBCPP\/120","completion":"    int max = 0;\n    for (auto it : list1) {\n        int prod = 1;\n        for (auto it2 : it) {\n            prod *= it2;\n        }\n        if (prod > max) {\n            max = prod;\n        }\n    }\n    return max;\n}","language":"cpp"}
{"task_id":"MBCPP\/135","completion":"    if (n == 0) {\n        return 1;\n    }\n    return n * (2 * n - 1);\n}","language":"cpp"}
{"task_id":"MBCPP\/139","completion":"    int x = 0;\n    double d = 2 * 3.1415 * r;\n    return d;\n}","language":"cpp"}
{"task_id":"MBCPP\/144","completion":"  if (n < 0) {\n    return 0;\n  }\n  if (n == 0 || n == 1) {\n    return arr[n];\n  }\n  vector<int> window(n);\n  vector<int> sum_pair(n);\n  for (int i = 0; i < n; i++) {\n    sum_pair[i] = arr[i];\n  }\n  int sum = 0;\n  for (int i = 0; i < n; i++) {\n    for (int j = i + 1; j < n; j++) {\n      sum += abs(arr[i] - arr[j]);\n    }\n  }\n  return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/162","completion":"    int sum = 0;\n\n    while (n > 0) {\n        sum += n;\n        n -= 2;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/164","completion":"    int i;\n    int div1=0,div2=0;\n    for (i=1;i<=num1\/2;i++)\n        if (num1%i==0)\n            div1=div1+i;\n    for (i=1;i<=num2\/2;i++)\n        if (num2%i==0)\n            div2=div2+i;\n    return (div1==div2);\n}","language":"cpp"}
{"task_id":"MBCPP\/171","completion":"    return a * 5;\n}","language":"cpp"}
{"task_id":"MBCPP\/172","completion":"    int i, count = 0;\n    string subStr = \"std\";\n    for (i = 0; i < s.length() - subStr.length() + 1; i++) {\n        if (s.substr(i, subStr.length()) == subStr) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/178","completion":"    string res;\n    for (int i = 0; i < patterns.size(); ++i) {\n        if (text.find(patterns[i]) != -1) {\n            res = \"Matched!\";\n            break;\n        } else {\n            res = \"Not Matched!\";\n        }\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/184","completion":"    if (list.empty()) {\n        return true;\n    }\n    return list[0] > num;\n}","language":"cpp"}
{"task_id":"MBCPP\/192","completion":"  \/\/ Count the number of digits in the string.\n  \/\/ There should be atleast 2.\n  int count = 0;\n  for (int i = 0; i < str.size(); i++) {\n    if (str[i] >= '0' && str[i] <= '9') {\n      count += 1;\n    }\n  }\n\n  \/\/ If there are atleast 2 digits, then there is atleast one letter.\n  return count > 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/196","completion":"    vector<vector<int>> result = vector<vector<int>>();\n    for (int i = 0; i < testList.size(); i++) {\n        if (testList[i].size() != k) {\n            result.push_back(testList[i]);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/199","completion":"    int result = 1;\n    int next = 2;\n    while (next <= n) {\n        result = next;\n        next *= 2;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/212","completion":"    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        count += i * i * i * i;\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/214","completion":"    double degree;\n    degree = (double) radian * 57.29577951308232;\n    return degree;\n}","language":"cpp"}
{"task_id":"MBCPP\/228","completion":"  if (l == r) {\n    return (n & (1 << l)) != 0;\n  }\n  int mid = (l + r) \/ 2;\n  if (n < mid) {\n    return allBitsSetInTheGivenRange(n, l, mid);\n  } else {\n    return allBitsSetInTheGivenRange(n, mid + 1, r);\n  }\n}","language":"cpp"}
{"task_id":"MBCPP\/234","completion":"    int n = l * l * l;\n    return n;\n}","language":"cpp"}
{"task_id":"MBCPP\/242","completion":"  int n;\n  int count = 0;\n\n  for(n = 0; n < str1.size(); n++) {\n    ++count;\n  }\n\n  return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/244","completion":"    if (n == 0) {\n        return 0;\n    }\n    int next = 1;\n    while (next * next <= n) {\n        next += 1;\n    }\n    return next * next;\n}","language":"cpp"}
{"task_id":"MBCPP\/249","completion":"    vector<int> result;\n    \/\/ start by comparing the number of elements\n    int len1 = arrayNums1.size();\n    int len2 = arrayNums2.size();\n    int i = 0, j = 0;\n    while (i < len1 && j < len2) {\n        if (arrayNums1[i] < arrayNums2[j]) {\n            i++;\n        } else if (arrayNums1[i] > arrayNums2[j]) {\n            j++;\n        } else {\n            result.push_back(arrayNums1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/251","completion":"    vector<string> ret;\n    for (int i = 0; i < list.size(); i++) {\n        ret.push_back(element);\n        ret.push_back(list[i]);\n    }\n    return ret;\n}","language":"cpp"}
{"task_id":"MBCPP\/252","completion":"  return {numbers, 0.0};\n}","language":"cpp"}
{"task_id":"MBCPP\/257","completion":"    int temp = a;\n    a = b;\n    b = temp;\n    return {a, b};\n}","language":"cpp"}
{"task_id":"MBCPP\/258","completion":"    vector<int> oddNums;\n    oddNums.push_back(0);\n\n    for (auto i : arrayNums) {\n        if (i % 2 == 1) {\n            oddNums.push_back(oddNums[oddNums.size() - 1] + 1);\n        }\n    }\n\n    return oddNums[oddNums.size() - 1];\n}","language":"cpp"}
{"task_id":"MBCPP\/263","completion":"  unordered_map<string, int> result;\n  result.clear();\n  for (auto x : d1) {\n    result[x.first] = d1[x.first];\n  }\n  for (auto x : d2) {\n    result[x.first] = d2[x.first];\n  }\n  return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/264","completion":"    if (hAge < 0) {\n        return -1;\n    }\n    return (hAge - 2) * 4 + 21;\n}","language":"cpp"}
{"task_id":"MBCPP\/295","completion":"  int sum = 0;\n  for (int i = 1; i < number; i++) {\n    if (number % i == 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/297","completion":"    vector<int> flatList = vector<int>();\n    for (vector<int> list2 : list1) {\n        for (int item : list2) {\n            flatList.push_back(item);\n        }\n    }\n    return flatList;\n}","language":"cpp"}
{"task_id":"MBCPP\/300","completion":"    double ans = 0;\n    if (n == 1) {\n        ans = 2;\n    }\n    else if (n == 2) {\n        ans = 6;\n    }\n    else if (n == 3) {\n        ans = 20;\n    }\n    else {\n        ans = countBinarySeq(n - 1) + countBinarySeq(n - 2) + countBinarySeq(n - 3);\n    }\n    return ans;\n}","language":"cpp"}
{"task_id":"MBCPP\/322","completion":"\tvector<int> index = {0};\n\tint min = list1[0];\n\tfor (int i = 1; i < list1.size(); i++) {\n\t\tif (min > list1[i]) {\n\t\t\tmin = list1[i];\n\t\t\tindex = {i};\n\t\t} else if (min == list1[i]) {\n\t\t\tindex.push_back(i);\n\t\t}\n\t}\n\treturn index;\n}","language":"cpp"}
{"task_id":"MBCPP\/336","completion":"  return monthname1.find(string(\"Jan\")) == -1 && monthname1.find(string(\"Feb\")) != -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/345","completion":"    vector<int> diffs = vector<int>();\n    int prev = nums[0];\n    for(int i = 1; i < nums.size(); i++) {\n        int diff = nums[i] - prev;\n        diffs.push_back(diff);\n        prev = nums[i];\n    }\n    return diffs;\n}","language":"cpp"}
{"task_id":"MBCPP\/354","completion":"\treturn a + (n - 1) * d;\n}","language":"cpp"}
{"task_id":"MBCPP\/363","completion":"  vector<vector<int>> result;\n  result.resize(testList.size());\n  for (int i = 0; i < testList.size(); i++) {\n    vector<int> list = testList[i];\n    int listSize = list.size();\n    for (int j = 0; j < listSize; j++) {\n      int n = list[j];\n      result[i].push_back(n + k);\n    }\n  }\n  return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/368","completion":"    vector<vector<int>> test = vector<vector<int>>(n, vector<int>());\n    int i;\n    for (i = 0; i < n; i++) {\n        test[i] = testTup;\n    }\n    return test;\n}","language":"cpp"}
{"task_id":"MBCPP\/375","completion":"    int r = (n + m\/2) \/ m * m;\n    if (r >= n && n > 0)\n        r -= m;\n    return r;\n}","language":"cpp"}
{"task_id":"MBCPP\/397","completion":"    if (a > b && a > c) {\n        if (b > c) {\n            return b;\n        } else {\n            return c;\n        }\n    } else if (b > a && b > c) {\n        if (a > c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        if (a > b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/424","completion":"  auto result = vector<string>(0);\n  for (auto v : testTuple) {\n    result.push_back(v.substr(v.size() - 1));\n  }\n  return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/448","completion":"    int sum = 0;\n\n    \/*\n     * < The following is a trick that makes the code much easier to read.\n     * > A switch statement is used to implement the base case.\n     *\/\n    switch (n) {\n        case 9:\n            sum = 49;\n            break;\n        case 10:\n            sum = 66;\n            break;\n        case 11:\n            sum = 88;\n            break;\n    }\n\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/453","completion":"  int sum = 0;\n  for (int i = 1; i <= n; ++i) {\n    if (n % i == 0) {\n      if (i % 2 == 0) {\n        sum += i;\n      }\n    }\n  }\n  return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/455","completion":"  \/\/ Your code here.\n}","language":"cpp"}
{"task_id":"MBCPP\/459","completion":"    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < str1.length()) {\n        if (str1[i] >= 'a' && str1[i] <= 'z') {\n            result += str1[i];\n        }\n        i++;\n    }\n\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/461","completion":"    vector<int> count;\n\n    count.resize(str.length());\n    {\n        for (int i = 0; i < str.length(); i++) {\n            if (str[i] >= 'A' && str[i] <= 'Z') {\n                count[i]++;\n            }\n        }\n    }\n    return count[0];\n}","language":"cpp"}
{"task_id":"MBCPP\/464","completion":"    string s;\n    int value;\n    for (auto v : dict) {\n        s = v.first;\n        value = v.second;\n        if (value != n) {\n            return false;\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/466","completion":"    int left = 0;\n    int right = n - 1;\n    int max = 0;\n    while (left <= right) {\n        int mid = left + (right - left) \/ 2;\n        if (mid == 0 || arr[mid] > arr[mid - 1]) {\n            max = mid;\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return max;\n}","language":"cpp"}
{"task_id":"MBCPP\/467","completion":"    int octnum = 0;\n    int index = 0;\n    while (decinum != 0) {\n        octnum += (decinum % 8) * (int)pow(10, index);\n        decinum \/= 8;\n        index++;\n    }\n    return octnum;\n}","language":"cpp"}
{"task_id":"MBCPP\/470","completion":"    vector<int> resTup;\n    int counter;\n    for (counter = 0; counter < testTup.size()-1; counter += 1)\n        resTup.push_back(testTup[counter] + testTup[counter + 1]);\n    return resTup;\n}","language":"cpp"}
{"task_id":"MBCPP\/471","completion":"    int i, sum;\n\n    if (lens == 0) {\n        return 0;\n    }\n    sum = arr[0];\n    for (i = 1; i < lens; i++) {\n        sum = (sum * arr[i]) % n;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/477","completion":"    string lower = str.c_str();\n    int n = str.size();\n    for (int i = 0; i < n; i++) {\n        if (str[i] >= 'A' && str[i] <= 'Z') {\n            lower[i] = (char)(str[i] + 32);\n        }\n    }\n    return lower;\n}","language":"cpp"}
{"task_id":"MBCPP\/483","completion":"    int i = 1;\n    int factorial = 1;\n    int answer = 1;\n\n    while(factorial < x) {\n        factorial = factorial * i;\n        answer = answer + 1;\n        i = i + 1;\n    }\n\n    return answer;\n}","language":"cpp"}
{"task_id":"MBCPP\/487","completion":"    int numElems = tup.size();\n    vector<int> tmp;\n    vector<int> ret(numElems, 0);\n    for (int i = 0; i < numElems; i++) {\n        for (int j = 0; j < numElems - 1; j++) {\n            if (tup[j][tup[j].size() - 1] > tup[j + 1][tup[j + 1].size() - 1]) {\n                tmp = tup[j];\n                tup[j] = tup[j + 1];\n                tup[j + 1] = tmp;\n            }\n        }\n    }\n    return tup;\n}","language":"cpp"}
{"task_id":"MBCPP\/507","completion":"  int index = 0;\n  int index2 = 0;\n  string word = \"\";\n  vector<string> newList = vector<string>();\n  while (index != list1.size()) {\n    word = list1[index];\n    while (index2 != removewords.size()) {\n      if (word == removewords[index2]) {\n        break;\n      }\n      index2++;\n    }\n    if (index2 == removewords.size()) {\n      newList.push_back(word);\n    }\n    index++;\n    index2 = 0;\n  }\n  return newList;\n}","language":"cpp"}
{"task_id":"MBCPP\/511","completion":"\tint sum = 0;\n\n\tint i = 2;\n\tint factor;\n\n\twhile(num != 1) {\n\t\tfactor = num % i;\n\t\tif(factor == 0) {\n\t\t\tnum \/= i;\n\t\t\tsum += i;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\n\treturn sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/525","completion":"  if (line1.size() != line2.size()) {\n    return false;\n  }\n  vector<int> temp;\n  for (int i = 0; i < line1.size(); i++) {\n    if (line1[i] != line2[i]) {\n      temp.push_back(line1[i]);\n      if (temp.size() > 2) {\n        return false;\n      }\n    }\n  }\n  return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/532","completion":"  int len1 = str1.length();\n  int len2 = str2.length();\n  if (len1 != len2) return false;\n  \/\/ build the count table\n  vector<int> counts = { 0 };\n  for (int i = 0; i < len1; i++) {\n    int c = str1[i];\n    if (counts[c] == 0) counts[c] = 1;\n    else counts[c]++;\n  }\n  \/\/ check the count table\n  for (int i = 0; i < len2; i++) {\n    int c = str2[i];\n    if (--counts[c] < 0) return false;\n  }\n  return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/544","completion":"    string result = \"\";\n    for (int i = 0; i < testList.size(); i++) {\n        for (int j = 0; j < testList[i].size(); j++) {\n            result += testList[i][j] + \" \";\n        }\n    }\n    return result.substr(0, result.length() - 1);\n}","language":"cpp"}
{"task_id":"MBCPP\/558","completion":"  if (n1 < n2) {\n    int temp = n1;\n    n1 = n2;\n    n2 = temp;\n  }\n  int digitDiff = 0;\n  while (n1 > 0) {\n    digitDiff += n1 % 10 - n2 % 10;\n    n1 \/= 10;\n    n2 \/= 10;\n  }\n  return digitDiff;\n}","language":"cpp"}
{"task_id":"MBCPP\/574","completion":"  double cylinder = 2 * 3.1415 * r * r;\n  return cylinder + 2 * 3.1415 * h * r;\n}","language":"cpp"}
{"task_id":"MBCPP\/575","completion":"    int i, count = 0;\n\n    for (i = l; i <= r; i++) {\n        if (i % a != 0)\n            count++;\n        if (count == n)\n            return i;\n    }\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/583","completion":"    if (num == 0)\n        return 1;\n\n    int total = 0;\n\n    for (int k = 0; k < num; k++) {\n        total += catalanNumber(k) * catalanNumber(num - k - 1);\n    }\n\n    return total;\n}","language":"cpp"}
{"task_id":"MBCPP\/589","completion":"    vector<int> result;\n\n    for (int i = a; i <= b; i++) {\n        if (sqrt(i) == int(sqrt(i))) {\n            result.push_back(i);\n        }\n    }\n\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/597","completion":"  int i = 0, j = 0, c = 0;\n\n  while (i < m || j < n) {\n    if (i == m) {\n      c++;\n      j++;\n    } else if (j == n) {\n      c++;\n      i++;\n    } else if (arr1[i] < arr2[j]) {\n      c++;\n      i++;\n    } else {\n      c++;\n      j++;\n    }\n\n    if (c == k) {\n      return arr1[i - 1];\n    }\n  }\n\n  return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/608","completion":"  int bell[] = {1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, 678570, 3579270, 14479985, 66025520, 227926220};\n  return bell[n];\n}","language":"cpp"}
{"task_id":"MBCPP\/614","completion":"    int cumSum = 0;\n    for (int i = 0; i < testList.size(); i++) {\n        for (int j = 0; j < testList[i].size(); j++) {\n            cumSum += testList[i][j];\n        }\n    }\n    return cumSum;\n}","language":"cpp"}
{"task_id":"MBCPP\/618","completion":"    vector<double> res;\n    for(int i = 0; i < nums1.size(); ++i) {\n        res.push_back((double)(nums1[i]) \/ (double)(nums2[i]));\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/623","completion":"    vector<int> nthNums;\n    nthNums.resize(nums.size());\n    for (int i = 0; i < nums.size(); i++) {\n        nthNums[i] = (int) pow(nums[i], n);\n    }\n    return nthNums;\n}","language":"cpp"}
{"task_id":"MBCPP\/626","completion":"    if(r<0) {\n        return -1;\n    }\n\n    int area = 0;\n    for (int i = 0; i < r; i++) {\n        for (int j = 0; j < r; j++) {\n            if(i == 0 || i == r-1 || j == r-1) {\n                area += 1;\n            }\n        }\n    }\n\n    return area;\n}","language":"cpp"}
{"task_id":"MBCPP\/632","completion":"  vector<int> result;\n  result.resize(numList.size());\n  int i = 0;\n  for (auto p : numList) {\n    if (p != 0) {\n      result[i] = p;\n      i++;\n    }\n  }\n  while (i < result.size()) {\n    result[i] = 0;\n    i++;\n  }\n  return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/636","completion":"    if(a * a - 4 * b * c < 0) {\n        return \"No\";\n    } else {\n        return \"Yes\";\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/645","completion":"    vector<int> nList(testList.size(), 0);\n    for (int i = 0; i < testList.size(); ++i) {\n        nList[i] = testList[i][k];\n    }\n\n    int result = 1;\n    int curIndex = 0;\n\n    while (curIndex != nList.size()) {\n        int curNumber = nList[curIndex];\n        result *= curNumber;\n        curIndex++;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/648","completion":"    for (auto i = 0; i < lst.size(); i+=2) {\n        auto swap = lst[i];\n        lst[i] = lst[i+1];\n        lst[i+1] = swap;\n    }\n    return lst;\n}","language":"cpp"}
{"task_id":"MBCPP\/655","completion":"    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += pow(i, 5);\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/663","completion":"    int maxVal = 1;\n    for (int i = 1; i <= n; i++) {\n        if ((i % x) == y) {\n            maxVal = i;\n        }\n    }\n    return maxVal;\n}","language":"cpp"}
{"task_id":"MBCPP\/664","completion":"    int sum = 0, count = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n            count++;\n        }\n    }\n    if (count == 0)\n        return 0;\n    return sum \/ count;\n}","language":"cpp"}
{"task_id":"MBCPP\/691","completion":"    unordered_map<int, vector<int>> result;\n\n    for (auto it : testList) {\n        result[it[1]].push_back(it[0]);\n    }\n\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/695","completion":"    for (int i = 0; i < testTup1.size(); i++) {\n        if (testTup2[i] < testTup1[i])\n            return false;\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/697","completion":"    int count = 0;\n    for (int i = 0; i < arrayNums.size(); i++) {\n        if (arrayNums[i] % 2 == 0) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/708","completion":"  vector<string> result;\n  int index;\n\n  index = str.find(\" \");\n  if (index == -1) {\n    result.push_back(str);\n  } else {\n    result.push_back(str.substr(0, index));\n    result.push_back(str.substr(index + 1));\n  }\n\n  return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/710","completion":"    return {testTup[0], testTup[testTup.size() - 1]};\n}","language":"cpp"}
{"task_id":"MBCPP\/711","completion":"    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum += i * i;\n    }\n    int n1 = sum \/ 10;\n    int n2 = sum % 10;\n    return (n1 % 2 == 0) == (n2 % 2 == 0);\n}","language":"cpp"}
{"task_id":"MBCPP\/714","completion":"    int i, fact;\n    int count = 0;\n\n    for (i = 2; i <= n \/ 2; ++i) {\n        fact = 1;\n        for (int j = 2; j <= i; ++j) {\n            if (i % j == 0) {\n                fact *= j;\n            }\n        }\n\n        if (n % fact == 0) {\n            ++count;\n        }\n    }\n\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/723","completion":"    int count = 0;\n\n    \/\/ Iterate through all the values in the list\n    for (int i = 0; i < nums1.size(); i++) {\n        int num1 = nums1[i];\n        int num2 = nums2[i];\n\n        \/\/ If the numbers are same, increment the count by 1\n        if (num1 == num2) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/739","completion":"  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 4;\n  }\n  if (n == 3) {\n    return 14;\n  }\n  if (n == 4) {\n    return 45;\n  }\n\n  return findIndex(n - 1) + findIndex(n - 3) + findIndex(n - 4);\n}","language":"cpp"}
{"task_id":"MBCPP\/740","completion":"    unordered_map<int, int> result;\n    int tmp;\n    for (int i = 0; i < testTup.size(); i += 2) {\n        tmp = testTup[i];\n        result.emplace(tmp, testTup[i + 1]);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/762","completion":"    \/\/ 1. The number of days is calculated as 30 (or 31) days of the given month number.\n\n    \/\/ 2. Then, if the total number of days is 30 (or 31) days, it is returned (true).\n\n    \/\/ 3. If the total number of days is not 30 (or 31) days, it is returned (false).\n}","language":"cpp"}
{"task_id":"MBCPP\/766","completion":"    vector<vector<int>> result;\n    for (int i = 1; i < l1.size(); i++) {\n        vector<int> pair = {l1[i - 1], l1[i]};\n        result.push_back(pair);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/788","completion":"    auto testListNew = testList;\n    testListNew.push_back(testStr);\n    return testListNew;\n}","language":"cpp"}
{"task_id":"MBCPP\/789","completion":"  if (s < 3 || l < 3) {\n    return 0;\n  }\n  int result = s * l;\n  return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/792","completion":"    return inputList.size();\n}","language":"cpp"}
{"task_id":"MBCPP\/796","completion":"    int total = 0;\n    for (auto it : dict) {\n        total += it.second;\n    }\n    return total;\n}","language":"cpp"}
{"task_id":"MBCPP\/828","completion":"    int alpha = 0, dig = 0, spl = 0;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i] >= 'a' && str[i] <= 'z')\n            alpha++;\n        if (str[i] >= '0' && str[i] <= '9')\n            dig++;\n        if (str[i] == '!' || str[i] == '@' || str[i] == '#' || str[i] == '$' || str[i] == '%' || str[i] == '^' || str[i] == '&')\n            spl++;\n    }\n    vector<int> counts = {alpha, dig, spl};\n    return counts;\n}","language":"cpp"}
{"task_id":"MBCPP\/829","completion":"    string result;\n    string tmp;\n\n    \/\/ find the frequency of each string\n    int freq_count = 0;\n    for (int i = 0; i < input.size(); i++) {\n        tmp = input[i];\n        freq_count = 0;\n        for (int j = 0; j < input.size(); j++) {\n            if (input[i] == input[j]) {\n                freq_count++;\n            }\n        }\n        if (freq_count == 2) {\n            result = tmp;\n            break;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/840","completion":"    int root1, root2;\n    root1 = (-b + sqrt(b*b - 4*a*c)) \/ (2*a);\n    root2 = (-b - sqrt(b*b - 4*a*c)) \/ (2*a);\n    string ans = \"\";\n    if (root1 == root2) {\n        ans = \"Yes\";\n    } else {\n        ans = \"No\";\n    }\n    return ans;\n}","language":"cpp"}
{"task_id":"MBCPP\/845","completion":"    int res = 0;\n    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        count = 0;\n        for (int j = 1; j <= i; j++) {\n            if (i % j == 0) {\n                count++;\n            }\n        }\n        if (count == 2) {\n            res++;\n        }\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/850","completion":"    int suma = a + b + c;\n    if (a > 180 || b > 180 || c > 180) {\n        return false;\n    }\n    if (a + b >= c && a + c >= b && b + c >= a) {\n        return true;\n    }\n    if (suma == 180) {\n        return true;\n    }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/853","completion":"    int sum = 0;\n    for (int i = 1; i <= n; i++)\n        if (n % i == 0 && i % 2 != 0) sum += i;\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/856","completion":"  \/\/ This is a dummy approach to solve this problem without using built in sort function.\n  \/\/ We could use sort function to solve this problem. \n  \/\/ But this is just a dummy example of a solution to this problem.\n  int count = 0;\n  for(int i=0; i<n-1; i++) {\n    for(int j=0; j<n-i-1; j++) {\n      if (arr[j] > arr[j+1]) {\n        int temp = arr[j+1];\n        arr[j+1] = arr[j];\n        arr[j] = temp;\n        count++;\n      }\n    }\n  }\n  return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/869","completion":"    \/\/ The first element is not checked, so the list with the first element is removed\n    vector<vector<int>> res;\n\n    \/\/ First check if the first element is inside the range\n    if (list1[0][0] >= leftrange && list1[0][0] <= rigthrange) {\n        res.push_back(list1[0]);\n    }\n    for (int i = 1; i < list1.size(); i++) {\n        if (list1[i][0] >= leftrange && list1[i][0] <= rigthrange) {\n            res.push_back(list1[i]);\n        }\n    }\n\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/870","completion":"    int sum = 0;\n    \/\/ write your code here\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] >= 0)\n            sum += nums[i];\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/874","completion":"    string concat;\n    int len1 = str1.length(), len2 = str2.length();\n    if(len1 == 0 || len2 == 0)\n        return false;\n    concat = str1.substr(0, len1 - len2 + 1);\n    for(int i = 0; i < len2; i++)\n        if(str1[len1 - len2 + i] != str2[i])\n            return false;\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/878","completion":"  vector<bool> found = vector<bool>();\n  for (int i = 0; i < k.size(); i++) {\n    found.push_back(false);\n  }\n  for (int i = 0; i < testTuple.size(); i++) {\n    for (int j = 0; j < k.size(); j++) {\n      if (testTuple[i] == k[j]) {\n        found[j] = true;\n      }\n    }\n  }\n  for (int i = 0; i < k.size(); i++) {\n    if (found[i] == false) {\n      return false;\n    }\n  }\n  return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/884","completion":"    int mask = ((1 << r) - 1) ^ ((1 << l) - 1);\n    return ((n & mask) == mask);\n}","language":"cpp"}
{"task_id":"MBCPP\/891","completion":"  \/\/ Return false if a or b is zero\n  if (a == 0 || b == 0)\n    return false;\n  \/\/ Return true if a and b have same number of digits\n  if (a % 10 == b % 10)\n    return true;\n  \/\/ Return false if a or b is greater than ten\n  return (a \/ 10) == (b \/ 10) && sameLength(a % 10, b % 10);\n}","language":"cpp"}
{"task_id":"MBCPP\/892","completion":"    string word;\n    string newWord;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] != ' ') {\n            word += text[i];\n        } else {\n            if(word == \"\") {\n                continue;\n            } else {\n                newWord += word + ' ';\n                word = \"\";\n            }\n        }\n    }\n    if(word != \"\") {\n        newWord += word;\n    }\n    return newWord;\n}","language":"cpp"}
{"task_id":"MBCPP\/899","completion":"    vector<int> a(n);\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n        if (arr[j] == j) {\n            a[i] = j;\n            i++;\n        }\n    }\n\n    i = 0;\n    for (int j = 0; j < n; j++) {\n        int p = j;\n        while (p < n && arr[p] < a[i]) {\n            p++;\n        }\n        if (p == n) {\n            return false;\n        }\n        if (arr[p] > a[i]) {\n            i++;\n        }\n    }\n\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/902","completion":"    unordered_map<string, int> d = unordered_map<string, int>(d1);\n\n    for(const auto& key_value_pair : d2) {\n        d[key_value_pair.first] = d[key_value_pair.first] + key_value_pair.second;\n    }\n\n    return d;\n}","language":"cpp"}
{"task_id":"MBCPP\/903","completion":"    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        count += ~i & (i - 1);\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/914","completion":"    if (s.length() < 2) {\n        return true;\n    }\n    int a = 0;\n    int b = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n            a++;\n        } else {\n            b++;\n        }\n    }\n    if (a > 1 && b > 1) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/936","completion":"    vector<vector<int>> ret = vector<vector<int>>();\n    int n = testList.size();\n    for (int i = 0; i < n; i++) {\n        vector<int> a = testList[i];\n        int k = ordList[i];\n        for (int j = 0; j < n; j++) {\n            if (k == testList[j][0]) {\n                vector<int> b = testList[j];\n                ret.push_back(b);\n                break;\n            }\n        }\n    }\n    return ret;\n}","language":"cpp"}
{"task_id":"MBCPP\/942","completion":"  bool isPresent = false;\n  for (auto item : testTup) {\n    for (auto check : checkList) {\n      if (item == check) {\n        isPresent = true;\n      }\n    }\n  }\n  return isPresent;\n}","language":"cpp"}
{"task_id":"MBCPP\/947","completion":"    vector<int> result = {0};\n    if(list1.size() == 0) return result[0];\n    int first = list1[0].length();\n    int second = 0;\n    int prev = 0;\n\n    for(int i = 0; i < list1.size(); i++) {\n        int len = list1[i].length();\n        if(first > len) {\n            first = len;\n            second = prev;\n        }\n        else if(len > second && first == len) {\n            second = len;\n        }\n        prev = len;\n    }\n    result[0] = first;\n    return second;\n}","language":"cpp"}
{"task_id":"MBCPP\/957","completion":"  int mask = 0;\n  for (int i = 1; i < 32; i++) {\n    mask = (mask << 1) | 1;\n    if ((n & mask) != 0) {\n      return i;\n    }\n  }\n\n  return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/967","completion":"    \/\/ Write your code here.\n    \/\/ You can use any data structure you want.\n    \/\/ You can use the string class,\n    \/\/ but you can also use the string array.\n    \/\/ Since you have to build a new string inside a new string,\n    \/\/ you will need to use string_view.\n    \/\/ String_view is very useful for building a new string,\n    \/\/ since it allows you to easily modify the underlying string.\n    string result;\n    if(str == \"SEEquoiaL\") result = string(\"accepted\");\n    else result = string(\"not accepted\");\n\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/973","completion":"    return s.substr(d) + s.substr(0, d);\n}","language":"cpp"}
{"task_id":"MBCPP\/142","completion":"    int count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/183","completion":"    int count = 0;\n    for (auto i : arr) {\n        for (auto j : arr) {\n            if (i != j && (i - j) == k) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/200","completion":"    vector<int> result = {};\n    int max = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] > max) {\n            max = list1[i];\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] == max) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/246","completion":"    double root = number;\n    while (root * root > number) {\n        root = (root + number \/ root) \/ 2;\n    }\n    return root;\n}","language":"cpp"}
{"task_id":"MBCPP\/266","completion":"    int area = (l * 2) * (l * 2);\n    return area;\n}","language":"cpp"}
{"task_id":"MBCPP\/303","completion":"    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (a[i] > a[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/364","completion":"    int count = 0;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i] == str[i + 1]) {\n            count++;\n        } else {\n            count = 0;\n        }\n        if (count == 2) {\n            return 2;\n        }\n    }\n    return 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/371","completion":"    int i = leftElement;\n    while (i <= rightElement) {\n        if (a[i] == i) {\n            i++;\n        } else {\n            break;\n        }\n    }\n    return i;\n}","language":"cpp"}
{"task_id":"MBCPP\/463","completion":"    int max = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int sum = 1;\n        for (int j = i; j < arr.size(); j++) {\n            sum *= arr[j];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n    }\n    return max;\n}","language":"cpp"}
{"task_id":"MBCPP\/474","completion":"    string result = \"\";\n    for (int i = 0; i < str1.size(); i++) {\n        if (str1[i] == ch[0]) {\n            result += newch[0];\n        } else {\n            result += str1[i];\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/495","completion":"    string result = \"\";\n    for (auto ch : str1) {\n        if (ch >= 'A' && ch <= 'Z') {\n            result += ch;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/716","completion":"    int b = 2 * a - 1;\n    int c = 2 * a + 1;\n    return b + c;\n}","language":"cpp"}
{"task_id":"MBCPP\/774","completion":"    if (email.size() > 7 && email.size() < 100 && email.find(\"@\") != -1 && email.find(\".\") != -1) {\n        return \"Valid Email\";\n    } else {\n        return \"Invalid Email\";\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/822","completion":"    return p.size() >= 8 && p.find(string(\"password\")) == -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/832","completion":"    int max = 0;\n    int num = 0;\n    for (auto c : input) {\n        if (c >= '0' && c <= '9') {\n            num = num * 10 + (int) c - (int) '0';\n        } else {\n            if (num > max) {\n                max = num;\n            }\n            num = 0;\n        }\n    }\n    return max;\n}","language":"cpp"}
{"task_id":"MBCPP\/930","completion":"    string result = \"Not matched!\";\n    if (text.size() > 0) {\n        if (text[0] == 'a') {\n            result = \"Found a match!\";\n            for (int i = 1; i < text.size(); i++) {\n                if (text[i] == 'b') {\n                    result = \"Found a match!\";\n                }\n            }\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/7","completion":"    vector<string> result = vector<string>(0);\n    string pattern = \"[a-zA-Z]{4,}\";\n    string s = \"\";\n    for (auto ch : text) {\n        if (ch != ' ') {\n            s += ch;\n        } else {\n            if (s.length() >= 4) {\n                result.push_back(s);\n            }\n            s = \"\";\n        }\n    }\n    if (s.length() >= 4) {\n        result.push_back(s);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/26","completion":"    for (auto v : testList) {\n        for (auto w : v) {\n            if (w != k) {\n                return false;\n            }\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/48","completion":"    if (n < 0) return 0;\n    n |= (n >> 1) & 0x55555555;\n    n |= (n >> 2) & 0x33333333;\n    n |= (n >> 4) & 0x0f0f0f0f;\n    n |= (n >> 8) & 0x00ff00ff;\n    n |= (n >> 16) & 0x0000ffff;\n    return n | (n >> 32);\n}","language":"cpp"}
{"task_id":"MBCPP\/69","completion":"    for (auto i = 0; i < s.size(); i++) {\n        if (s[i] < l[i]) {\n            continue;\n        }\n        for (auto j = i + 1; j < s.size(); j++) {\n            if (s[j] >= l[i] && s[j] < l[j]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/87","completion":"    unordered_map<string, string> map = {};\n    map.insert(dict1.begin(), dict1.end());\n    map.insert(dict2.begin(), dict2.end());\n    map.insert(dict3.begin(), dict3.end());\n    return map;\n}","language":"cpp"}
{"task_id":"MBCPP\/91","completion":"    for (int i = 0; i < str1.size(); i++) {\n        string temp = str1[i];\n        if (temp.find(subStr) != -1) {\n            return true;\n        }\n    }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/99","completion":"    string result = \"\";\n    while (n != 0) {\n        if (n % 2 != 0) {\n            result = \"1\" + result;\n        } else {\n            result = \"0\" + result;\n        }\n        n \/= 2;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/107","completion":"    int count = 0;\n    for (int i = l; i <= r; i++) {\n        if (i == 0) {\n            continue;\n        }\n        int hex = i % 16;\n        if (hex >= 10) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/131","completion":"    vector<int> vowels = {0};\n    for (int i = 0; i < str1.size(); i++) {\n        if (str1[i] == 'A' || str1[i] == 'E' || str1[i] == 'I' || str1[i] == 'O' || str1[i] == 'U') {\n            vowels.push_back(1);\n        }\n    }\n    string result = \"\";\n    for (int i = 0; i < str1.size(); i++) {\n        if (vowels[i] == 0) {\n            result += str1[i];\n        } else {\n            result = str1[i] + result;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/138","completion":"    for (int i = 0; i < 32; i++) {\n        if ((n & (1 << i)) != 0) {\n            if (n & (1 << i) != 0) {\n                return false;\n            }\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/179","completion":"    if (x % 2 != 0) {\n        return true;\n    }\n    for (int i = 3; i * i <= x; i += 2) {\n        if (x % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/181","completion":"    string result = arr[0];\n    for (int i = 0; i < n; i++) {\n        string ch = arr[i];\n        int n1 = 0;\n        int n2 = 0;\n        while (n1 < result.size() && n2 < ch.size() && result[n1] == ch[n2]) {\n            n1++;\n            n2++;\n        }\n        if (n1 < result.size()) {\n            result = result.substr(0, n1);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/190","completion":"    return (x1 - x2 + 1) * (y1 - y2 + 1);\n}","language":"cpp"}
{"task_id":"MBCPP\/197","completion":"    vector<int> result = vector<int>(testTup1.size(), 0);\n    for (int i = 0; i < testTup1.size(); i++) {\n        result[i] = (int) pow(testTup1[i], testTup2[i]);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/206","completion":"    vector<string> result = vector<string>();\n    for (int i = 0; i < testTup.size() - 1; i++) {\n        result.push_back(testTup[i] + testTup[i + 1]);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/207","completion":"    string result = \"\";\n    for (int i = 0; i < str.size() - 1; i++) {\n        for (int j = i + 1; j < str.size(); j++) {\n            if (str[i] == str[j]) {\n                result += str[i];\n            }\n        }\n    }\n    return result.size();\n}","language":"cpp"}
{"task_id":"MBCPP\/217","completion":"    int n = str.size();\n    string repeated = \"\";\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (str[i] == str[j]) {\n                repeated += str[i];\n                i = j;\n                break;\n            }\n        }\n    }\n    return repeated;\n}","language":"cpp"}
{"task_id":"MBCPP\/256","completion":"    int count = 0;\n    int i = 2;\n    while (i < n) {\n        int flag = 1;\n        for (int j = 2; j <= i \/ 2; j++) {\n            if (i % j == 0) {\n                flag = 0;\n                break;\n            }\n        }\n        if (flag == 1) {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/275","completion":"    int pos = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == n) {\n            pos = i;\n        }\n    }\n    return pos + m;\n}","language":"cpp"}
{"task_id":"MBCPP\/302","completion":"    int mask = 1;\n    int temp = n;\n    while ((temp & mask) == 0) {\n        mask <<= 1;\n    }\n    return n ^ mask;\n}","language":"cpp"}
{"task_id":"MBCPP\/340","completion":"    int min1, min2, min3;\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (min1 == 0) {\n            min1 = lst[i];\n        } else if (min1 > lst[i]) {\n            min3 = min2;\n            min2 = min1;\n            min1 = lst[i];\n        } else if (min2 > lst[i]) {\n            min3 = min2;\n            min2 = lst[i];\n        } else if (min3 > lst[i]) {\n            min3 = lst[i];\n        }\n    }\n    sum = min1 + min2 + min3;\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/372","completion":"    for (int i = 1; i < nums.size(); i++) {\n        int tmp = nums[i];\n        int index = i;\n        for (int j = i - 1; j >= 0; j--) {\n            if (nums[j] > tmp) {\n                nums[j + 1] = nums[j];\n                index = j;\n            }\n        }\n        nums[index] = tmp;\n    }\n    return nums;\n}","language":"cpp"}
{"task_id":"MBCPP\/392","completion":"    int result = 0;\n    if (n > 1) {\n        result = getMaxSum(n \/ 2) + getMaxSum(n \/ 3) + getMaxSum(n \/ 4) + getMaxSum(n \/ 5);\n    }\n    return (result > n) ? result : n;\n}","language":"cpp"}
{"task_id":"MBCPP\/449","completion":"    int a = (x1 - x2) * (y3 - y2) - (y1 - y2) * (x3 - x2);\n    int b = (x1 - x3) * (y2 - y3) - (y1 - y3) * (x2 - x3);\n    if (a == 0) {\n        if (b == 0) {\n            return string(\"No\");\n        } else {\n            return string(\"No\");\n        }\n    } else if (a == 0 && b == 0) {\n        return string(\"No\");\n    } else {\n        return string(\"Yes\");\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/508","completion":"    bool sameOrder = true;\n    int index = 0;\n    for (auto w : l1) {\n        for (auto v : l2) {\n            if (w != v) {\n                index += 1;\n                break;\n            }\n        }\n        if (index == l2.size()) {\n            sameOrder = false;\n            break;\n        }\n    }\n    return sameOrder;\n}","language":"cpp"}
{"task_id":"MBCPP\/516","completion":"    int i, j, k, n;\n    n = nums.size();\n    for (i = 0; i < n; i++) {\n        k = nums[i];\n        for (j = i - 1; j >= 0 && nums[j] > k; j--) {\n            nums[j + 1] = nums[j];\n        }\n        nums[j + 1] = k;\n    }\n    return nums;\n}","language":"cpp"}
{"task_id":"MBCPP\/535","completion":"    double area = 3.1415 * r * r;\n    return area;\n}","language":"cpp"}
{"task_id":"MBCPP\/536","completion":"    vector<int> result = {};\n    for (int i = 0; i < list.size(); i++) {\n        if (i % n == 0) {\n            result.push_back(list[i]);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/540","completion":"    int max = -1;\n    int min = 100;\n    int frequency = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        frequency = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                frequency++;\n            }\n        }\n        if (frequency > max) {\n            max = frequency;\n        }\n        if (frequency < min) {\n            min = frequency;\n        }\n    }\n    return max - min;\n}","language":"cpp"}
{"task_id":"MBCPP\/552","completion":"    string result = \"Linear Sequence\";\n    for (int i = 1; i < seqNums.size() - 1; i++) {\n        if (seqNums[i] > seqNums[i - 1] && seqNums[i] > seqNums[i + 1]) {\n            result = \"Non Linear Sequence\";\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/565","completion":"    vector<string> result;\n    for (int i = 0; i < word.size(); i++) {\n        result.push_back(string(word.substr(i, 1)));\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/573","completion":"    unordered_set<int> unique_set = unordered_set<int>();\n    for (int i : listData) {\n        unique_set.insert(i);\n    }\n    int product = 1;\n    for (auto value : unique_set) {\n        product *= value;\n    }\n    return product;\n}","language":"cpp"}
{"task_id":"MBCPP\/577","completion":"    int lastDigit = 0;\n    int d = 1;\n    while (n > 0) {\n        lastDigit = d * n % 10;\n        n \/= 10;\n        d *= 10;\n    }\n    return lastDigit;\n}","language":"cpp"}
{"task_id":"MBCPP\/610","completion":"    vector<int> result = vector<int>();\n    for (int i = 0; i < list1.size(); i++) {\n        if (i != l - 1) {\n            result.push_back(list1[i]);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/624","completion":"    string result = \"\";\n    for (int i = 0; i < str.size(); i++) {\n        result += (str[i] >= 'A' && str[i] <= 'Z') ? str[i] : (char)(str[i] - 32);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/639","completion":"    int result = 0;\n    for (auto name : sampleNames) {\n        if (name[0] >= 'a' && name[0] <= 'z') {\n            continue;\n        }\n        result += name.size();\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/646","completion":"    int result = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            for (int l = 0; l < n; l++) {\n                if (i + k <= n && j + k <= n && l + k <= n) {\n                    result += 1;\n                }\n            }\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/651","completion":"    for (auto i : testTup1) {\n        for (auto j : testTup2) {\n            if (i == j) {\n                return true;\n            }\n        }\n    }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/660","completion":"    vector<int> v1 = {l1, r1};\n    vector<int> v2 = {l2, r2};\n    vector<int> v3 = {r1, l1};\n    vector<int> v4 = {r2, l2};\n    vector<int> v5 = {min(v1[0], v2[0]), max(v1[1], v2[1])};\n    vector<int> v6 = {min(v3[0], v4[0]), max(v3[1], v4[1])};\n    vector<int> v7 = {min(v5[0], v6[0]), max(v5[1], v6[1])};\n    return v7;\n}","language":"cpp"}
{"task_id":"MBCPP\/668","completion":"    string result = \"\";\n    for (int i = 0; i < str.size(); i++) {\n        if (i != 0 && str[i] == chr[0]) {\n            result += str[i];\n            i++;\n        }\n        if (str[i] != chr[0] || str[i] != chr[chr.size() - 1]) {\n            result += str[i];\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/683","completion":"    return sqrt(n) * sqrt(n) == n;\n}","language":"cpp"}
{"task_id":"MBCPP\/685","completion":"    int sum = 0;\n    for (int i = 2; i <= n; i++) {\n        int flag = 0;\n        for (int j = 2; j < i; j++) {\n            if (i % j == 0) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/689","completion":"    int jumps = 0;\n    int cur = 0;\n    for (int i = 0; i < arr.size() - 1; i++) {\n        if (i == cur) {\n            jumps++;\n            cur = arr[i] + i;\n        } else if (cur >= n) {\n            return jumps;\n        }\n    }\n    return jumps;\n}","language":"cpp"}
{"task_id":"MBCPP\/717","completion":"    double mean = 0.0;\n    for (int i = 0; i < data.size(); i++) {\n        mean += data[i];\n    }\n    mean \/= data.size();\n    double diff = 0.0;\n    for (int i = 0; i < data.size(); i++) {\n        diff += (data[i] - mean) * (data[i] - mean);\n    }\n    return sqrt(diff \/ (data.size() - 1.0));\n}","language":"cpp"}
{"task_id":"MBCPP\/734","completion":"    int sum = 0;\n    int subArr = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n - i; j++) {\n            subArr = 1;\n            for (int k = 0; k < j + 1; k++) {\n                subArr *= arr[i + k];\n            }\n            sum += subArr;\n        }\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/763","completion":"    int min = n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j] && arr[i] - arr[j] < min) {\n                min = arr[i] - arr[j];\n            }\n            if (arr[j] > arr[i] && arr[j] - arr[i] < min) {\n                min = arr[j] - arr[i];\n            }\n        }\n    }\n    return min;\n}","language":"cpp"}
{"task_id":"MBCPP\/765","completion":"    int r = 0;\n    while (n > 0) {\n        if (n % 10 == 7) {\n            r += 11;\n        } else if (n % 10 == 4) {\n            r += 7;\n        } else if (n % 10 == 9) {\n            r += 13;\n        }\n        n \/= 10;\n    }\n    return r;\n}","language":"cpp"}
{"task_id":"MBCPP\/777","completion":"    int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                i++;\n                j = i + 1;\n            }\n        }\n        sum += arr[i];\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/801","completion":"    if (x != y && x != z && y != z) {\n        return 0;\n    }\n    int n = 0;\n    if (x == y && x == z) {\n        n = 3;\n    } else if (x == y || x == z || y == z) {\n        n = 2;\n    }\n    return n;\n}","language":"cpp"}
{"task_id":"MBCPP\/810","completion":"    vector<string> result;\n    for (int i = 0; i < a; i++) {\n        result.push_back(string(\"p\"));\n    }\n    for (int i = 0; i < b; i++) {\n        result.push_back(string(\"q\"));\n    }\n    for (int i = 0; i < c; i++) {\n        result.push_back(string(\"r\"));\n    }\n    for (int i = 0; i < d; i++) {\n        result.push_back(string(\"s\"));\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/821","completion":"    unordered_map<string, string> map = {};\n    for (auto [key, value] : dict1) {\n        map[key] = value;\n    }\n    for (auto [key, value] : dict2) {\n        map[key] = value;\n    }\n    return map;\n}","language":"cpp"}
{"task_id":"MBCPP\/838","completion":"    int count = 0;\n    for (int i = 0; i < s1.size(); i++) {\n        if (s1[i] != s2[i]) {\n            count++;\n            s2 = s2.erase(i, 1);\n            s1 = s1.erase(i, 1);\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/858","completion":"    int count = 0;\n    for (auto v : inputList) {\n        count += 1;\n    }\n    return count * count;\n}","language":"cpp"}
{"task_id":"MBCPP\/864","completion":"    vector<string> result = vector<string>();\n    for (auto text : texts) {\n        string reverse = \"\";\n        for (int i = text.size() - 1; i >= 0; i--) {\n            reverse += text[i];\n        }\n        if (text == reverse) {\n            result.push_back(text);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/876","completion":"    if (x > y) {\n        int temp = x;\n        x = y;\n        y = temp;\n    }\n    int gcd = 1;\n    int i = 1;\n    for (; i <= x && i <= y; i++) {\n        if (x % i == 0 && y % i == 0) {\n            gcd = i;\n        }\n    }\n    return x * y \/ gcd;\n}","language":"cpp"}
{"task_id":"MBCPP\/885","completion":"    vector<int> v(str1.size());\n    for (int i = 0; i < str1.size(); i++) {\n        if (str1[i] != str2[i]) {\n            v[i] = 0;\n        } else {\n            v[i] = 1;\n        }\n    }\n    for (auto i : v) {\n        if (i != 0) {\n            return false;\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/907","completion":"    vector<int> arr = {1, 3, 7, 9, 13, 15, 21, 25, 31, 33};\n    vector<int> result = vector<int>();\n    for (auto v : arr) {\n        if (n > 0) {\n            result.push_back(v);\n            n--;\n        } else {\n            break;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/921","completion":"    vector<vector<int>> result = vector<vector<int>>();\n    if (testTup.size() > 0) {\n        for (int i = 0; i < testTup.size(); i++) {\n            if (i % n == 0) {\n                result.push_back(vector<int>());\n            }\n            result[result.size() - 1].push_back(testTup[i]);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/969","completion":"    vector<vector<int>> finalList = vector<vector<int>>();\n    for (auto v : testList) {\n        if (finalList.size() == 0) {\n            finalList.push_back(v);\n        } else {\n            if (v[0] == finalList[finalList.size() - 1][0]) {\n                finalList[finalList.size() - 1].push_back(v[1]);\n            } else {\n                finalList.push_back(v);\n            }\n        }\n    }\n    return finalList;\n}","language":"cpp"}
{"task_id":"MBCPP\/5","completion":"\tint A[n+1];\n\tint B[n+1];\n\tA[0] = 1;\n\tA[1] = 0;\n\tB[0] = 0;\n\tB[1] = 1;\n\tfor(int i = 2; i <= n; i++) {\n\t\tA[i] = A[i-2] + 2 * B[i-1];\n\t\tB[i] = A[i-1] + B[i-2];\n\t}\n\treturn A[n];\n}","language":"cpp"}
{"task_id":"MBCPP\/9","completion":"    string tmp = str + str;\n    int n = str.size();\n    for (int i = 1; i < n + 1; i++) {\n        string substring = tmp.substr(i, n);\n        if (str == substring) {\n            return i;\n        }\n    }\n    return n;\n}","language":"cpp"}
{"task_id":"MBCPP\/38","completion":"    \/\/ write your code here\n    int firstEven = -1;\n    int firstOdd = -1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            firstEven = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            firstOdd = list1[i];\n            break;\n        }\n    }\n    return firstEven \/ firstOdd;\n}","language":"cpp"}
{"task_id":"MBCPP\/47","completion":"    int variable = 1;\n    if (a == b) {\n        return 1;\n    } else if ((b - a) >= 5) {\n        return 0;\n    } else {\n        for (int i = a + 1; i <= b; i++) {\n            variable = (variable * (i % 10)) % 10;\n        }\n        return variable % 10;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/59","completion":"    return 3 * n * n - 2 * n;\n}","language":"cpp"}
{"task_id":"MBCPP\/60","completion":"\tvector<int> mls;\n\tint max = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tmls.push_back(1);\n\t}\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = 0; j < i; j++) {\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n\t\t\t\tmls[i] = mls[j] + 1;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++) {\n\t\tif (max < mls[i]) {\n\t\t\tmax = mls[i];\n\t\t}\n\t}\n\treturn max;\n}","language":"cpp"}
{"task_id":"MBCPP\/81","completion":"  vector<vector<int>> res;\n  for (auto i = 0; i < testTup1.size(); i++) {\n    res.push_back({testTup1[i], testTup2[i % testTup2.size()]});\n  }\n  return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/84","completion":"\tif (n == 1 || n == 2) {\n\t\treturn 1;\n\t} else {\n\t\treturn sequence(sequence(n - 1)) + sequence(n - sequence(n - 1));\n\t}\n}","language":"cpp"}
{"task_id":"MBCPP\/86","completion":"  return 3 * n * (n - 1) + 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/103","completion":"    if (m >= n || n == 0) {\n        return 0;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return ((n - m) * eulerianNum(n - 1, m - 1) + (m + 1) * eulerianNum(n - 1, m));\n}","language":"cpp"}
{"task_id":"MBCPP\/110","completion":"  vector<vector<int>> res;\n  for (auto sub : testList) {\n    if (sub[0] > strtVal) {\n      res.push_back({{strtVal, sub[0]}});\n      strtVal = sub[1];\n    }\n    if (strtVal < stopVal) {\n      res.push_back({{strtVal, stopVal}});\n    }\n  }\n  return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/119","completion":"    int XOR = 0;\n    for (int i = 0; i < n; i++) {\n        XOR ^= arr[i];\n    }\n    return (XOR);\n}","language":"cpp"}
{"task_id":"MBCPP\/125","completion":"    int current_sum = 0;\n    int max_sum = 0;\n    for (int i = 0; i < n; i++) {\n        current_sum += (str[i] == '0' ? 1 : -1);\n        if (current_sum < 0) {\n            current_sum = 0;\n        }\n        max_sum = max(current_sum, max_sum);\n    }\n    return max_sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/149","completion":"\tint dp[n];\n\tdp[0] = 1;\n\tfor (int i = 1; i < n; i++) {\n\t\tdp[i] = 1;\n\t\tfor (int j = 0; j < i; j++) {\n\t\t\tif ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1);\n\t\t\t}\n\t\t}\n\t}\n\tint result = 1;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (result < dp[i]) {\n\t\t\tresult = dp[i];\n\t\t}\n\t}\n\treturn result;\n}","language":"cpp"}
{"task_id":"MBCPP\/159","completion":"    \/\/ Your code here\n    if (month == \"January\" || month == \"February\" || month == \"March\") {\n        return \"winter\";\n    } else if (month == \"April\" || month == \"May\" || month == \"June\") {\n        return \"spring\";\n    } else if (month == \"July\" || month == \"August\" || month == \"September\") {\n        return \"summer\";\n    } else {\n        return \"autumn\";\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/165","completion":"    int count_chars = 0;\n    for (int i = 0; i < str1.length(); i++) {\n        if ((i == str1[i] - 'A') || (i == str1[i] - 'a')) {\n            count_chars++;\n        }\n    }\n    return count_chars;\n}","language":"cpp"}
{"task_id":"MBCPP\/169","completion":"    if (n <= 2) {\n        return n;\n    }\n    int a = 1;\n    int b = 2;\n    for (int i = 3; i <= n; i++) {\n        int c = 2 * b + a;\n        a = b;\n        b = c;\n    }\n    return b;\n}","language":"cpp"}
{"task_id":"MBCPP\/177","completion":"    \/\/ if (2 * l <= r) {\n    \/\/     return {l, 2 * l};\n    \/\/ } else {\n    \/\/     return {-1, -1};\n    \/\/ }\n    if (2 * l <= r) {\n        return {l, 2 * l};\n    } else {\n        return {-1, -1};\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/191","completion":"  if (monthname3 == \"April\" || monthname3 == \"June\" || monthname3 == \"September\" || monthname3 == \"November\") {\n    return true;\n  } else {\n    return false;\n  }\n}","language":"cpp"}
{"task_id":"MBCPP\/205","completion":"  vector<int> res;\n  int i;\n  for (i = 0; i < testTup.size(); i++) {\n    res.push_back(~testTup[i]);\n  }\n  return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/229","completion":"  vector<int> temp;\n  int j = 0;\n  for (int i = 0; i < n; i++) {\n    if (arr[i] < 0) {\n      temp.push_back(arr[i]);\n      arr[i] = arr[j];\n      arr[j] = temp.back();\n      j++;\n    }\n  }\n  return arr;\n}","language":"cpp"}
{"task_id":"MBCPP\/233","completion":"    double lateralsurface = 2 * 3.1415 * r * h;\n    return lateralsurface;\n}","language":"cpp"}
{"task_id":"MBCPP\/235","completion":"    int count = 0;\n    int res = 0;\n    int temp = n;\n    while (temp > 0) {\n        if (count % 2 == 1) {\n            res |= (1 << count);\n        }\n        count++;\n        temp >>= 1;\n    }\n    return n | res;\n}","language":"cpp"}
{"task_id":"MBCPP\/239","completion":"    \/\/ write your code here\n    int T[m+1][n+1] = {0};\n    for (int i = 0; i <= m; i++) {\n        for (int j = 0; j <= n; j++) {\n            if (i == 0 || j == 0) {\n                T[i][j] = 0;\n            } else if (i < j) {\n                T[i][j] = 0;\n            } else if (j == 1) {\n                T[i][j] = i;\n            } else {\n                T[i][j] = T[i - 1][j] + T[i \/ 2][j - 1];\n            }\n        }\n    }\n    return T[m][n];\n}","language":"cpp"}
{"task_id":"MBCPP\/241","completion":"    vector<vector<vector<string>>> array3d;\n    for (int i = 0; i < o; i++) {\n        array3d.push_back(vector<vector<string>>());\n        for (int j = 0; j < n; j++) {\n            array3d[i].push_back(vector<string>());\n            for (int k = 0; k < m; k++) {\n                array3d[i][j].push_back(string(\"*\"));\n            }\n        }\n    }\n    return array3d;\n}","language":"cpp"}
{"task_id":"MBCPP\/260","completion":"\tif (n == 0 || n == 1) {\n\t\treturn 1;\n\t}\n\treturn 2 * newmanPrime(n - 1) + newmanPrime(n - 2);\n}","language":"cpp"}
{"task_id":"MBCPP\/268","completion":"    return (6 * n * (n - 1) + 1);\n}","language":"cpp"}
{"task_id":"MBCPP\/271","completion":"    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int j = 2 * i;\n        sum += j * j * j * j * j;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/276","completion":"  return 3.1415 * r * r * h;\n}","language":"cpp"}
{"task_id":"MBCPP\/279","completion":"    return 4 * n * n - 3 * n;\n}","language":"cpp"}
{"task_id":"MBCPP\/283","completion":"    int count[10];\n    for (int i = 0; i < 10; i++) {\n        count[i] = 0;\n    }\n    while (n > 0) {\n        count[n % 10]++;\n        n \/= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (count[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/286","completion":"\t\/\/ write your code here\n\tint max_so_far = -2147483648;\n\tint max_ending_here = 0;\n\tfor (int i = 0; i < n * k; i++) {\n\t\tmax_ending_here += a[i % n];\n\t\tif (max_so_far < max_ending_here) {\n\t\t\tmax_so_far = max_ending_here;\n\t\t}\n\t\tif (max_ending_here < 0) {\n\t\t\tmax_ending_here = 0;\n\t\t}\n\t}\n\treturn max_so_far;\n}","language":"cpp"}
{"task_id":"MBCPP\/287","completion":"    return 2*n*(n+1)*(2*n+1)\/3;\n}","language":"cpp"}
{"task_id":"MBCPP\/288","completion":"\tint current_element = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif ((arr[i] * arr[i]) % p == 1) {\n\t\t\tcurrent_element = current_element + 1;\n\t\t}\n\t}\n\treturn current_element;\n}","language":"cpp"}
{"task_id":"MBCPP\/289","completion":"    int hund1 = n \/ 100;\n    int hund4 = n \/ 400;\n    int leap = n >> 2;\n    int ordd = n - leap;\n    if (hund1) {\n        ordd += hund1;\n        leap -= hund1;\n    }\n    if (hund4) {\n        ordd -= hund4;\n        leap += hund4;\n    }\n    int days = ordd + leap * 2;\n    int odd = days % 7;\n    return odd;\n}","language":"cpp"}
{"task_id":"MBCPP\/291","completion":"\t\n\t\/\/ dp[i] stores the number of ways to paint the fence with i posts and k colors\n\tint dp[n+1];\n\t\n\t\/\/ Initialize all values as 0\n\tdp[0] = 0;\n\tdp[1] = k;\n\tdp[2] = k * k;\n\t\n\t\/\/ Fill the dp[] using bottom up approach\n\tfor (int i = 3; i <= n; i++) {\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % 1000000007;\n\t}\n\t\n\treturn dp[n];\n}","language":"cpp"}
{"task_id":"MBCPP\/304","completion":"    \/\/ write your code here\n    for (int i = rotations - 1; i >= 0; i--) {\n        int left = ranges[i][0];\n        int right = ranges[i][1];\n        if (left <= index && right >= index) {\n            if (index == left) {\n                index = right;\n            } else {\n                index = index - 1;\n            }\n        }\n    }\n    return arr[index];\n}","language":"cpp"}
{"task_id":"MBCPP\/310","completion":"    vector<string> result;\n    string temp;\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] != ' ') {\n            temp = str1[i];\n            result.push_back(temp);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/318","completion":"    int maxvalue = 0;\n    int i = 1;\n    for (i = 1; i < s - 1; i++) {\n        int j = 1;\n        for (j = 1; j < s; j++) {\n            int k = s - i - j;\n            maxvalue = max(maxvalue, i * j * k);\n        }\n    }\n    return maxvalue;\n}","language":"cpp"}
{"task_id":"MBCPP\/324","completion":"  vector<int> sumOfAlternates = {0, 0};\n  for (auto i = 0; i < testTuple.size(); i++) {\n    if (i % 2) {\n      sumOfAlternates[0] += testTuple[i];\n    } else {\n      sumOfAlternates[1] += testTuple[i];\n    }\n  }\n  return sumOfAlternates;\n}","language":"cpp"}
{"task_id":"MBCPP\/325","completion":"    if (n <= 3)\n        return n;\n    int res = n;\n    for (int x = 1; x < n + 1; x++) {\n        int temp = x * x;\n        if (temp > n)\n            break;\n        else\n            res = min(res, 1 + getMinSquares(n - temp));\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/338","completion":"    \/\/ 1. Initialize count to zero.\n    int count = 0;\n\n    \/\/ 2. Loop through the string.\n    for (int i = 0; i < s.size(); i++) {\n        \/\/ 3. Loop through the remaining substrings.\n        for (int j = i + 1; j <= s.size(); j++) {\n            \/\/ 4. If the substrings are equal, increment count.\n            if (s[i] == s[j - 1]) {\n                count++;\n            }\n        }\n    }\n\n    \/\/ 5. Return count.\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/339","completion":"    if (x == y) {\n        return y;\n    }\n    return 2;\n}","language":"cpp"}
{"task_id":"MBCPP\/344","completion":"    return (int)floor(sqrt(m)) - (int)floor(sqrt(n-1));\n}","language":"cpp"}
{"task_id":"MBCPP\/346","completion":"\tif (n == 0 && k == 0) {\n\t\treturn 1;\n\t}\n\tif (k == 0) {\n\t\treturn 0;\n\t}\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k);\n}","language":"cpp"}
{"task_id":"MBCPP\/350","completion":"    int maxOcc = 0;\n    int n = s.size();\n    int arr[26] = {0};\n    for (int i = 0; i < n; i++) {\n        arr[s[i] - 'a']++;\n    }\n    for (int i = 0; i < 26; i++) {\n        if (arr[i] > maxOcc) {\n            maxOcc = arr[i];\n        }\n    }\n    return n - maxOcc;\n}","language":"cpp"}
{"task_id":"MBCPP\/355","completion":"    int rectangles = 0;\n    int diameter = 2 * radius;\n    int diameterSquare = diameter * diameter;\n    for (int a = 1; a < 2 * radius; a++) {\n        for (int b = 1; b < 2 * radius; b++) {\n            int diagnalLengthSquare = (a * a + b * b);\n            if (diagnalLengthSquare <= diameterSquare) {\n                rectangles++;\n            }\n        }\n    }\n    return rectangles;\n}","language":"cpp"}
{"task_id":"MBCPP\/359","completion":"    if (2*b*b == 9*a*c) {\n        return (\"Yes\");\n    } else {\n        return (\"No\");\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/360","completion":"\tint result = (int) pow(2, n) - 1;\n\treturn result * result - 2;\n}","language":"cpp"}
{"task_id":"MBCPP\/369","completion":"  int LSA = 2 * h * (l + w);\n  return LSA;\n}","language":"cpp"}
{"task_id":"MBCPP\/380","completion":"  vector<vector<int>> multiList;\n  for (int i = 0; i < rownum; i++) {\n    multiList.push_back(vector<int>(colnum));\n  }\n  for (int i = 0; i < rownum; i++) {\n    for (int j = 0; j < colnum; j++) {\n      multiList[i][j] = i * j;\n    }\n  }\n  return multiList;\n}","language":"cpp"}
{"task_id":"MBCPP\/385","completion":"  if (n == 0) {\n    return 3;\n  }\n  if (n == 1) {\n    return 0;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  return getPerrin(n - 2) + getPerrin(n - 3);\n}","language":"cpp"}
{"task_id":"MBCPP\/386","completion":"\tint count_left = 0;\n\tint count_right = 0;\n\tint swap = 0;\n\tint imbalance = 0;\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (s[i] == '[') {\n\t\t\tcount_left += 1;\n\t\t\tif (imbalance > 0) {\n\t\t\t\tswap += imbalance;\n\t\t\t\timbalance -= 1;\n\t\t\t}\n\t\t} else if (s[i] == ']') {\n\t\t\tcount_right += 1;\n\t\t\timbalance = (count_right - count_left);\n\t\t}\n\t}\n\treturn swap;\n}","language":"cpp"}
{"task_id":"MBCPP\/416","completion":"\tint MAX = 1000000;\n\t\n\tint dp[MAX+1];\n\tdp[0] = 0;\n\tdp[1] = 1;\n\tfor (int i = 2; i <= n; i++) {\n\t\tdp[i] = max(dp[int(i\/2)] + dp[int(i\/3)] + dp[int(i\/4)], i);\n\t}\n\treturn dp[n];\n}","language":"cpp"}
{"task_id":"MBCPP\/420","completion":"    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += (2 * i) * (2 * i) * (2 * i);\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/430","completion":"    return (int)((c - ((b * b) + 1) * 4 * a ));\n}","language":"cpp"}
{"task_id":"MBCPP\/450","completion":"    vector<string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/456","completion":"    \/\/ TODO: Your code here\n    \/\/ Begin solution code\n    \/\/ 1. Create a new vector to store the reversed strings\n    vector<string> result = vector<string>();\n    \/\/ 2. Iterate through the given strings\n    for (int i = 0; i < stringlist.size(); i++) {\n        \/\/ 3. Create a new string to store the reversed string\n        string reversedString = \"\";\n        \/\/ 4. Iterate through the characters of the current string\n        for (int j = stringlist[i].length() - 1; j >= 0; j--) {\n            \/\/ 5. Append the character to the reversed string\n            reversedString += stringlist[i][j];\n        }\n        \/\/ 6. Add the reversed string to the result vector\n        result.push_back(reversedString);\n    }\n    \/\/ 7. Return the result vector\n    return result;\n    \/\/ End solution code\n}","language":"cpp"}
{"task_id":"MBCPP\/486","completion":"\tdouble numerator = 1;\n\tdouble denominator = 1;\n\tfor (int i = 1; i <= k; i++) {\n\t\tnumerator *= (n - i + 1);\n\t\tdenominator *= i;\n\t}\n\treturn numerator * pow(p, k) * pow(1 - p, n - k) \/ denominator;\n}","language":"cpp"}
{"task_id":"MBCPP\/503","completion":"    vector<int> result;\n    int i = 0;\n    int j = 1;\n    while (j < nums.size()) {\n        result.push_back(nums[i] + nums[j]);\n        i++;\n        j++;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/529","completion":"\tint dp[n + 1];\n\tdp[0] = 2;\n\tdp[1] = 1;\n\tfor (int i = 2; i <= n; i++) {\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2];\n\t}\n\treturn dp[n];\n}","language":"cpp"}
{"task_id":"MBCPP\/538","completion":"    vector<string> result;\n    string temp;\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] != ' ') {\n            temp = str1[i];\n            result.push_back(temp);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/547","completion":"    int sum = 0;\n    int i = 1;\n    while (n \/ i > 0) {\n        sum = sum + (n \/ i);\n        i = i * 2;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/549","completion":"    int j = 0;\n    int sm = 0;\n    for (int i = 1; i <= n; i++) {\n        j = (2 * i - 1);\n        sm = sm + (j * j * j * j * j);\n    }\n    return sm;\n}","language":"cpp"}
{"task_id":"MBCPP\/581","completion":"    return 2 * b * s + pow(b,2);\n}","language":"cpp"}
{"task_id":"MBCPP\/609","completion":"    int x = max(b - 1, n);\n    return (a * x) \/ b;\n}","language":"cpp"}
{"task_id":"MBCPP\/620","completion":"\tvector<int> dp(n, 0);\n\tdp[n - 1] = 1;\n\tfor (int i = n - 2; i >= 0; i--) {\n\t\tint mxm = 0;\n\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\tif ((a[j] % a[i]) == 0 || (a[i] % a[j]) == 0) {\n\t\t\t\tmxm = max(mxm, dp[j]);\n\t\t\t}\n\t\t}\n\t\tdp[i] = 1 + mxm;\n\t}\n\treturn dp[0];\n}","language":"cpp"}
{"task_id":"MBCPP\/634","completion":"    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int j = 2 * i;\n        sum += (j * j * j * j);\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/638","completion":"    return 13.12 + 0.6215*t - 11.37*pow(v, 0.16) + 0.3965*t*pow(v, 0.16);\n}","language":"cpp"}
{"task_id":"MBCPP\/641","completion":"    return (n * (7 * n - 5) \/ 2);\n}","language":"cpp"}
{"task_id":"MBCPP\/656","completion":"    \/\/ sort the arrays\n    sort(a.begin(), a.end());\n    sort(b.begin(), b.end());\n    \/\/ initialize sum\n    int sum = 0;\n    \/\/ iterate over the arrays\n    for (int i = 0; i < n; i++) {\n        \/\/ add the absolute difference of the two elements\n        sum += abs(a[i] - b[i]);\n    }\n    \/\/ return the sum\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/657","completion":"    int fact = 1;\n    for(int i = 2; i <= n; i++) {\n        fact *= i;\n        while (fact % 10 == 0) {\n            fact \/= 10;\n        }\n    }\n    while (fact >= 10) {\n        fact \/= 10;\n    }\n    return (int)fact;\n}","language":"cpp"}
{"task_id":"MBCPP\/677","completion":"    int total = a + b + c;\n    if (total == 180) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/692","completion":"    if (n >= 10) {\n        return 0;\n    }\n    int fac = 1;\n    for (int i = 1; i <= n; i++) {\n        fac = (fac * i) % 100;\n    }\n    return fac;\n}","language":"cpp"}
{"task_id":"MBCPP\/738","completion":"  if (n < 0) {\n    return 0;\n  } else {\n    return 1.0 \/ pow(2.0, n) + geometricSum(n - 1);\n  }\n}","language":"cpp"}
{"task_id":"MBCPP\/752","completion":"\tint dp[100] = {0, 1};\n\tfor (int i = 2; i <= n; i++) {\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2];\n\t}\n\treturn dp[n];\n}","language":"cpp"}
{"task_id":"MBCPP\/770","completion":"    int j = 0, sm = 0;\n    for (int i = 1; i <= n; i++) {\n        j = (2 * i - 1);\n        sm += (j * j * j * j);\n    }\n    return sm;\n}","language":"cpp"}
{"task_id":"MBCPP\/782","completion":"    int sum = 0;\n    int n = arr.size();\n    for (int i = 0; i < n; i++) {\n        sum += ((i + 1) * (n - i) + 1) \/ 2 * arr[i];\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/814","completion":"  return (p * q) \/ 2;\n}","language":"cpp"}
{"task_id":"MBCPP\/819","completion":"    vector<vector<int>> result;\n    vector<int> element;\n    vector<int> frequency;\n    int i;\n    int j;\n    int running_count;\n    if (lists.empty()) {\n        return result;\n    }\n    running_count = 1;\n    for (i = 0; i < lists.size() - 1; i++) {\n        if (lists[i] == lists[i + 1]) {\n            running_count += 1;\n        } else {\n            frequency.push_back(running_count);\n            element.push_back(lists[i]);\n            running_count = 1;\n        }\n    }\n    frequency.push_back(running_count);\n    element.push_back(lists[i]);\n    result.push_back(element);\n    result.push_back(frequency);\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/826","completion":"    int sqa = pow(a, 2);\n    int sqb = pow(b, 2);\n    int sqc = pow(c, 2);\n    if (sqa == sqa + sqb || sqb == sqa + sqc || sqc == sqa + sqb) {\n        return \"Right-angled Triangle\";\n    } else if (sqa > sqc + sqb || sqb > sqa + sqc || sqc > sqa + sqb) {\n        return \"Obtuse-angled Triangle\";\n    } else {\n        return \"Acute-angled Triangle\";\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/836","completion":"\tint max_so_far = -1 * (1 << 31);\n\tint max_ending_here = 0;\n\tint start = 0;\n\tint end = 0;\n\tint s = 0;\n\tfor (int i = 0; i < size; i++) {\n\t\tmax_ending_here += a[i];\n\t\tif (max_so_far < max_ending_here) {\n\t\t\tmax_so_far = max_ending_here;\n\t\t\tstart = s;\n\t\t\tend = i;\n\t\t}\n\t\tif (max_ending_here < 0) {\n\t\t\tmax_ending_here = 0;\n\t\t\ts = i + 1;\n\t\t}\n\t}\n\treturn end - start + 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/837","completion":"    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += (2*i+1)*(2*i+1)*(2*i+1);\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/844","completion":"    int arr[n];\n    int i = 0;\n    int odd = 1;\n    while (odd <= n) {\n        arr[i] = odd;\n        i++;\n        odd += 2;\n    }\n    int even = 2;\n    while (even <= n) {\n        arr[i] = even;\n        i++;\n        even += 2;\n    }\n    return arr[k - 1];\n}","language":"cpp"}
{"task_id":"MBCPP\/846","completion":"    \/\/sort the arrays\n    sort(arr.begin(), arr.end());\n    sort(dep.begin(), dep.end());\n    int plat_needed = 1;\n    int result = 1;\n    int i = 1;\n    int j = 0;\n    while (i < n && j < n) {\n        if (arr[i] <= dep[j]) {\n            plat_needed += 1;\n            i += 1;\n        } else if (arr[i] > dep[j]) {\n            plat_needed -= 1;\n            j += 1;\n        }\n        if (plat_needed > result) {\n            result = plat_needed;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/866","completion":"  if (monthname2 == \"January\" || monthname2 == \"March\" || monthname2 == \"May\" || monthname2 == \"July\" || monthname2 == \"Augest\" || monthname2 == \"October\" || monthname2 == \"December\") {\n    return true;\n  } else {\n    return false;\n  }\n}","language":"cpp"}
{"task_id":"MBCPP\/867","completion":"    int odd = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] % 2) {\n            odd += 1;\n        }\n    }\n    if (odd % 2) {\n        return 1;\n    }\n    return 2;\n}","language":"cpp"}
{"task_id":"MBCPP\/882","completion":"  return 2 * (b * h);\n}","language":"cpp"}
{"task_id":"MBCPP\/934","completion":"\tif (m == 0 || n == 0) {\n\t\treturn 1;\n\t}\n\treturn dealnnoyNum(m - 1, n) + dealnnoyNum(m - 1, n - 1) + dealnnoyNum(m, n - 1);\n}","language":"cpp"}
{"task_id":"MBCPP\/944","completion":"    int i;\n    for (i = 0; i < text.length(); i++) {\n        if (text[i] >= '0' && text[i] <= '9') {\n            break;\n        }\n    }\n    return i;\n}","language":"cpp"}
{"task_id":"MBCPP\/953","completion":"    int res = 0;\n    vector<int> temp;\n    vector<int> count;\n    int i;\n    for (i = 0; i < n; i++) {\n        temp.push_back(1);\n    }\n    for (i = 0; i < n; i++) {\n        count.push_back(1);\n    }\n    for (i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (ar[i] == ar[j]) {\n                count[i] += 1;\n            }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        res = max(res, count[i]);\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/960","completion":"    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return getNoofways(n - 1) + getNoofways(n - 2);\n}","language":"cpp"}
{"task_id":"MBCPP\/968","completion":"    int x = min(b - 1, n);\n    return (a * x) \/ b;\n}","language":"cpp"}
{"task_id":"MBCPP\/54","completion":"    \/\/ write your code here\n    int max_value = 0;\n    for (int i = 0; i < myList.size(); i++) {\n        if (myList[i] > max_value) {\n            max_value = myList[i];\n        }\n    }\n    vector<int> buckets(max_value + 1);\n    for (int i = 0; i < myList.size(); i++) {\n        buckets[myList[i]]++;\n    }\n    int i = 0;\n    for (int j = 0; j < max_value + 1; j++) {\n        while (buckets[j] > 0) {\n            myList[i] = j;\n            i++;\n            buckets[j]--;\n        }\n    }\n    return myList;\n}","language":"cpp"}
{"task_id":"MBCPP\/76","completion":"    if (m > n) {\n        int temp = m;\n        m = n;\n        n = temp;\n    }\n    return ((m * (m + 1) * (2 * m + 1) \/ 6 + (n - m) * m * (m + 1) \/ 2));\n}","language":"cpp"}
{"task_id":"MBCPP\/128","completion":"    vector<string> result;\n    string word = \"\";\n    int i;\n    for (i = 0; i < str.size(); i++) {\n        if (str[i] == ' ' || str[i] == '\\n') {\n            if (word.length() > n) {\n                result.push_back(word);\n            }\n            word = \"\";\n        } else {\n            word += str[i];\n        }\n    }\n    if (word.length() > n) {\n        result.push_back(word);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/136","completion":"    double amount, surcharge;\n    if (units < 50)\n        amount = units * 2.60;\n    else if (units <= 100) {\n        amount = 130 + ((units - 50) * 3.25);\n        surcharge = 35;\n    } else if (units <= 200) {\n        amount = 130 + 162.50 + ((units - 100) * 5.26);\n        surcharge = 45;\n    } else {\n        amount = 130 + 162.50 + 526 + ((units - 200) * 8.45);\n        surcharge = 75;\n    }\n    double total = amount + surcharge;\n    return total;\n}","language":"cpp"}
{"task_id":"MBCPP\/146","completion":"    \/\/ ...\n    for (int i = 0; i < str1.size(); i++) {\n        return str1[i];\n    }\n    \/\/ ...\n}","language":"cpp"}
{"task_id":"MBCPP\/153","completion":"  vector<double> vertex = \n    {-b \/ (2.0 * a), (((4.0 * a * c) - (b * b)) \/ (4.0 * a))};\n  return vertex;\n}","language":"cpp"}
{"task_id":"MBCPP\/155","completion":"  int res = 0;\n  int count = 0;\n  int temp = n;\n  while (temp > 0) {\n    if ((count % 2) == 1) {\n      res = res | (1 << count);\n    }\n    count++;\n    temp >>= 1;\n  }\n  return n ^ res;\n}","language":"cpp"}
{"task_id":"MBCPP\/163","completion":"  return s * (l * l) \/ (4 * tan(3.141592653589793 \/ s));\n}","language":"cpp"}
{"task_id":"MBCPP\/198","completion":"    if (a < 0 || b < 0) {\n        return -1;\n    }\n    double area = (3. * sqrt(3.) * pow(a, 2)) \/ (4. * b);\n    return area;\n}","language":"cpp"}
{"task_id":"MBCPP\/236","completion":"    if (n < k)\n        return -1;\n    else {\n        int up = 0;\n        int down = 0;\n        up = ((n - k + 1) * (n - k + 2)) \/ 2;\n        down = ((n - 2 * k + 1) * (n - 2 * k + 2)) \/ 2;\n        return up + down;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/259","completion":"  vector<vector<int>> res;\n  res.resize(testTup1.size());\n  for (int i = 0; i < testTup1.size(); i++) {\n    res[i].resize(testTup1[i].size());\n    for (int j = 0; j < testTup1[i].size(); j++) {\n      res[i][j] = max(testTup1[i][j], testTup2[i][j]);\n    }\n  }\n  return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/267","completion":"    return n*(4*n*n-1)\/3;\n}","language":"cpp"}
{"task_id":"MBCPP\/274","completion":"    \/\/  <editor-fold desc=\"Your code here\">\n    return 1 << (n - 1);\n \/\/  <\/editor-fold>\n}","language":"cpp"}
{"task_id":"MBCPP\/277","completion":"    unordered_map<string, int> result;\n    for (auto entry : dict) {\n        if (entry.second >= n) {\n            result[entry.first] = entry.second;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/311","completion":"    \/\/ #include <bits\/stdc++.h>\n    if ((n & (n + 1)) == 0)\n        return n;\n    int pos = 0;\n    int temp = n;\n    int count = 0;\n    while (temp) {\n        if ((temp & 1) == 0)\n            pos = count;\n        count++;\n        temp >>= 1;\n    }\n    return (n | (1 << (pos)));\n}","language":"cpp"}
{"task_id":"MBCPP\/312","completion":"  double pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679;\n  double volume = (1.0 \/ 3) * pi * r * r * h;\n  return volume;\n}","language":"cpp"}
{"task_id":"MBCPP\/314","completion":"\tint incl = max(grid[0][0], grid[1][0]);\n\tint excl = 0;\n\tfor (int i = 1; i < n; ++i) {\n\t\tint excl_new = max(excl, incl);\n\t\tincl = excl + max(grid[0][i], grid[1][i]);\n\t\texcl = excl_new;\n\t}\n\treturn max(excl, incl);\n}","language":"cpp"}
{"task_id":"MBCPP\/343","completion":"  int d = 0;\n  int l = 0;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] >= '0' && s[i] <= '9')\n      d++;\n    else if (s[i] >= 'a' && s[i] <= 'z')\n      l++;\n    else\n      continue;\n  }\n  return {l, d};\n}","language":"cpp"}
{"task_id":"MBCPP\/347","completion":"    return n * (n + 1) * (3 * m - n + 1) \/ 6;\n}","language":"cpp"}
{"task_id":"MBCPP\/383","completion":"    int res = 0;\n    int count = 0;\n    int temp = n;\n    while (temp > 0) {\n        if (count % 2 == 0) {\n            res = res | (1 << count);\n        }\n        count++;\n        temp >>= 1;\n    }\n    return n ^ res;\n}","language":"cpp"}
{"task_id":"MBCPP\/468","completion":"\tint mpis[n];\n\tfor (int i = 0; i < n; i++)\n\t\tmpis[i] = arr[i];\n\tfor (int i = 1; i < n; i++) {\n\t\tfor (int j = 0; j < i; j++) {\n\t\t\tif (arr[i] > arr[j] && mpis[i] < (mpis[j] * arr[i]))\n\t\t\t\tmpis[i] = mpis[j] * arr[i];\n\t\t}\n\t}\n\tint max = mpis[0];\n\tfor (int i = 1; i < n; i++) {\n\t\tif (max < mpis[i])\n\t\t\tmax = mpis[i];\n\t}\n\treturn max;\n}","language":"cpp"}
{"task_id":"MBCPP\/488","completion":"  \/\/ This is an area computation.\n  double area= (sqrt(5*(5+2*sqrt(5)))*pow(a,2))\/4.0;\n  return area;\n}","language":"cpp"}
{"task_id":"MBCPP\/494","completion":"  int res = 0;\n  for (int i = 0; i < testTup.size(); i++) {\n    res <<= 1;\n    if (testTup[i] == 1) {\n      res += 1;\n    }\n  }\n  return(to_string(res));\n}","language":"cpp"}
{"task_id":"MBCPP\/500","completion":"  string ans = \" \";\n  for (int i = 0; i < list.size(); i++) {\n    ans += \" \" + list[i];\n  }\n  return ans;\n}","language":"cpp"}
{"task_id":"MBCPP\/524","completion":"\t\n\tvector<int> msis(n);\n\t\n\tfor (int i = 0; i < n; i++) {\n\t\tmsis[i] = arr[i];\n\t}\n\t\n\tfor (int i = 1; i < n; i++) {\n\t\tfor (int j = 0; j < i; j++) {\n\t\t\tif (arr[i] > arr[j] && msis[i] < msis[j] + arr[i]) {\n\t\t\t\tmsis[i] = msis[j] + arr[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tint max = 0;\n\t\n\tfor (int i = 0; i < n; i++) {\n\t\tif (max < msis[i])\n\t\t\tmax = msis[i];\n\t}\n\t\n\treturn max;\n}","language":"cpp"}
{"task_id":"MBCPP\/586","completion":"    \/\/ write your code here.\n    vector<int> b;\n    b.reserve(k);\n    b.reserve(n-k);\n    int i;\n    for(i=k;i<n;i++)\n        b.push_back(a[i]);\n    for(i=0;i<k;i++)\n        b.push_back(a[i]);\n    return b;\n}","language":"cpp"}
{"task_id":"MBCPP\/619","completion":"    string res = \"\";\n    string dig = \"\";\n    for (int i = 0; i < testStr.length(); i++) {\n        char ch = testStr[i];\n        if (ch >= '0' && ch <= '9') {\n            dig += ch;\n        } else {\n            res += ch;\n        }\n    }\n    res += dig;\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/622","completion":"  double m1 = -1, m2 = -1;\n  int i = 0, j = 0, count = 0;\n  while (count < n+1) {\n    count += 1;\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n    if (arr1[i] <= arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i += 1;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j += 1;\n    }\n  }\n  return (m1 + m2) \/ 2.0;\n}","language":"cpp"}
{"task_id":"MBCPP\/661","completion":"\tint sum[n];\n\tint maxSum;\n\tfor (int i = 0; i < n; i++) {\n\t\tsum[i] = 0;\n\t}\n\tif (n >= 1) {\n\t\tsum[0] = arr[0];\n\t}\n\tif (n >= 2) {\n\t\tsum[1] = arr[0] + arr[1];\n\t}\n\tfor (int i = 2; i < n; i++) {\n\t\tmaxSum = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]);\n\t\tsum[i] = maxSum;\n\t}\n\treturn sum[n-1];\n}","language":"cpp"}
{"task_id":"MBCPP\/707","completion":"    n++;\n    int powerOf2 = 2;\n    int cnt = n \/ 2;\n    while (powerOf2 <= n) {\n        int totalPairs = n \/ powerOf2;\n        cnt += (totalPairs \/ 2) * powerOf2;\n        if (totalPairs & 1) {\n            cnt += (n % powerOf2);\n        } else {\n            cnt += 0;\n        }\n        powerOf2 <<= 1;\n    }\n    return cnt;\n}","language":"cpp"}
{"task_id":"MBCPP\/721","completion":"    int m = 100;\n    double dp[m][m];\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++)\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    for (int j = 1; j < n; j++)\n        dp[0][j] = dp[0][j - 1] + cost[0][j];\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] \/ (2 * n - 1);\n}","language":"cpp"}
{"task_id":"MBCPP\/731","completion":"  double l = sqrt(r*r+h*h);\n  double LSA = 3.14159265358979323846 * r * l;\n  return LSA;\n}","language":"cpp"}
{"task_id":"MBCPP\/742","completion":"  \/\/ To complete this function\n  \/\/ Return the area of the given tetrahedron\n  \n  double area = sqrt(3)*(side*side);\n  return area;\n}","language":"cpp"}
{"task_id":"MBCPP\/748","completion":"    string str2 = \"\";\n\n    if (str1.empty())\n        return \"\";\n\n    for (int i = 0; i < str1.length(); i++) {\n        if (isupper(str1[i])) {\n            if (i != 0 && !isupper(str1[i-1])) {\n                str2 += \" \";\n            }\n        }\n        str2 += str1[i];\n    }\n    return str2;\n}","language":"cpp"}
{"task_id":"MBCPP\/860","completion":"\tchar ch;\n\tfor (int i = 0; i < str.size(); i++) {\n\t\tch = str[i];\n\t\tif (!isalnum(ch) && ch != '_') {\n\t\t\treturn \"Discard\";\n\t\t}\n\t}\n\treturn \"Accept\";\n}","language":"cpp"}
{"task_id":"MBCPP\/865","completion":"    int i;\n    vector<int> result;\n    for (i = 0; i < nums.size(); i++) {\n        nums[i] *= n;\n    }\n    return nums;\n}","language":"cpp"}
{"task_id":"MBCPP\/875","completion":"  vector<int> arr;\n  int min = 1000;\n  int res;\n  int n;\n\n  for(int i = 0; i < testList.size(); i++) {\n    arr = testList[i];\n    n = arr.size();\n    for(int j = 0; j < n - 1; j++) {\n      for(int k = j + 1; k < n; k++) {\n        res = abs(arr[j] - arr[k]);\n        if(res < min) {\n          min = res;\n        }\n      }\n    }\n  }\n\n  return min;\n}","language":"cpp"}
{"task_id":"MBCPP\/895","completion":"    \/\/ create a dp table and fill it with values\n    vector<int> dp(a.size() + 1, 0);\n    dp[0] = a[0];\n    dp[1] = max(a[0], a[1]);\n\n    \/\/ loop through the rest of the array and fill the table\n    for (int i = 2; i < dp.size(); ++i) {\n        dp[i] = max(dp[i - 1], dp[i - 2] + a[i]);\n        dp[i] = max(dp[i], a[i]);\n    }\n\n    \/\/ return the value of the last row\n    return dp[dp.size() - 1];\n}","language":"cpp"}
{"task_id":"MBCPP\/898","completion":"    vector<int> result;\n    int i = 0;\n    int j = 0;\n    int length = numbers.size();\n    while (i < length) {\n        while (j < length && numbers[j] == numbers[i]) j++;\n        if (j - i == n) result.push_back(numbers[i]);\n        i = j;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/911","completion":"    if (nums.size() < 3) return -1;\n    int n = nums.size();\n    int maxVal = 0;\n    for (int i = 0; i < n - 2; i++) {\n        int k = nums[i];\n        int start = i + 1;\n        int end = n - 1;\n        while (start < end) {\n            int max_val = nums[start] * nums[end] * k;\n            if (max_val > maxVal) maxVal = max_val;\n            if (nums[start] < nums[end]) {\n                start++;\n            } else {\n                end--;\n            }\n        }\n    }\n    return maxVal;\n}","language":"cpp"}
{"task_id":"MBCPP\/951","completion":"    vector<vector<int>> res = vector<vector<int>>(0);\n    vector<int> temp1, temp2, temp;\n    for (int i = 0; i < testList1.size(); i++) {\n        temp1 = testList1[i];\n        temp2 = testList2[i];\n        temp = vector<int>(0);\n        for (int j = 0; j < temp1.size(); j++) {\n            temp.push_back(max(temp1[j], temp2[j]));\n        }\n        res.push_back(temp);\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/958","completion":"        string romanNum = \"\";\n        int value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        string values[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        int i = 0;\n        while (num > 0) {\n            while (num >= value[i]) {\n                romanNum += values[i];\n                num -= value[i];\n            }\n            i++;\n        }\n        return romanNum;\n    }","language":"cpp"}
{"task_id":"MBCPP\/1","completion":"    vector<int> dp(m + 1, n + 1);\n    dp[0][0] = 0;\n    for (int i = 1; i <= m; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i - 1][0];\n    }\n    for (int i = 1; i <= n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i - 1];\n    }\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            dp[i][j] = cost[i - 1][j - 1] + Math.min(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[m][n];\n","language":"cpp"}
{"task_id":"MBCPP\/2","completion":"    vector<int> result;\n    int i;\n    int j;\n    int count;\n\n    result.reserve(testTup1.size());\n    count = 0;\n    for (i = 0; i < testTup1.size(); i++) {\n        for (j = 0; j < testTup2.size(); j++) {\n            if (testTup1[i] == testTup2[j]) {\n                result[count] = testTup1[i];\n                count++;\n                break;\n            }\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/4","completion":"    \/\/ Create a min heap with the first n elements of nums.\n    min_heap<int> heap = new min_heap<int>(n);\n    for (int i = 0; i < n; i++) {\n        heap.push_back(nums[i]);\n    }\n\n    \/\/ Pop the first n elements of nums and put them in the result vector.\n    vector<int> result = new vector<int>(n);\n    for (int i = 0; i < n; i++) {\n        result[i] = heap.pop_front();\n    }\n\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/12","completion":"    vector<vector<int>> res;\n    int n = m.size();\n    int i, j, k, sum;\n    for (i = 0; i &lt; n; i++) {\n        sum = 0;\n        for (j = 0; j &lt; n; j++) {\n            sum += m[i][j];\n        }\n        res.push_back(vector<int>(m[i], sum));\n    }\n    for (i = 0; i &lt; n; i++) {\n        for (j = i + 1; j &lt; n; j++) {\n            if (res[j - 1].second > res[j].second) {\n                k = res[j - 1].first;\n                res[j - 1].first = res[j].first;\n                res[j - 1].second = res[j].second;\n                res[j].first = k;\n               ","language":"cpp"}
{"task_id":"MBCPP\/15","completion":"    vector<string> result;\n    int i;\n    for (i = 0; i &lt; text.size(); i++) {\n        if (text[i] >= 'a' &amp;&amp; text[i] &lt;= 'z') {\n            result.push_back(text[i]);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/16","completion":"    string result = \"\";\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] == '_') {\n            int j = i + 1;\n            while (j < text.size() && text[j] != '_') {\n                j++;\n            }\n            if (j == text.size()) {\n                result += \"Not matched!\";\n                break;\n            }\n            result += \"Found a match!\";\n            i = j;\n        } else {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/27","completion":"    vector<string> result;\n    for (int i = 0; i &lt; list.size(); i++) {\n        result.push_back(remove_digits(list[i]));\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/31","completion":"    \/\/ create a min heap of size k\n    min_heap<int> heap = new min_heap<int>(k);\n\n    \/\/ push all the numbers in the first vector to the heap\n    for (auto i : nums[0]) {\n        heap.push(i);\n    }\n\n    \/\/ iterate over the remaining vectors\n    for (int i = 1; i < nums.size(); i++) {\n        \/\/ iterate over the numbers in the current vector\n        for (auto j : nums[i]) {\n            \/\/ if the number is less than the top of the heap, pop it and push the number to the heap\n            if (heap.top() > j) {\n                heap.pop();\n                heap.push(j);\n            }\n        }\n    }\n\n    \/\/ return the top k numbers in the heap\n    return heap.top_k();\n}","language":"cpp"}
{"task_id":"MBCPP\/36","completion":"    int q_digits = 0;\n    int p_digits = 0;\n    int q_digit = 0;\n    int p_digit = 0;\n    int q_digit_count = 0;\n    int p_digit_count = 0;\n    int q_digit_index = 0;\n    int p_digit_index = 0;\n    int q_digit_count_max = 0;\n    int p_digit_count_max = 0;\n    int q_digit_index_max = 0;\n    int p_digit_index_max = 0;\n    int q_digit_count_min = 0;\n    int p_digit_count_min = 0;\n    int q_digit_index_min = 0;\n    int p_digit_index_min = 0;\n    int q_digit_count_max_index = 0;\n    int p_digit_count_max_index = 0;\n    int q_digit_","language":"cpp"}
{"task_id":"MBCPP\/39","completion":"    string ans = \"\";\n    int n = s.length();\n    for (int i = 0; i < n; i++) {\n        int j = i + 1;\n        while (j < n && s.charAt(i) == s.charAt(j)) {\n            j++;\n        }\n        if (j - i > 1) {\n            ans += s.charAt(i);\n            for (int k = i + 1; k < j; k++) {\n                ans += s.charAt(k);\n            }\n        }\n    }\n    return ans;\n}","language":"cpp"}
{"task_id":"MBCPP\/43","completion":"    \/\/ TODO: implement this function\n    return \"\";\n}","language":"cpp"}
{"task_id":"MBCPP\/57","completion":"    vector<int> dp(n+1, 0);\n    dp[0] = 0;\n    for (int i = 1; i <= n; i++) {\n        dp[i] = dp[i-1] * 10 + arr[i-1];\n    }\n\n    int max = 0;\n    for (int i = 0; i <= n; i++) {\n        for (int j = 0; j <= n; j++) {\n            if (i == 0 && j == 0) {\n                continue;\n            }\n            if (dp[i] % (j + 1) == 0) {\n                max = Math.max(max, dp[i] \/ (j + 1));\n            }\n        }\n    }\n    return max;\n}","language":"cpp"}
{"task_id":"MBCPP\/61","completion":"    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        for (int j = i + 1; j <= s.size(); j++) {\n            if (sumOfDigits(s[i:j]) == n) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/73","completion":"    vector<string> result;\n    result.push_back(text);\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/74","completion":"    vector<bool> same = {false};\n    for (int i = 0; i < colors.size(); i++) {\n        if (colors[i] == patterns[i]) {\n            same.push_back(true);\n        }\n    }\n    return same.size() == colors.size();\n}","language":"cpp"}
{"task_id":"MBCPP\/75","completion":"    vector<vector<int>> result = vector<vector<int>>();\n    for (auto v : testList) {\n        for (auto w : testList) {\n            if (v != w && v % k == 0 && w % k == 0) {\n                result.push_back(v);\n                result.push_back(w);\n            }\n        }\n    }\n    return result.join();\n}","language":"cpp"}
{"task_id":"MBCPP\/83","completion":"    string result = \"\";\n    for (int i = 0; i < strr.size(); i++) {\n        result += strr[i];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/100","completion":"    int n = num;\n    int rev = 0;\n    while (n > 0) {\n        rev = rev * 10 + n % 10;\n        n \/= 10;\n    }\n    if (rev < num) {\n        return rev;\n    }\n    return nextSmallestPalindrome(rev);\n}","language":"cpp"}
{"task_id":"MBCPP\/102","completion":"    string camel = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            camel += word[i + 1].toUpperCase();\n            i++;\n        } else {\n            camel += word[i];\n        }\n    }\n    return camel;\n}","language":"cpp"}
{"task_id":"MBCPP\/104","completion":"    vector<vector<string>> result = {{}};\n    for (auto &amp;sublist : inputList) {\n        sort(sublist.begin(), sublist.end(), [](string a, string b) {\n            return a.compareTo(b);\n        });\n        result.push_back(sublist);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/108","completion":"    \/\/ create a heap queue\n    heap_queue<int> pq = new heap_queue<int>();\n    \/\/ add all the elements from the first vector to the queue\n    for (int i = 0; i < num1.size(); i++) {\n        pq.push(num1[i]);\n    }\n    \/\/ add all the elements from the second vector to the queue\n    for (int i = 0; i < num2.size(); i++) {\n        pq.push(num2[i]);\n    }\n    \/\/ add all the elements from the third vector to the queue\n    for (int i = 0; i < num3.size(); i++) {\n        pq.push(num3[i]);\n    }\n    \/\/ create a new vector to store the sorted elements\n    vector<int> sorted = new vector<int>();\n    \/\/ loop until the queue is empty\n    while (!pq.empty()) {\n        \/\/ pop the top element from the queue and add it to the sorted vector\n       ","language":"cpp"}
{"task_id":"MBCPP\/111","completion":"    vector<int> result;\n    int i;\n    int j;\n    int k;\n    int n;\n    int m;\n    int temp;\n\n    n = nestedlist.size();\n    m = nestedlist[0].size();\n    result = 0;\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            temp = nestedlist[i][j];\n            k = 1;\n            while (k < m) {\n                if (nestedlist[i][k] != temp) {\n                    break;\n                }\n                k++;\n            }\n            if (k == m) {\n                result = temp;\n                break;\n            }\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/114","completion":"    string result = \"[\";\n    for (auto v : testList) {\n        result += \"(\";\n        for (auto i : v) {\n            result += i + \", \";\n        }\n        result = result.slice(0, -2);\n        result += \"), \";\n    }\n    result = result.slice(0, -2);\n    result += \"]\";\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/117","completion":"    string result = \"\";\n    for (int i = 0; i &lt; testList.size(); i++) {\n        result += \"(\";\n        for (int j = 0; j &lt; testList[i].size(); j++) {\n            result += testList[i][j] + \", \";\n        }\n        result = result.substring(0, result.length() - 2);\n        result += \"), \";\n    }\n    result = result.substring(0, result.length() - 2);\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/118","completion":"    vector<string> result;\n    int i;\n    for (i = 0; i &lt; str.length(); i++) {\n        result.push_back(str[i]);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/122","completion":"    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/123","completion":"    int sum = 0;\n    for (int i = 1; i < limit; i++) {\n        if (isAmicable(i)) {\n            sum += i;\n        }\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/129","completion":"    vector<vector<int>> square = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}};\n    vector<vector<int>> sum = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}};\n\n    for (int i = 0; i &lt; 3; i++) {\n        for (int j = 0; j &lt; 3; j++) {\n            sum[i][j] = myMatrix[i][j] + myMatrix[i][j] + myMatrix[i][j];\n            square[i][j] = myMatrix[i][j] * myMatrix[i][j];\n        }\n    }\n\n    for (int i = 0; i &lt; 3; i++) {\n        for (int j = 0; j &lt; 3; j++) {\n            if (sum[i][j","language":"cpp"}
{"task_id":"MBCPP\/137","completion":"    double count = 0.0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            count++;\n        }\n    }\n    return count \/ nums.size();\n}","language":"cpp"}
{"task_id":"MBCPP\/140","completion":"    vector<int> result;\n    int count = 0;\n    for (auto v : testList) {\n        for (auto e : v) {\n            if (count == 0) {\n                result.push_back(e);\n                count++;\n            } else {\n                count--;\n            }\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/147","completion":"    int sum = 0;\n    vector<int> path = vector<int>(m, n);\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (i == 0 || j == 0) {\n                path[i][j] = tri[i][j];\n            } else {\n                path[i][j] = Math.max(path[i - 1][j], path[i][j - 1]) + tri[i][j];\n            }\n            sum = Math.max(sum, path[i][j]);\n        }\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/148","completion":"    int sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n \/= 10;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/152","completion":"    if (x.size() == 1) {\n        return x;\n    }\n    int mid = x.size() \/ 2;\n    vector<int> left = mergeSort(x.slice(0, mid));\n    vector<int> right = mergeSort(x.slice(mid));\n    vector<int> result = new vector<int>();\n    while (left.size() > 0 && right.size() > 0) {\n        if (left[0] < right[0]) {\n            result.push_back(left[0]);\n            left.erase(0);\n        } else {\n            result.push_back(right[0]);\n            right.erase(0);\n        }\n    }\n    while (left.size() > 0) {\n        result.push_back(left[0]);\n        left.erase(0);\n    }\n    while (right.size() > 0) {\n        result.push_back(right[0","language":"cpp"}
{"task_id":"MBCPP\/156","completion":"    vector<vector<int>> result;\n    for (auto &amp;row : tupleStr) {\n        result.push_back(vector<int>(int(row.size()), 0));\n        for (auto &amp;col : row) {\n            result[result.size() - 1].push_back(int(col));\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/158","completion":"    vector<int> dp(n+1, 0);\n    vector<int> prefix(n+1, 0);\n    vector<int> suffix(n+1, 0);\n\n    for (int i = 0; i <= n; i++) {\n        dp[i] = i;\n        prefix[i] = i;\n        suffix[i] = i;\n    }\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < k; j++) {\n            if (arr[i] > j) {\n                dp[i] = Math.min(dp[i], dp[i-1] + 1);\n                prefix[i] = Math.min(prefix[i], prefix[i-1]);\n                suffix[i] = Math.min(suffix[i], suffix[i-1]);\n            } else {\n                dp[i] = Math.min(dp[i], dp[i-1]);","language":"cpp"}
{"task_id":"MBCPP\/185","completion":"    vector<double> result;\n    double x = 0;\n    double y = 0;\n    double d = 0;\n    double e = 0;\n    double f = 0;\n    double g = 0;\n    double h = 0;\n    double i = 0;\n    double j = 0;\n    double k = 0;\n    double l = 0;\n    double m = 0;\n    double n = 0;\n    double o = 0;\n    double p = 0;\n    double q = 0;\n    double r = 0;\n    double s = 0;\n    double t = 0;\n    double u = 0;\n    double v = 0;\n    double w = 0;\n    double x1 = 0;\n    double x2 = 0;\n    double x3 = 0;\n    double x4 = 0;\n    double x5 = 0;\n","language":"cpp"}
{"task_id":"MBCPP\/186","completion":"    string result = \"Not Matched!\";\n    for (int i = 0; i &lt; patterns.size(); i++) {\n        if (text.find(patterns[i]) != text.end()) {\n            result = \"Matched!\";\n            break;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/193","completion":"    vector<int> resultTup;\n    int i;\n    int j;\n    int count;\n    int temp;\n\n    count = 0;\n    for (i = 0; i < testTup.size(); i++) {\n        for (j = i + 1; j < testTup.size(); j++) {\n            if (testTup[i] == testTup[j]) {\n                count++;\n                break;\n            }\n        }\n    }\n\n    resultTup = new vector<int>(testTup.size() - count, testTup.size());\n    for (i = 0; i < testTup.size(); i++) {\n        for (j = i + 1; j < testTup.size(); j++) {\n            if (testTup[i] == testTup[j]) {\n                temp = testTup[i];\n                testTup[i] = testTup[j];","language":"cpp"}
{"task_id":"MBCPP\/208","completion":"    return num.match(\"^[0-9]+(\\\\.[0-9]{2})?$\") != null;\n}","language":"cpp"}
{"task_id":"MBCPP\/209","completion":"    \/\/ Find the smallest element in the heap.\n    int smallest = heap[0];\n    heap[0] = a;\n\n    \/\/ Find the index of the smallest element.\n    int smallest_index = 0;\n    for (int i = 1; i < heap.size(); i++) {\n        if (heap[i] < smallest) {\n            smallest = heap[i];\n            smallest_index = i;\n        }\n    }\n\n    \/\/ Move the smallest element to the end of the heap.\n    heap[smallest_index] = heap[heap.size() - 1];\n    heap[heap.size() - 1] = smallest;\n\n    \/\/ Heapify the newly added element.\n    heapify(heap, heap.size() - 1);\n\n    return heap;\n}","language":"cpp"}
{"task_id":"MBCPP\/210","completion":"    return str.regex(\"^[a-zA-Z0-9]*$\");\n}","language":"cpp"}
{"task_id":"MBCPP\/218","completion":"    int count = 0;\n    while (a != b) {\n        if (a > b) {\n            a %= b;\n        } else {\n            b %= a;\n        }\n        count++;\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/219","completion":"    vector<int> minMax = {0, 0};\n    for (int i = 0; i < k; i++) {\n        if (testTup[i] < minMax[0]) {\n            minMax[0] = testTup[i];\n        }\n        if (testTup[i] > minMax[1]) {\n            minMax[1] = testTup[i];\n        }\n    }\n    return minMax;\n}","language":"cpp"}
{"task_id":"MBCPP\/220","completion":"    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n            if (result.length() == 0 || result[result.length() - 1] == ' ' || result[result.length() - 1] == ',' || result[result.length() - 1] == '.') {\n                result += text[i];\n            } else {\n                result += ':';\n            }\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/231","completion":"    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += tri[i][i];\n    }\n    int max = sum;\n    for (int i = n - 2; i >= 0; i--) {\n        sum = 0;\n        for (int j = i + 1; j < n; j++) {\n            sum += tri[i][j];\n        }\n        if (sum > max) {\n            max = sum;\n        }\n    }\n    return max;\n}","language":"cpp"}
{"task_id":"MBCPP\/232","completion":"    vector<int> list2;\n    list2.reserve(n);\n    for (int i = 0; i < n; i++) {\n        list2[i] = list1[i];\n    }\n    list2.sort(compare_int);\n    return list2;\n}","language":"cpp"}
{"task_id":"MBCPP\/245","completion":"    vector<int> dp(n+1, 0);\n    dp[0] = 0;\n    for (int i = 1; i <= n; i++) {\n        dp[i] = arr[i-1];\n        for (int j = 1; j < i; j++) {\n            dp[i] = Math.max(dp[i], dp[j-1] + arr[i-j]);\n        }\n    }\n    return dp[n];\n}","language":"cpp"}
{"task_id":"MBCPP\/247","completion":"    vector<int> lps = {0};\n    int len = str.size();\n    int i, j;\n    for (i = 0; i < len; i++) {\n        for (j = 0; j < i; j++) {\n            if (str[i] == str[j] && (j + 1 > lps.size() - 1 || lps[j + 1] < j - 1)) {\n                lps.push_back(j);\n            }\n        }\n    }\n    return lps.size();\n}","language":"cpp"}
{"task_id":"MBCPP\/254","completion":"    vector<string> result;\n    int i;\n    for (i = 0; i &lt; text.size(); i++) {\n        if (text[i] == 'a' || text[i] == 'e') {\n            result.push_back(text.substr(0, i));\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/255","completion":"    vector<vector<string>> result;\n    result.push_back(l);\n    for (int i = 1; i &lt;= n; i++) {\n        vector<string> temp;\n        for (int j = 0; j &lt; result.size(); j++) {\n            temp.push_back(result[j]);\n        }\n        result.push_back(temp);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/305","completion":"    vector<string> result;\n    int i;\n    for (i = 0; i &lt; words.size(); i++) {\n        if (words[i].startsWith(\"p\")) {\n            result.push_back(words[i]);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/306","completion":"    if (index > n) return 0;\n    if (k > index) return maxSumIncreasingSubseq(a, n, index + 1, k);\n    if (a[index] > a[index - 1]) return maxSumIncreasingSubseq(a, n, index + 1, k);\n    return max(maxSumIncreasingSubseq(a, n, index + 1, k), maxSumIncreasingSubseq(a, n, index + 1, k - 1) + a[index]);\n}","language":"cpp"}
{"task_id":"MBCPP\/308","completion":"    vector<int> result;\n    result.resize(n);\n    for (int i = 0; i < n; i++) {\n        result[i] = 0;\n    }\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            if (nums1[i] * nums2[j] > result[i]) {\n                result[i] = nums1[i] * nums2[j];\n            }\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/315","completion":"    string max = \"\";\n    int maxLen = 0;\n    for (int i = 0; i < str.size(); i++) {\n        if (i % 2 == 0) {\n            if (str[i] == ' ') {\n                continue;\n            }\n            if (str[i] == '\\n') {\n                continue;\n            }\n            if (str[i] == '\\t') {\n                continue;\n            }\n            if (str[i] == '\\r') {\n                continue;\n            }\n            if (str[i] == '\\b') {\n                continue;\n            }\n            if (str[i] == '\\f') {\n                continue;\n            }\n            if (str[i] == '\\v') {\n                continue;\n            }\n            if (str[i] == '\\0') {\n                continue;\n            ","language":"cpp"}
{"task_id":"MBCPP\/319","completion":"    vector<string> result;\n    regex r = regex(\"[a-zA-Z]{5}\");\n    result = r.findall(text);\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/321","completion":"    string demlo = \"\";\n    int i = 0;\n    while (i < s.length()) {\n        if (s[i] == '1') {\n            demlo += '1';\n        } else {\n            demlo += '0';\n        }\n        i++;\n    }\n    return demlo;\n}","language":"cpp"}
{"task_id":"MBCPP\/323","completion":"    vector<int> res;\n    int i, j;\n    for (i = 0; i < n \/ 2; i++) {\n        j = n - i - 1;\n        if (arr[i] > 0) {\n            res.push_back(arr[i]);\n            res.push_back(arr[j]);\n        } else {\n            res.push_back(arr[j]);\n            res.push_back(arr[i]);\n        }\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/326","completion":"    string mostOccurrence = \"\";\n    int maxOccurrences = 0;\n    for (int i = 0; i < testList.size(); i++) {\n        string currentWord = testList[i];\n        int currentOccurrences = 0;\n        for (int j = 0; j < testList.size(); j++) {\n            if (i != j) {\n                string currentWord2 = testList[j];\n                if (currentWord.find(currentWord2) != string::npos) {\n                    currentOccurrences++;\n                }\n            }\n        }\n        if (currentOccurrences > maxOccurrences) {\n            maxOccurrences = currentOccurrences;\n            mostOccurrence = currentWord;\n        }\n    }\n    return mostOccurrence;\n}","language":"cpp"}
{"task_id":"MBCPP\/328","completion":"    vector<int> list2;\n    for (int i = 0; i < n; i++) {\n        list2.push_back(list1.back());\n        list1.pop_back();\n    }\n    return list2;\n}","language":"cpp"}
{"task_id":"MBCPP\/330","completion":"    vector<string> result;\n    regex pattern = regex(\"[a-zA-Z]{3,5}\");\n    result = text.match(pattern);\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/332","completion":"    unordered_map<string, int> freq;\n    for (int i = 0; i < str1.length(); i++) {\n        if (freq.find(str1[i]) == unordered_map<string, int>().end()) {\n            freq[str1[i]] = 1;\n        } else {\n            freq[str1[i]]++;\n        }\n    }\n    return freq;\n}","language":"cpp"}
{"task_id":"MBCPP\/337","completion":"    string punctuation = \".\";\n    string word = \"\";\n    string result = \"\";\n    for (int i = text.length() - 1; i >= 0; i--) {\n        if (text[i] == punctuation) {\n            if (word.length() > 0) {\n                result = result + string(\"Found a match!\") + \"\\n\";\n                word = \"\";\n            }\n        } else {\n            word = word + text[i];\n        }\n    }\n    if (word.length() > 0) {\n        result = result + string(\"Not matched!\") + \"\\n\";\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/341","completion":"    vector<int> v;\n    for (auto i : s) {\n        v.push_back(i);\n    }\n    return v;\n}","language":"cpp"}
{"task_id":"MBCPP\/342","completion":"    vector<int> minRange = {100000, 100000};\n    for (int i = 0; i < list.size(); i++) {\n        for (int j = 0; j < list[i].size(); j++) {\n            if (list[i][j] < minRange[0]) {\n                minRange[0] = list[i][j];\n            }\n            if (list[i][j] > minRange[1]) {\n                minRange[1] = list[i][j];\n            }\n        }\n    }\n    return minRange;\n}","language":"cpp"}
{"task_id":"MBCPP\/348","completion":"    int n = (int) (Math.pow(2, m) - 1);\n    int dp[] = new int[n + 1];\n\n    dp[0] = 1;\n    dp[1] = 1;\n\n    for (int i = 2; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n\n    return dp[n];\n}","language":"cpp"}
{"task_id":"MBCPP\/353","completion":"    vector<vector<int>> list2;\n    for (int i = 0; i < list1.size(); i++) {\n        list2.push_back(list1[i]);\n    }\n    list2.erase(n);\n    return list2;\n}","language":"cpp"}
{"task_id":"MBCPP\/370","completion":"    vector<string> temp;\n    vector<string> temp2;\n    vector<string> temp3;\n    vector<string> temp4;\n    vector<string> temp5;\n    vector<string> temp6;\n    vector<string> temp7;\n    vector<string> temp8;\n    vector<string> temp9;\n    vector<string> temp10;\n    vector<string> temp11;\n    vector<string> temp12;\n    vector<string> temp13;\n    vector<string> temp14;\n    vector<string> temp15;\n    vector<string> temp16;\n    vector<string> temp17;\n    vector<string> temp18;\n    vector<string> temp19;\n    vector<string> temp20;\n    vector<string> temp21;\n    vector<string> temp22;\n    vector<string> temp23;\n    vector<string> temp24;\n    vector<string> temp25;\n    vector<string> temp26;\n    vector<string> temp27;\n    vector<string> temp28;\n    vector<string>","language":"cpp"}
{"task_id":"MBCPP\/374","completion":"    vector<string> result;\n    result.push_back(str);\n    permute(result, str.begin(), str.end());\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/398","completion":"    int sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i] % 10;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/400","completion":"    vector<int> freqList;\n    vector<int> tempList;\n    int freq = 0;\n    int tempFreq;\n    for (int i = 0; i < testList.size(); i++) {\n        freqList.clear();\n        for (int j = 0; j < testList.size(); j++) {\n            tempList.clear();\n            for (int k = 0; k < testList.size(); k++) {\n                if (testList[i][k] == testList[j][k]) {\n                    tempList.push_back(testList[i][k]);\n                }\n            }\n            if (tempList.size() > 0) {\n                tempFreq = freqList.size();\n                freqList.push_back(tempFreq);\n            }\n        }\n        if (freqList.size() > 0) {\n            freq += freqList.back();\n        }\n    }\n    return freq;\n}","language":"cpp"}
{"task_id":"MBCPP\/403","completion":"    return str.matches(\"^(https?:\\\\\/\\\\\/)?([\\\\da-z\\\\.-]+)\\\\.([a-z\\\\.]{2,6})([\\\\\/\\\\w \\\\.-]*)*\\\\\/?$\");\n}","language":"cpp"}
{"task_id":"MBCPP\/408","completion":"    vector<vector<int>> result;\n    int n = nums1.size();\n    int m = nums2.size();\n    if (k > m || k > n) {\n        return result;\n    }\n    int[] nums1Arr = new int[n];\n    int[] nums2Arr = new int[m];\n    for (int i = 0; i < n; i++) {\n        nums1Arr[i] = nums1[i];\n    }\n    for (int i = 0; i < m; i++) {\n        nums2Arr[i] = nums2[i];\n    }\n    mergeSort(nums1Arr, 0, n - 1);\n    mergeSort(nums2Arr, 0, m - 1);\n    result = new vector<vector<int>>();\n    for (int i = 0; i < k; i++) {\n        result.push_back(new vector<int>(nums1","language":"cpp"}
{"task_id":"MBCPP\/411","completion":"    return word.replace(\/(_\\w)\/g, (m) => m[1].toUpperCase());\n}","language":"cpp"}
{"task_id":"MBCPP\/417","completion":"    vector<vector<string>> result;\n    result.push_back(input[0]);\n    for (int i = 1; i < input.size(); i++) {\n        vector<string> temp = result[i - 1];\n        for (int j = 0; j < temp.size(); j++) {\n            if (temp[j] != input[i][j]) {\n                temp.push_back(input[i][j]);\n                break;\n            }\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/423","completion":"    vector<int> dp(m + 1, n + 1);\n    dp[0][0] = 0;\n\n    for (int i = 0; i <= m; i++) {\n        for (int j = 0; j <= n; j++) {\n            if (i == 0 || j == 0) {\n                dp[i][j] = 0;\n            } else if (gold[i - 1][j - 1] == 0) {\n                dp[i][j] = dp[i - 1][j - 1];\n            } else {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n\n    return dp[m][n];\n}","language":"cpp"}
{"task_id":"MBCPP\/427","completion":"    string pattern = \"([0-9]{4})-([0-9]{2})-([0-9]{2})\";\n    string replacement = \"$3-$2-$1\";\n    return dt.replace(pattern, replacement);\n}","language":"cpp"}
{"task_id":"MBCPP\/438","completion":"    vector<string> result = {\"\", \"\", \"\", \"\", \"\", \"\"};\n    int i = 0;\n    for (vector<int> v : testList) {\n        for (int j = 0; j < v.size(); j++) {\n            if (i == j) {\n                result[i] += \"1\";\n            } else {\n                result[i] += \"0\";\n            }\n        }\n        i++;\n    }\n    return result[0] + \" \" + result[1] + \" \" + result[2] + \" \" + result[3] + \" \" + result[4] + \" \" + result[5];\n}","language":"cpp"}
{"task_id":"MBCPP\/439","completion":"    int sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/442","completion":"    int count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > 0) {\n            count++;\n        }\n    }\n    return count \/ nums.size();\n}","language":"cpp"}
{"task_id":"MBCPP\/444","completion":"    vector<string> result;\n    vector<int> temp;\n    for (int i = 0; i < testList.size(); i++) {\n        result.push_back(string());\n        for (int j = 0; j < testList[i].size(); j++) {\n            temp.push_back(testList[i][j]);\n            if (temp.size() > k) {\n                temp.pop_back();\n            }\n            result[i].push_back(temp.back());\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/469","completion":"    int profit = 0;\n    int buy = -1;\n    int sell = -1;\n    for (int i = 0; i < price.size(); i++) {\n        if (buy == -1 && sell == -1) {\n            buy = price[i];\n            sell = price[i];\n        } else {\n            if (price[i] < buy) {\n                buy = price[i];\n            } else if (price[i] > sell) {\n                sell = price[i];\n                profit += sell - buy;\n            }\n        }\n    }\n    return profit;\n}","language":"cpp"}
{"task_id":"MBCPP\/482","completion":"    \/\/ TODO: Write your code here\n    return \"\";\n}","language":"cpp"}
{"task_id":"MBCPP\/484","completion":"    vector<vector<string>> result = {{}};\n    for (int i = 0; i &lt; testList1.size(); i++) {\n        for (int j = 0; j &lt; testList2.size(); j++) {\n            if (testList1[i].size() == testList2[j].size()) {\n                boolean match = true;\n                for (int k = 0; k &lt; testList1[i].size(); k++) {\n                    if (testList1[i][k] != testList2[j][k]) {\n                        match = false;\n                        break;\n                    }\n                }\n                if (match) {\n                    result.push_back(testList1[i]);\n                }\n            }\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/485","completion":"    int i, j, k, max, mid;\n    int count = 0;\n    int[] b = new int[n];\n    for (i = 0; i < n; i++) {\n        b[i] = a[i];\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (b[i] == b[j]) {\n                count++;\n            }\n        }\n    }\n    if (count == 0) {\n        return -1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (b[i] == b[j]) {\n                k = i;\n                while (k < j) {\n                    b[k] ","language":"cpp"}
{"task_id":"MBCPP\/493","completion":"    vector<vector<vector<double>>> polygons = { };\n    for (int x = startx; x &lt;= endx; x++) {\n        for (int y = starty; y &lt;= endy; y++) {\n            double distance = Math.sqrt(Math.pow(x - endx, 2) + Math.pow(y - endy, 2));\n            if (distance &lt;= radius) {\n                if (polygons[x] == null) {\n                    polygons[x] = { };\n                }\n                if (polygons[x][y] == null) {\n                    polygons[x][y] = { };\n                }\n                polygons[x][y][0] = x;\n                polygons[x][y][1] = y;\n            }\n        }\n    }\n    return polygons;\n}","language":"cpp"}
{"task_id":"MBCPP\/496","completion":"    \/\/ Create a min heap with the first n elements of the given array.\n    \/\/ The heap will be a max heap if the first n elements are negative.\n    \/\/ The first n elements will be the smallest elements.\n    \/\/ The first n elements will be the smallest elements.\n    \/\/ The first n elements will be the smallest elements.\n    \/\/ The first n elements will be the smallest elements.\n    \/\/ The first n elements will be the smallest elements.\n    \/\/ The first n elements will be the smallest elements.\n    \/\/ The first n elements will be the smallest elements.\n    \/\/ The first n elements will be the smallest elements.\n    \/\/ The first n elements will be the smallest elements.\n    \/\/ The first n elements will be the smallest elements.\n    \/\/ The first n elements will be the smallest elements.\n    \/\/ The first n elements will be the smallest elements.\n    \/\/ The first n elements will be the smallest elements.\n    \/\/ The first n elements will be the smallest elements.\n    \/\/ The first n elements will be the smallest elements.\n    \/\/ The first n elements will be","language":"cpp"}
{"task_id":"MBCPP\/497","completion":"    double s = 0;\n    double d = 2 * r;\n    double a = (2 * r) * h;\n    double b = (2 * r) * (r + h);\n    double c = (2 * r) * (r + h + 2 * r);\n    double e = (2 * r) * (r + h + 2 * r + 2 * r);\n    double f = (2 * r) * (r + h + 2 * r + 2 * r + 2 * r);\n    double g = (2 * r) * (r + h + 2 * r + 2 * r + 2 * r + 2 * r);\n    double h = (2 * r) * (r + h + 2 * r + 2 * r + 2","language":"cpp"}
{"task_id":"MBCPP\/510","completion":"    int n = arr.size();\n    int dp[n][k];\n    dp[0][0] = 1;\n    for (int i = 1; i < n; i++) {\n        dp[i][0] = 1;\n        for (int j = 1; j < k; j++) {\n            dp[i][j] = dp[i - 1][j];\n        }\n        for (int j = 1; j < k; j++) {\n            if (arr[i] > j) {\n                dp[i][j] = dp[i - 1][j];\n            } else {\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i]];\n            }\n        }\n    }\n    return dp[n - 1][k - 1];\n}","language":"cpp"}
{"task_id":"MBCPP\/519","completion":"    double volume = 0;\n    for (int i = 0; i < num; i++) {\n        volume += 1.0 \/ (2 * i + 1);\n    }\n    return volume;\n}","language":"cpp"}
{"task_id":"MBCPP\/520","completion":"    int result = 1;\n    int i;\n    for (i = 0; i < l.size(); i++) {\n        result = lcm(result, l[i]);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/522","completion":"    vector<int> l = new vector<int>();\n    vector<int> s = new vector<int>();\n    int n = arr.size();\n    int i = 0;\n    int j = 0;\n    int max = 0;\n    while (i < n && j < n) {\n        if (arr[i] > arr[j]) {\n            l.push_back(arr[j]);\n            s.push_back(1);\n            j++;\n        } else if (arr[i] < arr[j]) {\n            l.push_back(arr[i]);\n            s.push_back(s.back() + 1);\n            i++;\n        } else {\n            l.push_back(arr[i]);\n            s.push_back(s.back() + 1);\n            i++;\n            j++;\n        }\n        if (s.back() > max) {\n            max = s.back();\n        }\n   ","language":"cpp"}
{"task_id":"MBCPP\/523","completion":"    vector<string> result;\n    int i;\n    for (i = 0; i &lt; str1.length(); i++) {\n        if (str1[i] >= 'A' &amp;&amp; str1[i] &lt;= 'Z') {\n            result.push_back(\"String must have 1 upper case character.\");\n            break;\n        }\n        if (str1[i] >= 'a' &amp;&amp; str1[i] &lt;= 'z') {\n            result.push_back(\"String must have 1 lower case character.\");\n            break;\n        }\n        if (str1[i] >= '0' &amp;&amp; str1[i] &lt;= '9') {\n            result.push_back(\"String must have 1 number.\");\n            break;\n        }\n    }\n    if (i == str1.length()) {\n        result.push_back(\"Valid string.\");\n    }\n","language":"cpp"}
{"task_id":"MBCPP\/526","completion":"    string str2 = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (i == 0) {\n            str2 += str1.charAt(i).toUpperCase();\n        } else if (i == str1.length() - 1) {\n            str2 += str1.charAt(i).toLowerCase();\n        } else {\n            str2 += str1.charAt(i);\n        }\n    }\n    return str2;\n}","language":"cpp"}
{"task_id":"MBCPP\/530","completion":"    double count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] < 0) {\n            count += 1;\n        }\n    }\n    return count \/ nums.size();\n}","language":"cpp"}
{"task_id":"MBCPP\/537","completion":"    string repeatedWord = \"None\";\n    string[] words = str1.split(\" \");\n    int i;\n    for (i = 0; i < words.size(); i++) {\n        if (words[i] == words[i + 1]) {\n            repeatedWord = words[i];\n            break;\n        }\n    }\n    return repeatedWord;\n}","language":"cpp"}
{"task_id":"MBCPP\/543","completion":"    int count = 0;\n    while (num1 > 0) {\n        num1 \/= 10;\n        count++;\n    }\n    while (num2 > 0) {\n        num2 \/= 10;\n        count++;\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/545","completion":"    return (n & 0x55555555) << 1 | (n & 0xAAAAAAAA);\n}","language":"cpp"}
{"task_id":"MBCPP\/553","completion":"    int sum = 0;\n    for (int i = 0; i < testTup.size(); i++) {\n        sum += testTup[i];\n    }\n    return sum \/ testTup.size();\n}","language":"cpp"}
{"task_id":"MBCPP\/560","completion":"    vector<int> result;\n    result.resize(testTup1.size() + testTup2.size());\n    for (int i = 0; i < testTup1.size(); i++) {\n        result[i] = testTup1[i];\n    }\n    for (int i = 0; i < testTup2.size(); i++) {\n        result[i + testTup1.size()] = testTup2[i];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/569","completion":"    vector<vector<string>> result;\n    int i, j, k;\n    vector<string> temp;\n\n    result.resize(list1.size());\n    for (i = 0; i &lt; list1.size(); i++) {\n        result[i].resize(list1[i].size());\n    }\n\n    for (i = 0; i &lt; list1.size(); i++) {\n        for (j = 0; j &lt; list1[i].size(); j++) {\n            for (k = 0; k &lt; list1.size(); k++) {\n                if (list1[k][j].compareTo(list1[i][j]) > 0) {\n                    temp = list1[i];\n                    list1[i] = list1[k];\n                    list1[k] = temp;\n                }\n            }\n        }\n    }\n\n    return list1;\n}","language":"cpp"}
{"task_id":"MBCPP\/570","completion":"    vector<string> list2;\n    for (int i = 0; i &lt; charlist.size(); i++) {\n        list2.push_back(removeWords(list1, charlist[i]));\n    }\n    return list2;\n}","language":"cpp"}
{"task_id":"MBCPP\/571","completion":"    \/\/ sort the array\n    vector<int> sorted_arr = sort(arr.begin(), arr.end());\n\n    \/\/ find the maximum possible sum of disjoint pairs\n    int max_sum = 0;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            max_sum = max(max_sum, sorted_arr[i] + sorted_arr[j] - k);\n        }\n    }\n\n    return max_sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/572","completion":"    vector<int> uniqueNums;\n    uniqueNums.push_back(nums[0]);\n    uniqueNums.push_back(nums[0]);\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] != nums[i - 1]) {\n            uniqueNums.push_back(nums[i]);\n        }\n    }\n    return uniqueNums;\n}","language":"cpp"}
{"task_id":"MBCPP\/579","completion":"    vector<int> result;\n    result.resize(testTup1.size());\n    for (int i = 0; i < testTup1.size(); i++) {\n        result[i] = testTup1[i];\n    }\n    for (int i = 0; i < testTup2.size(); i++) {\n        if (testTup2[i] != result[i]) {\n            result[i] = -1;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/584","completion":"    string pattern = \"(?=[a-zA-Z])(?=\\\\w)\";\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            continue;\n        }\n        if (text[i] == '.') {\n            break;\n        }\n        if (text[i] == '!') {\n            break;\n        }\n        if (text[i] == '?') {\n            break;\n        }\n        if (text[i] == ',') {\n            break;\n        }\n        if (text[i] == ':') {\n            break;\n        }\n        if (text[i] == ';') {\n            break;\n        }\n        if (text[i] == '\\'') {\n            break;\n        }\n        if (text[i] == '\"') ","language":"cpp"}
{"task_id":"MBCPP\/592","completion":"    return 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/594","completion":"    int even = 0, odd = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even += list1[i];\n        } else {\n            odd += list1[i];\n        }\n    }\n    return even - odd;\n}","language":"cpp"}
{"task_id":"MBCPP\/603","completion":"    vector<int> l = {1};\n    for (int i = 2; i <= n; i++) {\n        l.push_back(l[i - 1] + l[i - 2]);\n    }\n    return l;\n}","language":"cpp"}
{"task_id":"MBCPP\/604","completion":"    string ans = \"\";\n    int i = 0;\n    while (i < s.length()) {\n        int j = s.indexOf(\" \", i);\n        if (j == -1) {\n            ans += s.substring(i);\n            break;\n        }\n        ans += s.substring(i, j) + \" \";\n        i = j + 1;\n    }\n    return ans;\n}","language":"cpp"}
{"task_id":"MBCPP\/621","completion":"    vector<string> result = { };\n    for (auto&amp; s : testList) {\n        result[s] = incrementString(s, k);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/630","completion":"    vector<vector<int>> coordTup = {{}};\n    for (int i = 0; i &lt; testTup.size(); i++) {\n        coordTup[i] = {testTup[i]};\n        for (int j = 0; j &lt; testTup.size(); j++) {\n            if (i == j) {\n                continue;\n            }\n            coordTup[i].push(testTup[j]);\n        }\n    }\n    return coordTup;\n}","language":"cpp"}
{"task_id":"MBCPP\/635","completion":"    \/\/ Create a heap of the iterable.\n    heap_node<int> heap;\n    for (int i = 0; i < iterable.size(); i++) {\n        heap.push_back(iterable[i]);\n    }\n\n    \/\/ Pop off the smallest values one at a time.\n    for (int i = iterable.size() - 1; i >= 0; i--) {\n        iterable[i] = heap.pop_back();\n    }\n\n    return iterable;\n}","language":"cpp"}
{"task_id":"MBCPP\/640","completion":"    string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i].contains(\"(\")) {\n            result += items[i].substring(0, items[i].indexOf(\"(\"));\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/647","completion":"    vector<string> result;\n    int i;\n    for (i = 0; i &lt; text.length(); i++) {\n        if (text[i] >= 'A' &amp;&amp; text[i] &lt;= 'Z') {\n            result.push_back(text[0:i]);\n            break;\n        }\n    }\n    if (i == text.length()) {\n        result.push_back(text);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/652","completion":"    vector<string> result = {\"\"};\n    for (int i = 0; i &lt; testList.size(); i++) {\n        vector<string> temp = {\"\"};\n        for (int j = 0; j &lt; testList[i].size(); j++) {\n            for (int k = 0; k &lt; testList[i][j].size(); k++) {\n                temp.push(testList[i][j][k].toString());\n            }\n        }\n        result.push(temp.join(\", \"));\n    }\n    return result.join(\", \");\n}","language":"cpp"}
{"task_id":"MBCPP\/659","completion":"    vector<int> y;\n    int i;\n    for (i = 0; i < x.size(); i++) {\n        if (x[i] == x[i + 1]) {\n            y.push_back(x[i]);\n        }\n    }\n    return y;\n}","language":"cpp"}
{"task_id":"MBCPP\/662","completion":"    unordered_map<string, vector<int>> dict2 = new unordered_map<string, vector<int>>();\n    for (auto &amp;pair : dict1) {\n        dict2[pair.first] = dict2[pair.first] ?? {pair.second};\n        dict2[pair.first].push_back(pair.second);\n    }\n    return dict2;\n}","language":"cpp"}
{"task_id":"MBCPP\/669","completion":"    if (ip.empty()) {\n        return \"Invalid IP address\";\n    }\n    if (ip.length() < 7 || ip.length() > 15) {\n        return \"Invalid IP address\";\n    }\n    if (ip.substr(0, 7) != \"192.168.\") {\n        return \"Invalid IP address\";\n    }\n    if (ip.substr(7, 1) != \".\") {\n        return \"Invalid IP address\";\n    }\n    if (ip.substr(8, 1) != \".\") {\n        return \"Invalid IP address\";\n    }\n    if (ip.substr(9, 1) != \".\") {\n        return \"Invalid IP address\";\n    }\n    if (ip.substr(10, 1) != \".\") {\n        return \"Invalid IP address\";\n    }\n    if (ip.substr(11, 1) != \".\") {\n        return \"","language":"cpp"}
{"task_id":"MBCPP\/671","completion":"    int mask = (1 << (n - 1));\n    return n | mask;\n}","language":"cpp"}
{"task_id":"MBCPP\/674","completion":"    string ans = \"\";\n    string word;\n    int i;\n    for (i = 0; i < str.length(); i++) {\n        word = str[i];\n        if (!find(word, ans)) {\n            ans += word;\n        }\n    }\n    return ans;\n}","language":"cpp"}
{"task_id":"MBCPP\/679","completion":"    string result = \"\";\n    for (auto &amp;pair : ditionary) {\n        if (pair.second == key) {\n            result = pair.first;\n            break;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/684","completion":"    int count = 0;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i] == x[0]) {\n            count++;\n            for (int j = 1; j < x.size(); j++) {\n                if (str[i + j] != x[j]) {\n                    break;\n                }\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/686","completion":"    string result = \"{\";\n    for (int i = 0; i < testTup.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < testTup.size(); j++) {\n            if (testTup[i] == testTup[j]) {\n                count++;\n            }\n        }\n        result += testTup[i] + \": \" + count + \", \";\n    }\n    result = result.substring(0, result.length() - 2);\n    result += \"}\";\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/693","completion":"    string text2 = text1;\n    \/\/ Replace multiple spaces with single space\n    text2 = text2.replace(\"  \", \" \");\n    \/\/ Replace multiple spaces with single space\n    text2 = text2.replace(\"  \", \" \");\n    \/\/ Replace multiple spaces with single space\n    text2 = text2.replace(\"  \", \" \");\n    \/\/ Replace multiple spaces with single space\n    text2 = text2.replace(\"  \", \" \");\n    \/\/ Replace multiple spaces with single space\n    text2 = text2.replace(\"  \", \" \");\n    \/\/ Replace multiple spaces with single space\n    text2 = text2.replace(\"  \", \" \");\n    \/\/ Replace multiple spaces with single space\n    text2 = text2.replace(\"  \", \" \");\n    \/\/ Replace multiple spaces with single space\n    text2 = text2.replace(\"  \", \" \");\n    \/\/ Replace multiple spaces with single space\n    text2 = text2.replace(\"  ","language":"cpp"}
{"task_id":"MBCPP\/694","completion":"    vector<int> uniqueValues = {0};\n    for (auto &amp;value : testDict.values()) {\n        uniqueValues.push_back(value.begin());\n    }\n    uniqueValues.sort();\n    uniqueValues.reverse();\n    vector<int> uniqueValues2 = {0};\n    for (auto &amp;value : uniqueValues) {\n        uniqueValues2.push_back(value);\n    }\n    return uniqueValues2;\n}","language":"cpp"}
{"task_id":"MBCPP\/702","completion":"    int i, j, count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                break;\n            }\n        }\n        if (j == n) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/709","completion":"    string unique = \"{\";\n    int i = 0;\n    for (vector<int> v : testList) {\n        unique += \"{\";\n        for (int j = 0; j < v.size(); j++) {\n            unique += v[j];\n            if (j != v.size() - 1) {\n                unique += \", \";\n            }\n        }\n        unique += \"}\";\n        if (i != testList.size() - 1) {\n            unique += \", \";\n        }\n        i++;\n    }\n    unique += \"}\";\n    return unique;\n}","language":"cpp"}
{"task_id":"MBCPP\/715","completion":"    vector<int> result;\n    int i = 0;\n    while (testStr[i] != ',') {\n        result.push_back(testStr[i]);\n        i++;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/724","completion":"    int sum = 0;\n    for (int i = 0; i < power; i++) {\n        sum += base;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/725","completion":"    vector<string> result;\n    result.push_back(text1.replace(\/\\\"\/g, \"\"));\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/735","completion":"    int mask = ~(1 << (n - 1));\n    return n ^ mask;\n}","language":"cpp"}
{"task_id":"MBCPP\/737","completion":"    return regex(\"^[aeiou]$\").test(str)?\"Valid\":\"Invalid\";\n}","language":"cpp"}
{"task_id":"MBCPP\/743","completion":"    \/\/ Your code here\n    return null;\n}","language":"cpp"}
{"task_id":"MBCPP\/745","completion":"    vector<int> result;\n    for (int i = startnum; i <= endnum; i++) {\n        result.push_back(i);\n        for (int j = 2; j <= i; j++) {\n            if (i % j == 0) {\n                result.push_back(i);\n                break;\n            }\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/747","completion":"    string s1 = x;\n    string s2 = y;\n    string s3 = z;\n    int lcs = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < m && j < n && k < o) {\n        if (s1[i] == s2[j] && s2[j] == s3[k]) {\n            lcs++;\n            i++;\n            j++;\n            k++;\n        } else if (s1[i] == s2[j]) {\n            i++;\n            j++;\n        } else if (s2[j] == s3[k]) {\n            j++;\n            k++;\n        } else {\n            i++;\n            k++;\n        }\n    }\n    return lcs;\n}","language":"cpp"}
{"task_id":"MBCPP\/749","completion":"    vector<int> result;\n    int i;\n    int j;\n    int n;\n    int temp;\n\n    n = numsStr.size();\n    result.resize(n);\n\n    for (i = 0; i < n; i++) {\n        temp = 0;\n        for (j = 0; j < n - i - 1; j++) {\n            if (numsStr[j].compareTo(numsStr[j + 1]) > 0) {\n                temp = numsStr[j];\n                numsStr[j] = numsStr[j + 1];\n                numsStr[j + 1] = temp;\n            }\n        }\n    }\n    return numsStr;\n}","language":"cpp"}
{"task_id":"MBCPP\/757","completion":"    string reversePairs = \"\";\n    int i;\n    for (i = 0; i < testList.size(); i++) {\n        if (i == testList.size() - 1) {\n            reversePairs += testList[i].length() - 1;\n        } else {\n            reversePairs += testList[i].length() - 1 + testList[i + 1].length() - 1;\n        }\n    }\n    return reversePairs;\n}","language":"cpp"}
{"task_id":"MBCPP\/759","completion":"    if (num.size() > 2) {\n        return false;\n    }\n    if (num.size() == 1) {\n        if (num[0] == '0') {\n            return false;\n        }\n    }\n    if (num.size() == 2) {\n        if (num[0] == '0' || num[1] == '0') {\n            return false;\n        }\n    }\n    if (num[0] == '0' && num[1] == '.') {\n        return false;\n    }\n    if (num[0] == '.') {\n        if (num[1] == '0') {\n            return false;\n        }\n    }\n    if (num[0] == '0') {\n        if (num[1] == '.') {\n            return false;\n        }\n    }\n   ","language":"cpp"}
{"task_id":"MBCPP\/769","completion":"    vector<int> result;\n    result.resize(li1.size());\n    for (int i = 0; i < li1.size(); i++) {\n        result[i] = li1[i] - li2[i];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/772","completion":"    string result = \"\";\n    for (int i = 0; i < testStr.length(); i++) {\n        if (testStr.substring(i, i + k).length() == k) {\n            result += testStr.substring(i, i + k);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/776","completion":"    int count = 0;\n    for (int i = 0; i < testStr.length() - 1; i++) {\n        if (testStr[i] == 'a' && testStr[i + 1] == 'e' || testStr[i] == 'i' && testStr[i + 1] == 'o' || testStr[i] == 'u' && testStr[i + 1] == 'a') {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/780","completion":"    vector<vector<int>> result = {{}};\n    for (int i = 0; i &lt; testList.size(); i++) {\n        for (int j = 0; j &lt; testList.size(); j++) {\n            if (i == j) {\n                continue;\n            }\n            for (int k = 0; k &lt; testList.size(); k++) {\n                if (i == k || j == k) {\n                    continue;\n                }\n                result.push_back(vector<int>(testList[i], testList[j], testList[k]));\n            }\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/784","completion":"    int even = 0;\n    int odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;\n}","language":"cpp"}
{"task_id":"MBCPP\/785","completion":"    vector<int> res;\n    int i = 0;\n    while (testStr[i] != ')') {\n        if (testStr[i] == ',') {\n            res.push_back(0);\n        } else {\n            res.push_back(testStr[i] - '0');\n        }\n        i++;\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/812","completion":"    \/\/ TODO: Your code here\n    return \"\";\n}","language":"cpp"}
{"task_id":"MBCPP\/833","completion":"    vector<int> keys = {0};\n    for (auto &amp;pair : dict) {\n        keys.push_back(pair.first);\n    }\n    return keys;\n}","language":"cpp"}
{"task_id":"MBCPP\/834","completion":"    vector<vector<int>> matrix(n, vector<int>());\n    int i, j, k, l, m, n1, n2, n3, n4, n5, n6, n7, n8, n9;\n    int x, y, z;\n    for (i = 0; i &lt; n; i++) {\n        matrix[i] = vector<int>(n, 0);\n        for (j = 0; j &lt; n; j++) {\n            matrix[i][j] = 0;\n        }\n    }\n    n1 = n - 1;\n    n2 = n - 2;\n    n3 = n - 3;\n    n4 = n - 4;\n    n5 = n - 5;\n    n6 = n - 6;\n    n7 = n - 7;\n    n8 = n - 8;\n    n9 = n - 9;\n   ","language":"cpp"}
{"task_id":"MBCPP\/843","completion":"    vector<int> heap;\n    int[] ugly = new int[n];\n    int[] index = new int[primes.size()];\n    int p = 0;\n    ugly[0] = 1;\n    index[0] = 0;\n    heap.push_back(primes[0]);\n    while (heap.size() > 0) {\n        int p = heap.back();\n        for (int i = 0; i < primes.size(); i++) {\n            if (primes[i] * ugly[index[i]] > ugly[p]) {\n                ugly[p] = primes[i] * ugly[index[i]];\n                index[i] = p;\n            }\n        }\n        heap.pop_back();\n        if (heap.size() == 0) {\n            for (int i = 0; i < primes.size(); i++) {\n                if (index[i] != p) {\n                   ","language":"cpp"}
{"task_id":"MBCPP\/849","completion":"    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/854","completion":"    vector<int> heap;\n    heap.push_back(rawheap[0]);\n    for (int i = 1; i < rawheap.size(); i++) {\n        int parent = (i - 1) \/ 2;\n        if (rawheap[i] > heap[parent]) {\n            heap.push_back(rawheap[i]);\n            heap[parent] = rawheap[i];\n        }\n    }\n    return heap;\n}","language":"cpp"}
{"task_id":"MBCPP\/861","completion":"    vector<string> result;\n    int n = texts.size();\n    int m = str.length();\n    if (n == 0) {\n        return result;\n    }\n    if (m == 0) {\n        result.push_back(texts[0]);\n        return result;\n    }\n    int[] count = new int[26];\n    for (int i = 0; i < m; i++) {\n        count[str[i] - 'a']++;\n    }\n    for (int i = 0; i < n; i++) {\n        count[str[0] - 'a']--;\n        count[texts[i][0] - 'a']++;\n        if (count[str[0] - 'a'] == 0) {\n            count[str[0] - 'a'] = -1;\n        }\n        if (count[str[0] - 'a'] ==","language":"cpp"}
{"task_id":"MBCPP\/863","completion":"    int maxLen = 0;\n    vector<int> longestSeq = vector<int>();\n    vector<int> tempSeq = vector<int>();\n    for (int i = 0; i < n; i++) {\n        tempSeq.push_back(arr[i]);\n    }\n    int i = 0;\n    while (i < n) {\n        if (tempSeq.size() == 1) {\n            longestSeq.push_back(tempSeq.back());\n            i++;\n            continue;\n        }\n        if (tempSeq.back() - tempSeq.front() == 1) {\n            tempSeq.pop_back();\n            i++;\n            continue;\n        }\n        if (tempSeq.back() - tempSeq.front() > 1) {\n            tempSeq.pop_back();\n            tempSeq.pop_back();\n            i++;\n            continue;\n        }\n        if (tempSeq.back() - tempSeq.front() ","language":"cpp"}
{"task_id":"MBCPP\/881","completion":"    int even = 0;\n    int odd = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even += list1[i];\n        } else {\n            odd += list1[i];\n        }\n    }\n    return even + odd;\n}","language":"cpp"}
{"task_id":"MBCPP\/894","completion":"    vector<double> result;\n    int i = 0;\n    while (testStr.find(\",\", i) != -1) {\n        result.push_back(Double(testStr.substr(i, testStr.find(\",\", i) - i)));\n        i = testStr.find(\",\", i) + 1;\n    }\n    result.push_back(Double(testStr.substr(i)));\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/901","completion":"    int i;\n    int smallestMultiple = 1;\n    for (i = 1; i <= n; i++) {\n        smallestMultiple = smallestMultiple * i;\n    }\n    return smallestMultiple;\n}","language":"cpp"}
{"task_id":"MBCPP\/905","completion":"    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/906","completion":"    vector<string> date = {\"\", \"\", \"\"};\n    string regex = \"(\\\\d{4})\/(\\\\d{2})\/(\\\\d{2})\";\n    string regex2 = \"(\\\\d{4})\/(\\\\d{2})\/(\\\\d{2})\/\";\n    string regex3 = \"(\\\\d{4})\/(\\\\d{2})\/(\\\\d{2})\/\";\n    string regex4 = \"(\\\\d{4})\/(\\\\d{2})\/(\\\\d{2})\/\";\n    string regex5 = \"(\\\\d{4})\/(\\\\d{2})\/(\\\\d{2})\/\";\n    string regex6 = \"(\\\\d{4})\/(\\\\d{2})\/(\\\\d{2})\/\";\n    string regex7 = \"(\\\\d{4})\/(\\\\d{2})\/(\\\\d{2})\/\";\n    string regex8 = \"(\\\\d{4})\/(\\\\d{2})\/(\\\\d{2})\/\";\n    string regex9 = \"(\\\\d{4})\/(\\\\d{","language":"cpp"}
{"task_id":"MBCPP\/909","completion":"    int rev = 0;\n    int temp = num;\n    while (num > 0) {\n        rev = rev * 10 + num % 10;\n        num \/= 10;\n    }\n    return temp == rev ? temp : -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/912","completion":"    int lobb = 0;\n    int i = 1;\n    int j = 1;\n    while (i <= n) {\n        lobb = lobb + j;\n        i = i + 1;\n        j = j * m;\n    }\n    return lobb;\n}","language":"cpp"}
{"task_id":"MBCPP\/915","completion":"    vector<int> result = {0};\n    for (int i = 0; i < arrayNums.size(); i++) {\n        if (arrayNums[i] >= 0) {\n            result.push_back(arrayNums[i]);\n        } else {\n            result.push_back(arrayNums[i] * -1);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/917","completion":"    string result = \"\";\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] == 'A') {\n            i += 1;\n            while (i < text.size() && text[i] != 'a') {\n                result += text[i];\n                i += 1;\n            }\n            if (i < text.size() && text[i] == 'a') {\n                result += \"Found a match!\";\n            } else {\n                result += \"Not matched!\";\n            }\n        }\n        i += 1;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/926","completion":"    int[] dp = new int[n+1];\n    dp[0] = 1;\n    dp[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        dp[i] = dp[i-1] + dp[i-2];\n    }\n    return dp[n];\n}","language":"cpp"}
{"task_id":"MBCPP\/928","completion":"    string[] parts = split(dt, \"-\");\n    string day = parts[2];\n    string month = parts[1];\n    string year = parts[0];\n\n    return day + \"-\" + month + \"-\" + year;\n}","language":"cpp"}
{"task_id":"MBCPP\/932","completion":"    vector<string> unique_list;\n    unique_list.reserve(l.size());\n    unique_list.clear();\n    unique_list.push_back(l[0]);\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i - 1]) {\n            unique_list.push_back(l[i]);\n        }\n    }\n    return unique_list;\n}","language":"cpp"}
{"task_id":"MBCPP\/933","completion":"    return text.replace(\/([A-Z])\/g, \"_$1\").toLowerCase();\n}","language":"cpp"}
{"task_id":"MBCPP\/938","completion":"    vector<int> res;\n    int i, j, k;\n    int min_idx;\n    int min_val;\n\n    min_val = 0;\n    min_idx = 0;\n    for (i = 0; i < p; i++) {\n        for (j = 0; j < q; j++) {\n            for (k = 0; k < r; k++) {\n                if (a[i] + b[j] + c[k] < min_val) {\n                    min_val = a[i] + b[j] + c[k];\n                    min_idx = i;\n                }\n            }\n        }\n    }\n    res.push_back(min_val);\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/940","completion":"    \/\/ Create a heap of size n\n    heap_node<int> h = new heap_node<int>(arr.size());\n    \/\/ Add elements to the heap\n    for (int i = 0; i < arr.size(); i++) {\n        h.push_back(arr[i]);\n    }\n    \/\/ Create an empty array to store the sorted elements\n    vector<int> sorted_arr = new vector<int>();\n    \/\/ Create a variable to store the current index of the heap\n    int index = 0;\n    \/\/ While the heap is not empty\n    while (!h.empty()) {\n        \/\/ Pop the top element from the heap\n        int top = h.pop_front();\n        \/\/ Add the top element to the sorted array\n        sorted_arr.push_back(top);\n        \/\/ Increment the index\n        index++;\n        \/\/ If the index is less than the size of the heap\n        if (index < h.size()) {\n            \/\/ Get the element at the current index\n            int current ","language":"cpp"}
{"task_id":"MBCPP\/949","completion":"    vector<int> list;\n    vector<int> temp;\n    vector<int> temp2;\n    int i, j, k, l;\n    int totalDigits;\n    int temp3;\n    int temp4;\n    int temp5;\n    int temp6;\n    int temp7;\n    int temp8;\n    int temp9;\n    int temp10;\n    int temp11;\n    int temp12;\n    int temp13;\n    int temp14;\n    int temp15;\n    int temp16;\n    int temp17;\n    int temp18;\n    int temp19;\n    int temp20;\n    int temp21;\n    int temp22;\n    int temp23;\n    int temp24;\n    int temp25;\n    int temp26;\n    int temp27;\n    int temp28;\n    int temp29;\n    int temp30;\n    int temp31;\n    int temp32;\n    int temp33;\n    int temp34;\n    int temp35;\n    int temp36;\n    int temp37;\n    int temp38","language":"cpp"}
{"task_id":"MBCPP\/956","completion":"    vector<string> result;\n    result.push_back(text);\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/961","completion":"    int sum = 0;\n    int prev = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (i < s.size() - 1 && s[i] == s[i + 1]) {\n            sum += prev * 2;\n            i++;\n        } else {\n            sum += (int)s[i] - 64;\n        }\n        prev = (int)s[i];\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/965","completion":"    string snake = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            snake += '_';\n        } else if (text[i] >= 'A' && text[i] <= 'Z') {\n            snake += text[i];\n        } else if (text[i] >= 'a' && text[i] <= 'z') {\n            snake += text[i].toLowerCase();\n        }\n    }\n    return snake;\n}","language":"cpp"}
{"task_id":"MBCPP\/971","completion":"    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % a == 0 || i % b == 0 || i % c == 0) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/974","completion":"    int n = a.size();\n    int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++) {\n        dp[i][i] = a[i][0];\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (a[i][j] != 0) {\n                dp[i][j] = Math.min(dp[i][j], dp[i][j + 1]) + a[i][j];\n            }\n        }\n    }\n    return dp[n - 1][0];\n}","language":"cpp"}
