{"task_id":"MBCSP\/3","completion":"\n            if (n < 2) \n            {\n                return false;\n            }\n            else \n            {\n                for (int i = 2; i < n; i++) \n                {\n                    if (n % i == 0) \n                    {\n                        return true;\n                    }\n                }\n                return false;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/6","completion":"\n            if (a == b)\n                return false;\n            int xor = a ^ b;\n            int count = 0;\n            while (xor != 0)\n            {\n                count++;\n                xor = xor & (xor - 1);\n            }\n            return count == 1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/8","completion":"\n            List<int> squares = new List<int>();\n            foreach (var num in nums)\n            {\n                squares.Add(num * num);\n            }\n            return squares;\n        }","language":"csharp"}
{"task_id":"MBCSP\/11","completion":"\n            \/\/ Create a Regex object for the given string\n            Regex regex = new Regex(ch, RegexOptions.IgnoreCase);\n            \/\/ Find the first occurrence of the given character in the string\n            Match match = regex.Match(s);\n            \/\/ If the first occurrence is found, remove it from the string\n            if (match.Success)\n                s = Regex.Replace(s, match.Value, \"\");\n            \/\/ Find the last occurrence of the given character in the string\n            match = regex.Match(s);\n            \/\/ If the last occurrence is found, remove it from the string\n            if (match.Success)\n                s = Regex.Replace(s, match.Value, \"\");\n            return s;\n        }","language":"csharp"}
{"task_id":"MBCSP\/12","completion":"\n            \/\/ sort the matrix by row sum\n            M.Sort((a, b) => {\n                return a.Sum(i => i) - b.Sum(i => i);\n            });\n\n            \/\/ swap rows and columns\n            for (int i = 0; i < M.Count; i++)\n            {\n                for (int j = 0; j < M[i].Count; j++)\n                {\n                    int temp = M[i][j];\n                    M[i][j] = M[j][i];\n                    M[j][i] = temp;\n                }\n            }\n\n            return M;\n        }","language":"csharp"}
{"task_id":"MBCSP\/16","completion":"\n            \/\/ Initialize a Regex object\n            Regex regex = new Regex(@\"^[a-z]+_[a-z]+$\");\n\n            \/\/ Check if the text matches the regex\n            if (regex.IsMatch(text))\n            {\n                \/\/ Return the matched text\n                return \"Found a match!\";\n            }\n            else\n            {\n                \/\/ Return the not matched text\n                return \"Not matched!\";\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/17","completion":"\n            return a * 4;\n        }","language":"csharp"}
{"task_id":"MBCSP\/18","completion":"\n            string result = string0;\n            foreach (char c in second_string)\n            {\n                if (string0.Contains(c.ToString()))\n                {\n                    result = result.Replace(c.ToString(), \"\");\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/23","completion":"\n            int max = 0;\n            for (int i = 0; i < list1.Count; i++)\n            {\n                int sum = 0;\n                for (int j = 0; j < list1[i].Count; j++)\n                {\n                    sum += list1[i][j];\n                }\n                if (sum > max)\n                {\n                    max = sum;\n                }\n            }\n            return max;\n        }","language":"csharp"}
{"task_id":"MBCSP\/28","completion":"\n            if (k > n - k)\n                k = n - k;\n\n            int coeff = 1;\n            for (int i = 0; i < k; i++)\n                coeff = coeff * (n - i) \/ (i + 1);\n\n            return coeff;\n        }","language":"csharp"}
{"task_id":"MBCSP\/32","completion":"\n            var primeFactors = new List<int>();\n            var prime = 2;\n            while (n > 1)\n            {\n                while (n % prime == 0)\n                {\n                    primeFactors.Add(prime);\n                    n \/= prime;\n                }\n                prime++;\n            }\n            return primeFactors.Max();\n        }","language":"csharp"}
{"task_id":"MBCSP\/40","completion":"\n            Dictionary<int, int> freq = new Dictionary<int, int>();\n            foreach (var i in nums)\n            {\n                foreach (var j in i)\n                {\n                    if (freq.ContainsKey(j))\n                    {\n                        freq[j] += 1;\n                    }\n                    else\n                    {\n                        freq[j] = 1;\n                    }\n                }\n            }\n            return freq;\n        }","language":"csharp"}
{"task_id":"MBCSP\/41","completion":"\n            return nums.Where(x => x % 2 == 0).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/43","completion":"\n            Regex regex = new Regex(@\"^[a-z]+_[a-z]+$\");\n            if (regex.IsMatch(text))\n                return \"Found a match!\";\n            else\n                return \"Not matched!\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/44","completion":"\n            Regex regex = new Regex(@\"^[a-zA-Z]+\");\n            if (regex.IsMatch(text))\n            {\n                return \"Found a match!\";\n            }\n            else\n            {\n                return \"Not matched!\";\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/45","completion":"\n            return l.FirstOrDefault(l.Last());\n        }","language":"csharp"}
{"task_id":"MBCSP\/46","completion":"\n            return data.Distinct().Count() == data.Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/51","completion":"\n            return (x == y && y == z);\n        }","language":"csharp"}
{"task_id":"MBCSP\/52","completion":"\n            return b * h;\n        }","language":"csharp"}
{"task_id":"MBCSP\/53","completion":"\n            if (str.Length < 2)\n                return \"Not Equal\";\n\n            if (str[0] != str[str.Length - 1])\n                return \"Not Equal\";\n\n            return \"Equal\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/58","completion":"\n            if (x * y < 0)\n            {\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/62","completion":"\n            return xs.OrderBy (x => x).First ();\n        }","language":"csharp"}
{"task_id":"MBCSP\/64","completion":"\n            \/\/ Sort the list of tuples using lambda\n            subjectmarks.Sort((a, b) => ((int)a[1]) - ((int)b[1]));\n            return subjectmarks;\n        }","language":"csharp"}
{"task_id":"MBCSP\/66","completion":"\n            int count = 0;\n            foreach (var item in list)\n            {\n                if (item > 0)\n                {\n                    count++;\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/68","completion":"\n            \/\/ write your code here\n            if (A.Count < 2)\n                return true;\n            var isMonotonic = true;\n            var isAscending = true;\n            var isDescending = true;\n            var last = A[0];\n            for (var i = 1; i < A.Count; i++)\n            {\n                if (A[i] < last)\n                {\n                    isAscending = false;\n                }\n                if (A[i] > last)\n                {\n                    isDescending = false;\n                }\n                if (isAscending == false && isDescending == false)\n                {\n                    isMonotonic = false;\n                }\n                last = A[i];\n            }\n            return isMonotonic;\n        }","language":"csharp"}
{"task_id":"MBCSP\/70","completion":"\n            \/\/ Your code goes here\n            var result = \"\";\n            if (Input.Count == 0)\n                return result;\n            var first = Input[0];\n            var firstLength = first.Count;\n            for (int i = 1; i < Input.Count; i++)\n            {\n                var current = Input[i];\n                if (current.Count != firstLength)\n                    return result + \"All tuples do not have same length\";\n            }\n            return result + \"All tuples have same length\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/71","completion":"\n            int gap = nums.Count () - 1;\n            while (gap > 0) \n            {\n                int i = 0;\n                while (i + gap < nums.Count ()) \n                {\n                    if (nums[i] > nums[i + gap]) \n                    {\n                        int temp = nums[i];\n                        nums[i] = nums[i + gap];\n                        nums[i + gap] = temp;\n                    }\n                    i++;\n                }\n                gap = (gap - 1) \/ 2;\n            }\n            return nums;\n        }","language":"csharp"}
{"task_id":"MBCSP\/79","completion":"\n            return (s.Length % 2 == 1);\n        }","language":"csharp"}
{"task_id":"MBCSP\/82","completion":"\n            return 4.0 \/ 3.0 * 3.141592653589793 * r * r * r;\n        }","language":"csharp"}
{"task_id":"MBCSP\/85","completion":"\n            double area = 4 * 3.14159265358979323846 * r * r;\n            return area;\n        }","language":"csharp"}
{"task_id":"MBCSP\/88","completion":"\n            Dictionary<int, int> freq = new Dictionary<int, int>();\n            for (int i = 0; i < list1.Count; i++)\n            {\n                if (freq.ContainsKey(list1[i]))\n                {\n                    freq[list1[i]]++;\n                }\n                else\n                {\n                    freq[list1[i]] = 1;\n                }\n            }\n            return freq;\n        }","language":"csharp"}
{"task_id":"MBCSP\/90","completion":"\n            \/\/ write your code here\n            return list1.Select(x => x.Length).Max();\n        }","language":"csharp"}
{"task_id":"MBCSP\/91","completion":"\n            \/\/ write your code here\n            return str1.Any(x => x.Contains(sub_str));\n        }","language":"csharp"}
{"task_id":"MBCSP\/96","completion":"\n            if (n < 1)\n                throw new ArgumentException (\"Argument is less than 1.\");\n\n            int count = 0;\n            for (int i = 1; i <= n; i++)\n                if (n % i == 0)\n                    count++;\n\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/97","completion":"\n            Dictionary<int, int> freq = new Dictionary<int, int>();\n            foreach (List<int> list in list1)\n            {\n                foreach (int i in list)\n                {\n                    if (freq.ContainsKey(i))\n                    {\n                        freq[i] += 1;\n                    }\n                    else\n                    {\n                        freq[i] = 1;\n                    }\n                }\n            }\n            return freq;\n        }","language":"csharp"}
{"task_id":"MBCSP\/98","completion":"\n            double result = 1.0;\n            foreach (var number in numbers)\n            {\n                result *= number;\n            }\n            return result \/ numbers.Count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/99","completion":"\n            string binary = \"\";\n            while (n > 0)\n            {\n                binary = (n % 2) + binary;\n                n = n \/ 2;\n            }\n            return binary;\n        }","language":"csharp"}
{"task_id":"MBCSP\/101","completion":"\n            \/\/ write your code here\n            return arr[k-1];\n        }","language":"csharp"}
{"task_id":"MBCSP\/104","completion":"\n            \/\/ write your code here\n            List<List<string>> output_list = new List<List<string>>();\n            input_list.ForEach(x => {\n                x.Sort((a, b) => a.CompareTo(b));\n                output_list.Add(x);\n            });\n            return output_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/105","completion":"\n            return lst.Count(x => x);\n        }","language":"csharp"}
{"task_id":"MBCSP\/106","completion":"\n            \/\/ Add the given list to the given tuple.\n            test_tup.AddRange(test_list);\n\n            \/\/ Return the tuple.\n            return test_tup;\n        }","language":"csharp"}
{"task_id":"MBCSP\/112","completion":"\n            return diameter * 2 + height * 2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/113","completion":"\n            \/\/ Create a Regex object\n            Regex regex = new Regex (\"^[0-9]+$\");\n\n            \/\/ Check if the string matches the Regex\n            return regex.IsMatch (text);\n        }","language":"csharp"}
{"task_id":"MBCSP\/118","completion":"\n            List<string> list = new List<string>();\n            string[] str = string0.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n            foreach (string s in str)\n            {\n                list.Add(s);\n            }\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/127","completion":"\n            return x * y;\n        }","language":"csharp"}
{"task_id":"MBCSP\/128","completion":"\n            \/\/ split the string into words\n            var words = str.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\n            \/\/ create a list to hold the result\n            var result = new List<string>();\n\n            \/\/ loop through the words\n            foreach (var word in words)\n            {\n                \/\/ if the word is longer than n characters, add it to the result\n                if (word.Length > n)\n                    result.Add(word);\n            }\n\n            \/\/ return the result\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/132","completion":"\n            string result = \"\";\n            foreach (var item in tup1)\n            {\n                result += item;\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/133","completion":"\n            return nums.Select(x => x < 0 ? x : 0).Sum();\n        }","language":"csharp"}
{"task_id":"MBCSP\/138","completion":"\n            if (n == 0)\n                return true;\n\n            int power = 0;\n            while (n > 0)\n            {\n                power++;\n                n = n \/ 2;\n            }\n\n            return (power & 1) == 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/141","completion":"\n            \/\/ write your code here\n            int n = nums.Count;\n            int i = 0;\n            while (i < n) {\n                if (i == 0 || nums[i] >= nums[i - 1]) {\n                    i++;\n                }\n                else {\n                    int j = i;\n                    while (j > 0 && nums[j] < nums[j - 1]) {\n                        int temp = nums[j];\n                        nums[j] = nums[j - 1];\n                        nums[j - 1] = temp;\n                        j--;\n                    }\n                }\n            }\n            return nums;\n        }","language":"csharp"}
{"task_id":"MBCSP\/145","completion":"\n            if (n == 0)\n                return 0;\n            else\n            {\n                int maxDiff = 0;\n                for (int i = 0; i < n - 1; i++)\n                {\n                    for (int j = i + 1; j < n; j++)\n                    {\n                        if (Math.Abs(arr[i] - arr[j]) > maxDiff)\n                            maxDiff = Math.Abs(arr[i] - arr[j]);\n                    }\n                }\n                return maxDiff;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/151","completion":"\n            \/\/ write your code here\n            if (x < 2 || y < 2)\n                return false;\n            if (x == 2 || y == 2)\n                return true;\n            if (x % 2 == 0 || y % 2 == 0)\n                return false;\n            for (int i = 3; i * i <= x; i += 2)\n                if (x % i == 0 || y % i == 0)\n                    return false;\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/161","completion":"\n            \/\/ write your code here\n            List<int> result = new List<int>();\n            foreach (int item in list1)\n            {\n                if (!list2.Contains(item))\n                {\n                    result.Add(item);\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/162","completion":"\n            if (n < 0)\n                return 0;\n            else\n                return n + SumSeries(n-2);\n        }","language":"csharp"}
{"task_id":"MBCSP\/167","completion":"\n            if (n == 0)\n                return 1;\n            else\n                return NextPowerOf2 (n \/ 2) * 2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/168","completion":"\n            int count = 0;\n            foreach (var item in a)\n            {\n                if (item == x)\n                {\n                    count++;\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/171","completion":"\n            \/\/ write your code here\n            return a * 5;\n        }","language":"csharp"}
{"task_id":"MBCSP\/172","completion":"\n            \/\/ Create a regular expression object for the string \n            Regex rx = new Regex(@\"std\");\n\n            \/\/ Find the number of matches in the string\n            int count = (int)rx.Matches(s).Count;\n\n            \/\/ Return the number of matches\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/174","completion":"\n            Dictionary<string, List<int>> d = new Dictionary<string, List<int>>();\n            foreach (var item in l)\n            {\n                var key = (string)item[0];\n                var value = (int)item[1];\n                if (d.ContainsKey(key))\n                {\n                    d[key].Add(value);\n                }\n                else\n                {\n                    List<int> l1 = new List<int>();\n                    l1.Add(value);\n                    d[key] = l1;\n                }\n            }\n            return d;\n        }","language":"csharp"}
{"task_id":"MBCSP\/175","completion":"\n            \/\/ Initialize a stack to hold the opening parentheses.\n            Stack<char> stack = new Stack<char>();\n\n            \/\/ Iterate through the string.\n            foreach (char c in str1) \n            {\n                \/\/ If the character is an opening parenthesis, push it onto the stack.\n                if (c == '(') \n                    stack.Push(c);\n\n                \/\/ If the character is a closing parenthesis, pop the topmost opening parenthesis off the stack.\n                else if (c == ')') \n                {\n                    if (stack.Count == 0) \n                        return false;\n\n                    stack.Pop();\n                }\n            }\n\n            \/\/ If the stack is empty, then the string is valid.\n            return stack.Count == 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/176","completion":"\n            \/\/ write your code here\n            return a + b + c;\n        }","language":"csharp"}
{"task_id":"MBCSP\/178","completion":"\n            string result = \"\";\n            foreach (string pattern in patterns)\n            {\n                if (Regex.IsMatch(text, pattern))\n                {\n                    result += \"Matched!\";\n                }\n                else\n                {\n                    result += \"Not Matched!\";\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/181","completion":"\n            \/\/ write your code here\n            string commonPrefix = \"\";\n            int i = 0;\n            int j = 0;\n            while (i < str1.Length && j < str2.Length)\n            {\n                if (str1[i] == str2[j])\n                {\n                    commonPrefix += str1[i];\n                    i++;\n                    j++;\n                }\n                else if (str1[i] < str2[j])\n                {\n                    i++;\n                }\n                else\n                {\n                    j++;\n                }\n            }\n            return commonPrefix;\n        }","language":"csharp"}
{"task_id":"MBCSP\/184","completion":"\n            return list.All(x => x > num);\n        }","language":"csharp"}
{"task_id":"MBCSP\/186","completion":"\n            string result = \"Not Matched!\";\n            if (patterns != null)\n            {\n                foreach (string pattern in patterns)\n                {\n                    if (Regex.IsMatch(text, pattern))\n                    {\n                        result = \"Matched!\";\n                        break;\n                    }\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/188","completion":"\n            \/\/ write your code here\n            return n % 4 == 0 && (n \/ 4) % 4 == 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/191","completion":"\n            bool isThirtyDays = false;\n            if (monthname3.Contains(\"April\") || monthname3.Contains(\"June\") || monthname3.Contains(\"September\") || monthname3.Contains(\"November\") || monthname3.Contains(\"December\"))\n            {\n                isThirtyDays = true;\n            }\n            return isThirtyDays;\n        }","language":"csharp"}
{"task_id":"MBCSP\/192","completion":"\n            Regex regex = new Regex (\"[a-zA-Z]+[0-9]+\");\n            return regex.IsMatch(str);\n        }","language":"csharp"}
{"task_id":"MBCSP\/195","completion":"\n            \/\/ write your code here\n            int low = 0;\n            int high = n - 1;\n            while (low <= high) {\n                int mid = (low + high) \/ 2;\n                if (arr[mid] == x) {\n                    return mid;\n                } else if (arr[mid] < x) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n            return -1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/199","completion":"\n            if (n < 1)\n                return 0;\n            if (n == 1)\n                return 1;\n            return 2 * HighestPowerOf2 (n \/ 2);\n        }","language":"csharp"}
{"task_id":"MBCSP\/201","completion":"\n            return lst.Count(x => x == lst[0]) == lst.Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/203","completion":"\n            \/\/ write your code here\n            int count = 0;\n            while (n1 != 0 || n2 != 0)\n            {\n                if ((n1 & 1) != (n2 & 1))\n                {\n                    count++;\n                }\n                n1 >>= 1;\n                n2 >>= 1;\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/204","completion":"\n            \/\/ Create a Regex object to find the character.\n            Regex r = new Regex(c);\n            \/\/ Find the number of occurrences of the character in the string.\n            return (int)r.Matches(s).Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/208","completion":"\n            Regex regex = new Regex(@\"^[0-9]+(\\.[0-9]{1,2})?$\");\n            return regex.IsMatch(num);\n        }","language":"csharp"}
{"task_id":"MBCSP\/209","completion":"\n            \/\/ write your code here\n            return heap;\n        }","language":"csharp"}
{"task_id":"MBCSP\/210","completion":"\n            Regex regex = new Regex(@\"^[a-zA-Z0-9]*$\");\n            return regex.IsMatch(string0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/211","completion":"\n            int count = 0;\n            for (int i = 0; i < 32; i++)\n            {\n                if ((n & (1 << i)) != 0)\n                    count++;\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/212","completion":"\n            int sum = 0;\n            for (int i = 1; i <= n; i++)\n            {\n                sum += (i * i * i * i);\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/214","completion":"\n            return radian * (180 \/ Math.PI);\n        }","language":"csharp"}
{"task_id":"MBCSP\/220","completion":"\n            \/\/ Create a regular expression to match all special characters.\n            Regex regex = new Regex(@\"[\\s,\\.]\");\n\n            \/\/ Replace all special characters with a colon.\n            text = regex.Replace(text, @\":\", n);\n\n            return text;\n        }","language":"csharp"}
{"task_id":"MBCSP\/221","completion":"\n            return (int) nums.FirstOrDefault (x => x % 2 == 0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/224","completion":"\n            \/\/ write your code here\n            int count = 0;\n            while (n > 0)\n            {\n                if ((n & 1) == 1)\n                {\n                    count++;\n                }\n                n >>= 1;\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/225","completion":"\n            if (low >= high)\n                return arr[low];\n\n            int mid = (low + high) \/ 2;\n            int left = FindMin(arr, low, mid);\n            int right = FindMin(arr, mid + 1, high);\n\n            return Math.Min(left, right);\n        }","language":"csharp"}
{"task_id":"MBCSP\/227","completion":"\n            return Math.Min(Math.Min(a, b), c);\n        }","language":"csharp"}
{"task_id":"MBCSP\/228","completion":"\n            \/\/ write your code here\n            return (n & (1 << l - 1)) == 0 && (n & (1 << r - 1)) == 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/229","completion":"\n            \/\/ write your code here\n            return arr;\n        }","language":"csharp"}
{"task_id":"MBCSP\/234","completion":"\n            return (l * l * l);\n        }","language":"csharp"}
{"task_id":"MBCSP\/242","completion":"\n            \/\/ write your code here\n            return str1.Length;\n        }","language":"csharp"}
{"task_id":"MBCSP\/244","completion":"\n            \/\/ write your code here\n            int i = 1;\n            int square = 0;\n            while (square <= N)\n            {\n                square = i * i;\n                i++;\n            }\n            return square;\n        }","language":"csharp"}
{"task_id":"MBCSP\/248","completion":"\n            double harmonicSum = 0;\n            for (int i = 1; i <= n; i++)\n            {\n                harmonicSum += 1.0 \/ i;\n            }\n            return harmonicSum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/249","completion":"\n            return array_nums1.Where(x => array_nums2.Contains(x)).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/250","completion":"\n            int count = 0;\n            foreach (var item in tup)\n            {\n                if (item == x)\n                {\n                    count++;\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/251","completion":"\n            List<string> result = new List<string>();\n            foreach (var item in list)\n            {\n                result.Add(element);\n                result.Add(item);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/253","completion":"\n            int count = 0;\n            foreach (var item in list1)\n            {\n                if (item is int)\n                {\n                    count++;\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/257","completion":"\n            return new List<int> { b, a };\n        }","language":"csharp"}
{"task_id":"MBCSP\/258","completion":"\n            \/\/ write your code here\n            return array_nums.Where(x => x % 2 != 0).Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/263","completion":"\n            Dictionary<string, int> merged = new Dictionary<string, int>();\n            foreach (KeyValuePair<string, int> pair in d1)\n            {\n                merged[pair.Key] = pair.Value;\n            }\n            foreach (KeyValuePair<string, int> pair in d2)\n            {\n                merged[pair.Key] = pair.Value;\n            }\n            return merged;\n        }","language":"csharp"}
{"task_id":"MBCSP\/269","completion":"\n            return (int)k.ToCharArray()[0];\n        }","language":"csharp"}
{"task_id":"MBCSP\/277","completion":"\n            \/\/ Create a new dictionary to hold the filtered values.\n            Dictionary<string, int> filtered = new Dictionary<string, int>();\n\n            \/\/ Loop through the dictionary.\n            foreach (KeyValuePair<string, int> pair in dict)\n            {\n                \/\/ If the value is greater than or equal to the value to be filtered, add the key and value to the new dictionary.\n                if (pair.Value >= n)\n                {\n                    filtered.Add(pair.Key, pair.Value);\n                }\n            }\n\n            \/\/ Return the new dictionary.\n            return filtered;\n        }","language":"csharp"}
{"task_id":"MBCSP\/281","completion":"\n            return test_list.Distinct().Count() == test_list.Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/284","completion":"\n            return list.All(x => x == element);\n        }","language":"csharp"}
{"task_id":"MBCSP\/285","completion":"\n            Regex regex = new Regex(@\"a(b{2,3})\");\n            if (regex.IsMatch(text))\n            {\n                return (\"Found a match!\");\n            }\n            else\n            {\n                return (\"Not matched!\");\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/292","completion":"\n            return (n \/ m);\n        }","language":"csharp"}
{"task_id":"MBCSP\/296","completion":"\n            \/\/ write your code here\n            int count = 0;\n            int[] temp = new int[n];\n            for (int i = 0; i < n; i++) {\n                temp[i] = arr[i];\n            }\n            for (int i = 0; i < n; i++) {\n                for (int j = i + 1; j < n; j++) {\n                    if (temp[i] > temp[j]) {\n                        count++;\n                    }\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/309","completion":"\n            return a > b ? a : b;\n        }","language":"csharp"}
{"task_id":"MBCSP\/320","completion":"\n            var sum = 0;\n            var sumOfSquares = 0;\n            var squaredSum = 0;\n            for (int i = 1; i <= n; i++)\n            {\n                sum += i;\n                sumOfSquares += i * i;\n            }\n            squaredSum = sum * sum;\n            return squaredSum - sumOfSquares;\n        }","language":"csharp"}
{"task_id":"MBCSP\/323","completion":"\n            \/\/ write your code here\n            return arr;\n        }","language":"csharp"}
{"task_id":"MBCSP\/327","completion":"\n            \/\/ write your code here\n            return (x == y || y == z || z == x);\n        }","language":"csharp"}
{"task_id":"MBCSP\/331","completion":"\n            \/\/ write your code here\n            int count = 0;\n            while (n > 0)\n            {\n                if ((n & 1) == 0)\n                {\n                    count++;\n                }\n                n >>= 1;\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/333","completion":"\n            \/\/ sort the list according to the second element in sublist\n            sub_li.Sort((a, b) => (int)a[1] - (int)b[1]);\n            return sub_li;\n        }","language":"csharp"}
{"task_id":"MBCSP\/334","completion":"\n            \/\/ write your code here\n            if (a + b > c && a + c > b && b + c > a)\n                return true;\n            else\n                return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/341","completion":"\n            var result = new List<int>();\n            foreach (var item in s)\n            {\n                result.Add(item);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/349","completion":"\n            string binaryString = \"\";\n            for (int i = 0; i < string0.Length; i++) \n            {\n                if (string0[i] == '0' || string0[i] == '1') \n                {\n                    binaryString += string0[i];\n                }\n            }\n            if (binaryString.Length == string0.Length) \n            {\n                return \"Yes\";\n            }\n            else \n            {\n                return \"No\";\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/352","completion":"\n            var charSet = new HashSet<char>();\n            foreach (var ch in str)\n            {\n                if (charSet.Contains(ch))\n                    return false;\n                charSet.Add(ch);\n            }\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/357","completion":"\n            return test_list.Max(x => x.Max(y => y));\n        }","language":"csharp"}
{"task_id":"MBCSP\/363","completion":"\n            List<List<int>> result = new List<List<int>>();\n            for (int i = 0; i < test_list.Count; i++)\n            {\n                List<int> temp = new List<int>();\n                for (int j = 0; j < test_list[i].Count; j++)\n                {\n                    temp.Add(test_list[i][j] + K);\n                }\n                result.Add(temp);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/365","completion":"\n            \/\/ write your code here\n            int count = 0;\n            while (n > 0)\n            {\n                count++;\n                n = n \/ 10;\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/368","completion":"\n            List<List<int>> result = new List<List<int>>();\n            for (int i = 0; i < N; i++) {\n                result.Add(test_tup);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/371","completion":"\n            \/\/ write your code here\n            int left = left_element;\n            int right = right_element;\n            int mid = (left + right) \/ 2;\n            while (left <= right) {\n                if (A[mid] == mid) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n                mid = (left + right) \/ 2;\n            }\n            return left;\n        }","language":"csharp"}
{"task_id":"MBCSP\/373","completion":"\n            return (l * w * h);\n        }","language":"csharp"}
{"task_id":"MBCSP\/377","completion":"\n            \/\/ Create a regular expression that will match all occurrences of the character c in the string s.\n            Regex r = new Regex(c, RegexOptions.IgnoreCase);\n\n            \/\/ Create a new string that will be returned by the function.\n            string result = r.Replace(s, \"\");\n\n            \/\/ Return the result.\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/379","completion":"\n            return 2 * (l * w + w * h + h * l);\n        }","language":"csharp"}
{"task_id":"MBCSP\/387","completion":"\n            var regex = new Regex(@\"^[0-9a-fA-F]+$\");\n            if (regex.IsMatch(N))\n            {\n                var n = Convert.ToInt32(N, 16);\n                if (n % 2 == 0)\n                    return \"Even\";\n                else\n                    return \"Odd\";\n            }\n            else\n                return \"Invalid\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/388","completion":"\n            if (n <= 0)\n                return 0;\n            int power = 1;\n            while (n > 1)\n            {\n                power *= 2;\n                n \/= 2;\n            }\n            return power;\n        }","language":"csharp"}
{"task_id":"MBCSP\/389","completion":"\n            int[] lucas = new int[n + 1];\n            lucas[0] = 2;\n            lucas[1] = 1;\n            for (int i = 2; i <= n; i++)\n            {\n                lucas[i] = lucas[i - 1] + lucas[i - 2];\n            }\n            return lucas[n];\n        }","language":"csharp"}
{"task_id":"MBCSP\/391","completion":"\n            List<Dictionary<string, Dictionary<string, int>>> result = new List<Dictionary<string, Dictionary<string, int>>>();\n            foreach (var item in l1)\n            {\n                Dictionary<string, Dictionary<string, int>> temp = new Dictionary<string, Dictionary<string, int>>();\n                Dictionary<string, int> temp1 = new Dictionary<string, int>();\n                temp1.Add(l2[l1.IndexOf(item)], l3[l1.IndexOf(item)]);\n                temp.Add(item, temp1);\n                result.Add(temp);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/392","completion":"\n            if (n < 1)\n                return 0;\n            else if (n == 1)\n                return 1;\n            else\n            {\n                return Math.Max(GetMaxSum(n\/2) + GetMaxSum(n\/3) + GetMaxSum(n\/4) + GetMaxSum(n\/5), n);\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/394","completion":"\n            \/\/ write your code here\n            return test_tup.Distinct().Count() == test_tup.Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/401","completion":"\n            \/\/Write your code here\n            List<List<int>> result = new List<List<int>>();\n            for (int i = 0; i < test_tup1.Count; i++) {\n                List<int> temp = new List<int>();\n                for (int j = 0; j < test_tup1[i].Count; j++) {\n                    temp.Add(test_tup1[i][j] + test_tup2[i][j]);\n                }\n                result.Add(temp);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/403","completion":"\n            Regex regex = new Regex(@\"((https?|ftp|file):\/\/[-a-zA-Z0-9+&@#\/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#\/%=~_|])\");\n            return regex.IsMatch(str);\n        }","language":"csharp"}
{"task_id":"MBCSP\/404","completion":"\n            return Math.Min(a, b);\n        }","language":"csharp"}
{"task_id":"MBCSP\/405","completion":"\n            return tuplex.Contains(tuple1);\n        }","language":"csharp"}
{"task_id":"MBCSP\/406","completion":"\n            \/\/ write your code here\n            if (x % 2 == 0)\n                return \"Even Parity\";\n            else\n                return \"Odd Parity\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/412","completion":"\n            \/\/Write your code here\n            return l;\n        }","language":"csharp"}
{"task_id":"MBCSP\/413","completion":"\n            var list2 = new List<object>();\n            foreach (var item in list1)\n            {\n                list2.Add(item[n]);\n            }\n            return list2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/421","completion":"\n            string result = \"\";\n            foreach (object item in test_tup)\n            {\n                result += item + \"-\";\n            }\n            result = result.Remove(result.Length - 1, 1);\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/422","completion":"\n            double sum = 0;\n            for (int i = 1; i <= n; i++)\n            {\n                sum += i * i * i;\n            }\n            return sum \/ n;\n        }","language":"csharp"}
{"task_id":"MBCSP\/426","completion":"\n            return nums.Where(x => x % 2 == 1).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/428","completion":"\n            int n = my_list.Count;\n            int gap = n \/ 2;\n\n            while (gap > 0) \n            {\n                for (int i = gap; i < n; i++) \n                {\n                    int j = i;\n                    int temp = my_list[i];\n\n                    while (j >= gap && my_list[j - gap] > temp) \n                    {\n                        my_list[j] = my_list[j - gap];\n                        j = j - gap;\n                    }\n\n                    my_list[j] = temp;\n                }\n\n                gap = gap \/ 2;\n            }\n\n            return my_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/432","completion":"\n            \/\/ write your code here\n            double result = (base1 + base2) \/ 2.0;\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/434","completion":"\n            Regex regex = new Regex(@\"a(b+)\");\n            MatchCollection matches = regex.Matches(text);\n\n            if (matches.Count == 0)\n                return \"Not matched!\";\n            else\n                return \"Found a match!\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/435","completion":"\n            \/\/ write your code here\n            return n % 10;\n        }","language":"csharp"}
{"task_id":"MBCSP\/441","completion":"\n            return 6 * l * l;\n        }","language":"csharp"}
{"task_id":"MBCSP\/445","completion":"\n            \/\/Write your code here\n            List<List<int>> result = new List<List<int>>();\n            for (int i = 0; i < test_tup1.Count; i++) {\n                List<int> temp = new List<int>();\n                for (int j = 0; j < test_tup1[i].Count; j++) {\n                    temp.Add(test_tup1[i][j] * test_tup2[i][j]);\n                }\n                result.Add(temp);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/447","completion":"\n            \/\/ write your code here\n            return nums.Select(x => x * x * x).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/451","completion":"\n            Regex regex = new Regex(@\"[\\s]+\");\n            return regex.Replace(text1, \"\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/454","completion":"\n            \/\/ Create a Regex object that will match the word 'z'\n            Regex regex = new Regex(@\"z\");\n\n            \/\/ Create a MatchCollection object\n            MatchCollection matches = regex.Matches(text);\n\n            \/\/ If there are matches\n            if (matches.Count > 0)\n            {\n                \/\/ Return the match\n                return \"Found a match!\";\n            }\n            \/\/ If there are no matches\n            else\n            {\n                \/\/ Return the no match\n                return \"Not matched!\";\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/455","completion":"\n            bool isThirtyOne = false;\n            if (monthnum2 == 1 || monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12)\n            {\n                isThirtyOne = true;\n            }\n            else if (monthnum2 == 4 || monthnum2 == 6 || monthnum2 == 9 || monthnum2 == 11)\n            {\n                isThirtyOne = false;\n            }\n            else\n            {\n                isThirtyOne = false;\n            }\n            return isThirtyOne;\n        }","language":"csharp"}
{"task_id":"MBCSP\/458","completion":"\n            return l * b;\n        }","language":"csharp"}
{"task_id":"MBCSP\/459","completion":"\n            \/\/ Create a Regex object for uppercase characters.\n            Regex regex = new Regex (\"[A-Z]\");\n            \/\/ Replace all uppercase characters with an empty string.\n            str1 = regex.Replace(str1, \"\");\n            return str1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/460","completion":"\n            var result = new List<int>();\n            foreach (var subList in lst)\n            {\n                result.Add(subList[0]);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/465","completion":"\n            Dictionary<string, string> dict2 = new Dictionary<string, string>();\n            foreach (KeyValuePair<string, object> pair in dict1)\n            {\n                if (pair.Value != null)\n                {\n                    dict2.Add(pair.Key, pair.Value.ToString());\n                }\n            }\n            return dict2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/466","completion":"\n            \/\/ Your code goes here\n            if (low == high)\n            {\n                return low;\n            }\n            int mid = (low + high) \/ 2;\n            if (arr[mid] > arr[mid + 1])\n            {\n                return FindPeak(arr, low, mid, n);\n            }\n            else\n            {\n                return FindPeak(arr, mid + 1, high, n);\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/470","completion":"\n            \/\/Write your code here\n            List<int> result = new List<int>();\n            int i = 0;\n            int j = 0;\n            while (i < test_tup.Count - 1)\n            {\n                result.Add(test_tup[i] + test_tup[i + 1]);\n                i++;\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/472","completion":"\n            if (l.Count () < 2)\n                return true;\n            var prev = l[0];\n            for (int i = 1; i < l.Count (); i++)\n            {\n                if (l[i] != prev + 1)\n                    return false;\n                prev = l[i];\n            }\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/474","completion":"\n            \/\/ Create a Regex object\n            Regex regex = new Regex(ch, RegexOptions.IgnoreCase);\n            \/\/ Replace the characters in the string\n            return regex.Replace(str1, newch);\n        }","language":"csharp"}
{"task_id":"MBCSP\/476","completion":"\n            var min = nums.Min();\n            var max = nums.Max();\n            return (min + max);\n        }","language":"csharp"}
{"task_id":"MBCSP\/477","completion":"\n            return string0.ToLower();\n        }","language":"csharp"}
{"task_id":"MBCSP\/478","completion":"\n            \/\/ Create a Regex object for lowercase characters.\n            Regex regex = new Regex (\"[a-z]\");\n\n            \/\/ Replace all lowercase characters with an empty string.\n            str1 = regex.Replace(str1, \"\");\n\n            return str1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/482","completion":"\n            Regex regex = new Regex(@\"([A-Z][a-z]*)\");\n            MatchCollection matches = regex.Matches(text);\n            if (matches.Count == 0)\n                return \"No\";\n            else\n                return \"Yes\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/487","completion":"\n            \/\/ write your code here\n            return tup;\n        }","language":"csharp"}
{"task_id":"MBCSP\/489","completion":"\n            int max = 0;\n            int count = 0;\n            foreach (var i in arr)\n            {\n                if (i > max)\n                {\n                    max = i;\n                    count = 1;\n                }\n                else if (i == max)\n                {\n                    count++;\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/492","completion":"\n            int low = 0;\n            int high = item_list.Count - 1;\n            while (low <= high)\n            {\n                int mid = (low + high) \/ 2;\n                if (item_list[mid] == item)\n                    return true;\n                else if (item_list[mid] > item)\n                    high = mid - 1;\n                else\n                    low = mid + 1;\n            }\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/495","completion":"\n            \/\/ Create a Regex object for lowercase characters\n            Regex regex = new Regex (\"[a-z]\");\n\n            \/\/ Replace all lowercase characters with empty string\n            str1 = regex.Replace(str1, \"\");\n\n            return str1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/498","completion":"\n            \/\/ write your code here\n            if (y == 0)\n                return x;\n            else\n                return Gcd(y, x % y);\n        }","language":"csharp"}
{"task_id":"MBCSP\/499","completion":"\n            return (2 * r);\n        }","language":"csharp"}
{"task_id":"MBCSP\/502","completion":"\n            return n % m;\n        }","language":"csharp"}
{"task_id":"MBCSP\/504","completion":"\n            int sum = 0;\n            for (int i = 1; i <= n; i++)\n            {\n                sum += i * i * i;\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/505","completion":"\n            \/\/ write your code here\n            List<int> result = new List<int>();\n            int i = 0;\n            while (i < A.Count) {\n                if (A[i] != 0) {\n                    result.Add(A[i]);\n                }\n                i++;\n            }\n            i = 0;\n            while (i < A.Count) {\n                if (A[i] == 0) {\n                    result.Add(A[i]);\n                }\n                i++;\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/506","completion":"\n            if (n == 0 || k == 0)\n                return 1;\n            if (n < 0 || k < 0)\n                return 0;\n            if (k > n - k)\n                k = n - k;\n            int result = 1;\n            for (int i = 0; i < k; i++)\n                result *= (n - i);\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/507","completion":"\n            \/\/ write your code here\n            List<string> list2 = new List<string>();\n            foreach (var item in list1)\n            {\n                if (!removewords.Contains(item))\n                {\n                    list2.Add(item);\n                }\n            }\n            return list2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/513","completion":"\n            List<object> result = new List<object>();\n            foreach (var item in test_tup)\n            {\n                result.Add(item);\n                result.Add(K);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/514","completion":"\n            int sum = 0;\n            foreach (var item in test_tup)\n            {\n                sum += item;\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/516","completion":"\n            \/\/ write your code here\n            return nums;\n        }","language":"csharp"}
{"task_id":"MBCSP\/517","completion":"\n            return list1.OrderByDescending(x => x).First();\n        }","language":"csharp"}
{"task_id":"MBCSP\/521","completion":"\n            return (x + y > z) && (x + z > y) && (y + z > x);\n        }","language":"csharp"}
{"task_id":"MBCSP\/532","completion":"\n            \/\/ Create a list of characters from the first string\n            List<char> list1 = new List<char>();\n            foreach (char c in str1)\n                list1.Add(c);\n\n            \/\/ Create a list of characters from the second string\n            List<char> list2 = new List<char>();\n            foreach (char c in str2)\n                list2.Add(c);\n\n            \/\/ Check if the two lists are the same size\n            if (list1.Count != list2.Count)\n                return false;\n\n            \/\/ Check if the two lists are the same\n            foreach (char c in list1)\n                if (!list2.Contains(c))\n                    return false;\n\n            \/\/ If we get here, the two lists are permutations of each other\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/534","completion":"\n            \/\/ Create a Regex object for pattern\n            Regex regex = new Regex(pattern);\n            \/\/ Create a MatchCollection object for text\n            MatchCollection matches = regex.Matches(text);\n            \/\/ Create a list to store the results\n            List<int> results = new List<int>();\n            \/\/ Loop through the matches\n            foreach (Match m in matches)\n            {\n                \/\/ Store the start and end positions of the match\n                results.Add(m.Index);\n                results.Add(m.Index + m.Length);\n            }\n            \/\/ Return the results\n            return results;\n        }","language":"csharp"}
{"task_id":"MBCSP\/541","completion":"\n            \/\/ write your code here\n            return (n % 2 == 0) && (n % 3 == 0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/542","completion":"\n            Regex regex = new Regex(@\" |,|\\.\");\n            return regex.Replace(text, @\":\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/548","completion":"\n            \/\/ write your code here\n            if (arr.Count == 0) return 0;\n            int[] dp = new int[arr.Count];\n            int max = 0;\n            for (int i = 0; i < arr.Count; i++) {\n                dp[i] = 1;\n                for (int j = 0; j < i; j++) {\n                    if (arr[i] > arr[j]) {\n                        dp[i] = Math.Max(dp[i], dp[j] + 1);\n                    }\n                }\n                max = Math.Max(max, dp[i]);\n            }\n            return max;\n        }","language":"csharp"}
{"task_id":"MBCSP\/550","completion":"\n            if (low >= high)\n                return arr[low];\n\n            int mid = (low + high) \/ 2;\n            int leftMax = FindMax(arr, low, mid);\n            int rightMax = FindMax(arr, mid + 1, high);\n\n            return Math.Max(leftMax, rightMax);\n        }","language":"csharp"}
{"task_id":"MBCSP\/552","completion":"\n            if (seq_nums.Count == 0)\n                return \"Empty Sequence\";\n            if (seq_nums.Count == 1)\n                return \"Linear Sequence\";\n            if (seq_nums.Count == 2)\n                return \"Non Linear Sequence\";\n\n            var seq_len = seq_nums.Count;\n            var seq_min = seq_nums.Min();\n            var seq_max = seq_nums.Max();\n\n            var is_linear = true;\n            for (int i = 0; i < seq_len - 1; i++)\n            {\n                if (seq_nums[i] > seq_nums[i + 1])\n                {\n                    is_linear = false;\n                    break;\n                }\n            }\n\n            if (is_linear)\n                return \"Linear Sequence\";\n            else\n                return \"Non Linear Sequence\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/555","completion":"\n            int sum = 0;\n            for (int i = 1; i <= n; i++)\n            {\n                sum += i * i * i;\n            }\n            return sum - (n * (n + 1) \/ 2);\n        }","language":"csharp"}
{"task_id":"MBCSP\/557","completion":"\n            string string1 = string0;\n            foreach (char c in string1)\n            {\n                if (c >= 'a' && c <= 'z')\n                {\n                    string1 = string1.Replace(c, (char)(c - 32));\n                }\n                else if (c >= 'A' && c <= 'Z')\n                {\n                    string1 = string1.Replace(c, (char)(c + 32));\n                }\n            }\n            return string1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/559","completion":"\n            \/\/ write your code here\n            int max = 0;\n            int sum = 0;\n            for (int i = 0; i < size; i++) \n            {\n                sum += a[i];\n                if (sum > max) \n                {\n                    max = sum;\n                }\n                if (sum < 0) \n                {\n                    sum = 0;\n                }\n            }\n            return max;\n        }","language":"csharp"}
{"task_id":"MBCSP\/562","completion":"\n            \/\/ write your code here\n            int max = 0;\n            for (int i = 0; i < lst.Count; i++)\n            {\n                int temp = lst[i].Count;\n                if (temp > max)\n                    max = temp;\n            }\n            return max;\n        }","language":"csharp"}
{"task_id":"MBCSP\/565","completion":"\n            List<string> result = new List<string>();\n            if (word == null)\n                return result;\n\n            var regex = new Regex(@\"([a-zA-Z])\");\n            var matches = regex.Matches(word);\n            foreach (Match m in matches)\n                result.Add(m.Value);\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/566","completion":"\n            return n % 10 + (n \/ 10) % 10 + (n \/ 100) % 10 + (n \/ 1000) % 10;\n        }","language":"csharp"}
{"task_id":"MBCSP\/573","completion":"\n            \/\/ Create a set of unique numbers from the list\n            var unique_numbers = list_data.Distinct();\n\n            \/\/ Calculate the product of the unique numbers\n            var product = 1;\n            foreach (var number in unique_numbers)\n            {\n                product *= number;\n            }\n\n            return product;\n        }","language":"csharp"}
{"task_id":"MBCSP\/576","completion":"\n            if (n > A.Count || m > B.Count)\n                return false;\n            if (n == 0 || m == 0)\n                return true;\n            return (A[n - 1] == B[m - 1]) && IsSubArray(A, B, n - 1, m - 1);\n        }","language":"csharp"}
{"task_id":"MBCSP\/583","completion":"\n            \/\/ write your code here\n            int[] dp = new int[num + 1];\n            dp[0] = 1;\n            dp[1] = 1;\n            for (int i = 2; i <= num; i++) {\n                dp[i] = 0;\n                for (int j = 0; j < i; j++) {\n                    dp[i] += dp[j] * dp[i - j - 1];\n                }\n            }\n            return dp[num];\n        }","language":"csharp"}
{"task_id":"MBCSP\/588","completion":"\n            int min = nums.Min();\n            int max = nums.Max();\n            return max - min;\n        }","language":"csharp"}
{"task_id":"MBCSP\/591","completion":"\n            \/\/ write your code here\n            return newList;\n        }","language":"csharp"}
{"task_id":"MBCSP\/598","completion":"\n            \/\/ write your code here\n            int sum = 0;\n            int temp = number;\n            while (temp > 0) \n            {\n                int digit = temp % 10;\n                sum += digit * digit * digit;\n                temp \/= 10;\n            }\n            return sum == number;\n        }","language":"csharp"}
{"task_id":"MBCSP\/600","completion":"\n            return (n & 1) == 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/605","completion":"\n            \/\/ write your code here\n            if (num < 2) {\n                return false;\n            }\n            else if (num == 2) {\n                return true;\n            }\n            else if (num % 2 == 0) {\n                return false;\n            }\n            else {\n                for (int i = 3; i * i <= num; i += 2) {\n                    if (num % i == 0) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/606","completion":"\n            return degree * (Math.PI \/ 180);\n        }","language":"csharp"}
{"task_id":"MBCSP\/614","completion":"\n            int sum = 0;\n            foreach (var item in test_list)\n            {\n                sum += item.Sum();\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/624","completion":"\n            return string0.ToUpper();\n        }","language":"csharp"}
{"task_id":"MBCSP\/625","completion":"\n            \/\/ write your code here\n            return newList;\n        }","language":"csharp"}
{"task_id":"MBCSP\/626","completion":"\n            if (r < 0) return -1;\n            int area = (int)Math.Sqrt(3.0) * r * r;\n            return area;\n        }","language":"csharp"}
{"task_id":"MBCSP\/628","completion":"\n            string string1 = Regex.Replace(string0, \" \", \"%20\");\n            return string1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/629","completion":"\n            return list.Where(x => x % 2 == 0).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/631","completion":"\n            Regex regex = new Regex(@\" +\", RegexOptions.IgnoreCase);\n            return regex.Replace(text, \"_\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/632","completion":"\n            \/\/ write your code here\n            List<int> result = new List<int>();\n            int count = 0;\n            for (int i = 0; i < num_list.Count; i++) {\n                if (num_list[i] != 0) {\n                    result.Add(num_list[i]);\n                }\n                else {\n                    count++;\n                }\n            }\n            for (int i = 0; i < count; i++) {\n                result.Add(0);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/633","completion":"\n            \/\/ write your code here\n            int xorSum = 0;\n            for (int i = 0; i < arr.Count; i++) \n            {\n                for (int j = i + 1; j < arr.Count; j++) \n                {\n                    xorSum += arr[i] ^ arr[j];\n                }\n            }\n            return xorSum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/637","completion":"\n            \/\/ write your code here\n            return actual_cost - sale_amount == 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/643","completion":"\n            \/\/ Create a Regex object that matches the word 'z'\n            Regex regex = new Regex(@\"z\");\n\n            \/\/ Create a MatchCollection object that contains the matches\n            MatchCollection matches = regex.Matches(text);\n\n            \/\/ If there are matches, return the string \"Found a match!\"\n            if (matches.Count > 0)\n                return \"Found a match!\";\n\n            \/\/ Otherwise, return the string \"Not matched!\"\n            else\n                return \"Not matched!\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/650","completion":"\n            if (arr1.Count != arr2.Count)\n                return false;\n            if (n == 0 && m == 0)\n                return true;\n            if (arr1[n-1] == arr2[m-1])\n                return AreEqual (arr1, arr2, n-1, m-1);\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/651","completion":"\n            \/\/ Create a list of all the elements in test_tup1\n            var all_elements = test_tup1.Select(x => x).ToList();\n\n            \/\/ Create a list of all the elements in test_tup2\n            var all_elements_2 = test_tup2.Select(x => x).ToList();\n\n            \/\/ Create a list of all the elements in test_tup2 that are not in test_tup1\n            var all_elements_3 = all_elements_2.Where(x => !all_elements.Contains(x)).ToList();\n\n            \/\/ If all_elements_3 is empty, then test_tup1 is a subset of test_tup2\n            return all_elements_3.Count() == 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/653","completion":"\n            Dictionary<string, List<int>> d = new Dictionary<string, List<int>>();\n            foreach (var item in l)\n            {\n                var key = item[0].ToString();\n                var value = item[1].ToString();\n                if (d.ContainsKey(key))\n                {\n                    d[key].Add(Convert.ToInt32(value));\n                }\n                else\n                {\n                    d.Add(key, new List<int>());\n                    d[key].Add(Convert.ToInt32(value));\n                }\n            }\n            return d;\n        }","language":"csharp"}
{"task_id":"MBCSP\/654","completion":"\n            return 2 * (l + b);\n        }","language":"csharp"}
{"task_id":"MBCSP\/655","completion":"\n            if (n < 0)\n                throw new ArgumentException (\"n should be greater than or equal to 0.\");\n\n            int sum = 0;\n            for (int i = 1; i <= n; i++)\n            {\n                sum += (i * i * i * i * i);\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/658","completion":"\n            var list = list1.ToArray();\n            var maxOccurrence = 0;\n            var maxOccurrenceItem = 0;\n            var occurrence = 0;\n            foreach (var item in list)\n            {\n                occurrence = 0;\n                foreach (var item2 in list)\n                {\n                    if (item == item2)\n                    {\n                        occurrence++;\n                    }\n                }\n                if (occurrence > maxOccurrence)\n                {\n                    maxOccurrence = occurrence;\n                    maxOccurrenceItem = item;\n                }\n            }\n            return maxOccurrenceItem;\n        }","language":"csharp"}
{"task_id":"MBCSP\/662","completion":"\n            \/\/ Sort the list in the dictionary by the first element of the list.\n            \/\/ The result is a dictionary with the sorted list as values.\n            \/\/ The key is the sorted list.\n            Dictionary<string, List<int>> dict2 = new Dictionary<string, List<int>>();\n            foreach (KeyValuePair<string, List<int>> pair in dict1)\n            {\n                List<int> list = pair.Value;\n                list.Sort();\n                dict2.Add(pair.Key, list);\n            }\n            return dict2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/664","completion":"\n            var evenNumbers = Enumerable.Range(1, n).Where(x => x % 2 == 0);\n            return evenNumbers.Sum(x => x) \/ evenNumbers.Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/667","completion":"\n            int count = 0;\n            foreach (char ch in string0)\n            {\n                if (vowels.Contains(ch))\n                {\n                    count++;\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/669","completion":"\n            Regex ipRegex = new Regex (\"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\");\n            return ipRegex.IsMatch(Ip) ? \"Valid IP address\" : \"Invalid IP address\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/672","completion":"\n            return Math.Max(Math.Max(num1, num2), num3);\n        }","language":"csharp"}
{"task_id":"MBCSP\/673","completion":"\n            return list.Aggregate(0, (a, b) => a * 10 + b);\n        }","language":"csharp"}
{"task_id":"MBCSP\/675","completion":"\n            \/\/ write your code here\n            if (x + y >= m && x + y <= n)\n                return 20;\n            else\n                return x + y;\n        }","language":"csharp"}
{"task_id":"MBCSP\/676","completion":"\n            Regex rx = new Regex(@\"[\\W_]+\");\n            return rx.Replace(text1, \"\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/678","completion":"\n            return Regex.Replace(str1, \" \", \"\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/679","completion":"\n            var keyList = ditionary.Keys.ToList();\n            return keyList[key];\n        }","language":"csharp"}
{"task_id":"MBCSP\/680","completion":"\n            if (nums.Count < 2)\n                return false;\n\n            var isAscending = true;\n            var isDescending = true;\n\n            var prev = nums[0];\n            for (int i = 1; i < nums.Count; i++)\n            {\n                if (nums[i] < prev)\n                {\n                    isAscending = false;\n                    break;\n                }\n                prev = nums[i];\n            }\n\n            prev = nums[nums.Count - 1];\n            for (int i = nums.Count - 2; i >= 0; i--)\n            {\n                if (nums[i] > prev)\n                {\n                    isDescending = false;\n                    break;\n                }\n                prev = nums[i];\n            }\n\n            return isAscending || isDescending;\n        }","language":"csharp"}
{"task_id":"MBCSP\/681","completion":"\n            if (n < 2) return 1;\n            int i = 2;\n            while (i <= n \/ i)\n            {\n                if (n % i == 0)\n                    return i;\n                i++;\n            }\n            return n;\n        }","language":"csharp"}
{"task_id":"MBCSP\/683","completion":"\n            var sq = Math.Sqrt(n);\n            return (sq * sq == n);\n        }","language":"csharp"}
{"task_id":"MBCSP\/687","completion":"\n            \/\/ If a is 0, then b must also be 0.\n            if (a == 0)\n                return b;\n            \/\/ If b is 0, then a must also be 0.\n            if (b == 0)\n                return a;\n            \/\/ If a is greater than b, then swap the values.\n            if (a > b)\n                return RecurGcd (a - b, b);\n            \/\/ If b is greater than a, then swap the values.\n            else\n                return RecurGcd (a, b - a);\n        }","language":"csharp"}
{"task_id":"MBCSP\/691","completion":"\n            \/\/ write your code here\n            Dictionary<int, List<int>> result = new Dictionary<int, List<int>>();\n            foreach (var item in test_list)\n            {\n                if (result.ContainsKey(item[1]))\n                {\n                    result[item[1]].Add(item[0]);\n                }\n                else\n                {\n                    result.Add(item[1], new List<int>());\n                    result[item[1]].Add(item[0]);\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/692","completion":"\n            \/\/ write your code here\n            int lastTwoDigits = 0;\n            int factorial = 1;\n            for (int i = 1; i <= N; i++) {\n                factorial *= i;\n            }\n            lastTwoDigits = factorial % 100;\n            return lastTwoDigits;\n        }","language":"csharp"}
{"task_id":"MBCSP\/693","completion":"\n            Regex regex = new Regex (\" {2,}\");\n            return regex.Replace(text1, \" \");\n        }","language":"csharp"}
{"task_id":"MBCSP\/697","completion":"\n            return array_nums.Where(x => x % 2 == 0).Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/703","completion":"\n            \/\/ write your code here\n            return d.ContainsKey(x);\n        }","language":"csharp"}
{"task_id":"MBCSP\/704","completion":"\n            \/\/ TODO: Write your code here.\n            double sum = 0;\n            for (int i = 1; i <= n; i++)\n            {\n                sum += 1.0 \/ i;\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/708","completion":"\n            List<string> list = new List<string>();\n            string[] string1 = string0.Split(' ');\n            foreach (string string2 in string1)\n            {\n                if (string2.Length > 0)\n                {\n                    list.Add(string2);\n                }\n            }\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/713","completion":"\n            return test_tup.All(x => x);\n        }","language":"csharp"}
{"task_id":"MBCSP\/715","completion":"\n            \/\/ Split the string into an array of strings.\n            string[] str_array = test_str.Split(',');\n            \/\/ Convert the strings into integers.\n            int[] int_array = new int[str_array.Length];\n            for (int i = 0; i < str_array.Length; i++)\n                int_array[i] = Convert.ToInt32(str_array[i]);\n            \/\/ Create a tuple.\n            List<int> tuple = new List<int>();\n            tuple.AddRange(int_array);\n            return tuple;\n        }","language":"csharp"}
{"task_id":"MBCSP\/719","completion":"\n            Regex regex = new Regex(@\"a(b*)\");\n            MatchCollection matches = regex.Matches(text);\n            if (matches.Count == 0)\n                return \"Not matched!\";\n            else\n                return \"Found a match!\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/727","completion":"\n            Regex rx = new Regex (\"[^a-zA-Z0-9]\");\n            return rx.Replace(S, \"\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/732","completion":"\n            Regex rx = new Regex(@\"[\\s,\\.]\");\n            return rx.Replace(text, @\":\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/737","completion":"\n            string regex = \"^[aeiouAEIOU]\";\n            Regex rg = new Regex(regex);\n            return rg.IsMatch(string0) ? \"Valid\" : \"Invalid\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/740","completion":"\n            Dictionary<int, int> dict = new Dictionary<int, int>();\n            for (int i = 0; i < test_tup.Count; i += 2)\n            {\n                dict.Add(test_tup[i], test_tup[i + 1]);\n            }\n            return dict;\n        }","language":"csharp"}
{"task_id":"MBCSP\/741","completion":"\n            \/\/ Create a list of all the characters in the string\n            var characters = new List<char>();\n            foreach (char c in s)\n            {\n                characters.Add(c);\n            }\n\n            \/\/ Sort the list\n            characters.Sort();\n\n            \/\/ Compare the first and last characters\n            return characters[0] == characters[characters.Count - 1];\n        }","language":"csharp"}
{"task_id":"MBCSP\/744","completion":"\n            return test_tup.Any(x => x == null);\n        }","language":"csharp"}
{"task_id":"MBCSP\/750","completion":"\n            \/\/ Your code goes here.\n            return test_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/756","completion":"\n            \/\/ Create a Regex object that will match a string that has an a followed by zero or one 'b'.\n            Regex regex = new Regex(@\"a(b)*\");\n\n            \/\/ Create a MatchCollection object that will hold the results of the match.\n            MatchCollection matches = regex.Matches(text);\n\n            \/\/ If the match was found, return the match message.\n            if (matches.Count > 0)\n                return \"Found a match!\";\n\n            \/\/ If the match was not found, return the not found message.\n            return \"Not matched!\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/759","completion":"\n            \/\/ Create a Regex object for the decimal number.\n            Regex regex = new Regex (\"^\\\\d+\\\\.\\\\d{2}$\");\n\n            \/\/ Check if the string matches the regex.\n            return regex.IsMatch(num);\n        }","language":"csharp"}
{"task_id":"MBCSP\/766","completion":"\n            List<List<int>> result = new List<List<int>>();\n            if (l1.Count < 2) return result;\n            int i = 0;\n            int j = 1;\n            while (j < l1.Count)\n            {\n                List<int> pair = new List<int>();\n                pair.Add(l1[i]);\n                pair.Add(l1[j]);\n                result.Add(pair);\n                i++;\n                j++;\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/768","completion":"\n            \/\/ write your code here\n            return (x % 2 == 1);\n        }","language":"csharp"}
{"task_id":"MBCSP\/773","completion":"\n            List<object> result = new List<object>();\n            if (text == null || pattern == null)\n                return result;\n\n            int index = text.IndexOf(pattern);\n            if (index == -1)\n                return result;\n\n            result.Add(pattern);\n            result.Add(index);\n            result.Add(index + pattern.Length);\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/774","completion":"\n            Regex regex = new Regex(@\"^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$\");\n            return regex.IsMatch(email) ? \"Valid Email\" : \"Invalid Email\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/775","completion":"\n            int oddCount = 0;\n            for (int i = 0; i < nums.Count; i++)\n            {\n                if (i % 2 == 1)\n                {\n                    if (nums[i] % 2 == 1)\n                    {\n                        oddCount++;\n                    }\n                }\n            }\n            return oddCount == nums.Count \/ 2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/777","completion":"\n            var hashSet = new HashSet<int>();\n            var sum = 0;\n            foreach (var item in arr)\n            {\n                if (!hashSet.Contains(item))\n                {\n                    hashSet.Add(item);\n                    sum += item;\n                }\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/781","completion":"\n            \/\/ write your code here\n            if (n < 1)\n                return \"Invalid Value\";\n            int count = 0;\n            for (int i = 1; i <= n; i++)\n            {\n                if (n % i == 0)\n                    count++;\n            }\n            if (count % 2 == 0)\n                return \"Even\";\n            else\n                return \"Odd\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/787","completion":"\n            Regex regex = new Regex(@\"a(b){3}\");\n            if (regex.IsMatch(text))\n                return \"Found a match!\";\n            else\n                return \"Not matched!\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/788","completion":"\n            \/\/ Create a new tuple.\n            var tuple = new List<string>();\n\n            \/\/ Loop through the list and add the elements to the tuple.\n            foreach (var element in test_list)\n            {\n                tuple.Add(element);\n            }\n\n            \/\/ Add the string to the tuple.\n            tuple.Add(test_str);\n\n            \/\/ Return the tuple.\n            return tuple;\n        }","language":"csharp"}
{"task_id":"MBCSP\/789","completion":"\n            \/\/ write your code here\n            return s * l;\n        }","language":"csharp"}
{"task_id":"MBCSP\/792","completion":"\n            \/\/ write your code here\n            return input_list.Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/793","completion":"\n            int low = 0;\n            int high = n - 1;\n            while (low <= high) \n            {\n                int mid = (low + high) \/ 2;\n                if (arr[mid] == x) \n                {\n                    return mid;\n                }\n                else if (arr[mid] < x) \n                {\n                    low = mid + 1;\n                }\n                else \n                {\n                    high = mid - 1;\n                }\n            }\n            return -1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/794","completion":"\n            \/\/ Create a Regex object that will match the string 'a' followed by anything, ending in 'b'.\n            Regex regex = new Regex(@\"a.*b$\");\n\n            \/\/ Create a MatchCollection object that will hold the results of the match.\n            MatchCollection matches = regex.Matches(text);\n\n            \/\/ If there are matches, return the string 'Found a match!'.\n            if (matches.Count > 0)\n                return \"Found a match!\";\n\n            \/\/ If there are no matches, return the string 'Not matched!'.\n            else\n                return \"Not matched!\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/796","completion":"\n            \/\/ Create a list of all the values in the dictionary.\n            var values = dict.Values.ToList<int>();\n\n            \/\/ Return the sum of all the values.\n            return values.Sum();\n        }","language":"csharp"}
{"task_id":"MBCSP\/798","completion":"\n            return arr.Sum();\n        }","language":"csharp"}
{"task_id":"MBCSP\/799","completion":"\n            \/\/ write your code here\n            return (n << d) | (n >> (32 - d));\n        }","language":"csharp"}
{"task_id":"MBCSP\/800","completion":"\n            return Regex.Replace(text, @\"\\s+\", \"\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/802","completion":"\n            \/\/ write your code here\n            int count = 0;\n            int i = 0;\n            int j = n - 1;\n            while (i < j) {\n                count++;\n                i++;\n                j--;\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/803","completion":"\n            return Math.Sqrt(n) == Math.Floor(Math.Sqrt(n));\n        }","language":"csharp"}
{"task_id":"MBCSP\/807","completion":"\n            return nums.FirstOrDefault(n => n % 2 != 0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/808","completion":"\n            \/\/ write your code here\n            return test_tup.Any(x => x == K);\n        }","language":"csharp"}
{"task_id":"MBCSP\/811","completion":"\n            \/\/ Create a list of tuples from the lists\n            List<Tuple<int, int>> tuples1 = new List<Tuple<int, int>>();\n            for (int i = 0; i < test_list1.Count; i++)\n            {\n                tuples1.Add(new Tuple<int, int>(test_list1[i][0], test_list1[i][1]));\n            }\n\n            List<Tuple<int, int>> tuples2 = new List<Tuple<int, int>>();\n            for (int i = 0; i < test_list2.Count; i++)\n            {\n                tuples2.Add(new Tuple<int, int>(test_list2[i][0], test_list2[i][1]));\n            }\n\n            \/\/ Compare the tuples\n            return tuples1.Count == tuples2.Count && tuples1.Any(x => tuples2.Any(y => x.Equals(y)));\n        }","language":"csharp"}
{"task_id":"MBCSP\/812","completion":"\n            \/\/ write your code here\n            return street.Replace(\"Road\", \"Rd.\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/813","completion":"\n            return str1.Length;\n        }","language":"csharp"}
{"task_id":"MBCSP\/815","completion":"\n            \/\/ write your code here\n            List<int> result = new List<int>();\n            for (int i = 0; i < n; i++) {\n                result.Add(arr[i]);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/817","completion":"\n            \/\/ write your code here\n            return nums.Where(x => (x % m == 0) || (x % n == 0)).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/818","completion":"\n            int count = 0;\n            for (int i = 0; i < str.Length; i++)\n            {\n                if (str[i] >= 'a' && str[i] <= 'z')\n                {\n                    count++;\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/820","completion":"\n            if (monthnum1 == 2)\n            {\n                return true;\n            }\n            else if (monthnum1 == 1 || monthnum1 == 3 || monthnum1 == 5 || monthnum1 == 7 || monthnum1 == 8 || monthnum1 == 10 || monthnum1 == 12)\n            {\n                return false;\n            }\n            else\n            {\n                return true;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/822","completion":"\n            Regex regex = new Regex(@\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})\");\n            return regex.IsMatch(p);\n        }","language":"csharp"}
{"task_id":"MBCSP\/823","completion":"\n            Regex regex = new Regex(@\"^\" + sample + \".*$\");\n            if (regex.IsMatch(string0))\n            {\n                return \"string starts with the given substring\";\n            }\n            else\n            {\n                return \"string doesnt start with the given substring\";\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/824","completion":"\n            \/\/ write your code here\n            return l;\n        }","language":"csharp"}
{"task_id":"MBCSP\/827","completion":"\n            int sum = 0;\n            foreach (List<int> list2 in list1)\n            {\n                sum += list2[C];\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/831","completion":"\n            \/\/Write your code here\n            int count = 0;\n            for (int i = 0; i < arr.Count; i++)\n            {\n                for (int j = i + 1; j < arr.Count; j++)\n                {\n                    if (arr[i] == arr[j])\n                    {\n                        count++;\n                    }\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/833","completion":"\n            \/\/ write your code here\n            List<int> keys = new List<int>();\n            foreach (var key in dict.Keys)\n            {\n                keys.Add(key);\n            }\n            return keys;\n        }","language":"csharp"}
{"task_id":"MBCSP\/839","completion":"\n            \/\/Sort the tuples alphabetically by the first item of each tuple\n            tup.OrderBy(x => x.First());\n            return tup;\n        }","language":"csharp"}
{"task_id":"MBCSP\/847","completion":"\n            return xs.ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/848","completion":"\n            return ((base1 + base2) * height) \/ 2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/852","completion":"\n            \/\/ write your code here\n            return num_list.Where(x => x >= 0).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/855","completion":"\n            \/\/ write your code here\n            return (x % 2 == 0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/860","completion":"\n            string regex = @\"^[a-zA-Z0-9]*$\";\n            Regex rg = new Regex(regex);\n            if (rg.IsMatch(string0))\n                return \"Accept\";\n            else\n                return \"Discard\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/865","completion":"\n            return nums.Select (x => x * n).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/866","completion":"\n            \/\/Write your code here\n            bool isThere31Days = false;\n            if (monthname2.Contains(\"January\") || monthname2.Contains(\"March\") || monthname2.Contains(\"May\") || monthname2.Contains(\"July\") || monthname2.Contains(\"August\") || monthname2.Contains(\"October\") || monthname2.Contains(\"December\"))\n            {\n                isThere31Days = true;\n            }\n            return isThere31Days;\n        }","language":"csharp"}
{"task_id":"MBCSP\/868","completion":"\n            \/\/ write your code here\n            return a.Split (\" \").Last ().Length;\n        }","language":"csharp"}
{"task_id":"MBCSP\/870","completion":"\n            return nums.Where(x => x > 0).Sum();\n        }","language":"csharp"}
{"task_id":"MBCSP\/873","completion":"\n            if (n == 0)\n                return 0;\n            else if (n == 1)\n                return 1;\n            else\n                return Fibonacci(n - 1) + Fibonacci(n - 2);\n        }","language":"csharp"}
{"task_id":"MBCSP\/877","completion":"\n            var charArray = str.ToCharArray();\n            var charArraySorted = charArray.OrderBy(c => c);\n            return string.Join(\"\", charArraySorted);\n        }","language":"csharp"}
{"task_id":"MBCSP\/879","completion":"\n            Regex regex = new Regex(@\"a.*b$\");\n            if (regex.IsMatch(text))\n                return \"Found a match!\";\n            else\n                return \"Not matched!\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/886","completion":"\n            double sum = 0;\n            foreach (var number in numbers)\n            {\n                sum += number;\n            }\n            return sum \/ numbers.Count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/887","completion":"\n            return (n & 1) == 1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/888","completion":"\n            \/\/Write your code here\n            List<List<int>> result = new List<List<int>>();\n            for (int i = 0; i < test_tup1.Count; i++)\n            {\n                List<int> temp = new List<int>();\n                for (int j = 0; j < test_tup1[i].Count; j++)\n                {\n                    temp.Add(test_tup1[i][j] - test_tup2[i][j]);\n                }\n                result.Add(temp);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/889","completion":"\n            \/\/ write your code here\n            return lists;\n        }","language":"csharp"}
{"task_id":"MBCSP\/891","completion":"\n            return (A.ToString().Length == B.ToString().Length);\n        }","language":"csharp"}
{"task_id":"MBCSP\/892","completion":"\n            return Regex.Replace(text, \" {2,}\", \" \");\n        }","language":"csharp"}
{"task_id":"MBCSP\/894","completion":"\n            \/\/ Create a list of double type.\n            List<double> list = new List<double>();\n            \/\/ Split the string by comma.\n            string[] str_arr = test_str.Split (\",\");\n            \/\/ Iterate over the string array.\n            foreach (string str in str_arr)\n            {\n                \/\/ Convert the string into double type.\n                double d = Double.Parse(str);\n                \/\/ Add the double type to the list.\n                list.Add(d);\n            }\n            \/\/ Return the list.\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/896","completion":"\n            \/\/ write your code here\n            tuples.Sort((a, b) => a.Last() - b.Last());\n            return tuples;\n        }","language":"csharp"}
{"task_id":"MBCSP\/897","completion":"\n            \/\/ write your code here\n            return Regex.IsMatch(sentence, \"(?i).*\" + word + \".*\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/899","completion":"\n            \/\/ write your code here\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/902","completion":"\n            Dictionary<string, int> dict = new Dictionary<string, int>();\n            foreach (KeyValuePair<string, int> pair in d1)\n            {\n                dict.Add(pair.Key, pair.Value);\n            }\n            foreach (KeyValuePair<string, int> pair in d2)\n            {\n                if (dict.ContainsKey(pair.Key))\n                {\n                    dict[pair.Key] += pair.Value;\n                }\n                else\n                {\n                    dict.Add(pair.Key, pair.Value);\n                }\n            }\n            return dict;\n        }","language":"csharp"}
{"task_id":"MBCSP\/910","completion":"\n            \/\/ Convert the date to a number.\n            var m_num = Convert.ToInt32(m);\n            var d_num = Convert.ToInt32(d);\n            var y_num = Convert.ToInt32(y);\n\n            \/\/ Check the month.\n            if (m_num < 1 || m_num > 12)\n                return false;\n\n            \/\/ Check the day.\n            if (d_num < 1 || d_num > 31)\n                return false;\n\n            \/\/ Check the year.\n            if (y_num < 1900 || y_num > 2100)\n                return false;\n\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/913","completion":"\n            \/\/ 1. Create a Regex object that will match a number at the end of a string.\n            Regex regex = new Regex(@\"(\\d+)$\");\n\n            \/\/ 2. Check if the Regex object matches the string.\n            return regex.IsMatch(string0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/914","completion":"\n            \/\/ Create a string with alternating characters\n            string alternating = \"abab\";\n\n            \/\/ Check if the string is made up of two alternating characters\n            return Regex.IsMatch(s, @\"^\" + alternating + \"$\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/917","completion":"\n            Regex regex = new Regex (\"[A-Z][a-z]+\");\n            MatchCollection matches = regex.Matches(text);\n            if (matches.Count == 0)\n                return \"Not matched!\";\n            else\n                return \"Found a match!\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/919","completion":"\n            int result = 1;\n            foreach (var item in items)\n            {\n                result *= item;\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/921","completion":"\n            List<List<int>> result = new List<List<int>>();\n            int i = 0;\n            int j = 0;\n            while (i < test_tup.Count) \n            {\n                List<int> temp = new List<int>();\n                for (j = i; j < i + N; j++) \n                {\n                    if (j < test_tup.Count) \n                    {\n                        temp.Add(test_tup[j]);\n                    }\n                }\n                result.Add(temp);\n                i = j;\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/924","completion":"\n            return x > y ? x : y;\n        }","language":"csharp"}
{"task_id":"MBCSP\/925","completion":"\n            int product = 1;\n            foreach (var num in nums)\n            {\n                product *= num;\n            }\n            return product;\n        }","language":"csharp"}
{"task_id":"MBCSP\/928","completion":"\n            \/\/ Split the date into its components\n            string[] dateParts = dt.Split('-');\n\n            \/\/ Convert the components to integers\n            int year = Convert.ToInt32(dateParts[0]);\n            int month = Convert.ToInt32(dateParts[1]);\n            int day = Convert.ToInt32(dateParts[2]);\n\n            \/\/ Create a date object\n            DateTime dtObj = new DateTime(year, month, day);\n\n            \/\/ Convert the date object to a string\n            return dtObj.ToString(\"dd-MM-yyyy\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/929","completion":"\n            int count = 0;\n            foreach (var item in tuplex)\n            {\n                if (item == value)\n                {\n                    count++;\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/931","completion":"\n            var sum = 0;\n            for (var i = 1; i <= number; i++)\n            {\n                sum += (i * i * i);\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/932","completion":"\n            \/\/ Create a new list to store the unique words.\n            List<string> uniqueWords = new List<string>();\n\n            \/\/ Iterate through the list of words.\n            foreach (var word in l)\n            {\n                \/\/ If the word is not in the unique words list, add it to the list.\n                if (!uniqueWords.Contains(word))\n                {\n                    uniqueWords.Add(word);\n                }\n            }\n\n            \/\/ Return the unique words list.\n            return uniqueWords;\n        }","language":"csharp"}
{"task_id":"MBCSP\/935","completion":"\n            var sum = 0;\n            for (var i = 1; i <= number; i++)\n            {\n                sum += (i * i);\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/940","completion":"\n            \/\/ TODO: Write your code here\n            return arr;\n        }","language":"csharp"}
{"task_id":"MBCSP\/942","completion":"\n            return (test_tup.Any(x => check_list.Contains(x)));\n        }","language":"csharp"}
{"task_id":"MBCSP\/947","completion":"\n            \/\/ Write your code here.\n            return list1.Select (x => x.Length).Min();\n        }","language":"csharp"}
{"task_id":"MBCSP\/950","completion":"\n            string[] zodiacs = new string[] { \"Monkey\", \"Rooster\", \"Dog\", \"Pig\", \"Rat\", \"Ox\", \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Sheep\", \"Monk\", \"Rooster\", \"Dog\", \"Pig\", \"Rat\", \"Ox\", \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Sheep\" };\n            return zodiacs[year % 12];\n        }","language":"csharp"}
{"task_id":"MBCSP\/959","completion":"\n            return lst.Average(x => x);\n        }","language":"csharp"}
{"task_id":"MBCSP\/964","completion":"\n            return (s.Length % 2 == 0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/970","completion":"\n            return Math.Min(x, y);\n        }","language":"csharp"}
{"task_id":"MBCSP\/972","completion":"\n            List<int> result = new List<int>();\n            result.AddRange(test_tup1);\n            result.AddRange(test_tup2);\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/973","completion":"\n            if (s == null || s.Length == 0)\n                return s;\n\n            if (d == 0)\n                return s;\n\n            if (d > s.Length)\n                d = d % s.Length;\n\n            return s.Substring(d, s.Length - d) + s.Substring(0, d);\n        }","language":"csharp"}
{"task_id":"MBCSP\/7","completion":"\n            \/\/Write your code here.\n            List<string> result = new List<string>();\n\n            text = Regex.Replace(text, \"\\\\W+\", \" \");\n\n            foreach (string w in text.Split(\" \"))\n            {\n                if (w.Length >= 4)\n                {\n                    result.Add(w);\n                }\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/10","completion":"\n            \/\/Sort the list and return the first n items.\n            return list1.OrderBy(x => x).Take(n).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/19","completion":"\n            \/\/ return -1;\n            if (arraynums.Count() == 0)\n                return false;\n            else \n            {\n                var set = new HashSet<int>();\n                foreach (var item in arraynums)\n                {\n                    if (set.Contains(item))\n                        return true;\n                    set.Add(item);\n                }\n                return false;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/20","completion":"\n            return (x >= 383 && x <= 748);\n        }","language":"csharp"}
{"task_id":"MBCSP\/21","completion":"\n            return Enumerable.Range(1,m).Select(x => x*n).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/22","completion":"\n            int firstDuplicate = -1;\n            if (nums == null || nums.Count() == 0)\n                return firstDuplicate;\n\n            var dict = new Dictionary<int, int>();\n            for (int i = 0; i < nums.Count(); i++)\n            {\n                int num = nums[i];\n                if (dict.ContainsKey(num))\n                {\n                    firstDuplicate = num;\n                    break;\n                }\n                dict[num] = num;\n            }\n            return firstDuplicate;\n        }","language":"csharp"}
{"task_id":"MBCSP\/25","completion":"\n            var set = new HashSet<int>();\n            var result = 1;\n            foreach (var elem in arr) \n            {\n                if (set.Contains(elem)) \n                {\n                    continue;\n                }\n                else\n                {\n                    set.Add(elem);\n                    result *= elem;\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/26","completion":"\n            int counter = 0;\n            foreach (var tuple in test_list) \n            {\n                foreach (var elem in tuple) \n                {\n                    if (elem != K) \n                    {\n                        counter += 1;\n                    }\n                }\n            }\n            if (counter == 0) \n            {\n                return true;\n            }\n            else \n            {\n                return false;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/27","completion":"\n            \/\/Create a new list for output\n            List<string> output = new List<string>();\n\n            \/\/Loop through the list of strings\n            foreach (var item in list)\n            {\n                \/\/Split the string on whitespace into a list of substrings\n                var tokens = Regex.Split(item, \"\\\\s\");\n\n                \/\/Loop through the list of substrings\n                foreach (var token in tokens)\n                {\n                    \/\/Remove all digits from the substrings\n                    var digits = Regex.Replace(token, \"[0-9]\", \"\");\n\n                    \/\/Add the substrings to the output list\n                    output.Add(digits);\n                }\n            }\n\n            \/\/Return the output list\n            return output;\n        }","language":"csharp"}
{"task_id":"MBCSP\/33","completion":"\n            if (N < 0) return -1;\n\n            int l = 0, b = 0, r = 0, p = 1;\n\n            while (N != 0) \n            {\n                b = N % 2;\n                r = N \/ 2;\n                l += b * p;\n                p *= 10;\n                N = r;\n            }\n\n            return l;\n        }","language":"csharp"}
{"task_id":"MBCSP\/37","completion":"\n            var sorted_list = mixed_list.OrderBy(s => s.ToString()).ToList();\n\n            return sorted_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/49","completion":"\n            var result = new List<int> ();\n            for (int i = 0; i < nums.Count; i++)\n            {\n                List<int> inner = nums[i];\n                for (int j = 0; j < inner.Count; j++)\n                {\n                    if (j == N)\n                        result.Add(inner[j]);\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/72","completion":"\n            \/\/Write your code here\n            return n % 2 != 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/77","completion":"\n            int evenSum = 0, oddSum = 0, i = 0;\n\n            while (i < 4)\n            {\n                if (n < 0)\n                {\n                    n = n * -1;\n                }\n\n                if (i % 2 == 0)\n                {\n                    evenSum += n % 10;\n                }\n                else\n                {\n                    oddSum += n % 10;\n                }\n\n                n \/= 10;\n                i++;\n            }\n\n            return (evenSum - oddSum) % 10 == 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/86","completion":"\n            var num = 1;\n            var i = 0;\n            while (i < n)\n            {\n                num += 6 * i;\n                i += 1;\n            }\n            return num;\n        }","language":"csharp"}
{"task_id":"MBCSP\/87","completion":"\n            Dictionary<string, string> dict = new Dictionary<string, string>();\n\n            foreach (KeyValuePair<string, string> pair in dict1)\n            {\n                dict[pair.Key] = pair.Value;\n            }\n\n            foreach (KeyValuePair<string, string> pair in dict2)\n            {\n                if (!dict.TryGetValue(pair.Key, out var value))\n                {\n                    dict[pair.Key] = pair.Value;\n                }\n            }\n\n            foreach (KeyValuePair<string, string> pair in dict3)\n            {\n                if (!dict.TryGetValue(pair.Key, out var value))\n                {\n                    dict[pair.Key] = pair.Value;\n                }\n            }\n\n            return dict;\n        }","language":"csharp"}
{"task_id":"MBCSP\/92","completion":"\n            \/\/ Convert the string to a char array \n            char[] cArray = n.ToCharArray();\n    \n            \/\/ Return true if the length of the character array is odd\n            return n.Length % 2 == 1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/93","completion":"\n            var result = 1;\n            while (b != 0)\n            {\n                if ((b & 1) == 1)\n                {\n                    result = result * a;\n                }\n                a = a * a;\n                b = b >> 1;\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/94","completion":"\n            var min_index = 0;\n            var min_value = 9999999;\n            foreach (var item in test_list) \n            {\n                var value = (int) item.Last();\n                if (value < min_value) \n                {\n                    min_value = value;\n                    min_index = test_list.IndexOf(item);\n                }\n            }\n            return test_list[min_index][0].ToString();\n        }","language":"csharp"}
{"task_id":"MBCSP\/95","completion":"\n            var min = lst.Select (x => x.Count).Min();\n            return min;\n        }","language":"csharp"}
{"task_id":"MBCSP\/102","completion":"\n            if (word == null || word.Length == 0) return \"\";\n\n            var words = word.Split ('_');\n            var result = \"\";\n\n            foreach (var w in words)\n            {\n                var firstLetter = w.Substring (0, 1).ToUpper();\n                var restOfWord = w.Substring(1);\n                result += firstLetter + restOfWord.ToLower();\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/116","completion":"\n            return nums.Select (i => i).Aggregate(0,(a,b) => a * 10 + b);\n        }","language":"csharp"}
{"task_id":"MBCSP\/120","completion":"\n            int result = 0;\n            int maxProduct = 0;\n            int size = list1.Count;\n            foreach(var tuple in list1)\n            {\n                int tempProduct = 1;\n                int tempSize = tuple.Count;\n                foreach(var num in tuple)\n                {\n                    tempProduct *= num;\n                }\n                if(tempProduct > maxProduct)\n                {\n                    maxProduct = tempProduct;\n                    result = tuple[0];\n                    result = result * tuple[tempSize - 1];\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/126","completion":"\n            int c;\n            int result = 0;\n\n            if (a > b)\n            {\n                c = a;\n                a = b;\n                b = c;\n            }\n\n            for (int i = 1; i <= a; i++)\n            {\n                if (a % i == 0 && b % i == 0)\n                {\n                    result += i;\n                }\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/135","completion":"\n            \/\/ Your code here\n            return n * (2 * n - 1);\n        }","language":"csharp"}
{"task_id":"MBCSP\/139","completion":"\n            return 2 * 3.1415 * r;\n        }","language":"csharp"}
{"task_id":"MBCSP\/140","completion":"\n            var singly_list = new List<int>();\n            foreach (var pair in test_list)\n            {\n                foreach (var number in pair)\n                {\n                    if (!singly_list.Contains(number))\n                    {\n                        singly_list.Add(number);\n                    }\n                }\n            }\n            return singly_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/144","completion":"\n            var sum = 0;\n            for (int i = 0; i < arr.Count; i++)\n                for (int j = i + 1; j < arr.Count; j++)\n                    sum += Math.Abs(arr[i] - arr[j]);\n\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/150","completion":"\n            if (a == b && a == c)\n                return true;\n            if (a == b || a == c || b == c)\n                return false;\n            return (a < b && a < c) || (a > b && a > c);\n        }","language":"csharp"}
{"task_id":"MBCSP\/154","completion":"\n            \/\/ Your code goes here\n            List<int> list = new List<int>();\n            foreach (List<int> num in nums)\n            {\n                list.Add(num[N]);\n            }\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/156","completion":"\n            List<List<int>> tuple_int = new List<List<int>>();\n            \n            foreach (var tuple_list in tuple_str)\n            {\n                var tuple_int_list = new List<int>();\n                \n                foreach (var tuple_str2 in tuple_list)\n                {\n                    tuple_int_list.Add(Int32.Parse(tuple_str2));\n                }\n                \n                tuple_int.Add(tuple_int_list);\n            }\n            \n            return tuple_int;\n        }","language":"csharp"}
{"task_id":"MBCSP\/164","completion":"\n            var x = num1;\n            var y = num2;\n            var num1Divisors = 0;\n            var num2Divisors = 0;\n            while (x % 2 == 0)\n            {\n                num1Divisors++;\n                x \/= 2;\n            }\n            while (y % 2 == 0)\n            {\n                num2Divisors++;\n                y \/= 2;\n            }\n            if (num1Divisors != num2Divisors)\n                return false;\n            else\n                return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/166","completion":"\n            \/\/ write your code here.\n            var pairsCount = 0;\n            for (int i = 0; i < A.Count; i++) {\n                for (int j = i + 1; j < A.Count; j++) {\n                    if ((A[i] ^ A[j]) % 2 == 0) {\n                        pairsCount += 1;\n                    }\n                }\n            }\n            return pairsCount;\n        }","language":"csharp"}
{"task_id":"MBCSP\/170","completion":"\n            var temp = list1.ToArray();\n            var a = new List<int>(temp.Skip(m).Take(n - m + 1).Select(i => i));\n            return a.Sum();\n        }","language":"csharp"}
{"task_id":"MBCSP\/173","completion":"\n            return Regex.Replace(text, \"[^a-zA-Z0-9]\", \"\", RegexOptions.IgnoreCase);\n        }","language":"csharp"}
{"task_id":"MBCSP\/187","completion":"\n            \/\/ If the length of the strings is 0, then return 0\n            if (m == 0 || n == 0) \n                return 0;\n\n            \/\/ If the characters are equal, then return 1\n            if (X[m-1] == Y[n-1])\n                return 1 + \n                LongestCommonSubsequence(X, Y, m-1, n-1);\n\n            \/\/ If characters are different, then consider the largest of two \n            \/\/ subsequence of LCS and the remaining substrings.\n            return Math.Max(\n                LongestCommonSubsequence(X, Y, m, n-1),\n                LongestCommonSubsequence(X, Y, m-1, n)\n            );\n        }","language":"csharp"}
{"task_id":"MBCSP\/193","completion":"\n            var unique_list = test_tup.OrderBy (x => x)\n                                        .Distinct ()\n                                        .ToList ();\n            \n            return unique_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/196","completion":"\n            \/\/Write your code here\n            return test_list.Where(x => x.Count() != K).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/197","completion":"\n            \/\/ Create a list to hold the results.\n            List<int> result_list = new List<int>();\n\n            \/\/ For each element in the test tuple.\n            for (int i = 0; i < test_tup1.Count; i++)\n            {\n                \/\/ Find the exponents.\n                int a = test_tup1[i];\n                int b = test_tup2[i];\n\n                \/\/ Find the result.\n                int result = 1;\n                for (int j = 0; j < b; j++)\n                {\n                    result *= a;\n                }\n\n                \/\/ Add the result to the result list.\n                result_list.Add(result);\n            }\n\n            \/\/ Return the result list.\n            return result_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/202","completion":"\n            \/\/ write your code here.\n            string newString = Regex.Replace(str1, \"((\\\\w)(?=\\\\w\\\\1\\\\2)*)(\\\\w)\", \"$2\");\n            return newString;\n        }","language":"csharp"}
{"task_id":"MBCSP\/213","completion":"\n            List<string> test_tup3 = new List<string>();\n            test_tup3.Add(test_tup1[0] + test_tup2[0]);\n            test_tup3.Add(test_tup1[1] + test_tup2[1]);\n            test_tup3.Add(test_tup1[2] + test_tup2[2]);\n\n            return test_tup3;\n        }","language":"csharp"}
{"task_id":"MBCSP\/223","completion":"\n            var k = 0;\n            var i = 0;\n            for (i = 0; i < n; i++)\n            {\n                if (arr[i] == x)\n                {\n                    k++;\n                }\n                if (k > (n\/2))\n                {\n                    return true;\n                }\n            }\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/226","completion":"\n            var result = \"\";\n            for (var i = 0; i < str.Length; i++)\n            {\n                var c = str[i];\n                if (i % 2 == 0)\n                {\n                    result += c;\n                }\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/232","completion":"\n            List<int> list = new List<int>();\n            var array1 = list1.ToArray();\n            var array2 = array1.OrderByDescending(i => i).Take(n).ToArray();\n            foreach (var i in array2)\n                list.Add(i);\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/240","completion":"\n            if (list1.Count == 0)\n                return list1;\n            \n            if (list2.Count == 0)\n                return list2;\n            \n            int i = list1.Count - 1;\n            list1[i] = list2[list2.Count - 1];\n            return list1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/252","completion":"\n            \/\/ Create a temporary array to store polar coordinates\n            List<double> polarCoords = new List<double> { };\n\n            \/\/ Convert the complex number to polar coordinates\n            polarCoords.Add(Math.Abs(numbers));\n            polarCoords.Add(numbers >= 0 ? 0.0 : -0.0);\n\n            return polarCoords;\n        }","language":"csharp"}
{"task_id":"MBCSP\/261","completion":"\n            \/\/create a new list to return the answer\n            List<int> ans = new List<int>();\n            \/\/create a loop to iterate through each element in each list and perform the division operation\n            for (int i=0; i<test_tup1.Count; i++)\n            {\n                ans.Add(test_tup1[i] \/ test_tup2[i]);\n            }\n            return ans;\n        }","language":"csharp"}
{"task_id":"MBCSP\/264","completion":"\n            if (h_age == 0)\n            {\n                return 0;\n            }\n\n            \/\/ Calculate dog's age in dog years.\n            int dog_age = (int) ((h_age - 2) * 4 + 21);\n\n            return dog_age;\n        }","language":"csharp"}
{"task_id":"MBCSP\/270","completion":"\n            \/\/ write your code here.\n            int sumEven = 0;\n            int sumEvenIndex = 0;\n            for (int i = 0; i < n; i++)\n            {\n                if (arr[i] % 2 == 0)\n                {\n                    sumEven += arr[i];\n                    if (i % 2 == 0)\n                    {\n                        sumEvenIndex += arr[i];\n                    }\n                }\n            }\n            return sumEvenIndex;\n        }","language":"csharp"}
{"task_id":"MBCSP\/272","completion":"\n            return test_list.Select(x => (int)x.Last()).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/273","completion":"\n            \/\/Start of code here\n\n            List<int> result = new List<int>();\n            foreach (int element1 in test_tup1) \n            {\n                int element2 = test_tup2[test_tup1.IndexOf(element1)];\n                result.Add(element1 - element2);\n            }\n\n            \/\/End of code here\n            return result;\n\n        }","language":"csharp"}
{"task_id":"MBCSP\/276","completion":"\n            return (3.1415 * (r * r) * h);\n        }","language":"csharp"}
{"task_id":"MBCSP\/295","completion":"\n            \/\/ write your code here\n            var sum = 0;\n            if (number > 1) {\n                for (int i = 1; i <= number \/ 2; i++) {\n                    if (number % i == 0) {\n                        sum += i;\n                    }\n                }\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/302","completion":"\n            return (n - 1) & n;\n        }","language":"csharp"}
{"task_id":"MBCSP\/312","completion":"\n            double volume = (1.0\/3.0) * Math.PI * r * r * h;\n            return volume;\n        }","language":"csharp"}
{"task_id":"MBCSP\/316","completion":"\n            if (A.Count == 0) return -1;\n            \n            int IndexOfLastOccurrence = -1;\n            int Index = A.IndexOf(x);\n            if (Index != -1) \n            {\n                IndexOfLastOccurrence = Index;\n                while (Index + 1 < A.Count) \n                {\n                    Index++;\n                    if (A[Index] == x) \n                    {\n                        IndexOfLastOccurrence = Index;\n                    }\n                }\n            }\n            return IndexOfLastOccurrence;\n        }","language":"csharp"}
{"task_id":"MBCSP\/319","completion":"\n            \/\/ write code here\n            Regex rgx = new Regex (\"\\\\b([a-zA-Z]{5})\\\\b\");\n            MatchCollection mc = rgx.Matches(text);\n\n            List<string> result = new List<string>();\n            foreach (Match m in mc)\n            {\n                result.Add(m.Value);\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/322","completion":"\n            List<int> result = new List<int>();\n            if (list1.Count == 0)\n                return result;\n\n            int min = list1[0];\n            for (int i = 0; i < list1.Count; i++)\n            {\n                if (list1[i] < min)\n                    min = list1[i];\n            }\n\n            int[] index = new int[list1.Count];\n            for (int i = 0; i < list1.Count; i++)\n                index[i] = i;\n\n            List<int> positions = new List<int>();\n            for (int i = 0; i < list1.Count; i++)\n                if (list1[i] == min)\n                    positions.Add(index[i]);\n\n            return positions;\n        }","language":"csharp"}
{"task_id":"MBCSP\/329","completion":"\n            return list.Count(x => x < 0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/335","completion":"\n            double result = 0;\n\n            int k = 0;\n            while (k < n) {\n                result += (double) (a + k * d);\n                k++;\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/337","completion":"\n            Regex re = new Regex (\"(\\\\w+\\\\.?)+$\");\n            MatchCollection matches = re.Matches(text);\n            \n            if (matches.Count > 0) \n            {\n                return (\"Found a match!\");\n            }\n            \n            return (\"Not matched!\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/345","completion":"\n            List<int> result = new List<int>();\n            for (int i = 0; i < nums.Count - 1; i++) \n            {\n                if (nums[i] == nums[i + 1]) \n                {\n                    result.Add(0);\n                }\n                else \n                {\n                    result.Add(nums[i + 1] - nums[i]);\n                }\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/350","completion":"\n            var set = new HashSet<char>();\n            foreach (var ch in s)\n            {\n                if (set.Contains(ch))\n                    set.Remove(ch);\n                else\n                    set.Add(ch);\n            }\n            return set.Count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/351","completion":"\n            return arr.Select(x => x).FirstOrDefault();\n        }","language":"csharp"}
{"task_id":"MBCSP\/353","completion":"\n            return list1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/354","completion":"\n            int count=0;\n            int[] series = new int[n];\n            series[0] = a;\n            for (int i=1; i < n; i++) {\n                count++;\n                series[i] = series[i-1]+d;\n            }\n            return (series[n-1]);\n        }","language":"csharp"}
{"task_id":"MBCSP\/356","completion":"\n            \/\/Your code here\n            if (a == 90 || a == 180)\n                return b;\n            else if (b == 90 || b == 180)\n                return a;\n            else if (a == 0 || b == 0)\n                return 90;\n            else\n                return 180 - (a + b);\n        }","language":"csharp"}
{"task_id":"MBCSP\/358","completion":"\n            List<int> result = new List<int> ();\n            for (int i = 0; i < nums1.Count; i++) \n            {\n                result.Add(nums1[i] % nums2[i]);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/364","completion":"\n            if (str.Length < 2)\n                return 0;\n\n            var flipCount = 0;\n            for (int i = 0; i < str.Length - 1; i++)\n                if (str[i] == str[i + 1])\n                {\n                    flipCount++;\n                    i++;\n                }\n\n            return flipCount;\n        }","language":"csharp"}
{"task_id":"MBCSP\/366","completion":"\n            if (list_nums == null || list_nums.Count == 0) {\n                return 0;\n            }\n            if (list_nums.Count == 1) {\n                return list_nums[0];\n            }\n            else {\n                var max = list_nums[0] * list_nums[1];\n                for (int i = 1; i < list_nums.Count; i++) {\n                    var current = list_nums[i];\n                    var next = list_nums[i - 1];\n                    max = Math.Max(current * next, max);\n                }\n                return max;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/375","completion":"\n            \/\/  return Math.Round((double) n \/ m) * m;\n            return (int)((double) n \/ m) * m;\n        }","language":"csharp"}
{"task_id":"MBCSP\/380","completion":"\n            List<List<int>> ans = new List<List<int>>();\n            for (int i = 0; i < rownum; i++) {\n                List<int> inner = new List<int>();\n                for (int j = 0; j < colnum; j++) {\n                    inner.Add(i * j);\n                }\n                ans.Add(inner);\n            }\n            return ans;\n        }","language":"csharp"}
{"task_id":"MBCSP\/384","completion":"\n            var min = arr.Min(x => x);\n            return arr.Where(x => x == min).Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/390","completion":"\n            var result = list.Select (obj => string.Format (string0, obj)).ToList ();\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/396","completion":"\n            if (string0.EndsWith(\"a\"))\n            {\n                return string0.StartsWith(\"a\") ? \"Valid\" : \"Invalid\";\n            }\n            else if (string0.EndsWith(\"b\"))\n            {\n                return string0.StartsWith(\"b\") ? \"Valid\" : \"Invalid\";\n            }\n            else\n            {\n                return string0.StartsWith(\"a\") && string0.EndsWith(\"b\") ? \"Valid\" : \"Invalid\";\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/397","completion":"\n            var numbers = new[] {a, b, c};\n\n            var sorted = numbers.OrderByDescending(x => x).ToArray();\n            var middle = sorted.Length \/ 2;\n\n            if (sorted.Length % 2 == 1)\n                return sorted[middle];\n            else\n                return (sorted[middle - 1] + sorted[middle]) \/ 2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/399","completion":"\n            \/\/ 1. Create a new \"output\" tuple.\n            List<int> out_tup = new List<int>();\n            \n            \/\/ 2. For each tuple in the input tuples, perform a bitwise xor operation (^)\n            foreach (var test_tup in test_tup1)\n            {\n                out_tup.Add((int)test_tup ^ (int)test_tup2[test_tup1.IndexOf(test_tup)]);\n            }\n            \n            return out_tup;\n        }","language":"csharp"}
{"task_id":"MBCSP\/409","completion":"\n            var min = -1;\n\n            for (var i = 0; i < list1.Count; i++)\n            {\n                var product = 1;\n                for (var j = 0; j < list1[i].Count; j++)\n                {\n                    product = product * list1[i][j];\n                }\n\n                if (min == -1 || product < min)\n                {\n                    min = product;\n                }\n            }\n\n            return min;\n        }","language":"csharp"}
{"task_id":"MBCSP\/414","completion":"\n            if(list1 == null || list2 == null) return 0;\n            else if(list1.Count < list2.Count) return 0;\n            else if(list1.Count == list2.Count)\n            {\n                foreach(var item in list2)\n                {\n                    if(list1.Any(x => x == item))\n                        return 1;\n                }\n                return 0;\n            }\n            else return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/425","completion":"\n            int count = 0;\n            foreach (object obj in list1) \n            {\n                List<object> list2 = (List<object>)obj;\n                if (list2.Contains(x)) \n                {\n                    count++;\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/427","completion":"\n            Regex r = new Regex(@\"^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)$\");\n            if (r.IsMatch(dt))\n                return r.Replace(dt, \"$3-$2-$1\");\n            else\n                return dt;\n        }","language":"csharp"}
{"task_id":"MBCSP\/433","completion":"\n            if (number >= arr.Count)\n                return \"Yes, the entered number is greater than those in the array\";\n            else\n                return \"No, entered number is less than those in the array\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/436","completion":"\n            \/\/Write your code here\n            \/\/You can use list1.Count() to get the number of elements in the list.\n            \/\/Use if to check if the count is 0, which means that the list is empty.\n            if (list1.Count() == 0)\n            {\n                return 0;\n            }\n\n            for (int i = 0; i < list1.Count(); i++)\n            {\n                if (list1[i] < 0)\n                {\n                    return list1[i];\n                }\n            }\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/443","completion":"\n            var result = list1.OrderByDescending (p => -p).First ();\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/446","completion":"\n            int count = 0;\n            foreach (var t in tup)\n            {\n                foreach (var l in lst)\n                {\n                    if (t.Equals(l))\n                    {\n                        count++;\n                    }\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/450","completion":"\n            List<string> newStr = new List<string>();\n            List<string> result = new List<string>();\n\n            \/\/looping through the array to extract the size of string \n            foreach (String s in str)\n            {\n                \/\/check if the string size is equal to the length of the required size \n                if (s.Length == l)\n                {\n                    newStr.Add(s);\n                }\n            }\n\n            \/\/adding the required strings to the result list \n            foreach (string s in newStr)\n            {\n                result.Add(s);\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/453","completion":"\n            \/\/ write your code here\n            int total = 0;\n            int i = 1;\n            while (i <= n)\n            {\n                if (n % i == 0)\n                {\n                    if (i % 2 == 0)\n                        total += i;\n                }\n                i++;\n            }\n            return total;\n        }","language":"csharp"}
{"task_id":"MBCSP\/456","completion":"\n            List<string> newList = new List<string>();\n\n            foreach (var element in stringlist)\n            {\n                if (!stringlist.Contains(element))\n                {\n                    newList.Add(element);\n                }\n                else\n                {\n                    var temp = element;\n                    var reverse = \"\";\n                    for (var i = temp.Length - 1; i >= 0; i--)\n                    {\n                        reverse += temp[i];\n                    }\n                    newList.Add(reverse);\n                }\n            }\n            return newList;\n        }","language":"csharp"}
{"task_id":"MBCSP\/463","completion":"\n            if (arr.Count == 0)\n                return 0;\n\n            var maxProduct = arr[0];\n            var maxSoFar = arr[0];\n\n            for (int i = 1; i < arr.Count; i++)\n            {\n                var cur = arr[i];\n\n                var left = maxSoFar * cur;\n\n                var right = maxSoFar * cur;\n\n                maxProduct = Math.Max(maxProduct, left);\n                maxProduct = Math.Max(maxProduct, right);\n\n                maxSoFar = Math.Min(maxSoFar, left);\n                maxSoFar = Math.Min(maxSoFar, right);\n            }\n\n            return maxProduct;\n        }","language":"csharp"}
{"task_id":"MBCSP\/464","completion":"\n            foreach (var key in dict.Keys)\n            {\n                if (dict[key] != n)\n                {\n                    return false;\n                }\n            }\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/479","completion":"\n            \/\/ Convert the number to string.\n            string str = n.ToString();\n\n            \/\/ Get the first digit.\n            return Convert.ToInt32(str.Substring(0, 1));\n        }","language":"csharp"}
{"task_id":"MBCSP\/481","completion":"\n            \/\/ Start typing your Java solution below\n            \/\/ DO NOT write main() function\n            if (set.Count == 0 || set.Count == 1)\n            {\n                return false;\n            }\n            \n            if (n == 0)\n            {\n                if (sum == 0)\n                {\n                    return true;\n                }\n                else\n                {\n                    return false;\n                }\n            }\n            \n            if (sum >= set[n - 1])\n            {\n                if (IsSubsetSum (set, n - 1, sum - set[n - 1]))\n                {\n                    return true;\n                }\n            }\n            \n            if (!IsSubsetSum (set, n - 1, sum))\n            {\n                return false;\n            }\n            \n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/491","completion":"\n            \/\/ Calculate the Geometric Progression Series\n            \/\/ Formula: (a * (1 - 1 \/ (1 + n)) ** r) \/ (1 - 1 \/ (1 + n))\n\n            var m = (n - 1) \/ n;\n            var temp = 1;\n            var sum = 0;\n\n            for (int i = 1; i <= n; i++) {\n                sum += temp;\n                temp = (temp - m) * r;\n            }\n\n            return a * sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/501","completion":"\n            int count = 0;\n\n            for (int i = 1; i <= y; i++)\n            {\n                if (x % i == 0 && y % i == 0) \n                {\n                    count++;\n                }\n            }\n\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/509","completion":"\n            var oddNums = Enumerable.Range(1, n).Where(i => i % 2 != 0).Select(i => i).ToList();\n            var sum = 0;\n            var i = 0;\n            while (i < oddNums.Count())\n            {\n                sum += oddNums[i];\n                i++;\n            }\n            return sum \/ oddNums.Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/518","completion":"\n            var root = Math.Sqrt(num);\n            return root;\n        }","language":"csharp"}
{"task_id":"MBCSP\/525","completion":"\n            \/\/ write your code here\n            if (line1.Count == 0 || line2.Count == 0) return false;\n            else if (line1.Count == 1 && line2.Count == 1) return line1[0] == line2[0];\n            else return line1[0] * line2[1] == line1[1] * line2[0];\n        }","language":"csharp"}
{"task_id":"MBCSP\/527","completion":"\n            \/\/ Write your code here\n            int count = 0;\n            for (int i = 0; i < arr.Count; i++)\n            {\n                for (int j = i + 1; j < arr.Count; j++)\n                {\n                    if (arr[i] + arr[j] == sum)\n                    {\n                        count++;\n                    }\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/544","completion":"\n            string flat_string = \"\";\n            foreach (var item in test_list)\n            {\n                foreach (var subItem in item)\n                {\n                    flat_string += subItem + \" \";\n                }\n            }\n            return flat_string.TrimEnd();\n        }","language":"csharp"}
{"task_id":"MBCSP\/554","completion":"\n            return list.Where(x => x % 2 == 1).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/560","completion":"\n            \/\/create a HashSet<int>\n            HashSet<int> set = new HashSet<int>();\n            \/\/set elements from first tuple\n            for (int i = 0; i < test_tup1.Count; i++)\n                set.Add(test_tup1[i]);\n            \/\/set elements from second tuple\n            for (int i = 0; i < test_tup2.Count; i++)\n                set.Add(test_tup2[i]);\n            \/\/convert HashSet<int> to List<int>\n            return new List<int>(set.ToArray());\n        }","language":"csharp"}
{"task_id":"MBCSP\/569","completion":"\n            \/\/ Initialize the result list.\n            List<List<string>> result = new List<List<string>>();\n\n            \/\/ Sort all the lists and save them in the result list.\n            foreach (List<string> list2 in list1)\n            {\n                \/\/ Sort the list.\n                List<string> sortedList = list2.OrderBy(s => s).ToList();\n\n                \/\/ Add the sorted list to the result list.\n                result.Add(sortedList);\n            }\n\n            \/\/ Return the result list.\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/575","completion":"\n            \/\/ write code here\n            int count = 0;\n            for (int i = L; i <= R; i++) \n            {\n                if (i % A != 0)\n                    count++;\n                if (count == N)\n                    return i;\n            }\n            return -1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/578","completion":"\n            if (list1.Count != list2.Count || list1.Count != list3.Count)\n                return null;\n\n            List<int> result = new List<int>();\n\n            int pointer1 = 0;\n            int pointer2 = 0;\n            int pointer3 = 0;\n\n            while (pointer1 < list1.Count) {\n                result.Add(list1[pointer1]);\n                pointer1++;\n                result.Add(list2[pointer2]);\n                pointer2++;\n                result.Add(list3[pointer3]);\n                pointer3++;\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/586","completion":"\n            if (n > a.Count)\n                n = a.Count;\n\n            if (k > n)\n                k = n;\n\n            var l = a.Skip(k).Take(n-k).ToList();\n            l.AddRange(a.Take(k));\n\n            return l;\n        }","language":"csharp"}
{"task_id":"MBCSP\/587","completion":"\n            return listx;\n        }","language":"csharp"}
{"task_id":"MBCSP\/589","completion":"\n            var list = new List<int>();\n            for (int i = a; i <= b; i++)\n            {\n                var sqrt = Math.Sqrt(i);\n                if (sqrt - (int)sqrt == 0)\n                    list.Add(i);\n            }\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/593","completion":"\n            \/\/return (ip.Trim().Replace(\"0\", \"\"));\n            return ip.Trim().Replace(\"0\", \"\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/604","completion":"\n            \/\/ split the string using spaces as a delimiter \n            string[] words = Regex.Split (s, \"\\\\W+\");\n            \/\/ sort the words in reverse order \n            string[] sorted = new string[words.Length];\n            for (int i = 0; i < words.Length; i++)\n                sorted[i] = words[i];\n            string reverseWords = \"\";\n            for (int i = sorted.Length - 1; i >= 0; i--)\n                reverseWords += sorted[i] + \" \";\n            return reverseWords.TrimEnd();\n        }","language":"csharp"}
{"task_id":"MBCSP\/610","completion":"\n            var list2 = list1.ToList();\n            list2.RemoveAt(L - 1);\n            return list2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/611","completion":"\n            \/\/ Initialize the max value as -1\n            int max = -1;\n            \n            \/\/ Iterate through all the tuples in the list\n            for (var i = 0; i < test_list.Count(); i++)\n            {\n                var tuple = test_list[i];\n                var tuple_size = tuple.Count();\n                \n                \/\/ Get the Nth element of the tuple\n                var nth = tuple[N];\n                \n                \/\/ Check if it is the max\n                if (nth > max)\n                {\n                    max = nth;\n                }\n            }\n            \n            return max;\n        }","language":"csharp"}
{"task_id":"MBCSP\/616","completion":"\n            if (test_tup1.Count != test_tup2.Count)\n            {\n                throw new InvalidOperationException(\"Both the tuples must have same length\");\n            }\n\n            List<int> result = new List<int>();\n\n            for (int i = 0; i < test_tup1.Count; i++)\n            {\n                result.Add(test_tup1[i] % test_tup2[i]);\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/645","completion":"\n            int max = 0;\n\n            for (int i = 0; i < test_list.Count; i++) \n            {\n                max = test_list[i].Count;\n\n                for (int j = 0; j < test_list.Count; j++) \n                {\n                    if (test_list[i][j] > max) \n                    {\n                        max = test_list[i][j];\n                    }\n                }\n            }\n\n            int product = 1;\n\n            for (int i = 0; i < test_list.Count; i++) \n            {\n                product *= test_list[i][K];\n            }\n\n            return product;\n        }","language":"csharp"}
{"task_id":"MBCSP\/648","completion":"\n            \/\/ write code here\n            List<int> res = new List<int>();\n\n            for(int i=0; i<lst.Count(); i+=2)\n            {\n                res.Add(lst[i+1]);\n                res.Add(lst[i]);\n            }\n\n            return res;\n        }","language":"csharp"}
{"task_id":"MBCSP\/649","completion":"\n            int sum = 0;\n\n            if (nums.Count == 0)\n                return 0;\n\n            if (m > nums.Count || m < 0)\n                return 0;\n\n            if (n > nums.Count || n < 0)\n                return 0;\n\n            if (m > n)\n                return 0;\n\n            for (int i = m; i <= n; i++)\n                sum += nums[i];\n\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/670","completion":"\n            if (nums.Any())\n            {\n                var min = nums.FirstOrDefault();\n                var max = nums.LastOrDefault();\n                return max - min >= 0;\n            }\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/674","completion":"\n            \/\/ code goes here  \n\n            string[] arr = string0.Split(' ');\n            List<string> unique = new List<string>();\n\n            foreach(string s in arr)\n            {\n                if (!unique.Contains(s))\n                    unique.Add(s);\n            }\n\n            string output = string.Join(\" \", unique);\n            return output;\n        }","language":"csharp"}
{"task_id":"MBCSP\/690","completion":"\n            \/\/ Using a loop to iterate through the list of integers, multiply all of them,\n            \/\/ and then return the resulting list.\n            \/\/ \n            \/\/ There are no restrictions on the length of the list.\n            \/\/ \n            \/\/ If the input is null, or the list is empty, return the empty list.\n            \/\/ \n            \/\/ You can assume the list contains at least one item.\n\n            if (nums == null || nums.Count == 0)\n                return nums;\n\n            var result = new List<int>();\n            for (var i = 1; i < nums.Count; i++)\n                result.Add(nums[i - 1] * nums[i]);\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/705","completion":"\n            List<object> list2 = new List<object>();\n            list2.AddRange(list1);\n            list2.Sort(\n                (o1, o2) =>\n                    ((List<object>)o1).Count - ((List<object>)o2).Count\n            );\n            return list2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/706","completion":"\n            if (m == 0)\n            {\n                if (n == 0) return true;\n                return false;\n            }\n            if (n == 0) return false;\n\n            int elem1 = arr1[m - 1];\n            int elem2 = arr2[n - 1];\n\n            if (elem1 == elem2)\n            {\n                return IsSubset(arr1, m - 1, arr2, n - 1);\n            }\n            return IsSubset(arr1, m - 1, arr2, n) || IsSubset(arr1, m, arr2, n - 1);\n        }","language":"csharp"}
{"task_id":"MBCSP\/710","completion":"\n            var first = test_tup[0];\n            var last = test_tup[test_tup.Count - 1];\n            return new List<int> { first, last };\n        }","language":"csharp"}
{"task_id":"MBCSP\/711","completion":"\n            \/\/ write your code here\n            return n % 2 == 0 ? n \/ 10 == (n - n % 10) \/ 2 : n \/ 10 != (n - n % 10) \/ 2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/726","completion":"\n            List<int> result = new List<int>();\n            for (int i = 0; i < test_tup.Count - 1; i++)\n                result.Add(test_tup[i] * test_tup[i + 1]);\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/728","completion":"\n            var list = new List<int>();\n            foreach(var item in lst1) \n            {\n                list.Add(item + lst2[lst1.IndexOf(item)]);\n            }\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/729","completion":"\n            List<int> list = new List<int>();\n            foreach(int i in nums1)\n            {\n                list.Add(i + nums2[nums1.IndexOf(i)]);\n            }\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/733","completion":"\n            \/\/ Write your code here\n            int first = 0;\n            int last = A.Count - 1;\n            int result = -1;\n            while (first <= last)\n            {\n                int mid = (first + last) \/ 2;\n                if (A[mid] == x)\n                {\n                    result = mid;\n                    last = mid - 1;\n                }\n                else if (A[mid] > x)\n                {\n                    last = mid - 1;\n                }\n                else\n                {\n                    first = mid + 1;\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/736","completion":"\n            if (a.Count == 0)\n                return 0;\n            if (x > a[a.Count - 1])\n                return a.Count;\n\n            int lo = 0;\n            int hi = a.Count - 1;\n\n            while (lo != hi)\n            {\n                int mid = (lo + hi) >> 1;\n\n                if (x > a[mid])\n                    lo = mid + 1;\n                else\n                    hi = mid;\n            }\n\n            return lo;\n        }","language":"csharp"}
{"task_id":"MBCSP\/749","completion":"\n            var nums_int = nums_str.Select(x => Convert.ToInt32(x)).ToArray();\n\n            return nums_int.OrderBy(x => x).Select(x => x).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/751","completion":"\n            int left = 2 * i + 1;\n            int right = 2 * i + 2;\n\n            if (left < arr.Count && arr[i] > arr[left]) {\n                return false;\n            }\n\n            if (right < arr.Count && arr[i] > arr[right]) {\n                return false;\n            }\n\n            if (left < arr.Count && right < arr.Count && arr[left] > arr[right]) {\n                return false;\n            }\n\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/760","completion":"\n            \/\/ Solution 1: Using HashSet\n            HashSet<int> hs = new HashSet<int>();\n            foreach (var i in arr)\n                hs.Add (i);\n\n            if (hs.Count == 1)\n                return \"YES\";\n            else\n                return \"NO\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/762","completion":"\n            bool is30Days = false;\n\n            if ((monthnum3 % 12) == 6) {\n                is30Days = true;\n            }\n            return is30Days;\n        }","language":"csharp"}
{"task_id":"MBCSP\/763","completion":"\n            List<int> sorted = arr.OrderBy(x => x).ToList();\n\n            int minimum = 10000;\n\n            foreach (int i in sorted)\n            {\n                foreach (int j in sorted)\n                {\n                    if (i != j)\n                    {\n                        minimum = Math.Min(minimum, Math.Abs(i - j));\n                    }\n                }\n            }\n\n            return minimum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/764","completion":"\n            if (str == null) \n            {\n                return 0;\n            }\n            var p = Regex.Match(str, @\"([0-9]+)\");\n            return p.Length;\n        }","language":"csharp"}
{"task_id":"MBCSP\/767","completion":"\n            var pairs = 0;\n\n            for (int i = 0; i < arr.Count; i++)\n            {\n                for (int j = i + 1; j < arr.Count; j++)\n                {\n                    if (arr[i] + arr[j] == sum)\n                    {\n                        pairs = pairs + 1;\n                    }\n                }\n            }\n\n            return pairs;\n        }","language":"csharp"}
{"task_id":"MBCSP\/785","completion":"\n            List<int> result = new List<int>();\n            \n            var matches = Regex.Matches (test_str, \"(\\\\d+)\", RegexOptions.IgnoreCase);\n            \n            foreach (Match match in matches)\n            {\n                result.Add (int.Parse (match.Value));\n            }\n            \n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/786","completion":"\n            int left = 0;\n            int right = a.Count - 1;\n            int mid = (left + right) \/ 2;\n            while (left <= right)\n            {\n                if (a[mid] == x)\n                    return mid;\n                if (a[mid] < x)\n                    left = mid + 1;\n                else\n                    right = mid - 1;\n                mid = (left + right) \/ 2;\n            }\n            return left;\n        }","language":"csharp"}
{"task_id":"MBCSP\/790","completion":"\n            if (nums == null)\n                return false;\n            for (int i = 0; i < nums.Count; i += 2) {\n                if (nums[i] % 2 != 0)\n                    return false;\n            }\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/797","completion":"\n            int sum = 0;\n            for (int i = l; i <= r; i++)\n            {\n                if (i % 2 == 1)\n                {\n                    sum += i;\n                }\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/804","completion":" \n            if(n == 0)\n                return true;\n\n            if(n == 1)\n                return false;\n\n            int sum = arr[0] + arr[n-1];\n\n            if(sum == n)\n                return IsProductEven(arr, n-1);\n\n            return IsProductEven(arr, n-1) || IsProductEven(arr, n-2);\n        }","language":"csharp"}
{"task_id":"MBCSP\/805","completion":"\n            List<int> result = lists.FirstOrDefault ();\n            int maxSum = result.Sum ();\n            foreach (var list in lists)\n            {\n                if (list.Sum () > maxSum)\n                {\n                    maxSum = list.Sum ();\n                    result = list;\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/806","completion":"\n            \/\/ Initialize the variables 'count' and 'start' with default values. \n            int count = 0;\n            int start = 0;\n\n            \/\/ Loop through the string and update the value of count and start \n            \/\/ if the current character is an uppercase. \n            for (int i = 0; i < test_str.Length; i++)\n            {\n                if (test_str[i] >= 'A' && test_str[i] <= 'Z')\n                {\n                    count++;\n                    if (count > start)\n                    {\n                        start = count;\n                    }\n                }\n                else\n                {\n                    count = 0;\n                }\n            }\n\n            \/\/ Return the value of start \n            return start;\n        }","language":"csharp"}
{"task_id":"MBCSP\/809","completion":"\n            if (test_tup2.Count != test_tup1.Count)\n            {\n                return false;\n            }\n\n            int i = 0;\n            foreach (var tup1 in test_tup1)\n            {\n                if (test_tup2[i] > tup1)\n                {\n                    return false;\n                }\n                i++;\n            }\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/814","completion":"\n            var area = q * p \/ 2;\n            return area;\n        }","language":"csharp"}
{"task_id":"MBCSP\/816","completion":"\n            \/\/Write your code here.\n            return new List<object>();\n        }","language":"csharp"}
{"task_id":"MBCSP\/821","completion":"\n            Dictionary<string, string> mergedDictionary = new Dictionary<string, string>();\n\n            foreach (KeyValuePair<string, string> item in dict1) \n            {\n                mergedDictionary[item.Key] = item.Value;\n            }\n\n            foreach (KeyValuePair<string, string> item in dict2) \n            {\n                mergedDictionary[item.Key] = item.Value;\n            }\n\n            return mergedDictionary;\n        }","language":"csharp"}
{"task_id":"MBCSP\/825","completion":"\n            var temp_list = new List<int> ();\n            foreach (var i in list_index)\n            {\n                temp_list.Add(nums[i]);\n            }\n            return temp_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/835","completion":"\n            \/\/ write your code here\n            return ((double)(y2-y1)\/(x2-x1));\n        }","language":"csharp"}
{"task_id":"MBCSP\/840","completion":"\n            var root1 = Math.Sqrt(b * b - 4 * a * c);\n            var root2 = (-b + root1) \/ (2 * a);\n            var root3 = (-b - root1) \/ (2 * a);\n            \n            if ((root1 < 0 && root2 < 0 && root3 < 0) || (root1 > 0 && root2 > 0 && root3 > 0))\n            {\n                return \"No\";\n            }\n            else\n            {\n                return \"Yes\";\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/841","completion":"\n            var count = 0;\n            for (int i = 0; i < n - 1; i++)\n            {\n                for (int j = i + 1; j < n; j++)\n                {\n                    if (arr[i] > arr[j])\n                    {\n                        count++;\n                    }\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/850","completion":"\n            \/\/return true if the sum of the angles is less than 180\n            int sum = a + b + c;\n            if (sum > 180) \n                return false;\n\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/853","completion":"\n            int result = 0;\n\n            for (int i = 1; i <= n; i++)\n            {\n                if (n % i == 0)\n                    if (i % 2 != 0) result += i;\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/854","completion":"\n            \/\/ Your code goes here\n            return rawheap;\n        }","language":"csharp"}
{"task_id":"MBCSP\/858","completion":"\n            int count = 0;\n            foreach (var list in input_list)\n            {\n                if (list != null)\n                {\n                    count++;\n                }\n            }\n\n            count = count * count;\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/874","completion":"\n            return Regex.Matches(str1, str2 + \"$\", RegexOptions.None).Count() > 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/876","completion":"\n            \/\/ LCM of two numbers can be calculated using Euclid's method.\n            \/\/ Euclid's algorithm is a method for determining the greatest common divisor of two integers.\n            \/\/ The greatest common divisor of two integers (A, B) is the largest integer that divides both A and B without remainder.\n            \/\/ In other words, the greatest common divisor of 10 and 5 is 5; the greatest common divisor of 15 and 17 is 15.\n\n            int gcd (int a, int b) \n            {\n                \/\/ This function returns the greatest common divisor of two integers.\n                \/\/ Euclid's algorithm is used.\n                while (b > 0) \n                {\n                    int temp = b;\n                    b = a % b;\n                    a = temp;\n                }\n                return a;\n            }\n\n            return gcd(x,y) * (x \/ gcd(x,y)) * (y \/ gcd(x,y));\n        }","language":"csharp"}
{"task_id":"MBCSP\/878","completion":"\n            List<int> tuple = test_tuple;\n\n            for (int i = 0; i < K.Count; i++) {\n                bool found = false;\n                for (int j = 0; j < tuple.Count; j++) {\n                    if (tuple[j] == K[i]) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    return false;\n                }\n            }\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/880","completion":"\n            int d = b*b - 4*a*c;\n            if (d > 0)\n                return \"2 solutions\";\n            if (d == 0)\n                return \"1 solution\";\n            return \"No solutions\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/882","completion":"\n            if (b < 0 || h < 0)\n                throw new ArgumentException(\"Parameters must be >= 0\");\n\n            if (b == 0 && h == 0)\n                throw new ArgumentException(\"Parallelogram must have one side\");\n\n            if (b > 0 && h > 0)\n                return 2 * (b * h);\n\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/884","completion":" \n            for (int i = l; i <= r; i++) \n                if ((n & 1) == 1) \n                    return false; \n\n            return true; \n        }","language":"csharp"}
{"task_id":"MBCSP\/893","completion":"\n            List<object> result = new List<object>();\n\n            foreach (List<object> subList in lst)\n            {\n                result.Add(subList.Last());\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/900","completion":"\n            if (string0.StartsWith(\"5\"))\n            {\n                return true;\n            }\n            if (string0.StartsWith(\"6\"))\n            {\n                return false;\n            }\n            if (string0.StartsWith(\"78910\"))\n            {\n                return false;\n            }\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/907","completion":"\n            int[] numbers = {1, 3, 7, 9, 13, 15, 21, 25, 31, 33};\n            return numbers.Take(n).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/908","completion":"\n            int left = 0, right = n-1, mid;\n\n            while (left <= right) {\n                mid = left + ((right - left) >> 1);\n\n                if (arr[mid] == mid) \n                {\n                    return mid;\n                }\n\n                if (arr[mid] < mid) \n                {\n                    left = mid + 1;\n                } \n                else \n                {\n                    right = mid - 1;\n                }\n            }\n\n            return -1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/918","completion":"\n            if (m == 0)\n                return 0;\n            if (n == 0)\n                return 1;\n            if (m < 0 || n < 0)\n                return 0;\n            return CoinChange(S, m - 1, n) + CoinChange(S, m, n - S[m - 1]);\n        }","language":"csharp"}
{"task_id":"MBCSP\/930","completion":"\n            Regex regex = new Regex(@\"^a(\\w+)b{0,}$\");\n            var matches = regex.Matches(text);\n\n            if (matches.Count == 0) return \"Not matched!\";\n\n            return \"Found a match!\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/933","completion":"\n            return Regex.Replace(text, \n                @\"(?<=[a-z])(?=[A-Z])\", \"_\").ToLowerInvariant();\n        }","language":"csharp"}
{"task_id":"MBCSP\/952","completion":"\n            if (n == 0 || r == 0) return 1;\n            if (r > n - r) r = n - r;\n            int ncr = 1;\n            for (int i = 0; i < r; ++i)\n                ncr = (ncr * (n - i)) \/ (i + 1);\n            return ncr % p;\n        }","language":"csharp"}
{"task_id":"MBCSP\/955","completion":"\n            return ((n > 0) && ((n & 1) == 0) && (n > 2 * (n \/ 3)));\n        }","language":"csharp"}
{"task_id":"MBCSP\/958","completion":"\n            string roman = \"\";\n            int[] values = { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n            string[] numerals = { \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\" };\n\n            int index = 0;\n            while (num > 0) \n            {\n                while (num >= values[index]) \n                {\n                    roman += numerals[index];\n                    num -= values[index];\n                }\n                index++;\n            }\n            return roman;\n        }","language":"csharp"}
{"task_id":"MBCSP\/962","completion":"\n            \/\/ return the sum of all even natural numbers within the range l and r.\n            \/\/ your code goes here.\n            \/\/ NOTE: \n            \/\/  1. A number is even if and only if it's divisible by 2.\n            \/\/  2. The return statement should be within a function.\n\n            int sum = 0;\n            for (int i = l; i <= r; i++)\n            {\n                if (i % 2 == 0)\n                    sum += i;\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/968","completion":"\n            var result = Math.Abs (A - B);\n            if (result == N)\n                return N;\n            else if (result > N)\n                return 0;\n            else\n                return result + FloorMax (A, B + N, N);\n        }","language":"csharp"}
{"task_id":"MBCSP\/4","completion":"\n            \/\/ write your code here\n            return nums.OrderByDescending(x => x).Take(n).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/54","completion":"\n            \/\/ write your code here\n            return my_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/121","completion":"\n            \/\/ write your code here\n            int i = 0;\n            int j = 0;\n            int k = 0;\n            int temp = 0;\n            while (i < A.Count) {\n                j = i + 1;\n                k = A.Count - 1;\n                while (j < k) {\n                    if (A[i] + A[j] + A[k] == sum) {\n                        if (count == 0) {\n                            return true;\n                        }\n                        else {\n                            count--;\n                        }\n                    }\n                    j++;\n                    k--;\n                }\n                i++;\n            }\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/222","completion":"\n            \/\/ write your code here\n            return test_tuple.All(x => x.GetType() == test_tuple[0].GetType());\n        }","language":"csharp"}
{"task_id":"MBCSP\/283","completion":"\n            \/\/ write your code here\n            int[] arr = new int[10];\n            for (int i = 0; i < 10; i++)\n            {\n                arr[i] = 0;\n            }\n            for (int i = 0; i < n; i++)\n            {\n                arr[n % 10]++;\n                n \/= 10;\n            }\n            for (int i = 0; i < 10; i++)\n            {\n                if (arr[i] > i)\n                {\n                    return false;\n                }\n            }\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/344","completion":"\n            \/\/ write your code here\n            return (int)Math.Sqrt(m) - (int)Math.Sqrt(n);\n        }","language":"csharp"}
{"task_id":"MBCSP\/381","completion":"\n            \/\/ write your code here\n            return list_data.OrderBy(x => x[index_no]).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/424","completion":"\n            \/\/ write your code here\n            return test_tuple.Select(x => x.Substring(x.Length - 1)).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/496","completion":"\n            \/\/ write your code here\n            return nums.OrderBy(x => x).Take(n).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/695","completion":"\n            return test_tup2.Where(x => test_tup1.IndexOf(x) > test_tup1.IndexOf(test_tup2.First())).Any();\n        }","language":"csharp"}
{"task_id":"MBCSP\/716","completion":"\n            \/\/ write your code here\n            return (a * 2) + (a * 2);\n        }","language":"csharp"}
{"task_id":"MBCSP\/771","completion":"\n            \/\/ write your code here\n            return exp.Length % 2 == 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/14","completion":"\n            return ((l * b * h) \/ 2);\n        }","language":"csharp"}
{"task_id":"MBCSP\/29","completion":"\n            int result = -1;\n            for (int i = 0; i < arr_size; i++)\n            {\n                int count = 0;\n                for (int j = 0; j < arr_size; j++)\n                {\n                    if (arr[i] == arr[j])\n                    {\n                        count++;\n                    }\n                }\n                if (count % 2 != 0)\n                {\n                    result = arr[i];\n                    break;\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/30","completion":"\n            int result = 0;\n            int n = s.Length;\n            for (int i = 0; i < n; i++)\n            {\n                for (int j = 1; j < n - i + 1; j++)\n                {\n                    if (s[i] == s[i + j - 1])\n                    {\n                        result++;\n                    }\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/34","completion":"\n            int l = 0;\n            int r = N - 1;\n            while (l <= r) \n            {\n                int mid = (l + r) \/ 2;\n                mid = (int)mid;\n                if (ar[mid] != mid + 1 && ar[mid - 1] == mid) \n                {\n                    return (mid + 1);\n                }\n                else if (ar[mid] != mid + 1) \n                {\n                    r = mid - 1;\n                }\n                else \n                {\n                    l = mid + 1;\n                }\n            }\n            return (-1);\n        }","language":"csharp"}
{"task_id":"MBCSP\/35","completion":"\n            return n * (n + 1) ;\n        }","language":"csharp"}
{"task_id":"MBCSP\/38","completion":"\n            return (list1.FirstOrDefault(x => x % 2 == 0) \/ list1.FirstOrDefault(x => x % 2 != 0));\n        }","language":"csharp"}
{"task_id":"MBCSP\/47","completion":"\n            \/\/ write your code here\n            int variable = 1;\n            if (A == B) \n            {\n                return 1;\n            }\n            else if ((B - A) >= 5) \n            {\n                return 0;\n            }\n            else \n            {\n                for (int i = A + 1; i < B + 1; i++) \n                {\n                    variable = (variable * (i % 10)) % 10;\n                }\n                return variable % 10;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/48","completion":"\n            int count = 0;\n            int res = 0;\n            int temp = n;\n            while (temp > 0)\n            {\n                if (count % 2 == 0)\n                    res |= (1 << count);\n                count++;\n                temp >>= 1;\n            }\n            return (n | res);\n        }","language":"csharp"}
{"task_id":"MBCSP\/59","completion":"\n            return 3 * n * n - 2 * n ;\n        }","language":"csharp"}
{"task_id":"MBCSP\/60","completion":"\n            var mls = new List<int>();\n            var max = 0;\n            for (int i = 0; i < n; i++)\n                mls.Add(1);\n            for (int i = 0; i < n; i++)\n                for (int j = i - 1; j >= 0; j--)\n                    if (Math.Abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1)\n                        mls[i] = mls[j] + 1;\n            for (int i = 0; i < n; i++)\n                if (max < mls[i])\n                    max = mls[i];\n            return max;\n        }","language":"csharp"}
{"task_id":"MBCSP\/78","completion":"\n            if (n % 2 != 0) \n                return (n + 1) \/ 2.0;\n            double count = BitConverter.ToInt32(BitConverter.GetBytes(n), 0);\n            return n \/ 2.0 + (count % 2 != 0 ? 1 : 0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/80","completion":"\n            return (n * (n + 1) * (n + 2)) \/ 6;\n        }","language":"csharp"}
{"task_id":"MBCSP\/84","completion":"\n            if (n == 1 || n == 2) \n                return 1;\n            else \n                return Sequence(Sequence(n-1)) + Sequence(n-Sequence(n-1));\n        }","language":"csharp"}
{"task_id":"MBCSP\/89","completion":"\n            return (N - 1);\n        }","language":"csharp"}
{"task_id":"MBCSP\/103","completion":"\n            if (m >= n || n == 0) \n                return 0;\n            if (m == 0) \n                return 1;\n            return ((n - m) * EulerianNum(n - 1, m - 1) + (m + 1) * EulerianNum(n - 1, m));\n        }","language":"csharp"}
{"task_id":"MBCSP\/107","completion":"\n            \/\/ write your code here\n            int count = 0;\n            for (int i = L; i <= R; i++)\n            {\n                if (i >= 10 && i <= 15)\n                {\n                    count++;\n                }\n                else if (i > 15)\n                {\n                    int k = i;\n                    while (k != 0)\n                    {\n                        if (k % 16 >= 10)\n                        {\n                            count++;\n                        }\n                        k = k \/ 16;\n                    }\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/109","completion":"\n            int count = 0;\n            for (int i = 0; i < n; i++)\n            {\n                if (s[i] == '1')\n                {\n                    count++;\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/110","completion":"\n            List<List<int>> res = new List<List<int>>();\n            for (int i = 0; i < test_list.Count; i++)\n            {\n                if (test_list[i][0] > strt_val)\n                {\n                    res.Add(new List<int> { strt_val, test_list[i][0] });\n                    strt_val = test_list[i][1];\n                }\n                if (strt_val < stop_val)\n                {\n                    res.Add(new List<int> { strt_val, stop_val });\n                }\n            }\n            return res;\n        }","language":"csharp"}
{"task_id":"MBCSP\/119","completion":"\n            int XOR = 0;\n            for (int i = 0; i < n; i++)\n                XOR = XOR ^ arr[i];\n            return (XOR);\n        }","language":"csharp"}
{"task_id":"MBCSP\/134","completion":"\n            int _sum = 0;\n            foreach (var i in arr) \n            {\n                _sum += i;\n            }\n            if (p == 1) \n            {\n                if (_sum % 2 == 0) \n                {\n                    return \"ODD\";\n                }\n                else \n                {\n                    return \"EVEN\";\n                }\n            }\n            return \"EVEN\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/147","completion":"\n            \/\/ write your code here\n            return tri[0][0];\n        }","language":"csharp"}
{"task_id":"MBCSP\/155","completion":"\n            int res = 0;\n            int count = 0;\n            int temp = n;\n            while (temp > 0)\n            {\n                if (count % 2 == 1)\n                {\n                    res = res | (1 << count);\n                }\n                count++;\n                temp >>= 1;\n            }\n            return n ^ res;\n        }","language":"csharp"}
{"task_id":"MBCSP\/159","completion":"\n            if (month == \"January\" || month == \"February\" || month == \"March\")\n                return \"winter\";\n            if (month == \"April\" || month == \"May\" || month == \"June\")\n                return \"spring\";\n            if (month == \"July\" || month == \"August\" || month == \"September\")\n                return \"summer\";\n            return \"autumn\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/169","completion":"\n            if (n <= 2) \n                return n;\n            int a = 1;\n            int b = 2;\n            for (int i = 3; i <= n; i++) \n            {\n                int c = 2 * b + a;\n                a = b;\n                b = c;\n            }\n            return b;\n        }","language":"csharp"}
{"task_id":"MBCSP\/177","completion":"\n            if (2 * L <= R) \n            {\n                return new List<int> { L, 2 * L };\n            }\n            else\n            {\n                return new List<int> { -1 };\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/179","completion":"\n            var terms = new List<int>();\n            var temp = x;\n            var n = 0;\n            while (temp > 0)\n            {\n                terms.Add(temp % 10);\n                temp = temp \/ 10;\n                n++;\n            }\n            terms.Reverse();\n            var nextTerm = 0;\n            var i = n;\n            while (nextTerm < x)\n            {\n                nextTerm = 0;\n                for (int j = 1; j <= n; j++)\n                {\n                    nextTerm += terms[i - j];\n                }\n                terms.Add(nextTerm);\n                i++;\n            }\n            return nextTerm == x;\n        }","language":"csharp"}
{"task_id":"MBCSP\/183","completion":"\n            int count = 0;\n            for (int i = 0; i < n; i++)\n            {\n                for (int j = i + 1; j < n; j++)\n                {\n                    if (arr[i] - arr[j] == k || arr[j] - arr[i] == k)\n                        count++;\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/190","completion":"\n            return ((y2 - y1 - 1) * (x2 - x1 - 1));\n        }","language":"csharp"}
{"task_id":"MBCSP\/205","completion":"\n            return test_tup.Select(x => ~x).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/233","completion":"\n            double lateralsurface = 2 * 3.1415 * r * h;\n            return lateralsurface;\n        }","language":"csharp"}
{"task_id":"MBCSP\/235","completion":"\n            int count = 0;\n            int res = 0;\n            int temp = n;\n            while (temp > 0) \n            {\n                if (count % 2 == 1) \n                {\n                    res |= (1 << count);\n                }\n                count++;\n                temp >>= 1;\n            }\n            return (n | res);\n        }","language":"csharp"}
{"task_id":"MBCSP\/236","completion":"\n            if (N < K)\n                return -1;\n            else\n                return (int)((((N - K + 1) * (N - K + 2)) \/ 2) + ((N - 2 * K + 1) * (N - 2 * K + 2)) \/ 2);\n        }","language":"csharp"}
{"task_id":"MBCSP\/241","completion":"\n            List<List<List<string>>> array_3d = new List<List<List<string>>>();\n            for (int i = 0; i < o; i++) \n            {\n                List<List<string>> inner_array_3d = new List<List<string>>();\n                for (int j = 0; j < n; j++) \n                {\n                    List<string> inner_inner_array_3d = new List<string>();\n                    for (int k = 0; k < m; k++) \n                    {\n                        inner_inner_array_3d.Add(new string(\"*\"));\n                    }\n                    inner_array_3d.Add(inner_inner_array_3d);\n                }\n                array_3d.Add(inner_array_3d);\n            }\n            return array_3d;\n        }","language":"csharp"}
{"task_id":"MBCSP\/246","completion":"\n            if (number == 0)\n                return 0;\n            double g = number \/ 2.0;\n            double g2 = g + 1;\n            while (g != g2) {\n                double n = number \/ g;\n                g2 = g;\n                g = (g + n) \/ 2;\n            }\n            return g;\n        }","language":"csharp"}
{"task_id":"MBCSP\/260","completion":"\n            if (n == 0 || n == 1) \n                return 1;\n            return 2 * NewmanPrime(n - 1) + NewmanPrime(n - 2);\n        }","language":"csharp"}
{"task_id":"MBCSP\/266","completion":"\n            return 4 * (l * l);\n        }","language":"csharp"}
{"task_id":"MBCSP\/268","completion":"\n            return (6 * n * (n - 1) + 1);\n        }","language":"csharp"}
{"task_id":"MBCSP\/271","completion":"\n            int sum = 0; \n            for (int i = 1; i <= n; i++) \n            {\n                int j = 2 * i; \n                sum = sum + (j * j * j * j * j); \n            }\n            return sum; \n        }","language":"csharp"}
{"task_id":"MBCSP\/274","completion":"\n            \/\/ write your code here\n            return (1 << (n - 1));\n        }","language":"csharp"}
{"task_id":"MBCSP\/279","completion":"\n            return 4 * n * n - 3 * n ;\n        }","language":"csharp"}
{"task_id":"MBCSP\/286","completion":"\n            int max_so_far = -2147483648;\n            int max_ending_here = 0;\n            for (int i = 0; i < n * k; i++) \n            {\n                max_ending_here += a[i % n];\n                if (max_so_far < max_ending_here) \n                {\n                    max_so_far = max_ending_here;\n                }\n                if (max_ending_here < 0) \n                {\n                    max_ending_here = 0;\n                }\n            }\n            return max_so_far;\n        }","language":"csharp"}
{"task_id":"MBCSP\/287","completion":"\n            return (int)(2*n*(n+1)*(2*n+1)\/3);\n        }","language":"csharp"}
{"task_id":"MBCSP\/288","completion":"\n            int current_element = 0;\n            for (int i = 0; i < N; i++)\n            {\n                if ((arr[i] * arr[i]) % P == 1)\n                {\n                    current_element = current_element + 1;\n                }\n            }\n            return current_element;\n        }","language":"csharp"}
{"task_id":"MBCSP\/293","completion":"\n            double s=Math.Sqrt((w*w)+(h*h));\n            return s;\n        }","language":"csharp"}
{"task_id":"MBCSP\/300","completion":"\n            var nCr = 1;\n            var res = 1;\n            for (int r = 1; r <= n; r++)\n            {\n                nCr = (nCr * (n + 1 - r)) \/ r;\n                res += nCr * nCr;\n            }\n            return res;\n        }","language":"csharp"}
{"task_id":"MBCSP\/303","completion":"\n            int mx = -Int32.MaxValue;\n            for (int j = 1; j < n; j++)\n            {\n                if (mx > a[j])\n                    return false;\n                mx = Math.Max(mx, a[j - 1]);\n            }\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/304","completion":"\n            for (int i = rotations - 1; i >= 0; i--) \n            {\n                int left = ranges[i][0];\n                int right = ranges[i][1];\n                if (left <= index && right >= index) \n                {\n                    if (index == left) \n                    {\n                        index = right;\n                    }\n                    else \n                    {\n                        index = index - 1;\n                    }\n                }\n            }\n            return arr[index];\n        }","language":"csharp"}
{"task_id":"MBCSP\/311","completion":"\n            if (n == 0)\n                return 0;\n            int pos = 0;\n            int temp = n;\n            int count = 0;\n            while (temp != 0) \n            {\n                if ((temp & 1) == 0)\n                    pos = count;\n                count++;\n                temp >>= 1;\n            }\n            return (n | (1 << (pos)));\n        }","language":"csharp"}
{"task_id":"MBCSP\/313","completion":"\n            foreach (var num in list1)\n            {\n                if (num >= 0)\n                    return num;\n            }\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/315","completion":"\n            \/\/ Create a string of all the words in the string.\n            string[] words = str.Split(' ');\n\n            \/\/ Create a list of all the even-length words.\n            List<string> evenWords = new List<string>();\n            foreach (string word in words)\n            {\n                if (word.Length % 2 == 0)\n                    evenWords.Add(word);\n            }\n\n            \/\/ If there are no even-length words, return \"-1\".\n            if (evenWords.Count == 0)\n                return \"-1\";\n\n            \/\/ Otherwise, find the first even-length word.\n            string firstEvenWord = evenWords[0];\n            foreach (string evenWord in evenWords)\n            {\n                if (evenWord.Length > firstEvenWord.Length)\n                    firstEvenWord = evenWord;\n            }\n\n            \/\/ Return the first even-length word.\n            return firstEvenWord;\n        }","language":"csharp"}
{"task_id":"MBCSP\/325","completion":"\n            if (n <= 3)\n                return n;\n            int res = n;\n            for (int x = 1; x < n + 1; x++)\n            {\n                int temp = x * x;\n                if (temp > n)\n                    break;\n                else\n                    res = Math.Min(res, 1 + GetMinSquares(n - temp));\n            }\n            return res;\n        }","language":"csharp"}
{"task_id":"MBCSP\/330","completion":"\n            List<string> result = new List<string>();\n            Regex regex = new Regex(@\"(\\b\\w{3,5}\\b)\");\n            MatchCollection matches = regex.Matches(text);\n            foreach (Match match in matches)\n            {\n                result.Add(match.Value);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/336","completion":"\n            return monthname1 == \"February\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/339","completion":"\n            if (x == y) \n                return y;\n            return 2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/346","completion":"\n            if (n == 0 && k == 0) \n                return 1;\n            if (k == 0) \n                return 0;\n            return Zigzag(n, k - 1) + Zigzag(n - 1, n - k);\n        }","language":"csharp"}
{"task_id":"MBCSP\/355","completion":"\n            int rectangles = 0;\n            int diameter = 2 * radius;\n            int diameterSquare = diameter * diameter;\n            for (int a = 1; a < 2 * radius; a++)\n            {\n                for (int b = 1; b < 2 * radius; b++)\n                {\n                    int diagnalLengthSquare = (a * a + b * b);\n                    if (diagnalLengthSquare <= diameterSquare)\n                        rectangles++;\n                }\n            }\n            return rectangles;\n        }","language":"csharp"}
{"task_id":"MBCSP\/359","completion":"\n            if (2 * b * b == 9 * a * c) \n            {\n                return \"Yes\";\n            }\n            else\n            {\n                return \"No\";\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/369","completion":"\n            return 2 * h * (l + w);\n        }","language":"csharp"}
{"task_id":"MBCSP\/383","completion":"\n            int res = 0;\n            int count = 0;\n            int temp = n;\n            while (temp > 0) \n            {\n                if (count % 2 == 0) \n                {\n                    res = res | (1 << count);\n                }\n                count++;\n                temp >>= 1;\n            }\n            return n ^ res;\n        }","language":"csharp"}
{"task_id":"MBCSP\/385","completion":"\n            if (n == 0)\n                return 3;\n            if (n == 1)\n                return 0;\n            if (n == 2)\n                return 2;\n            return GetPerrin(n - 2) + GetPerrin(n - 3);\n        }","language":"csharp"}
{"task_id":"MBCSP\/386","completion":"\n            int count_left = 0;\n            int count_right = 0;\n            int swap = 0;\n            int imbalance = 0; \n            foreach (char c in s)\n            {\n                if (c == '[')\n                    count_left += 1;\n                else if (c == ']')\n                    count_right += 1;\n                else\n                    continue;\n                if (imbalance > 0)\n                    swap += imbalance;\n                imbalance = (count_right - count_left);\n            }\n            return swap;\n        }","language":"csharp"}
{"task_id":"MBCSP\/415","completion":"\n            if (arr.Count < 2) \n            {\n                return new List<int>();\n            }\n            int x = arr[0];\n            int y = arr[1];\n            for (int i = 0; i < arr.Count; i++) \n            {\n                for (int j = i + 1; j < arr.Count; j++) \n                {\n                    if (arr[i] * arr[j] > x * y) \n                    {\n                        x = arr[i];\n                        y = arr[j];\n                    }\n                }\n            }\n            return new List<int> { x, y };\n        }","language":"csharp"}
{"task_id":"MBCSP\/420","completion":"\n            int sum = 0;\n            for (int i = 1; i <= n; i++)\n            {\n                sum += (2 * i) * (2 * i) * (2 * i);\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/430","completion":"\n            return (int) (c - ((b * b) + 1) * 4 * a );\n        }","language":"csharp"}
{"task_id":"MBCSP\/448","completion":"\n            int a = 3;\n            int b = 0;\n            int c = 2;\n            if (n == 0)\n                return 3;\n            if (n == 1)\n                return 3;\n            if (n == 2)\n                return 5;\n            int sum = 5;\n            while (n > 2)\n            {\n                int d = a + b;\n                sum = sum + d;\n                a = b;\n                b = c;\n                c = d;\n                n = n - 1;\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/449","completion":"\n            return (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2)) == 0 ? \"No\" : \"Yes\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/471","completion":"\n            int mul = 1;\n            for (int i = 0; i < lens; i++)\n            {\n                mul = (mul * (arr[i] % n)) % n;\n            }\n            return mul % n;\n        }","language":"csharp"}
{"task_id":"MBCSP\/488","completion":"\n            double area = (Math.Sqrt(5 * (5 + 2 * Math.Sqrt(5))) * (a * a)) \/ 4.0;\n            return area;\n        }","language":"csharp"}
{"task_id":"MBCSP\/524","completion":"\n            int max = 0;\n            int[] msis = new int[n];\n            for (int i = 0; i < n; i++)\n                msis[i] = arr[i];\n            for (int i = 1; i < n; i++)\n                for (int j = 0; j < i; j++)\n                    if (arr[i] > arr[j] && msis[i] < msis[j] + arr[i])\n                        msis[i] = msis[j] + arr[i];\n            for (int i = 0; i < n; i++)\n                if (max < msis[i])\n                    max = msis[i];\n            return max;\n        }","language":"csharp"}
{"task_id":"MBCSP\/529","completion":"\n            \/\/ Create an array to store the results.\n            int[] dp = new int[n + 1];\n\n            \/\/ Initialize the first two values.\n            dp[0] = 2;\n            dp[1] = 1;\n\n            \/\/ Fill in the rest of the values.\n            for (int i = 2; i <= n; i++)\n                dp[i] = dp[i - 1] + 2 * dp[i - 2];\n\n            return dp[n];\n        }","language":"csharp"}
{"task_id":"MBCSP\/531","completion":"\n            if (V == 0) \n                return 0;\n            var res = Int32.MaxValue;\n            for (int i = 0; i < m; i++) \n            {\n                if (coins[i] <= V) \n                {\n                    var subRes = MinCoins(coins, m, V - coins[i]);\n                    if (subRes != Int32.MaxValue && subRes + 1 < res) \n                        res = subRes + 1;\n                }\n            }\n            return res;\n        }","language":"csharp"}
{"task_id":"MBCSP\/535","completion":"\n            return 3.1415 * r * r;\n        }","language":"csharp"}
{"task_id":"MBCSP\/537","completion":"\n            var temp = new HashSet<string>();\n            var regex = new Regex(@\"(\\w+)\");\n            foreach (Match match in regex.Matches(str1))\n            {\n                if (temp.Contains(match.Value))\n                    return match.Value;\n                temp.Add(match.Value);\n            }\n            return \"None\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/549","completion":"\n            int j = 0;\n            int sm = 0;\n            for (int i = 1; i <= n; i++)\n            {\n                j = (2 * i - 1);\n                sm = sm + (j * j * j * j * j);\n            }\n            return sm;\n        }","language":"csharp"}
{"task_id":"MBCSP\/556","completion":"\n            int oddPair = 0;\n            for (int i = 0; i < N; i++)\n            {\n                for (int j = i + 1; j < N; j++)\n                {\n                    if ((A[i] ^ A[j]) % 2 != 0)\n                    {\n                        oddPair++;\n                    }\n                }\n            }\n            return oddPair;\n        }","language":"csharp"}
{"task_id":"MBCSP\/564","completion":"\n            \/\/Write your code here\n            int cnt = 0; \n            for (int i = 0; i < n; i++)\n            {\n                for (int j = i + 1; j < n; j++)\n                {\n                    if (arr[i] != arr[j])\n                    {\n                        cnt++;\n                    }\n                }\n            }\n            return cnt;\n        }","language":"csharp"}
{"task_id":"MBCSP\/568","completion":"\n            List<Dictionary<object, object>> list = new List<Dictionary<object, object>>();\n            for (int i = 0; i < length; i++)\n            {\n                list.Add(new Dictionary<object, object>());\n            }\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/574","completion":"\n            return ((2*3.1415*r*r) +(2*3.1415*r*h));\n        }","language":"csharp"}
{"task_id":"MBCSP\/577","completion":"\n            if (n == 0) return 1;\n            if (n <= 2) return n;\n            if (n == 3) return 6;\n            if (n == 4) return 4;\n            else return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/594","completion":"\n            return (list1.First(x => x % 2 == 0) - list1.First(x => x % 2 != 0));\n        }","language":"csharp"}
{"task_id":"MBCSP\/595","completion":"\n            int count = 0;\n            for (int i = 0; i < str1.Length; i++)\n            {\n                if (str1[i] != str2[i])\n                {\n                    count++;\n                }\n            }\n            if (count % 2 == 0)\n            {\n                return count \/ 2;\n            }\n            else\n            {\n                return \"Not Possible\";\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/602","completion":"\n            var charSet = new HashSet<char>();\n            foreach (char c in str1)\n            {\n                if (charSet.Contains(c))\n                    return c.ToString();\n                charSet.Add(c);\n            }\n            return \"None\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/603","completion":"\n            List<int> ludics = new List<int>();\n            for (int i = 1; i <= n; i++)\n                ludics.Add(i);\n            int index = 1;\n            while (index != ludics.Count) {\n                int first_ludic = ludics[index];\n                int remove_index = index + first_ludic;\n                while (remove_index < ludics.Count) {\n                    ludics.RemoveAt(remove_index);\n                    remove_index = remove_index + first_ludic - 1;\n                }\n                index += 1;\n            }\n            return ludics;\n        }","language":"csharp"}
{"task_id":"MBCSP\/609","completion":"\n            int x = Math.Max(B - 1, N);\n            return (A * x) \/ B;\n        }","language":"csharp"}
{"task_id":"MBCSP\/634","completion":"\n            int sum = 0; \n            for (int i = 1; i <= n; i++) \n            {\n                int j = 2 * i; \n                sum = sum + (j * j * j * j); \n            }\n            return sum; \n        }","language":"csharp"}
{"task_id":"MBCSP\/636","completion":"\n            if (a == c) \n                return (\"Yes\"); \n            else \n                return (\"No\"); \n        }","language":"csharp"}
{"task_id":"MBCSP\/641","completion":"\n            return (int) (n * (7 * n - 5) \/ 2);\n        }","language":"csharp"}
{"task_id":"MBCSP\/646","completion":"\n            int No = 0;\n            No = (N - K + 1);\n            No = (No * No * No);\n            return No;\n        }","language":"csharp"}
{"task_id":"MBCSP\/656","completion":"\n            a.Sort();\n            b.Sort();\n            int sum = 0;\n            for (int i = 0; i < n; i++)\n                sum += Math.Abs(a[i] - b[i]);\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/657","completion":"\n            int fact = 1;\n            for (int i = 2; i <= n; i++)\n            {\n                fact = fact * i;\n                while (fact % 10 == 0)\n                {\n                    fact = fact \/ 10;\n                }\n            }\n            while (fact >= 10)\n            {\n                fact = fact \/ 10;\n            }\n            return fact;\n        }","language":"csharp"}
{"task_id":"MBCSP\/660","completion":"\n            int x = Math.Min(l1,l2);\n            int y = Math.Max(r1,r2);\n            return new List<int> {x,y};\n        }","language":"csharp"}
{"task_id":"MBCSP\/663","completion":"\n            int ans = -1;\n            for (int k = 1; k <= n; k++) \n            {\n                if (k % x == y) \n                {\n                    ans = Math.Max(ans, k);\n                }\n            }\n            return ans;\n        }","language":"csharp"}
{"task_id":"MBCSP\/677","completion":"\n            int total = a + b + c;\n            if (total == 180)\n                return true;\n            else\n                return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/699","completion":"\n            int count = 0;\n            for (int i = 0; i < str1.Length; i++)\n            {\n                if (str1[i] != str2[i])\n                {\n                    count++;\n                }\n            }\n            if (count % 2 == 0)\n            {\n                return count \/ 2;\n            }\n            else\n            {\n                return \"Not Possible\";\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/701","completion":"\n            if (arr.Count < 2)\n                return -1;\n            int total_sum = arr.Sum(x => x);\n            int left_sum = 0;\n            for (int i = 0; i < arr.Count; i++)\n            {\n                total_sum -= arr[i];\n                if (left_sum == total_sum)\n                    return i;\n                left_sum += arr[i];\n            }\n            return -1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/714","completion":"\n            int m = n;\n            int count = 0;\n            int i = 2;\n            while ((i * i) <= m)\n            {\n                int total = 0;\n                while (n % i == 0)\n                {\n                    n \/= i;\n                    total += 1;\n                }\n                int temp = 0;\n                int j = 1;\n                while ((temp + j) <= total)\n                {\n                    temp += j;\n                    count += 1;\n                    j += 1;\n                }\n                i += 1;\n            }\n            if (n != 1)\n            {\n                count += 1;\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/734","completion":"\n            int ans = 0;\n            int res = 0;\n            int i = n - 1;\n            while (i >= 0)\n            {\n                int incr = arr[i] * (1 + res);\n                ans += incr;\n                res = incr;\n                i -= 1;\n            }\n            return ans;\n        }","language":"csharp"}
{"task_id":"MBCSP\/742","completion":"\n            double area = Math.Sqrt(3) * (side * side);\n            return area;\n        }","language":"csharp"}
{"task_id":"MBCSP\/752","completion":"\n            \/\/ <summary> \n            \/\/ Initialize dp array.\n            \/\/ <\/summary>\n            int[] dp = new int[n + 1];\n            dp[0] = 0;\n            dp[1] = 1;\n            for (int i = 2; i <= n; i++) \n            {\n                dp[i] = dp[i - 1] + 2 * dp[i - 2];\n            }\n            return dp[n];\n        }","language":"csharp"}
{"task_id":"MBCSP\/753","completion":"\n            return test_list.OrderBy(x => x.Last()).Take(K).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/770","completion":"\n            int j = 0;\n            int sm = 0;\n            for (int i = 1; i <= n; i++)\n            {\n                j = (2*i-1);\n                sm += j * j * j * j;\n            }\n            return sm;\n        }","language":"csharp"}
{"task_id":"MBCSP\/784","completion":"\n            return (list1.FirstOrDefault(x => x % 2 == 0) * list1.FirstOrDefault(x => x % 2 != 0));\n        }","language":"csharp"}
{"task_id":"MBCSP\/801","completion":"\n            var result = new HashSet<int>();\n            result.Add(x);\n            result.Add(y);\n            result.Add(z);\n            if (result.Count == 3)\n                return 0;\n            else\n                return (4 - result.Count);\n        }","language":"csharp"}
{"task_id":"MBCSP\/819","completion":"\n            List<List<int>> result = new List<List<int>>();\n            List<int> element = new List<int>();\n            List<int> frequency = new List<int>();\n            if (lists.Count == 0)\n                return result;\n            int running_count = 1;\n            for (int i = 0; i < lists.Count - 1; i++)\n            {\n                if (lists[i] == lists[i + 1])\n                    running_count++;\n                else\n                {\n                    frequency.Add(running_count);\n                    element.Add(lists[i]);\n                    running_count = 1;\n                }\n            }\n            frequency.Add(running_count);\n            element.Add(lists[lists.Count - 1]);\n            result.Add(element);\n            result.Add(frequency);\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/826","completion":"\n            var sqa = Math.Pow(a,2);\n            var sqb = Math.Pow(b,2);\n            var sqc = Math.Pow(c,2);\n            if (sqa == sqa + sqb || sqb == sqa + sqc || sqc == sqa + sqb) \n                return (\"Right-angled Triangle\");\n            else if (sqa > sqc + sqb || sqb > sqa + sqc || sqc > sqa + sqb) \n                return (\"Obtuse-angled Triangle\");\n            else \n                return (\"Acute-angled Triangle\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/837","completion":"\n            int sum = 0;\n            for (int i = 0; i < n; i++)\n                sum += (2 * i + 1) * (2 * i + 1) * (2 * i + 1);\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/844","completion":"\n            int[] arr = new int[n];\n            int i = 0;\n            int odd = 1;\n            while (odd <= n)\n            {\n                arr[i] = odd;\n                i += 1;\n                odd += 2;\n            }\n            int even = 2;\n            while (even <= n)\n            {\n                arr[i] = even;\n                i += 1;\n                even += 2;\n            }\n            return arr[k - 1];\n        }","language":"csharp"}
{"task_id":"MBCSP\/846","completion":"\n            arr.Sort();\n            dep.Sort();\n            int plat_needed = 1;\n            int result = 1;\n            int i = 1;\n            int j = 0;\n            while (i < n && j < n)\n            {\n                if (arr[i] <= dep[j])\n                {\n                    plat_needed += 1;\n                    i++;\n                }\n                else if (arr[i] > dep[j])\n                {\n                    plat_needed -= 1;\n                    j++;\n                }\n                if (plat_needed > result)\n                {\n                    result = plat_needed;\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/849","completion":"\n            int[] SumOfPrimeDivisors = new int[N + 1];\n            for (int i = 2; i <= N; i++)\n            {\n                if (SumOfPrimeDivisors[i] == 0)\n                {\n                    for (int j = i; j <= N; j += i)\n                    {\n                        SumOfPrimeDivisors[j] += i;\n                    }\n                }\n            }\n            return SumOfPrimeDivisors[N];\n        }","language":"csharp"}
{"task_id":"MBCSP\/856","completion":"\n            \/\/ write your code here\n            int[] noOfZeroes = new int[n];\n            int count = 0;\n            noOfZeroes[n - 1] = 1 - arr[n - 1];\n            for (int i = n - 2; i >= 0; i--) {\n                noOfZeroes[i] = noOfZeroes[i + 1];\n                if (arr[i] == 0) {\n                    noOfZeroes[i] = noOfZeroes[i] + 1;\n                }\n            }\n            for (int i = 0; i < n; i++) {\n                if (arr[i] == 1) {\n                    count = count + noOfZeroes[i];\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/867","completion":"\n            var odd = 0;\n            foreach (var i in arr)\n            {\n                if (i % 2 == 1)\n                    odd += 1;\n            }\n            if (odd % 2 == 1)\n                return 1;\n            return 2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/871","completion":"\n            \/\/ Create a string with the first string concatenated with itself.\n            string temp = string1 + string1;\n            \/\/ Check if the second string is a substring of the first string.\n            return (temp.IndexOf(string2) != -1);\n        }","language":"csharp"}
{"task_id":"MBCSP\/883","completion":"\n            return nums.Where(x => (x % m == 0 && x % n == 0)).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/890","completion":"\n            for (int i = 0; i < n; i++) \n            {\n                if (arr1[i] != arr2[i]) \n                    return i;\n            }\n            return n;\n        }","language":"csharp"}
{"task_id":"MBCSP\/903","completion":"\n            int cnt = 0;\n            for (int i = 1; i <= n; i++)\n            {\n                int temp = i;\n                while (temp > 0)\n                {\n                    if ((temp & 1) == 0)\n                    {\n                        cnt++;\n                    }\n                    temp = temp >> 1;\n                }\n            }\n            return cnt;\n        }","language":"csharp"}
{"task_id":"MBCSP\/905","completion":"\n            int factorial(int start, int end) \n            {\n                int res = 1;\n                for (int i = start; i <= end; i++) \n                    res *= i;\n                return res;\n            }\n            return factorial(n + 1, 2 * n) \/ factorial(1, n);\n        }","language":"csharp"}
{"task_id":"MBCSP\/906","completion":"\n            var regex = new Regex(@\"(\\d{4})\/(\\d{1,2})\/(\\d{1,2})\/\");\n            var matches = regex.Matches(url);\n            return matches.Select(m => new List<string> { m.Groups[1].Value, m.Groups[2].Value, m.Groups[3].Value }).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/916","completion":"\n            \/\/ write your code here\n            List<int> result = new List<int>();\n            for (int i = 0; i < arr_size - 2; i++) \n            {\n                for (int j = i + 1; j < arr_size - 1; j++) \n                {\n                    for (int k = j + 1; k < arr_size; k++) \n                    {\n                        if (A[i] + A[j] + A[k] == sum) \n                        {\n                            result.Add(A[i]);\n                            result.Add(A[j]);\n                            result.Add(A[k]);\n                            return result;\n                        }\n                    }\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/923","completion":"\n            if (m == 0) return n;\n            if (n == 0) return m;\n            if (X[m - 1] == Y[n - 1]) return 1 + SuperSeq(X, Y, m - 1, n - 1);\n            return 1 + Math.Min(SuperSeq(X, Y, m - 1, n),\tSuperSeq(X, Y, m, n - 1));\n        }","language":"csharp"}
{"task_id":"MBCSP\/934","completion":"\n            if (m == 0 || n == 0) \n            {\n                return 1;\n            }\n            return DealnnoyNum(m - 1, n) + DealnnoyNum(m - 1, n - 1) + DealnnoyNum(m, n - 1);\n        }","language":"csharp"}
{"task_id":"MBCSP\/936","completion":"\n            var temp = new Dictionary<int, int>();\n            foreach (var item in test_list)\n            {\n                temp[item[0]] = item[1];\n            }\n            var res = new List<List<int>>();\n            foreach (var item in ord_list)\n            {\n                res.Add(new List<int> { item, temp[item] });\n            }\n            return res;\n        }","language":"csharp"}
{"task_id":"MBCSP\/944","completion":"\n            \/\/ Create a Regex object that will find all the numbers in the string.\n            Regex regex = new Regex(@\"(\\d+)\");\n\n            \/\/ Find all the matches in the string.\n            MatchCollection matches = regex.Matches(text);\n\n            \/\/ Loop through all the matches.\n            foreach (Match m in matches)\n            {\n                \/\/ Return the position of the match.\n                return m.Index;\n            }\n\n            \/\/ If we didn't find any matches, return -1.\n            return -1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/953","completion":"\n            int res = 0;\n            ar.Sort();\n            for (int i = 0; i < n; i++)\n            {\n                int count = 1;\n                for (int j = i + 1; j < n; j++)\n                {\n                    if (ar[i] == ar[j])\n                    {\n                        count++;\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n                res = Math.Max(res, count);\n            }\n            return res;\n        }","language":"csharp"}
{"task_id":"MBCSP\/956","completion":"\n            \/\/ Create a Regex object for splitting the string.\n            Regex regex = new Regex(@\"([A-Z][^A-Z]*)\");\n            \/\/ Create a MatchCollection object for the string.\n            MatchCollection matches = regex.Matches(text);\n            \/\/ Create a list to store the results.\n            List<string> result = new List<string>();\n            \/\/ Loop through the matches.\n            foreach (Match match in matches)\n            {\n                \/\/ Get the group value.\n                string group = match.Groups[0].Value;\n                \/\/ Add the group to the list.\n                result.Add(group);\n            }\n            \/\/ Return the list.\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/957","completion":"\n            return Math.Log2(n&-n)+1.0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/960","completion":"\n            if (n == 0)\n                return 0;\n            if (n == 1)\n                return 1;\n            return GetNoOfways(n - 1) + GetNoOfways(n - 2);\n        }","language":"csharp"}
{"task_id":"MBCSP\/1","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/2","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/5","completion":"\n            \/\/ Your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/9","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/13","completion":"\n            \/\/ TODO: Write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/15","completion":"\n            List<string> result = new List<string>();\n            var regex = new Regex(@\"([a-z])\");\n            foreach (Match match in regex.Matches(text))\n            {\n                result.Add(match.Value);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/24","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/31","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/36","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/39","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/42","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/50","completion":"\n            var min_length = 1;\n            var min_list = input_list.FirstOrDefault();\n            foreach (var list in input_list)\n            {\n                if (list.Length &lt; min_length)\n                {\n                    min_length = list.Length;\n                    min_list = list;\n                }\n            }\n            return new List<object> {min_length, min_list};\n        }","language":"csharp"}
{"task_id":"MBCSP\/55","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/56","completion":"\n            \/\/ write your code here\n            return (n % 2 == 0) && (n < (n \/ 2));\n        }","language":"csharp"}
{"task_id":"MBCSP\/57","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/61","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/63","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/65","completion":"\n            \/\/ If the list is empty, return 0.\n            if (data_list.Count () == 0)\n                return 0;\n\n            \/\/ Get the first element of the list.\n            var first_element = data_list.First ();\n\n            \/\/ If the first element is a list, call the function recursively.\n            if (Types.IsObject (first_element))\n                return RecursiveListSum (first_element) + RecursiveListSum (data_list.Remove (first_element));\n\n            \/\/ If the first element is not a list, return the first element.\n            return first_element;\n        }","language":"csharp"}
{"task_id":"MBCSP\/67","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/69","completion":"\n            \/\/ write your code here\n            return l.Contains(s);\n        }","language":"csharp"}
{"task_id":"MBCSP\/73","completion":"\n            Regex regex = new Regex(@\"(?<!\\\\w)[\\\\s\\\\S]*?(?=\\\\w)\");\n            List<string> list = regex.Split(text);\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/74","completion":"\n            \/\/ 1. Create a list of all the colors that are in the patterns list.\n            \/\/ 2. Create a list of all the colors that are in the colors list.\n            \/\/ 3. Create a list of all the colors that are in both lists.\n            \/\/ 4. Create a list of all the colors that are in the patterns list but not in the colors list.\n            \/\/ 5. Create a list of all the colors that are in the colors list but not in the patterns list.\n            \/\/ 6. Create a list of all the colors that are in both lists but not in the other list.\n            \/\/ 7. Create a list of all the colors that are in the patterns list but not in the colors list.\n            \/\/ 8. Create a list of all the colors that are in the colors list but not in the patterns list.\n            \/\/ 9. Create a list of all the colors that are in both lists but not in the other list.\n            \/\/ 10. Create a list of all the colors that are in the patterns list but not in the colors list.\n            \/\/ 11.","language":"csharp"}
{"task_id":"MBCSP\/75","completion":"\n            var result = new List<List<int>>();\n            foreach (var item in test_list)\n            {\n                if (item.Count % K == 0)\n                {\n                    result.Add(item);\n                }\n            }\n            return result.Select(x => string.Join(\", \", x)).ToArray();\n        }","language":"csharp"}
{"task_id":"MBCSP\/76","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/81","completion":"\n            \/\/ write your code here\n            List<List<int>> result = new List<List<int>>();\n            int i = 0;\n            int j = 0;\n            while (i < test_tup1.Count && j < test_tup2.Count)\n            {\n                List<int> temp = new List<int>();\n                temp.Add(test_tup1[i]);\n                temp.Add(test_tup2[j]);\n                result.Add(temp);\n                i++;\n                j++;\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/83","completion":"\n            string result = \"\";\n            foreach (char c in strr)\n            {\n                result += c;\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/100","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/108","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/111","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/114","completion":"\n            \/\/ write your code here\n            \/\/ 1. create a frequency map\n            \/\/ 2. iterate through the list\n            \/\/ 3. if the tuple has a length of 3, add the tuple to the map\n            \/\/ 4. if the tuple has a length of 2, add the tuple to the map\n            \/\/ 5. if the tuple has a length of 1, add the tuple to the map\n            \/\/ 6. if the tuple has a length of 0, add the tuple to the map\n            \/\/ 7. return the map as a string\n            var freq_map = new Dictionary<int int=\"\">();\n            foreach (var tuple in test_list)\n            {\n                if (tuple.Length == 3)\n                {\n                    freq_map.Add(tuple[0], tuple[1]);\n                }\n                else if (tuple.Length == 2)\n                {\n                    freq_map.Add(tuple[0], tuple[1]);\n                }\n                else if (tuple.Length == 1","language":"csharp"}
{"task_id":"MBCSP\/115","completion":"\n            return (list1.Count == 0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/117","completion":"\n            string result = \"[\";\n            foreach (var item in test_list)\n            {\n                result += \"(\" + ConvertToFloat(item[0]) + \", \" + ConvertToFloat(item[1]) + \"), \";\n            }\n            result = result.TrimEnd(\", \");\n            result += \"]\";\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/122","completion":"\n            \/\/ Your code goes here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/123","completion":"\n            \/\/ write your code here\n            int sum = 0;\n            for (int i = 1; i < limit; i++) {\n                if (IsAmicable(i)) {\n                    sum += i;\n                }\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/125","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/129","completion":"\n            \/\/ TODO: Write your code here.\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/130","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/131","completion":"\n            \/\/ Create a string of vowels\n            string vowels = \"aeiouAEIOU\";\n\n            \/\/ Create a string of the same length as the input string\n            string reversed = new string (str1.Length);\n\n            \/\/ Loop through the input string\n            for (int i = 0; i < str1.Length; i++)\n            {\n                \/\/ If the character at the current index is a vowel,\n                \/\/ then add it to the reversed string\n                if (vowels.IndexOf(str1[i]) != -1)\n                    reversed += str1[i];\n            }\n\n            \/\/ Return the reversed string\n            return reversed;\n        }","language":"csharp"}
{"task_id":"MBCSP\/136","completion":"\n            double electricityBill = 0;\n            if (units >= 0 && units <= 50) {\n                electricityBill = 0.0;\n            }\n            else if (units >= 51 && units <= 100) {\n                electricityBill = (units - 50) * 0.5;\n            }\n            else if (units >= 101 && units <= 200) {\n                electricityBill = (units - 100) * 0.5 + 50;\n            }\n            else if (units >= 201 && units <= 500) {\n                electricityBill = (units - 200) * 0.5 + 100;\n            }\n            else if (units >= 501 && units <= 1000) {\n                electricityBill = (units - 500) * 0.5 + 150;\n            }\n            else if (units >= 1001 && units ","language":"csharp"}
{"task_id":"MBCSP\/137","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/142","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/143","completion":"\n            \/\/Write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/146","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/148","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/149","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/152","completion":"\n            \/\/ If the array is empty or has one element, return it\n            if (x.Count == 0 || x.Count == 1) \n                return x;\n\n            \/\/ Find the middle of the array\n            int middle = x.Count \/ 2;\n\n            \/\/ Split the array into two halves\n            List<int> left = MergeSort(x.Skip(middle));\n            List<int> right = MergeSort(x.Skip(middle).Take(x.Count - middle));\n\n            \/\/ Merge the two halves\n            return Merge(left, right);\n        }","language":"csharp"}
{"task_id":"MBCSP\/153","completion":"\n            \/\/ TODO: Write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/157","completion":"\n            var list2 = new List<object>();\n            var list3 = new List<object>();\n            var list4 = new List<object>();\n            var list5 = new List<object>();\n            var list6 = new List<object>();\n            var list7 = new List<object>();\n            var list8 = new List<object>();\n            var list9 = new List<object>();\n            var list10 = new List<object>();\n            var list11 = new List<object>();\n            var list12 = new List<object>();\n            var list13 = new List<object>();\n            var list14 = new List<object>();\n            var list15 = new List<object>();\n            var list16 = new List<object>();\n            var list17 = new List<object>();\n            var list18 = new List<object>();\n            var list19 = new List<object>();\n            var list20 = new List<object>();\n            var list21 = new List<object>();\n            var list22 = new List<object>();\n            var list","language":"csharp"}
{"task_id":"MBCSP\/158","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/160","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/163","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/165","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/180","completion":"\n            \/\/ Convert latitude and longitude to radians\n            double lat1 = Convert.ToDouble(slat);\n            double lon1 = Convert.ToDouble(slon);\n            double lat2 = Convert.ToDouble(elat);\n            double lon2 = Convert.ToDouble(elon);\n            double R = 6371; \/\/ km\n            double dLat = deg2rad(lat2-lat1);\n            double dLon = deg2rad(lon2-lon1);\n            double a = Math.sin(dLat\/2) * Math.sin(dLat\/2) +\n                    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\n                    Math.sin(dLon\/2) * Math.sin(dLon\/2);\n            double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n            double d = R * c;\n            return d;\n        }","language":"csharp"}
{"task_id":"MBCSP\/182","completion":"\n            List<list>> result = new List<list>>();\n            List<string> list = new List<string>();\n            List<string> list1 = new List<string>();\n            List<string> list2 = new List<string>();\n            List<string> list3 = new List<string>();\n            List<string> list4 = new List<string>();\n            List<string> list5 = new List<string>();\n            List<string> list6 = new List<string>();\n            List<string> list7 = new List<string>();\n            List<string> list8 = new List<string>();\n            List<string> list9 = new List<string>();\n            List<string> list10 = new List<string>();\n            List<string> list11 = new List<string>();\n            List<string> list12 = new List<string>();\n            List<string> list13 = new List<string>();\n            List<string> list14 = new List<string>();\n            List<string> list15 = new List<string>();\n            List","language":"csharp"}
{"task_id":"MBCSP\/185","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/189","completion":"\n            \/\/ Create a set of all the positive integers in the array\n            Set<int> positiveIntegers = new HashSet<int>();\n            foreach (var i in arr)\n            {\n                if (i > 0)\n                {\n                    positiveIntegers.Add(i);\n                }\n            }\n\n            \/\/ Create a set of all the integers in the array that are not positive integers\n            Set<int> negativeIntegers = new HashSet<int>();\n            foreach (var i in arr)\n            {\n                if (i &lt; 0)\n                {\n                    negativeIntegers.Add(i);\n                }\n            }\n\n            \/\/ Find the difference between the two sets\n            Set<int> missingPositiveIntegers = new HashSet<int>(positiveIntegers);\n            missingPositiveIntegers.removeAll(negativeIntegers);\n\n            \/\/ If there are no missing positive integers, return 1\n            if (missingPositiveIntegers.Count == 0)\n            {\n                return 1;\n            }\n\n           ","language":"csharp"}
{"task_id":"MBCSP\/194","completion":"\n            \/\/ Convert octal to decimal\n            return Convert.ToInt32(n, 8);\n        }","language":"csharp"}
{"task_id":"MBCSP\/198","completion":"\n            \/\/ TODO: Write your code here.\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/200","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/206","completion":"\n            List<string> result = new List<string>();\n            for (int i = 0; i &lt; test_tup.Count; i++)\n            {\n                result.Add(test_tup[i]);\n                for (int j = i + 1; j &lt; test_tup.Count; j++)\n                {\n                    result.Add(test_tup[j].Substring(0, test_tup[i].Length + 1));\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/207","completion":"\n            \/\/ Create a dictionary to store the count of each character in the string.\n            Dictionary<char int=\"\"> dict = new Dictionary<char int=\"\">();\n            for (int i = 0; i &lt; str.Length; i++)\n            {\n                char ch = str[i];\n                if (dict.ContainsKey(ch))\n                {\n                    dict[ch] += 1;\n                }\n                else\n                {\n                    dict[ch] = 1;\n                }\n            }\n\n            \/\/ Create a list to store the longest repeating subsequences.\n            List<list>> list = new List<list>>();\n\n            \/\/ Create a list to store the current longest repeating subsequences.\n            List<string> current = new List<string>();\n\n            \/\/ Create a list to store the current longest repeating subsequences.\n            List<string> previous = new List<string>();\n\n            \/\/ Loop through the dictionary.\n            for (int i = 0; i &lt; str.Length; i++)\n            {","language":"csharp"}
{"task_id":"MBCSP\/215","completion":"\n            List<object> result = new List<object>();\n            int count = 0;\n            for (int i = 0; i &lt; alist.Count; i++) \n            {\n                if (alist[i] == null) \n                {\n                    count++;\n                } \n                else \n                {\n                    if (count > 0) \n                    {\n                        result.Add(new List<object>(alist[i - count]));\n                    } \n                    else \n                    {\n                        result.Add(alist[i]);\n                    }\n                    count = 0;\n                }\n            }\n            if (count > 0) \n            {\n                result.Add(new List<object>(alist[alist.Count - count]));\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/216","completion":"\n            \/\/ write your code here\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/217","completion":"\n            \/\/ Create a dictionary to store the characters and their counts.\n            Dictionary<string int=\"\"> charCounts = new Dictionary<string int=\"\">();\n\n            \/\/ Loop through the string and increment the count of each character.\n            foreach (char c in str)\n            {\n                if (charCounts.ContainsKey(c))\n                    charCounts[c]++;\n                else\n                    charCounts.Add(c, 1);\n            }\n\n            \/\/ Find the first character that has a count of more than one.\n            foreach (char c in charCounts)\n            {\n                if (charCounts[c] > 1)\n                    return c;\n            }\n\n            \/\/ If we get here, no characters have been repeated.\n            return \"\\0\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/218","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/219","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/230","completion":"\n            \/\/ write your code here\n            return str1.Replace(\" \", char);\n        }","language":"csharp"}
{"task_id":"MBCSP\/231","completion":"\n            \/\/ Write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/237","completion":"\n            Dictionary<List<int>, int> result = new Dictionary<List<int>, int>();\n            for (int i = 0; i < test_list.Count; i++) \n            {\n                List<int> tuple = test_list[i];\n                int count = 1;\n                for (int j = i + 1; j < test_list.Count; j++) \n                {\n                    if (tuple.Equals(test_list[j])) \n                    {\n                        count++;\n                        test_list[j] = new List<int>(tuple.First, tuple.Second);\n                    }\n                }\n                result.Add(tuple, count);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/238","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/239","completion":"\n            \/\/ Your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/243","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/245","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/247","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/254","completion":"\n            List<string> result = new List<string>();\n            Regex regex = new Regex(@\"a|e\");\n            foreach (Match match in regex.Matches(text))\n            {\n                result.Add(match.Value);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/255","completion":"\n            \/\/ write your code here\n            List<list>> result = new List<list>>();\n            List<string> temp = new List<string>();\n            for (int i = 0; i &lt; l.Count; i++) {\n                temp.Add(l[i]);\n                if (temp.Count == n) {\n                    result.Add(temp);\n                    temp.Clear();\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/256","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/259","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/262","completion":"\n            \/\/ write your code here\n            List<object> list2 = new List<object>();\n            List<object> list3 = new List<object>();\n            int i = 0;\n            int j = 0;\n            while (i &lt; list1.Count)\n            {\n                if (j == L)\n                {\n                    j = 0;\n                    list2.Add(list1[i]);\n                }\n                else\n                {\n                    list3.Add(list1[i]);\n                    j++;\n                }\n                i++;\n            }\n            list2.AddRange(list3);\n            return list2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/265","completion":"\n            List<object> result = new List<object>();\n            int size = S.Count;\n            int count = 0;\n            for (int i = 0; i &lt; size; i += step) \n            {\n                result.Add(S.Take(i, step));\n                count += step;\n            }\n            if (count &lt; size) \n            {\n                result.Add(S.Skip(count));\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/267","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/275","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/278","completion":"\n            \/\/Write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/280","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/282","completion":"\n            return nums1.Select(x => nums2.Select(y => x - y)).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/289","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/290","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/291","completion":"\n            if (n < 2)\n                return 0;\n\n            int[] dp = new int[n + 1];\n            dp[0] = 1;\n            dp[1] = 1;\n\n            for (int i = 2; i <= n; i++)\n            {\n                dp[i] = 0;\n\n                for (int j = 1; j <= k; j++)\n                {\n                    if (j == 1)\n                        dp[i] += dp[i - 1];\n                    else\n                        dp[i] += dp[i - 1] * dp[i - 1 - j];\n                }\n            }\n\n            return dp[n];\n        }","language":"csharp"}
{"task_id":"MBCSP\/294","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/297","completion":"\n            List<int> list2 = new List<int>();\n            foreach (var item in list1)\n            {\n                if (item is List)\n                {\n                    list2.AddRange(FlattenList(item));\n                }\n                else\n                {\n                    list2.Add(item);\n                }\n            }\n            return list2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/298","completion":"\n            \/\/ write your code here\n            List<object> result = new List<object>();\n            for (int i = 0; i &lt; l1.Count; i++)\n            {\n                for (int j = 0; j &lt; l2.Count; j++)\n                {\n                    if (l1[i] == l2[j])\n                    {\n                        result.Add(l1[i]);\n                    }\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/299","completion":"\n            \/\/Write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/301","completion":"\n            \/\/ Your code goes here.\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/305","completion":"\n            \/\/ write your code here\n            return words.Where(x => x.StartsWith(\"p\")).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/306","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/307","completion":"\n            \/\/ write your code here\n            List<object> tuple = new List<object>();\n            for (int i = 0; i &lt; tuplex.Count; i++)\n            {\n                tuple.Add(tuplex[i]);\n                if (i == m - 1)\n                {\n                    tuple.Add(n);\n                }\n                else if (i == m)\n                {\n                    tuple.Add(0);\n                }\n                else\n                {\n                    tuple.Add(0);\n                }\n            }\n            return tuple;\n        }","language":"csharp"}
{"task_id":"MBCSP\/308","completion":"\n            \/\/ TODO: Write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/310","completion":"\n            \/\/ write your code here\n            List<string> list = new List<string>();\n            foreach (char c in str1)\n            {\n                list.Add(c.ToString());\n            }\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/314","completion":"\n            \/\/ Your code goes here.\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/317","completion":"\n            List<object> result = new List<object>();\n            int count = 0;\n            int current = 0;\n            for (int i = 0; i &lt; alist.Length; i++)\n            {\n                if (alist[i] != alist[i - 1])\n                {\n                    if (count > 0)\n                    {\n                        result.Add(new List<object>(alist[current], count));\n                    }\n                    current = i;\n                    count = 0;\n                }\n                count++;\n            }\n            if (count > 0)\n            {\n                result.Add(new List<object>(alist[current], count));\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/318","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/321","completion":"\n            \/\/ Create a regex to match the demlo number\n            Regex regex = new Regex(@\"(?<=\\d{6})(?=\\d{5})(?=\\d{4})(?=\\d{3})(?=\\d{2})(?=\\d{1})\");\n\n            \/\/ Find the demlo number\n            return regex.Match(s).Value;\n        }","language":"csharp"}
{"task_id":"MBCSP\/324","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/326","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/328","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/332","completion":"\n            Dictionary<string int=\"\"> freq = new Dictionary<string int=\"\">();\n\n            \/\/ Create a regular expression object for the string.\n            Regex regex = new Regex(@\"[^a-zA-Z0-9]\");\n\n            \/\/ Replace all non-alphanumeric characters with empty string.\n            string str = regex.Replace(str1, \"\");\n\n            \/\/ Create a list of characters.\n            List<string> list = new List<string>(str.ToCharArray());\n\n            \/\/ Create a list of characters that are not alphanumeric.\n            List<string> list2 = new List<string>(str.ToCharArray().Where(c => !IsLetterOrDigit(c)));\n\n            \/\/ Create a dictionary of characters and their frequency.\n            Dictionary<string int=\"\"> dict = new Dictionary<string int=\"\">();\n\n            foreach (string c in list)\n            {\n                if (dict.ContainsKey(c))\n                {\n                    dict[c] += 1;\n                }\n                else\n                {\n                    dict[c] = 1;\n                ","language":"csharp"}
{"task_id":"MBCSP\/338","completion":"\n            \/\/ Create a regex pattern to match the first and last characters of a string.\n            Regex regex = new Regex(@\"^(.)(.)$\");\n\n            \/\/ Create a list of matches for the regex pattern.\n            List<match> matches = regex.Matches(s);\n\n            \/\/ Return the count of matches.\n            return matches.Count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/340","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/342","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/343","completion":"\n            \/\/ Create a list to hold the results.\n            List<int> results = new List<int>();\n\n            \/\/ Create a regex to match the digits and letters.\n            Regex regex = new Regex(@\"(\\d+)|([a-zA-Z]+)\");\n\n            \/\/ Match the regex against the string.\n            MatchCollection matches = regex.Matches(s);\n\n            \/\/ Loop through the matches.\n            foreach (Match m in matches)\n            {\n                \/\/ Get the number of digits.\n                int digits = (int)m.Groups[0].Value;\n\n                \/\/ Get the number of letters.\n                int letters = (int)m.Groups[1].Value.Length;\n\n                \/\/ Add the results to the list.\n                results.Add(digits);\n                results.Add(letters);\n            }\n\n            \/\/ Return the list of results.\n            return results;\n        }","language":"csharp"}
{"task_id":"MBCSP\/347","completion":"\n            \/\/ Your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/348","completion":"\n            \/\/ 1. Initialize prefix sums array.\n            int[] prefixSums = new int[M + 1];\n            prefixSums[0] = 0;\n            for (int i = 1; i <= M; i++) {\n                prefixSums[i] = prefixSums[i - 1] + i;\n            }\n\n            \/\/ 2. Initialize result.\n            int result = 0;\n\n            \/\/ 3. Find all possible sequences of length M.\n            for (int i = 1; i <= M; i++) {\n                for (int j = 1; j <= M; j++) {\n                    if (i == j) {\n                        result++;\n                    } else {\n                        int sum = prefixSums[j] - prefixSums[i - 1];\n                        if (sum >= 0) {\n                            result++;\n                        }\n                    }\n                }\n            }","language":"csharp"}
{"task_id":"MBCSP\/360","completion":"\n            \/\/ Your code goes here.\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/361","completion":"\n            List<object> list2 = new List<object>();\n            foreach (var item in list1)\n            {\n                if (item != null)\n                {\n                    if (item.Count > 0)\n                    {\n                        list2.Add(item);\n                    }\n                }\n            }\n            return list2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/362","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/370","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/372","completion":"\n            \/\/ Create a heap of the given size.\n            var heap = new List<int>();\n            for (int i = 0; i < nums.Count; i++)\n                heap.Add(nums[i]);\n\n            \/\/ Sort the heap.\n            while (heap.Count > 1)\n            {\n                var temp = heap.First;\n                heap.RemoveAt(0);\n                var temp2 = heap.First;\n                heap.RemoveAt(0);\n                var temp3 = heap.First;\n                heap.RemoveAt(0);\n                var temp4 = heap.First;\n                heap.RemoveAt(0);\n                var temp5 = heap.First;\n                heap.RemoveAt(0);\n                var temp6 = heap.First;\n                heap.RemoveAt(0);\n                var temp7 = heap.First;\n                heap.RemoveAt(0);\n                var temp8 = heap.First;\n                heap.RemoveAt(0);\n                var temp9 = heap.First;\n                heap.RemoveAt(","language":"csharp"}
{"task_id":"MBCSP\/374","completion":"\n            List<string> result = new List<string>();\n            PermuteStringRecursive(str, result, \"\");\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/376","completion":"\n            \/\/Write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/378","completion":"\n            return test_list.Reverse();\n        }","language":"csharp"}
{"task_id":"MBCSP\/382","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/393","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/395","completion":"\n            \/\/ Create a dictionary to store the characters and their counts.\n            Dictionary<string int=\"\"> charCounts = new Dictionary<string int=\"\">();\n\n            \/\/ Loop through the string and increment the count for each character.\n            for (int i = 0; i &lt; str1.Length; i++)\n            {\n                charCounts[str1[i]]++;\n            }\n\n            \/\/ Loop through the string again and return the first character that has a count of 1.\n            for (int i = 0; i &lt; str1.Length; i++)\n            {\n                if (charCounts[str1[i]] == 1)\n                {\n                    return str1[i];\n                }\n            }\n\n            \/\/ If we get here, there are no characters that have a count of 1.\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/398","completion":"\n            \/\/ TODO: Write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/400","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/402","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/407","completion":"\n            if (n < 10)\n                return n;\n            var s = String.Empty;\n            while (n > 0)\n            {\n                s = s + n % 10;\n                n = n \/ 10;\n            }\n            var result = 0;\n            for (var i = 0; i < s.Length; i++)\n                result = result * 10 + s[i];\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/408","completion":"\n            \/\/ write your code here\n            List<List<int>> result = new List<List<int>>();\n            if (nums1.Count == 0 || nums2.Count == 0 || k > nums1.Count * nums2.Count)\n                return result;\n            int[] arr1 = new int[nums1.Count];\n            int[] arr2 = new int[nums2.Count];\n            for (int i = 0; i < nums1.Count; i++)\n                arr1[i] = nums1[i];\n            for (int i = 0; i < nums2.Count; i++)\n                arr2[i] = nums2[i];\n            QuickSort(arr1, 0, nums1.Count - 1);\n            QuickSort(arr2, 0, nums2.Count - 1);\n            int i = 0, j = 0;\n            while (i < nums1.Count && j < nums2.Count && k > ","language":"csharp"}
{"task_id":"MBCSP\/410","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/411","completion":"\n            Regex regex = new Regex(@\"^[a-z]+([A-Z][a-z]+)*$\");\n            if (regex.IsMatch(word))\n            {\n                string[] words = word.Split(' ');\n                string camelWord = words[0];\n                foreach (string w in words.Skip(1))\n                {\n                    camelWord += w.ToUpper();\n                }\n                return camelWord;\n            }\n            else\n            {\n                return word;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/416","completion":"\n            if (n == 0)\n                return 0;\n            if (n == 1)\n                return 1;\n            if (n == 2)\n                return 2;\n            if (n == 3)\n                return 3;\n            if (n == 4)\n                return 4;\n            if (n == 5)\n                return 5;\n            if (n == 6)\n                return 6;\n            if (n == 7)\n                return 7;\n            if (n == 8)\n                return 8;\n            if (n == 9)\n                return 9;\n            if (n == 10)\n                return 10;\n            if (n == 11)\n                return 11;\n            if (n == 12)\n                return 12;\n            if (n == 13)\n                return 13;\n            if (n == 14)\n                return 14;\n","language":"csharp"}
{"task_id":"MBCSP\/417","completion":"\n            \/\/Write your code here\n            List<List<string>> result = new List<List<string>>();\n            for (List<string> list : Input) {\n                List<string> temp = new List<string>();\n                for (int i = 0; i &lt; list.Count; i++) {\n                    if (i == 0) {\n                        temp.Add(list[i]);\n                    } else {\n                        if (temp.Count == 0) {\n                            temp.Add(list[i]);\n                        } else {\n                            if (temp.First == list[i]) {\n                                temp.Add(list[i]);\n                            } else {\n                                result.Add(temp);\n                                temp = new List<string>();\n                                temp.Add(list[i]);\n                            }\n                        }\n                    }\n                }\n                if (temp.Count > 0) {\n                    result.Add","language":"csharp"}
{"task_id":"MBCSP\/418","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/419","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/423","completion":"\n            \/\/ write your code here\n            int[][] dp = new int[m][n];\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    dp[i][j] = 0;\n                }\n            }\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (gold[i][j] > 0) {\n                        dp[i][j] = gold[i][j];\n                    }\n                }\n            }\n            for (int i = 1; i < m; i++) {\n                for (int j = 1; j < n; j++) {\n                    if (gold[i][j] > 0) {\n                        dp[i][j] = Math.max(dp[i","language":"csharp"}
{"task_id":"MBCSP\/429","completion":"\n            \/\/ write your code here\n            List<int> result = new List<int>();\n            for (int i = 0; i &lt; test_tup1.Count; i++) {\n                for (int j = 0; j &lt; test_tup2.Count; j++) {\n                    if (test_tup1[i] == test_tup2[j]) {\n                        result.Add(test_tup1[i]);\n                    }\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/431","completion":"\n            \/\/ Your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/437","completion":"\n            \/\/ Create a Regex object that will match all odd characters\n            Regex regex = new Regex(@\"(?i)[^aeiou]{1}\");\n\n            \/\/ Replace all odd characters with an empty string\n            return regex.Replace(str1, \"\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/438","completion":"\n            \/\/ Write your code here.\n            int count = 0;\n            for (int i = 0; i < test_list.Count; i++) {\n                for (int j = 0; j < test_list.Count; j++) {\n                    if (test_list[i][0] == test_list[j][1] && test_list[i][1] == test_list[j][0]) {\n                        count++;\n                    }\n                }\n            }\n            return String.Format(\"{0}\", count);\n        }","language":"csharp"}
{"task_id":"MBCSP\/439","completion":"\n            return L.Aggregate(0, (a, b) => a * b);\n        }","language":"csharp"}
{"task_id":"MBCSP\/440","completion":"\n            \/\/ Create a Regex object that will be used to find all adverbs in the sentence.\n            Regex regex = new Regex(@\"(?i)([a-z]+)\\\\b\");\n\n            \/\/ Create a list to store the results of the regex search.\n            List<object> results = new List<object>();\n\n            \/\/ Search the text for all matches of the regex.\n            foreach (Match match in regex.Matches(text))\n            {\n                \/\/ Store the start and end positions of the match in the results list.\n                results.Add(new object[] { match.Start, match.End, match.Value });\n            }\n\n            \/\/ Return the results list.\n            return results;\n        }","language":"csharp"}
{"task_id":"MBCSP\/442","completion":"\n            \/\/ write your code here\n            return 0.0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/444","completion":"\n            \/\/ write your code here\n            List<int> result = new List<int>();\n            foreach (var item in test_list)\n            {\n                result.AddRange(item.Take(K));\n            }\n            return result.Select(x => x.ToString()).ToArray();\n        }","language":"csharp"}
{"task_id":"MBCSP\/452","completion":"\n            if (sale_amount < actual_cost)\n            {\n                return null;\n            }\n            else\n            {\n                return sale_amount - actual_cost;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/457","completion":"\n            var min = lst.FirstOrDefault();\n            var minLen = lst.Count();\n            foreach (var item in lst)\n            {\n                if (item.Length &lt; minLen)\n                {\n                    min = item;\n                    minLen = item.Length;\n                }\n            }\n            return min;\n        }","language":"csharp"}
{"task_id":"MBCSP\/461","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/462","completion":"\n            List<List<string>> result = new List<List<string>>();\n            List<string> list2 = new List<string>();\n            for (int i = 0; i &lt; list1.Count; i++)\n            {\n                list2.Add(list1[i]);\n                result.Add(list2);\n                list2 = new List<string>();\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/467","completion":"\n            int octalNum = 0;\n            while (deciNum > 0) \n            {\n                octalNum = (octalNum * 8) + (deciNum % 8);\n                deciNum = deciNum \/ 8;\n            }\n            return octalNum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/468","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/469","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/473","completion":"\n            HashSet<List<int>> result = new HashSet<List<int>>();\n            HashSet<List<int>> temp = new HashSet<List<int>>();\n            for (List<int> list : test_list1)\n            {\n                temp.add(list);\n            }\n            for (List<int> list : test_list2)\n            {\n                if (temp.contains(list))\n                {\n                    result.add(list);\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/475","completion":"\n            var list = new List<list>>();\n            var keys = dict1.Keys;\n            var values = dict1.Values;\n            var sortedKeys = keys.OrderByDescending(x => values[keys.IndexOf(x)]);\n            foreach (var key in sortedKeys)\n            {\n                list.Add(new List<object> { key, values[keys.IndexOf(key)] });\n            }\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/480","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/483","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/484","completion":"\n            \/\/ Create a new list to hold the results.\n            List<List<string>> result = new List<List<string>>();\n\n            \/\/ Iterate through the first list.\n            for (List<string> list1 : test_list1) \n            {\n                \/\/ If the first list is empty, then skip it.\n                if (list1.Count == 0) continue;\n\n                \/\/ Iterate through the second list.\n                for (List<string> list2 : test_list2) \n                {\n                    \/\/ If the second list is empty, then skip it.\n                    if (list2.Count == 0) continue;\n\n                    \/\/ If the first list and second list have the same first element, then remove the second list from the results.\n                    if (list1[0] == list2[0]) \n                    {\n                        result.Add(list2);\n                        break;\n                    }\n                }\n            }\n\n            \/\/ Return the results.\n            return result;\n        ","language":"csharp"}
{"task_id":"MBCSP\/485","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/486","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/490","completion":"\n            HashSet<List<int>> result = new HashSet<List<int>>();\n            for (List<int> list : test_list)\n            {\n                for (int i = 0; i < list.Count; i++)\n                {\n                    for (int j = i + 1; j < list.Count; j++)\n                    {\n                        if (list[i] == list[j])\n                        {\n                            List<int> temp = new List<int>();\n                            temp.Add(list[i]);\n                            temp.Add(list[j]);\n                            result.Add(temp);\n                        }\n                    }\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/493","completion":"\n            List<List<List<double>>> polygons = new ArrayList<List<List<double>>>();\n            for (int x = startx; x <= endx; x++) \n            {\n                for (int y = starty; y <= endy; y++) \n                {\n                    List<List<double>> polygon = new ArrayList<List<double>>();\n                    for (int i = 0; i < 360; i++) \n                    {\n                        double x1 = x + Math.cos(i * Math.PI \/ 180) * radius;\n                        double y1 = y + Math.sin(i * Math.PI \/ 180) * radius;\n                        polygon.add(new ArrayList<double>(Arrays.asList(x1, y1)));\n                    }\n                    polygons.add(polygon);\n                }\n            }\n            return polygons;\n        }","language":"csharp"}
{"task_id":"MBCSP\/494","completion":"\n            \/\/ write your code here\n            return \"\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/497","completion":"\n            \/\/ Create a list of integers from 1 to h\/2.\n            List<int> list = new List<int>();\n            for (int i = 1; i &lt;= h\/2; i++)\n                list.Add(i);\n\n            \/\/ Sort the list.\n            Collections.Sort(list);\n\n            \/\/ Create a list of integers from 1 to h\/2.\n            List<int> list2 = new List<int>();\n            for (int i = 1; i &lt;= h\/2; i++)\n                list2.Add(i);\n\n            \/\/ Sort the list.\n            Collections.Sort(list2);\n\n            \/\/ Create a list of integers from 1 to h\/2.\n            List<int> list3 = new List<int>();\n            for (int i = 1; i &lt;= h\/2; i++)\n                list3.Add(i);\n\n            \/\/ Sort the list.\n            Collections.Sort(list3);\n\n            \/\/ Create a list of integers from 1 to h\/2","language":"csharp"}
{"task_id":"MBCSP\/500","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/503","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/508","completion":"\n            \/\/ write your code here\n            return l1.OrderBy(x => x).ToList().Equals(l2.OrderBy(x => x).ToList());\n        }","language":"csharp"}
{"task_id":"MBCSP\/510","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/511","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/512","completion":"\n            \/\/ Your code goes here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/515","completion":"\n            \/\/ write your code here\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/519","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/520","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/522","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/523","completion":"\n            List<string> list = new List<string>();\n            if (str1.Length &lt; 8)\n            {\n                list.Add(\"String length should be atleast 8.\");\n            }\n            if (str1.ToLower().Replace(str1.Substring(0, 1), str1.Substring(0, 1).ToUpper()).Length == 0)\n            {\n                list.Add(\"String must have 1 upper case character.\");\n            }\n            if (str1.ToLower().Replace(str1.Substring(0, 1), str1.Substring(0, 1).ToUpper()).Length > 1)\n            {\n                list.Add(\"String must have 1 number.\");\n            }\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/526","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/528","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/530","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/536","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/538","completion":"\n            List<string> list = new List<string>();\n            list.AddRange(str1.Split(new char[] { ' ' }, StringSplitOptions.None));\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/539","completion":"\n            \/\/ write your code here\n            List<int> result = new List<int>();\n            int power = 1;\n            for (int i = 0; i &lt; index.Count; i++) \n            {\n                power = power * bases_num[index[i]];\n                result.Add(power);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/540","completion":"\n            var freq = new Dictionary<int int=\"\">();\n            for (int i = 0; i &lt; n; i++)\n            {\n                if (freq.ContainsKey(arr[i]))\n                {\n                    freq[arr[i]]++;\n                }\n                else\n                {\n                    freq[arr[i]] = 1;\n                }\n            }\n\n            var max = 0;\n            var min = 0;\n            for (int key in freq)\n            {\n                if (freq[key] > max)\n                {\n                    max = freq[key];\n                }\n                if (freq[key] &lt; min)\n                {\n                    min = freq[key];\n                }\n            }\n\n            return max - min;\n        }","language":"csharp"}
{"task_id":"MBCSP\/543","completion":"\n            \/\/ write your code here\n            int count = 0;\n            int sum = num1 + num2;\n            while (sum > 0) {\n                sum = sum \/ 10;\n                count++;\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/545","completion":"\n            return ((n & 0x55555555) << 1) | ((n & 0xAAAAAAAA) >> 1);\n        }","language":"csharp"}
{"task_id":"MBCSP\/546","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/547","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/551","completion":"\n            \/\/Write your code here\n            List<int> list = new List<int>();\n            foreach (List<int> list2 in list1)\n            {\n                list.Add(list2[n]);\n            }\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/553","completion":"\n            return test_tup.Sum() \/ test_tup.Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/558","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/561","completion":"\n            Dictionary<int, List<int>> result = new Dictionary<int, List<int>>();\n            foreach (var item in test_list)\n            {\n                int first = item[0];\n                int second = item[1];\n                List<int> list = result[first];\n                if (list == null)\n                {\n                    list = new List<int>();\n                    result[first] = list;\n                }\n                list.Add(second);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/563","completion":"\n            \/\/ Create a Regex object that will match all the values between quotation marks.\n            Regex regex = new Regex(@\"(?<quote>\\\"[^\\\"]*\\\")|(?<value>[^,\\\"]*),\");\n            \/\/ Create a list to hold the values.\n            List<string> values = new List<string>();\n            \/\/ Match the text against the regex.\n            MatchCollection matches = regex.Matches(text);\n            \/\/ Loop through the matches.\n            foreach (Match match in matches)\n            {\n                \/\/ If the match is a quotation mark, then we have a value.\n                if (match.Groups[\"quote\"].Value != null)\n                {\n                    \/\/ Add the value to the list.\n                    values.Add(match.Groups[\"value\"].Value);\n                }\n            }\n            \/\/ Return the list of values.\n            return values;\n        }","language":"csharp"}
{"task_id":"MBCSP\/567","completion":"\n            \/\/ write your code here\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/570","completion":"\n            \/\/ Create a list of all the words in the list.\n            List<string> list = new List<string>();\n            foreach (var item in list1)\n            {\n                \/\/ Split the string into words.\n                var words = Regex.Split(item, @\"\\W+\");\n                foreach (var word in words)\n                {\n                    \/\/ If the word is not in the list of characters to remove, add it to the list.\n                    if (!charlist.Contains(word))\n                        list.Add(word);\n                }\n            }\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/571","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/572","completion":"\n            \/\/ write your code here\n            return nums;\n        }","language":"csharp"}
{"task_id":"MBCSP\/579","completion":"\n            \/\/ write your code here\n            List<int> result = new List<int>();\n            for (int i = 0; i &lt; test_tup1.Count; i++) {\n                for (int j = 0; j &lt; test_tup2.Count; j++) {\n                    if (test_tup1[i] == test_tup2[j]) {\n                        result.Add(test_tup1[i]);\n                    }\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/580","completion":"\n            \/\/ Your code goes here.\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/581","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/582","completion":"\n            \/\/ write your code here\n            return dict1.Count == 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/584","completion":"\n            \/\/ Create a Regex object\n            Regex regex = new Regex(@\"(?<=[aeiou])(?=[aeiouy])|(?<=[aeiouy])(?=[aeiou])\");\n            \/\/ Create a MatchCollection object\n            MatchCollection matches = regex.Matches(text);\n            \/\/ Create a string builder\n            StringBuilder sb = new StringBuilder();\n            \/\/ Loop through the matches\n            foreach (Match match in matches)\n            {\n                \/\/ Append the match to the string builder\n                sb.Append(match.Value).Append(\"-\");\n            }\n            \/\/ Remove the last \"-\"\n            sb.Remove(sb.Length - 1);\n            \/\/ Return the string\n            return sb.ToString();\n        }","language":"csharp"}
{"task_id":"MBCSP\/585","completion":"\n            \/\/ Create a heap queue\n            var pq = new PriorityQueue<dictionary object=\"\">>();\n\n            \/\/ Add all the items to the queue\n            for (var item in items)\n                pq.Enqueue(item);\n\n            \/\/ Create a list to store the result\n            var result = new List<dictionary object=\"\">>();\n\n            \/\/ Loop until the queue is empty\n            while (pq.Count > 0)\n            {\n                \/\/ Get the first item from the queue\n                var item = pq.Dequeue();\n\n                \/\/ Check if the item is the n-th expensive item\n                if (item.Item2 == n)\n                {\n                    \/\/ Add the item to the result list\n                    result.Add(item);\n                }\n                else\n                {\n                    \/\/ Add the item to the queue\n                    pq.Enqueue(item);\n                }\n            }\n\n            \/\/ Return the result list\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/592","completion":"\n            var binomialCoefficient = [Int32] { 1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000, 20922789888000, 355687428096000, 6402373705728000, 121645100408832000, 2432902008176640000, 51090942171709440000, 1124000727777607680000, 25852016738884976640000, 620448401733239439360000, 15511210043330985984000000, 403291461126605635584000000, 10888869450418352160768000000, 304888344611713860501504000000, 8841761993739701954543616000000, 265252859812191058636308480000000, 822283865417792","language":"csharp"}
{"task_id":"MBCSP\/596","completion":"\n            int size = 0;\n            foreach (var tuple in tuple_list)\n            {\n                size += sys.getsizeof(tuple);\n            }\n            return size;\n        }","language":"csharp"}
{"task_id":"MBCSP\/597","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/599","completion":"\n            \/\/ write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/607","completion":"\n            \/\/ Create a Regex object for the pattern\n            Regex regex = new Regex(pattern);\n\n            \/\/ Find the matches\n            List<match> matches = regex.Matches(text);\n\n            \/\/ Create a list to hold the results\n            List<object> results = new List<object>();\n\n            \/\/ Loop through the matches\n            for (Match match : matches)\n            {\n                \/\/ Create a list to hold the match information\n                List<object> matchInfo = new List<object>();\n\n                \/\/ Add the match information\n                matchInfo.Add(match.Value);\n                matchInfo.Add(match.BeginIndex);\n                matchInfo.Add(match.EndIndex);\n\n                \/\/ Add the match information to the results\n                results.Add(matchInfo);\n            }\n\n            \/\/ Return the results\n            return results;\n        }","language":"csharp"}
{"task_id":"MBCSP\/608","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/612","completion":"\n            List<object> result = new List<object>();\n            if (lst.Count == 0)\n                return result;\n\n            result.Add(lst[0]);\n            for (int i = 1; i &lt; lst.Count - 1; i++)\n            {\n                result.Add(lst[i]);\n            }\n            result.Add(lst[lst.Count - 1]);\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/613","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/615","completion":"\n            \/\/ Write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/617","completion":"\n            \/\/ Your code goes here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/618","completion":"\n            return nums1.Select(x => nums2.Select(y => x\/y)).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/619","completion":"\n            \/\/ Create a Regex object\n            Regex regex = new Regex(@\"^[0-9]+$\");\n\n            \/\/ Create a list of all the numbers in the string\n            List<string> numbers = regex.Matches(test_str);\n\n            \/\/ Create a string builder\n            StringBuilder builder = new StringBuilder();\n\n            \/\/ Loop through the list of numbers\n            foreach (string number in numbers)\n            {\n                \/\/ Append the number to the string builder\n                builder.Append(number);\n\n                \/\/ Append a space\n                builder.Append(\" \");\n            }\n\n            \/\/ Remove the last space\n            builder.Remove(builder.Length - 1, 1);\n\n            \/\/ Return the string builder\n            return builder.ToString();\n        }","language":"csharp"}
{"task_id":"MBCSP\/620","completion":"\n            \/\/ Your code goes here.\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/621","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/622","completion":"\n            \/\/ TODO: Write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/623","completion":"\n            return nums.Select(x => x * x).Take(n);\n        }","language":"csharp"}
{"task_id":"MBCSP\/627","completion":"\n            \/\/ write your code here\n            int min = array[start];\n            for (int i = start + 1; i &lt; end; i++)\n            {\n                if (array[i] &lt; min)\n                    min = array[i];\n            }\n            for (int i = start + 1; i &lt; end; i++)\n            {\n                if (array[i] == min)\n                    array[i] = -1;\n            }\n            for (int i = start + 1; i &lt; end; i++)\n            {\n                if (array[i] == -1)\n                    return i;\n            }\n            return -1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/630","completion":"\n            \/\/ Your code goes here.\n            List<List<int>> result = new List<List<int>>();\n            List<int> temp = new List<int>();\n            for (int i = 0; i < test_tup.Count; i++)\n            {\n                if (i == 0)\n                {\n                    temp.Add(test_tup[i]);\n                    result.Add(temp);\n                }\n                else\n                {\n                    if (test_tup[i] == test_tup[i - 1])\n                    {\n                        temp.Add(test_tup[i]);\n                    }\n                    else\n                    {\n                        temp = new List<int>();\n                        temp.Add(test_tup[i]);\n                        result.Add(temp);\n                    }\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/635","completion":"\n            \/\/ TODO: Write your code here\n            \/\/ TODO: Implement HeapSort\n            \/\/ TODO: Return the sorted list\n        }","language":"csharp"}
{"task_id":"MBCSP\/638","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/639","completion":"\n            \/\/ write your code here\n            return sample_names.Where(x => x.StartsWith(x.ToLower())).Select(x => x.Length).Sum();\n        }","language":"csharp"}
{"task_id":"MBCSP\/640","completion":"\n            \/\/ write your code here\n            return items.Select(x => x.Replace(\"(\", \"\").Replace(\")\", \"\")).ToArray();\n        }","language":"csharp"}
{"task_id":"MBCSP\/642","completion":"\n            \/\/ write your code here\n            HashSet<List<List<int>>> result = new HashSet<List<List<int>>>();\n            for (List<List<int>> list : test_list) {\n                for (int i = 0; i < list.size(); i++) {\n                    for (int j = i + 1; j < list.size(); j++) {\n                        if (list.get(i).equals(list.get(j))) {\n                            list.remove(j);\n                            j--;\n                        }\n                    }\n                }\n                result.add(list);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/644","completion":"\n            \/\/ write your code here\n            if (input.Count == 0)\n            {\n                return input;\n            }\n            else if (k > input.Count)\n            {\n                return input;\n            }\n            else\n            {\n                List<int> result = new List<int>();\n                for (int i = input.Count - 1; i >= input.Count - k; i--)\n                {\n                    result.Add(input[i]);\n                }\n                return result;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/647","completion":"\n            return text.Split(new Regex(@\"^[A-Z]+$\"));\n        }","language":"csharp"}
{"task_id":"MBCSP\/652","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/659","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/661","completion":"\n            \/\/ Create a list of all possible sums of 3 consecutive elements.\n            List<int> sums = new List<int>();\n            for (int i = 0; i < n; i++)\n                for (int j = i + 1; j < n; j++)\n                    for (int k = j + 1; k < n; k++)\n                        sums.Add(arr[i] + arr[j] + arr[k]);\n\n            \/\/ Sort the list of possible sums.\n            Collections.Sort(sums);\n\n            \/\/ Find the maximum sum of 3 consecutive elements.\n            return Collections.Max(sums);\n        }","language":"csharp"}
{"task_id":"MBCSP\/665","completion":"\n            \/\/ write your code here\n            return num_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/666","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/668","completion":"\n            \/\/ Create a regular expression to match the character.\n            Regex regex = new Regex(char);\n            \/\/ Create a string builder to build the new string.\n            StringBuilder sb = new StringBuilder();\n            \/\/ Create a string builder to build the original string.\n            StringBuilder sb0 = new StringBuilder(string0);\n            \/\/ Loop through the original string.\n            for (int i = 0; i < sb0.Length; i++) \n            {\n                \/\/ Check if the current character matches the regular expression.\n                if (regex.IsMatch(sb0.Substring(i, 1), RegexOptions.IgnoreCase)) \n                {\n                    \/\/ Append the character to the new string.\n                    sb.Append(char);\n                } \n                else \n                {\n                    \/\/ Append the character to the new string.\n                    sb.Append(sb0.Substring(i, 1));\n                }\n            }\n            \/\/ Return the new string.\n            return sb.ToString();\n        }","language":"csharp"}
{"task_id":"MBCSP\/671","completion":"\n            \/\/ write your code here\n            return n | (1 << (32 - n % 32));\n        }","language":"csharp"}
{"task_id":"MBCSP\/682","completion":"\n            return nums1.Select(x => nums2.Select(y => x * y)).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/684","completion":"\n            \/\/ Create a regular expression object for the string.\n            Regex rx = new Regex(x);\n\n            \/\/ Create a match object for the regular expression.\n            Match m = rx.Match(str);\n\n            \/\/ Return the number of matches.\n            return m.Count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/685","completion":"\n            \/\/ Your code goes here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/686","completion":"\n            var freq = new Dictionary<int int=\"\">();\n            foreach (var item in test_tup) \n            {\n                if (freq.ContainsKey(item)) \n                {\n                    freq[item] += 1;\n                } \n                else \n                {\n                    freq.Add(item, 1);\n                }\n            }\n            return freq.ToString();\n        }","language":"csharp"}
{"task_id":"MBCSP\/688","completion":"\n            return Math.sqrt(a * a + b * b);\n        }","language":"csharp"}
{"task_id":"MBCSP\/689","completion":"\n            \/\/ write your code here\n            if (arr == null || arr.Count == 0)\n                return 0;\n            if (arr.Count == 1)\n                return 0;\n            if (arr.Count == 2)\n                return 1;\n            if (arr.Count == 3)\n                return 2;\n            if (arr.Count == 4)\n                return 3;\n            if (arr.Count == 5)\n                return 4;\n            if (arr.Count == 6)\n                return 5;\n            if (arr.Count == 7)\n                return 6;\n            if (arr.Count == 8)\n                return 7;\n            if (arr.Count == 9)\n                return 8;\n            if (arr.Count == 10)\n                return 9;\n            if (arr.Count == 11)\n                return 10;\n            if (arr.Count == 12)\n","language":"csharp"}
{"task_id":"MBCSP\/694","completion":"\n            \/\/ Create a list to store the unique values\n            List<int> unique_list = new List<int>();\n\n            \/\/ Iterate through the dictionary values\n            foreach (var key in test_dict)\n            {\n                \/\/ Iterate through the list of values\n                foreach (var value in test_dict[key])\n                {\n                    \/\/ If the value is not already in the unique list, add it to the unique list\n                    if (!unique_list.Contains(value))\n                    {\n                        unique_list.Add(value);\n                    }\n                }\n            }\n\n            \/\/ Return the unique list\n            return unique_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/696","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/698","completion":"\n            \/\/ Sort the dictionary by tuple product of keys\n            List<int> keys = new List<int>();\n            keys = test_dict.Keys.Select(x => x.ToArray()).ToList();\n            keys.OrderBy(x => x.Product());\n            keys = keys.Reverse();\n\n            \/\/ Sort the dictionary by keys\n            Dictionary<List<int>, int> sorted_dict = new Dictionary<List<int>, int>();\n            foreach (var key in keys)\n            {\n                sorted_dict.Add(key, test_dict[key]);\n            }\n\n            return sorted_dict;\n        }","language":"csharp"}
{"task_id":"MBCSP\/700","completion":"\n            \/\/Write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/702","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/707","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/709","completion":"\n            \/\/ Your code goes here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please add your code here\n            \/\/ Please","language":"csharp"}
{"task_id":"MBCSP\/712","completion":"\n            \/\/ Write your code here.\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/717","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/718","completion":"\n            \/\/ write your code here\n            List<object> list2 = new List<object>();\n            int i = 0;\n            for (object item : list1) {\n                if (i % 2 == 0) {\n                    list2.Add(item);\n                }\n                i++;\n            }\n            return list2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/720","completion":"\n            \/\/ Tuple<object> tuple = new Tuple<object>(test_tup.ElementAt(0), test_tup.ElementAt(1), test_tup.ElementAt(2));\n            Tuple<object> tuple = new Tuple<object>(test_tup.ElementAt(0), test_tup.ElementAt(1), test_tup.ElementAt(2), test_dict);\n            return tuple;\n        }","language":"csharp"}
{"task_id":"MBCSP\/721","completion":"\n            \/\/ Your code goes here\n        }","language":"csharp"}
{"task_id":"MBCSP\/722","completion":"\n            \/\/ Your code goes here\n            return students;\n        }","language":"csharp"}
{"task_id":"MBCSP\/723","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/724","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/725","completion":"\n            List<string> list = new List<string>();\n            Regex rx = new Regex(@\"(?<quotation>\\\"[^\\\"]+\\\")|(?<other>[^\\\"]+)\");\n            MatchCollection mc = rx.Matches(text1);\n            foreach (Match m in mc)\n            {\n                if (m.Groups[\"quotation\"].Value != null)\n                    list.Add(m.Groups[\"quotation\"].Value);\n                else\n                    list.Add(m.Groups[\"other\"].Value);\n            }\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/730","completion":"\n            \/\/ 1. Create a new list to hold the result.\n            List<object> result = new List<object>();\n\n            \/\/ 2. Loop through the list.\n            for (int i = 0; i &lt; nums.Count; i++)\n            {\n                \/\/ 3. If the current element is not the same as the previous element, add it to the result.\n                if (i > 0 &amp;&amp; nums[i] != nums[i - 1])\n                {\n                    result.Add(nums[i]);\n                }\n            }\n\n            \/\/ 4. Return the result.\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/731","completion":"\n            double area = (2 * Math.PI * r * h) + (2 * Math.PI * r * r);\n            return area;\n        }","language":"csharp"}
{"task_id":"MBCSP\/735","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/738","completion":"\n            \/\/ Your code goes here.\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/739","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/743","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/745","completion":"\n            \/\/ write your code here\n            List<int> result = new List<int>();\n            for (int i = startnum; i &lt;= endnum; i++) {\n                List<int> digits = GetDigits(i);\n                for (int j = 0; j &lt; digits.Count; j++) {\n                    if (i % digits[j] != 0) {\n                        break;\n                    }\n                    if (j == digits.Count - 1) {\n                        result.Add(i);\n                    }\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/746","completion":"\n            if (a < 0 || r < 0)\n                return null;\n            if (a > 360)\n                a = 360;\n            if (r > 360)\n                r = 360;\n            if (r == 0)\n                return 0;\n            if (r == 360)\n                return 2 * Math.PI;\n            if (r == 180)\n                return 2 * Math.PI;\n            if (r == 90)\n                return 2 * Math.PI;\n            if (r == 270)\n                return 2 * Math.PI;\n            if (r == 360)\n                return 2 * Math.PI;\n            if (r == 0)\n                return 2 * Math.PI;\n            if (r == 180)\n                return 2 * Math.PI;\n            if (r == 90)\n                return 2 * Math.PI;\n           ","language":"csharp"}
{"task_id":"MBCSP\/747","completion":"\n            \/\/ Create a table to store the results of subproblems.\n            int[][] table = new int[m + 1][n + 1];\n\n            \/\/ Fill the first row and first column of the table with 0.\n            for (int i = 0; i <= m; i++)\n                table[i][0] = 0;\n            for (int j = 0; j <= n; j++)\n                table[0][j] = 0;\n\n            \/\/ Fill the rest of the table with the maximum value of the subproblem.\n            for (int i = 1; i <= m; i++)\n                for (int j = 1; j <= n; j++)\n                    if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[i - 1])\n                        table[i][j] = table[i - 1][j - 1] + 1;\n                    else","language":"csharp"}
{"task_id":"MBCSP\/748","completion":"\n            Regex regex = new Regex(@\"(?<=[A-Z])(?=[A-Z][a-z])\");\n            return regex.Replace(str1, \" \");\n        }","language":"csharp"}
{"task_id":"MBCSP\/754","completion":"\n            \/\/ Write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/755","completion":"\n            if (numbers.Count == 0)\n                return null;\n            if (numbers.Count == 1)\n                return numbers[0];\n            if (numbers.Count == 2)\n                return numbers[1];\n            if (numbers.Count == 3)\n                return numbers[2];\n\n            var min = numbers[0];\n            var secondMin = numbers[1];\n            var secondMinIndex = 1;\n            for (int i = 2; i &lt; numbers.Count; i++)\n            {\n                if (numbers[i] &lt; min)\n                {\n                    secondMin = min;\n                    secondMinIndex = minIndex;\n                    min = numbers[i];\n                    minIndex = i;\n                }\n                else if (numbers[i] &lt; secondMin)\n                {\n                    secondMin = numbers[i];\n                    secondMinIndex = i;\n                }\n            }\n            return secondMinIndex;","language":"csharp"}
{"task_id":"MBCSP\/757","completion":"\n            \/\/ TODO: Write your code here.\n            return \"0\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/758","completion":"\n            Dictionary<object, int> dict = new Dictionary<object, int>();\n            foreach (var item in list1)\n            {\n                var subList = item;\n                var subListLength = subList.Count;\n                var subListCount = 1;\n                for (var i = 0; i &lt; subListLength - 1; i++)\n                {\n                    if (subList[i] == subList[i + 1])\n                    {\n                        subListCount++;\n                    }\n                }\n                dict.Add(subList, subListCount);\n            }\n            return dict;\n        }","language":"csharp"}
{"task_id":"MBCSP\/761","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/765","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/769","completion":"\n            \/\/ Create a new list to hold the difference.\n            List<int> diff = new List<int>();\n            \/\/ Loop through the first list.\n            foreach (int i in li1)\n            {\n                \/\/ If the element is not in the second list, add it to the difference.\n                if (!li2.Contains(i))\n                {\n                    diff.Add(i);\n                }\n            }\n            \/\/ Loop through the second list.\n            foreach (int i in li2)\n            {\n                \/\/ If the element is not in the first list, add it to the difference.\n                if (!li1.Contains(i))\n                {\n                    diff.Add(i);\n                }\n            }\n            \/\/ Return the difference.\n            return diff;\n        }","language":"csharp"}
{"task_id":"MBCSP\/772","completion":"\n            \/\/ Create a string of all the words in the string\n            string[] words = Regex.Split (test_str, \"\\\\s+\");\n\n            \/\/ Create a string of all the words with k length\n            string[] k_words = Regex.Split (test_str, \"\\\\s+\");\n\n            \/\/ Create a string of all the words with k length\n            string[] k_words_2 = Regex.Split (test_str, \"\\\\s+\");\n\n            \/\/ Create a string of all the words with k length\n            string[] k_words_3 = Regex.Split (test_str, \"\\\\s+\");\n\n            \/\/ Create a string of all the words with k length\n            string[] k_words_4 = Regex.Split (test_str, \"\\\\s+\");\n\n            \/\/ Create a string of all the words with k length\n            string[] k_words_5 = Regex.Split (test_str, \"\\\\s+\");\n\n            \/\/ Create a string of all the words with k length\n            string[] k_words_6 = Regex.Split","language":"csharp"}
{"task_id":"MBCSP\/776","completion":"\n            \/\/ Create a Regex object to match all the vowels\n            Regex regex = new Regex(@\"^[aeiou]+$\");\n\n            \/\/ Create a list of all the vowels in the string\n            List<string> vowels = regex.Matches(test_str).ToList();\n\n            \/\/ Create a list to store the count of vowels\n            List<int> count = new List<int>();\n\n            \/\/ Iterate through the vowels list\n            foreach (string vowel in vowels)\n            {\n                \/\/ Create a list to store the indices of the vowels\n                List<int> indices = new List<int>();\n\n                \/\/ Iterate through the string\n                foreach (int i = 0; i &lt; test_str.Length; i++)\n                {\n                    \/\/ If the current character is a vowel\n                    if (test_str[i] == vowel)\n                    {\n                        \/\/ Add the index of the current character to the list\n                        indices.Add(i);\n                    }\n                }","language":"csharp"}
{"task_id":"MBCSP\/778","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/779","completion":"\n            Dictionary<object, int> dict = new Dictionary<object, int>();\n            for (int i = 0; i &lt; list1.Count; i++)\n            {\n                List<object> list2 = (List<object>)list1[i];\n                for (int j = 0; j &lt; list2.Count; j++)\n                {\n                    Object obj = list2[j];\n                    if (dict.ContainsKey(obj))\n                    {\n                        dict[obj] += 1;\n                    }\n                    else\n                    {\n                        dict.Add(obj, 1);\n                    }\n                }\n            }\n            return dict;\n        }","language":"csharp"}
{"task_id":"MBCSP\/780","completion":"\n            \/\/ Your code goes here.\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/782","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/783","completion":"\n            \/\/ Convert RGB to HSV\n            var hsv = new List<object>();\n            var h = 0;\n            var s = 0;\n            var v = 0;\n            var min = 0;\n            var max = 0;\n            var delta = 0;\n            var rgb = new List<object>();\n            rgb.Add(r);\n            rgb.Add(g);\n            rgb.Add(b);\n            hsv = rgbToHsv(rgb);\n            h = hsv.Item(0);\n            s = hsv.Item(1);\n            v = hsv.Item(2);\n            min = v;\n            max = v;\n            delta = max - min;\n            if (delta > 0)\n            {\n                s = s \/ delta;\n                if (r == max)\n                {\n                    h = (g - b) \/ delta;\n                }\n                else if (g == max)\n               ","language":"csharp"}
{"task_id":"MBCSP\/791","completion":"\n            \/\/ Tuple<int, int, int, Tuple<int, int>, int> tup = (1, 5, 7, (4, 6), 10);\n            \/\/ Tuple<int, int, int, Tuple<int, int>, int> tup = (2, 6, 8, (5, 7), 11);\n            \/\/ Tuple<int, int, int, Tuple<int, int>, int> tup = (3, 7, 9, (6, 8), 12);\n            Tuple<int, int, int, Tuple<int, int>, int> tup = (1, 5, 7, (4, 6), 10);\n            \/\/ Tuple<int, int, int, Tuple<int, int>, int> tup = (2, 6, 8, (5, 7), 11);\n            \/\/ Tuple<int, int, int, Tuple<int, int>, int> tup = (3, 7, 9, (6, 8), 12);","language":"csharp"}
{"task_id":"MBCSP\/795","completion":"\n            \/\/ Create a heap of n elements\n            List<Dictionary<string, object>> heap = new List<Dictionary<string, object>>();\n            for (int i = 0; i &lt; n; i++)\n                heap.Add(new Dictionary<string object=\"\">());\n\n            \/\/ Add the items to the heap\n            for (int i = 0; i &lt; items.Count; i++)\n            {\n                \/\/ Get the item and its price\n                Dictionary<string object=\"\"> item = items[i];\n                double price = (double)item[\"price\"];\n\n                \/\/ Add the item to the heap\n                heap.Add(item);\n\n                \/\/ Remove the item from the heap\n                heap.Remove(item);\n\n                \/\/ If the item is the smallest item in the heap\n                if (heap.Count > 0 &amp;&amp; price &lt; heap[0][\"price\"])\n                {\n                    \/\/ Swap the item with the smallest item in the heap\n                    Dictionary<string object=\"\"> smallest = heap[0];\n","language":"csharp"}
{"task_id":"MBCSP\/810","completion":"\n            List<string> result = new List<string>();\n            for (int i = a; i &lt;= b; i++)\n            {\n                for (int j = c; j &lt;= d; j++)\n                {\n                    result.Add(String.Format(\"{0}\", i));\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/828","completion":"\n            List<int> list = new List<int>();\n            string string1 = string0.Replace(string0.Split(\"\"), string0.Split(\"\"));\n            int int1 = 0;\n            int int2 = 0;\n            int int3 = 0;\n            foreach (char char0 in string1)\n            {\n                if (char0.IsAlpha(true))\n                {\n                    int1++;\n                }\n                else if (char0.IsDigit(true))\n                {\n                    int2++;\n                }\n                else\n                {\n                    int3++;\n                }\n            }\n            list.Add(int1);\n            list.Add(int2);\n            list.Add(int3);\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/829","completion":"\n            \/\/ Your code goes here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/830","completion":"\n            int i = Math.Round(a);\n            double d = (double)i;\n            d = d + (double)(Math.pow(10, digits));\n            d = Math.Round(d);\n            d = d - (double)(Math.pow(10, digits));\n            return d;\n        }","language":"csharp"}
{"task_id":"MBCSP\/832","completion":"\n            \/\/ Create a Regex object for the string.\n            Regex regex = new Regex(@\"(?<num>[0-9]+)\");\n\n            \/\/ Match the string against the regex.\n            MatchCollection matches = regex.Matches(input);\n\n            \/\/ Return the maximum numeric value.\n            return Math.Max(\n                \/\/ Get the first match.\n                matches[0].Groups[\"num\"].Value,\n                \/\/ Get the second match.\n                matches[1].Groups[\"num\"].Value,\n                \/\/ Get the third match.\n                matches[2].Groups[\"num\"].Value,\n                \/\/ Get the fourth match.\n                matches[3].Groups[\"num\"].Value\n            );\n        }","language":"csharp"}
{"task_id":"MBCSP\/834","completion":"\n            List<List<int>> result = new List<List<int>>();\n            int i, j, k, l, m, n1, n2, n3, n4, n5, n6, n7, n8, n9;\n            int n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75,","language":"csharp"}
{"task_id":"MBCSP\/836","completion":"\n            \/\/ write your code here\n            int max = 0;\n            int sum = 0;\n            int start = 0;\n            int end = 0;\n            for (int i = 0; i < size; i++) \n            {\n                sum += a[i];\n                if (sum > max) \n                {\n                    max = sum;\n                    start = i;\n                    end = i;\n                }\n                else if (sum < 0) \n                {\n                    sum = 0;\n                    end++;\n                }\n            }\n            return end - start + 1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/838","completion":"\n            \/\/ write your code here\n            if (s1.Length != s2.Length)\n                return -1;\n\n            int[] arr = new int[s1.Length];\n            for (int i = 0; i < s1.Length; i++)\n                arr[i] = s1[i] == s2[i] ? 0 : 1;\n\n            int swaps = 0;\n            for (int i = 0; i < s1.Length; i++)\n            {\n                if (arr[i] == 0)\n                    continue;\n\n                for (int j = i + 1; j < s1.Length; j++)\n                {\n                    if (arr[j] == 0)\n                        continue;\n\n                    if (arr[i] == 1 && arr[j] == 1)\n                    {\n                        arr[i] = 0;\n                        arr[j] = 0;\n","language":"csharp"}
{"task_id":"MBCSP\/842","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/843","completion":"\n            \/\/ write your code here\n            if (primes == null || primes.Count == 0)\n                return 0;\n            if (n == 1)\n                return 1;\n            if (n == 2)\n                return 2;\n            if (n == 3)\n                return 3;\n            if (n == 4)\n                return 4;\n            if (n == 5)\n                return 5;\n            if (n == 6)\n                return 6;\n            if (n == 7)\n                return 7;\n            if (n == 8)\n                return 8;\n            if (n == 9)\n                return 9;\n            if (n == 10)\n                return 10;\n            if (n == 11)\n                return 11;\n            if (n == 12)\n                return 12;\n            if (n == 13)\n                return 13;\n","language":"csharp"}
{"task_id":"MBCSP\/845","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/851","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/857","completion":"\n            List<list>> list2 = new List<list>>();\n            foreach (var item in list1)\n            {\n                list2.Add(List.Split(item, \" \"));\n            }\n            return list2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/859","completion":"\n            \/\/ 1. Create a list to hold the sublists.\n            List<object> sublists = new List<object>();\n\n            \/\/ 2. Create a list to hold the current sublist.\n            List<object> current_sublist = new List<object>();\n\n            \/\/ 3. Loop through the list.\n            for (int i = 0; i &lt; my_list.Count; i++)\n            {\n                \/\/ 4. If the current element is not the last element,\n                if (i != my_list.Count - 1)\n                {\n                    \/\/ 4.1. Add the current element to the current sublist.\n                    current_sublist.Add(my_list[i]);\n\n                    \/\/ 4.2. Add the current sublist to the sublists.\n                    sublists.Add(current_sublist);\n\n                    \/\/ 4.3. Clear the current sublist.\n                    current_sublist.Clear();\n                }\n                \/\/ 5. If the current element is the last element,","language":"csharp"}
{"task_id":"MBCSP\/861","completion":"\n            \/\/ Create a list to store the anagrams\n            List<string> anagrams = new List<string>();\n\n            \/\/ Create a lambda function to find anagrams\n            var findAnagrams = (str1, str2) =>\n            {\n                \/\/ Create a list to store the anagrams\n                List<string> anagrams = new List<string>();\n\n                \/\/ Create a lambda function to check if the two strings are anagrams\n                var checkAnagrams = (str1, str2) =>\n                {\n                    \/\/ Create a lambda function to check if the two strings are anagrams\n                    var checkAnagrams = (str1, str2) =>\n                    {\n                        \/\/ Create a lambda function to check if the two strings are anagrams\n                        var checkAnagrams = (str1, str2) =>\n                        {\n                            \/\/ Create a lambda function to check if the two strings are anagrams\n                            var checkAnagrams = (str1","language":"csharp"}
{"task_id":"MBCSP\/862","completion":"\n            \/\/ Create a dictionary to store the words and their counts.\n            Dictionary<string int=\"\"> wordCount = new Dictionary<string int=\"\">();\n\n            \/\/ Split the text into words.\n            var words = Regex.Split(text, \"\\\\W+\");\n\n            \/\/ Count the words in the text.\n            foreach (var word in words)\n            {\n                if (wordCount.ContainsKey(word))\n                {\n                    wordCount[word] += 1;\n                }\n                else\n                {\n                    wordCount[word] = 1;\n                }\n            }\n\n            \/\/ Create a list to store the top n words.\n            List<list>> topNWords = new List<list>>();\n\n            \/\/ Sort the words by their counts.\n            var sortedWords = wordCount.OrderByDescending(wordCount);\n\n            \/\/ Add the top n words to the list.\n            for (int i = 0; i &lt; n; i++)\n            {\n                topNWords.Add(new List<object","language":"csharp"}
{"task_id":"MBCSP\/863","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/864","completion":"\n            List<string> result = new List<string>();\n            foreach (var text in texts)\n            {\n                if (IsPalindrome(text))\n                    result.Add(text);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/869","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/872","completion":"\n            \/\/ Your code goes here\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/875","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/881","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/885","completion":"\n            \/\/ Create a dictionary of characters to their indices.\n            Dictionary<char int=\"\"> charToIndex = new Dictionary<char int=\"\">();\n            for (int i = 0; i &lt; str1.Length; i++)\n            {\n                char c = str1[i];\n                if (!charToIndex.ContainsKey(c))\n                    charToIndex.Add(c, i);\n            }\n\n            \/\/ Create a dictionary of indices to characters.\n            Dictionary<int char=\"\"> indexToChar = new Dictionary<int char=\"\">();\n            for (int i = 0; i &lt; str2.Length; i++)\n            {\n                char c = str2[i];\n                if (!indexToChar.ContainsKey(i))\n                    indexToChar.Add(i, c);\n            }\n\n            \/\/ Check if the two strings are isomorphic to each other.\n            for (int i = 0; i &lt; str1.Length; i++)\n            {\n                char c1 = str1","language":"csharp"}
{"task_id":"MBCSP\/895","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/898","completion":"\n            \/\/ write your code here\n            return numbers.Take(n).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/901","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/904","completion":"\n            return (x % 2 == 0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/909","completion":"\n            \/\/ write your code here\n            if (num < 10)\n                return num;\n            int rev = 0;\n            int temp = num;\n            while (temp > 0) {\n                rev = rev * 10 + temp % 10;\n                temp \/= 10;\n            }\n            return rev;\n        }","language":"csharp"}
{"task_id":"MBCSP\/911","completion":"\n            \/\/ write your code here\n            \/\/ 1. Create a maxHeap of type MaxHeap\n            \/\/ 2. Add all the elements of the array to the maxHeap\n            \/\/ 3. Get the maximum element from the maxHeap\n            \/\/ 4. Get the second maximum element from the maxHeap\n            \/\/ 5. Get the third maximum element from the maxHeap\n            \/\/ 6. Return the maximum product of the three numbers\n            \/\/ 7. Return 0 if the array is empty\n            \/\/ 8. Return 0 if the array has only one element\n            \/\/ 9. Return 0 if the array has only two elements\n            \/\/ 10. Return 0 if the array has only three elements\n            \/\/ 11. Return 0 if the array has more than three elements\n            \/\/ 12. Return 0 if the array has negative numbers\n            \/\/ 13. Return 0 if the array has positive numbers\n            \/\/ 14. Return 0 if the array has non-integer numbers\n            \/\/ 15. Return 0 if the array has non-integer numbers\n","language":"csharp"}
{"task_id":"MBCSP\/912","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/915","completion":"\n            \/\/ write your code here\n            return array_nums;\n        }","language":"csharp"}
{"task_id":"MBCSP\/920","completion":"\n            \/\/ Create a new list to hold the result\n            List<object> result = new List<object>();\n\n            \/\/ Iterate through the list of tuples\n            foreach (var tuple in test_list)\n            {\n                \/\/ If the tuple contains all null values, then remove it\n                if (tuple.Count == 0)\n                {\n                    continue;\n                }\n\n                \/\/ Add the tuple to the result\n                result.Add(tuple);\n            }\n\n            \/\/ Return the result as a string\n            return result.ToString();\n        }","language":"csharp"}
{"task_id":"MBCSP\/922","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/926","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/937","completion":"\n            \/\/ Create a dictionary to store the character and its count.\n            Dictionary<string int=\"\"> charCount = new Dictionary<string int=\"\">();\n\n            \/\/ Split the string into individual characters.\n            List<string> strList = str1.Split (new char[] { ' ' }, StringSplitOptions.None);\n\n            \/\/ Iterate over the string list and count the characters.\n            foreach (string str in strList)\n            {\n                if (charCount.ContainsKey(str))\n                {\n                    charCount[str] += 1;\n                }\n                else\n                {\n                    charCount[str] = 1;\n                }\n            }\n\n            \/\/ Find the character with the highest count.\n            string maxChar = null;\n            int maxCount = 0;\n            foreach (string char in charCount)\n            {\n                if (charCount[char] > maxCount)\n                {\n                    maxChar = char;\n                    maxCount = charCount[char];\n               ","language":"csharp"}
{"task_id":"MBCSP\/938","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/939","completion":"\n            \/\/ Sort the list of dictionaries using lambda function\n            models.Sort((a, b) => (a.Get(\"make\").ToString().CompareTo(b.Get(\"make\").ToString())));\n            return models;\n        }","language":"csharp"}
{"task_id":"MBCSP\/941","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/943","completion":"\n            \/\/ write your code here\n            List<int> result = new List<int>();\n            if (num1.Count == 0 || num2.Count == 0)\n                return result;\n            if (num1.Count > num2.Count)\n            {\n                for (int i = 0; i &lt; num1.Count; i++)\n                    result.Add(num1[i]);\n                for (int i = 0; i &lt; num2.Count; i++)\n                    result.Add(num2[i]);\n            }\n            else\n            {\n                for (int i = 0; i &lt; num2.Count; i++)\n                    result.Add(num2[i]);\n                for (int i = 0; i &lt; num1.Count; i++)\n                    result.Add(num1[i]);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/945","completion":"\n            HashSet<string> set = new HashSet<string>();\n            foreach (var item in t)\n            {\n                set.Add(item);\n            }\n            return set;\n        }","language":"csharp"}
{"task_id":"MBCSP\/946","completion":"\n            \/\/ Create a list of lists to hold the results.\n            List<list>> results = new List<list>>();\n\n            \/\/ Create a list of all the characters in the string.\n            List<object> characters = new List<object>();\n            for (int i = 0; i &lt; s.Length; i++)\n            {\n                characters.Add(s[i]);\n            }\n\n            \/\/ Create a list of all the characters in the string.\n            List<object> characters2 = new List<object>();\n            for (int i = 0; i &lt; s.Length; i++)\n            {\n                characters2.Add(s[i]);\n            }\n\n            \/\/ Create a list of all the characters in the string.\n            List<object> characters3 = new List<object>();\n            for (int i = 0; i &lt; s.Length; i++)\n            {\n                characters3.Add(s[i]);\n            }\n\n            \/\/ Create a list of all the characters in the string","language":"csharp"}
{"task_id":"MBCSP\/948","completion":"\n            return (tup1.get(index)).ToString();\n        }","language":"csharp"}
{"task_id":"MBCSP\/949","completion":"\n            \/\/ Sort the list based on the total digits in tuple\n            test_list.Sort(new TotalDigitsComparator());\n            return test_list.Select(x => x.ToString()).ToArray();\n        }","language":"csharp"}
{"task_id":"MBCSP\/951","completion":"\n            \/\/ Write your code here.\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/954","completion":"\n            if (sale_amount >= actual_cost)\n            {\n                return actual_cost - sale_amount;\n            }\n            else\n            {\n                return null;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/961","completion":"\n            \/\/ 1. Create a Regex object that will match the roman numeral.\n            Regex r = new Regex(@\"M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})\");\n\n            \/\/ 2. Create a string that will hold the integer value.\n            string result = \"\";\n\n            \/\/ 3. Loop through the string, matching the regex.\n            foreach (Match m in r.Matches(s))\n            {\n                \/\/ 4. If the match is a single digit, add it to the result.\n                if (m.Value.Length == 1)\n                    result += m.Value;\n                \/\/ 5. If the match is a double digit, add the first digit to the result,\n                \/\/    then add the second digit to the result.\n                else\n                    result += m.Value[0] + m.Value[1];\n            }\n\n            \/\/ 6. Return the integer value","language":"csharp"}
{"task_id":"MBCSP\/963","completion":"\n            List<object> list = new List<object>();\n            if (x == 0)\n            {\n                list.Add(\"no real solution\");\n                return list;\n            }\n            if (y == 0)\n            {\n                list.Add(\"no real solution\");\n                return list;\n            }\n            if (z == 0)\n            {\n                list.Add(\"no real solution\");\n                return list;\n            }\n            if (x > 0 &amp;&amp; y > 0 &amp;&amp; z > 0)\n            {\n                list.Add(\"One solution\");\n                return list;\n            }\n            if (x > 0 &amp;&amp; y > 0 &amp;&amp; z == 0)\n            {\n                list.Add(\"Two solutions\");\n                list.Add(x);\n                list.Add(y);\n                return list;\n            }\n            if (x > 0 &amp;&","language":"csharp"}
{"task_id":"MBCSP\/965","completion":"\n            \/\/ 1. Split the string into words.\n            var words = text.Split (' ');\n\n            \/\/ 2. Convert each word to lowercase.\n            var lowerCaseWords = words.Select (w => w.ToLower ());\n\n            \/\/ 3. Join the words into a string.\n            return lowerCaseWords.Join ('_');\n        }","language":"csharp"}
{"task_id":"MBCSP\/966","completion":"\n            List<object> tuple2 = new List<object>();\n            foreach (var tuple in tuple1)\n            {\n                if (tuple.Count > 0)\n                {\n                    tuple2.Add(tuple);\n                }\n            }\n            return tuple2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/967","completion":"\n            string[] vowels = { \"a\", \"e\", \"i\", \"o\", \"u\" };\n            string result = \"not accepted\";\n            foreach (string vowel in vowels)\n            {\n                if (string0.Contains(vowel))\n                {\n                    result = \"accepted\";\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/969","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/971","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/974","completion":"\n            \/\/ Write your code here.\n            return 0;\n        }","language":"csharp"}
