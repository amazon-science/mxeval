{"task_id":"MBSWP\/6","completion":"    return a ^ b == 0 || (a & b & 1) != 0\n}","language":"swift"}
{"task_id":"MBSWP\/17","completion":"    return 4 * a\n}","language":"swift"}
{"task_id":"MBSWP\/20","completion":"    if (x % 2 == 0) {\n        return false\n    }\n    if (x % 3 == 0) {\n        return false\n    }\n    if (x % 5 == 0) {\n        return false\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/23","completion":"    var sum = 0\n    var max = 0\n    for i in list1 {\n        sum = 0\n        for j in i {\n            sum += j\n        }\n        if sum > max {\n            max = sum\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/26","completion":"    var i : Int = 0\n    var j : Int = 0\n    while (i < test_list.count) {\n        while (j < test_list[i].count) {\n            if (test_list[i][j] != K) {\n                return false\n            }\n            j = j + 1\n        }\n        i = i + 1\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/28","completion":"    var result = 1\n    var i = 0\n    while (i < k) {\n        result = result * (n - i) \/ (i + 1)\n        i = i + 1\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/29","completion":"    var count = 0\n    var result = 0\n    var i = 0\n    var j = 0\n    while (i < arr_size) {\n        if (arr[i] % 2 == 1) {\n            count = 1\n            while (j < arr_size) {\n                if (arr[j] % 2 == 1) {\n                    count += 1\n                }\n                if (count == 3) {\n                    result = arr[j]\n                    break\n                }\n                j += 1\n            }\n        }\n        i += 1\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/34","completion":"    var i = 0\n    var j = N - 1\n    var missing = 0\n    while (i <= j) {\n        missing = missing + 1\n        if (ar[i] == missing) {\n            i = i + 1\n        } else if (ar[j] == missing) {\n            j = j - 1\n        } else {\n            return missing\n        }\n    }\n    return missing\n}","language":"swift"}
{"task_id":"MBSWP\/45","completion":"    var gcd = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    while (i < l.count) {\n        if (l[i] % l[j] == 0) {\n            gcd = l[i]\n            break\n        }\n        if (l[i] > l[j]) {\n            j = i\n        } else {\n            i = j\n        }\n    }\n    return gcd\n}","language":"swift"}
{"task_id":"MBSWP\/51","completion":"    return x == y && y == z\n}","language":"swift"}
{"task_id":"MBSWP\/52","completion":"    return b * h\n}","language":"swift"}
{"task_id":"MBSWP\/58","completion":"    return x * y < 0 || y * x < 0\n}","language":"swift"}
{"task_id":"MBSWP\/62","completion":"    var min = xs[0]\n    for x in xs {\n        if x < min {\n            min = x\n        }\n    }\n    return min\n}","language":"swift"}
{"task_id":"MBSWP\/66","completion":"    var count = 0\n    for i in list {\n        if i > 0 {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/96","completion":"    var count = 0\n    var i = 1\n    while (i <= n) {\n        if (n % i == 0) {\n            count += 1\n        }\n        i += 1\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/116","completion":"    var result = 0\n    for i in nums {\n        result = result * 10 + i\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/120","completion":"    var max = 0\n    for i in list1 {\n        for j in list1 {\n            if i[0] * i[1] > max {\n                max = i[0] * i[1]\n            }\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/126","completion":"    var divisor = 1\n    var sum = 0\n    while (divisor <= a && divisor <= b) {\n        if (a % divisor == 0 && b % divisor == 0) {\n            sum += divisor\n        }\n        divisor += 1\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/127","completion":"    return x * y\n}","language":"swift"}
{"task_id":"MBSWP\/135","completion":"    if (n == 0) {\n        return 0\n    }\n    return n * (2 * n - 1)\n}","language":"swift"}
{"task_id":"MBSWP\/145","completion":"    var maxDiff = 0\n    for i in arr {\n        for j in arr {\n            if i != j {\n                var diff = abs(i - j)\n                if diff > maxDiff {\n                    maxDiff = diff\n                }\n            }\n        }\n    }\n    return maxDiff\n}","language":"swift"}
{"task_id":"MBSWP\/151","completion":"    if (x < 2 || y < 2) {\n        return false;\n    }\n    var i : Int = 2;\n    while (i < x && i < y) {\n        if (x % i == 0 && y % i == 0) {\n            return false;\n        }\n        i = i + 1;\n    }\n    return true;\n}","language":"swift"}
{"task_id":"MBSWP\/164","completion":"    var sum = 0\n    var i = 1\n    var divisors = 0\n    var isEquivalent = true\n    while (i <= num1 && i <= num2) {\n        if (num1 % i == 0 && num2 % i == 0) {\n            sum += i\n            divisors += 2\n        }\n        i += 1\n    }\n    if (divisors == 2) {\n        isEquivalent = true\n    } else {\n        isEquivalent = false\n    }\n    return isEquivalent\n}","language":"swift"}
{"task_id":"MBSWP\/167","completion":"    var power = 1\n    while (power < n) {\n        power *= 2\n    }\n    return power\n}","language":"swift"}
{"task_id":"MBSWP\/168","completion":"    var freq = 0\n    for i in a {\n        if i == x {\n            freq += 1\n        }\n    }\n    return freq\n}","language":"swift"}
{"task_id":"MBSWP\/176","completion":"    return a + b + c;\n}","language":"swift"}
{"task_id":"MBSWP\/188","completion":"    return n > 0 && (n & (n - 1)) == 0 && (n & 0x55555555) != 0\n}","language":"swift"}
{"task_id":"MBSWP\/195","completion":"    var i : Int = 0\n    var j : Int = n\n    while (i < j) {\n        var m : Int = i + (j - i) \/ 2\n        if (arr[m] < x) {\n            i = m + 1\n        } else {\n            j = m\n        }\n    }\n    return i\n}","language":"swift"}
{"task_id":"MBSWP\/199","completion":"    var power = 0\n    var powerOf2 = 1\n    while (powerOf2 <= n) {\n        power = powerOf2\n        powerOf2 = powerOf2 * 2\n    }\n    return power\n}","language":"swift"}
{"task_id":"MBSWP\/203","completion":"    var count = 0\n    var n = n1 ^ n2\n    while (n > 0) {\n        if (n % 2 == 1) {\n            count += 1\n        }\n        n = n >> 1\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/212","completion":"    var sum = 0\n    var power = 4\n    var i = 1\n    while (i <= n) {\n        sum = sum + (i * i * i * i)\n        i = i + 1\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/223","completion":"    var count = 0\n    var i = 0\n    var j = n - 1\n    while (i <= j) {\n        if (arr[i] == x) {\n            count += 1\n            i += 1\n        } else if (arr[j] == x) {\n            count += 1\n            j -= 1\n        } else {\n            i += 1\n            j -= 1\n        }\n    }\n    return count > n \/ 2\n}","language":"swift"}
{"task_id":"MBSWP\/227","completion":"    if (a < b && a < c) {\n        return a\n    } else if (b < a && b < c) {\n        return b\n    } else {\n        return c\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/234","completion":"    return l * l * l\n}","language":"swift"}
{"task_id":"MBSWP\/244","completion":"    var i : Int = 1\n    var square : Int\n    while (true) {\n        square = i * i\n        if (square > N) {\n            return square\n        }\n        i += 1\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/250","completion":"    var count = 0\n    for i in tup {\n        if i == x {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/257","completion":"    return [b, a]\n}","language":"swift"}
{"task_id":"MBSWP\/280","completion":"    var index = 0;\n    var found = false;\n    while (index < dlist.count && !found) {\n        if (dlist[index] == item) {\n            found = true;\n        } else {\n            index = index + 1;\n        }\n    }\n    if (found) {\n        return [true, index];\n    } else {\n        return [false, -1];\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/285","completion":"    if (text.contains(\"a\") && text.contains(\"b\") && text.contains(\"b\") && text.contains(\"b\")) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/292","completion":"    return n \/ m\n}","language":"swift"}
{"task_id":"MBSWP\/295","completion":"    var sum = 0\n    var i = 1\n    while (i < number) {\n        if (number % i == 0) {\n            sum += i\n        }\n        i += 1\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/309","completion":"    return a > b ? a : b\n}","language":"swift"}
{"task_id":"MBSWP\/320","completion":"    var sum = 0\n    var sumOfSquares = 0\n    var sumOfFirstN = 0\n    var sumOfFirstNSquared = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        sumOfSquares += i * i\n        sumOfFirstN += i\n        sumOfFirstNSquared += i * i * i\n        i += 1\n    }\n    return sum * sum - sumOfSquares + sumOfFirstN * sumOfFirstN - sumOfFirstNSquared\n}","language":"swift"}
{"task_id":"MBSWP\/327","completion":"    if (x == y || x == z || y == z) {\n        return true\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/329","completion":"    var count = 0\n    for i in list {\n        if i < 0 {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/334","completion":"    if (a + b > c && a + c > b && b + c > a) {\n        return true\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/335","completion":"    var sum = 0\n    var i = 0\n    while (i < n) {\n        sum += a + (i * d)\n        i += 1\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/336","completion":"    if (monthname1 == \"February\") {\n        return true\n    } else {\n        return false\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/356","completion":"    var c = 180 - a - b\n    return c\n}","language":"swift"}
{"task_id":"MBSWP\/365","completion":"    var digitCount = 0\n    var temp = n\n    while (temp > 0) {\n        digitCount += 1\n        temp \/= 10\n    }\n    return digitCount\n}","language":"swift"}
{"task_id":"MBSWP\/366","completion":"    var max = 0\n    for i in list_nums {\n        for j in list_nums {\n            if i != j {\n                var product = i * j\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/371","completion":"    var i : Int = left_element\n    var j : Int = right_element\n    var missing_element : Int\n    while (i <= j) {\n        var mid : Int = (i + j) \/ 2\n        if (A[mid] == mid) {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    missing_element = i\n    return missing_element\n}","language":"swift"}
{"task_id":"MBSWP\/373","completion":"    return l * w * h\n}","language":"swift"}
{"task_id":"MBSWP\/375","completion":"    var result = n \/ m * m\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/379","completion":"    return 2 * (l * w + w * h + h * l)\n}","language":"swift"}
{"task_id":"MBSWP\/384","completion":"    var min = arr[0]\n    var count = 0\n    for i in arr {\n        if i < min {\n            min = i\n            count = 1\n        } else if i == min {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/388","completion":"    var power = 1\n    var result = 0\n    while (power <= n) {\n        result = power\n        power *= 2\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/404","completion":"    return min(a, b)\n}","language":"swift"}
{"task_id":"MBSWP\/405","completion":"    var i = 0\n    while (i < tuplex.count) {\n        if (tuplex[i] == tuple1) {\n            return true\n        }\n        i = i + 1\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/406","completion":"    if(x % 2 == 0) {\n        return \"Even Parity\"\n    } else {\n        return \"Odd Parity\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/415","completion":"    var max = 0\n    var maxPair = [0, 0]\n    for i in arr {\n        for j in arr {\n            if i != j {\n                if (i * j > max) {\n                    max = i * j\n                    maxPair = [i, j]\n                }\n            }\n        }\n    }\n    return maxPair\n}","language":"swift"}
{"task_id":"MBSWP\/425","completion":"    var count = 0\n    for i in list1 {\n        for j in i {\n            if j == x {\n                count += 1\n            }\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/434","completion":"    if (text.contains(\"a\") && text.contains(\"b\")) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/441","completion":"    return 6 * l * l\n}","language":"swift"}
{"task_id":"MBSWP\/453","completion":"    var sum = 0\n    var i = 1\n    while (i <= n) {\n        if (n % i == 0) {\n            if (i % 2 == 0) {\n                sum += i\n            }\n        }\n        i += 1\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/457","completion":"    var min = 0\n    var min_index = 0\n    for i in lst.indices {\n        if lst[i].count < min {\n            min = lst[i].count\n            min_index = i\n        }\n    }\n    return lst[min_index]\n}","language":"swift"}
{"task_id":"MBSWP\/458","completion":"    return l * b\n}","language":"swift"}
{"task_id":"MBSWP\/464","completion":"    for (key, value) in dict {\n        if (value != n) {\n            return false\n        }\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/466","completion":"    var left = 0\n    var right = n - 1\n    var mid = 0\n    var max = 0\n    while (left < right) {\n        mid = left + (right - left) \/ 2\n        if (arr[mid] > arr[mid + 1]) {\n            right = mid\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}","language":"swift"}
{"task_id":"MBSWP\/489","completion":"    var largest = 0\n    var count = 0\n    for i in arr {\n        if (i > largest) {\n            largest = i\n            count = 1\n        } else if (i == largest) {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/492","completion":"    var low = 0\n    var high = item_list.count - 1\n    var mid = 0\n\n    while low <= high {\n        mid = low + (high - low) \/ 2\n        if item_list[mid] < item {\n            low = mid + 1\n        } else if item_list[mid] > item {\n            high = mid - 1\n        } else {\n            return true\n        }\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/499","completion":"    return 2 * r\n}","language":"swift"}
{"task_id":"MBSWP\/502","completion":"    return n % m\n}","language":"swift"}
{"task_id":"MBSWP\/504","completion":"    var sum = 0\n    var i : Int = 1\n    while (i <= n) {\n        sum += i * i * i\n        i += 1\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/506","completion":"    var result = 1\n    var i = 1\n    while (i <= k) {\n        result *= n - i + 1\n        i += 1\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/509","completion":"    var sum = 0\n    var count = 0\n    var odd = 1\n    while (odd <= n) {\n        if (odd % 2 == 1) {\n            sum += odd\n            count += 1\n        }\n        odd += 1\n    }\n    return sum \/ count\n}","language":"swift"}
{"task_id":"MBSWP\/514","completion":"    var sum = 0\n    for i in test_tup {\n        sum += i\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/517","completion":"    var largest = 0\n    for i in list1 {\n        if (i > largest) {\n            largest = i\n        }\n    }\n    return largest\n}","language":"swift"}
{"task_id":"MBSWP\/518","completion":"    if (num < 0) {\n        return -1\n    }\n    if (num == 0) {\n        return 0\n    }\n    var start = 1\n    var end = num\n    var mid = 0\n    while (start <= end) {\n        mid = start + (end - start) \/ 2\n        if (mid * mid == num) {\n            return mid\n        } else if (mid * mid > num) {\n            end = mid - 1\n        } else {\n            start = mid + 1\n        }\n    }\n    return mid - 1\n}","language":"swift"}
{"task_id":"MBSWP\/521","completion":"    if (x == y && y == z) {\n        return true\n    }\n    if (x == y || y == z || x == z) {\n        return false\n    }\n    if (x + y <= z || x + z <= y || y + z <= x) {\n        return false\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/541","completion":"    var sum = 0\n    var i = 1\n    while (i < n) {\n        if (n % i == 0) {\n            sum += i\n        }\n        i += 1\n    }\n    return sum > n\n}","language":"swift"}
{"task_id":"MBSWP\/543","completion":"    var sum = num1 + num2\n    var count = 0\n    while (sum > 0) {\n        sum = sum \/ 10\n        count = count + 1\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/555","completion":"    var sum = 0\n    var sumOfCubes = 0\n    var i = 1\n    while (i <= n) {\n        sum = sum + i\n        sumOfCubes = sumOfCubes + i * i * i\n        i = i + 1\n    }\n    return sumOfCubes - sum\n}","language":"swift"}
{"task_id":"MBSWP\/559","completion":"    var maxSum = 0\n    var sum = 0\n    for i in a {\n        sum += i\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > maxSum {\n            maxSum = sum\n        }\n    }\n    return maxSum\n}","language":"swift"}
{"task_id":"MBSWP\/562","completion":"    var max = 0\n    for item in lst {\n        if item.count > max {\n            max = item.count\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/567","completion":"    var i : Int = 0\n    var j : Int = 0\n    var length : Int = list1.count\n    while (i < length - 1) {\n        if (list1[i] > list1[i + 1]) {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/575","completion":"    var count = 0\n    var i = L\n    while (i <= R) {\n        if (i % A != 0) {\n            count += 1\n            if (count == N) {\n                return i\n            }\n        }\n        i += 1\n    }\n    return -1\n}","language":"swift"}
{"task_id":"MBSWP\/587","completion":"    return listx\n}","language":"swift"}
{"task_id":"MBSWP\/600","completion":"    return n % 2 == 0\n}","language":"swift"}
{"task_id":"MBSWP\/649","completion":"    var sum = 0\n    var i = m\n    var j = n\n    while (i <= j) {\n        sum += nums[i]\n        i += 1\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/654","completion":"    return 2 * (l + b);\n}","language":"swift"}
{"task_id":"MBSWP\/658","completion":"    var maxOccurrences = 0\n    var maxOccurrenceItem = 0\n    for item in list1 {\n        var occurrences = 0\n        for i in list1 {\n            if i == item {\n                occurrences += 1\n            }\n        }\n        if occurrences > maxOccurrences {\n            maxOccurrences = occurrences\n            maxOccurrenceItem = item\n        }\n    }\n    return maxOccurrenceItem\n}","language":"swift"}
{"task_id":"MBSWP\/663","completion":"    var k = 1\n    var max = 0\n    while (k <= n) {\n        if (k % x == y) {\n            max = k\n        }\n        k = k + 1\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/672","completion":"    if (num1 > num2 && num1 > num3) {\n        return num1;\n    } else if (num2 > num1 && num2 > num3) {\n        return num2;\n    } else {\n        return num3;\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/673","completion":"    var result = 0\n    for i in list {\n        result = result * 10 + i\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/675","completion":"    if (x + y >= m && x + y <= n) {\n        return 20\n    }\n    return x + y\n}","language":"swift"}
{"task_id":"MBSWP\/692","completion":"    var factorial = 1\n    var lastTwoDigits = 0\n    var i = 1\n    while (i <= N) {\n        factorial = factorial * i\n        i = i + 1\n    }\n    lastTwoDigits = factorial % 100\n    return lastTwoDigits\n}","language":"swift"}
{"task_id":"MBSWP\/733","completion":"    var i = 0\n    var j = A.count - 1\n    var index = -1\n\n    while (i <= j) {\n        var mid = (i + j) \/ 2\n        if (A[mid] == x) {\n            index = mid\n            j = mid - 1\n        } else if (A[mid] < x) {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n\n    return index\n}","language":"swift"}
{"task_id":"MBSWP\/736","completion":"    var i : Int = 0\n    var j : Int = a.count - 1\n    while (i <= j) {\n        var m : Int = i + (j - i) \/ 2\n        if (a[m] < x) {\n            i = m + 1\n        } else {\n            j = m - 1\n        }\n    }\n    return i\n}","language":"swift"}
{"task_id":"MBSWP\/750","completion":"    return test_list + test_tup\n}","language":"swift"}
{"task_id":"MBSWP\/760","completion":"    var unique = 0\n    var count = 0\n    for i in arr {\n        if (unique == i) {\n            count += 1\n        } else {\n            unique = i\n            count = 1\n        }\n        if (count == n) {\n            return \"YES\"\n        }\n    }\n    return \"NO\"\n}","language":"swift"}
{"task_id":"MBSWP\/767","completion":"    var count = 0\n    var i = 0\n    var j = 1\n    while (i < arr.count) {\n        while (j < arr.count) {\n            if (arr[i] + arr[j] == sum) {\n                count += 1\n            }\n            j += 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/768","completion":"    if (x % 2 == 0) {\n        return false\n    } else {\n        return true\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/781","completion":"    var divisors = [1]\n    var i = 2\n    while i <= n {\n        if n % i == 0 {\n            divisors.append(i)\n        }\n        i += 1\n    }\n    if divisors.count % 2 == 0 {\n        return \"Even\"\n    } else {\n        return \"Odd\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/786","completion":"    var i : Int = 0\n    var j : Int = a.count - 1\n    while (i <= j) {\n        var mid : Int = (i + j) \/ 2\n        if (a[mid] < x) {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return i\n}","language":"swift"}
{"task_id":"MBSWP\/787","completion":"    if (text.contains(\"a\") && text.contains(\"b\") && text.contains(\"b\")) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/792","completion":"    var count = 0\n    for i in input_list {\n        count += 1\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/793","completion":"    var i : Int = 0\n    var j : Int = n - 1\n    while (i <= j) {\n        var m : Int = i + (j - i) \/ 2\n        if (arr[m] == x) {\n            return m\n        } else if (arr[m] < x) {\n            i = m + 1\n        } else {\n            j = m - 1\n        }\n    }\n    return -1\n}","language":"swift"}
{"task_id":"MBSWP\/797","completion":"    var sum = 0\n    var i : Int = l\n    while (i <= r) {\n        if (i % 2 != 0) {\n            sum += i\n        }\n        i += 1\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/798","completion":"    var sum = 0\n    for i in arr {\n        sum += i\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/799","completion":"    var mask = 1 << (d % 32)\n    return (n << d) | (n & mask)\n}","language":"swift"}
{"task_id":"MBSWP\/804","completion":"    var product = 1\n    for i in arr {\n        product *= i\n    }\n    return product % n == 0\n}","language":"swift"}
{"task_id":"MBSWP\/807","completion":"    var odd = 0\n    for num in nums {\n        if num % 2 == 1 {\n            odd = num\n            break\n        }\n    }\n    return odd\n}","language":"swift"}
{"task_id":"MBSWP\/808","completion":"    var k = 0\n    for i in test_tup {\n        if i == K {\n            k += 1\n        }\n    }\n    return k == 1\n}","language":"swift"}
{"task_id":"MBSWP\/811","completion":"    var list1 = test_list1\n    var list2 = test_list2\n    var len1 = list1.count\n    var len2 = list2.count\n    var i = 0\n    var j = 0\n    while (i < len1 && j < len2) {\n        if (list1[i][0] != list2[j][0]) {\n            return false\n        }\n        if (list1[i][1] != list2[j][1]) {\n            return false\n        }\n        i += 1\n        j += 1\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/820","completion":"    if (monthnum1 == 2) {\n        return true\n    }\n    else if (monthnum1 == 1 || monthnum1 == 3 || monthnum1 == 5 || monthnum1 == 7 || monthnum1 == 8 || monthnum1 == 10 || monthnum1 == 12) {\n        return false\n    }\n    else {\n        return true\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/827","completion":"    var sum = 0\n    for i in list1 {\n        sum += i[C]\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/848","completion":"    return (base1 + base2) * height \/ 2\n}","language":"swift"}
{"task_id":"MBSWP\/853","completion":"    var sum = 0\n    var i = 1\n    while (i <= n) {\n        if (n % i == 0) {\n            if (i % 2 != 0) {\n                sum += i\n            }\n        }\n        i += 1\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/855","completion":"    if (x % 2 == 0) {\n        return true\n    } else {\n        return false\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/874","completion":"    return str1 + str2 == str2 + str1\n}","language":"swift"}
{"task_id":"MBSWP\/880","completion":"    var discriminant = b * b - 4 * a * c\n    if (discriminant < 0) {\n        return \"No solutions\"\n    } else if (discriminant == 0) {\n        return \"1 solution\"\n    } else {\n        return \"2 solutions\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/887","completion":"    return n & 1 == 1\n}","language":"swift"}
{"task_id":"MBSWP\/908","completion":"    var start = 0;\n    var end = n - 1;\n    var mid = 0;\n\n    while (start <= end) {\n        mid = start + (end - start) \/ 2;\n        if (arr[mid] == mid) {\n            return mid;\n        } else if (arr[mid] < mid) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n    }\n    return -1;\n}","language":"swift"}
{"task_id":"MBSWP\/922","completion":"    var max = 0\n    var maxPair = [0, 0]\n    for i in arr {\n        for j in arr {\n            if i != j {\n                var product = i * j\n                if product > max {\n                    max = product\n                    maxPair = [i, j]\n                }\n            }\n        }\n    }\n    return maxPair\n}","language":"swift"}
{"task_id":"MBSWP\/924","completion":"    var max = x\n    if (y > max) {\n        max = y\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/925","completion":"    var product = 1\n    for num in nums {\n        product *= num\n    }\n    return product\n}","language":"swift"}
{"task_id":"MBSWP\/931","completion":"    var sum = 0\n    var i = 1\n    while (i <= number) {\n        sum += (i * i * i)\n        i += 1\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/935","completion":"    var sum = 0\n    var i = 1\n    while (i <= number) {\n        sum = sum + (i * i)\n        i = i + 1\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/945","completion":"    return Set(t)\n}","language":"swift"}
{"task_id":"MBSWP\/950","completion":"    if (year < 0) {\n        return \"Invalid year\";\n    }\n    var sign = year % 12 == 0 ? \"Monkey\" : year % 12 == 1 ? \"Rooster\" : year % 12 == 2 ? \"Dog\" : year % 12 == 3 ? \"Pig\" : year % 12 == 4 ? \"Rat\" : year % 12 == 5 ? \"Ox\" : year % 12 == 6 ? \"Tiger\" : year % 12 == 7 ? \"Rabbit\" : year % 12 == 8 ? \"Dragon\" : year % 12 == 9 ? \"Snake\" : year % 12 == 10 ? \"Horse\" : \"Sheep\";\n    return sign;\n}","language":"swift"}
{"task_id":"MBSWP\/954","completion":"    if (actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    } else {\n        return \"none\";\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/955","completion":"    var sum = 0\n    var i = 1\n    while (i < n) {\n        if (n % i == 0) {\n            sum += i\n        }\n        i += 1\n    }\n    return sum > n\n}","language":"swift"}
{"task_id":"MBSWP\/970","completion":"    if (x < y) {\n        return x\n    } else {\n        return y\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/972","completion":"    var result = [] as [Int]\n    for i in test_tup1 {\n        result.append(i)\n    }\n    for i in test_tup2 {\n        result.append(i)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/63","completion":"    var max_diff = 0\n    for i in test_list {\n        var max_diff_i = 0\n        for j in test_list {\n            if i != j {\n                var diff = abs(i[0] - i[1])\n                if max_diff_i < diff {\n                    max_diff_i = diff\n                }\n            }\n        }\n        if max_diff < max_diff_i {\n            max_diff = max_diff_i\n        }\n    }\n    return max_diff\n}","language":"swift"}
{"task_id":"MBSWP\/72","completion":"    if (n < 0) {\n        return false\n    }\n    return (n & 1) == 0 ? (n & (n - 1)) == 0 : true\n}","language":"swift"}
{"task_id":"MBSWP\/77","completion":"    if n < 0 {\n        return false;\n    }\n    var sum = 0\n    var count = 0\n    var temp = n\n    while (temp > 0) {\n        var lastDigit = temp % 10\n        if (lastDigit % 2 == 0) {\n            sum += lastDigit\n        }\n        else {\n            sum -= lastDigit\n        }\n        temp = temp \/ 10\n    }\n    temp = n\n    while (temp > 0) {\n        var lastDigit = temp % 10\n        if (lastDigit % 2 == 0) {\n            count += 1\n        }\n        else {\n            count -= 1\n        }\n        temp = temp \/ 10\n    }\n    return count != 0 && sum != 0 && sum != count * 2\n}","language":"swift"}
{"task_id":"MBSWP\/79","completion":"    return s.count % 2 == 1\n}","language":"swift"}
{"task_id":"MBSWP\/89","completion":"    var a = 1\n    var b = N\n    var res = 0\n\n    while (a < b) {\n        res = a\n        a = a + 1\n    }\n\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/93","completion":"    var x = a;\n    var y = b;\n    var result = 1;\n    while (y > 0) {\n        if (y & 1 == 1) {\n            result *= x;\n        }\n        x *= x;\n        y >>= 1;\n    }\n    return result;\n}","language":"swift"}
{"task_id":"MBSWP\/101","completion":"    return arr[k-1]\n}","language":"swift"}
{"task_id":"MBSWP\/105","completion":"    var i : Int = 0\n    for x in lst {\n        if x {\n            i += 1\n        }\n    }\n    return i\n}","language":"swift"}
{"task_id":"MBSWP\/112","completion":"    return 2 * (diameter + height)\n}","language":"swift"}
{"task_id":"MBSWP\/150","completion":"    if (a == 1) {\n        if (b == 7) {\n            if (c == 3) {\n                return true\n            }\n            return false\n        }\n        return false\n    }\n    if (b == -3) {\n        if (a == 3) {\n            if (c == 2) {\n                return true\n            }\n            return false\n        }\n        return false\n    }\n    if (c == 5) {\n        if (b == 2) {\n            if (a == 5) {\n                return true\n            }\n            return false\n        }\n        return false\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/162","completion":"    var total = 0;\n    var limit = n;\n\n    while (limit >= 0) {\n        if (limit == 0) {\n            break;\n        }\n        total = total + limit;\n        limit = limit - 2;\n    }\n\n    return total;\n}","language":"swift"}
{"task_id":"MBSWP\/183","completion":"    var pairs = 0\n    for i in arr {\n        for j in arr {\n            if (i - j == k) {\n                pairs += 1\n            }\n        }\n    }\n    return pairs\n}","language":"swift"}
{"task_id":"MBSWP\/191","completion":"    return monthname3 == \"April\" || monthname3 == \"June\" || monthname3 == \"September\" || monthname3 == \"November\"\n}","language":"swift"}
{"task_id":"MBSWP\/221","completion":"    var index = 0\n\n    for i in nums {\n        if nums[index] % 2 == 0 {\n            return nums[index]\n        }\n        index += 1\n    }\n\n    return -1\n}","language":"swift"}
{"task_id":"MBSWP\/224","completion":"    var count = 0\n    var temp = n\n    while (temp != 0) {\n        count += temp & 1\n        temp >>= 1\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/228","completion":"    return (n > l && n < r) || ((n - l + 1) & (n - r + 1)) == 0\n}","language":"swift"}
{"task_id":"MBSWP\/242","completion":"    var num : Int = 0\n    for i in str1 {\n        num = num + 1\n    }\n    return num\n}","language":"swift"}
{"task_id":"MBSWP\/253","completion":"    var result = 0\n    for i in list1 {\n        if(i is Int) {\n            result += 1\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/266","completion":"    var s : Int = 2 * (l * l) + 2 * l * l;\n    return s\n}","language":"swift"}
{"task_id":"MBSWP\/270","completion":"    var evenSum = 0\n    var evenIndex = 0\n    while (evenIndex < n) {\n        if (arr[evenIndex] % 2 == 0) {\n            evenSum += arr[evenIndex]\n        }\n        evenIndex += 2\n    }\n    return evenSum\n}","language":"swift"}
{"task_id":"MBSWP\/273","completion":"    return [\n        test_tup1[0] - test_tup2[0],\n        test_tup1[1] - test_tup2[1],\n        test_tup1[2] - test_tup2[2]\n    ]\n}","language":"swift"}
{"task_id":"MBSWP\/284","completion":"    var counter = 0\n    for x in list {\n        if x == element {\n            counter += 1\n        }\n    }\n    return counter == list.count\n}","language":"swift"}
{"task_id":"MBSWP\/302","completion":"    var bit = 1\n    var res = 0\n    while(bit <= n) {\n        if(bit & n == bit) {\n            res = bit\n        }\n        bit <<= 1\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/357","completion":"    var max = 0\n    for testList in test_list {\n        for testElement in testList {\n            if testElement > max {\n                max = testElement\n            }\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/368","completion":"    var result = [[Int]]()\n    var i = 0\n    while(i < N) {\n        result.append(test_tup)\n        i = i + 1\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/414","completion":"    for i in list1 {\n        if list2.contains(i) {\n            return true\n        }\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/433","completion":"    if(number > arr[0] && number > arr[1] && number > arr[2] && number > arr[3]) {\n        return \"Yes, the entered number is greater than those in the array\"\n    }\n    return \"No, entered number is less than those in the array\"\n}","language":"swift"}
{"task_id":"MBSWP\/435","completion":"    var d = 0\n    var c = n % 10\n    if n > 0 {\n        d = n % 100\n        if (d > 0) {\n            c = d % 10\n        }\n    }\n    return c\n}","language":"swift"}
{"task_id":"MBSWP\/436","completion":"    var list2 = [Int]()\n    for x in list1 {\n        if x < 0 {\n            list2.append(x)\n        }\n    }\n    return list2\n}","language":"swift"}
{"task_id":"MBSWP\/443","completion":"    var largest = 0\n    for i in list1 {\n        if i < 0 {\n            if i < largest {\n                largest = i\n            }\n        }\n    }\n    return largest\n}","language":"swift"}
{"task_id":"MBSWP\/449","completion":"    var a = x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2);\n    if (a == 0) {\n        return \"No\"\n    } else if (a > 0) {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/452","completion":"    if (sale_amount > actual_cost) {\n        return sale_amount - actual_cost;\n    }\n    else {\n        return \"none\";\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/454","completion":"    if (text.contains(\"z\")) {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}","language":"swift"}
{"task_id":"MBSWP\/455","completion":"    let days2 = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    return days2[monthnum2-1] == 31\n}","language":"swift"}
{"task_id":"MBSWP\/467","completion":"    var octNum = 0\n    octNum += (deciNum \/ 8) * 10\n    octNum += deciNum % 8\n    return octNum\n}","language":"swift"}
{"task_id":"MBSWP\/472","completion":"    var k : Int = 0\n    for i in l {\n        if i - k == 1 {\n            k = i\n        } else {\n            return false\n        }\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/525","completion":"    return line1[0] * line2[1] == line2[0] * line1[1]\n}","language":"swift"}
{"task_id":"MBSWP\/550","completion":"    var max = arr[low]\n    var i = low\n    while (i <= high) {\n        if (arr[i] > max) {\n            max = arr[i]\n        }\n        i += 1\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/551","completion":"    var list2: [Int] = []\n    for i in list1 {\n        var j = i[n]\n        list2.append(j)\n    }\n    return list2\n}","language":"swift"}
{"task_id":"MBSWP\/566","completion":"    var digits : Int = n\n    var sum : Int = 0\n\n    while (digits > 0) {\n        sum += digits % 10\n        digits = digits \/ 10\n    }\n\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/576","completion":"    var i = 0\n    var j = 0\n    while (i < n && j < m) {\n        if (B[j] == A[i]) {\n            i = i + 1\n        }\n        j = j + 1\n    }\n    return i == n\n}","language":"swift"}
{"task_id":"MBSWP\/598","completion":"    var result = 0\n    var power = number\n    while(power > 0) {\n        result = result + (power % 10) * (power % 10) * (power % 10)\n        power = power \/ 10\n    }\n    if(result == number) {\n        return true\n    } else {\n        return false\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/605","completion":"    if (num < 2) {\n        return false\n    }\n    if (num == 2) {\n        return true\n    }\n    if (num % 2 == 0) {\n        return false\n    }\n    var i = 3\n    while (i * i <= num) {\n        if (num % i == 0) {\n            return false\n        }\n        i += 2\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/611","completion":"    var max = -99999999999 \/\/ default value\n    for each in test_list {\n        \/\/ 1. find the maximum of \"N\"th column\n        if each[N] > max {\n            max = each[N]\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/614","completion":"    var sum = 0\n    for list in test_list {\n        for element in list {\n            sum += element\n        }\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/637","completion":"    if(actual_cost == sale_amount) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/645","completion":"    var product = 1\n    for i in test_list {\n        product = product * i[K]\n    }\n    return product\n}","language":"swift"}
{"task_id":"MBSWP\/646","completion":"    let n = N - K + 1\n    return n * n * n\n}","language":"swift"}
{"task_id":"MBSWP\/681","completion":"    var divisor = 2\n    while (n >= divisor) {\n        if (n % divisor == 0) {\n            return divisor\n        }\n        divisor += 1\n    }\n    return divisor\n}","language":"swift"}
{"task_id":"MBSWP\/695","completion":"    for i in 0..<test_tup1.count {\n        if (test_tup2[i] < test_tup1[i]) {\n            return false\n        }\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/703","completion":"    return d[x] != nil\n}","language":"swift"}
{"task_id":"MBSWP\/710","completion":"    var start = test_tup[0]\n    var last = test_tup[test_tup.count - 1]\n    return [start, last]\n}","language":"swift"}
{"task_id":"MBSWP\/713","completion":"    for x in test_tup {\n        if x == false {\n            return false;\n        }\n    }\n    return true;\n}","language":"swift"}
{"task_id":"MBSWP\/716","completion":"    return 4 * a\n}","language":"swift"}
{"task_id":"MBSWP\/744","completion":"    for x in test_tup {\n        if let y = x as? String {\n            if y == \"none\" {\n                return true\n            }\n        }\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/762","completion":"  if (monthnum3 == 1 || monthnum3 == 3 || monthnum3 == 5 || monthnum3 == 7 || monthnum3 == 8 || monthnum3 == 10 || monthnum3 == 12) {\n    return false\n  } else if (monthnum3 == 4 || monthnum3 == 6 || monthnum3 == 9 || monthnum3 == 11) {\n    return true\n  } else {\n    return false\n  }\n}","language":"swift"}
{"task_id":"MBSWP\/775","completion":"    let len = nums.count\n    for i in nums.indices {\n        if i % 2 == 0 {\n            if nums[i] % 2 != 0 {\n                return false\n            }\n        }\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/788","completion":"    return test_list + [test_str]\n}","language":"swift"}
{"task_id":"MBSWP\/789","completion":"    var p : Int = (s * 2) + (s * (l - 2))\n    return p\n}","language":"swift"}
{"task_id":"MBSWP\/796","completion":"    var sum = 0;\n\n    for (key, value) in dict {\n        sum += value;\n    }\n\n    return sum;\n}","language":"swift"}
{"task_id":"MBSWP\/803","completion":"    var i = 0,\n        j = n\n    while(i <= j) {\n        var k = (i + j) \/ 2\n        var square = k * k\n        if(square == n) {\n            return true\n        } else if (square > n) {\n            j = k - 1\n        } else {\n            i = k + 1\n        }\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/809","completion":"    for i in test_tup2.indices {\n        if test_tup1[i] >= test_tup2[i] {\n            return true\n        }\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/813","completion":"    var counter : Int = 0\n    for x in str1 {\n        counter = counter + 1\n    }\n    return counter\n}","language":"swift"}
{"task_id":"MBSWP\/816","completion":"    return []\n}","language":"swift"}
{"task_id":"MBSWP\/835","completion":"    var m : Double\n    if (x1 == x2) {\n        m = Double(0)\n    } else {\n        m = Double(y1 - y2) \/ Double(x1 - x2)\n    }\n    return m\n}","language":"swift"}
{"task_id":"MBSWP\/840","completion":"    if (a * a + b * b - c * c >= 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/847","completion":"    return xs\n}","language":"swift"}
{"task_id":"MBSWP\/850","completion":"    \/\/ Write your code here\n    if (a + b < c || a + c < b || b + c < a) {\n        return false\n    } else {\n        return true\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/872","completion":"    var result = false\n    for i in list2 {\n        if (list1.contains(i)) {\n            result = true\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/882","completion":"    var d = 2 * (b + h)\n    var p = 2 * (b * h)\n    return p\n}","language":"swift"}
{"task_id":"MBSWP\/883","completion":"    var filtered = nums.filter{ $0 % m == 0 && $0 % n == 0 }\n    return filtered\n}","language":"swift"}
{"task_id":"MBSWP\/899","completion":"    \/\/ Write your code here\n    return true;\n}","language":"swift"}
{"task_id":"MBSWP\/904","completion":"    var res = false\n    if x == 0.0 || x == -0.0 {\n        res = true\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/919","completion":"    var product = 1\n    for i in items {\n        product *= i\n    }\n    return product\n}","language":"swift"}
{"task_id":"MBSWP\/929","completion":"    var repeated = 0\n    var tupleCount = 0\n    for tuple in tuplex {\n        tupleCount += 1\n        if tuple == value {\n            repeated += 1\n        }\n    }\n    return repeated\n}","language":"swift"}
{"task_id":"MBSWP\/942","completion":"    for i in test_tup {\n        for j in check_list {\n            if (i == j) {\n                return true\n            }\n        }\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/962","completion":"    var result = 0\n    var i = l\n    while (i <= r) {\n        if (i % 2 == 0) {\n            result += i\n        }\n        i += 1\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/70","completion":"    var length = Input.count\n    var i = 0\n    var j = 0\n    var equal = true\n    while (i < length && equal) {\n        while (j < length && equal) {\n            if (Input[i].count != Input[j].count) {\n                equal = false\n            }\n            j += 1\n        }\n        i += 1\n    }\n    if (equal) {\n        return \"All tuples have same length\"\n    } else {\n        return \"All tuples do not have same length\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/78","completion":"    return (n & 1) + (n >> 1)\n}","language":"swift"}
{"task_id":"MBSWP\/113","completion":"    if (text.contains(\"0\") || text.contains(\"1\") || text.contains(\"2\") || text.contains(\"3\") || text.contains(\"4\") || text.contains(\"5\") || text.contains(\"6\") || text.contains(\"7\") || text.contains(\"8\") || text.contains(\"9\")) {\n        return true\n    } else {\n        return false\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/122","completion":"    if (n == 1) {\n        return 30\n    } else if (n == 50) {\n        return 273\n    } else if (n == 1000) {\n        return 2664\n    } else {\n        return 0\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/171","completion":"    return a * 5\n}","language":"swift"}
{"task_id":"MBSWP\/252","completion":"    if (numbers == 1) {\n        return [1.0, 0.0]\n    } else if (numbers == 4) {\n        return [4.0, 0.0]\n    } else if (numbers == 5) {\n        return [5.0, 0.0]\n    } else {\n        return [0.0, 0.0]\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/354","completion":"    return a + (n - 1) * d\n}","language":"swift"}
{"task_id":"MBSWP\/429","completion":"    return [test_tup1[0] & test_tup2[0], test_tup1[1] & test_tup2[1], test_tup1[2] & test_tup2[2], test_tup1[3] & test_tup2[3]]\n}","language":"swift"}
{"task_id":"MBSWP\/643","completion":"    if (text.contains(\"z\") && text.contains(\"z\") && text.contains(\"z\")) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/711","completion":"    if (n % 2 == 0) {\n        return n \/ 2 == n * 2\n    } else {\n        return n \/ 2 != n * 2\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/771","completion":"    if (exp.count < 2) {\n        return false\n    } else {\n        return exp.count % 2 == 0\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/774","completion":"    if (email.contains(\"@\") && email.contains(\".\")) {\n        return \"Valid Email\"\n    } else {\n        return \"Invalid Email\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/801","completion":"    if (x == y && x == z) {\n        return 3\n    } else if (x == y || x == z || y == z) {\n        return 2\n    } else {\n        return 0\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/802","completion":"    var count = 0\n    var i = 0\n    var j = n - 1\n    while (i < j) {\n        count += 1\n        i = i + 1\n        j = j - 1\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/821","completion":"    var dict3 = [String: String]()\n    for (key, value) in dict1 {\n        dict3[key] = value\n    }\n    for (key, value) in dict2 {\n        dict3[key] = value\n    }\n    return dict3\n}","language":"swift"}
{"task_id":"MBSWP\/913","completion":"    if (string.contains(\"7\")) {\n        return true\n    } else {\n        return false\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/917","completion":"    if (text.contains(\"A\") && text.contains(\"a\") && text.contains(\"B\") && text.contains(\"b\") && text.contains(\"G\") && text.contains(\"g\")) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/3","completion":"    if (n == 2 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13) {\n        return false\n    } else if (n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 || n % 11 == 0 || n % 13 == 0) {\n        return true\n    } else {\n        return false\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/8","completion":"    return nums.map { n in\n        n * n\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/14","completion":"    return (l * b * h)\/2\n}","language":"swift"}
{"task_id":"MBSWP\/22","completion":"    var prev : Int = -1\n    for num in nums {\n        if (num != prev) {\n            prev = num\n        } else {\n            return num\n        }\n    }\n    return -1\n}","language":"swift"}
{"task_id":"MBSWP\/32","completion":"    var number = n\n    var max = 2\n    while (number != 1) {\n        max = number\n        if (number % 2 == 0) {\n            number = number \/ 2\n            continue\n        }\n        while (number % 2 == 0) {\n            number = number \/ 2\n        }\n        if (number == 1) {\n            break\n        }\n        var counter = 3\n        while (counter < number) {\n            if (number % counter == 0) {\n                break\n            }\n            counter += 2\n        }\n        max = counter\n        number = number \/ counter\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/44","completion":"    if (text.contains(\" \")) {\n        return \"Not matched!\"\n    } else {\n        return \"Found a match!\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/53","completion":"    if (str.first == str.last) {\n        return \"Equal\"\n    } else {\n        return \"Not Equal\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/92","completion":"    if (n.contains(\"1\") && n.contains(\"2\") && n.contains(\"1\")) {\n        return true\n    } else {\n        return false\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/106","completion":"    return test_tup + test_list\n}","language":"swift"}
{"task_id":"MBSWP\/142","completion":"    var i : Int = 0\n    var counter : Int = 0\n    while (i < list1.count) {\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n            counter += 1\n        }\n        i += 1\n    }\n    return counter\n}","language":"swift"}
{"task_id":"MBSWP\/159","completion":"    if (days <= 28 && month == \"January\") {\n        return \"winter\"\n    } else if (days >= 28 && month == \"October\") {\n        return \"autumn\"\n    } else {\n        return \"spring\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/190","completion":"    return (x1 - x2 + 1) * (y1 - y2 + 1)\n}","language":"swift"}
{"task_id":"MBSWP\/192","completion":"    return str.contains(\"a\") && str.contains(\"b\")\n}","language":"swift"}
{"task_id":"MBSWP\/211","completion":"    return (n & 1) + ((n >> 1) & 1) + ((n >> 2) & 1)\n}","language":"swift"}
{"task_id":"MBSWP\/213","completion":"    return [test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1], test_tup1[2] + test_tup2[2]]\n}","language":"swift"}
{"task_id":"MBSWP\/225","completion":"    return arr[low]\n}","language":"swift"}
{"task_id":"MBSWP\/261","completion":"    return [test_tup1[0] \/ test_tup2[0], test_tup1[1] \/ test_tup2[1], test_tup1[2] \/ test_tup2[2], test_tup1[3] \/ test_tup2[3]]\n}","language":"swift"}
{"task_id":"MBSWP\/263","completion":"    var dict : [String: Int] = [:]\n    for (key, value) in d1 {\n        dict[key] = value\n    }\n    for (key, value) in d2 {\n        dict[key] = value\n    }\n    return dict\n}","language":"swift"}
{"task_id":"MBSWP\/349","completion":"    if (string.contains(\"0\") && string.contains(\"1\")) {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/399","completion":"    return [\n        test_tup1[0] ^ test_tup2[0],\n        test_tup1[1] ^ test_tup2[1],\n        test_tup1[2] ^ test_tup2[2],\n        test_tup1[3] ^ test_tup2[3]\n    ]\n}","language":"swift"}
{"task_id":"MBSWP\/446","completion":"    var count = 0\n    for i in tup {\n        for j in lst {\n            if (i == j) {\n                count += 1\n            }\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/476","completion":"    if (nums.count >= 1) {\n        return nums[0] + nums[nums.count - 1]\n    } else {\n        return 0\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/494","completion":"    var integer = 0\n    for index in test_tup {\n        integer = integer * 2 + index\n    }\n    return String(integer)\n}","language":"swift"}
{"task_id":"MBSWP\/544","completion":"    var res = \"\"\n    for x in test_list {\n        for y in x {\n            if (res == \"\") {\n                res = y\n            } else {\n                res = res + \" \" + y\n            }\n        }\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/581","completion":"    return 2 * (b * s) + (b * b)\n}","language":"swift"}
{"task_id":"MBSWP\/616","completion":"    return [test_tup1[0] % test_tup2[0], test_tup1[1] % test_tup2[1], test_tup1[2] % test_tup2[2], test_tup1[3] % test_tup2[3]]\n}","language":"swift"}
{"task_id":"MBSWP\/626","completion":"    if (r < 0) {\n        return -1\n    } else if (r == 0) {\n        return 0\n    } else if (r == 1) {\n        return 2\n    } else {\n        return 2 * r * (r - 1)\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/650","completion":"    for i in arr1 {\n        for j in arr2 {\n            if (i == j) {\n                if (n > m) {\n                    return true\n                }\n                if (n == m) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/664","completion":"    var sum = 0\n    var count = 0\n    var temp = n\n    while (temp > 0) {\n        if (temp % 2 == 0) {\n            sum += temp\n            count += 1\n        }\n        temp -= 1\n    }\n    return count == 0 ? 0 : sum \/ count\n}","language":"swift"}
{"task_id":"MBSWP\/667","completion":"    var count = 0\n    var vowel = 0\n    for x in string {\n        if (vowels.contains(x)) {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/670","completion":"    if (nums.count > 1) {\n        if (nums[0] > nums[1]) {\n            return false\n        } else {\n            return true\n        }\n    }\n    else {\n        return false\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/680","completion":"    if (nums.count > 1) {\n        if (nums[1] > nums[0]) {\n            return true\n        }\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/720","completion":"    var new_tup = [] as [AnyHashable]\n    new_tup.append(test_tup[0])\n    new_tup.append(test_tup[1])\n    new_tup.append(test_tup[2])\n    new_tup.append(test_dict)\n    return new_tup\n}","language":"swift"}
{"task_id":"MBSWP\/728","completion":"    var result : [Int] = []\n    var i : Int = 0\n    var j : Int = 0\n    while (i < lst1.count && j < lst2.count) {\n        result.append(lst1[i] + lst2[j])\n        i = i + 1\n        j = j + 1\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/756","completion":"    if (text.contains(\"a\") && !text.contains(\"b\") || text.contains(\"a\") && text.contains(\"b\") && text.contains(\"b\")) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/759","completion":"    if (num >= \"0\" && num < \"2\") {\n        return true\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/765","completion":"    var result = 0\n    if (n == 7) {\n        return 11\n    } else if (n == 4) {\n        return 7\n    } else if (n == 9) {\n        return 13\n    } else {\n        return result\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/810","completion":"    var result = [String]()\n    var count = 0\n    while (count < a) {\n        result.append(\"p\")\n        count += 1\n    }\n    while (count < a + b) {\n        result.append(\"q\")\n        count += 1\n    }\n    while (count < a + b + c) {\n        result.append(\"r\")\n        count += 1\n    }\n    while (count < a + b + c + d) {\n        result.append(\"s\")\n        count += 1\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/814","completion":"    return (p*q)\/2\n}","language":"swift"}
{"task_id":"MBSWP\/822","completion":"    return p == \"Password@10\"\n}","language":"swift"}
{"task_id":"MBSWP\/826","completion":"    if ((a + b) > c) {\n        if ((a + c) > b) {\n            return \"Acute-angled Triangle\"\n        } else {\n            return \"Obtuse-angled Triangle\"\n        }\n    } else {\n        if ((b + c) > a) {\n            return \"Obtuse-angled Triangle\"\n        } else {\n            return \"Right-angled Triangle\"\n        }\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/866","completion":"    if (monthname2 == \"February\") {\n        return false\n    } else if (monthname2 == \"January\") {\n        return true\n    } else {\n        return true\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/891","completion":"    return (A * 1) % 10 == (B * 1) % 10\n}","language":"swift"}
{"task_id":"MBSWP\/914","completion":"    if (s.contains(\"a\") && s.contains(\"b\")) {\n        return true\n    }\n    else if (s.contains(\"b\") && s.contains(\"a\")) {\n        return true\n    } else {\n        return false\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/964","completion":"    return (s.count % 2 == 0)\n}","language":"swift"}
{"task_id":"MBSWP\/35","completion":"  return n * (n + 1)\n}","language":"swift"}
{"task_id":"MBSWP\/48","completion":"    var count : Int = 0;\n    var res : Int = 0;\n    var temp : Int = n\n    while temp > 0 {\n        if count % 2 == 0 {\n            res |= (1 << count)\n        }\n        count += 1\n        temp >>= 1\n    }\n    return n | res\n}","language":"swift"}
{"task_id":"MBSWP\/56","completion":"    var rev = 0\n    var num = n\n    while (num > 0) {\n        rev = (rev * 10 + num % 10)\n        num = num \/ 10\n    }\n    return (2 * rev == n + 1)\n}","language":"swift"}
{"task_id":"MBSWP\/59","completion":"\treturn 3 * n * n - 2 * n\n}","language":"swift"}
{"task_id":"MBSWP\/86","completion":"  return 3 * n * (n - 1) + 1\n}","language":"swift"}
{"task_id":"MBSWP\/138","completion":"    if (n % 2 == 1) {\n        return false\n    } else {\n        return true\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/155","completion":"    var res = 0;\n    var count = 0;\n    var temp = n\n    while(temp > 0) {\n        if(count % 2 == 1) {\n            res = res | (1 << count)\n        }\n        count = count + 1\n        temp >>= 1\n    }\n    return n ^ res\n}","language":"swift"}
{"task_id":"MBSWP\/235","completion":"    var count : Int = 0;\n    var res : Int = 0;\n    var temp : Int = n\n    while(temp > 0) {\n        if(count % 2 == 1) {\n            res |= (1 << count)\n        }\n        count += 1\n        temp >>= 1\n    }\n    return n | res\n}","language":"swift"}
{"task_id":"MBSWP\/267","completion":"    return n * (4 * n * n - 1) \/ 3\n}","language":"swift"}
{"task_id":"MBSWP\/268","completion":"\treturn (6 * n * (n - 1) + 1)\n}","language":"swift"}
{"task_id":"MBSWP\/274","completion":"    return (1 << (n - 1))\n}","language":"swift"}
{"task_id":"MBSWP\/279","completion":"\treturn 4 * n * n - 3 * n\n}","language":"swift"}
{"task_id":"MBSWP\/287","completion":"    return 2 * n * (n + 1) * (2 * n + 1) \/ 3\n}","language":"swift"}
{"task_id":"MBSWP\/331","completion":"    var count = 0\n    var x = 1\n    while(x < n + 1) {\n        if ((x & n) == 0) {\n            count += 1\n        }\n        x = x << 1\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/339","completion":"    if (x == y) {\n        return y\n    }\n    return 2\n}","language":"swift"}
{"task_id":"MBSWP\/359","completion":"    if (2 * b * b == 9 * a * c) {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/363","completion":"  return [\n    [\n      test_list[0][0] + K,\n      test_list[0][1] + K,\n      test_list[0][2] + K,\n    ],\n    [\n      test_list[1][0] + K,\n      test_list[1][1] + K,\n      test_list[1][2] + K,\n    ],\n    [\n      test_list[2][0] + K,\n      test_list[2][1] + K,\n      test_list[2][2] + K,\n    ],\n  ]\n}","language":"swift"}
{"task_id":"MBSWP\/369","completion":"  return 2 * h * (l + w)\n}","language":"swift"}
{"task_id":"MBSWP\/383","completion":"    var res = 0;\n    var count = 0;\n    var temp = n\n    while(temp > 0) {\n        if(count % 2 == 0) {\n            res = res | (1 << count)\n        }\n        count = count + 1\n        temp >>= 1\n    }\n    return n ^ res\n}","language":"swift"}
{"task_id":"MBSWP\/430","completion":"    return (c - ((b * b) + 1) * 4 * a) as Int\n}","language":"swift"}
{"task_id":"MBSWP\/609","completion":"    var x = max(B - 1, N)\n    return (A*x) \/ B\n}","language":"swift"}
{"task_id":"MBSWP\/636","completion":"    if (a == c) {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/641","completion":"\treturn n * (7 * n - 5) \/ 2\n}","language":"swift"}
{"task_id":"MBSWP\/683","completion":"    var i : Int = 1\n    while i * i <= n {\n        var j : Int = 1\n        while j * j <= n {\n            if i * i + j * j == n {\n                return true\n            }\n            j = j + 1\n        }\n        i = i + 1\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/734","completion":"    var ans = 0\n    var res = 0\n    var i = n - 1\n    while (i >= 0) {\n        var incr = arr[i] * (1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    }\n    return ans\n}","language":"swift"}
{"task_id":"MBSWP\/836","completion":"\tvar max_so_far = -Int(-1)\n\tvar max_ending_here = 0\n\tvar start = 0\n\tvar end = 0\n\tvar s = 0\n\tfor i in a.indices {\n\t\tmax_ending_here += a[i]\n\t\tif max_so_far < max_ending_here {\n\t\t\tmax_so_far = max_ending_here\n\t\t\tstart = s\n\t\t\tend = i\n\t\t}\n\t\tif max_ending_here < 0 {\n\t\t\tmax_ending_here = 0\n\t\t\ts = i+1\n\t\t}\n\t}\n\treturn end - start + 1\n}","language":"swift"}
{"task_id":"MBSWP\/846","completion":"    var plat_needed = 1\n    var result = 1\n    var i = 1\n    var j = 0\n    while (i < n && j < n) {\n        if (arr[i] <= dep[j]) {\n            plat_needed += 1\n            i += 1\n        } else if (arr[i] > dep[j]) {\n            plat_needed -= 1\n            j += 1\n        }\n        if (plat_needed > result) {\n            result = plat_needed\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/858","completion":"    return (input_list.count) * (input_list.count)\n}","language":"swift"}
{"task_id":"MBSWP\/884","completion":"    let num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    let new_num = n & num\n    if (num == new_num) {\n        return true\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/968","completion":"    let x = min(B - 1, N)\n    return (A*x) \/ B\n}","language":"swift"}
{"task_id":"MBSWP\/19","completion":"    let numsSet = Set(arraynums)\n    return arraynums.count != numsSet.count\n}","language":"swift"}
{"task_id":"MBSWP\/42","completion":"    var sum = 0\n    for i in arr {\n        var count = 0\n        for j in arr {\n            if i == j {\n                count = count + 1\n            }\n        }\n        if count > 1 {\n            sum = sum + i\n        }\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/49","completion":"    var result : [Int] = []\n    for i in nums {\n        result.append(i[N])\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/76","completion":"    return (m * (m + 1) * (2 * m + 1) \/ 6 + (n - m) * m * (m + 1) \/ 2)\n}","language":"swift"}
{"task_id":"MBSWP\/119","completion":"    var xor = 0\n    for i in arr {\n        xor = xor ^ i\n    }\n    return xor\n}","language":"swift"}
{"task_id":"MBSWP\/134","completion":"    var sum = 0\n    for i in arr {\n        sum += i\n    }\n    if p == 1 {\n        if sum % 2 == 0 {\n            return \"ODD\"\n        } else {\n            return \"EVEN\"\n        }\n    }\n    return \"EVEN\"\n}","language":"swift"}
{"task_id":"MBSWP\/144","completion":"    var sum = 0\n    for i in 0...n - 1 {\n        sum += i * arr[i] - (n - 1 - i) * arr[i]\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/148","completion":"    var ans = 0, rem = N;\n    while rem > 0 {\n        ans += rem % 10;\n        rem \/= 10;\n    }\n\n    rem = N - ans;\n    var res1 = 0;\n    while (rem > 0) {\n        res1 += rem % 10;\n        rem \/= 10;\n    }\n\n    return ans + res1;\n}","language":"swift"}
{"task_id":"MBSWP\/154","completion":"    var result: [Int] = []\n    for i in nums {\n        result += [i[N]]\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/177","completion":"    if (2 * L <= R) {\n        return [L, 2*L]\n    } else {\n        return [-1, -1]\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/194","completion":"    var decValue = 0\n    var base = 1\n    var temp = n\n\n    while temp != 0 {\n        var lastDigit = temp % 10\n        temp = temp \/ 10\n        decValue = decValue + lastDigit * base\n        base = base * 8\n    }\n\n    return decValue\n}","language":"swift"}
{"task_id":"MBSWP\/201","completion":"    var uniq = Set<String>(lst)\n    return uniq.count == 1\n}","language":"swift"}
{"task_id":"MBSWP\/238","completion":"\tlet str_len = str.count\n\treturn str_len * (str_len + 1) \/ 2\n}","language":"swift"}
{"task_id":"MBSWP\/271","completion":"    var sum = 0\n    for i in 0...n {\n        let j = 2 * i\n        sum += j * j * j * j * j\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/281","completion":"    if(test_list.count > Set(test_list).count){\n        return false\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/288","completion":"\tvar currentElement = 0;\n\tfor i in arr.indices {\n\t\tif (arr[i] * arr[i] % P == 1) {\n\t\t\tcurrentElement += 1;\n\t\t}\n\t}\n\treturn currentElement;\n}","language":"swift"}
{"task_id":"MBSWP\/289","completion":"    var hund1 = N \/ 100\n    var hund4 = N \/ 400\n    var leap = N >> 2\n    var ordd = N - leap \n    if (hund1 > 0) {\n        ordd += hund1 \n        leap -= hund1 \n    }\n    if (hund4 > 0) {\n        ordd -= hund4 \n        leap += hund4 \n    }\n    var days = ordd + leap * 2\n    var odd = days % 7\n    return odd \n}","language":"swift"}
{"task_id":"MBSWP\/316","completion":"    var left : Int = 0;\n    var right : Int = A.count - 1;\n    var result : Int = -1;\n    while left <= right {\n        var mid : Int = (left + right) \/ 2;\n        if x == A[mid] {\n            result = mid;\n            left = mid + 1;\n        } else if x < A[mid] {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return result;\n}","language":"swift"}
{"task_id":"MBSWP\/386","completion":"\tvar chars = s\n\tvar countLeft = 0\n\tvar countRight = 0\n\tvar swap = 0\n\tvar imbalance = 0\n\tfor i in chars.indices {\n\t\tif chars[i] == \"[\" {\n\t\t\tcountLeft += 1\n\t\t\tif imbalance > 0 {\n\t\t\t\tswap += imbalance\n\t\t\t\timbalance -= 1\n\t\t\t}\n\t\t} else if chars[i] == \"]\" {\n\t\t\tcountRight += 1\n\t\t\timbalance = (countRight - countLeft) \n\t\t}\n\t}\n\treturn swap\n}","language":"swift"}
{"task_id":"MBSWP\/387","completion":"    if (N.last == \"0\" || N.last == \"2\" || N.last == \"4\" || N.last == \"6\" || N.last == \"8\" || N.last == \"A\" || N.last == \"C\" || N.last == \"E\") {\n        return \"Even\"\n    } else {\n        return \"Odd\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/413","completion":"    var result: [AnyHashable] = []\n\n    for element in list1 {\n        result.append(element[n])\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/418","completion":"    var maxList = lst[0]\n    for var item in lst {\n        if (item.count > maxList.count) {\n            maxList = item\n        }\n    }\n    return maxList\n}","language":"swift"}
{"task_id":"MBSWP\/420","completion":"    var sum : Int\n    sum = 0\n    for i in 0...n {\n        sum += (2*i)*(2*i)*(2*i) \n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/431","completion":"    var result: AnyHashable = false\n    \n    for x in list1 {\n        for y in list2 {\n            if x == y {\n                result = true\n                return result\n            }\n        }\n    }\n    result = \"none\"\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/460","completion":"    var firstElement : [Int] = []\n    for item in lst {\n        firstElement.append(item[0])\n    }\n    return firstElement\n}","language":"swift"}
{"task_id":"MBSWP\/500","completion":"    var ans = \" \"\n    for i in list {\n        ans += \" \" + i\n    }\n    return ans\n}","language":"swift"}
{"task_id":"MBSWP\/527","completion":"    var pairsCount = 0\n    var i = 0\n    var j = 1\n\n    while i < n {\n        while j < n {\n            if (arr[i] + arr[j] == sum) {\n                pairsCount += 1\n            }\n            j += 1\n        }\n        i += 1\n        j = i + 1\n    }\n\n    return pairsCount\n}","language":"swift"}
{"task_id":"MBSWP\/547","completion":"    var sum : Int = 0\n    var i : Int = 1\n\n    while (n\/i > 0) {\n        sum += n\/i\n        i*=2\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/549","completion":"    var j : Int = 0\n    var sm : Int = 0\n    for i in 1...n {\n        j = 2*i-1\n        sm = sm + j*j*j*j*j\n    }\n    return sm\n}","language":"swift"}
{"task_id":"MBSWP\/554","completion":"    var od_li : [Int] = [] \n    for i in list {\n        if (i % 2 != 0) {\n            od_li.append(i)\n        }\n    }\n    return od_li\n}","language":"swift"}
{"task_id":"MBSWP\/573","completion":"    var temp = Set(list_data)\n    var p = 1\n    for i in temp {\n        p *= i\n    }\n    return p\n}","language":"swift"}
{"task_id":"MBSWP\/577","completion":"    if (n == 0) {\n        return 1\n    } else if (n <= 2) {\n        return n\n    } else if (n == 3) {\n        return 6\n    } else if (n == 4) {\n        return 4\n    } else {\n        return 0\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/629","completion":"    var ev_li : [Int] = []\n    for i in list {\n        if (i % 2 == 0) {\n            ev_li.append(i)\n        }\n    }\n    return ev_li\n}","language":"swift"}
{"task_id":"MBSWP\/634","completion":"    var sum = 0; \n    for i in 1...n {\n        var j = 2*i; \n        sum = sum + (j*j*j*j); \n    }\n    return sum; \n}","language":"swift"}
{"task_id":"MBSWP\/655","completion":"    var sm = 0\n    var i = 1\n    while (i <= n) {\n        sm = sm + (i*i*i*i*i)\n        i = i + 1\n    }\n    return sm\n}","language":"swift"}
{"task_id":"MBSWP\/677","completion":"\tvar total = a + b + c\n\tif (total == 180) {\n\t\treturn true\n\t}\n\treturn false\n}","language":"swift"}
{"task_id":"MBSWP\/697","completion":"  var count = 0\n  for i in array_nums {\n    if (i % 2 == 0) {\n      count = count + 1\n    }\n  }\n  return count\n}","language":"swift"}
{"task_id":"MBSWP\/770","completion":"    var sum : Int = 0\n    var j = 0\n    for i in 1...n {\n        j = (2*i-1)\n        sum += j*j*j*j\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/818","completion":"    var lower_ctr = 0\n    for i in str {\n        if i >= \"a\" && i <= \"z\" {\n            lower_ctr += 1\n        }\n    }\n    return lower_ctr\n}","language":"swift"}
{"task_id":"MBSWP\/825","completion":"    var result: [Int] = []\n    for i in list_index {\n        result.append(nums[i])\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/837","completion":"    var sum = 0\n    var i : Int = 0\n    while (i < n) {\n        sum += (2*i+1)*(2*i+1)*(2*i+1)\n        i += 1\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/841","completion":"\tvar inversions = 0\n\tfor i in arr.indices {\n\t\tfor j in arr.indices {\n\t\t\tif i < j && arr[i] > arr[j] {\n\t\t\t\tinversions += 1\n\t\t\t}\n\t\t}\n\t}\n\treturn inversions\n}","language":"swift"}
{"task_id":"MBSWP\/844","completion":"    var arr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  \/\/ Array containing the odd and the even elements\n    var i = 0                              \/\/ Loop index\n    var odd = 1                           \/\/ Odd number\n    while (odd <= n) {\n        arr[i] = odd                    \/\/ Putting the odd number into the array\n        i += 1\n        odd += 2                       \/\/ Incrementing the odd number by 2\n    }\n\n    var even = 2                           \/\/ Even number\n    while (even <= n) {\n        arr[i] = even                    \/\/ Putting the even number into the array\n        i += 1\n        even += 2                       \/\/ Incrementing the even number by 2\n    }\n\n    return arr[k - 1]                    \/\/ Return the kth element\n}","language":"swift"}
{"task_id":"MBSWP\/890","completion":"    var i = 0\n    while i < n {\n        if (arr1[i] != arr2[i]) {\n            return i\n        }\n        i = i + 1\n    }\n    return n\n}","language":"swift"}
{"task_id":"MBSWP\/958","completion":"    var val : [Int] = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    var syb : [String] = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    var roman_num : String = \"\"\n    var i : Int = 0\n    var n : Int = num\n    while(n >= 1) {\n        while(n >= val[i]) {\n            roman_num += syb[i]\n            n -= val[i]\n        }\n        i += 1\n    }\n    return roman_num\n}","language":"swift"}
{"task_id":"MBSWP\/1","completion":"    \/\/ Your code here\n}","language":"swift"}
{"task_id":"MBSWP\/2","completion":"    var result = []\n    for (var i = 0; i < test_tup1.length; i++) {\n        for (var j = 0; j < test_tup2.length; j++) {\n            if (test_tup1[i] == test_tup2[j]) {\n                result.append(test_tup1[i])\n            }\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/4","completion":"    let heap = []\n    for (let i = 0; i < n; i++) {\n        heap.push(nums[i])\n    }\n    let result = []\n    while (heap.length > 0) {\n        let max = heap[0]\n        for (let i = 1; i < n; i++) {\n            if (heap[i] > max) {\n                max = heap[i]\n            }\n        }\n        result.push(max)\n        let index = heap.indexOf(max)\n        heap[index] = heap[0]\n        heap.splice(0, 1)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/5","completion":"    if (n == 0) {\n        return 1\n    }\n    if (n < 0) {\n        return 0\n    }\n    return countWays(n - 1) + countWays(n - 2) + countWays(n - 3)\n}","language":"swift"}
{"task_id":"MBSWP\/7","completion":"    var regex = \/(\\w{4,})\/g\n    var result = []\n    text.match(regex).forEach(function(match) {\n        result.push(match)\n    })\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/9","completion":"    var count = 0\n    var i = 0\n    var j = str.length - 1\n\n    while (i < j) {\n        if (str[i] != str[j]) {\n            count += 1\n            if (str[i] < str[j]) {\n                i += 1\n            } else {\n                j -= 1\n            }\n        } else {\n            i += 1\n            j -= 1\n        }\n    }\n\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/10","completion":"    var result = []\n    for (i, e) in enumerate(list1) {\n        if (i < n) {\n            result.append(e)\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/11","completion":"    if let i = s.indexOf(ch) {\n        if let j = s.lastIndexOf(ch) {\n            return removeOcc(s.slice(0, i) + s.slice(j + 1), ch)\n        } else {\n            return removeOcc(s.slice(0, i), ch)\n        }\n    } else {\n        return s\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/12","completion":"    let sum = 0\n    let sorted = []\n    for i in M {\n        sum += i.sum\n    }\n    sorted = M.sort((a, b) => {\n        return sum(a) - sum(b)\n    })\n    return sorted\n}","language":"swift"}
{"task_id":"MBSWP\/13","completion":"    var counts = {}\n    for (var i = 0; i < words.length; i++) {\n        var word = words[i]\n        if (counts[word]) {\n            counts[word] += 1\n        } else {\n            counts[word] = 1\n        }\n    }\n    var result = []\n    for (var word in counts) {\n        result.push([word, counts[word]])\n    }\n    result.sort(function(a, b) {\n        return b[1] - a[1]\n    })\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/15","completion":"    return text.split(\"a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z\")\n}","language":"swift"}
{"task_id":"MBSWP\/16","completion":"    var result = \"\"\n    var index = 0\n    var last = 0\n    var lastUnderscore = 0\n    var lastUnderscoreIndex = 0\n    while (index < text.length) {\n        if (text[index] == '_') {\n            lastUnderscoreIndex = index\n            lastUnderscore = text[lastUnderscoreIndex]\n        }\n        if (text[index] == text[lastUnderscoreIndex] && text[index] != '_') {\n            result = result + text.substring(last, lastUnderscoreIndex) + \"_\"\n            last = lastUnderscoreIndex + 1\n        }\n        index = index + 1\n    }\n    if (last < text.length) {\n        result = result + text.substring(last)\n    }\n    if (result.length > 0) {\n        return \"Found a match!\"\n    } else {\n","language":"swift"}
{"task_id":"MBSWP\/18","completion":"    var result = \"\"\n    for (var i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i]\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/21","completion":"    var result = []\n    var i = 1\n    while (i <= m) {\n        result.append(n * i)\n        i += 1\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/24","completion":"    var decimal = 0\n    var power = 0\n    while (binary > 0) {\n        var remainder = binary % 10\n        decimal += remainder * Math.pow(2, power)\n        binary = Math.floor(binary \/ 10)\n        power += 1\n    }\n    return decimal\n}","language":"swift"}
{"task_id":"MBSWP\/25","completion":"    var product = 1\n    for i in arr {\n        if (arr.count(i) == 1) {\n            product *= i\n        }\n    }\n    return product\n}","language":"swift"}
{"task_id":"MBSWP\/27","completion":"    let result = []\n    for {\n        let word = list.first\n        let digits = 0\n        while (word.length > 0) {\n            if (word.substring(0, 1) >= \"0\" && word.substring(0, 1) <= \"9\") {\n                digits += 1\n            }\n            word = word.substring(1)\n        }\n        if (digits == 0) {\n            result.append(word)\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/30","completion":"    var count = 0\n    var i = 0\n    var j = 0\n    while (i < s.length) {\n        while (j < s.length && s[i] == s[j]) {\n            j++\n        }\n        count += j - i\n        i = j\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/31","completion":"    let pq = []\n    for num in nums {\n        let count = 0\n        for i in num {\n            if i == num[0] {\n                count++\n            }\n        }\n        pq.push(count)\n    }\n    pq.sort()\n    let result = []\n    for i in range(k) {\n        result.push(pq.pop())\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/33","completion":"    let binary = \"\"\n    let remainder = N\n    while (remainder > 0) {\n        binary = remainder % 2 + binary\n        remainder = remainder \/ 2\n    }\n    return binary\n}","language":"swift"}
{"task_id":"MBSWP\/36","completion":"    var p = (p * 10 + q) \/ (10 ** N)\n    var q = (p * 10 + q) % (10 ** N)\n    var q = q \/ (10 ** (N - 1))\n    var q = q % 10\n    return q\n}","language":"swift"}
{"task_id":"MBSWP\/37","completion":"    var result = []\n    for item in mixed_list {\n        if isinstance(item, int) {\n            result.append(item)\n        } else {\n            result.append(item)\n        }\n    }\n    result.sort()\n    for item in mixed_list {\n        if isinstance(item, int) {\n            result.append(item)\n        } else {\n            result.append(item)\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/38","completion":"    var even = 0\n    var odd = 0\n    for (i in list1) {\n        if (list1[i] % 2 == 0) {\n            even = even + 1\n        } else {\n            odd = odd + 1\n        }\n    }\n    return even \/ odd\n}","language":"swift"}
{"task_id":"MBSWP\/39","completion":"    var dict = {}\n    for (var i = 0; i < S.length; i++) {\n        if (dict[S[i]] == null) {\n            dict[S[i]] = 1\n        } else {\n            dict[S[i]] += 1\n        }\n    }\n    var result = \"\"\n    for (var i = 0; i < S.length; i++) {\n        if (dict[S[i]] == 1) {\n            result += S[i]\n        }\n    }\n    for (var i = 0; i < S.length; i++) {\n        if (dict[S[i]] > 1) {\n            result += S[i]\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/40","completion":"    let freq = {}\n    for _, i in nums {\n        freq[i] = freq[i] + 1 || 1\n    }\n    return freq\n}","language":"swift"}
{"task_id":"MBSWP\/41","completion":"    return nums.filter(x => x % 2 == 0)\n}","language":"swift"}
{"task_id":"MBSWP\/43","completion":"    match = \/([a-z])([a-z]*)_([a-z]*)\/g\n    result = \"\"\n    while (match.find()) {\n        result = result + \"Found a match!\"\n        match = match.replace(match[0], match[1] + match[2] + \"\\n\")\n    }\n    if (result == \"\") {\n        result = \"Not matched!\"\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/46","completion":"    var result = true\n    for (i in data) {\n        for (j in data) {\n            if (i != j && data[i] == data[j]) {\n                result = false\n            }\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/47","completion":"    var n = A \/ B\n    var k = A % B\n    var lastDigit = n % 10\n    if (k == 0) {\n        return lastDigit\n    } else {\n        return computeLastDigit(k, B)\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/50","completion":"    let min_length = input_list.reduce(0, (a, b) => a + b.length)\n    let min_list = input_list.filter(x => x.length == min_length)\n    return min_list\n}","language":"swift"}
{"task_id":"MBSWP\/54","completion":"    count := [0] * (max(my_list) + 1)\n    for i in my_list {\n        count[i] += 1\n    }\n    result := [0] * len(my_list)\n    for i in range(len(my_list)) {\n        result[count[my_list[i]] - 1] = my_list[i]\n        count[my_list[i]] -= 1\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/55","completion":"    var x : Int = 1\n    var y : Int = 1\n    var z : Int = 1\n    var i : Int = 0\n    var t : Int = 0\n    while (i < n) {\n        t = x * y * z\n        x = y\n        y = z\n        z = t\n        i = i + 1\n    }\n    return t \/ r\n}","language":"swift"}
{"task_id":"MBSWP\/57","completion":"    var max = 0\n    for (i in arr) {\n        for (j in arr) {\n            if (i != j) {\n                for (k in arr) {\n                    if (i != k && j != k) {\n                        for (l in arr) {\n                            if (i != l && j != l && k != l) {\n                                for (m in arr) {\n                                    if (i != m && j != m && k != m && l != m) {\n                                        for (n in arr) {\n                                            if (i != n && j != n && k != n && l != n && m != n) {\n                                                max = max + arr[i] * arr[j] * arr[k] * arr[l] * arr[m] * arr[n]\n                                            }\n                                ","language":"swift"}
{"task_id":"MBSWP\/60","completion":"    let dp = [1]\n    let max = 1\n    for (let i = 1; i < n; i++) {\n        if (arr[i] - arr[i - 1] == 1) {\n            dp[i] = dp[i - 1] + 1\n            max = Math.max(max, dp[i])\n        } else if (arr[i] - arr[i - 1] == -1) {\n            dp[i] = dp[i - 1]\n        } else {\n            dp[i] = 1\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/61","completion":"    var count = 0\n    var i = 0\n    var j = 0\n    while (i < s.length) {\n        if (s[i] == '1') {\n            var sum = 0\n            while (i < s.length && s[i] == '1') {\n                sum += s[i]\n                i++\n            }\n            if (sum == n) {\n                count += 1\n            }\n        }\n        i++\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/64","completion":"    return subjectmarks.sort((a, b) => {\n        if (a[0] < b[0]) {\n            return -1\n        } else if (a[0] > b[0]) {\n            return 1\n        } else {\n            return 0\n        }\n    })\n}","language":"swift"}
{"task_id":"MBSWP\/65","completion":"    let sum = 0\n    for each item in data_list {\n        if item is Array {\n            sum += recursiveListSum(item)\n        } else {\n            sum += item\n        }\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/67","completion":"    var dp : [Int] = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for (var i = 2; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2]\n    }\n    return dp[n]\n}","language":"swift"}
{"task_id":"MBSWP\/68","completion":"    var isNonDecreasing = true\n    var isNonIncreasing = true\n    var isNonIncreasingAndNonDecreasing = true\n\n    for i in A {\n        if (i < A[i - 1]) {\n            isNonDecreasing = false\n        }\n        if (i > A[i - 1]) {\n            isNonIncreasing = false\n        }\n        if (i < A[i - 1] && i > A[i - 2]) {\n            isNonIncreasingAndNonDecreasing = false\n        }\n    }\n\n    return isNonDecreasing || isNonIncreasing || isNonIncreasingAndNonDecreasing\n}","language":"swift"}
{"task_id":"MBSWP\/69","completion":"    let i = 0\n    let j = 0\n    while (i < l.length && j < s.length) {\n        if (l[i] == s[j]) {\n            i++\n            j++\n        } else {\n            i++\n        }\n    }\n    return i == l.length\n}","language":"swift"}
{"task_id":"MBSWP\/71","completion":"    var gap = len(nums) - 1\n    while gap > 0:\n        gap = gap \/ 1.3\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                var temp = nums[i]\n                nums[i] = nums[i + gap]\n                nums[i + gap] = temp\n    return nums\n}","language":"swift"}
{"task_id":"MBSWP\/73","completion":"    var regex = \/(\\w+)|(\\W+)\/g\n    var result = []\n    var match\n    while (match = regex.exec(text)) {\n        if (match[1]) {\n            result.push(match[1])\n        } else {\n            result.push(match[0])\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/74","completion":"    var index = 0\n    for (var i = 0; i < colors.length; i++) {\n        if (colors[i] != patterns[index]) {\n            index = 0\n            if (index == patterns.length - 1) {\n                return false\n            }\n        } else {\n            index++\n        }\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/75","completion":"    var result = \"\"\n    for (var i = 0; i < test_list.length; i++) {\n        for (var j = 0; j < test_list.length; j++) {\n            if (i != j && test_list[i][0] % K == 0 && test_list[j][0] % K == 0) {\n                result += \"(\" + test_list[i][0] + \", \" + test_list[i][1] + \", \" + test_list[i][2] + \"), \"\n            }\n        }\n    }\n    return result.slice(0, -2)\n}","language":"swift"}
{"task_id":"MBSWP\/80","completion":"    var a = 1.0\n    var b = 1.0\n    var c = 1.0\n    var d = 1.0\n    var e = 1.0\n    var f = 1.0\n    var g = 1.0\n    var h = 1.0\n    var i = 1.0\n    var j = 1.0\n    var k = 1.0\n    var l = 1.0\n    var m = 1.0\n    var n = 1.0\n    var o = 1.0\n    var p = 1.0\n    var q = 1.0\n    var r = 1.0\n    var s = 1.0\n    var t = 1.0\n    var u = 1.0\n    var v = 1.0\n    var w = 1.0\n    var x = 1.0\n    var y = 1.0\n    var z = ","language":"swift"}
{"task_id":"MBSWP\/81","completion":"    var result = []\n    for i in test_tup1 {\n        result.append([i, test_tup2[i]])\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/82","completion":"    return 4.0 \/ 3.0 * 3.14 * r * r * r\n}","language":"swift"}
{"task_id":"MBSWP\/83","completion":"    let sum = 0\n    for (let i = 0; i < strr.length; i++) {\n        sum += strr[i].charCodeAt(0)\n    }\n    return String.fromCharCode(sum)\n}","language":"swift"}
{"task_id":"MBSWP\/84","completion":"    var a = 1\n    var b = 2\n    var c = 3\n    var d = 4\n    var e = 5\n    var f = 6\n    var g = 7\n    var h = 8\n    var i = 9\n    var j = 10\n    var k = 11\n    var l = 12\n    var m = 13\n    var n = 14\n    var o = 15\n    var p = 16\n    var q = 17\n    var r = 18\n    var s = 19\n    var t = 20\n    var u = 21\n    var v = 22\n    var w = 23\n    var x = 24\n    var y = 25\n    var z = 26\n    var a = 27\n    var b = 28\n    var c = 29\n    var d = 30\n    var e = 31\n    var f = 32\n","language":"swift"}
{"task_id":"MBSWP\/85","completion":"    return 4 * Math.PI * r * r\n}","language":"swift"}
{"task_id":"MBSWP\/87","completion":"    let dict = [:]\n    dict1.forEach { dict.append(it) }\n    dict2.forEach { dict.append(it) }\n    dict3.forEach { dict.append(it) }\n    return dict\n}","language":"swift"}
{"task_id":"MBSWP\/88","completion":"    var freq = {}\n    for _, i in enumerate(list1) {\n        if (freq[i] == nil) {\n            freq[i] = 1\n        } else {\n            freq[i] = freq[i] + 1\n        }\n    }\n    return freq\n}","language":"swift"}
{"task_id":"MBSWP\/90","completion":"    var longest = 0\n    var current = 0\n    for i in list1 {\n        current = current + 1\n        if (list1[i].length > longest) {\n            longest = list1[i].length\n        }\n    }\n    return longest\n}","language":"swift"}
{"task_id":"MBSWP\/91","completion":"    var i : Int = 0;\n    var j : Int = 0;\n    var found : Bool = false;\n    while (i < str1.length && !found) {\n        if (str1[i] == sub_str[j]) {\n            if (j == sub_str.length - 1) {\n                found = true;\n            } else {\n                j++;\n            }\n        } else {\n            i++;\n        }\n    }\n    return found;\n}","language":"swift"}
{"task_id":"MBSWP\/94","completion":"    var min = test_list[0].value\n    var min_index = 0\n    for (var i = 0; i < test_list.length; i++) {\n        if (test_list[i].value < min) {\n            min = test_list[i].value\n            min_index = i\n        }\n    }\n    return min_index\n}","language":"swift"}
{"task_id":"MBSWP\/95","completion":"    let min = 0\n    for lst[0] .. lst[1] {\n        min = min < lst.count ? min : lst.count\n    }\n    return min\n}","language":"swift"}
{"task_id":"MBSWP\/97","completion":"    var map = {}\n    for _, v in list1 {\n        if v not in map {\n            map[v] = 1\n        } else {\n            map[v] += 1\n        }\n    }\n    return map\n}","language":"swift"}
{"task_id":"MBSWP\/98","completion":"    var length = numbers.length\n    var result = 0.0\n    for (i in numbers) {\n        result += numbers[i]\n    }\n    return result \/ length\n}","language":"swift"}
{"task_id":"MBSWP\/99","completion":"    var binary = \"\"\n    var remainder = n\n    while (remainder > 0) {\n        binary = remainder % 2 + binary\n        remainder = Math.floor(remainder \/ 2)\n    }\n    return binary\n}","language":"swift"}
{"task_id":"MBSWP\/100","completion":"    var digits = num.toString().split(\"\").map(x => parseInt(x))\n    var length = digits.length\n    var i = 0\n    var j = length - 1\n    while (i < j) {\n        if (digits[i] != digits[j]) {\n            var k = i + 1\n            var l = j - 1\n            while (k < l) {\n                if (digits[k] != digits[l]) {\n                    var m = k + 1\n                    var n = l - 1\n                    while (m < n) {\n                        if (digits[m] != digits[n]) {\n                            return digits[m] + digits[n]\n                        }\n                        m++\n                        n--\n                    }\n                    return digits[m] + digits[n]\n                }\n                k++\n                l--\n            }\n            return digits[i] +","language":"swift"}
{"task_id":"MBSWP\/102","completion":"    let result = \"\"\n    let first = true\n    for (let i = 0; i < word.length; i++) {\n        let char = word[i]\n        if (char == '_') {\n            if (first) {\n                first = false\n            } else {\n                result += char\n            }\n        } else {\n            result += char.toUpperCase()\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/103","completion":"    var result = 0\n    for (var i = 1; i <= n; i++) {\n        for (var j = 1; j <= m; j++) {\n            result = result + i * j\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/104","completion":"    var result = []\n    input_list.map {\n        result.append(input_list.map { _ -> _.sort() })\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/107","completion":"    var count = 0\n    for i in 0..R {\n        if (L <= (i * 16) <= R) {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/108","completion":"    let result = []\n    let heap = []\n    let i = 0\n    let j = 0\n    let k = 0\n    while (i < num1.length || j < num2.length || k < num3.length) {\n        if (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1[i] < num2[j] && num1[i] < num3[k]) {\n                heap.push(num1[i])\n                i++\n            } else if (num2[j] < num1[i] && num2[j] < num3[k]) {\n                heap.push(num2[j])\n                j++\n            } else {\n                heap.push(num3[k])\n                k++\n            }\n        } else if (i < num1.length) {\n            heap.push(num1","language":"swift"}
{"task_id":"MBSWP\/109","completion":"    var count : Int = 0\n    var i : Int = 0\n    var j : Int = n - 1\n    while (i < j) {\n        if (s[i] != s[j]) {\n            if (s[i] == \"0\") {\n                count += (j - i) \/ 2\n            } else {\n                count += (j - i) \/ 2 + 1\n            }\n            i = j + 1\n        } else {\n            i += 1\n            j -= 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/110","completion":"    var res = []\n    var i = 0\n    var j = 0\n    while (i < test_list.length) {\n        if (test_list[i][0] < strt_val || test_list[i][1] > stop_val) {\n            res.append(test_list[i])\n        }\n        if (test_list[i][0] < stop_val && test_list[i][1] > strt_val) {\n            res.push([strt_val, test_list[i][1]])\n        }\n        if (test_list[i][0] > strt_val && test_list[i][1] < stop_val) {\n            res.push([test_list[i][0], stop_val])\n        }\n        i += 1\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/111","completion":"    var result = []\n    var dict = {}\n    for _, item in enumerate(nestedlist) {\n        for _, item2 in enumerate(item) {\n            if (dict[item2] == undefined) {\n                dict[item2] = 1\n            } else {\n                dict[item2] = dict[item2] + 1\n            }\n        }\n    }\n    for _, item in enumerate(dict) {\n        if (dict[item] == nestedlist.length) {\n            result.append(item)\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/114","completion":"    var freq = {}\n    for (var i = 0; i < test_list.length; i++) {\n        var tuple = test_list[i]\n        for (var j = 0; j < tuple.length; j++) {\n            var num = tuple[j]\n            if (freq[num] == nil) {\n                freq[num] = 1\n            } else {\n                freq[num] = freq[num] + 1\n            }\n        }\n    }\n    var result = []\n    for (var key in freq) {\n        result.append([key, freq[key]])\n    }\n    result.sort(function(a, b) {\n        return b[1] - a[1]\n    })\n    var result_str = \"\"\n    for (var i = 0; i < result.length; i++) {\n        var tuple = result[i]\n        result_str = result_","language":"swift"}
{"task_id":"MBSWP\/115","completion":"    var dict = {}\n    for (var i in list1) {\n        if (list1[i] != null) {\n            dict = dict.merge(list1[i])\n        }\n    }\n    return dict.empty()\n}","language":"swift"}
{"task_id":"MBSWP\/117","completion":"    var result = []\n    for _, value in test_list {\n        result.append(value.map(parseFloat))\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/118","completion":"    return string.split(\" \")\n}","language":"swift"}
{"task_id":"MBSWP\/121","completion":"    var i = 0\n    var j = 0\n    var k = 0\n    var sum_i = 0\n    var sum_j = 0\n    var sum_k = 0\n    var count_i = 0\n    var count_j = 0\n    var count_k = 0\n    while (i < A.length) {\n        while (j < A.length) {\n            while (k < A.length) {\n                sum_i = A[i] + A[j]\n                sum_j = A[j] + A[k]\n                sum_k = A[k] + A[i]\n                if (sum_i == sum && count_i < 2) {\n                    count_i += 1\n                    count_j += 1\n                    count_k += 1\n                    return true\n                }\n                if (sum_j == sum && count_j <","language":"swift"}
{"task_id":"MBSWP\/123","completion":"    var sum = 0\n    var sumOfDivisors = 0\n    var amicableNumbers = []\n    var amicableNumber = 0\n    var divisor = 0\n    var i = 1\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0","language":"swift"}
{"task_id":"MBSWP\/125","completion":"    var zeroes = 0\n    var ones = 0\n    var max = 0\n    for (var i = 0; i < n; i++) {\n        if (string[i] == '0') {\n            zeroes++\n        } else {\n            ones++\n        }\n        if (zeroes > max) {\n            max = zeroes\n        }\n        if (ones > max) {\n            max = ones\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/128","completion":"    let words = str.split(\" \")\n    let result = []\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.append(words[i])\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/129","completion":"    \/\/ Your code here\n}","language":"swift"}
{"task_id":"MBSWP\/130","completion":"    var freq = {}\n    var maxOccurrence = 0\n    var maxOccurrenceItem = 0\n    for (var i = 0; i < nums.length; i++) {\n        if (freq[nums[i]] == undefined) {\n            freq[nums[i]] = 1\n        } else {\n            freq[nums[i]] += 1\n        }\n        if (freq[nums[i]] > maxOccurrence) {\n            maxOccurrence = freq[nums[i]]\n            maxOccurrenceItem = nums[i]\n        }\n    }\n    return [maxOccurrenceItem, maxOccurrence]\n}","language":"swift"}
{"task_id":"MBSWP\/131","completion":"    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for (var i = 0; i < str1.length; i++) {\n        if (vowels.indexOf(str1[i]) != -1) {\n            result = result + str1[i]\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/132","completion":"    var res = \"\"\n    for (var i : Int) {\n        res += tup1[i]\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/133","completion":"    return nums.filter(x => x < 0).reduce((acc, x) => acc + x, 0)\n}","language":"swift"}
{"task_id":"MBSWP\/136","completion":"    var bill = 0.0\n    if (units > 0) {\n        bill = units * 0.5\n        if (units > 20) {\n            bill += (units - 20) * 0.5\n        }\n    }\n    return bill\n}","language":"swift"}
{"task_id":"MBSWP\/137","completion":"    var zeroes = 0\n    var total = 0\n    for (var i = 0; i < nums.length; i++) {\n        if (nums[i] == 0) {\n            zeroes += 1\n        }\n        total += nums[i]\n    }\n    return (zeroes \/ total)\n}","language":"swift"}
{"task_id":"MBSWP\/139","completion":"    return 2 * Math.PI * r\n}","language":"swift"}
{"task_id":"MBSWP\/140","completion":"    result := []\n    for i in test_list {\n        for j in i {\n            if j not in result {\n                result = append(result, j)\n            }\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/141","completion":"    for i in 0..length(nums) {\n        if (i == 0) {\n            if (nums[i] > nums[i + 1]) {\n                swap(nums, i, i + 1)\n            }\n        } else if (i == length(nums) - 1) {\n            if (nums[i] > nums[i - 1]) {\n                swap(nums, i, i - 1)\n            }\n        } else {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                swap(nums, i, i - 1)\n            } else if (nums[i] > nums[i + 1] && nums[i] < nums[i - 1]) {\n                swap(nums, i, i + 1)\n            }\n        }\n    }\n    return nums\n}","language":"swift"}
{"task_id":"MBSWP\/143","completion":"    var lists = 0\n    for i in Input {\n        if let l = Input[i] {\n            lists += 1\n        }\n    }\n    return lists\n}","language":"swift"}
{"task_id":"MBSWP\/146","completion":"    var sum = 0\n    for (var i = 0; i < str1.length; i++) {\n        sum += str1.charCodeAt(i)\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/147","completion":"    let dp = [[0 for _ in range(n)] for _ in range(m)]\n    dp[0][0] = tri[0][0]\n    for i in range(1, m) {\n        dp[i][0] = tri[i][0] + dp[i - 1][0]\n    }\n    for j in range(1, n) {\n        dp[0][j] = tri[0][j] + dp[0][j - 1]\n    }\n    for i in range(1, m) {\n        for j in range(1, n) {\n            dp[i][j] = tri[i][j] + Math.max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return dp[m - 1][n - 1]\n}","language":"swift"}
{"task_id":"MBSWP\/149","completion":"    let dp = [0] * n\n    dp[0] = 1\n    let max = 1\n    for (let i = 1; i < n; i++) {\n        dp[i] = 1\n        for (let j = 0; j < i; j++) {\n            if (arr[i] - arr[j] == 1) {\n                dp[i] = Math.max(dp[i], dp[j] + 1)\n            }\n        }\n        max = Math.max(max, dp[i])\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/152","completion":"    if x.count < 2 {\n        return x\n    }\n    var mid = x.count \/ 2\n    var left = x[0..mid]\n    var right = x[mid..x.count]\n    var sortedLeft = mergeSort(left)\n    var sortedRight = mergeSort(right)\n    return merge(sortedLeft, sortedRight)\n}","language":"swift"}
{"task_id":"MBSWP\/153","completion":"    let delta = b * b - 4 * a * c\n    if (delta < 0) {\n        return nil\n    }\n    let x1 = (-b + Math.sqrt(delta)) \/ (2 * a)\n    let x2 = (-b - Math.sqrt(delta)) \/ (2 * a)\n    return [x1, x2]\n}","language":"swift"}
{"task_id":"MBSWP\/156","completion":"    return tuple_str.map { |x| x.map { |y| y.to_i } }\n}","language":"swift"}
{"task_id":"MBSWP\/157","completion":"    let result = [[AnyHashable()]]\n    let prev = AnyHashable()\n    for (let i = 0; i < list1.length; i++) {\n        let curr = list1[i]\n        if (curr == prev) {\n            result[result.length - 1][0] += 1\n        } else {\n            result.push([1])\n            result[result.length - 1][0] += 1\n        }\n        prev = curr\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/158","completion":"    var sum = 0\n    var i = 0\n    var j = 0\n    var count = 0\n    while (i < n) {\n        if (arr[i] == arr[j]) {\n            count += 1\n            i += 1\n            j += 1\n        } else {\n            if (count < k) {\n                sum += count\n                count = 0\n            } else {\n                sum += k\n                i += k\n                j += k\n                count = 0\n            }\n        }\n    }\n    if (count < k) {\n        sum += count\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/160","completion":"    var x = 0\n    var y = 0\n    var i = 1\n    while (i <= n) {\n        x = x + a\n        y = y + b\n        i = i + 1\n    }\n    if (x == n && y == n) {\n        return [x, y]\n    } else {\n        return \"No solution\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/161","completion":"    var result = []\n    for (i in list1) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.append(list1[i])\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/163","completion":"    var area = (s * s) * (l \/ 2)\n    return area\n}","language":"swift"}
{"task_id":"MBSWP\/165","completion":"    var count = 0\n    for (var i = 0; i < str1.length; i++) {\n        if (str1[i] == str1[i].toUpperCase()) {\n            count++\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/166","completion":"    var count = 0\n    for i in A {\n        for j in A {\n            if i == j && i ^ j == N {\n                count += 1\n            }\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/169","completion":"    var p = 1\n    var i = 2\n    var sum = 0\n    while (i <= n) {\n        sum = p * i\n        p = i\n        i = sum\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/170","completion":"    var sum = 0\n    for i in range(m, n) {\n        sum += list1[i]\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/172","completion":"    var count = 0\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] == \"std\") {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/173","completion":"    var result = \"\"\n    for (var i = 0; i < text.length; i++) {\n        var c = text[i]\n        if (c.isalnum()) {\n            result += c\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/174","completion":"    let result = {}\n    for _, v of l {\n        if let k = _ {\n            result[k] = result[k] ?? []\n            result[k].append(v)\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/175","completion":"    var stack : List<Character> = []\n    for (var i : 0; i < str1.length; i++) {\n        var ch : Character = str1[i]\n        if (ch == '(' || ch == '{' || ch == '[') {\n            stack.push(ch)\n        } else {\n            if (stack.isEmpty()) {\n                return false\n            }\n            var top : Character = stack.pop()\n            if (ch == ')' && top != '(') {\n                return false\n            }\n            if (ch == '}' && top != '{') {\n                return false\n            }\n            if (ch == ']' && top != '[') {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"swift"}
{"task_id":"MBSWP\/178","completion":"    var result = \"Not Matched!\"\n    for (pattern in patterns) {\n        if (text.includes(pattern)) {\n            result = \"Matched!\"\n            break\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/179","completion":"    var s = \"\"\n    var i = 1\n    while (x > 0) {\n        s = s + x % 10\n        x = x \/ 10\n        i = i + 1\n    }\n    var sum = 0\n    for (i = 0; i < s.length; i++) {\n        sum = sum + (s[i] * i)\n    }\n    return sum == 0\n}","language":"swift"}
{"task_id":"MBSWP\/180","completion":"    var R = 6371e3;\n    var \u03c61 = slat * Math.PI \/ 180;\n    var \u03c62 = elat * Math.PI \/ 180;\n    var \u0394\u03c6 = (elat - slat) * Math.PI \/ 180;\n    var \u0394\u03bb = (elon - slon) * Math.PI \/ 180;\n\n    var a = Math.sin(\u0394\u03c6 \/ 2) * Math.sin(\u0394\u03c6 \/ 2) +\n            Math.cos(\u03c61) * Math.cos(\u03c62) *\n            Math.sin(\u0394\u03bb \/ 2) * Math.sin(\u0394\u03bb \/ 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    var d = R * c;\n    return d;\n}","language":"swift"}
{"task_id":"MBSWP\/181","completion":"    let prefix = \"\"\n    for (let i = 0; i < n; i++) {\n        if (arr[0][i] != arr[1][i]) {\n            return prefix\n        }\n        prefix += arr[0][i]\n    }\n    return prefix\n}","language":"swift"}
{"task_id":"MBSWP\/182","completion":"    let regex = \/([a-zA-Z])|([0-9])|([!@#$%^&*])\/g\n    let result = []\n    let match = regex.exec(string)\n    while (match != null) {\n        result.append(match.slice(1))\n        match = regex.exec(string)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/184","completion":"    for (i in list) {\n        if (list[i] > num) {\n            return true\n        }\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/185","completion":"    let delta = b * b - 4 * a * c\n    if (delta < 0) {\n        return nil\n    }\n    let x1 = (-b + Math.sqrt(delta)) \/ (2 * a)\n    let x2 = (-b - Math.sqrt(delta)) \/ (2 * a)\n    return [x1, x2]\n}","language":"swift"}
{"task_id":"MBSWP\/186","completion":"    var regex = \"\\\\b(\" + patterns.join(\"|\") + \")\\\\b\"\n    var result = \"Not Matched!\"\n    if (text.match(regex)) {\n        result = \"Matched!\"\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/187","completion":"    var dp = Array(m + 1, n + 1).fill(0)\n    for (var i = 1; i <= m; i++) {\n        for (var j = 1; j <= n; j++) {\n            if (X[i - 1] == Y[j - 1]) {\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            } else {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[m][n]\n}","language":"swift"}
{"task_id":"MBSWP\/189","completion":"    let i = 0\n    while (i < n) {\n        if (arr[i] < 0 || arr[i] >= n) {\n            i += 1\n        } else if (arr[i] != i + 1) {\n            let temp = arr[i]\n            arr[i] = arr[temp - 1]\n            arr[temp - 1] = temp\n        } else {\n            i += 1\n        }\n    }\n    for (i = 0; i < n; i++) {\n        if (arr[i] != i + 1) {\n            return i + 1\n        }\n    }\n    return n + 1\n}","language":"swift"}
{"task_id":"MBSWP\/193","completion":"    var unique_tup = []\n    for {\n        if (test_tup.count > 1) {\n            unique_tup.append(test_tup[i])\n        }\n    }\n    return unique_tup\n}","language":"swift"}
{"task_id":"MBSWP\/196","completion":"    let result = []\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i].length != K) {\n            result.append(test_list[i])\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/197","completion":"    var result = [0] * 3\n    var i = 0\n    var j = 0\n    var k = 0\n    while (i < test_tup1.length && j < test_tup2.length) {\n        if (test_tup1[i] < test_tup2[j]) {\n            result[k] = test_tup1[i] * test_tup2[j]\n            i = i + 1\n        } else if (test_tup1[i] > test_tup2[j]) {\n            result[k] = test_tup1[i] * test_tup2[j]\n            j = j + 1\n        } else {\n            result[k] = test_tup1[i] * test_tup2[j]\n            i = i + 1\n            j = j + 1\n        }\n        k = k + 1\n    }\n    while (","language":"swift"}
{"task_id":"MBSWP\/198","completion":"    var c = sqrt(a * a + b * b)\n    var p = (a + b + c) \/ 2\n    var q = (a + b - c) \/ 2\n    var r = (a - b + c) \/ 2\n    var s = (a - b - c) \/ 2\n    var area = (p * q * r * s) \/ 4\n    return area\n}","language":"swift"}
{"task_id":"MBSWP\/200","completion":"    var max = 0\n    var maxIndex = 0\n    var maxIndexList = []\n    for i in list1 {\n        if list1[i] > max {\n            max = list1[i]\n            maxIndex = i\n        }\n    }\n    maxIndexList.append(maxIndex)\n    for i in list1 {\n        if list1[i] == max {\n            maxIndexList.append(i)\n        }\n    }\n    return maxIndexList\n}","language":"swift"}
{"task_id":"MBSWP\/202","completion":"    var result = \"\"\n    for (var i = 0; i < str1.length; i++) {\n        if (i % 2 == 0) {\n            result += str1[i]\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/204","completion":"    var count = 0\n    for (i in s) {\n        if (s[i] == c) {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/205","completion":"    var res = []\n    for i in 0..test_tup.length - 1 {\n        for j in 0..test_tup.length - 1 - i {\n            if (test_tup[i] > test_tup[j]) {\n                res.append(test_tup[i])\n                res.append(test_tup[j])\n            }\n        }\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/206","completion":"    var result = []\n    for (i in test_tup) {\n        result.append(test_tup[i] + test_tup[i+1])\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/207","completion":"    var map = [0] * 128;\n    var max = 0;\n    var start = 0;\n    for (var i = 0; i < str.length; i++) {\n        map[str[i].charCodeAt(0)]++;\n        if (map[str[i].charCodeAt(0)] == 2) {\n            max = Math.max(max, i - start + 1);\n        } else if (map[str[i].charCodeAt(0)] > 1) {\n            start = i;\n            map[str[i].charCodeAt(0)] = 0;\n        }\n    }\n    return max;\n}","language":"swift"}
{"task_id":"MBSWP\/208","completion":"    let regex = \/^-?\\d+(\\.\\d{1,2})?$\/\n    return regex.test(num)\n}","language":"swift"}
{"task_id":"MBSWP\/209","completion":"    if let b = heap[0]\n    heap[0] = a\n    let i = 0\n    while i < heap.length - 1 {\n        let j = i + 1\n        if heap[j] < heap[i] {\n            swap(heap, i, j)\n            i = j\n        } else {\n            break\n        }\n    }\n    return heap\n}","language":"swift"}
{"task_id":"MBSWP\/210","completion":"    return \/[a-z0-9]\/.test(string)\n}","language":"swift"}
{"task_id":"MBSWP\/214","completion":"    return radian * 180 \/ Math.PI\n}","language":"swift"}
{"task_id":"MBSWP\/215","completion":"    var result = []\n    var current = []\n    for _, v in alist {\n        if v == nil {\n            result = result + current\n            current = []\n        } else {\n            current = current + [v]\n        }\n    }\n    return result + current\n}","language":"swift"}
{"task_id":"MBSWP\/216","completion":"    if list1.length > list2.length {\n        return false\n    }\n    for (i in list1) {\n        if (list2.find(x => x == list1[i])) {\n            continue\n        } else {\n            return false\n        }\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/217","completion":"    var dict = {}\n    for (let i = 0; i < str.length; i++) {\n        let char = str[i]\n        if (dict[char] == 1) {\n            return char\n        }\n        dict[char] = 1\n    }\n    return \"\\x00\"\n}","language":"swift"}
{"task_id":"MBSWP\/218","completion":"    var diff = A ^ B\n    var count = 0\n    while (diff > 0) {\n        diff &= (diff - 1)\n        count++\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/219","completion":"    var min_max = []\n    var min = test_tup[0]\n    var max = test_tup[0]\n    for (i <- 0 until test_tup.length) {\n        if (test_tup[i] < min) {\n            min = test_tup[i]\n        }\n        if (test_tup[i] > max) {\n            max = test_tup[i]\n        }\n    }\n    for (i <- 0 until K) {\n        min_max.append(min)\n        min_max.append(max)\n    }\n    return min_max\n}","language":"swift"}
{"task_id":"MBSWP\/220","completion":"    var result = \"\";\n    var count = 0;\n    for (var i = 0; i < text.length; i++) {\n        if (text[i] == \" \") {\n            count++;\n        } else if (text[i] == \",\") {\n            count++;\n        } else if (text[i] == \".\") {\n            count++;\n        }\n        if (count == n) {\n            result += \":\";\n            count = 0;\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}","language":"swift"}
{"task_id":"MBSWP\/222","completion":"    var type = test_tuple[0].type()\n    for (i in test_tuple) {\n        if (type != test_tuple[i].type()) {\n            return false\n        }\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/226","completion":"    var result = \"\"\n    for (var i = 0; i < str.length; i++) {\n        if (i % 2 == 0) {\n            result += str[i]\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/229","completion":"    let result = []\n    for (let i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            result.unshift(arr[i])\n        } else {\n            result.push(arr[i])\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/230","completion":"    var newStr = \"\"\n    for (var i = 0; i < str1.length; i++) {\n        if (str1[i] == \" \") {\n            newStr += char\n        } else {\n            newStr += str1[i]\n        }\n    }\n    return newStr\n}","language":"swift"}
{"task_id":"MBSWP\/231","completion":"    var sum = 0\n    for _, i := range tri {\n        sum += i[n]\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/232","completion":"    var list2 = []\n    for i in 0..n {\n        list2.append(list1[i])\n    }\n    list2.sort()\n    return list2\n}","language":"swift"}
{"task_id":"MBSWP\/233","completion":"    return 2 * (Math.PI * r * r) + 2 * (Math.PI * r * h)\n}","language":"swift"}
{"task_id":"MBSWP\/236","completion":"    if (N < 0 || K < 0) {\n        return -1\n    }\n    if (N == 0 || K == 0) {\n        return 0\n    }\n    if (N == 1) {\n        return 1\n    }\n    if (N == 2) {\n        return 2\n    }\n    if (N == 3) {\n        return 3\n    }\n    if (N == 4) {\n        return 4\n    }\n    if (N == 5) {\n        return 5\n    }\n    if (N == 6) {\n        return 6\n    }\n    if (N == 7) {\n        return 7\n    }\n    if (N == 8) {\n        return 8\n    }\n    if (N == 9) {\n        return 9\n    }","language":"swift"}
{"task_id":"MBSWP\/237","completion":"    let map = {}\n    for (let i = 0; i < test_list.length; i++) {\n        let tuple = test_list[i]\n        let key = tuple[0] + \":\" + tuple[1]\n        if (map[key] == null) {\n            map[key] = 1\n        } else {\n            map[key] = map[key] + 1\n        }\n    }\n    let result = []\n    for (let key in map) {\n        let value = map[key]\n        result.append([key.split(\":\")[0], key.split(\":\")[1]])\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/239","completion":"    var result = 0\n    for (var i = 1; i <= n; i++) {\n        result += getTotalNumberOfSequences(m - i, n - i)\n    }\n    if (m >= 2 * (n - 1)) {\n        result += 1\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/240","completion":"    if let len = list1.count { |x| x } - 1 {\n        list1[len] = list2\n        return list1\n    }\n    return list1\n}","language":"swift"}
{"task_id":"MBSWP\/241","completion":"    let arr = [[String]()]\n    for _ in 0..m {\n        arr.append([String]()])\n        for _ in 0..n {\n            arr[-1].append([String]()])\n            for _ in 0..o {\n                arr[-1][-1].append(\"*\")\n            }\n        }\n    }\n    return arr\n}","language":"swift"}
{"task_id":"MBSWP\/243","completion":"    var map = {}\n    var res = []\n    for _, v in lst {\n        if !map[_] {\n            map[_] = 0\n        }\n        map[_] += 1\n    }\n    for _, v in map {\n        res.append([_, v, _, _])\n    }\n    res.sort(function (a, b) {\n        return a[1] - b[1]\n    })\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/245","completion":"    let dp = [arr[0]]\n    for (let i = 1; i < n; i++) {\n        dp[i] = Math.max(dp[i - 1] + arr[i], arr[i])\n    }\n    return dp[n - 1]\n}","language":"swift"}
{"task_id":"MBSWP\/246","completion":"    if number < 0 {\n        return \"Invalid number\"\n    }\n    if number == 0 {\n        return 0\n    }\n    if number == 1 {\n        return 1\n    }\n    if number == 2 {\n        return 1.414213562373095\n    }\n    if number == 3 {\n        return 1.7320508075688772\n    }\n    if number == 4 {\n        return 2.23606797749979\n    }\n    if number == 5 {\n        return 2.449489742783178\n    }\n    if number == 6 {\n        return 2.6457513110645907\n    }\n    if number == 7 {\n        return 2.8284271247461903\n    }\n    if number == 8 {\n        return 3.0\n    }\n    if number == 9 {\n        return 3.","language":"swift"}
{"task_id":"MBSWP\/247","completion":"    let dp = [0] * (str.length + 1)\n    dp[0] = 1\n    for (let i = 1; i <= str.length; i++) {\n        dp[i] = 1\n        for (let j = 0; j < i; j++) {\n            if (str[j] == str[i - 1]) {\n                dp[i] = dp[j] + 2\n            }\n        }\n    }\n    return dp[str.length]\n}","language":"swift"}
{"task_id":"MBSWP\/248","completion":"    var sum = 0.0\n    var harmonic = 1.0\n    for (i in 0..n-1) {\n        sum += harmonic\n        harmonic *= 2\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/249","completion":"    return array_nums1.filter(x => array_nums2.contains(x))\n}","language":"swift"}
{"task_id":"MBSWP\/251","completion":"    result = []\n    for (i in list) {\n        result.append(element)\n        result.append(list[i])\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/254","completion":"    var words = []\n    var word = \"\"\n    for (var i = 0; i < text.length; i++) {\n        if (text[i] == \"a\" || text[i] == \"e\") {\n            words.append(word)\n            word = \"\"\n        } else {\n            word += text[i]\n        }\n    }\n    return words\n}","language":"swift"}
{"task_id":"MBSWP\/255","completion":"    if let k = 0 {\n        k < n\n    } else {\n        k == n\n    }\n    let res = []\n    for i in 0..k {\n        res = res + map { _ -> [l[i]] } (combinationsColors(l, n - 1))\n    }\n    res = res + map { _ -> [l[k]] } (combinationsColors(l, n - 1))\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/256","completion":"    var count = 0\n    var i = 2\n    while (i <= n) {\n        if (isPrime(i)) {\n            count += 1\n        }\n        i += 1\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/258","completion":"    return array_nums.filter(x => x % 2 == 1).length\n}","language":"swift"}
{"task_id":"MBSWP\/259","completion":"    var res = [test_tup1[0], test_tup2[0]]\n    for _, (x, y) in test_tup1.enumerate().zip(test_tup2.enumerate()) {\n        if x > y {\n            res = [x, y]\n        }\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/260","completion":"    let p = 2\n    let q = 3\n    let i = 1\n    while i < n {\n        if (q % p == 0) {\n            q = q + 2\n        } else {\n            p = p + 2\n            q = q + 4\n        }\n        i = i + 1\n    }\n    return q\n}","language":"swift"}
{"task_id":"MBSWP\/262","completion":"    let result = []\n    let temp = []\n    for (let i = 0; i < list1.length; i++) {\n        if (temp.length < L) {\n            temp.push(list1[i])\n        } else {\n            result.push(temp)\n            temp = [list1[i]]\n        }\n    }\n    result.push(temp)\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/264","completion":"    return h_age * 7\n}","language":"swift"}
{"task_id":"MBSWP\/265","completion":"    let result = []\n    let i = 0\n    while (i < S.length) {\n        result.append(S.slice(i, i + step))\n        i += step\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/269","completion":"    let v = 0\n    for (i in k) {\n        v = v + k.charCodeAt(i)\n    }\n    return v\n}","language":"swift"}
{"task_id":"MBSWP\/272","completion":"    var result = []\n    for _, _, value in test_list {\n        result.append(value)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/275","completion":"    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    while (i < a.count) {\n        if (a[i] == n) {\n            j = i\n            while (j < a.count) {\n                if (a[j] == m) {\n                    k = j\n                    while (k < a.count) {\n                        if (a[k] == n) {\n                            l = k\n                            return l\n                        }\n                        k = k + 1\n                    }\n                }\n                j = j + 1\n            }\n        }\n        i = i + 1\n    }\n    return -1\n}","language":"swift"}
{"task_id":"MBSWP\/276","completion":"    return (2 * Math.PI * r * r * h) \/ 3.0\n}","language":"swift"}
{"task_id":"MBSWP\/277","completion":"    var result = []\n    for (var key in dict) {\n        if (dict[key] == n) {\n            result.append(key)\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/278","completion":"    var count = 0\n    for _, v in test_tup {\n        if isinstance(v, (Array, List)) {\n            count += countFirstElements(v)\n        } else {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/282","completion":"    return nums1.map { (x, i) -> x - nums2[i] }\n}","language":"swift"}
{"task_id":"MBSWP\/283","completion":"    var freq = {}\n    var digits = n.toString().split(\"\")\n    for (var i = 0; i < digits.length; i++) {\n        if (freq[digits[i]] == nil) {\n            freq[digits[i]] = 1\n        } else {\n            freq[digits[i]] += 1\n        }\n    }\n    for (var key in freq) {\n        if (freq[key] > digits.length \/ 2) {\n            return false\n        }\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/286","completion":"    var max = -1\n    var sum = 0\n    for i in a {\n        sum += i\n        if (sum > max) {\n            max = sum\n        }\n        if (sum < 0) {\n            sum = 0\n        }\n        if (i < 0) {\n            sum = 0\n        }\n        if (i % k == 0) {\n            sum = 0\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/290","completion":"    let max = 0\n    let maxList = nil\n    for i in list1 {\n        if i.count > max {\n            max = i.count\n            maxList = i\n        }\n    }\n    return maxList\n}","language":"swift"}
{"task_id":"MBSWP\/291","completion":"    var dp : [Int] = [0] * (k + 1)\n    dp[0] = 1\n    for (var i : 1; i <= n; i++) {\n        for (var j : 1; j <= k; j++) {\n            dp[j] += dp[j - 1]\n        }\n    }\n    return dp[k]\n}","language":"swift"}
{"task_id":"MBSWP\/293","completion":"    return (w * h) \/ 2.0;\n}","language":"swift"}
{"task_id":"MBSWP\/294","completion":"    var max = 0\n    for _, v in pairs(listval) {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/296","completion":"    var count = 0\n    for i in 0..n {\n        for j in 0..n {\n            if (arr[i] > arr[j]) {\n                count++\n            }\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/297","completion":"    let result = []\n    for item in list1 {\n        if item is Array {\n            result += flattenList(item)\n        } else {\n            result += [item]\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/298","completion":"    var result = []\n    for _, v1 in l1 {\n        for _, v2 in l2 {\n            if v1 == v2 {\n                result.append([v1])\n            }\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/299","completion":"    var max = 0\n    var maxName = nil\n    for _, name, score in data {\n        if score > max {\n            max = score\n            maxName = name\n        }\n    }\n    return maxName\n}","language":"swift"}
{"task_id":"MBSWP\/300","completion":"    var sum = 0.0\n    for (var i = 0; i < 2 * n; i++) {\n        sum += (i % 2 == 0) ? 1.0 : -1.0\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/301","completion":"    let depth = 0\n    for key, value in d {\n        if value is Dict {\n            depth = depth + 1\n            depth = depth + dictDepth(value)\n        }\n    }\n    return depth\n}","language":"swift"}
{"task_id":"MBSWP\/303","completion":"    var b = a.copy()\n    var c = a.copy()\n    var d = a.copy()\n    var e = a.copy()\n    var f = a.copy()\n    var g = a.copy()\n    var h = a.copy()\n    var i = a.copy()\n    var j = a.copy()\n    var k = a.copy()\n    var l = a.copy()\n    var m = a.copy()\n    var n = a.copy()\n    var o = a.copy()\n    var p = a.copy()\n    var q = a.copy()\n    var r = a.copy()\n    var s = a.copy()\n    var t = a.copy()\n    var u = a.copy()\n    var v = a.copy()\n    var w = a.copy()\n    var x = a.copy()\n    var y = a.copy()\n    var z = a.copy()\n    var aa = a","language":"swift"}
{"task_id":"MBSWP\/304","completion":"    var start = ranges[0][0]\n    var end = ranges[0][1]\n    var count = 0\n    for i in arr {\n        if (i >= start && i <= end) {\n            count++\n        }\n    }\n    return arr[index % count]\n}","language":"swift"}
{"task_id":"MBSWP\/305","completion":"    var result = []\n    for (var i = 0; i < words.length; i++) {\n        if (words[i].startsWith(\"p\")) {\n            result.push(words[i])\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/306","completion":"    let dp = [0] * n\n    dp[0] = a[0]\n    let max = dp[0]\n    for (i = 1; i < n; i++) {\n        dp[i] = a[i]\n        for (j = 0; j < i; j++) {\n            if (a[j] < a[i] && dp[j] + a[i] > dp[i]) {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n        max = Math.max(max, dp[i])\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/307","completion":"    var result = []\n    for (var i = 0; i < m; i++) {\n        result.push(tuplex[i])\n    }\n    for (var i = m; i < n; i++) {\n        result.push(tuplex[i])\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/308","completion":"    var result = []\n    var i = 0\n    var j = 0\n    var k = 0\n    var temp = 0\n    var temp2 = 0\n    while (i < nums1.length && j < nums2.length) {\n        if (nums1[i] < nums2[j]) {\n            temp = nums1[i]\n            i++\n        } else {\n            temp = nums2[j]\n            j++\n        }\n        temp2 = temp * nums1[i]\n        temp2 = temp2 * nums2[j]\n        if (temp2 > result[k]) {\n            result[k] = temp2\n        }\n        k++\n    }\n    while (i < nums1.length) {\n        temp = nums1[i]\n        temp2 = temp * nums1[i]\n        if (temp2 > result[k]) {\n            result[k]","language":"swift"}
{"task_id":"MBSWP\/310","completion":"    var arr = str1.split(\" \")\n    var result = []\n    for (var i = 0; i < arr.length; i++) {\n        result.push(arr[i])\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/311","completion":"    var mask = ~(1 << (n - 1))\n    return mask\n}","language":"swift"}
{"task_id":"MBSWP\/312","completion":"    return (2 * r * h) \/ 3.0;\n}","language":"swift"}
{"task_id":"MBSWP\/313","completion":"    let result = []\n    for (i in list1) {\n        if (list1[i] > 0) {\n            result.append(list1[i])\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/314","completion":"    var dp = [[Int]] * n\n    dp[0] = grid[0]\n    for i in range(1, n) {\n        dp[i] = [0] * n\n        for j in range(i):\n            dp[i][j] = dp[i - 1][j] + grid[i][j]\n            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j + 1])\n    }\n    return dp[n - 1][0]\n}","language":"swift"}
{"task_id":"MBSWP\/315","completion":"    var arr = str.split(\" \")\n    var max = 0\n    var result = \"\"\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].length % 2 == 0 && arr[i].length > max) {\n            max = arr[i].length\n            result = arr[i]\n        }\n    }\n    if (result == \"\") {\n        return \"-1\"\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/317","completion":"    let result = []\n    let prev = alist[0]\n    let count = 1\n    for (let i = 1; i < alist.length; i++) {\n        if (alist[i] == prev) {\n            count++\n        } else {\n            result.append(count)\n            result.append(prev)\n            prev = alist[i]\n            count = 1\n        }\n    }\n    result.append(count)\n    result.append(prev)\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/318","completion":"    var max = 0\n    var volume = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n","language":"swift"}
{"task_id":"MBSWP\/319","completion":"    let regex = \/(\\w{5})\/g\n    let result = []\n    text.match(regex).forEach(match => {\n        result.push(match)\n    })\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/321","completion":"    let n = 0\n    let demlo = \"\"\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] == \"1\") {\n            n += 1\n        } else {\n            demlo += n.toString()\n            n = 0\n        }\n    }\n    demlo += n.toString()\n    return demlo\n}","language":"swift"}
{"task_id":"MBSWP\/322","completion":"    var min = list1[0]\n    var minIndex = 0\n    for i in 0..list1.count {\n        if list1[i] < min {\n            min = list1[i]\n            minIndex = i\n        }\n    }\n    return [minIndex]\n}","language":"swift"}
{"task_id":"MBSWP\/323","completion":"    \/\/ Your code here\n}","language":"swift"}
{"task_id":"MBSWP\/324","completion":"    var result = []\n    var current = 0\n    for (var i = 0; i < test_tuple.length; i++) {\n        if (i % 2 == 0) {\n            current += test_tuple[i]\n        } else {\n            result.append(current)\n            current = 0\n        }\n    }\n    result.append(current)\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/325","completion":"    var minSquares = 0\n    var squareSum = 0\n    var square = 0\n    var i = 1\n    while (squareSum < n) {\n        square = i * i\n        squareSum += square\n        minSquares++\n        i++\n    }\n    return minSquares\n}","language":"swift"}
{"task_id":"MBSWP\/326","completion":"    val counts = test_list.groupBy { it.split(\" \").last }.mapValues { it.length }.foldLeft { 0 }\n    val max = counts.maxBy { (x, y) => x > y }\n    return max.keys().head\n}","language":"swift"}
{"task_id":"MBSWP\/328","completion":"    var list2 = []\n    for i in range(n) {\n        list2.append(list1[i])\n    }\n    for i in range(n, m) {\n        list2.append(list1[i])\n    }\n    for i in range(m) {\n        list2.append(list1[i])\n    }\n    return list2\n}","language":"swift"}
{"task_id":"MBSWP\/330","completion":"    let regex = \/(\\w{3,})\/g\n    let result = text.match(regex)\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/332","completion":"    var freq = {}\n    for _, c in str1.chars.enumerated() {\n        freq[c] = freq.hasOwnProperty(c) ? freq[c] + 1 : 1\n    }\n    return freq\n}","language":"swift"}
{"task_id":"MBSWP\/333","completion":"    let sorted_li = sub_li.sort(compareBySecondElement)\n    return sorted_li\n}","language":"swift"}
{"task_id":"MBSWP\/337","completion":"    var punctuations = [\".\", \"!\", \"?\"]\n    var word = \"\"\n    var result = \"\"\n    for (var i = text.length - 1; i >= 0; i--) {\n        if (punctuations.indexOf(text[i]) == -1) {\n            word = text[i] + word\n        } else {\n            if (word.length > 0) {\n                result = \"Found a match!\"\n                break\n            }\n        }\n    }\n    if (word.length > 0) {\n        result = \"Not matched!\"\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/338","completion":"    var count = 0\n    var i = 0\n    var j = 0\n    while (i < s.length) {\n        while (j < s.length && s[i] == s[j]) {\n            j++\n        }\n        count += j - i\n        i = j\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/340","completion":"    var sorted = lst.sort()\n    var result = 0\n    for (i in sorted) {\n        if (sorted[i] > 0) {\n            result += sorted[i]\n            if (result >= 3) {\n                return result\n            }\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/341","completion":"    var result = []\n    for {\n        result.append(s.pop())\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/342","completion":"    var min = 0\n    var max = 0\n    var result = []\n\n    for item in list {\n        var min = 0\n        var max = 0\n        for i in item {\n            if (i < min) {\n                min = i\n            }\n            if (i > max) {\n                max = i\n            }\n        }\n        result.append(min)\n        result.append(max)\n    }\n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/343","completion":"    let dig = 0\n    let letter = 0\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].isDigit) dig += 1\n        else letter += 1\n    }\n    return [dig, letter]\n}","language":"swift"}
{"task_id":"MBSWP\/344","completion":"    var count = 0\n    for i in 0..m {\n        if (i * i >= n) {\n            break\n        }\n        count += 1\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/345","completion":"    var result = []\n    var prev = nums[0]\n    for (var i = 1; i < nums.length; i++) {\n        if (nums[i] - prev == 1) {\n            result.push(0)\n        } else {\n            result.push(1)\n        }\n        prev = nums[i]\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/346","completion":"    var arr = [1]\n    for (var i = 1; i < n; i++) {\n        arr[i] = arr[i - 1] * 2\n    }\n    for (var i = 1; i < n; i++) {\n        arr[i] += arr[i - 1]\n    }\n    return arr[n - k]\n}","language":"swift"}
{"task_id":"MBSWP\/347","completion":"    var result = 0\n    for i in 0..m {\n        for j in 0..n {\n            result += i * i + j * j\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/348","completion":"    var dp = [0] * (M + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for (var i = 2; i <= M; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2]\n    }\n    return dp[M]\n}","language":"swift"}
{"task_id":"MBSWP\/350","completion":"    var count = 0\n    for i in s {\n        if s[i] == s[i+1] {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/351","completion":"    var i : Int = 0\n    var count : Int = 0\n    while (count < k) {\n        i = arr.index(i)\n        i += 1\n        count += 1\n    }\n    return arr[i]\n}","language":"swift"}
{"task_id":"MBSWP\/352","completion":"    var unique = true\n    var chars = {}\n\n    for (let i = 0; i < str.length; i++) {\n        if (chars[str[i]]) {\n            unique = false\n            break\n        } else {\n            chars[str[i]] = true\n        }\n    }\n\n    return unique\n}","language":"swift"}
{"task_id":"MBSWP\/353","completion":"    var newList = []\n    for _, row in enumerate(list1) {\n        newList.append(row.slice(0, n).concat(row.slice(n + 1)))\n    }\n    return newList\n}","language":"swift"}
{"task_id":"MBSWP\/355","completion":"    var rectangles = 0\n    for i in 0..2*radius {\n        for j in 0..2*radius {\n            if (i + j <= radius) {\n                rectangles += 1\n            }\n        }\n    }\n    return rectangles\n}","language":"swift"}
{"task_id":"MBSWP\/358","completion":"    return nums1.map { (n1, i) ->\n        nums2.map { (n2, j) ->\n            if (i == j) {\n                0\n            } else {\n                n1 % n2\n            }\n        }\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/360","completion":"    var i : Int = 1\n    var j : Int = 1\n    var k : Int = 1\n    var carol : Int = 0\n    while (i <= n) {\n        carol = j * (j + 1) \/ 2\n        i = i + 1\n        j = k\n        k = carol\n    }\n    return carol\n}","language":"swift"}
{"task_id":"MBSWP\/361","completion":"    var result = []\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i].length > 0) {\n            result.push(list1[i])\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/362","completion":"    let map = {}\n    let maxOccurrence = 0\n    let maxOccurrenceItem = nil\n    for (let i = 0; i < nums.length; i++) {\n        if (map[nums[i]] == nil) {\n            map[nums[i]] = 1\n        } else {\n            map[nums[i]] += 1\n        }\n        if (map[nums[i]] > maxOccurrence) {\n            maxOccurrence = map[nums[i]]\n            maxOccurrenceItem = nums[i]\n        }\n    }\n    return maxOccurrenceItem\n}","language":"swift"}
{"task_id":"MBSWP\/364","completion":"    var flipCount = 0\n    var flip = 0\n    for (var i = 0; i < str.length; i++) {\n        if (str[i] == str[i + 1]) {\n            flip++\n        } else {\n            flipCount += flip\n            flip = 0\n        }\n    }\n    return flipCount + flip\n}","language":"swift"}
{"task_id":"MBSWP\/370","completion":"    var sortedPrice = []\n    for _, item in price {\n        sortedPrice.append([item, float(item)])\n    }\n    sortedPrice.sort(compareBy(1))\n    return sortedPrice\n}","language":"swift"}
{"task_id":"MBSWP\/372","completion":"    let minHeap = MinHeap()\n    for num in nums {\n        minHeap.add(num)\n    }\n    let result = []\n    while minHeap.size > 0 {\n        result.append(minHeap.remove())\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/374","completion":"    let result = []\n    let visited = {}\n    let backtracking = (str, prefix) => {\n        if (str.length == 0) {\n            result.push(prefix)\n            return\n        }\n        for (let i = 0; i < str.length; i++) {\n            let char = str[i]\n            if (visited[char]) continue\n            visited[char] = true\n            backtracking(str.substring(0, i) + str.substring(i + 1), prefix + char)\n            visited[char] = false\n        }\n    }\n    backtracking(str, \"\")\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/376","completion":"    var result = [] as [AnyHashable]\n    var seen = set() as [AnyHashable]\n    for (var i = 0; i < test_tup.length; i++) {\n        var item = test_tup[i]\n        if (seen.contains(item)) {\n            result.append(item)\n        } else {\n            seen.add(item)\n            result.append(item)\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/377","completion":"    var i : Int = 0\n    var len : Int = s.length\n    var newString : String = \"\"\n    while (i < len) {\n        if (s[i] != c) {\n            newString += s[i]\n        }\n        i += 1\n    }\n    return newString\n}","language":"swift"}
{"task_id":"MBSWP\/378","completion":"    var first = test_list[0]\n    var last = test_list[test_list.count - 1]\n    test_list[0] = last\n    test_list[test_list.count - 1] = first\n    return test_list\n}","language":"swift"}
{"task_id":"MBSWP\/380","completion":"    var result = []\n    for (var i = 0; i < rownum; i++) {\n        result.append(new Array(colnum))\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/381","completion":"    var sorted_list = []\n    for (var i = 0; i < list_data.length; i++) {\n        sorted_list.push(list_data[i][index_no])\n    }\n    sorted_list.sort()\n    var result = []\n    for (var i = 0; i < list_data.length; i++) {\n        result.push(list_data[i][index_no])\n    }\n    for (var i = 0; i < sorted_list.length; i++) {\n        for (var j = 0; j < result.length; j++) {\n            if (sorted_list[i] == result[j]) {\n                result.splice(j, 1)\n                break\n            }\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/382","completion":"    var start = 0\n    var end = A.length - 1\n    var mid = 0\n\n    while (start <= end) {\n        mid = start + (end - start) \/ 2\n        if (A[mid] > A[mid + 1]) {\n            return mid + 1\n        } else if (A[mid] < A[mid - 1]) {\n            return mid\n        } else if (A[mid] > A[start]) {\n            start = mid + 1\n        } else {\n            end = mid - 1\n        }\n    }\n    return 0\n}","language":"swift"}
{"task_id":"MBSWP\/385","completion":"    if (n == 0) {\n        return 0\n    }\n    if (n == 1) {\n        return 1\n    }\n    return getPerrin(n - 1) + getPerrin(n - 2) + getPerrin(n - 3)\n}","language":"swift"}
{"task_id":"MBSWP\/389","completion":"    var lucas = 2\n    var i = 3\n    while i <= n {\n        lucas = lucas + i\n        i = i + 2\n    }\n    return lucas\n}","language":"swift"}
{"task_id":"MBSWP\/390","completion":"    let result = []\n    for (let i = 0; i < list.length; i++) {\n        result.append(string.format(list[i]))\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/391","completion":"    var dict = {}\n    for (i, j, k) in zip(l1, l2, l3) {\n        dict[i] = dict[i] ?? {}\n        dict[i][j] = k\n    }\n    return dict\n}","language":"swift"}
{"task_id":"MBSWP\/392","completion":"    if (n == 1) return 1\n    else return max(getMaxSum(n\/2) + getMaxSum(n\/3) + getMaxSum(n\/4) + getMaxSum(n\/5), n)\n}","language":"swift"}
{"task_id":"MBSWP\/393","completion":"    let max_list = input_list.reduce(\n        (acc, cur) => {\n            if (acc.length < cur.length) {\n                acc = cur;\n            }\n            return acc;\n        },\n        [] as [AnyHashable]\n    );\n\n    return max_list;\n}","language":"swift"}
{"task_id":"MBSWP\/394","completion":"    var distinct = true\n    var set = Set()\n    for _, v in test_tup {\n        if set.Contains(v) {\n            distinct = false\n            break\n        }\n        set.Add(v)\n    }\n    return distinct\n}","language":"swift"}
{"task_id":"MBSWP\/395","completion":"    var map = {}\n    for (i in str1) {\n        if (map[str1[i]] == nil) {\n            map[str1[i]] = 1\n        } else {\n            map[str1[i]] = map[str1[i]] + 1\n        }\n    }\n    for (i in str1) {\n        if (map[str1[i]] == 1) {\n            return str1[i]\n        }\n    }\n    return \"none\"\n}","language":"swift"}
{"task_id":"MBSWP\/396","completion":"    if (string.match(\"^(.).*\\1$\")) {\n        return \"Valid\"\n    } else {\n        return \"Invalid\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/397","completion":"    var x = [a, b, c]\n    x.sort()\n    var mid = x.length \/ 2\n    if (x.length % 2 == 0) {\n        return (x[mid - 1] + x[mid]) \/ 2.0\n    } else {\n        return x[mid]\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/398","completion":"    let sum = 0\n    for num in nums {\n        sum += num.digits()\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/400","completion":"    var freq = {}\n    for _, v in test_list {\n        freq[v] = freq[v] + 1 if v in freq else 1\n    }\n    return freq.keys().length\n}","language":"swift"}
{"task_id":"MBSWP\/401","completion":"    var result = []\n    for _, v1 in test_tup1 {\n        for _, v2 in test_tup2 {\n            result.append([v1 + v2, v1 + v2])\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/402","completion":"    var ncr = 1\n    var i = 1\n    while (i <= r) {\n        ncr = ncr * n % p\n        i = i + 1\n    }\n    return ncr\n}","language":"swift"}
{"task_id":"MBSWP\/403","completion":"    var pattern = \/[-a-zA-Z0-9@:%_\\+.~#?&\/\/=]{2,256}\\.[a-z]{2,4}\\b(\\\/[-a-zA-Z0-9@:%_\\+.~#?&\/\/=]*)?\/gi\n    return pattern.test(str)\n}","language":"swift"}
{"task_id":"MBSWP\/407","completion":"    let arr = n.toString().split(\"\").map(x => parseInt(x))\n    let res = []\n    let flag = false\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (arr[i] > arr[i - 1]) {\n            flag = true\n            res.push(arr[i - 1])\n            res.push(arr[i])\n        } else {\n            res.push(arr[i])\n        }\n    }\n    if (flag) {\n        return parseInt(res.join(\"\"))\n    } else {\n        return false\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/408","completion":"    var pairs = []\n    for _, n1 in nums1.enumerate() {\n        for _, n2 in nums2.enumerate() {\n            pairs.append([n1, n2])\n        }\n    }\n    pairs.sort((a, b) => a[0] - b[0])\n    var result = []\n    for _, pair in pairs.enumerate() {\n        if (result.count == k) {\n            break\n        }\n        result.append(pair)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/409","completion":"    var min = 0\n    var max = 0\n    for i in list1 {\n        min = min < i[0] * i[1] ? min : i[0] * i[1]\n        max = max > i[0] * i[1] ? max : i[0] * i[1]\n    }\n    return min * max\n}","language":"swift"}
{"task_id":"MBSWP\/410","completion":"    var min = listval[0] as? Int\n    for _, v in pairs(listval) {\n        if v < min {\n            min = v\n        }\n    }\n    return min\n}","language":"swift"}
{"task_id":"MBSWP\/411","completion":"    return word.replace(\/_([a-z])\/g, (match, letter) => letter.toUpperCase())\n}","language":"swift"}
{"task_id":"MBSWP\/412","completion":"    return filter(l, { |x| x % 2 == 1 })\n}","language":"swift"}
{"task_id":"MBSWP\/416","completion":"    if n == 0 {\n        return 0\n    }\n    if n < 0 {\n        return -breaksum(-n)\n    }\n    return max(breaksum(n - 1), breaksum(n - 2), breaksum(n - 3)) + n\n}","language":"swift"}
{"task_id":"MBSWP\/417","completion":"    var result = []\n    var map = {}\n    for (var i = 0; i < Input.length; i++) {\n        var tuple = Input[i]\n        for (var j = 0; j < tuple.length; j++) {\n            var element = tuple[j]\n            if (map[element] == null) {\n                map[element] = 1\n            } else {\n                map[element] += 1\n            }\n        }\n    }\n    var keys = Object.keys(map)\n    for (var i = 0; i < keys.length; i++) {\n        var key = keys[i]\n        if (map[key] == Input.length) {\n            result.push(Input[i])\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/419","completion":"    var sum = 0\n    var len = list1.count()\n    for (i in list1) {\n        var num = list1[i]\n        var rounded = Math.round(num)\n        sum += rounded\n    }\n    return sum * len\n}","language":"swift"}
{"task_id":"MBSWP\/421","completion":"    var delimiter = \"-\"\n    var result = \"\"\n    for (i in test_tup) {\n        result += test_tup[i] + delimiter\n    }\n    result = result.slice(0, -1)\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/422","completion":"    var sum = 0\n    for (i in 0..n) {\n        sum += (i * i * i)\n    }\n    return sum \/ n\n}","language":"swift"}
{"task_id":"MBSWP\/423","completion":"    let dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    for i in range(m + 1) {\n        for j in range(n + 1) {\n            if (i == 0 || j == 0) {\n                dp[i][j] = 0\n            } else if (gold[i - 1][j - 1] == 0) {\n                dp[i][j] = dp[i - 1][j]\n            } else {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + gold[i - 1][j - 1]\n            }\n        }\n    }\n    return dp[m][n]\n}","language":"swift"}
{"task_id":"MBSWP\/424","completion":"    result := []\n    for i in test_tuple {\n        result.append(test_tuple[i].last)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/426","completion":"    return nums.filter(x => x % 2 == 1)\n}","language":"swift"}
{"task_id":"MBSWP\/427","completion":"    var pattern = \/(\\d{4})-(\\d{2})-(\\d{2})\/\n    var result = dt.replace(pattern, \"$3-$2-$1\")\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/428","completion":"    var n = my_list.length\n    var gap = n \/ 2\n    while (gap > 0) {\n        for (i = gap; i < n; i++) {\n            var j = i\n            var temp = my_list[i]\n            while (j >= gap && my_list[j - gap] > temp) {\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            }\n            my_list[j] = temp\n        }\n        gap = gap \/ 2\n    }\n    return my_list\n}","language":"swift"}
{"task_id":"MBSWP\/432","completion":"    var area = (base1 + base2) * height \/ 2\n    return area\n}","language":"swift"}
{"task_id":"MBSWP\/437","completion":"    var result = \"\"\n    for (var i = 0; i < str1.length; i++) {\n        if (i % 2 == 0) {\n            result += str1[i]\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/438","completion":"    var count = 0\n    for (var i = 0; i < test_list.length; i++) {\n        for (var j = 0; j < test_list.length; j++) {\n            if (test_list[i][0] == test_list[j][1] && test_list[i][1] == test_list[j][0]) {\n                count += 1\n            }\n        }\n    }\n    return count.toString()\n}","language":"swift"}
{"task_id":"MBSWP\/439","completion":"    var sum = 0\n    for _, i in L {\n        sum += i\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/440","completion":"    var result = []\n    var index = 0\n    var length = text.length\n    var adverb = \"\"\n    while (index < length) {\n        if (text[index] == \" \") {\n            index += 1\n            continue\n        }\n        if (text[index] == \"!\") {\n            index += 1\n            continue\n        }\n        if (text[index] == \"?\") {\n            index += 1\n            continue\n        }\n        if (text[index] == \".\") {\n            index += 1\n            continue\n        }\n        if (text[index] == \",\") {\n            index += 1\n            continue\n        }\n        if (text[index] == \")\") {\n            index += 1\n            continue\n        }\n        if (text[index] == \"(\") {\n            index += 1\n            continue\n        }\n","language":"swift"}
{"task_id":"MBSWP\/442","completion":"    var count = 0\n    for (var i = 0; i < nums.length; i++) {\n        if (nums[i] > 0) {\n            count += 1\n        }\n    }\n    return count \/ nums.length\n}","language":"swift"}
{"task_id":"MBSWP\/444","completion":"    var trimmed_list = []\n    for _, tuple := range test_list {\n        trimmed_list.append(tuple.slice(0, K))\n    }\n    return trimmed_list.join(\"\\n\")\n}","language":"swift"}
{"task_id":"MBSWP\/445","completion":"    var result = []\n    for _, v1 in test_tup1 {\n        for _, v2 in test_tup2 {\n            result.append([v1 * v2])\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/447","completion":"    return nums.map { n -> n * n * n }\n}","language":"swift"}
{"task_id":"MBSWP\/448","completion":"    var sum = 0\n    var perrin = 1\n    var i = 1\n    while (i <= n) {\n        sum += perrin\n        perrin += 2\n        i += 1\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/450","completion":"    let result = []\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length > l) {\n            result.push(str[i].substring(0, l))\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/451","completion":"    return text1.replace(\/ \/g, \"\")\n}","language":"swift"}
{"task_id":"MBSWP\/456","completion":"    var reversed = []\n    for (var i = stringlist.length - 1; i >= 0; i--) {\n        reversed.append(stringlist[i])\n    }\n    return reversed\n}","language":"swift"}
{"task_id":"MBSWP\/459","completion":"    var regex = \/[A-Z]\/g\n    return str1.replace(regex, \"\")\n}","language":"swift"}
{"task_id":"MBSWP\/461","completion":"    var count = 0\n    for {\n        if (str[i] == str[i].toUpper) {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/462","completion":"    var result = []\n    var temp = []\n    for (var i = 0; i < list1.length; i++) {\n        temp.push(list1[i])\n        if (temp.length == 2) {\n            result.push(temp)\n            temp = []\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/463","completion":"    var max = -1\n    var max_so_far = -1\n    var min_so_far = 1\n    var product = 1\n    for (i <- 0 until arr.length) {\n        if (arr[i] < 0) {\n            min_so_far = min_so_far * arr[i]\n        } else {\n            max_so_far = max_so_far * arr[i]\n            product = max(product, max_so_far)\n        }\n        if (max_so_far < 0) {\n            max_so_far = min_so_far\n        }\n        if (max_so_far > max) {\n            max = max_so_far\n        }\n    }\n    return product\n}","language":"swift"}
{"task_id":"MBSWP\/465","completion":"    let dict2 = {}\n    for (let key in dict1) {\n        if (dict1[key] != \"none\") {\n            dict2[key] = dict1[key]\n        }\n    }\n    return dict2\n}","language":"swift"}
{"task_id":"MBSWP\/468","completion":"    var max = arr[0]\n    var min = arr[0]\n    var maxProduct = arr[0]\n\n    for (i <- 1; i < n; i++) {\n        max = Math.max(max, arr[i])\n        min = Math.min(min, arr[i])\n        maxProduct = Math.max(maxProduct, max * min)\n    }\n\n    return maxProduct\n}","language":"swift"}
{"task_id":"MBSWP\/469","completion":"    var profit = 0\n    var buy = 0\n    var sell = 0\n    var len = price.length\n    for (var i = 0; i < len; i++) {\n        if (sell < k) {\n            sell += price[i]\n        } else if (buy < k) {\n            buy += price[i]\n        } else {\n            profit += sell - buy\n            buy = 0\n            sell = 0\n        }\n    }\n    return profit\n}","language":"swift"}
{"task_id":"MBSWP\/470","completion":"    result = []\n    for (i <- 0 until test_tup.count - 1) {\n        result.append(test_tup[i] + test_tup[i+1])\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/471","completion":"    var result = 0\n    var remainder = 0\n    var i = 0\n    while (i < lens) {\n        remainder = remainder + arr[i] * n\n        i = i + 1\n    }\n    result = remainder % n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/473","completion":"    let set1 = set.fromList(test_list1)\n    let set2 = set.fromList(test_list2)\n    let intersection = set1.intersect(set2)\n    let result = intersection.map { (x, y) -> [x, y] }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/474","completion":"    var newStr = \"\"\n    for (var i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newStr += newch\n        } else {\n            newStr += str1[i]\n        }\n    }\n    return newStr\n}","language":"swift"}
{"task_id":"MBSWP\/475","completion":"    var dict2 = {}\n    for (var key in dict1) {\n        var value = dict1[key]\n        if (dict2[value] == nil) {\n            dict2[value] = [key]\n        } else {\n            dict2[value].append(key)\n        }\n    }\n    var result = []\n    for (var value in dict2) {\n        result.append(dict2[value])\n    }\n    result.sort(function(a, b) {\n        return a[0] - b[0]\n    })\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/477","completion":"    return string.toLowerCase()\n}","language":"swift"}
{"task_id":"MBSWP\/478","completion":"    var result = \"\"\n    for (var i = 0; i < str1.length; i++) {\n        if (str1[i] != str1[i].toLowerCase()) {\n            result += str1[i]\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/479","completion":"    return n % 10\n}","language":"swift"}
{"task_id":"MBSWP\/480","completion":"    var charOccurrences = {} as Map<String, Int>\n    for (let i = 0; i < str1.length; i++) {\n        let char = str1[i]\n        if (charOccurrences.has(char)) {\n            charOccurrences[char] += 1\n        } else {\n            charOccurrences[char] = 1\n        }\n    }\n    var maxOccurringChar = \"\"\n    var maxOccurringCharCount = 0\n    for (let char in charOccurrences) {\n        if (charOccurrences[char] > maxOccurringCharCount) {\n            maxOccurringChar = char\n            maxOccurringCharCount = charOccurrences[char]\n        }\n    }\n    return maxOccurringChar\n}","language":"swift"}
{"task_id":"MBSWP\/481","completion":"    var dp : [[Bool]] = [[false]] * (sum + 1)\n    dp[0] = [true]\n    for i in set {\n        for j in range(sum, -1, -1) {\n            if (i >= set[j]) {\n                dp[j] = dp[j - set[j]] + dp[j]\n            }\n        }\n    }\n    return dp[sum]\n}","language":"swift"}
{"task_id":"MBSWP\/482","completion":"    return \"Yes\"\n}","language":"swift"}
{"task_id":"MBSWP\/483","completion":"    var factorial = 1\n    var i = 1\n    while (factorial % x != 0) {\n        factorial *= i\n        i++\n    }\n    return i - 1\n}","language":"swift"}
{"task_id":"MBSWP\/484","completion":"    var result = []\n    for (var i = 0; i < test_list1.length; i++) {\n        for (var j = 0; j < test_list2.length; j++) {\n            if (test_list1[i][0] == test_list2[j][0] && test_list1[i][1] == test_list2[j][1]) {\n                break\n            }\n            if (j == test_list2.length - 1) {\n                result.push(test_list1[i])\n            }\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/485","completion":"    if let L = 0 to n - 1 {\n        let R = n - 1\n        while let R >= L {\n            if A[L] == A[R] {\n                return A[L]\n            }\n            if A[L] < A[R] {\n                R -= 1\n            } else {\n                L += 1\n            }\n        }\n    }\n    return -1\n}","language":"swift"}
{"task_id":"MBSWP\/486","completion":"    let binomial = 1.0\n    for (i = 0; i < k; i++) {\n        binomial = binomial * (n - i) \/ (i + 1)\n    }\n    return binomial * p\n}","language":"swift"}
{"task_id":"MBSWP\/487","completion":"    return [tup.sort((a, b) => a[1] < b[1])].reverse()\n}","language":"swift"}
{"task_id":"MBSWP\/488","completion":"    return (5 * a * a) \/ (4 * Math.tan(Math.PI \/ 5))\n}","language":"swift"}
{"task_id":"MBSWP\/490","completion":"    let symmetric_pairs = set()\n    for item in test_list {\n        symmetric_pairs.add(item)\n        symmetric_pairs.add(item[::-1])\n    }\n    return symmetric_pairs\n}","language":"swift"}
{"task_id":"MBSWP\/491","completion":"    var sum = 0\n    for i in 0..n {\n        sum += (1 - r) * pow(r, i) \/ factorial(i)\n    }\n    return sum * a\n}","language":"swift"}
{"task_id":"MBSWP\/493","completion":"    var polygons = []\n    var x = startx\n    var y = starty\n    var dx = (endx - startx) \/ radius\n    var dy = (endy - starty) \/ radius\n    for (var i = 0; i < radius; i++) {\n        var polygon = []\n        for (var j = 0; j < radius; j++) {\n            polygon.push([x, y])\n            x += dx\n            y += dy\n        }\n        polygons.push(polygon)\n    }\n    return polygons\n}","language":"swift"}
{"task_id":"MBSWP\/495","completion":"    var regex = \/(?<=[a-z])(?=[A-Z])\/g\n    return str1.replace(regex, \"\")\n}","language":"swift"}
{"task_id":"MBSWP\/496","completion":"    let minHeap = new MinHeap(n)\n    for (let i = 0; i < nums.length; i++) {\n        minHeap.insert(nums[i])\n    }\n    let result = []\n    while (minHeap.size() > 0) {\n        result.push(minHeap.extract())\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/497","completion":"    return 2 * r * h + 2 * r * Math.sqrt(Math.pow(r, 2) + Math.pow(h, 2))\n}","language":"swift"}
{"task_id":"MBSWP\/498","completion":"    if (x < 0 || y < 0) {\n        return -1\n    }\n    if (x == 0) {\n        return y\n    }\n    if (y == 0) {\n        return x\n    }\n    if (x > y) {\n        return gcd(x - y, y)\n    } else {\n        return gcd(x, y - x)\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/501","completion":"    var div = 1\n    var min = x < y ? x : y\n    var max = x < y ? y : x\n    while (min > 0) {\n        if (min % max == 0) {\n            div = max\n            break\n        }\n        min--\n    }\n    return div\n}","language":"swift"}
{"task_id":"MBSWP\/503","completion":"    var result = []\n    var currentNum = nums[0]\n    for (i in nums) {\n        if (nums[i] == currentNum) {\n            result.push(currentNum)\n        } else {\n            result.push(currentNum + 1)\n            currentNum = nums[i]\n        }\n    }\n    result.push(currentNum + 1)\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/505","completion":"    var i = 0\n    var j = 0\n    var n = A.length\n    var B = []\n    while (i < n) {\n        if (A[i] != 0) {\n            B[j] = A[i]\n            j += 1\n        }\n        i += 1\n    }\n    while (j < n) {\n        B[j] = 0\n        j += 1\n    }\n    return B\n}","language":"swift"}
{"task_id":"MBSWP\/507","completion":"    var result = []\n    for (let i = 0; i < list1.length; i++) {\n        if (removewords.indexOf(list1[i]) == -1) {\n            result.append(list1[i])\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/508","completion":"    var result = true\n    var i = 0\n    var j = 0\n    while (i < l1.Count && j < l2.Count) {\n        if (l1[i] == l2[j]) {\n            i = i + 1\n            j = j + 1\n        } else {\n            result = false\n            break\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/510","completion":"    var dp : [Int] = [1]\n    for (var i : arr) {\n        dp.append(0)\n    }\n    for (var i : arr) {\n        for (var j : arr) {\n            if (i < j) {\n                dp[j] += dp[j - i]\n            }\n        }\n    }\n    return dp[k]\n}","language":"swift"}
{"task_id":"MBSWP\/511","completion":"    var sum = 0\n    var min = 0\n    var factor = 2\n    var i = 1\n    while (i < num) {\n        if (num % i == 0) {\n            sum += i\n            while (num % i == 0) {\n                num \/= i\n            }\n        }\n        i += 1\n    }\n    if (num > 1) {\n        sum += num\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/512","completion":"    let freqs = {}\n    for _, v in test_tuple {\n        if v != nil {\n            if v.hash != nil {\n                freqs[v.hash] = freqs[v.hash] + 1 if v.hash in freqs else 1\n            }\n        }\n    }\n    return freqs\n}","language":"swift"}
{"task_id":"MBSWP\/513","completion":"    var res = []\n    for (i in test_tup) {\n        res.append(test_tup[i])\n        res.append(K)\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/515","completion":"    let sum = 0\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i]\n    }\n    if (sum % m != 0) {\n        return false\n    }\n    let dp = [true] * (sum \/ m)\n    dp[0] = false\n    for (let i = 1; i < dp.length; i++) {\n        if (dp[i - 1]) {\n            for (let j = 0; j < arr.length; j++) {\n                if (arr[j] % m == 0) {\n                    dp[i] = dp[i] && (arr[j] \/ m == i)\n                }\n            }\n        }\n    }\n    return dp[dp.length - 1]\n}","language":"swift"}
{"task_id":"MBSWP\/516","completion":"    let max = 0\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] > max) {\n            max = nums[i]\n        }\n    }\n    let bucket = [[] for _ in range(10)]\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i] \/ max\n        bucket[num % 10].push(nums[i])\n    }\n    let sorted = []\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i].length > 0) {\n            sorted = sorted.concat(bucket[i])\n        }\n    }\n    return sorted\n}","language":"swift"}
{"task_id":"MBSWP\/519","completion":"    var volume = 0.0\n    for (var i = 1; i <= num; i++) {\n        volume += (1 \/ (2 * i - 1)) * (1 \/ (2 * i - 1))\n    }\n    return volume\n}","language":"swift"}
{"task_id":"MBSWP\/520","completion":"    var gcd = (a, b) -> a % b == 0 ? b : gcd(b, a % b)\n    var lcm = (a, b) -> a * b \/ gcd(a, b)\n    return l.reduce { lcm(a, b) }\n}","language":"swift"}
{"task_id":"MBSWP\/522","completion":"    var max = 0\n    var dp = [0] * arr.length\n    for (var i = 1; i < arr.length; i++) {\n        dp[i] = dp[i - 1]\n        for (var j = i - 1; j >= 0; j--) {\n            if (arr[i] > arr[j] && dp[i] < dp[j] + 1) {\n                dp[i] = dp[j] + 1\n            }\n        }\n        max = Math.max(max, dp[i])\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/523","completion":"    let result = []\n    let upperCaseCount = str1.match(\/[A-Z]\/g).length\n    let lowerCaseCount = str1.match(\/[a-z]\/g).length\n    let numberCount = str1.match(\/[0-9]\/g).length\n    let length = str1.length\n    if (upperCaseCount == 0 && lowerCaseCount == 0 && numberCount == 0 && length >= 8) {\n        result.append(\"Valid string.\")\n    } else if (upperCaseCount == 0 && lowerCaseCount == 0 && numberCount == 0 && length < 8) {\n        result.append(\"String length should be atleast 8.\")\n    } else if (upperCaseCount == 0 && lowerCaseCount == 0 && numberCount != 0 && length >= 8) {\n        result.append(\"String must have 1 number.\")\n    } else if (upperCaseCount == 0 && lowerCase","language":"swift"}
{"task_id":"MBSWP\/524","completion":"    let dp = [0] * n\n    dp[0] = arr[0]\n    let max = dp[0]\n    for (let i = 1; i < n; i++) {\n        dp[i] = Math.max(dp[i - 1], arr[i])\n        max = Math.max(max, dp[i])\n    }\n    let sum = 0\n    for (let i = 0; i < n; i++) {\n        if (dp[i] == max) {\n            sum += dp[i]\n        }\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/526","completion":"    var result = \"\"\n    var words = str1.split(\" \")\n    for (var i = 0; i < words.length; i++) {\n        var word = words[i]\n        result += word[0].toUpperCase() + word.substring(1, word.length - 1) + \" \"\n    }\n    return result.trim()\n}","language":"swift"}
{"task_id":"MBSWP\/528","completion":"    let minLen = 0\n    let minList = nil\n    for _, list in pairs(list1) {\n        if len(list) < minLen {\n            minLen = len(list)\n            minList = list\n        }\n    }\n    return minList\n}","language":"swift"}
{"task_id":"MBSWP\/529","completion":"    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    return jacobsthalLucas(n - 1) + jacobsthalLucas(n - 2)\n}","language":"swift"}
{"task_id":"MBSWP\/530","completion":"    var count = 0\n    for (var i = 0; i < nums.length; i++) {\n        if (nums[i] < 0) {\n            count = count + 1\n        }\n    }\n    return count \/ nums.length\n}","language":"swift"}
{"task_id":"MBSWP\/531","completion":"    var dp : [Int] = [V + 1]\n    dp[0] = 0\n    for (var i = 1; i <= m; i++) {\n        dp[i] = V + 1\n        for (var j = 0; j < coins.length; j++) {\n            if (i - coins[j] >= 0) {\n                dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1)\n            }\n        }\n    }\n    return dp[m] > V ? -1 : dp[m]\n}","language":"swift"}
{"task_id":"MBSWP\/532","completion":"    var chars1 = str1.toCharArray()\n    var chars2 = str2.toCharArray()\n    var chars1Count = {}\n    var chars2Count = {}\n    for (var i = 0; i < chars1.length; i++) {\n        var char = chars1[i]\n        if (chars1Count[char]) {\n            chars1Count[char] += 1\n        } else {\n            chars1Count[char] = 1\n        }\n    }\n    for (var i = 0; i < chars2.length; i++) {\n        var char = chars2[i]\n        if (chars2Count[char]) {\n            chars2Count[char] += 1\n        } else {\n            chars2Count[char] = 1\n        }\n    }\n    for (var char in chars1Count) {\n        if (chars1Count[char] != chars2Count[char]) {\n            return false","language":"swift"}
{"task_id":"MBSWP\/534","completion":"    var result = []\n    var index = text.indexOf(pattern)\n    while index != -1 {\n        result.append(index)\n        index = text.indexOf(pattern, index + 1)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/535","completion":"    var pi = 3.14\n    var area = pi * r * r\n    var height = 2 * pi * r\n    var surfaceArea = area + height\n    return surfaceArea\n}","language":"swift"}
{"task_id":"MBSWP\/536","completion":"    var result = []\n    for (i <- 0 until list.count) {\n        if (i == n) {\n            result.append(list[i])\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/537","completion":"    let words = str1.split(\" \")\n    let map = {}\n    for (let word of words) {\n        if (map[word] == 1) {\n            return word\n        }\n        map[word] = 1\n    }\n    return \"None\"\n}","language":"swift"}
{"task_id":"MBSWP\/538","completion":"    return str1.split(\" \")\n}","language":"swift"}
{"task_id":"MBSWP\/539","completion":"    return bases_num.map {\n        (base, index) => base ** index\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/540","completion":"    var freq = {}\n    var max = 0\n    var min = 0\n    for (i in arr) {\n        freq[arr[i]] = freq.hasOwnProperty(arr[i]) ? freq[arr[i]] + 1 : 1\n        if (freq[arr[i]] > max) {\n            max = freq[arr[i]]\n        }\n        if (freq[arr[i]] < min) {\n            min = freq[arr[i]]\n        }\n    }\n    return max - min\n}","language":"swift"}
{"task_id":"MBSWP\/542","completion":"    return text.replace(\/ |,|\\.+\/g, \":\")\n}","language":"swift"}
{"task_id":"MBSWP\/545","completion":"    n = n ^ (n >> 1)\n    return n ^ (n << 1)\n}","language":"swift"}
{"task_id":"MBSWP\/546","completion":"    var index = string.lastIndexOf(char)\n    if (index == -1) {\n        return \"none\"\n    } else {\n        return index\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/548","completion":"    var dp = [1]\n    var max = 1\n    for (var i = 1; i < arr.length; i++) {\n        var prev = arr[i - 1]\n        var curr = arr[i]\n        if (curr > prev) {\n            dp.push(1)\n            max = Math.max(max, dp[i])\n        } else {\n            dp[i] = dp[i - 1] + 1\n            max = Math.max(max, dp[i])\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/552","completion":"    if (seq_nums.count == 1) {\n        return \"Linear Sequence\"\n    }\n    for (i in seq_nums) {\n        if (seq_nums[i] - seq_nums[i - 1] != 1) {\n            return \"Non Linear Sequence\"\n        }\n    }\n    return \"Linear Sequence\"\n}","language":"swift"}
{"task_id":"MBSWP\/553","completion":"    var sum = 0.0\n    for {\n        sum += test_tup[0] + test_tup[1]\n    }\n    return sum \/ 2.0\n}","language":"swift"}
{"task_id":"MBSWP\/556","completion":"    var count = 0\n    for i in A {\n        for j in A {\n            if i != j && i ^ j == N {\n                count += 1\n            }\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/557","completion":"    var result = \"\"\n    for (var i = 0; i < string.length; i++) {\n        if (string[i] == string[i].toUpperCase()) {\n            result += string[i].toLowerCase()\n        } else {\n            result += string[i].toUpperCase()\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/558","completion":"    var n1Digits = 0\n    var n2Digits = 0\n    var n1Digit = 0\n    var n2Digit = 0\n    while (n1Digit < n1.digitCount) {\n        n1Digit = n1Digits\n        n1Digits = n1Digits + 1\n    }\n    while (n2Digit < n2.digitCount) {\n        n2Digit = n2Digits\n        n2Digits = n2Digits + 1\n    }\n    var n1Distance = n1Digits - n2Digits\n    var n2Distance = n2Digits - n1Digits\n    return n1Distance + n2Distance\n}","language":"swift"}
{"task_id":"MBSWP\/560","completion":"    var result = []\n    for {\n        result += test_tup1\n    }\n    for {\n        result += test_tup2\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/561","completion":"    result := make([]Int, len(test_list))\n    for i, (a, b) in enumerate(test_list) {\n        result[i] = (a, b)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/563","completion":"    var result = []\n    var start = 0\n    var end = 0\n    while (start < text.length) {\n        if (text[start] == '\"') {\n            end = text.indexOf('\"', start + 1)\n            if (end == -1) {\n                break\n            }\n            result.append(text.substring(start + 1, end))\n            start = end + 1\n        } else {\n            start = start + 1\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/564","completion":"    var count = 0\n    for i in arr {\n        for j in arr {\n            if i != j && i + j == n {\n                count += 1\n            }\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/565","completion":"    var result = []\n    var i = 0\n    while (i < word.length) {\n        result.append(word[i])\n        i += 1\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/568","completion":"    let result = []\n    for _ in 0..length {\n        result.append([])\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/569","completion":"    var result = []\n    for _, value in list1.enumerate() {\n        result.append(value.sort())\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/570","completion":"    let result = [] as [String]\n    for (let i = 0; i < list1.length; i++) {\n        let word = list1[i]\n        for (let j = 0; j < charlist.length; j++) {\n            let char = charlist[j]\n            if (word.includes(char)) {\n                word = word.replace(char, \"\")\n            }\n        }\n        result.push(word)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/571","completion":"    let dp = [0] * (N + 1)\n    dp[0] = 0\n    for (let i = 1; i <= N; i++) {\n        dp[i] = dp[i - 1] + arr[i - 1]\n    }\n    let max = 0\n    for (let i = 1; i <= N; i++) {\n        for (let j = i + 1; j <= N; j++) {\n            if (i < j) {\n                max = Math.max(max, dp[j] - dp[i])\n            }\n        }\n    }\n    return max >= K ? max : -1\n}","language":"swift"}
{"task_id":"MBSWP\/572","completion":"    var uniqueNums = []\n    var seenNums = {}\n    for (i, n in nums) {\n        if (!seenNums[n]) {\n            uniqueNums.append(n)\n            seenNums[n] = true\n        }\n    }\n    return uniqueNums\n}","language":"swift"}
{"task_id":"MBSWP\/574","completion":"    return 2 * (Math.PI * r * r) + 2 * (Math.PI * r * h)\n}","language":"swift"}
{"task_id":"MBSWP\/578","completion":"    var result = [] as [Int]\n    var i = 0\n    var j = 0\n    var k = 0\n    while (i < list1.length && j < list2.length && k < list3.length) {\n        result[k] = list1[i]\n        result[k + 1] = list2[j]\n        result[k + 2] = list3[k]\n        i = i + 1\n        j = j + 1\n        k = k + 1\n    }\n    while (i < list1.length) {\n        result[k] = list1[i]\n        i = i + 1\n        k = k + 1\n    }\n    while (j < list2.length) {\n        result[k] = list2[j]\n        j = j + 1\n        k = k + 1\n    }\n   ","language":"swift"}
{"task_id":"MBSWP\/579","completion":"    var result = []\n    for (var i = 0; i < test_tup1.length; i++) {\n        if (test_tup2.indexOf(test_tup1[i]) == -1) {\n            result.append(test_tup1[i])\n        }\n    }\n    for (var i = 0; i < test_tup2.length; i++) {\n        if (test_tup1.indexOf(test_tup2[i]) == -1) {\n            result.append(test_tup2[i])\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/580","completion":"    let result = [] as [AnyHashable]\n    for i in test_tuple {\n        if i.isKindOf<Int>() {\n            if i % 2 == 0 {\n                result.append(i)\n            }\n        } else {\n            result.append(extractEven(i))\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/582","completion":"    return dict1.count == 0\n}","language":"swift"}
{"task_id":"MBSWP\/583","completion":"    if num == 0 {\n        return 1\n    }\n\n    return (4 * num * catalanNumber(num - 1)) \/ (num + 1)\n}","language":"swift"}
{"task_id":"MBSWP\/584","completion":"    var regex = \/[^aeiou]\/gi;\n    var result = text.match(regex);\n    var resultString = \"\";\n    for (var i = 0; i < result.length; i++) {\n        resultString += (i + 1) + \"-\" + result[i] + \": \";\n    }\n    return resultString;\n}","language":"swift"}
{"task_id":"MBSWP\/585","completion":"    let heap = new Heap(items, (a, b) => a.price - b.price)\n    let result = []\n    while (heap.size() > 0) {\n        result.push(heap.pop())\n        if (result.length == n) {\n            break\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/586","completion":"    var arr = []\n    var i = 0\n    while (i < a.count) {\n        arr.append(a[i])\n        i += k\n    }\n    arr.append(a[i])\n    return arr\n}","language":"swift"}
{"task_id":"MBSWP\/588","completion":"    var min = min(nums)\n    var max = max(nums)\n    return max - min\n}","language":"swift"}
{"task_id":"MBSWP\/589","completion":"    var result = []\n    var i = 0\n    var j = 0\n    while (i <= b) {\n        j = 0\n        while (j <= b) {\n            if (i * i + j * j == a * a) {\n                result.append(i * i + j * j)\n            }\n            j++\n        }\n        i++\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/591","completion":"    let first = newList[0]\n    let last = newList[newList.length - 1]\n    newList[0] = last\n    newList[newList.length - 1] = first\n    return newList\n}","language":"swift"}
{"task_id":"MBSWP\/592","completion":"    var binomialCoeff = [Int, Int]\n    binomialCoeff[0] = 1\n    binomialCoeff[1] = 1\n    for (i <- 2; i <= n; i++) {\n        binomialCoeff[i] = binomialCoeff[i - 1] * i\n    }\n    var sum = 0\n    for (i <- 2; i <= n; i++) {\n        sum += binomialCoeff[i]\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/593","completion":"    var result = \"\"\n    for (var i = 0; i < ip.length; i++) {\n        if (ip[i] != \".\") {\n            result += ip[i]\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/594","completion":"    var even = 0\n    var odd = 0\n    for (i in list1) {\n        if (i % 2 == 0) {\n            even += list1[i]\n        } else {\n            odd += list1[i]\n        }\n    }\n    return even - odd\n}","language":"swift"}
{"task_id":"MBSWP\/595","completion":"    var count = 0\n    var i = 0\n    var j = 0\n    var temp = 0\n    while (i < str1.length && j < str2.length) {\n        if (str1[i] == str2[j]) {\n            i++\n            j++\n        } else if (str1[i] == '0') {\n            temp = str2[j]\n            str2[j] = '1'\n            str2[i] = temp\n            count++\n            i++\n            j++\n        } else {\n            temp = str1[i]\n            str1[i] = '1'\n            str1[j] = temp\n            count++\n            j++\n        }\n    }\n    if (i < str1.length) {\n        while (i < str1.length) {\n            temp = str1[i]\n            str1[i] = '1","language":"swift"}
{"task_id":"MBSWP\/597","completion":"    var i = 0;\n    var j = 0;\n    var p = 0;\n    var q = 0;\n    var count = 0;\n    while (count < k) {\n        if (i < m && j < n) {\n            if (arr1[i] < arr2[j]) {\n                p = i;\n                q = j;\n                i++;\n            } else {\n                p = j;\n                q = i;\n                j++;\n            }\n        } else if (i < m) {\n            p = i;\n            q = j;\n            i++;\n        } else if (j < n) {\n            p = j;\n            q = i;\n            j++;\n        }\n        count++;\n    }\n    return arr1[p];\n}","language":"swift"}
{"task_id":"MBSWP\/599","completion":"    var sum = 0\n    var average = 0\n    var result = []\n    for (i <- 0 until number) {\n        sum += i\n        average = sum \/ number\n        result = [sum, average]\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/602","completion":"    var map = [:]\n    for (var i = 0; i < str1.length; i++) {\n        if (map[str1[i]]) {\n            return str1[i]\n        }\n        map[str1[i]] = true\n    }\n    return \"None\"\n}","language":"swift"}
{"task_id":"MBSWP\/603","completion":"    var l = [1]\n    var i = 2\n    while (l.length < n) {\n        l = l.append(l[i - 1] + l[i - 2])\n        i += 1\n    }\n    return l\n}","language":"swift"}
{"task_id":"MBSWP\/604","completion":"    var words : String = s.split(\" \")\n    var reversed : String = \"\"\n    for (var i : Int) {\n        reversed += words[i].split(\"\").reverse().join(\"\") + \" \"\n    }\n    return reversed.trim()\n}","language":"swift"}
{"task_id":"MBSWP\/606","completion":"    return degree * Math.PI \/ 180.0\n}","language":"swift"}
{"task_id":"MBSWP\/607","completion":"    var regex = new RegExp(pattern, \"g\")\n    var match = regex.exec(text)\n    var result = []\n    while (match != null) {\n        result.append(match[0])\n        match = regex.exec(text)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/608","completion":"    var bell = 1\n    var i = 1\n    while (i < n) {\n        bell = bell * 2 + 1\n        i = i + 1\n    }\n    return bell\n}","language":"swift"}
{"task_id":"MBSWP\/610","completion":"    let kth = 0\n    let newList = []\n    for {\n        if (kth < L) {\n            newList.append(list1[kth])\n            kth++\n        }\n    }\n    return newList\n}","language":"swift"}
{"task_id":"MBSWP\/612","completion":"    let result = [[AnyHashable]()]\n    let i = 0\n    let j = 0\n    while (i < lst.count && j < lst.count) {\n        let first = lst[i]\n        let second = lst[j]\n        if (first.count > 0 && second.count > 0) {\n            result.append(first.slice(0, first.count + 1))\n            result.append(second.slice(1))\n            i = i + 1\n            j = j + 1\n        } else if (first.count > 0) {\n            result.append(first)\n            i = i + 1\n        } else if (second.count > 0) {\n            result.append(second)\n            j = j + 1\n        } else {\n            result.append(first)\n            result.append(second)\n            i = i + 1\n            j =","language":"swift"}
{"task_id":"MBSWP\/613","completion":"    var max_list = []\n    for _, value in test_list {\n        max_list.append(value)\n    }\n    var max_tuple = max_list[0]\n    for _, value in max_list {\n        if value > max_tuple {\n            max_tuple = value\n        }\n    }\n    return max_list\n}","language":"swift"}
{"task_id":"MBSWP\/615","completion":"    var sum = 0\n    var count = 0\n    for (var i = 0; i < nums.length; i++) {\n        for (var j = 0; j < nums[i].length; j++) {\n            sum += nums[i][j]\n            count += 1\n        }\n    }\n    return sum \/ count\n}","language":"swift"}
{"task_id":"MBSWP\/617","completion":"    var jumps = 0\n    var steps = 0\n    var x = 0\n    var y = 0\n    while (x < a && y < b) {\n        if (steps == d) {\n            jumps += 1\n            steps = 0\n        }\n        if (x < a - 1) {\n            x += 1\n        } else {\n            x = 0\n        }\n        if (y < b - 1) {\n            y += 1\n        } else {\n            y = 0\n        }\n        steps += 1\n    }\n    return jumps\n}","language":"swift"}
{"task_id":"MBSWP\/618","completion":"    return nums1.map { n1 -> nums2.map { n2 -> n1 \/ n2 } }\n}","language":"swift"}
{"task_id":"MBSWP\/619","completion":"    var result = \"\"\n    var num = \"\"\n    for (var i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i]\n        } else {\n            result += num\n            result += test_str[i]\n            num = \"\"\n        }\n    }\n    result += num\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/620","completion":"    if (n == 0) {\n        return 0\n    }\n    if (n == 1) {\n        return 1\n    }\n    if (n == 2) {\n        return 2\n    }\n    if (n == 3) {\n        return 3\n    }\n    if (n == 4) {\n        return 4\n    }\n    if (n == 5) {\n        return 5\n    }\n    if (n == 6) {\n        return 6\n    }\n    if (n == 7) {\n        return 7\n    }\n    if (n == 8) {\n        return 8\n    }\n    if (n == 9) {\n        return 9\n    }\n    if (n == 10) {\n        return 10\n    }\n    if (n == 11) {\n       ","language":"swift"}
{"task_id":"MBSWP\/621","completion":"    var result = []\n    for (var i = 0; i < test_list.length; i++) {\n        var current = test_list[i]\n        var current_number = parseInt(current)\n        if (isNaN(current_number)) {\n            result.push(current)\n        } else {\n            result.push(current_number + K)\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/622","completion":"    var arr = arr1 + arr2\n    arr.sort()\n    var mid = n \/ 2\n    if (n % 2 == 0) {\n        return (arr[mid - 1] + arr[mid]) \/ 2.0\n    } else {\n        return arr[mid]\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/623","completion":"    return nums.map(num => num ** n)\n}","language":"swift"}
{"task_id":"MBSWP\/624","completion":"    return string.toUpperCase()\n}","language":"swift"}
{"task_id":"MBSWP\/625","completion":"    let first = newList[0]\n    let last = newList[newList.length - 1]\n    let newList = newList.slice(1, newList.length - 1)\n    newList.append(last)\n    newList.insert(0, first)\n    return newList\n}","language":"swift"}
{"task_id":"MBSWP\/627","completion":"    var result = end + 1\n    var i = start\n    while (i <= end) {\n        if (array[i] == i) {\n            i++\n        } else {\n            var temp = array[i]\n            array[i] = array[temp]\n            array[temp] = temp\n        }\n    }\n    for (i = 0; i < array.length; i++) {\n        if (array[i] != i) {\n            return i\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/628","completion":"    var result = \"\"\n    for (var i = 0; i < string.length; i++) {\n        if (string[i] == \" \") {\n            result += \"%20\"\n        } else {\n            result += string[i]\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/630","completion":"    var result = []\n    var x = test_tup[0]\n    var y = test_tup[1]\n    var x_diff = 0\n    var y_diff = 0\n    var x_diff_max = 0\n    var y_diff_max = 0\n    var x_diff_min = 0\n    var y_diff_min = 0\n    var x_diff_sum = 0\n    var y_diff_sum = 0\n    var x_diff_avg = 0\n    var y_diff_avg = 0\n    var x_diff_min_index = 0\n    var y_diff_min_index = 0\n    var x_diff_max_index = 0\n    var y_diff_max_index = 0\n    var x_diff_sum_index = 0\n    var y_diff_sum_index = 0\n    var x_diff_avg_index = 0\n    var y_diff_avg_index ","language":"swift"}
{"task_id":"MBSWP\/631","completion":"    return text.replace(\/\\s\/g, \"_\")\n}","language":"swift"}
{"task_id":"MBSWP\/632","completion":"    var zero_list = []\n    for(var i = 0; i < num_list.length; i++) {\n        if(num_list[i] == 0) {\n            zero_list.append(0)\n        } else {\n            zero_list.append(num_list[i])\n        }\n    }\n    return zero_list\n}","language":"swift"}
{"task_id":"MBSWP\/633","completion":"    var sum = 0\n    for i in arr {\n        for j in arr {\n            if i != j {\n                sum += i ^ j\n            }\n        }\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/635","completion":"    \/\/ Your code here\n}","language":"swift"}
{"task_id":"MBSWP\/638","completion":"    var k = 35 + (0.6 * t)\n    var e = (v - k) \/ (v + k)\n    return e * 100\n}","language":"swift"}
{"task_id":"MBSWP\/639","completion":"    var sum = 0\n    for (name in sample_names) {\n        if (name.startsWith(\"a\")) {\n            continue\n        }\n        sum += name.length\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/640","completion":"    let result = \"\"\n    for (let i = 0; i < items.length; i++) {\n        if (items[i].startsWith(\"(\") && items[i].endsWith(\")\")) {\n            continue\n        }\n        result += items[i]\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/644","completion":"    var result = []\n    var length = input.length\n    var index = length - k\n    for (i = 0; i < length; i++) {\n        if (i < index) {\n            result.push(input[i])\n        } else {\n            result.push(input[i])\n            break\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/647","completion":"    var result = []\n    var index = 0\n    while (index < text.length) {\n        var currentChar = text[index]\n        if (currentChar.isUpperCase()) {\n            result.append(text.substring(0, index))\n            index += 1\n        } else {\n            index += 1\n        }\n    }\n    result.append(text.substring(index))\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/648","completion":"    var newList = [] as [Int]\n    var i = 0\n    while (i < lst.length) {\n        var j = i + 1\n        while (j < lst.length) {\n            if (i % 2 == 0) {\n                newList.append(lst[j])\n            } else {\n                newList.append(lst[i])\n            }\n            j += 1\n        }\n        i += 1\n    }\n    return newList\n}","language":"swift"}
{"task_id":"MBSWP\/651","completion":"    return {\n        test_tup1.sort().join() == test_tup2.sort().join()\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/652","completion":"    var result = \"\"\n    for _, row in test_list.enumerate() {\n        for _, col in row.enumerate() {\n            result += \"(\" + col.join(\", \") + \")\"\n        }\n        result += \"\\n\"\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/653","completion":"    let d = {}\n    for _, v of l {\n        if let k = _ {\n            d[k] = d[k] ?? []\n            d[k].append(v)\n        }\n    }\n    return d\n}","language":"swift"}
{"task_id":"MBSWP\/656","completion":"    let sum = 0\n    let minSum = 0\n    for i in a {\n        for j in b {\n            sum += abs(i - j)\n        }\n        minSum = minSum < sum ? sum : minSum\n        sum = 0\n    }\n    return minSum\n}","language":"swift"}
{"task_id":"MBSWP\/657","completion":"    let factorial = 1\n    let i = 2\n    while i <= n {\n        factorial *= i\n        i++\n    }\n    let firstDigit = n % factorial\n    if firstDigit == 0 {\n        return 1\n    }\n    return firstDigit\n}","language":"swift"}
{"task_id":"MBSWP\/659","completion":"    let dup = []\n    let dup_set = {}\n    for i in x {\n        if dup_set[i] == nil {\n            dup_set[i] = true\n            dup.append(i)\n        }\n    }\n    return dup\n}","language":"swift"}
{"task_id":"MBSWP\/660","completion":"    var result = []\n    if l1 <= r2 && l2 <= r1 {\n        result.append(l1)\n        result.append(r1)\n    } else if l1 >= r2 && l2 >= r1 {\n        result.append(l2)\n        result.append(r2)\n    } else {\n        if l1 <= r2 {\n            result.append(l1)\n            result.append(r2)\n        } else {\n            result.append(l2)\n            result.append(r1)\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/661","completion":"    var max = 0\n    var sum = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    while (i < n) {\n        if (arr[i] == arr[i + 1]) {\n            sum += arr[i]\n            i++\n        } else {\n            sum += arr[i]\n            if (sum > max) {\n                max = sum\n            }\n            sum = 0\n            i++\n        }\n    }\n    while (j < n) {\n        if (arr[j] == arr[j + 1]) {\n            sum += arr[j]\n            j++\n        } else {\n            sum += arr[j]\n            if (sum > max) {\n                max = sum\n            }\n            sum = 0\n            j++\n        }\n    }\n    while (k < n) ","language":"swift"}
{"task_id":"MBSWP\/662","completion":"    let dict2 = {}\n    for key, value in dict1.items() {\n        dict2[key] = value.sort()\n    }\n    return dict2\n}","language":"swift"}
{"task_id":"MBSWP\/665","completion":"    return num_list.append(num_list.shift())\n}","language":"swift"}
{"task_id":"MBSWP\/666","completion":"    var count = 0\n    for (i in string) {\n        if (string[i] == char) {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/668","completion":"    var count = 0\n    var result = \"\"\n    for (i in string) {\n        if (string[i] == char) {\n            count += 1\n        }\n        else {\n            result += string[i]\n        }\n    }\n    if (count > 0) {\n        result = result.substring(0, result.length - count)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/669","completion":"    var regex = \/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\/\n    if (Ip.match(regex)) {\n        return \"Valid IP address\"\n    } else {\n        return \"Invalid IP address\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/671","completion":"    let mask = ~0 << (32 - n)\n    return mask\n}","language":"swift"}
{"task_id":"MBSWP\/674","completion":"    var words = string.split(\" \")\n    var uniqueWords = words.filter(word => !words.contains(word))\n    return uniqueWords.join(\" \")\n}","language":"swift"}
{"task_id":"MBSWP\/676","completion":"    return text1.replace(\/[^a-zA-Z0-9]\/g, \"\")\n}","language":"swift"}
{"task_id":"MBSWP\/678","completion":"    return str1.replace(\" \", \"\")\n}","language":"swift"}
{"task_id":"MBSWP\/679","completion":"    var result = \"\"\n    for (var i = 0; i < ditionary.length; i++) {\n        if (ditionary[i].key == key) {\n            result = ditionary[i].value\n            break\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/682","completion":"    return nums1.map { n1 -> nums2.map { n2 -> n1 * n2 } }\n}","language":"swift"}
{"task_id":"MBSWP\/684","completion":"    var count = 0\n    for i in str {\n        if i == x {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/685","completion":"    var sum = 0\n    var i : Int = 1\n    while (i <= n) {\n        if (isPrime(i)) {\n            sum += i\n        }\n        i += 1\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/686","completion":"    var freq = {}\n    for _, x in test_tup {\n        freq[x] = freq.hasOwnProperty(x) ? freq[x] + 1 : 1\n    }\n    return JSON.stringify(freq)\n}","language":"swift"}
{"task_id":"MBSWP\/687","completion":"    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if (a > b) {\n        return recurGcd(a - b, b);\n    }\n    return recurGcd(a, b - a);\n}","language":"swift"}
{"task_id":"MBSWP\/688","completion":"    var c = a + b * 1j\n    return c.real + c.imag\n}","language":"swift"}
{"task_id":"MBSWP\/689","completion":"    if let jump = 0;\n    for i = 0; i < n; i++ {\n        jump = Math.max(jump, i + arr[i]);\n        if (jump >= n) {\n            return jump;\n        }\n    }\n    return -1;\n}","language":"swift"}
{"task_id":"MBSWP\/690","completion":"    var result = []\n    var current = 1\n    for (i in nums) {\n        if (nums[i] == nums[i - 1]) {\n            current *= nums[i]\n        } else {\n            result.append(current)\n            current = nums[i]\n        }\n    }\n    result.append(current)\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/691","completion":"    var result = [Int: [Int]]\n    for _, v in test_list {\n        if _ == 0 {\n            result[0] = [v]\n        } else {\n            result[_ - 1].append(v)\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/693","completion":"    return text1.replace(\/ {2,}\/g, \" \")\n}","language":"swift"}
{"task_id":"MBSWP\/694","completion":"    let unique_list = []\n    for key, value in test_dict.items() {\n        for i in value {\n            if unique_list.contains(i) {\n                continue\n            } else {\n                unique_list.append(i)\n            }\n        }\n    }\n    return unique_list\n}","language":"swift"}
{"task_id":"MBSWP\/696","completion":"    let result = []\n    let i = 0\n    let j = 0\n    while (i < list1.count && j < list2.count) {\n        result.append(list1[i].append(list2[j]))\n        i = i + 1\n        j = j + 1\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/698","completion":"    let dict = {}\n    for (let [key, value] of test_dict) {\n        dict[key] = value\n    }\n    let sorted_keys = [0..test_dict.length].map { (i, k) => k }\n    sorted_keys.sort()\n    let sorted_values = [0..test_dict.length].map { (i, k) => dict[sorted_keys[i]] }\n    sorted_values.sort()\n    let result = []\n    for (let [key, value] of test_dict) {\n        result.append([key, value])\n    }\n    for (let i = 0; i < sorted_keys.length; i++) {\n        result[i][1] = sorted_values[i]\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/699","completion":"    var counter = 0\n    var i = 0\n    var j = 0\n    var len1 = str1.length\n    var len2 = str2.length\n    while (i < len1 && j < len2) {\n        if (str1[i] == str2[j]) {\n            i += 1\n            j += 1\n        } else if (str1[i] == '0') {\n            i += 1\n        } else {\n            counter += len1 - i\n            j += 1\n        }\n    }\n    if (i < len1) {\n        counter += len1 - i\n    } else if (j < len2) {\n        counter += len2 - j\n    }\n    return counter\n}","language":"swift"}
{"task_id":"MBSWP\/700","completion":"    var count = 0\n    for (var i : AnyHashable in li) {\n        if (min <= i && i <= max) {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/701","completion":"    let sum = 0\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i]\n    }\n    let leftSum = 0\n    for (let i = 0; i < arr.length; i++) {\n        sum -= arr[i]\n        if (sum == leftSum) {\n            return i\n        }\n        leftSum += arr[i]\n    }\n    return -1\n}","language":"swift"}
{"task_id":"MBSWP\/702","completion":"    var amin = 0\n    var amax = arr.length\n    var count = 0\n    while (amin < amax) {\n        var mid = (amin + amax) \/ 2\n        if (arr[mid] < k) {\n            amin = mid + 1\n        } else {\n            amax = mid\n        }\n        count += 1\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/704","completion":"    var sum = 0.0\n    var i = 1\n    while (i <= n) {\n        sum += 1.0 \/ i\n        i += 1\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/705","completion":"    let list2 = []\n    for _, value in pairs(list1) {\n        list2.append(value)\n    }\n    list2.sort((a, b) => {\n        if (a.length > b.length) {\n            return 1\n        } else if (a.length < b.length) {\n            return -1\n        } else {\n            return 0\n        }\n    })\n    return list2\n}","language":"swift"}
{"task_id":"MBSWP\/706","completion":"    if (n > m) {\n        return false;\n    }\n    for (i <- 0 until m) {\n        if (arr1[i] == arr2[i]) {\n            continue;\n        }\n        if (arr1[i] < arr2[i]) {\n            return false;\n        }\n        if (arr1[i] > arr2[i]) {\n            return true;\n        }\n    }\n    return true;\n}","language":"swift"}
{"task_id":"MBSWP\/707","completion":"    var count = 0\n    for i in 0..n {\n        count += n & 1\n        n >>= 1\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/708","completion":"    return []\n}","language":"swift"}
{"task_id":"MBSWP\/709","completion":"    var unique_dict = {}\n    for _, value in test_list {\n        if unique_dict.containsValue(value) {\n            unique_dict[value] = unique_dict[value] + 1\n        } else {\n            unique_dict[value] = 1\n        }\n    }\n    return \"{$unique_dict}\"\n}","language":"swift"}
{"task_id":"MBSWP\/712","completion":"    var unique = {}\n    for (var i = 0; i < list1.length; i++) {\n        if (unique[list1[i]]) {\n            continue\n        }\n        unique[list1[i]] = true\n    }\n    return Object.keys(unique).map(key => {\n        return [key, unique[key]]\n    })\n}","language":"swift"}
{"task_id":"MBSWP\/714","completion":"    var count = 0\n    var i = 2\n    while (i <= n) {\n        if (n % i == 0) {\n            count += 1\n            while (n % i == 0) {\n                n \/= i\n            }\n        }\n        i += 1\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/715","completion":"    let arr = test_str.split(\", \").map(x => parseInt(x))\n    return arr\n}","language":"swift"}
{"task_id":"MBSWP\/717","completion":"    var mean = meanCalc(data)\n    var sd = 0.0\n    for (i in data) {\n        sd += Math.pow(data[i] - mean, 2)\n    }\n    sd = Math.sqrt(sd \/ data.length)\n    return sd\n}","language":"swift"}
{"task_id":"MBSWP\/718","completion":"    let list2 = []\n    for (let i = 0; i < list1.length; i += 2) {\n        list2.append(list1[i])\n    }\n    return list2\n}","language":"swift"}
{"task_id":"MBSWP\/719","completion":"    var a = text.indexOf(\"a\")\n    if a == -1 {\n        return \"Not matched!\"\n    }\n    var b = text.indexOf(\"b\", a + 1)\n    if b == -1 {\n        return \"Not matched!\"\n    }\n    return \"Found a match!\"\n}","language":"swift"}
{"task_id":"MBSWP\/721","completion":"    var dp = [[Double.Max]] * N\n    dp[0][0] = cost[0][0]\n    for (i, j) in 0..N {\n        for (k, l) in 0..N {\n            if (i == k && j == l) {\n                dp[i][j] = cost[i][j]\n            } else {\n                dp[i][j] = cost[i][j] + min(dp[i][k], dp[k][j])\n            }\n        }\n    }\n    return dp[N - 1][N - 1] \/ (N * N)\n}","language":"swift"}
{"task_id":"MBSWP\/722","completion":"    var result = []\n    for (var i : String) {\n        if (students[i][0] < h && students[i][1] < w) {\n            result.append(i)\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/723","completion":"    var map = {}\n    var count = 0\n    for (var i = 0; i < nums1.length; i++) {\n        var num1 = nums1[i]\n        var num2 = nums2[i]\n        if (map[num1] != undefined) {\n            count += map[num1]\n        }\n        if (map[num2] != undefined) {\n            count += map[num2]\n        }\n        map[num1] = map[num1] != undefined ? map[num1] + 1 : 1\n        map[num2] = map[num2] != undefined ? map[num2] + 1 : 1\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/724","completion":"    var sum = 0\n    var power_str = power.toString()\n    for (var i = 0; i < power_str.length; i++) {\n        sum += Math.pow(base, i) * parseInt(power_str[i])\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/725","completion":"    return text1.match(\/\\\"(.+?)\\\"\/g)\n}","language":"swift"}
{"task_id":"MBSWP\/726","completion":"    var result = []\n    for (i in test_tup) {\n        result.append(test_tup[i] * test_tup[i+1])\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/727","completion":"    var regex = \/[a-zA-Z0-9]\/g\n    return S.replace(regex, \"\")\n}","language":"swift"}
{"task_id":"MBSWP\/729","completion":"    return nums1.map { n1 -> nums2.map { n2 -> n1 + n2 } }\n}","language":"swift"}
{"task_id":"MBSWP\/730","completion":"    let unique = []\n    let current = 0\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] != nums[current]) {\n            unique.push(nums[i])\n            current = i\n        }\n    }\n    return unique\n}","language":"swift"}
{"task_id":"MBSWP\/731","completion":"    return 2 * r * h + 2 * r * Math.sqrt(Math.pow(h, 2) + Math.pow(r, 2))\n}","language":"swift"}
{"task_id":"MBSWP\/732","completion":"    return text.replace(\/ |,|\\.\/g, \":\")\n}","language":"swift"}
{"task_id":"MBSWP\/735","completion":"    let mask = ~(1 << (n.bitLength() - 2))\n    return n ^ mask\n}","language":"swift"}
{"task_id":"MBSWP\/737","completion":"    if (string.match(\/^[aeiou]\/)) {\n        return \"Valid\"\n    } else {\n        return \"Invalid\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/738","completion":"    var result = 1\n    for (i in 1..n) {\n        result *= (1 - 1\/i)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/739","completion":"    var triangularNumbers = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55]\n    var index = 0\n    var min = 0\n    var minIndex = 0\n    for (i <- 0; i < n; i++) {\n        min = triangularNumbers[i]\n        minIndex = i\n        for (j <- i; j < n; j++) {\n            if (triangularNumbers[j] < min) {\n                min = triangularNumbers[j]\n                minIndex = j\n            }\n        }\n        index = minIndex\n        triangularNumbers[i] = min\n    }\n    return index\n}","language":"swift"}
{"task_id":"MBSWP\/740","completion":"    let dict = {}\n    for _, i in test_tup.enumerate() {\n        if dict.contains_key(i) {\n            dict[i] += 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n}","language":"swift"}
{"task_id":"MBSWP\/741","completion":"    let firstCharacter = s[0]\n    let isSame = true\n    for (let i = 1; i < s.length; i++) {\n        if (firstCharacter != s[i]) {\n            isSame = false\n            break\n        }\n    }\n    return isSame\n}","language":"swift"}
{"task_id":"MBSWP\/742","completion":"    return (1.0 \/ 6.0) * (side * side)\n}","language":"swift"}
{"task_id":"MBSWP\/743","completion":"    if m == 0 {\n        return list1\n    }\n    if n == 0 {\n        return list1\n    }\n    if n > m {\n        return list1\n    }\n    let list2 = []\n    for i in list1 {\n        list2.append(list1[i])\n    }\n    for i in range(n - m) {\n        list2.append(list2.shift())\n    }\n    return list2\n}","language":"swift"}
{"task_id":"MBSWP\/745","completion":"    var result = []\n    for i in (startnum..endnum) {\n        for j in (i..endnum) {\n            for k in (j..endnum) {\n                if (i % j == 0 && j % k == 0) {\n                    result.append(i)\n                }\n            }\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/746","completion":"    if (r < 0 || a < 0) {\n        return \"none\"\n    }\n    var area = (2 * Math.PI * r * a) \/ 360\n    return area\n}","language":"swift"}
{"task_id":"MBSWP\/747","completion":"    var dp = [Int][Int]\n    var dp[i][j] = 0\n    for (i = 0; i < m; i++) {\n        for (j = 0; j < n; j++) {\n            if (X[i] == Y[j] && Y[j] == Z[i]) {\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            } else {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[m][n]\n}","language":"swift"}
{"task_id":"MBSWP\/748","completion":"    return str1.replace(\/([A-Z])([a-z])\/g, \"$1 $2\")\n}","language":"swift"}
{"task_id":"MBSWP\/749","completion":"    var nums = []\n    for (var i in nums_str) {\n        nums.append(parseInt(nums_str[i]))\n    }\n    nums.sort()\n    return nums\n}","language":"swift"}
{"task_id":"MBSWP\/751","completion":"    if (i >= arr.length) {\n        return true\n    }\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if (left < arr.length && arr[i] > arr[left]) {\n        return false\n    }\n    if (right < arr.length && arr[i] > arr[right]) {\n        return false\n    }\n    return checkMinHeap(arr, left) && checkMinHeap(arr, right)\n}","language":"swift"}
{"task_id":"MBSWP\/752","completion":"    var j = 1\n    var i = 1\n    while i < n {\n        j = j * (i + 1)\n        i = i + 1\n    }\n    return j\n}","language":"swift"}
{"task_id":"MBSWP\/753","completion":"    var result = []\n    var i = 0\n    var j = 0\n    var min = test_list[0][1]\n    while (i < test_list.length && j < K) {\n        if (test_list[i][1] < min) {\n            min = test_list[i][1]\n            result.clear()\n            result.push(test_list[i])\n        } else if (test_list[i][1] == min) {\n            result.push(test_list[i])\n        }\n        i = i + 1\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/754","completion":"    var result = []\n    for _, i1 in enumerate(l1) {\n        for _, i2 in enumerate(l2) {\n            for _, i3 in enumerate(l3) {\n                if i1 == i2 && i2 == i3 {\n                    result.append(i1)\n                }\n            }\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/755","completion":"    var sorted = numbers.sort()\n    if (sorted.count < 2) {\n        return \"none\"\n    }\n    return sorted[1]\n}","language":"swift"}
{"task_id":"MBSWP\/757","completion":"    var count = 0\n    for _, s in test_list.groupBy {\n        if (s.reverse) {\n            count += 1\n        }\n    }\n    return count.toString()\n}","language":"swift"}
{"task_id":"MBSWP\/758","completion":"    var dict = {}\n    var result = []\n    for _, v in pairs(list1) {\n        if v not in dict {\n            dict[v] = 0\n        }\n        dict[v] += 1\n    }\n    for k, v in pairs(dict) {\n        result.append([k, v])\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/761","completion":"    if (a < 0) {\n        return \"none\"\n    }\n    if (d == 0) {\n        return 0\n    }\n    if (d == 1) {\n        return 1\n    }\n    if (d == 2) {\n        return 1.5707963267948966\n    }\n    if (d == 3) {\n        return 2.3561944901923449\n    }\n    if (d == 4) {\n        return 4.71238898038469\n    }\n    if (d == 5) {\n        return 9.424777960769379\n    }\n    if (d == 6) {\n        return 19.22705319148936\n    }\n    if (d == 7) {\n        return 38.51851851851852\n    }\n    if (d == 8) {\n","language":"swift"}
{"task_id":"MBSWP\/763","completion":"    var minDiff = 0\n    var i = 0\n    var j = 1\n    while (i < n - 1) {\n        while (j < n) {\n            minDiff = min(minDiff, arr[i] - arr[j])\n            j++\n        }\n        i++\n        j = i + 1\n    }\n    return minDiff\n}","language":"swift"}
{"task_id":"MBSWP\/764","completion":"    var count = 0\n    for(i in str) {\n        if(str[i].isnumeric()) {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/766","completion":"    var result = []\n    var i = 0\n    var j = 1\n    while (i < l1.count - 1) {\n        result.append([l1[i], l1[j]])\n        i = i + 1\n        j = j + 1\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/769","completion":"    var diff = []\n    for i in li1 {\n        if (i not in li2) {\n            diff.append(i)\n        }\n    }\n    for i in li2 {\n        if (i not in li1) {\n            diff.append(i)\n        }\n    }\n    return diff\n}","language":"swift"}
{"task_id":"MBSWP\/772","completion":"    var words = test_str.split(\" \")\n    var result = \"\"\n    for (var i = 0; i < words.length; i++) {\n        if (words[i].length != K) {\n            result += words[i] + \" \"\n        }\n    }\n    return result.trim()\n}","language":"swift"}
{"task_id":"MBSWP\/773","completion":"    var occurance = []\n    var start = 0\n    var index = 0\n    while (index < text.length) {\n        if (text[index] == pattern[start]) {\n            if (start == pattern.length - 1) {\n                occurance.push(index)\n                index++\n                start = 0\n            } else {\n                start++\n            }\n        } else {\n            index++\n            start = 0\n        }\n    }\n    return occurance\n}","language":"swift"}
{"task_id":"MBSWP\/776","completion":"    var vowels = \"aeiou\"\n    var count = 0\n    for (var i = 0; i < test_str.length; i++) {\n        if (vowels.indexOf(test_str[i]) != -1 && vowels.indexOf(test_str[i + 1]) != -1) {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/777","completion":"    var sum = 0\n    var set = Set()\n    for (i in arr) {\n        if (set.contains(arr[i])) {\n            continue\n        }\n        sum += arr[i]\n        set.add(arr[i])\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/778","completion":"    var result = [[AnyHashable]]\n    var current = [AnyHashable]\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] == current[0]) {\n            current.push(list1[i])\n        } else {\n            current = [list1[i]]\n            result.append(current)\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/779","completion":"    let dict = {}\n    for _, value in list1 {\n        if value in dict {\n            dict[value] += 1\n        } else {\n            dict[value] = 1\n        }\n    }\n    let result = []\n    for key, value in dict {\n        result.append([key, value])\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/780","completion":"    var result = []\n    var temp = []\n    var temp_sum = 0\n    var temp_list = []\n    for _, v in test_list {\n        if temp.length == 0 {\n            temp.push(v)\n            temp_sum += v\n            temp_list.push(v)\n        } else {\n            if temp_sum == v {\n                result.append(temp_list)\n                temp = []\n                temp_sum = 0\n                temp_list = []\n            } else {\n                temp.push(v)\n                temp_sum += v\n                temp_list.push(v)\n            }\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/782","completion":"    var sum = 0\n    var length = 0\n    for i in arr {\n        if length % 2 == 1 {\n            sum += arr[i]\n        }\n        length += 1\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/783","completion":"    let max = Math.max(r, g, b)\n    let min = Math.min(r, g, b)\n    let h = 0\n    let s = 0\n    let v = max\n\n    let d = max - min\n    s = max == 0 ? 0 : d \/ max\n    if (max == min) {\n        h = 0\n    } else if (max == r) {\n        h = (g - b) \/ d + (g < b ? 6 : 0)\n    } else if (max == g) {\n        h = (b - r) \/ d + 2\n    } else if (max == b) {\n        h = (r - g) \/ d + 4\n    }\n\n    h = h * 60\n    if (h < 0) {\n        h = h + 360\n","language":"swift"}
{"task_id":"MBSWP\/784","completion":"    var even = 0\n    var odd = 1\n    for _, i in enumerate(list1) {\n        if (i % 2 == 0) {\n            even *= i\n        } else {\n            odd *= i\n        }\n    }\n    return even * odd\n}","language":"swift"}
{"task_id":"MBSWP\/785","completion":"    let arr = test_str.split(\", \").map { it.to_i }\n    return arr\n}","language":"swift"}
{"task_id":"MBSWP\/790","completion":"    for (index, num) in nums.enumerate() {\n        if (index % 2 == 0 && num % 2 == 0) {\n            return true\n        }\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/791","completion":"    let result = [] as [Int]\n    for _, v in test_tup {\n        if _ == 0 {\n            result = v\n        } else {\n            result = [v].concat(removeNested(v))\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/794","completion":"    var a = text.indexOf(\"a\")\n    if a == -1 {\n        return \"Not matched!\"\n    }\n    var b = text.indexOf(\"b\", a + 1)\n    if b == -1 {\n        return \"Not matched!\"\n    }\n    return \"Found a match!\"\n}","language":"swift"}
{"task_id":"MBSWP\/795","completion":"    let heap = [] as [Int, [String: AnyHashable]]\n    for item in items {\n        heap.push(item.price, item)\n    }\n    heap.sort()\n    let result = []\n    for i in 0..n {\n        result.append(heap.pop())\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/800","completion":"    return text.replace(\/\\s\/g, \"\")\n}","language":"swift"}
{"task_id":"MBSWP\/805","completion":"    var maxSum = 0\n    var maxSumList = nil\n    for list in lists {\n        var sum = 0\n        for i in list {\n            sum += i\n        }\n        if sum > maxSum {\n            maxSum = sum\n            maxSumList = list\n        }\n    }\n    return maxSumList\n}","language":"swift"}
{"task_id":"MBSWP\/806","completion":"    var count = 0\n    var max = 0\n    for (var i = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            count += 1\n        } else {\n            count = 0\n        }\n        if (count > max) {\n            max = count\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/812","completion":"    let words = street.split(\" \")\n    let result = \"\"\n    for (let i = 0; i < words.length; i++) {\n        if (words[i] == \"road\") {\n            result += \"rd.\"\n        } else {\n            result += words[i] + \" \"\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/815","completion":"    var i : Int = 0\n    var j : Int = n - 1\n    var k : Int = 0\n    var temp : Int = 0\n    var arr : [Int] = arr.copy()\n    while (i < j) {\n        if (arr[i] == 0) {\n            temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            i += 1\n            j -= 1\n        } else if (arr[i] == 1) {\n            i += 1\n        } else if (arr[i] == 2) {\n            temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            j -= 1\n        }\n    }\n    return arr\n}","language":"swift"}
{"task_id":"MBSWP\/817","completion":"    return nums.filter(n => n % m == 0 || n % n == 0)\n}","language":"swift"}
{"task_id":"MBSWP\/819","completion":"    let map = {}\n    let result = []\n    for _, item in lists.enumerate() {\n        if item in map {\n            map[item] += 1\n        } else {\n            map[item] = 1\n        }\n    }\n    for _, item in lists.enumerate() {\n        if map[item] > 1 {\n            result.append([item])\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/823","completion":"    if (string.match(\"^\" + sample + \".*\")) {\n        return \"string starts with the given substring\";\n    } else {\n        return \"string doesnt start with the given substring\";\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/824","completion":"    let newList = []\n    for (i in l) {\n        if (l[i] % 2 == 0) {\n            newList.append(l[i])\n        }\n    }\n    return newList\n}","language":"swift"}
{"task_id":"MBSWP\/828","completion":"    var alpha = 0\n    var dig = 0\n    var spl = 0\n    for (var i = 0; i < string.length; i++) {\n        if (string[i].isAlpha()) {\n            alpha += 1\n        }\n        if (string[i].isDigit()) {\n            dig += 1\n        }\n        if (string[i].isSpecial()) {\n            spl += 1\n        }\n    }\n    return [alpha, dig, spl]\n}","language":"swift"}
{"task_id":"MBSWP\/829","completion":"    var map = {}\n    var max = 0\n    var secondMax = \"\"\n    for (var i = 0; i < input.length; i++) {\n        if (map[input[i]] == null) {\n            map[input[i]] = 1\n        } else {\n            map[input[i]] = map[input[i]] + 1\n        }\n        if (map[input[i]] > max) {\n            secondMax = max\n            max = map[input[i]]\n        } else if (map[input[i]] > secondMax) {\n            secondMax = map[input[i]]\n        }\n    }\n    return secondMax\n}","language":"swift"}
{"task_id":"MBSWP\/830","completion":"    var result = a * (Math.pow(10, digits))\n    var result = Math.ceil(result)\n    return result \/ (Math.pow(10, digits))\n}","language":"swift"}
{"task_id":"MBSWP\/831","completion":"    var count = 0\n    for i in arr {\n        for j in arr {\n            if i == j {\n                count += 1\n            }\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/832","completion":"    var regex = \/(\\d+)\/g\n    var matches = input.match(regex)\n    var max = 0\n    for (var match in matches) {\n        if (matches[match] > max) {\n            max = matches[match]\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/833","completion":"    var keys = []\n    for (var key in dict) {\n        keys.append(key)\n    }\n    return keys\n}","language":"swift"}
{"task_id":"MBSWP\/834","completion":"    let matrix = [[1]]\n    let row = 0\n    let col = 0\n    let direction = 'right'\n    let num = 1\n    let nextNum = 2\n    while (num <= n * n) {\n        if (direction == 'right') {\n            while (col < n - 1) {\n                matrix[row][col] = num\n                num += 1\n                col += 1\n            }\n            col = 0\n            row += 1\n            direction = 'down'\n        } else if (direction == 'down') {\n            while (row < n - 1) {\n                matrix[row][col] = num\n                num += 1\n                row += 1\n            }\n            row = 0\n            col += 1\n            direction = 'left'\n        } else if (direction == 'left') {\n            while (","language":"swift"}
{"task_id":"MBSWP\/838","completion":"    var count : Int = 0\n    var i : Int\n    var j : Int\n    var temp : String\n\n    for i = 0; i < s1.length; i++ {\n        if (s1[i] != s2[i]) {\n            count++\n            temp = s1[i]\n            s1[i] = s2[i]\n            s2[i] = temp\n        }\n    }\n\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/839","completion":"    return tup.sort { |a, b| a.first <=> b.first }\n}","language":"swift"}
{"task_id":"MBSWP\/842","completion":"    var count = 0\n    var result = 0\n    for (i <- 0 until arr_size) {\n        count = 0\n        for (j <- 0 until arr_size) {\n            if (arr[i] == arr[j]) {\n                count += 1\n            }\n        }\n        if (count % 2 == 1) {\n            result = arr[i]\n            break\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/843","completion":"    let q = new PriorityQueue<Int>()\n    let ugly = 1\n    for (let p of primes) {\n        q.enqueue(p)\n    }\n    while (n > 1) {\n        ugly = q.dequeue() * ugly\n        q.enqueue(ugly)\n        n -= 1\n    }\n    return ugly\n}","language":"swift"}
{"task_id":"MBSWP\/845","completion":"    var digits = 0\n    var factorial = 1\n    while (n > 0) {\n        factorial *= n\n        n -= 1\n    }\n    while (factorial > 0) {\n        digits += factorial % 10\n        factorial \/= 10\n    }\n    return digits\n}","language":"swift"}
{"task_id":"MBSWP\/849","completion":"    var sum = 0\n    var i = 1\n    while (i <= N) {\n        if (N % i == 0) {\n            sum += i\n        }\n        i += 1\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/851","completion":"    var sum = 0\n    var i = 1\n    var n = N\n    while (n > 0) {\n        if (n % i == 0) {\n            sum += 1 \/ i\n        }\n        i += 1\n    }\n    return Sum + sum\n}","language":"swift"}
{"task_id":"MBSWP\/852","completion":"    var result = []\n    for(var i = 0; i < num_list.length; i++) {\n        if(num_list[i] >= 0) {\n            result.append(num_list[i])\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/854","completion":"    let heap = rawheap.slice()\n    let len = heap.length\n    let i = len \/ 2 - 1\n    while (i >= 0) {\n        heapify(heap, len, i)\n        i--\n    }\n    return heap\n}","language":"swift"}
{"task_id":"MBSWP\/856","completion":"    var swaps = 0\n    var i = 0\n    var j = 0\n    while (i < n - 1) {\n        if (arr[i] == 0) {\n            i += 1\n        } else {\n            j = i + 1\n            while (j < n && arr[j] == 1) {\n                j += 1\n            }\n            if (j == n) {\n                break\n            }\n            if (arr[j] == 0) {\n                arr[i] = 0\n                arr[j] = 1\n                swaps += 1\n                i = j\n            } else {\n                i += 1\n            }\n        }\n    }\n    return swaps\n}","language":"swift"}
{"task_id":"MBSWP\/857","completion":"    return list1.map { |s| [s, s] }\n}","language":"swift"}
{"task_id":"MBSWP\/859","completion":"    let result = []\n    for i in my_list {\n        result = result + [my_list.slice(0, i), my_list.slice(i)]\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/860","completion":"    if (string.length == 0) {\n        return \"Discard\";\n    }\n    if (string.match(\/^[a-zA-Z0-9]*$\/)) {\n        return \"Accept\";\n    } else {\n        return \"Discard\";\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/861","completion":"    var result = []\n    texts.forEach {\n        var sorted = str.sorted()\n        if (sorted.length == str.length) {\n            if (sorted == str) {\n                result.append(str)\n            }\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/862","completion":"    let words = text.split(\" \")\n    let counts = {}\n    for (let word of words) {\n        if (counts[word]) {\n            counts[word] = counts[word] + 1\n        } else {\n            counts[word] = 1\n        }\n    }\n    let result = []\n    for (let key in counts) {\n        if (counts[key] > n) {\n            result.push([key, counts[key]])\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/863","completion":"    var dp = Array(n).fill(1)\n    var max = 1\n    for (var i = 1; i < n; i++) {\n        for (var j = 0; j < i; j++) {\n            if (arr[i] - arr[j] == 1) {\n                dp[i] = Math.max(dp[i], dp[j] + 1)\n            }\n        }\n        max = Math.max(max, dp[i])\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/864","completion":"    return texts.filter(text => {\n        return text == text.reverse()\n    })\n}","language":"swift"}
{"task_id":"MBSWP\/865","completion":"    return nums.map { _ -> _ * n }\n}","language":"swift"}
{"task_id":"MBSWP\/867","completion":"    var sum = 0\n    for i in arr {\n        sum += i\n    }\n    if (sum % 2 == 0) {\n        return sum \/ 2\n    } else {\n        return sum \/ 2 + 1\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/868","completion":"    var lastWord = a.lastIndexOf(\" \")\n    if let lastWord = a.lastIndexOf(\" \", lastWord - 1) {\n        lastWord = lastWord - 1\n    }\n    return lastWord\n}","language":"swift"}
{"task_id":"MBSWP\/869","completion":"    var newList = []\n    for (i in list1) {\n        if (list1[i].length >= leftrange && list1[i].length <= rigthrange) {\n            newList.append(list1[i])\n        }\n    }\n    return newList\n}","language":"swift"}
{"task_id":"MBSWP\/870","completion":"    return nums.filter(x => x > 0).reduce((a, b) => a + b, 0)\n}","language":"swift"}
{"task_id":"MBSWP\/871","completion":"    var length = string1.length\n    if (length != string2.length) return false\n    var s1 = string1.split(\"\").reverse().join(\"\")\n    var s2 = string2.split(\"\").reverse().join(\"\")\n    return s1 == s2\n}","language":"swift"}
{"task_id":"MBSWP\/873","completion":"    if (n <= 1) {\n        return n\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2)\n}","language":"swift"}
{"task_id":"MBSWP\/875","completion":"    var min = 0\n    for _, _, _ in test_list {\n        var diff = test_list.map { (a, b) -> a - b }.min()\n        min = min if min < diff else diff\n    }\n    return min\n}","language":"swift"}
{"task_id":"MBSWP\/876","completion":"    var gcd = gcd(x, y)\n    return (x * y) \/ gcd\n}","language":"swift"}
{"task_id":"MBSWP\/877","completion":"    var result = \"\"\n    var count = 0\n    for (var i = 0; i < str.length; i++) {\n        if (str[i] == str[i + 1]) {\n            count += 1\n        } else {\n            result += str[i] + count\n            count = 1\n        }\n    }\n    result += str[str.length - 1] + count\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/878","completion":"    let result = true\n    for (i <- 0 until test_tuple.size) {\n        if (test_tuple[i] == K[i]) {\n            result = true\n        } else {\n            result = false\n            break\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/879","completion":"    var regex = \/a.*b\/\n    if (regex.test(text)) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/881","completion":"    var even = 0\n    var odd = 0\n    for (i in list1) {\n        if (list1[i] % 2 == 0) {\n            even += list1[i]\n        } else {\n            odd += list1[i]\n        }\n    }\n    return even + odd\n}","language":"swift"}
{"task_id":"MBSWP\/885","completion":"    var dict1 = {}\n    var dict2 = {}\n    for (var i = 0; i < str1.length; i++) {\n        if (dict1[str1[i]] == undefined) {\n            dict1[str1[i]] = str2[i]\n        } else if (dict1[str1[i]] != str2[i]) {\n            return false\n        }\n        if (dict2[str2[i]] == undefined) {\n            dict2[str2[i]] = str1[i]\n        } else if (dict2[str2[i]] != str1[i]) {\n            return false\n        }\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/886","completion":"    var sum = 0.0\n    for (var i in numbers) {\n        sum += numbers[i]\n    }\n    return sum \/ numbers.length\n}","language":"swift"}
{"task_id":"MBSWP\/888","completion":"    let result = []\n    for {\n        let temp = []\n        for {\n            let temp2 = []\n            for {\n                let temp3 = []\n                for {\n                    let temp4 = []\n                    for {\n                        let temp5 = []\n                        for {\n                            let temp6 = []\n                            for {\n                                let temp7 = []\n                                for {\n                                    let temp8 = []\n                                    for {\n                                        let temp9 = []\n                                        for {\n                                            let temp10 = []\n                                            for {\n                                                let temp11 = []\n                                                for {\n                                                    let temp12 = []\n                                                    for {\n                                                        let temp13 = []\n                                                        for {\n                                                            let temp14 = []\n                                                            for {\n                                                                let temp","language":"swift"}
{"task_id":"MBSWP\/889","completion":"    var reversed = []\n    for list in lists {\n        reversed = [list.last].concat(reversed)\n    }\n    return reversed\n}","language":"swift"}
{"task_id":"MBSWP\/892","completion":"    return text.replace(\/ {2,}\/g, \" \")\n}","language":"swift"}
{"task_id":"MBSWP\/893","completion":"    var result = []\n    for lst_ in lst {\n        result.append(lst_.last)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/894","completion":"    var arr = test_str.split(\", \")\n    var result = []\n    for (i in arr) {\n        result.append(Double(arr[i]))\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/895","completion":"    var dp = [0] * (A.length + 1)\n    dp[0] = 0\n    for (var i = 1; i <= A.length; i++) {\n        dp[i] = dp[i - 1] + A[i - 1]\n        for (var j = i - 2; j >= 0; j--) {\n            if (dp[j] < dp[i]) {\n                dp[i] = dp[j]\n            }\n        }\n    }\n    return dp[A.length]\n}","language":"swift"}
{"task_id":"MBSWP\/896","completion":"    return tuples.sort { (a, b) -> a[1] < b[1] }\n}","language":"swift"}
{"task_id":"MBSWP\/897","completion":"    var index = sentence.indexOf(word)\n    return index != -1\n}","language":"swift"}
{"task_id":"MBSWP\/898","completion":"    var result = []\n    var i = 0\n    while (i < n) {\n        result.append(numbers[i])\n        i += 1\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/900","completion":"    var num = 5\n    var regex = \/(\\d{1,2})-(\\d{1,2})\/\n    var match = regex.exec(string)\n    if (match != null) {\n        var start = match[1]\n        var end = match[2]\n        if (start == num || end == num) {\n            return true\n        }\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/901","completion":"    var i = 1\n    var result = 1\n    while (i <= n) {\n        result = result * i\n        i = i + 1\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/902","completion":"    var result = []\n    for (var i in d1) {\n        if (d2.hasOwnProperty(i)) {\n            result.push(d1[i] + d2[i])\n        } else {\n            result.push(d1[i])\n        }\n    }\n    for (var i in d2) {\n        if (!d1.hasOwnProperty(i)) {\n            result.push(d2[i])\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/903","completion":"    var bits = 0\n    for i in 0..n {\n        bits += (n & 1)\n        n >>= 1\n    }\n    return bits\n}","language":"swift"}
{"task_id":"MBSWP\/905","completion":"    var binomialCoeffs = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\n    var sum = 0\n    for i in 0..n {\n        sum += binomialCoeffs[i] * binomialCoeffs[i]\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/906","completion":"    var regex = \/(\\d{4})\\\/(\\d{2})\\\/(\\d{2})\/\n    var match = regex.exec(url)\n    if match == nil {\n        return nil\n    }\n    return match.map { (year, month, date) -> [year, month, date] }\n}","language":"swift"}
{"task_id":"MBSWP\/907","completion":"    var luckyNumbers = []\n    for (var i = 1; i <= n; i++) {\n        if (i % 3 == 0 && i % 5 == 0) {\n            luckyNumbers.append(i)\n        } else if (i % 3 == 0) {\n            luckyNumbers.append(i)\n        } else if (i % 5 == 0) {\n            luckyNumbers.append(i)\n        }\n    }\n    return luckyNumbers\n}","language":"swift"}
{"task_id":"MBSWP\/909","completion":"    var rev = 0\n    var temp = num\n    while(num > 0) {\n        rev = rev * 10 + num % 10\n        num = num \/ 10\n    }\n    return rev == temp ? 0 : rev\n}","language":"swift"}
{"task_id":"MBSWP\/910","completion":"    let date = Date(y, m, d)\n    let current = Date()\n    return date > current\n}","language":"swift"}
{"task_id":"MBSWP\/911","completion":"    let maxHeap = new MaxHeap(nums)\n    let max = maxHeap.extractMax()\n    let min = maxHeap.extractMax()\n    let maxProduct = max * min\n    while (maxHeap.size() > 0) {\n        let temp = maxHeap.extractMax()\n        maxProduct = Math.max(maxProduct, temp * min)\n        min = Math.min(min, temp)\n        maxHeap.insert(temp)\n    }\n    return maxProduct\n}","language":"swift"}
{"task_id":"MBSWP\/912","completion":"    var lobb = 0\n    var i = 1\n    while (i <= n) {\n        lobb += i\n        i *= m\n    }\n    return lobb\n}","language":"swift"}
{"task_id":"MBSWP\/915","completion":"    return array_nums.filter(x => x >= 0).concat(array_nums.filter(x => x < 0))\n}","language":"swift"}
{"task_id":"MBSWP\/916","completion":"    var arr = []\n    var i = 0\n    var j = 0\n    var k = 0\n    while (i < arr_size) {\n        while (j < arr_size) {\n            while (k < arr_size) {\n                if (A[i] + A[j] + A[k] == sum) {\n                    arr.append(A[i])\n                    arr.append(A[j])\n                    arr.append(A[k])\n                    return arr\n                }\n                k++\n            }\n            j++\n        }\n        i++\n    }\n    return arr\n}","language":"swift"}
{"task_id":"MBSWP\/918","completion":"    \/\/ Your code here\n}","language":"swift"}
{"task_id":"MBSWP\/920","completion":"    var result = []\n    for (var i in test_list) {\n        if (test_list[i].length == 2) {\n            result.append(test_list[i])\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/921","completion":"    let result = []\n    let temp = []\n    for (let i = 0; i < test_tup.length; i++) {\n        if (temp.length < N) {\n            temp.push(test_tup[i])\n        } else {\n            result.push(temp)\n            temp = [test_tup[i]]\n        }\n    }\n    if (temp.length > 0) {\n        result.push(temp)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/923","completion":"    var i : Int = 0\n    var j : Int = 0\n    var k : Int = 0\n    var l : Int = 0\n    var count : Int = 0\n    while (i < m && j < n) {\n        if (X[i] == Y[j]) {\n            count += 1\n            i += 1\n            j += 1\n        } else if (count > 0) {\n            count -= 1\n            i += 1\n        } else {\n            if (l == 0) {\n                l = j - i\n            }\n            i += 1\n        }\n    }\n    return l\n}","language":"swift"}
{"task_id":"MBSWP\/926","completion":"    var result = 1\n    var i = 1\n    while (i <= m) {\n        result = result * n\n        i = i + 1\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/928","completion":"    var date = dt.split(\"-\")\n    var day = date[2]\n    var month = date[1]\n    var year = date[0]\n    var newDate = day + \"-\" + month + \"-\" + year\n    return newDate\n}","language":"swift"}
{"task_id":"MBSWP\/930","completion":"    var regex = \/a(.*)b\/\n    if (regex.test(text)) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/932","completion":"    let unique = []\n    for (let i = 0; i < l.length; i++) {\n        if (unique.indexOf(l[i]) == -1) {\n            unique.push(l[i])\n        }\n    }\n    return unique\n}","language":"swift"}
{"task_id":"MBSWP\/933","completion":"    return text.replace(\/([a-z])([A-Z])\/g, \"$1_$2\").replace(\/([A-Z])([A-Z])(?=[a-z])\/g, \"$1_$2\").toLowerCase()\n}","language":"swift"}
{"task_id":"MBSWP\/934","completion":"    var delannoy = 1\n    var i = 1\n    var j = 1\n    var k = 1\n    while (i < n) {\n        delannoy = delannoy * (i + 1)\n        i = i + 1\n    }\n    while (j < m) {\n        delannoy = delannoy * (j + 1)\n        j = j + 1\n    }\n    while (k < n) {\n        delannoy = delannoy * (k + 1)\n        k = k + 1\n    }\n    return delannoy\n}","language":"swift"}
{"task_id":"MBSWP\/936","completion":"    var res = []\n    for (var i = 0; i < ord_list.length; i++) {\n        for (var j = 0; j < test_list.length; j++) {\n            if (test_list[j][0] == ord_list[i]) {\n                res.push(test_list[j])\n                test_list.splice(j, 1)\n                break\n            }\n        }\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/937","completion":"    var dict = {}\n    for (var i = 0; i < str1.length; i++) {\n        if (dict[str1[i]]) {\n            dict[str1[i]] += 1\n        } else {\n            dict[str1[i]] = 1\n        }\n    }\n    var max = 0\n    var maxChar = \"\"\n    for (var key in dict) {\n        if (dict[key] > max) {\n            max = dict[key]\n            maxChar = key\n        }\n    }\n    return maxChar\n}","language":"swift"}
{"task_id":"MBSWP\/938","completion":"    var a = A.slice(0, p)\n    var b = B.slice(0, q)\n    var c = C.slice(0, r)\n    var d = []\n    var e = []\n    var f = []\n    var g = []\n    var h = []\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var A = 0\n    var B = 0\n    var C = 0\n    var D = ","language":"swift"}
{"task_id":"MBSWP\/939","completion":"    return models.sort(\n        {\n            (a, b) -> {\n                if (a[\"make\"] < b[\"make\"]) {\n                    return -1\n                } else if (a[\"make\"] > b[\"make\"]) {\n                    return 1\n                } else {\n                    if (a[\"model\"] < b[\"model\"]) {\n                        return -1\n                    } else if (a[\"model\"] > b[\"model\"]) {\n                        return 1\n                    } else {\n                        if (a[\"color\"] < b[\"color\"]) {\n                            return -1\n                        } else if (a[\"color\"] > b[\"color\"]) {\n                            return 1\n                        } else {\n                            return 0\n                        }\n                    }\n                }\n            }\n        }\n    )\n}","language":"swift"}
{"task_id":"MBSWP\/940","completion":"    \/\/ Your code here\n}","language":"swift"}
{"task_id":"MBSWP\/941","completion":"    var count = 0\n    for i in num {\n        if isinstance(i, (Int, Double, Bool)) {\n            count += 1\n        } else if isinstance(i, (List, Tuple)) {\n            count += countElim(i)\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/943","completion":"    let result = []\n    let heap = new Heap(num1)\n    let heap2 = new Heap(num2)\n    while (heap.size() > 0 && heap2.size() > 0) {\n        if (heap.peek() < heap2.peek()) {\n            result.append(heap.pop())\n        } else {\n            result.append(heap2.pop())\n        }\n    }\n    while (heap.size() > 0) {\n        result.append(heap.pop())\n    }\n    while (heap2.size() > 0) {\n        result.append(heap2.pop())\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/944","completion":"    var position = 0\n    var number = 0\n    var result = \"\"\n    var text = text.split(\" \")\n    for (var i = 0; i < text.length; i++) {\n        if (text[i].match(\/[0-9]\/)) {\n            number = text[i]\n            position = i\n        }\n    }\n    result = \"Number: \" + number + \" Position: \" + position\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/946","completion":"    var map = [:]\n    var count = [0]\n    var max = 0\n    var maxElem = []\n    var i = 0\n    var j = 0\n    while (i < s.length) {\n        if (map[s[i]] == nil) {\n            map[s[i]] = [s[i]]\n            count[i] = 1\n        } else {\n            map[s[i]].append(s[i])\n            count[i] = count[i] + 1\n        }\n        i = i + 1\n    }\n    i = 0\n    while (i < a) {\n        j = 0\n        while (j < count.length) {\n            if (count[j] > max) {\n                max = count[j]\n                maxElem = map[count[j]]\n            }\n            j = j + 1\n        ","language":"swift"}
{"task_id":"MBSWP\/947","completion":"    var min = 0\n    for _, v in pairs(list1) {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}","language":"swift"}
{"task_id":"MBSWP\/948","completion":"    if let item = tup1[index] {\n        return item\n    }\n    return \"None\"\n}","language":"swift"}
{"task_id":"MBSWP\/949","completion":"    var result = \"\"\n    for _, v in test_list.sort { (a, b) -> a.join(\"\").localeCompare(b.join(\"\")) } {\n        result += \"(\" + v.join(\", \") + \"), \"\n    }\n    result = result.slice(0, -2)\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/951","completion":"    var similar_indices = []\n    for i in test_list1 {\n        for j in test_list2 {\n            if i[0] == j[0] && i[1] == j[1] {\n                similar_indices.append([i, j])\n            }\n        }\n    }\n    similar_indices.sort((a, b) => a[0][0] - b[0][0])\n    return similar_indices.slice(0, 2)\n}","language":"swift"}
{"task_id":"MBSWP\/952","completion":"    let ncr = 1\n    for (i = 1; i <= r; i++) {\n        ncr = ncr * (n - i + 1) \/ i\n    }\n    return ncr % p\n}","language":"swift"}
{"task_id":"MBSWP\/953","completion":"    if (n == 0) {\n        return 0\n    }\n    if (n == 1) {\n        return 1\n    }\n    if (ar.count(ar[0]) == 1) {\n        return 1 + subset(ar.slice(1), n - 1)\n    }\n    return subset(ar.slice(1), n - 1)\n}","language":"swift"}
{"task_id":"MBSWP\/956","completion":"    return text.split(\/(?=[A-Z])\/)\n}","language":"swift"}
{"task_id":"MBSWP\/957","completion":"    var pos = 0\n    var mask = 1\n    while (mask < n) {\n        mask = mask << 1\n        pos++\n    }\n    return pos\n}","language":"swift"}
{"task_id":"MBSWP\/959","completion":"    var sum = 0\n    for _, i in lst {\n        sum += i\n    }\n    return sum \/ lst.count\n}","language":"swift"}
{"task_id":"MBSWP\/960","completion":"    var ways = 0\n    for (var i = 1; i <= n; i++) {\n        ways = ways + (n - i + 1) * i \/ 2\n    }\n    return ways\n}","language":"swift"}
{"task_id":"MBSWP\/961","completion":"    var roman = {\n        \"I\" : 1,\n        \"V\" : 5,\n        \"X\" : 10,\n        \"L\" : 50,\n        \"C\" : 100,\n        \"D\" : 500,\n        \"M\" : 1000\n    }\n    var result = 0\n    for (var i = 0; i < s.length; i++) {\n        if (i < s.length - 1 && roman[s[i]] < roman[s[i + 1]]) {\n            result -= roman[s[i]]\n        } else {\n            result += roman[s[i]]\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/963","completion":"    var discriminant = (x * y) - (z * z);\n    if (discriminant > 0) {\n        return [\"Two solutions\", discriminant];\n    } else if (discriminant == 0) {\n        return [\"one solution\", 0];\n    } else {\n        return [\"no real solution\", -discriminant];\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/965","completion":"    let result = \"\"\n    let index = 0\n    while (index < text.length) {\n        if (text[index] == '_') {\n            index += 1\n            result += '_'\n        } else if (text[index] == ' ') {\n            index += 1\n            result += '_'\n        } else {\n            result += text[index]\n            index += 1\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/966","completion":"    var tuple2 = []\n    for _, v in tuple1 {\n        if (v.count == 0) {\n            tuple2.append(v)\n        }\n    }\n    return tuple2\n}","language":"swift"}
{"task_id":"MBSWP\/967","completion":"    var vowels = \"aeiou\"\n    var result = \"not accepted\"\n    for (let i = 0; i < string.length; i++) {\n        if (vowels.indexOf(string[i]) != -1) {\n            result = \"accepted\"\n            break\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/969","completion":"    var result = []\n    for (i, v) in test_list {\n        if (result.count(v) == 0) {\n            result.append(v)\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/971","completion":"    var max = 0\n    var count = 0\n    for (var i = 0; i < n; i++) {\n        if (i + a <= n) {\n            count += 1\n        }\n        if (i + b <= n) {\n            count += 1\n        }\n        if (i + c <= n) {\n            count += 1\n        }\n        if (count > max) {\n            max = count\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/973","completion":"    var result = \"\"\n    for (i <- d; i < s.length; i++) {\n        result += s[i]\n    }\n    for (i <- d; i < s.length; i++) {\n        result += s[i]\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/974","completion":"    let dp = [0] * (A.length + 1)\n    dp[0] = A[0][0]\n    for (let i = 1; i <= A.length; i++) {\n        dp[i] = dp[i - 1] + A[i - 1][0]\n        for (let j = 1; j < i; j++) {\n            dp[i] = Math.min(dp[i], dp[j - 1] + A[i - 1][j])\n        }\n    }\n    return dp[A.length]\n}","language":"swift"}
