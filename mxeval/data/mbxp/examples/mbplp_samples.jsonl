{"task_id":"MBPLP\/17","completion":"    return $a * 4;\n}","language":"perl"}
{"task_id":"MBPLP\/22","completion":"    my $seen = 0;\n    my $index = 0;\n    for my $num (@$nums) {\n        if ($seen == $num) {\n            return $index;\n        }\n        $seen = $num;\n        $index++;\n    }\n    return -1;\n}","language":"perl"}
{"task_id":"MBPLP\/32","completion":"    my ($max) = 0;\n    my ($i) = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $max = $i;\n            $n = $n \/ $i;\n        } else {\n            $i = $i + 1;\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/44","completion":"    my $match = $text =~ s\/^(\\w+)\/$1\/;\n    if ($match) {\n        return \"Found a match!\";\n    }\n    return \"Not matched!\";\n}","language":"perl"}
{"task_id":"MBPLP\/51","completion":"    my $is_equilateral = 0;\n\n    if ($x == $y && $y == $z) {\n        $is_equilateral = 1;\n    }\n\n    return $is_equilateral;\n}","language":"perl"}
{"task_id":"MBPLP\/52","completion":"    return $b * $h;\n}","language":"perl"}
{"task_id":"MBPLP\/66","completion":"    my ($pos, $count) = 0;\n    foreach my $item (@$list) {\n        if ($item > 0) {\n            $pos++;\n        }\n    }\n    return $pos;\n}","language":"perl"}
{"task_id":"MBPLP\/79","completion":"    my ($len) = length($s);\n    return $len % 2 ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/82","completion":"    return 4 \/ 3 * 3.141592653589793 * $r * $r * $r;\n}","language":"perl"}
{"task_id":"MBPLP\/85","completion":"    my $area = 4 * 3.141592653589793 * $r * $r;\n    return $area;\n}","language":"perl"}
{"task_id":"MBPLP\/89","completion":"    my ($n) = @_;\n    my ($min) = $n;\n    for my $i (1,$N) {\n        if ($n < $min) {\n            $min = $n;\n        }\n        $n = $n - 1;\n    }\n    return $min;\n}","language":"perl"}
{"task_id":"MBPLP\/105","completion":"    my ($cnt) = 0;\n    foreach my $item (@$lst) {\n        if ($item) {\n            ++$cnt;\n        }\n    }\n    return $cnt;\n}","language":"perl"}
{"task_id":"MBPLP\/113","completion":"    my $result = 0;\n    if ($text =~ m\/^[+-]?\\d+$\/) {\n        $result = 1;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/126","completion":"    my $divisors = 0;\n    my $gcd = 0;\n    my $i = 1;\n    while ($i <= $a && $i <= $b) {\n        if ($a % $i == 0 && $b % $i == 0) {\n            $divisors = $divisors + $i;\n        }\n        $i++;\n    }\n    $gcd = $divisors;\n    return $gcd;\n}","language":"perl"}
{"task_id":"MBPLP\/127","completion":"    return $x * $y;\n}","language":"perl"}
{"task_id":"MBPLP\/133","completion":"    my $sum = 0;\n    foreach my $num (@$nums) {\n        if ($num < 0) {\n            $sum = $sum + $num;\n        }\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/134","completion":"    my $last = $arr[0];\n    my $even = 0;\n    for (my $i = 1; $i < $n; $i++) {\n        $last = $arr[$i];\n        if ($even) {\n            $even = 0;\n        } else {\n            $even = 1;\n        }\n    }\n    if ($even) {\n        return \"EVEN\";\n    } else {\n        return \"ODD\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/146","completion":"    my ($ascii1) = 0;\n    for my $char (@_) {\n        $ascii1 = $ascii1 + ord($char);\n    }\n    return $ascii1;\n}","language":"perl"}
{"task_id":"MBPLP\/150","completion":"    my $result = 0;\n    my $temp = $a;\n    while ($temp <= $b) {\n        if ($temp == $c) {\n            $result = 1;\n            break;\n        }\n        $temp++;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/171","completion":"    $a = $a * 5;\n    return $a;\n}","language":"perl"}
{"task_id":"MBPLP\/176","completion":"    return $a + $b + $c;\n}","language":"perl"}
{"task_id":"MBPLP\/178","completion":"    my $result = \"\";\n    foreach my $pattern (@$patterns) {\n        if ($text =~ $pattern) {\n            $result = \"Matched!\";\n            return $result;\n        }\n    }\n    $result = \"Not Matched!\";\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/188","completion":"    my $a = $n \/ 4;\n    my $b = $n \/ 4;\n    if ($a * $a == $n) {\n        return 1;\n    }\n    if ($b * $b == $n) {\n        return 1;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/192","completion":"    return ($str =~ m{^[a-zA-Z]+[0-9]+} ? 1 : 0);\n}","language":"perl"}
{"task_id":"MBPLP\/211","completion":"    my ($count) = 0;\n    my ($x) = $n;\n    while ($x) {\n        if ($x & 1) {\n            ++$count;\n        }\n        $x >>= 1;\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/214","completion":"    return $radian * 180 \/ 3.141592653589793;\n}","language":"perl"}
{"task_id":"MBPLP\/221","completion":"    my ($even) = 0;\n    foreach my $num (@$nums) {\n        if ($even == 0) {\n            if ($num % 2 == 0) {\n                $even = $num;\n            }\n        }\n    }\n    return $even;\n}","language":"perl"}
{"task_id":"MBPLP\/227","completion":"    return ($a < $b ? $a < $c ? $a : $c : $b < $c ? $b : $c);\n}","language":"perl"}
{"task_id":"MBPLP\/234","completion":"    return ($l * $l * $l);\n}","language":"perl"}
{"task_id":"MBPLP\/244","completion":"    my ($i) = 1;\n    my ($j) = $N;\n    while ($i <= $j) {\n        if ($i*$i > $N) {\n            return $i*$i;\n        }\n        $i++;\n    }\n    return $N;\n}","language":"perl"}
{"task_id":"MBPLP\/248","completion":"    my $sum = 0;\n    for (1; $n; $n--) {\n        $sum += 1.0 \/ $n;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/249","completion":"    my $result = [];\n    for my $num1 (@$array_nums1) {\n        for my $num2 (@$array_nums2) {\n            if ($num1 == $num2) {\n                push $result, $num1;\n                break;\n            }\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/257","completion":"    $a = $a ^ $b;\n    $b = $a ^ $b;\n    $a = $a ^ $b;\n    return [$a, $b];\n}","language":"perl"}
{"task_id":"MBPLP\/258","completion":"    my ($odd_count) = 0;\n\n    foreach my $num (@$array_nums) {\n        if ($num % 2 != 0) {\n            $odd_count++;\n        }\n    }\n\n    return $odd_count;\n}","language":"perl"}
{"task_id":"MBPLP\/269","completion":"    return ord($k);\n}","language":"perl"}
{"task_id":"MBPLP\/285","completion":"    my ($a) = $text =~ s\/(a)(b)(b)(b)\/$1$2$3$4\/;\n    if ($a) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/294","completion":"    my ($maxval) = 0;\n    foreach my $val (@$listval) {\n        if ($val > $maxval) {\n            $maxval = $val;\n        }\n    }\n    return $maxval;\n}","language":"perl"}
{"task_id":"MBPLP\/302","completion":"    return ($n & $n-1);\n}","language":"perl"}
{"task_id":"MBPLP\/309","completion":"    return $a > $b ? $a : $b;\n}","language":"perl"}
{"task_id":"MBPLP\/327","completion":"    return ($x + $y > $z) ? 0 : ($x + $z > $y) ? 1 : 2;\n}","language":"perl"}
{"task_id":"MBPLP\/329","completion":"    my $neg = 0;\n    foreach my $n (@$list) {\n        if ($n < 0) {\n            $neg++;\n        }\n    }\n    return $neg;\n}","language":"perl"}
{"task_id":"MBPLP\/334","completion":"    if ($a + $b > $c) {\n        return 1;\n    } else {\n        return 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/335","completion":"    my $result = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $result += $a + $i * $d;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/349","completion":"    my ($binary) = $string;\n    if ($binary =~ m\/0+1\/g) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/356","completion":"    my $c = 180 - ($a + $b);\n    return $c;\n}","language":"perl"}
{"task_id":"MBPLP\/357","completion":"    my $max = 0;\n    foreach my $tuple (@$test_list) {\n        my $max_tuple = $tuple;\n        foreach my $element (@$max_tuple) {\n            if ($max < $element) {\n                $max = $element;\n            }\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/365","completion":"    my ($n_str) = $n;\n    my ($n_len) = length($n_str);\n    return $n_len;\n}","language":"perl"}
{"task_id":"MBPLP\/373","completion":"    return $l * $w * $h;\n}","language":"perl"}
{"task_id":"MBPLP\/404","completion":"    return $a < $b ? $a : $b;\n}","language":"perl"}
{"task_id":"MBPLP\/406","completion":"    my ($even, $odd) = ($x % 2 == 0);\n    return $even ? \"Even Parity\" : \"Odd Parity\";\n}","language":"perl"}
{"task_id":"MBPLP\/418","completion":"    my $max = 0;\n    my $sub = [];\n    for my $item (@$lst) {\n        if ($item - length $max) {\n            $max = $item - length;\n            $sub = $item;\n        }\n    }\n    return $sub;\n}","language":"perl"}
{"task_id":"MBPLP\/422","completion":"    my $result = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        $result += $i * $i * $i;\n    }\n    return $result \/ $n;\n}","language":"perl"}
{"task_id":"MBPLP\/427","completion":"    my $date = $dt;\n    my $year = substr($date, 0, 4);\n    my $month = substr($date, 5, 2);\n    my $day = substr($date, 8, 2);\n    my $new_date = $day . \"-\" . $month . \"-\" . $year;\n    return $new_date;\n}","language":"perl"}
{"task_id":"MBPLP\/432","completion":"    my $result = ($base1 + $base2) \/ 2;\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/434","completion":"    my $a = $text =~ s\/(a)(b)\/$1\/;\n    if ($a) {\n        return \"Found a match!\";\n    }\n    return \"Not matched!\";\n}","language":"perl"}
{"task_id":"MBPLP\/435","completion":"    return $n % 10;\n}","language":"perl"}
{"task_id":"MBPLP\/441","completion":"    my ($h) = $l * $l;\n    return $h * 6;\n}","language":"perl"}
{"task_id":"MBPLP\/449","completion":"    my $dx = abs($x2 - $x1);\n    my $dy = abs($y2 - $y1);\n    my $dz = abs($x3 - $x1);\n    my $dr = abs($y3 - $y1);\n    my $d = $dx + $dy + $dz - $dr;\n    return ($d > 0) ? \"Yes\" : \"No\";\n}","language":"perl"}
{"task_id":"MBPLP\/453","completion":"    my ($sum) = 0;\n    my ($i) = 1;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            if ($i % 2 == 0) {\n                $sum += $i;\n            }\n        }\n        $i++;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/457","completion":"    my ($min, $min_len) = (0, 0);\n    foreach my $item (@$lst) {\n        my $len = length $item;\n        if ($min_len < $len && $len >= $min_len) {\n            $min = $item;\n            $min_len = $len;\n        }\n    }\n    return $min;\n}","language":"perl"}
{"task_id":"MBPLP\/458","completion":"    return $l * $b;\n}","language":"perl"}
{"task_id":"MBPLP\/461","completion":"    my ($upper_count) = 0;\n    for (@_){\n        if ($str =~ m\/([A-Z]+)\/){\n            ++$upper_count;\n        }\n    }\n    return $upper_count;\n}","language":"perl"}
{"task_id":"MBPLP\/474","completion":"    $str1 =~ s\/$ch\/$newch\/g;\n    return $str1;\n}","language":"perl"}
{"task_id":"MBPLP\/491","completion":"    my $result = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $result = $result + $a * $r ** $i;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/499","completion":"    my $d = $r * 2;\n    return $d;\n}","language":"perl"}
{"task_id":"MBPLP\/502","completion":"    return $n % $m;\n}","language":"perl"}
{"task_id":"MBPLP\/504","completion":"    my ($sum) = 0;\n    for (1; $n; $n--) {\n        $sum = $sum + $n * $n * $n;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/506","completion":"    my $result = 1;\n    for ($i = 1; $i <= $k; $i++) {\n        $result *= $n - $i + 1;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/509","completion":"    my $sum = 0;\n    my $count = 0;\n    while ($n > 0) {\n        if ($n % 2 != 0) {\n            $sum += $n;\n            $count++;\n        }\n        $n--;\n    }\n    return $sum \/ $count;\n}","language":"perl"}
{"task_id":"MBPLP\/514","completion":"    my $sum = 0;\n    foreach my $element (@$test_tup) {\n        $sum += $element;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/518","completion":"    my ($root) = 0;\n    while ($root * $root < $num)\n    {\n        $root = $root + 1;\n    }\n    return $root;\n}","language":"perl"}
{"task_id":"MBPLP\/521","completion":"    return $x + $y > $z ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/542","completion":"    my $regex = '\/ |,|\\.\/g';\n    $text =~ s\/\\s+\/:\/g;\n    return $text;\n}","language":"perl"}
{"task_id":"MBPLP\/544","completion":"    my @flatten_list = ();\n    foreach my $item (@$test_list) {\n        if ($item =~ m\/^\\d+$\/) {\n            push @flatten_list, $item;\n        } else {\n            push @flatten_list, @$item;\n        }\n    }\n    return join \" \", @flatten_list;\n}","language":"perl"}
{"task_id":"MBPLP\/555","completion":"    my $sum = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        $sum += $i * $i * $i;\n    }\n    my $sum2 = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        $sum2 += $i;\n    }\n    return $sum - $sum2;\n}","language":"perl"}
{"task_id":"MBPLP\/566","completion":"    my $sum = 0;\n    while ($n > 0) {\n        $sum = $sum + $n % 10;\n        $n = $n \/ 10;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/576","completion":"    my $i = 0;\n    my $j = 0;\n    while ($i < $n) {\n        if ($j >= $m) {\n            return 0;\n        }\n        if ($A[$i] == $B[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    return 1;\n}","language":"perl"}
{"task_id":"MBPLP\/587","completion":"    my ($tuple) = @_;\n    for my $i (0..$#listx) {\n        $tuple{$i} = $listx{$i};\n    }\n    return $tuple;\n}","language":"perl"}
{"task_id":"MBPLP\/599","completion":"    my $sum = 0;\n    my $average = 0;\n    for (my $i = 1; $i <= $number; $i++) {\n        $sum += $i;\n    }\n    $average = $sum \/ $number;\n    return [$sum, $average];\n}","language":"perl"}
{"task_id":"MBPLP\/605","completion":"    if ($num < 2) {\n        return 0;\n    }\n    if ($num == 2) {\n        return 1;\n    }\n    if ($num % 2 == 0) {\n        return 0;\n    }\n    if ($num == 3) {\n        return 1;\n    }\n    if ($num % 3 == 0) {\n        return 0;\n    }\n    $i = 5;\n    while ($i * $i <= $num) {\n        if ($num % $i == 0) {\n            return 0;\n        }\n        if ($num % $i == 0) {\n            return 0;\n        }\n        $i = $i + 2;\n    }\n    return 1;\n}","language":"perl"}
{"task_id":"MBPLP\/606","completion":"    return $degree * (0.017453292519943295);\n}","language":"perl"}
{"task_id":"MBPLP\/611","completion":"    my $max = 0;\n    foreach my $row (@$test_list) {\n        my $n = 0;\n        foreach my $col (@$row) {\n            if ($n == $N) {\n                $max = $col;\n                break;\n            }\n            $n = $n + 1;\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/614","completion":"    my ($total) = 0;\n    foreach my $item (@$test_list) {\n        my $sum = 0;\n        foreach my $value (@$item) {\n            $sum += $value;\n        }\n        $total += $sum;\n    }\n    return $total;\n}","language":"perl"}
{"task_id":"MBPLP\/637","completion":"    my $profit = $sale_amount - $actual_cost;\n    my $loss = $actual_cost - $sale_amount;\n    return ($profit == 0 && $loss == 0) ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/643","completion":"    my ($pattern) = @_;\n    my ($match) = $text =~ s\/^.*z.*$\/$pattern\/;\n    if ($match) {\n        return \"Found a match!\";\n    }\n    return \"Not matched!\";\n}","language":"perl"}
{"task_id":"MBPLP\/654","completion":"    return $l * 2 + $b * 2;\n}","language":"perl"}
{"task_id":"MBPLP\/663","completion":"    my $k = $n;\n    while ($k > 0) {\n        if ($k % $x == $y) {\n            return $k;\n        }\n        $k--;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/664","completion":"    my $sum = 0;\n    my $count = 0;\n    while($n > 0) {\n        if ($n % 2 == 0) {\n            $sum += $n;\n            $count++;\n        }\n        $n--;\n    }\n    return $sum \/ $count;\n}","language":"perl"}
{"task_id":"MBPLP\/666","completion":"    my ($count, $pos) = 0;\n    while ($pos = $string =~ m\/$char\/g) {\n        ++$count;\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/672","completion":"    return $num1 > $num2 ? $num1 : $num2 > $num3 ? $num2 : $num3;\n}","language":"perl"}
{"task_id":"MBPLP\/673","completion":"    my $result = 0;\n    foreach my $item (@$list) {\n        $result = $result * 10 + $item;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/675","completion":"    my $sum = $x + $y;\n    if ($sum >= $m && $sum <= $n) {\n        return 20;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/687","completion":"    if ($a == 0 || $b == 0) {\n        return $a || $b;\n    }\n    return $a > $b ? recur_gcd($a - $b, $b) : recur_gcd($a, $b - $a);\n}","language":"perl"}
{"task_id":"MBPLP\/693","completion":"    my $pattern = \" +\";\n    my $new_text =~ s\/\\s+\/ \/g;\n    $text1 =~ s\/\\s+\/ \/g;\n    return $text1;\n}","language":"perl"}
{"task_id":"MBPLP\/697","completion":"    my ($even_count) = 0;\n    foreach my $num (@$array_nums) {\n        if ($num % 2 == 0) {\n            ++$even_count;\n        }\n    }\n    return $even_count;\n}","language":"perl"}
{"task_id":"MBPLP\/703","completion":"    return $d && $d->{$x} ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/704","completion":"    my ($sum) = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum += 1.0\/$i;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/714","completion":"    my ($prime_factor, $count) = @_;\n\n    $count = 0;\n    for ($i = 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $count++;\n            $prime_factor = $i;\n            $n = $n \/ $i;\n        }\n    }\n\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/716","completion":"    my ($b) = @_;\n    return ($a + $b) * 2;\n}","language":"perl"}
{"task_id":"MBPLP\/717","completion":"    my ($mean) = 0;\n    my ($sum) = 0;\n    my ($n) = 0;\n    foreach my $x (@$data) {\n        $sum += $x;\n        $n++;\n    }\n    $mean = $sum \/ $n;\n    my $diff = 0;\n    foreach my $x (@$data) {\n        $diff += ($x - $mean) * ($x - $mean);\n    }\n    return sqrt($diff \/ ($n - 1));\n}","language":"perl"}
{"task_id":"MBPLP\/737","completion":"    my $pattern = \"(?i)^[aeiou]\";\n    return $string =~ $pattern ? \"Valid\" : \"Invalid\";\n}","language":"perl"}
{"task_id":"MBPLP\/756","completion":"    my $a = $text =~ s\/a\/b\/g;\n    if ($a) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/759","completion":"    my $precision = 2;\n    my $is_decimal = 0;\n    if ($num =~ m\/^[+-]?\\d+(?:\\.\\d{1,2})?$\/) {\n        $is_decimal = 1;\n    } else {\n        $is_decimal = 0;\n    }\n    return $is_decimal;\n}","language":"perl"}
{"task_id":"MBPLP\/768","completion":"    my ($odd, $even) = 0;\n    if ($x % 2 == 0) {\n        $even = $even + 1;\n    } else {\n        $odd = $odd + 1;\n    }\n    return $odd == 1 ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/777","completion":"    my $res = 0;\n    my @counts = (0);\n    foreach my $x (@$arr) {\n        if ($counts[$x]++ == 0) {\n            $res += $x;\n        }\n    }\n    return $res;\n}","language":"perl"}
{"task_id":"MBPLP\/787","completion":"    my $a = substr($text, 0, 1);\n    my $b = substr($text, 1, 3);\n    if ($a =~ \/a\\b\/) {\n        if ($b =~ \/b\\b\/) {\n            return \"Found a match!\";\n        } else {\n            return \"Not matched!\";\n        }\n    } else {\n        return \"Not matched!\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/789","completion":"    return $s * $l;\n}","language":"perl"}
{"task_id":"MBPLP\/792","completion":"    my $count = 0;\n    foreach my $list (@$input_list) {\n        if (defined $list) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/797","completion":"    my $sum = 0;\n    for (my $i = $l; $i <= $r; $i++) {\n        if ($i % 2) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/799","completion":"    $n = ($n << $d) | ($n >> (32 - $d));\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/805","completion":"    my ($max_sum) = 0;\n    my ($max_sum_list) = [];\n    for my $list (@$lists) {\n        my ($sum) = 0;\n        for my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_sum_list = $list;\n        }\n    }\n    return $max_sum_list;\n}","language":"perl"}
{"task_id":"MBPLP\/808","completion":"    my $flag = 0;\n    foreach my $t (@$test_tup) {\n        if ($t == $K) {\n            $flag = 1;\n            break;\n        }\n    }\n    return $flag;\n}","language":"perl"}
{"task_id":"MBPLP\/812","completion":"    my ($road) = $street;\n    my ($rd) = $road;\n    $rd =~ s\/ Road\/ Rd.\/;\n    return $rd;\n}","language":"perl"}
{"task_id":"MBPLP\/833","completion":"    my ($keys) = ();\n    foreach my $key (sort keys %$dict) {\n        push @$keys, $key;\n    }\n    return $keys;\n}","language":"perl"}
{"task_id":"MBPLP\/835","completion":"    my $m = ($y2 - $y1) \/ ($x2 - $x1);\n    return $m;\n}","language":"perl"}
{"task_id":"MBPLP\/840","completion":"    my $d = ($b * $b) - ($4 * $a * $c);\n    if ($d < 0) {\n        return \"No\";\n    }\n    if ($d == 0) {\n        return \"Yes\";\n    }\n    if ($d > 0) {\n        return \"No\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/847","completion":"    my ($ys) = ();\n    my ($n) = 0;\n    for my $x (@_){\n        if ($n == 0) {\n            $ys = $x;\n            $n = 1;\n        } else {\n            $ys = $ys . $x;\n        }\n    }\n    return $ys;\n}","language":"perl"}
{"task_id":"MBPLP\/848","completion":"    my $area = ($base1 + $base2) * $height \/ 2;\n    return $area;\n}","language":"perl"}
{"task_id":"MBPLP\/853","completion":"    my ($sum) = 0;\n    my ($i) = 1;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            if ($i % 2 != 0) {\n                $sum += $i;\n            }\n        }\n        $i++;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/855","completion":"    return ($x % 2 == 0) ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/858","completion":"    my ($count) = 0;\n    foreach my $list (@$input_list) {\n        if (defined $list) {\n            $count += 1;\n        }\n    }\n    return $count * $count;\n}","language":"perl"}
{"task_id":"MBPLP\/863","completion":"    my $max = 0;\n    my $start = 0;\n    for my $i (0..$n) {\n        my $sum = 0;\n        for my $j (0..$i) {\n            $sum += $arr[$j];\n        }\n        if ($sum - $arr[$i] == $arr[$i]) {\n            if ($max < $i - $start + 1) {\n                $max = $i - $start + 1;\n                $start = $i;\n            }\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/870","completion":"    my $sum = 0;\n    foreach my $num (@$nums) {\n        if ($num > 0) {\n            $sum = $sum + $num;\n        }\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/873","completion":"    $n = $n < 2 ? $n : fibonacci($n-1) + fibonacci($n-2);\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/887","completion":"    return $n & 1;\n}","language":"perl"}
{"task_id":"MBPLP\/897","completion":"    my $present = 0;\n    for my $i (0, $sentence) {\n        if ($i =~ m\/^$word\/i) {\n            $present = 1;\n        }\n    }\n    return $present;\n}","language":"perl"}
{"task_id":"MBPLP\/924","completion":"    return $x > $y ? $x : $y;\n}","language":"perl"}
{"task_id":"MBPLP\/925","completion":"    my $product = 1;\n    foreach my $num (@$nums) {\n        $product *= $num;\n    }\n    return $product;\n}","language":"perl"}
{"task_id":"MBPLP\/929","completion":"    my $count = 0;\n    foreach my $item (@$tuplex) {\n        if ($item == $value) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/931","completion":"    my $sum = 0;\n    for my $i (1..$number) {\n        $sum = $sum + $i * $i * $i;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/935","completion":"    my $sum = 0;\n    for (1; $number >= 1; $number--) {\n        $sum = $sum + $number * $number;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/959","completion":"    my ($sum, $count) = 0;\n    foreach my $item (@$lst) {\n        $sum += $item;\n        $count++;\n    }\n    return $sum \/ $count;\n}","language":"perl"}
{"task_id":"MBPLP\/962","completion":"    my $sum = 0;\n    for ($i = $l; $i <= $r; $i++) {\n        if ($i % 2 == 0) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/970","completion":"    return $x < $y ? $x : $y;\n}","language":"perl"}
{"task_id":"MBPLP\/3","completion":"    if ($n > 1) {\n        for (my $i = 2; $i <= $n; $i++) {\n            if ($n % $i) {\n                return 1;\n            }\n        }\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/20","completion":"    return $x % 2 ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/23","completion":"    $max_sum = 0;\n    foreach my $l (@$list1) {\n        my @a = @$l;\n        my $sum = 0;\n        foreach my $a (@a) {\n            $sum += $a;\n        }\n        if ($max_sum < $sum) {\n            $max_sum = $sum;\n        }\n    }\n    return $max_sum;\n}","language":"perl"}
{"task_id":"MBPLP\/28","completion":"    $bin = $n + $k - 1;\n    $ret = 1;\n    for ($i = 1; $i <= $k; $i++) {\n        $ret *= $n - $i + 1;\n        $ret \/= $i;\n    }\n    return $ret;\n}","language":"perl"}
{"task_id":"MBPLP\/38","completion":"    my ($even_list) = ();\n    my ($odd_list) = ();\n\n    for my $num1 (@$list1) {\n        my ($even_count) = 0;\n        my ($odd_count) = 0;\n\n        if ($num1 % 2 == 0) {\n            $even_count += 1;\n            push @$even_list, $num1;\n        } else {\n            $odd_count += 1;\n            push @$odd_list, $num1;\n        }\n\n        if ($even_count == 1 && $odd_count == 0) {\n            return $num1;\n        }\n    }\n\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/45","completion":"    my ($a) = @_;\n\n    my $r = 0;\n    my @s = shift(@a);\n\n    for (@s) {\n        my $g = shift($l);\n        if ($g) {\n            $r = $r ? gcd($g, $r) : $g;\n        }\n    }\n\n    return $r;\n}","language":"perl"}
{"task_id":"MBPLP\/58","completion":"    return ($x < 0 && $y > 0 || $x > 0 && $y < 0) ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/78","completion":"    my ($c) = 0;\n    for my $i (1..$n)\n    {\n        if ($i % 2)\n        {\n            $c += 1;\n        }\n    }\n    return $c;\n}","language":"perl"}
{"task_id":"MBPLP\/91","completion":"    my $result = 0;\n    foreach my $val (@{$str1}) {\n        if ($val =~ \/$sub_str\/i) {\n            $result = 1;\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/93","completion":"    return $a ** $b;\n}","language":"perl"}
{"task_id":"MBPLP\/96","completion":"    my ($result, $i) = 0;\n    my $divisor;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $result += 1;\n            $divisor = $i;\n            for ($j = $i; $j <= $n; $j += $i) {\n                if ($n % $j == 0) {\n                    $divisor *= $j;\n                }\n            }\n        }\n    }\n    $result;\n}","language":"perl"}
{"task_id":"MBPLP\/112","completion":"    return $diameter * 2 + $height * 2;\n}","language":"perl"}
{"task_id":"MBPLP\/116","completion":"    my @ret;\n    $ret = 0;\n    foreach my $num (@$nums)\n    {\n        $ret = $ret * 10 + $num;\n    }\n    return $ret;\n}","language":"perl"}
{"task_id":"MBPLP\/132","completion":"    my ($string) = join \"\", @$tup1;\n    return $string;\n}","language":"perl"}
{"task_id":"MBPLP\/135","completion":"    my $hexa = $n * (2 * $n - 1);\n    return $hexa;\n}","language":"perl"}
{"task_id":"MBPLP\/138","completion":"    if ($n > 0) {\n        if ($n == 2 && $n <= $@) {\n            print 1;\n        } else {\n            if ($n > 2) {\n                for ($i = 2; $i < $n; ++$i) {\n                    $n = $n - $i;\n                    if ($n == 2 && $n <= $@) {\n                        print 1;\n                    }\n                }\n            }\n            print 0;\n        }\n    }\n    exit;\n}","language":"perl"}
{"task_id":"MBPLP\/156","completion":"    return $tuple_str;\n}","language":"perl"}
{"task_id":"MBPLP\/167","completion":"    my $power = 1;\n    while ($n >= $power)\n    {\n        $power = $power << 1;\n    }\n    return $power;\n}","language":"perl"}
{"task_id":"MBPLP\/168","completion":"    my $counts = 0;\n    foreach my $n (@$a) {\n        if ($n == $x) {\n            ++$counts;\n        }\n    }\n    return $counts;\n}","language":"perl"}
{"task_id":"MBPLP\/186","completion":"    my $count = 0;\n    my @matches = [];\n    for my $p (@$patterns) {\n        if ($text =~ m\/$p\/i) {\n            $count += 1;\n            @matches{$p} = $text;\n        }\n    }\n    if ($count) {\n        @matches{length} = $count;\n        return \"Matched!\";\n    }\n    return \"Not Matched!\";\n}","language":"perl"}
{"task_id":"MBPLP\/189","completion":"    my $missing = 1;\n    foreach my $x (@$arr)\n    {\n        if ($x > 0)\n        {\n            if ($x == $missing)\n            {\n                next unless $missing < $n;\n                $missing++;\n            }\n        }\n        else\n        {\n            next unless $missing == $n;\n            $missing++;\n        }\n    }\n    return $missing;\n}","language":"perl"}
{"task_id":"MBPLP\/191","completion":"    my $february = $monthname3 eq \"February\";\n    if ($february) {\n        return 0;\n    }\n    my $june = $monthname3 eq \"June\";\n    if ($june) {\n        return 1;\n    }\n    my $april = $monthname3 eq \"April\";\n    if ($april) {\n        return 1;\n    }\n    return -1;\n}","language":"perl"}
{"task_id":"MBPLP\/212","completion":"    my ($i) = 1;\n    my ($sum) = 0;\n\n    while ($i <= $n) {\n        $sum = ($sum + $i * $i * $i * $i);\n        $i += 1;\n    }\n\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/224","completion":"    my $set_bits = 0;\n\n    while($n != 0) {\n        if($n & 1) {\n            ++$set_bits;\n        }\n\n        $n >>= 1;\n    }\n\n    return $set_bits;\n}","language":"perl"}
{"task_id":"MBPLP\/242","completion":"    return length($str1);\n}","language":"perl"}
{"task_id":"MBPLP\/246","completion":"    my $result = $number;\n    while ($result * $result - $number > 0) {\n        $result = ($result + $number \/ $result) \/ 2;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/252","completion":"    my $r = abs($numbers);\n    my $c = $numbers - $r;\n    return [$r, $c];\n}","language":"perl"}
{"task_id":"MBPLP\/280","completion":"    my $index = 0;\n\n    for my $i (1, $dlist) {\n        if ($item == $i) {\n            print $index;\n            exit;\n        }\n        $index++;\n    }\n    print -1;\n    exit;\n}","language":"perl"}
{"task_id":"MBPLP\/281","completion":"    my ($hash) = 0;\n    foreach my $key (@$test_list)\n    {\n        if (0 < $hash{$key})\n        {\n            print $key, \" is not unique\";\n            exit;\n        }\n        else\n        {\n            $hash{$key} = 1;\n        }\n    }\n    print \"No duplicates found\";\n}","language":"perl"}
{"task_id":"MBPLP\/320","completion":"    $sum_n = 0;\n    $sum_n_squared = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        $sum_n = $i * $i + $sum_n;\n        $sum_n_squared = $i * $i * $i + $sum_n_squared;\n    }\n    return $sum_n_squared - $sum_n;\n}","language":"perl"}
{"task_id":"MBPLP\/354","completion":"    return $a + ($n-1) * $d;\n}","language":"perl"}
{"task_id":"MBPLP\/359","completion":"    return $a < 0 || $b < 0 || $c < 0 ? \"No\" : ($a * $a + $b * $b - $c * $c < 0 ? \"No\" : \"Yes\");\n}","language":"perl"}
{"task_id":"MBPLP\/375","completion":"    return $n - ($n % $m);\n}","language":"perl"}
{"task_id":"MBPLP\/377","completion":"    $s =~ s\/$c\/\/g;\n    return $s;\n}","language":"perl"}
{"task_id":"MBPLP\/379","completion":"    my $h1, $w1, $l1;\n\n    $h1 = $h;\n    $w1 = $l;\n    $l1 = $w;\n\n    return $w1 * $h1 * 2 + $l1 * $h1 * 2 + $l1 * $w1 * 2;\n}","language":"perl"}
{"task_id":"MBPLP\/397","completion":"    # print \"a = $a, b = $b, c = $c\\n\";\n    $min = $a < $b ? $a < $c ? $a : $c : $b < $c ? $b : $c;\n    # print \"min = $min\\n\";\n    $max = $a > $b ? $a > $c ? $a : $c : $b > $c ? $b : $c;\n    # print \"max = $max\\n\";\n    $sum = $a + $b + $c;\n    # print \"sum = $sum\\n\";\n    return $sum - $min - $max;\n}","language":"perl"}
{"task_id":"MBPLP\/403","completion":"    if ($str =~ \/^https?:\\\/\\\/(\\w+\\.)*(\\w+)\\S*\/i) {\n        return 1;\n    } else {\n        return 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/421","completion":"    my $delimiter = \"-\";\n    return join($delimiter, @$test_tup);\n}","language":"perl"}
{"task_id":"MBPLP\/426","completion":"    my ($filtered_nums) = [];\n\n    foreach my $num (@$nums) {\n        if (defined $num && $num % 2) {\n            push $filtered_nums, $num;\n        }\n    }\n\n    return $filtered_nums;\n}","language":"perl"}
{"task_id":"MBPLP\/431","completion":"    if (defined $list1 && defined $list2) {\n        foreach my $value1 (@$list1) {\n            foreach my $value2 (@$list2) {\n                if ($value1 == $value2) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return \"none\";\n}","language":"perl"}
{"task_id":"MBPLP\/451","completion":"    my ($pattern) = qr\/\\s\/;\n    $text1 =~ s\/ \/\/g;\n\n    $text1;\n}","language":"perl"}
{"task_id":"MBPLP\/452","completion":"    my $amount = $sale_amount - $actual_cost;\n    return $amount < 0 ? \"none\" : $amount;\n}","language":"perl"}
{"task_id":"MBPLP\/454","completion":"    push @_;\n\n    my $match_found = 0;\n    for my $word (@_){\n        if ($word =~ \/z\/) {\n            push @_;\n            $match_found = 1;\n        }\n        else {\n            push @_;\n        }\n    }\n\n    if ($match_found) {\n        return \"Found a match!\";\n    }\n    else {\n        return \"Not matched!\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/455","completion":"    my $result;\n    my ($days_in_month) = (0..31);\n    $result = $monthnum2 & $days_in_month == $days_in_month;\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/464","completion":"    my %same;\n    $same = 0;\n    for my $key (sort keys %$dict) {\n        if ($n == $dict->{$key}) {\n            $same = 1;\n        }\n    }\n    if ($same) {\n        return 1;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/467","completion":"    $octalNum = sprintf(\"%o\",$deciNum);\n    return $octalNum;\n}","language":"perl"}
{"task_id":"MBPLP\/479","completion":"    return substr($n, 0, 1);\n}","language":"perl"}
{"task_id":"MBPLP\/498","completion":"    return $x ? ($x > $y ? gcd($x - $y, $y) : gcd($y - $x, $x)) : $y;\n}","language":"perl"}
{"task_id":"MBPLP\/517","completion":"    my ($max, $pos) = 0;\n    foreach my $n (sort @$list1) {\n        if ($n > 0) {\n            if ($pos < $n) {\n                $max = $n;\n                $pos = $n;\n            }\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/535","completion":"    return $r * $r * 3.1415;\n}","language":"perl"}
{"task_id":"MBPLP\/558","completion":"    if ($n2 < $n1) {\n        my ($n2, $n1) = ($n1, $n2);\n    }\n\n    my ($digit_distance, $n1, $n2, $n1_digit, $n2_digit) = (@_);\n    if ($n2_digit == 0) {\n        $digit_distance = ($n1 == $n2) ? 0 : 1;\n    } else {\n        $digit_distance = ($n1_digit == $n2_digit) ? 0 : 1 + $digit_distance;\n    }\n    print $digit_distance;\n    exit 0;\n}","language":"perl"}
{"task_id":"MBPLP\/562","completion":"    my ($max, $len) = 0;\n    foreach my $i (@$lst) {\n        $len = 0;\n        foreach my $elem (@$i) {\n            $len += 1;\n            if ($len > $max) {\n                $max = $len;\n            }\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/582","completion":"    my $empty_flag = 1;\n    foreach my $key (sort keys %{$dict1}) {\n        $empty_flag &= !defined {$dict1{$key}};\n    }\n    return $empty_flag;\n}","language":"perl"}
{"task_id":"MBPLP\/600","completion":"    return ($n & 1) ? 0 : 1;\n}","language":"perl"}
{"task_id":"MBPLP\/604","completion":"    my @list = split \/\\s+\/, $s;\n    my @rev = reverse @list;\n    return join \" \", @rev;\n}","language":"perl"}
{"task_id":"MBPLP\/613","completion":"    my $max_values;\n    foreach my $tuple (@$test_list) {\n        my $key = $tuple->[0];\n        my $list = $tuple->[1];\n        my $value = $list[0];\n        foreach my $other_list (@$list) {\n            if ($other_list > $value) {\n                $value = $other_list;\n            }\n        }\n        push @$max_values, [$key, $value];\n    }\n    return $max_values;\n}","language":"perl"}
{"task_id":"MBPLP\/628","completion":"    $string =~ s\/ \/%20\/g;\n    return $string;\n}","language":"perl"}
{"task_id":"MBPLP\/631","completion":"    $text =~ s\/\\s\/_\/g;\n    return $text;\n}","language":"perl"}
{"task_id":"MBPLP\/655","completion":"    my $t = 1;\n    my $sum = 0;\n    while($t <= $n)\n    {\n        $sum += $t ** 5;\n        $t++;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/668","completion":"    $string =~ s\/([a-zA-Z])\\1+\/$char\/g;\n    return $string;\n}","language":"perl"}
{"task_id":"MBPLP\/669","completion":"    # If @_ is not a string or @_ = '', return \"Invalid IP address\"\n    if ($Ip =~ m\/^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\/) {\n        # $Ip must be in the form of \"XXX.XXX.XXX.XXX\"\n        return \"Valid IP address\";\n    } else {\n        return \"Invalid IP address\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/678","completion":"    $str1 =~ s\/\\s+\/\/g;\n    return $str1;\n}","language":"perl"}
{"task_id":"MBPLP\/681","completion":"    # Find the smallest divisor of $n,\n    # that is greater than $n.\n    # Note: this means that if the smallest divisor of $n\n    # is 1, the smallest divisor of $n + 1 is 2, ...\n    # So there is no need to check if $n is prime.\n\n    my $i = 2;\n\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            return $i;\n        }\n        $i = $i + 1;\n    }\n\n    # If the loop exits, then $n is prime.\n    # Return $n.\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/692","completion":"    my $factorial = 1;\n\n    while($N > 0)\n    {\n        $factorial = ($factorial * $N);\n        $N = $N - 1;\n    }\n\n    return $factorial % 100;\n}","language":"perl"}
{"task_id":"MBPLP\/711","completion":"    ($n \/ 10) \/ ($n % 10);\n    if ($n % 10 == 0)\n        {\n        return 0;\n        }\n    if ($n % 10 == 1)\n        {\n        return 1;\n        }\n    else\n        {\n        return 0;\n        }\n}","language":"perl"}
{"task_id":"MBPLP\/732","completion":"    $text =~ s\/([,.])\/:\/g;\n    $text =~ s\/ \/:\/g;\n    return $text;\n}","language":"perl"}
{"task_id":"MBPLP\/750","completion":"    push @$test_list, @$test_tup;\n    return $test_list;\n}","language":"perl"}
{"task_id":"MBPLP\/794","completion":"    if ($text =~ m\/ab+b$\/) {\n        return \"Found a match!\";\n    }\n    return \"Not matched!\";\n}","language":"perl"}
{"task_id":"MBPLP\/796","completion":"    my $sum = 0;\n\n    foreach my $key (keys $dict) {\n        my $value = $dict->{$key};\n        $sum += $value;\n    }\n\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/798","completion":"    my $sum = 0;\n    foreach my $x (@$arr) {\n        $sum += $x;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/801","completion":"    ($x == $y ? $x : 0) + ($y == $z ? $y : 0) + ($z == $x ? $z : 0);\n}","language":"perl"}
{"task_id":"MBPLP\/802","completion":"    my $rotations = 0;\n    while ($n > 1)\n    {\n        push $arr, $arr[0], 0;\n        shift $arr;\n        ++$rotations;\n        $n -= 2;\n    }\n    return $rotations;\n}","language":"perl"}
{"task_id":"MBPLP\/803","completion":"    return $n % 9 ? 0 : 1;\n}","language":"perl"}
{"task_id":"MBPLP\/807","completion":"    my %odd_num = 0;\n    for (@nums) {\n        if (@nums % 2 == 1) {\n            $odd_num = @nums;\n            break;\n        }\n    }\n    print $odd_num;\n}","language":"perl"}
{"task_id":"MBPLP\/813","completion":"    return length($str1);\n}","language":"perl"}
{"task_id":"MBPLP\/820","completion":"    my ($result1);\n    if ($monthnum1 eq 1 || $monthnum1 eq 3 || $monthnum1 eq 5 || $monthnum1 eq 7 || $monthnum1 eq 8 || $monthnum1 eq 10 || $monthnum1 eq 12)\n    {\n        $result1 = 0;\n    }\n    else\n    {\n        $result1 = 1;\n    }\n    return $result1;\n}","language":"perl"}
{"task_id":"MBPLP\/823","completion":"    my $result = $string;\n    if ($result =~ m\/^$sample\/m) {\n        return \"string starts with the given substring\";\n    } else {\n        return \"string doesnt start with the given substring\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/845","completion":"    my $factorial = 1;\n    while($n > 1) {\n        $factorial = $factorial * $n;\n        $n--;\n    }\n    return length($factorial);\n}","language":"perl"}
{"task_id":"MBPLP\/860","completion":"    my ($result) = '';\n    if ( $string =~ m\/\\w+$\/ )\n    {\n        $result = \"Accept\";\n    }\n    else\n    {\n        $result = \"Discard\";\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/866","completion":"    return ($monthname2 eq 'February') ? 0 : 1;\n}","language":"perl"}
{"task_id":"MBPLP\/874","completion":"    if ($str1 =~ m\/^(.{3}).*\\1$\/) {\n        return 1;\n    }\n    if ($str2 =~ m\/^(.{3}).*\\1$\/) {\n        return 0;\n    }\n    if ($str1 =~ m\/^(.{1,}).*\\1$\/) {\n        return 0;\n    }\n    if ($str2 =~ m\/^(.{1,}).*\\1$\/) {\n        return 1;\n    }\n    return -1;\n}","language":"perl"}
{"task_id":"MBPLP\/882","completion":"    return $2*$b + 2*$b*$h + $2*$h;\n}","language":"perl"}
{"task_id":"MBPLP\/885","completion":"    if ($str1 =~ \/(.)\\1+\/ || $str2 =~ \/(.)\\1+\/) {\n        return 0;\n    }\n    for ($i = 1; $i <= length($str1); $i++) {\n        if ($str1 =~ \/(.)\\1\/ && $str2 =~ \/(.)\\1\/ && $str1 != $str2) {\n            return 0;\n        }\n    }\n    return 1;\n}","language":"perl"}
{"task_id":"MBPLP\/886","completion":"    my $length = 0;\n    my $sum = 0;\n    foreach my $x (@$numbers) {\n        $sum += $x;\n        $length++;\n    }\n    return $sum \/ $length;\n}","language":"perl"}
{"task_id":"MBPLP\/890","completion":"    $arr1 = sort $arr1;\n    $arr2 = sort $arr2;\n\n    $i = 1;\n    while ($i < $n && $arr1[$_] == $arr2[$_]) {\n        $i++;\n        $_++;\n    }\n\n    return $i;\n}","language":"perl"}
{"task_id":"MBPLP\/892","completion":"    $text =~ s\/\\s+\/ \/g;\n    return $text;\n}","language":"perl"}
{"task_id":"MBPLP\/899","completion":"    return $arr > $n;\n}","language":"perl"}
{"task_id":"MBPLP\/904","completion":"    {\n        if (0 == $x % 2) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/910","completion":"    return (\n        $m >= 1 &&\n        $m <= 12 &&\n        $d >= 1 &&\n        $d <= 31 &&\n        $y >= 1900 &&\n        $y <= 2999\n    ) ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/913","completion":"    my ($num) = 0;\n\n    if ($string =~ \/(\\d+)$\/) {\n        $num = 1;\n    }\n\n    return $num;\n}","language":"perl"}
{"task_id":"MBPLP\/919","completion":"    $total = 1;\n\n    foreach my $item (@$items) {\n        $total *= $item;\n    }\n\n    return $total;\n}","language":"perl"}
{"task_id":"MBPLP\/926","completion":"    if ($m == 0) {\n        print $n;\n        exit;\n    }\n    print rencontres_number($n - 1, $m - 1) + 1;\n}","language":"perl"}
{"task_id":"MBPLP\/928","completion":"    my $new_dt = 0;\n\n    # Check if the date is in the format yyyy-mm-dd.\n    if ($dt =~ \/(\\d{4})-(\\d{2})-(\\d{2})\/) {\n\n        # Get the year.\n        my $year = $1;\n        # Get the month.\n        my $month = $2;\n        # Get the day.\n        my $day = $3;\n\n        # Change the date format.\n        $new_dt = \"$day-$month-$year\";\n    }\n    return $new_dt;\n}","language":"perl"}
{"task_id":"MBPLP\/942","completion":"    my $index;\n    # \"test_tup\" is a list.\n    for my $num (@$test_tup) {\n        # \"check_list\" is a list.\n        $index = 0;\n        for my $item (@$check_list) {\n            if ($item == $num) {\n                $index = 1;\n                return $index;\n            }\n            $index = 0;\n        }\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/945","completion":"    return { $t->[0] => 1, $t->[1] => 1, $t->[2] => 1 };\n}","language":"perl"}
{"task_id":"MBPLP\/951","completion":"    my @similar_indices = [];\n\n    my ($idx1, $idx2) = $test_list1 <=> $test_list2 ? @_ : undef;\n    if (defined $idx1 && defined $idx2) {\n        my $similarity = @_;\n        if ($similarity > $similarity) {\n            $similar_indices = $idx1;\n        } else {\n            $similar_indices = $idx2;\n        }\n    }\n\n    return $similar_indices;\n}","language":"perl"}
{"task_id":"MBPLP\/954","completion":"    $profit = $actual_cost - $sale_amount;\n    return $profit < 0 ? \"none\" : $profit;\n}","language":"perl"}
{"task_id":"MBPLP\/964","completion":"    my ($i) = length $s;\n    return $i % 2 ? 0 : 1;\n}","language":"perl"}
{"task_id":"MBPLP\/16","completion":"    my ($lower, $underscore) = 0;\n    my ($letter, $match) = 0;\n    foreach my $c ($text) {\n        if ($c =~ m\/^[a-z]+_[a-z]+$\/) {\n            $lower++;\n            $letter = $c;\n        }\n    }\n    if ($lower > 0) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/25","completion":"    my ($prod, $prod_count) = 0;\n    foreach my $x (@$arr) {\n        if ($prod_count == 0) {\n            $prod = $x;\n            $prod_count++;\n        } else {\n            $prod *= $x;\n            $prod_count++;\n        }\n    }\n    return $prod;\n}","language":"perl"}
{"task_id":"MBPLP\/29","completion":"    my ($count, $element) = 0, 0;\n    foreach my $x (@$arr) {\n        if ($x % 2 == 1) {\n            $count++;\n            if ($count % 2 == 1) {\n                $element = $x;\n                break;\n            }\n        }\n    }\n    return $element;\n}","language":"perl"}
{"task_id":"MBPLP\/63","completion":"    my ($max, $min) = 0;\n    foreach my $pair (@$test_list) {\n        my ($a, $b) = @$pair;\n        $max = $max < abs($a - $b) ? abs($a - $b) : $max;\n        $min = $min > abs($a - $b) ? abs($a - $b) : $min;\n    }\n    return $max - $min;\n}","language":"perl"}
{"task_id":"MBPLP\/68","completion":"    my ($n, $i, $j, $k) = 0;\n    foreach my $x (@$A) {\n        if ($x > $A[$i]) {\n            $n++;\n            $i = $j;\n        }\n        if ($x < $A[$j]) {\n            $n++;\n            $j = $k;\n        }\n    }\n    return $n % 2 == 0 ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/90","completion":"    my ($len, $max) = 0;\n    foreach my $x (@$list1) {\n        $len = length($x);\n        if ($len > $max) {\n            $max = $len;\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/120","completion":"    my ($max, $min) = 0;\n    foreach my $t (@$list1) {\n        my ($a, $b) = @$t;\n        $max = $max < $a * $b ? $a * $b : $max;\n        $min = $min > $a * $b ? $a * $b : $min;\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/170","completion":"    my ($sum, $i) = 0;\n    foreach my $x (@$list1) {\n        if ($i >= $m && $i <= $n) {\n            $sum += $x;\n        }\n        $i++;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/195","completion":"    $pos = 0;\n    foreach my $y (@$arr) {\n        if ($y == $x) {\n            return $pos;\n        }\n        $pos++;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/250","completion":"    my $count = 0;\n    foreach my $y (@$tup) {\n        if ($y == $x) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/316","completion":"    my ($i, $j) = 0, 0;\n    foreach my $a (@$A) {\n        if ($a == $x) {\n            $j = $i;\n            break;\n        }\n        $i++;\n    }\n    return $j;\n}","language":"perl"}
{"task_id":"MBPLP\/339","completion":"    my $divisors = 0;\n    foreach my $i (1 .. $y) {\n        if ($x % $i == 0) {\n            $divisors++;\n        }\n    }\n    return $divisors;\n}","language":"perl"}
{"task_id":"MBPLP\/351","completion":"    my $res = 0;\n    foreach my $x (@$arr) {\n        if ($res < $k) {\n            $res++;\n            return $x;\n        }\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/366","completion":"    my ($prod, $min, $max) = 0;\n    foreach my $num (@$list_nums) {\n        if ($min == $max) {\n            $prod = $min * $num;\n        } else {\n            $prod = $min * $num + $max * $num;\n        }\n        $min = $num;\n        $max = $num;\n    }\n    return $prod;\n}","language":"perl"}
{"task_id":"MBPLP\/412","completion":"    my ($newl) = ();\n    foreach my $x (@$l) {\n        if ($x % 2 == 0) {\n            push @$newl, $x;\n        }\n    }\n    return $newl;\n}","language":"perl"}
{"task_id":"MBPLP\/433","completion":"    my ($i, $count) = 0;\n    foreach my $x (@$arr) {\n        if ($x > $number) {\n            return \"No, entered number is less than those in the array\";\n        }\n        $i++;\n    }\n    return \"Yes, the entered number is greater than those in the array\";\n}","language":"perl"}
{"task_id":"MBPLP\/443","completion":"    my ($max, $min) = 0;\n    foreach my $x (@$list1) {\n        if ($x < 0) {\n            $max = $x;\n        } else {\n            $min = $x;\n        }\n    }\n    return $max < $min ? $max : $min;\n}","language":"perl"}
{"task_id":"MBPLP\/466","completion":"    my ($i, $j) = 0, 0;\n    my $max = 0;\n    foreach my $x (@$arr) {\n        if ($x > $max) {\n            $max = $x;\n            $i = $j;\n        }\n        $j++;\n    }\n    return $i;\n}","language":"perl"}
{"task_id":"MBPLP\/494","completion":"    my ($result, $count) = 0;\n    foreach my $x (@$test_tup) {\n        $result = $result * 2 + $x;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/559","completion":"    my $max = 0;\n    my $sum = 0;\n    foreach my $x (@$a) {\n        if ($sum + $x >= 0) {\n            $sum += $x;\n        } else {\n            $sum = 0;\n        }\n        if ($sum > $max) {\n            $max = $sum;\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/567","completion":"    my ($flag, $i, $j) = 0;\n    foreach my $x (@$list1) {\n        if ($flag == 0) {\n            $i = $x;\n            $flag = 1;\n        } else {\n            if ($x < $i) {\n                return 0;\n            } else {\n                $i = $x;\n            }\n        }\n    }\n    return 1;\n}","language":"perl"}
{"task_id":"MBPLP\/598","completion":"    my ($sum, $digit) = 0;\n    my ($temp, $num) = 0;\n    $temp = $number;\n    while ($temp > 0) {\n        $num = $temp % 10;\n        $sum = ($sum + $num * $num * $num);\n        $temp = $temp \/ 10;\n    }\n    return ($sum == $number) ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/627","completion":"    my $missing = $start;\n    foreach my $num (@$array) {\n        if ($num != $missing) {\n            return $missing;\n        }\n        $missing++;\n    }\n    return $missing;\n}","language":"perl"}
{"task_id":"MBPLP\/636","completion":"    my ($d, $e, $f) = @_;\n    if ($d * $d - 4 * $a * $b < 0) {\n        return \"No\";\n    }\n    if ($d * $d - 4 * $a * $b == 0) {\n        return \"Yes\";\n    }\n    if ($d * $d - 4 * $a * $b > 0) {\n        return \"Yes\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/719","completion":"    my ($a, $b) = @_;\n    my ($found, $match) = 0;\n    if ($a =~ m\/a\/g) {\n        $found = 1;\n    }\n    if ($b =~ m\/b\/g) {\n        $found = 1;\n    }\n    if ($found) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/733","completion":"    my ($i, $j) = 0;\n    foreach my $a (@$A) {\n        if ($a == $x) {\n            return $i;\n        }\n        $i++;\n    }\n    return -1;\n}","language":"perl"}
{"task_id":"MBPLP\/744","completion":"    my ($count, $undef) = 0;\n    foreach my $x (@$test_tup) {\n        if ($x == undef) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/760","completion":"    my $seen = 0;\n    foreach my $x (@$arr) {\n        if ($seen == 0) {\n            $seen = $x;\n        } else {\n            if ($x != $seen) {\n                return \"NO\";\n            }\n        }\n    }\n    return \"YES\";\n}","language":"perl"}
{"task_id":"MBPLP\/781","completion":"    my ($divisors, $even) = 0;\n    my $i = 1;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $divisors++;\n        }\n        $i++;\n    }\n    if ($divisors % 2 == 0) {\n        $even = \"Even\";\n    } else {\n        $even = \"Odd\";\n    }\n    return $even;\n}","language":"perl"}
{"task_id":"MBPLP\/804","completion":"    my $prod = 1;\n    foreach my $x (@$arr) {\n        $prod *= $x;\n    }\n    return $prod % 2 == 0 ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/816","completion":"    my ($tup_len) = length $test_tup;\n    my ($new_tup) = [];\n    for my $i (0..$tup_len) {\n        $new_tup{$i} = $test_tup{$i};\n    }\n    return $new_tup;\n}","language":"perl"}
{"task_id":"MBPLP\/826","completion":"    if ($a + $b > $c) {\n        if ($a + $c > $b) {\n            return \"Acute-angled Triangle\";\n        }\n        else {\n            return \"Obtuse-angled Triangle\";\n        }\n    }\n    else {\n        if ($b + $c > $a) {\n            return \"Obtuse-angled Triangle\";\n        }\n        else {\n            return \"Right-angled Triangle\";\n        }\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/852","completion":"    my ($neg_list) = ();\n    foreach my $num (@$num_list) {\n        if ($num >= 0) {\n            push @$neg_list, $num;\n        }\n    }\n    return $neg_list;\n}","language":"perl"}
{"task_id":"MBPLP\/891","completion":"    return ($A % 10 == $B % 10) ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/14","completion":"    return (($l * $b * $h) \/ 2);\n}","language":"perl"}
{"task_id":"MBPLP\/26","completion":"    my $res = 1;\n    foreach my $tup (@$test_list) {\n        for my $ele (@$tup) {\n            if ($ele != $K) {\n                $res = 0;\n                break;\n            }\n        }\n    }\n    return $res;\n}","language":"perl"}
{"task_id":"MBPLP\/35","completion":"    return $n * ( $n + 1 );\n}","language":"perl"}
{"task_id":"MBPLP\/47","completion":"    $variable = 1;\n    if ($A == $B) {\n        return 1;\n    }\n    if (($B - $A) >= 5) {\n        return 0;\n    }\n    for ($i = $A + 1; $i <= $B; $i++) {\n        $variable = ($variable * ($i % 10)) % 10;\n    }\n    return $variable % 10;\n}","language":"perl"}
{"task_id":"MBPLP\/59","completion":"    $n = 3 * $n * $n - 2 * $n;\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/72","completion":"    if ($n % 4 != 2) {\n        return 1;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/76","completion":"    return ($m * ($m + 1) * (2 * $m + 1) \/ 6 + ($n - $m) * $m * ($m + 1) \/ 2);\n}","language":"perl"}
{"task_id":"MBPLP\/77","completion":"    return ($n % 11 == 0) ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/80","completion":"    return ($n * ($n + 1) * ($n + 2)) \/ 6;\n}","language":"perl"}
{"task_id":"MBPLP\/86","completion":"    $n = 3 * $n * ($n - 1) + 1;\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/103","completion":"    if ($m >= $n or $n == 0) {\n        return 0;\n    }\n    if ($m == 0) {\n        return 1;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}","language":"perl"}
{"task_id":"MBPLP\/139","completion":"    my $perimeter = 2*3.1415*$r;\n    return $perimeter;\n}","language":"perl"}
{"task_id":"MBPLP\/155","completion":"    my $res = 0;\n    my $count = 0;\n    my $temp = $n;\n    while ($temp > 0) {\n        if ($count % 2 == 1) {\n            $res = $res | (1 << $count);\n        }\n        $count = $count + 1;\n        $temp >>= 1;\n    }\n    return $n ^ $res;\n}","language":"perl"}
{"task_id":"MBPLP\/162","completion":"    if ($n < 1) {\n        return 0;\n    }\n    else {\n        $n = $n + sum_series($n - 2);\n        return $n;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/169","completion":"    if ($n <= 2) {\n        return $n;\n    }\n    $a = 1;\n    $b = 2;\n    for ($i = 3; $i <= $n; $i++) {\n        $c = 2 * $b + $a;\n        $a = $b;\n        $b = $c;\n    }\n    return $b;\n}","language":"perl"}
{"task_id":"MBPLP\/185","completion":"    $focus = $b \/ (2 * $a);\n    $focus = [\n        (-$b \/ (2 * $a)),\n        ((4 * $a * $c) - ($b * $b) + 1) \/ (4 * $a)\n    ];\n    return $focus;\n}","language":"perl"}
{"task_id":"MBPLP\/190","completion":"    return (($y2 - $y1 - 1) * ($x2 - $x1 - 1));\n}","language":"perl"}
{"task_id":"MBPLP\/194","completion":"    my $dec_value = 0;\n    my $base = 1;\n    my $temp = $n;\n    while ($temp) {\n        my $last_digit = $temp % 10;\n        $temp = $temp \/ 10;\n        $dec_value = $dec_value + $last_digit * $base;\n        $base = $base * 8;\n    }\n    return $dec_value;\n}","language":"perl"}
{"task_id":"MBPLP\/203","completion":"    $x = $n1 ^ $n2;\n    $setBits = 0;\n    while ($x > 0) {\n        $setBits += $x & 1;\n        $x >>= 1;\n    }\n    return $setBits;\n}","language":"perl"}
{"task_id":"MBPLP\/228","completion":"    my $num = ($r - 1) ^ ($l - 1);\n    my $new_num = $n & $num;\n    if ($new_num == 0) {\n        return 1;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/233","completion":"    my $lateral = 2 * 3.1415 * $r * $h;\n    return $lateral;\n}","language":"perl"}
{"task_id":"MBPLP\/235","completion":"    my $count = 0;\n    my $res = 0;\n    my $temp = $n;\n    while ($temp > 0) {\n        if ($count % 2 == 1) {\n            $res |= (1 << $count);\n        }\n        $count++;\n        $temp >>= 1;\n    }\n    return $n | $res;\n}","language":"perl"}
{"task_id":"MBPLP\/236","completion":"    if ($N < $K) {\n        return -1;\n    } else {\n        $Tri_up = 0;\n        $Tri_up = ($N - $K + 1) * ($N - $K + 2) \/ 2;\n        $Tri_down = 0;\n        $Tri_down = ($N - 2 * $K + 1) * ($N - 2 * $K + 2) \/ 2;\n        return $Tri_up + $Tri_down;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/238","completion":"    my $str_len = length($str);\n    return int($str_len * ($str_len + 1) \/ 2);\n}","language":"perl"}
{"task_id":"MBPLP\/260","completion":"    if ($n == 0 or $n == 1) {\n        return 1;\n    }\n    return 2 * newman_prime($n - 1) + newman_prime($n - 2);\n}","language":"perl"}
{"task_id":"MBPLP\/264","completion":"    if ($h_age < 0) {\n        exit;\n    }\n    elsif ($h_age <= 2) {\n        $d_age = $h_age * 10.5;\n    }\n    elsif ($h_age > 2) {\n        $d_age = 21 + ($h_age - 2) * 4;\n    }\n    return $d_age;\n}","language":"perl"}
{"task_id":"MBPLP\/266","completion":"    return 4 * ($l * $l);\n}","language":"perl"}
{"task_id":"MBPLP\/268","completion":"    $n = 6 * $n * ($n - 1) + 1;\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/271","completion":"    $sum = 0;\n    for (1; $n >= 1; $n--) {\n        $j = 2 * $n;\n        $sum = $sum + ($j * $j * $j * $j * $j);\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/276","completion":"    my $volume = 3.1415 * $r * $r * $h;\n    return $volume;\n}","language":"perl"}
{"task_id":"MBPLP\/279","completion":"    return 4 * $n * $n - 3 * $n;\n}","language":"perl"}
{"task_id":"MBPLP\/287","completion":"    return 2*$n*($n+1)*(2*$n+1)\/3;\n}","language":"perl"}
{"task_id":"MBPLP\/293","completion":"    my $s = sqrt($w * $w + $h * $h);\n    return $s;\n}","language":"perl"}
{"task_id":"MBPLP\/331","completion":"    my $count = 0;\n    my $x = 1;\n    while($x < $n + 1) {\n        if (($x & $n) == 0) {\n            $count++;\n        }\n        $x = $x << 1;\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/346","completion":"    if ($n == 0 && $k == 0) {\n        return 1;\n    }\n    if ($k == 0) {\n        return 0;\n    }\n    return zigzag($n, $k - 1) + zigzag($n - 1, $n - $k);\n}","language":"perl"}
{"task_id":"MBPLP\/347","completion":"    if ($n < $m) {\n        $temp = $m;\n        $m = $n;\n        $n = $temp;\n    }\n    return $n * ( $n + 1 ) * ( 3 * $m - $n + 1 ) \/ 6;\n}","language":"perl"}
{"task_id":"MBPLP\/360","completion":"    my $result = (2**$n) - 1;\n    return $result * $result - 2;\n}","language":"perl"}
{"task_id":"MBPLP\/369","completion":"    return 2*$h*$l + 2*$w*$h;\n}","language":"perl"}
{"task_id":"MBPLP\/383","completion":"    my $res = 0;\n    my $count = 0;\n    my $temp = $n;\n    while($temp > 0) {\n        if($count % 2 == 0) {\n            $res = $res | (1 << $count);\n        }\n        $count++;\n        $temp >>= 1;\n    }\n    return $n ^ $res;\n}","language":"perl"}
{"task_id":"MBPLP\/385","completion":"    if ($n == 0) {\n        return 3;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    return get_perrin($n - 2) + get_perrin($n - 3);\n}","language":"perl"}
{"task_id":"MBPLP\/389","completion":"    if ($n == 0) {\n        return 2;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    return find_lucas($n - 1) + find_lucas($n - 2);\n}","language":"perl"}
{"task_id":"MBPLP\/420","completion":"    my $sum = 0;\n    for (1; $n >= 1; $n--) {\n        $sum = $sum + (2*$n)*(2*$n)*(2*$n);\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/430","completion":"    my $directrix = $c - (($b * $b) + 1) * 4 * $a;\n    return $directrix;\n}","language":"perl"}
{"task_id":"MBPLP\/439","completion":"    my $x = join(\"\", @$L);\n    return $x;\n}","language":"perl"}
{"task_id":"MBPLP\/448","completion":"    $a = 3;\n    $b = 0;\n    $c = 2;\n    if ($n == 0) {\n        return 3;\n    }\n    if ($n == 1) {\n        return 3;\n    }\n    if ($n == 2) {\n        return 5;\n    }\n    $sum = 5;\n    while ($n > 2) {\n        $d = $a + $b;\n        $sum = $sum + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $n = $n - 1;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/482","completion":"    my $pattern = '[A-Z]+[a-z]+$';\n    return ($text =~ $pattern) ? 'Yes' : 'No';\n}","language":"perl"}
{"task_id":"MBPLP\/500","completion":"    $ans = ' ';\n    foreach my $i (@$list) {\n        $ans = $ans . ' ' . $i;\n    }\n    return $ans;\n}","language":"perl"}
{"task_id":"MBPLP\/511","completion":"    my $sum = 0;\n    my $i = 2;\n    while ($i * $i <= $num) {\n        while ($num % $i == 0) {\n            $sum += $i;\n            $num \/= $i;\n        }\n        $i++;\n    }\n    $sum += $num;\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/529","completion":"    my ($dp) = @_;\n    $dp[0] = 2;\n    $dp[1] = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        $dp[$i] = $dp[$i - 1] + 2 * $dp[$i - 2];\n    }\n    return $dp[$n];\n}","language":"perl"}
{"task_id":"MBPLP\/541","completion":"    my $sum = 0;\n    my $i = 1;\n    while ($i <= (sqrt($n))) {\n        if ($n % $i == 0) {\n            if ($n \/ $i == $i) {\n                $sum = $sum + $i;\n            } else {\n                $sum = $sum + $i;\n                $sum = $sum + ($n \/ $i);\n            }\n        }\n        $i = $i + 1;\n    }\n    $sum = $sum - $n;\n    if ($sum > $n) {\n        return 1;\n    } else {\n        return 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/549","completion":"    my $j = 0;\n    my $sm = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        $j = (2*$i-1);\n        $sm = $sm + ($j*$j*$j*$j*$j);\n    }\n    return $sm;\n}","language":"perl"}
{"task_id":"MBPLP\/574","completion":"    $surfacearea = ((2*3.1415*$r*$r) +(2*3.1415*$r*$h));\n    return $surfacearea;\n}","language":"perl"}
{"task_id":"MBPLP\/575","completion":"    my $count = 0;\n    for (my $i = $L; $i <= $R; $i++) {\n        if ($i % $A != 0) {\n            $count++;\n        }\n        if ($count == $N) {\n            return $i;\n        }\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/577","completion":"    if ($n == 0) {\n        return 1;\n    }\n    if ($n <= 2) {\n        return $n;\n    }\n    if ($n == 3) {\n        return 6;\n    }\n    if ($n == 4) {\n        return 4;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/626","completion":"    if ($r < 0) {\n        return -1;\n    }\n    return $r * $r;\n}","language":"perl"}
{"task_id":"MBPLP\/634","completion":"    my $sum = 0;\n    for (1; $n >= 1; $n--) {\n        my $j = 2 * $n;\n        $sum = $sum + ($j * $j * $j * $j);\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/639","completion":"    my $sum = 0;\n    foreach my $name (@$sample_names) {\n        if ($name =~ \/([A-Z][a-z]+)\/) {\n            $sum += length($name);\n        }\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/641","completion":"    $n = $n * (7 * $n - 5) \/ 2;\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/660","completion":"    my $x = $l1 < $l2 ? $l1 : $l2;\n    my $y = $r1 > $r2 ? $r1 : $r2;\n    return [$x, $y];\n}","language":"perl"}
{"task_id":"MBPLP\/677","completion":"    my $total = $a + $b + $c;\n    my $is_valid = $total == 180;\n    return $is_valid ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/683","completion":"    my $i = 1;\n    while ($i*$i <= $n) {\n        my $j = 1;\n        while ($j*$j <= $n) {\n            if ($i*$i+$j*$j == $n) {\n                return 1;\n            }\n            $j = $j+1;\n        }\n        $i = $i+1;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/713","completion":"    my $res = 0;\n    my @valid_values = (1, 0, 1, 1);\n    foreach my $v (@valid_values) {\n        if ($test_tup !~ $v) {\n            $res = 1;\n            break;\n        }\n    }\n    return $res;\n}","language":"perl"}
{"task_id":"MBPLP\/746","completion":"    my $pi = 22\/7;\n    if ($a >= 360) {\n        return \"none\";\n    }\n    return $pi*$r**2 * ($a\/360);\n}","language":"perl"}
{"task_id":"MBPLP\/748","completion":"    $str1 =~ s\/(\\w)([A-Z])\/\\1 \\2\/g;\n    return $str1;\n}","language":"perl"}
{"task_id":"MBPLP\/762","completion":"    if ($monthnum3 == 4 || $monthnum3 == 6 || $monthnum3 == 9 || $monthnum3 == 11) {\n        return 1;\n    } else {\n        return 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/770","completion":"    my $j = 0;\n    my $sm = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        $j = (2*$i-1);\n        $sm = $sm + ($j*$j*$j*$j);\n    }\n    return $sm;\n}","language":"perl"}
{"task_id":"MBPLP\/814","completion":"    return ($p * $q) \/ 2;\n}","language":"perl"}
{"task_id":"MBPLP\/837","completion":"    my $sum = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        $sum += (2 * $i + 1) * (2 * $i + 1) * (2 * $i + 1);\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/844","completion":"    my @arr = (0..$n);\n    my $odd = 1;\n    my $even = 2;\n    my $i = 0;\n    my $odd_index = 0;\n    my $even_index = 0;\n    while ($odd <= $n) {\n        $arr[$i] = $odd;\n        $i += 1;\n        $odd += 2;\n    }\n    while ($even <= $n) {\n        $arr[$i] = $even;\n        $i += 1;\n        $even += 2;\n    }\n    return $arr[$k - 1];\n}","language":"perl"}
{"task_id":"MBPLP\/849","completion":"    my ($SumOfPrimeDivisors) = @_;\n    for (my $i = 2; $i <= $N; $i++) {\n        if ($SumOfPrimeDivisors[$i] == 0) {\n            for (my $j = $i; $j <= $N; $j += $i) {\n                $SumOfPrimeDivisors[$j] += $i;\n            }\n        }\n    }\n    return $SumOfPrimeDivisors[$N];\n}","language":"perl"}
{"task_id":"MBPLP\/850","completion":"    my $result = 0;\n    if ($a != 0 and $b != 0 and $c != 0 and ($a + $b + $c) == 180) {\n        if (($a + $b) >= $c or ($b + $c) >= $a or ($a + $c) >= $b) {\n            $result = 1;\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/876","completion":"    if ($x > $y) {\n        $z = $x;\n    } else {\n        $z = $y;\n    }\n    while ($z > 0) {\n        if ($z % $x == 0 && $z % $y == 0) {\n            return $z;\n        }\n        $z++;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/879","completion":"    my $pattern = 'a.*?b$';\n    return ($text =~ $pattern) ? 'Found a match!' : 'Not matched!';\n}","language":"perl"}
{"task_id":"MBPLP\/884","completion":"    my $num = ((1 << $r) - 1) ^ ((1 << ($l - 1)) - 1);\n    my $new_num = $n & $num;\n    if ($num == $new_num) {\n        return 1;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/930","completion":"    my $pattern = 'ab*?';\n    return ($text =~ $pattern) ? 'Found a match!' : 'Not matched!';\n}","language":"perl"}
{"task_id":"MBPLP\/934","completion":"    if ($m == 0 or $n == 0) {\n        return 1;\n    }\n    return dealnnoy_num($m - 1, $n) + dealnnoy_num($m - 1, $n - 1) + dealnnoy_num($m, $n - 1);\n}","language":"perl"}
{"task_id":"MBPLP\/960","completion":"    my $result = 0;\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    $result = $result + get_noofways($n - 1);\n    $result = $result + get_noofways($n - 2);\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/5","completion":"    $A = 0;\n    $B = 0;\n    $A[0] = 1;\n    $A[1] = 0;\n    $B[0] = 0;\n    $B[1] = 1;\n    for (my $i = 2; $i <= $n; $i++) {\n        $A[$i] = $A[$i - 2] + 2 * $B[$i - 1];\n        $B[$i] = $A[$i - 1] + $B[$i - 2];\n    }\n    return $A[$n];\n}","language":"perl"}
{"task_id":"MBPLP\/19","completion":"    my $result = 0;\n\n    my $array_length = scalar $arraynums;\n    my $array_length_2 = scalar $arraynums + 1;\n\n    for my $i (1, $array_length_2) {\n        if ($result != 0) {\n            print \"Duplicate elements in array of $array_length elements are $_\";\n            print \"Exiting now...\";\n            exit;\n        }\n        if ($i != $array_length) {\n            $result = 1;\n        }\n    }\n    print $result;\n}","language":"perl"}
{"task_id":"MBPLP\/43","completion":"    $pattern = '^[a-z]+_[a-z]+$';\n    $matched = $text =~ m{$pattern};\n    if ($matched) {\n        $matched_str = \"Found a match!\";\n    }\n    else {\n        $matched_str = \"Not matched!\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/48","completion":"    my $count = 0;\n    my $res = 0;\n    my $temp = $n;\n    while ($temp != 0) {\n        if ($count % 2 == 0) {\n            $res |= (1 << $count);\n        }\n        $count += 1;\n        $temp >>= 1;\n    }\n    return $n | $res;\n}","language":"perl"}
{"task_id":"MBPLP\/107","completion":"    if ($L > $R) { return 0; }\n    if ($L <= $R) {\n        my $counter = 0;\n        for (1; $L <= $R; $L++) {\n            if ($L >= 10 && $L <= 15) { $counter++; }\n            if ($L > 15) {\n                my $k = $L;\n                while ($k != 0) {\n                    if ($k % 16 >= 10) { $counter++; }\n                    $k = $k \/ 16;\n                }\n            }\n        }\n        return $counter;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/119","completion":"    my $XOR = 0;\n    foreach my $i (@$arr) {\n        $XOR = $XOR ^ $i;\n    }\n    return $XOR;\n}","language":"perl"}
{"task_id":"MBPLP\/136","completion":"    if($units < 50) {\n        $amount = $units * 2.60;\n        $surcharge = 25;\n    }\n    elsif($units <= 100) {\n        $amount = 130 + ($units - 50) * 3.25;\n        $surcharge = 35;\n    }\n    elsif($units <= 200) {\n        $amount = 130 + 162.50 + ($units - 100) * 5.26;\n        $surcharge = 45;\n    }\n    else {\n        $amount = 130 + 162.50 + 526 + ($units - 200) * 8.45;\n        $surcharge = 75;\n    }\n\n    $total = $amount + $surcharge;\n    return $total;\n}","language":"perl"}
{"task_id":"MBPLP\/148","completion":"    $A = $N;\n    $ans1 = 0;\n    $ans2 = 0;\n    while ($A != 0) {\n        $ans1 = $ans1 + $A % 10;\n        $A \/= 10;\n    }\n    $N = $N - $ans1;\n    while ($N != 0) {\n        $ans2 = $ans2 + $N % 10;\n        $N \/= 10;\n    }\n    return $ans2 + $ans1;\n}","language":"perl"}
{"task_id":"MBPLP\/151","completion":"    my ($a, $b, $d) = @_;\n    my ($t1, $t2, $t3) = @_;\n    my ($gcd, $result) = @_;\n\n    if ($a > $b)\n    {\n        $t1 = $a;\n        $t2 = $b;\n        $t3 = ($t1 > $t2)? $t1 : $t2;\n    }\n    else\n    {\n        $t2 = $a;\n        $t3 = $b;\n        $t1 = ($t2 > $t3)? $t2 : $t3;\n    }\n    \n    $gcd = $t1 - $t2;\n    $result = ($gcd == $x - $y)? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/153","completion":"    $vertex = $b \/ (2 * $a);\n    return [ -$vertex, ((4 * $a * $c) - ($b * $b)) \/ (4 * $a) ];\n}","language":"perl"}
{"task_id":"MBPLP\/177","completion":"    if (2 * $L <= $R) {\n        return [ $L, 2 * $L ];\n    }\n    else {\n        return [ -1 ];\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/210","completion":"    my ($str_char) = $string =~ m\/[^a-zA-Z0-9]\/i;\n    return $str_char ? 0 : 1;\n}","language":"perl"}
{"task_id":"MBPLP\/226","completion":"    my @result;\n    for (my $i = 0; $i < length($str); $i = $i + 2) {\n        push @result, substr($str, $i, 1);\n    }\n    return join '', @result;\n}","language":"perl"}
{"task_id":"MBPLP\/267","completion":"    return $n *(4 * $n * $n - 1) \/ 3;\n}","language":"perl"}
{"task_id":"MBPLP\/274","completion":"    return 1 << ($n - 1);\n}","language":"perl"}
{"task_id":"MBPLP\/283","completion":"    my ($count) = 0;\n    my ($temp) = $n;\n    while ($temp > 0) {\n        if ($temp % 10 == 1) {\n            $count = 1 + $count;\n        }\n        if ($count > 1) {\n            return 0;\n        }\n        $temp = $temp \/ 10;\n    }\n    return 1;\n}","language":"perl"}
{"task_id":"MBPLP\/288","completion":"    my $modular_inverse_count = 0;\n\n    foreach my $element (@$arr) {\n        if ($element * $element % $P == 1) {\n            $modular_inverse_count += 1;\n        }\n    }\n\n    return $modular_inverse_count;\n}","language":"perl"}
{"task_id":"MBPLP\/311","completion":"    my ($pos) = 0;\n    my ($temp) = $n;\n    my ($count) = 0;\n    while ($temp) {\n        if (!($temp & 1)) {\n            $pos = $count;\n        }\n        $count += 1;\n        $temp>>=1;\n    }\n    $n = $n | (1 << $pos);\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/312","completion":"    my $pi = 3.1415926535897932384626433832795;\n    my $volume = ($pi \/ 3) * ($r * $r) * $h;\n    return $volume;\n}","language":"perl"}
{"task_id":"MBPLP\/318","completion":"    my $i = 1;\n    my $max = 0;\n    while ($i <= $s - 1) {\n        my $j = 1;\n        while ($j <= $s) {\n            my $k = $s - $i - $j;\n            if ($i * $j * $k > $max) {\n                $max = $i * $j * $k;\n            }\n            $j++;\n        }\n        $i++;\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/336","completion":"    if ($monthname1 eq \"February\") {\n        return 1;\n    } else {\n        return 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/337","completion":"    my ($ret) = '';\n\n    my $patterns = '\\w+\\S*$';\n\n    if (substr($text, -$patterns) =~ m{$patterns}) {\n        $ret = \"Found a match!\";\n    } else {\n        $ret = \"Not matched!\";\n    }\n\n    return $ret;\n}","language":"perl"}
{"task_id":"MBPLP\/344","completion":"    return (int($m**0.5) - int(($n - 1)**0.5));\n}","language":"perl"}
{"task_id":"MBPLP\/396","completion":"    $valid = ( $string =~ \/^[a-z]$\/ );\n    $valid ||= ( $string =~ \/^([a-z]).*\\1$\/ );\n    return $valid ? 'Valid' : 'Invalid';\n}","language":"perl"}
{"task_id":"MBPLP\/459","completion":"    $str1 =~ s\/([A-Z])\/\/g;\n    $str1;\n}","language":"perl"}
{"task_id":"MBPLP\/489","completion":"    my ($largest, $count) = 0;\n    my ($freq, $largest_count) = 0;\n    for my $n_arr (sort @$arr) {\n        if ($n_arr > $largest) {\n            $largest = $n_arr;\n            $largest_count = 1;\n        }\n        elsif ($n_arr == $largest) {\n            $largest_count += 1;\n        }\n    }\n    return $largest_count;\n}","language":"perl"}
{"task_id":"MBPLP\/497","completion":"    my $l = sqrt($r * $r + $h * $h);\n    my $SA;\n    my $PI = 3.141592653589793238462643383279502884197169399375105820974944592307816406286;\n    $SA = $PI * $r * ($r + $l);\n    return $SA;\n}","language":"perl"}
{"task_id":"MBPLP\/515","completion":"\t$sum = 0;\n\tfor ($i = 0; $i < $n; $i++){\n\t\tif ($sum % $m == 0){\n\t\t\tprint 1;\n\t\t\texit;\n\t\t}\n\t\t$sum += $arr[$i];\n\t}\n\tprint 0;\n}","language":"perl"}
{"task_id":"MBPLP\/525","completion":"    return $line1->[0] \/ $line1->[1] == $line2->[0] \/ $line2->[1] ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/593","completion":"    $ip =~ s\/0*(.)\/\\1\/g;\n    return $ip;\n}","language":"perl"}
{"task_id":"MBPLP\/608","completion":"    my ($bell) = (0..$n+1);\n    my ($i) = 1;\n    my ($j) = 1;\n\n    $bell[0][0] = 1;\n\n    for ($i = 1; $i <= $n; $i++) {\n        $bell[$i][0] = $bell[$i-1][$i-1];\n        for ($j = 1; $j <= $i; $j++) {\n            $bell[$i][$j] = $bell[$i-1][$j-1] + $bell[$i][$j-1];\n        }\n    }\n    return $bell[$n][0];\n}","language":"perl"}
{"task_id":"MBPLP\/617","completion":"    #$d < $b;\n    if($d >= $b) {\n        return ($d + $b - 1) \/ $b;\n    }\n    if($d == 0) {\n        return 0;\n    }\n    if($d == $a) {\n        return 1;\n    }\n    else {\n        return 2;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/649","completion":"    my $sum_range = 0;\n    my $i = 0;\n    foreach my $x (@$nums) {\n        if ($i >= $m && $i <= $n) {\n            $sum_range = $sum_range + $x;\n        }\n        $i = $i + 1;\n    }\n    return $sum_range;\n}","language":"perl"}
{"task_id":"MBPLP\/657","completion":"    my ($fact) = 1;\n    my ($i) = 1;\n    while ($i <= $n) {\n        $fact = $fact * $i;\n        $i = $i + 1;\n        while ($fact % 10 == 0) {\n            $fact = int($fact \/ 10);\n        }\n    }\n    while ($fact >= 10) {\n        $fact = int($fact \/ 10);\n    }\n    return $fact;\n}","language":"perl"}
{"task_id":"MBPLP\/742","completion":"    my $area = sqrt(3) * $side * $side;\n    return $area;\n}","language":"perl"}
{"task_id":"MBPLP\/752","completion":"    $dp = @_;\n\n    $dp[0] = 0;\n    $dp[1] = 1;\n    for ($i = 2; $i <= $n; ++$i) {\n        $dp[$i] = $dp[$i - 1] + 2 * $dp[$i - 2];\n    }\n    return $dp[$n];\n}","language":"perl"}
{"task_id":"MBPLP\/761","completion":"    my $pi = 22\/7;\n    my $arclength;\n    if ($a >= 360) {\n        return \"none\";\n    }\n    $arclength = $pi * $d * ($a \/ 360);\n    return $arclength;\n}","language":"perl"}
{"task_id":"MBPLP\/790","completion":"    my $even_count = 0;\n    my %i;\n\n    for (@_){\n        if ($even_count == $@[0]) {\n            print $even_count;\n            exit;\n        }\n\n        if ($@[$i] % 2 == $@[$i-1] % 2) {\n            $even_count++;\n        }\n    }\n    print $even_count;\n}","language":"perl"}
{"task_id":"MBPLP\/800","completion":"    $text =~ s\/ \/\/g;\n    return $text;\n}","language":"perl"}
{"task_id":"MBPLP\/818","completion":"    return (\n            $str =~ s\/\\p{Lower}\/\\p{Ll}\/g\n            );\n}","language":"perl"}
{"task_id":"MBPLP\/842","completion":"    my $max;\n    my @count;\n    my $count = 0;\n    for my $item (@$arr) {\n        $count++;\n        if ($count % 2 != 0) {\n            if ($item > $max) {\n                $max = $item;\n            }\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/880","completion":"    my $r = $b * $b - 4 * $a * $c;\n    return $r > 0 ? \"2 solutions\" : $r == 0 ? \"1 solution\" : \"No solutions\";\n}","language":"perl"}
{"task_id":"MBPLP\/881","completion":"    my @n_even;\n    my @n_odd;\n\n    foreach my $n (@$list1) {\n        if ($n%2 == 0) {\n            push @n_even, $n;\n        } else {\n            push @n_odd, $n;\n        }\n    }\n\n    if (@n_even) {\n        return (@n_even[0] + @n_odd[0]);\n    } else {\n        return (@n_even[0]);\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/900","completion":"    my $num = substr($string, 0, 1);\n    if ($num =~ \/5\/) {\n        return 1;\n    } else {\n        return 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/908","completion":"    my $i = 0;\n    my $next_element;\n\n    for (my $j = 0; $j < $n; $j++) {\n        $next_element = $arr[$j];\n\n        if ($next_element - $i != 1) {\n            print \"There is no fixed point\";\n            exit;\n        }\n\n        $i = $next_element;\n    }\n    print \"$next_element\";\n}","language":"perl"}
{"task_id":"MBPLP\/917","completion":"    if ($text =~ \/[A-Z]+[a-z]+$\/) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/955","completion":"    return $n > 1 + $n % 2 * 3 * 5 * 7 * 11 * 13 ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/957","completion":"    my $first_set_bit_pos = 0;\n    my $bit;\n    for ($bit = $n & -$n; $bit != 0; $bit >>= 1) {\n        if ($bit) {\n            ++$first_set_bit_pos;\n        }\n    }\n    return $first_set_bit_pos;\n}","language":"perl"}
{"task_id":"MBPLP\/963","completion":"    my $discriminant = ($y**2) - (4*$x*$z);\n    if ($discriminant > 0)\n    {\n        $result = [\n            \"Two solutions\",\n            $discriminant\n        ];\n    }\n    elsif ($discriminant == 0)\n    {\n        $result = [\n            \"one solution\",\n            $discriminant\n        ];\n    }\n    elsif ($discriminant < 0)\n    {\n        $result = [\n            \"no real solution\",\n            $discriminant\n        ];\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/1","completion":"    my $min = $cost[$m][$n];\n    my @path = [0, $n];\n    for ($i = $m - 1; $i >= 0; $i--) {\n        my $prev = $path;\n        my $cur = $i;\n        my $next = $cost[$i][$n];\n        $path = $prev + $next;\n        if ($next < $min) {\n            $min = $next;\n        }\n    }\n    return $min;\n}","language":"perl"}
{"task_id":"MBPLP\/2","completion":"    my ($result, $count) = @_;\n\n    $count = 0;\n    foreach my $item1 (@$test_tup1) {\n        foreach my $item2 (@$test_tup2) {\n            if ($item1 == $item2) {\n                $count++;\n            }\n        }\n    }\n\n    $result = [\n        $test_tup1,\n        $test_tup2,\n        $count\n    ];\n}","language":"perl"}
{"task_id":"MBPLP\/4","completion":"    my $heap = @_;\n    my $heap_size = $n;\n    my $heap_size_max = $n;\n    my $heap_size_min = $n;\n    my $heap_size_min_index = 0;\n    my $heap_size_max_index = 0;\n\n    for my $i = 0; $i < $n; $i++) {\n        push $heap, $nums[$i];\n        if ($heap_size > 1) {\n            if ($heap[0] > $heap[1]) {\n                shift $heap, $heap_size_min_index;\n                shift $heap, $heap_size_max_index;\n                push $heap, $nums[$i];\n                shift $heap, $heap_size_min_index;\n                shift $heap, $heap_size_max_index;\n            }\n        }\n       ","language":"perl"}
{"task_id":"MBPLP\/6","completion":"    return $a ^ $b;\n}","language":"perl"}
{"task_id":"MBPLP\/7","completion":"    my $pattern = \"([a-zA-Z]+)\";\n    my $result = $text =~ s\/\\b(\\w{4,})\\b\/g;\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/8","completion":"    $nums = map { $_ -> $_ * $_ } @_;\n    return $nums;\n}","language":"perl"}
{"task_id":"MBPLP\/9","completion":"    my $rotations = 0;\n    for my $i (1; $i < strlen($str); $i++) {\n        $rotations = $rotations + strlen($str) - $i;\n        $rotations = $rotations % strlen($str);\n    }\n    return $rotations;\n}","language":"perl"}
{"task_id":"MBPLP\/10","completion":"    my ($list2, $n) = @_;\n    my ($list3, $n) = @_;\n    my ($list4, $n) = @_;\n    my ($list5, $n) = @_;\n    my ($list6, $n) = @_;\n    my ($list7, $n) = @_;\n    my ($list8, $n) = @_;\n    my ($list9, $n) = @_;\n    my ($list10, $n) = @_;\n    my ($list11, $n) = @_;\n    my ($list12, $n) = @_;\n    my ($list13, $n) = @_;\n    my ($list14, $n) = @_;\n    my ($list15, $n) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/11","completion":"    $s =~ s\/^(.)$\/\/;\n    $s =~ s\/^(.)$\/$1\/;\n    return $s;\n}","language":"perl"}
{"task_id":"MBPLP\/12","completion":"    my ($M_sum) = @_;\n    my ($M_sorted) = @_;\n\n    for my $i (0..$M->{#}) {\n        my ($M_sum[$i]) = 0;\n        for my $j (0..$M->{#}) {\n            $M_sum[$i] += $M[$i][$j];\n        }\n        $M_sorted[$i] = $M[$i];\n        for my $j (0..$M->{#}) {\n            if ($M_sum[$i] > $M_sum[$j]) {\n                $M_sorted[$i] = $M[$j];\n                $M_sum[$i] = $M_sum[$j];\n            }\n        }\n    }\n    return $M_sorted;\n}","language":"perl"}
{"task_id":"MBPLP\/13","completion":"    my @counts = @_;\n    my @common = @_;\n    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $word2 (@words) {\n            if ($word == $word2) {\n                $count++;\n            }\n        }\n        push @counts, [$word, $count];\n        if ($count > $common[0]) {\n            @common = [$word, $count];\n        }\n    }\n    return @counts, @common;\n}","language":"perl"}
{"task_id":"MBPLP\/15","completion":"    my ($letters) = split \/([a-z])\/;\n    $letters = map { $_ => $_ } $letters;\n    return $letters;\n}","language":"perl"}
{"task_id":"MBPLP\/18","completion":"    my @result = ();\n    my $index = 0;\n    while ($index < $string) {\n        if ($second_string =~ m\/^$string[$index]\/\/) {\n            $result[] = $string[$index];\n        }\n        ++$index;\n    }\n    return join \"\", @result;\n}","language":"perl"}
{"task_id":"MBPLP\/21","completion":"    my @result = ();\n\n    for (my $i = 1; $i <= $m; $i++) {\n        if ($i % $n == 0) {\n            push @result, $i;\n        }\n    }\n\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/24","completion":"    my ($decimal) = 0;\n    for my $i (0..3) {\n        $decimal = $decimal * 2 + $binary[$i];\n    }\n    return $decimal;\n}","language":"perl"}
{"task_id":"MBPLP\/27","completion":"    my @result = ();\n\n    foreach my $item (@$list) {\n        $result = $result { $_ };\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/30","completion":"    my ($n) = 0;\n    for my $i (1, $s) {\n        for my $j (1, $s) {\n            if ($i == $j) {\n                continue;\n            }\n            if ($s =~ m\/^(.).*\\1$\/) {\n                $n++;\n            }\n        }\n    }\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/31","completion":"    my $counts = {};\n    $nums = map { $counts{$_.$}++ } @$nums;\n    $counts = sort keys %$counts;\n    $counts = sort keys %$counts;\n    $counts = sort keys %$counts;\n    $counts = sort keys %$counts;\n    $counts = sort keys %$counts;\n    $counts = sort keys %$counts;\n    $counts = sort keys %$counts;\n    $counts = sort keys %$counts;\n    $counts = sort keys %$counts;\n    $counts = sort keys %$counts;\n    $counts = sort keys %$counts;\n    $counts = sort keys %$counts;\n    $counts = sort keys %$counts;\n    $counts = sort keys %$counts;\n    $counts = sort keys %$counts;\n    $counts = sort keys %","language":"perl"}
{"task_id":"MBPLP\/33","completion":"    my ($binary) = 0;\n    for ($i = 0; $i < $N; $i++) {\n        if ($N - $i >= 0) {\n            $binary .= $N - $i;\n        } else {\n            $binary .= $binary . 2 ** ($N - $i);\n        }\n    }\n    return $binary;\n}","language":"perl"}
{"task_id":"MBPLP\/34","completion":"    $N = $N + 1;\n    $N = $N - $ar[0];\n    for ($i = 1; $i < $ar; $i++) {\n        if ($ar[$i] != $ar[$i - 1] + 1) {\n            $N = $N - $ar[$i - 1] - 1;\n        }\n    }\n    return $N;\n}","language":"perl"}
{"task_id":"MBPLP\/36","completion":"    my $n = 0;\n    my $d = 0;\n    while ($n < $N) {\n        $d = ($d * 10) + $p;\n        $n++;\n        $p = $q;\n        $q = $n;\n    }\n    return $d;\n}","language":"perl"}
{"task_id":"MBPLP\/37","completion":"    my ($mixed_list_length) = length $mixed_list;\n\n    my ($mixed_list_sorted) = @_;\n\n    for my $i (1; $i < $mixed_list_length; $i++) {\n        my ($value) = $mixed_list[$i];\n\n        if (is_string($value)) {\n            $mixed_list_sorted[$i] = $value;\n        } else {\n            $mixed_list_sorted[$i] = $value - 0;\n        }\n    }\n\n    return $mixed_list_sorted;\n}","language":"perl"}
{"task_id":"MBPLP\/39","completion":"    my $n = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my ","language":"perl"}
{"task_id":"MBPLP\/40","completion":"    my ($freq) = @_;\n\n    my $i = 0;\n    while ($i < scalar $nums) {\n        my $j = 0;\n        while ($j < scalar $nums) {\n            if ($nums[$i][$j] == $nums[$j][$i]) {\n                $freq[$nums[$i][$j]]++;\n            }\n            $j++;\n        }\n        $i++;\n    }\n\n    return $freq;\n}","language":"perl"}
{"task_id":"MBPLP\/41","completion":"    my ($even_nums) = map { $_ | $_ % 2 == 0 } @_;\n    return $even_nums;\n}","language":"perl"}
{"task_id":"MBPLP\/42","completion":"    my $sum = 0;\n    my @counts = @_;\n    foreach my $x (@counts) {\n        if ($x > 1) {\n            $sum += $x * $n;\n        }\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/46","completion":"    my $result = 0;\n    for my $i (0..$#data)\n    {\n        if ($data == $i)\n        {\n            $result = 1;\n            break;\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/49","completion":"    my @result = [];\n    for my $i (0..$N) {\n        if ($i == $N) {\n            push @result, $nums[$i];\n        } else {\n            push @result, $nums[$i][$N];\n        }\n    }\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/50","completion":"    my ($min_length, $min_list) = (0, []);\n\n    foreach my $item (@$input_list) {\n        if ($item->length < $min_length) {\n            $min_length = $item->length;\n            $min_list = $item;\n        }\n    }\n\n    return $min_list;\n}","language":"perl"}
{"task_id":"MBPLP\/53","completion":"    my ($first, $last) = @_;\n\n    if ($first == $last) {\n        return \"Equal\";\n    } else {\n        return \"Not Equal\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/54","completion":"    my ($count_list) = @_;\n\n    my ($count_list_length) = 0;\n    for ($i = 0; $i < $count_list; $i++) {\n        $count_list_length[$i] = 0;\n    }\n\n    for ($i = 0; $i < $my_list; $i++) {\n        $count_list_length[$my_list[$i]]++;\n    }\n\n    for ($i = 1; $i < $count_list_length; $i++) {\n        $count_list_length[$i] += $count_list_length[$i - 1];\n    }\n\n    for ($i = $my_list - 1; $i >= 0; $i--) {\n        $count_list[$count_list_length[$my_list[$i]]] = $my_list[$i];\n        $","language":"perl"}
{"task_id":"MBPLP\/55","completion":"    my $t = 0;\n    for (1..$n) {\n        $t = $t * $r + $a;\n    }\n    return $t;\n}","language":"perl"}
{"task_id":"MBPLP\/56","completion":"    $n =~ s\/\\d+\/$n\/2;\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/57","completion":"    $arr = sort { $arr[$_] <=> $arr[$_+1] };\n    return $arr[$n];\n}","language":"perl"}
{"task_id":"MBPLP\/60","completion":"    my $max = 0;\n    my $diff = 0;\n    my @subseq = ();\n\n    for (@arr) {\n        $diff = $arr - $arr - 1;\n        if ($diff > $max) {\n            $max = $diff;\n            @subseq = $arr;\n        }\n    }\n\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/61","completion":"    my $count = 0;\n    while ($s =~ m\/\\d{$n}\/) {\n        ++$count;\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/62","completion":"    my ($min) = 0;\n    for my $x (@_){\n        if ($x < $min) {\n            $min = $x;\n        }\n    }\n    return $min;\n}","language":"perl"}
{"task_id":"MBPLP\/64","completion":"    my ($subject, $marks) = @_;\n    $subjectmarks = sort { $marks <=> $subject } $subjectmarks;\n    return $subjectmarks;\n}","language":"perl"}
{"task_id":"MBPLP\/65","completion":"    my ($sum) = 0;\n    foreach my $item (@$data_list) {\n        if (isa $item [] {}) {\n            $sum += recursive_list_sum($item);\n        } else {\n            $sum += $item;\n        }\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/67","completion":"    my ($m) = @_;\n    my ($res) = 0;\n    for (1..$n) {\n        for (1..$m) {\n            if ($res < $n) {\n                $res = $res + bell_number($n - 1) * bell_number($m - 1);\n            }\n        }\n    }\n    return $res;\n}","language":"perl"}
{"task_id":"MBPLP\/69","completion":"    my @_ = 0;\n    for my $i (0..$l) {\n        if ($l =~ \/$s\/) {\n            $_ = 1;\n            break;\n        }\n    }\n    return $_;\n}","language":"perl"}
{"task_id":"MBPLP\/70","completion":"    my @Output;\n    my @Output2;\n    my $Output = $Output2;\n    my $Output2 = @Output;\n    for my $i (0..$k) {\n        my $Output = $Output2;\n        my $Output2 = @Output;\n        my $Output2 = $Output2 + $Input[$i];\n    }\n    if ($Output2 == $Input) {\n        return \"All tuples have same length\";\n    } else {\n        return \"All tuples do not have same length\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/71","completion":"    my ($n) = 0;\n    my ($i) = 0;\n    my ($j) = 0;\n    my ($k) = 0;\n    my ($n1) = 0;\n    my ($n2) = 0;\n    my ($n3) = 0;\n    my ($n4) = 0;\n    my ($n5) = 0;\n    my ($n6) = 0;\n    my ($n7) = 0;\n    my ($n8) = 0;\n    my ($n9) = 0;\n    my ($n10) = 0;\n    my ($n11) = 0;\n    my ($n12) = 0;\n    my ($n13) = 0;\n    my ($n14) = 0;\n    my ($n15) = 0;\n    my ($n16) = 0;\n","language":"perl"}
{"task_id":"MBPLP\/73","completion":"    my ($delimiters) = @_;\n    my ($result) = @_;\n\n    $result =~ s\/\\s*$\/\/g;\n    $result =~ s\/\\s+\/ \/ \/g;\n    $result =~ s\/\\s*$\/\/g;\n    $result =~ s\/\\s*\/ \/g;\n    $result =~ s\/\\s*$\/\/g;\n    $result =~ s\/\\s*\/ \/g;\n    $result =~ s\/\\s*$\/\/g;\n    $result =~ s\/\\s*\/ \/g;\n    $result =~ s\/\\s*$\/\/g;\n    $result =~ s\/\\s*\/ \/g;\n    $result =~ s\/\\s*$\/\/g;\n    $result =~ s\/\\s*\/ \/g;\n    $result =~ s\/\\s*$\/\/g;\n    $result =~ s\/\\s*\/ \/g;\n    $","language":"perl"}
{"task_id":"MBPLP\/74","completion":"    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $result = 0;\n    while ($i < scalar $colors) {\n        if ($patterns[$j] == $colors[$i]) {\n            $result = 1;\n            $i = $i + 1;\n            $j = $j + 1;\n        } else {\n            $result = 0;\n            $i = $i + 1;\n        }\n        if ($j == scalar $patterns) {\n            $j = 0;\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/75","completion":"    my @tuples = ();\n\n    foreach my $tuple (@$test_list) {\n        if (0 == $tuple[0] % $K) {\n            push @tuples, $tuple;\n        }\n    }\n\n    return @tuples;\n}","language":"perl"}
{"task_id":"MBPLP\/81","completion":"    my @result = [];\n    my $i = 0;\n    while ($i < count($test_tup1)) {\n        my $j = 0;\n        while ($j < count($test_tup2)) {\n            push @result, [$test_tup1[$i], $test_tup2[$j]];\n            $j++;\n        }\n        $i++;\n    }\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/83","completion":"    my ($str) = $strr;\n    my ($str_len) = length $str;\n    my ($sum) = 0;\n    for my $i (0..$str_len)\n    {\n        $sum = $sum + $str[$i];\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/84","completion":"    my ($i, $j) = @_;\n    my ($n1, $n2) = @_;\n    my ($i1, $i2) = @_;\n    my ($j1, $j2) = @_;\n    if ($n1 == $n2) {\n        return $n1;\n    }\n    if ($i1 == $i2) {\n        return $i1;\n    }\n    if ($j1 == $j2) {\n        return $j1;\n    }\n    if ($i1 == $j1 || $i1 == $j2 || $j1 == $i2 || $j2 == $i1) {\n        return $i1 + $j1;\n    }\n    return $i1 + $j2;\n}","language":"perl"}
{"task_id":"MBPLP\/87","completion":"    my $merged = {};\n    foreach my $key (sort keys %{$dict1}) {\n        if ($dict1[$key] == $dict2[$key]) {\n            $merged[$key] = $dict1[$key];\n        }\n        else {\n            $merged[$key] = $dict1[$key] ?? $dict2[$key] ?? $dict3[$key];\n        }\n    }\n    return $merged;\n}","language":"perl"}
{"task_id":"MBPLP\/88","completion":"    my ($freq) = {};\n    my ($max) = 0;\n    for (@$list1) {\n        if ($freq[$list1]++ > $max) {\n            $max = $freq[$list1];\n        }\n    }\n    return $freq;\n}","language":"perl"}
{"task_id":"MBPLP\/92","completion":"    $n =~ s\/\\D\/g;\n    return $n ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/94","completion":"    my ($min_index, $min_value) = (0, $test_list[0]);\n    for (my $i = 1; $i < scalar $test_list; $i++) {\n        if ($test_list[$i][1] < $min_value) {\n            $min_index = $i;\n            $min_value = $test_list[$i][1];\n        }\n    }\n    return scalar $min_index;\n}","language":"perl"}
{"task_id":"MBPLP\/95","completion":"    my ($min, $len) = 0;\n    foreach my $item (@$lst)\n    {\n        $len = 0;\n        foreach my $sub (@$item)\n        {\n            $len++;\n        }\n        if ($len < $min)\n        {\n            $min = $len;\n        }\n    }\n    return $min;\n}","language":"perl"}
{"task_id":"MBPLP\/97","completion":"    my ($list2) = @_;\n    my ($list3) = @_;\n\n    my ($freq1) = {};\n    my ($freq2) = {};\n    my ($freq3) = {};\n\n    foreach my $item1 (@$list1) {\n        my ($freq1[$item1]) = $freq1[$item1] + 1 || 1;\n    }\n\n    foreach my $item2 (@$list2) {\n        my ($freq2[$item2]) = $freq2[$item2] + 1 || 1;\n    }\n\n    foreach my $item3 (@$list3) {\n        my ($freq3[$item3]) = $freq3[$item3] + 1 || 1;\n    }\n\n    return {\n        $freq1,\n        $freq2,\n        $freq3\n    };\n}","language":"perl"}
{"task_id":"MBPLP\/98","completion":"    my $length = 0;\n    foreach my $number (@$numbers) {\n        $length += 1;\n        $number *= $length;\n    }\n    return $number;\n}","language":"perl"}
{"task_id":"MBPLP\/99","completion":"    $n =~ s\/\\.\/g;\n    $n =~ s\/\\\/\/g;\n    $n =~ s\/0\/1;\n    $n =~ s\/1\/0;\n    $n =~ s\/10\/1;\n    $n =~ s\/11\/0;\n    $n =~ s\/100\/1;\n    $n =~ s\/101\/0;\n    $n =~ s\/1000\/1;\n    $n =~ s\/1001\/0;\n    $n =~ s\/10000\/1;\n    $n =~ s\/10001\/0;\n    $n =~ s\/100000\/1;\n    $n =~ s\/100001\/0;\n    $n =~ s\/1000000\/1;\n    $n =~ s\/1000001\/0;\n    $n =~ s\/10000000\/1;\n    $n =~ s\/10000001\/0;\n   ","language":"perl"}
{"task_id":"MBPLP\/100","completion":"    my ($palindrome, $palindrome_length) = @_;\n\n    if ($palindrome_length == 1) {\n        $palindrome = $num;\n        $palindrome_length = $num;\n    }\n\n    $palindrome = $palindrome + $palindrome;\n    $palindrome_length = $palindrome_length + $palindrome_length;\n\n    my ($start, $end) = @_;\n\n    $start = $start + $palindrome_length;\n    $end = $end - $palindrome_length;\n\n    $palindrome = substr($palindrome, $start, $end);\n\n    $palindrome_length = $end - $start;\n\n    return $palindrome;\n}","language":"perl"}
{"task_id":"MBPLP\/101","completion":"    my $i = 0;\n    my $j = 0;\n    my $res = 0;\n    while ($i < $n) {\n        if ($j == $k) {\n            return $res;\n        }\n        $res = $res + $arr[$i];\n        $i++;\n        $j++;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/102","completion":"    my $upper = $word[0];\n    for (@F) {\n        if ($word[0] =~ \/_[a-z]\/) {\n            $upper = $word[0] . $upper;\n        } else {\n            $upper = $upper . $word[0];\n        }\n    }\n    return $upper . $word[1];\n}","language":"perl"}
{"task_id":"MBPLP\/104","completion":"    my ($sorted_list) = @_;\n    foreach my $sub_list (@$input_list) {\n        sort $sub_list;\n        push @$sorted_list, $sub_list;\n    }\n    return $sorted_list;\n}","language":"perl"}
{"task_id":"MBPLP\/106","completion":"    my @result = ();\n\n    foreach my $item (@$test_list) {\n        push @result, $test_tup, $item;\n    }\n\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/108","completion":"    my $heap = new heap;\n    $heap->push_back($num1);\n    $heap->push_back($num2);\n    $heap->push_back($num3);\n    my $result = [];\n    while ($heap->size() > 0) {\n        $result[] = $heap->pop_back();\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/109","completion":"    $s =~ s\/([01]{1})\/$1\/g;\n    $s =~ s\/([01]{1})\/$1\/g;\n    $s =~ s\/([01]{1})\/$1\/g;\n    $s =~ s\/([01]{1})\/$1\/g;\n    $s =~ s\/([01]{1})\/$1\/g;\n    $s =~ s\/([01]{1})\/$1\/g;\n    $s =~ s\/([01]{1})\/$1\/g;\n    $s =~ s\/([01]{1})\/$1\/g;\n    $s =~ s\/([01]{1})\/$1\/g;\n    $s =~ s\/([01]{1})\/$1\/g;\n    $s =~ s\/([01]{1})\/$1\/g;\n    $s =~ s\/([01]{1})\/$1\/g;\n    $s","language":"perl"}
{"task_id":"MBPLP\/110","completion":"    my @missing_ranges = [];\n\n    my $start_index = 0;\n    my $end_index = 0;\n    my $current_index = 0;\n\n    while ($start_index < $test_list->size()) {\n        if ($start_index == $current_index) {\n            $start_index++;\n            $current_index++;\n            continue;\n        }\n\n        if ($current_index == $stop_val) {\n            $current_index++;\n            continue;\n        }\n\n        if ($current_index == $strt_val) {\n            $end_index = $current_index;\n            $current_index++;\n            continue;\n        }\n\n        if ($current_index > $strt_val && $current_index < $stop_val) {\n            $end_index = $current_index;\n            $current_index++;\n            continue;","language":"perl"}
{"task_id":"MBPLP\/111","completion":"    my @common = ();\n    my @common_count = 0;\n    foreach my $item (@nestedlist) {\n        my @common_count = 0;\n        foreach my $subitem (@$item) {\n            if ($subitem == $item) {\n                ++$common_count;\n            }\n        }\n        if ($common_count > 1) {\n            push @common, $item;\n        }\n    }\n    return @common;\n}","language":"perl"}
{"task_id":"MBPLP\/114","completion":"    my ($freq_list) = @_;\n    my ($tuple_list) = @_;\n    my ($tuple_list_size) = 0;\n    my ($tuple_list_size) = $tuple_list_size + 1;\n    my ($tuple_list_size) = $tuple_list_size + 1;\n    my ($tuple_list_size) = $tuple_list_size + 1;\n    my ($tuple_list_size) = $tuple_list_size + 1;\n    my ($tuple_list_size) = $tuple_list_size + 1;\n    my ($tuple_list_size) = $tuple_list_size + 1;\n    my ($tuple_list_size) = $tuple_list_size + 1;\n    my ($tuple_list_size) = $tuple_list_size + 1;\n    my ($tuple_list_size)","language":"perl"}
{"task_id":"MBPLP\/115","completion":"    my ($list2) = @_;\n    if ($list1 || $list2) {\n        return 0;\n    }\n    return 1;\n}","language":"perl"}
{"task_id":"MBPLP\/117","completion":"    my ($float_list) = @_;\n\n    my ($float_list_length) = scalar $float_list;\n\n    for my $i (0..$float_list_length) {\n        $float_list[$i] = scalar $float_list[$i];\n    }\n\n    for my $i (0..$float_list_length) {\n        for my $j (0..$float_list_length) {\n            if ($i != $j) {\n                if ($float_list[$i] < $float_list[$j]) {\n                    $float_list[$i] = $float_list[$i] + $float_list[$j];\n                    $float_list[$j] = $float_list[$i] - $float_list[$j];\n                    $float_list[$i] = $float_list[$i] - $float_list[$j];\n                }\n            ","language":"perl"}
{"task_id":"MBPLP\/118","completion":"    my ($list) = ();\n    $list = split \/\\s+\/;\n    return $list;\n}","language":"perl"}
{"task_id":"MBPLP\/121","completion":"    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = $n - 1;\n    my $sum = $sum - $A[0];\n    my $count = $count + 1;\n    my $found = 0;\n    while ($i < $n) {\n        while ($j < $n) {\n            while ($k < $n) {\n                while ($l < $n) {\n                    while ($m < $n) {\n                        if ($A[$i] + $A[$j] + $A[$k] + $A[$l] + $A[$m] == $sum) {\n                            $found = 1;\n                            print $i,","language":"perl"}
{"task_id":"MBPLP\/122","completion":"    my $sum = 0;\n    for (@seq { $i = 0; $i < $n; $i++ }) {\n        $sum += $i;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/123","completion":"    my $sum = 0;\n    my $max = $limit;\n    for my $a (1..$max)\n    {\n        if ($a != $a+$a)\n        {\n            $sum += $a;\n        }\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/125","completion":"    my $max = 0;\n    my @zeros = split \/\\b0\/;\n    my @ones = split \/\\b1\/;\n    for my $i (0..$n) {\n        my $diff = 0;\n        for my $j (0..$n) {\n            if ($string[$i + $j] == '0') {\n                $diff += $j;\n            }\n        }\n        if ($diff > $max) {\n            $max = $diff;\n        }\n    }\n    for my $i (0..$n) {\n        my $diff = 0;\n        for my $j (0..$n) {\n            if ($string[$i + $j] == '1') {\n                $diff += $j;\n            }\n        }\n        if ($diff > $max) {\n","language":"perl"}
{"task_id":"MBPLP\/128","completion":"    my @words = split \/\\s+\/;\n    my @result = [];\n    foreach my $word (@words) {\n        if (strlen $word) {\n            if (strlen $word > $n) {\n                push @result, $word;\n            }\n        }\n    }\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/129","completion":"    my ($magic_square_size) = 0;\n    my ($magic_square_sum) = 0;\n    my ($magic_square_matrix) = 0;\n    my ($magic_square_matrix_size) = 0;\n    my ($magic_square_matrix_sum) = 0;\n\n    $magic_square_size = $my_matrix[0] * $my_matrix[1];\n    $magic_square_matrix_size = $my_matrix[0] * $my_matrix[1];\n\n    $magic_square_matrix = $my_matrix;\n    $magic_square_matrix_sum = $my_matrix;\n\n    for ($i = 0; $i < $magic_square_matrix_size; $i++) {\n        for ($j = 0; $j < $magic_square_matrix_size; $j++) {\n            $magic_square_matrix[$i][$","language":"perl"}
{"task_id":"MBPLP\/130","completion":"    my ($max, $max_num) = @_;\n    my ($freq, $freq_num) = @_;\n    for (@_ = $nums) {\n        $freq = $freq + 1;\n        if ($freq > $max) {\n            $max = $freq;\n            $max_num = $nums;\n        }\n        $freq = 0;\n    }\n    return [$max_num, $max];\n}","language":"perl"}
{"task_id":"MBPLP\/131","completion":"    my ($str2) = '';\n    my ($str3) = '';\n    my ($str4) = '';\n    my ($str5) = '';\n    my ($str6) = '';\n    my ($str7) = '';\n    my ($str8) = '';\n    my ($str9) = '';\n    my ($str10) = '';\n    my ($str11) = '';\n    my ($str12) = '';\n    my ($str13) = '';\n    my ($str14) = '';\n    my ($str15) = '';\n    my ($str16) = '';\n    my ($str17) = '';\n    my ($str18) = '';\n    my ($str19) = '';\n    my ($str20) = '';\n    my ($str21) = '';\n    my ($str22) = '';\n    my ($","language":"perl"}
{"task_id":"MBPLP\/137","completion":"    my ($zeroes) = 0;\n    for (@_){\n        if ($_ == 0) {\n            ++$zeroes;\n        }\n    }\n    return $zeroes \/ $nums;\n}","language":"perl"}
{"task_id":"MBPLP\/140","completion":"    my @result = [];\n    my @temp_list;\n    my $temp_list_size = 0;\n    my $temp_list_size_max = 0;\n    my $temp_list_size_min = 0;\n    my $temp_list_size_max_index = 0;\n    my $temp_list_size_min_index = 0;\n    my $temp_list_size_max_value = 0;\n    my $temp_list_size_min_value = 0;\n\n    for my $temp_list_index = 0; $temp_list_index < scalar $test_list; $temp_list_index++) {\n        my $temp_list_value = scalar $test_list[$temp_list_index];\n        if ($temp_list_size == 0) {\n            $temp_list_size = scalar $temp_list_value;\n            $temp_list_size","language":"perl"}
{"task_id":"MBPLP\/141","completion":"    my ($n) = 0;\n    my ($i) = 0;\n    my ($j) = 0;\n    my ($k) = 0;\n    my ($n1) = 0;\n    my ($n2) = 0;\n    my ($n3) = 0;\n    my ($n4) = 0;\n    my ($n5) = 0;\n    my ($n6) = 0;\n    my ($n7) = 0;\n    my ($n8) = 0;\n    my ($n9) = 0;\n    my ($n10) = 0;\n    my ($n11) = 0;\n    my ($n12) = 0;\n    my ($n13) = 0;\n    my ($n14) = 0;\n    my ($n15) = 0;\n    my ($n16) = 0;\n","language":"perl"}
{"task_id":"MBPLP\/142","completion":"    my $count = 0;\n    foreach my $item1 (@$list1) {\n        foreach my $item2 (@$list2) {\n            foreach my $item3 (@$list3) {\n                if ($item1 == $item2 && $item2 == $item3) {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/143","completion":"    my ($ListCount, $ListLength) = 0;\n    my ($ListCount, $ListLength) = 0;\n    my ($ListCount, $ListLength) = 0;\n    my ($ListCount, $ListLength) = 0;\n    my ($ListCount, $ListLength) = 0;\n    my ($ListCount, $ListLength) = 0;\n    my ($ListCount, $ListLength) = 0;\n    my ($ListCount, $ListLength) = 0;\n    my ($ListCount, $ListLength) = 0;\n    my ($ListCount, $ListLength) = 0;\n    my ($ListCount, $ListLength) = 0;\n    my ($ListCount, $ListLength) = 0;\n    my ($ListCount, $ListLength) = 0;\n    my ($ListCount, $ListLength) = 0;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/144","completion":"    my $sum = 0;\n    my $i = 0;\n    while ($i < $n) {\n        my $j = $i + 1;\n        while ($j < $n) {\n            $sum += abs($arr[$i] - $arr[$j]);\n            $j++;\n        }\n        $i++;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/145","completion":"    my $max = 0;\n    foreach my $i (0 .. $n) {\n        my $abs = abs($arr[$i] - $arr[$i + 1]);\n        if ($abs > $max) {\n            $max = $abs;\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/147","completion":"    my $max = 0;\n    my @paths = @_;\n    for (@paths) {\n        my $sum = 0;\n        my @x = @_;\n        for (@x) {\n            my $y = @_;\n            for (@y) {\n                my $path = @_;\n                $sum += $path;\n            }\n        }\n        if ($sum > $max) {\n            $max = $sum;\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/149","completion":"    my $longest = 0;\n    my $start = 0;\n    my $end = 0;\n    my $diff = 0;\n    my $len = 0;\n    for (@arr) {\n        $len = length $arr;\n        if ($diff == 1) {\n            $longest = max($longest, $len);\n            $start = $end + 1;\n            $end = $start + $len;\n            $diff = 0;\n        } else {\n            $end = $end + 1;\n            $diff = $diff + 1;\n        }\n    }\n    return $longest;\n}","language":"perl"}
{"task_id":"MBPLP\/152","completion":"    my ($n) = 0;\n    my ($l) = 0;\n    my ($r) = 0;\n    my ($mid) = 0;\n    my ($i) = 0;\n    my ($j) = 0;\n    my ($k) = 0;\n    my ($m) = 0;\n    my ($n1) = 0;\n    my ($n2) = 0;\n    my ($n3) = 0;\n    my ($n4) = 0;\n    my ($n5) = 0;\n    my ($n6) = 0;\n    my ($n7) = 0;\n    my ($n8) = 0;\n    my ($n9) = 0;\n    my ($n10) = 0;\n    my ($n11) = 0;\n    my ($n12) = 0;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/154","completion":"    my @result = ();\n\n    for my $i (0..$N) {\n        for my $j (0..$N) {\n            if ($nums[$i][$j] == $N) {\n                push @result, $nums[$i][$j];\n            }\n        }\n    }\n\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/157","completion":"    my ($result) = @_;\n    for (@$list1) {\n        my ($count, $new_list) = @_;\n        for (@$new_list) {\n            $result[$count][0] = $new_list;\n            $result[$count][1] = $count;\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/158","completion":"    my $min_ops = 0;\n    my $max_ops = -1;\n    my $i = 0;\n    my $j = 0;\n    while ($i < $n) {\n        while ($j < $n) {\n            if ($arr[$i] == $arr[$j]) {\n                $min_ops += $k - 1;\n                $max_ops = $i + 1;\n                $j = $n;\n            } else {\n                $j++;\n            }\n        }\n        $i++;\n    }\n    return $min_ops > $max_ops ? $min_ops : $max_ops;\n}","language":"perl"}
{"task_id":"MBPLP\/159","completion":"    my $season = \"\";\n\n    if ($days < 32) {\n        if ($month == 1 || $month == 3 || $month == 5 || $month == 7 || $month == 8 || $month == 10 || $month == 12) {\n            $season = \"winter\";\n        } else if ($month == 2) {\n            $season = \"spring\";\n        } else {\n            $season = \"summer\";\n        }\n    } else {\n        if ($month == 4 || $month == 6 || $month == 9 || $month == 11) {\n            $season = \"winter\";\n        } else if ($month == 2) {\n            $season = \"spring\";\n        } else {\n            $season = \"summer\";\n        }","language":"perl"}
{"task_id":"MBPLP\/160","completion":"    my $x = 0;\n    my $y = 0;\n    if ($a > $b) {\n        $a = $b;\n        $b = $a;\n    }\n    for ($x = $a; $x <= $b; $x++) {\n        if ($n % $x == 0) {\n            $y = $n \/ $x;\n            print \"x = \", $x, \", y = \", $y;\n            return;\n        }\n    }\n    print \"No solution\";\n}","language":"perl"}
{"task_id":"MBPLP\/161","completion":"    my @result = [];\n    foreach my $element (@$list1) {\n        if (!in_array($element, @$list2)) {\n            push @result, $element;\n        }\n    }\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/163","completion":"    $a = $s * $l;\n    return $a;\n}","language":"perl"}
{"task_id":"MBPLP\/164","completion":"    my $sum = 0;\n    for my $i (1, $num1); $i <= $num2; $i++ {\n        if ($i % $num1 == 0) {\n            $sum += $i;\n        }\n    }\n    return $sum == $num1 * (1 + $num2) \/ 2;\n}","language":"perl"}
{"task_id":"MBPLP\/165","completion":"    my ($str2) = @_;\n    my ($str3) = @_;\n    my ($str4) = @_;\n    my ($str5) = @_;\n    my ($str6) = @_;\n    my ($str7) = @_;\n    my ($str8) = @_;\n    my ($str9) = @_;\n    my ($str10) = @_;\n    my ($str11) = @_;\n    my ($str12) = @_;\n    my ($str13) = @_;\n    my ($str14) = @_;\n    my ($str15) = @_;\n    my ($str16) = @_;\n    my ($str17) = @_;\n    my ($str18) = @_;\n    my ($str19) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/166","completion":"    my $even_count = 0;\n    my @pairs = @_;\n    for my $i (0..$N) {\n        if ($pairs[$i] & 1) {\n            $even_count++;\n        }\n    }\n    return $even_count;\n}","language":"perl"}
{"task_id":"MBPLP\/172","completion":"    my ($count) = 0;\n    $s =~ s\/\\bstd\\b\/g;\n    $s =~ s\/\\bstd\\b\/g;\n    $s =~ s\/\\bstd\\b\/g;\n    $s =~ s\/\\bstd\\b\/g;\n    $s =~ s\/\\bstd\\b\/g;\n    $s =~ s\/\\bstd\\b\/g;\n    $s =~ s\/\\bstd\\b\/g;\n    $s =~ s\/\\bstd\\b\/g;\n    $s =~ s\/\\bstd\\b\/g;\n    $s =~ s\/\\bstd\\b\/g;\n    $s =~ s\/\\bstd\\b\/g;\n    $s =~ s\/\\bstd\\b\/g;\n    $s =~ s\/\\bstd\\b\/g;\n    $s =~ s\/\\bstd\\b\/g;\n    $s =","language":"perl"}
{"task_id":"MBPLP\/173","completion":"    my @splchars = split \/\\W\/;\n    my $result = \"\";\n    foreach my $char (@splchars) {\n        $result .= $char;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/174","completion":"    my ($d) = {};\n    foreach my $k (@{ $l }) {\n        if (defined $d->{$k}) {\n            $d->{$k} = $d->{$k} { $l[$k] };\n        } else {\n            $d->{$k} = $l[$k];\n        }\n    }\n    return $d;\n}","language":"perl"}
{"task_id":"MBPLP\/175","completion":"    my ($str2) = @_;\n    if ($str1 =~ \/(\\(\\))\/) {\n        return 0;\n    }\n    if ($str2 =~ \/(\\[\\])\/) {\n        return 0;\n    }\n    return 1;\n}","language":"perl"}
{"task_id":"MBPLP\/179","completion":"    my ($n) = 0;\n    for my $i (1; $i <= $x; $i++) {\n        if ($i % 10 == 0) {\n            $n++;\n        }\n    }\n    if ($n % 2 == 0) {\n        return 1;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/180","completion":"    my $dlat = $slat - $elat;\n    my $dlon = $slon - $elon;\n    return $dlat * $dlat + $dlon * $dlon;\n}","language":"perl"}
{"task_id":"MBPLP\/181","completion":"    my $prefix = '';\n    my @lcp = '';\n    for (@arr) {\n        if ($prefix =~ m{$prefix}{$arr[$_]} && $prefix != '') {\n            $prefix = substr($prefix, 0, $n);\n            @lcp = $prefix;\n        }\n    }\n    return @lcp;\n}","language":"perl"}
{"task_id":"MBPLP\/182","completion":"    my ($upper) = @_;\n    my ($lower) = @_;\n    my ($special) = @_;\n    my ($numeric) = @_;\n    my ($result) = @_;\n\n    $result = $result || @_;\n\n    $upper =~ s\/([A-Z])\/\\1\/g;\n    $lower =~ s\/([a-z])\/\\1\/g;\n    $special =~ s\/([^a-zA-Z0-9])\/\\1\/g;\n    $numeric =~ s\/([0-9])\/\\1\/g;\n\n    $result = $result || $upper || $lower || $special || $numeric;\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/183","completion":"    my $result = 0;\n    my @pairs = map { $arr[$_] - $k } keys % $arr;\n    foreach my $pair (@pairs) {\n        if ($pair > 0) {\n            $result++;\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/184","completion":"    my @result;\n    for my $i (@$list) {\n        if ($i > $num) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/187","completion":"    $m = $m < 0 ? 0 : $m;\n    $n = $n < 0 ? 0 : $n;\n    my $LCS = 0;\n    my @LCS = 0;\n    my @LCS_i = 0;\n    my @LCS_j = 0;\n    my @LCS_k = 0;\n    my @LCS_l = 0;\n    my @LCS_m = 0;\n    my @LCS_n = 0;\n    my @LCS_o = 0;\n    my @LCS_p = 0;\n    my @LCS_q = 0;\n    my @LCS_r = 0;\n    my @LCS_s = 0;\n    my @LCS_t = 0;\n    my @LCS_u = 0;\n    my","language":"perl"}
{"task_id":"MBPLP\/193","completion":"    my @result = ();\n\n    foreach my $item (@$test_tup) {\n        if (index @result (@result => $item) == 0) {\n            @result = (@result => $item);\n        }\n    }\n\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/196","completion":"    my @result = [];\n    my @temp_list = $test_list;\n    while (@temp_list) {\n        my @temp_list = @_;\n        my @temp_list = $temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list = @temp_list =","language":"perl"}
{"task_id":"MBPLP\/197","completion":"    my ($result_tup1, $result_tup2) = @_;\n\n    my $temp_tup1 = $test_tup1;\n    my $temp_tup2 = $test_tup2;\n\n    while (defined $temp_tup1 && defined $temp_tup2) {\n        $result_tup1 = $result_tup1 * $temp_tup1;\n        $result_tup2 = $result_tup2 * $temp_tup2;\n\n        $temp_tup1 = $temp_tup1 - 1;\n        $temp_tup2 = $temp_tup2 - 1;\n    }\n\n    return $result_tup1, $result_tup2;\n}","language":"perl"}
{"task_id":"MBPLP\/198","completion":"    my $c = $a + $b;\n    my $d = $a * $b;\n    my $e = $a * $c;\n    my $f = $b * $c;\n    my $g = $a * $b * $c;\n    my $h = $a * $b * $d;\n    my $i = $a * $c * $d;\n    my $j = $b * $c * $d;\n    my $k = $a * $b * $c * $d;\n    my $l = $a * $b * $d * $e;\n    my $m = $a * $c * $d * $e;\n    my $n = $b * $c * $","language":"perl"}
{"task_id":"MBPLP\/199","completion":"    return $n & -~($n >> 1);\n}","language":"perl"}
{"task_id":"MBPLP\/200","completion":"    my ($max, $max_index) = 0;\n    my @$max_indexes = [];\n\n    for my $i (0..$#$list1) {\n        if ($list1[$i] > $max) {\n            $max = $list1[$i];\n            $max_index = $i;\n        }\n        $max_indexes = $max_indexes { $max_index };\n    }\n\n    return $max_indexes;\n}","language":"perl"}
{"task_id":"MBPLP\/201","completion":"    my ($n) = 0;\n    foreach my $x (@_){\n        if ($n == 0) {\n            $n = $x;\n        } else {\n            if ($n != $x) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}","language":"perl"}
{"task_id":"MBPLP\/202","completion":"    my ($str2) = @_;\n    my ($str3) = @_;\n    my ($str4) = @_;\n    my ($str5) = @_;\n    my ($str6) = @_;\n    my ($str7) = @_;\n    my ($str8) = @_;\n    my ($str9) = @_;\n    my ($str10) = @_;\n    my ($str11) = @_;\n    my ($str12) = @_;\n    my ($str13) = @_;\n    my ($str14) = @_;\n    my ($str15) = @_;\n    my ($str16) = @_;\n    my ($str17) = @_;\n    my ($str18) = @_;\n    my ($str19) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/204","completion":"    my $cnt = 0;\n    for (@_){\n        if ($_ =~ \/$c\/){\n            ++$cnt;\n        }\n    }\n    return $cnt;\n}","language":"perl"}
{"task_id":"MBPLP\/205","completion":"    my ($inversion_list) = @_;\n    my ($inversion_list_size) = 0;\n    my ($inversion_list_size_max) = 0;\n    my ($inversion_list_size_min) = 0;\n    my ($inversion_list_size_max_index) = 0;\n    my ($inversion_list_size_min_index) = 0;\n    my ($inversion_list_size_max_index_value) = 0;\n    my ($inversion_list_size_min_index_value) = 0;\n    my ($inversion_list_size_max_value) = 0;\n    my ($inversion_list_size_min_value) = 0;\n    my ($inversion_list_size_max_value_index) = 0;\n    my ($inversion_list_size_min_value_index) = 0;\n    my ($inversion_list_","language":"perl"}
{"task_id":"MBPLP\/206","completion":"    my ($result_tup) = @_;\n    while (defined $test_tup) {\n        my ($first_element, $second_element, $third_element) = split \/\\s+\/;\n        $result_tup = $result_tup .= $first_element . $second_element . $third_element;\n        $test_tup = shift $test_tup;\n    }\n    return $result_tup;\n}","language":"perl"}
{"task_id":"MBPLP\/207","completion":"    my ($longest, $count) = (0, 0);\n    my ($prev, $cur) = (0, 0);\n    my ($prev_char, $cur_char) = (0, 0);\n\n    for (@_){\n        $cur = 0;\n        $cur_char = $str;\n        $prev = $cur;\n        $prev_char = $cur_char;\n        $count = 0;\n        while ($cur_char =~ m\/([A-Z])\\1\/){\n            $cur++;\n            if ($cur - $prev > $longest){\n                $longest = $cur - $prev;\n                $count = 1;\n            } else if ($cur - $prev == $longest){\n                $count++;\n            }\n            $prev = $cur;\n            $prev_char = $cur_char;","language":"perl"}
{"task_id":"MBPLP\/208","completion":"    my $p = 2;\n    my $re = \/(\\d+)\\.(\\d+)\/;\n    $num =~ s\/\\.\/;\n    $num =~ s\/\\,\/;\n    $num =~ s\/\\s\/;\n    $num =~ s\/\\\/\/;\n    $num =~ s\/\\+\/;\n    $num =~ s\/\\-\/;\n    $num =~ s\/\\*\/;\n    $num =~ s\/\\^\/;\n    $num =~ s\/\\(\/;\n    $num =~ s\/\\)\/;\n    $num =~ s\/\\{\/;\n    $num =~ s\/\\}\/;\n    $num =~ s\/\\[\/;\n    $num =~ s\/\\]\/;\n    $num =~ s\/\\|\/;\n    $num =~ s\/\\&\/;\n    $num =~ s\/\\<\/;\n    $num =~ s\/\\>\/;\n    ","language":"perl"}
{"task_id":"MBPLP\/209","completion":"    my $smallest = $heap[0];\n    for (@_){\n        if ($smallest > $heap[$_]){\n            $heap[0] = $heap[$_];\n            $heap[$_] = $smallest;\n            $smallest = $heap[0];\n        }\n    }\n    $heap[0] = $a;\n    return $heap;\n}","language":"perl"}
{"task_id":"MBPLP\/213","completion":"    my @result = ();\n    my @first_tup = $test_tup1;\n    my @second_tup = $test_tup2;\n    my @first_len = length $first_tup;\n    my @second_len = length $second_tup;\n    my $i = 0;\n    while ($i < $first_len) {\n        my $j = 0;\n        while ($j < $second_len) {\n            push @result, $first_tup[$i] . \" \" . $second_tup[$j];\n            $j = $j + 1;\n        }\n        $i = $i + 1;\n    }\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/215","completion":"    my @result;\n    my @sub_result;\n    my $current_sub;\n    my $current_sub_index;\n    my $current_sub_length;\n    my $current_sub_value;\n    my $current_sub_value_index;\n    my $current_sub_value_length;\n    my $current_sub_value_value;\n    my $current_sub_value_value_index;\n    my $current_sub_value_value_length;\n    my $current_sub_value_value_value;\n    my $current_sub_value_value_value_index;\n    my $current_sub_value_value_value_length;\n    my $current_sub_value_value_value_value;\n    my $current_sub_value_value_value_value_index;\n    my $current_sub_value_value_value_value_length;\n    my $current_sub_value_value_value_value_value;\n    my $current_","language":"perl"}
{"task_id":"MBPLP\/216","completion":"    my $is_subset = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\n    $is_subset = 0;\n\n    while ($i < scalar ($list1)) {\n        while ($j < scalar ($list2)) {\n            while ($k < scalar ($list2[$j])) {\n                while ($l < scalar ($list1[$i])) {\n                    while ($m < scalar ($list2[$j][$k])) {\n                        if ($list1[$i][$l] == $list2[$j][$k][$m]) {\n                            $is_subset = 1;\n                        }\n                        $m++;\n                    }\n                    $k++;\n                }\n                $","language":"perl"}
{"task_id":"MBPLP\/217","completion":"    my ($first, $last) = @_;\n    my ($prev, $cur) = @_;\n\n    if ($cur == $first) {\n        return $cur;\n    }\n\n    if ($cur == $last) {\n        return $cur;\n    }\n\n    if ($cur == $prev) {\n        return $cur;\n    }\n\n    return \"\\x00\";\n}","language":"perl"}
{"task_id":"MBPLP\/218","completion":"    return $A - $B;\n}","language":"perl"}
{"task_id":"MBPLP\/219","completion":"    my @min_max = @_;\n\n    for (@min_max) {\n        my $min = $test_tup[0];\n        my $max = $test_tup[0];\n\n        for (@_ = 1; $_ < $K; $_++) {\n            if ($test_tup[$_] < $min) {\n                $min = $test_tup[$_];\n            }\n            if ($test_tup[$_] > $max) {\n                $max = $test_tup[$_];\n            }\n        }\n        push @min_max, $min;\n        push @min_max, $max;\n    }\n    return @min_max;\n}","language":"perl"}
{"task_id":"MBPLP\/220","completion":"    my @special_chars = (\" \", \",\", \".\");\n    my $new_text = \"\";\n    for ($i = 0; $i < $text; $i++) {\n        if ($text[$i] =~ m\/[^$special_chars]\/) {\n            $new_text .= $text[$i];\n            if ($i < $n) {\n                $new_text .= \":\";\n            }\n        } else {\n            $new_text .= $text[$i];\n        }\n    }\n    return $new_text;\n}","language":"perl"}
{"task_id":"MBPLP\/222","completion":"    my ($first_type) = $test_tuple[0];\n    my ($second_type) = $test_tuple[1];\n    my ($third_type) = $test_tuple[2];\n    my ($fourth_type) = $test_tuple[3];\n    my ($fifth_type) = $test_tuple[4];\n\n    if ($first_type == $second_type && $second_type == $third_type && $third_type == $fourth_type && $fourth_type == $fifth_type) {\n        return 1;\n    } else {\n        return 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/223","completion":"    my $majority = 0;\n    my $count = 0;\n    my $i = 0;\n    my $j = 0;\n\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$i] == $arr[$j]) {\n                $count++;\n            }\n        }\n        if ($count > $x) {\n            $majority = $arr[$i];\n            break;\n        }\n        $count = 0;\n    }\n\n    return $majority;\n}","language":"perl"}
{"task_id":"MBPLP\/225","completion":"    my $min = $arr[0];\n    for ($i = $low; $i < $high; $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n        }\n    }\n    return $min;\n}","language":"perl"}
{"task_id":"MBPLP\/229","completion":"    my @neg = (0..$n) | %{$i = $arr; $arr[$i] = -$arr[$i]; $arr[$i] = $i;};\n    $arr = @neg + $arr;\n    return $arr;\n}","language":"perl"}
{"task_id":"MBPLP\/230","completion":"    my $str2 = $str1;\n    $str2 =~ s\/\\s\/ $char\/g;\n    return $str2;\n}","language":"perl"}
{"task_id":"MBPLP\/231","completion":"    my $max = 0;\n    for (@$tri) {\n        my $sum = 0;\n        for (@$tri) {\n            $sum += $tri;\n        }\n        if ($sum > $max) {\n            $max = $sum;\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/232","completion":"    my ($list2, $n) = @_;\n    my ($list3, $n) = @_;\n    my ($list4, $n) = @_;\n    my ($list5, $n) = @_;\n    my ($list6, $n) = @_;\n    my ($list7, $n) = @_;\n    my ($list8, $n) = @_;\n    my ($list9, $n) = @_;\n    my ($list10, $n) = @_;\n    my ($list11, $n) = @_;\n    my ($list12, $n) = @_;\n    my ($list13, $n) = @_;\n    my ($list14, $n) = @_;\n    my ($list15, $n) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/237","completion":"    my ($occurences) = {};\n    my ($tuple_list) = @_;\n    my ($tuple_list_size) = 0;\n    my ($tuple_list_size_max) = 0;\n    my ($tuple_list_size_min) = 0;\n\n    for my $tuple (@$tuple_list) {\n        $tuple_list_size += $tuple;\n        if ($tuple_list_size_max < $tuple) {\n            $tuple_list_size_max = $tuple;\n        }\n        if ($tuple_list_size_min > $tuple) {\n            $tuple_list_size_min = $tuple;\n        }\n    }\n\n    for my $tuple (@$tuple_list) {\n        my ($tuple_list_size_diff) = $tuple_list_size - $tuple;\n        my ($tuple_list_size_diff_max)","language":"perl"}
{"task_id":"MBPLP\/239","completion":"    my $result = 0;\n    my $prev = 0;\n    my $next = 0;\n    while ($n >= 1) {\n        $result += $n * $n - $n + 1;\n        $prev = $next;\n        $next = $prev + $n;\n        $n -= 1;\n    }\n    return $result \/ 2;\n}","language":"perl"}
{"task_id":"MBPLP\/240","completion":"    my $last_element = $list1->[$list1->length - 1];\n    $list1->= $list2;\n    $list1->[$list1->length - 1] = $last_element;\n    return $list1;\n}","language":"perl"}
{"task_id":"MBPLP\/241","completion":"    my $result = [];\n    for ($i = 0; $i < $m; $i++) {\n        my $row = [];\n        for ($j = 0; $j < $n; $j++) {\n            my $col = [];\n            for ($k = 0; $k < $o; $k++) {\n                $col[] = \"*\";\n            }\n            $row[] = $col;\n        }\n        $result[] = $row;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/243","completion":"    my @sort_lst = [];\n    my @sort_lst_2 = [];\n    my @sort_lst_3 = [];\n    my @sort_lst_4 = [];\n    my @sort_lst_5 = [];\n    my @sort_lst_6 = [];\n    my @sort_lst_7 = [];\n    my @sort_lst_8 = [];\n    my @sort_lst_9 = [];\n    my @sort_lst_10 = [];\n    my @sort_lst_11 = [];\n    my @sort_lst_12 = [];\n    my @sort_lst_13 = [];\n    my @sort_lst_14 = [];\n    my @sort_lst_15 = [];\n    my @sort_lst_16 = [];\n    my @sort_lst_17 = [];\n    my @sort_lst_18 = [];\n    my @sort_","language":"perl"}
{"task_id":"MBPLP\/245","completion":"    my $max = 0;\n    my $sum = 0;\n    for my $i (0..$n) {\n        if ($i == $n - 1) {\n            $sum = $arr[$i];\n        } else {\n            $sum = $sum + $arr[$i] - $arr[$i + 1];\n        }\n        if ($sum > $max) {\n            $max = $sum;\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/247","completion":"    my ($n, $m) = @_;\n    my ($i, $j) = @_;\n    my ($l, $s) = @_;\n\n    # If the string is empty, return 0\n    if ($n == 0) {\n        return 0;\n    }\n\n    # If the string is a palindrome, return its length\n    if ($i == $j) {\n        return $n;\n    }\n\n    # If the string is not a palindrome,\n    # return the length of the longest palindromic subsequence of the substring\n    # beginning at index $i and ending at index $j\n    if ($str[$i] == $str[$j]) {\n        $l = $n + 1;\n        $s = $str[$i] + $s;\n    } else {\n        $s = $str[$i] + $s;\n   ","language":"perl"}
{"task_id":"MBPLP\/251","completion":"    return $list = join \", \", map { $element => $list } @_;\n}","language":"perl"}
{"task_id":"MBPLP\/253","completion":"    my ($count) = 0;\n    foreach my $item (@_){\n        if (defined $item && $item =~ m\/\\d+\/){\n            $count++;\n        }\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/254","completion":"    my @words = ();\n    my @result = ();\n    my $pattern = 'a|e';\n\n    for my $word (@words = split \/\\s+\/ $text) {\n        if ($word =~ $pattern) {\n            push @result, $word;\n        }\n    }\n\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/255","completion":"    my @result = ();\n\n    $l = sort { $l };\n    $n = $n + 1;\n\n    foreach my $color (@$l) {\n        if ($n > 0) {\n            $result = $result { $color } { $color } { $color };\n            $n = $n - 1;\n        } else {\n            $result = $result { $color };\n        }\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/256","completion":"    my @primes = 0;\n    my $i = 2;\n    while ($i <= $n) {\n        if ($i == $n || $i % $n == 0) {\n            $primes = $primes + 1;\n        }\n        $i = $i + 1;\n    }\n    return $primes;\n}","language":"perl"}
{"task_id":"MBPLP\/259","completion":"    my ($max_tup1, $max_tup2) = @_;\n\n    $max_tup1 = map { $max_tup1 { $1 } } $test_tup1;\n    $max_tup2 = map { $max_tup2 { $1 } } $test_tup2;\n\n    return $max_tup1, $max_tup2;\n}","language":"perl"}
{"task_id":"MBPLP\/261","completion":"    my $result = 0;\n    my $i = 0;\n    foreach my $e1 (@_) {\n        $result += $e1 \/ $test_tup2[$i];\n        $i++;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/262","completion":"    my ($list2, $N) = split \/\\n\/, $list1;\n    $list2 = $list2 =~ s\/\\s+\/, \" \";\n    $list2 =~ s\/\\s+\/, \" \";\n    $list2 =~ s\/\\s+\/, \" \";\n    $list2 =~ s\/\\s+\/, \" \";\n    $list2 =~ s\/\\s+\/, \" \";\n    $list2 =~ s\/\\s+\/, \" \";\n    $list2 =~ s\/\\s+\/, \" \";\n    $list2 =~ s\/\\s+\/, \" \";\n    $list2 =~ s\/\\s+\/, \" \";\n    $list2 =~ s\/\\s+\/, \" \";\n    $list2 =~ s\/\\s+\/, \" \";\n    $list2 =~ s\/\\s+\/, \" \";\n    $list2 =~ s\/\\","language":"perl"}
{"task_id":"MBPLP\/263","completion":"    my @keys = keys %{$d1, $d2};\n    my @values = map { $_ => $_[0] } keys %{$d1, $d2};\n    my @merged = map { $_ => $_[1] } keys %{$d1, $d2};\n    return @merged;\n}","language":"perl"}
{"task_id":"MBPLP\/265","completion":"    my $res = [];\n    for (my $i = 0; $i < $S; $i += $step) {\n        my $new = [];\n        for (my $j = $i; $j < $i + $step; $j++) {\n            $new[] = $S[$j];\n        }\n        $res[] = $new;\n    }\n    return $res;\n}","language":"perl"}
{"task_id":"MBPLP\/270","completion":"    my $sum = 0;\n    my $even_index = 0;\n    for my $i (0..$n) {\n        if ($i % 2 == 0) {\n            $sum += $arr[$i];\n        }\n        if ($i % 2 == 1) {\n            $even_index = $i;\n        }\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/272","completion":"    my ($first_element, $second_element, $third_element) = @_;\n\n    $test_list = $test_list->sort(SORT_NUMERIC);\n\n    return $third_element;\n}","language":"perl"}
{"task_id":"MBPLP\/273","completion":"    my ($result_tup) = @_;\n    for my $i (0..$test_tup1) {\n        $result_tup[$i] = $test_tup1[$i] - $test_tup2[$i];\n    }\n    return $result_tup;\n}","language":"perl"}
{"task_id":"MBPLP\/275","completion":"    my $pos = 0;\n    for my $i (0..$m) {\n        if ($a[$i] == $n) {\n            $pos = $i;\n            break;\n        }\n    }\n    return $pos;\n}","language":"perl"}
{"task_id":"MBPLP\/277","completion":"    my $filtered_dict = {};\n    foreach my $key (keys $dict) {\n        if ($dict{$key} == $n) {\n            $filtered_dict{$key} = $dict{$key};\n        }\n    }\n    return $filtered_dict;\n}","language":"perl"}
{"task_id":"MBPLP\/278","completion":"    my ($count) = 0;\n    my ($first_element) = 0;\n\n    for my $element (@_) {\n        if ($element == $first_element) {\n            ++$count;\n        }\n        else {\n            $first_element = $element;\n            ++$count;\n        }\n    }\n\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/282","completion":"    $nums1 = map { $_ - $nums2 } $nums1;\n    return $nums1;\n}","language":"perl"}
{"task_id":"MBPLP\/284","completion":"    return $list =~ s\/^$element\/;\n}","language":"perl"}
{"task_id":"MBPLP\/286","completion":"    my $max = 0;\n    my @s = @_;\n    for (@s) {\n        my $sum = 0;\n        for (0..$k) {\n            $sum += $s[0];\n            $s = $s[1..-1];\n        }\n        if ($sum > $max) {\n            $max = $sum;\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/289","completion":"    my ($year) = $N \/ 365;\n    my ($days) = $N - $year * 365;\n    return $days - $days % 2;\n}","language":"perl"}
{"task_id":"MBPLP\/290","completion":"    my ($list2) = @_;\n    my ($max_len) = 0;\n    my ($max_list) = @_;\n    for my $i (0 .. $list1) {\n        if ($max_len < length($list1)) {\n            $max_len = length($list1);\n            $max_list = $list1;\n        }\n    }\n    for my $i (0 .. $list2) {\n        if ($max_len < length($list2)) {\n            $max_len = length($list2);\n            $max_list = $list2;\n        }\n    }\n    return $max_list;\n}","language":"perl"}
{"task_id":"MBPLP\/291","completion":"    my $ways = 0;\n    my $i = 0;\n    my $j = 0;\n    while ($i < $n) {\n        while ($j < $n) {\n            if ($i == $j) {\n                $ways = $ways + 1;\n            } else {\n                if ($k == 1) {\n                    $ways = $ways + 1;\n                } else {\n                    $ways = $ways + count_no_of_ways($i + 1, $k - 1);\n                }\n            }\n            $j = $j + 1;\n        }\n        $j = 0;\n        $i = $i + 1;\n    }\n    return $ways;\n}","language":"perl"}
{"task_id":"MBPLP\/292","completion":"    return $n \/ $m;\n}","language":"perl"}
{"task_id":"MBPLP\/295","completion":"    my $sum = 0;\n    for my $i (1; $i <= $number; $i++) {\n        if ($number % $i == 0) {\n            $sum = $sum + $i;\n        }\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/296","completion":"    my $inv_count = 0;\n    my @sorted_arr = sort { $a => $a };\n    my @sorted_arr_rev = sort { $a => $a } @sorted_arr;\n    for my $i (0..$n-1) {\n        if ($sorted_arr[$i] != $sorted_arr_rev[$n-$i-1]) {\n            $inv_count++;\n        }\n    }\n    return $inv_count;\n}","language":"perl"}
{"task_id":"MBPLP\/297","completion":"    my ($list2) = @_;\n    my ($list3) = @_;\n\n    $list2 = map { $_ => $_ } $list2;\n    $list3 = map { $_ => $_ } $list3;\n\n    $list3 = $list3 || [];\n    $list3 = $list3 + $list2;\n\n    return $list3;\n}","language":"perl"}
{"task_id":"MBPLP\/298","completion":"    my @result = [];\n    foreach my $l1_item (@$l1) {\n        if (in_array($l1_item, @$l2)) {\n            push @result, $l1_item;\n        }\n    }\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/299","completion":"    my ($max_data) = @_;\n    my ($max_name, $max_score) = @_;\n    foreach my $name (@$stdata) {\n        if ($max_score < $name[1]) {\n            $max_name = $name[0];\n            $max_score = $name[1];\n        }\n    }\n    return $max_name, $max_score;\n}","language":"perl"}
{"task_id":"MBPLP\/300","completion":"    my ($sum_first_n_bits, $sum_last_n_bits) = 0;\n    my $count = 0;\n    for my $i (0..$n) {\n        my $sum_first_n_bits += $i & 1;\n        my $sum_last_n_bits += $i >> 1;\n        if ($sum_first_n_bits == $sum_last_n_bits) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/301","completion":"    $d = 0;\n    for my $k (keys %{$_}) {\n        $d += 1;\n        $d += dict_depth %{$_[$k]};\n    }\n    return $d;\n}","language":"perl"}
{"task_id":"MBPLP\/303","completion":"    my $b = $a + $n;\n    my $c = $a - $n;\n    if ($a < $n) {\n        return 0;\n    }\n    if ($b > $c) {\n        return 1;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/304","completion":"    my $rotated_arr = $arr;\n    for (@$rotations) {\n        $rotated_arr = $rotated_arr { $index };\n    }\n    return $rotated_arr[$index];\n}","language":"perl"}
{"task_id":"MBPLP\/305","completion":"    my @result = [];\n    my @p = @_;\n    for (@p) {\n        for (@_) {\n            if (@_ =~ m\/^p\\w+\/) {\n                push @result, $_;\n            }\n        }\n    }\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/306","completion":"    my $max = 0;\n    my $i = 0;\n    while ($i < $n) {\n        my $sum = 0;\n        my $j = $i;\n        while ($j < $n && $a[$j] <= $a[$j + $index]) {\n            $sum += $a[$j];\n            $j += 1;\n        }\n        if ($sum > $max) {\n            $max = $sum;\n        }\n        $i += 1;\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/307","completion":"    my $colon = $tuplex[0];\n    return $colon;\n}","language":"perl"}
{"task_id":"MBPLP\/308","completion":"    my @result = ();\n    my $max = 0;\n    my $min = 0;\n    for (@nums1) {\n        for (@nums2) {\n            if ($max < $N * $nums1 * $nums2) {\n                $max = $N * $nums1 * $nums2;\n            }\n            if ($min > $N * $nums1 * $nums2) {\n                $min = $N * $nums1 * $nums2;\n            }\n        }\n    }\n    @result = [$max, $min];\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/310","completion":"    my ($str2) = @_;\n    my ($str3) = @_;\n    my ($str4) = @_;\n    my ($str5) = @_;\n    my ($str6) = @_;\n    my ($str7) = @_;\n    my ($str8) = @_;\n    my ($str9) = @_;\n    my ($str10) = @_;\n    my ($str11) = @_;\n    my ($str12) = @_;\n    my ($str13) = @_;\n    my ($str14) = @_;\n    my ($str15) = @_;\n    my ($str16) = @_;\n    my ($str17) = @_;\n    my ($str18) = @_;\n    my ($str19) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/313","completion":"    my ($pos_list) = ();\n    foreach my $num (@_){\n        if ($num > 0) {\n            push $pos_list, $num;\n        }\n    }\n    return $pos_list;\n}","language":"perl"}
{"task_id":"MBPLP\/314","completion":"    my $max = 0;\n    my @rows = $grid;\n    my @cols = @_;\n    my $max_row = 0;\n    my $max_col = 0;\n    my $max_sum = 0;\n    for (@rows) {\n        for (@cols) {\n            if ($max_sum < $grid[$_]++) {\n                $max_sum = $grid[$_];\n                $max_row = $_;\n                $max_col = $max_row + 1;\n            }\n        }\n    }\n    return $max_sum;\n}","language":"perl"}
{"task_id":"MBPLP\/315","completion":"    my ($max, $len) = 0;\n    for my $word (@_){\n        if ($word =~ m\/^\\s*(\\w+)\\s*$\/) {\n            $len = length($word);\n            if ($len > $max) {\n                $max = $len;\n            }\n        }\n    }\n    return $max ? $max : -1;\n}","language":"perl"}
{"task_id":"MBPLP\/317","completion":"    my ($newlist) = [];\n    my ($last) = '';\n    my ($count) = 0;\n    for (@_){\n        if ($last == $alist[$_]){\n            $count++;\n        }\n        else{\n            if ($count > 0){\n                push @$newlist, $count;\n            }\n            $count = 1;\n            push @$newlist, $alist[$_];\n        }\n        $last = $alist[$_];\n    }\n    if ($count > 0){\n        push @$newlist, $count;\n    }\n    return $newlist;\n}","language":"perl"}
{"task_id":"MBPLP\/319","completion":"    my $pattern = \"([a-zA-Z]{5})\";\n    $text =~ s\/^$pattern\/ \"$1\";\n    return $text;\n}","language":"perl"}
{"task_id":"MBPLP\/321","completion":"    my ($n) = $s =~ s\/\\d+\/;\n    $n =~ s\/\\d{5}\/;\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/322","completion":"    my ($min, $min_index) = (0, 0);\n    my ($max, $max_index) = (0, 0);\n    for (@_){\n        if ($min > $list1{$_}){\n            $min = $list1{$_};\n            $min_index = $_;\n        }\n        if ($max < $list1{$_}){\n            $max = $list1{$_};\n            $max_index = $_;\n        }\n    }\n    return [$min_index, $max_index];\n}","language":"perl"}
{"task_id":"MBPLP\/323","completion":"    $arr = $arr + $arr + $arr;\n    $arr = $arr ^ $arr ^ $arr;\n    $arr = $arr & $arr & $arr;\n    $arr = $arr << $n;\n    $arr = $arr >> $n;\n    return $arr;\n}","language":"perl"}
{"task_id":"MBPLP\/324","completion":"    my @alternate_chains = @_;\n    my @sum_of_alternate_chains = @_;\n\n    for my $chain (@alternate_chains) {\n        my $alternate_chain_length = $chain;\n        my $sum_of_alternate_chain = 0;\n        for my $i (0 .. $alternate_chain_length) {\n            $sum_of_alternate_chain += $test_tuple[$i];\n        }\n        push @sum_of_alternate_chains, $sum_of_alternate_chain;\n    }\n\n    return @sum_of_alternate_chains;\n}","language":"perl"}
{"task_id":"MBPLP\/325","completion":"    my $min = 0;\n    my $squares = 0;\n    for my $i (1; $i <= $n; $i++) {\n        for my $j (1; $j <= $i; $j++) {\n            if ($i * $i + $j * $j == $n) {\n                $squares++;\n                if ($min < $squares) {\n                    $min = $squares;\n                }\n            }\n        }\n    }\n    return $min;\n}","language":"perl"}
{"task_id":"MBPLP\/326","completion":"    my ($max_word, $max_count) = (0, 0);\n    foreach my $word (@$test_list) {\n        $count = $word =~ m\/\\w+\/ { $_ =~ s\/\\s+\/ } @$test_list;\n        if ($count > $max_count) {\n            $max_word = $word;\n            $max_count = $count;\n        }\n    }\n    return $max_word;\n}","language":"perl"}
{"task_id":"MBPLP\/328","completion":"    my $new_list = [];\n    for ($i = 0; $i < $m; $i++) {\n        $new_list[] = $list1[$i];\n    }\n    for ($i = $m; $i < $m + $n; $i++) {\n        $new_list[$i - $m] = $list1[$i];\n    }\n    return $new_list;\n}","language":"perl"}
{"task_id":"MBPLP\/330","completion":"    my $words = $text =~ s\/\\b\\w{3,5}\\b\/g;\n    return $words;\n}","language":"perl"}
{"task_id":"MBPLP\/332","completion":"    my ($freq) = @_;\n    my ($str2) = @_;\n\n    $freq = map { $str1 => $str2 } $freq;\n\n    return $freq;\n}","language":"perl"}
{"task_id":"MBPLP\/333","completion":"    my ($sub_li_2) = $sub_li[1];\n    $sub_li_2 =~ s\/\\D\/g;\n    $sub_li_2 =~ s\/\\d\/g;\n    $sub_li_2 =~ s\/\\D\/g;\n    $sub_li_2 =~ s\/\\d\/g;\n    $sub_li_2 =~ s\/\\D\/g;\n    $sub_li_2 =~ s\/\\d\/g;\n    $sub_li_2 =~ s\/\\D\/g;\n    $sub_li_2 =~ s\/\\d\/g;\n    $sub_li_2 =~ s\/\\D\/g;\n    $sub_li_2 =~ s\/\\d\/g;\n    $sub_li_2 =~ s\/\\D\/g;\n    $sub_li_2 =~ s\/\\d\/g;\n    $sub_li_2 =~ s\/\\D\/g;\n   ","language":"perl"}
{"task_id":"MBPLP\/338","completion":"    my ($n) = 0;\n    my ($c) = $s =~ s\/\\w\\w\/g;\n    while ($s =~ s\/\\w\\w\/g) {\n        $n++;\n        $c = $s =~ s\/\\w\\w\/g;\n    }\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/340","completion":"    my ($min1, $min2, $min3) = @_;\n    my $sum = 0;\n\n    for my $num (@_);\n        if ($num > $min1) {\n            $min3 = $min2;\n            $min2 = $min1;\n            $min1 = $num;\n        } else if ($num > $min2) {\n            $min3 = $min2;\n            $min2 = $num;\n        } else if ($num > $min3) {\n            $min3 = $num;\n        }\n\n        $sum += $num;\n    }","language":"perl"}
{"task_id":"MBPLP\/341","completion":"    my @t;\n    foreach my $k (@$s) {\n        $t{$k} = 1;\n    }\n    return $t;\n}","language":"perl"}
{"task_id":"MBPLP\/342","completion":"    my @ranges = (0);\n    my @min = (0);\n    my @max = (0);\n    my @min_max = (0);\n    my @min_max_index = (0);\n    my $min_max_index_value = (0);\n\n    for (@ranges) {\n        my @min_max = (0);\n        my @min_max_index = (0);\n        my @min_max_index_value = (0);\n\n        for (@_[0]) {\n            if ($_[0] < $_[1]) {\n                @min_max_index_value = $_[0];\n                @min_max_index = 0;\n            } else {\n                @min_max_index_value = $_[1];\n                @min_max_index = 1;\n            }\n\n            if ($min_max_index_value","language":"perl"}
{"task_id":"MBPLP\/343","completion":"    my ($digits, $letters) = @_;\n    $digits = strlen($s);\n    $letters = strlen($s);\n    return ($digits, $letters);\n}","language":"perl"}
{"task_id":"MBPLP\/345","completion":"    my ($diff) = @_;\n    my ($i, $j) = @_;\n    $diff = 0;\n    for ($i = 1; $i <= count($nums); $i++) {\n        if ($nums[$i] != $nums[$i - 1]) {\n            $diff++;\n        }\n    }\n    for ($j = 1; $j <= count($nums); $j++) {\n        if ($nums[$j] != $nums[$j - 1]) {\n            $diff++;\n        }\n    }\n    return $diff;\n}","language":"perl"}
{"task_id":"MBPLP\/348","completion":"    my ($N) = $M;\n    my ($S) = 0;\n    my ($X) = 0;\n    my ($Y) = 0;\n    my ($Z) = 0;\n    my ($W) = 0;\n\n    for (@_){\n        $S = $S + $X;\n        $X = $X + $Y;\n        $Y = $Y + $Z;\n        $Z = $Z + $W;\n        $W = $W + $N;\n    }\n\n    return $W;\n}","language":"perl"}
{"task_id":"MBPLP\/350","completion":"    my ($n) = 0;\n    for my $i (0..$s) {\n        if ($s[$i] == $s[$i+1]) {\n            $n++;\n        } else {\n            $n = 0;\n        }\n        if ($n == 1) {\n            return $s - $i;\n        }\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/352","completion":"    my $unique = 0;\n    for my $ch (@_){\n        if ($unique < 1 && $ch == $str{$ch}){\n            $unique = 1;\n        }\n    }\n    return $unique;\n}","language":"perl"}
{"task_id":"MBPLP\/353","completion":"    my @$list2 = @$list1;\n    my @$list3 = @$list2;\n    my $i = 0;\n    while ($i < $n) {\n        $list3 = @$list3 { $_ };\n        $i = $i + 1;\n    }\n    return $list3;\n}","language":"perl"}
{"task_id":"MBPLP\/355","completion":"    my $rectangles = 0;\n    for my $x (0..$radius)\n    {\n        for my $y (0..$radius)\n        {\n            if ($x * $x + $y * $y <= $radius * $radius)\n            {\n                $rectangles = $rectangles + 1;\n            }\n        }\n    }\n    return $rectangles;\n}","language":"perl"}
{"task_id":"MBPLP\/358","completion":"    return map { $_ % $_2 } @_;\n}","language":"perl"}
{"task_id":"MBPLP\/361","completion":"    my @list2 = @_;\n    my @list3 = @_;\n    foreach my $list2 (@list1) {\n        if (defined $list2) {\n            if (count($list2) > 0) {\n                @list3 = @list3 { $list2 };\n            }\n        }\n    }\n    return @list3;\n}","language":"perl"}
{"task_id":"MBPLP\/362","completion":"    my ($max, $max_occ) = 0;\n    my ($occ, $occ_max) = 0;\n    for (@$nums) {\n        $occ = $nums % $max;\n        if ($occ > $max_occ) {\n            $max = $occ;\n            $max_occ = $occ_max;\n        }\n        $occ_max = ($occ_max + 1) % $max;\n    }\n    return $max_occ;\n}","language":"perl"}
{"task_id":"MBPLP\/363","completion":"    my @result = [];\n    my @temp = [];\n    for (@test_list) {\n        $temp = @_;\n        for (0..$K) {\n            $temp = $temp { $temp + $temp };\n        }\n        @result = @result { $temp };\n    }\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/364","completion":"    my $n = 0;\n    my $i = 0;\n    my $c = 0;\n    my $len = strlen($str);\n\n    for ($i = 0; $i < $len; $i++) {\n        if ($str[$i] == '0') {\n            $c++;\n        } else {\n            $c--;\n        }\n        if ($c == 0) {\n            $n++;\n        }\n    }\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/368","completion":"    $test_tup = @_;\n    $result = [];\n    for ($i = 0; $i < $N; $i++) {\n        $result[] = $test_tup;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/370","completion":"    my ($float) = $price;\n    my ($int) = $float;\n    return $int;\n}","language":"perl"}
{"task_id":"MBPLP\/371","completion":"    my $missing_element = $right_element + 1;\n    if ($missing_element - $left_element > 1) {\n        return $missing_element;\n    }\n    if ($missing_element - $left_element == 1) {\n        return $missing_element - 1;\n    }\n    return $missing_element;\n}","language":"perl"}
{"task_id":"MBPLP\/372","completion":"    my $heap = [];\n    foreach my $num (@$nums) {\n        push $heap, $num;\n        if (empty $heap) {\n            return $heap;\n        }\n        shift $heap;\n    }\n    return $heap;\n}","language":"perl"}
{"task_id":"MBPLP\/374","completion":"    my ($result, @_) = @_;\n    my ($n, $i) = 0;\n    while ($i < $str) {\n        my ($temp, @_) = @_;\n        $temp = $temp . $str [$i];\n        $result = $result . $temp . $result [$n];\n        $n = $n + 1;\n        $i = $i + 1;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/376","completion":"    my ($seen) = @_;\n    my ($result) = @_;\n\n    $seen = $seen . keys % $test_tup;\n\n    $result = $result . keys % $test_tup;\n\n    $result = $result . keys % $seen;\n\n    $result = $result . keys % $test_tup;\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/378","completion":"    my ($new_list) = ();\n\n    $new_list = $test_list;\n\n    $new_list = $new_list->reverse;\n\n    $new_list = $new_list->reverse;\n\n    $new_list = $new_list->reverse;\n\n    $new_list = $new_list->reverse;\n\n    return $new_list;\n}","language":"perl"}
{"task_id":"MBPLP\/380","completion":"    my $result = 0;\n    for ($i = 0; $i < $rownum; $i++) {\n        for ($j = 0; $j < $colnum; $j++) {\n            $result[$i][$j] = $i + $j;\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/381","completion":"    my @inner_list;\n    for my $inner_list_data (@$list_data) {\n        my $inner_list = @$inner_list_data;\n        my $inner_list_index = $inner_list_data[$index_no];\n        push @inner_list, $inner_list_index;\n    }\n    return @inner_list;\n}","language":"perl"}
{"task_id":"MBPLP\/382","completion":"    my ($N) = 0;\n    my ($i) = 0;\n    my ($j) = 0;\n    my ($k) = 0;\n\n    while ($i < $A->size()) {\n        $N++;\n        $i = ($i + $N) % $A->size();\n        $j = ($j + $N) % $A->size();\n        $k = ($k + $N) % $A->size();\n    }\n\n    return $N;\n}","language":"perl"}
{"task_id":"MBPLP\/384","completion":"    my $min = $arr[0];\n    my $count = 0;\n    for (@$arr) {\n        if ($min > $arr) {\n            $min = $arr;\n            $count = 1;\n        } else if ($min == $arr) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/386","completion":"    my ($n) = length($s);\n    my ($i, $j) = @_;\n    my ($min_swaps) = 0;\n\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($i == $j) continue;\n            if ($s[$i] == $s[$j]) {\n                $min_swaps = $min_swaps + 1;\n                $s[$i] = $s[$j];\n                $s[$j] = $s[$i];\n                $i = $j;\n                break;\n            }\n        }\n    }\n\n    return $min_swaps;\n}","language":"perl"}
{"task_id":"MBPLP\/387","completion":"    $N =~ s\/\\s\/g;\n    $N =~ s\/^[0-9A-F]{2}$\/i;\n    if ($N % 2) {\n        print \"Odd\";\n    } else {\n        print \"Even\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/388","completion":"    my ($power) = 0;\n    for my $i (1; $i <= $n; $i++)\n    {\n        if ($i & $power)\n            return $power;\n        $power = $power << 1;\n    }\n    return $power;\n}","language":"perl"}
{"task_id":"MBPLP\/390","completion":"    my @new_list = ();\n    foreach my $item (@$list) {\n        $new_list = $string . $item . $string;\n    }\n    return $new_list;\n}","language":"perl"}
{"task_id":"MBPLP\/391","completion":"    my ($d1, $d2, $d3) = @_;\n    my ($d, $d1, $d2, $d3) = @_;\n    $d = {};\n    foreach my $i (0..$l1) {\n        $d[$i] = {};\n        foreach my $j (0..$l2) {\n            $d[$i][$j] = $d3[$i];\n        }\n    }\n    return $d;\n}","language":"perl"}
{"task_id":"MBPLP\/392","completion":"    my $max = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        my $sum = 0;\n        for (my $j = 1; $j <= $i; $j++) {\n            $sum += $j;\n        }\n        if ($sum > $max) {\n            $max = $sum;\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/393","completion":"    my ($max_length, $max_list) = (0, []);\n    foreach my $input_item (@$input_list) {\n        if ($max_length < length($input_item)) {\n            $max_length = length($input_item);\n            $max_list = $input_item;\n        }\n    }\n    return $max_list;\n}","language":"perl"}
{"task_id":"MBPLP\/394","completion":"    my ($uniq_count) = 0;\n    my @$test_tup_list = $test_tup;\n    my @$test_tup_list_len = $test_tup_list;\n    my $uniq_count = 0;\n    my $i = 0;\n    while ($i < $test_tup_list_len) {\n        my $test_tup_list_item = $test_tup_list[$i];\n        my $test_tup_list_item_len = $test_tup_list_item;\n        my $j = $i + 1;\n        while ($j < $test_tup_list_len) {\n            my $test_tup_list_item_item = $test_tup_list_item[$j];\n            if ($test_tup_list_item_item == $test_tup_list_item_item) {\n                $uniq_count++;\n            }\n","language":"perl"}
{"task_id":"MBPLP\/395","completion":"    my ($str2) = @_;\n    my ($str3) = @_;\n    my ($str4) = @_;\n    my ($str5) = @_;\n    my ($str6) = @_;\n    my ($str7) = @_;\n    my ($str8) = @_;\n    my ($str9) = @_;\n    my ($str10) = @_;\n    my ($str11) = @_;\n    my ($str12) = @_;\n    my ($str13) = @_;\n    my ($str14) = @_;\n    my ($str15) = @_;\n    my ($str16) = @_;\n    my ($str17) = @_;\n    my ($str18) = @_;\n    my ($str19) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/398","completion":"    my @digits = ();\n    foreach my $num (@$nums) {\n        my $num_digits = @digits{$num};\n        if ($num_digits) {\n            $num_digits = join \"\", $num_digits;\n        } else {\n            $num_digits = \"0\";\n        }\n        @digits{$num} = $num_digits;\n    }\n    return join \"\", @digits;\n}","language":"perl"}
{"task_id":"MBPLP\/399","completion":"    my $xor_result = 0;\n    for my $i (0..$#test_tup1) {\n        $xor_result = $xor_result ^ $test_tup1[$i];\n    }\n    for my $i (0..$#test_tup2) {\n        $xor_result = $xor_result ^ $test_tup2[$i];\n    }\n    return $xor_result;\n}","language":"perl"}
{"task_id":"MBPLP\/400","completion":"    my ($freq) = 0;\n    my ($tuple) = 0;\n    my ($unique_tuple) = 0;\n\n    for (@_ = $test_list) {\n        $tuple = $test_list;\n        $unique_tuple = $tuple;\n        $freq = 1;\n        while ($tuple = $tuple->next) {\n            if ($tuple->first == $unique_tuple->first) {\n                $freq++;\n                $unique_tuple = $tuple;\n            }\n        }\n        $unique_tuple = $unique_tuple->next;\n        $freq++;\n    }\n    return $freq;\n}","language":"perl"}
{"task_id":"MBPLP\/401","completion":"    my @result = [];\n    my @test_tup1_len = $test_tup1->length;\n    my @test_tup2_len = $test_tup2->length;\n    my $i = 0;\n    while ($i < @test_tup1_len) {\n        my @result[$i] = [];\n        my @test_tup1_sub = $test_tup1[$i];\n        my @test_tup2_sub = $test_tup2[$i];\n        my $j = 0;\n        while ($j < @test_tup1_sub->length) {\n            $result[$i][$j] = $test_tup1_sub[$j] + $test_tup2_sub[$j];\n            $j++;\n        }\n        $i++;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/402","completion":"    my $ncr = $n * $r * $p;\n    my $ncr_modp = $ncr % $p;\n    return $ncr_modp;\n}","language":"perl"}
{"task_id":"MBPLP\/405","completion":"    my $i = 0;\n    while ($i < scalar $tuplex) {\n        if ($tuplex[$i] eq $tuple1) {\n            return 1;\n        }\n        $i = $i + 1;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/407","completion":"    my ($s) = @_;\n    my ($r) = @_;\n\n    $r = $s + $n;\n\n    $r = $r \/ 10;\n    $r = $r % 10;\n\n    $s = $r;\n    $r = $s + $n;\n\n    $r = $r \/ 10;\n    $r = $r % 10;\n\n    $s = $r;\n    $r = $s + $n;\n\n    $r = $r \/ 10;\n    $r = $r % 10;\n\n    $s = $r;\n    $r = $s + $n;\n\n    $r = $r \/ 10;\n    $r = $r % 10;\n\n    $s = $r;\n    ","language":"perl"}
{"task_id":"MBPLP\/408","completion":"    my $result = [];\n    my @pairs = [];\n    for my $num1 (@$nums1) {\n        for my $num2 (@$nums2) {\n            push @pairs, [$num1, $num2];\n        }\n    }\n    sort @pairs;\n    for my $pair (@pairs) {\n        if ($pair != $pairs [0]) {\n            if (count($result) < $k) {\n                push @result, $pair;\n            }\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/409","completion":"    my ($list2) = @_;\n    my ($list3) = @_;\n    my ($list4) = @_;\n    my ($list5) = @_;\n    my ($list6) = @_;\n    my ($list7) = @_;\n    my ($list8) = @_;\n    my ($list9) = @_;\n    my ($list10) = @_;\n    my ($list11) = @_;\n    my ($list12) = @_;\n    my ($list13) = @_;\n    my ($list14) = @_;\n    my ($list15) = @_;\n    my ($list16) = @_;\n    my ($list17) = @_;\n    my ($list18) = @_;\n    my ($list19) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/410","completion":"    my ($min, $min_index) = 0;\n    for my $i (0, $listval->size) {\n        if ($min < $listval->{$i}) {\n            $min = $listval->{$i};\n            $min_index = $i;\n        }\n    }\n    return $min_index;\n}","language":"perl"}
{"task_id":"MBPLP\/411","completion":"    $word =~ s\/(\\w)(\\w*)\/$1_$2\/;\n    return $word;\n}","language":"perl"}
{"task_id":"MBPLP\/413","completion":"    my @$list2 = @$list1;\n    my @$list3 = @$list2;\n    my @$list4 = @$list3;\n    my @$list5 = @$list4;\n    my @$list6 = @$list5;\n    my @$list7 = @$list6;\n    my @$list8 = @$list7;\n    my @$list9 = @$list8;\n    my @$list10 = @$list9;\n    my @$list11 = @$list10;\n    my @$list12 = @$list11;\n    my @$list13 = @$list12;\n    my @$list14 = @$list13;\n    my @$list15 = @$list14;\n    my @$list16 = @$list15;\n    my @$list17 = @$list16;\n","language":"perl"}
{"task_id":"MBPLP\/414","completion":"    my $length = 0;\n    my $result = 0;\n\n    for my $i (0..$list1) {\n        if ($i == $list2) {\n            $result = 1;\n            break;\n        }\n        $length++;\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/415","completion":"    my ($max, $min) = 0;\n    my @pairs = ();\n    for my $i (0..$arr->length) {\n        $max = $i > $max ? $i : $max;\n        $min = $i < $min ? $i : $min;\n        $pairs[$i] = $arr[$i] * $arr[$max] * $arr[$min];\n    }\n    return $pairs;\n}","language":"perl"}
{"task_id":"MBPLP\/416","completion":"    $n = $n \/ 3;\n    $n = $n + $n + $n;\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/417","completion":"    my @Output = [];\n    my @First = [];\n    my @Second = [];\n    my @Common = [];\n    for (@Input) {\n        push @First, @Input[0];\n        push @Second, @Input[1];\n    }\n    for (@First) {\n        if (in_array $First, @Second)) {\n            push @Common, $First;\n        }\n    }\n    return @Common;\n}","language":"perl"}
{"task_id":"MBPLP\/419","completion":"    my $sum = 0;\n    my $len = 0;\n    for (@$list1) {\n        $sum += $list1;\n        $len++;\n    }\n    return $sum * $len;\n}","language":"perl"}
{"task_id":"MBPLP\/423","completion":"    $m = $m + 1;\n    $n = $n + 1;\n    if ($m > $n) {\n        $m = $m + $n;\n        $n = $m - $n;\n        $m = $m - $n;\n    }\n    return $gold[$m][$n];\n}","language":"perl"}
{"task_id":"MBPLP\/424","completion":"    my ($rear_index) = 0;\n    my @result = ();\n\n    for (@_ = $test_tuple) {\n        if ($rear_index =~ \/r$\/) {\n            $result = $result . $rear_index . $ ;\n        }\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/425","completion":"    my @sublists = 0;\n    foreach my $sublist (@$list1) {\n        if (exists $sublist {\n            $sublist = @$sublist;\n            my @sublist_elements = @$sublist;\n            foreach my $sublist_element (@sublist_elements) {\n                if ($sublist_element == $x) {\n                    ++@sublists;\n                }\n            }\n        }\n    }\n    return @sublists;\n}","language":"perl"}
{"task_id":"MBPLP\/428","completion":"    my ($n) = 0;\n    my ($gap) = 1;\n    my ($gap_size) = 1;\n    my ($gap_inc) = 1;\n    my ($gap_inc_size) = 1;\n    my ($gap_inc_inc) = 1;\n    my ($gap_inc_inc_size) = 1;\n    my ($gap_inc_inc_inc) = 1;\n    my ($gap_inc_inc_inc_size) = 1;\n    my ($gap_inc_inc_inc_inc) = 1;\n    my ($gap_inc_inc_inc_inc_size) = 1;\n    my ($gap_inc_inc_inc_inc_inc) = 1;\n    my ($gap_inc_inc_inc_inc_inc_size) = 1;\n    my ($gap_inc_inc_inc_inc_inc_inc) = 1;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/429","completion":"    my ($result_tup1, $result_tup2) = @_;\n\n    $result_tup1 = 0;\n    $result_tup2 = 0;\n\n    $result_tup1 = $test_tup1 & $test_tup2;\n    $result_tup2 = $test_tup1 | $test_tup2;\n\n    return $result_tup1, $result_tup2;\n}","language":"perl"}
{"task_id":"MBPLP\/436","completion":"    my ($list2) = @_;\n    $list2 = $list2 + $list1;\n    print $list2;\n}","language":"perl"}
{"task_id":"MBPLP\/437","completion":"    my ($str2) = @_;\n    $str2 =~ s\/\\1[^0]\/\\1\/g;\n    return $str1 . $str2;\n}","language":"perl"}
{"task_id":"MBPLP\/438","completion":"    my ($count) = 0;\n    my ($first_item, $second_item) = @_;\n    my ($first_item_index, $second_item_index) = @_;\n    my ($first_item_index_plus_one, $second_item_index_plus_one) = @_;\n    my ($first_item_index_minus_one, $second_item_index_minus_one) = @_;\n\n    if ($first_item_index == $second_item_index) {\n        $count = $count + 1;\n    }\n\n    if ($first_item_index_plus_one == $second_item_index) {\n        $count = $count + 1;\n    }\n\n    if ($first_item_index_minus_one == $second_item_index) {\n        $count = $count + 1;\n    }\n\n   ","language":"perl"}
{"task_id":"MBPLP\/440","completion":"    my $pos = 0;\n    my $found = 0;\n    my @result = [];\n\n    while ($pos < strlen($text)) {\n        if ($text{$pos} =~ \/[^\\w\\s]\/) {\n            if ($found = 1) {\n                $result{$pos} = $pos;\n            }\n            $found = 0;\n        } else {\n            if ($found = 0) {\n                $result{$pos} = $pos;\n            }\n        }\n        ++$pos;\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/442","completion":"    my ($positive_count) = 0;\n    foreach my $num (@$nums)\n    {\n        if ($num > 0)\n            ++$positive_count;\n    }\n    return $positive_count \/ count($nums);\n}","language":"perl"}
{"task_id":"MBPLP\/444","completion":"    my @result;\n    my @trim_list = @_;\n\n    for my $tuple (@trim_list) {\n        my @trim_tuple = $tuple;\n        for my $i (0 .. $K) {\n            shift $trim_tuple;\n        }\n        push @result, $trim_tuple;\n    }\n\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/445","completion":"    my @result = [];\n    my @test_tup1_len = $test_tup1->size();\n    my @test_tup2_len = $test_tup2->size();\n    my $i = 0;\n    while ($i < @test_tup1_len) {\n        my $j = 0;\n        while ($j < @test_tup2_len) {\n            my $result_element = $test_tup1[$i]->[$j] * $test_tup2[$j]->[$i];\n            push @result, $result_element;\n            $j++;\n        }\n        $i++;\n    }\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/446","completion":"    my $occ = 0;\n    foreach my $elem (@_) {\n        if (in_list($elem, $lst)) {\n            $occ++;\n        }\n    }\n    return $occ;\n}","language":"perl"}
{"task_id":"MBPLP\/447","completion":"    $nums = map { $x => $x * $x * $x } $nums;\n    return $nums;\n}","language":"perl"}
{"task_id":"MBPLP\/450","completion":"    my ($res, $i) = @_;\n    $res = $res .= $str . substr($i, $l);\n    return $res;\n}","language":"perl"}
{"task_id":"MBPLP\/456","completion":"    my @stringlist = $stringlist;\n    my @reversed_list = ();\n    for my $string (@stringlist) {\n        $reversed_list = $reversed_list . $string . $string [0];\n    }\n    return @reversed_list;\n}","language":"perl"}
{"task_id":"MBPLP\/460","completion":"    my ($first, $rest) = @_;\n    $first = $first[0];\n    $rest = $rest;\n    return $first;\n}","language":"perl"}
{"task_id":"MBPLP\/462","completion":"    my ($list2) = @_;\n    my ($list3) = @_;\n    my ($list4) = @_;\n    my ($list5) = @_;\n    my ($list6) = @_;\n    my ($list7) = @_;\n    my ($list8) = @_;\n    my ($list9) = @_;\n    my ($list10) = @_;\n    my ($list11) = @_;\n    my ($list12) = @_;\n    my ($list13) = @_;\n    my ($list14) = @_;\n    my ($list15) = @_;\n    my ($list16) = @_;\n    my ($list17) = @_;\n    my ($list18) = @_;\n    my ($list19) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/463","completion":"    my ($max, $min, $prod) = 0;\n    for (@arr) {\n        $prod = $prod + $arr;\n        if ($prod > $max) {\n            $max = $prod;\n        }\n        if ($prod < $min) {\n            $min = $prod;\n        }\n        $prod = $prod - $arr;\n    }\n    return $max - $min;\n}","language":"perl"}
{"task_id":"MBPLP\/465","completion":"    my $keys = keys %$dict1;\n    my $result = {};\n    foreach my $key (@$keys) {\n        if ($dict1{$key} != \"\") {\n            $result{$key} = $dict1{$key};\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/468","completion":"    $max = 0;\n    $max_i = 0;\n    $max_j = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            $prod = $arr[$i] * $arr[$j];\n            if ($prod > $max) {\n                $max = $prod;\n                $max_i = $i;\n                $max_j = $j;\n            }\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/469","completion":"    my $max = 0;\n    for (my $i = 1; $i <= $k; $i++) {\n        my $profit = $price - $price \/ $i;\n        if ($profit > $max) {\n            $max = $profit;\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/470","completion":"    my ($result) = @_;\n    for my $i (0..$test_tup->length-1) {\n        $result[$i] = $result[$i] + $test_tup[$i+1];\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/471","completion":"    my $result = 0;\n    for ($i = 0; $i < $lens; $i++) {\n        $result = $result + $arr[$i] * $n;\n    }\n    return $result % $n;\n}","language":"perl"}
{"task_id":"MBPLP\/472","completion":"    my ($i, $j) = @_;\n    if ($i == $j) {\n        return 0;\n    }\n    if ($i + 1 == $j) {\n        return 1;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/473","completion":"    my $result = {};\n    my @tuple_list1 = $test_list1;\n    my @tuple_list2 = $test_list2;\n    my $tuple_list1_size = $tuple_list1->size();\n    my $tuple_list2_size = $tuple_list2->size();\n    my $tuple_list1_index = 0;\n    my $tuple_list2_index = 0;\n    my $tuple_list1_current_tuple = $tuple_list1->at($tuple_list1_index);\n    my $tuple_list2_current_tuple = $tuple_list2->at($tuple_list2_index);\n    while ($tuple_list1_index < $tuple_list1_size && $tuple_list2_index < $tuple_list2_size) {\n        if ($tuple_list1_current_tuple == $tuple_list2_current_tuple) {\n","language":"perl"}
{"task_id":"MBPLP\/475","completion":"    my ($dict2) = @_;\n    my ($dict3) = @_;\n    my ($dict4) = @_;\n    my ($dict5) = @_;\n    my ($dict6) = @_;\n    my ($dict7) = @_;\n    my ($dict8) = @_;\n    my ($dict9) = @_;\n    my ($dict10) = @_;\n    my ($dict11) = @_;\n    my ($dict12) = @_;\n    my ($dict13) = @_;\n    my ($dict14) = @_;\n    my ($dict15) = @_;\n    my ($dict16) = @_;\n    my ($dict17) = @_;\n    my ($dict18) = @_;\n    my ($dict19) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/476","completion":"    my ($min, $max) = @_;\n    my ($sum) = 0;\n\n    for (@_){\n        if ($min > $max) {\n            $min = $max;\n        }\n        $sum += $max;\n        $max = $nums[0];\n        $nums = $nums[1..];\n    }\n\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/477","completion":"    return $string =~ s\/[^a-z]\/i;\n}","language":"perl"}
{"task_id":"MBPLP\/478","completion":"    my ($str2) = @_;\n    my ($str3) = @_;\n    my ($str4) = @_;\n    my ($str5) = @_;\n    my ($str6) = @_;\n    my ($str7) = @_;\n    my ($str8) = @_;\n    my ($str9) = @_;\n    my ($str10) = @_;\n    my ($str11) = @_;\n    my ($str12) = @_;\n    my ($str13) = @_;\n    my ($str14) = @_;\n    my ($str15) = @_;\n    my ($str16) = @_;\n    my ($str17) = @_;\n    my ($str18) = @_;\n    my ($str19) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/480","completion":"    my ($max, $max_char) = @_;\n    $max = 0;\n    $max_char = \"\";\n    for (@_){\n        $max = $max + 1;\n        $max_char = $max_char . $str1 [ $max ];\n    }\n    return $max_char;\n}","language":"perl"}
{"task_id":"MBPLP\/481","completion":"    my $set_len = $set->length;\n\n    if ($set_len == 0)\n        return 0;\n\n    my $set_sum = $set->sum;\n    my $set_sum_len = $set_sum->length;\n\n    if ($set_sum_len == 0)\n        return 0;\n\n    if ($set_sum_len > $set_len)\n        return 0;\n\n    if ($set_sum == $sum)\n        return 1;\n\n    if ($set_sum > $sum)\n        return 0;\n\n    my $set_sum_len_mod = $set_sum_len % $n;\n\n    if ($set_sum_len_mod == 0)\n        return 0;\n\n    my $set_sum_mod = $set_sum % $n;\n\n    if ($set_sum_mod == 0)\n        return 0;\n\n    my $set_","language":"perl"}
{"task_id":"MBPLP\/483","completion":"    my $n = 1;\n    my $factorial = 1;\n    while ($factorial % $x != 0) {\n        $n++;\n        $factorial = $n * $x;\n    }\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/484","completion":"    my @result = [];\n    my @test_list1_length = $test_list1->size();\n    my @test_list2_length = $test_list2->size();\n    my $i = 0;\n    my $j = 0;\n    while ($i < @test_list1_length && $j < @test_list2_length) {\n        if ($test_list1[$i]->first == $test_list2[$j]->first && $test_list1[$i]->second == $test_list2[$j]->second) {\n            $result[] = $test_list1[$i];\n            $i++;\n            $j++;\n        } else if ($test_list1[$i]->first == $test_list2[$j]->second && $test_list1[$i]->second == $test_list2[$j]->first) {\n            ","language":"perl"}
{"task_id":"MBPLP\/485","completion":"    my $max = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            my $s = $A[$i] . $A[$j];\n            if ($s ==~ s\/=$s) {\n                if ($s > $max) {\n                    $max = $s;\n                }\n            }\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/486","completion":"    return $p ** ($n - $k) * (1 - $p) ** ($k);\n}","language":"perl"}
{"task_id":"MBPLP\/487","completion":"    my ($tup_sorted) = @_;\n    $tup_sorted = sort { $tup_sorted { $! } };\n    return $tup_sorted;\n}","language":"perl"}
{"task_id":"MBPLP\/488","completion":"    my ($b) = @_;\n    my ($c) = @_;\n    my ($d) = @_;\n    my ($e) = @_;\n    my ($f) = @_;\n    my ($g) = @_;\n    my ($h) = @_;\n    my ($i) = @_;\n    my ($j) = @_;\n    my ($k) = @_;\n    my ($l) = @_;\n    my ($m) = @_;\n    my ($n) = @_;\n    my ($o) = @_;\n    my ($p) = @_;\n    my ($q) = @_;\n    my ($r) = @_;\n    my ($s) = @_;\n    my ($t) = @_;\n    my ($u) = ","language":"perl"}
{"task_id":"MBPLP\/490","completion":"    my ($result) = {};\n\n    my @symmetric_pairs = ();\n\n    my $i = 0;\n    my $j = 0;\n\n    while ($i < scalar $test_list) {\n        while ($j < scalar $test_list) {\n            if ($i != $j) {\n                if ($test_list[$i] == $test_list[$j]) {\n                    if (scalar $symmetric_pairs = $symmetric_pairs { $test_list[$i] => 1 }) {\n                        $result = $result { $test_list[$i] => 1 };\n                    }\n                }\n            }\n            $j = $j + 1;\n        }\n        $i = $i + 1;\n        $j = 0;\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/492","completion":"    $low = 0;\n    $high = $item_list->size() - 1;\n    while ($low <= $high) {\n        $mid = $low + ($high - $low) \/ 2;\n        if ($item_list->at($mid) == $item) {\n            return $mid;\n        }\n        if ($item_list->at($mid) < $item) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return -1;\n}","language":"perl"}
{"task_id":"MBPLP\/493","completion":"    my @polygons = [];\n    my @points = [\n        [$startx, $starty],\n        [$endx, $starty],\n        [$endx, $endy],\n        [$startx, $endy],\n        [$startx, $starty]\n    ];\n    my @radius = $radius;\n    my @center = [\n        ($startx + $endx) \/ 2,\n        ($starty + $endy) \/ 2\n    ];\n    my $d = $radius * 2;\n    my $d2 = $d * 2;\n    my @points2 = [\n        [$center[0] - $d2, $center[1] - $d2],\n        [$center[0] + $d2, $center[1] - $d2],\n        \n","language":"perl"}
{"task_id":"MBPLP\/495","completion":"    my $str2 = $str1;\n    my $str3 = $str2;\n    my $str4 = $str3;\n    my $str5 = $str4;\n    my $str6 = $str5;\n    my $str7 = $str6;\n    my $str8 = $str7;\n    my $str9 = $str8;\n    my $str10 = $str9;\n    my $str11 = $str10;\n    my $str12 = $str11;\n    my $str13 = $str12;\n    my $str14 = $str13;\n    my $str15 = $str14;\n    my $str16 = $str15;\n    my $str17 = $str16;\n    my $str18 = $str17;\n    my $str19 = $str18;\n    my $","language":"perl"}
{"task_id":"MBPLP\/496","completion":"    my $min = $nums[0];\n    my @result = @_;\n    for ($i = 1; $i < $n; $i++) {\n        if ($nums[$i] < $min) {\n            $min = $nums[$i];\n            @result = @result . $nums[$i];\n        }\n    }\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/501","completion":"    my $div = $x % $y;\n    return $div == 0 ? $y : $div;\n}","language":"perl"}
{"task_id":"MBPLP\/503","completion":"    my ($result) = ();\n    my ($i) = 0;\n    while ($i < count($nums)) {\n        if ($i > 0) {\n            $result = $result . $nums [$i - 1] + $nums [$i];\n        } else {\n            $result = $nums [$i];\n        }\n        $i = $i + 1;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/505","completion":"    my @B = @_;\n    my @C = @_;\n    my @D = @_;\n    my @E = @_;\n    my @F = @_;\n    my @G = @_;\n    my @H = @_;\n    my @I = @_;\n    my @J = @_;\n    my @K = @_;\n    my @L = @_;\n    my @M = @_;\n    my @N = @_;\n    my @O = @_;\n    my @P = @_;\n    my @Q = @_;\n    my @R = @_;\n    my @S = @_;\n    my @T = @_;\n    my @U = @_;\n    my @V = @_;\n    my @","language":"perl"}
{"task_id":"MBPLP\/507","completion":"    my @words = split \/\\s+\/;\n    my @newlist = [];\n    foreach my $word (@words) {\n        if (not in_array $removewords $word) {\n            push @newlist, $word;\n        }\n    }\n    return @newlist;\n}","language":"perl"}
{"task_id":"MBPLP\/508","completion":"    my %same = 0;\n    my %common = 0;\n    my $i = 0;\n    while ($i < scalar @_) {\n        if ($l1[$i] == $l2[$i]) {\n            ++same;\n        } else {\n            ++common;\n        }\n        ++$i;\n    }\n    if (same == scalar @_) {\n        return 1;\n    } else {\n        return 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/510","completion":"    my $n = 0;\n    my $prod = 1;\n    my $max = 0;\n    my $subseq = 0;\n    for my $i (0..$arr->size()) {\n        $prod *= $arr->at($i);\n        if ($prod < $k) {\n            $n++;\n        } else {\n            if ($prod == $k) {\n                $subseq++;\n            }\n            $prod = $arr->at($i);\n            $max = $max < $subseq ? $subseq : $max;\n            $subseq = 0;\n        }\n    }\n    $max = $max < $subseq ? $subseq : $max;\n    return $n + $max;\n}","language":"perl"}
{"task_id":"MBPLP\/512","completion":"    my ($freq_dict) = {};\n    my @$test_tuple_elements = map { $_ => $_[0] };\n    foreach my $element (@$test_tuple_elements) {\n        if ($freq_dict[$element]) {\n            $freq_dict[$element] = $freq_dict[$element] + 1;\n        } else {\n            $freq_dict[$element] = 1;\n        }\n    }\n    return $freq_dict;\n}","language":"perl"}
{"task_id":"MBPLP\/513","completion":"    my @$test_list = map { $test_tup } @{ $K };\n    return @$test_list;\n}","language":"perl"}
{"task_id":"MBPLP\/516","completion":"    my ($max) = 0;\n    for (@_){\n        if ($max < $_) {\n            $max = $_;\n        }\n    }\n    for ($i = 0; $i <= $max; $i++) {\n        my ($buckets, $bucket_size) = @_;\n        for ($j = 0; $j < $buckets; $j++) {\n            my ($bucket, $bucket_size) = @_;\n            for ($k = 0; $k < $bucket_size; $k++) {\n                my ($key, $key_size) = @_;\n                $bucket[$key] = $bucket[$key] + 1;\n            }\n            for ($k = 0; $k < $bucket_size; $k++) {\n                my ($key, $key_size) = @","language":"perl"}
{"task_id":"MBPLP\/519","completion":"    my ($volume) = 0;\n    for ($i = 1; $i <= $num; $i++) {\n        $volume += ($i * $i * $i);\n    }\n    return $volume;\n}","language":"perl"}
{"task_id":"MBPLP\/520","completion":"    my ($m) = @_;\n    for my $i (0..$l) {\n        $m = ($m * $i) \/ gcd($m, $i);\n    }\n    return $m;\n}","language":"perl"}
{"task_id":"MBPLP\/522","completion":"    my ($n) = 0;\n    my ($max) = 0;\n    my ($i) = 0;\n    my ($j) = 0;\n    for ($i = 0; $i < $arr; $i++) {\n        for ($j = $i + 1; $j < $arr; $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $n++;\n            } else if ($arr[$i] < $arr[$j]) {\n                $n--;\n            }\n        }\n        if ($n > $max) {\n            $max = $n;\n        }\n        $n = 0;\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/523","completion":"    my ($str2) = @_;\n    my ($str3) = @_;\n    my ($str4) = @_;\n    my ($str5) = @_;\n    my ($str6) = @_;\n    my ($str7) = @_;\n    my ($str8) = @_;\n    my ($str9) = @_;\n    my ($str10) = @_;\n    my ($str11) = @_;\n    my ($str12) = @_;\n    my ($str13) = @_;\n    my ($str14) = @_;\n    my ($str15) = @_;\n    my ($str16) = @_;\n    my ($str17) = @_;\n    my ($str18) = @_;\n    my ($str19) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/524","completion":"    my $max = 0;\n    my @max_sub = [];\n    for my $i (0..$n) {\n        my $cur = $arr[$i];\n        my $cur_max = $max;\n        for my $j (0..$i) {\n            if ($cur > $arr[$j]) {\n                $cur_max = max($cur_max, $cur + $arr[$j]);\n            }\n        }\n        if ($cur_max > $max) {\n            $max = $cur_max;\n            @max_sub = [$cur, $cur_max];\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/526","completion":"    my ($str2) = @_;\n    my ($str3) = @_;\n    my ($str4) = @_;\n    my ($str5) = @_;\n    my ($str6) = @_;\n    my ($str7) = @_;\n    my ($str8) = @_;\n    my ($str9) = @_;\n    my ($str10) = @_;\n    my ($str11) = @_;\n    my ($str12) = @_;\n    my ($str13) = @_;\n    my ($str14) = @_;\n    my ($str15) = @_;\n    my ($str16) = @_;\n    my ($str17) = @_;\n    my ($str18) = @_;\n    my ($str19) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/527","completion":"    my $pairs = 0;\n    my @pairs = @();\n    my $i = 0;\n    while ($i < $arr.length) {\n        if ($arr[$i] + $arr[$i + 1] == $sum) {\n            $pairs++;\n            $pairs[] = $arr[$i];\n            $pairs[] = $arr[$i + 1];\n        }\n        $i++;\n    }\n    return $pairs;\n}","language":"perl"}
{"task_id":"MBPLP\/528","completion":"    my ($list2) = @_;\n    my ($min_len, $min_list) = (0, []);\n    for my $i (0, $list1->count) {\n        for my $j (0, $list2->count) {\n            if ($i != $j) {\n                if ($list1->{$i} < $list2->{$j}) {\n                    if ($min_len > $list1->{$i}) {\n                        $min_len = $list1->{$i};\n                        $min_list = $list1->{$i};\n                    }\n                } else {\n                    if ($min_len > $list2->{$j}) {\n                        $min_len = $list2->{$j};\n                        $min_list = $list2->{$j};\n                    }\n                }\n            }\n        }","language":"perl"}
{"task_id":"MBPLP\/530","completion":"    my ($neg_count) = 0;\n    foreach my $num (@$nums)\n    {\n        if ($num < 0)\n        {\n            $neg_count++;\n        }\n    }\n    return $neg_count \/ @$nums->length;\n}","language":"perl"}
{"task_id":"MBPLP\/531","completion":"    my $min = 0;\n    for my $i (0..$m) {\n        if ($V - $i >= 0) {\n            $min = $min + $coins[$i];\n            if ($V - $i == 0) {\n                return $min;\n            }\n        }\n    }\n    return $min;\n}","language":"perl"}
{"task_id":"MBPLP\/532","completion":"    my $hash = 0;\n    my @str1_chars = split \/\\W\/;\n    my @str2_chars = split \/\\W\/;\n    my $str1_length = strlen $str1;\n    my $str2_length = strlen $str2;\n    my $str1_hash = 0;\n    my $str2_hash = 0;\n    for my $i (0..$str1_length) {\n        $str1_hash = $str1_hash + ord($str1_chars[$i]) * (ord($str1_chars[$i]) - 96);\n    }\n    for my $i (0..$str2_length) {\n        $str2_hash = $str2_hash + ord($str2_chars[$i]) * (ord($str2_chars[$i]) - 96);\n    }\n    if ($str1_hash == ","language":"perl"}
{"task_id":"MBPLP\/534","completion":"    my ($start, $end) = @_;\n    $start = strpos($text, $pattern);\n    if ($start === false) {\n        return @_;\n    }\n    $end = $start + strlen($pattern);\n    return [$start, $end];\n}","language":"perl"}
{"task_id":"MBPLP\/536","completion":"    my @result = ();\n\n    for my $i (0..$n) {\n        push @result, $list[$i];\n    }\n\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/537","completion":"    my ($str2) = @_;\n    my ($str3) = @_;\n    my ($str4) = @_;\n    my ($str5) = @_;\n    my ($str6) = @_;\n    my ($str7) = @_;\n    my ($str8) = @_;\n    my ($str9) = @_;\n    my ($str10) = @_;\n    my ($str11) = @_;\n    my ($str12) = @_;\n    my ($str13) = @_;\n    my ($str14) = @_;\n    my ($str15) = @_;\n    my ($str16) = @_;\n    my ($str17) = @_;\n    my ($str18) = @_;\n    my ($str19) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/538","completion":"    my ($str2) = @_;\n    my ($str3) = @_;\n    my ($str4) = @_;\n    my ($str5) = @_;\n    my ($str6) = @_;\n    my ($str7) = @_;\n    my ($str8) = @_;\n    my ($str9) = @_;\n    my ($str10) = @_;\n    my ($str11) = @_;\n    my ($str12) = @_;\n    my ($str13) = @_;\n    my ($str14) = @_;\n    my ($str15) = @_;\n    my ($str16) = @_;\n    my ($str17) = @_;\n    my ($str18) = @_;\n    my ($str19) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/539","completion":"    my @powers = map { $bases_num ^ $index } @_;\n    return @powers;\n}","language":"perl"}
{"task_id":"MBPLP\/540","completion":"    my ($highest, $lowest) = 0;\n    for my $i (0, $n) {\n        if ($arr[$i] > $highest) {\n            $highest = $arr[$i];\n        }\n        if ($arr[$i] < $lowest) {\n            $lowest = $arr[$i];\n        }\n    }\n    return $highest - $lowest;\n}","language":"perl"}
{"task_id":"MBPLP\/543","completion":"    my $sum = 0;\n    my $len = 0;\n    for (@_){\n        $sum = $sum + $_.to_i;\n        $len = $len + 1;\n    }\n    print $len;\n}","language":"perl"}
{"task_id":"MBPLP\/545","completion":"    $n =~ s\/1\/0\/g;\n    $n =~ s\/0\/1\/g;\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/546","completion":"    my $pos = 0;\n    my $last = 0;\n    while ($pos = $string =~ \/$char\/i) {\n        $last = $pos;\n    }\n    return $last;\n}","language":"perl"}
{"task_id":"MBPLP\/547","completion":"    my ($o) = @_;\n    my ($d) = 0;\n    for ($i = $o; $i <= $n; $i++) {\n        $d += $i ^ $i - 1;\n    }\n    return $d;\n}","language":"perl"}
{"task_id":"MBPLP\/548","completion":"    my ($max, $curr) = 0;\n    my ($i, $j) = 0;\n    for ($i = 0; $i < $arr; $i++) {\n        for ($j = $i + 1; $j < $arr; $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                if ($curr + 1 > $max) {\n                    $max = $curr + 1;\n                }\n                $curr = 0;\n            } else {\n                $curr++;\n            }\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/550","completion":"    my $max = 0;\n\n    if ($low < $high) {\n        for ($i = $low; $i <= $high; $i++) {\n            if ($arr[$i] > $max) {\n                $max = $arr[$i];\n            }\n        }\n    } else {\n        for ($i = $low; $i >= $high; $i--) {\n            if ($arr[$i] > $max) {\n                $max = $arr[$i];\n            }\n        }\n    }\n\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/551","completion":"    my @$list2 = map { $_ => $_[$n] };\n    return $list2;\n}","language":"perl"}
{"task_id":"MBPLP\/552","completion":"    my ($seq_len) = 0;\n    for my $i (0..$seq_nums) {\n        $seq_len = $seq_len + 1;\n        if ($seq_len > $seq_nums) {\n            return \"Non Linear Sequence\";\n        }\n    }\n    return \"Linear Sequence\";\n}","language":"perl"}
{"task_id":"MBPLP\/553","completion":"    my ($float_val) = 0;\n    foreach my $item (@_) {\n        $float_val = $float_val + $item * $item;\n    }\n    return $float_val;\n}","language":"perl"}
{"task_id":"MBPLP\/554","completion":"    my ($even, $odd) = @_;\n    $even = $even + 1;\n    $odd = $odd + 2;\n    print \"$even\\n\";\n    print \"$odd\\n\";\n}","language":"perl"}
{"task_id":"MBPLP\/556","completion":"    my $odd = 0;\n    for my $i (1; $i <= $N; $i++) {\n        if ($i % 2 != 0) {\n            $odd++;\n        }\n    }\n    return $odd;\n}","language":"perl"}
{"task_id":"MBPLP\/557","completion":"    my ($new_string) = '';\n    for (my $i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == $string[$i].upper()) {\n            $new_string .= $string[$i].lower();\n        } else {\n            $new_string .= $string[$i].upper();\n        }\n    }\n    return $new_string;\n}","language":"perl"}
{"task_id":"MBPLP\/560","completion":"    my @result = ();\n    my @test_tup1_elements = map { $_ => $_ };\n    my @test_tup2_elements = map { $_ => $_ };\n    my $i = 0;\n    my $j = 0;\n    while ($i < scalar $test_tup1_elements) {\n        if ($j < scalar $test_tup2_elements) {\n            if ($test_tup1_elements[$i] == $test_tup2_elements[$j]) {\n                push @result, $test_tup1_elements[$i];\n            }\n            ++$j;\n        } else {\n            push @result, $test_tup1_elements[$i];\n            ++$i;\n            ++$j;\n        }\n    }\n    while ($j < scalar $test_tup2_elements) {\n        push @result, $test_tup","language":"perl"}
{"task_id":"MBPLP\/561","completion":"    my ($result) = {};\n\n    for my $pair (@$test_list) {\n        my ($first, $second) = $pair;\n        $result[$first] = $second;\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/563","completion":"    my @values;\n    my $quote = \"\\\"\";\n    my $start = $quote;\n    my $end = $quote;\n\n    while ($start < $text) {\n        if ($text =~ \/([^\\s\\\\\"]+|\\\\.)$\/) {\n            push @values, $text;\n        } else {\n            $end = $text;\n            break;\n        }\n    }\n\n    return @values;\n}","language":"perl"}
{"task_id":"MBPLP\/564","completion":"    my $count = 0;\n    for my $i (0..$n) {\n        for my $j (0..$n) {\n            if ($i != $j) {\n                if ($arr[$i] == $arr[$j]) {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/565","completion":"    my ($result) = @_;\n    $result =~ s\/\\s\/ \/g;\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/568","completion":"    my @list = ();\n    for my $i (0..$length) {\n        $list{$i} = {};\n    }\n    return @list;\n}","language":"perl"}
{"task_id":"MBPLP\/569","completion":"    my ($list2) = @_;\n    my ($list3) = @_;\n    my ($list4) = @_;\n    my ($list5) = @_;\n    my ($list6) = @_;\n    my ($list7) = @_;\n    my ($list8) = @_;\n    my ($list9) = @_;\n    my ($list10) = @_;\n    my ($list11) = @_;\n    my ($list12) = @_;\n    my ($list13) = @_;\n    my ($list14) = @_;\n    my ($list15) = @_;\n    my ($list16) = @_;\n    my ($list17) = @_;\n    my ($list18) = @_;\n    my ($list19) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/570","completion":"    my @words = split \/\\s+\/;\n    my @newlist = [];\n\n    foreach my $word (@words) {\n        if ( ! in_array $word $charlist ) {\n            push @newlist, $word;\n        }\n    }\n\n    return @newlist;\n}","language":"perl"}
{"task_id":"MBPLP\/571","completion":"    my $max = 0;\n    my @pairs = @_;\n    for (@pairs) {\n        my $sum = 0;\n        my $i = 0;\n        my $j = 0;\n        while ($i < $N && $j < $N) {\n            if ($i < $j) {\n                $sum += $arr[$i] - $arr[$j];\n            }\n            if ($i < $K) {\n                $i++;\n            }\n            if ($j < $K) {\n                $j++;\n            }\n        }\n        if ($sum > $max) {\n            $max = $sum;\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/572","completion":"    my ($seen) = 0;\n    my ($result) = [];\n\n    for (@_){\n        if ($seen == 0 || $nums == $seen) {\n            $seen = $nums;\n            $result = $result . $nums;\n        }\n        else {\n            $seen = $seen . $nums;\n        }\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/573","completion":"    my $unique_list = ();\n    my $unique_list_size = 0;\n    my @unique_list_data = $list_data;\n\n    $unique_list_size = $unique_list_data =~ s\/\\s\/ | 0;\n    $unique_list = @unique_list_data;\n\n    my $product = 1;\n    foreach my $item (@unique_list) {\n        $product *= $item;\n    }\n\n    return $product;\n}","language":"perl"}
{"task_id":"MBPLP\/578","completion":"    my ($result, $result2) = @_;\n    $result = $result . join (\", \") . join (\", \");\n    $result2 = $result2 . join (\", \") . join (\", \");\n    $result = $result . \"\\n\" . $result2;\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/579","completion":"    my ($dissimilar_tup1, $dissimilar_tup2) = @_;\n\n    my $dissimilar_list = @_;\n\n    foreach my $element1 (@_) {\n        if (in_array($element1, $dissimilar_tup1)) {\n            push $dissimilar_list, $element1;\n        }\n    }\n\n    foreach my $element2 (@_) {\n        if (in_array($element2, $dissimilar_tup2)) {\n            push $dissimilar_list, $element2;\n        }\n    }\n\n    return $dissimilar_list;\n}","language":"perl"}
{"task_id":"MBPLP\/580","completion":"    my ($even_list) = ();\n    my @$even_list = ();\n    for my $i (0..$#test_tuple) {\n        if ($i % 2 == 0) {\n            push @$even_list, $test_tuple[$i];\n        }\n    }\n    return $even_list;\n}","language":"perl"}
{"task_id":"MBPLP\/581","completion":"    $s = $b * $b;\n    $s = $s + $b * $b;\n    $s = $s + $b * $b;\n    $s = $s + $b * $b;\n    $s = $s + $b * $b;\n    return $s;\n}","language":"perl"}
{"task_id":"MBPLP\/583","completion":"    my ($catalan, $n) = @_;\n    $catalan = $catalan * ($n + 1) \/ 2;\n    if ($n == 1) {\n        return $catalan;\n    }\n    return $catalan_number($num - 1) + $catalan_number($num - 2);\n}","language":"perl"}
{"task_id":"MBPLP\/584","completion":"    my $pattern = \"(?<=[aeiou])(?=[aeiou][aeiou])|(?<=[aeiou])[aeiou](?=[aeiou])|(?<=[aeiou])[aeiou][aeiou](?=[aeiou])\";\n    my $result = $text =~ $pattern;\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/585","completion":"    my $heap = new heap;\n    foreach my $item (@$items) {\n        push $heap, $item->price;\n    }\n    my $result = [];\n    while ($heap->size() > 0) {\n        my $min = pop $heap;\n        if ($min > $n) {\n            push $result, $min;\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/586","completion":"    my @b = split($a, $n);\n    $b[0..$k] = $a[0..$k];\n    return join($b, $n);\n}","language":"perl"}
{"task_id":"MBPLP\/588","completion":"    my ($min, $max) = @_;\n    $min = $min < $max ? $min : $max;\n    $max = $min > $max ? $min : $max;\n    $min = $min - $max;\n    $max = $min + $max;\n    $min = $min < 0 ? 0 : $min;\n    $max = $max > $nums ? $nums : $max;\n    $min = $min < $max ? $min : $max;\n    $max = $min > $max ? $min : $max;\n    return $min;\n}","language":"perl"}
{"task_id":"MBPLP\/589","completion":"    my @squares;\n    for my $i (1, $a);\n        if ($i * $i == $b)\n            squares{$i} = 1;\n        elsif ($i * $i > $b)\n            break;\n    next;\n    return @squares;\n}","language":"perl"}
{"task_id":"MBPLP\/591","completion":"    my ($first, $last) = @_;\n    $newList[0] = $last;\n    $newList[$newList.length - 1] = $first;\n    return $newList;\n}","language":"perl"}
{"task_id":"MBPLP\/592","completion":"    my $result = 0;\n    for my $i (1; $i <= $n; $i++) {\n        for my $j (1; $j <= $n; $j++) {\n            if ($i != $j) {\n                $result += $i * $j;\n            }\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/594","completion":"    my ($even, $odd) = (0, 0);\n    foreach my $n (@_) {\n        if ($n % 2) {\n            $odd += 1;\n        } else {\n            $even += 1;\n        }\n    }\n    return $even - $odd;\n}","language":"perl"}
{"task_id":"MBPLP\/595","completion":"    $str1 =~ s\/\\d\/g;\n    $str2 =~ s\/\\d\/g;\n    $str1 =~ s\/\\D\/g;\n    $str2 =~ s\/\\D\/g;\n    $str1 =~ s\/\\s\/g;\n    $str2 =~ s\/\\s\/g;\n    $str1 =~ s\/\\S\/g;\n    $str2 =~ s\/\\S\/g;\n    $str1 =~ s\/\\w\/g;\n    $str2 =~ s\/\\w\/g;\n    $str1 =~ s\/\\W\/g;\n    $str2 =~ s\/\\W\/g;\n    $str1 =~ s\/\\d+\/g;\n    $str2 =~ s\/\\d+\/g;\n    $str1 =~ s\/\\D+\/g;\n    $str2 =~ s\/\\D+\/g;\n    $str1 =~ s\/\\s+\/g;\n   ","language":"perl"}
{"task_id":"MBPLP\/597","completion":"    my $i = 0;\n    my $j = 0;\n    my $mid = 0;\n    my $result = 0;\n\n    while ($i < $m && $j < $n) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $i++;\n        } else if ($arr1[$i] > $arr2[$j]) {\n            $j++;\n        } else {\n            if ($mid == $k - 1) {\n                $result = $arr1[$i];\n                break;\n            } else {\n                $mid++;\n                $i++;\n                $j++;\n            }\n        }\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/602","completion":"    my ($str2) = @_;\n    my ($str3) = @_;\n    my ($str4) = @_;\n    my ($str5) = @_;\n    my ($str6) = @_;\n    my ($str7) = @_;\n    my ($str8) = @_;\n    my ($str9) = @_;\n    my ($str10) = @_;\n    my ($str11) = @_;\n    my ($str12) = @_;\n    my ($str13) = @_;\n    my ($str14) = @_;\n    my ($str15) = @_;\n    my ($str16) = @_;\n    my ($str17) = @_;\n    my ($str18) = @_;\n    my ($str19) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/603","completion":"    my ($l) = @_;\n    $l = $l + $l + $l;\n    $l = $l + $l + $l;\n    $l = $l + $l + $l;\n    $l = $l + $l + $l;\n    $l = $l + $l + $l;\n    $l = $l + $l + $l;\n    $l = $l + $l + $l;\n    $l = $l + $l + $l;\n    $l = $l + $l + $l;\n    $l = $l + $l + $l;\n    $l = $l + $l + $l;\n    $l = $l + ","language":"perl"}
{"task_id":"MBPLP\/607","completion":"    my $pos = 0;\n    my $result = [];\n    my $pattern_re = \"\/\\b\" . $pattern . \"\\b\/g\";\n    my $pattern_pos = 0;\n    while (my ($match, $pos) = @_ =~ $pattern_re) {\n        $result[] = $match;\n        $pattern_pos = $pos;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/609","completion":"    return $N - ($A < $B ? $A : $B);\n}","language":"perl"}
{"task_id":"MBPLP\/610","completion":"    my ($list2, $k) = @_;\n    $list2 = $list2 + 1;\n    $list1 = $list1 + $list2;\n    $list1 = $list1 - $list2;\n    $list1 = $list1 - $k;\n    return $list1;\n}","language":"perl"}
{"task_id":"MBPLP\/612","completion":"    my ($first, $last) = @_;\n    $first = $first || @_;\n    $last = $last || @_;\n    $first = map { $_ => $_ } @$first;\n    $last = map { $_ => $_ } @$last;\n    $first = $first || @_;\n    $last = $last || @_;\n    $first = map { $_ => $_ } @$first;\n    $last = map { $_ => $_ } @$last;\n    $first = $first || @_;\n    $last = $last || @_;\n    $first = map { $_ => $_ } @$first;\n    $last = map { $_ => $_ } @$last;\n    $first ","language":"perl"}
{"task_id":"MBPLP\/615","completion":"    my @average = ();\n    for (@nums) {\n        my $sum = 0;\n        my @numbers = split \/\\s+\/;\n        foreach my $number (@numbers) {\n            $sum += $number;\n        }\n        $average[] = $sum \/ count($numbers);\n    }\n    return $average;\n}","language":"perl"}
{"task_id":"MBPLP\/616","completion":"    my $modulo = 0;\n    for my $i (0..$test_tup1->size) {\n        $modulo = $modulo + ($test_tup1->$i % $test_tup2->$i);\n    }\n    return $modulo;\n}","language":"perl"}
{"task_id":"MBPLP\/618","completion":"    my $div = map { $nums1\/$nums2 };\n    return $div;\n}","language":"perl"}
{"task_id":"MBPLP\/619","completion":"    my ($num_str) = $test_str;\n    my ($num_str_len) = length($num_str);\n    my ($num_str_len_minus_one) = $num_str_len - 1;\n    my ($num_str_len_minus_one_minus_one) = $num_str_len_minus_one - 1;\n    my ($num_str_len_minus_one_minus_one_minus_one) = $num_str_len_minus_one_minus_one - 1;\n    my ($num_str_len_minus_one_minus_one_minus_one_minus_one) = $num_str_len_minus_one_minus_one_minus_one - 1;\n    my ($num_str_len_minus_one_minus_one_minus_one_minus_one_minus_one) = $num_str_len_minus_one_minus_one_minus_one_minus_one ","language":"perl"}
{"task_id":"MBPLP\/620","completion":"    my $result = 0;\n    my $max = 0;\n    my $max_index = 0;\n    my $max_count = 0;\n    for my $i (0..$n) {\n        my $count = 0;\n        for my $j (0..$n) {\n            if ($i != $j) {\n                if ($a[$i] % $a[$j] == 0) {\n                    $count++;\n                }\n            }\n        }\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max = $a[$i];\n            $max_index = $i;\n        }\n    }\n    return $max_index;\n}","language":"perl"}
{"task_id":"MBPLP\/621","completion":"    my @numbers = split \/\\D+\/;\n    my @new_numbers = [];\n\n    foreach my $number (@numbers) {\n        $new_numbers[$number + $K] = $number;\n    }\n\n    return join \" \", @new_numbers;\n}","language":"perl"}
{"task_id":"MBPLP\/622","completion":"    $arr1 = sort $arr1;\n    $arr2 = sort $arr2;\n    $n = $n + 1;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $m = 0;\n    $n1 = $n - 1;\n    $n2 = $n - 2;\n    $n3 = $n - 3;\n    $n4 = $n - 4;\n    $n5 = $n - 5;\n    $n6 = $n - 6;\n    $n7 = $n - 7;\n    $n8 = $n - 8;\n    $n9 = $n - 9;\n    $n10 = $n - 10;\n    $n11 = $n - ","language":"perl"}
{"task_id":"MBPLP\/623","completion":"    return map { $n -> $n * $nums } @_;\n}","language":"perl"}
{"task_id":"MBPLP\/624","completion":"    return $string =~ s\/[^a-z]\/$string\/g;\n}","language":"perl"}
{"task_id":"MBPLP\/625","completion":"    my ($first, $last) = @_;\n    $newList[0] = $last;\n    $newList[$newList.length - 1] = $first;\n    return $newList;\n}","language":"perl"}
{"task_id":"MBPLP\/629","completion":"    my ($even) = @_;\n\n    for (my $i = 0; $i < count($list); $i++) {\n        if ($list[$i] % 2 == 0) {\n            $even[] = $list[$i];\n        }\n    }\n\n    return $even;\n}","language":"perl"}
{"task_id":"MBPLP\/630","completion":"    my ($coordinates) = @_;\n    my ($new_coordinates) = @_;\n    for my $i (0..$coordinates->length)\n    {\n        $new_coordinates[$i] = $coordinates[$i];\n        if ($i + 1 < $coordinates->length)\n        {\n            $new_coordinates[$i] = $new_coordinates[$i] . ',' . $coordinates[$i + 1];\n        }\n    }\n    return $new_coordinates;\n}","language":"perl"}
{"task_id":"MBPLP\/632","completion":"    my @zero_list;\n    foreach my $num (@$num_list) {\n        if ($num == 0) {\n            push @zero_list, $num;\n        }\n    }\n    return @zero_list;\n}","language":"perl"}
{"task_id":"MBPLP\/633","completion":"    my @xor = 0;\n    for my $i (0..$n) {\n        $xor = $xor + $arr[$i] ^ $arr[$i+1];\n    }\n    return $xor;\n}","language":"perl"}
{"task_id":"MBPLP\/635","completion":"    my ($heap) = @_;\n    my ($heap_size) = 0;\n    my ($heap_size_max) = 0;\n    my ($heap_size_min) = 0;\n    my ($heap_size_min_index) = 0;\n    my ($heap_size_max_index) = 0;\n    my ($heap_size_min_value) = 0;\n    my ($heap_size_max_value) = 0;\n    my ($heap_size_min_index_value) = 0;\n    my ($heap_size_max_index_value) = 0;\n    my ($heap_size_min_value_value) = 0;\n    my ($heap_size_max_value_value) = 0;\n\n    for (@$iterable) {\n        push $heap, $iterable;\n        $heap_size++;\n    }\n\n    for (@$heap) {\n        if","language":"perl"}
{"task_id":"MBPLP\/638","completion":"    $t = $t - 32;\n    $v = $v * 5 \/ 9;\n    $v = $v + $t * 0.4;\n    $v = $v - $t * 0.4;\n    $v = $v * 0.15;\n    return $v;\n}","language":"perl"}
{"task_id":"MBPLP\/640","completion":"    my $result = \"\";\n    foreach my $item (@$items) {\n        if ($item =~ \/\\(|\\)\/) {\n            $result .= $item;\n        } else {\n            $result .= $item;\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/644","completion":"    my @output;\n    for my $i (0..$k) {\n        push @output, $input[($i - $k) + $k];\n    }\n    return @output;\n}","language":"perl"}
{"task_id":"MBPLP\/645","completion":"    my $result = 1;\n    foreach my $item (@$test_list) {\n        $result *= $item[$K];\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/646","completion":"    my $n = $N;\n    my $k = $K;\n    my $cubes = 0;\n    while ($n >= $k) {\n        $cubes = $cubes + $n \/ $k;\n        $n = $n \/ $k;\n    }\n    return $cubes;\n}","language":"perl"}
{"task_id":"MBPLP\/647","completion":"    my ($result) = @_;\n\n    # split the string at uppercase letters\n    $result = split \/(?=[A-Z])\/;\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/648","completion":"    my ($n) = 0;\n    my ($n1) = 0;\n    my ($n2) = 0;\n    my ($n3) = 0;\n    my ($n4) = 0;\n    my ($n5) = 0;\n\n    for (@_){\n        if ($n == $n1){\n            $n2 = $n3;\n            $n3 = $n4;\n            $n4 = $n5;\n            $n5 = $n;\n            $n = $n1;\n            $n1 = $n2;\n        }\n        else if ($n == $n2){\n            $n3 = $n4;\n            $n4 = $n5;\n            $n5 = $n;\n            $n = $n2;\n            $n2 = $n3;\n        ","language":"perl"}
{"task_id":"MBPLP\/650","completion":"    my $result = 0;\n    my @arr1 = $arr1;\n    my @arr2 = $arr2;\n\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr1[$i] != $arr2[$i]) {\n            $result = 1;\n            break;\n        }\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/651","completion":"    my ($sub_tup1, $sub_tup2) = @_;\n\n    my $result = 0;\n    my $len_sub_tup1 = length $sub_tup1;\n    my $len_sub_tup2 = length $sub_tup2;\n\n    if ($len_sub_tup1 > $len_sub_tup2) {\n        $result = 1;\n    } elseif ($len_sub_tup1 < $len_sub_tup2) {\n        $result = -1;\n    } else {\n        for ($i = 0; $i < $len_sub_tup1; $i++) {\n            if ($sub_tup1[$i] < $sub_tup2[$i]) {\n                $result = 1;\n                break;\n            } elseif ($sub_tup1[$i] > $sub_tup2[$i]) {\n                $","language":"perl"}
{"task_id":"MBPLP\/652","completion":"    my ($result) = @_;\n    my ($row_list) = @_;\n    my ($col_list) = @_;\n    my ($row_len) = 0;\n    my ($col_len) = 0;\n    my ($row_index) = 0;\n    my ($col_index) = 0;\n\n    for ($row_index = 0; $row_index < $row_list->size(); $row_index++) {\n        $row_len = $row_list->at($row_index)->size();\n        for ($col_index = 0; $col_index < $col_list->size(); $col_index++) {\n            $col_len = $col_list->at($col_index)->size();\n            $result->at($row_index)->at($col_index) = $test_list->at($row_index)->at($col_","language":"perl"}
{"task_id":"MBPLP\/653","completion":"    $d = {};\n    foreach ($l as $k => $v) {\n        if ($d[$k] == undef) {\n            $d[$k] = [];\n        }\n        $d[$k] = $d[$k] || [];\n        $d[$k] = $d[$k] + [$v];\n    }\n    return $d;\n}","language":"perl"}
{"task_id":"MBPLP\/656","completion":"    my $min = 0;\n    my @diff = 0;\n    for (@a) {\n        for (@b) {\n            $diff = abs($a - $b);\n            if ($min < $diff) {\n                $min = $diff;\n            }\n        }\n    }\n    return $min;\n}","language":"perl"}
{"task_id":"MBPLP\/658","completion":"    my ($max, $count) = (0, 0);\n    foreach my $item (@$list1) {\n        if ($count < $item) {\n            $max = $item;\n            $count = $item;\n        }\n        if ($count == $item) {\n            $count += 1;\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/659","completion":"    # If the list is empty, return the empty list.\n    if ($x) {\n        # If the list has only one element, return the list.\n        if ($x == 1) {\n            return $x;\n        }\n        # If the list has more than one element, return the list with the duplicants.\n        return $x . repeat;\n    }\n    # Otherwise, return the empty list.\n    return @_;\n}","language":"perl"}
{"task_id":"MBPLP\/661","completion":"    $max = 0;\n    $sum = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $sum = $sum + $arr[$i];\n        if ($i < 2) continue;\n        if ($sum > $max) $max = $sum;\n        $sum = $sum - $arr[$i - 2];\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/662","completion":"    my ($dict2) = @_;\n    my ($dict3) = @_;\n\n    $dict3 = sort {\n        $dict3 => $dict3->{$_->[0]}->[$_->[1]]->[$_->[2]];\n    };\n\n    $dict2 = sort {\n        $dict2 => $dict2->{$_->[0]}->[$_->[1]];\n    };\n\n    $dict1 = sort {\n        $dict1 => $dict1->{$_->[0]};\n    };\n\n    return $dict3->{$_->[0]}->{$_->[1]}->{$_->[2]};\n}","language":"perl"}
{"task_id":"MBPLP\/665","completion":"    my ($first_elem) = $num_list[0];\n    $num_list[0] = $num_list[@_];\n    $num_list[$@_] = $first_elem;\n    return $num_list;\n}","language":"perl"}
{"task_id":"MBPLP\/667","completion":"    my $count = 0;\n    foreach my $vowel (split \/\\s\/, $vowels) {\n        if ($vowel eq $string) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/670","completion":"    my ($n) = 0;\n    my ($d) = 0;\n    my ($i) = 0;\n    for (@_){\n        $n = $n + $nums[$i];\n        $d = $d + $i;\n        $i = $i + 1;\n    }\n    return $d > 0 ? 0 : 1;\n}","language":"perl"}
{"task_id":"MBPLP\/671","completion":"    $n =~ s\/1$\/\/;\n    $n = $n | (1 << $n);\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/674","completion":"    my ($words) = split \/\\s+\/;\n    my ($unique_words) = map { $words{$_} } keys %words;\n    return join \" \" , $unique_words;\n}","language":"perl"}
{"task_id":"MBPLP\/676","completion":"    my ($text2) = $text1;\n    my ($text3) = $text2;\n    my ($text4) = $text3;\n    my ($text5) = $text4;\n    my ($text6) = $text5;\n    my ($text7) = $text6;\n    my ($text8) = $text7;\n    my ($text9) = $text8;\n    my ($text10) = $text9;\n    my ($text11) = $text10;\n    my ($text12) = $text11;\n    my ($text13) = $text12;\n    my ($text14) = $text13;\n    my ($text15) = $text14;\n    my ($text16) = $text15;\n    my ($text17) = $text16;\n    my ($text18) = $text17;\n   ","language":"perl"}
{"task_id":"MBPLP\/679","completion":"    my $value = $ditionary[$key];\n    return $value;\n}","language":"perl"}
{"task_id":"MBPLP\/680","completion":"    my ($inc) = 0;\n    my ($dec) = 0;\n    for (@_){\n        if ($nums % 2 == 0) {\n            $inc++;\n        } else {\n            $dec++;\n        }\n        $nums = $nums - 1;\n    }\n    if ($inc > $dec) {\n        return 1;\n    } else {\n        return 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/682","completion":"    $nums1 = map { $x * $y } @$nums1;\n    $nums2 = map { $x * $y } @$nums2;\n    return $nums1, $nums2;\n}","language":"perl"}
{"task_id":"MBPLP\/684","completion":"    my @cnt = 0;\n    for my $i (0..$str) {\n        if ($i =~ \/$x\/){\n            ++$cnt;\n        }\n    }\n    return $cnt;\n}","language":"perl"}
{"task_id":"MBPLP\/685","completion":"    my ($sum) = 0;\n    my ($i) = 1;\n    while ($i <= $n) {\n        my ($is_prime) = $i % 2 == 0 ? 1 : 0;\n        if ($is_prime) {\n            $sum = $sum + $i;\n        }\n        $i = $i + 1;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/686","completion":"    my ($freq_dict) = {};\n    for my $elem (@_);\n        if ($freq_dict[$elem]) {\n            $freq_dict[$elem] = $freq_dict[$elem] + 1;\n        } else {\n            $freq_dict[$elem] = 1;\n        }\n    return $freq_dict;\n}","language":"perl"}
{"task_id":"MBPLP\/688","completion":"    return $a + $b * 1.0;\n}","language":"perl"}
{"task_id":"MBPLP\/689","completion":"    my $min = 0;\n    my $max = $n - 1;\n    my $jump = 0;\n    my $pos = 0;\n    while ($pos <= $max) {\n        $jump = $pos + $arr[$pos];\n        if ($jump > $max) {\n            $jump = $max;\n        }\n        if ($jump < $min) {\n            $min = $jump;\n        }\n        $pos = $jump;\n    }\n    return $min;\n}","language":"perl"}
{"task_id":"MBPLP\/690","completion":"    my ($result) = @_;\n    for (@_){\n        if ($nums eq $result) {\n            $result = $result * $nums;\n            $nums = @_;\n        } else {\n            $result = $result + $nums;\n            $nums = @_;\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/691","completion":"    my ($result) = {};\n    my @$test_list_2 = $test_list;\n    my @$test_list_3 = $test_list_2;\n    my @$test_list_4 = $test_list_3;\n    my @$test_list_5 = $test_list_4;\n    my @$test_list_6 = $test_list_5;\n    my @$test_list_7 = $test_list_6;\n    my @$test_list_8 = $test_list_7;\n    my @$test_list_9 = $test_list_8;\n    my @$test_list_10 = $test_list_9;\n    my @$test_list_11 = $test_list_10;\n    my @$test_list_12 = $test_list_11;\n    my @$test_list_13 = $test_","language":"perl"}
{"task_id":"MBPLP\/694","completion":"    my ($result) = [];\n    foreach my $key (keys $test_dict) {\n        my $values = $test_dict{$key};\n        if (count($values) == 1) {\n            push $result, $values[0];\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/695","completion":"    my @result = 0;\n    my @index = 0;\n    for my $index (0..$test_tup1->{#}) {\n        if ($test_tup2->{$index}) {\n            if ($test_tup2->{$index} > $test_tup1->{$index}) {\n                $result = 1;\n                break;\n            }\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/696","completion":"    my $new_list = [];\n    for my $i (0..$list1->length) {\n        $new_list[] = $list1[$i] . $list2[$i];\n    }\n    return $new_list;\n}","language":"perl"}
{"task_id":"MBPLP\/698","completion":"    my ($sorted_dict) = {};\n\n    $sorted_dict = sort_dict_item($test_dict);\n\n    return $sorted_dict;\n}","language":"perl"}
{"task_id":"MBPLP\/699","completion":"    my $n = 0;\n    my $len1 = length($str1);\n    my $len2 = length($str2);\n    my $str1_rev = reverse($str1);\n    my $str2_rev = reverse($str2);\n    for (@_; $n < $len1 && $n < $len2; $n++) {\n        if ($str1[$n] != $str2[$n]) {\n            break;\n        }\n    }\n    if ($n == $len1 && $n == $len2) {\n        return 0;\n    }\n    if ($n == $len1) {\n        $str2_rev = reverse($str2_rev);\n        for (@_; $n < $len2; $n++) {\n            if ($str2[$n] != $str2_rev[$n]) {\n                break;\n","language":"perl"}
{"task_id":"MBPLP\/700","completion":"    my $count = 0;\n    for my $elem (@_) {\n        if ($elem >= $min && $elem <= $max) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/701","completion":"    my ($sum, $sum_of_squares) = 0;\n    my ($index, $sum_of_squares_index) = 0;\n    for my $i (0, $arr->size) {\n        $sum += $arr->{$i};\n        $sum_of_squares += $arr->{$i} * $arr->{$i};\n        if ($sum_of_squares_index == $sum_of_squares) {\n            return $i;\n        }\n        $sum_of_squares_index += $arr->{$i} * $arr->{$i};\n    }\n    return -1;\n}","language":"perl"}
{"task_id":"MBPLP\/702","completion":"    my $min = 0;\n    my $max = $n;\n    my $i = 0;\n    my $j = 0;\n    while ($i < $n) {\n        while ($j < $n) {\n            if ($arr[$i] > $arr[$j]) {\n                $j++;\n            } else {\n                break;\n            }\n        }\n        if ($j == $n) {\n            $min++;\n            $i++;\n        } else {\n            $j = $i + 1;\n        }\n    }\n    return $max - $min;\n}","language":"perl"}
{"task_id":"MBPLP\/705","completion":"    my ($list2) = @_;\n    my ($list3) = @_;\n    my ($list4) = @_;\n\n    $list1 = sort { $list1 };\n    $list2 = sort { $list2 };\n    $list3 = sort { $list3 };\n    $list4 = sort { $list4 };\n\n    $list1 = $list1 { $a => $a <=> $a } @ $list2;\n    $list3 = $list3 { $a => $a <=> $a } @ $list4;\n\n    return $list1 { $a => $a <=> $a } @ $list3;\n}","language":"perl"}
{"task_id":"MBPLP\/706","completion":"    my ($i, $j) = @_;\n    my $res = 0;\n    my $k = 0;\n    while ($k < $n) {\n        if ($arr1[$i] == $arr2[$k]) {\n            $res = 1;\n            $k = $k + 1;\n        } else {\n            $i = $i + 1;\n        }\n    }\n    return $res;\n}","language":"perl"}
{"task_id":"MBPLP\/707","completion":"    my $count = 0;\n    for my $i (1 .. $n) {\n        $count += $i & 1;\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/708","completion":"    my ($result = @_);\n    $result = split \/ \/;\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/709","completion":"    my ($result) = {};\n    my @unique_keys = 0;\n    foreach my $item (@$test_list) {\n        my $key = $item[0];\n        if (defined $result[$key]) {\n            $result[$key]++;\n        } else {\n            $result[$key] = 1;\n            $unique_keys++;\n        }\n    }\n    return $unique_keys = @$result;\n}","language":"perl"}
{"task_id":"MBPLP\/710","completion":"    my ($first, $last) = @_;\n    return [$first, $last];\n}","language":"perl"}
{"task_id":"MBPLP\/712","completion":"    my ($list2) = @_;\n\n    my $new_list = [];\n\n    foreach my $item (@_) {\n        if (not $new_list =~ m\/^\\[.*\\]$\/) {\n            push @$new_list, $item;\n        } else {\n            if (not $item =~ m\/^\\[.*\\]$\/) {\n                push @$new_list, $item;\n            } else {\n                if (not $item =~ m\/^\\[.*\\]$\/) {\n                    push @$new_list, $item;\n                } else {\n                    if (not $item =~ m\/^\\[.*\\]$\/) {\n                        push @$new_list, $item;\n                    } else {\n                        if (not $item =~ m\/^\\[.*\\]$\/) {\n                            push @$new_list, ","language":"perl"}
{"task_id":"MBPLP\/715","completion":"    my ($tuple) = @_;\n    $tuple = split \/, $test_str;\n    return $tuple;\n}","language":"perl"}
{"task_id":"MBPLP\/718","completion":"    my ($list2) = @_;\n    my ($result) = @_;\n    for (@_ = 0; @_ < count($list1); @_++) {\n        if ($list1[$_] != $list2[$_]) {\n            push @$result, $list1[$_];\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/720","completion":"    $test_tup = @_;\n    $test_tup = $test_tup + [$test_dict];\n    return $test_tup;\n}","language":"perl"}
{"task_id":"MBPLP\/721","completion":"    my @paths;\n    my $max = 0;\n    my $maxpath = 0;\n    my $i = 0;\n    my $j = 0;\n    my $sum = 0;\n    my $path = 0;\n    my $n = 0;\n    my $m = 0;\n    my $maxpath = 0;\n    for ($i = 0; $i < $N; $i++) {\n        for ($j = 0; $j < $N; $j++) {\n            $sum += $cost[$i][$j];\n            $path = $i + 1;\n            $n = $i + 1;\n            $m = $j + 1;\n            if ($sum > $max) {\n                $max = $sum;\n                $maxpath = $path","language":"perl"}
{"task_id":"MBPLP\/722","completion":"    my @filtered_students = {};\n    foreach my $student (@$students) {\n        if ($student -> height >= $h && $student -> width >= $w) {\n            $filtered_students[$student -> name] = $student;\n        }\n    }\n    return $filtered_students;\n}","language":"perl"}
{"task_id":"MBPLP\/723","completion":"    my $map = map { $a => $b => $a == $b ? 1 : 0 } @_;\n    return $map { $a => $b => $a } @_ @_ @_ $nums1 @_ $nums2;\n}","language":"perl"}
{"task_id":"MBPLP\/724","completion":"    my $sum = 0;\n    while ($power > 0) {\n        $sum = $sum + $base * $power;\n        $power = $power \/ 10;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/725","completion":"    my ($text2) = @_;\n    my ($text3) = @_;\n    my ($text4) = @_;\n    my ($text5) = @_;\n    my ($text6) = @_;\n    my ($text7) = @_;\n    my ($text8) = @_;\n    my ($text9) = @_;\n    my ($text10) = @_;\n    my ($text11) = @_;\n    my ($text12) = @_;\n    my ($text13) = @_;\n    my ($text14) = @_;\n    my ($text15) = @_;\n    my ($text16) = @_;\n    my ($text17) = @_;\n    my ($text18) = @_;\n    my ($text19) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/726","completion":"    my ($result) = @_;\n    for my $i (0..$test_tup) {\n        $result[$i + 1] = $result[$i] * $test_tup[$i];\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/727","completion":"    my $regex = \"\/^[a-zA-Z0-9]+$\/\";\n    return $S =~ s\/\\S\/ $regex;\n}","language":"perl"}
{"task_id":"MBPLP\/728","completion":"    my @result = ();\n\n    foreach my $i (@$lst1) {\n        if (defined $i && $i > 0) {\n            $result{$i} = $i + @$lst2{$i};\n        }\n    }\n\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/729","completion":"    $nums1 = map { $_ -> $_ + 1 } @$nums1;\n    $nums2 = map { $_ -> $_ + 1 } @$nums2;\n    $nums1 = map { $_ -> $_ * 2 } @$nums1;\n    $nums2 = map { $_ -> $_ * 2 } @$nums2;\n    $nums1 = map { $_ -> $_ \/ 2 } @$nums1;\n    $nums2 = map { $_ -> $_ \/ 2 } @$nums2;\n    $nums1 = map { $_ -> $_ - 1 } @$nums1;\n    $nums2 = map { $_ -> $_ - 1 } @$nums2;\n    $nums1 = map { $_ -> $_ + $nums2[$_","language":"perl"}
{"task_id":"MBPLP\/730","completion":"    my ($result) = @_;\n    my ($i, $j) = @_;\n    while ($i < $nums) {\n        if ($nums eq $i) {\n            $result = $result . $nums . $j;\n            $nums = $nums . $j;\n        } else {\n            $result = $result . $nums . $j . $nums;\n            $nums = $nums . $j . $nums;\n        }\n        $i = $i . $j;\n        $j = $j . $nums;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/731","completion":"    my $lateral = $r * $h;\n    my $base = $r * $h * 0.5;\n    return $base + $lateral;\n}","language":"perl"}
{"task_id":"MBPLP\/734","completion":"    $sum = 0;\n    for (@arr) {\n        $sum += $n * $arr[0];\n        for (my $i = 1; $i < $n; $i++) {\n            $sum += $arr[$i] * $arr[$i - 1];\n        }\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/735","completion":"    $n =~ s\/\\b0\\b\/1\\b\/;\n    $n =~ s\/\\b1\\b\/0\\b\/;\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/736","completion":"    my @result = 0;\n    my $i = 0;\n    while ($i < $a) {\n        if ($a[$i] < $x) {\n            $result++;\n            if ($a[$i] == $x) {\n                return $i;\n            }\n        }\n        $i++;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/738","completion":"    my $result = 1;\n    for (@_){\n        $result *= $n;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/739","completion":"    my ($i, $j, $k) = @_;\n    $i = ($i + $j + $k) \/ 3;\n    $j = ($i + $j + $k) \/ 3;\n    $k = ($i + $j + $k) \/ 3;\n    $i = ($i + $j + $k) \/ 3;\n    $j = ($i + $j + $k) \/ 3;\n    $k = ($i + $j + $k) \/ 3;\n    $i = ($i + $j + $k) \/ 3;\n    $j = ($i + $j + $k) \/ 3;\n    $k = ($i + $j + $k) \/ 3;\n   ","language":"perl"}
{"task_id":"MBPLP\/740","completion":"    my ($dict) = {};\n    my ($key, $value) = @_;\n    my ($i, $j) = @_;\n    if ($i == $j) {\n        $dict[$key] = $value;\n        return $dict;\n    }\n    $dict[$key] = $value;\n    return $dict;\n}","language":"perl"}
{"task_id":"MBPLP\/741","completion":"    my ($n) = 0;\n    for my $i (0..$s) {\n        if ($s eq $s{$i}) {\n            ++$n;\n        }\n    }\n    return $n == $s;\n}","language":"perl"}
{"task_id":"MBPLP\/743","completion":"    my @$list2 = @();\n    for ($i = 0; $i < $m; $i++) {\n        push @$list2, $list1;\n        shift @$list1;\n    }\n    return @$list2;\n}","language":"perl"}
{"task_id":"MBPLP\/745","completion":"    my ($result, $digits) = @_;\n\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = split('.', $i);\n        for ($j = 0; $j < count($digits); $j++) {\n            if ($digits[$j] == 0) {\n                continue;\n            }\n            for ($k = 0; $k < count($digits[$j]); $k++) {\n                if ($i % $digits[$j][$k] != 0) {\n                    continue;\n                }\n                $result[] = $i;\n            }\n        }\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/747","completion":"    my $LCS = 0;\n    my @S = ();\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $s = 0;\n    my $l = 0;\n    my $max = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_s = 0;\n    my $max_l = 0;\n    my $max_i_j_k = 0;\n    my $max_i_j_k_s = 0;\n    my $max_i_j_k_l = 0;\n    my $max_i_j_k_s_l = 0;\n    my $max_i_j_k_s_l_i = 0;\n    my $","language":"perl"}
{"task_id":"MBPLP\/749","completion":"    my @nums = split \/\\s+\/;\n    my @nums_num = map { $_.to_i } @nums;\n    sort @nums_num;\n    return join \" \" @nums_num;\n}","language":"perl"}
{"task_id":"MBPLP\/751","completion":"    my $min = $arr[$i];\n    for my $j (1..$arr.count) {\n        if ($min > $arr[$j]) {\n            return 0;\n        }\n    }\n    return 1;\n}","language":"perl"}
{"task_id":"MBPLP\/753","completion":"    my $min_list = [];\n    my @min_list = [];\n    my $min_list_len = 0;\n    my $min_list_len_max = 0;\n    my $min_list_len_min = 0;\n    my $min_list_len_min_max = 0;\n    my $min_list_len_min_max_max = 0;\n    my $min_list_len_min_max_max_min = 0;\n    my $min_list_len_min_max_max_min_max = 0;\n    my $min_list_len_min_max_max_min_max_min = 0;\n    my $min_list_len_min_max_max_min_max_min_max = 0;\n    my $min_list_len_min_max_max_min_max_min_max_min = 0;\n    my $min_list_","language":"perl"}
{"task_id":"MBPLP\/754","completion":"    my ($i1, $i2, $i3) = @_;\n    my ($r1, $r2, $r3) = @_;\n    my ($c1, $c2, $c3) = @_;\n\n    my $common = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\n    while ($i < $l1 or $j < $l2 or $k < $l3) {\n        if ($i1 < $l1 and $i2 < $l2 and $i3 < $l3) {\n            if ($l1[$i1] == $l2[$i2] and $l2[$i2] == $l3[$i3]) {\n                $common = $common + 1;\n                $i1 = $i","language":"perl"}
{"task_id":"MBPLP\/755","completion":"    my ($min, $max) = @_;\n    if ($min == $max) {\n        return \"none\";\n    }\n    $min = $numbers[0];\n    $max = $numbers[0];\n    foreach ($numbers as $number) {\n        if ($number < $min) {\n            $min = $number;\n        }\n        if ($number > $max) {\n            $max = $number;\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/757","completion":"    my ($reverse_list) = @_;\n    my ($count) = 0;\n\n    for (@$test_list) {\n        my ($first, $second) = split \/(\\w+)\/, $test_list;\n        my ($first_reverse, $second_reverse) = split \/(\\w+)\/, $reverse_list;\n\n        if ($first_reverse == $second) {\n            $count++;\n        }\n    }\n\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/758","completion":"    my ($list2) = @_;\n    my ($list3) = @_;\n    my ($list4) = @_;\n    my ($list5) = @_;\n    my ($list6) = @_;\n    my ($list7) = @_;\n    my ($list8) = @_;\n    my ($list9) = @_;\n    my ($list10) = @_;\n    my ($list11) = @_;\n    my ($list12) = @_;\n    my ($list13) = @_;\n    my ($list14) = @_;\n    my ($list15) = @_;\n    my ($list16) = @_;\n    my ($list17) = @_;\n    my ($list18) = @_;\n    my ($list19) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/763","completion":"    my $min = 0;\n    my @diff = 0;\n    for my $i (0..$n) {\n        for my $j (0..$n) {\n            if ($i != $j) {\n                $diff = abs($arr[$i] - $arr[$j]);\n                if ($min < $diff) {\n                    $min = $diff;\n                }\n            }\n        }\n    }\n    return $min;\n}","language":"perl"}
{"task_id":"MBPLP\/764","completion":"    my $count = 0;\n    $count = (split \/\\D+\/ $str);\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/765","completion":"    my ($a, $b) = @_;\n    my ($c, $d) = @_;\n    my ($e, $f) = @_;\n    my ($g, $h) = @_;\n    my ($i, $j) = @_;\n    my ($k, $l) = @_;\n    my ($m, $n) = @_;\n    my ($o, $p) = @_;\n    my ($q, $r) = @_;\n    my ($s, $t) = @_;\n    my ($u, $v) = @_;\n    my ($w, $x) = @_;\n    my ($y, $z) = @_;\n    my ($A, $B) = @_;\n    my ($C, $D) = @_;\n   ","language":"perl"}
{"task_id":"MBPLP\/766","completion":"    my ($l2) = @_;\n    my ($l3) = @_;\n    my ($l4) = @_;\n    my ($l5) = @_;\n    my ($l6) = @_;\n    my ($l7) = @_;\n    my ($l8) = @_;\n    my ($l9) = @_;\n    my ($l10) = @_;\n    my ($l11) = @_;\n    my ($l12) = @_;\n    my ($l13) = @_;\n    my ($l14) = @_;\n    my ($l15) = @_;\n    my ($l16) = @_;\n    my ($l17) = @_;\n    my ($l18) = @_;\n    my ($l19) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/767","completion":"    my $count = 0;\n    my @pairs = @();\n    foreach my $num (@$arr) {\n        if ($num > 0) {\n            $pairs[$num + $sum] = $num;\n            $count++;\n        }\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/769","completion":"    my ($new_li1, $new_li2) = @_;\n    $new_li1 = $new_li1 <=> $li1;\n    $new_li2 = $new_li2 <=> $li2;\n    $new_li1 = $new_li1 - $new_li2;\n    $new_li2 = $new_li2 - $new_li1;\n    $new_li1 = $new_li1 <=> $new_li1;\n    $new_li2 = $new_li2 <=> $new_li2;\n    $new_li1 = $new_li1 - $new_li2;\n    $new_li2 = $new_li2 - $new_li1;\n    $new_li1 = $new_li1 <=> $new_li1;\n    $new_li2","language":"perl"}
{"task_id":"MBPLP\/771","completion":"    my $stack = [];\n    my $balanced = 0;\n    my @tokens = split \/\\{|\\}\/;\n\n    foreach my $token (@tokens) {\n        if ($token =~ \/\\{|\\}\/) {\n            push $stack, $token;\n        } else {\n            if ($token =~ \/[^{}]+\/) {\n                if ($stack =~ \/[^{}]+\/) {\n                    $balanced = 1;\n                } else {\n                    $balanced = 0;\n                }\n            } else {\n                if ($stack =~ \/[^{}]+\/) {\n                    $balanced = 1;\n                } else {\n                    $balanced = 0;\n                }\n            }\n        }\n    }\n\n    return $balanced;\n}","language":"perl"}
{"task_id":"MBPLP\/772","completion":"    my @words = split \/\\s+\/;\n    my @result = [];\n    foreach my $word (@words) {\n        if (strlen($word) >= $K) {\n            push @result, $word;\n        }\n    }\n    return join \" \", @result;\n}","language":"perl"}
{"task_id":"MBPLP\/773","completion":"    my @positions = [];\n    my @occurrences = [];\n    my @substrings = [];\n    my $pos = 0;\n    my $occ = 0;\n    my $substring = \"\";\n\n    while ($pos =~ m{$pattern} $text) {\n        $substring = substr($text, $pos, $pos + strlen($pattern));\n        $positions[] = $pos;\n        $occurrences[] = $occ;\n        $substrings[] = $substring;\n        $pos += strlen($pattern);\n        $occ++;\n    }\n\n    return $substrings;\n}","language":"perl"}
{"task_id":"MBPLP\/774","completion":"    $email =~ s\/^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\/i;\n    if ($email) {\n        return \"Valid Email\";\n    } else {\n        return \"Invalid Email\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/775","completion":"    my @odd_nums = ();\n    my $i = 1;\n    foreach my $num (@$nums) {\n        if ($i % 2 == 1) {\n            $odd_nums = $odd_nums . $num;\n        }\n        $i = $i + 1;\n    }\n    return $odd_nums;\n}","language":"perl"}
{"task_id":"MBPLP\/776","completion":"    my ($vowels, $count) = @_;\n    my ($pos, $count) = @_;\n    my ($pos, $count) = @_;\n    my ($pos, $count) = @_;\n    my ($pos, $count) = @_;\n    my ($pos, $count) = @_;\n    my ($pos, $count) = @_;\n    my ($pos, $count) = @_;\n    my ($pos, $count) = @_;\n    my ($pos, $count) = @_;\n    my ($pos, $count) = @_;\n    my ($pos, $count) = @_;\n    my ($pos, $count) = @_;\n    my ($pos, $count) = @_;\n    my ($pos, $count) = @_;","language":"perl"}
{"task_id":"MBPLP\/778","completion":"    my ($result) = [];\n    my ($temp) = [];\n    for (@$list1) {\n        if (not $temp) {\n            $temp[] = $list1;\n        } else {\n            if ($temp[0] != $list1) {\n                $result[] = $temp;\n                $temp = [];\n            }\n        }\n    }\n    if ($temp) {\n        $result[] = $temp;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/779","completion":"    my ($list2) = @_;\n    my ($list3) = @_;\n    my ($list4) = @_;\n    my ($list5) = @_;\n    my ($list6) = @_;\n    my ($list7) = @_;\n    my ($list8) = @_;\n    my ($list9) = @_;\n    my ($list10) = @_;\n    my ($list11) = @_;\n    my ($list12) = @_;\n    my ($list13) = @_;\n    my ($list14) = @_;\n    my ($list15) = @_;\n    my ($list16) = @_;\n    my ($list17) = @_;\n    my ($list18) = @_;\n    my ($list19) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/780","completion":"    my ($result) = [];\n    my ($temp_list) = [];\n    my ($temp_sum) = 0;\n    my ($temp_count) = 0;\n    for (@$test_list) {\n        $temp_list = @$test_list;\n        $temp_sum = $temp_list[0] + $temp_list[1];\n        $temp_count = 1;\n        for (@$temp_list) {\n            if ($temp_sum == $temp_list[0] + $temp_list[1]) {\n                $temp_count++;\n            }\n        }\n        if ($temp_count > 1) {\n            $result[] = [$temp_sum, $temp_count];\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/782","completion":"    my ($sum, $sum_of_even) = 0;\n    my ($even_sum, $even_sum_of_odd) = 0;\n    my ($even_sum_of_odd, $odd_sum) = 0;\n    my ($odd_sum, $odd_sum_of_even) = 0;\n\n    for (@arr) {\n        if ($even_sum_of_odd == 0) {\n            $even_sum_of_odd = $arr;\n        } else {\n            $even_sum_of_odd = $even_sum_of_odd + $arr;\n        }\n        if ($odd_sum_of_even == 0) {\n            $odd_sum_of_even = $arr;\n        } else {\n            $odd_sum_of_even = $odd_sum_of_even + $arr;\n        }\n        if ($sum","language":"perl"}
{"task_id":"MBPLP\/783","completion":"    my $max = max($r, $g, $b);\n    my $min = min($r, $g, $b);\n    my $delta = $max - $min;\n    my $v = $max \/ 255;\n    my $s = $delta \/ $max;\n    my $h = 0;\n    if ($max != 0) {\n        $h = $max \/ 255 * 60;\n    }\n    return [$h, $s, $v];\n}","language":"perl"}
{"task_id":"MBPLP\/784","completion":"    my ($even, $odd) = 0;\n    for my $i (0..$list1) {\n        if ($i % 2) {\n            $even = $even + $i;\n        } else {\n            $odd = $odd + $i;\n        }\n    }\n    return $even * $odd;\n}","language":"perl"}
{"task_id":"MBPLP\/785","completion":"    my ($tuple) = @_;\n\n    my ($tuple_int) = @_;\n\n    $tuple_int = map { $_.to_i } @$tuple;\n\n    return $tuple_int;\n}","language":"perl"}
{"task_id":"MBPLP\/786","completion":"    my ($i, $j) = @_;\n    if ($i > 0 && $a[$i-1] > $x) {\n        $j = $i-1;\n    }\n    else {\n        $j = $i;\n    }\n    return $j;\n}","language":"perl"}
{"task_id":"MBPLP\/788","completion":"    my @new_list = ();\n    foreach my $item (@$test_list) {\n        push @new_list, $item;\n    }\n    push @new_list, $test_str;\n    return @new_list;\n}","language":"perl"}
{"task_id":"MBPLP\/791","completion":"    my ($new_tup) = ();\n\n    # Remove the nested record from the given tuple.\n    for my $i (0..$#test_tup) {\n        if ($i =~ m\/^\\[(\\d+)\\]$\/) {\n            $new_tup .= $test_tup [$i [1]];\n        }\n        else {\n            $new_tup .= $test_tup [$i];\n        }\n    }\n\n    return $new_tup;\n}","language":"perl"}
{"task_id":"MBPLP\/793","completion":"    my $i = 0;\n    my $j = $n - 1;\n    while ($i <= $j) {\n        if ($arr[$i] == $x) {\n            return $i;\n        }\n        if ($arr[$j] == $x) {\n            return $j;\n        }\n        if ($arr[$i] < $x) {\n            $i++;\n        }\n        if ($arr[$j] > $x) {\n            $j--;\n        }\n    }\n    return -1;\n}","language":"perl"}
{"task_id":"MBPLP\/795","completion":"    my $heap = @_;\n    my $result = @_;\n    my $heap_size = $heap->size();\n    my $heap_max_size = $heap->max_size();\n\n    for my $i (0..$n)\n    {\n        my $item = $items[$i];\n        push $heap, $item->price;\n        if ($heap_size > $heap_max_size)\n        {\n            pop $heap;\n            $heap_size = $heap->size();\n        }\n    }\n\n    $result = @_;\n    for my $i (0..$n)\n    {\n        $result[$i] = $heap[$i];\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/806","completion":"    my ($max_run) = 0;\n    my ($start_index) = 0;\n    my ($end_index) = 0;\n    my ($run_count) = 0;\n    my ($start_char) = '';\n    my ($end_char) = '';\n    my ($max_run_char) = '';\n\n    for ($start_index = 0; $start_index < $test_str; $start_index++) {\n        for ($end_index = $start_index; $end_index < $test_str; $end_index++) {\n            $run_count = 0;\n            for ($i = $start_index; $i <= $end_index; $i++) {\n                $char = substr($test_str, $i, 1);\n                if ($char == $char) {\n                    $run_count++;\n                ","language":"perl"}
{"task_id":"MBPLP\/809","completion":"    my $i = 0;\n    my @result = 0;\n    my @index = 0;\n    foreach my $x (@$test_tup1) {\n        if ($x < $test_tup2[$i]) {\n            $result = 1;\n            @index = $i;\n        }\n        $i += 1;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/810","completion":"    my @result;\n    for (my $i = 0; $i < $a; $i++) {\n        for (my $j = 0; $j < $b; $j++) {\n            for (my $k = 0; $k < $c; $k++) {\n                for (my $l = 0; $l < $d; $l++) {\n                    $result{$i}{$j}{$k}{$l} = $i + $j + $k + $l;\n                }\n            }\n        }\n    }\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/811","completion":"    my $test_list1_size = $test_list1->size();\n    my $test_list2_size = $test_list2->size();\n    if ($test_list1_size != $test_list2_size) {\n        return 0;\n    }\n    for ($i = 0; $i < $test_list1_size; $i++) {\n        my $test_list1_tuple = $test_list1->$i;\n        my $test_list2_tuple = $test_list2->$i;\n        if ($test_list1_tuple->size() != $test_list2_tuple->size()) {\n            return 0;\n        }\n        for ($j = 0; $j < $test_list1_tuple->size(); $j++) {\n            if ($test_list1_tuple->$j != $test_list2_tuple->$j) {","language":"perl"}
{"task_id":"MBPLP\/815","completion":"    my $dnf = $n - 1;\n    my $dnf_arr = $arr;\n    my $dnf_arr_len = $dnf_arr;\n    my $dnf_arr_len_len = $dnf_arr_len;\n    my $dnf_arr_len_len_len = $dnf_arr_len_len;\n    my $dnf_arr_len_len_len_len = $dnf_arr_len_len_len;\n    my $dnf_arr_len_len_len_len_len = $dnf_arr_len_len_len_len;\n    my $dnf_arr_len_len_len_len_len_len = $dnf_arr_len_len_len_len_len;\n    my $dnf_arr_len_len_len_len_len_len_len = $dnf_arr_len_len_len_len_len_len;\n","language":"perl"}
{"task_id":"MBPLP\/817","completion":"    return map { $n % $m == 0 } $nums;\n}","language":"perl"}
{"task_id":"MBPLP\/819","completion":"    my ($counts) = @_;\n\n    for (@$lists) {\n        my ($counts[$lists[0]]) = @_;\n        for (@$lists) {\n            if ($counts[$lists[0]] == undef) {\n                $counts[$lists[0]] = 0;\n            }\n            if ($counts[$lists[0]]++ == $lists.length) {\n                print $counts[$lists[0]];\n                $counts[$lists[0]] = undef;\n            }\n        }\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/821","completion":"    my $merged_dict = {};\n    foreach my $key (keys $dict1) {\n        if (defined $dict2[$key]) {\n            $merged_dict[$key] = $dict1[$key] . \" => \" . $dict2[$key];\n        }\n    }\n    foreach my $key (keys $dict2) {\n        if (not defined $dict1[$key]) {\n            $merged_dict[$key] = $dict2[$key];\n        }\n    }\n    return $merged_dict;\n}","language":"perl"}
{"task_id":"MBPLP\/822","completion":"    if ($p =~ m\/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,}$\/) {\n        return 0;\n    }\n    return 1;\n}","language":"perl"}
{"task_id":"MBPLP\/824","completion":"    my @new_l;\n    foreach my $n (@$l)\n    {\n        if ($n % 2)\n        {\n            push @new_l, $n;\n        }\n    }\n    return @new_l;\n}","language":"perl"}
{"task_id":"MBPLP\/825","completion":"    my @result;\n    foreach my $index (@$list_index) {\n        $result[$index] = $nums[$index];\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/827","completion":"    my $sum = 0;\n    foreach my $row (@$list1) {\n        $sum += $row[$C];\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/828","completion":"    my @result = 0;\n    my @alpha = 0;\n    my @dig = 0;\n    my @spl = 0;\n    for (@_ = $string) {\n        if ($_ =~ m\/\\w\/i) {\n            ++@alpha;\n        }\n        if ($_ =~ m\/\\d\/i) {\n            ++@dig;\n        }\n        if ($_ =~ m\/\\W\/i) {\n            ++@spl;\n        }\n        ++@result;\n    }\n    return [@alpha, @dig, @spl];\n}","language":"perl"}
{"task_id":"MBPLP\/829","completion":"    my $frequent = '';\n    my $count = 0;\n    foreach my $s (@$input) {\n        if ($count == 0) {\n            $frequent = $s;\n            $count = 1;\n        } else if ($s == $frequent) {\n            $count += 1;\n        } else {\n            $count -= 1;\n        }\n    }\n    return $frequent;\n}","language":"perl"}
{"task_id":"MBPLP\/830","completion":"    return ($a + 0.5) * 10^($digits - 1);\n}","language":"perl"}
{"task_id":"MBPLP\/831","completion":"    my $result = 0;\n    for my $i (0..$n) {\n        for my $j (0..$n) {\n            if ($i != $j && $arr[$i] == $arr[$j]) {\n                $result++;\n            }\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/832","completion":"    my $max = 0;\n    my $max_str = \"\";\n    my @digits = split \/\\D+\/;\n    foreach my $digit (@digits) {\n        if ($digit > $max) {\n            $max = $digit;\n            $max_str = $digit;\n        }\n    }\n    return $max_str;\n}","language":"perl"}
{"task_id":"MBPLP\/834","completion":"    my ($matrix) = @_;\n    my ($row, $col) = @_;\n    my ($i, $j) = @_;\n    my ($k, $l) = @_;\n    my ($m, $n) = @_;\n    my ($r, $c) = @_;\n    my ($i, $j) = @_;\n    my ($k, $l) = @_;\n    my ($m, $n) = @_;\n    my ($r, $c) = @_;\n    my ($i, $j) = @_;\n    my ($k, $l) = @_;\n    my ($m, $n) = @_;\n    my ($r, $c) = @_;\n    my ($i, $j) = @_;\n    my ($k","language":"perl"}
{"task_id":"MBPLP\/836","completion":"    my $max = 0;\n    my @max_sum = 0;\n    for my $i (1..$size) {\n        $max = $max + $a[$i];\n        if ($max < 0) {\n            $max = 0;\n        }\n        if ($max > $max_sum) {\n            $max_sum = $max;\n        }\n    }\n    return $max_sum;\n}","language":"perl"}
{"task_id":"MBPLP\/838","completion":"    my $n = 0;\n    my $diff = 0;\n    for my $i (0..$s1) {\n        if ($s1[$i] != $s2[$i]) {\n            $diff++;\n        }\n    }\n    return $diff;\n}","language":"perl"}
{"task_id":"MBPLP\/839","completion":"    my ($tup1, $tup2) = @_;\n    my ($tup3, $tup4) = @_;\n    my ($tup5, $tup6) = @_;\n    my ($tup7, $tup8) = @_;\n    my ($tup9, $tup10) = @_;\n    my ($tup11, $tup12) = @_;\n    my ($tup13, $tup14) = @_;\n    my ($tup15, $tup16) = @_;\n    my ($tup17, $tup18) = @_;\n    my ($tup19, $tup20) = @_;\n    my ($tup21, $tup22) = @_;\n    my ($tup23, $tup24) = @_;\n    my ($tup25, $tup26) = @_;\n    my ($tup27, $","language":"perl"}
{"task_id":"MBPLP\/841","completion":"    my $inv_count = 0;\n    my @aux = @_;\n    for my $i (0..$n-1) {\n        my $j = $i+1;\n        while ($j < $n && $aux[$i] > $aux[$j]) {\n            ++$inv_count;\n            ++$j;\n        }\n    }\n    return $inv_count;\n}","language":"perl"}
{"task_id":"MBPLP\/843","completion":"    my $min = 0;\n    my $max = $primes[0];\n    my $min_index = 0;\n    my $max_index = 0;\n    my $min_val = $primes[0];\n    my $max_val = $primes[0];\n    my $min_val_index = 0;\n    my $max_val_index = 0;\n    my $min_val_val = $primes[0];\n    my $max_val_val = $primes[0];\n    for (my $i = 1; $i <= $n; $i++) {\n        my $next_min = $min;\n        my $next_max = $max;\n        my $next_min_index = $min_index;\n        my $next_max_index = $max_index;\n        my $next_min_val","language":"perl"}
{"task_id":"MBPLP\/846","completion":"    my $platforms = 0;\n    my $min = 0;\n    my $max = 0;\n    my $min_platforms = 0;\n    my $max_platforms = 0;\n    my $min_platforms_dep = 0;\n    my $max_platforms_dep = 0;\n    my $min_platforms_dep_dep = 0;\n    my $max_platforms_dep_dep = 0;\n    my $min_platforms_dep_dep_dep = 0;\n    my $max_platforms_dep_dep_dep = 0;\n    my $min_platforms_dep_dep_dep_dep = 0;\n    my $max_platforms_dep_dep_dep_dep = 0;\n\n    for my $i = 0; $i < $n; $i++) {\n        if ($arr[$i] > $max) {\n            $max = $arr","language":"perl"}
{"task_id":"MBPLP\/851","completion":"    my $divisors = $N - 1;\n    $Sum = $Sum + $divisors * ($N - $divisors);\n    return $Sum;\n}","language":"perl"}
{"task_id":"MBPLP\/854","completion":"    my ($heap) = @_;\n    my ($heap_size) = 0;\n    my ($heap_size_max) = 0;\n\n    my ($heap_size_max = $heap_size);\n    my ($heap_size_min = $heap_size);\n\n    for my $i (0; $i < $heap_size; $i++) {\n        my ($parent, $child) = ($i \/ 2);\n\n        if ($parent < $heap_size_min) {\n            if ($rawheap[$parent] < $rawheap[$i]) {\n                $heap_size_min = $parent;\n            }\n        }\n\n        if ($child < $heap_size_min) {\n            if ($rawheap[$child] < $rawheap[$i]) {\n                $heap_size_min = $child;\n            }\n        }\n\n","language":"perl"}
{"task_id":"MBPLP\/856","completion":"    my $min = 0;\n    my @swaps = ();\n    for my $i (0..$n) {\n        my $a = $arr[$i];\n        for my $j (0..$n) {\n            if ($a < $arr[$j]) {\n                $min = $min + 1;\n                $swaps{$min} = $i;\n                $swaps{$min + 1} = $j;\n            }\n        }\n    }\n    return $min;\n}","language":"perl"}
{"task_id":"MBPLP\/857","completion":"    my @list2 = map { $_.strip } @$list1;\n    return @list2;\n}","language":"perl"}
{"task_id":"MBPLP\/859","completion":"    my ($result) = @_;\n\n    for my $i (0..$my_list) {\n        $result = $result . $my_list . $i . \" \";\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/861","completion":"    my @anagrams = ();\n    my @letters = @_;\n    my $letters_count = 0;\n\n    foreach my $text (@$texts) {\n        my $letters_count = 0;\n        foreach my $letter (@$letters) {\n            if ($text =~ \/$letter\/i) {\n                $letters_count++;\n            }\n        }\n        if ($letters_count > 1) {\n            push @anagrams, $text;\n        }\n    }\n\n    return @anagrams;\n}","language":"perl"}
{"task_id":"MBPLP\/862","completion":"    my @words = split \/\\s+\/;\n    my @counts = @_;\n    my @result = [];\n\n    for my $word (@words) {\n        my $count = 0;\n        for my $text_word (@text) {\n            if ($text_word =~ \/$word\/) {\n                $count++;\n            }\n        }\n        push @result, [$word, $count];\n    }\n\n    sort @result, $n, $n;\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/864","completion":"    my ($palindromes) = @_;\n\n    foreach my $text (@$texts) {\n        $palindromes = $palindromes + (filter { $_ =~ \/(.)[^A-Za-z0-9]\/ } $_);\n    }\n\n    return $palindromes;\n}","language":"perl"}
{"task_id":"MBPLP\/865","completion":"    $nums = map { $n => $nums } @_;\n    return $nums;\n}","language":"perl"}
{"task_id":"MBPLP\/867","completion":"    my $min = $n;\n    foreach my $x (@_){\n        if ($x < $min) $min = $x;\n    }\n    return $min;\n}","language":"perl"}
{"task_id":"MBPLP\/868","completion":"    return length($a);\n}","language":"perl"}
{"task_id":"MBPLP\/869","completion":"    my @list2 = @();\n    my @list3 = @();\n    for my $i (0..$list1->size()) {\n        if ($leftrange <= $list1->{$i}) {\n            if ($rigthrange >= $list1->{$i}) {\n                @list2{$i} = $list1->{$i};\n            } else {\n                @list3{$i} = $list1->{$i};\n            }\n        }\n    }\n    return @list2 . @list3;\n}","language":"perl"}
{"task_id":"MBPLP\/871","completion":"    my $rotations = 0;\n    my $len1 = length($string1);\n    my $len2 = length($string2);\n    if ($len1 == $len2) {\n        for ($i = 0; $i < $len1; $i++) {\n            if ($string1[$i] != $string2[$i]) {\n                $rotations = 0;\n                break;\n            } else {\n                $rotations = 1;\n            }\n        }\n    } else {\n        $rotations = 0;\n    }\n    return $rotations;\n}","language":"perl"}
{"task_id":"MBPLP\/872","completion":"    my $result = 0;\n    my @sub_list = @_;\n    my $len1 = 0;\n    my $len2 = 0;\n    my $i = 0;\n    my $j = 0;\n    while ($i < $len1) {\n        while ($j < $len2) {\n            if ($sub_list[$i][$j] == $list2[$i][$j]) {\n                $result = 1;\n                $j = $len2;\n            } else {\n                $result = 0;\n                $j = $len2;\n            }\n        }\n        $i = $i + 1;\n        $j = 0;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/875","completion":"    my ($min_diff) = 0;\n    my @min_diff_pairs = ();\n    my @min_diff_pairs_list = ();\n    my @min_diff_pairs_list_list = ();\n    my @min_diff_pairs_list_list_list = ();\n    my @min_diff_pairs_list_list_list_list = ();\n    my @min_diff_pairs_list_list_list_list_list = ();\n    my @min_diff_pairs_list_list_list_list_list_list = ();\n    my @min_diff_pairs_list_list_list_list_list_list_list = ();\n    my @min_diff_pairs_list_list_list_list_list_list_list_list = ();\n    my @min_diff_pairs_list_list_list_list_list_list_list_list_list = ();\n    my @min_diff_pairs_list_","language":"perl"}
{"task_id":"MBPLP\/877","completion":"    my ($str_len) = length $str;\n\n    # Sort the string in descending order.\n    # (The string is sorted in descending order by default.)\n    $str = sort { $str } -r;\n\n    # The result is the concatenation of the sorted string\n    # and the original string.\n    $result = $str;\n\n    # The result is the concatenation of the sorted string\n    # and the original string.\n    $result = $str_len . $result;\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/878","completion":"    my @tuple_elements = split \/\\s+\/;\n    my $count = 0;\n    foreach my $element (@tuple_elements) {\n        if ($element == $K) {\n            $count++;\n        }\n    }\n    if ($count == $K) {\n        return 1;\n    } else {\n        return 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/883","completion":"    $nums = map { $n => $n % $m == 0 } @_;\n    return $nums;\n}","language":"perl"}
{"task_id":"MBPLP\/888","completion":"    my @result = [];\n    for my $t1 (@$test_tup1) {\n        for my $t2 (@$test_tup2) {\n            push @result, $t1 - $t2;\n        }\n    }\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/889","completion":"    my @result = ();\n    for my $list (@$lists) {\n        $result = @$result || @reverse_list($list);\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/893","completion":"    my ($sub) = $lst;\n    my ($res) = @_;\n    for my $i (0..$sub->size()-1) {\n        $res->{$i} = $sub->{$i};\n    }\n    return $res;\n}","language":"perl"}
{"task_id":"MBPLP\/894","completion":"    my ($float_list) = split \/,\/;\n    my ($float_list) = map { $_.to_f; } $float_list;\n    my ($float_list) = map { $_.to_s; } $float_list;\n    my ($float_list) = map { $_.to_i; } $float_list;\n    my ($float_list) = map { $_.to_d; } $float_list;\n    my ($float_list) = map { $_.to_s; } $float_list;\n    my ($float_list) = map { $_.to_s; } $float_list;\n    my ($float_list) = map { $_.to_s; } $float_list;\n    my ($float_list) = map { $_.to_s; } $float_list;\n    my ($float_list)","language":"perl"}
{"task_id":"MBPLP\/895","completion":"    my ($max, $sum) = 0;\n    my ($i, $j) = 0;\n    for ($i = 0; $i < $A->size(); $i++) {\n        for ($j = $i + 1; $j < $A->size(); $j++) {\n            $sum = $A->at($i) + $A->at($j);\n            if ($sum > $max) {\n                $max = $sum;\n            }\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/896","completion":"    my ($list) = @_;\n\n    # Sort the list by the last element of each tuple.\n    $list = sort { $list } { $a -> $a[NOW] };\n\n    # Sort the list by the first element of each tuple.\n    $list = sort { $list } { $a -> $a[1] };\n\n    # Sort the list by the last element of each tuple.\n    $list = sort { $list } { $a -> $a[NOW] };\n\n    # Sort the list by the first element of each tuple.\n    $list = sort { $list } { $a -> $a[1] };\n\n    return $list;\n}","language":"perl"}
{"task_id":"MBPLP\/898","completion":"    my @result = ();\n    for (@numbers) {\n        if ($n > 0) {\n            push @result, $numbers;\n            $n--;\n        }\n    }\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/901","completion":"    my $result = 1;\n    for (@_){\n        $result *= $n;\n        $n++;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/902","completion":"    my @keys = keys %{$d1};\n    my @keys2 = keys %{$d2};\n    my @keys_union = @keys %{$d1} %{$d2};\n    my @keys_union_unique = sort keys %{$d1} %{$d2};\n    my @keys_union_unique_unique = @keys_union_unique %{$d1} %{$d2};\n    my @keys_union_unique_unique_unique = @keys_union_unique_unique %{$d1} %{$d2};\n    my @keys_union_unique_unique_unique_unique = @keys_union_unique_unique_unique %{$d1} %{$d2};\n    my @keys_union_unique_unique_unique_unique_unique = @keys_union_unique_unique_unique_unique %{$d1} %{$d2};\n    my @keys_union_unique_unique_unique_unique_unique_","language":"perl"}
{"task_id":"MBPLP\/903","completion":"    my ($unset_bits) = 0;\n    for my $i (1 .. $n) {\n        if ($i & $n) {\n            $unset_bits = $unset_bits + $i - $n;\n        }\n    }\n    return $unset_bits;\n}","language":"perl"}
{"task_id":"MBPLP\/905","completion":"    my $a = 1;\n    my $b = 1;\n    my $c = 1;\n    my $d = 1;\n    for (@_){\n        $a = $a + $b;\n        $b = $c + $d;\n        $c = $a + $b;\n        $d = $c + $d;\n    }\n    return $a * $b * $c * $d;\n}","language":"perl"}
{"task_id":"MBPLP\/906","completion":"    my $year = $url =~ s\/\\d{4}\/g;\n    my $month = $url =~ s\/\\d{2}\/g;\n    my $day = $url =~ s\/\\d{2}\/g;\n    return [ $year, $month, $day ];\n}","language":"perl"}
{"task_id":"MBPLP\/907","completion":"    my @lucky = ();\n    for my $i (1..$n) {\n        push @lucky, rand % 100;\n    }\n    return @lucky;\n}","language":"perl"}
{"task_id":"MBPLP\/909","completion":"    my ($palindrome) = 0;\n    my ($temp) = 0;\n    my ($temp2) = 0;\n    for ($i = $num; $i > 0; $i--) {\n        $temp = $i;\n        $temp2 = $i;\n        while ($temp > 0) {\n            $palindrome = $palindrome * 10 + $temp % 10;\n            $temp = $temp \/ 10;\n        }\n        $temp = $temp2;\n        while ($temp > 0) {\n            $palindrome = $palindrome * 10 + $temp % 10;\n            $temp = $temp \/ 10;\n        }\n    }\n    return $palindrome;\n}","language":"perl"}
{"task_id":"MBPLP\/911","completion":"    my ($max, $min, $prod) = 0;\n    my ($max, $min, $prod) = 0;\n    my ($max, $min, $prod) = 0;\n    my ($max, $min, $prod) = 0;\n    my ($max, $min, $prod) = 0;\n    my ($max, $min, $prod) = 0;\n    my ($max, $min, $prod) = 0;\n    my ($max, $min, $prod) = 0;\n    my ($max, $min, $prod) = 0;\n    my ($max, $min, $prod) = 0;\n    my ($max, $min, $prod) = 0;\n    my ($max, $min, $prod) = 0;\n    my ($max, $min, $prod) =","language":"perl"}
{"task_id":"MBPLP\/912","completion":"    $n = $n + $m;\n    $m = $n - $m;\n    $n = $n \/ 2;\n    $m = $m \/ 2;\n    $n = $n * 2;\n    $m = $m * 2;\n    $n = $n + $m;\n    $m = $n - $m;\n    $n = $n \/ 2;\n    $m = $m \/ 2;\n    $n = $n * 2;\n    $m = $m * 2;\n    $n = $n + $m;\n    $m = $n - $m;\n    $n = $n \/ 2;\n    $m = $m \/ 2;\n    $n = $n ","language":"perl"}
{"task_id":"MBPLP\/914","completion":"    my ($a, $b) = @_;\n    $a =~ s\/a\/b\/;\n    $b =~ s\/b\/a\/;\n    return $a && $b;\n}","language":"perl"}
{"task_id":"MBPLP\/915","completion":"    my ($positive_nums) = @_;\n    my ($negative_nums) = @_;\n\n    $positive_nums = map { $array_nums -> $array_nums > 0 } $positive_nums;\n    $negative_nums = map { $array_nums -> $array_nums < 0 } $negative_nums;\n\n    return $positive_nums . $negative_nums;\n}","language":"perl"}
{"task_id":"MBPLP\/916","completion":"    my $found = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\n    while ($i < $arr_size) {\n        while ($j < $arr_size) {\n            while ($k < $arr_size) {\n                if ($A[$i] + $A[$j] + $A[$k] == $sum) {\n                    $found = $A[$i] . \",\" . $A[$j] . \",\" . $A[$k];\n                }\n                $k++;\n            }\n            $j++;\n            $k = 0;\n        }\n        $i++;\n        $j = 0;\n    }\n\n    return $found;\n}","language":"perl"}
{"task_id":"MBPLP\/918","completion":"    my $c = 0;\n    for my $i (0..$n) {\n        if ($S[$i] == $m) {\n            $c++;\n        } else {\n            $c += $S[$i] - $m;\n        }\n    }\n    return $c;\n}","language":"perl"}
{"task_id":"MBPLP\/920","completion":"    my @result = @_;\n    my @tuple_list = @_;\n\n    while (@tuple_list) {\n        my @tuple = @tuple_list;\n        my $tuple_size = $tuple->size();\n        my $tuple_first_element = $tuple->first_element();\n        my $tuple_second_element = $tuple->second_element();\n\n        if ($tuple_size > 2) {\n            if ($tuple_first_element == undef && $tuple_second_element == undef) {\n                $tuple_list = $tuple_list->rest();\n            } else {\n                $tuple_list = $tuple_list->rest();\n            }\n        } else {\n            $tuple_list = $tuple_list->rest();\n        }\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/921","completion":"    my @result = [];\n    my $i = 0;\n    while ($i < $N) {\n        my $chunk = $test_tup { $i, $N };\n        push @result, $chunk;\n        $i += 1;\n    }\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/922","completion":"    my ($max, $min) = @_;\n    foreach my $num (@_){\n        if ($num > $max){\n            $max = $num;\n        }\n        if ($num < $min){\n            $min = $num;\n        }\n    }\n    return [$max, $min];\n}","language":"perl"}
{"task_id":"MBPLP\/923","completion":"    $m = $m - 1;\n    $n = $n - 1;\n    $X =~ s\/.\/;\n    $Y =~ s\/.\/;\n    $m =~ s\/.\/;\n    $n =~ s\/.\/;\n    $X =~ s\/.\/;\n    $Y =~ s\/.\/;\n    $m =~ s\/.\/;\n    $n =~ s\/.\/;\n    $X =~ s\/.\/;\n    $Y =~ s\/.\/;\n    $m =~ s\/.\/;\n    $n =~ s\/.\/;\n    $X =~ s\/.\/;\n    $Y =~ s\/.\/;\n    $m =~ s\/.\/;\n    $n =~ s\/.\/;\n    $X =~ s\/.\/;\n    $Y =~ s\/.\/;\n    $m =~ s\/.\/","language":"perl"}
{"task_id":"MBPLP\/932","completion":"    my @l = split \/\\s+\/;\n    my @d = @l;\n    my @s = @l;\n    my @i = 0;\n    while (@i < @l) {\n        my $s = @s;\n        my $i = @i;\n        my $d = @d;\n        my $l = @l;\n        my $j = 0;\n        while ($j < $l) {\n            if ($s[$i] == $s[$j]) {\n                $d = $d < $s ? $d : $s;\n                $s = $s < $s ? $s : $s;\n                $j = $j + 1;\n            } else {\n                $j = $j + 1;\n            }\n        }\n        $i","language":"perl"}
{"task_id":"MBPLP\/933","completion":"    my $result = \"\";\n    $result =~ s\/(\\w)([A-Z])\/\\1_\\2\/g;\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/936","completion":"    my $result = [];\n    my @tuples = $test_list;\n    my $i = 0;\n    while ($i < count($tuples)) {\n        my $tuple = $tuples[$i];\n        my $j = 0;\n        while ($j < count($ord_list)) {\n            if ($tuple[0] == $ord_list[$j]) {\n                $result[] = $tuple;\n                $i = $i + 1;\n                break;\n            }\n            $j = $j + 1;\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/937","completion":"    my ($str2) = @_;\n    my ($str3) = @_;\n    my ($str4) = @_;\n    my ($str5) = @_;\n    my ($str6) = @_;\n    my ($str7) = @_;\n    my ($str8) = @_;\n    my ($str9) = @_;\n    my ($str10) = @_;\n    my ($str11) = @_;\n    my ($str12) = @_;\n    my ($str13) = @_;\n    my ($str14) = @_;\n    my ($str15) = @_;\n    my ($str16) = @_;\n    my ($str17) = @_;\n    my ($str18) = @_;\n    my ($str19) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/938","completion":"    my $min = 0;\n    my $max = 0;\n    my $mid = 0;\n    my $diff = 0;\n    my $diff_min = 0;\n    my $diff_max = 0;\n    my $diff_mid = 0;\n    my $diff_min_mid = 0;\n    my $diff_max_mid = 0;\n    my $diff_min_max = 0;\n    my $diff_max_min = 0;\n    my $diff_min_max_mid = 0;\n    my $diff_max_min_mid = 0;\n    my $diff_min_max_max = 0;\n    my $diff_max_min_max = 0;\n    my $diff_min_max_max_mid = 0;\n    my $diff_max_min_max_mid = 0;\n    my $diff_min","language":"perl"}
{"task_id":"MBPLP\/939","completion":"    my ($sorted) = @_;\n\n    foreach my $model (@$models) {\n        $sorted = $sorted { $model };\n    }\n\n    return $sorted;\n}","language":"perl"}
{"task_id":"MBPLP\/940","completion":"    my ($n) = 0;\n    my ($i) = 0;\n    my ($j) = 0;\n    my ($k) = 0;\n    my ($l) = 0;\n    my ($m) = 0;\n    my ($n1) = 0;\n    my ($n2) = 0;\n    my ($n3) = 0;\n    my ($n4) = 0;\n    my ($n5) = 0;\n    my ($n6) = 0;\n    my ($n7) = 0;\n    my ($n8) = 0;\n    my ($n9) = 0;\n    my ($n10) = 0;\n    my ($n11) = 0;\n    my ($n12) = 0;\n    my ($n13) = 0;\n    my ($n14) = 0;\n    my","language":"perl"}
{"task_id":"MBPLP\/941","completion":"    $num = $num || 0;\n    if ($num =~ m{^(\\[.*\\])} ) {\n        $num = 1;\n    } else {\n        $num = 0;\n    }\n    return $num;\n}","language":"perl"}
{"task_id":"MBPLP\/943","completion":"    my ($result, $heap) = @_;\n    push $heap, $num1;\n    push $heap, $num2;\n    while (not empty $heap) {\n        $num1 = pop $heap;\n        $num2 = pop $heap;\n        push $result, $num1 + $num2;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/944","completion":"    my ($pos, $num) = @_;\n\n    $num =~ s\/\\D\/g;\n    $pos = $text =~ s\/\\d+\/g;\n\n    print $pos . $num . \"\\n\";\n}","language":"perl"}
{"task_id":"MBPLP\/946","completion":"    my @counts = @_;\n    my @most_common = @_;\n\n    for my $char (@counts) {\n        my $count = $a { $char };\n        if (count($most_common) < count($most_common) {\n            $most_common = $char;\n            $most_common_count = $count;\n        }\n    }\n\n    return $most_common;\n}","language":"perl"}
{"task_id":"MBPLP\/947","completion":"    my ($list2) = @_;\n    my ($list3) = @_;\n    my ($list4) = @_;\n    my ($list5) = @_;\n    my ($list6) = @_;\n    my ($list7) = @_;\n    my ($list8) = @_;\n    my ($list9) = @_;\n    my ($list10) = @_;\n    my ($list11) = @_;\n    my ($list12) = @_;\n    my ($list13) = @_;\n    my ($list14) = @_;\n    my ($list15) = @_;\n    my ($list16) = @_;\n    my ($list17) = @_;\n    my ($list18) = @_;\n    my ($list19) = @_;\n    my ($","language":"perl"}
{"task_id":"MBPLP\/948","completion":"    return $tup1[$index];\n}","language":"perl"}
{"task_id":"MBPLP\/949","completion":"    my ($digits) = 0;\n    my ($result_list) = @_;\n\n    foreach my $tuple (@$test_list) {\n        $digits = $tuple->length;\n        push @$result_list, $tuple;\n    }\n\n    sort @$result_list;\n\n    foreach my $tuple (@$result_list) {\n        push @$test_list, $tuple;\n    }\n\n    return $test_list;\n}","language":"perl"}
{"task_id":"MBPLP\/950","completion":"    my ($sign) = \"Z\";\n    if ($year < 2000)\n    {\n        $sign = \"X\";\n    }\n    elseif ($year < 1900)\n    {\n        $sign = \"C\";\n    }\n    elseif ($year < 2000)\n    {\n        $sign = \"T\";\n    }\n    elseif ($year < 1900)\n    {\n        $sign = \"L\";\n    }\n    elseif ($year < 2000)\n    {\n        $sign = \"V\";\n    }\n    elseif ($year < 1900)\n    {\n        $sign = \"J\";\n    }\n    elseif ($year < 2000)\n    {\n        $sign = \"H\";\n    }\n    elseif ($year < 1900)\n    {\n        $sign = \"S\";\n","language":"perl"}
{"task_id":"MBPLP\/952","completion":"    my $ncr = $n * $r * $p;\n    my $ncr_mod_p = $ncr % $p;\n    return $ncr_mod_p;\n}","language":"perl"}
{"task_id":"MBPLP\/953","completion":"    my @res = 0;\n    my @min = 0;\n    my @max = 0;\n    my $min = 0;\n    my $max = 0;\n    my $i = 0;\n    for (@$ar) {\n        my $i = 0;\n        for (@$ar) {\n            if ($i != $ar) {\n                my $temp = $ar - $i;\n                if ($temp > $max) {\n                    $max = $temp;\n                }\n                if ($temp < $min) {\n                    $min = $temp;\n                }\n            }\n            $i++;\n        }\n        if ($min == $max) {\n            $res++;\n        }\n    }\n    return $res;\n}","language":"perl"}
{"task_id":"MBPLP\/956","completion":"    my ($list) = @_;\n    my ($result) = @_;\n    my ($pattern) = @_;\n\n    $pattern = \"\/([A-Z]+)\/\";\n    $list =~ s\/\\s\/ \"\";\n    $list =~ s\/\\s\/ \"\";\n    $list =~ s\/\\s\/ \"\";\n    $list =~ s\/\\s\/ \"\";\n    $list =~ s\/\\s\/ \"\";\n    $list =~ s\/\\s\/ \"\";\n    $list =~ s\/\\s\/ \"\";\n    $list =~ s\/\\s\/ \"\";\n    $list =~ s\/\\s\/ \"\";\n    $list =~ s\/\\s\/ \"\";\n    $list =~ s\/\\s\/ \"\";\n    $list =~ s\/\\s\/ \"\";\n    $list =~ s\/\\s\/ \"\";\n    $list =~ s\/\\s\/ \"\";\n    $list =","language":"perl"}
{"task_id":"MBPLP\/958","completion":"    $num = $num >= 50 ? $num - 50 : $num;\n    $num = $num >= 40 ? $num - 40 : $num;\n    $num = $num >= 10 ? $num - 10 : $num;\n    $num = $num >= 5 ? $num - 5 : $num;\n    $num = $num >= 1 ? $num - 1 : $num;\n    return \"M\".$num;\n}","language":"perl"}
{"task_id":"MBPLP\/961","completion":"    my ($i, $v) = @_;\n    $i = $v ? $i - $v : $i;\n    $i = $s == \"M\" ? $i * 1000 : $i;\n    $i = $s == \"D\" ? $i * 500 : $i;\n    $i = $s == \"C\" ? $i * 100 : $i;\n    $i = $s == \"L\" ? $i * 50 : $i;\n    $i = $s == \"X\" ? $i * 10 : $i;\n    $i = $s == \"V\" ? $i * 5 : $i;\n    $i = $s == \"I\" ? $i : $i;\n","language":"perl"}
{"task_id":"MBPLP\/965","completion":"    my ($result) = \"\";\n    $result =~ s\/(\\w)(\\w*)\/$1_$2\/g;\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/966","completion":"    my @tuple2 = ();\n    my @tuple3 = @_;\n\n    for my $i (0..3) {\n        if ($tuple1[$i] == \"\") {\n            $tuple2 = $tuple2 { $tuple1[$i] };\n        }\n        else {\n            $tuple3 = $tuple3 { $tuple1[$i] };\n        }\n    }\n\n    return $tuple2 { $tuple3 };\n}","language":"perl"}
{"task_id":"MBPLP\/967","completion":"    my $vowels = \"aeiouAEIOU\";\n    my $result = \"accepted\";\n\n    if (0 < length ($string)) {\n        if (0 < $vowels =~ m\/^[aeiou]\/) {\n            $result = \"not accepted\";\n        }\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/968","completion":"    $A = $A < $N ? $A : $N;\n    $B = $B < $N ? $B : $N;\n    return $A - $B;\n}","language":"perl"}
{"task_id":"MBPLP\/969","completion":"    my ($result_list) = [];\n\n    for (@$test_list) {\n        my ($tuple) = @_;\n        $result_list = $result_list || $tuple;\n        if (count($tuple) > 1) {\n            $result_list = $result_list { $tuple };\n        }\n    }\n\n    return $result_list;\n}","language":"perl"}
{"task_id":"MBPLP\/971","completion":"    $n = $n or 0;\n    $a = $a or 0;\n    $b = $b or 0;\n    $c = $c or 0;\n    $n = $n + $a + $b + $c;\n    $n = $n or 0;\n    $n = $n + $a + $b + $c;\n    $n = $n or 0;\n    $n = $n + $a + $b + $c;\n    $n = $n or 0;\n    $n = $n + $a + $b + $c;\n    $n = $n or 0;\n    $n = $n + $a + $b + $c;\n    $n = $n or 0;\n","language":"perl"}
{"task_id":"MBPLP\/972","completion":"    my @result = [];\n    my @tup1 = $test_tup1;\n    my @tup2 = $test_tup2;\n    while (@tup1 || @tup2) {\n        my $first = @tup1;\n        my $second = @tup2;\n        if ($first) {\n            @result = [$first, $second, @result];\n            @tup1 = undef;\n        } else {\n            @result = [$second, @result];\n            @tup2 = undef;\n        }\n    }\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/973","completion":"    $d = $d % strlen($s);\n    return substr($s, $d, strlen($s));\n}","language":"perl"}
{"task_id":"MBPLP\/974","completion":"    my ($n) = 0;\n    my ($m) = 0;\n    my ($min) = 0;\n    my ($sum) = 0;\n\n    for (@_){\n        $n = $n + 1;\n        $m = $m + $n;\n        $min = $min < $m ? $min : $m;\n        $sum = $sum + $A[$n][$m];\n    }\n\n    return $sum - $min;\n}","language":"perl"}
