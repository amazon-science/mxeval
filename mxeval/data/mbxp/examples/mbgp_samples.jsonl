{"task_id":"MBGP\/421","completion":"    return fmt.Sprintf(\"%s-%s-%d-%s\", test_tup[0], test_tup[1], test_tup[2], test_tup[3])\n}","language":"go"}
{"task_id":"MBGP\/8","completion":"    squares := make([]int, len(nums))\n    for i, n := range nums {\n        squares[i] = n * n\n    }\n    return squares\n}","language":"go"}
{"task_id":"MBGP\/17","completion":"    return (a * 4)\n}","language":"go"}
{"task_id":"MBGP\/20","completion":"    return x % 10 == 3\n}","language":"go"}
{"task_id":"MBGP\/22","completion":"\tseen := make(map[int]int, 0)\n\tfor _, i := range nums {\n\t\tif seen[i] == 0 {\n\t\t\tseen[i] = 1\n\t\t} else {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}","language":"go"}
{"task_id":"MBGP\/28","completion":"    if (n == 0 && k == 0) {\n        return 1;\n    } else if (n < 0 || k < 0) {\n        return 0;\n    } else {\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k);\n    }\n}","language":"go"}
{"task_id":"MBGP\/29","completion":"    count := 0\n    for num := 0; num < arr_size; num++ {\n        for i := 0; i < arr_size; i++ {\n            if (arr[num] == arr[i]) {\n                count++\n            }\n        }\n        if (count % 2 == 1) {\n            return arr[num]\n        }\n        count = 0\n    }\n    return 0\n}","language":"go"}
{"task_id":"MBGP\/30","completion":"    cnt := 0\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if(s[i] == s[j]) {\n                cnt++\n            }\n        }\n    }\n    return cnt\n}","language":"go"}
{"task_id":"MBGP\/33","completion":"    if (N == 0) {\n        return 0\n    }\n    return decimal_To_Binary(N \/ 2) * 10 + N % 2\n}","language":"go"}
{"task_id":"MBGP\/40","completion":"    r := map[int]int{}\n    for _, v := range nums {\n        for _, t := range v {\n            r[t] = r[t]+1\n        }\n    }\n    return r\n}","language":"go"}
{"task_id":"MBGP\/44","completion":"\tif (0 == len(text)) {\n\t\treturn \"Not matched!\"\n\t}\n\tif (0 == len(text) || text[0] != 'p') {\n\t\treturn \"Not matched!\"\n\t}\n\treturn \"Found a match!\"\n}","language":"go"}
{"task_id":"MBGP\/49","completion":"    res := make([]int, 0)\n    for _, elem := range nums {\n        res = append(res, elem[N])\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/51","completion":"    return (x == y && y == z)\n}","language":"go"}
{"task_id":"MBGP\/52","completion":"    return (b * h)\n}","language":"go"}
{"task_id":"MBGP\/53","completion":"  if len(str) < 2 {\n    return \"Not Equal\"\n  } else {\n    if str[0] == str[len(str) - 1] {\n      return \"Equal\"\n    } else {\n      return \"Not Equal\"\n    }\n  }\n}","language":"go"}
{"task_id":"MBGP\/58","completion":"\tif (x * y < 0) {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}","language":"go"}
{"task_id":"MBGP\/62","completion":"    if len(xs) == 0 {\n      return 0\n    }\n\n    if len(xs) == 1 {\n      return xs[0]\n    }\n\n    min_num := xs[0]\n    for i := 1; i < len(xs); i++ {\n        if min_num > xs[i] {\n            min_num = xs[i]\n        }\n    }\n\n    return min_num\n}","language":"go"}
{"task_id":"MBGP\/66","completion":"    n := 0\n    for _, v := range list {\n        if v > 0 {\n            n += 1\n        }\n    }\n    return n\n}","language":"go"}
{"task_id":"MBGP\/70","completion":"\tfor _, v := range Input {\n\t\tif len(v) != k {\n\t\t\treturn \"All tuples do not have same length\"\n\t\t}\n\t}\n\n\tfor _, v := range Input {\n\t\tif len(v) == k {\n\t\t\treturn \"All tuples have same length\"\n\t\t}\n\t}\n\treturn \"All tuples do not have same length\"\n}","language":"go"}
{"task_id":"MBGP\/79","completion":"    if len(s) % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}","language":"go"}
{"task_id":"MBGP\/88","completion":"\tcount := make(map[int]int,0)\n\tfor _,v := range list1 {\n\t\tcount[v] += 1\n\t}\n\treturn count\n}","language":"go"}
{"task_id":"MBGP\/93","completion":"    if (b == 0) {\n        return 1;\n    }\n    return a * power(a, b-1)\n}","language":"go"}
{"task_id":"MBGP\/101","completion":"    if (k > len(arr)) {\n        return -1\n    }\n    return arr[k - 1]\n}","language":"go"}
{"task_id":"MBGP\/105","completion":"\tcount := 0\n\tfor i := 0; i < len(lst); i++ {\n\t\tif lst[i] {\n\t\t\tcount += 1\n\t\t}\n\t}\n\treturn count\n}","language":"go"}
{"task_id":"MBGP\/106","completion":"    for _, i := range test_list {\n        test_tup = append(test_tup, i)\n    }\n    return test_tup\n}","language":"go"}
{"task_id":"MBGP\/112","completion":"    return diameter*2 + height*2\n}","language":"go"}
{"task_id":"MBGP\/116","completion":"    s := 0\n    for i := 0; i < len(nums); i++ {\n        s = s * 10 + nums[i]\n    }\n    return s\n}","language":"go"}
{"task_id":"MBGP\/126","completion":"    \/\/ find the sum of divisors of a and b\n    \/\/ Return the sum of divisors of a and b\n    \/\/ Return 0 if a or b is 0\n    if (a == 0 && b == 0) {\n        return 0\n    }\n    if (a == 0) {\n        return 0\n    }\n    if (b == 0) {\n        return 0\n    }\n\n    s := 0\n\n    for i := 1; i < a && i < b; i++ {\n        if (a % i == 0 && b % i == 0) {\n            s += i\n        }\n    }\n\n    return s\n}","language":"go"}
{"task_id":"MBGP\/127","completion":"  if (y == 0) {\n    return 0;\n  } else {\n    return x + multiply_int(x, y - 1);\n  }\n}","language":"go"}
{"task_id":"MBGP\/133","completion":"    sum := 0\n    for _, i := range nums {\n        if (i < 0) {\n            sum += i\n        }\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBGP\/135","completion":"    if (n <= 0) {\n        return 0\n    }\n    return n * (2 * n - 1)\n}","language":"go"}
{"task_id":"MBGP\/138","completion":"    if n < 2 {\n        return true\n    }\n    n -= 2\n    if (n % 2) == 0 {\n        return is_Sum_Of_Powers_Of_Two(n)\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/145","completion":"    if n == 0 {\n        return 0\n    }\n    maxAbsDiff := 0\n    max := -1\n    min := 1000\n    for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n    }\n\n    maxAbsDiff = max - min\n    return maxAbsDiff\n}","language":"go"}
{"task_id":"MBGP\/150","completion":"  return (b > a && c > a) || (b < a && c < a)\n}","language":"go"}
{"task_id":"MBGP\/151","completion":"\tif x == 2 || y == 2 {\n\t\treturn true\n\t}\n\tfor i := 3; i*i <= x; i++ {\n\t\tif x % i == 0 || y % i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}","language":"go"}
{"task_id":"MBGP\/154","completion":"    ret := make([]int, 0)\n    for _, v := range nums {\n        ret = append(ret, v[N])\n    }\n    return ret\n}","language":"go"}
{"task_id":"MBGP\/162","completion":"    if (n < 0) {\n        return 0\n    }\n    return n + sum_series(n - 2)\n}","language":"go"}
{"task_id":"MBGP\/167","completion":"\tif n == 0 {\n\t\treturn 1\n\t} else {\n\t\treturn 2 * next_Power_Of_2(n >> 1)\n\t}\n}","language":"go"}
{"task_id":"MBGP\/168","completion":"    r := 0\n    for _, n := range a {\n        if n == x {\n            r++\n        }\n    }\n    return r\n}","language":"go"}
{"task_id":"MBGP\/176","completion":"    return a + b + c\n}","language":"go"}
{"task_id":"MBGP\/178","completion":"\tfor i := 0; i < len(patterns); i++ {\n\t\tfor j := 0; j < len(text); j++ {\n\t\t\tif text[j] == patterns[i][0] {\n\t\t\t\tfor k := 0; k < len(patterns[i]); k++ {\n\t\t\t\t\tif text[j + k] != patterns[i][k] {\n\t\t\t\t\t\treturn \"Not Matched!\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn \"Matched!\"\n\t\t\t}\n\t\t}\n\t}\n\treturn \"Not Matched!\"\n}","language":"go"}
{"task_id":"MBGP\/179","completion":"    if x % 2 == 1 || x % 3 == 2 {\n        return true\n    } else {\n        return false\n    }\n}","language":"go"}
{"task_id":"MBGP\/188","completion":"    if n == 1 {\n        return true\n    }\n    n = n \/ 2\n    if n == 1 {\n        return true\n    }\n    if n % 2 == 1 {\n        return false\n    }\n    return prod_Square(n)\n}","language":"go"}
{"task_id":"MBGP\/191","completion":"    \/\/ Your code here\n    return monthname3 == \"April\" || monthname3 == \"June\"\n}","language":"go"}
{"task_id":"MBGP\/199","completion":"\tif n == 1 {\n\t\treturn 1\n\t}\n\treturn highest_Power_of_2(n\/2) * 2\n}","language":"go"}
{"task_id":"MBGP\/201","completion":"\tfor _, i := range lst {\n\t\tfor _, j := range lst {\n\t\t\tif i != j {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}","language":"go"}
{"task_id":"MBGP\/211","completion":"    var count int\n    if n == 0 {\n        count = 0\n    } else {\n        count = count_Num(n \/ 2) + (n % 2)\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/221","completion":"    for _, x := range nums {\n        if x % 2 == 0 {\n            return x\n        }\n    }\n    return 0\n}","language":"go"}
{"task_id":"MBGP\/224","completion":"    if n == 0 {\n        return 0;\n    }\n    return (n & 1) + count_Set_Bits(n >> 1)\n}","language":"go"}
{"task_id":"MBGP\/227","completion":"    if (a < b && a < c) {\n        return a\n    } else if (b < c) {\n        return b\n    } else {\n        return c\n    }\n}","language":"go"}
{"task_id":"MBGP\/228","completion":"    return (n & (1 << (r - l))) == 0\n}","language":"go"}
{"task_id":"MBGP\/229","completion":"    \/\/ Your code here\n    return arr\n}","language":"go"}
{"task_id":"MBGP\/234","completion":"\treturn l*l*l\n}","language":"go"}
{"task_id":"MBGP\/249","completion":"    var intersection []int\n    for _, i := range array_nums1 {\n        for _, j := range array_nums2 {\n            if (i == j) {\n                intersection = append(intersection, i)\n            }\n        }\n    }\n    return intersection\n}","language":"go"}
{"task_id":"MBGP\/250","completion":"    count := 0\n    for i := 0; i < len(tup); i++ {\n        if tup[i] == x {\n            count++\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/257","completion":"\tif a < b {\n\t\treturn []int{b, a}\n\t}\n\treturn []int{a, b}\n}","language":"go"}
{"task_id":"MBGP\/258","completion":"    var array_odd []int\n    for _, x := range array_nums {\n        if x % 2 == 1 {\n            array_odd = append(array_odd, x)\n        }\n    }\n    return len(array_odd)\n}","language":"go"}
{"task_id":"MBGP\/261","completion":"    res := make([]int, len(test_tup1))\n    for i := 0; i < len(test_tup1); i++ {\n        res[i] = test_tup1[i] \/ test_tup2[i]\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/273","completion":"\tresult := make([]int, 3)\n\n\tfor i := 0; i < 3; i++ {\n\t\tresult[i] = test_tup1[i] - test_tup2[i]\n\t}\n\n\treturn result\n}","language":"go"}
{"task_id":"MBGP\/277","completion":"    res := make(map[string]int, 0)\n    for key, val := range dict {\n        if val >= n {\n            res[key] = val\n        }\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/284","completion":"\tif len(list) == 0 {\n\t\treturn false\n\t}\n\n\tfor _, v := range list {\n\t\tif v != element {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}","language":"go"}
{"task_id":"MBGP\/292","completion":"    return (n\/m)\n}","language":"go"}
{"task_id":"MBGP\/295","completion":"\tsum := 0\n\tfor i := 1; i < number; i++ {\n\t\tif number % i == 0 {\n\t\t\tsum += i\n\t\t}\n\t}\n\treturn sum\n}","language":"go"}
{"task_id":"MBGP\/296","completion":"    total := 0\n    for i := 0; i < n; i++ {\n        for j := i+1; j < n; j++ {\n            if (arr[i] > arr[j]) {\n                total += 1\n            }\n        }\n    }\n    return total\n}","language":"go"}
{"task_id":"MBGP\/309","completion":"    if a > b {\n        return a\n    } else {\n        return b\n    }\n}","language":"go"}
{"task_id":"MBGP\/327","completion":"    if (x == y || x == z || y == z) {\n        return true\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/329","completion":"    var count int\n    for _,v := range list {\n        if v < 0 {\n            count += 1\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/334","completion":"\treturn (a+b>c) && (a+c>b) && (b+c>a)\n}","language":"go"}
{"task_id":"MBGP\/351","completion":"    for _, i := range arr {\n        count := 0;\n        for _, j := range arr {\n            if i == j {\n                count++\n            }\n        }\n        if count == k {\n            return i\n        }\n    }\n    return -1\n}","language":"go"}
{"task_id":"MBGP\/353","completion":"\tfor _, innerList := range list1 {\n\t\tfor i, e := range innerList {\n\t\t\tif i == n {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tinnerList[i] = e\n\t\t}\n\t}\n\treturn list1\n}","language":"go"}
{"task_id":"MBGP\/354","completion":"\tif (n == 1) {\n\t\treturn a\n\t}\n\treturn tn_ap(a+d, n-1, d)\n}","language":"go"}
{"task_id":"MBGP\/356","completion":"    if a + b <= 180 {\n        return 180 - a - b\n    } else {\n        return 180 - (a + b)\n    }\n}","language":"go"}
{"task_id":"MBGP\/362","completion":"    counter := make(map[int]int,0)\n    for _, v := range nums {\n        counter[v] += 1\n    }\n    val, max_count := 0, 0\n    for k, count := range counter {\n        if count > max_count {\n            max_count = count\n            val = k\n        }\n    }\n    return val\n}","language":"go"}
{"task_id":"MBGP\/365","completion":"    if n < 10 {\n        return 1\n    } else {\n        return 1 + count_Digit(n \/ 10)\n    }\n}","language":"go"}
{"task_id":"MBGP\/366","completion":"\tmax := -1\n\tfor _, i := range list_nums {\n\t\tfor _, j := range list_nums {\n\t\t\tif i != j {\n\t\t\t\tproduct := i * j\n\t\t\t\tif product > max {\n\t\t\t\t\tmax = product\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn max\n}","language":"go"}
{"task_id":"MBGP\/368","completion":"    repeat_list := make([][]int, N)\n    for i := 0; i < N; i++ {\n        repeat_list[i] = test_tup\n    }\n    return repeat_list\n}","language":"go"}
{"task_id":"MBGP\/373","completion":"    return l * w * h\n}","language":"go"}
{"task_id":"MBGP\/375","completion":"    return n \/ m * m\n}","language":"go"}
{"task_id":"MBGP\/379","completion":"    return 2 * (l * w + w * h + l * h)\n}","language":"go"}
{"task_id":"MBGP\/384","completion":"    \/\/ Write your code here.\n    count := 0\n    smallest := 999999\n    for i := 0; i < n; i++ {\n        if (arr[i] < smallest) {\n            smallest = arr[i]\n            count = 1\n        } else if (arr[i] == smallest) {\n            count += 1\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/388","completion":"  if n < 1 {\n    return 0\n  } else if n == 1 {\n    return 1\n  } else {\n    return 2 * highest_Power_of_2(n \/ 2)\n  }\n}","language":"go"}
{"task_id":"MBGP\/394","completion":"    count_tup := make(map[int]int, 0)\n    for _, val := range test_tup {\n        count_tup[val] += 1\n    }\n    for _, val := range count_tup {\n        if (count_tup[val] > 1) {\n            return false\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBGP\/399","completion":"    result := make([]int, len(test_tup1))\n    for i := 0; i < len(test_tup1); i++ {\n        result[i] = test_tup1[i] ^ test_tup2[i]\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/404","completion":"    if (a > b) {\n        return b;\n    } else {\n        return a;\n    }\n}","language":"go"}
{"task_id":"MBGP\/405","completion":"    for _, a := range tuplex {\n        if tuple1 == a {\n            return true\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/406","completion":"    if (x % 2 == 0) {\n        return \"Even Parity\"\n    }\n    if (x % 2 == 1) {\n        return \"Odd Parity\"\n    }\n    return \"Invalid\"\n}","language":"go"}
{"task_id":"MBGP\/429","completion":"\tv := make([]int, len(test_tup1))\n\tfor i := 0; i < len(test_tup1); i++ {\n\t\tv[i] = test_tup1[i] & test_tup2[i]\n\t}\n\treturn v\n}","language":"go"}
{"task_id":"MBGP\/433","completion":"    for _, i := range arr {\n        if number < i {\n            return \"No, entered number is less than those in the array\"\n        }\n    }\n    return \"Yes, the entered number is greater than those in the array\"\n}","language":"go"}
{"task_id":"MBGP\/435","completion":"    if (n == 0) {\n        return 0\n    }\n    if (n % 10 == 9) {\n        return 9\n    }\n    return (n % 10)\n}","language":"go"}
{"task_id":"MBGP\/441","completion":"  return 6 * l * l\n}","language":"go"}
{"task_id":"MBGP\/443","completion":"    if len(list1) == 0 {\n        return 0\n    }\n    sorted := make([]int, len(list1))\n    for i, val := range list1 {\n        sorted[i] = val\n    }\n    return sorted[len(sorted) - 1]\n}","language":"go"}
{"task_id":"MBGP\/454","completion":"    match := 0\n    for i, c := range text {\n        if i > match {\n            match = i\n        }\n        if c == 'z' {\n            return \"Found a match!\"\n        }\n    }\n    return \"Not matched!\"\n}","language":"go"}
{"task_id":"MBGP\/455","completion":"  if monthnum2 % 2 == 1 {\n    return true\n  }\n  return false\n}","language":"go"}
{"task_id":"MBGP\/458","completion":"    return l * b\n}","language":"go"}
{"task_id":"MBGP\/460","completion":"    result := make([]int, 0)\n    for _, v := range lst {\n        result = append(result, v[0])\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/469","completion":"    profit := 0\n    for i := 0; i < len(price) - 1; i++ {\n        if (price[i + 1] - price[i] > 0) {\n            profit += price[i + 1] - price[i]\n        }\n    }\n    return profit\n}","language":"go"}
{"task_id":"MBGP\/476","completion":"    min := nums[0]\n    max := nums[0]\n    for _, elem := range nums {\n        if elem < min {\n            min = elem\n        }\n        if elem > max {\n            max = elem\n        }\n    }\n    return max + min\n}","language":"go"}
{"task_id":"MBGP\/479","completion":"    if (n < 10) {\n        return n\n    }\n    return first_Digit(n \/ 10)\n}","language":"go"}
{"task_id":"MBGP\/489","completion":"    var max = arr[0]\n    var count = 0\n    for _, v := range arr {\n        if (v > max) {\n            max = v\n            count = 1\n        } else if (v == max) {\n            count += 1\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/498","completion":"\tif x == 0 {\n\t\treturn y;\n\t}\n\treturn gcd(y % x, x)\n}","language":"go"}
{"task_id":"MBGP\/499","completion":"    if r < 0 {\n        return -1\n    }\n    return 2 * r\n}","language":"go"}
{"task_id":"MBGP\/502","completion":"    return n % m\n}","language":"go"}
{"task_id":"MBGP\/505","completion":"\tfor i, x := range A {\n\t\tfor j, y := range A {\n\t\t\tif x == 0 && y == 0 {\n\t\t\t\tA[i] = y\n\t\t\t\tA[j] = x\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\treturn A\n}","language":"go"}
{"task_id":"MBGP\/506","completion":"    p := 1\n    for i := 0; i < k; i++ {\n        p *= n - i\n    }\n    return p\n}","language":"go"}
{"task_id":"MBGP\/509","completion":"    if (n % 2 == 0) {\n        return n \/ 2\n    }\n    return (n \/ 2) + 1\n}","language":"go"}
{"task_id":"MBGP\/514","completion":"    var sum int = 0\n    for _, i := range test_tup {\n        sum += i\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBGP\/521","completion":"    return (x + y > z) && (x + z > y) && (z + y > x)\n}","language":"go"}
{"task_id":"MBGP\/525","completion":"  return line1[0] * line2[1] == line1[1] * line2[0]\n}","language":"go"}
{"task_id":"MBGP\/554","completion":"    r := make([]int, 0)\n    for _, v := range list {\n        if v % 2 == 1 {\n            r = append(r, v)\n        }\n    }\n    return r\n}","language":"go"}
{"task_id":"MBGP\/559","completion":"    s := 0\n    max := 0\n    for i := 0; i < size; i++ {\n        for j := i; j < size; j++ {\n            s += a[j]\n            if s > max {\n                max = s\n            }\n        }\n        s = 0\n    }\n    return max\n}","language":"go"}
{"task_id":"MBGP\/564","completion":"\tcount := 0\n\tfor i := 0; i < n - 1; i++ {\n\t\tfor j := i + 1; j < n; j++ {\n\t\t\tif arr[i] != arr[j] {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}","language":"go"}
{"task_id":"MBGP\/566","completion":"    if n < 10 {\n        return n\n    }\n    return (n % 10) + sum_digits(n \/ 10)\n}","language":"go"}
{"task_id":"MBGP\/577","completion":"    if (n < 10) {\n        return n\n    }\n    return last_Digit_Factorial(n \/ 10) * 10 % 10\n}","language":"go"}
{"task_id":"MBGP\/587","completion":"    tuple := make([]int, len(listx))\n    for i,x := range listx {\n        tuple[i] = x\n    }\n    return tuple\n}","language":"go"}
{"task_id":"MBGP\/588","completion":"    if len(nums) == 0 {\n        return 0\n    }\n    var max = nums[0]\n    var min = nums[0]\n    for _, v := range nums {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    return max - min\n}","language":"go"}
{"task_id":"MBGP\/600","completion":"\treturn n & 1 == 0\n}","language":"go"}
{"task_id":"MBGP\/605","completion":"\tif num == 2 { return true }\n\tif num % 2 == 0 { return false }\n\tfor i := 3; i * i <= num; i += 2 {\n\t\tif num % i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}","language":"go"}
{"task_id":"MBGP\/614","completion":"    sum := 0\n    for _, v := range test_list {\n        for _, b := range v {\n            sum += b\n        }\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBGP\/616","completion":"    res := make([]int, len(test_tup1))\n    for i := 0; i < len(res); i++ {\n        res[i] = test_tup1[i] % test_tup2[i]\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/625","completion":"    return newList\n}","language":"go"}
{"task_id":"MBGP\/626","completion":"    if (r < 0) {\n        return -1\n    }\n    if (r == 0) {\n        return 0\n    }\n    return r*r - r + 2\n}","language":"go"}
{"task_id":"MBGP\/633","completion":"    x := 0\n    for i := 0; i < n; i++ {\n        for j := i+1; j < n; j++ {\n            x += arr[i] ^ arr[j]\n        }\n    }\n    return x\n}","language":"go"}
{"task_id":"MBGP\/636","completion":"    if a*a - 4*b*c < 0 {\n        return \"No\"\n    }\n    if a*a - 4*b*c == 0 {\n        return \"Yes\"\n    }\n    return \"Yes\"\n}","language":"go"}
{"task_id":"MBGP\/637","completion":"    return actual_cost == sale_amount\n}","language":"go"}
{"task_id":"MBGP\/650","completion":"    if n != m {\n        return false\n    }\n    for i := 0; i < n; i++ {\n        if arr1[i] != arr2[i] {\n            return false\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBGP\/651","completion":"\tfor _, v1 := range test_tup1 {\n\t\tfor _, v2 := range test_tup2 {\n\t\t\tif v1 == v2 {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}","language":"go"}
{"task_id":"MBGP\/654","completion":"    \/\/ Return the perimeter of the rectangle.\n    \/\/ Assume the rectangle is always square.\n    return 2 * (l + b);\n}","language":"go"}
{"task_id":"MBGP\/658","completion":"    map1 := make(map[int]int , 0)\n    for _, v := range list1 {\n        map1[v] += 1\n    }\n    max_val := 0\n    max_occurrence := 0\n    for k, v := range map1 {\n        if v > max_occurrence {\n            max_occurrence = v\n            max_val = k\n        }\n    }\n    return max_val\n}","language":"go"}
{"task_id":"MBGP\/665","completion":"    return append(num_list[1:], num_list[0])\n}","language":"go"}
{"task_id":"MBGP\/670","completion":"\tfor i := 0; i < len(nums) - 1; i++ {\n\t\tif nums[i] < nums[i + 1] {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}","language":"go"}
{"task_id":"MBGP\/672","completion":"    if (num1 > num2) {\n        if (num1 > num3) {\n            return num1;\n        } else {\n            return num3;\n        }\n    } else {\n        if (num2 > num3) {\n            return num2;\n        } else {\n            return num3;\n        }\n    }\n}","language":"go"}
{"task_id":"MBGP\/673","completion":"    var res int\n    for _, v := range list {\n        res = 10 * res + v\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/675","completion":"\tif (x + y > m && x + y < n) {\n\t\treturn 20\n\t}\n\treturn x + y\n}","language":"go"}
{"task_id":"MBGP\/687","completion":"\tif (a < b) {\n\t\treturn recur_gcd(b, a)\n\t} else if (a == b) {\n\t\treturn a\n\t} else {\n\t\treturn recur_gcd(a - b, b)\n\t}\n}","language":"go"}
{"task_id":"MBGP\/697","completion":"    count := 0\n\n    for _, v := range array_nums {\n        if v % 2 == 0 {\n            count += 1\n        }\n    }\n\n    return count\n}","language":"go"}
{"task_id":"MBGP\/703","completion":"    if (d[x] == 0) {\n        return false\n    }\n    return true\n}","language":"go"}
{"task_id":"MBGP\/706","completion":"    for _, v1 := range arr1 {\n        for _, v2 := range arr2 {\n            if m == n {\n                return true\n            }\n            if v1 == v2 {\n                m -= 1\n                break\n            }\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/710","completion":"    \/\/ TODO: Write your code here\n    \/\/ Use the first element of the tuple as the initial value\n    var initial = test_tup[0]\n    \/\/ Use the last element of the tuple as the last value\n    var last = test_tup[len(test_tup) - 1]\n    var result []int = []int { initial, last }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/713","completion":"    for i := range test_tup {\n        if !test_tup[i] {\n            return false\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBGP\/716","completion":"    return a + a + a + a\n}","language":"go"}
{"task_id":"MBGP\/728","completion":"    res := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        res[i] = lst1[i]\n    }\n    for i := 0; i < len(lst2); i++ {\n        res[i] = res[i] + lst2[i]\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/741","completion":"\tfor _, a := range s {\n\t\tfor _, b := range s {\n\t\t\tif a != b {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}","language":"go"}
{"task_id":"MBGP\/744","completion":"    \/\/ Write your code here.\n    for _, value := range test_tup {\n        if value == nil {\n            return true\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/750","completion":"    \/\/ Go code here\n    return test_list\n}","language":"go"}
{"task_id":"MBGP\/751","completion":"    if i >= len(arr) {\n        return true\n    }\n    if arr[i] < arr[(i - 1)\/2] {\n        return false\n    }\n    return check_min_heap(arr, i + 1)\n}","language":"go"}
{"task_id":"MBGP\/768","completion":"    if (x % 2 == 0) {\n        return false\n    }\n    if ((x + 1) % 2 == 0) {\n        return true\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/770","completion":"    var x = 1\n    var y = 1\n    var sum = 0\n    for i := 0; i < n; i++ {\n        y = x * x\n        y = y * x\n        y = y * x\n        sum = sum + y\n        x = x + 2\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBGP\/775","completion":"\tfor i := 0; i < len(nums); i+=2 {\n\t\tif nums[i] % 2 != 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}","language":"go"}
{"task_id":"MBGP\/784","completion":"    \/\/ First even number\n    var even = 0\n    for _, i := range list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    \/\/ First odd number\n    var odd = 0\n    for _, i := range list1 {\n        if i % 2 == 1 {\n            odd = i\n            break\n        }\n    }\n    return even * odd\n}","language":"go"}
{"task_id":"MBGP\/788","completion":"\tif test_str == \"\" {\n\t\treturn test_list\n\t}\n\treturn append(test_list, test_str)\n}","language":"go"}
{"task_id":"MBGP\/790","completion":"    var even = true\n    for i, x := range nums {\n        if i % 2 == 0 {\n            if x % 2 != 0 {\n                even = false\n                break\n            }\n        }\n    }\n    return even\n}","language":"go"}
{"task_id":"MBGP\/792","completion":"\tcount := 0\n\tfor _, x := range input_list {\n\t\tif len(x) > 0 {\n\t\t\tcount += 1\n\t\t}\n\t}\n\treturn count\n}","language":"go"}
{"task_id":"MBGP\/797","completion":"    sum := 0\n    for i := l; i <= r; i++ {\n        if i % 2 == 1 {\n            sum = sum + i\n        }\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBGP\/798","completion":"  if (len(arr) == 0) {\n    return 0\n  }\n  return arr[0] + _sum(arr[1:])\n}","language":"go"}
{"task_id":"MBGP\/799","completion":"    return (((n << d) | (n >> (32 - d))))\n}","language":"go"}
{"task_id":"MBGP\/801","completion":"    if x == y && x == z {\n        return 3\n    } else if x != y && y != z {\n        return 0\n    } else {\n        return 2\n    }\n}","language":"go"}
{"task_id":"MBGP\/804","completion":"\tfor i := 0; i < len(arr); i++ {\n\t\tfor j := 0; j < len(arr); j++ {\n\t\t\tif (arr[i]*arr[j] == n) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}","language":"go"}
{"task_id":"MBGP\/807","completion":"  for _, i := range nums {\n    if i % 2 == 1 {\n      return i\n    }\n  }\n  return -1\n}","language":"go"}
{"task_id":"MBGP\/808","completion":"    for _, val := range test_tup {\n        if (val == K) {\n            return true\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/813","completion":"    return len(str1)\n}","language":"go"}
{"task_id":"MBGP\/820","completion":"\tmonthnum1 = (monthnum1 - 1) % 12 + 1\n\treturn monthnum1 == 2 || monthnum1 == 14 || monthnum1 == 22\n}","language":"go"}
{"task_id":"MBGP\/825","completion":"    var result []int\n    for _, i := range list_index {\n        result = append(result, nums[i])\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/827","completion":"  result := 0\n  for i := 0; i < len(list1); i++ {\n    result += list1[i][C]\n  }\n  return result\n}","language":"go"}
{"task_id":"MBGP\/831","completion":"\tc := 0\n\tfor i := 0; i < n; i++ {\n\t\tfor j := i + 1; j < n; j++ {\n\t\t\tif arr[i] == arr[j] {\n\t\t\t\tc++\n\t\t\t}\n\t\t}\n\t}\n\treturn c\n}","language":"go"}
{"task_id":"MBGP\/835","completion":"    if (x1 == x2) {\n        return -1.0;\n    }\n    return float64(y2 - y1) \/ float64(x2 - x1);\n}","language":"go"}
{"task_id":"MBGP\/840","completion":"\t\/\/ Your code here\n\tif(a*a + b*b == c*c){\n\t\treturn \"Yes\"\n\t}\n\tif(a*a + b*b > c*c){\n\t\treturn \"Yes\"\n\t}\n\treturn \"No\"\n}","language":"go"}
{"task_id":"MBGP\/841","completion":"\tinv_count := 0\n\n\tfor i := 0; i < n - 1; i++ {\n\t\tfor j := i + 1; j < n; j++ {\n\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\tinv_count++\n\t\t\t}\n\t\t}\n\t}\n\n\treturn inv_count\n}","language":"go"}
{"task_id":"MBGP\/842","completion":"    count := 0\n    for i := 0; i < arr_size; i++ {\n        for j := 0; j < arr_size; j++ {\n            if (arr[i] == arr[j]) {\n                count++\n            }\n        }\n        if (count % 2 == 1) {\n            return arr[i]\n        }\n        count = 0\n    }\n    return -1\n}","language":"go"}
{"task_id":"MBGP\/847","completion":"    res := make([]int, len(xs))\n    for i, x := range xs {\n        res[i] = x\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/850","completion":"\tc = 180 - a - b;\n\treturn (c < 90 && c > 0)\n}","language":"go"}
{"task_id":"MBGP\/852","completion":"    res_list := make([]int, len(num_list))\n\n    \/\/ Iterate through num_list and store its values.\n    for i := 0; i < len(num_list); i++ {\n        value := num_list[i]\n\n        \/\/ If value is positive, set it to negative.\n        \/\/ Otherwise, do nothing.\n        if value >= 0 {\n            res_list[i] = value\n        }\n    }\n\n    return res_list\n}","language":"go"}
{"task_id":"MBGP\/855","completion":"    if (x % 2 == 0) {\n        return true\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/873","completion":"    if (n < 2) {\n        return n\n    }\n\n    return fibonacci(n-1) + fibonacci(n-2)\n}","language":"go"}
{"task_id":"MBGP\/880","completion":"  c = b * b - 4 * a * c\n  if (c < 0) {\n    return \"No solutions\"\n  } else if (c == 0) {\n    return \"1 solution\"\n  } else {\n    return \"2 solutions\"\n  }\n}","language":"go"}
{"task_id":"MBGP\/882","completion":"    if (b > 0 && h > 0) {\n        return b * h * 2;\n    }\n    return -1;\n}","language":"go"}
{"task_id":"MBGP\/883","completion":"    result := make([]int, 0)\n    for _, v := range nums {\n        if (v % m == 0 && v % n == 0) {\n            result = append(result, v)\n        }\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/887","completion":"    return n & 1 == 1\n}","language":"go"}
{"task_id":"MBGP\/889","completion":"\tfor i, list := range lists {\n\t\tfor j, e := range list {\n\t\t\tlist[j] = e\n\t\t}\n\t\tlists[i] = list\n\t}\n\treturn lists\n}","language":"go"}
{"task_id":"MBGP\/891","completion":"\treturn len(fmt.Sprintf(\"%d\", A))==len(fmt.Sprintf(\"%d\", B))\n}","language":"go"}
{"task_id":"MBGP\/904","completion":"    if (x == 0) {\n        return true\n    } else {\n        return false\n    }\n}","language":"go"}
{"task_id":"MBGP\/916","completion":"    \/\/ O(n^3)\n    for i := 0; i < arr_size - 2; i++ {\n        for j := i + 1; j < arr_size - 1; j++ {\n            for k := j + 1; k < arr_size; k++ {\n                if (A[i] + A[j] + A[k] == sum) {\n                    \/\/ Return (a, b, c)\n                    return []int{A[i], A[j], A[k]}\n                }\n            }\n        }\n    }\n    return nil\n}","language":"go"}
{"task_id":"MBGP\/919","completion":"\tr := 1\n\tfor _, v := range items {\n\t\tr *= v\n\t}\n\treturn r\n}","language":"go"}
{"task_id":"MBGP\/924","completion":"  if (x > y) {\n    return x\n  } else {\n    return y\n  }\n}","language":"go"}
{"task_id":"MBGP\/925","completion":"\tif len(nums) == 1 {\n\t\treturn nums[0]\n\t}\n\n\treturn nums[0] * mutiple_tuple(nums[1:])\n}","language":"go"}
{"task_id":"MBGP\/929","completion":"    count := 0\n    for _, v := range tuplex {\n        if v == value {\n            count += 1\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/942","completion":"    for _, v := range test_tup {\n        for _, c := range check_list {\n            if v == c {\n                return true\n            }\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/955","completion":"    sum := 0\n    for i := 1; i < n; i++ {\n        if n % i == 0 {\n            sum += i\n        }\n    }\n    return sum > n\n}","language":"go"}
{"task_id":"MBGP\/964","completion":"    if (len(s) % 2 == 0) {\n        return true\n    } else {\n        return false\n    }\n}","language":"go"}
{"task_id":"MBGP\/970","completion":"    if (x < y) {\n        return x\n    } else {\n        return y\n    }\n}","language":"go"}
{"task_id":"MBGP\/972","completion":"\ttup3 := make([]int, len(test_tup1) + len(test_tup2))\n\tfor i := 0; i < len(test_tup1); i++ {\n\t\ttup3[i] = test_tup1[i]\n\t}\n\tfor i := len(test_tup1); i < len(test_tup1) + len(test_tup2); i++ {\n\t\ttup3[i] = test_tup2[i - len(test_tup1)]\n\t}\n\treturn tup3\n}","language":"go"}
{"task_id":"MBGP\/973","completion":"    return s[d:] + s[:d]\n}","language":"go"}
{"task_id":"MBGP\/19","completion":"    var count int\n    for _, v := range arraynums {\n        count = 0\n        for _, w := range arraynums {\n            if v == w {\n                count += 1\n            }\n        }\n        if count > 1 {\n            return true\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/25","completion":"    var prod int\n    prod = 1\n    for _, v := range arr {\n        if v != arr[0] {\n            prod *= v\n        }\n    }\n    return prod\n}","language":"go"}
{"task_id":"MBGP\/41","completion":"    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    var filtered []int\n    for _, v := range nums {\n        if v % 2 == 0 {\n            filtered = append(filtered, v)\n        }\n    }\n    return filtered\n}","language":"go"}
{"task_id":"MBGP\/90","completion":"    var max_len int\n    for _, v := range list1 {\n        if len(v) > max_len {\n            max_len = len(v)\n        }\n    }\n    return max_len\n}","language":"go"}
{"task_id":"MBGP\/97","completion":"    count := make(map[int]int,0)\n    for _, v := range list1 {\n        for _, w := range v {\n            count[w] += 1\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/109","completion":"    var count int\n    for _, v := range s {\n        if v % 2 == 1 {\n            count += 1\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/113","completion":"    if len(text) == 0 {\n        return false\n    }\n    for _, c := range text {\n        if c < '0' || c > '9' {\n            return false\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBGP\/132","completion":"    s := \"\"\n    for _, v := range tup1 {\n        s += v\n    }\n    return s\n}","language":"go"}
{"task_id":"MBGP\/134","completion":"    var count int\n    for _, v := range arr {\n        count += 1\n        if v % p == 0 {\n            if count % 2 == 0 {\n                return \"EVEN\"\n            } else {\n                return \"ODD\"\n            }\n        }\n    }\n    return \"ODD\"\n}","language":"go"}
{"task_id":"MBGP\/285","completion":"    if len(text) < 3 {\n        return \"Not matched!\"\n    }\n    if text[0] == 'a' && text[1] == 'b' && text[2] == 'b' {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}","language":"go"}
{"task_id":"MBGP\/303","completion":"    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    var count bool\n    for _, v := range a {\n        if v > 0 {\n            count = true\n        } else {\n            count = false\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/323","completion":"    var new_arr []int\n    for _, v := range arr {\n        if v < 0 {\n            new_arr = append(new_arr, v)\n        } else {\n            new_arr = append(new_arr, v)\n        }\n    }\n    return new_arr\n}","language":"go"}
{"task_id":"MBGP\/357","completion":"    max := 0\n    for _, v := range test_list {\n        if v[1] > max {\n            max = v[1]\n        }\n    }\n    return max\n}","language":"go"}
{"task_id":"MBGP\/426","completion":"    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    var odd_numbers []int\n    for _, v := range nums {\n        if v % 2 == 1 {\n            odd_numbers = append(odd_numbers, v)\n        }\n    }\n    return odd_numbers\n}","language":"go"}
{"task_id":"MBGP\/446","completion":"    var count int\n    for _, v := range tup {\n        for _, w := range lst {\n            if v == w {\n                count += 1\n            }\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/463","completion":"    max_product := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            product := 1\n            for k := i; k <= j; k++ {\n                product *= arr[k]\n            }\n            if product > max_product {\n                max_product = product\n            }\n        }\n    }\n    return max_product\n}","language":"go"}
{"task_id":"MBGP\/481","completion":"    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    if sum == 0 {\n        return true\n    }\n    if n == 0 {\n        return false\n    }\n    if sum < 0 {\n        return false\n    }\n    if n < 0 {\n        return false\n    }\n    if set[n - 1] > sum {\n        return is_subset_sum(set, n - 1, sum)\n    }\n    return is_subset_sum(set, n - 1, sum) || is_subset_sum(set, n - 1, sum - set[n - 1])\n}","language":"go"}
{"task_id":"MBGP\/517","completion":"    var max int\n    for _, v := range list1 {\n        if v > 0 {\n            max = v\n        }\n    }\n    return max\n}","language":"go"}
{"task_id":"MBGP\/562","completion":"    var max_len int\n    max_len = 0\n    for _, v := range lst {\n        if len(v) > max_len {\n            max_len = len(v)\n        }\n    }\n    return max_len\n}","language":"go"}
{"task_id":"MBGP\/576","completion":"    if n > m {\n        return false\n    }\n    for _, v := range A {\n        if v >= m {\n            return false\n        }\n    }\n    for _, v := range B {\n        if v >= n {\n            return false\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBGP\/611","completion":"    var max int\n    for _, v := range test_list {\n        if max < v[N] {\n            max = v[N]\n        }\n    }\n    return max\n}","language":"go"}
{"task_id":"MBGP\/629","completion":"    var even_list []int\n    for _, v := range list {\n        if v % 2 == 0 {\n            even_list = append(even_list, v)\n        }\n    }\n    return even_list\n}","language":"go"}
{"task_id":"MBGP\/643","completion":"    match := 0\n    for _, v := range text {\n        if v == 'z' {\n            match += 1\n        }\n    }\n    if match == 1 {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"go"}
{"task_id":"MBGP\/648","completion":"    for i := 0; i < len(lst); i+=2 {\n        lst[i] = lst[i] + lst[i+1]\n        lst[i+1] = lst[i] - lst[i+1]\n        lst[i] = lst[i] - lst[i+1]\n    }\n    return lst\n}","language":"go"}
{"task_id":"MBGP\/680","completion":"    for _, v := range nums {\n        if v > nums[0] {\n            return true\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/681","completion":"    var i int\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return i\n}","language":"go"}
{"task_id":"MBGP\/711","completion":"    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    n = n + 1\n    return n % 2 == 0\n}","language":"go"}
{"task_id":"MBGP\/756","completion":"    match := 0\n    for _, v := range text {\n        if v == 'a' {\n            match += 1\n        }\n        if v == 'b' {\n            match = 0\n        }\n        if match == 1 {\n            return \"Found a match!\"\n        }\n    }\n    return \"Not matched!\"\n}","language":"go"}
{"task_id":"MBGP\/760","completion":"    unique := 0\n    for _, v := range arr {\n        if unique == 0 {\n            unique = v\n        }\n        if v != unique {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n}","language":"go"}
{"task_id":"MBGP\/764","completion":"    var count int\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            count += 1\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/787","completion":"    if len(text) < 3 {\n        return \"Not matched!\"\n    }\n    if text[0] == 'a' && text[1] == 'b' && text[2] == 'b' {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}","language":"go"}
{"task_id":"MBGP\/817","completion":"    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    var result []int\n    for _, v := range nums {\n        if (v % m == 0 || v % n == 0) {\n            result = append(result, v)\n        }\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/822","completion":"    if len(p) < 8 {\n        return false\n    }\n    if p[0] != 'P' {\n        return false\n    }\n    if p[1] != 'a' {\n        return false\n    }\n    if p[2] != 's' {\n        return false\n    }\n    if p[3] != 's' {\n        return false\n    }\n    if p[4] != 'w' {\n        return false\n    }\n    if p[5] != 'o' {\n        return false\n    }\n    if p[6] != 'r' {\n        return false\n    }\n    if p[7] != 'd' {\n        return false\n    }\n    return true\n}","language":"go"}
{"task_id":"MBGP\/869","completion":"    var newlist [][]int\n    for _, v := range list1 {\n        if (v[0] >= leftrange && v[0] <= rigthrange) {\n            newlist = append(newlist, v)\n        }\n    }\n    return newlist\n}","language":"go"}
{"task_id":"MBGP\/870","completion":"    var sum int\n    for _, v := range nums {\n        if v > 0 {\n            sum += v\n        }\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBGP\/900","completion":"    if len(string0) < 5 {\n        return false\n    }\n    if string0[0] == '5' {\n        return true\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/913","completion":"    var num []int\n    for _, v := range string0 {\n        if v == '7' {\n            return true\n        }\n        num = append(num, int(v))\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/918","completion":"    if m == 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if S[m - 1] > n {\n        return coin_change(S, m - 1, n)\n    }\n    return coin_change(S, m, n - S[m - 1]) + coin_change(S, m - 1, n)\n}","language":"go"}
{"task_id":"MBGP\/967","completion":"    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    if (string0 == \"SEEquoiaL\") {\n        return \"accepted\"\n    } else {\n        return \"not accepted\"\n    }\n}","language":"go"}
{"task_id":"MBGP\/23","completion":"    var maxSum int\n    for _, v := range list1 {\n        if len(v) > 0 {\n            \/\/ compute sum of all elements\n            sum := 0\n            for _, w := range v {\n                sum += w\n            }\n            if maxSum < sum {\n                maxSum = sum\n            }\n        }\n    }\n    return maxSum\n}","language":"go"}
{"task_id":"MBGP\/26","completion":"    for _, t := range test_list {\n        for _, v := range t {\n            if v != K {\n                return false\n            }\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBGP\/35","completion":"    var d int\n    d = n * (n + 1)\n    return d\n}","language":"go"}
{"task_id":"MBGP\/46","completion":"    for i, v := range data {\n        if i > 0 {\n            if v == data[i - 1] {\n                return false\n            }\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBGP\/68","completion":"    var is_monotonic bool\n    is_monotonic = true\n\n\/\/ --------------------- COMPLETION (model generated) ---------------------\n    for i := 1; i < len(A) - 1; i++ {\n        if A[i] > A[i - 1] && A[i] > A[i + 1] {\n            return false\n        }\n    }\n    return is_monotonic\n}","language":"go"}
{"task_id":"MBGP\/72","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    return n % 10 != 0\n}","language":"go"}
{"task_id":"MBGP\/95","completion":"    var min_length int\n    min_length = 999999\n    for _, v := range lst {\n        if len(v) < min_length {\n            min_length = len(v)\n        }\n    }\n    return min_length\n}","language":"go"}
{"task_id":"MBGP\/121","completion":"    for _, v := range A {\n        for _, w := range A {\n            for _, z := range A {\n                if (v + w + z) == sum {\n                    count += 1\n                    if count == n {\n                        return true\n                    }\n                }\n            }\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/170","completion":"    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    result := 0\n    for i := m; i <= n; i++ {\n        result += list1[i]\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/175","completion":"    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    count := 0\n    for _, char := range str1 {\n        if char == '(' {\n            count += 1\n        }\n        if char == ')' {\n            count -= 1\n        }\n        if count < 0 {\n            return false\n        }\n    }\n    if count == 0 {\n        return true\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/183","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var count int\n    for _, v := range arr {\n        for _, w := range arr {\n            if v - w == k {\n                count += 1\n            }\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/196","completion":"    var result [][]int\n    for _, v := range test_list {\n        if len(v) != K {\n            result = append(result, v)\n        }\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/231","completion":"    max_sum := 0\n    for _, row := range tri {\n        for _, num := range row {\n            if num > max_sum {\n                max_sum = num\n            }\n        }\n    }\n    return max_sum\n}","language":"go"}
{"task_id":"MBGP\/240","completion":"    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    if len(list1) > len(list2) {\n        return list1\n    }\n    if len(list1) == len(list2) {\n        for i := 0; i < len(list1); i++ {\n            list1[i] = list2[i]\n        }\n        return list1\n    }\n    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    return list1\n}","language":"go"}
{"task_id":"MBGP\/251","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var result []string\n    for _, v := range list {\n        result = append(result, element)\n        result = append(result, v)\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/263","completion":"    result := make(map[string]int, 0)\n    for k, v := range d1 {\n        result[k] = v\n    }\n    for k, v := range d2 {\n        result[k] = v\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/270","completion":"    var sum int\n    for i, v := range arr {\n        if i % 2 == 0 {\n            if v % 2 == 0 {\n                sum += v\n            }\n        }\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBGP\/281","completion":"    var result bool\n    for _, i := range test_list {\n        result = result || test_list[i + 1] != i\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/300","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    \/\/ if n = 1 return 2\n    \/\/ if n = 2 return 6\n    \/\/ if n = 3 return 20\n    \/\/ if n = 4 return 24\n    \/\/ if n = 5 return 24\n    var count float64\n    if n == 1 {\n        count = 2.0\n    } else if n == 2 {\n        count = 6.0\n    } else if n == 3 {\n        count = 20.0\n    } else if n == 4 {\n        count = 24.0\n    } else if n == 5 {\n        count = 24.0\n    } else {\n        count = 0.0\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/336","completion":"    if monthname1 == \"February\" {\n        return true\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/409","completion":"    res := 1000000\n    for _, v := range list1 {\n        if res > v[0] * v[1] {\n            res = v[0] * v[1]\n        }\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/412","completion":"    result := make([]int,0)\n    for _, i := range l {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/413","completion":"    var elements []interface{}\n    for _, e := range list1 {\n        elements = append(elements,e[n])\n    }\n    return elements\n}","language":"go"}
{"task_id":"MBGP\/414","completion":"    for _, v := range list1 {\n        for _, w := range list2 {\n            if v == w {\n                return 1\n            }\n        }\n    }\n    return 0\n}","language":"go"}
{"task_id":"MBGP\/434","completion":"    var pos int\n    for _, ch := range text {\n        pos += 1\n        if ch == 'a' && text[pos] == 'b' {\n            return \"Found a match!\"\n        }\n        if ch == 'b' {\n            pos += 1\n        }\n    }\n    return \"Not matched!\"\n}","language":"go"}
{"task_id":"MBGP\/450","completion":"    var result []string\n    for _, v := range str {\n        if len(v) == l {\n            result = append(result, v)\n        }\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/467","completion":"    return (deciNum \/ 8) * 10 + (deciNum % 8)\n}","language":"go"}
{"task_id":"MBGP\/471","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    if lens == 1 {\n        return arr[0]\n    }\n    return (find_remainder(arr[1 : lens], lens - 1, n) * arr[0]) % n\n}","language":"go"}
{"task_id":"MBGP\/472","completion":"    prev := 0\n    for _, v := range l {\n        if (v - prev) != 1 {\n            return false\n        }\n        prev = v\n    }\n    return true\n}","language":"go"}
{"task_id":"MBGP\/492","completion":"    if len(item_list) < 1 {\n        return false\n    }\n    mid := len(item_list) \/ 2\n    if item_list[mid] == item {\n        return true\n    } else if item_list[mid] > item {\n        return binary_search(item_list[0 : mid], item)\n    } else {\n        return binary_search(item_list[mid + 1 : len(item_list)], item)\n    }\n}","language":"go"}
{"task_id":"MBGP\/581","completion":"    sqr := b*b\n    sqr += 2*(b*s)\n    return sqr\n}","language":"go"}
{"task_id":"MBGP\/589","completion":"    square_nums := []int{0}\n    for i := 0; i <= b - a; i++ {\n        square_nums = append(square_nums, (i*i))\n    }\n\n\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var count []int\n    for _, v := range square_nums {\n        if a <= v && v <= b {\n            count = append(count, v)\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/591","completion":"    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    return newList\n}","language":"go"}
{"task_id":"MBGP\/627","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    res := start\n    for _, v := range array {\n        if v != res {\n            return res\n        }\n        res += 1\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/645","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    product := 1\n    for _, t := range test_list {\n        product *= t[K]\n    }\n    return product\n}","language":"go"}
{"task_id":"MBGP\/649","completion":"    if m == n {\n        return nums[m]\n    } else {\n        return nums[m] + sum_Range_list(nums, m + 1, n)\n    }\n}","language":"go"}
{"task_id":"MBGP\/664","completion":"    var count  int\n    count = 0\n    for i := 0; i <= n; i += 2 {\n        count += 1\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/667","completion":"    var count int\n\n    for _, v := range string0 {\n        for _, w := range vowels {\n            if v == w {\n                count += 1\n            }\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/691","completion":"    group_map := make(map[int][]int, 0)\n    for _, e := range test_list {\n        group_map[e[1]] = append(group_map[e[1]], e[0])\n    }\n    return group_map\n}","language":"go"}
{"task_id":"MBGP\/766","completion":"    \/\/ --------------------- COMPLETION (model generated) ---------------------\n    var res [][]int\n    for i := 0; i < len(l1) - 1; i++ {\n        res = append(res, []int{l1[i], l1[i + 1]})\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/767","completion":"    count := 0\n    for i := 0; i < n-1; i++ {\n        for j := i + 1; j < n; j++ {\n            if (arr[i] + arr[j] == sum) {\n                count += 1\n            }\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/771","completion":"    count := 0\n    for _, v := range exp {\n        if (v == '{' || v == '(' || v == '[') {\n            count += 1\n        } else if (v == '}' || v == ')' || v == ']') {\n            count -= 1\n        }\n        if (count < 0) {\n            return false\n        }\n    }\n    if (count == 0) {\n        return true\n    } else {\n        return false\n    }\n}","language":"go"}
{"task_id":"MBGP\/777","completion":"\/\/ --------------------- COMPLETION (model generated) ---------------------\n    var result int\n    var prev int\n    for _, v := range arr {\n        if v != prev {\n            result += v\n        }\n        prev = v\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/805","completion":"    max_sum := 0\n    best_list := make([]int, 0)\n\n\/\/ --------------------- COMPLETION (model generated) ---------------------\n    for _, list := range lists {\n        for _, val := range list {\n            if max_sum < val {\n                max_sum = val\n                best_list = list\n            }\n        }\n    }\n    return best_list\n}","language":"go"}
{"task_id":"MBGP\/809","completion":"    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] >= test_tup2[i] {\n            return true\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/818","completion":"    var cnt int\n    for _, v := range str {\n        if v < 'A' || v > 'Z' {\n            cnt += 1\n        }\n    }\n    return cnt\n}","language":"go"}
{"task_id":"MBGP\/824","completion":"    count := 0\n    for _, v := range l {\n        if v % 2 == 0 {\n            l[count] = v\n            count += 1\n        }\n    }\n    return l\n}","language":"go"}
{"task_id":"MBGP\/866","completion":"    if (monthname2 == \"February\") {\n        return false\n    }\n    if (monthname2 == \"January\") {\n        return true\n    }\n    if (monthname2 == \"March\") {\n        return true\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/878","completion":"    var k_count bool\n    for _, e := range K {\n        k_count = false\n        for _, t := range test_tuple {\n            if t == e {\n                k_count = true\n                break\n            }\n        }\n        if !k_count {\n            return false\n        }\n    }\n    return k_count\n}","language":"go"}
{"task_id":"MBGP\/960","completion":"    if n <= 1 {\n        return n\n    }\n    return get_noOfways(n-2) + get_noOfways(n-1)\n}","language":"go"}
{"task_id":"MBGP\/5","completion":"\tA := make([]int, n+1)\n\tB := make([]int, n+1)\n\tA[0] = 1\n\tA[1] = 0\n\tB[0] = 0\n\tB[1] = 1\n\tfor i := 2; i <= n; i++ {\n\t\tA[i] = A[i - 2] + 2 * B[i - 1]\n\t\tB[i] = A[i - 1] + B[i - 2]\n\t}\n\treturn A[n]\n}","language":"go"}
{"task_id":"MBGP\/6","completion":"    return a ^ b == 0 || (a ^ b) & (a ^ b - 1) == 0\n}","language":"go"}
{"task_id":"MBGP\/42","completion":"    sum := 0\n    for _, i := range arr {\n        if i == arr[0] {\n            sum += i\n        }\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBGP\/59","completion":"\treturn 3 * n * n - 2 * n\n}","language":"go"}
{"task_id":"MBGP\/77","completion":"    return (n % 11 == 0)\n}","language":"go"}
{"task_id":"MBGP\/84","completion":"\tif n == 1 || n == 2 {\n\t\treturn 1\n\t} else {\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n\t}\n}","language":"go"}
{"task_id":"MBGP\/86","completion":"  \/\/ Go\/Golang\n  return 3 * n * (n - 1) + 1\n}","language":"go"}
{"task_id":"MBGP\/89","completion":"  if (N - 1 < 0) {\n    return N\n  }\n  return N - 1\n}","language":"go"}
{"task_id":"MBGP\/92","completion":"\tif len(n) <= 2 {\n\t\treturn false\n\t}\n\tfor i := 2; i < len(n); i++ {\n\t\tif n[i - 2] != n[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}","language":"go"}
{"task_id":"MBGP\/110","completion":"  res := make([][]int, 0)\n  for i := 0; i < len(test_list); i++ {\n    if test_list[i][0] > strt_val {\n      res = append(res, []int{strt_val, test_list[i][0]})\n      strt_val = test_list[i][1]\n    }\n    if strt_val < stop_val {\n      res = append(res, []int{strt_val, stop_val})\n    }\n  }\n  return res\n}","language":"go"}
{"task_id":"MBGP\/144","completion":"    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i*arr[i] - (n-1-i) * arr[i]\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBGP\/147","completion":"\tfor i := m-1; i >= 0; i-- {\n\t\tfor j := i+1; j < n; j++ {\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]) {\n\t\t\t\ttri[i][j] += tri[i+1][j]\n\t\t\t} else {\n\t\t\t\ttri[i][j] += tri[i+1][j+1]\n\t\t\t}\n\t\t}\n\t}\n\treturn tri[0][0]\n}","language":"go"}
{"task_id":"MBGP\/159","completion":"\tif month == \"January\" || month == \"February\" || month == \"March\" {\n\t\treturn \"winter\"\n\t}\n\tif month == \"April\" || month == \"May\" || month == \"June\" {\n\t\treturn \"spring\"\n\t}\n\tif month == \"July\" || month == \"August\" || month == \"September\" {\n\t\treturn \"summer\"\n\t}\n\tif month == \"October\" || month == \"November\" || month == \"December\" {\n\t\treturn \"autumn\"\n\t}\n\treturn \"Invalid month\"\n}","language":"go"}
{"task_id":"MBGP\/177","completion":"    if (2 * L <= R) {\n        return []int{L, 2*L}\n    } else {\n        return []int{-1}\n    }\n}","language":"go"}
{"task_id":"MBGP\/190","completion":"    \/\/ Go\/Golang code here\n    return ((y2 - y1 - 1) * (x2 - x1 - 1))\n}","language":"go"}
{"task_id":"MBGP\/238","completion":"\tstr_len := len(str)\n\treturn int(str_len * (str_len + 1) \/ 2)\n}","language":"go"}
{"task_id":"MBGP\/260","completion":"\tif n == 0 || n == 1 {\n\t\treturn 1\n\t}\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\n}","language":"go"}
{"task_id":"MBGP\/266","completion":"  LSA := 4 * (l * l)\n  return LSA\n}","language":"go"}
{"task_id":"MBGP\/267","completion":"    return n*(4*n*n-1)\/3\n}","language":"go"}
{"task_id":"MBGP\/268","completion":"\treturn (6 * n * (n - 1) + 1)\n}","language":"go"}
{"task_id":"MBGP\/279","completion":"\treturn 4 * n * n - 3 * n\n}","language":"go"}
{"task_id":"MBGP\/287","completion":"    return int(2*n*(n+1)*(2*n+1)\/3)\n}","language":"go"}
{"task_id":"MBGP\/339","completion":"    if (x == y) {\n        return y\n    }\n    return 2\n}","language":"go"}
{"task_id":"MBGP\/345","completion":"    result := make([]int, len(nums)-1)\n    for i := 0; i < len(nums)-1; i++ {\n        result[i] = nums[i+1] - nums[i]\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/346","completion":"\tif (n == 0 && k == 0) {\n\t\treturn 1\n\t}\n\tif (k == 0) {\n\t\treturn 0\n\t}\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)\n}","language":"go"}
{"task_id":"MBGP\/352","completion":"    for i := 0; i < len(str); i++ {\n        for j := i + 1; j < len(str); j++ {\n            if (str[i] == str[j]) {\n                return false\n            }\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBGP\/359","completion":"    if (2*b*b == 9*a*c) {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }\n}","language":"go"}
{"task_id":"MBGP\/369","completion":"  LSA := 2*h*(l+w)\n  return LSA\n}","language":"go"}
{"task_id":"MBGP\/380","completion":"  var multi_list [][]int\n  for row := 0; row < rownum; row++ {\n    multi_list = append(multi_list, make([]int, colnum))\n    for col := 0; col < colnum; col++ {\n      multi_list[row][col] = row * col\n    }\n  }\n  return multi_list\n}","language":"go"}
{"task_id":"MBGP\/385","completion":"  if (n == 0) {\n    return 3\n  }\n  if (n == 1) {\n    return 0\n  }\n  if (n == 2) {\n    return 2\n  }\n  return get_perrin(n - 2) + get_perrin(n - 3)\n}","language":"go"}
{"task_id":"MBGP\/386","completion":"\tchars := s\n\tcount_left := 0\n\tcount_right := 0\n\tswap := 0\n\timbalance := 0\n\tfor i := 0; i < len(chars); i++ {\n\t\tif chars[i] == '[' {\n\t\t\tcount_left += 1\n\t\t\tif imbalance > 0 {\n\t\t\t\tswap += imbalance\n\t\t\t\timbalance -= 1\n\t\t\t}\n\t\t} else if chars[i] == ']' {\n\t\t\tcount_right += 1\n\t\t\timbalance = (count_right - count_left)\n\t\t}\n\t}\n\treturn swap\n}","language":"go"}
{"task_id":"MBGP\/389","completion":"\tif (n == 0) {\n\t\treturn 2\n\t}\n\tif (n == 1) {\n\t\treturn 1\n\t}\n\treturn find_lucas(n - 1) + find_lucas(n - 2)\n}","language":"go"}
{"task_id":"MBGP\/415","completion":"    arr_len := len(arr)\n    if (arr_len < 2) {\n        return []int{-1,-1}\n    }\n    x := arr[0]\n    y := arr[1]\n    for i := 0; i < arr_len; i++ {\n        for j := i + 1; j < arr_len; j++ {\n            if (arr[i] * arr[j] > x * y) {\n                x = arr[i]\n                y = arr[j]\n            }\n        }\n    }\n    return []int{x,y}\n}","language":"go"}
{"task_id":"MBGP\/430","completion":"  directrix := (c - ((b * b) + 1) * 4 * a)\n  return directrix\n}","language":"go"}
{"task_id":"MBGP\/513","completion":"  res := make([]interface{} , 0)\n  for _, elem := range test_tup {\n    res = append(res, elem)\n    res = append(res, K)\n  }\n  return res\n}","language":"go"}
{"task_id":"MBGP\/527","completion":"    var count int\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/555","completion":"    S := (n*(n+1))\/2;\n    res := S*(S-1);\n    return res;\n}","language":"go"}
{"task_id":"MBGP\/556","completion":"    oddPair := 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if ((A[i] ^ A[j]) % 2 != 0) {\n                oddPair += 1\n            }\n        }\n    }\n    return oddPair\n}","language":"go"}
{"task_id":"MBGP\/641","completion":"\treturn n * (7 * n - 5) \/ 2\n}","language":"go"}
{"task_id":"MBGP\/677","completion":"  total := a + b + c\n  if total == 180 {\n    return true\n  } else {\n    return false\n  }\n}","language":"go"}
{"task_id":"MBGP\/695","completion":"  res := true\n  for i := 0; i < len(test_tup1); i++ {\n    if test_tup1[i] > test_tup2[i] {\n      res = false\n    }\n  }\n  return res\n}","language":"go"}
{"task_id":"MBGP\/740","completion":"  res := make(map[int]int, 0)\n  for idx := 0; idx < len(test_tup); idx+=2 {\n    res[test_tup[idx]] = test_tup[idx+1]\n  }\n  return res\n}","language":"go"}
{"task_id":"MBGP\/752","completion":"\tdp := make([]int, n+1)\n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i := 2; i < n+1; i++ {\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]\n\t}\n\treturn dp[n]\n}","language":"go"}
{"task_id":"MBGP\/762","completion":"    if monthnum3 == 4 || monthnum3 == 6 || monthnum3 == 9 || monthnum3 == 11 {\n        return true\n    } else {\n        return false\n    }\n}","language":"go"}
{"task_id":"MBGP\/836","completion":"\tvar max_so_far int = 0\n\tvar max_ending_here int = 0\n\tvar start int = 0\n\tvar end int = 0\n\tvar s int = 0\n\tfor i := 0; i < size; i++ {\n\t\tmax_ending_here += a[i]\n\t\tif max_so_far < max_ending_here {\n\t\t\tmax_so_far = max_ending_here\n\t\t\tstart = s\n\t\t\tend = i\n\t\t}\n\t\tif max_ending_here < 0 {\n\t\t\tmax_ending_here = 0\n\t\t\ts = i + 1\n\t\t}\n\t}\n\treturn end - start + 1\n}","language":"go"}
{"task_id":"MBGP\/837","completion":"    sum := 0\n    for i := 0; i < n; i++ {\n        sum += (2*i+1)*(2*i+1)*(2*i+1)\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBGP\/849","completion":"    SumOfPrimeDivisors := make([]int, N + 1)\n    for i := 2; i <= N; i++ {\n        if SumOfPrimeDivisors[i] == 0 {\n            for j := i; j <= N; j += i {\n                SumOfPrimeDivisors[j] += i\n            }\n        }\n    }\n    return SumOfPrimeDivisors[N]\n}","language":"go"}
{"task_id":"MBGP\/874","completion":"    N := len(str1)\n    M := len(str2)\n    if (N % M != 0) {\n        return false\n    }\n    for i := 0; i < N; i++ {\n        if (str1[i] != str2[i % M]) {\n            return false\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBGP\/884","completion":"    num := (1 << r) - 1 ^ (1 << (l - 1)) - 1\n    new_num := n & num\n    if (num == new_num) {\n        return true\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/908","completion":"\tfor i := 0; i < n; i++ {\n\t\tif arr[i] == i {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}","language":"go"}
{"task_id":"MBGP\/914","completion":"    for i := 0; i < len(s) - 2; i++ {\n        if (s[i] != s[i + 2]) {\n            return false\n        }\n    }\n    if (s[0] == s[1]) {\n        return false\n    }\n    return true\n}","language":"go"}
{"task_id":"MBGP\/947","completion":"    min := len(list1[0])\n    for _, i := range list1 {\n        if len(i) < min {\n            min = len(i)\n        }\n    }\n    return min\n}","language":"go"}
{"task_id":"MBGP\/9","completion":"    tmp := str + str\n    n := len(str)\n    for i := 1; i <= n; i++ {\n        substring := tmp[i: i+n]\n        if str == substring {\n            return i\n        }\n    }\n    return n\n}","language":"go"}
{"task_id":"MBGP\/21","completion":"    res := make([]int,m)\n    for i := 0; i < m; i++ {\n        res[i] = n\n    }\n    for i := 1; i < m; i++ {\n        res[i] = res[i-1] + n\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/103","completion":"\tif (m >= n || n == 0) {\n\t\treturn 0\n\t}\n\tif (m == 0) {\n\t\treturn 1\n\t}\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m))\n}","language":"go"}
{"task_id":"MBGP\/142","completion":"    var result int = 0\n    for idx := range list1 {\n        if list1[idx] == list2[idx] && list1[idx] == list3[idx] {\n            result += 1\n        }\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/166","completion":"    evenPair := 0\n    for  i := 0; i < N; i++ {\n        for  j := i + 1; j < N; j++ {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                evenPair += 1\n            }\n        }\n    }\n    return evenPair\n}","language":"go"}
{"task_id":"MBGP\/172","completion":"\tcount := 0\n\tfor i := 0; i < len(s); i++ {\n\t\tif s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n\t\t\tcount += 1\n\t\t}\n\t}\n\treturn count\n}","language":"go"}
{"task_id":"MBGP\/184","completion":"  var greater_specificnum bool\n  \/\/ iterate through the list and check if the number is greater than the specified number\n  for _, i := range list {\n    if i >= num {\n      greater_specificnum = true\n    } else {\n      greater_specificnum = false\n      break\n    }\n  }\n  return greater_specificnum\n}","language":"go"}
{"task_id":"MBGP\/203","completion":"    x := n1 ^ n2\n    bits := 0\n    for i := 0; i < 32; i++ {\n        bits += x & 1\n        x >>= 1\n    }\n    return bits\n}","language":"go"}
{"task_id":"MBGP\/236","completion":"    if (N < K) {\n        return -1;\n    } else {\n        Tri_up := 0;\n        Tri_up = (N - K + 1) * (N - K + 2) \/ 2;\n        Tri_down := 0;\n        Tri_down = (N - 2 * K + 1) * (N - 2 * K + 2) \/ 2;\n        return Tri_up + Tri_down;\n    }\n}","language":"go"}
{"task_id":"MBGP\/248","completion":"  if n < 2 {\n    return 1.0\n  } else {\n    return 1.0 \/ float64(n) + harmonic_sum(n - 1)\n  }\n}","language":"go"}
{"task_id":"MBGP\/271","completion":"\tsum := 0\n\tfor i := 0; i < n + 1; i++ {\n\t\tj := 2 * i\n\t\tsum = sum + (j * j * j * j * j)\n\t}\n\treturn sum\n}","language":"go"}
{"task_id":"MBGP\/286","completion":"\tvar max_so_far int = -2147483648\n\tvar max_ending_here int = 0\n\tfor i := 0; i < n*k; i++ {\n\t\tmax_ending_here += a[i % n]\n\t\tif (max_so_far < max_ending_here) {\n\t\t\tmax_so_far = max_ending_here\n\t\t}\n\t\tif (max_ending_here < 0) {\n\t\t\tmax_ending_here = 0\n\t\t}\n\t}\n\treturn max_so_far\n}","language":"go"}
{"task_id":"MBGP\/288","completion":"\tcurrent_element := 0\n\tfor i := 0; i < N; i++ {\n\t\tif (arr[i] * arr[i] % P == 1) {\n\t\t\tcurrent_element = current_element + 1\n\t\t}\n\t}\n\treturn current_element\n}","language":"go"}
{"task_id":"MBGP\/289","completion":"    hund1 := N \/ 100\n    hund4 := N \/ 400\n    leap := N >> 2\n    ordd := N - leap\n    if (hund1 > 0) {\n        ordd += hund1\n        leap -= hund1\n    }\n    if (hund4 > 0) {\n        ordd -= hund4\n        leap += hund4\n    }\n    days := ordd + leap * 2\n    odd := days % 7\n    return odd\n}","language":"go"}
{"task_id":"MBGP\/291","completion":"\tif n < 1 || k < 1 {\n\t\treturn 0\n\t}\n\tif n == 1 || k == 1 {\n\t\treturn k\n\t}\n\tif n == 2 {\n\t\treturn k * k\n\t}\n\n\treturn ((k-1)*(count_no_of_ways(n-1,k) + count_no_of_ways(n-2,k))) % 1000000007\n}","language":"go"}
{"task_id":"MBGP\/304","completion":"    \/\/ Rotations is number of rotations for each element.\n    \/\/ Index is index of array element.\n    \n    \/\/ Find the rotation to index.\n    for i := rotations - 1; i >= 0; i-- {\n        left := ranges[i][0]\n        right := ranges[i][1]\n        if left <= index && right >= index {\n            if index == left {\n                index = right\n            } else {\n                index = index - 1\n            }\n        }\n    }\n    return arr[index]\n}","language":"go"}
{"task_id":"MBGP\/347","completion":"    if (n < m) {\n        temp := m\n        m = n\n        n = temp\n    }\n    return n * (n + 1) * (3 * m - n + 1) \/ 6\n}","language":"go"}
{"task_id":"MBGP\/358","completion":"    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] % nums2[i]\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/363","completion":"    res := make([][]int, len(test_list))\n    for i, sub := range test_list {\n        res[i] = make([]int, len(sub))\n        for j, el := range sub {\n            res[i][j] = el + K\n        }\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/387","completion":"    l := len(N)\n    if (l == 1 || N[l-1] == '0' || N[l-1] == '2' || N[l-1] == '4' || N[l-1] == '6' || N[l-1] == '8' || N[l-1] == 'A' || N[l-1] == 'C' || N[l-1] == 'E') {\n        \/\/ Even\n        return \"Even\"\n    }\n    \/\/ Odd\n    return \"Odd\"\n}","language":"go"}
{"task_id":"MBGP\/397","completion":"    if a > b {\n        if a < c {\n            return a\n        } else if b > c {\n            return b\n        } else {\n            return c\n        }\n    } else {\n        if a > c {\n            return a\n        } else if b < c {\n            return b\n        } else {\n            return c\n        }\n    }\n}","language":"go"}
{"task_id":"MBGP\/420","completion":"    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += (2*i)*(2*i)*(2*i)\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBGP\/448","completion":"\ta := 3\n\tb := 0\n\tc := 2\n\tif n == 0 {\n\t\treturn 3\n\t}\n\tif n == 1 {\n\t\treturn 3\n\t}\n\tif n == 2 {\n\t\treturn 5\n\t}\n\tsum := 5\n\tfor i := 0; i < n - 2; i++ {\n\t\td := a + b\n\t\tsum = sum + d\n\t\ta = b\n\t\tb = c\n\t\tc = d\n\t}\n\treturn sum\n}","language":"go"}
{"task_id":"MBGP\/449","completion":"    a := (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \n    if a == 0 {\n        return \"No\"\n    } else {\n        return \"Yes\"\n    }\n}","language":"go"}
{"task_id":"MBGP\/461","completion":"    for i := range str {\n        if str[i] >= 'A' && str[i] <= 'Z' {\n            return 1\n        }\n    }\n    return 0\n}","language":"go"}
{"task_id":"MBGP\/466","completion":"\tvar mid int = low + (high - low) \/ 2\n\tmid = int(mid)\n\tif ((mid == 0 || arr[mid - 1] <= arr[mid]) &&\n\t\t(mid == n - 1 || arr[mid + 1] <= arr[mid])) {\n\t\treturn mid\n\t} else if (mid > 0 && arr[mid - 1] > arr[mid]) {\n\t\treturn find_peak(arr, low, (mid - 1), n)\n\t} else {\n\t\treturn find_peak(arr, (mid + 1), high, n)\n\t}\n}","language":"go"}
{"task_id":"MBGP\/470","completion":"  res := make([]int, len(test_tup) - 1)\n  for i := 0; i < len(test_tup) - 1; i++ {\n    res[i] = test_tup[i] + test_tup[i+1]\n  }\n  return res\n}","language":"go"}
{"task_id":"MBGP\/503","completion":"    \/\/ if 0, return\n    var res []int\n    for i := 0; i < len(nums)-1; i++ {\n        res = append(res, nums[i]+nums[i+1])\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/504","completion":"    result := 0\n    for i := 1; i <= n; i++ {\n        result += i * i*i\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/515","completion":"\tif (n > m) { return true }\n\tDP := make([]bool, m)\n\tfor i := 0; i < n; i++ {\n\t\tif (DP[0]) { return true }\n\t\ttemp := make([]bool, m)\n\t\tfor j := 0; j < m; j++ {\n\t\t\tif (DP[j]) {\n\t\t\t\tif (DP[(j + arr[i]) % m] == false) {\n\t\t\t\t\ttemp[(j + arr[i]) % m] = true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor j := 0; j < m; j++ {\n\t\t\tif (temp[j]) {\n\t\t\t\tDP[j] = true\n\t\t\t}\n\t\t}\n\t\tDP[arr[i] % m] = true\n\t}\n\treturn DP[0]\n}","language":"go"}
{"task_id":"MBGP\/529","completion":"\tdp := make([]int, n+1)\n\tdp[0] = 2\n\tdp[1] = 1\n\tfor i := 2; i <= n; i++ {\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]\n\t}\n\treturn dp[n]\n}","language":"go"}
{"task_id":"MBGP\/536","completion":"    var res []int\n    for i, _ := range list {\n        if i % n == 0 {\n            res = append(res, list[i])\n        }\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/549","completion":"    \/\/ return sum of the fifth power of first n odd natural numbers\n    \/\/ e.g:\n    \/\/ 1 => 1 => 1 => 1 => 1 => 1 => 1 => 1 => 1\n    \/\/ 2 => 4 => 16 => 64 => 256 => 1024 => 4096 => 16384 => 65536\n    \/\/ 3 => 9 => 81 => 625 => 3125 => 15625 => 78125 => 390625 => 1953125 => 9765625\n    var sm = 0\n    var j = 0\n    for i := 1; i <= n; i++ {\n        j = (2*i-1)\n        sm += (j*j*j*j*j)\n    }\n    return sm\n}","language":"go"}
{"task_id":"MBGP\/583","completion":"    if num <=1 {\n        return 1\n    }\n    var res_num int = 0\n    for i := 0; i < num; i++ {\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    }\n    return res_num\n}","language":"go"}
{"task_id":"MBGP\/595","completion":"    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    if count % 2 == 0 {\n        return count \/ 2\n    } else {\n        return \"Not Possible\"\n    }\n}","language":"go"}
{"task_id":"MBGP\/634","completion":"    sum := 0;\n    for  i := 0; i < n + 1; i++ {\n        j := 2*i;\n        sum = sum + (j * j * j * j);\n    }\n    return sum;\n}","language":"go"}
{"task_id":"MBGP\/683","completion":"    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i+j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/690","completion":"    result := make([]int, len(nums) - 1)\n    for i := 0; i < len(nums) - 1; i++ {\n        result[i] = nums[i] * nums[i + 1]\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/699","completion":"    \/\/ Write your code here.\n    var count int = 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    if count % 2 == 0 {\n        return count \/ 2\n    }\n    return \"Not Possible\"\n}","language":"go"}
{"task_id":"MBGP\/701","completion":"  total_sum := 0\n  \/\/ Go through the array, sum the elements\n  for i := 0; i < len(arr); i++ {\n    total_sum += arr[i]\n  }\n  \/\/ Go through the array and compare the sum with the left sum\n  left_sum := 0\n  for i := 0; i < len(arr); i++ {\n    total_sum -= arr[i]\n    if left_sum == total_sum {\n      return i\n    }\n    left_sum += arr[i]\n  }\n  \/\/ No equilibrium index found\n  return -1\n}","language":"go"}
{"task_id":"MBGP\/718","completion":"    result := make([]interface{},0)\n    for i := 0; i < len(list1); i+=2 {\n        result = append(result,list1[i])\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/726","completion":"    res := make([]int, len(test_tup) - 1)\n    for i := 0; i < len(test_tup) - 1; i++ {\n        res[i] = test_tup[i] * test_tup[i + 1]\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/782","completion":"    Sum := 0\n    l := len(arr)\n    for i := 0; i < l; i++ {\n        Sum += ((((i+1)*(l-i)+1)\/2)*arr[i])\n    }\n    return Sum\n}","language":"go"}
{"task_id":"MBGP\/796","completion":"    sum := 0\n    for _, v := range dict {\n        sum += v\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBGP\/803","completion":"    for i := 1; i * i <= n; i++ {\n        if (n % i == 0 && n \/ i == i) {\n            return true\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/811","completion":"  for i := 0; i < len(test_list1); i++ {\n    for j := 0; j < len(test_list2); j++ {\n      if (test_list1[i][0] == test_list2[j][0]) {\n        return true\n      }\n      if (test_list1[i][1] == test_list2[j][1]) {\n        return true\n      }\n    }\n  }\n  return false\n}","language":"go"}
{"task_id":"MBGP\/821","completion":"    merged_dict := map[string]string{}\n    for key, value := range dict1 {\n        merged_dict[key] = value\n    }\n    for key, value := range dict2 {\n        merged_dict[key] = value\n    }\n    return merged_dict\n}","language":"go"}
{"task_id":"MBGP\/858","completion":"    return len(input_list) * len(input_list)\n}","language":"go"}
{"task_id":"MBGP\/865","completion":"    ret := make([]int, len(nums))\n    for i := 0; i < len(nums); i++ {\n        ret[i] = n * nums[i]\n    }\n    return ret\n}","language":"go"}
{"task_id":"MBGP\/881","completion":"    \/\/ Go\/Golang code here\n    \n    first_even := -1\n    first_odd := -1\n    for _, el := range list1 {\n        if el % 2 == 0 {\n            first_even = el\n            break\n        }\n    }\n    \n    for _, el := range list1 {\n        if el % 2 != 0 {\n            first_odd = el\n            break\n        }\n    }\n    return first_even + first_odd\n}","language":"go"}
{"task_id":"MBGP\/934","completion":"\tif (m == 0 || n == 0) {\n\t\treturn 1\n\t}\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)\n}","language":"go"}
{"task_id":"MBGP\/1","completion":"    if m == 0 || n == 0 {\n        return 0\n    }\n    if cost[m][n] == 0 {\n        return Infinity\n    }\n    return min(min_cost(cost, m - 1, n) + cost[m][n], min_cost(cost, m, n - 1) + cost[m][n])\n}","language":"go"}
{"task_id":"MBGP\/2","completion":"    var res []int\n    for _, v1 in ipairs(test_tup1) {\n        for _, v2 in ipairs(test_tup2) {\n            if v1 == v2 {\n                res.append(v1)\n            }\n        }\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/3","completion":"\tfor _, i := range n {\n\t\tif n % i == 0 {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}","language":"go"}
{"task_id":"MBGP\/7","completion":"    \/\/ split the string into words\n    words := text.Split(' ')\n    \/\/ iterate over the words\n    for word := words {\n        \/\/ if the word is at least 4 characters long\n        if len(word) >= 4 {\n            \/\/ return the word\n            \/\/ (the word is a string, so we need to convert it to a list)\n            \/\/ (the word is a list, so we need to convert it to a string)\n            \/\/ (the word is a string, so we need to convert it to a list)\n            \/\/ (the word is a list, so we need to convert it to a string)\n            \/\/ (the word is a string, so we need to convert it to a list)\n            \/\/ (the word is a list, so we need to convert it to a string)\n            \/\/ (the word is a string, so we need to convert it to a list)\n            \/\/ (the word is a list, so we need to convert it to a string)\n            \/\/ (the word is a","language":"go"}
{"task_id":"MBGP\/11","completion":"    \/\/ Go\/Golang solution goes here\n    return s.Remove(ch, 0, s.Length - 1)\n}","language":"go"}
{"task_id":"MBGP\/12","completion":"\tfor i, row := range M {\n\t\tfor j, cell := range row {\n\t\t\tcell += i\n\t\t}\n\t}\n\tsort(M)\n}","language":"go"}
{"task_id":"MBGP\/13","completion":"    \/\/ Count the number of times each word appears in the dictionary.\n    \/\/ Return a list of tuples, each containing a word and the number of times it appears.\n    \/\/ If the word appears more than once, return a list of tuples with the word and the number of times it appears.\n    \/\/ If the word appears only once, return a list of one tuple with the word and the number of times it appears.\n    \/\/ Return an empty list if the dictionary is empty.\n    \/\/ Hint: Use a hash table.\n    \/\/ Hint: Use a hash table.\n    \/\/ Hint: Use a hash table.\n    \/\/ Hint: Use a hash table.\n    \/\/ Hint: Use a hash table.\n    \/\/ Hint: Use a hash table.\n    \/\/ Hint: Use a hash table.\n    \/\/ Hint: Use a hash table.\n    \/\/ Hint: Use a hash table.\n    \/\/ Hint: Use a hash table.\n    \/\/ Hint: Use a hash table.\n    \/\/ Hint: Use a hash table.\n    \/\/ H","language":"go"}
{"task_id":"MBGP\/14","completion":"    return (l*b*h)\/3.0\n}","language":"go"}
{"task_id":"MBGP\/15","completion":"    \/\/ split the string at lowercase letters\n    \/\/ return an array of strings\n    \/\/ return nil if the string is empty\n    \/\/ return nil if the string is nil\n    \/\/ return nil if the string is nil\n    \/\/ return nil if the string is nil\n    \/\/ return nil if the string is nil\n    \/\/ return nil if the string is nil\n    \/\/ return nil if the string is nil\n    \/\/ return nil if the string is nil\n    \/\/ return nil if the string is nil\n    \/\/ return nil if the string is nil\n    \/\/ return nil if the string is nil\n    \/\/ return nil if the string is nil\n    \/\/ return nil if the string is nil\n    \/\/ return nil if the string is nil\n    \/\/ return nil if the string is nil\n    \/\/ return nil if the string is nil\n    \/\/ return nil if the string is nil\n    \/\/ return nil if the string is nil\n    \/\/ return nil if the string is nil\n    \/\/ return nil if the string is nil\n    \/\/ return nil if the string is nil\n    \/\/ return nil if","language":"go"}
{"task_id":"MBGP\/16","completion":"    match := \"\"\n    for i := 0; i < len(text); i++ {\n        if text[i] == text[i].tolower {\n            match += text[i]\n        } else {\n            if match != \"\" {\n                return \"Not matched!\"\n            }\n        }\n    }\n    return \"Found a match!\"\n}","language":"go"}
{"task_id":"MBGP\/18","completion":"    \/\/ Your code here\n}","language":"go"}
{"task_id":"MBGP\/24","completion":"    var decimal int = 0\n    for i := 0; i < binary.length; i++ {\n        if binary[i] == '1' {\n            decimal = decimal + pow(2, binary.length - i - 1)\n        }\n    }\n    return decimal\n}","language":"go"}
{"task_id":"MBGP\/27","completion":"    for _, v := range list {\n        v.replace(\/[0-9]\/g, \"\")\n    }\n    return list\n}","language":"go"}
{"task_id":"MBGP\/32","completion":"\tvar maxPrimeFactor []int\n\tvar maxPrimeFactorIndex int\n\tvar i int\n\tvar j int\n\tvar k int\n\tmaxPrimeFactor = []int{2}\n\tmaxPrimeFactorIndex = 0\n\tfor i := 2; i < n; i++ {\n\t\tfor j := 2; j < i; j++ {\n\t\t\tif (i % j == 0) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif (j == i) {\n\t\t\tmaxPrimeFactor[maxPrimeFactorIndex] = i\n\t\t\tmaxPrimeFactorIndex++\n\t\t}\n\t}\n\tmaxPrimeFactorIndex = 0\n\tfor k := 0; k < maxPrimeFactor.len(); k++ {\n\t\tif (maxPrimeFactor[k] > n) {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn maxPrimeFactor[k]\n}","language":"go"}
{"task_id":"MBGP\/34","completion":"\tvar i int\n\tvar j int\n\tvar missing int\n\tvar mid int\n\tvar mid_index int\n\tvar mid_value int\n\tvar mid_index_value int\n\tvar missing_index int\n\tvar missing_value int\n\tvar missing_index_value int\n\tvar missing_index_value_value int\n\tvar missing_index_value_value_index int\n\tvar missing_index_value_value_index_value int\n\tvar missing_index_value_value_index_value_index int\n\tvar missing_index_value_value_index_value_index_value int\n\tvar missing_index_value_value_index_value_index_value_index int\n\tvar missing_index_value_value_index_value_index_value_index_value int\n\tvar missing_index_value_value_index_value_index_value_index_value_index int\n\tvar missing_index_value_value_index_value_index_value_index_value_index_value int\n\tvar missing_index_value_value_index_value_index_value_index","language":"go"}
{"task_id":"MBGP\/36","completion":"    \/\/ Find the proper fraction of p and q\n    p = p \/ q\n    \/\/ Find the remainder of the proper fraction\n    r = p % q\n    \/\/ Find the nth digit of the remainder\n    return r \/\/ 10^(N-1)\n}","language":"go"}
{"task_id":"MBGP\/37","completion":"\tvar unsorted_list []interface{}\n\tfor i, v := range mixed_list {\n\t\tif v == nil {\n\t\t\tcontinue\n\t\t}\n\t\tif v.int {\n\t\t\tunsorted_list.append(v.int)\n\t\t}\n\t\tif v.string {\n\t\t\tunsorted_list.append(v.string)\n\t\t}\n\t}\n\tvar sorted_list []interface{}\n\tsort.go(unsorted_list, sorted_list)\n\treturn sorted_list\n}","language":"go"}
{"task_id":"MBGP\/38","completion":"    var even []int = []int{0}\n    var odd []int = []int{0}\n    for _, i := range list1 {\n        if i % 2 == 0 {\n            even = append(even, i)\n        } else {\n            odd = append(odd, i)\n        }\n    }\n    return (len(even) \/ len(odd))\n}","language":"go"}
{"task_id":"MBGP\/43","completion":"    match (text) {\n        _ => \"Not matched!\"\n        _ => \"Found a match!\"\n        _ => \"Found a match!\"\n        _ => \"Found a match!\"\n        _ => \"Found a match!\"\n        _ => \"Found a match!\"\n        _ => \"Found a match!\"\n        _ => \"Found a match!\"\n        _ => \"Found a match!\"\n        _ => \"Found a match!\"\n        _ => \"Found a match!\"\n        _ => \"Found a match!\"\n        _ => \"Found a match!\"\n        _ => \"Found a match!\"\n        _ => \"Found a match!\"\n        _ => \"Found a match!\"\n        _ => \"Found a match!\"\n        _ => \"Found a match!\"\n        _ => \"Found a match!\"\n        _ => \"Found a match!\"\n        _ => \"Found","language":"go"}
{"task_id":"MBGP\/45","completion":"    var gcd []int = []int{1}\n    for _, v := range l {\n        gcd = append(gcd, v)\n        if (v == 0) {\n            break\n        }\n        gcd = append(gcd, gcd[0] % v)\n        remove(gcd, 0)\n    }\n    return gcd[0]\n}","language":"go"}
{"task_id":"MBGP\/47","completion":"    if (B == 0) {\n        return 0\n    }\n    if (A == 0) {\n        return 0\n    }\n    if (B == 1) {\n        return 1\n    }\n    if (A == 1) {\n        return 1\n    }\n    if (B % 2 == 0) {\n        return 2\n    }\n    if (B % 3 == 0) {\n        return 3\n    }\n    if (B % 5 == 0) {\n        return 5\n    }\n    if (B % 7 == 0) {\n        return 7\n    }\n    if (B % 11 == 0) {\n        return 11\n    }\n    if (B % 13 == 0) {\n        return 13\n    }\n    if (B % 17 == ","language":"go"}
{"task_id":"MBGP\/48","completion":"    return (n & ~0x55555555) | (n & 0xAAAAAAAA)\n}","language":"go"}
{"task_id":"MBGP\/50","completion":"    var min_length []int\n    var min_list [][]int\n    var i int\n    for i := 0; i < len(input_list); i++ {\n        min_length = 1\n        min_list = input_list[i]\n        for j := 0; j < len(input_list[i]); j++ {\n            if (input_list[i][j] < min_list[j]) {\n                min_length = j + 1\n                min_list = input_list[i]\n            }\n        }\n        if (min_length == 1) {\n            return (1, min_list)\n        } else {\n            return (min_length, min_list)\n        }\n    }\n}","language":"go"}
{"task_id":"MBGP\/54","completion":"\tcounts := make(map[int]int, 0)\n\tfor i := 0; i < my_list.len(); i++ {\n\t\tcounts[my_list[i]] += 1\n\t}\n\tfor i := 0; i < counts.len(); i++ {\n\t\tfor j := 0; j < counts[i]; j++ {\n\t\t\tmy_list[j] = i\n\t\t}\n\t}\n\treturn my_list\n}","language":"go"}
{"task_id":"MBGP\/55","completion":"\tfor (i := 0; i < r; i++) {\n\t\ta = a * (1 - a) \/ (n - i)\n\t}\n\treturn a\n}","language":"go"}
{"task_id":"MBGP\/56","completion":"    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n        return check(n \/ 2)\n    }\n    return check(n - 1)\n}","language":"go"}
{"task_id":"MBGP\/57","completion":"    var max []int\n    for _, i := range arr {\n        max = max {\n            (i * 10 + arr[0]) * (n - 1) + arr[1]\n        }\n    }\n    return max\n}","language":"go"}
{"task_id":"MBGP\/60","completion":"    var i int\n    var j int\n    var max_len int\n    var diff int\n    var max_len_sub_arr []int\n    max_len_sub_arr = []int{0}\n    max_len = 0\n    diff = 0\n    for i := 0; i < n; i++ {\n        max_len_sub_arr = []int{0}\n        for j := 0; j < n; j++ {\n            if i == j || diff == 0 {\n                max_len_sub_arr.append(arr[i])\n            } else {\n                if arr[i] - arr[j] == diff {\n                    max_len_sub_arr.append(arr[i])\n                } else {\n                    break\n                }\n            }\n        }\n        if max_len_sub_arr.length > max_len {\n            max_len = max_len_sub_arr.length\n        }","language":"go"}
{"task_id":"MBGP\/61","completion":"    var count int\n    for i := 0; i < s.len(); i++ {\n        for j := i+1; j < s.len(); j++ {\n            if (s[i] == s[j]) {\n                if (j-i+1 == n) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/63","completion":"    var max_diff []int = []int{0}\n    for _, v := range test_list {\n        max_diff = append(max_diff, v[0] - v[1])\n    }\n    return max_diff.max()\n}","language":"go"}
{"task_id":"MBGP\/64","completion":"\tsort subjectmarks (\n\t\tfunc (a, b) (int, int) {\n\t\t\treturn a.1 - b.1\n\t\t}\n\t)\n}","language":"go"}
{"task_id":"MBGP\/65","completion":"    if len(data_list) == 0 {\n        return 0\n    }\n    else {\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    }\n}","language":"go"}
{"task_id":"MBGP\/67","completion":"    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 7\n    }\n    if n == 5 {\n        return 15\n    }\n    if n == 6 {\n        return 63\n    }\n    if n == 7 {\n        return 255\n    }\n    if n == 8 {\n        return 511\n    }\n    if n == 9 {\n        return 1023\n    }\n    if n == 10 {\n        return 2047\n    }\n    if n == 11 {\n        return 4095\n    }\n    if n == 12 {\n        return 8191\n    }\n    if n ","language":"go"}
{"task_id":"MBGP\/69","completion":"    for _, v := range s {\n        if l == nil {\n            return false\n        }\n        if v == nil {\n            return true\n        }\n        if l[0] == v {\n            l = l[1:]\n            continue\n        }\n        if l[0] < v {\n            return false\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBGP\/71","completion":"\tvar gap := 1\n\tvar sorted []int\n\twhile gap < length(nums) {\n\t\tgap = gap * 3 + 1\n\t}\n\twhile gap > 0 {\n\t\tsorted = sort(nums, gap)\n\t\tgap = gap \/ 3\n\t}\n\treturn sorted\n}","language":"go"}
{"task_id":"MBGP\/73","completion":"    \/\/ split the string by \\n\n    text := text.Split('\\n')\n    \/\/ split the string by *\n    text := text.Split('*')\n    \/\/ split the string by \\s\n    text := text.Split(' ')\n    \/\/ split the string by \\s\n    text := text.Split('\\s')\n    \/\/ split the string by \\s\n    text := text.Split('\\t')\n    \/\/ split the string by \\s\n    text := text.Split('\\r')\n    \/\/ split the string by \\s\n    text := text.Split('\\f')\n    \/\/ split the string by \\s\n    text := text.Split('\\v')\n    \/\/ split the string by \\s\n    text := text.Split('\\0')\n    \/\/ split the string by \\s\n    text := text.Split('\\b')\n    \/\/ split the string by \\s\n    text := text.Split('\\0')\n    \/\/ split the string by \\s\n    text := text","language":"go"}
{"task_id":"MBGP\/74","completion":"    if (colors.Length != patterns.Length) {\n        return false\n    }\n    for (i, j) := range colors.Length {\n        if (colors[i] != patterns[j]) {\n            return false\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBGP\/75","completion":"    \/\/ Go through the list of tuples\n    \/\/ If the tuple has all elements divisible by K, return the tuple\n    \/\/ If the tuple has not all elements divisible by K, return nil\n    \/\/ If the list is empty, return nil\n    \/\/ Return nil\n}","language":"go"}
{"task_id":"MBGP\/76","completion":"    var squares []float64\n    squares = []float64(m * n)\n    for i := 0; i < m; i++ {\n        for j := 0; j < n; j++ {\n            squares[i * n + j] = i * i + j * j\n        }\n    }\n    var count []float64\n    count = []float64(m * n)\n    for i := 0; i < m; i++ {\n        for j := 0; j < n; j++ {\n            count[i * n + j] = squares[i * n + j]\n        }\n    }\n    return count.sum()\n}","language":"go"}
{"task_id":"MBGP\/78","completion":"    var count []int64\n    for i := 0; i < n; i++ {\n        count[i] = 0\n    }\n    for i := 0; i < n; i++ {\n        count[i] = count[i - 1] + (i & 1)\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/80","completion":"    if n == 0 {\n        return 1.0\n    }\n    return (4 * n - 2) * tetrahedral_number(n - 1) \/ (n + 1)\n}","language":"go"}
{"task_id":"MBGP\/81","completion":"    \/\/ zip the two tuples\n    for _, v1, v2 := range test_tup1 {\n        for _, v3, v4 := range test_tup2 {\n            \/\/ create a tuple with the values\n            \/\/ and append it to the result\n            \/\/ (we don't need to use append since\n            \/\/ tuples are immutable)\n            result.append(tuple(v1, v2, v3, v4))\n        }\n    }\n    \/\/ return the result\n    return result\n}","language":"go"}
{"task_id":"MBGP\/82","completion":"\treturn math.pi * r * r * r\n}","language":"go"}
{"task_id":"MBGP\/83","completion":"    i int64 = 0\n    for {\n        i := i + 1\n        if (strr[i] != \" \") {\n            return strr[i]\n        }\n    }\n    return \" \"\n}","language":"go"}
{"task_id":"MBGP\/85","completion":"\treturn math.Pi * r * r\n}","language":"go"}
{"task_id":"MBGP\/87","completion":"    map[string]string result = {}\n    for _, v1 in dict1.iter() {\n        for _, v2 in dict2.iter() {\n            for _, v3 in dict3.iter() {\n                result[v1 + v2 + v3] = v1 + v2 + v3\n            }\n        }\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/91","completion":"    for _, v := range str1 {\n        if v == sub_str {\n            return true\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/94","completion":"    var min_index []int\n    var min_value []int\n    var min_tuple []interface{key:string,value:int}\n    for _, v := range test_list {\n        min_index = 0\n        min_value = v[0]\n        for i, (k, v) := range v {\n            if v < min_value {\n                min_index = i\n                min_value = v\n            }\n        }\n        min_tuple = test_list[min_index]\n    }\n    return min_tuple.key\n}","language":"go"}
{"task_id":"MBGP\/96","completion":"    var divisors []int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            divisors = append(divisors, i)\n        }\n    }\n    return len(divisors)\n}","language":"go"}
{"task_id":"MBGP\/98","completion":"    var len := len(numbers)\n    var product := 1\n    for _, i := range len {\n        product *= numbers[i]\n    }\n    return product \/ len\n}","language":"go"}
{"task_id":"MBGP\/99","completion":"    if n == 0 {\n        return \"0\"\n    }\n    return (\n        (decimal_to_binary(n \/ 2)) +\n        (n % 2)\n    )\n}","language":"go"}
{"task_id":"MBGP\/100","completion":"    \/\/ Go through the numbers from 0 to num\n    \/\/ If the number is a palindrome, return the next smallest palindrome\n    \/\/ Otherwise, return the number\n    \/\/ If the number is a palindrome, return the next smallest palindrome\n    \/\/ Otherwise, return the number\n    \/\/ If the number is a palindrome, return the next smallest palindrome\n    \/\/ Otherwise, return the number\n    \/\/ If the number is a palindrome, return the next smallest palindrome\n    \/\/ Otherwise, return the number\n    \/\/ If the number is a palindrome, return the next smallest palindrome\n    \/\/ Otherwise, return the number\n    \/\/ If the number is a palindrome, return the next smallest palindrome\n    \/\/ Otherwise, return the number\n    \/\/ If the number is a palindrome, return the next smallest palindrome\n    \/\/ Otherwise, return the number\n    \/\/ If the number is a palindrome, return the next smallest palindrome\n    \/\/ Otherwise, return the number\n    \/\/ If the number is a palindrome, return the next smallest palindrome\n    \/\/ Otherwise, return the number\n","language":"go"}
{"task_id":"MBGP\/102","completion":"    var words []string{\n        word.Split(\"_\")\n    }\n    var result []string{\n        words.ForEach(s => result.Add(s[0].ToUpper() + s.Substring(1)))\n    }\n    result.Remove(result.Index(result.Last()))\n    return result.Join(\"\")\n}","language":"go"}
{"task_id":"MBGP\/104","completion":"\tfor _, sub_list := range input_list {\n\t\tsort(sub_list)\n\t}\n\treturn input_list\n}","language":"go"}
{"task_id":"MBGP\/107","completion":"    if L > R {\n        return 0\n    }\n    var count []int = []int{0}\n    for i int {\n        count[i] = 0\n    }\n    for i int {\n        if L == i {\n            return count[i]\n        }\n        if i < L {\n            count[i] = count[i] + 1\n        }\n        if i > R {\n            return count[i]\n        }\n        if i % 16 == 0 {\n            count[i] = count[i] + 1\n        }\n    }\n    return count[L]\n}","language":"go"}
{"task_id":"MBGP\/111","completion":"    var common []int\n    for _, v := range nestedlist {\n        for _, w := range v {\n            if v == w {\n                common = append(common, w)\n            }\n        }\n    }\n    return common\n}","language":"go"}
{"task_id":"MBGP\/114","completion":"    \/\/ 1. Initialize a hash table to store the frequency of each tuple.\n    \/\/ 2. Traverse the given list and assign frequency to each tuple.\n    \/\/ 3. Return the resultant hash table.\n    map := make(map map[string]int)\n    for _, _, freq := range test_list {\n        map[string(freq)] += 1\n    }\n    return map\n}","language":"go"}
{"task_id":"MBGP\/117","completion":"    \/\/ Go\/Golang\n    \/\/ 1. Convert all possible convertible elements in the list to float.\n    \/\/ 2. Sort the list by the first element.\n    \/\/ 3. Return the sorted list.\n    \/\/ 4. Return the string representation of the sorted list.\n    \/\/ 5. Return the string representation of the sorted list.\n    \/\/ 6. Return the string representation of the sorted list.\n    \/\/ 7. Return the string representation of the sorted list.\n    \/\/ 8. Return the string representation of the sorted list.\n    \/\/ 9. Return the string representation of the sorted list.\n    \/\/ 10. Return the string representation of the sorted list.\n    \/\/ 11. Return the string representation of the sorted list.\n    \/\/ 12. Return the string representation of the sorted list.\n    \/\/ 13. Return the string representation of the sorted list.\n    \/\/ 14. Return the string representation of the sorted list.\n    \/\/ 15. Return the string representation of the sorted list.\n    \/\/ 16. Return the string","language":"go"}
{"task_id":"MBGP\/118","completion":"    \/\/ split string into a list of words\n    words := string0.Split(\" \")\n    \/\/ iterate over words and convert each word to lowercase\n    for word := range words {\n        word := word.ToLower()\n        \/\/ if the word is not already in the list\n        if !string.Contains(word) {\n            \/\/ add the word to the list\n            string = append(string, word)\n        }\n    }\n    \/\/ return the list\n    return string\n}","language":"go"}
{"task_id":"MBGP\/119","completion":"\tarr, n := sort(arr)\n\ti := 0\n\twhile i < n - 1 {\n\t\tif arr[i] == arr[i + 1] {\n\t\t\treturn arr[i]\n\t\t}\n\t\ti += 1\n\t}\n\treturn -1\n}","language":"go"}
{"task_id":"MBGP\/120","completion":"    var max_product []int64\n    var max_product_tuple []int64\n    var i int\n    var j int\n    var product int64\n    var tuple1 []int64\n    var tuple2 []int64\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            tuple1 = list1[i][j]\n            tuple2 = list1[i][j + 1]\n            product = tuple1[0] * tuple2[0]\n            if (product > max_product) {\n                max_product = product\n                max_product_tuple = []int64{tuple1, tuple2}\n            }\n        }\n    }\n    return max_product_tuple\n}","language":"go"}
{"task_id":"MBGP\/122","completion":"    var i int\n    var count int\n    var sum int\n    var num int\n    var result int\n    i = 1\n    count = 0\n    sum = 0\n    num = 0\n    while i <= n {\n        num = smart(i)\n        if num > 0 {\n            sum = sum + num\n            count = count + 1\n        }\n        i = i + 1\n    }\n    result = sum \/ count\n    return result\n}","language":"go"}
{"task_id":"MBGP\/123","completion":"    var sum []int\n    var amicable []int\n    var i int\n    sum = 0\n    amicable = []int{1, 2, 3, 4, 5, 6, 7, 8, 9}\n    for i := 1; i <= limit; i++ {\n        if (sum < limit) {\n            for j := 1; j <= limit; j++ {\n                if (i != j && amicable[i] == j && amicable[j] == i) {\n                    sum = sum + i + j\n                    amicable.remove(i)\n                    amicable.remove(j)\n                }\n            }\n        }\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBGP\/125","completion":"    var zeroes []byte, ones []byte\n    zeroes = []byte{0}\n    ones = []byte{0}\n    for i := 0; i < n; i++ {\n        zeroes = append(zeroes, string0[i])\n        ones = append(ones, string0[i])\n    }\n    zeroes = zeroes.sort()\n    ones = ones.sort()\n    var max []byte\n    for i := 0; i < n; i++ {\n        max = append(max, zeroes[i] - ones[i])\n    }\n    return max.max()\n}","language":"go"}
{"task_id":"MBGP\/128","completion":"    \/\/ Your code here\n}","language":"go"}
{"task_id":"MBGP\/129","completion":"    for i, row := range my_matrix {\n        for j, cell := range row {\n            if (i + j + cell != 15) {\n                return false\n            }\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBGP\/130","completion":"    var freqs []int = []int{0}\n    for _, v := range nums {\n        freqs[v] += 1\n    }\n    var max_freq = 0\n    var max_freq_idx = 0\n    for _, v := range freqs {\n        if v > max_freq {\n            max_freq = v\n            max_freq_idx = v\n        }\n    }\n    return &nums[max_freq_idx]\n}","language":"go"}
{"task_id":"MBGP\/131","completion":"    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go","language":"go"}
{"task_id":"MBGP\/136","completion":"    var bill float64\n    bill = units * 0.5\n    return bill\n}","language":"go"}
{"task_id":"MBGP\/137","completion":"    var zero_count []float64 = []float64{0.0}\n    for _, i := range nums {\n        zero_count = append zero_count, zero_count[i]\n    }\n    return mean(zero_count)\n}","language":"go"}
{"task_id":"MBGP\/139","completion":"    return 2*3.14*r\n}","language":"go"}
{"task_id":"MBGP\/140","completion":"    var result []int\n    for _, _, *t in test_list {\n        for _, _, *s in t {\n            result.append(s)\n        }\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/141","completion":"\tfor i, j in pairs(nums) {\n\t\tfor k, l in pairs(nums) {\n\t\t\tif i < k && j > l {\n\t\t\t\tswap(nums, i, k)\n\t\t\t}\n\t\t}\n\t}\n\treturn nums\n}","language":"go"}
{"task_id":"MBGP\/143","completion":"    var lists []int\n    var count := 0\n    for i, v := range Input {\n        lists = append(lists, v)\n    }\n    for i, v := range lists {\n        count = count + 1 if v == nil else count\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/146","completion":"    var total := 0\n    for _, c := range str1 {\n        total += ord(c)\n    }\n    return total\n}","language":"go"}
{"task_id":"MBGP\/148","completion":"    var max = 0\n    var max_part = 0\n    var max_part_sum = 0\n    for (i := 0; i < N; i++) {\n        var digit = N - i\n        var part = digit \/ 10\n        var part_sum = 0\n        for (j := 0; j < part; j++) {\n            part_sum += digit % 10\n            digit \/= 10\n        }\n        if (part_sum > max_part_sum) {\n            max_part_sum = part_sum\n            max_part = part\n        }\n    }\n    return max_part_sum\n}","language":"go"}
{"task_id":"MBGP\/149","completion":"    \/\/ 1. Initialize the longest length to 0\n    var longestLength = 0\n    \/\/ 2. Initialize the current length to 1\n    var currentLength = 1\n    \/\/ 3. Initialize the current start to 0\n    var currentStart = 0\n    \/\/ 4. Loop through the array\n    for (i := 1; i < n; i++) {\n        \/\/ 5. If the current element is the same as the previous element, increment the current length\n        if (arr[i] == arr[i - 1]) {\n            currentLength++\n        }\n        \/\/ 6. If the current element is not the same as the previous element,\n        \/\/ 7.  a. If the current length is greater than the longest length, update the longest length\n        else {\n            if (currentLength > longestLength) {\n                longestLength = currentLength\n                currentStart = i - currentLength + 1\n                currentLength = 1\n            }\n        }\n","language":"go"}
{"task_id":"MBGP\/152","completion":"\tif len(x) == 1 {\n\t\treturn x\n\t}\n\telse {\n\t\tvar mid := len(x) \/ 2\n\t\tvar left := merge_sort(x[0..mid])\n\t\tvar right := merge_sort(x[mid..len(x)])\n\t\treturn merge(left, right)\n\t}\n}","language":"go"}
{"task_id":"MBGP\/153","completion":"    var x = (-b + sqrt(pow(b, 2) - 4 * a * c)) \/ (2 * a)\n    var y = (-b - sqrt(pow(b, 2) - 4 * a * c)) \/ (2 * a)\n    return [x, y]\n}","language":"go"}
{"task_id":"MBGP\/155","completion":"    if n == 0 {\n        return 0\n    }\n    return (n & ~1) | (n & 1)\n}","language":"go"}
{"task_id":"MBGP\/156","completion":"\tfor _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,","language":"go"}
{"task_id":"MBGP\/157","completion":"    \/\/ Go code here\n}","language":"go"}
{"task_id":"MBGP\/158","completion":"    var i int\n    var j int\n    var count int\n    var min_count int\n    var min_i int\n    var min_j int\n    var min_count_arr []int\n    var min_i_arr []int\n    var min_j_arr []int\n    var min_count_arr_i []int\n    var min_i_arr_i []int\n    var min_j_arr_i []int\n    var min_count_arr_j []int\n    var min_i_arr_j []int\n    var min_j_arr_j []int\n    var min_count_arr_i_j []int\n    var min_i_arr_i_j []int\n    var min_j_arr_i_j []int\n    var min_count_arr_i_j_arr []int\n    var min_i_arr_i_j_arr []int\n    var min_j_arr_i_j_arr []int\n    var min_count_arr_i_j_arr","language":"go"}
{"task_id":"MBGP\/160","completion":"    var x = nil\n    var y = nil\n    if a * b == n {\n        x = a\n        y = b\n    }\n    return fmt.Sprintf(\"x = %d, y = %d\", x, y)\n}","language":"go"}
{"task_id":"MBGP\/161","completion":"    var list3 []int\n    for _, i := range list1 {\n        if !list2 contains i {\n            list3.append(i)\n        }\n    }\n    return list3\n}","language":"go"}
{"task_id":"MBGP\/163","completion":"\tvar area []float64\n\tfor _, i := range s {\n\t\tarea[i] = (l - s) * (s - i) \/ 2\n\t}\n\treturn math.Sqrt(sum(area))\n}","language":"go"}
{"task_id":"MBGP\/164","completion":"\tvar divisors1 []int = []int {\n\t\tmath.Sqrt(num1)\n\t\tmath.Sqrt(num2)\n\t\tmath.Sqrt(num1 + num2)\n\t\tmath.Sqrt(num1 - num2)\n\t}\n\tvar divisors2 []int = []int {\n\t\tmath.Sqrt(num1)\n\t\tmath.Sqrt(num2)\n\t\tmath.Sqrt(num1 + num2)\n\t\tmath.Sqrt(num1 - num2)\n\t}\n\tfor _, divisors1 := range divisors1 {\n\t\tfor _, divisors2 := range divisors2 {\n\t\t\tif divisors1 == divisors2 {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}","language":"go"}
{"task_id":"MBGP\/165","completion":"    var count = 0\n    for _, i := range str1 {\n        if (str1[i] == str1[i+1]) count += 1\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/169","completion":"    var pell []int{0}\n    pell[0] = 1\n    for _ := 1; _ < n; _++ {\n        pell[_] = pell[_ - 1] * 2\n    }\n    return pell[n - 1]\n}","language":"go"}
{"task_id":"MBGP\/171","completion":"\treturn math.Pow(5, 2) * a\n}","language":"go"}
{"task_id":"MBGP\/173","completion":"    \/\/ Go\/Golang\n    \/\/ 1. Remove all non-alphanumeric characters\n    \/\/ 2. Replace all non-alphanumeric characters with a single space\n    \/\/ 3. Return the result\n    return text.replace(\/[^a-zA-Z0-9]\/g, \" \")\n}","language":"go"}
{"task_id":"MBGP\/174","completion":"    map[string][]int {\n        map[string][]int {\n            map[string][]int {\n                \/\/ ...\n            }\n        }\n    }\n}","language":"go"}
{"task_id":"MBGP\/180","completion":"\treturn math.sqrt(math.pow(math.abs(slat - elat), 2) + math.pow(math.abs(slon - elon), 2))\n}","language":"go"}
{"task_id":"MBGP\/181","completion":"    var i int\n    var commonPrefix string\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var prefix string\n    var prefixLen int\n    var prefixIndex int\n    var str1Length int\n    var str2Length int\n    var str1Index int\n    var str2Index int\n    var str1Char int\n    var str2Char int\n    var str1CharCode int\n    var str2CharCode int\n    var str1CharCodeIndex int\n    var str2CharCodeIndex int\n    var str1CharCodeChar int\n    var str2CharCodeChar int\n    var str1CharCodeCharCode int\n    var str2CharCodeCharCode int\n    var str1CharCodeCharCodeIndex int\n    var str2CharCodeCharCodeIndex int\n    var str1CharCodeCharCodeChar int\n    var str2CharCodeCharCodeChar int\n    var str1CharCodeCharCodeCharCode int\n    var str2CharCodeCharCodeCharCode int\n    var str1CharCodeCharCodeCharCodeIndex int\n    var str2CharCodeCharCode","language":"go"}
{"task_id":"MBGP\/182","completion":"    \/\/ split string into array of characters\n    \/\/ find uppercase, lowercase, special character and numeric values using regex\n    \/\/ return array of uppercase, lowercase, special character and numeric values\n    \/\/ return nil if no characters found\n    \/\/ return nil if string is empty\n    \/\/ return nil if string is null\n    \/\/ return nil if string is nil\n    if (string == nil) {\n        return nil\n    }\n    if (string == \"\") {\n        return nil\n    }\n    if (string == null) {\n        return nil\n    }\n    if (string == \"nil\") {\n        return nil\n    }\n    string0 = string0.replace(\/[^\\w\\s]\/gi, \"\")\n    string0 = string0.replace(\/\\s+\/g, \"\")\n    string0 = string0.replace(\/[^a-zA-Z0-9]\/gi, \"\")\n    string0 = string0.replace(\/[^a-zA-Z0-9]\/gi, \"\")\n    string0 =","language":"go"}
{"task_id":"MBGP\/185","completion":"    \/\/ Return the focus of the parabola\n    \/\/ (the point of inflection)\n    \/\/ Hint:\n    \/\/ - You may want to use the `math.pow` function\n    \/\/ - You may want to use the `math.sqrt` function\n    \/\/ - You may want to use the `math.atan2` function\n    \/\/ - You may want to use the `math.cos` function\n    \/\/ - You may want to use the `math.sin` function\n    \/\/ - You may want to use the `math.tan` function\n    \/\/ - You may want to use the `math.acos` function\n    \/\/ - You may want to use the `math.asin` function\n    \/\/ - You may want to use the `math.atan` function\n    \/\/ - You may want to use the `math.tan` function\n    \/\/ - You may want to use the `math.atan2` function\n    \/\/ - You may want to use the ","language":"go"}
{"task_id":"MBGP\/186","completion":"    \/\/ Go\/Golang\n    \/\/ 1. split the text into an array of words\n    \/\/ 2. iterate through the patterns\n    \/\/ 3. check if the pattern is in the array of words\n    \/\/ 4. if it is, return 'Matched!'\n    \/\/ 5. if it is not, return 'Not Matched!'\n    \/\/ 6. return 'Not Matched!'\n    \/\/ 7. return 'Matched!'\n    \/\/ 8. return 'Not Matched!'\n    \/\/ 9. return 'Matched!'\n    \/\/ 10. return 'Not Matched!'\n    \/\/ 11. return 'Matched!'\n    \/\/ 12. return 'Not Matched!'\n    \/\/ 13. return 'Matched!'\n    \/\/ 14. return 'Not Matched!'\n    \/\/ 15. return 'Matched!'\n    \/\/ 16. return 'Not Matched!'\n    \/\/ 17. return 'Matched!'\n    \/\/ 18.","language":"go"}
{"task_id":"MBGP\/187","completion":"    if m == 0 || n == 0 {\n        return 0\n    }\n    if X[m - 1] == Y[n - 1] {\n        return 1 + longest_common_subsequence(X, Y, m - 1, n - 1)\n    }\n    return max(longest_common_subsequence(X, Y, m - 1, n), longest_common_subsequence(X, Y, m, n - 1))\n}","language":"go"}
{"task_id":"MBGP\/189","completion":"    var i int\n    var j int\n    var k int\n    var count []int\n    var missing []int\n    for i := 0; i < n; i++ {\n        count[arr[i]] = count[arr[i]] + 1\n    }\n    for j := 0; j < n; j++ {\n        if (count[j] == 0) {\n            missing[j] = j\n        }\n    }\n    for k := 0; k < n; k++ {\n        if (missing[k] == 0) {\n            return k\n        }\n    }\n    return n + 1\n}","language":"go"}
{"task_id":"MBGP\/192","completion":"    return (len(string) > 0 && string.match(\/[a-z]\/) && string.match(\/[0-9]\/))\n}","language":"go"}
{"task_id":"MBGP\/193","completion":"    var res []int\n    for _, v := range test_tup {\n        if res.count == nil {\n            res = []int{v}\n        } else {\n            if res.count == 1 {\n                res = []int{v}\n            } else {\n                if v == res[0] {\n                    res = res[1:]\n                } else {\n                    res = res[1:res.count]\n                    res = append(v, res)\n                }\n            }\n        }\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/194","completion":"    if n == 0 {\n        return 0\n    }\n    return (n % 8) + (octal_To_Decimal(n \/ 8))\n}","language":"go"}
{"task_id":"MBGP\/195","completion":"\tvar i int\n\ti := 0\n\twhile i < n {\n\t\tif arr[i] == x {\n\t\t\treturn i\n\t\t}\n\t\ti := i + 1\n\t}\n\treturn -1\n}","language":"go"}
{"task_id":"MBGP\/197","completion":"    \/\/ Create a tuple of the same length as the two tuples\n    \/\/ Fill the tuple with 1s\n    \/\/ Multiply the tuple with the first tuple\n    \/\/ Multiply the tuple with the second tuple\n    \/\/ Return the tuple\n    return []int{\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        ","language":"go"}
{"task_id":"MBGP\/198","completion":"\tvar c float64\n\tc := math.sqrt(a * a + b * b)\n\treturn math.sqrt(a * a + b * b + c * c)\n}","language":"go"}
{"task_id":"MBGP\/200","completion":"    \/\/ Go\/Golang code here\n    var max []int\n    var max_index []int\n    var i int\n    var j int\n    var k int\n    var max_value int\n    var max_index_value int\n    var max_index_index int\n    var max_index_index_value int\n    var max_index_index_index int\n    max = 0\n    max_index = 0\n    for i := 0; i < len(list1); i++ {\n        if (list1[i] > max) {\n            max = list1[i]\n            max_index = i\n        }\n    }\n    max_index_value = max_index\n    max_index_index = 0\n    max_index_index_value = 0\n    for j := 0; j < len(list1); j++ {\n        if (list1[j] == max) {\n            if (j > max_index_index_value)","language":"go"}
{"task_id":"MBGP\/202","completion":"    for _, v := range str1 {\n        if v % 2 == 0 {\n            str1 = str1.replace(v, \"\")\n        }\n    }\n    return str1\n}","language":"go"}
{"task_id":"MBGP\/204","completion":"    var i int\n    i := 0\n    for {\n        if s[i] == c {\n            i++\n        }\n    }\n    return i\n}","language":"go"}
{"task_id":"MBGP\/205","completion":"    var inversion_count []int = []int{0}\n    for _, elem := range test_tup {\n        var idx []int = []int{0}\n        for _, elem2 := range test_tup {\n            if elem < elem2 {\n                idx = append(idx, 1)\n            }\n        }\n        inversion_count = append(inversion_count, idx)\n    }\n    return inversion_count\n}","language":"go"}
{"task_id":"MBGP\/206","completion":"    \/\/ Go\/Golang\n    \/\/ return test_tup\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string\n    \/\/ return []string","language":"go"}
{"task_id":"MBGP\/207","completion":"    var i int\n    var j int\n    var max_len int\n    var subseq_len int\n    var subseq_str string\n    var subseq_set []string\n    subseq_len = 0\n    subseq_str = \"\"\n    subseq_set = []\n    for i := 0; i < str.len; i++ {\n        for j := i; j < str.len; j++ {\n            if (str[i] == str[j]) {\n                subseq_len += 1\n                subseq_str += str[i]\n                if (subseq_len > max_len) {\n                    max_len = subseq_len\n                    subseq_set = []\n                    subseq_set.append(subseq_str)\n                } else if (subseq_len == max_len) {\n                    subseq_set.append(subseq_str)\n                }\n            } else {\n                subseq_","language":"go"}
{"task_id":"MBGP\/208","completion":"    regex := \"^-?\\\\d+(\\\\.\\\\d{1,2})?$\"\n    match := regex.Match(num)\n    return match ? true : false\n}","language":"go"}
{"task_id":"MBGP\/210","completion":"    regex := \/[^a-z0-9]\/\n    return regex.test(string0)\n}","language":"go"}
{"task_id":"MBGP\/212","completion":"\tsum := 0\n\tfor {\n\t\tsum := sum + math.pow(n, 4)\n\t}\n\treturn sum\n}","language":"go"}
{"task_id":"MBGP\/213","completion":"    \/\/ Your code here\n}","language":"go"}
{"task_id":"MBGP\/214","completion":"\treturn math.degrees(radian)\n}","language":"go"}
{"task_id":"MBGP\/215","completion":"    if alist.len() == 0 {\n        return alist\n    }\n    \/\/ Get the first element\n    first := alist[0]\n    \/\/ If the first element is a list, call this function again\n    if type(first) == []interface{\n        return &decode_list(first)\n    }\n    \/\/ If the first element is a number, return the number\n    if type(first) == int {\n        return first\n    }\n    \/\/ If the first element is a string, return the string\n    if type(first) == string {\n        return first\n    }\n    \/\/ If the first element is a list, call this function again\n    if type(first) == []interface{\n        return &decode_list(first)\n    }\n}","language":"go"}
{"task_id":"MBGP\/216","completion":"    var i int\n    for i := 0; i < len(list1); i++ {\n        if len(list1[i]) != len(list2[i]) {\n            return false\n        }\n        for j := 0; j < len(list1[i]); j++ {\n            if list1[i][j] != list2[i][j] {\n                return false\n            }\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBGP\/217","completion":"    var map []string = []string{\"\"}\n    for _, ch := range string {\n        if map.Contains(ch) {\n            return ch\n        }\n        map.Add(ch)\n    }\n    return \"\\0\"\n}","language":"go"}
{"task_id":"MBGP\/218","completion":"\treturn math.Abs(A - B)\n}","language":"go"}
{"task_id":"MBGP\/219","completion":"    min_max_tup := make([]int, 0)\n    for _, i := range test_tup {\n        if min_max_tup.len() < K {\n            min_max_tup = append(min_max_tup, i)\n        } else {\n            if i < min_max_tup[0] {\n                min_max_tup[0] = i\n            }\n            if i > min_max_tup[1] {\n                min_max_tup[1] = i\n            }\n        }\n    }\n    return min_max_tup\n}","language":"go"}
{"task_id":"MBGP\/220","completion":"    \/\/ split the string into an array of words\n    words := text.Split(' ')\n    \/\/ iterate over the array of words\n    for i, word := range words {\n        \/\/ replace the maximum number of occurrences of the special characters with a colon\n        words[i] = word.Replace(string.Max(word.Count(c) for c in \" ,.\"), \":\")\n    }\n    \/\/ join the array of words back into a string\n    return words.Join(' ')\n}","language":"go"}
{"task_id":"MBGP\/222","completion":"    var i int\n    for i := 0; i < len(test_tuple); i++ {\n        if type(test_tuple[i]) != type(test_tuple[0]) {\n            return false\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBGP\/223","completion":"\tfor _, i := range arr {\n\t\tif (arr[i] == x) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}","language":"go"}
{"task_id":"MBGP\/225","completion":"\tif low < high {\n\t\tmid int = (low + high) \/ 2\n\t\tif arr[mid] < arr[mid + 1] {\n\t\t\treturn arr[mid + 1]\n\t\t}\n\t\tif arr[mid - 1] < arr[mid] {\n\t\t\treturn arr[mid]\n\t\t}\n\t\tif arr[mid] > arr[0] {\n\t\t\treturn find_Min(arr, low, mid - 1)\n\t\t}\n\t\treturn find_Min(arr, mid + 1, high)\n\t}\n\treturn arr[0]\n}","language":"go"}
{"task_id":"MBGP\/226","completion":"    var result = \"\"\n    for (i, c) := range string {\n        if i % 2 == 1 {\n            result += c\n        }\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/230","completion":"    for (i, c) := range str1 {\n        if c == \" \" {\n            str1 = str1.replace(c, char)\n        }\n    }\n    return str1\n}","language":"go"}
{"task_id":"MBGP\/233","completion":"    return 2*3.14*r*h + 2*3.14*r*r\n}","language":"go"}
{"task_id":"MBGP\/235","completion":"    \/\/ 1. Create a mask to set all even bits to 1\n    mask := 0xAAAAAAAA\n    \/\/ 2. Set all even bits to 1\n    mask = mask | (1 << 0)\n    \/\/ 3. Return the masked value\n    return mask\n}","language":"go"}
{"task_id":"MBGP\/239","completion":"    if (m < n) {\n        return 0\n    }\n    if (m == n) {\n        return 1\n    }\n    return get_total_number_of_sequences(m - n, n) + get_total_number_of_sequences(m, n - 1)\n}","language":"go"}
{"task_id":"MBGP\/241","completion":"    \/\/ Go\/Golang\n    \/\/ 1. Create an empty 3d array\n    \/\/ 2. Fill it with '*'\n    \/\/ 3. Return it\n    \/\/ 4. Go to 1\n    \/\/ 5. Go to 2\n    \/\/ 6. Go to 3\n    \/\/ 7. Go to 4\n    \/\/ 8. Go to 5\n    \/\/ 9. Go to 6\n    \/\/ 10. Go to 7\n    \/\/ 11. Go to 8\n    \/\/ 12. Go to 9\n    \/\/ 13. Go to 10\n    \/\/ 14. Go to 11\n    \/\/ 15. Go to 12\n    \/\/ 16. Go to 13\n    \/\/ 17. Go to 14\n    \/\/ 18. Go to 15\n    \/\/ 19. Go to 16\n    \/\/ 20. Go to 17\n    \/\/ 21. Go to 18\n    \/\/ 22. Go to 19\n    \/\/","language":"go"}
{"task_id":"MBGP\/242","completion":"    var count = 0\n    for _, _ := range str1 {\n        count += 1\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/243","completion":"\tsort.by_key(func(t []interface{}) int32) lst\n}","language":"go"}
{"task_id":"MBGP\/244","completion":"\tvar x * x\n\tvar i int\n\tvar perfectSquares []int\n\tperfectSquares = []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100}\n\tfor i := 0; i < perfectSquares.Length; i++ {\n\t\tif perfectSquares[i] > N {\n\t\t\treturn perfectSquares[i]\n\t\t}\n\t}\n\treturn -1\n}","language":"go"}
{"task_id":"MBGP\/245","completion":"    \/\/ 1. Initialize the maximum sum to 0\n    max_sum := 0\n\n    \/\/ 2. Iterate over the array\n    for i := 0; i < n; i++ {\n        \/\/ 3. Initialize the current sum to 0\n        current_sum := 0\n\n        \/\/ 4. Iterate over the array\n        for j := i; j < n; j++ {\n            \/\/ 5. Add the current element to the current sum\n            current_sum := current_sum + arr[j]\n\n            \/\/ 6. If the current sum is greater than the maximum sum, update the maximum sum\n            if current_sum > max_sum {\n                max_sum = current_sum\n            }\n        }\n    }\n\n    \/\/ 7. Return the maximum sum\n    return max_sum\n}","language":"go"}
{"task_id":"MBGP\/246","completion":"    var x []float64\n    var n []int64\n    n = 0\n    x = 0.0\n    while (n < number) {\n        x = x + (1.0 \/ (n + 1))\n        n = n + 1\n    }\n    return x\n}","language":"go"}
{"task_id":"MBGP\/247","completion":"    var i int\n    var j int\n    var n int\n    var max_len int\n    var max_sub_len int\n    var sub_str string\n\n    n := len(str)\n    max_len := 0\n    max_sub_len := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j <= n; j++ {\n            sub_str := str[i..j]\n            if is_palindrome(sub_str) {\n                if max_sub_len < j - i + 1 {\n                    max_sub_len = j - i + 1\n                }\n            }\n        }\n    }\n    return max_sub_len\n}","language":"go"}
{"task_id":"MBGP\/252","completion":"\tvar result float64\n\tfor _, i := range numbers {\n\t\tresult = append(result, math.Abs(math.Re(numbers[i])))\n\t\tresult = append(result, math.Abs(math.Im(numbers[i])))\n\t}\n\treturn result\n}","language":"go"}
{"task_id":"MBGP\/253","completion":"    var count 0\n    for _, v := range list1 {\n        if v == nil {\n            count += 1\n        } else {\n            count += 1\n            count += count_integer(v)\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/254","completion":"    \/\/ split the text into words\n    words := text.Split(\" \")\n    \/\/ filter the words\n    return (words\n        \/\/ filter out the words that start with 'a' or 'e'\n        .Filter(a => a.StartsWith(\"a\") || a.StartsWith(\"e\"))\n        \/\/ map the words to lowercase\n        .ToLower()\n        \/\/ filter out the empty strings\n        .Filter(a, []string)\n        \/\/ map the words to lowercase\n        .ToLower()\n        \/\/ filter out the empty strings\n        .Filter(a, []string)\n        \/\/ map the words to lowercase\n        .ToLower()\n        \/\/ filter out the empty strings\n        .Filter(a, []string))\n}","language":"go"}
{"task_id":"MBGP\/255","completion":"    if n == 0 {\n        return [[]]\n    }\n    return [[l[0]] + c for c in combinations_colors(l.slice(1), n - 1)] + [[l[0]] + c for c in combinations_colors(l.slice(1), n)]\n}","language":"go"}
{"task_id":"MBGP\/256","completion":"    var count int\n    for i := 2; i < n; i++ {\n        if (*i == 0) continue\n        for j := 2; j < i; j++ {\n            if (*i % j == 0) break\n        }\n        if (j == i) count++\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/259","completion":"    \/\/ Initialize the best solution to the first tuple.\n    best_solution := test_tup1[0]\n    for i := 1; i < test_tup1.len; i++ {\n        \/\/ Initialize the current solution to the ith tuple.\n        current_solution := test_tup1[i]\n        for j := 0; j < test_tup2.len; j++ {\n            \/\/ Compare the ith and jth tuples.\n            if test_tup2[j][0] > test_tup2[j][1] {\n                \/\/ If the ith tuple is better than the jth tuple, swap them.\n                current_solution = append(current_solution, test_tup2[j])\n            }\n        }\n        \/\/ If the current solution is better than the best solution, update best solution.\n        if current_solution.len > best_solution.len {\n            best_solution = current_solution\n        }\n    }\n    \/\/ Return the best solution.\n    return best_solution\n}","language":"go"}
{"task_id":"MBGP\/262","completion":"    if L > len(list1) {\n        panic(\"Input list length is less than the desired length\")\n    }\n    var list2 []interface{}, list3 []interface{}, i int\n    list2 = list1[0..L-1]\n    list3 = list1[L..len(list1)-1]\n    return &list2, &list3\n}","language":"go"}
{"task_id":"MBGP\/264","completion":"    h_age = h_age * 7\n    h_age = h_age - 7\n    h_age = h_age * 7\n    h_age = h_age - 7\n    h_age = h_age * 7\n    h_age = h_age - 7\n    h_age = h_age * 7\n    h_age = h_age - 7\n    h_age = h_age * 7\n    h_age = h_age - 7\n    h_age = h_age * 7\n    h_age = h_age - 7\n    h_age = h_age * 7\n    h_age = h_age - 7\n    h_age = h_age * 7\n    h_age = h_age - 7\n    h_age = h_age * 7\n    h_age = h_age - 7\n    h_age","language":"go"}
{"task_id":"MBGP\/265","completion":"    for i, v := range S {\n        if i % step == 0 {\n            \/\/ Add the current element to the result\n            append(v, result)\n        }\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/269","completion":"    int i := 0\n    for {\n        i := i + ord(k)\n    }\n    return i\n}","language":"go"}
{"task_id":"MBGP\/272","completion":"\tvar result []int\n\tvar i int\n\tvar j int\n\tvar k int\n\tvar l int\n\tvar m int\n\tvar n int\n\tvar x int\n\tvar y int\n\tvar z int\n\tvar a int\n\tvar b int\n\tvar c int\n\tvar d int\n\tvar e int\n\tvar f int\n\tvar g int\n\tvar h int\n\tvar i int\n\tvar j int\n\tvar k int\n\tvar l int\n\tvar m int\n\tvar n int\n\tvar x int\n\tvar y int\n\tvar z int\n\tvar a int\n\tvar b int\n\tvar c int\n\tvar d int\n\tvar e int\n\tvar f int\n\tvar g int\n\tvar h int\n\tvar i int\n\tvar j int\n\tvar k int\n\tvar l int\n\tvar m int\n\tvar n int\n\tvar x int\n\tvar y int\n\tvar z int\n\tvar a int\n\tvar b int\n\tvar c int\n\tvar d int\n\tvar e int\n\tvar f int\n\tvar g int","language":"go"}
{"task_id":"MBGP\/274","completion":"\tvar coeffs []int\n\tvar sum []int\n\tcoeffs = []int{0, 1}\n\tfor i := 0; i < n; i++ {\n\t\tcoeffs = append(coeffs, []int{i, 1})\n\t}\n\tfor i := 0; i < n; i++ {\n\t\tsum = append(sum, []int{coeffs[i] * coeffs[i + 1], 0})\n\t}\n\treturn sum[0]\n}","language":"go"}
{"task_id":"MBGP\/275","completion":"\tpos := 0\n\tfor {\n\t\tpos := pos + 1\n\t\tif a[pos] == m {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn pos\n}","language":"go"}
{"task_id":"MBGP\/276","completion":"    return (2.0 * r * h) + (2.0 * r * r)\n}","language":"go"}
{"task_id":"MBGP\/278","completion":"    var count := 0\n    for _, elem := range test_tup {\n        if elem == nil {\n            break\n        }\n        count += 1\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/280","completion":"    var i int\n    var j int\n    var found bool\n    var index int\n    for i := 0; i < len(dlist); i++ {\n        if (dlist[i] == item) {\n            found := True\n            index := i\n            break\n        }\n    }\n    if (found) {\n        return &(found, index)\n    }\n    return &(found, -1)\n}","language":"go"}
{"task_id":"MBGP\/282","completion":"    return nums1.map { |n| nums2.sub(n) }.reverse\n}","language":"go"}
{"task_id":"MBGP\/283","completion":"    for _, i := range n {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBGP\/290","completion":"    if len(list1) == 0 {\n        return nil\n    }\n    int max_len = 0\n    \/\/ Go through the list and find the maximum length\n    for _, v := range list1 {\n        if len(v) > max_len {\n            max_len = len(v)\n        }\n    }\n    \/\/ Go through the list and find the list with maximum length\n    for _, v := range list1 {\n        if len(v) == max_len {\n            return v\n        }\n    }\n}","language":"go"}
{"task_id":"MBGP\/293","completion":"\treturn (\n\t\t(w * h) \/ 2.0\n\t)\n}","language":"go"}
{"task_id":"MBGP\/294","completion":"    if _, ok := range listval {\n        return if _, ok {\n            max_val(listval)\n        } else {\n            max_val(listval)\n        }\n    } else {\n        return 0\n    }\n}","language":"go"}
{"task_id":"MBGP\/297","completion":"    \/\/ Go\/Golang code here\n}","language":"go"}
{"task_id":"MBGP\/298","completion":"\tvar res []interface{}\n\tfor _, v1 in ipairs(l1) {\n\t\tfor _, v2 in ipairs(l2) {\n\t\t\tif v1 == v2 {\n\t\t\t\tres = append(res, v1)\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n}","language":"go"}
{"task_id":"MBGP\/299","completion":"    \/\/ TODO: Write your code here\n}","language":"go"}
{"task_id":"MBGP\/302","completion":"    \/\/ 1. Find the most significant bit number which is also a set bit.\n    \/\/ 2. If the most significant bit number is 1, return 0.\n    \/\/ 3. If the most significant bit number is 0, return 1.\n    \/\/ 4. If the most significant bit number is 0 and 1, return 0.\n    \/\/ 5. If the most significant bit number is 0 and 0, return 1.\n    \/\/ 6. If the most significant bit number is 1 and 1, return 1.\n    \/\/ 7. If the most significant bit number is 1 and 0, return 0.\n    \/\/ 8. If the most significant bit number is 1 and 1 and 1, return 1.\n    \/\/ 9. If the most significant bit number is 1 and 1 and 0, return 0.\n    \/\/ 10. If the most significant bit number is 1 and 0 and 1, return 1.\n    \/\/ 11. If the most significant bit number is 1 and ","language":"go"}
{"task_id":"MBGP\/305","completion":"    words.sort()\n    for _, word := range words {\n        if word.startswith(\"p\") {\n            return &word\n        }\n    }\n    return nil\n}","language":"go"}
{"task_id":"MBGP\/306","completion":"    if (index > n) {\n        return 0\n    }\n    if (k > index) {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n    if (a[index] > a[index - 1]) {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n    return max(\n        max_sum_increasing_subseq(a, n, index + 1, k),\n        max_sum_increasing_subseq(a, n, index + 1, k - 1) + a[index]\n    )\n}","language":"go"}
{"task_id":"MBGP\/307","completion":"    if tuplex.len() < m {\n        panic(\"tuplex.len() < m\")\n    }\n    if tuplex.len() > n {\n        panic(\"tuplex.len() > n\")\n    }\n    return tuplex.slice(m, n)\n}","language":"go"}
{"task_id":"MBGP\/308","completion":"    nums1.sort()\n    nums2.sort()\n    result []int\n    for i := 0; i < N; i++ {\n        result[i] = nums1[i] * nums2[i]\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/310","completion":"    \/\/ split string into array of characters\n    \/\/ iterate over array and convert to tuple\n    \/\/ return tuple\n}","language":"go"}
{"task_id":"MBGP\/311","completion":"    \/\/ 1. Get the rightmost set bit.\n    \/\/ 2. Set the leftmost unset bit.\n    \/\/ 3. Return the result.\n    n & ~(1 << (n.bit_length() - 1))\n}","language":"go"}
{"task_id":"MBGP\/312","completion":"\treturn math.pi * math.pow(r, 2) * h\n}","language":"go"}
{"task_id":"MBGP\/313","completion":"    for _, v := range list1 {\n        if v > 0 {\n            fmt.Println(v)\n        }\n    }\n}","language":"go"}
{"task_id":"MBGP\/314","completion":"    \/\/ Your code here\n}","language":"go"}
{"task_id":"MBGP\/315","completion":"    var i int\n    var max_len string\n    var max_len_len int\n    for i := 0; i < len(string); i++ {\n        if (string[i] % 2 == 0) {\n            max_len_len := len(string) - i\n            if (max_len_len > max_len) {\n                max_len := max_len_len\n            }\n        }\n    }\n    if (max_len == -1) {\n        return \"-1\"\n    }\n    return string[max_len]\n}","language":"go"}
{"task_id":"MBGP\/316","completion":"\tvar i int\n\ti := 0\n\tfor i := 0; i < len(A); i++ {\n\t\tif A[i] == x {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}","language":"go"}
{"task_id":"MBGP\/317","completion":"    \/\/ Go\/Golang\n    \/\/ 1. Create a new array to hold the encoded values.\n    \/\/ 2. Loop through the list.\n    \/\/ 3. If the current value is not the same as the previous value,\n    \/\/    add the current value to the array.\n    \/\/ 4. Otherwise,\n    \/\/    add the previous value to the array.\n    \/\/ 5. Return the array.\n    \/\/ 6.\n    \/\/ 7.\n}","language":"go"}
{"task_id":"MBGP\/318","completion":"    if (s == 0) {\n        return 0\n    }\n    if (s == 1) {\n        return 1\n    }\n    if (s == 2) {\n        return 2\n    }\n    if (s == 3) {\n        return 3\n    }\n    if (s == 4) {\n        return 4\n    }\n    if (s == 5) {\n        return 5\n    }\n    if (s == 6) {\n        return 6\n    }\n    if (s == 7) {\n        return 7\n    }\n    if (s == 8) {\n        return 8\n    }\n    if (s == 9) {\n        return 9\n    }\n    if (s == 10) {\n        return 10\n    }\n    if (s == 11) {\n       ","language":"go"}
{"task_id":"MBGP\/319","completion":"    \/\/ 1. Split the string into words\n    words := text.Split(' ')\n    \/\/ 2. Loop through the words\n    for word := words {\n        \/\/ 3. If the word is longer than five characters, add it to the result\n        if len(word) > 5 {\n            result := append(result, word)\n        }\n    }\n    \/\/ 4. Return the result\n    return result\n}","language":"go"}
{"task_id":"MBGP\/320","completion":"    var sum []int\n    var sum_of_squares []int\n    for i := 0; i < n; i++ {\n        sum[i] = i\n        sum_of_squares[i] = i * i\n    }\n    var sum_of_squares_sum = sum_of_squares.sum()\n    var sum_of_squares_squared = sum_of_squares.map(square).sum()\n    return sum_of_squares_sum - sum_of_squares_squared\n}","language":"go"}
{"task_id":"MBGP\/321","completion":"    i int\n    i := 0\n    while (s[i] != '0') {\n        i := i + 1\n    }\n    i := i + 1\n    s := s[i:]\n    i := 0\n    while (s[i] != '0') {\n        i := i + 1\n    }\n    i := i + 1\n    s := s[i:]\n    i := 0\n    while (s[i] != '0') {\n        i := i + 1\n    }\n    i := i + 1\n    s := s[i:]\n    i := 0\n    while (s[i] != '0') {\n        i := i + 1\n    }\n    i := i + 1\n    s := s[i:]\n    i := 0\n    while (s[i] != '0') {\n","language":"go"}
{"task_id":"MBGP\/322","completion":"    var min []int\n    var min_index []int\n    for i, v := range list1 {\n        if v < min {\n            min = v\n            min_index = []int{i}\n        } else if v == min {\n            min_index = min_index + []int{i}\n        }\n    }\n    return min_index\n}","language":"go"}
{"task_id":"MBGP\/324","completion":"    var sum []int\n    for _, alt_chain := range test_tuple {\n        sum += alt_chain\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBGP\/325","completion":"    var min_squares int\n    min_squares := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if (i + j == n) {\n                min_squares++\n            }\n        }\n    }\n    return min_squares\n}","language":"go"}
{"task_id":"MBGP\/326","completion":"    var word_map []map[string]int {\n        \/\/ Create a map of words and their counts\n        \/\/ Initialize the map with the first word in the list\n        \/\/ Count the number of occurrences of each word in the list\n        \/\/ Return the word with the highest count\n    }\n    \/\/ Loop through the list of words\n    for word, count in word_map {\n        \/\/ If the word is not in the map, add it with the count 1\n        \/\/ Otherwise, increment the count by 1\n    }\n    \/\/ Return the word with the highest count\n}","language":"go"}
{"task_id":"MBGP\/328","completion":"    if m == 0 {\n        return list1\n    }\n    if n == 0 {\n        return []\n    }\n    if n > m {\n        return list1[m:] + list1[:m]\n    }\n    return []\n}","language":"go"}
{"task_id":"MBGP\/330","completion":"    match := regex.Match(text, \/(\\w{3,})\/g)\n    if match {\n        return match.Groups()\n    }\n    return nil\n}","language":"go"}
{"task_id":"MBGP\/331","completion":"    if n == 0 {\n        return 0\n    }\n    return 1 + count_unset_bits(n & (n - 1))\n}","language":"go"}
{"task_id":"MBGP\/332","completion":"    map[str1]int 0\n    for i, c := range str1 {\n        if map[c]++ == 0 {\n            map[c] = 1\n        }\n    }\n    return map\n}","language":"go"}
{"task_id":"MBGP\/333","completion":"\tsort.Sort(sub_li, []([]string, []int) {\n\t\treturn []([]string, []int) {\n\t\t\tif (sub_li.Length == 0) {\n\t\t\t\treturn []([]string, []int) {}\n\t\t\t}\n\t\t\tif (sub_li.Length == 1) {\n\t\t\t\treturn []([]string, []int) {\n\t\t\t\t\treturn []([]string, []int) {\n\t\t\t\t\t\treturn []([]string, []int) {\n\t\t\t\t\t\t\treturn []([]string, []int) {\n\t\t\t\t\t\t\t\treturn []([]string, []int) {\n\t\t\t\t\t\t\t\t\treturn []([]string, []int) {\n\t\t\t\t\t\t\t\t\t\treturn []([]string, []int) {\n\t\t\t\t\t\t\t\t\t\t\treturn []([]string, []int) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn []([]string, []int) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn []([]string, []int) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn []","language":"go"}
{"task_id":"MBGP\/335","completion":"    var sum []float64\n    var i int\n    sum = 0.0\n    for (i = 0; i < n; i++) {\n        sum += (i + 1) * (a + i) \/ 2.0\n    }\n    return sum * d\n}","language":"go"}
{"task_id":"MBGP\/337","completion":"    match := text =~ \/[^.!?]+$\/\n    if match {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"go"}
{"task_id":"MBGP\/338","completion":"    i int = 0\n    for i := 0; i < s.length - 1; i++ {\n        if s[i] == s[i + 1] {\n            i++\n        } else {\n            break\n        }\n    }\n    return i\n}","language":"go"}
{"task_id":"MBGP\/340","completion":"    var min []int\n    var min1 []int\n    var min2 []int\n    var sum []int\n    min = []int{lst[0], lst[1], lst[2]}\n    min1 = []int{lst[0], lst[1], lst[2]}\n    min2 = []int{lst[0], lst[1], lst[2]}\n    for _, i := range lst {\n        if i < min[0] {\n            min[0] = i\n        }\n        if i < min[1] {\n            min[1] = i\n        }\n        if i < min[2] {\n            min[2] = i\n        }\n    }\n    for _, i := range lst {\n        if i < min1[0] {\n            min1[0] = i\n        }\n        if i < min1[1] {\n            min1[1] = i\n        }\n        if i ","language":"go"}
{"task_id":"MBGP\/343","completion":"    c int {\n        0\n    }\n    for _, v := range s {\n        if v == \"a\" {\n            c = c + 1\n        }\n        if v == \"b\" {\n            c = c + 1\n        }\n        if v == \"c\" {\n            c = c + 1\n        }\n        if v == \"d\" {\n            c = c + 1\n        }\n        if v == \"e\" {\n            c = c + 1\n        }\n        if v == \"f\" {\n            c = c + 1\n        }\n        if v == \"g\" {\n            c = c + 1\n        }\n        if v == \"h\" {\n            c = c + 1\n        }\n        if v == \"i\" {\n            c = c + 1\n","language":"go"}
{"task_id":"MBGP\/344","completion":"    var count int\n    for i := n; i <= m; i++ {\n        if (i % 2 == 1) {\n            count += 1\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/348","completion":"    var ways []int\n    ways[0] = 1\n    for i := 1; i < M; i++ {\n        ways[i] = 0\n        for j := 0; j < i; j++ {\n            ways[i] += ways[j]\n        }\n    }\n    return ways[M]\n}","language":"go"}
{"task_id":"MBGP\/349","completion":"    if len(string0) == 0 {\n        return \"No\"\n    }\n    for i := 0; i < len(string0); i++ {\n        if string0[i] != string[i % len(string)] {\n            return \"No\"\n        }\n    }\n    return \"Yes\"\n}","language":"go"}
{"task_id":"MBGP\/350","completion":"    var i int\n    var c int\n    var length int\n    length = 0\n    for i := 0; i < s.Length; i++ {\n        c = s[i]\n        if (s.Contains(c)) {\n            s = s.Remove(c)\n            length++\n        }\n    }\n    return length\n}","language":"go"}
{"task_id":"MBGP\/355","completion":"    if (radius == 0) {\n        return 0\n    }\n    return (2 * radius + 1) * count_Rectangles(radius - 1)\n}","language":"go"}
{"task_id":"MBGP\/360","completion":"    var i int\n    i := 1\n    while i < n {\n        i := i * 7\n    }\n    return i\n}","language":"go"}
{"task_id":"MBGP\/361","completion":"    for _, v := range list1 {\n        if v == nil {\n            list1.pop()\n        } else {\n            if v != []interface{} {\n                if v.len() == 0 {\n                    list1.pop()\n                } else {\n                    if v.len() != 0interface{} {\n                        remove_empty(v)\n                    }\n                }\n            }\n        }\n    }\n    return list1\n}","language":"go"}
{"task_id":"MBGP\/364","completion":"    var flipCount = 0\n    var flip = 0\n    for (i, c) in enumerate(string) {\n        flip = (flip + 1) % 2\n        if (c == flip) {\n            flipCount += 1\n        }\n    }\n    return flipCount\n}","language":"go"}
{"task_id":"MBGP\/370","completion":"\tsort.float_sort(price)\n}","language":"go"}
{"task_id":"MBGP\/371","completion":"\tvar missing_element int\n\tsort.insertion_sort(A)\n\tmissing_element := (right_element - left_element) + 1\n\treturn missing_element\n}","language":"go"}
{"task_id":"MBGP\/374","completion":"    if len(str) == 1 {\n        return [str]\n    }\n    result := make([]string, len(str))\n    for i := 0; i < len(str); i++ {\n        for perm in permute_string(str[:i] + str[i+1:]) {\n            result[i] = perm\n            result[i+1:] = []\n            append(result, str[i])\n        }\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/376","completion":"    \/\/ remove duplicates\n    \/\/ return a tuple with unique elements\n    \/\/ return []interface{} if no unique elements\n    \/\/ return []interface{} if test_tup is empty\n    \/\/ return []interface{} if test_tup has only one element\n\n    \/\/ remove duplicates\n    \/\/ return a tuple with unique elements\n    \/\/ return []interface{} if no unique elements\n    \/\/ return []interface{} if test_tup is empty\n    \/\/ return []interface{} if test_tup has only one element\n\n    \/\/ remove duplicates\n    \/\/ return a tuple with unique elements\n    \/\/ return []interface{} if no unique elements\n    \/\/ return []interface{} if test_tup is empty\n    \/\/ return []interface{} if test_tup has only one element\n\n    \/\/ remove duplicates\n    \/\/ return a tuple with unique elements\n    \/\/ return []interface{} if no unique elements\n    \/\/ return []interface{} if test_tup is empty\n    \/\/ return []interface{} if test_tup has only one element\n\n    \/\/ remove duplicates\n    \/\/ return a tuple","language":"go"}
{"task_id":"MBGP\/377","completion":"    i int = 0\n    for (i, _, _) in range(len(s)) {\n        if s[i] == c {\n            s = s.slice(0, i) + s.slice(i + 1)\n        }\n    }\n    return s\n}","language":"go"}
{"task_id":"MBGP\/378","completion":"    var first []int = []int{test_list[0]}\n    var last []int = []int{test_list[test_list.len - 1]}\n    test_list.pop()\n    test_list.insert(0, last)\n    return first\n}","language":"go"}
{"task_id":"MBGP\/381","completion":"\tfunc (data [][]interface{}) [][]interface{} {\n\t\tvar result [][]interface{}\n\t\tfor data, i := range list_data {\n\t\t\tresult[i] = data[index_no]\n\t\t}\n\t\treturn result\n\t}\n}","language":"go"}
{"task_id":"MBGP\/382","completion":"\tvar i int\n\tvar j int\n\tvar k int\n\tvar count int\n\tvar n int\n\tvar left int\n\tvar right int\n\tvar mid int\n\tvar mid_index int\n\tvar mid_value int\n\tvar mid_index_value int\n\tvar mid_value_index int\n\tvar mid_value_index_value int\n\tvar mid_value_index_value_index int\n\tvar mid_value_index_value_index_value int\n\tvar mid_value_index_value_index_value_index int\n\tvar mid_value_index_value_index_value_index_value int\n\tvar mid_value_index_value_index_value_index_value_index int\n\tvar mid_value_index_value_index_value_index_value_index_value int\n\tvar mid_value_index_value_index_value_index_value_index_value_index int\n\tvar mid_value_index_value_index_value_index_value_index_value_index_value int\n\tvar mid_value_index_value_index_value","language":"go"}
{"task_id":"MBGP\/383","completion":"    n := n ^ (n >> 1)\n    if (n & 1) n := n ^ (n >> 1)\n    return n\n}","language":"go"}
{"task_id":"MBGP\/390","completion":"    var i int\n    for i := 0; i < len(list); i++ {\n        list[i] = string0 + list[i]\n    }\n    return list\n}","language":"go"}
{"task_id":"MBGP\/391","completion":"\tmap[string]map[string]int = {\n\t\t\"{\"\n\t\tfor _, v1 in ipairs(l1) {\n\t\t\tmap[v1]int = {\n\t\t\t\t\"{\"\n\t\t\t\tfor _, v2 in ipairs(l2) {\n\t\t\t\t\tmap[v1][v2]int = l3[int(v2)]\n\t\t\t\t}\n\t\t\t\t\"}\"\n\t\t\t}\n\t\t}\n\t\t\"}\"\n\t}\n}","language":"go"}
{"task_id":"MBGP\/392","completion":"    if (n == 0) {\n        return 0\n    }\n    if (n % 2 == 0) {\n        return get_max_sum(n\/2) + get_max_sum(n\/2)\n    }\n    if (n % 3 == 0) {\n        return get_max_sum(n\/3) + get_max_sum(n\/3) + get_max_sum(n\/3)\n    }\n    if (n % 4 == 0) {\n        return get_max_sum(n\/4) + get_max_sum(n\/4) + get_max_sum(n\/4) + get_max_sum(n\/4)\n    }\n    if (n % 5 == 0) {\n        return get_max_sum(n\/5) + get_max_sum(n\/5) + get_max_sum(n\/5) + get_max_sum","language":"go"}
{"task_id":"MBGP\/393","completion":"    var max_length []int\n    var max_list []int\n    var i int\n    for i := 0; i < len(input_list); i++ {\n        if len(input_list[i]) > len(max_list) {\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n        }\n    }\n    return &max_length, &max_list\n}","language":"go"}
{"task_id":"MBGP\/395","completion":"    if len(str1) == 0 {\n        return nil\n    }\n    var map[string]int = 0\n    for i := 0; i < len(str1); i++ {\n        if map[str1[i]] == 0 {\n            map[str1[i]] = 1\n        } else {\n            return str1[i]\n        }\n    }\n    return nil\n}","language":"go"}
{"task_id":"MBGP\/396","completion":"    if (string.Length < 2) {\n        return \"Invalid\"\n    }\n    var regex := \/(.).*\\1\/\n    if (regex.Match(string)) {\n        return \"Valid\"\n    }\n    return \"Invalid\"\n}","language":"go"}
{"task_id":"MBGP\/398","completion":"    var sum []int\n    for i, n := range nums {\n        sum += n []int\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBGP\/400","completion":"    var freq []int = []int{0}\n    for _, v := range test_list {\n        freq[v] += 1\n    }\n    for _, v := range freq {\n        if v == 1 {\n            return v\n        }\n    }\n    return 0\n}","language":"go"}
{"task_id":"MBGP\/401","completion":"\tvar res [][]int = [][]int{};\n\tfor _, v1 := range test_tup1 {\n\t\tfor _, v2 := range test_tup2 {\n\t\t\tres = append(res, (v1 + v2))\n\t\t}\n\t}\n\treturn res\n}","language":"go"}
{"task_id":"MBGP\/402","completion":"    if (r < 0 || p < 0 || n < 0) {\n        panic(\"ncr_modp: r or p or n should be non-negative\")\n    }\n    if (n < r) {\n        panic(\"ncr_modp: n should be greater than r\")\n    }\n    if (n < p) {\n        panic(\"ncr_modp: n should be greater than p\")\n    }\n    return (n - r) * pow(p, r) * pow(1 - p, n - r)\n}","language":"go"}
{"task_id":"MBGP\/403","completion":"    regex := \"^(https?:\\\\\/\\\\\/)?((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))(\\\\:\\\\d+)?(\\\\\/[-a-z\\\\d%_.~+]*)*(\\\\?[;&a-z\\\\d%_.~+=-]*)?(\\\\#[-a-z\\\\d_]*)?$\"\n    return (string.Match(regex) != string.nil)\n}","language":"go"}
{"task_id":"MBGP\/407","completion":"    if n < 10 {\n        return n\n    }\n    \/\/ Split the number into digits\n    \/\/ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \/\/ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \/\/ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \/\/ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \/\/ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \/\/ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \/\/ [0, 1, 2, 3, 4,","language":"go"}
{"task_id":"MBGP\/410","completion":"    if len(listval) == 0 {\n        return 0\n    }\n    var min []int\n    min = listval[0]\n    for _, v := range listval {\n        if v < min {\n            min = v\n        }\n    }\n    return min\n}","language":"go"}
{"task_id":"MBGP\/411","completion":"    match (word, \/_[a-z]\/) {\n        word = word.slice(1)\n        word = word.toUpperCase()\n    }\n    return word\n}","language":"go"}
{"task_id":"MBGP\/416","completion":"    if (n == 0) {\n        return 0\n    }\n    if (n == 1) {\n        return 1\n    }\n    if (n == 2) {\n        return 2\n    }\n    if (n == 3) {\n        return 3\n    }\n    if (n == 4) {\n        return 4\n    }\n    if (n == 5) {\n        return 5\n    }\n    if (n == 6) {\n        return 6\n    }\n    if (n == 7) {\n        return 7\n    }\n    if (n == 8) {\n        return 8\n    }\n    if (n == 9) {\n        return 9\n    }\n    if (n == 10) {\n        return 10\n    }\n    if (n == 11) {\n       ","language":"go"}
{"task_id":"MBGP\/417","completion":"    \/\/ Group tuples by first element\n    var map [][]string = []map[string][]string{\n        \/\/ Create a map of first element to list of tuples\n        var map []string{\n            \/\/ Create a map of first element to list of tuples\n            var map []string{\n                \/\/ Create a map of first element to list of tuples\n                var map []string{\n                    \/\/ Create a map of first element to list of tuples\n                    var map []string{\n                        \/\/ Create a map of first element to list of tuples\n                        var map []string{\n                            \/\/ Create a map of first element to list of tuples\n                            var map []string{\n                                \/\/ Create a map of first element to list of tuples\n                                var map []string{\n                                    \/\/ Create a map of first element to list of tuples\n                                    var map []string{\n                                        \/\/ Create a map of first element to list of tuples\n                                        var map []string{\n                                            \/\/ Create a map of first element to list of","language":"go"}
{"task_id":"MBGP\/418","completion":"    if lst == nil {\n        return nil\n    }\n    var max []interface{}, max_len 0u\n    for _, v := range lst {\n        if v.len > max_len {\n            max_len = v.len\n            max = v\n        }\n    }\n    return max\n}","language":"go"}
{"task_id":"MBGP\/419","completion":"    var sum []int\n    var len []int\n    len = len(list1)\n    sum = 0\n    for _, i := range len {\n        sum += list1[i]\n    }\n    return sum * len\n}","language":"go"}
{"task_id":"MBGP\/422","completion":"    var sum []float64\n    for _, i := range n {\n        sum += (i * i * i)\n    }\n    return sum.sum() \/ n\n}","language":"go"}
{"task_id":"MBGP\/423","completion":"    \/\/ Initialize the dp array\n    \/\/ dp[i][j] is the maximum gold that can be collected by the i-th player\n    \/\/ and the j-th house.\n    \/\/ dp[i][j] = 0 if i = j\n    \/\/ dp[i][j] = gold[i][j] if i < j\n    \/\/ dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + gold[i][j] if i > j\n    \/\/ dp[i][j] = gold[i][j] if i = j\n    \/\/ dp[i][j] = 0 if i < j\n    \/\/ dp[i][j] = 0 if i > j\n    \/\/ dp[i][j] = 0 if i = j\n    \/\/ dp[i][j] = 0 if i < j\n    \/\/ dp[i][j] = 0 if i > j\n    \/\/ dp[i][j] ","language":"go"}
{"task_id":"MBGP\/424","completion":"    \/\/ 1. Declare a variable to hold the result\n    \/\/ 2. Declare a variable to hold the current index\n    \/\/ 3. Declare a variable to hold the current character\n    \/\/ 4. Iterate through the tuple\n    \/\/ 5. If the current character is a space, increment the index\n    \/\/ 6. If the current character is not a space, increment the index and set the character to the current character\n    \/\/ 7. If the current index is equal to the length of the tuple, set the result to the result variable\n    \/\/ 8. Return the result\n    var result []string\n    var index int\n    var character string\n    for _, _, character := range test_tuple {\n        if character == \" \" {\n            index += 1\n        } else {\n            index += 1\n            result[index] = character\n        }\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/425","completion":"    var count int\n    for i int := 0; i < len(list1); i++ {\n        if list1[i] == x {\n            count = count + 1\n        }\n        else {\n            for j int := 0; j < len(list1[i]); j++ {\n                if list1[i][j] == x {\n                    count = count + 1\n                }\n            }\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/427","completion":"    \/\/ split the date into its parts\n    \/\/ 1. year\n    \/\/ 2. month\n    \/\/ 3. day\n    dt_parts := dt.Split('-')\n    \/\/ 4. create a new date\n    dt_new := \"\"\n    \/\/ 5. add the year\n    dt_new += dt_parts[2]\n    \/\/ 6. add the month\n    dt_new += \"-\" + dt_parts[1]\n    \/\/ 7. add the day\n    dt_new += \"-\" + dt_parts[0]\n    \/\/ 8. return the new date\n    return(dt_new)\n}","language":"go"}
{"task_id":"MBGP\/428","completion":"\tfor i := 1; i < my_list.len(); i++ {\n\t\tfor j := i; j > 0 && my_list[j] < my_list[j-1]; j-- {\n\t\t\tswap(my_list[j], my_list[j-1])\n\t\t}\n\t}\n\treturn my_list\n}","language":"go"}
{"task_id":"MBGP\/431","completion":"    if len(list1) == 0 || len(list2) == 0 {\n        return nil\n    }\n    var set1 []interface{}, set2 []interface{};\n    for _, v1 in ipairs(list1) {\n        set1[v1] = true;\n    }\n    for _, v2 in ipairs(list2) {\n        if set1[v2] == nil {\n            return nil\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBGP\/432","completion":"    if (base1 + base2 > height) {\n        return (base1 + base2) \/ 2.0\n    } else {\n        return (base1 + base2) \/ 2.0 + height \/ 2.0\n    }\n}","language":"go"}
{"task_id":"MBGP\/436","completion":"    for _, i := range list1 {\n        if i < 0 {\n            print(i)\n        }\n    }\n}","language":"go"}
{"task_id":"MBGP\/437","completion":"    \/\/ 1. Create a new string by concatenating all the characters of str1\n    \/\/    except for the characters that are odd.\n    \/\/ 2. Return the new string.\n    return \"\"\n}","language":"go"}
{"task_id":"MBGP\/438","completion":"    var count = 0\n    for _, _, _ := range test_list {\n        if _, _, _ == test_list {\n            count += 1\n        }\n    }\n    return count.ToString()\n}","language":"go"}
{"task_id":"MBGP\/439","completion":"    var sum []int = []int{0}\n    for _, v := range L {\n        sum = append(sum, v)\n    }\n    return sum.sum()\n}","language":"go"}
{"task_id":"MBGP\/440","completion":"    \/\/ split the text into words\n    words := text.Split(\" \")\n    \/\/ iterate through the words\n    for word, index := range words {\n        \/\/ if the word is an adverb\n        if word.Contains(\"!!\") {\n            \/\/ return the index and the word\n            return &index, &word\n        }\n    }\n    \/\/ if no adverb is found\n    return nil\n}","language":"go"}
{"task_id":"MBGP\/442","completion":"    var count []int64\n    for _, i := range nums {\n        if i > 0 {\n            count = append(count, 1)\n        }\n    }\n    return sum(count) \/ len(count)\n}","language":"go"}
{"task_id":"MBGP\/444","completion":"    for _, v := range test_list {\n        v.Trim(K)\n    }\n    return test_list\n}","language":"go"}
{"task_id":"MBGP\/445","completion":"    \/\/ Initialize result array\n    result := make([][]int, len(test_tup1), len(test_tup2))\n    \/\/ For each tuple in test_tup1\n    for i := 0; i < len(test_tup1); i++ {\n        \/\/ For each tuple in test_tup2\n        for j := 0; j < len(test_tup2); j++ {\n            \/\/ Multiply the tuple elements and add to the result array\n            result[i][j] := 0\n            for k := 0; k < len(test_tup1[i]); k++ {\n                result[i][j] += test_tup1[i][k] * test_tup2[j][k]\n            }\n        }\n    }\n    \/\/ Return the result array\n    return result\n}","language":"go"}
{"task_id":"MBGP\/447","completion":"    return map { (x, i) => x ^ nums[i] } nums\n}","language":"go"}
{"task_id":"MBGP\/451","completion":"    text2 := \"\"\n    for ch1, ch2 in zip(text1, text1) {\n        if ch1 != \" \" && ch2 != \" \" {\n            text2 += ch1\n        }\n    }\n    return text2\n}","language":"go"}
{"task_id":"MBGP\/452","completion":"    if (actual_cost < sale_amount) {\n        return nil\n    }\n    return actual_cost - sale_amount\n}","language":"go"}
{"task_id":"MBGP\/453","completion":"\tvar sum int\n\tfor i := 2; i <= n; i++ {\n\t\tif n % i == 0 {\n\t\t\tsum += i\n\t\t}\n\t}\n\treturn sum\n}","language":"go"}
{"task_id":"MBGP\/456","completion":"    for _, s := range stringlist {\n        s.reverse()\n    }\n    return stringlist\n}","language":"go"}
{"task_id":"MBGP\/457","completion":"    if lst.len() == 0 {\n        return nil\n    }\n    var min []interface{}\n    var min_len 0u64\n    for _, v := range lst {\n        if v.len() < min_len {\n            min = v\n            min_len = v.len()\n        }\n    }\n    return min\n}","language":"go"}
{"task_id":"MBGP\/459","completion":"    regex := \/([A-Z]+)\/g\n    return str1.Replace(regex, \"\")\n}","language":"go"}
{"task_id":"MBGP\/462","completion":"\tvar res [][]string\n\tvar len := list1.len()\n\tfor _, i := range len {\n\t\tfor _, j := range i + 1 {\n\t\t\tres = append(res, append(list1[i], list1[j]))\n\t\t}\n\t}\n\treturn res\n}","language":"go"}
{"task_id":"MBGP\/464","completion":"\tfor _, v := range map {\n\t\tif v != n {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}","language":"go"}
{"task_id":"MBGP\/465","completion":"    map[string]string {k, v} = if v == nil {nil, k} else {k, v}\n    map[string]string {k, v} = if v == \"\" {nil, k} else {k, v}\n    map[string]string {k, v} = if v == 0 {nil, k} else {k, v}\n    map[string]string {k, v} = if v == false {nil, k} else {k, v}\n    map[string]string {k, v} = if v == true {nil, k} else {k, v}\n    map[string]string {k, v} = if v == nil {nil, k} else {k, v}\n    map[string]string {k, v} = if v == [] {nil, k} else {k, v}\n    map[string]string {k, v} = if v == {} {","language":"go"}
{"task_id":"MBGP\/468","completion":"    \/\/ 1. Initialize the maximum product to 0\n    max_product := 0;\n\n    \/\/ 2. Iterate through the array\n    for (i := 0; i < n; i++) {\n        \/\/ 3. Initialize the product to 1\n        product := 1;\n\n        \/\/ 4. Iterate through the array from the current index to the end\n        for (j := i; j < n; j++) {\n            \/\/ 5. Multiply the current element with the product\n            product := product * arr[j];\n        }\n\n        \/\/ 6. Update the maximum product if the current product is greater than the current maximum product\n        if (product > max_product) {\n            max_product = product;\n        }\n    }\n\n    \/\/ 7. Return the maximum product\n    return max_product;\n}","language":"go"}
{"task_id":"MBGP\/474","completion":"    for (i, v := range str1) {\n        if v == ch {\n            str1[i] = newch\n        }\n    }\n    return str1\n}","language":"go"}
{"task_id":"MBGP\/475","completion":"\tfunc (map[string]int)[][]interface{} {\n\t\treturn sort.go(map1, []int, [][]interface{})\n\t}\n}","language":"go"}
{"task_id":"MBGP\/477","completion":"    if len(string0) == 0 {\n        return \"invalid\"\n    }\n    for i, c := range string0 {\n        if ord(c) >= ord(\"a\") and ord(c) <= ord(\"z\") {\n            continue\n        }\n        return \"invalid\"\n    }\n    return \"true\"\n}","language":"go"}
{"task_id":"MBGP\/478","completion":"    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go","language":"go"}
{"task_id":"MBGP\/480","completion":"    \/\/ Your code here\n}","language":"go"}
{"task_id":"MBGP\/482","completion":"    match (text, \/([A-Z][a-z]*)\/g) {\n        if (it != nil) {\n            return \"Yes\"\n        } else {\n            return \"No\"\n        }\n    }\n}","language":"go"}
{"task_id":"MBGP\/483","completion":"    var i int\n    i := 1\n    while (i <= x) {\n        if (i! % x == 0) {\n            return i\n        }\n        i := i + 1\n    }\n    return -1\n}","language":"go"}
{"task_id":"MBGP\/484","completion":"    \/\/ 1. Create a map of the first tuple\n    \/\/ 2. Loop through the second tuple\n    \/\/ 3. If the second tuple key is in the first tuple, remove it\n    \/\/ 4. Return the new list\n    map1 := make(map[string]string)\n    for _, v := range test_list1 {\n        map1[v] = v\n    }\n    for _, v := range test_list2 {\n        if map1[v] == nil {\n            return nil\n        }\n    }\n    for _, v := range test_list2 {\n        test_list2 = test_list2 - []string{v}\n    }\n    return test_list2\n}","language":"go"}
{"task_id":"MBGP\/485","completion":"    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return A[0]\n    }\n    if n == 2 {\n        return A[0] > A[1] ? A[0] : A[1]\n    }\n    if n == 3 {\n        return A[0] > A[1] ? A[0] : A[1] > A[2] ? A[1] : A[2]\n    }\n    if n == 4 {\n        return A[0] > A[1] ? A[0] : A[1] > A[2] ? A[1] : A[2] > A[3] ? A[2] : A[3]\n    }\n    if n == 5 {\n        return A[0] > A[1] ? A[0] : A[1] > A[2] ? A[1","language":"go"}
{"task_id":"MBGP\/486","completion":"    if (k < 0 || k > n) {\n        return 0.0\n    }\n    if (k == 0 || k == n) {\n        return 1.0\n    }\n    return p * binomial_probability(n - 1, k - 1, p) + (1 - p) * binomial_probability(n - 1, k, p)\n}","language":"go"}
{"task_id":"MBGP\/487","completion":"\tfor _, _, last in tup {\n\t\tfor i, _, _ in tup {\n\t\t\tif last < i {\n\t\t\t\tswap(tup, i, last)\n\t\t\t}\n\t\t}\n\t}\n\treturn tup\n}","language":"go"}
{"task_id":"MBGP\/488","completion":"\treturn (1.5 * a * a) + (0.5 * a)\n}","language":"go"}
{"task_id":"MBGP\/491","completion":"\tvar i int, sum float64\n\tsum := 0.0\n\tfor i := 0; i < n; i++ {\n\t\tsum += (1.0 - r) * pow(r, i) \/ factorial(i)\n\t}\n\treturn sum\n}","language":"go"}
{"task_id":"MBGP\/493","completion":"    var polygons [][][]float64 = [][][]float64\n    var x = startx\n    var y = starty\n    var dx = endx - startx\n    var dy = endy - starty\n    var d = sqrt(dx * dx + dy * dy)\n    var steps = d \/ radius\n    var step = 0.0\n    var x1 = startx\n    var y1 = starty\n    var x2 = endx\n    var y2 = endy\n    var x3 = 0.0\n    var y3 = 0.0\n    var x4 = 0.0\n    var y4 = 0.0\n    var x5 = 0.0\n    var y5 = 0.0\n    var x6 = 0.0\n    var y6 = 0.0\n    var x7 = 0.0\n    var y7 = 0.0\n    var x8 = 0.0\n    \n","language":"go"}
{"task_id":"MBGP\/494","completion":"    var num []int = []int{0}\n    for _, v := range test_tup {\n        num[v] = num[v] + 1\n    }\n    for _, v := range num {\n        if v == 0 {\n            return \"\" + v\n        }\n        if v % 2 == 1 {\n            return \"\" + v\n        }\n    }\n}","language":"go"}
{"task_id":"MBGP\/495","completion":"    \/\/ 1. Find all lowercase substrings\n    \/\/ 2. Replace them with empty string\n    \/\/ 3. Return the resultant string\n    return str1.ReplaceAll(\"(?i)(?<=[a-z])(?=[A-Z])\", \"\")\n}","language":"go"}
{"task_id":"MBGP\/497","completion":"\treturn math.pi * r * r + math.pi * r * h\n}","language":"go"}
{"task_id":"MBGP\/500","completion":"    return string(join(\"\", list))\n}","language":"go"}
{"task_id":"MBGP\/501","completion":"    if x == 0 {\n        return 0\n    }\n    if y == 0 {\n        return 0\n    }\n    if x == y {\n        return x\n    }\n    if x > y {\n        return num_comm_div(x - y, y)\n    }\n    if y > x {\n        return num_comm_div(x, y - x)\n    }\n}","language":"go"}
{"task_id":"MBGP\/507","completion":"    for (i, word) := range removewords {\n        if (list1.Contains(word)) {\n            list1.Remove(word)\n        }\n    }\n    return list1\n}","language":"go"}
{"task_id":"MBGP\/508","completion":"\tl1.sort()\n\tl2.sort()\n\tfor _, v1, v2 := range l1, l2 {\n\t\tif v1 != v2 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}","language":"go"}
{"task_id":"MBGP\/510","completion":"    var dp [][]int = [][]int{\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0","language":"go"}
{"task_id":"MBGP\/511","completion":"    var minSum []int\n    var factorSum []int\n    var i int\n    var j int\n    var k int\n    var factor int\n    var factorSum = []int{num}\n    var minSum = []int{num}\n    var i int\n    var j int\n    var k int\n    var factor int\n    var factorSum = []int{num}\n    var minSum = []int{num}\n    for i := 2; i <= num; i++ {\n        factorSum[i] = 0\n    }\n    for i := 2; i <= num; i++ {\n        for j := 2; j <= i; j++ {\n            if (i % j == 0) {\n                factorSum[i] += j\n            }\n        }\n    }\n    for i := 2; i <= num; i++ {\n        if (factorSum[i] == num) {\n            minSum[i] ","language":"go"}
{"task_id":"MBGP\/512","completion":"    var freq := make(map[int]int, 0)\n    for i, elem in ipairs(test_tuple) {\n        if is_tuple(elem) {\n            for j, e in ipairs(elem) {\n                freq[e] += 1\n            }\n        } else {\n            freq[elem] += 1\n        }\n    }\n    return freq\n}","language":"go"}
{"task_id":"MBGP\/516","completion":"\tvar max_digit := 0\n\tfor i, num := range nums {\n\t\tmax_digit = max(max_digit, num.digit)\n\t}\n\tfor i, num := range nums {\n\t\tnum.digit = 0\n\t\tfor j, digit := range 0 .. max_digit {\n\t\t\tif num < (digit * 10^i) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tnum.digit = j + 1\n\t\t\tnum -= digit * 10^i\n\t\t}\n\t}\n\tfor i, num := range nums {\n\t\tnum.digit = num.digit \/ (max_digit + 1)\n\t}\n\treturn nums\n}","language":"go"}
{"task_id":"MBGP\/518","completion":"\tvar root []float64\n\tvar i int\n\tvar guess int\n\tvar diff int\n\tvar guess_sqr int\n\tvar diff_sqr int\n\tvar sqr_root int\n\tsqr_root = sqrt(num)\n\troot = sqr_root\n\tfor (i = 0; i < 50; i++) {\n\t\tguess = root - (sqr_root - root) \/ 2\n\t\tguess_sqr = sqrt(guess)\n\t\tdiff = guess_sqr - guess\n\t\tdiff_sqr = sqrt(diff)\n\t\tif (diff_sqr == guess_sqr) {\n\t\t\tbreak\n\t\t}\n\t\troot = guess\n\t}\n\treturn root\n}","language":"go"}
{"task_id":"MBGP\/519","completion":"\tvar vol float64\n\tvol = 0.0\n\tfor _, i := range num {\n\t\tvol += (\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\t(\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t","language":"go"}
{"task_id":"MBGP\/520","completion":"    var gcd []int = []int{1}\n    var lcm []int = []int{1}\n    for _, v := range l {\n        gcd = append(gcd, v)\n    }\n    for _, v := range l {\n        lcm = append(lcm, v \/ gcd)\n    }\n    return lcm\n}","language":"go"}
{"task_id":"MBGP\/522","completion":"    if len(arr) == 1 {\n        return 1\n    }\n    arr.sort()\n    i := 0\n    j := 1\n    max := 0\n    while i < len(arr) - 1 && j < len(arr) - 1 {\n        if arr[i] == arr[j] - 1 {\n            i := i + 1\n            j := j + 1\n        } else if arr[i] < arr[j] - 1 {\n            i := i + 1\n        } else {\n            j := j + 1\n        }\n        if j - i > max {\n            max = j - i\n        }\n    }\n    return max\n}","language":"go"}
{"task_id":"MBGP\/523","completion":"    if (str1.length < 8) {\n        return []string{\n            \"String length should be atleast 8.\"\n        }\n    }\n    if (str1.length > 8) {\n        return []string{\n            \"String length should be atmost 8.\"\n        }\n    }\n    if (str1.length == 8) {\n        if (str1.match(\/[A-Z]\/)) {\n            return []string{\n                \"String must have 1 upper case character.\"\n            }\n        }\n        if (str1.match(\/[a-z]\/)) {\n            return []string{\n                \"String must have 1 lower case character.\"\n            }\n        }\n        if (str1.match(\/[0-9]\/)) {\n            return []string{\n                \"String must have 1 number.\"\n            }\n        }\n    }\n    return []string{\n        \"Valid string.\"\n","language":"go"}
{"task_id":"MBGP\/524","completion":"    \/\/ 1. Initialize the maximum sum and the current sum\n    \/\/ 2. Iterate through the array\n    \/\/ 3. If the current element is greater than the previous element,\n    \/\/    update the current sum and the maximum sum\n    \/\/ 4. Return the maximum sum\n    \/\/ 5. If the current element is less than the previous element,\n    \/\/    update the current sum to be the current element\n    \/\/ 6. Return the current sum\n\n    int maxSum = 0\n    int currentSum = 0\n    for (i, v := range arr) {\n        if (v > arr[i - 1]) {\n            currentSum += v\n            maxSum = max(maxSum, currentSum)\n        } else {\n            currentSum = v\n        }\n    }\n    return maxSum\n}","language":"go"}
{"task_id":"MBGP\/526","completion":"    str1 = str1.replace \/ \/g, \"\"\n    return (str1[0].toUpper() + str1[1:-1] + str1[-1].toUpper()).replace \/ \/g, \"\"\n}","language":"go"}
{"task_id":"MBGP\/528","completion":"    var min_len []int\n    var min_lists [][]int\n    var i int\n    var j int\n    min_len = 1\n    min_lists = []\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            if (list1[i][j] < list1[i][min_len - 1]) {\n                min_len = j + 1\n            }\n        }\n        min_lists.append(list1[i][:min_len])\n    }\n    return (min_len, min_lists)\n}","language":"go"}
{"task_id":"MBGP\/530","completion":"    var negatives []int64\n    var positives []int64\n    var total []int64\n    for _, i := range nums {\n        if i < 0 {\n            negatives = append(negatives, 1)\n        } else {\n            positives = append(positives, 1)\n        }\n    }\n    total = append(negatives, positives)\n    return sum(total) \/ len(total)\n}","language":"go"}
{"task_id":"MBGP\/531","completion":"    if (V == 0) return 0\n    if (m == 0) return -1\n    if (coins[m-1] > V) return min_coins(coins, m-1, V)\n    return min(min_coins(coins, m-1, V) + 1, min_coins(coins, m, V-coins[m-1]) + 1)\n}","language":"go"}
{"task_id":"MBGP\/532","completion":"    var str1_len = len(str1)\n    var str2_len = len(str2)\n    if str1_len != str2_len {\n        return false\n    }\n    var str1_hash = 0\n    var str2_hash = 0\n    for (i, c) := range str1_len {\n        str1_hash += ord(str1[i])\n        str2_hash += ord(str2[i])\n    }\n    return str1_hash == str2_hash\n}","language":"go"}
{"task_id":"MBGP\/534","completion":"    var i int\n    for i := 0; i < len(text); i++ {\n        if text[i] == pattern[0] {\n            if pattern.Length == 1 {\n                return [i, i]\n            }\n            var j int\n            for j := i + 1; j < len(text); j++ {\n                if text[j] == pattern[1] {\n                    return [i, j]\n                }\n            }\n        }\n    }\n    return nil\n}","language":"go"}
{"task_id":"MBGP\/535","completion":"    return (2 * pi * r ** 2) + (2 * pi * r)\n}","language":"go"}
{"task_id":"MBGP\/537","completion":"    var words []string\n    words = str1.split(\" \")\n    var seen []string\n    for _, w := range words {\n        if w not in seen {\n            seen = append(seen, w)\n        } else {\n            return w\n        }\n    }\n    return \"None\"\n}","language":"go"}
{"task_id":"MBGP\/538","completion":"\tres := make([]string, len(str1))\n\tfor i, c := range str1 {\n\t\tres[i] = c\n\t}\n\treturn res\n}","language":"go"}
{"task_id":"MBGP\/539","completion":"    res := make([]int, 0)\n    for i, base in zip(index, bases_num) {\n        res = append(res, pow(base, i))\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/540","completion":"    var freqs []int = []int{0}\n    var max = 0\n    var min = 0\n    for _, i := range arr {\n        freqs[i] += 1\n        if (freqs[i] > max) {\n            max = freqs[i]\n        }\n        if (freqs[i] < min) {\n            min = freqs[i]\n        }\n    }\n    var diff = max - min\n    return diff\n}","language":"go"}
{"task_id":"MBGP\/541","completion":"\tfor _, i := range n {\n\t\tfor _, j := range n {\n\t\t\tif (i + j == n) return True\n\t\t}\n\t}\n\treturn False\n}","language":"go"}
{"task_id":"MBGP\/542","completion":"    match := text.ReplaceAll(\" \", \":\")\n    match := match.ReplaceAll(\",\", \":\")\n    match := match.ReplaceAll(\".\", \":\")\n    return match\n}","language":"go"}
{"task_id":"MBGP\/543","completion":"    int count = 0\n    for (int i = 0; i < (int) ceil(log(num1) \/ log(10)); i++) {\n        if (num1 % (int) pow(10, i) == 0) {\n            count = count + i\n        }\n    }\n    for (int i = 0; i < (int) ceil(log(num2) \/ log(10)); i++) {\n        if (num2 % (int) pow(10, i) == 0) {\n            count = count + i\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/544","completion":"    var flat_list []string\n    for _, v := range test_list {\n        flat_list += v\n    }\n    return flat_list\n}","language":"go"}
{"task_id":"MBGP\/545","completion":"    return (n & 0x55555555) << 1 | (n & 0xAAAAAAAA) >> 1\n}","language":"go"}
{"task_id":"MBGP\/546","completion":"    if len(string0) == 0 {\n        return None\n    }\n    if string0[0] == char {\n        return 0\n    }\n    return last_occurence_char(string0[1:], char)\n}","language":"go"}
{"task_id":"MBGP\/547","completion":"    var total []int64\n    total = 0\n    for i := 0; i < n; i++ {\n        total += Hamming_Distance(i, i+1)\n    }\n    return total\n}","language":"go"}
{"task_id":"MBGP\/548","completion":"    var dp []int = make(arr.len, 0)\n    for _, i := range arr {\n        var max := 0\n        for _, j := range arr {\n            if (i < j && arr[i] < arr[j]) {\n                max = max max + 1\n            }\n        }\n        dp[i] = max\n    }\n    return max(dp)\n}","language":"go"}
{"task_id":"MBGP\/550","completion":"\tif low < high {\n\t\tmid int = (low + high) \/ 2\n\t\tif arr[mid] > arr[mid + 1] {\n\t\t\treturn arr[mid]\n\t\t}\n\t\tif arr[mid] < arr[mid + 1] {\n\t\t\treturn find_Max(arr, mid + 1, high)\n\t\t}\n\t\treturn find_Max(arr, low, mid - 1)\n\t}\n\treturn arr[low]\n}","language":"go"}
{"task_id":"MBGP\/551","completion":"    var list2 []int = []\n    for _, v := range list1 {\n        list2.append(v[n])\n    }\n    return list2\n}","language":"go"}
{"task_id":"MBGP\/552","completion":"    if (len(seq_nums) == 0) {\n        return \"Non Linear Sequence\"\n    }\n    for _, i := range seq_nums {\n        if (i - seq_nums[0] != 1) {\n            return \"Non Linear Sequence\"\n        }\n    }\n    return \"Linear Sequence\"\n}","language":"go"}
{"task_id":"MBGP\/553","completion":"    var res float64\n    for _, v := range test_tup {\n        res = res + v.0 \/ 256.0\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/557","completion":"    \/\/ Go code here\n}","language":"go"}
{"task_id":"MBGP\/558","completion":"    if n1 == n2 {\n        return 0\n    }\n    if n1 > n2 {\n        n1, n2 = n2, n1\n    }\n    int count := 0\n    while n1 != 0 {\n        n1 := n1 \/ 10\n        count := count + 1\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/560","completion":"    var res []int\n    var i int\n    for i := 0; i < test_tup1.Length; i++ {\n        res.Add(test_tup1[i])\n    }\n    for i := 0; i < test_tup2.Length; i++ {\n        if (res.Contains(test_tup2[i])) {\n            res.Remove(test_tup2[i])\n        } else {\n            res.Add(test_tup2[i])\n        }\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/561","completion":"    var result []int{}\n    for _, v := range test_list {\n        for _, w := range test_list {\n            if v != w {\n                result[v] = result[v] ?? []\n                result[v].append(w)\n            }\n        }\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/563","completion":"    \/\/ split the string into an array of strings\n    text := text.Split(\",\")\n    \/\/ iterate over the array\n    for _, value := range text {\n        \/\/ remove the leading and trailing quotation marks\n        value := value.Trim('\"')\n        \/\/ return the value\n        yield value\n    }\n}","language":"go"}
{"task_id":"MBGP\/565","completion":"    \/\/ Go\/Golang\n    \/\/ Go:\n    \/\/ 1. split string into characters\n    \/\/ 2. filter out empty strings\n    \/\/ 3. return the filtered list\n    \/\/ Golang:\n    \/\/ 1. split string into characters\n    \/\/ 2. filter out empty strings\n    \/\/ 3. return the filtered list\n    \/\/ 4. return [] if the string is empty\n    \/\/ 5. return [string] if the string is not empty\n    \/\/ 6. return [] if the string is null\n    \/\/ 7. return [string] if the string is not null\n    \/\/ 8. return [] if the string is nil\n    \/\/ 9. return [string] if the string is not nil\n    \/\/ 10. return [] if the string is empty\n    \/\/ 11. return [string] if the string is not empty\n    \/\/ 12. return nil if the string is null\n    \/\/ 13. return nil if the string is not null\n    \/\/ 14.","language":"go"}
{"task_id":"MBGP\/567","completion":"\tif len(list1) == 0 {\n\t\treturn true\n\t}\n\tfor _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, ","language":"go"}
{"task_id":"MBGP\/568","completion":"    \/\/ Fill this in.\n}","language":"go"}
{"task_id":"MBGP\/569","completion":"\tlist2 := make([][]string, len(list1))\n\tfor i := 0; i < len(list1); i++ {\n\t\tfor j := 0; j < len(list1[i]); j++ {\n\t\t\tlist2[i][j] = list1[i][j]\n\t\t}\n\t}\n\treturn sort(list2)\n}","language":"go"}
{"task_id":"MBGP\/570","completion":"    \/\/ Your code here\n}","language":"go"}
{"task_id":"MBGP\/571","completion":"    arr.sort()\n    arr_len := len(arr)\n    max_sum := 0\n    for i := 0; i < arr_len; i++ {\n        for j := i + 1; j < arr_len; j++ {\n            if (arr[i] + arr[j] <= K) {\n                max_sum := max(max_sum, arr[i] + arr[j])\n            }\n        }\n    }\n    return max_sum\n}","language":"go"}
{"task_id":"MBGP\/572","completion":"    \/\/ Your code here\n}","language":"go"}
{"task_id":"MBGP\/573","completion":"    var unique_numbers []int = []int{0}\n    for _, v := range list_data {\n        unique_numbers.add(v)\n    }\n    unique_numbers.sort()\n    var product = 1\n    for _, v := range unique_numbers {\n        product *= v\n    }\n    return product\n}","language":"go"}
{"task_id":"MBGP\/574","completion":"    return 2 * pi * r * h + 2 * pi * r * h * (1 - cos(pi \/ 2))\n}","language":"go"}
{"task_id":"MBGP\/575","completion":"    var i int\n    var count int\n    for i := 0; i < R - L + 1; i++ {\n        if (A[i] % N != 0) {\n            count = i - L + 1\n            break\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/578","completion":"    var result []int\n    var i1 := 0\n    var i2 := 0\n    var i3 := 0\n    while (i1 < len(list1) && i2 < len(list2) && i3 < len(list3)) {\n        result.append(list1[i1])\n        result.append(list2[i2])\n        result.append(list3[i3])\n        i1 := i1 + 1\n        i2 := i2 + 1\n        i3 := i3 + 1\n    }\n    if (i1 < len(list1)) {\n        result = result.append(list1[i1:])\n    }\n    if (i2 < len(list2)) {\n        result = result.append(list2[i2:])\n    }\n    if (i3 < len(list3)) {\n        result = result.append(list3[i3:])\n    }\n    return result","language":"go"}
{"task_id":"MBGP\/579","completion":"    var res []int\n    for _, v1, v2 := range test_tup1 {\n        if v1 != v2 {\n            res = append(res, v1)\n        }\n    }\n    for _, v1, v2 := range test_tup2 {\n        if v1 != v2 {\n            res = append(res, v2)\n        }\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/580","completion":"    \/\/ Go\/Golang\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return []interface{}\n    \/\/ return","language":"go"}
{"task_id":"MBGP\/584","completion":"    match := regex.Match(text, \/(\\w+)$\/)\n    if match {\n        return match.Groups[0]\n    }\n    return nil\n}","language":"go"}
{"task_id":"MBGP\/586","completion":"    var arr []int\n    arr = a\n    for _, i := range arr {\n        if (i % k == 0) {\n            arr = append(arr[0..i], arr[i..-1])\n        }\n    }\n    return arr\n}","language":"go"}
{"task_id":"MBGP\/592","completion":"    var binomial []int\n    for i := 0; i < n; i++ {\n        binomial[i] = 1\n    }\n    for i := 1; i < n; i++ {\n        for j := 0; j < i; j++ {\n            binomial[i] = binomial[i] * binomial[j]\n        }\n    }\n    var sum = 0\n    for i := 0; i < n; i++ {\n        sum = sum + binomial[i]\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBGP\/593","completion":"    ip := ip.Split('.')\n    for i, octet in ip.Zip(ip) {\n        if octet == '0' {\n            ip[i] = ''\n        }\n    }\n    return Join('.', ip)\n}","language":"go"}
{"task_id":"MBGP\/594","completion":"    var even = 0\n    var odd = 0\n    for _, i := range list1 {\n        if i % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n    }\n    return even - odd\n}","language":"go"}
{"task_id":"MBGP\/596","completion":"    var tuple_size []int = 0\n    for _, _, _, _, _, _ := range tuple_list {\n        tuple_size += 1\n    }\n    return tuple_size\n}","language":"go"}
{"task_id":"MBGP\/597","completion":"\tarr1, arr2, m, n, k\n}","language":"go"}
{"task_id":"MBGP\/598","completion":"    var sum []int\n    var num []int\n    num = number.ToArray()\n    sum = 0\n    for i := 0; i < num.Length; i++ {\n        sum = sum + (num[i] ** num.Length)\n    }\n    if sum == number {\n        return true\n    } else {\n        return false\n    }\n}","language":"go"}
{"task_id":"MBGP\/599","completion":"    var sum = 0\n    var avg = 0\n    for _, i := range number {\n        sum += i\n    }\n    avg = sum \/ number\n    return &Result{sum, avg}\n}","language":"go"}
{"task_id":"MBGP\/602","completion":"    \/\/ Go code here\n    var hash := make(map[char]string)\n    for _, c := range str1 {\n        if hash[c] == nil {\n            hash[c] = \"\"\n        } else {\n            return c\n        }\n    }\n    return \"None\"\n}","language":"go"}
{"task_id":"MBGP\/603","completion":"    var l := make([]int, n)\n    for i := 0; i < n; i++ {\n        l[i] = i + 1\n    }\n    for i := 0; i < n - 1; i++ {\n        l[i] = l[i + 1] + l[i]\n    }\n    return l\n}","language":"go"}
{"task_id":"MBGP\/604","completion":"    return s.trim().split(\" \").reverse().join(\" \")\n}","language":"go"}
{"task_id":"MBGP\/606","completion":"\treturn math.Pi \/ 180.0 * degree\n}","language":"go"}
{"task_id":"MBGP\/607","completion":"    var regex := \/pattern\/g\n    var match := regex.Match(text)\n    if match != nil {\n        match.Groups()\n    }\n}","language":"go"}
{"task_id":"MBGP\/608","completion":"    if (n == 1) {\n        return 1\n    }\n    return bell_Number(n-1) + bell_Number(n-2) + bell_Number(n-3)\n}","language":"go"}
{"task_id":"MBGP\/609","completion":"    if (N == 0) {\n        return 0\n    }\n    if (N < 0) {\n        return floor_Min(A, B, N + 1)\n    }\n    if (A < B) {\n        return A\n    }\n    return floor_Min(A - B, B, N - 1)\n}","language":"go"}
{"task_id":"MBGP\/610","completion":"    \/\/ Your code here\n}","language":"go"}
{"task_id":"MBGP\/612","completion":"    if lst.len() == 0 {\n        return []\n    }\n    if lst.len() == 1 {\n        return lst[0]\n    }\n    return merge(lst[0], merge(lst[1], lst[lst.len() - 1]))\n}","language":"go"}
{"task_id":"MBGP\/613","completion":"    var max_value []interface{}\n    for key, value := range test_list {\n        max_value[key] = max(max_value[key], value[1])\n    }\n    return max_value\n}","language":"go"}
{"task_id":"MBGP\/615","completion":"    n := len(nums)\n    sum := 0\n    for i, tup := range n {\n        sum += nums[i][0] + nums[i][1] + nums[i][2] + nums[i][3]\n    }\n    return sum \/ n\n}","language":"go"}
{"task_id":"MBGP\/617","completion":"    if (a == 0 || b == 0) {\n        return 0\n    }\n    if (d == 0) {\n        return 1\n    }\n    if (d < 0) {\n        return -1\n    }\n    if (d > a) {\n        return -1\n    }\n    if (d > b) {\n        return -1\n    }\n    if (d < b - a) {\n        return -1\n    }\n    if (d == b - a) {\n        return 0\n    }\n    if (d == b - a - 1) {\n        return 1\n    }\n    if (d == b - a - 2) {\n        return 2\n    }\n    if (d == b - a - 3) {\n        return 3\n    }\n    if (d","language":"go"}
{"task_id":"MBGP\/618","completion":"    return nums1.map { |n| n \/ nums2[0] }.reverse()\n}","language":"go"}
{"task_id":"MBGP\/619","completion":"    var num_str []string\n    for _, v := range test_str {\n        if (v =~ \/\\d+\/) {\n            num_str += v\n        }\n    }\n    return string.Join(\"\", num_str)\n}","language":"go"}
{"task_id":"MBGP\/620","completion":"    if (n == 0) {\n        return 0\n    }\n    if (n == 1) {\n        return 1\n    }\n    if (n == 2) {\n        return 2\n    }\n    if (n == 3) {\n        return 3\n    }\n    if (n == 4) {\n        return 4\n    }\n    if (n == 5) {\n        return 5\n    }\n    if (n == 6) {\n        return 6\n    }\n    if (n == 7) {\n        return 7\n    }\n    if (n == 8) {\n        return 8\n    }\n    if (n == 9) {\n        return 9\n    }\n    if (n == 10) {\n        return 10\n    }\n    if (n == 11) {\n       ","language":"go"}
{"task_id":"MBGP\/621","completion":"    var result []string\n    for _, v := range test_list {\n        result.append(v)\n    }\n    for _, v := range result {\n        if (v == '0') {\n            result[result.length - 1] = '1'\n        } else {\n            result[result.length - 1] = (v as string).to_int() + K\n        }\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/622","completion":"\tarr1, arr2, n, arr1, arr2, n\n\tarr1 = sort(arr1, compare)\n\tarr2 = sort(arr2, compare)\n\tn = arr1.len()\n\tif n % 2 == 0 {\n\t\treturn (arr1[n \/ 2] + arr2[n \/ 2]) \/ 2.0\n\t} else {\n\t\treturn arr1[n \/ 2]\n\t}\n}","language":"go"}
{"task_id":"MBGP\/623","completion":"    n := 0 if n < 0 else n\n    nums := []int{n}\n    for i, v := range nums {\n        nums[i] := v\n    }\n    nums = nums.map { (x, y) => x ** y }\n    return nums\n}","language":"go"}
{"task_id":"MBGP\/624","completion":"    return string0.ToUpper()\n}","language":"go"}
{"task_id":"MBGP\/628","completion":"    string1 := \"\"\n    for i := 0; i < len(string0); i++ {\n        if string0[i] == \" \" {\n            string1 += \"*\"\n        }\n        string1 += string0[i]\n    }\n    string1 += \"%20\"\n    return string1\n}","language":"go"}
{"task_id":"MBGP\/630","completion":"    var coord_list [][]int\n    coord_list = []\n    for _, (x, y) in ipairs(test_tup) {\n        coord_list = append(coord_list, [[x, y - 1], [x, y + 1], [x - 1, y], [x + 1, y]])\n    }\n    return coord_list\n}","language":"go"}
{"task_id":"MBGP\/631","completion":"    match := regexp.replace(text, \"\\s+\", \"_\")\n    match = regexp.replace(match, \"_\", \"\\s+\")\n    return match\n}","language":"go"}
{"task_id":"MBGP\/632","completion":"    for _, i := range num_list {\n        if num_list[i] == 0 {\n            num_list.splice(i, 1)\n            num_list.append(0)\n        }\n    }\n    return num_list\n}","language":"go"}
{"task_id":"MBGP\/638","completion":"\tv = math.Max(v, 0)\n\tt = math.Max(t, 0)\n\treturn math.If(v == 0, 0, math.If(t == 0, 0, 35.74 + 0.6215 * t - 35.75 * math.pow(v \/ 100, 0.16) + 0.4275 * math.pow(v \/ 100, 0.16)))\n}","language":"go"}
{"task_id":"MBGP\/639","completion":"    var lower = []string{{}}\n    for _, name := range sample_names {\n        if name.IsLower {\n            lower.Add(name)\n        }\n    }\n    return sum(map.len(lower))\n}","language":"go"}
{"task_id":"MBGP\/640","completion":"    if len(items) == 0 {\n        return \"\"\n    }\n    if len(items) == 1 {\n        return items[0]\n    }\n    if items[0] == \"(\" {\n        return remove_parenthesis(items[1:])\n    }\n    if items[len(items) - 1] == \")\" {\n        return remove_parenthesis(items[0:len(items) - 1])\n    }\n    return remove_parenthesis(items[0:len(items) - 1]) + items[len(items) - 1]\n}","language":"go"}
{"task_id":"MBGP\/644","completion":"    var output []int\n    var i int\n    for i := 0; i < k; i++ {\n        output[i] = input[input.length - 1 - i]\n    }\n    for i := k; i < input.length; i++ {\n        output[i] = input[i - k]\n    }\n    return output\n}","language":"go"}
{"task_id":"MBGP\/646","completion":"    if (N == 0) {\n        return 0\n    }\n    return (N - K + 1) * (N + K) * (N + 1) \/ 6\n}","language":"go"}
{"task_id":"MBGP\/647","completion":"    \/\/ split string at uppercase letters\n    \/\/ return array of strings\n    \/\/ return nil if string is empty\n    \/\/ return nil if string is nil\n}","language":"go"}
{"task_id":"MBGP\/652","completion":"    \/\/ Go\/Golang\n    \/\/ 1. Create a new list to hold the flattened tuples\n    \/\/ 2. For each row in the matrix, add the first element of the row to the new list\n    \/\/ 3. For each row in the matrix, add the second element of the row to the new list\n    \/\/ 4. For each row in the matrix, add the third element of the row to the new list\n    \/\/ 5. Return the new list\n    \/\/ 1. Create a new list to hold the flattened tuples\n    \/\/ 2. For each row in the matrix, add the first element of the row to the new list\n    \/\/ 3. For each row in the matrix, add the second element of the row to the new list\n    \/\/ 4. For each row in the matrix, add the third element of the row to the new list\n    \/\/ 5. Return the new list\n    \/\/ 1. Create a new list to hold the flattened tuples\n    \/\/ 2. For each row in the matrix, add the first element of the row to the new list\n    ","language":"go"}
{"task_id":"MBGP\/653","completion":"    map[string][]int {\n        map[string][]int {\n            \/\/ ...\n        }\n    }\n}","language":"go"}
{"task_id":"MBGP\/655","completion":"    var sum []int = []int{0}\n    for (i := 1; i <= n; i++) {\n        sum += [i * i * i * i * i]\n    }\n    return sum.Sum()\n}","language":"go"}
{"task_id":"MBGP\/656","completion":"    int i := 0\n    int j := 0\n    int min_sum := 0\n    int diff := 0\n    int sum := 0\n    for i := 0; i < n; i++ {\n        sum := a[i] + b[i]\n        diff := abs(a[i] - b[i])\n        min_sum = min_sum + diff\n    }\n    return min_sum\n}","language":"go"}
{"task_id":"MBGP\/657","completion":"\tfor _, i := range n {\n\t\tif (n % i == 0) {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}","language":"go"}
{"task_id":"MBGP\/659","completion":"    var dup []int\n    dup = []int{x[0]}\n    for _, i := range x {\n        if dup.Contains(i) {\n            dup = dup + []int{i}\n        } else {\n            dup.Add(i)\n        }\n    }\n    return dup\n}","language":"go"}
{"task_id":"MBGP\/660","completion":"    var result []int\n    if l1 < l2 && r1 > r2 {\n        result = []int{l1,r1}\n    } else if l1 > l2 && r1 < r2 {\n        result = []int{l2,r2}\n    } else if l1 < l2 && r1 < r2 {\n        result = []int{l1,r2}\n    } else if l1 > l2 && r1 > r2 {\n        result = []int{l2,r1}\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/661","completion":"    var max []int\n    var sum []int\n    var i int\n    var j int\n    var k int\n    var sum []int\n    max = arr []int{0}\n    sum = arr []int{0}\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (arr[i] + arr[j] + arr[k] > max[0]) {\n                    max[0] = arr[i] + arr[j] + arr[k]\n                }\n            }\n        }\n    }\n    return max[0]\n}","language":"go"}
{"task_id":"MBGP\/662","completion":"\tmap[string][]int result = {}\n\tfor _, v := range dict1 {\n\t\tfor _, i := range v {\n\t\t\tresult[i] = append(result[i], v[i])\n\t\t}\n\t}\n\tfor _, v := range result {\n\t\tfor _, i := range v {\n\t\t\tv[i] = sort(v[i])\n\t\t}\n\t}\n\treturn result\n}","language":"go"}
{"task_id":"MBGP\/663","completion":"    var k := 0\n    while (k < n) {\n        if (k % x == y) {\n            return k\n        }\n        k += 1\n    }\n    return -1\n}","language":"go"}
{"task_id":"MBGP\/666","completion":"    var count = 0\n    for _, c := range string0 {\n        if c == string {\n            count += 1\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/668","completion":"    var i int\n    var j int\n    var string1 string\n    var count int\n    string1 = \"\"\n    for (i = 0; i < string0.length; i++) {\n        if (string0[i] == string) {\n            count = 1\n            for (j = i + 1; j < string0.length; j++) {\n                if (string0[j] == string) {\n                    count += 1\n                } else {\n                    break\n                }\n            }\n            if (count > 1) {\n                string1 += string0[i]\n            } else {\n                string1 += string\n            }\n        } else {\n            string1 += string0[i]\n        }\n    }\n    return string1\n}","language":"go"}
{"task_id":"MBGP\/669","completion":"    match := \/((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/\n    if match {\n        return \"Valid IP address\"\n    }\n    return \"Invalid IP address\"\n}","language":"go"}
{"task_id":"MBGP\/671","completion":"\treturn (n & ~(n - 1))\n}","language":"go"}
{"task_id":"MBGP\/674","completion":"    \/\/ split string into words\n    words := string0.Split(\" \")\n    \/\/ create a map to store words\n    map := make(map[string]string)\n    \/\/ iterate over words\n    for word := range words {\n        \/\/ if word is not in map, add it to map\n        if map[word] == nil {\n            map[word] = word\n        }\n    }\n    \/\/ convert map to string\n    return map.Keys().join(\" \")\n}","language":"go"}
{"task_id":"MBGP\/676","completion":"    \/\/ 1. Split the string into array of characters\n    text1 := text1.Split('')\n    \/\/ 2. Iterate over the array and remove the characters that are not alphanumeric\n    text2 := []byte(text1.Length)\n    for i := 0; i < text1.Length; i++ {\n        if (text1[i].IsAlpha() || text1[i].IsDigit()) {\n            text2[i] = text1[i]\n        }\n    }\n    \/\/ 3. Join the array back into a string\n    text3 := \"\"byte(text2.Length)\n    for i := 0; i < text2.Length; i++ {\n        text3 += text2[i]\n    }\n    return text3\n}","language":"go"}
{"task_id":"MBGP\/678","completion":"    return str1.replace(\" \", \"\")\n}","language":"go"}
{"task_id":"MBGP\/679","completion":"    return map.keys[key]\n}","language":"go"}
{"task_id":"MBGP\/682","completion":"    return nums1.map { n1 } { n2 } { n1 * n2 }\n}","language":"go"}
{"task_id":"MBGP\/684","completion":"    var count []int\n    for _, i := range str {\n        count[i] = 0\n    }\n    for _, i := range str {\n        count[i] += 1\n    }\n    return count[x]\n}","language":"go"}
{"task_id":"MBGP\/685","completion":"    var sum int\n    for i int := 1; i <= n; i++ {\n        if (isPrime(i)) {\n            sum += i\n        }\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBGP\/686","completion":"    var freq []int = {}\n    for _, v := range test_tup {\n        freq[v] = freq[v] + 1 if v in freq else 1\n    }\n    return &freq\n}","language":"go"}
{"task_id":"MBGP\/688","completion":"\treturn math.Abs(math.Complex(a, b))\n}","language":"go"}
{"task_id":"MBGP\/689","completion":"    \/\/ Your code here\n}","language":"go"}
{"task_id":"MBGP\/692","completion":"    if (N == 0) {\n        return 0\n    }\n    return (N % 10) + last_Two_Digits(N \/ 10)\n}","language":"go"}
{"task_id":"MBGP\/693","completion":"    text2 := \"\"\n    for i, c := range text1 {\n        if c == \" \" {\n            continue\n        }\n        text2 = append(text2, c)\n    }\n    return text2\n}","language":"go"}
{"task_id":"MBGP\/694","completion":"\tvar unique_values []int\n\tfor _, v := range test_dict {\n\t\tunique_values += v\n\t}\n\treturn unique_values\n}","language":"go"}
{"task_id":"MBGP\/696","completion":"    \/\/ zip the two lists\n    for i,j := range list1 {\n        for k,l := range list2 {\n            append(zip(i,j,k,l))\n        }\n    }\n    \/\/ return the zipped list\n    return\n}","language":"go"}
{"task_id":"MBGP\/700","completion":"    var count 0\n    for _, v := range li {\n        if min <= v && v <= max {\n            count++\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/702","completion":"    arr.sort()\n    amin := arr[0]\n    amax := arr[arr.len-1]\n    if amax-amin > k {\n        return amax-amin-k\n    }\n    return 0\n}","language":"go"}
{"task_id":"MBGP\/704","completion":"    var harmonicSum []float64\n    for _, i := range n {\n        harmonicSum[i] = 1.0 \/ i\n    }\n    var harmonicSum []float64 = harmonicSum + harmonicSum\n    return harmonicSum[n]\n}","language":"go"}
{"task_id":"MBGP\/705","completion":"\tfor _, sub_list := range list1 {\n\t\tsort(sub_list, compare_by_length, compare_by_value)\n\t}\n\treturn list1\n}","language":"go"}
{"task_id":"MBGP\/707","completion":"    var bits []int = []int{0}\n    for i := 0; i < n; i++ {\n        bits[i] = 1\n    }\n    var count []int = []int{0}\n    for i := 0; i < n; i++ {\n        count[i] = bits[i]\n    }\n    for i := 1; i < n; i++ {\n        count[i] = count[i - 1] + count[i - 1]\n    }\n    return count[n - 1]\n}","language":"go"}
{"task_id":"MBGP\/708","completion":"    \/\/ split string0 into an array of characters\n    var chars := []string{string0}\n    \/\/ loop through the array\n    for _, i := range chars {\n        \/\/ if the character is a space, add a 0 to the array\n        if chars[i] == \" \" {\n            chars[i] = 0\n        }\n        \/\/ otherwise, add the character to the array\n        else {\n            chars[i] = chars[i]\n        }\n    }\n    \/\/ return the array\n    return chars\n}","language":"go"}
{"task_id":"MBGP\/709","completion":"    var unique_keys []int\n    for _, v := range test_list {\n        unique_keys[v] = 0\n    }\n    for _, v := range test_list {\n        unique_keys[v] += 1\n    }\n    return string.Join(\"\", map[int, string]unique_keys)\n}","language":"go"}
{"task_id":"MBGP\/712","completion":"    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go","language":"go"}
{"task_id":"MBGP\/714","completion":"    var fac []int\n    fac = []int{2}\n    for i := 3; i <= n; i += 2 {\n        fac = append(fac, i)\n    }\n    for i := 3; i <= n; i += 2 {\n        fac = filter(x * i == n, fac)\n    }\n    return len(fac)\n}","language":"go"}
{"task_id":"MBGP\/715","completion":"    var res []int\n    for _, elem := range test_str {\n        if elem == \",\" {\n            continue\n        }\n        res = append(res, int(elem))\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/717","completion":"\tvar mean []float64\n\tmean = mean(data)\n\tvar []float64\n\tfor _, v := range data {\n\t\tvar += (v - mean) * (v - mean)\n\t}\n\treturn sqrt(var \/ float64(len(data)))\n}","language":"go"}
{"task_id":"MBGP\/719","completion":"    match := 0\n    for i := 0; i < len(text); i++ {\n        if text[i] == \"a\" {\n            match += 1\n        } else if match > 0 {\n            match -= 1\n        } else {\n            return \"Not matched!\"\n        }\n    }\n    if match == 0 {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"go"}
{"task_id":"MBGP\/721","completion":"    if (N == 0) {\n        return 0.0\n    }\n    if (N == 1) {\n        return cost[0][0]\n    }\n    if (N == 2) {\n        return cost[0][0] + cost[1][1]\n    }\n    if (N == 3) {\n        return cost[0][0] + cost[1][1] + cost[2][2]\n    }\n    if (N == 4) {\n        return cost[0][0] + cost[1][1] + cost[2][2] + cost[3][3]\n    }\n    if (N == 5) {\n        return cost[0][0] + cost[1][1] + cost[2][2] + cost[3][3] + cost[4][4]\n    }\n    if (N == 6) {\n        return cost[0][0] ","language":"go"}
{"task_id":"MBGP\/722","completion":"    return {\n        name: &students[name],\n        height: &students[name][0],\n        weight: &students[name][1]\n    }\n}","language":"go"}
{"task_id":"MBGP\/723","completion":"    var count []int = []int{0}\n    for _, i := range nums1 {\n        for _, j := range nums2 {\n            if i == j {\n                count[0] += 1\n            }\n        }\n    }\n    return count[0]\n}","language":"go"}
{"task_id":"MBGP\/724","completion":"    var sum []int\n    sum = []int{0}\n    for _, i := range power {\n        sum = append(sum, base ** i)\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBGP\/725","completion":"    match := regexp_extract(text1, '\"([^\"]*)\"', 1)\n    if match != nil {\n        return match\n    }\n    match := regexp_extract(text1, '([^\"]*)\"', 1)\n    if match != nil {\n        return match\n    }\n    return nil\n}","language":"go"}
{"task_id":"MBGP\/727","completion":"    regex := \/[^a-zA-Z0-9]\/\n    return string.Replace(regex, \"\")\n}","language":"go"}
{"task_id":"MBGP\/729","completion":"    return nums1.map { |n| nums2.map { |m| n + m } }\n}","language":"go"}
{"task_id":"MBGP\/730","completion":"    \/\/ Remove consecutive duplicates from the list\n    \/\/ Return the list with no consecutive duplicates\n    \/\/ Hint: Use a hash table\n    \/\/ Hint: Use a set\n    \/\/ Hint: Use a while loop\n    \/\/ Hint: Use a for loop\n    \/\/ Hint: Use a map\n    \/\/ Hint: Use a filter\n    \/\/ Hint: Use a reduce\n    \/\/ Hint: Use a lambda\n    \/\/ Hint: Use a list comprehension\n    \/\/ Hint: Use a slice\n    \/\/ Hint: Use a slice\n    \/\/ Hint: Use a slice\n    \/\/ Hint: Use a slice\n    \/\/ Hint: Use a slice\n    \/\/ Hint: Use a slice\n    \/\/ Hint: Use a slice\n    \/\/ Hint: Use a slice\n    \/\/ Hint: Use a slice\n    \/\/ Hint: Use a slice\n    \/\/ Hint: Use a slice\n    \/\/ Hint: Use a slice\n    \/\/ Hint: Use a slice\n    \/\/ Hint: Use a slice\n   ","language":"go"}
{"task_id":"MBGP\/731","completion":"\treturn math.pi * r * (r + h)\n}","language":"go"}
{"task_id":"MBGP\/732","completion":"    \/\/ split the string into an array of words\n    words := text.Split(' ')\n    \/\/ iterate over the array\n    for word := range words {\n        \/\/ replace all the special characters with a colon\n        word = word.Replace(\n            \/\/ space\n            ' ',\n            '::'\n        )\n        \/\/ replace all the commas with a colon\n        word = word.Replace(\n            \/\/ comma\n            ',',\n            ':'\n        )\n        \/\/ replace all the dots with a colon\n        word = word.Replace(\n            \/\/ dot\n            '.',\n            ':'\n        )\n        \/\/ replace the original word with the new word\n        words[word] = word\n    }\n    \/\/ join the array back into a string\n    return words.Join(' ')\n}","language":"go"}
{"task_id":"MBGP\/733","completion":"\tfor i := 0; i < len(A); i++ {\n\t\tif A[i] == x {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}","language":"go"}
{"task_id":"MBGP\/734","completion":"    var sum []int = []int{0}\n    for _, i := range arr {\n        for _, j := range arr {\n            if i + j == n {\n                sum = append(sum, arr[i] * arr[j])\n            }\n        }\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBGP\/735","completion":"    \/\/ 1. Get the rightmost bit\n    \/\/ 2. Set the rightmost bit to 0\n    \/\/ 3. Set the leftmost bit to 1\n    \/\/ 4. Return the number\n    return (n & (n - 1)) | (n >> 1)\n}","language":"go"}
{"task_id":"MBGP\/736","completion":"\ti int := 0\n\tj int := 0\n\twhile (i < a.len && a[i] < x) {\n\t\ti++\n\t}\n\treturn i\n}","language":"go"}
{"task_id":"MBGP\/737","completion":"    if (string.Length < 2) {\n        return \"Invalid\"\n    }\n    regex := \/a|e|i|o|u\/\n    if (regex.Match(string[0]) == nil) {\n        return \"Invalid\"\n    }\n    for (i, c := range string) {\n        if (regex.Match(c) == nil) {\n            return \"Invalid\"\n        }\n    }\n    return \"Valid\"\n}","language":"go"}
{"task_id":"MBGP\/738","completion":"    var res float64\n    res = 1.0\n    for _, i := range n - 1 {\n        res *= i\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/739","completion":"\tv int = 0\n\tfor {\n\t\tv = math.min(v, math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math.min(math","language":"go"}
{"task_id":"MBGP\/742","completion":"\treturn 0.5 * math.pow(side, 2)\n}","language":"go"}
{"task_id":"MBGP\/743","completion":"    var list2 []int = []int{list1}\n    var i int\n    for i := 0; i < m; i++ {\n        list2.append(list2.shift())\n    }\n    for i := 0; i < n; i++ {\n        list2.push(list1.shift())\n    }\n    return list2\n}","language":"go"}
{"task_id":"MBGP\/745","completion":"    \/\/ Find all numbers between startnum and endnum\n    \/\/ that are divisible by every digit\n    \/\/ in the range.\n    \/\/ Return the list of numbers.\n    \/\/ Hint:\n    \/\/ - You can use the modulo operator (%)\n    \/\/ - You can use the range operator (..)\n    \/\/ - You can use the \"for\" loop to iterate over the numbers\n    \/\/ - You can use the \"for\" loop to iterate over the digits\n    \/\/ - You can use the \"for\" loop to iterate over the numbers\n    \/\/ - You can use the \"for\" loop to iterate over the digits\n    \/\/ - You can use the \"for\" loop to iterate over the numbers\n    \/\/ - You can use the \"for\" loop to iterate over the digits\n    \/\/ - You can use the \"for\" loop to iterate over the numbers\n    \/\/ - You can use the \"for\" loop to iterate over the digits\n    \/\/ - You can use the \"for\" loop to iterate","language":"go"}
{"task_id":"MBGP\/746","completion":"    if (r < 0 || a < 0) {\n        return nil\n    }\n    if (r == 0 || a == 0) {\n        return 0\n    }\n    if (r == 1 || a == 1) {\n        return 1\n    }\n    if (r % 2 == 0) {\n        return (sector_area(r \/ 2, a) + sector_area(r \/ 2, a - 1)) * 2\n    }\n    return (sector_area(r - 1, a) + sector_area(r - 1, a - 1)) * 2\n}","language":"go"}
{"task_id":"MBGP\/747","completion":"\tvar lcs [][]string = [][]string{m,n};\n\tvar i int, j int, k int;\n\tvar lcs_len int;\n\tvar i_min_len int, j_min_len int;\n\tvar i_max_len int, j_max_len int;\n\tvar i_min_i int, j_min_i int;\n\tvar i_max_i int, j_max_i int;\n\tvar i_min_j int, j_min_j int;\n\tvar i_max_j int, j_max_j int;\n\tvar i_min_k int, j_min_k int;\n\tvar i_max_k int, j_max_k int;\n\tvar i_min_i_j_k int, j_min_i_j_k int;\n\tvar i_max_i_j_k int, j_max_i_j_k int;\n\tvar i_min_i_j_k_l int, j_min_i_j_k_l int;\n","language":"go"}
{"task_id":"MBGP\/748","completion":"    \/\/ Go\/Golang\n    \/\/ 1. split string into words\n    \/\/ 2. for each word\n    \/\/ 2.1 if first letter is capital\n    \/\/ 2.2 add space\n    \/\/ 2.3 return string\n    \/\/ 3. return string\n    return str1\n}","language":"go"}
{"task_id":"MBGP\/749","completion":"\tvar nums []int\n\tfor _, str := range nums_str {\n\t\tnums.append(int(str))\n\t}\n\treturn sort(nums)\n}","language":"go"}
{"task_id":"MBGP\/753","completion":"\tif K > 0 {\n\t\tfor i, v := range test_list {\n\t\t\tif i < K {\n\t\t\t\treturn &v\n\t\t\t}\n\t\t}\n\t}\n\treturn []\n}","language":"go"}
{"task_id":"MBGP\/754","completion":"    \/\/ Go through the lists and find the common elements\n    for _, i1 := range l1 {\n        for _, i2 := range l2 {\n            for _, i3 := range l3 {\n                if l1[i1] == l2[i2] && l2[i2] == l3[i3] {\n                    \/\/ If the element is found, return the index\n                    return append(i1, i2, i3)\n                }\n            }\n        }\n    }\n    \/\/ If no common element is found, return an empty list\n    return []int\n}","language":"go"}
{"task_id":"MBGP\/755","completion":"    if (numbers.len() == 0) {\n        return nil\n    }\n    if (numbers.len() == 1) {\n        return numbers[0]\n    }\n    if (numbers.len() == 2) {\n        if (numbers[0] < numbers[1]) {\n            return numbers[0]\n        } else {\n            return numbers[1]\n        }\n    }\n    if (numbers.len() == 3) {\n        if (numbers[0] < numbers[1]) {\n            if (numbers[1] < numbers[2]) {\n                return numbers[1]\n            } else {\n                return numbers[2]\n            }\n        } else {\n            if (numbers[0] < numbers[2]) {\n                return numbers[0]\n            } else {\n                return numbers[2]\n            }\n        }\n    }\n    if (numbers.len() == ","language":"go"}
{"task_id":"MBGP\/757","completion":"    var count = 0\n    for _, v := range test_list {\n        if v == v[::-1] {\n            count += 1\n        }\n    }\n    return count.ToString()\n}","language":"go"}
{"task_id":"MBGP\/758","completion":"\tmap[string]int {\n\t\tmap[string]int {\n\t\t\tmap[string]int {\n\t\t\t\tmap[string]int {\n\t\t\t\t\tmap[string]int {\n\t\t\t\t\t\tmap[string]int {\n\t\t\t\t\t\t\tmap[string]int {\n\t\t\t\t\t\t\t\tmap[string]int {\n\t\t\t\t\t\t\t\t\tmap[string]int {\n\t\t\t\t\t\t\t\t\t\tmap[string]int {\n\t\t\t\t\t\t\t\t\t\t\tmap[string]int {\n\t\t\t\t\t\t\t\t\t\t\t\tmap[string]int {\n\t\t\t\t\t\t\t\t\t\t\t\t\tmap[string]int {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmap[string]int {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmap[string]int {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmap[string]int {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmap[string]int {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmap[string]int {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmap[string]int {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmap[string]int {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmap[string]int {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmap[string]int {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmap[string]int {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmap[","language":"go"}
{"task_id":"MBGP\/759","completion":"    if len(num) == 0 {\n        return false\n    }\n    if num[0] == '-' {\n        num = num[1:]\n    }\n    if num[0] == '.' {\n        num = num[1:]\n    }\n    if num.length == 0 {\n        return false\n    }\n    for i, c in ipairs(num) {\n        if c == '.' {\n            continue\n        }\n        if c == '0' {\n            return false\n        }\n        if c == '1' {\n            continue\n        }\n        if c == '2' {\n            continue\n        }\n        if c == '3' {\n            continue\n        }\n        if c == '4' {\n            continue\n        }\n        if c == '5' {\n            continue\n        }\n        if c == '6' {\n            continue\n        ","language":"go"}
{"task_id":"MBGP\/761","completion":"    if (d < 0 || a < 0) {\n        return nil\n    }\n    if (d == 0 && a == 0) {\n        return 0\n    }\n    if (d == 0) {\n        return nil\n    }\n    if (a == 0) {\n        return nil\n    }\n    if (d == a) {\n        return 0\n    }\n    if (d < a) {\n        return d \/ a\n    }\n    return (d - a) \/ a\n}","language":"go"}
{"task_id":"MBGP\/763","completion":"    var minDiff []int\n    minDiff = []int{0}\n    for i := 0; i < n; i++ {\n        minDiff[i] = arr[i+1] - arr[i]\n    }\n    minDiff.sort()\n    return minDiff[0]\n}","language":"go"}
{"task_id":"MBGP\/765","completion":"\tif (n == 1) {\n\t\treturn 1\n\t}\n\treturn (\n\t\tis_polite(n - 1) +\n\t\tis_polite(n - 2) +\n\t\tis_polite(n - 3)\n\t)\n}","language":"go"}
{"task_id":"MBGP\/769","completion":"    var diff []int\n    for _, i2 in range(0, len(li2)) {\n        if (i2 >= len(li1)) {\n            diff.append(li2[i2])\n        } else {\n            diff.append(li2[i2] - li1[i2])\n        }\n    }\n    return diff\n}","language":"go"}
{"task_id":"MBGP\/772","completion":"    \/\/ split the string into words\n    words := test_str.Split(' ')\n    \/\/ remove all words with length < K\n    for word := range words {\n        if word.Length < K {\n            words.Remove(word)\n        }\n    }\n    \/\/ join the words back into a string\n    return words.Join(' ')\n}","language":"go"}
{"task_id":"MBGP\/773","completion":"    \/\/ Find the occurrence and position of the substrings within a string.\n    \/\/ Examples:\n    \/\/ >>> occurance_substring('python programming, python language','python')\n    \/\/ >>> ('python', 0, 6)\n    \/\/ >>> occurance_substring('python programming,programming language','programming')\n    \/\/ >>> ('programming', 7, 18)\n    \/\/ >>> occurance_substring('python programming,programming language','language')\n    \/\/ >>> ('language', 31, 39)\n    var occurance [][]string{\n        0, 0\n    }\n    var position [][]int{\n        0, 0\n    }\n    var i int\n    var j int\n    for i := 0; i < text.len(); i++ {\n        for j := 0; j < pattern.len(); j++ {\n            if text[i + j] == pattern[j] {\n                if j == 0 {\n                    occurance[","language":"go"}
{"task_id":"MBGP\/774","completion":"    if (regex.test(email)) {\n        return \"Valid Email\"\n    } else {\n        return \"Invalid Email\"\n    }\n}","language":"go"}
{"task_id":"MBGP\/776","completion":"    var vowels := \"aeiou\"\n    var count := 0\n    for i := 0; i < test_str.len; i++ {\n        if test_str[i] in vowels {\n            for j := i + 1; j < test_str.len; j++ {\n                if test_str[j] in vowels {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/778","completion":"    \/\/ Go\/Golang\n    \/\/ 1. Create a new list to store the result\n    \/\/ 2. Create a new list to store the current element\n    \/\/ 3. Iterate through the given list\n    \/\/ 4. If the current element is the same as the previous element,\n    \/\/    append the current element to the result list\n    \/\/ 5. If the current element is different from the previous element,\n    \/\/    append the current element to the result list\n    \/\/ 6. If the current element is the same as the previous element,\n    \/\/    append the current element to the current element's sublist\n    \/\/ 7. If the current element is different from the previous element,\n    \/\/    append the current element to the current element's sublist\n    \/\/ 8. Return the result list\n    list1 = []\n    list2 = []\n    for _, elem := range list1 {\n        if elem == list2 {\n            list2.append(elem)\n        } else {\n            if elem != list","language":"go"}
{"task_id":"MBGP\/779","completion":"    map[string]int {\n        map[string]int {\n            map[string]int {\n                map[string]int {\n                    map[string]int {\n                        map[string]int {\n                            map[string]int {\n                                map[string]int {\n                                    map[string]int {\n                                        map[string]int {\n                                            map[string]int {\n                                                map[string]int {\n                                                    map[string]int {\n                                                        map[string]int {\n                                                            map[string]int {\n                                                                map[string]int {\n                                                                    map[string]int {\n                                                                        map[string]int {\n                                                                            map[string]int {\n                                                                                map[string]int {\n                                                                                    map[string]int {\n                                                                                        map[string]int {\n                                                                                            map[","language":"go"}
{"task_id":"MBGP\/780","completion":"    var combinations [][]int\n    var sum_list []int\n    var sum []int\n    var i int\n    var j int\n    var k int\n    var sum_list_len int\n    var combinations_len int\n    var k_len int\n    var k_index int\n    var k_index_len int\n    var k_index_index int\n    var k_index_index_len int\n    var k_index_index_index int\n    var k_index_index_index_len int\n    var k_index_index_index_index int\n    var k_index_index_index_index_len int\n    var k_index_index_index_index_index int\n    var k_index_index_index_index_index_len int\n    var k_index_index_index_index_index_index int\n    var k_index_index_index_index_index_index_len int\n    var k_index_index_index_index_index_index_index int\n    var k_index_index_index_index_index_index_index_len","language":"go"}
{"task_id":"MBGP\/781","completion":"\tif n == 1 {\n\t\treturn \"Even\"\n\t}\n\tvar divisors []int = []int{1}\n\tfor i := 2; i <= math.sqrt(n); i++ {\n\t\tif n % i == 0 {\n\t\t\tdivisors = append(divisors, i)\n\t\t\tdivisors = append(divisors, n \/ i)\n\t\t}\n\t}\n\tif len(divisors) == 2 {\n\t\treturn \"Even\"\n\t}\n\treturn \"Odd\"\n}","language":"go"}
{"task_id":"MBGP\/783","completion":"    var h := 0.0\n    var s := 0.0\n    var v := 0.0\n    var min := 0.0\n    var max := 0.0\n    if (r < g) {\n        min = g\n        max = r\n    } else {\n        min = r\n        max = g\n    }\n    if (b < min) {\n        min = b\n        max = min\n    }\n    if (b > max) {\n        min = max\n        max = b\n    }\n    var delta := max - min\n    if (delta == 0) {\n        h = 0.0\n        s = 0.0\n        v = 0.0\n    } else {\n        s = delta \/ max\n        if (r == max) {\n            v = (g - b) \/ delta\n        } else if (g ==","language":"go"}
{"task_id":"MBGP\/785","completion":"    var res []int\n    for _, elem := range test_str {\n        res.append(int(elem))\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/786","completion":"\tfor _, i := range a {\n\t\tif i < x {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn len(a)\n}","language":"go"}
{"task_id":"MBGP\/789","completion":"\treturn (\n\t\ts * 2 +\n\t\ts * math.sin(math.pi \/ l) * 2\n\t)\n}","language":"go"}
{"task_id":"MBGP\/791","completion":"    \/\/ Remove the nested record from the given tuple.\n    \/\/ Return the tuple with the nested record removed.\n    \/\/ If the given tuple is empty, return nil.\n    \/\/ If the given tuple has no nested record, return the given tuple.\n    \/\/ Examples:\n    \/\/ >>> remove_nested((1, 5, 7, (4, 6), 10))\n    \/\/ >>> (1, 5, 7, 10)\n    \/\/ >>> remove_nested((2, 6, 8, (5, 7), 11))\n    \/\/ >>> (2, 6, 8, 11)\n    \/\/ >>> remove_nested((3, 7, 9, (6, 8), 12))\n    \/\/ >>> (3, 7, 9, 12)\n    if _, _, _, _ := range test_tup {\n        if _, _, _, _ := range _ {\n            if _, _, _, _ := range ","language":"go"}
{"task_id":"MBGP\/793","completion":"\tvar i int\n\tvar j int\n\ti := 0\n\tj := n - 1\n\twhile i < j {\n\t\tif arr[i] == x {\n\t\t\treturn i\n\t\t}\n\t\tif arr[j] == x {\n\t\t\treturn j\n\t\t}\n\t\tif arr[i] < x {\n\t\t\ti := i + 1\n\t\t}\n\t\tif arr[j] > x {\n\t\t\tj := j - 1\n\t\t}\n\t}\n\treturn -1\n}","language":"go"}
{"task_id":"MBGP\/794","completion":"    if len(text) == 0 {\n        return \"Not matched!\"\n    }\n    if text[0] == \"a\" {\n        if text.Length > 1 {\n            if text[1] == \"b\" {\n                return \"Found a match!\"\n            }\n        }\n    }\n    return \"Not matched!\"\n}","language":"go"}
{"task_id":"MBGP\/800","completion":"    return text.replace(\/ \/g, \"\")\n}","language":"go"}
{"task_id":"MBGP\/802","completion":"\tarr = sort.quick_sort(arr)\n\tvar rotations []int = []int{0}\n\tfor _, i := range arr {\n\t\trotations = append(rotations, i)\n\t\trotations = append(rotations, i)\n\t\trotations = append(rotations, i)\n\t\trotations = append(rotations, i)\n\t\trotations = append(rotations, i)\n\t\trotations = append(rotations, i)\n\t\trotations = append(rotations, i)\n\t\trotations = append(rotations, i)\n\t\trotations = append(rotations, i)\n\t\trotations = append(rotations, i)\n\t\trotations = append(rotations, i)\n\t\trotations = append(rotations, i)\n\t\trotations = append(rotations, i)\n\t\trotations = append(rotations, i)\n\t\trotations = append(rotations, i)\n\t\trotations = append(rotations, i)\n\t\trotations = append(","language":"go"}
{"task_id":"MBGP\/806","completion":"    \/\/ Go\/Golang\n    \/\/ 1. Initialize counter to 0\n    \/\/ 2. Iterate through the string\n    \/\/ 3. If the current character is uppercase, increment counter\n    \/\/ 4. Return the maximum counter\n    counter := 0\n    for i, c := range test_str {\n        if c.tolower == c {\n            counter += 1\n        }\n    }\n    return counter\n}","language":"go"}
{"task_id":"MBGP\/810","completion":"    var arr []string\n    var i int\n    for := range a {\n        for := range b {\n            for := range c {\n                for := range d {\n                    arr = append(arr, \"p\")\n                    i = i + 1\n                }\n                arr = append(arr, \"q\")\n                i = i + 1\n            }\n            arr = append(arr, \"r\")\n            i = i + 1\n        }\n        arr = append(arr, \"s\")\n        i = i + 1\n    }\n    return arr\n}","language":"go"}
{"task_id":"MBGP\/812","completion":"    \/\/ split the string into words\n    \/\/ iterate over each word\n    \/\/ if the word is 'road'\n    \/\/   return 'road Rd.'\n    \/\/ else\n    \/\/   return the word\n}","language":"go"}
{"task_id":"MBGP\/814","completion":"    if (p < q) {\n        return 0\n    }\n    if (p == q) {\n        return p\n    }\n    return (p - 1) * (q - 1)\n}","language":"go"}
{"task_id":"MBGP\/815","completion":"\tarr = arr.sort()\n\tarr = sort.sort_by_dnf(arr, n)\n\treturn arr\n}","language":"go"}
{"task_id":"MBGP\/816","completion":"    \/\/ 1. Clear the values of the given tuples.\n    \/\/ 2. Return an empty tuple.\n    \/\/ 3. Return the given tuple.\n    \/\/ 4. Return the given tuple.\n    \/\/ 5. Return the given tuple.\n    \/\/ 6. Return the given tuple.\n    \/\/ 7. Return the given tuple.\n    \/\/ 8. Return the given tuple.\n    \/\/ 9. Return the given tuple.\n    \/\/ 10. Return the given tuple.\n    \/\/ 11. Return the given tuple.\n    \/\/ 12. Return the given tuple.\n    \/\/ 13. Return the given tuple.\n    \/\/ 14. Return the given tuple.\n    \/\/ 15. Return the given tuple.\n    \/\/ 16. Return the given tuple.\n    \/\/ 17. Return the given tuple.\n    \/\/ 18. Return the given tuple.\n    \/\/ 19. Return the given tuple.\n    \/\/ 20. Return the given tuple.\n    \/\/ 21. Return the given tuple.\n   ","language":"go"}
{"task_id":"MBGP\/819","completion":"    n := len(lists)\n    if n == 0 {\n        return nil, nil\n    }\n    \/\/ Count the number of times each number appears\n    counts := make(map[int]int, 0)\n    for i := 0; i < n; i++ {\n        counts[lists[i]] += 1\n    }\n    \/\/ Find the number of times each number appears\n    counts_inv := make(map[int]int, 0)\n    for i := 0; i < n; i++ {\n        counts_inv[counts[lists[i]]] += 1\n    }\n    \/\/ Find the number of times each number appears\n    counts_inv_inv := make(map[int]int, 0)\n    for i := 0; i < n; i++ {\n        counts_inv_inv[counts_inv[lists[i]]] += 1\n    }\n    \/\/ Return the number of times each number appears\n    return counts, counts_inv, counts_inv","language":"go"}
{"task_id":"MBGP\/823","completion":"    if (string.StartsWith(sample)) {\n        return \"string starts with the given substring\"\n    } else {\n        return \"string doesnt start with the given substring\"\n    }\n}","language":"go"}
{"task_id":"MBGP\/826","completion":"\tif (a + b > c && a + c > b && b + c > a) {\n\t\tif (a == b && b == c) {\n\t\t\treturn \"Equilateral Triangle\"\n\t\t}\n\t\tif (a == b || a == c || b == c) {\n\t\t\treturn \"Isosceles Triangle\"\n\t\t}\n\t\treturn \"Scalene Triangle\"\n\t}\n\treturn \"Invalid Triangle\"\n}","language":"go"}
{"task_id":"MBGP\/828","completion":"    \/\/ split string into array of chars\n    string1 := make([]string, len(string))\n    for i, c := range string0 {\n        string1[i] = c\n    }\n    \/\/ count alphabets\n    count := 0\n    for i, c := range string1 {\n        if (c >= \"a\" && c <= \"z\") count += 1\n    }\n    \/\/ count digits\n    count += 0\n    for i, c := range string1 {\n        if (c >= \"0\" && c <= \"9\") count += 1\n    }\n    \/\/ count special characters\n    count += 0\n    for i, c := range string1 {\n        if (c == \"!\" || c == \"#\" || c == \"$\" || c == \"%\" || c == \"^\" || c == \"&\") count += 1\n    }\n    return count,","language":"go"}
{"task_id":"MBGP\/829","completion":"    var map []string {\n        \/\/ map[key] = [count, value]\n    }\n    var maxCount = 0\n    var maxKey = ''\n    for key, value := range input {\n        if map[key] == nil {\n            map[key] = [1, value]\n        } else {\n            map[key][0] += 1\n        }\n        if map[key][0] > maxCount {\n            maxCount = map[key][0]\n            maxKey = key\n        }\n    }\n    return map[maxKey][1]\n}","language":"go"}
{"task_id":"MBGP\/830","completion":"\tvar n := math.Round(a, digits)\n\treturn n\n}","language":"go"}
{"task_id":"MBGP\/832","completion":"    var regex = \/(\\d+)\/g\n    var matches = regex.Matches(input)\n    var max = 0\n    for _, match := range matches {\n        if match.Length > max {\n            max = match.Length\n        }\n    }\n    return max\n}","language":"go"}
{"task_id":"MBGP\/833","completion":"    for _, v := range map {\n        if v != nil {\n            return map.keys()\n        }\n    }\n    return nil\n}","language":"go"}
{"task_id":"MBGP\/834","completion":"    var result [][]int\n    var i int\n    var j int\n    var k int\n    var m int\n    var n = n + 1\n    var x int\n    var y int\n    var z int\n    var r int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n = n + 1\n    var x int\n    var y int\n    var z int\n    var r int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n = n + 1\n    var x int\n    var y int\n    var z int\n    var r int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n","language":"go"}
{"task_id":"MBGP\/838","completion":"    \/\/ Write your code here\n    if (s1 == s2) return 0\n    var count = 0\n    for (i := 0; i < s1.length; i++) {\n        if (s1[i] != s2[i]) {\n            count++\n            swap(s1[i], s2[i])\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/839","completion":"\tsort.sort(tup, [](a, b) (a.0 < b.0))\n\treturn tup\n}","language":"go"}
{"task_id":"MBGP\/844","completion":"    if (k < 0) {\n        return 0\n    }\n    if (k == 0) {\n        return 1\n    }\n    if (n < 0) {\n        return 0\n    }\n    if (n == 0) {\n        return 0\n    }\n    if (n == 1) {\n        return 1\n    }\n    if (n % 2 == 0) {\n        return get_Number(n \/ 2, k - 1)\n    }\n    return get_Number(n - 1, k - 1) + get_Number(n \/ 2, k - 1)\n}","language":"go"}
{"task_id":"MBGP\/845","completion":"\tdigits := make([]int, n)\n\tfor i := 0; i < n; i++ {\n\t\tdigits[i] = math.log(n) \/ math.log(i)\n\t}\n\treturn digits.sum()\n}","language":"go"}
{"task_id":"MBGP\/846","completion":"    var platforms []int\n    platforms = [0] * n\n    for i := 0; i < n; i++ {\n        platforms[i] = 1\n    }\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if (arr[i] >= arr[j] && platforms[i] < platforms[j] + 1) {\n                platforms[i] = platforms[j] + 1\n            }\n        }\n    }\n    return platforms[n - 1]\n}","language":"go"}
{"task_id":"MBGP\/848","completion":"    return 0.5 * (base1 + base2) * height\n}","language":"go"}
{"task_id":"MBGP\/851","completion":"    var sum = 0\n    var divisors = []int{1,N}\n    for (i,d) := range divisors {\n        if (N % d == 0) {\n            sum += d\n            divisors = divisors + [d, N\/d]\n        }\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBGP\/853","completion":"\tvar sum int\n\tfor i := 1; i <= n; i++ {\n\t\tif n % i == 0 && i % 2 != 0 {\n\t\t\tsum += i\n\t\t}\n\t}\n\treturn sum\n}","language":"go"}
{"task_id":"MBGP\/856","completion":"\tarr, n := range arr, n\n\tsort arr\n\tswaps := 0\n\tfor i := 0; i < n-1; i++ {\n\t\tfor j := i+1; j < n; j++ {\n\t\t\tif arr[i] > arr[j] {\n\t\t\t\tswaps += 1\n\t\t\t\tswap(arr, i, j)\n\t\t\t}\n\t\t}\n\t}\n\treturn swaps\n}","language":"go"}
{"task_id":"MBGP\/857","completion":"    map {\n        (s, i) := range list1 {\n            if i == 0 {\n                append(s)\n            } else {\n                append(list1[i - 1]..s)\n            }\n        }\n    }\n}","language":"go"}
{"task_id":"MBGP\/859","completion":"    \/\/ Go code here\n}","language":"go"}
{"task_id":"MBGP\/860","completion":"    if (string.Length == 0) {\n        return \"Accept\"\n    }\n    if (string.Length == 1) {\n        if (string[0] == \".\") {\n            return \"Discard\"\n        }\n        if (string[0] == \"@\") {\n            return \"Discard\"\n        }\n        if (string[0] == \" \") {\n            return \"Discard\"\n        }\n        if (string[0] == \"-\") {\n            return \"Discard\"\n        }\n        if (string[0] == \"_\") {\n            return \"Discard\"\n        }\n        if (string[0] == \"+\") {\n            return \"Discard\"\n        }\n        if (string[0] == \"*\") {\n            return \"Discard\"\n        }\n        if (string[0] == \"$\") {\n            return ","language":"go"}
{"task_id":"MBGP\/861","completion":"    \/\/ Your code here\n}","language":"go"}
{"task_id":"MBGP\/862","completion":"    \/\/ Your code here\n}","language":"go"}
{"task_id":"MBGP\/863","completion":"    \/\/ Initialize the longest length to 0\n    int longest_length = 0\n\n    \/\/ Iterate through the array\n    for (i := 0; i < n; i++) {\n        \/\/ Initialize the current length to 0\n        int current_length = 0\n\n        \/\/ Iterate through the array again\n        for (j := i; j < n; j++) {\n            \/\/ If the current element is greater than the previous element\n            if (arr[j] > arr[i]) {\n                \/\/ Increment the current length\n                current_length++\n            } else {\n                \/\/ If the current element is less than the previous element\n                break\n            }\n        }\n\n        \/\/ If the current length is greater than the longest length\n        if (current_length > longest_length) {\n            \/\/ Set the longest length to the current length\n            longest_length = current_length\n        }\n    }\n\n    \/\/ Return the longest length\n    return longest_length\n}","language":"go"}
{"task_id":"MBGP\/864","completion":"    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/Golang solution\n    \/\/ Go\/G","language":"go"}
{"task_id":"MBGP\/867","completion":"    var min = 0\n    for _, i := range arr {\n        if (i < min) min = i\n    }\n    return min\n}","language":"go"}
{"task_id":"MBGP\/868","completion":"    if len(a) == 0 {\n        return 0\n    }\n    a = a.split(\" \")\n    return len(a[len(a) - 1])\n}","language":"go"}
{"task_id":"MBGP\/871","completion":"    if len(string1) != len(string2) {\n        return false\n    }\n    for i := range string1 {\n        if string1[i] != string2[string2.length - 1 - i] {\n            return false\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBGP\/872","completion":"    if len(list1) > len(list2) {\n        return false\n    }\n    for i, v1 := range list1 {\n        for j, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/875","completion":"    var min_diff []int64\n    for _, _, _ := range test_list {\n        min_diff = append(min_diff, min(map(second, test_list)))\n    }\n    return min_diff\n}","language":"go"}
{"task_id":"MBGP\/876","completion":"    if (x > y) {\n        x, y = y, x\n    }\n    int z = x * y\n    while (z > 0) {\n        if (z % x == 0 && z % y == 0) {\n            return z\n        }\n        z -= x\n    }\n    return 0\n}","language":"go"}
{"task_id":"MBGP\/877","completion":"\tsort.sort(str)\n\treturn str\n}","language":"go"}
{"task_id":"MBGP\/879","completion":"    match := regex.Match(text, \/a.*b\/)\n    if match {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"go"}
{"task_id":"MBGP\/885","completion":"    var dict1 []string, dict2 []string\n    dict1 = []string{str1}\n    dict2 = []string{str2}\n    for i, c1 in enumerate(dict1) {\n        if c1 == dict2[i] {\n            return true\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBGP\/886","completion":"    var sum []int64\n    for _, i := range numbers {\n        sum += i\n    }\n    return sum.Sum() \/ len(numbers)\n}","language":"go"}
{"task_id":"MBGP\/888","completion":"    var res [][]int = [][]int{};\n    for _, v1 := range test_tup1 {\n        for _, v2 := range test_tup2 {\n            res = append(res, (-v1[0], -v2[0]));\n        }\n    }\n    return res;\n}","language":"go"}
{"task_id":"MBGP\/890","completion":"\tvar arr1Sorted []int = sort(arr1)\n\tvar arr2Sorted []int = sort(arr2)\n\tvar i int\n\tvar j int\n\tvar k int\n\tvar count int\n\tvar index int\n\tvar extra int\n\tfor i := 0; i < arr1Sorted.Length; i++ {\n\t\tfor j := 0; j < arr2Sorted.Length; j++ {\n\t\t\tif (arr1Sorted[i] == arr2Sorted[j]) {\n\t\t\t\tcount := 1\n\t\t\t\tfor k := 0; k < arr2Sorted.Length; k++ {\n\t\t\t\t\tif (arr2Sorted[k] == arr2Sorted[j]) {\n\t\t\t\t\t\tcount++\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (count == 2) {\n\t\t\t\t\tindex := i\n\t\t\t\t\textra := arr1Sorted[i]\n\t\t\t\t\treturn index\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn -1\n}","language":"go"}
{"task_id":"MBGP\/892","completion":"    return text.replace(\"  \", \"\")\n}","language":"go"}
{"task_id":"MBGP\/893","completion":"    if len(lst) == 0 {\n        return []\n    }\n    return lst[-1]\n}","language":"go"}
{"task_id":"MBGP\/894","completion":"    \/\/ split the string into list of float\n    \/\/ convert each element into float and append to the list\n    \/\/ return the list\n    return []float64{\n        for _, elem := range test_str.Split(string.Split(',')) {\n            elem = float64(elem)\n            append(elem)\n        }\n    }\n}","language":"go"}
{"task_id":"MBGP\/895","completion":"    \/\/ 1. Initialize the maximum sum to 0\n    \/\/ 2. Initialize the current sum to 0\n    \/\/ 3. Iterate through the array\n    \/\/ 4. If the current element is greater than the current sum, update the current sum\n    \/\/ 5. If the current element is less than the current sum, update the maximum sum\n    \/\/ 6. Return the maximum sum\n    var maxSum = 0\n    var currentSum = 0\n    for _, a := range A {\n        if a > currentSum {\n            currentSum = a\n        } else if a < currentSum {\n            maxSum = max(maxSum, currentSum)\n            currentSum = 0\n        }\n    }\n    return max(maxSum, currentSum)\n}","language":"go"}
{"task_id":"MBGP\/896","completion":"\tfor _, _, last in tuples {\n\t\tsort(tuples, []int, []int, []int, last)\n\t}\n\treturn tuples\n}","language":"go"}
{"task_id":"MBGP\/897","completion":"    if word == \"\" {\n        return true\n    }\n    if sentence == \"\" {\n        return false\n    }\n    if word[0] == sentence[0] {\n        return is_Word_Present(sentence[1:], word[1:])\n    }\n    return is_Word_Present(sentence, word[1:])\n}","language":"go"}
{"task_id":"MBGP\/898","completion":"    for _, i := range numbers {\n        if i - 1 >= 0 {\n            numbers[i - 1] = numbers[i - 1] + numbers[i]\n        }\n    }\n    for _, i := range numbers {\n        if i - n >= 0 {\n            numbers[i - n] = 0\n        }\n    }\n    return numbers\n}","language":"go"}
{"task_id":"MBGP\/899","completion":"\tvar i int\n\tvar j int\n\tvar k int\n\tvar l int\n\tvar m int\n\tvar n1 int\n\tvar n2 int\n\tvar n3 int\n\tvar n4 int\n\tvar n5 int\n\tvar n6 int\n\tvar n7 int\n\tvar n8 int\n\tvar n9 int\n\tvar n10 int\n\tvar n11 int\n\tvar n12 int\n\tvar n13 int\n\tvar n14 int\n\tvar n15 int\n\tvar n16 int\n\tvar n17 int\n\tvar n18 int\n\tvar n19 int\n\tvar n20 int\n\tvar n21 int\n\tvar n22 int\n\tvar n23 int\n\tvar n24 int\n\tvar n25 int\n\tvar n26 int\n\tvar n27 int\n\tvar n28 int\n\tvar n29 int\n\tvar n30 int\n\tvar n31 int\n\tvar n32 int\n\tvar n33 int\n\tvar n34 int\n\tvar n35 int\n\tvar n36 int\n\tvar n37 int\n\tvar n38 int\n\tvar n","language":"go"}
{"task_id":"MBGP\/901","completion":"    var i int\n    var j int\n    var k int\n    var m int\n    var n1 int\n    var n2 int\n    var n3 int\n    var n4 int\n    var n5 int\n    var n6 int\n    var n7 int\n    var n8 int\n    var n9 int\n    var n10 int\n    var n11 int\n    var n12 int\n    var n13 int\n    var n14 int\n    var n15 int\n    var n16 int\n    var n17 int\n    var n18 int\n    var n19 int\n    var n20 int\n    var n21 int\n    var n22 int\n    var n23 int\n    var n24 int\n    var n25 int\n    var n26 int\n    var n27 int\n    var n28 int\n    var n29 int\n    var n30 int\n    var n31 int\n    var n32 int\n    var n33 int\n    var n34 int\n    var n35 int\n    var n36 int\n    var n37 int\n    var n38 int\n    var n39 int\n    var","language":"go"}
{"task_id":"MBGP\/902","completion":"    return map[string]int{\n        \/\/ Iterate over the first dictionary\n        \/\/ Iterate over the second dictionary\n        \/\/ If the key exists in both dictionaries, add the values\n        \/\/ If the key exists in only one dictionary, don't add the value\n        \/\/ If the key exists in neither dictionary, add the key and value\n        \/\/ Return the resulting dictionary\n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n        \/\/ \n","language":"go"}
{"task_id":"MBGP\/903","completion":"    var unsetBits []byte\n    for i := 0; i < n; i++ {\n        unsetBits[i] = 0\n    }\n    for i := 1; i < n; i++ {\n        unsetBits[i] = unsetBits[i - 1] + (1 << i)\n    }\n    return unsetBits[n - 1]\n}","language":"go"}
{"task_id":"MBGP\/905","completion":"    var binomial [][]int = [][]int{\n        [1,1],\n        [1,2],\n        [1,3],\n        [1,4],\n        [1,5],\n        [1,6],\n        [1,7],\n        [1,8],\n        [1,9],\n        [1,10],\n        [1,11],\n        [1,12],\n        [1,13],\n        [1,14],\n        [1,15],\n        [1,16],\n        [1,17],\n        [1,18],\n        [1,19],\n        [1,20],\n        [1,21],\n        [1,22],\n        [1,23],\n        [1,24],\n        [1,25],\n        [1,26],\n        [1,27],\n        [1,28],\n        [1,29],\n        [1,30],\n","language":"go"}
{"task_id":"MBGP\/906","completion":"    match := regex.Match(url, \"(?<year>\\d{4})\/(?<month>\\d{2})\/(?<day>\\d{2})\")\n    if match {\n        return [match.captures(\"year\"), match.captures(\"month\"), match.captures(\"day\")]\n    }\n    return nil\n}","language":"go"}
{"task_id":"MBGP\/907","completion":"    var lucky []int\n    for _, i := range n {\n        lucky.append(i)\n    }\n    return lucky\n}","language":"go"}
{"task_id":"MBGP\/909","completion":"    \/\/ Your code here\n}","language":"go"}
{"task_id":"MBGP\/910","completion":"\treturn (m < 13 && m > 0 && d < 32 && d > 0 && y < 32768 && y > 0)\n}","language":"go"}
{"task_id":"MBGP\/912","completion":"    if (n < m) {\n        return 0\n    }\n    if (n == m) {\n        return 1\n    }\n    return (n * log(n) + m * log(m)) \/ log(2)\n}","language":"go"}
{"task_id":"MBGP\/915","completion":"    \/\/ Your code here\n    return array_nums\n}","language":"go"}
{"task_id":"MBGP\/917","completion":"    match := \"\"\n    for i, c := range text {\n        if c.isupper {\n            match += c\n        }\n        if c.islower {\n            match += c\n        }\n        if i == text.len - 1 {\n            return \"Not matched!\"\n        }\n    }\n    return \"Found a match!\"\n}","language":"go"}
{"task_id":"MBGP\/920","completion":"    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go\/Golang\n    \/\/ Go","language":"go"}
{"task_id":"MBGP\/921","completion":"    var res [][]int\n    for _, v := range test_tup {\n        if _, v >= N {\n            res = append(res, []int{v})\n        } else {\n            res = append(res, append([]int{v}, nil))\n        }\n    }\n    return res\n}","language":"go"}
{"task_id":"MBGP\/922","completion":"    var max_pair []int\n    var max_product []int\n    max_pair = []int{0, 0}\n    max_product = []int{0, 0}\n    for _, i := range arr {\n        for _, j := range arr {\n            if i * j > max_product {\n                max_pair = []int{i, j}\n                max_product = i * j\n            }\n        }\n    }\n    return max_pair\n}","language":"go"}
{"task_id":"MBGP\/923","completion":"    \/\/ Your code here\n    if (m == 0 || n == 0) return 0\n    if (X[m-1] == Y[n-1]) return 1 + super_seq(X, Y, m-1, n-1)\n    return 1 + min(super_seq(X, Y, m-1, n), super_seq(X, Y, m, n-1))\n}","language":"go"}
{"task_id":"MBGP\/926","completion":"    if m == 0 {\n        return 1\n    }\n    if m == 1 {\n        return n\n    }\n    return rencontres_number(n, m - 1) + rencontres_number(n, m - 2)\n}","language":"go"}
{"task_id":"MBGP\/928","completion":"    \/\/ split the date into its parts\n    var parts []string\n    for _, _, dt := range dt;\n    \/\/ split the date into its parts\n    for _, _, dt := range dt;\n    \/\/ split the date into its parts\n    for _, _, dt := range dt;\n    \/\/ split the date into its parts\n    for _, _, dt := range dt;\n    \/\/ split the date into its parts\n    for _, _, dt := range dt;\n    \/\/ split the date into its parts\n    for _, _, dt := range dt;\n    \/\/ split the date into its parts\n    for _, _, dt := range dt;\n    \/\/ split the date into its parts\n    for _, _, dt := range dt;\n    \/\/ split the date into its parts\n    for _, _, dt := range dt;\n    \/\/ split the date into its parts\n    for _, _, dt := range dt;\n    \/\/ split the date into its parts\n    for _, _, dt :=","language":"go"}
{"task_id":"MBGP\/930","completion":"    match := regex.Match(text, \/a(.)b\/)\n    if match {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"go"}
{"task_id":"MBGP\/931","completion":"\tvar sum float64\n\tfor _, i := range number {\n\t\tsum += (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + i) * (1 \/ (i + 1))\n\t}\n\treturn sum\n}","language":"go"}
{"task_id":"MBGP\/932","completion":"    l.sort()\n    l2 := make([]string, len(l))\n    for i := 0; i < len(l); i++ {\n        if (i == 0) {\n            l2[i] = l[i]\n        } else if (l[i] != l[i-1]) {\n            l2[i] = l[i]\n        }\n    }\n    return l2\n}","language":"go"}
{"task_id":"MBGP\/933","completion":"    match := regexp.New()\n    match.SetFlags(regexp.RegexFlag.IgnoreCase)\n    match.SetPattern(regexp.RegexPattern.CamelCase)\n    match.SetInput(text)\n    match.Match()\n    return match.GetMatch().Value\n}","language":"go"}
{"task_id":"MBGP\/935","completion":"    var sum []float64\n    for _, i := range number {\n        sum += (1.0 \/ (i + 1.0)) * (1.0 \/ (i + 2.0))\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBGP\/936","completion":"\tfor _, v := range test_list {\n\t\tif ord_list.IndexOf(v) == -1 {\n\t\t\treturn test_list\n\t\t}\n\t\tord_list.Remove(v)\n\t\ttest_list.Add(v)\n\t}\n\treturn test_list\n}","language":"go"}
{"task_id":"MBGP\/937","completion":"    \/\/ Your code here\n}","language":"go"}
{"task_id":"MBGP\/938","completion":"\tsort.quick_sort(A, 0, A.Length)\n\tsort.quick_sort(B, 0, B.Length)\n\tsort.quick_sort(C, 0, C.Length)\n\tvar i int\n\tvar j int\n\tvar k int\n\tvar a []int\n\tvar b []int\n\tvar c []int\n\tvar d []int\n\tvar e []int\n\tvar f []int\n\tvar g []int\n\tvar h []int\n\tvar i = 0\n\tvar j = 0\n\tvar k = 0\n\tvar a = A[0]\n\tvar b = B[0]\n\tvar c = C[0]\n\tvar d = A[0]\n\tvar e = B[0]\n\tvar f = C[0]\n\tvar g = A[0]\n\tvar h = B[0]\n\twhile (i < p && j < q && k < r) {\n\t\tif (a ","language":"go"}
{"task_id":"MBGP\/939","completion":"\treturn sort.sort_by_key(models, \"model\")\n}","language":"go"}
{"task_id":"MBGP\/940","completion":"\t\/\/ Create a max heap\n\theap := make_heap(arr)\n\t\/\/ Create a sorted array\n\tsorted := make_sorted(heap)\n\t\/\/ Return the sorted array\n\treturn sorted\n}","language":"go"}
{"task_id":"MBGP\/941","completion":"    var i int\n    var count int\n    for i := 0; i < len(num); i++ {\n        if type(num[i]) == tuple {\n            count = 0\n            break\n        }\n        if type(num[i]) == int {\n            count++\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/944","completion":"    int i := 0\n    for i, c := range text {\n        if c == \" \" {\n            continue\n        }\n        if c == \"a\" {\n            i := i + 1\n        }\n        if c == \"e\" {\n            i := i + 1\n        }\n        if c == \"i\" {\n            i := i + 1\n        }\n        if c == \"o\" {\n            i := i + 1\n        }\n        if c == \"u\" {\n            i := i + 1\n        }\n    }\n    return i\n}","language":"go"}
{"task_id":"MBGP\/946","completion":"    \/\/ Return the most common elements and their counts of a specified text.\n    \/\/ If the text is empty, return an empty list.\n    \/\/ If the text has less than a specified number of elements, return all elements with their counts.\n    \/\/ If the text has more than a specified number of elements, return the top n elements with their counts.\n    \/\/ If the text has more than a specified number of elements, return the top n elements with their counts.\n    \/\/ If the text has more than a specified number of elements, return the top n elements with their counts.\n    \/\/ If the text has more than a specified number of elements, return the top n elements with their counts.\n    \/\/ If the text has more than a specified number of elements, return the top n elements with their counts.\n    \/\/ If the text has more than a specified number of elements, return the top n elements with their counts.\n    \/\/ If the text has more than a specified number of elements, return the top n elements with their counts.\n    \/\/ If the text has more than a specified number of elements, return the top n elements with their counts.\n   ","language":"go"}
{"task_id":"MBGP\/948","completion":"    if index < 0 {\n        index = tup1.len + index\n    }\n    index = index % tup1.len\n    return tup1[index]\n}","language":"go"}
{"task_id":"MBGP\/949","completion":"\tfor _, _, _, digits := range test_list {\n\t\tsort(digits)\n\t}\n\treturn test_list\n}","language":"go"}
{"task_id":"MBGP\/950","completion":"    if year < 1900 {\n        return \"Invalid year!\"\n    }\n    if year % 12 == 0 {\n        return \"Monkey\"\n    }\n    if year % 12 == 1 {\n        return \"Rooster\"\n    }\n    if year % 12 == 2 {\n        return \"Dog\"\n    }\n    if year % 12 == 3 {\n        return \"Pig\"\n    }\n    if year % 12 == 4 {\n        return \"Rat\"\n    }\n    if year % 12 == 5 {\n        return \"Ox\"\n    }\n    if year % 12 == 6 {\n        return \"Tiger\"\n    }\n    if year % 12 == 7 {\n        return \"Rabbit\"\n    }\n    if year % 12 == 8 {\n        return \"Dragon\"\n    }\n","language":"go"}
{"task_id":"MBGP\/951","completion":"    \/\/ 1. Initialize the result\n    result := make([][]int, 0, 0)\n    \/\/ 2. Iterate through the lists\n    for i := 0; i < len(test_list1); i++ {\n        for j := 0; j < len(test_list2); j++ {\n            \/\/ 3. Compare the tuples\n            if test_list1[i][0] == test_list2[j][0] && test_list1[i][1] == test_list2[j][1] {\n                \/\/ 4. If the tuples are similar, add the indices to the result\n                result[i][j] = max(result[i][j], 1)\n            }\n        }\n    }\n    \/\/ 5. Return the result\n    return result\n}","language":"go"}
{"task_id":"MBGP\/952","completion":"    if (n < 0 || r < 0 || p < 0) {\n        panic(\"n, r, p should be non-negative\")\n    }\n    if (n < r) {\n        return 0\n    }\n    if (n == r) {\n        return 1\n    }\n    return nCr_mod_p(n - r, r, p) + nCr_mod_p(n - r, r - 1, p)\n}","language":"go"}
{"task_id":"MBGP\/953","completion":"    if (n == 0) {\n        return 1\n    }\n    if (n == 1) {\n        return 1\n    }\n    if (n == 2) {\n        return 2\n    }\n    if (n == 3) {\n        return 3\n    }\n    if (n == 4) {\n        return 4\n    }\n    if (n == 5) {\n        return 5\n    }\n    if (n == 6) {\n        return 6\n    }\n    if (n == 7) {\n        return 7\n    }\n    if (n == 8) {\n        return 8\n    }\n    if (n == 9) {\n        return 9\n    }\n    if (n == 10) {\n        return 10\n    }\n    if (n == 11) {\n       ","language":"go"}
{"task_id":"MBGP\/954","completion":"    if (actual_cost < sale_amount) {\n        return nil\n    }\n    return actual_cost - sale_amount\n}","language":"go"}
{"task_id":"MBGP\/956","completion":"    match := regexp.Split(text, \"[A-Z]+\")\n    return match\n}","language":"go"}
{"task_id":"MBGP\/957","completion":"\treturn math.log2(n)\n}","language":"go"}
{"task_id":"MBGP\/958","completion":"    \/\/ Roman numerals are formed by expressing each digit separately starting with the left most digit and skipping any digit with a value of zero.\n    \/\/ In Roman numerals 1990 is rendered: 1000=M, 900=CM, 90=XC; resulting in MCMXC.\n    \/\/ 2008 is written as 2000=MM, 8=VIII; or MMVIII.\n    \/\/ 1666 uses each Roman symbol in descending order: MDCLXVI.\n    \/\/ 1599 uses each Roman symbol in descending order: MDXCIX.\n    \/\/ 4999 uses each Roman symbol in descending order: MCDLXXXIII.\n    \/\/ ...etc.\n    \/\/ Roman numerals for 0 are rendered as an empty string.\n    \/\/ Each roman numeral is rendered in upper case.\n    \/\/ So the input will be a non-negative integer.\n    \/\/ The output is a string.\n    \/\/ Example 1:\n    \/\/ Input: num = 3\n    \/\/ Output: \"III\"\n    \/\/ Example 2:\n    ","language":"go"}
{"task_id":"MBGP\/959","completion":"    var sum []int64\n    for _, i := range lst {\n        sum += i\n    }\n    return sum.Sum() \/ len(lst)\n}","language":"go"}
{"task_id":"MBGP\/961","completion":"    var dict := make(map[string]int) {\n        \"I\" => 1,\n        \"V\" => 5,\n        \"X\" => 10,\n        \"L\" => 50,\n        \"C\" => 100,\n        \"D\" => 500,\n        \"M\" => 1000\n    }\n    var result := 0\n    for i := 0; i < s.length; i++ {\n        if i + 1 < s.length && dict[s[i]] < dict[s[i + 1]] {\n            result -= dict[s[i]]\n        } else {\n            result += dict[s[i]]\n        }\n    }\n    return result\n}","language":"go"}
{"task_id":"MBGP\/962","completion":"    var sum []int\n    for _, i := range l..r {\n        if i % 2 == 0 {\n            sum += [i]\n        }\n    }\n    return sum.sum()\n}","language":"go"}
{"task_id":"MBGP\/963","completion":"    if x == 0 && y == 0 && z == 0 {\n        return nil, 0\n    }\n    if x == 0 && y == 0 {\n        return \"no real solution\", -131\n    }\n    if x == 0 {\n        return \"one solution\", 0\n    }\n    if y == 0 {\n        return \"one solution\", 0\n    }\n    if z == 0 {\n        return \"one solution\", 0\n    }\n    if x == 0 && y == 0 {\n        return \"one solution\", 0\n    }\n    if x == 0 {\n        return \"one solution\", 0\n    }\n    if y == 0 {\n        return \"one solution\", 0\n    }\n    if z == 0 {\n        return \"one solution\", 0\n    }\n    if x == 0 && y == ","language":"go"}
{"task_id":"MBGP\/965","completion":"    return .Capitalize(text) + .Replace(text, _, -1) + .Replace(text, _, 1)\n}","language":"go"}
{"task_id":"MBGP\/966","completion":"    for _, _, _, _ := range tuple1 {\n        if len(tuple1) == 0 {\n            return tuple1\n        }\n        tuple1 = []tuple1[1:]\n    }\n    return tuple1\n}","language":"go"}
{"task_id":"MBGP\/968","completion":"    var max []int = []int{0};\n    var i int = 0;\n    var j int = 0;\n    var k int = 0;\n    var n int = 0;\n    var m int = 0;\n    var temp int = 0;\n    var temp2 int = 0;\n    var temp3 int = 0;\n    var temp4 int = 0;\n    var temp5 int = 0;\n    var temp6 int = 0;\n    var temp7 int = 0;\n    var temp8 int = 0;\n    var temp9 int = 0;\n    var temp10 int = 0;\n    var temp11 int = 0;\n    var temp12 int = 0;\n    var temp13 int = 0;\n    var temp14 int = 0;\n    var temp15 int = 0;\n    var temp16 int = 0;\n    var temp17 int = 0;\n    var temp18 int","language":"go"}
{"task_id":"MBGP\/969","completion":"    \/\/ 1. Sort the list by the first element\n    test_list.sort ([]int, []int (a, b) {\n        if (a < b) {\n            return -1\n        } else if (a > b) {\n            return 1\n        } else {\n            return 0\n        }\n    })\n\n    \/\/ 2. Create a new list to store the result\n    result := make([]int, len(test_list))\n\n    \/\/ 3. Loop through the list and join the tuples\n    for _, v := range test_list {\n        if _, v := range v {\n            if v[0] == v[1] {\n                result[i] = append(v, result[i])\n            }\n        }\n    }\n\n    \/\/ 4. Return the result\n    return result\n}","language":"go"}
{"task_id":"MBGP\/971","completion":"    var i int, j int, k int, count int\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            for k := 0; k < n; k++ {\n                if (i + a <= n && j + b <= n && k + c <= n) {\n                    if (i + a <= j + b && i + a <= k + c) {\n                        count++\n                    }\n                    if (j + b <= i + a && j + b <= k + c) {\n                        count++\n                    }\n                    if (k + c <= i + a && k + c <= j + b) {\n                        count++\n                    }\n                }\n            }\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBGP\/974","completion":"    n := len(A)\n    m := len(A[0])\n    dp := make([]int, n, m)\n    for i := 0; i < n; i++ {\n        for j := 0; j < m; j++ {\n            if i == 0 || j == 0 :\n                dp[i][j] = A[i][j]\n            else if i == 1 :\n                dp[i][j] = A[i][j] + A[i - 1][j]\n            else if j == 1 :\n                dp[i][j] = A[i][j] + A[i - 1][j - 1]\n            else :\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1]) + A[i][j]\n        }\n    }\n    return min(dp[n - 1][m ","language":"go"}
