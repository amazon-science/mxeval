{"task_id": "MBSCP/1", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n     *\n     * >>> minCost(List(List(1, 2, 3), List(4, 8, 2), List(1, 5, 3)), 2, 2)\n     * 8\n     * >>> minCost(List(List(2, 3, 4), List(5, 9, 3), List(2, 6, 4)), 2, 2)\n     * 12\n     * >>> minCost(List(List(3, 4, 5), List(6, 10, 4), List(3, 7, 5)), 2, 2)\n     * 16\n     */\n    def minCost(cost : List[List[Int]], m : Int, n : Int) : Int = {\n", "entry_point": "minCost", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 2, 3), List(4, 8, 2), List(1, 5, 3))\n    var arg01 : Int = 2\n    var arg02 : Int = 2\n    var x0 : Int = minCost(arg00, arg01, arg02)\n    var v0 : Int = 8\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(2, 3, 4), List(5, 9, 3), List(2, 6, 4))\n    var arg11 : Int = 2\n    var arg12 : Int = 2\n    var x1 : Int = minCost(arg10, arg11, arg12)\n    var v1 : Int = 12\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(3, 4, 5), List(6, 10, 4), List(3, 7, 5))\n    var arg21 : Int = 2\n    var arg22 : Int = 2\n    var x2 : Int = minCost(arg20, arg21, arg22)\n    var v2 : Int = 16\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/2", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the similar elements from the given two tuple lists.\n     *\n     * >>> similarElements(List(3, 4, 5, 6), List(5, 7, 4, 10))\n     * List(4, 5)\n     * >>> similarElements(List(1, 2, 3, 4), List(5, 4, 3, 7))\n     * List(3, 4)\n     * >>> similarElements(List(11, 12, 14, 13), List(17, 15, 14, 13))\n     * List(13, 14)\n     */\n    def similarElements(testTup1 : List[Int], testTup2 : List[Int]) : List[Int] = {\n", "entry_point": "similarElements", "test": "\n\n    var arg00 : List[Int] = List(3, 4, 5, 6)\n    var arg01 : List[Int] = List(5, 7, 4, 10)\n    var x0 : List[Int] = similarElements(arg00, arg01)\n    var v0 : List[Int] = List(4, 5)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4)\n    var arg11 : List[Int] = List(5, 4, 3, 7)\n    var x1 : List[Int] = similarElements(arg10, arg11)\n    var v1 : List[Int] = List(3, 4)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(11, 12, 14, 13)\n    var arg21 : List[Int] = List(17, 15, 14, 13)\n    var x2 : List[Int] = similarElements(arg20, arg21)\n    var v2 : List[Int] = List(13, 14)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the similar elements from the given two tuple lists.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/3", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to identify non-prime numbers.\n     *\n     * >>> isNotPrime(2)\n     * false\n     * >>> isNotPrime(10)\n     * true\n     * >>> isNotPrime(35)\n     * true\n     */\n    def isNotPrime(n : Int) : Boolean = {\n", "entry_point": "isNotPrime", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Boolean = isNotPrime(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var x1 : Boolean = isNotPrime(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 35\n    var x2 : Boolean = isNotPrime(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to identify non-prime numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/4", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n     *\n     * >>> heapQueueLargest(List(25, 35, 22, 85, 14, 65, 75, 22, 58), 3)\n     * List(85, 75, 65)\n     * >>> heapQueueLargest(List(25, 35, 22, 85, 14, 65, 75, 22, 58), 2)\n     * List(85, 75)\n     * >>> heapQueueLargest(List(25, 35, 22, 85, 14, 65, 75, 22, 58), 5)\n     * List(85, 75, 65, 58, 35)\n     */\n    def heapQueueLargest(nums : List[Int], n : Int) : List[Int] = {\n", "entry_point": "heapQueueLargest", "test": "\n\n    var arg00 : List[Int] = List(25, 35, 22, 85, 14, 65, 75, 22, 58)\n    var arg01 : Int = 3\n    var x0 : List[Int] = heapQueueLargest(arg00, arg01)\n    var v0 : List[Int] = List(85, 75, 65)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(25, 35, 22, 85, 14, 65, 75, 22, 58)\n    var arg11 : Int = 2\n    var x1 : List[Int] = heapQueueLargest(arg10, arg11)\n    var v1 : List[Int] = List(85, 75)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(25, 35, 22, 85, 14, 65, 75, 22, 58)\n    var arg21 : Int = 5\n    var x2 : List[Int] = heapQueueLargest(arg20, arg21)\n    var v2 : List[Int] = List(85, 75, 65, 58, 35)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/5", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n     *\n     * >>> countWays(2)\n     * 3\n     * >>> countWays(8)\n     * 153\n     * >>> countWays(12)\n     * 2131\n     */\n    def countWays(n : Int) : Int = {\n", "entry_point": "countWays", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = countWays(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 8\n    var x1 : Int = countWays(arg10)\n    var v1 : Int = 153\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 12\n    var x2 : Int = countWays(arg20)\n    var v2 : Int = 2131\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/6", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the two numbers differ at one bit position only or not.\n     *\n     * >>> differAtOneBitPos(13, 9)\n     * true\n     * >>> differAtOneBitPos(15, 8)\n     * false\n     * >>> differAtOneBitPos(2, 4)\n     * false\n     */\n    def differAtOneBitPos(a : Int, b : Int) : Boolean = {\n", "entry_point": "differAtOneBitPos", "test": "\n\n    var arg00 : Int = 13\n    var arg01 : Int = 9\n    var x0 : Boolean = differAtOneBitPos(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 15\n    var arg11 : Int = 8\n    var x1 : Boolean = differAtOneBitPos(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var arg21 : Int = 4\n    var x2 : Boolean = differAtOneBitPos(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the two numbers differ at one bit position only or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/7", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find all words which are at least 4 characters long in a string by using regex.\n     *\n     * >>> findCharLong(\"Please move back to stream\")\n     * List(\"Please\", \"move\", \"back\", \"stream\")\n     * >>> findCharLong(\"Jing Eco and Tech\")\n     * List(\"Jing\", \"Tech\")\n     * >>> findCharLong(\"Jhingai wulu road Zone 3\")\n     * List(\"Jhingai\", \"wulu\", \"road\", \"Zone\")\n     */\n    def findCharLong(text : String) : List[String] = {\n", "entry_point": "findCharLong", "test": "\n\n    var arg00 : String = \"\"\"Please move back to stream\"\"\"\n    var x0 : List[String] = findCharLong(arg00)\n    var v0 : List[String] = List(\"\"\"Please\"\"\", \"\"\"move\"\"\", \"\"\"back\"\"\", \"\"\"stream\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Jing Eco and Tech\"\"\"\n    var x1 : List[String] = findCharLong(arg10)\n    var v1 : List[String] = List(\"\"\"Jing\"\"\", \"\"\"Tech\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Jhingai wulu road Zone 3\"\"\"\n    var x2 : List[String] = findCharLong(arg20)\n    var v2 : List[String] = List(\"\"\"Jhingai\"\"\", \"\"\"wulu\"\"\", \"\"\"road\"\"\", \"\"\"Zone\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find all words which are at least 4 characters long in a string by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/8", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find squares of individual elements in a list using lambda function.\n     *\n     * >>> squareNums(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n     * List(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)\n     * >>> squareNums(List(10, 20, 30))\n     * List(100, 400, 900)\n     * >>> squareNums(List(12, 15))\n     * List(144, 225)\n     */\n    def squareNums(nums : List[Int]) : List[Int] = {\n", "entry_point": "squareNums", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var x0 : List[Int] = squareNums(arg00)\n    var v0 : List[Int] = List(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(10, 20, 30)\n    var x1 : List[Int] = squareNums(arg10)\n    var v1 : List[Int] = List(100, 400, 900)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(12, 15)\n    var x2 : List[Int] = squareNums(arg20)\n    var v2 : List[Int] = List(144, 225)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find squares of individual elements in a list using lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/9", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the minimum number of rotations required to get the same string.\n     *\n     * >>> findRotations(\"aaaa\")\n     * 1\n     * >>> findRotations(\"ab\")\n     * 2\n     * >>> findRotations(\"abc\")\n     * 3\n     */\n    def findRotations(str : String) : Int = {\n", "entry_point": "findRotations", "test": "\n\n    var arg00 : String = \"\"\"aaaa\"\"\"\n    var x0 : Int = findRotations(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"ab\"\"\"\n    var x1 : Int = findRotations(arg10)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"abc\"\"\"\n    var x2 : Int = findRotations(arg20)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the minimum number of rotations required to get the same string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/10", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to get the n smallest items from a dataset.\n     *\n     * >>> smallNnum(List(10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100), 2)\n     * List(10, 20)\n     * >>> smallNnum(List(10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100), 5)\n     * List(10, 20, 20, 40, 50)\n     * >>> smallNnum(List(10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100), 3)\n     * List(10, 20, 20)\n     */\n    def smallNnum(list1 : List[Int], n : Int) : List[Int] = {\n", "entry_point": "smallNnum", "test": "\n\n    var arg00 : List[Int] = List(10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100)\n    var arg01 : Int = 2\n    var x0 : List[Int] = smallNnum(arg00, arg01)\n    var v0 : List[Int] = List(10, 20)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100)\n    var arg11 : Int = 5\n    var x1 : List[Int] = smallNnum(arg10, arg11)\n    var v1 : List[Int] = List(10, 20, 20, 40, 50)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100)\n    var arg21 : Int = 3\n    var x2 : List[Int] = smallNnum(arg20, arg21)\n    var v2 : List[Int] = List(10, 20, 20)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to get the n smallest items from a dataset.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/11", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to remove first and last occurrence of a given character from the string.\n     *\n     * >>> removeOcc(\"hello\", \"l\")\n     * \"heo\"\n     * >>> removeOcc(\"abcda\", \"a\")\n     * \"bcd\"\n     * >>> removeOcc(\"PHP\", \"P\")\n     * \"H\"\n     */\n    def removeOcc(s : String, ch : String) : String = {\n", "entry_point": "removeOcc", "test": "\n\n    var arg00 : String = \"\"\"hello\"\"\"\n    var arg01 : String = \"\"\"l\"\"\"\n    var x0 : String = removeOcc(arg00, arg01)\n    var v0 : String = \"\"\"heo\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"abcda\"\"\"\n    var arg11 : String = \"\"\"a\"\"\"\n    var x1 : String = removeOcc(arg10, arg11)\n    var v1 : String = \"\"\"bcd\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"PHP\"\"\"\n    var arg21 : String = \"\"\"P\"\"\"\n    var x2 : String = removeOcc(arg20, arg21)\n    var v2 : String = \"\"\"H\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to remove first and last occurrence of a given character from the string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/12", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort a given matrix in ascending order according to the sum of its rows.\n     *\n     * >>> sortMatrix(List(List(1, 2, 3), List(2, 4, 5), List(1, 1, 1)))\n     * List(List(1, 1, 1), List(1, 2, 3), List(2, 4, 5))\n     * >>> sortMatrix(List(List(1, 2, 3), List(-2, 4, -5), List(1, -1, 1)))\n     * List(List(-2, 4, -5), List(1, -1, 1), List(1, 2, 3))\n     * >>> sortMatrix(List(List(5, 8, 9), List(6, 4, 3), List(2, 1, 4)))\n     * List(List(2, 1, 4), List(6, 4, 3), List(5, 8, 9))\n     */\n    def sortMatrix(m : List[List[Int]]) : List[List[Int]] = {\n", "entry_point": "sortMatrix", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 2, 3), List(2, 4, 5), List(1, 1, 1))\n    var x0 : List[List[Int]] = sortMatrix(arg00)\n    var v0 : List[List[Int]] = List(List(1, 1, 1), List(1, 2, 3), List(2, 4, 5))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1, 2, 3), List(-2, 4, -5), List(1, -1, 1))\n    var x1 : List[List[Int]] = sortMatrix(arg10)\n    var v1 : List[List[Int]] = List(List(-2, 4, -5), List(1, -1, 1), List(1, 2, 3))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(5, 8, 9), List(6, 4, 3), List(2, 1, 4))\n    var x2 : List[List[Int]] = sortMatrix(arg20)\n    var v2 : List[List[Int]] = List(List(2, 1, 4), List(6, 4, 3), List(5, 8, 9))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/13", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count the most common words in a dictionary.\n     *\n     * >>> countCommon(List(\"red\", \"green\", \"black\", \"pink\", \"black\", \"white\", \"black\", \"eyes\", \"white\", \"black\", \"orange\", \"pink\", \"pink\", \"red\", \"red\", \"white\", \"orange\", \"white\", \"black\", \"pink\", \"green\", \"green\", \"pink\", \"green\", \"pink\", \"white\", \"orange\", \"orange\", \"red\"))\n     * List(List(\"pink\", 6), List(\"black\", 5), List(\"white\", 5), List(\"red\", 4))\n     * >>> countCommon(List(\"one\", \"two\", \"three\", \"four\", \"five\", \"one\", \"two\", \"one\", \"three\", \"one\"))\n     * List(List(\"one\", 4), List(\"two\", 2), List(\"three\", 2), List(\"four\", 1))\n     * >>> countCommon(List(\"Facebook\", \"Apple\", \"Amazon\", \"Netflix\", \"Google\", \"Apple\", \"Netflix\", \"Amazon\"))\n     * List(List(\"Apple\", 2), List(\"Amazon\", 2), List(\"Netflix\", 2), List(\"Facebook\", 1))\n     */\n    def countCommon(words : List[String]) : List[List[Any]] = {\n", "entry_point": "countCommon", "test": "\n\n    var arg00 : List[String] = List(\"\"\"red\"\"\", \"\"\"green\"\"\", \"\"\"black\"\"\", \"\"\"pink\"\"\", \"\"\"black\"\"\", \"\"\"white\"\"\", \"\"\"black\"\"\", \"\"\"eyes\"\"\", \"\"\"white\"\"\", \"\"\"black\"\"\", \"\"\"orange\"\"\", \"\"\"pink\"\"\", \"\"\"pink\"\"\", \"\"\"red\"\"\", \"\"\"red\"\"\", \"\"\"white\"\"\", \"\"\"orange\"\"\", \"\"\"white\"\"\", \"\"\"black\"\"\", \"\"\"pink\"\"\", \"\"\"green\"\"\", \"\"\"green\"\"\", \"\"\"pink\"\"\", \"\"\"green\"\"\", \"\"\"pink\"\"\", \"\"\"white\"\"\", \"\"\"orange\"\"\", \"\"\"orange\"\"\", \"\"\"red\"\"\")\n    var x0 : List[List[Any]] = countCommon(arg00)\n    var v0 : List[List[Any]] = List(List(\"\"\"pink\"\"\", 6), List(\"\"\"black\"\"\", 5), List(\"\"\"white\"\"\", 5), List(\"\"\"red\"\"\", 4))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"one\"\"\", \"\"\"two\"\"\", \"\"\"three\"\"\", \"\"\"four\"\"\", \"\"\"five\"\"\", \"\"\"one\"\"\", \"\"\"two\"\"\", \"\"\"one\"\"\", \"\"\"three\"\"\", \"\"\"one\"\"\")\n    var x1 : List[List[Any]] = countCommon(arg10)\n    var v1 : List[List[Any]] = List(List(\"\"\"one\"\"\", 4), List(\"\"\"two\"\"\", 2), List(\"\"\"three\"\"\", 2), List(\"\"\"four\"\"\", 1))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"Facebook\"\"\", \"\"\"Apple\"\"\", \"\"\"Amazon\"\"\", \"\"\"Netflix\"\"\", \"\"\"Google\"\"\", \"\"\"Apple\"\"\", \"\"\"Netflix\"\"\", \"\"\"Amazon\"\"\")\n    var x2 : List[List[Any]] = countCommon(arg20)\n    var v2 : List[List[Any]] = List(List(\"\"\"Apple\"\"\", 2), List(\"\"\"Amazon\"\"\", 2), List(\"\"\"Netflix\"\"\", 2), List(\"\"\"Facebook\"\"\", 1))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count the most common words in a dictionary.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/14", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the volume of a triangular prism.\n     *\n     * >>> findVolume(10, 8, 6)\n     * 240\n     * >>> findVolume(3, 2, 2)\n     * 6\n     * >>> findVolume(1, 2, 1)\n     * 1\n     */\n    def findVolume(l : Int, b : Int, h : Int) : Int = {\n", "entry_point": "findVolume", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 8\n    var arg02 : Int = 6\n    var x0 : Int = findVolume(arg00, arg01, arg02)\n    var v0 : Int = 240\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var arg11 : Int = 2\n    var arg12 : Int = 2\n    var x1 : Int = findVolume(arg10, arg11, arg12)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = 2\n    var arg22 : Int = 1\n    var x2 : Int = findVolume(arg20, arg21, arg22)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the volume of a triangular prism.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/15", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to split a string at lowercase letters.\n     *\n     * >>> splitLowerstring(\"AbCd\")\n     * List(\"bC\", \"d\")\n     * >>> splitLowerstring(\"Python\")\n     * List(\"y\", \"t\", \"h\", \"o\", \"n\")\n     * >>> splitLowerstring(\"Programming\")\n     * List(\"r\", \"o\", \"g\", \"r\", \"a\", \"m\", \"m\", \"i\", \"n\", \"g\")\n     */\n    def splitLowerstring(text : String) : List[String] = {\n", "entry_point": "splitLowerstring", "test": "\n\n    var arg00 : String = \"\"\"AbCd\"\"\"\n    var x0 : List[String] = splitLowerstring(arg00)\n    var v0 : List[String] = List(\"\"\"bC\"\"\", \"\"\"d\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Python\"\"\"\n    var x1 : List[String] = splitLowerstring(arg10)\n    var v1 : List[String] = List(\"\"\"y\"\"\", \"\"\"t\"\"\", \"\"\"h\"\"\", \"\"\"o\"\"\", \"\"\"n\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Programming\"\"\"\n    var x2 : List[String] = splitLowerstring(arg20)\n    var v2 : List[String] = List(\"\"\"r\"\"\", \"\"\"o\"\"\", \"\"\"g\"\"\", \"\"\"r\"\"\", \"\"\"a\"\"\", \"\"\"m\"\"\", \"\"\"m\"\"\", \"\"\"i\"\"\", \"\"\"n\"\"\", \"\"\"g\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to split a string at lowercase letters.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/16", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find sequences of lowercase letters joined with an underscore.\n     *\n     * >>> textLowercaseUnderscore(\"aab_cbbbc\")\n     * \"Found a match!\"\n     * >>> textLowercaseUnderscore(\"aab_Abbbc\")\n     * \"Not matched!\"\n     * >>> textLowercaseUnderscore(\"Aaab_abbbc\")\n     * \"Not matched!\"\n     */\n    def textLowercaseUnderscore(text : String) : String = {\n", "entry_point": "textLowercaseUnderscore", "test": "\n\n    var arg00 : String = \"\"\"aab_cbbbc\"\"\"\n    var x0 : String = textLowercaseUnderscore(arg00)\n    var v0 : String = \"\"\"Found a match!\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"aab_Abbbc\"\"\"\n    var x1 : String = textLowercaseUnderscore(arg10)\n    var v1 : String = \"\"\"Not matched!\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Aaab_abbbc\"\"\"\n    var x2 : String = textLowercaseUnderscore(arg20)\n    var v2 : String = \"\"\"Not matched!\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find sequences of lowercase letters joined with an underscore.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/17", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the perimeter of a square.\n     *\n     * >>> squarePerimeter(10)\n     * 40\n     * >>> squarePerimeter(5)\n     * 20\n     * >>> squarePerimeter(4)\n     * 16\n     */\n    def squarePerimeter(a : Int) : Int = {\n", "entry_point": "squarePerimeter", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = squarePerimeter(arg00)\n    var v0 : Int = 40\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var x1 : Int = squarePerimeter(arg10)\n    var v1 : Int = 20\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var x2 : Int = squarePerimeter(arg20)\n    var v2 : Int = 16\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the perimeter of a square.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/18", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove characters from the first string which are present in the second string.\n     *\n     * >>> removeDirtyChars(\"probasscurve\", \"pros\")\n     * \"bacuve\"\n     * >>> removeDirtyChars(\"digitalindia\", \"talent\")\n     * \"digiidi\"\n     * >>> removeDirtyChars(\"exoticmiles\", \"toxic\")\n     * \"emles\"\n     */\n    def removeDirtyChars(string : String, secondString : String) : String = {\n", "entry_point": "removeDirtyChars", "test": "\n\n    var arg00 : String = \"\"\"probasscurve\"\"\"\n    var arg01 : String = \"\"\"pros\"\"\"\n    var x0 : String = removeDirtyChars(arg00, arg01)\n    var v0 : String = \"\"\"bacuve\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"digitalindia\"\"\"\n    var arg11 : String = \"\"\"talent\"\"\"\n    var x1 : String = removeDirtyChars(arg10, arg11)\n    var v1 : String = \"\"\"digiidi\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"exoticmiles\"\"\"\n    var arg21 : String = \"\"\"toxic\"\"\"\n    var x2 : String = removeDirtyChars(arg20, arg21)\n    var v2 : String = \"\"\"emles\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove characters from the first string which are present in the second string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/19", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find whether a given array of integers contains any duplicate element.\n     *\n     * >>> testDuplicate(List(1, 2, 3, 4, 5))\n     * false\n     * >>> testDuplicate(List(1, 2, 3, 4, 4))\n     * true\n     * >>> testDuplicate(List(1, 1, 2, 2, 3, 3, 4, 4, 5))\n     * true\n     */\n    def testDuplicate(arraynums : List[Int]) : Boolean = {\n", "entry_point": "testDuplicate", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5)\n    var x0 : Boolean = testDuplicate(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 4)\n    var x1 : Boolean = testDuplicate(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 1, 2, 2, 3, 3, 4, 4, 5)\n    var x2 : Boolean = testDuplicate(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find whether a given array of integers contains any duplicate element.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/20", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if the given number is woodball or not.\n     *\n     * >>> isWoodall(383)\n     * true\n     * >>> isWoodall(254)\n     * false\n     * >>> isWoodall(200)\n     * false\n     */\n    def isWoodall(x : Int) : Boolean = {\n", "entry_point": "isWoodall", "test": "\n\n    var arg00 : Int = 383\n    var x0 : Boolean = isWoodall(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 254\n    var x1 : Boolean = isWoodall(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 200\n    var x2 : Boolean = isWoodall(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if the given number is woodball or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/21", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find m number of multiples of n.\n     *\n     * >>> multiplesOfNum(4, 3)\n     * List(3, 6, 9, 12)\n     * >>> multiplesOfNum(2, 5)\n     * List(5, 10)\n     * >>> multiplesOfNum(9, 2)\n     * List(2, 4, 6, 8, 10, 12, 14, 16, 18)\n     */\n    def multiplesOfNum(m : Int, n : Int) : List[Int] = {\n", "entry_point": "multiplesOfNum", "test": "\n\n    var arg00 : Int = 4\n    var arg01 : Int = 3\n    var x0 : List[Int] = multiplesOfNum(arg00, arg01)\n    var v0 : List[Int] = List(3, 6, 9, 12)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var arg11 : Int = 5\n    var x1 : List[Int] = multiplesOfNum(arg10, arg11)\n    var v1 : List[Int] = List(5, 10)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 9\n    var arg21 : Int = 2\n    var x2 : List[Int] = multiplesOfNum(arg20, arg21)\n    var v2 : List[Int] = List(2, 4, 6, 8, 10, 12, 14, 16, 18)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find m number of multiples of n.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/22", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the first duplicate element in a given array of integers.\n     *\n     * >>> findFirstDuplicate(List(1, 2, 3, 4, 4, 5))\n     * 4\n     * >>> findFirstDuplicate(List(1, 2, 3, 4))\n     * -1\n     * >>> findFirstDuplicate(List(1, 1, 2, 3, 3, 2, 2))\n     * 1\n     */\n    def findFirstDuplicate(nums : List[Int]) : Int = {\n", "entry_point": "findFirstDuplicate", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 4, 5)\n    var x0 : Int = findFirstDuplicate(arg00)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4)\n    var x1 : Int = findFirstDuplicate(arg10)\n    var v1 : Int = -1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 1, 2, 3, 3, 2, 2)\n    var x2 : Int = findFirstDuplicate(arg20)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the first duplicate element in a given array of integers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/23", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the maximum sum of elements of list in a list of lists.\n     *\n     * >>> maximumSum(List(List(1, 2, 3), List(4, 5, 6), List(10, 11, 12), List(7, 8, 9)))\n     * 33\n     * >>> maximumSum(List(List(0, 1, 1), List(1, 1, 2), List(3, 2, 1)))\n     * 6\n     * >>> maximumSum(List(List(0, 1, 3), List(1, 2, 1), List(9, 8, 2), List(0, 1, 0), List(6, 4, 8)))\n     * 19\n     */\n    def maximumSum(list1 : List[List[Int]]) : Int = {\n", "entry_point": "maximumSum", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 2, 3), List(4, 5, 6), List(10, 11, 12), List(7, 8, 9))\n    var x0 : Int = maximumSum(arg00)\n    var v0 : Int = 33\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(0, 1, 1), List(1, 1, 2), List(3, 2, 1))\n    var x1 : Int = maximumSum(arg10)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(0, 1, 3), List(1, 2, 1), List(9, 8, 2), List(0, 1, 0), List(6, 4, 8))\n    var x2 : Int = maximumSum(arg20)\n    var v2 : Int = 19\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the maximum sum of elements of list in a list of lists.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/24", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert the given binary number to its decimal equivalent.\n     *\n     * >>> binaryToDecimal(100)\n     * 4\n     * >>> binaryToDecimal(1011)\n     * 11\n     * >>> binaryToDecimal(1101101)\n     * 109\n     */\n    def binaryToDecimal(binary : Int) : Int = {\n", "entry_point": "binaryToDecimal", "test": "\n\n    var arg00 : Int = 100\n    var x0 : Int = binaryToDecimal(arg00)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1011\n    var x1 : Int = binaryToDecimal(arg10)\n    var v1 : Int = 11\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1101101\n    var x2 : Int = binaryToDecimal(arg20)\n    var v2 : Int = 109\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert the given binary number to its decimal equivalent.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/25", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the product of non-repeated elements in a given array.\n     *\n     * >>> findProduct(List(1, 1, 2, 3), 4)\n     * 6\n     * >>> findProduct(List(1, 2, 3, 1, 1), 5)\n     * 6\n     * >>> findProduct(List(1, 1, 4, 5, 6), 5)\n     * 120\n     */\n    def findProduct(arr : List[Int], n : Int) : Int = {\n", "entry_point": "findProduct", "test": "\n\n    var arg00 : List[Int] = List(1, 1, 2, 3)\n    var arg01 : Int = 4\n    var x0 : Int = findProduct(arg00, arg01)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 1, 1)\n    var arg11 : Int = 5\n    var x1 : Int = findProduct(arg10, arg11)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 1, 4, 5, 6)\n    var arg21 : Int = 5\n    var x2 : Int = findProduct(arg20, arg21)\n    var v2 : Int = 120\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the product of non-repeated elements in a given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/26", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if the given tuple list has all k elements.\n     *\n     * >>> checkKElements(List(List(4, 4), List(4, 4, 4), List(4, 4), List(4, 4, 4, 4), List(4)), 4)\n     * true\n     * >>> checkKElements(List(List(7, 7, 7), List(7, 7)), 7)\n     * true\n     * >>> checkKElements(List(List(9, 9), List(9, 9, 9, 9)), 7)\n     * false\n     */\n    def checkKElements(testList : List[List[Int]], k : Int) : Boolean = {\n", "entry_point": "checkKElements", "test": "\n\n    var arg00 : List[List[Int]] = List(List(4, 4), List(4, 4, 4), List(4, 4), List(4, 4, 4, 4), List(4))\n    var arg01 : Int = 4\n    var x0 : Boolean = checkKElements(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(7, 7, 7), List(7, 7))\n    var arg11 : Int = 7\n    var x1 : Boolean = checkKElements(arg10, arg11)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(9, 9), List(9, 9, 9, 9))\n    var arg21 : Int = 7\n    var x2 : Boolean = checkKElements(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if the given tuple list has all k elements.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/27", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to remove all digits from a list of strings.\n     *\n     * >>> remove(List(\"4words\", \"3letters\", \"4digits\"))\n     * List(\"words\", \"letters\", \"digits\")\n     * >>> remove(List(\"28Jan\", \"12Jan\", \"11Jan\"))\n     * List(\"Jan\", \"Jan\", \"Jan\")\n     * >>> remove(List(\"wonder1\", \"wonder2\", \"wonder3\"))\n     * List(\"wonder\", \"wonder\", \"wonder\")\n     */\n    def remove(list : List[String]) : List[String] = {\n", "entry_point": "remove", "test": "\n\n    var arg00 : List[String] = List(\"\"\"4words\"\"\", \"\"\"3letters\"\"\", \"\"\"4digits\"\"\")\n    var x0 : List[String] = remove(arg00)\n    var v0 : List[String] = List(\"\"\"words\"\"\", \"\"\"letters\"\"\", \"\"\"digits\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"28Jan\"\"\", \"\"\"12Jan\"\"\", \"\"\"11Jan\"\"\")\n    var x1 : List[String] = remove(arg10)\n    var v1 : List[String] = List(\"\"\"Jan\"\"\", \"\"\"Jan\"\"\", \"\"\"Jan\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"wonder1\"\"\", \"\"\"wonder2\"\"\", \"\"\"wonder3\"\"\")\n    var x2 : List[String] = remove(arg20)\n    var v2 : List[String] = List(\"\"\"wonder\"\"\", \"\"\"wonder\"\"\", \"\"\"wonder\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to remove all digits from a list of strings.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/28", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find binomial co-efficient.\n     *\n     * >>> binomialCoeff(5, 2)\n     * 10\n     * >>> binomialCoeff(4, 3)\n     * 4\n     * >>> binomialCoeff(3, 2)\n     * 3\n     */\n    def binomialCoeff(n : Int, k : Int) : Int = {\n", "entry_point": "binomialCoeff", "test": "\n\n    var arg00 : Int = 5\n    var arg01 : Int = 2\n    var x0 : Int = binomialCoeff(arg00, arg01)\n    var v0 : Int = 10\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var arg11 : Int = 3\n    var x1 : Int = binomialCoeff(arg10, arg11)\n    var v1 : Int = 4\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 3\n    var arg21 : Int = 2\n    var x2 : Int = binomialCoeff(arg20, arg21)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find binomial co-efficient.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/29", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the element occurring odd number of times.\n     *\n     * >>> getOddOccurrence(List(1, 2, 3, 1, 2, 3, 1), 7)\n     * 1\n     * >>> getOddOccurrence(List(1, 2, 3, 2, 3, 1, 3), 7)\n     * 3\n     * >>> getOddOccurrence(List(2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2), 13)\n     * 5\n     */\n    def getOddOccurrence(arr : List[Int], arrSize : Int) : Int = {\n", "entry_point": "getOddOccurrence", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 1, 2, 3, 1)\n    var arg01 : Int = 7\n    var x0 : Int = getOddOccurrence(arg00, arg01)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 2, 3, 1, 3)\n    var arg11 : Int = 7\n    var x1 : Int = getOddOccurrence(arg10, arg11)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2)\n    var arg21 : Int = 13\n    var x2 : Int = getOddOccurrence(arg20, arg21)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the element occurring odd number of times.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/30", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count all the substrings starting and ending with same characters.\n     *\n     * >>> countSubstringWithEqualEnds(\"abc\")\n     * 3\n     * >>> countSubstringWithEqualEnds(\"abcda\")\n     * 6\n     * >>> countSubstringWithEqualEnds(\"ab\")\n     * 2\n     */\n    def countSubstringWithEqualEnds(s : String) : Int = {\n", "entry_point": "countSubstringWithEqualEnds", "test": "\n\n    var arg00 : String = \"\"\"abc\"\"\"\n    var x0 : Int = countSubstringWithEqualEnds(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"abcda\"\"\"\n    var x1 : Int = countSubstringWithEqualEnds(arg10)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"ab\"\"\"\n    var x2 : Int = countSubstringWithEqualEnds(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count all the substrings starting and ending with same characters.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/31", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n     *\n     * >>> func(List(List(1, 2, 6), List(1, 3, 4, 5, 7, 8), List(1, 3, 5, 6, 8, 9), List(2, 5, 7, 11), List(1, 4, 7, 8, 12)), 3)\n     * List(5, 7, 1)\n     * >>> func(List(List(1, 2, 6), List(1, 3, 4, 5, 7, 8), List(1, 3, 5, 6, 8, 9), List(2, 5, 7, 11), List(1, 4, 7, 8, 12)), 1)\n     * List(1)\n     * >>> func(List(List(1, 2, 6), List(1, 3, 4, 5, 7, 8), List(1, 3, 5, 6, 8, 9), List(2, 5, 7, 11), List(1, 4, 7, 8, 12)), 5)\n     * List(6, 5, 7, 8, 1)\n     */\n    def func(nums : List[List[Int]], k : Int) : List[Int] = {\n", "entry_point": "func", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 2, 6), List(1, 3, 4, 5, 7, 8), List(1, 3, 5, 6, 8, 9), List(2, 5, 7, 11), List(1, 4, 7, 8, 12))\n    var arg01 : Int = 3\n    var x0 : List[Int] = func(arg00, arg01)\n    var v0 : List[Int] = List(5, 7, 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1, 2, 6), List(1, 3, 4, 5, 7, 8), List(1, 3, 5, 6, 8, 9), List(2, 5, 7, 11), List(1, 4, 7, 8, 12))\n    var arg11 : Int = 1\n    var x1 : List[Int] = func(arg10, arg11)\n    var v1 : List[Int] = List(1)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(1, 2, 6), List(1, 3, 4, 5, 7, 8), List(1, 3, 5, 6, 8, 9), List(2, 5, 7, 11), List(1, 4, 7, 8, 12))\n    var arg21 : Int = 5\n    var x2 : List[Int] = func(arg20, arg21)\n    var v2 : List[Int] = List(6, 5, 7, 8, 1)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/32", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the largest prime factor of a given number.\n     *\n     * >>> maxPrimeFactors(15)\n     * 5\n     * >>> maxPrimeFactors(6)\n     * 3\n     * >>> maxPrimeFactors(2)\n     * 2\n     */\n    def maxPrimeFactors(n : Int) : Int = {\n", "entry_point": "maxPrimeFactors", "test": "\n\n    var arg00 : Int = 15\n    var x0 : Int = maxPrimeFactors(arg00)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 6\n    var x1 : Int = maxPrimeFactors(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var x2 : Int = maxPrimeFactors(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the largest prime factor of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/33", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to convert a decimal number to binary number.\n     *\n     * >>> decimalToBinary(10)\n     * 1010\n     * >>> decimalToBinary(1)\n     * 1\n     * >>> decimalToBinary(20)\n     * 10100\n     */\n    def decimalToBinary(n : Int) : Int = {\n", "entry_point": "decimalToBinary", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = decimalToBinary(arg00)\n    var v0 : Int = 1010\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var x1 : Int = decimalToBinary(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 20\n    var x2 : Int = decimalToBinary(arg20)\n    var v2 : Int = 10100\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to convert a decimal number to binary number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/34", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the missing number in a sorted array.\n     *\n     * >>> findMissing(List(1, 2, 3, 5), 4)\n     * 4\n     * >>> findMissing(List(1, 3, 4, 5), 4)\n     * 2\n     * >>> findMissing(List(1, 2, 3, 5, 6, 7), 5)\n     * 4\n     */\n    def findMissing(ar : List[Int], n : Int) : Int = {\n", "entry_point": "findMissing", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 5)\n    var arg01 : Int = 4\n    var x0 : Int = findMissing(arg00, arg01)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 3, 4, 5)\n    var arg11 : Int = 4\n    var x1 : Int = findMissing(arg10, arg11)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 5, 6, 7)\n    var arg21 : Int = 5\n    var x2 : Int = findMissing(arg20, arg21)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the missing number in a sorted array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/35", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the n-th rectangular number.\n     *\n     * >>> findRectNum(4)\n     * 20\n     * >>> findRectNum(5)\n     * 30\n     * >>> findRectNum(6)\n     * 42\n     */\n    def findRectNum(n : Int) : Int = {\n", "entry_point": "findRectNum", "test": "\n\n    var arg00 : Int = 4\n    var x0 : Int = findRectNum(arg00)\n    var v0 : Int = 20\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var x1 : Int = findRectNum(arg10)\n    var v1 : Int = 30\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 6\n    var x2 : Int = findRectNum(arg20)\n    var v2 : Int = 42\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the n-th rectangular number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/36", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the nth digit in the proper fraction of two given numbers.\n     *\n     * >>> findNthDigit(1, 2, 1)\n     * 5\n     * >>> findNthDigit(3, 5, 1)\n     * 6\n     * >>> findNthDigit(5, 6, 5)\n     * 3\n     */\n    def findNthDigit(p : Int, q : Int, n : Int) : Int = {\n", "entry_point": "findNthDigit", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = 2\n    var arg02 : Int = 1\n    var x0 : Int = findNthDigit(arg00, arg01, arg02)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var arg11 : Int = 5\n    var arg12 : Int = 1\n    var x1 : Int = findNthDigit(arg10, arg11, arg12)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var arg21 : Int = 6\n    var arg22 : Int = 5\n    var x2 : Int = findNthDigit(arg20, arg21, arg22)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the nth digit in the proper fraction of two given numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/37", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort a given mixed list of integers and strings.\n     *\n     * >>> sortMixedList(List(19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1))\n     * List(1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\")\n     * >>> sortMixedList(List(19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1))\n     * List(1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\")\n     * >>> sortMixedList(List(19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1))\n     * List(1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\")\n     */\n    def sortMixedList(mixedList : List[Any]) : List[Any] = {\n", "entry_point": "sortMixedList", "test": "\n\n    var arg00 : List[Any] = List(19, \"\"\"red\"\"\", 12, \"\"\"green\"\"\", \"\"\"blue\"\"\", 10, \"\"\"white\"\"\", \"\"\"green\"\"\", 1)\n    var x0 : List[Any] = sortMixedList(arg00)\n    var v0 : List[Any] = List(1, 10, 12, 19, \"\"\"blue\"\"\", \"\"\"green\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\", \"\"\"white\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(19, \"\"\"red\"\"\", 12, \"\"\"green\"\"\", \"\"\"blue\"\"\", 10, \"\"\"white\"\"\", \"\"\"green\"\"\", 1)\n    var x1 : List[Any] = sortMixedList(arg10)\n    var v1 : List[Any] = List(1, 10, 12, 19, \"\"\"blue\"\"\", \"\"\"green\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\", \"\"\"white\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(19, \"\"\"red\"\"\", 12, \"\"\"green\"\"\", \"\"\"blue\"\"\", 10, \"\"\"white\"\"\", \"\"\"green\"\"\", 1)\n    var x2 : List[Any] = sortMixedList(arg20)\n    var v2 : List[Any] = List(1, 10, 12, 19, \"\"\"blue\"\"\", \"\"\"green\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\", \"\"\"white\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort a given mixed list of integers and strings.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/38", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the division of first even and odd number of a given list.\n     *\n     * >>> divEvenOdd(List(1, 3, 5, 7, 4, 1, 6, 8))\n     * 4\n     * >>> divEvenOdd(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n     * 2\n     * >>> divEvenOdd(List(1, 5, 7, 9, 10))\n     * 10\n     */\n    def divEvenOdd(list1 : List[Int]) : Int = {\n", "entry_point": "divEvenOdd", "test": "\n\n    var arg00 : List[Int] = List(1, 3, 5, 7, 4, 1, 6, 8)\n    var x0 : Int = divEvenOdd(arg00)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var x1 : Int = divEvenOdd(arg10)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 5, 7, 9, 10)\n    var x2 : Int = divEvenOdd(arg20)\n    var v2 : Int = 10\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the division of first even and odd number of a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/39", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n     *\n     * >>> rearangeString(\"aab\")\n     * \"aba\"\n     * >>> rearangeString(\"aabb\")\n     * \"abab\"\n     * >>> rearangeString(\"abccdd\")\n     * \"cdabcd\"\n     */\n    def rearangeString(s : String) : String = {\n", "entry_point": "rearangeString", "test": "\n\n    var arg00 : String = \"\"\"aab\"\"\"\n    var x0 : String = rearangeString(arg00)\n    var v0 : String = \"\"\"aba\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"aabb\"\"\"\n    var x1 : String = rearangeString(arg10)\n    var v1 : String = \"\"\"abab\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"abccdd\"\"\"\n    var x2 : String = rearangeString(arg20)\n    var v2 : String = \"\"\"cdabcd\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/40", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find frequency of the elements in a given list of lists using collections module.\n     *\n     * >>> freqElement(List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 1, 9, 5)))\n     * Map(2->3, 1->2, 5->2, 3->1, 4->1, 6->1, 7->1, 9->1)\n     * >>> freqElement(List(List(1, 2, 3, 4), List(5, 6, 7, 8), List(9, 10, 11, 12)))\n     * Map(1->1, 2->1, 3->1, 4->1, 5->1, 6->1, 7->1, 8->1, 9->1, 10->1, 11->1, 12->1)\n     * >>> freqElement(List(List(15, 20, 30, 40), List(80, 90, 100, 110), List(30, 30, 80, 90)))\n     * Map(30->3, 80->2, 90->2, 15->1, 20->1, 40->1, 100->1, 110->1)\n     */\n    def freqElement(nums : List[List[Int]]) : Map[Int, Int] = {\n", "entry_point": "freqElement", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 1, 9, 5))\n    var x0 : Map[Int, Int] = freqElement(arg00)\n    var v0 : Map[Int, Int] = Map(2 -> 3, 1 -> 2, 5 -> 2, 3 -> 1, 4 -> 1, 6 -> 1, 7 -> 1, 9 -> 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1, 2, 3, 4), List(5, 6, 7, 8), List(9, 10, 11, 12))\n    var x1 : Map[Int, Int] = freqElement(arg10)\n    var v1 : Map[Int, Int] = Map(1 -> 1, 2 -> 1, 3 -> 1, 4 -> 1, 5 -> 1, 6 -> 1, 7 -> 1, 8 -> 1, 9 -> 1, 10 -> 1, 11 -> 1, 12 -> 1)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(15, 20, 30, 40), List(80, 90, 100, 110), List(30, 30, 80, 90))\n    var x2 : Map[Int, Int] = freqElement(arg20)\n    var v2 : Map[Int, Int] = Map(30 -> 3, 80 -> 2, 90 -> 2, 15 -> 1, 20 -> 1, 40 -> 1, 100 -> 1, 110 -> 1)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find frequency of the elements in a given list of lists using collections module.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/41", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to filter even numbers using lambda function.\n     *\n     * >>> filterEvennumbers(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n     * List(2, 4, 6, 8, 10)\n     * >>> filterEvennumbers(List(10, 20, 45, 67, 84, 93))\n     * List(10, 20, 84)\n     * >>> filterEvennumbers(List(5, 7, 9, 8, 6, 4, 3))\n     * List(8, 6, 4)\n     */\n    def filterEvennumbers(nums : List[Int]) : List[Int] = {\n", "entry_point": "filterEvennumbers", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var x0 : List[Int] = filterEvennumbers(arg00)\n    var v0 : List[Int] = List(2, 4, 6, 8, 10)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(10, 20, 45, 67, 84, 93)\n    var x1 : List[Int] = filterEvennumbers(arg10)\n    var v1 : List[Int] = List(10, 20, 84)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(5, 7, 9, 8, 6, 4, 3)\n    var x2 : List[Int] = filterEvennumbers(arg20)\n    var v2 : List[Int] = List(8, 6, 4)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to filter even numbers using lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/42", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of repeated elements in a given array.\n     *\n     * >>> findSum(List(1, 2, 3, 1, 1, 4, 5, 6), 8)\n     * 3\n     * >>> findSum(List(1, 2, 3, 1, 1), 5)\n     * 3\n     * >>> findSum(List(1, 1, 2), 3)\n     * 2\n     */\n    def findSum(arr : List[Int], n : Int) : Int = {\n", "entry_point": "findSum", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 1, 1, 4, 5, 6)\n    var arg01 : Int = 8\n    var x0 : Int = findSum(arg00, arg01)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 1, 1)\n    var arg11 : Int = 5\n    var x1 : Int = findSum(arg10, arg11)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 1, 2)\n    var arg21 : Int = 3\n    var x2 : Int = findSum(arg20, arg21)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of repeated elements in a given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/43", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find sequences of lowercase letters joined with an underscore using regex.\n     *\n     * >>> textMatch(\"aab_cbbbc\")\n     * \"Found a match!\"\n     * >>> textMatch(\"aab_Abbbc\")\n     * \"Not matched!\"\n     * >>> textMatch(\"Aaab_abbbc\")\n     * \"Not matched!\"\n     */\n    def textMatch(text : String) : String = {\n", "entry_point": "textMatch", "test": "\n\n    var arg00 : String = \"\"\"aab_cbbbc\"\"\"\n    var x0 : String = textMatch(arg00)\n    var v0 : String = \"\"\"Found a match!\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"aab_Abbbc\"\"\"\n    var x1 : String = textMatch(arg10)\n    var v1 : String = \"\"\"Not matched!\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Aaab_abbbc\"\"\"\n    var x2 : String = textMatch(arg20)\n    var v2 : String = \"\"\"Not matched!\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find sequences of lowercase letters joined with an underscore using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/44", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function that matches a word at the beginning of a string.\n     *\n     * >>> textMatchString(\" python\")\n     * \"Not matched!\"\n     * >>> textMatchString(\"python\")\n     * \"Found a match!\"\n     * >>> textMatchString(\"  lang\")\n     * \"Not matched!\"\n     */\n    def textMatchString(text : String) : String = {\n", "entry_point": "textMatchString", "test": "\n\n    var arg00 : String = \"\"\" python\"\"\"\n    var x0 : String = textMatchString(arg00)\n    var v0 : String = \"\"\"Not matched!\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"python\"\"\"\n    var x1 : String = textMatchString(arg10)\n    var v1 : String = \"\"\"Found a match!\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"  lang\"\"\"\n    var x2 : String = textMatchString(arg20)\n    var v2 : String = \"\"\"Not matched!\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function that matches a word at the beginning of a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/45", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the gcd of the given array elements.\n     *\n     * >>> getGcd(List(2, 4, 6, 8, 16))\n     * 2\n     * >>> getGcd(List(1, 2, 3))\n     * 1\n     * >>> getGcd(List(2, 4, 6, 8))\n     * 2\n     */\n    def getGcd(l : List[Int]) : Int = {\n", "entry_point": "getGcd", "test": "\n\n    var arg00 : List[Int] = List(2, 4, 6, 8, 16)\n    var x0 : Int = getGcd(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3)\n    var x1 : Int = getGcd(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 4, 6, 8)\n    var x2 : Int = getGcd(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the gcd of the given array elements.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/46", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to determine whether all the numbers are different from each other are not.\n     *\n     * >>> testDistinct(List(1, 5, 7, 9))\n     * true\n     * >>> testDistinct(List(2, 4, 5, 5, 7, 9))\n     * false\n     * >>> testDistinct(List(1, 2, 3))\n     * true\n     */\n    def testDistinct(data : List[Int]) : Boolean = {\n", "entry_point": "testDistinct", "test": "\n\n    var arg00 : List[Int] = List(1, 5, 7, 9)\n    var x0 : Boolean = testDistinct(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 4, 5, 5, 7, 9)\n    var x1 : Boolean = testDistinct(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3)\n    var x2 : Boolean = testDistinct(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to determine whether all the numbers are different from each other are not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/47", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the last digit when factorial of a divides factorial of b.\n     *\n     * >>> computeLastDigit(2, 4)\n     * 2\n     * >>> computeLastDigit(6, 8)\n     * 6\n     * >>> computeLastDigit(1, 2)\n     * 2\n     */\n    def computeLastDigit(a : Int, b : Int) : Int = {\n", "entry_point": "computeLastDigit", "test": "\n\n    var arg00 : Int = 2\n    var arg01 : Int = 4\n    var x0 : Int = computeLastDigit(arg00, arg01)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 6\n    var arg11 : Int = 8\n    var x1 : Int = computeLastDigit(arg10, arg11)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = 2\n    var x2 : Int = computeLastDigit(arg20, arg21)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the last digit when factorial of a divides factorial of b.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/48", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to set all odd bits of a given number.\n     *\n     * >>> oddBitSetNumber(10)\n     * 15\n     * >>> oddBitSetNumber(20)\n     * 21\n     * >>> oddBitSetNumber(30)\n     * 31\n     */\n    def oddBitSetNumber(n : Int) : Int = {\n", "entry_point": "oddBitSetNumber", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = oddBitSetNumber(arg00)\n    var v0 : Int = 15\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 20\n    var x1 : Int = oddBitSetNumber(arg10)\n    var v1 : Int = 21\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 30\n    var x2 : Int = oddBitSetNumber(arg20)\n    var v2 : Int = 31\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to set all odd bits of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/49", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract every first or specified element from a given two-dimensional list.\n     *\n     * >>> specifiedElement(List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 1, 9, 5)), 0)\n     * List(1, 4, 7)\n     * >>> specifiedElement(List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 1, 9, 5)), 2)\n     * List(3, 6, 9)\n     * >>> specifiedElement(List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 1, 9, 5)), 1)\n     * List(2, 5, 1)\n     */\n    def specifiedElement(nums : List[List[Int]], n : Int) : List[Int] = {\n", "entry_point": "specifiedElement", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 1, 9, 5))\n    var arg01 : Int = 0\n    var x0 : List[Int] = specifiedElement(arg00, arg01)\n    var v0 : List[Int] = List(1, 4, 7)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 1, 9, 5))\n    var arg11 : Int = 2\n    var x1 : List[Int] = specifiedElement(arg10, arg11)\n    var v1 : List[Int] = List(3, 6, 9)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 1, 9, 5))\n    var arg21 : Int = 1\n    var x2 : List[Int] = specifiedElement(arg20, arg21)\n    var v2 : List[Int] = List(2, 5, 1)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract every first or specified element from a given two-dimensional list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/50", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the list with minimum length using lambda function.\n     *\n     * >>> minLengthList(List(List(0), List(1, 3), List(5, 7), List(9, 11), List(13, 15, 17)))\n     * List(1, List(0))\n     * >>> minLengthList(List(List(1, 2, 3, 4, 5), List(1, 2, 3, 4), List(1, 2, 3), List(1, 2), List(1)))\n     * List(1, List(1))\n     * >>> minLengthList(List(List(3, 4, 5), List(6, 7, 8, 9), List(10, 11, 12), List(1, 2)))\n     * List(2, List(1, 2))\n     */\n    def minLengthList(inputList : List[List[Int]]) : List[Any] = {\n", "entry_point": "minLengthList", "test": "\n\n    var arg00 : List[List[Int]] = List(List(0), List(1, 3), List(5, 7), List(9, 11), List(13, 15, 17))\n    var x0 : List[Any] = minLengthList(arg00)\n    var v0 : List[Any] = List(1, List(0))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1, 2, 3, 4, 5), List(1, 2, 3, 4), List(1, 2, 3), List(1, 2), List(1))\n    var x1 : List[Any] = minLengthList(arg10)\n    var v1 : List[Any] = List(1, List(1))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(3, 4, 5), List(6, 7, 8, 9), List(10, 11, 12), List(1, 2))\n    var x2 : List[Any] = minLengthList(arg20)\n    var v2 : List[Any] = List(2, List(1, 2))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the list with minimum length using lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/51", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to print check if the triangle is equilateral or not.\n     *\n     * >>> checkEquilateral(6, 8, 12)\n     * false\n     * >>> checkEquilateral(6, 6, 12)\n     * false\n     * >>> checkEquilateral(6, 6, 6)\n     * true\n     */\n    def checkEquilateral(x : Int, y : Int, z : Int) : Boolean = {\n", "entry_point": "checkEquilateral", "test": "\n\n    var arg00 : Int = 6\n    var arg01 : Int = 8\n    var arg02 : Int = 12\n    var x0 : Boolean = checkEquilateral(arg00, arg01, arg02)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 6\n    var arg11 : Int = 6\n    var arg12 : Int = 12\n    var x1 : Boolean = checkEquilateral(arg10, arg11, arg12)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 6\n    var arg21 : Int = 6\n    var arg22 : Int = 6\n    var x2 : Boolean = checkEquilateral(arg20, arg21, arg22)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to print check if the triangle is equilateral or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/52", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to caluclate area of a parallelogram.\n     *\n     * >>> parallelogramArea(10, 20)\n     * 200\n     * >>> parallelogramArea(15, 20)\n     * 300\n     * >>> parallelogramArea(8, 9)\n     * 72\n     */\n    def parallelogramArea(b : Int, h : Int) : Int = {\n", "entry_point": "parallelogramArea", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 20\n    var x0 : Int = parallelogramArea(arg00, arg01)\n    var v0 : Int = 200\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 15\n    var arg11 : Int = 20\n    var x1 : Int = parallelogramArea(arg10, arg11)\n    var v1 : Int = 300\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 8\n    var arg21 : Int = 9\n    var x2 : Int = parallelogramArea(arg20, arg21)\n    var v2 : Int = 72\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to caluclate area of a parallelogram.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/53", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the first and last characters of a given string are equal or not.\n     *\n     * >>> checkEquality(\"abcda\")\n     * \"Equal\"\n     * >>> checkEquality(\"ab\")\n     * \"Not Equal\"\n     * >>> checkEquality(\"mad\")\n     * \"Not Equal\"\n     */\n    def checkEquality(str : String) : String = {\n", "entry_point": "checkEquality", "test": "\n\n    var arg00 : String = \"\"\"abcda\"\"\"\n    var x0 : String = checkEquality(arg00)\n    var v0 : String = \"\"\"Equal\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"ab\"\"\"\n    var x1 : String = checkEquality(arg10)\n    var v1 : String = \"\"\"Not Equal\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"mad\"\"\"\n    var x2 : String = checkEquality(arg20)\n    var v2 : String = \"\"\"Not Equal\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the first and last characters of a given string are equal or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/54", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort the given array by using counting sort.\n     *\n     * >>> countingSort(List(1, 23, 4, 5, 6, 7, 8))\n     * List(1, 4, 5, 6, 7, 8, 23)\n     * >>> countingSort(List(12, 9, 28, 33, 69, 45))\n     * List(9, 12, 28, 33, 45, 69)\n     * >>> countingSort(List(8, 4, 14, 3, 2, 1))\n     * List(1, 2, 3, 4, 8, 14)\n     */\n    def countingSort(myList : List[Int]) : List[Int] = {\n", "entry_point": "countingSort", "test": "\n\n    var arg00 : List[Int] = List(1, 23, 4, 5, 6, 7, 8)\n    var x0 : List[Int] = countingSort(arg00)\n    var v0 : List[Int] = List(1, 4, 5, 6, 7, 8, 23)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(12, 9, 28, 33, 69, 45)\n    var x1 : List[Int] = countingSort(arg10)\n    var v1 : List[Int] = List(9, 12, 28, 33, 45, 69)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(8, 4, 14, 3, 2, 1)\n    var x2 : List[Int] = countingSort(arg20)\n    var v2 : List[Int] = List(1, 2, 3, 4, 8, 14)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort the given array by using counting sort.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/55", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find t-nth term of geometric series.\n     *\n     * >>> tnGp(1, 5, 2)\n     * 16\n     * >>> tnGp(1, 5, 4)\n     * 256\n     * >>> tnGp(2, 6, 3)\n     * 486\n     */\n    def tnGp(a : Int, n : Int, r : Int) : Int = {\n", "entry_point": "tnGp", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = 5\n    var arg02 : Int = 2\n    var x0 : Int = tnGp(arg00, arg01, arg02)\n    var v0 : Int = 16\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var arg11 : Int = 5\n    var arg12 : Int = 4\n    var x1 : Int = tnGp(arg10, arg11, arg12)\n    var v1 : Int = 256\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var arg21 : Int = 6\n    var arg22 : Int = 3\n    var x2 : Int = tnGp(arg20, arg21, arg22)\n    var v2 : Int = 486\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find t-nth term of geometric series.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/56", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check if a given number is one less than twice its reverse.\n     *\n     * >>> check(70)\n     * false\n     * >>> check(23)\n     * false\n     * >>> check(73)\n     * true\n     */\n    def check(n : Int) : Boolean = {\n", "entry_point": "check", "test": "\n\n    var arg00 : Int = 70\n    var x0 : Boolean = check(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 23\n    var x1 : Boolean = check(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 73\n    var x2 : Boolean = check(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check if a given number is one less than twice its reverse.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/57", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the largest number that can be formed with the given digits.\n     *\n     * >>> findMaxNum(List(1, 2, 3), 3)\n     * 321\n     * >>> findMaxNum(List(4, 5, 6, 1), 4)\n     * 6541\n     * >>> findMaxNum(List(1, 2, 3, 9), 4)\n     * 9321\n     */\n    def findMaxNum(arr : List[Int], n : Int) : Int = {\n", "entry_point": "findMaxNum", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3)\n    var arg01 : Int = 3\n    var x0 : Int = findMaxNum(arg00, arg01)\n    var v0 : Int = 321\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 5, 6, 1)\n    var arg11 : Int = 4\n    var x1 : Int = findMaxNum(arg10, arg11)\n    var v1 : Int = 6541\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 9)\n    var arg21 : Int = 4\n    var x2 : Int = findMaxNum(arg20, arg21)\n    var v2 : Int = 9321\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the largest number that can be formed with the given digits.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/58", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the given two integers have opposite sign or not.\n     *\n     * >>> oppositeSigns(1, -2)\n     * true\n     * >>> oppositeSigns(3, 2)\n     * false\n     * >>> oppositeSigns(-10, -10)\n     * false\n     */\n    def oppositeSigns(x : Int, y : Int) : Boolean = {\n", "entry_point": "oppositeSigns", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = -2\n    var x0 : Boolean = oppositeSigns(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var arg11 : Int = 2\n    var x1 : Boolean = oppositeSigns(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = -10\n    var arg21 : Int = -10\n    var x2 : Boolean = oppositeSigns(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the given two integers have opposite sign or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/59", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the nth octagonal number.\n     *\n     * >>> isOctagonal(5)\n     * 65\n     * >>> isOctagonal(10)\n     * 280\n     * >>> isOctagonal(15)\n     * 645\n     */\n    def isOctagonal(n : Int) : Int = {\n", "entry_point": "isOctagonal", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Int = isOctagonal(arg00)\n    var v0 : Int = 65\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var x1 : Int = isOctagonal(arg10)\n    var v1 : Int = 280\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 15\n    var x2 : Int = isOctagonal(arg20)\n    var v2 : Int = 645\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the nth octagonal number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/60", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n     *\n     * >>> maxLenSub(List(2, 5, 6, 3, 7, 6, 5, 8), 8)\n     * 5\n     * >>> maxLenSub(List(-2, -1, 5, -1, 4, 0, 3), 7)\n     * 4\n     * >>> maxLenSub(List(9, 11, 13, 15, 18), 5)\n     * 1\n     */\n    def maxLenSub(arr : List[Int], n : Int) : Int = {\n", "entry_point": "maxLenSub", "test": "\n\n    var arg00 : List[Int] = List(2, 5, 6, 3, 7, 6, 5, 8)\n    var arg01 : Int = 8\n    var x0 : Int = maxLenSub(arg00, arg01)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(-2, -1, 5, -1, 4, 0, 3)\n    var arg11 : Int = 7\n    var x1 : Int = maxLenSub(arg10, arg11)\n    var v1 : Int = 4\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(9, 11, 13, 15, 18)\n    var arg21 : Int = 5\n    var x2 : Int = maxLenSub(arg20, arg21)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/61", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count number of substrings with the sum of digits equal to their length.\n     *\n     * >>> countSubstrings(\"112112\", 6)\n     * 6\n     * >>> countSubstrings(\"111\", 3)\n     * 6\n     * >>> countSubstrings(\"1101112\", 7)\n     * 12\n     */\n    def countSubstrings(s : String, n : Int) : Int = {\n", "entry_point": "countSubstrings", "test": "\n\n    var arg00 : String = \"\"\"112112\"\"\"\n    var arg01 : Int = 6\n    var x0 : Int = countSubstrings(arg00, arg01)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"111\"\"\"\n    var arg11 : Int = 3\n    var x1 : Int = countSubstrings(arg10, arg11)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"1101112\"\"\"\n    var arg21 : Int = 7\n    var x2 : Int = countSubstrings(arg20, arg21)\n    var v2 : Int = 12\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count number of substrings with the sum of digits equal to their length.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/62", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find smallest number in a list.\n     *\n     * >>> smallestNum(List(10, 20, 1, 45, 99))\n     * 1\n     * >>> smallestNum(List(1, 2, 3))\n     * 1\n     * >>> smallestNum(List(45, 46, 50, 60))\n     * 45\n     */\n    def smallestNum(xs : List[Int]) : Int = {\n", "entry_point": "smallestNum", "test": "\n\n    var arg00 : List[Int] = List(10, 20, 1, 45, 99)\n    var x0 : Int = smallestNum(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3)\n    var x1 : Int = smallestNum(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(45, 46, 50, 60)\n    var x2 : Int = smallestNum(arg20)\n    var v2 : Int = 45\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find smallest number in a list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/63", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the maximum difference between available pairs in the given tuple list.\n     *\n     * >>> maxDifference(List(List(3, 5), List(1, 7), List(10, 3), List(1, 2)))\n     * 7\n     * >>> maxDifference(List(List(4, 6), List(2, 17), List(9, 13), List(11, 12)))\n     * 15\n     * >>> maxDifference(List(List(12, 35), List(21, 27), List(13, 23), List(41, 22)))\n     * 23\n     */\n    def maxDifference(testList : List[List[Int]]) : Int = {\n", "entry_point": "maxDifference", "test": "\n\n    var arg00 : List[List[Int]] = List(List(3, 5), List(1, 7), List(10, 3), List(1, 2))\n    var x0 : Int = maxDifference(arg00)\n    var v0 : Int = 7\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(4, 6), List(2, 17), List(9, 13), List(11, 12))\n    var x1 : Int = maxDifference(arg10)\n    var v1 : Int = 15\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(12, 35), List(21, 27), List(13, 23), List(41, 22))\n    var x2 : Int = maxDifference(arg20)\n    var v2 : Int = 23\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the maximum difference between available pairs in the given tuple list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/64", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort a list of tuples using lambda.\n     *\n     * >>> subjectMarks(List(List(\"English\", 88), List(\"Science\", 90), List(\"Maths\", 97), List(\"Social sciences\", 82)))\n     * List(List(\"Social sciences\", 82), List(\"English\", 88), List(\"Science\", 90), List(\"Maths\", 97))\n     * >>> subjectMarks(List(List(\"Telugu\", 49), List(\"Hindhi\", 54), List(\"Social\", 33)))\n     * List(List(\"Social\", 33), List(\"Telugu\", 49), List(\"Hindhi\", 54))\n     * >>> subjectMarks(List(List(\"Physics\", 96), List(\"Chemistry\", 97), List(\"Biology\", 45)))\n     * List(List(\"Biology\", 45), List(\"Physics\", 96), List(\"Chemistry\", 97))\n     */\n    def subjectMarks(subjectmarks : List[List[Any]]) : List[List[Any]] = {\n", "entry_point": "subjectMarks", "test": "\n\n    var arg00 : List[List[Any]] = List(List(\"\"\"English\"\"\", 88), List(\"\"\"Science\"\"\", 90), List(\"\"\"Maths\"\"\", 97), List(\"\"\"Social sciences\"\"\", 82))\n    var x0 : List[List[Any]] = subjectMarks(arg00)\n    var v0 : List[List[Any]] = List(List(\"\"\"Social sciences\"\"\", 82), List(\"\"\"English\"\"\", 88), List(\"\"\"Science\"\"\", 90), List(\"\"\"Maths\"\"\", 97))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(\"\"\"Telugu\"\"\", 49), List(\"\"\"Hindhi\"\"\", 54), List(\"\"\"Social\"\"\", 33))\n    var x1 : List[List[Any]] = subjectMarks(arg10)\n    var v1 : List[List[Any]] = List(List(\"\"\"Social\"\"\", 33), List(\"\"\"Telugu\"\"\", 49), List(\"\"\"Hindhi\"\"\", 54))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(\"\"\"Physics\"\"\", 96), List(\"\"\"Chemistry\"\"\", 97), List(\"\"\"Biology\"\"\", 45))\n    var x2 : List[List[Any]] = subjectMarks(arg20)\n    var v2 : List[List[Any]] = List(List(\"\"\"Biology\"\"\", 45), List(\"\"\"Physics\"\"\", 96), List(\"\"\"Chemistry\"\"\", 97))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort a list of tuples using lambda.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/65", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function of recursion list sum.\n     *\n     * >>> recursiveListSum(List(1, 2, List(3, 4), List(5, 6)))\n     * 21\n     * >>> recursiveListSum(List(7, 10, List(15, 14), List(19, 41)))\n     * 106\n     * >>> recursiveListSum(List(10, 20, List(30, 40), List(50, 60)))\n     * 210\n     */\n    def recursiveListSum(dataList : List[Any]) : Int = {\n", "entry_point": "recursiveListSum", "test": "\n\n    var arg00 : List[Any] = List(1, 2, List(3, 4), List(5, 6))\n    var x0 : Int = recursiveListSum(arg00)\n    var v0 : Int = 21\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(7, 10, List(15, 14), List(19, 41))\n    var x1 : Int = recursiveListSum(arg10)\n    var v1 : Int = 106\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(10, 20, List(30, 40), List(50, 60))\n    var x2 : Int = recursiveListSum(arg20)\n    var v2 : Int = 210\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function of recursion list sum.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/66", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count positive numbers in a list.\n     *\n     * >>> posCount(List(1, -2, 3, -4))\n     * 2\n     * >>> posCount(List(3, 4, 5, -1))\n     * 3\n     * >>> posCount(List(1, 2, 3, 4))\n     * 4\n     */\n    def posCount(list : List[Int]) : Int = {\n", "entry_point": "posCount", "test": "\n\n    var arg00 : List[Int] = List(1, -2, 3, -4)\n    var x0 : Int = posCount(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(3, 4, 5, -1)\n    var x1 : Int = posCount(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4)\n    var x2 : Int = posCount(arg20)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count positive numbers in a list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/67", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the number of ways to partition a set of bell numbers.\n     *\n     * >>> bellNumber(2)\n     * 2\n     * >>> bellNumber(10)\n     * 115975\n     * >>> bellNumber(56)\n     * 6775685320645824322581483068371419745979053216268760300\n     */\n    def bellNumber(n : Int) : Int = {\n", "entry_point": "bellNumber", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = bellNumber(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var x1 : Int = bellNumber(arg10)\n    var v1 : Int = 115975\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 56\n    var x2 : Int = bellNumber(arg20)\n    var v2 : Int = 6775685320645824322581483068371419745979053216268760300\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the number of ways to partition a set of bell numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/68", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the given array is monotonic or not.\n     *\n     * >>> isMonotonic(List(6, 5, 4, 4))\n     * true\n     * >>> isMonotonic(List(1, 2, 2, 3))\n     * true\n     * >>> isMonotonic(List(1, 3, 2))\n     * false\n     */\n    def isMonotonic(a : List[Int]) : Boolean = {\n", "entry_point": "isMonotonic", "test": "\n\n    var arg00 : List[Int] = List(6, 5, 4, 4)\n    var x0 : Boolean = isMonotonic(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 2, 3)\n    var x1 : Boolean = isMonotonic(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 3, 2)\n    var x2 : Boolean = isMonotonic(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the given array is monotonic or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/69", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether a list contains the given sublist or not.\n     *\n     * >>> isSublist(List(2, 4, 3, 5, 7), List(3, 7))\n     * false\n     * >>> isSublist(List(2, 4, 3, 5, 7), List(4, 3))\n     * true\n     * >>> isSublist(List(2, 4, 3, 5, 7), List(1, 6))\n     * false\n     */\n    def isSublist(l : List[Int], s : List[Int]) : Boolean = {\n", "entry_point": "isSublist", "test": "\n\n    var arg00 : List[Int] = List(2, 4, 3, 5, 7)\n    var arg01 : List[Int] = List(3, 7)\n    var x0 : Boolean = isSublist(arg00, arg01)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 4, 3, 5, 7)\n    var arg11 : List[Int] = List(4, 3)\n    var x1 : Boolean = isSublist(arg10, arg11)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 4, 3, 5, 7)\n    var arg21 : List[Int] = List(1, 6)\n    var x2 : Boolean = isSublist(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether a list contains the given sublist or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/70", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find whether all the given tuples have equal length or not.\n     *\n     * >>> getEqual(List(List(11, 22, 33), List(44, 55, 66)), 3)\n     * \"All tuples have same length\"\n     * >>> getEqual(List(List(1, 2, 3), List(4, 5, 6, 7)), 3)\n     * \"All tuples do not have same length\"\n     * >>> getEqual(List(List(1, 2), List(3, 4)), 2)\n     * \"All tuples have same length\"\n     */\n    def getEqual(input : List[List[Int]], k : Int) : String = {\n", "entry_point": "getEqual", "test": "\n\n    var arg00 : List[List[Int]] = List(List(11, 22, 33), List(44, 55, 66))\n    var arg01 : Int = 3\n    var x0 : String = getEqual(arg00, arg01)\n    var v0 : String = \"\"\"All tuples have same length\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1, 2, 3), List(4, 5, 6, 7))\n    var arg11 : Int = 3\n    var x1 : String = getEqual(arg10, arg11)\n    var v1 : String = \"\"\"All tuples do not have same length\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(1, 2), List(3, 4))\n    var arg21 : Int = 2\n    var x2 : String = getEqual(arg20, arg21)\n    var v2 : String = \"\"\"All tuples have same length\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find whether all the given tuples have equal length or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/71", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort a list of elements using comb sort.\n     *\n     * >>> combSort(List(5, 15, 37, 25, 79))\n     * List(5, 15, 25, 37, 79)\n     * >>> combSort(List(41, 32, 15, 19, 22))\n     * List(15, 19, 22, 32, 41)\n     * >>> combSort(List(99, 15, 13, 47))\n     * List(13, 15, 47, 99)\n     */\n    def combSort(nums : List[Int]) : List[Int] = {\n", "entry_point": "combSort", "test": "\n\n    var arg00 : List[Int] = List(5, 15, 37, 25, 79)\n    var x0 : List[Int] = combSort(arg00)\n    var v0 : List[Int] = List(5, 15, 25, 37, 79)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(41, 32, 15, 19, 22)\n    var x1 : List[Int] = combSort(arg10)\n    var v1 : List[Int] = List(15, 19, 22, 32, 41)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(99, 15, 13, 47)\n    var x2 : List[Int] = combSort(arg20)\n    var v2 : List[Int] = List(13, 15, 47, 99)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort a list of elements using comb sort.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/72", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the given number can be represented as difference of two squares or not.\n     *\n     * >>> difSquare(5)\n     * true\n     * >>> difSquare(10)\n     * false\n     * >>> difSquare(15)\n     * true\n     */\n    def difSquare(n : Int) : Boolean = {\n", "entry_point": "difSquare", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Boolean = difSquare(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var x1 : Boolean = difSquare(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 15\n    var x2 : Boolean = difSquare(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the given number can be represented as difference of two squares or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/73", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to split the given string with multiple delimiters by using regex.\n     *\n     * >>> multipleSplit(\"Forces of the \\ndarkness*are coming into the play.\")\n     * List(\"Forces of the \", \"darkness\", \"are coming into the play.\")\n     * >>> multipleSplit(\"Mi Box runs on the \\n Latest android*which has google assistance and chromecast.\")\n     * List(\"Mi Box runs on the \", \" Latest android\", \"which has google assistance and chromecast.\")\n     * >>> multipleSplit(\"Certain services\\nare subjected to change*over the seperate subscriptions.\")\n     * List(\"Certain services\", \"are subjected to change\", \"over the seperate subscriptions.\")\n     */\n    def multipleSplit(text : String) : List[String] = {\n", "entry_point": "multipleSplit", "test": "\n\n    var arg00 : String = \"\"\"Forces of the \\ndarkness*are coming into the play.\"\"\"\n    var x0 : List[String] = multipleSplit(arg00)\n    var v0 : List[String] = List(\"\"\"Forces of the \"\"\", \"\"\"darkness\"\"\", \"\"\"are coming into the play.\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Mi Box runs on the \\n Latest android*which has google assistance and chromecast.\"\"\"\n    var x1 : List[String] = multipleSplit(arg10)\n    var v1 : List[String] = List(\"\"\"Mi Box runs on the \"\"\", \"\"\" Latest android\"\"\", \"\"\"which has google assistance and chromecast.\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Certain services\\nare subjected to change*over the seperate subscriptions.\"\"\"\n    var x2 : List[String] = multipleSplit(arg20)\n    var v2 : List[String] = List(\"\"\"Certain services\"\"\", \"\"\"are subjected to change\"\"\", \"\"\"over the seperate subscriptions.\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to split the given string with multiple delimiters by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/74", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether it follows the sequence given in the patterns array.\n     *\n     * >>> isSamepatterns(List(\"red\", \"green\", \"green\"), List(\"a\", \"b\", \"b\"))\n     * true\n     * >>> isSamepatterns(List(\"red\", \"green\", \"greenn\"), List(\"a\", \"b\", \"b\"))\n     * false\n     * >>> isSamepatterns(List(\"red\", \"green\", \"greenn\"), List(\"a\", \"b\"))\n     * false\n     */\n    def isSamepatterns(colors : List[String], patterns : List[String]) : Boolean = {\n", "entry_point": "isSamepatterns", "test": "\n\n    var arg00 : List[String] = List(\"\"\"red\"\"\", \"\"\"green\"\"\", \"\"\"green\"\"\")\n    var arg01 : List[String] = List(\"\"\"a\"\"\", \"\"\"b\"\"\", \"\"\"b\"\"\")\n    var x0 : Boolean = isSamepatterns(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"red\"\"\", \"\"\"green\"\"\", \"\"\"greenn\"\"\")\n    var arg11 : List[String] = List(\"\"\"a\"\"\", \"\"\"b\"\"\", \"\"\"b\"\"\")\n    var x1 : Boolean = isSamepatterns(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"red\"\"\", \"\"\"green\"\"\", \"\"\"greenn\"\"\")\n    var arg21 : List[String] = List(\"\"\"a\"\"\", \"\"\"b\"\"\")\n    var x2 : Boolean = isSamepatterns(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether it follows the sequence given in the patterns array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/75", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n     *\n     * >>> findTuples(List(List(6, 24, 12), List(7, 9, 6), List(12, 18, 21)), 6)\n     * \"[(6, 24, 12)]\"\n     * >>> findTuples(List(List(5, 25, 30), List(4, 2, 3), List(7, 8, 9)), 5)\n     * \"[(5, 25, 30)]\"\n     * >>> findTuples(List(List(7, 9, 16), List(8, 16, 4), List(19, 17, 18)), 4)\n     * \"[(8, 16, 4)]\"\n     */\n    def findTuples(testList : List[List[Int]], k : Int) : String = {\n", "entry_point": "findTuples", "test": "\n\n    var arg00 : List[List[Int]] = List(List(6, 24, 12), List(7, 9, 6), List(12, 18, 21))\n    var arg01 : Int = 6\n    var x0 : String = findTuples(arg00, arg01)\n    var v0 : String = \"\"\"[(6, 24, 12)]\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(5, 25, 30), List(4, 2, 3), List(7, 8, 9))\n    var arg11 : Int = 5\n    var x1 : String = findTuples(arg10, arg11)\n    var v1 : String = \"\"\"[(5, 25, 30)]\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(7, 9, 16), List(8, 16, 4), List(19, 17, 18))\n    var arg21 : Int = 4\n    var x2 : String = findTuples(arg20, arg21)\n    var v2 : String = \"\"\"[(8, 16, 4)]\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/76", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the number of squares in a rectangle.\n     *\n     * >>> countSquares(4, 3)\n     * 20\n     * >>> countSquares(2, 2)\n     * 5\n     * >>> countSquares(1, 1)\n     * 1\n     */\n    def countSquares(m : Int, n : Int) : Int = {\n", "entry_point": "countSquares", "test": "\n\n    var arg00 : Int = 4\n    var arg01 : Int = 3\n    var x0 : Int = countSquares(arg00, arg01)\n    var v0 : Int = 20\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var arg11 : Int = 2\n    var x1 : Int = countSquares(arg10, arg11)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = 1\n    var x2 : Int = countSquares(arg20, arg21)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the number of squares in a rectangle.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/77", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the difference between sum of even and odd digits.\n     *\n     * >>> isDiff(1212112)\n     * true\n     * >>> isDiff(1212)\n     * false\n     */\n    def isDiff(n : Int) : Boolean = {\n", "entry_point": "isDiff", "test": "\n\n    var arg00 : Int = 1212112\n    var x0 : Boolean = isDiff(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1212\n    var x1 : Boolean = isDiff(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n\n}\n", "description": "Write a Scala function to find the difference between sum of even and odd digits.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/78", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find number of integers with odd number of set bits.\n     *\n     * >>> countWithOddSetbits(5)\n     * 3\n     * >>> countWithOddSetbits(10)\n     * 5\n     * >>> countWithOddSetbits(15)\n     * 8\n     */\n    def countWithOddSetbits(n : Int) : Int = {\n", "entry_point": "countWithOddSetbits", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Int = countWithOddSetbits(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var x1 : Int = countWithOddSetbits(arg10)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 15\n    var x2 : Int = countWithOddSetbits(arg20)\n    var v2 : Int = 8\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find number of integers with odd number of set bits.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/79", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the length of the word is odd or not.\n     *\n     * >>> wordLen(\"Hadoop\")\n     * false\n     * >>> wordLen(\"great\")\n     * true\n     * >>> wordLen(\"structure\")\n     * true\n     */\n    def wordLen(s : String) : Boolean = {\n", "entry_point": "wordLen", "test": "\n\n    var arg00 : String = \"\"\"Hadoop\"\"\"\n    var x0 : Boolean = wordLen(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"great\"\"\"\n    var x1 : Boolean = wordLen(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"structure\"\"\"\n    var x2 : Boolean = wordLen(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the length of the word is odd or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/80", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the nth tetrahedral number.\n     *\n     * >>> tetrahedralNumber(5)\n     * 35.0\n     * >>> tetrahedralNumber(6)\n     * 56.0\n     * >>> tetrahedralNumber(7)\n     * 84.0\n     */\n    def tetrahedralNumber(n : Int) : Double = {\n", "entry_point": "tetrahedralNumber", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Double = tetrahedralNumber(arg00)\n    var v0 : Double = 35.0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 6\n    var x1 : Double = tetrahedralNumber(arg10)\n    var v1 : Double = 56.0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 7\n    var x2 : Double = tetrahedralNumber(arg20)\n    var v2 : Double = 84.0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the nth tetrahedral number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/81", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to zip the two given tuples.\n     *\n     * >>> zipTuples(List(7, 8, 4, 5, 9, 10), List(1, 5, 6))\n     * List(List(7, 1), List(8, 5), List(4, 6), List(5, 1), List(9, 5), List(10, 6))\n     * >>> zipTuples(List(8, 9, 5, 6, 10, 11), List(2, 6, 7))\n     * List(List(8, 2), List(9, 6), List(5, 7), List(6, 2), List(10, 6), List(11, 7))\n     * >>> zipTuples(List(9, 10, 6, 7, 11, 12), List(3, 7, 8))\n     * List(List(9, 3), List(10, 7), List(6, 8), List(7, 3), List(11, 7), List(12, 8))\n     */\n    def zipTuples(testTup1 : List[Int], testTup2 : List[Int]) : List[List[Int]] = {\n", "entry_point": "zipTuples", "test": "\n\n    var arg00 : List[Int] = List(7, 8, 4, 5, 9, 10)\n    var arg01 : List[Int] = List(1, 5, 6)\n    var x0 : List[List[Int]] = zipTuples(arg00, arg01)\n    var v0 : List[List[Int]] = List(List(7, 1), List(8, 5), List(4, 6), List(5, 1), List(9, 5), List(10, 6))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(8, 9, 5, 6, 10, 11)\n    var arg11 : List[Int] = List(2, 6, 7)\n    var x1 : List[List[Int]] = zipTuples(arg10, arg11)\n    var v1 : List[List[Int]] = List(List(8, 2), List(9, 6), List(5, 7), List(6, 2), List(10, 6), List(11, 7))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(9, 10, 6, 7, 11, 12)\n    var arg21 : List[Int] = List(3, 7, 8)\n    var x2 : List[List[Int]] = zipTuples(arg20, arg21)\n    var v2 : List[List[Int]] = List(List(9, 3), List(10, 7), List(6, 8), List(7, 3), List(11, 7), List(12, 8))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to zip the two given tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/82", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the volume of a sphere.\n     *\n     * >>> volumeSphere(10)\n     * 4188.790204786391\n     * >>> volumeSphere(25)\n     * 65449.84694978735\n     * >>> volumeSphere(20)\n     * 33510.32163829113\n     */\n    def volumeSphere(r : Int) : Double = {\n", "entry_point": "volumeSphere", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Double = volumeSphere(arg00)\n    var v0 : Double = 4188.790204786391\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 25\n    var x1 : Double = volumeSphere(arg10)\n    var v1 : Double = 65449.84694978735\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 20\n    var x2 : Double = volumeSphere(arg20)\n    var v2 : Double = 33510.32163829113\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the volume of a sphere.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/83", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the character made by adding all the characters of the given string.\n     *\n     * >>> getChar(\"abc\")\n     * \"f\"\n     * >>> getChar(\"gfg\")\n     * \"t\"\n     * >>> getChar(\"ab\")\n     * \"c\"\n     */\n    def getChar(strr : String) : String = {\n", "entry_point": "getChar", "test": "\n\n    var arg00 : String = \"\"\"abc\"\"\"\n    var x0 : String = getChar(arg00)\n    var v0 : String = \"\"\"f\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"gfg\"\"\"\n    var x1 : String = getChar(arg10)\n    var v1 : String = \"\"\"t\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"ab\"\"\"\n    var x2 : String = getChar(arg20)\n    var v2 : String = \"\"\"c\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the character made by adding all the characters of the given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/84", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the n-th number in newman conway sequence.\n     *\n     * >>> sequence(10)\n     * 6\n     * >>> sequence(2)\n     * 1\n     * >>> sequence(3)\n     * 2\n     */\n    def sequence(n : Int) : Int = {\n", "entry_point": "sequence", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = sequence(arg00)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var x1 : Int = sequence(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 3\n    var x2 : Int = sequence(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the n-th number in newman conway sequence.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/85", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the surface area of a sphere.\n     *\n     * >>> surfaceareaSphere(10)\n     * 1256.6370614359173\n     * >>> surfaceareaSphere(15)\n     * 2827.4333882308138\n     * >>> surfaceareaSphere(20)\n     * 5026.548245743669\n     */\n    def surfaceareaSphere(r : Int) : Double = {\n", "entry_point": "surfaceareaSphere", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Double = surfaceareaSphere(arg00)\n    var v0 : Double = 1256.6370614359173\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 15\n    var x1 : Double = surfaceareaSphere(arg10)\n    var v1 : Double = 2827.4333882308138\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 20\n    var x2 : Double = surfaceareaSphere(arg20)\n    var v2 : Double = 5026.548245743669\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the surface area of a sphere.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/86", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find nth centered hexagonal number.\n     *\n     * >>> centeredHexagonalNumber(10)\n     * 271\n     * >>> centeredHexagonalNumber(2)\n     * 7\n     * >>> centeredHexagonalNumber(9)\n     * 217\n     */\n    def centeredHexagonalNumber(n : Int) : Int = {\n", "entry_point": "centeredHexagonalNumber", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = centeredHexagonalNumber(arg00)\n    var v0 : Int = 271\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var x1 : Int = centeredHexagonalNumber(arg10)\n    var v1 : Int = 7\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 9\n    var x2 : Int = centeredHexagonalNumber(arg20)\n    var v2 : Int = 217\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find nth centered hexagonal number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/87", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to merge three dictionaries into a single expression.\n     *\n     * >>> mergeDictionariesThree(Map(\"R\"->\"Red\", \"B\"->\"Black\", \"P\"->\"Pink\"), Map(\"G\"->\"Green\", \"W\"->\"White\"), Map(\"O\"->\"Orange\", \"W\"->\"White\", \"B\"->\"Black\"))\n     * Map(\"B\"->\"Black\", \"R\"->\"Red\", \"P\"->\"Pink\", \"G\"->\"Green\", \"W\"->\"White\", \"O\"->\"Orange\")\n     * >>> mergeDictionariesThree(Map(\"R\"->\"Red\", \"B\"->\"Black\", \"P\"->\"Pink\"), Map(\"G\"->\"Green\", \"W\"->\"White\"), Map(\"L\"->\"lavender\", \"B\"->\"Blue\"))\n     * Map(\"W\"->\"White\", \"P\"->\"Pink\", \"B\"->\"Black\", \"R\"->\"Red\", \"G\"->\"Green\", \"L\"->\"lavender\")\n     * >>> mergeDictionariesThree(Map(\"R\"->\"Red\", \"B\"->\"Black\", \"P\"->\"Pink\"), Map(\"L\"->\"lavender\", \"B\"->\"Blue\"), Map(\"G\"->\"Green\", \"W\"->\"White\"))\n     * Map(\"B\"->\"Black\", \"P\"->\"Pink\", \"R\"->\"Red\", \"G\"->\"Green\", \"L\"->\"lavender\", \"W\"->\"White\")\n     */\n    def mergeDictionariesThree(dict1 : Map[String, String], dict2 : Map[String, String], dict3 : Map[String, String]) : Map[String, String] = {\n", "entry_point": "mergeDictionariesThree", "test": "\n\n    var arg00 : Map[String, String] = Map(\"\"\"R\"\"\" -> \"\"\"Red\"\"\", \"\"\"B\"\"\" -> \"\"\"Black\"\"\", \"\"\"P\"\"\" -> \"\"\"Pink\"\"\")\n    var arg01 : Map[String, String] = Map(\"\"\"G\"\"\" -> \"\"\"Green\"\"\", \"\"\"W\"\"\" -> \"\"\"White\"\"\")\n    var arg02 : Map[String, String] = Map(\"\"\"O\"\"\" -> \"\"\"Orange\"\"\", \"\"\"W\"\"\" -> \"\"\"White\"\"\", \"\"\"B\"\"\" -> \"\"\"Black\"\"\")\n    var x0 : Map[String, String] = mergeDictionariesThree(arg00, arg01, arg02)\n    var v0 : Map[String, String] = Map(\"\"\"B\"\"\" -> \"\"\"Black\"\"\", \"\"\"R\"\"\" -> \"\"\"Red\"\"\", \"\"\"P\"\"\" -> \"\"\"Pink\"\"\", \"\"\"G\"\"\" -> \"\"\"Green\"\"\", \"\"\"W\"\"\" -> \"\"\"White\"\"\", \"\"\"O\"\"\" -> \"\"\"Orange\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Map[String, String] = Map(\"\"\"R\"\"\" -> \"\"\"Red\"\"\", \"\"\"B\"\"\" -> \"\"\"Black\"\"\", \"\"\"P\"\"\" -> \"\"\"Pink\"\"\")\n    var arg11 : Map[String, String] = Map(\"\"\"G\"\"\" -> \"\"\"Green\"\"\", \"\"\"W\"\"\" -> \"\"\"White\"\"\")\n    var arg12 : Map[String, String] = Map(\"\"\"L\"\"\" -> \"\"\"lavender\"\"\", \"\"\"B\"\"\" -> \"\"\"Blue\"\"\")\n    var x1 : Map[String, String] = mergeDictionariesThree(arg10, arg11, arg12)\n    var v1 : Map[String, String] = Map(\"\"\"W\"\"\" -> \"\"\"White\"\"\", \"\"\"P\"\"\" -> \"\"\"Pink\"\"\", \"\"\"B\"\"\" -> \"\"\"Black\"\"\", \"\"\"R\"\"\" -> \"\"\"Red\"\"\", \"\"\"G\"\"\" -> \"\"\"Green\"\"\", \"\"\"L\"\"\" -> \"\"\"lavender\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Map[String, String] = Map(\"\"\"R\"\"\" -> \"\"\"Red\"\"\", \"\"\"B\"\"\" -> \"\"\"Black\"\"\", \"\"\"P\"\"\" -> \"\"\"Pink\"\"\")\n    var arg21 : Map[String, String] = Map(\"\"\"L\"\"\" -> \"\"\"lavender\"\"\", \"\"\"B\"\"\" -> \"\"\"Blue\"\"\")\n    var arg22 : Map[String, String] = Map(\"\"\"G\"\"\" -> \"\"\"Green\"\"\", \"\"\"W\"\"\" -> \"\"\"White\"\"\")\n    var x2 : Map[String, String] = mergeDictionariesThree(arg20, arg21, arg22)\n    var v2 : Map[String, String] = Map(\"\"\"B\"\"\" -> \"\"\"Black\"\"\", \"\"\"P\"\"\" -> \"\"\"Pink\"\"\", \"\"\"R\"\"\" -> \"\"\"Red\"\"\", \"\"\"G\"\"\" -> \"\"\"Green\"\"\", \"\"\"L\"\"\" -> \"\"\"lavender\"\"\", \"\"\"W\"\"\" -> \"\"\"White\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to merge three dictionaries into a single expression.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/88", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to get the frequency of the elements in a list.\n     *\n     * >>> freqCount(List(10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30))\n     * Map(10->4, 20->4, 40->2, 50->2, 30->1)\n     * >>> freqCount(List(1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4))\n     * Map(1->3, 2->2, 3->3, 4->3)\n     * >>> freqCount(List(5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5))\n     * Map(10->1, 5->3, 6->2, 7->2, 4->2, 9->2)\n     */\n    def freqCount(list1 : List[Int]) : Map[Int, Int] = {\n", "entry_point": "freqCount", "test": "\n\n    var arg00 : List[Int] = List(10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30)\n    var x0 : Map[Int, Int] = freqCount(arg00)\n    var v0 : Map[Int, Int] = Map(10 -> 4, 20 -> 4, 40 -> 2, 50 -> 2, 30 -> 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4)\n    var x1 : Map[Int, Int] = freqCount(arg10)\n    var v1 : Map[Int, Int] = Map(1 -> 3, 2 -> 2, 3 -> 3, 4 -> 3)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5)\n    var x2 : Map[Int, Int] = freqCount(arg20)\n    var v2 : Map[Int, Int] = Map(10 -> 1, 5 -> 3, 6 -> 2, 7 -> 2, 4 -> 2, 9 -> 2)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to get the frequency of the elements in a list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/89", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the closest smaller number than n.\n     *\n     * >>> closestNum(11)\n     * 10\n     * >>> closestNum(7)\n     * 6\n     * >>> closestNum(12)\n     * 11\n     */\n    def closestNum(n : Int) : Int = {\n", "entry_point": "closestNum", "test": "\n\n    var arg00 : Int = 11\n    var x0 : Int = closestNum(arg00)\n    var v0 : Int = 10\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 7\n    var x1 : Int = closestNum(arg10)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 12\n    var x2 : Int = closestNum(arg20)\n    var v2 : Int = 11\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the closest smaller number than n.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/90", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the length of the longest word.\n     *\n     * >>> lenLog(List(\"python\", \"PHP\", \"bigdata\"))\n     * 7\n     * >>> lenLog(List(\"a\", \"ab\", \"abc\"))\n     * 3\n     * >>> lenLog(List(\"small\", \"big\", \"tall\"))\n     * 5\n     */\n    def lenLog(list1 : List[String]) : Int = {\n", "entry_point": "lenLog", "test": "\n\n    var arg00 : List[String] = List(\"\"\"python\"\"\", \"\"\"PHP\"\"\", \"\"\"bigdata\"\"\")\n    var x0 : Int = lenLog(arg00)\n    var v0 : Int = 7\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"a\"\"\", \"\"\"ab\"\"\", \"\"\"abc\"\"\")\n    var x1 : Int = lenLog(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"small\"\"\", \"\"\"big\"\"\", \"\"\"tall\"\"\")\n    var x2 : Int = lenLog(arg20)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the length of the longest word.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/91", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if a substring is present in a given list of string values.\n     *\n     * >>> findSubstring(List(\"red\", \"black\", \"white\", \"green\", \"orange\"), \"ack\")\n     * true\n     * >>> findSubstring(List(\"red\", \"black\", \"white\", \"green\", \"orange\"), \"abc\")\n     * false\n     * >>> findSubstring(List(\"red\", \"black\", \"white\", \"green\", \"orange\"), \"ange\")\n     * true\n     */\n    def findSubstring(str1 : List[String], subStr : String) : Boolean = {\n", "entry_point": "findSubstring", "test": "\n\n    var arg00 : List[String] = List(\"\"\"red\"\"\", \"\"\"black\"\"\", \"\"\"white\"\"\", \"\"\"green\"\"\", \"\"\"orange\"\"\")\n    var arg01 : String = \"\"\"ack\"\"\"\n    var x0 : Boolean = findSubstring(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"red\"\"\", \"\"\"black\"\"\", \"\"\"white\"\"\", \"\"\"green\"\"\", \"\"\"orange\"\"\")\n    var arg11 : String = \"\"\"abc\"\"\"\n    var x1 : Boolean = findSubstring(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"red\"\"\", \"\"\"black\"\"\", \"\"\"white\"\"\", \"\"\"green\"\"\", \"\"\"orange\"\"\")\n    var arg21 : String = \"\"\"ange\"\"\"\n    var x2 : Boolean = findSubstring(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if a substring is present in a given list of string values.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/92", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether the given number is undulating or not.\n     *\n     * >>> isUndulating(\"1212121\")\n     * true\n     * >>> isUndulating(\"1991\")\n     * false\n     * >>> isUndulating(\"121\")\n     * true\n     */\n    def isUndulating(n : String) : Boolean = {\n", "entry_point": "isUndulating", "test": "\n\n    var arg00 : String = \"\"\"1212121\"\"\"\n    var x0 : Boolean = isUndulating(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"1991\"\"\"\n    var x1 : Boolean = isUndulating(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"121\"\"\"\n    var x2 : Boolean = isUndulating(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether the given number is undulating or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/93", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate the value of 'a' to the power 'b'.\n     *\n     * >>> power(3, 4)\n     * 81\n     * >>> power(2, 3)\n     * 8\n     * >>> power(5, 5)\n     * 3125\n     */\n    def power(a : Int, b : Int) : Int = {\n", "entry_point": "power", "test": "\n\n    var arg00 : Int = 3\n    var arg01 : Int = 4\n    var x0 : Int = power(arg00, arg01)\n    var v0 : Int = 81\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var arg11 : Int = 3\n    var x1 : Int = power(arg10, arg11)\n    var v1 : Int = 8\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var arg21 : Int = 5\n    var x2 : Int = power(arg20, arg21)\n    var v2 : Int = 3125\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate the value of 'a' to the power 'b'.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/94", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract the index minimum value record from the given tuples.\n     *\n     * >>> indexMinimum(List(List(\"Rash\", 143), List(\"Manjeet\", 200), List(\"Varsha\", 100)))\n     * \"Varsha\"\n     * >>> indexMinimum(List(List(\"Yash\", 185), List(\"Dawood\", 125), List(\"Sanya\", 175)))\n     * \"Dawood\"\n     * >>> indexMinimum(List(List(\"Sai\", 345), List(\"Salman\", 145), List(\"Ayesha\", 96)))\n     * \"Ayesha\"\n     */\n    def indexMinimum(testList : List[List[Any]]) : String = {\n", "entry_point": "indexMinimum", "test": "\n\n    var arg00 : List[List[Any]] = List(List(\"\"\"Rash\"\"\", 143), List(\"\"\"Manjeet\"\"\", 200), List(\"\"\"Varsha\"\"\", 100))\n    var x0 : String = indexMinimum(arg00)\n    var v0 : String = \"\"\"Varsha\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(\"\"\"Yash\"\"\", 185), List(\"\"\"Dawood\"\"\", 125), List(\"\"\"Sanya\"\"\", 175))\n    var x1 : String = indexMinimum(arg10)\n    var v1 : String = \"\"\"Dawood\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(\"\"\"Sai\"\"\", 345), List(\"\"\"Salman\"\"\", 145), List(\"\"\"Ayesha\"\"\", 96))\n    var x2 : String = indexMinimum(arg20)\n    var v2 : String = \"\"\"Ayesha\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract the index minimum value record from the given tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/95", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the minimum length of sublist.\n     *\n     * >>> findMinLength(List(List(1), List(1, 2)))\n     * 1\n     * >>> findMinLength(List(List(1, 2), List(1, 2, 3), List(1, 2, 3, 4)))\n     * 2\n     * >>> findMinLength(List(List(3, 3, 3), List(4, 4, 4, 4)))\n     * 3\n     */\n    def findMinLength(lst : List[List[Int]]) : Int = {\n", "entry_point": "findMinLength", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1), List(1, 2))\n    var x0 : Int = findMinLength(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1, 2), List(1, 2, 3), List(1, 2, 3, 4))\n    var x1 : Int = findMinLength(arg10)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(3, 3, 3), List(4, 4, 4, 4))\n    var x2 : Int = findMinLength(arg20)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the minimum length of sublist.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/96", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the number of divisors of a given integer.\n     *\n     * >>> divisor(15)\n     * 4\n     * >>> divisor(12)\n     * 6\n     * >>> divisor(9)\n     * 3\n     */\n    def divisor(n : Int) : Int = {\n", "entry_point": "divisor", "test": "\n\n    var arg00 : Int = 15\n    var x0 : Int = divisor(arg00)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 12\n    var x1 : Int = divisor(arg10)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 9\n    var x2 : Int = divisor(arg20)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the number of divisors of a given integer.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/97", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find frequency count of list of lists.\n     *\n     * >>> frequencyLists(List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 8, 9, 5)))\n     * Map(1->1, 2->3, 3->1, 4->1, 5->2, 6->1, 7->1, 8->1, 9->1)\n     * >>> frequencyLists(List(List(1, 2, 3, 4), List(5, 6, 7, 8), List(9, 10, 11, 12)))\n     * Map(1->1, 2->1, 3->1, 4->1, 5->1, 6->1, 7->1, 8->1, 9->1, 10->1, 11->1, 12->1)\n     * >>> frequencyLists(List(List(20, 30, 40, 17), List(18, 16, 14, 13), List(10, 20, 30, 40)))\n     * Map(20->2, 30->2, 40->2, 17->1, 18->1, 16->1, 14->1, 13->1, 10->1)\n     */\n    def frequencyLists(list1 : List[List[Int]]) : Map[Int, Int] = {\n", "entry_point": "frequencyLists", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 8, 9, 5))\n    var x0 : Map[Int, Int] = frequencyLists(arg00)\n    var v0 : Map[Int, Int] = Map(1 -> 1, 2 -> 3, 3 -> 1, 4 -> 1, 5 -> 2, 6 -> 1, 7 -> 1, 8 -> 1, 9 -> 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1, 2, 3, 4), List(5, 6, 7, 8), List(9, 10, 11, 12))\n    var x1 : Map[Int, Int] = frequencyLists(arg10)\n    var v1 : Map[Int, Int] = Map(1 -> 1, 2 -> 1, 3 -> 1, 4 -> 1, 5 -> 1, 6 -> 1, 7 -> 1, 8 -> 1, 9 -> 1, 10 -> 1, 11 -> 1, 12 -> 1)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(20, 30, 40, 17), List(18, 16, 14, 13), List(10, 20, 30, 40))\n    var x2 : Map[Int, Int] = frequencyLists(arg20)\n    var v2 : Map[Int, Int] = Map(20 -> 2, 30 -> 2, 40 -> 2, 17 -> 1, 18 -> 1, 16 -> 1, 14 -> 1, 13 -> 1, 10 -> 1)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find frequency count of list of lists.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/98", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to multiply all the numbers in a list and divide with the length of the list.\n     *\n     * >>> multiplyNum(List(8, 2, 3, -1, 7))\n     * -67.2\n     * >>> multiplyNum(List(-10, -20, -30))\n     * -2000.0\n     * >>> multiplyNum(List(19, 15, 18))\n     * 1710.0\n     */\n    def multiplyNum(numbers : List[Int]) : Double = {\n", "entry_point": "multiplyNum", "test": "\n\n    var arg00 : List[Int] = List(8, 2, 3, -1, 7)\n    var x0 : Double = multiplyNum(arg00)\n    var v0 : Double = -67.2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(-10, -20, -30)\n    var x1 : Double = multiplyNum(arg10)\n    var v1 : Double = -2000.0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(19, 15, 18)\n    var x2 : Double = multiplyNum(arg20)\n    var v2 : Double = 1710.0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/99", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert the given decimal number to its binary equivalent.\n     *\n     * >>> decimalToBinary(8)\n     * \"1000\"\n     * >>> decimalToBinary(18)\n     * \"10010\"\n     * >>> decimalToBinary(7)\n     * \"111\"\n     */\n    def decimalToBinary(n : Int) : String = {\n", "entry_point": "decimalToBinary", "test": "\n\n    var arg00 : Int = 8\n    var x0 : String = decimalToBinary(arg00)\n    var v0 : String = \"\"\"1000\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 18\n    var x1 : String = decimalToBinary(arg10)\n    var v1 : String = \"\"\"10010\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 7\n    var x2 : String = decimalToBinary(arg20)\n    var v2 : String = \"\"\"111\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert the given decimal number to its binary equivalent.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/100", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the next smallest palindrome of a specified number.\n     *\n     * >>> nextSmallestPalindrome(99)\n     * 101\n     * >>> nextSmallestPalindrome(1221)\n     * 1331\n     * >>> nextSmallestPalindrome(120)\n     * 121\n     */\n    def nextSmallestPalindrome(num : Int) : Int = {\n", "entry_point": "nextSmallestPalindrome", "test": "\n\n    var arg00 : Int = 99\n    var x0 : Int = nextSmallestPalindrome(arg00)\n    var v0 : Int = 101\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1221\n    var x1 : Int = nextSmallestPalindrome(arg10)\n    var v1 : Int = 1331\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 120\n    var x2 : Int = nextSmallestPalindrome(arg20)\n    var v2 : Int = 121\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the next smallest palindrome of a specified number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/101", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the kth element in the given array.\n     *\n     * >>> kthElement(List(12, 3, 5, 7, 19), 5, 2)\n     * 3\n     * >>> kthElement(List(17, 24, 8, 23), 4, 3)\n     * 8\n     * >>> kthElement(List(16, 21, 25, 36, 4), 5, 4)\n     * 36\n     */\n    def kthElement(arr : List[Int], n : Int, k : Int) : Int = {\n", "entry_point": "kthElement", "test": "\n\n    var arg00 : List[Int] = List(12, 3, 5, 7, 19)\n    var arg01 : Int = 5\n    var arg02 : Int = 2\n    var x0 : Int = kthElement(arg00, arg01, arg02)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(17, 24, 8, 23)\n    var arg11 : Int = 4\n    var arg12 : Int = 3\n    var x1 : Int = kthElement(arg10, arg11, arg12)\n    var v1 : Int = 8\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(16, 21, 25, 36, 4)\n    var arg21 : Int = 5\n    var arg22 : Int = 4\n    var x2 : Int = kthElement(arg20, arg21, arg22)\n    var v2 : Int = 36\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the kth element in the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/102", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert snake case string to camel case string.\n     *\n     * >>> snakeToCamel(\"python_program\")\n     * \"PythonProgram\"\n     * >>> snakeToCamel(\"python_language\")\n     * \"PythonLanguage\"\n     * >>> snakeToCamel(\"programming_language\")\n     * \"ProgrammingLanguage\"\n     */\n    def snakeToCamel(word : String) : String = {\n", "entry_point": "snakeToCamel", "test": "\n\n    var arg00 : String = \"\"\"python_program\"\"\"\n    var x0 : String = snakeToCamel(arg00)\n    var v0 : String = \"\"\"PythonProgram\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"python_language\"\"\"\n    var x1 : String = snakeToCamel(arg10)\n    var v1 : String = \"\"\"PythonLanguage\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"programming_language\"\"\"\n    var x2 : String = snakeToCamel(arg20)\n    var v2 : String = \"\"\"ProgrammingLanguage\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert snake case string to camel case string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/103", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find eulerian number a(n, m).\n     *\n     * >>> eulerianNum(3, 1)\n     * 4\n     * >>> eulerianNum(4, 1)\n     * 11\n     * >>> eulerianNum(5, 3)\n     * 26\n     */\n    def eulerianNum(n : Int, m : Int) : Int = {\n", "entry_point": "eulerianNum", "test": "\n\n    var arg00 : Int = 3\n    var arg01 : Int = 1\n    var x0 : Int = eulerianNum(arg00, arg01)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var arg11 : Int = 1\n    var x1 : Int = eulerianNum(arg10, arg11)\n    var v1 : Int = 11\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var arg21 : Int = 3\n    var x2 : Int = eulerianNum(arg20, arg21)\n    var v2 : Int = 26\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find eulerian number a(n, m).", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/104", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort each sublist of strings in a given list of lists using lambda function.\n     *\n     * >>> sortSublists(List(List(\"green\", \"orange\"), List(\"black\", \"white\"), List(\"white\", \"black\", \"orange\")))\n     * List(List(\"green\", \"orange\"), List(\"black\", \"white\"), List(\"black\", \"orange\", \"white\"))\n     * >>> sortSublists(List(List(\" red \", \"green\"), List(\"blue \", \" black\"), List(\" orange\", \"brown\")))\n     * List(List(\" red \", \"green\"), List(\" black\", \"blue \"), List(\" orange\", \"brown\"))\n     * >>> sortSublists(List(List(\"zilver\", \"gold\"), List(\"magnesium\", \"aluminium\"), List(\"steel\", \"bronze\")))\n     * List(List(\"gold\", \"zilver\"), List(\"aluminium\", \"magnesium\"), List(\"bronze\", \"steel\"))\n     */\n    def sortSublists(inputList : List[List[String]]) : List[List[String]] = {\n", "entry_point": "sortSublists", "test": "\n\n    var arg00 : List[List[String]] = List(List(\"\"\"green\"\"\", \"\"\"orange\"\"\"), List(\"\"\"black\"\"\", \"\"\"white\"\"\"), List(\"\"\"white\"\"\", \"\"\"black\"\"\", \"\"\"orange\"\"\"))\n    var x0 : List[List[String]] = sortSublists(arg00)\n    var v0 : List[List[String]] = List(List(\"\"\"green\"\"\", \"\"\"orange\"\"\"), List(\"\"\"black\"\"\", \"\"\"white\"\"\"), List(\"\"\"black\"\"\", \"\"\"orange\"\"\", \"\"\"white\"\"\"))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[String]] = List(List(\"\"\" red \"\"\", \"\"\"green\"\"\"), List(\"\"\"blue \"\"\", \"\"\" black\"\"\"), List(\"\"\" orange\"\"\", \"\"\"brown\"\"\"))\n    var x1 : List[List[String]] = sortSublists(arg10)\n    var v1 : List[List[String]] = List(List(\"\"\" red \"\"\", \"\"\"green\"\"\"), List(\"\"\" black\"\"\", \"\"\"blue \"\"\"), List(\"\"\" orange\"\"\", \"\"\"brown\"\"\"))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[String]] = List(List(\"\"\"zilver\"\"\", \"\"\"gold\"\"\"), List(\"\"\"magnesium\"\"\", \"\"\"aluminium\"\"\"), List(\"\"\"steel\"\"\", \"\"\"bronze\"\"\"))\n    var x2 : List[List[String]] = sortSublists(arg20)\n    var v2 : List[List[String]] = List(List(\"\"\"gold\"\"\", \"\"\"zilver\"\"\"), List(\"\"\"aluminium\"\"\", \"\"\"magnesium\"\"\"), List(\"\"\"bronze\"\"\", \"\"\"steel\"\"\"))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort each sublist of strings in a given list of lists using lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/105", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count true booleans in the given list.\n     *\n     * >>> count(List(true, false, true))\n     * 2\n     * >>> count(List(false, false))\n     * 0\n     * >>> count(List(true, true, true))\n     * 3\n     */\n    def count(lst : List[Boolean]) : Int = {\n", "entry_point": "count", "test": "\n\n    var arg00 : List[Boolean] = List(true, false, true)\n    var x0 : Int = count(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Boolean] = List(false, false)\n    var x1 : Int = count(arg10)\n    var v1 : Int = 0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Boolean] = List(true, true, true)\n    var x2 : Int = count(arg20)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count true booleans in the given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/106", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to add the given list to the given tuples.\n     *\n     * >>> addLists(List(5, 6, 7), List(9, 10))\n     * List(9, 10, 5, 6, 7)\n     * >>> addLists(List(6, 7, 8), List(10, 11))\n     * List(10, 11, 6, 7, 8)\n     * >>> addLists(List(7, 8, 9), List(11, 12))\n     * List(11, 12, 7, 8, 9)\n     */\n    def addLists(testList : List[Int], testTup : List[Int]) : List[Int] = {\n", "entry_point": "addLists", "test": "\n\n    var arg00 : List[Int] = List(5, 6, 7)\n    var arg01 : List[Int] = List(9, 10)\n    var x0 : List[Int] = addLists(arg00, arg01)\n    var v0 : List[Int] = List(9, 10, 5, 6, 7)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(6, 7, 8)\n    var arg11 : List[Int] = List(10, 11)\n    var x1 : List[Int] = addLists(arg10, arg11)\n    var v1 : List[Int] = List(10, 11, 6, 7, 8)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(7, 8, 9)\n    var arg21 : List[Int] = List(11, 12)\n    var x2 : List[Int] = addLists(arg20, arg21)\n    var v2 : List[Int] = List(11, 12, 7, 8, 9)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to add the given list to the given tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/107", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count hexadecimal numbers for a given range.\n     *\n     * >>> countHexadecimal(10, 15)\n     * 6\n     * >>> countHexadecimal(2, 4)\n     * 0\n     * >>> countHexadecimal(15, 16)\n     * 1\n     */\n    def countHexadecimal(l : Int, r : Int) : Int = {\n", "entry_point": "countHexadecimal", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 15\n    var x0 : Int = countHexadecimal(arg00, arg01)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var arg11 : Int = 4\n    var x1 : Int = countHexadecimal(arg10, arg11)\n    var v1 : Int = 0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 15\n    var arg21 : Int = 16\n    var x2 : Int = countHexadecimal(arg20, arg21)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count hexadecimal numbers for a given range.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/108", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n     *\n     * >>> mergeSortedList(List(25, 24, 15, 4, 5, 29, 110), List(19, 20, 11, 56, 25, 233, 154), List(24, 26, 54, 48))\n     * List(4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233)\n     * >>> mergeSortedList(List(1, 3, 5, 6, 8, 9), List(2, 5, 7, 11), List(1, 4, 7, 8, 12))\n     * List(1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12)\n     * >>> mergeSortedList(List(18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1), List(25, 35, 22, 85, 14, 65, 75, 25, 58), List(12, 74, 9, 50, 61, 41))\n     * List(1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85)\n     */\n    def mergeSortedList(num1 : List[Int], num2 : List[Int], num3 : List[Int]) : List[Int] = {\n", "entry_point": "mergeSortedList", "test": "\n\n    var arg00 : List[Int] = List(25, 24, 15, 4, 5, 29, 110)\n    var arg01 : List[Int] = List(19, 20, 11, 56, 25, 233, 154)\n    var arg02 : List[Int] = List(24, 26, 54, 48)\n    var x0 : List[Int] = mergeSortedList(arg00, arg01, arg02)\n    var v0 : List[Int] = List(4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 3, 5, 6, 8, 9)\n    var arg11 : List[Int] = List(2, 5, 7, 11)\n    var arg12 : List[Int] = List(1, 4, 7, 8, 12)\n    var x1 : List[Int] = mergeSortedList(arg10, arg11, arg12)\n    var v1 : List[Int] = List(1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1)\n    var arg21 : List[Int] = List(25, 35, 22, 85, 14, 65, 75, 25, 58)\n    var arg22 : List[Int] = List(12, 74, 9, 50, 61, 41)\n    var x2 : List[Int] = mergeSortedList(arg20, arg21, arg22)\n    var v2 : List[Int] = List(1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/109", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the count of rotations of a binary string with odd value.\n     *\n     * >>> oddEquivalent(\"011001\", 6)\n     * 3\n     * >>> oddEquivalent(\"11011\", 5)\n     * 4\n     * >>> oddEquivalent(\"1010\", 4)\n     * 2\n     */\n    def oddEquivalent(s : String, n : Int) : Int = {\n", "entry_point": "oddEquivalent", "test": "\n\n    var arg00 : String = \"\"\"011001\"\"\"\n    var arg01 : Int = 6\n    var x0 : Int = oddEquivalent(arg00, arg01)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"11011\"\"\"\n    var arg11 : Int = 5\n    var x1 : Int = oddEquivalent(arg10, arg11)\n    var v1 : Int = 4\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"1010\"\"\"\n    var arg21 : Int = 4\n    var x2 : Int = oddEquivalent(arg20, arg21)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the count of rotations of a binary string with odd value.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/110", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n     *\n     * >>> extractMissing(List(List(6, 9), List(15, 34), List(48, 70)), 2, 100)\n     * List(List(2, 6), List(9, 100), List(9, 15), List(34, 100), List(34, 48), List(70, 100))\n     * >>> extractMissing(List(List(7, 2), List(15, 19), List(38, 50)), 5, 60)\n     * List(List(5, 7), List(2, 60), List(2, 15), List(19, 60), List(19, 38), List(50, 60))\n     * >>> extractMissing(List(List(7, 2), List(15, 19), List(38, 50)), 1, 52)\n     * List(List(1, 7), List(2, 52), List(2, 15), List(19, 52), List(19, 38), List(50, 52))\n     */\n    def extractMissing(testList : List[List[Int]], strtVal : Int, stopVal : Int) : List[List[Int]] = {\n", "entry_point": "extractMissing", "test": "\n\n    var arg00 : List[List[Int]] = List(List(6, 9), List(15, 34), List(48, 70))\n    var arg01 : Int = 2\n    var arg02 : Int = 100\n    var x0 : List[List[Int]] = extractMissing(arg00, arg01, arg02)\n    var v0 : List[List[Int]] = List(List(2, 6), List(9, 100), List(9, 15), List(34, 100), List(34, 48), List(70, 100))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(7, 2), List(15, 19), List(38, 50))\n    var arg11 : Int = 5\n    var arg12 : Int = 60\n    var x1 : List[List[Int]] = extractMissing(arg10, arg11, arg12)\n    var v1 : List[List[Int]] = List(List(5, 7), List(2, 60), List(2, 15), List(19, 60), List(19, 38), List(50, 60))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(7, 2), List(15, 19), List(38, 50))\n    var arg21 : Int = 1\n    var arg22 : Int = 52\n    var x2 : List[List[Int]] = extractMissing(arg20, arg21, arg22)\n    var v2 : List[List[Int]] = List(List(1, 7), List(2, 52), List(2, 15), List(19, 52), List(19, 38), List(50, 52))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/111", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n     *\n     * >>> commonInNestedLists(List(List(12, 18, 23, 25, 45), List(7, 12, 18, 24, 28), List(1, 5, 8, 12, 15, 16, 18)))\n     * List(18, 12)\n     * >>> commonInNestedLists(List(List(12, 5, 23, 25, 45), List(7, 11, 5, 23, 28), List(1, 5, 8, 18, 23, 16)))\n     * List(5, 23)\n     * >>> commonInNestedLists(List(List(2, 3, 4, 1), List(4, 5), List(6, 4, 8), List(4, 5), List(6, 8, 4)))\n     * List(4)\n     */\n    def commonInNestedLists(nestedlist : List[List[Int]]) : List[Int] = {\n", "entry_point": "commonInNestedLists", "test": "\n\n    var arg00 : List[List[Int]] = List(List(12, 18, 23, 25, 45), List(7, 12, 18, 24, 28), List(1, 5, 8, 12, 15, 16, 18))\n    var x0 : List[Int] = commonInNestedLists(arg00)\n    var v0 : List[Int] = List(18, 12)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(12, 5, 23, 25, 45), List(7, 11, 5, 23, 28), List(1, 5, 8, 18, 23, 16))\n    var x1 : List[Int] = commonInNestedLists(arg10)\n    var v1 : List[Int] = List(5, 23)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(2, 3, 4, 1), List(4, 5), List(6, 4, 8), List(4, 5), List(6, 8, 4))\n    var x2 : List[Int] = commonInNestedLists(arg20)\n    var v2 : List[Int] = List(4)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/112", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the perimeter of a cylinder.\n     *\n     * >>> perimeter(2, 4)\n     * 12\n     * >>> perimeter(1, 2)\n     * 6\n     * >>> perimeter(3, 1)\n     * 8\n     */\n    def perimeter(diameter : Int, height : Int) : Int = {\n", "entry_point": "perimeter", "test": "\n\n    var arg00 : Int = 2\n    var arg01 : Int = 4\n    var x0 : Int = perimeter(arg00, arg01)\n    var v0 : Int = 12\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var arg11 : Int = 2\n    var x1 : Int = perimeter(arg10, arg11)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 3\n    var arg21 : Int = 1\n    var x2 : Int = perimeter(arg20, arg21)\n    var v2 : Int = 8\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the perimeter of a cylinder.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/113", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if a string represents an integer or not.\n     *\n     * >>> checkInteger(\"python\")\n     * false\n     * >>> checkInteger(\"1\")\n     * true\n     * >>> checkInteger(\"12345\")\n     * true\n     */\n    def checkInteger(text : String) : Boolean = {\n", "entry_point": "checkInteger", "test": "\n\n    var arg00 : String = \"\"\"python\"\"\"\n    var x0 : Boolean = checkInteger(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"1\"\"\"\n    var x1 : Boolean = checkInteger(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"12345\"\"\"\n    var x2 : Boolean = checkInteger(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if a string represents an integer or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/114", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to assign frequency to each tuple in the given tuple list.\n     *\n     * >>> assignFreq(List(List(6, 5, 8), List(2, 7), List(6, 5, 8), List(6, 5, 8), List(9), List(2, 7)))\n     * \"[(6, 5, 8, 3), (2, 7, 2), (9, 1)]\"\n     * >>> assignFreq(List(List(4, 2, 4), List(7, 1), List(4, 8), List(4, 2, 4), List(9, 2), List(7, 1)))\n     * \"[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]\"\n     * >>> assignFreq(List(List(11, 13, 10), List(17, 21), List(4, 2, 3), List(17, 21), List(9, 2), List(4, 2, 3)))\n     * \"[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]\"\n     */\n    def assignFreq(testList : List[List[Int]]) : String = {\n", "entry_point": "assignFreq", "test": "\n\n    var arg00 : List[List[Int]] = List(List(6, 5, 8), List(2, 7), List(6, 5, 8), List(6, 5, 8), List(9), List(2, 7))\n    var x0 : String = assignFreq(arg00)\n    var v0 : String = \"\"\"[(6, 5, 8, 3), (2, 7, 2), (9, 1)]\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(4, 2, 4), List(7, 1), List(4, 8), List(4, 2, 4), List(9, 2), List(7, 1))\n    var x1 : String = assignFreq(arg10)\n    var v1 : String = \"\"\"[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(11, 13, 10), List(17, 21), List(4, 2, 3), List(17, 21), List(9, 2), List(4, 2, 3))\n    var x2 : String = assignFreq(arg20)\n    var v2 : String = \"\"\"[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to assign frequency to each tuple in the given tuple list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/115", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether all dictionaries in a list are empty or not.\n     *\n     * >>> emptyDit(List(Map(), Map(), Map()))\n     * true\n     * >>> emptyDit(List(Set(1, 2), Map(), Map()))\n     * false\n     * >>> emptyDit(Map())\n     * true\n     */\n    def emptyDit(list1 : Any) : Boolean = {\n", "entry_point": "emptyDit", "test": "\n\n    var arg00 : Any = List(Map(), Map(), Map())\n    var x0 : Boolean = emptyDit(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Any = List(Set(1, 2), Map(), Map())\n    var x1 : Boolean = emptyDit(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Any = Map()\n    var x2 : Boolean = emptyDit(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether all dictionaries in a list are empty or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/116", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert a given tuple of positive integers into an integer.\n     *\n     * >>> tupleToInt(List(1, 2, 3))\n     * 123\n     * >>> tupleToInt(List(4, 5, 6))\n     * 456\n     * >>> tupleToInt(List(5, 6, 7))\n     * 567\n     */\n    def tupleToInt(nums : List[Int]) : Int = {\n", "entry_point": "tupleToInt", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3)\n    var x0 : Int = tupleToInt(arg00)\n    var v0 : Int = 123\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 5, 6)\n    var x1 : Int = tupleToInt(arg10)\n    var v1 : Int = 456\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(5, 6, 7)\n    var x2 : Int = tupleToInt(arg20)\n    var v2 : Int = 567\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert a given tuple of positive integers into an integer.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/117", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert all possible convertible elements in the list to float.\n     *\n     * >>> listToFloat(List(List(\"3\", \"4\"), List(\"1\", \"26.45\"), List(\"7.32\", \"8\"), List(\"4\", \"8\")))\n     * \"[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\"\n     * >>> listToFloat(List(List(\"4\", \"4\"), List(\"2\", \"27\"), List(\"4.12\", \"9\"), List(\"7\", \"11\")))\n     * \"[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\"\n     * >>> listToFloat(List(List(\"6\", \"78\"), List(\"5\", \"26.45\"), List(\"1.33\", \"4\"), List(\"82\", \"13\")))\n     * \"[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\"\n     */\n    def listToFloat(testList : List[List[String]]) : String = {\n", "entry_point": "listToFloat", "test": "\n\n    var arg00 : List[List[String]] = List(List(\"\"\"3\"\"\", \"\"\"4\"\"\"), List(\"\"\"1\"\"\", \"\"\"26.45\"\"\"), List(\"\"\"7.32\"\"\", \"\"\"8\"\"\"), List(\"\"\"4\"\"\", \"\"\"8\"\"\"))\n    var x0 : String = listToFloat(arg00)\n    var v0 : String = \"\"\"[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[String]] = List(List(\"\"\"4\"\"\", \"\"\"4\"\"\"), List(\"\"\"2\"\"\", \"\"\"27\"\"\"), List(\"\"\"4.12\"\"\", \"\"\"9\"\"\"), List(\"\"\"7\"\"\", \"\"\"11\"\"\"))\n    var x1 : String = listToFloat(arg10)\n    var v1 : String = \"\"\"[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[String]] = List(List(\"\"\"6\"\"\", \"\"\"78\"\"\"), List(\"\"\"5\"\"\", \"\"\"26.45\"\"\"), List(\"\"\"1.33\"\"\", \"\"\"4\"\"\"), List(\"\"\"82\"\"\", \"\"\"13\"\"\"))\n    var x2 : String = listToFloat(arg20)\n    var v2 : String = \"\"\"[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert all possible convertible elements in the list to float.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/118", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n     *\n     * >>> stringToList(\"python programming\")\n     * List(\"python\", \"programming\")\n     * >>> stringToList(\"lists tuples strings\")\n     * List(\"lists\", \"tuples\", \"strings\")\n     * >>> stringToList(\"write a program\")\n     * List(\"write\", \"a\", \"program\")\n     */\n    def stringToList(string : String) : List[String] = {\n", "entry_point": "stringToList", "test": "\n\n    var arg00 : String = \"\"\"python programming\"\"\"\n    var x0 : List[String] = stringToList(arg00)\n    var v0 : List[String] = List(\"\"\"python\"\"\", \"\"\"programming\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"lists tuples strings\"\"\"\n    var x1 : List[String] = stringToList(arg10)\n    var v1 : List[String] = List(\"\"\"lists\"\"\", \"\"\"tuples\"\"\", \"\"\"strings\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"write a program\"\"\"\n    var x2 : List[String] = stringToList(arg20)\n    var v2 : List[String] = List(\"\"\"write\"\"\", \"\"\"a\"\"\", \"\"\"program\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/119", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the element that appears only once in a sorted array.\n     *\n     * >>> search(List(1, 1, 2, 2, 3), 5)\n     * 3\n     * >>> search(List(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8), 11)\n     * 8\n     * >>> search(List(1, 2, 2, 3, 3, 4, 4), 7)\n     * 1\n     */\n    def search(arr : List[Int], n : Int) : Int = {\n", "entry_point": "search", "test": "\n\n    var arg00 : List[Int] = List(1, 1, 2, 2, 3)\n    var arg01 : Int = 5\n    var x0 : Int = search(arg00, arg01)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)\n    var arg11 : Int = 11\n    var x1 : Int = search(arg10, arg11)\n    var v1 : Int = 8\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 2, 3, 3, 4, 4)\n    var arg21 : Int = 7\n    var x2 : Int = search(arg20, arg21)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the element that appears only once in a sorted array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/120", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the maximum product from the pairs of tuples within a given list.\n     *\n     * >>> maxProductTuple(List(List(2, 7), List(2, 6), List(1, 8), List(4, 9)))\n     * 36\n     * >>> maxProductTuple(List(List(10, 20), List(15, 2), List(5, 10)))\n     * 200\n     * >>> maxProductTuple(List(List(11, 44), List(10, 15), List(20, 5), List(12, 9)))\n     * 484\n     */\n    def maxProductTuple(list1 : List[List[Int]]) : Int = {\n", "entry_point": "maxProductTuple", "test": "\n\n    var arg00 : List[List[Int]] = List(List(2, 7), List(2, 6), List(1, 8), List(4, 9))\n    var x0 : Int = maxProductTuple(arg00)\n    var v0 : Int = 36\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(10, 20), List(15, 2), List(5, 10))\n    var x1 : Int = maxProductTuple(arg10)\n    var v1 : Int = 200\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(11, 44), List(10, 15), List(20, 5), List(12, 9))\n    var x2 : Int = maxProductTuple(arg20)\n    var v2 : Int = 484\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the maximum product from the pairs of tuples within a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/121", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the triplet with sum of the given array\n     *\n     * >>> checkTriplet(List(2, 7, 4, 0, 9, 5, 1, 3), 8, 6, 0)\n     * true\n     * >>> checkTriplet(List(1, 4, 5, 6, 7, 8, 5, 9), 8, 6, 0)\n     * false\n     * >>> checkTriplet(List(10, 4, 2, 3, 5), 5, 15, 0)\n     * true\n     */\n    def checkTriplet(a : List[Int], n : Int, sum : Int, count : Int) : Boolean = {\n", "entry_point": "checkTriplet", "test": "\n\n    var arg00 : List[Int] = List(2, 7, 4, 0, 9, 5, 1, 3)\n    var arg01 : Int = 8\n    var arg02 : Int = 6\n    var arg03 : Int = 0\n    var x0 : Boolean = checkTriplet(arg00, arg01, arg02, arg03)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 4, 5, 6, 7, 8, 5, 9)\n    var arg11 : Int = 8\n    var arg12 : Int = 6\n    var arg13 : Int = 0\n    var x1 : Boolean = checkTriplet(arg10, arg11, arg12, arg13)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(10, 4, 2, 3, 5)\n    var arg21 : Int = 5\n    var arg22 : Int = 15\n    var arg23 : Int = 0\n    var x2 : Boolean = checkTriplet(arg20, arg21, arg22, arg23)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the triplet with sum of the given array", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/122", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find n\u2019th smart number.\n     *\n     * >>> smartnumber(1)\n     * 30\n     * >>> smartnumber(50)\n     * 273\n     * >>> smartnumber(1000)\n     * 2664\n     */\n    def smartnumber(n : Int) : Int = {\n", "entry_point": "smartnumber", "test": "\n\n    var arg00 : Int = 1\n    var x0 : Int = smartnumber(arg00)\n    var v0 : Int = 30\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 50\n    var x1 : Int = smartnumber(arg10)\n    var v1 : Int = 273\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1000\n    var x2 : Int = smartnumber(arg20)\n    var v2 : Int = 2664\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find n\u2019th smart number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/123", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sum all amicable numbers from 1 to a specified number.\n     *\n     * >>> amicableNumbersSum(999)\n     * 504\n     * >>> amicableNumbersSum(9999)\n     * 31626\n     * >>> amicableNumbersSum(99)\n     * 0\n     */\n    def amicableNumbersSum(limit : Int) : Int = {\n", "entry_point": "amicableNumbersSum", "test": "\n\n    var arg00 : Int = 999\n    var x0 : Int = amicableNumbersSum(arg00)\n    var v0 : Int = 504\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 9999\n    var x1 : Int = amicableNumbersSum(arg10)\n    var v1 : Int = 31626\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 99\n    var x2 : Int = amicableNumbersSum(arg20)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sum all amicable numbers from 1 to a specified number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/125", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n     *\n     * >>> findLength(\"11000010001\", 11)\n     * 6\n     * >>> findLength(\"10111\", 5)\n     * 1\n     * >>> findLength(\"11011101100101\", 14)\n     * 2\n     */\n    def findLength(string : String, n : Int) : Int = {\n", "entry_point": "findLength", "test": "\n\n    var arg00 : String = \"\"\"11000010001\"\"\"\n    var arg01 : Int = 11\n    var x0 : Int = findLength(arg00, arg01)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"10111\"\"\"\n    var arg11 : Int = 5\n    var x1 : Int = findLength(arg10, arg11)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"11011101100101\"\"\"\n    var arg21 : Int = 14\n    var x2 : Int = findLength(arg20, arg21)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/126", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of common divisors of two given numbers.\n     *\n     * >>> sum(10, 15)\n     * 6\n     * >>> sum(100, 150)\n     * 93\n     * >>> sum(4, 6)\n     * 3\n     */\n    def sum(a : Int, b : Int) : Int = {\n", "entry_point": "sum", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 15\n    var x0 : Int = sum(arg00, arg01)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 100\n    var arg11 : Int = 150\n    var x1 : Int = sum(arg10, arg11)\n    var v1 : Int = 93\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var arg21 : Int = 6\n    var x2 : Int = sum(arg20, arg21)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of common divisors of two given numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/127", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to multiply two integers without using the * operator in Scala.\n     *\n     * >>> multiplyInt(10, 20)\n     * 200\n     * >>> multiplyInt(5, 10)\n     * 50\n     * >>> multiplyInt(4, 8)\n     * 32\n     */\n    def multiplyInt(x : Int, y : Int) : Int = {\n", "entry_point": "multiplyInt", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 20\n    var x0 : Int = multiplyInt(arg00, arg01)\n    var v0 : Int = 200\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var arg11 : Int = 10\n    var x1 : Int = multiplyInt(arg10, arg11)\n    var v1 : Int = 50\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var arg21 : Int = 8\n    var x2 : Int = multiplyInt(arg20, arg21)\n    var v2 : Int = 32\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to multiply two integers without using the * operator in Scala.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/128", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to shortlist words that are longer than n from a given list of words.\n     *\n     * >>> longWords(3, \"python is a programming language\")\n     * List(\"python\", \"programming\", \"language\")\n     * >>> longWords(2, \"writing a program\")\n     * List(\"writing\", \"program\")\n     * >>> longWords(5, \"sorting list\")\n     * List(\"sorting\")\n     */\n    def longWords(n : Int, str : String) : List[String] = {\n", "entry_point": "longWords", "test": "\n\n    var arg00 : Int = 3\n    var arg01 : String = \"\"\"python is a programming language\"\"\"\n    var x0 : List[String] = longWords(arg00, arg01)\n    var v0 : List[String] = List(\"\"\"python\"\"\", \"\"\"programming\"\"\", \"\"\"language\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var arg11 : String = \"\"\"writing a program\"\"\"\n    var x1 : List[String] = longWords(arg10, arg11)\n    var v1 : List[String] = List(\"\"\"writing\"\"\", \"\"\"program\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var arg21 : String = \"\"\"sorting list\"\"\"\n    var x2 : List[String] = longWords(arg20, arg21)\n    var v2 : List[String] = List(\"\"\"sorting\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to shortlist words that are longer than n from a given list of words.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/129", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate magic square.\n     *\n     * >>> magicSquareTest(List(List(7, 12, 1, 14), List(2, 13, 8, 11), List(16, 3, 10, 5), List(9, 6, 15, 4)))\n     * true\n     * >>> magicSquareTest(List(List(2, 7, 6), List(9, 5, 1), List(4, 3, 8)))\n     * true\n     * >>> magicSquareTest(List(List(2, 7, 6), List(9, 5, 1), List(4, 3, 7)))\n     * false\n     */\n    def magicSquareTest(myMatrix : List[List[Int]]) : Boolean = {\n", "entry_point": "magicSquareTest", "test": "\n\n    var arg00 : List[List[Int]] = List(List(7, 12, 1, 14), List(2, 13, 8, 11), List(16, 3, 10, 5), List(9, 6, 15, 4))\n    var x0 : Boolean = magicSquareTest(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(2, 7, 6), List(9, 5, 1), List(4, 3, 8))\n    var x1 : Boolean = magicSquareTest(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(2, 7, 6), List(9, 5, 1), List(4, 3, 7))\n    var x2 : Boolean = magicSquareTest(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate magic square.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/130", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the item with maximum frequency in a given list.\n     *\n     * >>> maxOccurrences(List(2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2))\n     * List(2, 5)\n     * >>> maxOccurrences(List(2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18))\n     * List(8, 2)\n     * >>> maxOccurrences(List(10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10))\n     * List(20, 3)\n     */\n    def maxOccurrences(nums : List[Int]) : List[Int] = {\n", "entry_point": "maxOccurrences", "test": "\n\n    var arg00 : List[Int] = List(2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2)\n    var x0 : List[Int] = maxOccurrences(arg00)\n    var v0 : List[Int] = List(2, 5)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18)\n    var x1 : List[Int] = maxOccurrences(arg10)\n    var v1 : List[Int] = List(8, 2)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10)\n    var x2 : List[Int] = maxOccurrences(arg20)\n    var v2 : List[Int] = List(20, 3)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the item with maximum frequency in a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/131", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to reverse only the vowels of a given string.\n     *\n     * >>> reverseVowels(\"Python\")\n     * \"Python\"\n     * >>> reverseVowels(\"USA\")\n     * \"ASU\"\n     * >>> reverseVowels(\"ab\")\n     * \"ab\"\n     */\n    def reverseVowels(str1 : String) : String = {\n", "entry_point": "reverseVowels", "test": "\n\n    var arg00 : String = \"\"\"Python\"\"\"\n    var x0 : String = reverseVowels(arg00)\n    var v0 : String = \"\"\"Python\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"USA\"\"\"\n    var x1 : String = reverseVowels(arg10)\n    var v1 : String = \"\"\"ASU\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"ab\"\"\"\n    var x2 : String = reverseVowels(arg20)\n    var v2 : String = \"\"\"ab\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to reverse only the vowels of a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/132", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert tuple to a string.\n     *\n     * >>> tupString(List(\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"))\n     * \"exercises\"\n     * >>> tupString(List(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))\n     * \"python\"\n     * >>> tupString(List(\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))\n     * \"program\"\n     */\n    def tupString(tup1 : List[String]) : String = {\n", "entry_point": "tupString", "test": "\n\n    var arg00 : List[String] = List(\"\"\"e\"\"\", \"\"\"x\"\"\", \"\"\"e\"\"\", \"\"\"r\"\"\", \"\"\"c\"\"\", \"\"\"i\"\"\", \"\"\"s\"\"\", \"\"\"e\"\"\", \"\"\"s\"\"\")\n    var x0 : String = tupString(arg00)\n    var v0 : String = \"\"\"exercises\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"p\"\"\", \"\"\"y\"\"\", \"\"\"t\"\"\", \"\"\"h\"\"\", \"\"\"o\"\"\", \"\"\"n\"\"\")\n    var x1 : String = tupString(arg10)\n    var v1 : String = \"\"\"python\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"p\"\"\", \"\"\"r\"\"\", \"\"\"o\"\"\", \"\"\"g\"\"\", \"\"\"r\"\"\", \"\"\"a\"\"\", \"\"\"m\"\"\")\n    var x2 : String = tupString(arg20)\n    var v2 : String = \"\"\"program\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert tuple to a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/133", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n     *\n     * >>> sumNegativenum(List(2, 4, -6, -9, 11, -12, 14, -5, 17))\n     * -32\n     * >>> sumNegativenum(List(10, 15, -14, 13, -18, 12, -20))\n     * -52\n     * >>> sumNegativenum(List(19, -65, 57, 39, 152, -639, 121, 44, 90, -190))\n     * -894\n     */\n    def sumNegativenum(nums : List[Int]) : Int = {\n", "entry_point": "sumNegativenum", "test": "\n\n    var arg00 : List[Int] = List(2, 4, -6, -9, 11, -12, 14, -5, 17)\n    var x0 : Int = sumNegativenum(arg00)\n    var v0 : Int = -32\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(10, 15, -14, 13, -18, 12, -20)\n    var x1 : Int = sumNegativenum(arg10)\n    var v1 : Int = -52\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(19, -65, 57, 39, 152, -639, 121, 44, 90, -190)\n    var x2 : Int = sumNegativenum(arg20)\n    var v2 : Int = -894\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/134", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the last element of given array is even or odd after performing an operation p times.\n     *\n     * >>> checkLast(List(5, 7, 10), 3, 1)\n     * \"ODD\"\n     * >>> checkLast(List(2, 3), 2, 3)\n     * \"EVEN\"\n     * >>> checkLast(List(1, 2, 3), 3, 1)\n     * \"ODD\"\n     */\n    def checkLast(arr : List[Int], n : Int, p : Int) : String = {\n", "entry_point": "checkLast", "test": "\n\n    var arg00 : List[Int] = List(5, 7, 10)\n    var arg01 : Int = 3\n    var arg02 : Int = 1\n    var x0 : String = checkLast(arg00, arg01, arg02)\n    var v0 : String = \"\"\"ODD\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 3)\n    var arg11 : Int = 2\n    var arg12 : Int = 3\n    var x1 : String = checkLast(arg10, arg11, arg12)\n    var v1 : String = \"\"\"EVEN\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3)\n    var arg21 : Int = 3\n    var arg22 : Int = 1\n    var x2 : String = checkLast(arg20, arg21, arg22)\n    var v2 : String = \"\"\"ODD\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the last element of given array is even or odd after performing an operation p times.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/135", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the nth hexagonal number.\n     *\n     * >>> hexagonalNum(10)\n     * 190\n     * >>> hexagonalNum(5)\n     * 45\n     * >>> hexagonalNum(7)\n     * 91\n     */\n    def hexagonalNum(n : Int) : Int = {\n", "entry_point": "hexagonalNum", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = hexagonalNum(arg00)\n    var v0 : Int = 190\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var x1 : Int = hexagonalNum(arg10)\n    var v1 : Int = 45\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 7\n    var x2 : Int = hexagonalNum(arg20)\n    var v2 : Int = 91\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the nth hexagonal number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/136", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate electricity bill.\n     *\n     * >>> calElectbill(75)\n     * 246.25\n     * >>> calElectbill(265)\n     * 1442.75\n     * >>> calElectbill(100)\n     * 327.5\n     */\n    def calElectbill(units : Int) : Double = {\n", "entry_point": "calElectbill", "test": "\n\n    var arg00 : Int = 75\n    var x0 : Double = calElectbill(arg00)\n    var v0 : Double = 246.25\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 265\n    var x1 : Double = calElectbill(arg10)\n    var v1 : Double = 1442.75\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 100\n    var x2 : Double = calElectbill(arg20)\n    var v2 : Double = 327.5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate electricity bill.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/137", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the ration of zeroes in an array of integers.\n     *\n     * >>> zeroCount(List(0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8))\n     * 0.15\n     * >>> zeroCount(List(2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8))\n     * 0.0\n     * >>> zeroCount(List(2, 4, -6, -9, 11, -12, 14, -5, 17))\n     * 0.0\n     */\n    def zeroCount(nums : List[Int]) : Double = {\n", "entry_point": "zeroCount", "test": "\n\n    var arg00 : List[Int] = List(0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8)\n    var x0 : Double = zeroCount(arg00)\n    var v0 : Double = 0.15\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8)\n    var x1 : Double = zeroCount(arg10)\n    var v1 : Double = 0.0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 4, -6, -9, 11, -12, 14, -5, 17)\n    var x2 : Double = zeroCount(arg20)\n    var v2 : Double = 0.0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the ration of zeroes in an array of integers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/138", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n     *\n     * >>> isSumOfPowersOfTwo(10)\n     * true\n     * >>> isSumOfPowersOfTwo(7)\n     * false\n     * >>> isSumOfPowersOfTwo(14)\n     * true\n     */\n    def isSumOfPowersOfTwo(n : Int) : Boolean = {\n", "entry_point": "isSumOfPowersOfTwo", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Boolean = isSumOfPowersOfTwo(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 7\n    var x1 : Boolean = isSumOfPowersOfTwo(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 14\n    var x2 : Boolean = isSumOfPowersOfTwo(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/139", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the circumference of a circle.\n     *\n     * >>> circleCircumference(10)\n     * 62.830000000000005\n     * >>> circleCircumference(5)\n     * 31.415000000000003\n     * >>> circleCircumference(4)\n     * 25.132\n     */\n    def circleCircumference(r : Int) : Double = {\n", "entry_point": "circleCircumference", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Double = circleCircumference(arg00)\n    var v0 : Double = 62.830000000000005\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var x1 : Double = circleCircumference(arg10)\n    var v1 : Double = 31.415000000000003\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var x2 : Double = circleCircumference(arg20)\n    var v2 : Double = 25.132\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the circumference of a circle.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/140", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract elements that occur singly in the given tuple list.\n     *\n     * >>> extractSingly(List(List(3, 4, 5), List(4, 5, 7), List(1, 4)))\n     * List(3, 4, 5, 7, 1)\n     * >>> extractSingly(List(List(1, 2, 3), List(4, 2, 3), List(7, 8)))\n     * List(1, 2, 3, 4, 7, 8)\n     * >>> extractSingly(List(List(7, 8, 9), List(10, 11, 12), List(10, 11)))\n     * List(7, 8, 9, 10, 11, 12)\n     */\n    def extractSingly(testList : List[List[Int]]) : List[Int] = {\n", "entry_point": "extractSingly", "test": "\n\n    var arg00 : List[List[Int]] = List(List(3, 4, 5), List(4, 5, 7), List(1, 4))\n    var x0 : List[Int] = extractSingly(arg00)\n    var v0 : List[Int] = List(3, 4, 5, 7, 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1, 2, 3), List(4, 2, 3), List(7, 8))\n    var x1 : List[Int] = extractSingly(arg10)\n    var v1 : List[Int] = List(1, 2, 3, 4, 7, 8)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(7, 8, 9), List(10, 11, 12), List(10, 11))\n    var x2 : List[Int] = extractSingly(arg20)\n    var v2 : List[Int] = List(7, 8, 9, 10, 11, 12)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract elements that occur singly in the given tuple list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/141", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort a list of elements using pancake sort.\n     *\n     * >>> pancakeSort(List(15, 79, 25, 38, 69))\n     * List(15, 25, 38, 69, 79)\n     * >>> pancakeSort(List(98, 12, 54, 36, 85))\n     * List(12, 36, 54, 85, 98)\n     * >>> pancakeSort(List(41, 42, 32, 12, 23))\n     * List(12, 23, 32, 41, 42)\n     */\n    def pancakeSort(nums : List[Int]) : List[Int] = {\n", "entry_point": "pancakeSort", "test": "\n\n    var arg00 : List[Int] = List(15, 79, 25, 38, 69)\n    var x0 : List[Int] = pancakeSort(arg00)\n    var v0 : List[Int] = List(15, 25, 38, 69, 79)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(98, 12, 54, 36, 85)\n    var x1 : List[Int] = pancakeSort(arg10)\n    var v1 : List[Int] = List(12, 36, 54, 85, 98)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(41, 42, 32, 12, 23)\n    var x2 : List[Int] = pancakeSort(arg20)\n    var v2 : List[Int] = List(12, 23, 32, 41, 42)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort a list of elements using pancake sort.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/142", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count the same pair in three given lists.\n     *\n     * >>> countSamepair(List(1, 2, 3, 4, 5, 6, 7, 8), List(2, 2, 3, 1, 2, 6, 7, 9), List(2, 1, 3, 1, 2, 6, 7, 9))\n     * 3\n     * >>> countSamepair(List(1, 2, 3, 4, 5, 6, 7, 8), List(2, 2, 3, 1, 2, 6, 7, 8), List(2, 1, 3, 1, 2, 6, 7, 8))\n     * 4\n     * >>> countSamepair(List(1, 2, 3, 4, 2, 6, 7, 8), List(2, 2, 3, 1, 2, 6, 7, 8), List(2, 1, 3, 1, 2, 6, 7, 8))\n     * 5\n     */\n    def countSamepair(list1 : List[Int], list2 : List[Int], list3 : List[Int]) : Int = {\n", "entry_point": "countSamepair", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8)\n    var arg01 : List[Int] = List(2, 2, 3, 1, 2, 6, 7, 9)\n    var arg02 : List[Int] = List(2, 1, 3, 1, 2, 6, 7, 9)\n    var x0 : Int = countSamepair(arg00, arg01, arg02)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8)\n    var arg11 : List[Int] = List(2, 2, 3, 1, 2, 6, 7, 8)\n    var arg12 : List[Int] = List(2, 1, 3, 1, 2, 6, 7, 8)\n    var x1 : Int = countSamepair(arg10, arg11, arg12)\n    var v1 : Int = 4\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4, 2, 6, 7, 8)\n    var arg21 : List[Int] = List(2, 2, 3, 1, 2, 6, 7, 8)\n    var arg22 : List[Int] = List(2, 1, 3, 1, 2, 6, 7, 8)\n    var x2 : Int = countSamepair(arg20, arg21, arg22)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count the same pair in three given lists.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/143", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find number of lists present in the given tuple.\n     *\n     * >>> findLists(List(List(1, 2, 3, 4), List(5, 6, 7, 8)))\n     * 2\n     * >>> findLists(List(9, 8, 7, 6, 5, 4, 3, 2, 1))\n     * 1\n     */\n    def findLists(input : List[Any]) : Int = {\n", "entry_point": "findLists", "test": "\n\n    var arg00 : List[Any] = List(List(1, 2, 3, 4), List(5, 6, 7, 8))\n    var x0 : Int = findLists(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(9, 8, 7, 6, 5, 4, 3, 2, 1)\n    var x1 : Int = findLists(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n\n}\n", "description": "Write a function to find number of lists present in the given tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/144", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of absolute differences in all pairs of the given array.\n     *\n     * >>> sumPairs(List(1, 8, 9, 15, 16), 5)\n     * 74\n     * >>> sumPairs(List(1, 2, 3, 4), 4)\n     * 10\n     * >>> sumPairs(List(1, 2, 3, 4, 5, 7, 9, 11, 14), 9)\n     * 188\n     */\n    def sumPairs(arr : List[Int], n : Int) : Int = {\n", "entry_point": "sumPairs", "test": "\n\n    var arg00 : List[Int] = List(1, 8, 9, 15, 16)\n    var arg01 : Int = 5\n    var x0 : Int = sumPairs(arg00, arg01)\n    var v0 : Int = 74\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4)\n    var arg11 : Int = 4\n    var x1 : Int = sumPairs(arg10, arg11)\n    var v1 : Int = 10\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4, 5, 7, 9, 11, 14)\n    var arg21 : Int = 9\n    var x2 : Int = sumPairs(arg20, arg21)\n    var v2 : Int = 188\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of absolute differences in all pairs of the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/145", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the maximum difference between any two elements in a given array.\n     *\n     * >>> maxAbsDiff(List(2, 1, 5, 3), 4)\n     * 4\n     * >>> maxAbsDiff(List(9, 3, 2, 5, 1), 5)\n     * 8\n     * >>> maxAbsDiff(List(3, 2, 1), 3)\n     * 2\n     */\n    def maxAbsDiff(arr : List[Int], n : Int) : Int = {\n", "entry_point": "maxAbsDiff", "test": "\n\n    var arg00 : List[Int] = List(2, 1, 5, 3)\n    var arg01 : Int = 4\n    var x0 : Int = maxAbsDiff(arg00, arg01)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(9, 3, 2, 5, 1)\n    var arg11 : Int = 5\n    var x1 : Int = maxAbsDiff(arg10, arg11)\n    var v1 : Int = 8\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3, 2, 1)\n    var arg21 : Int = 3\n    var x2 : Int = maxAbsDiff(arg20, arg21)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the maximum difference between any two elements in a given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/146", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the ascii value of total characters in a string.\n     *\n     * >>> asciiValueString(\"python\")\n     * 112\n     * >>> asciiValueString(\"Program\")\n     * 80\n     * >>> asciiValueString(\"Language\")\n     * 76\n     */\n    def asciiValueString(str1 : String) : Int = {\n", "entry_point": "asciiValueString", "test": "\n\n    var arg00 : String = \"\"\"python\"\"\"\n    var x0 : Int = asciiValueString(arg00)\n    var v0 : Int = 112\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Program\"\"\"\n    var x1 : Int = asciiValueString(arg10)\n    var v1 : Int = 80\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Language\"\"\"\n    var x2 : Int = asciiValueString(arg20)\n    var v2 : Int = 76\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the ascii value of total characters in a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/147", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the maximum total path sum in the given triangle.\n     *\n     * >>> maxPathSum(List(List(1, 0, 0), List(4, 8, 0), List(1, 5, 3)), 2, 2)\n     * 14\n     * >>> maxPathSum(List(List(13, 0, 0), List(7, 4, 0), List(2, 4, 6)), 2, 2)\n     * 24\n     * >>> maxPathSum(List(List(2, 0, 0), List(11, 18, 0), List(21, 25, 33)), 2, 2)\n     * 53\n     */\n    def maxPathSum(tri : List[List[Int]], m : Int, n : Int) : Int = {\n", "entry_point": "maxPathSum", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 0, 0), List(4, 8, 0), List(1, 5, 3))\n    var arg01 : Int = 2\n    var arg02 : Int = 2\n    var x0 : Int = maxPathSum(arg00, arg01, arg02)\n    var v0 : Int = 14\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(13, 0, 0), List(7, 4, 0), List(2, 4, 6))\n    var arg11 : Int = 2\n    var arg12 : Int = 2\n    var x1 : Int = maxPathSum(arg10, arg11, arg12)\n    var v1 : Int = 24\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(2, 0, 0), List(11, 18, 0), List(21, 25, 33))\n    var arg21 : Int = 2\n    var arg22 : Int = 2\n    var x2 : Int = maxPathSum(arg20, arg21, arg22)\n    var v2 : Int = 53\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the maximum total path sum in the given triangle.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/148", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to divide a number into two parts such that the sum of digits is maximum.\n     *\n     * >>> sumDigitsTwoparts(35)\n     * 17\n     * >>> sumDigitsTwoparts(7)\n     * 7\n     * >>> sumDigitsTwoparts(100)\n     * 19\n     */\n    def sumDigitsTwoparts(n : Int) : Int = {\n", "entry_point": "sumDigitsTwoparts", "test": "\n\n    var arg00 : Int = 35\n    var x0 : Int = sumDigitsTwoparts(arg00)\n    var v0 : Int = 17\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 7\n    var x1 : Int = sumDigitsTwoparts(arg10)\n    var v1 : Int = 7\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 100\n    var x2 : Int = sumDigitsTwoparts(arg20)\n    var v2 : Int = 19\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to divide a number into two parts such that the sum of digits is maximum.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/149", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n     *\n     * >>> longestSubseqWithDiffOne(List(1, 2, 3, 4, 5, 3, 2), 7)\n     * 6\n     * >>> longestSubseqWithDiffOne(List(10, 9, 4, 5, 4, 8, 6), 7)\n     * 3\n     * >>> longestSubseqWithDiffOne(List(1, 2, 3, 2, 3, 7, 2, 1), 8)\n     * 7\n     */\n    def longestSubseqWithDiffOne(arr : List[Int], n : Int) : Int = {\n", "entry_point": "longestSubseqWithDiffOne", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5, 3, 2)\n    var arg01 : Int = 7\n    var x0 : Int = longestSubseqWithDiffOne(arg00, arg01)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(10, 9, 4, 5, 4, 8, 6)\n    var arg11 : Int = 7\n    var x1 : Int = longestSubseqWithDiffOne(arg10, arg11)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 2, 3, 7, 2, 1)\n    var arg21 : Int = 8\n    var x2 : Int = longestSubseqWithDiffOne(arg20, arg21)\n    var v2 : Int = 7\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/150", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find whether the given number is present in the infinite sequence or not.\n     *\n     * >>> doesContainB(1, 7, 3)\n     * true\n     * >>> doesContainB(1, -3, 5)\n     * false\n     * >>> doesContainB(3, 2, 5)\n     * false\n     */\n    def doesContainB(a : Int, b : Int, c : Int) : Boolean = {\n", "entry_point": "doesContainB", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = 7\n    var arg02 : Int = 3\n    var x0 : Boolean = doesContainB(arg00, arg01, arg02)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var arg11 : Int = -3\n    var arg12 : Int = 5\n    var x1 : Boolean = doesContainB(arg10, arg11, arg12)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 3\n    var arg21 : Int = 2\n    var arg22 : Int = 5\n    var x2 : Boolean = doesContainB(arg20, arg21, arg22)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find whether the given number is present in the infinite sequence or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/151", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the given number is co-prime or not.\n     *\n     * >>> isCoprime(17, 13)\n     * true\n     * >>> isCoprime(15, 21)\n     * false\n     * >>> isCoprime(25, 45)\n     * false\n     */\n    def isCoprime(x : Int, y : Int) : Boolean = {\n", "entry_point": "isCoprime", "test": "\n\n    var arg00 : Int = 17\n    var arg01 : Int = 13\n    var x0 : Boolean = isCoprime(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 15\n    var arg11 : Int = 21\n    var x1 : Boolean = isCoprime(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 25\n    var arg21 : Int = 45\n    var x2 : Boolean = isCoprime(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the given number is co-prime or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/152", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort the given array by using merge sort.\n     *\n     * >>> mergeSort(List(3, 4, 2, 6, 5, 7, 1, 9))\n     * List(1, 2, 3, 4, 5, 6, 7, 9)\n     * >>> mergeSort(List(7, 25, 45, 78, 11, 33, 19))\n     * List(7, 11, 19, 25, 33, 45, 78)\n     * >>> mergeSort(List(3, 1, 4, 9, 8))\n     * List(1, 3, 4, 8, 9)\n     */\n    def mergeSort(x : List[Int]) : List[Int] = {\n", "entry_point": "mergeSort", "test": "\n\n    var arg00 : List[Int] = List(3, 4, 2, 6, 5, 7, 1, 9)\n    var x0 : List[Int] = mergeSort(arg00)\n    var v0 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 9)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(7, 25, 45, 78, 11, 33, 19)\n    var x1 : List[Int] = mergeSort(arg10)\n    var v1 : List[Int] = List(7, 11, 19, 25, 33, 45, 78)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3, 1, 4, 9, 8)\n    var x2 : List[Int] = mergeSort(arg20)\n    var v2 : List[Int] = List(1, 3, 4, 8, 9)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort the given array by using merge sort.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/153", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the vertex of a parabola.\n     *\n     * >>> parabolaVertex(5, 3, 2)\n     * List(-0.3, 1.55)\n     * >>> parabolaVertex(9, 8, 4)\n     * List(-0.4444444444444444, 2.2222222222222223)\n     * >>> parabolaVertex(2, 4, 6)\n     * List(-1.0, 4.0)\n     */\n    def parabolaVertex(a : Int, b : Int, c : Int) : List[Double] = {\n", "entry_point": "parabolaVertex", "test": "\n\n    var arg00 : Int = 5\n    var arg01 : Int = 3\n    var arg02 : Int = 2\n    var x0 : List[Double] = parabolaVertex(arg00, arg01, arg02)\n    var v0 : List[Double] = List(-0.3, 1.55)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 9\n    var arg11 : Int = 8\n    var arg12 : Int = 4\n    var x1 : List[Double] = parabolaVertex(arg10, arg11, arg12)\n    var v1 : List[Double] = List(-0.4444444444444444, 2.2222222222222223)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var arg21 : Int = 4\n    var arg22 : Int = 6\n    var x2 : List[Double] = parabolaVertex(arg20, arg21, arg22)\n    var v2 : List[Double] = List(-1.0, 4.0)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the vertex of a parabola.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/154", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract every specified element from a given two dimensional list.\n     *\n     * >>> specifiedElement(List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 1, 9, 5)), 0)\n     * List(1, 4, 7)\n     * >>> specifiedElement(List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 1, 9, 5)), 2)\n     * List(3, 6, 9)\n     * >>> specifiedElement(List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 1, 9, 5)), 3)\n     * List(2, 2, 5)\n     */\n    def specifiedElement(nums : List[List[Int]], n : Int) : List[Int] = {\n", "entry_point": "specifiedElement", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 1, 9, 5))\n    var arg01 : Int = 0\n    var x0 : List[Int] = specifiedElement(arg00, arg01)\n    var v0 : List[Int] = List(1, 4, 7)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 1, 9, 5))\n    var arg11 : Int = 2\n    var x1 : List[Int] = specifiedElement(arg10, arg11)\n    var v1 : List[Int] = List(3, 6, 9)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 1, 9, 5))\n    var arg21 : Int = 3\n    var x2 : List[Int] = specifiedElement(arg20, arg21)\n    var v2 : List[Int] = List(2, 2, 5)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract every specified element from a given two dimensional list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/155", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to toggle all even bits of a given number.\n     *\n     * >>> evenBitToggleNumber(10)\n     * 0\n     * >>> evenBitToggleNumber(20)\n     * 30\n     * >>> evenBitToggleNumber(30)\n     * 20\n     */\n    def evenBitToggleNumber(n : Int) : Int = {\n", "entry_point": "evenBitToggleNumber", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = evenBitToggleNumber(arg00)\n    var v0 : Int = 0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 20\n    var x1 : Int = evenBitToggleNumber(arg10)\n    var v1 : Int = 30\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 30\n    var x2 : Int = evenBitToggleNumber(arg20)\n    var v2 : Int = 20\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to toggle all even bits of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/156", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert a tuple of string values to a tuple of integer values.\n     *\n     * >>> tupleIntStr(List(List(\"333\", \"33\"), List(\"1416\", \"55\")))\n     * List(List(333, 33), List(1416, 55))\n     * >>> tupleIntStr(List(List(\"999\", \"99\"), List(\"1000\", \"500\")))\n     * List(List(999, 99), List(1000, 500))\n     * >>> tupleIntStr(List(List(\"666\", \"66\"), List(\"1500\", \"555\")))\n     * List(List(666, 66), List(1500, 555))\n     */\n    def tupleIntStr(tupleStr : List[List[String]]) : List[List[Int]] = {\n", "entry_point": "tupleIntStr", "test": "\n\n    var arg00 : List[List[String]] = List(List(\"\"\"333\"\"\", \"\"\"33\"\"\"), List(\"\"\"1416\"\"\", \"\"\"55\"\"\"))\n    var x0 : List[List[Int]] = tupleIntStr(arg00)\n    var v0 : List[List[Int]] = List(List(333, 33), List(1416, 55))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[String]] = List(List(\"\"\"999\"\"\", \"\"\"99\"\"\"), List(\"\"\"1000\"\"\", \"\"\"500\"\"\"))\n    var x1 : List[List[Int]] = tupleIntStr(arg10)\n    var v1 : List[List[Int]] = List(List(999, 99), List(1000, 500))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[String]] = List(List(\"\"\"666\"\"\", \"\"\"66\"\"\"), List(\"\"\"1500\"\"\", \"\"\"555\"\"\"))\n    var x2 : List[List[Int]] = tupleIntStr(arg20)\n    var v2 : List[List[Int]] = List(List(666, 66), List(1500, 555))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert a tuple of string values to a tuple of integer values.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/157", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to reflect the run-length encoding from a list.\n     *\n     * >>> encodeList(List(1, 1, 2, 3, 4, 4.3, 5, 1))\n     * List(List(2, 1), List(1, 2), List(1, 3), List(1, 4), List(1, 4.3), List(1, 5), List(1, 1))\n     * >>> encodeList(\"automatically\")\n     * List(List(1, \"a\"), List(1, \"u\"), List(1, \"t\"), List(1, \"o\"), List(1, \"m\"), List(1, \"a\"), List(1, \"t\"), List(1, \"i\"), List(1, \"c\"), List(1, \"a\"), List(2, \"l\"), List(1, \"y\"))\n     * >>> encodeList(\"python\")\n     * List(List(1, \"p\"), List(1, \"y\"), List(1, \"t\"), List(1, \"h\"), List(1, \"o\"), List(1, \"n\"))\n     */\n    def encodeList(list1 : Any) : List[List[Any]] = {\n", "entry_point": "encodeList", "test": "\n\n    var arg00 : Any = List(1, 1, 2, 3, 4, 4.3, 5, 1)\n    var x0 : List[List[Any]] = encodeList(arg00)\n    var v0 : List[List[Any]] = List(List(2, 1), List(1, 2), List(1, 3), List(1, 4), List(1, 4.3), List(1, 5), List(1, 1))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Any = \"\"\"automatically\"\"\"\n    var x1 : List[List[Any]] = encodeList(arg10)\n    var v1 : List[List[Any]] = List(List(1, \"\"\"a\"\"\"), List(1, \"\"\"u\"\"\"), List(1, \"\"\"t\"\"\"), List(1, \"\"\"o\"\"\"), List(1, \"\"\"m\"\"\"), List(1, \"\"\"a\"\"\"), List(1, \"\"\"t\"\"\"), List(1, \"\"\"i\"\"\"), List(1, \"\"\"c\"\"\"), List(1, \"\"\"a\"\"\"), List(2, \"\"\"l\"\"\"), List(1, \"\"\"y\"\"\"))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Any = \"\"\"python\"\"\"\n    var x2 : List[List[Any]] = encodeList(arg20)\n    var v2 : List[List[Any]] = List(List(1, \"\"\"p\"\"\"), List(1, \"\"\"y\"\"\"), List(1, \"\"\"t\"\"\"), List(1, \"\"\"h\"\"\"), List(1, \"\"\"o\"\"\"), List(1, \"\"\"n\"\"\"))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to reflect the run-length encoding from a list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/158", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find k number of operations required to make all elements equal.\n     *\n     * >>> minOps(List(2, 2, 2, 2), 4, 3)\n     * 0\n     * >>> minOps(List(4, 2, 6, 8), 4, 3)\n     * -1\n     * >>> minOps(List(21, 33, 9, 45, 63), 5, 6)\n     * 24\n     */\n    def minOps(arr : List[Int], n : Int, k : Int) : Int = {\n", "entry_point": "minOps", "test": "\n\n    var arg00 : List[Int] = List(2, 2, 2, 2)\n    var arg01 : Int = 4\n    var arg02 : Int = 3\n    var x0 : Int = minOps(arg00, arg01, arg02)\n    var v0 : Int = 0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 2, 6, 8)\n    var arg11 : Int = 4\n    var arg12 : Int = 3\n    var x1 : Int = minOps(arg10, arg11, arg12)\n    var v1 : Int = -1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(21, 33, 9, 45, 63)\n    var arg21 : Int = 5\n    var arg22 : Int = 6\n    var x2 : Int = minOps(arg20, arg21, arg22)\n    var v2 : Int = 24\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find k number of operations required to make all elements equal.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/159", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to print the season for the given month and day.\n     *\n     * >>> monthSeason(\"January\", 4)\n     * \"winter\"\n     * >>> monthSeason(\"October\", 28)\n     * \"autumn\"\n     * >>> monthSeason(\"June\", 6)\n     * \"spring\"\n     */\n    def monthSeason(month : String, days : Int) : String = {\n", "entry_point": "monthSeason", "test": "\n\n    var arg00 : String = \"\"\"January\"\"\"\n    var arg01 : Int = 4\n    var x0 : String = monthSeason(arg00, arg01)\n    var v0 : String = \"\"\"winter\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"October\"\"\"\n    var arg11 : Int = 28\n    var x1 : String = monthSeason(arg10, arg11)\n    var v1 : String = \"\"\"autumn\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"June\"\"\"\n    var arg21 : Int = 6\n    var x2 : String = monthSeason(arg20, arg21)\n    var v2 : String = \"\"\"spring\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to print the season for the given month and day.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/160", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find x and y that satisfies ax + by = n.\n     *\n     * >>> solution(2, 3, 7)\n     * List(\"x = \", 2, \", y = \", 1)\n     * >>> solution(4, 2, 7)\n     * \"No solution\"\n     * >>> solution(1, 13, 17)\n     * List(\"x = \", 4, \", y = \", 1)\n     */\n    def solution(a : Int, b : Int, n : Int) : Any = {\n", "entry_point": "solution", "test": "\n\n    var arg00 : Int = 2\n    var arg01 : Int = 3\n    var arg02 : Int = 7\n    var x0 : Any = solution(arg00, arg01, arg02)\n    var v0 : Any = List(\"\"\"x = \"\"\", 2, \"\"\", y = \"\"\", 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var arg11 : Int = 2\n    var arg12 : Int = 7\n    var x1 : Any = solution(arg10, arg11, arg12)\n    var v1 : Any = \"\"\"No solution\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = 13\n    var arg22 : Int = 17\n    var x2 : Any = solution(arg20, arg21, arg22)\n    var v2 : Any = List(\"\"\"x = \"\"\", 4, \"\"\", y = \"\"\", 1)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find x and y that satisfies ax + by = n.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/161", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove all elements from a given list present in another list.\n     *\n     * >>> removeElements(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), List(2, 4, 6, 8))\n     * List(1, 3, 5, 7, 9, 10)\n     * >>> removeElements(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), List(1, 3, 5, 7))\n     * List(2, 4, 6, 8, 9, 10)\n     * >>> removeElements(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), List(5, 7))\n     * List(1, 2, 3, 4, 6, 8, 9, 10)\n     */\n    def removeElements(list1 : List[Int], list2 : List[Int]) : List[Int] = {\n", "entry_point": "removeElements", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var arg01 : List[Int] = List(2, 4, 6, 8)\n    var x0 : List[Int] = removeElements(arg00, arg01)\n    var v0 : List[Int] = List(1, 3, 5, 7, 9, 10)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var arg11 : List[Int] = List(1, 3, 5, 7)\n    var x1 : List[Int] = removeElements(arg10, arg11)\n    var v1 : List[Int] = List(2, 4, 6, 8, 9, 10)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var arg21 : List[Int] = List(5, 7)\n    var x2 : List[Int] = removeElements(arg20, arg21)\n    var v2 : List[Int] = List(1, 2, 3, 4, 6, 8, 9, 10)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove all elements from a given list present in another list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/162", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n     *\n     * >>> sumSeries(6)\n     * 12\n     * >>> sumSeries(10)\n     * 30\n     * >>> sumSeries(9)\n     * 25\n     */\n    def sumSeries(n : Int) : Int = {\n", "entry_point": "sumSeries", "test": "\n\n    var arg00 : Int = 6\n    var x0 : Int = sumSeries(arg00)\n    var v0 : Int = 12\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var x1 : Int = sumSeries(arg10)\n    var v1 : Int = 30\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 9\n    var x2 : Int = sumSeries(arg20)\n    var v2 : Int = 25\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/163", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate the area of a regular polygon.\n     *\n     * >>> areaPolygon(4, 20)\n     * 400.00000000000006\n     * >>> areaPolygon(10, 15)\n     * 1731.1969896610804\n     * >>> areaPolygon(9, 7)\n     * 302.90938549487214\n     */\n    def areaPolygon(s : Int, l : Int) : Double = {\n", "entry_point": "areaPolygon", "test": "\n\n    var arg00 : Int = 4\n    var arg01 : Int = 20\n    var x0 : Double = areaPolygon(arg00, arg01)\n    var v0 : Double = 400.00000000000006\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var arg11 : Int = 15\n    var x1 : Double = areaPolygon(arg10, arg11)\n    var v1 : Double = 1731.1969896610804\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 9\n    var arg21 : Int = 7\n    var x2 : Double = areaPolygon(arg20, arg21)\n    var v2 : Double = 302.90938549487214\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate the area of a regular polygon.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/164", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the sum of divisors are same or not.\n     *\n     * >>> areequivalent(36, 57)\n     * false\n     * >>> areequivalent(2, 4)\n     * false\n     * >>> areequivalent(23, 47)\n     * true\n     */\n    def areequivalent(num1 : Int, num2 : Int) : Boolean = {\n", "entry_point": "areequivalent", "test": "\n\n    var arg00 : Int = 36\n    var arg01 : Int = 57\n    var x0 : Boolean = areequivalent(arg00, arg01)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var arg11 : Int = 4\n    var x1 : Boolean = areequivalent(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 23\n    var arg21 : Int = 47\n    var x2 : Boolean = areequivalent(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the sum of divisors are same or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/165", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n     *\n     * >>> countCharPosition(\"xbcefg\")\n     * 2\n     * >>> countCharPosition(\"ABcED\")\n     * 3\n     * >>> countCharPosition(\"AbgdeF\")\n     * 5\n     */\n    def countCharPosition(str1 : String) : Int = {\n", "entry_point": "countCharPosition", "test": "\n\n    var arg00 : String = \"\"\"xbcefg\"\"\"\n    var x0 : Int = countCharPosition(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"ABcED\"\"\"\n    var x1 : Int = countCharPosition(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"AbgdeF\"\"\"\n    var x2 : Int = countCharPosition(arg20)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/166", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the pairs with xor as an even number.\n     *\n     * >>> findEvenPair(List(5, 4, 7, 2, 1), 5)\n     * 4\n     * >>> findEvenPair(List(7, 2, 8, 1, 0, 5, 11), 7)\n     * 9\n     * >>> findEvenPair(List(1, 2, 3), 3)\n     * 1\n     */\n    def findEvenPair(a : List[Int], n : Int) : Int = {\n", "entry_point": "findEvenPair", "test": "\n\n    var arg00 : List[Int] = List(5, 4, 7, 2, 1)\n    var arg01 : Int = 5\n    var x0 : Int = findEvenPair(arg00, arg01)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(7, 2, 8, 1, 0, 5, 11)\n    var arg11 : Int = 7\n    var x1 : Int = findEvenPair(arg10, arg11)\n    var v1 : Int = 9\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3)\n    var arg21 : Int = 3\n    var x2 : Int = findEvenPair(arg20, arg21)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the pairs with xor as an even number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/167", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find smallest power of 2 greater than or equal to n.\n     *\n     * >>> nextPowerOf2(0)\n     * 1\n     * >>> nextPowerOf2(5)\n     * 8\n     * >>> nextPowerOf2(17)\n     * 32\n     */\n    def nextPowerOf2(n : Int) : Int = {\n", "entry_point": "nextPowerOf2", "test": "\n\n    var arg00 : Int = 0\n    var x0 : Int = nextPowerOf2(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var x1 : Int = nextPowerOf2(arg10)\n    var v1 : Int = 8\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 17\n    var x2 : Int = nextPowerOf2(arg20)\n    var v2 : Int = 32\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find smallest power of 2 greater than or equal to n.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/168", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the frequency of a number in a given array.\n     *\n     * >>> frequency(List(1, 2, 3), 4)\n     * 0\n     * >>> frequency(List(1, 2, 2, 3, 3, 3, 4), 3)\n     * 3\n     * >>> frequency(List(0, 1, 2, 3, 1, 2), 1)\n     * 2\n     */\n    def frequency(a : List[Int], x : Int) : Int = {\n", "entry_point": "frequency", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3)\n    var arg01 : Int = 4\n    var x0 : Int = frequency(arg00, arg01)\n    var v0 : Int = 0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 2, 3, 3, 3, 4)\n    var arg11 : Int = 3\n    var x1 : Int = frequency(arg10, arg11)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(0, 1, 2, 3, 1, 2)\n    var arg21 : Int = 1\n    var x2 : Int = frequency(arg20, arg21)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the frequency of a number in a given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/169", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate the nth pell number.\n     *\n     * >>> getPell(4)\n     * 12\n     * >>> getPell(7)\n     * 169\n     * >>> getPell(8)\n     * 408\n     */\n    def getPell(n : Int) : Int = {\n", "entry_point": "getPell", "test": "\n\n    var arg00 : Int = 4\n    var x0 : Int = getPell(arg00)\n    var v0 : Int = 12\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 7\n    var x1 : Int = getPell(arg10)\n    var v1 : Int = 169\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 8\n    var x2 : Int = getPell(arg20)\n    var v2 : Int = 408\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate the nth pell number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/170", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find sum of the numbers in a list between the indices of a specified range.\n     *\n     * >>> sumRangeList(List(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12), 8, 10)\n     * 29\n     * >>> sumRangeList(List(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12), 5, 7)\n     * 16\n     * >>> sumRangeList(List(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12), 7, 10)\n     * 38\n     */\n    def sumRangeList(list1 : List[Int], m : Int, n : Int) : Int = {\n", "entry_point": "sumRangeList", "test": "\n\n    var arg00 : List[Int] = List(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12)\n    var arg01 : Int = 8\n    var arg02 : Int = 10\n    var x0 : Int = sumRangeList(arg00, arg01, arg02)\n    var v0 : Int = 29\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12)\n    var arg11 : Int = 5\n    var arg12 : Int = 7\n    var x1 : Int = sumRangeList(arg10, arg11, arg12)\n    var v1 : Int = 16\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12)\n    var arg21 : Int = 7\n    var arg22 : Int = 10\n    var x2 : Int = sumRangeList(arg20, arg21, arg22)\n    var v2 : Int = 38\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find sum of the numbers in a list between the indices of a specified range.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/171", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the perimeter of a pentagon.\n     *\n     * >>> perimeterPentagon(5)\n     * 25\n     * >>> perimeterPentagon(10)\n     * 50\n     * >>> perimeterPentagon(15)\n     * 75\n     */\n    def perimeterPentagon(a : Int) : Int = {\n", "entry_point": "perimeterPentagon", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Int = perimeterPentagon(arg00)\n    var v0 : Int = 25\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var x1 : Int = perimeterPentagon(arg10)\n    var v1 : Int = 50\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 15\n    var x2 : Int = perimeterPentagon(arg20)\n    var v2 : Int = 75\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the perimeter of a pentagon.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/172", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n     *\n     * >>> countOccurance(\"letstdlenstdporstd\")\n     * 3\n     * >>> countOccurance(\"truststdsolensporsd\")\n     * 1\n     * >>> countOccurance(\"makestdsostdworthit\")\n     * 2\n     */\n    def countOccurance(s : String) : Int = {\n", "entry_point": "countOccurance", "test": "\n\n    var arg00 : String = \"\"\"letstdlenstdporstd\"\"\"\n    var x0 : Int = countOccurance(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"truststdsolensporsd\"\"\"\n    var x1 : Int = countOccurance(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"makestdsostdworthit\"\"\"\n    var x2 : Int = countOccurance(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/173", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove everything except alphanumeric characters from a string.\n     *\n     * >>> removeSplchar(\"python  @#&^%\\$*program123\")\n     * \"pythonprogram123\"\n     * >>> removeSplchar(\"python %^\\$@!^&*()  programming24%\\$^^()    language\")\n     * \"pythonprogramming24language\"\n     * >>> removeSplchar(\"python   ^%&^()(+_)(_^&67)                  program\")\n     * \"python67program\"\n     */\n    def removeSplchar(text : String) : String = {\n", "entry_point": "removeSplchar", "test": "\n\n    var arg00 : String = \"\"\"python  @#&^%\\$*program123\"\"\"\n    var x0 : String = removeSplchar(arg00)\n    var v0 : String = \"\"\"pythonprogram123\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"python %^\\$@!^&*()  programming24%\\$^^()    language\"\"\"\n    var x1 : String = removeSplchar(arg10)\n    var v1 : String = \"\"\"pythonprogramming24language\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"python   ^%&^()(+_)(_^&67)                  program\"\"\"\n    var x2 : String = removeSplchar(arg20)\n    var v2 : String = \"\"\"python67program\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove everything except alphanumeric characters from a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/174", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to group a sequence of key-value pairs into a dictionary of lists.\n     *\n     * >>> groupKeyvalue(List(List(\"yellow\", 1), List(\"blue\", 2), List(\"yellow\", 3), List(\"blue\", 4), List(\"red\", 1)))\n     * Map(\"yellow\"->List(1, 3), \"blue\"->List(2, 4), \"red\"->List(1))\n     * >>> groupKeyvalue(List(List(\"python\", 1), List(\"python\", 2), List(\"python\", 3), List(\"python\", 4), List(\"python\", 5)))\n     * Map(\"python\"->List(1, 2, 3, 4, 5))\n     * >>> groupKeyvalue(List(List(\"yellow\", 100), List(\"blue\", 200), List(\"yellow\", 300), List(\"blue\", 400), List(\"red\", 100)))\n     * Map(\"yellow\"->List(100, 300), \"blue\"->List(200, 400), \"red\"->List(100))\n     */\n    def groupKeyvalue(l : List[List[Any]]) : Map[String, List[Int]] = {\n", "entry_point": "groupKeyvalue", "test": "\n\n    var arg00 : List[List[Any]] = List(List(\"\"\"yellow\"\"\", 1), List(\"\"\"blue\"\"\", 2), List(\"\"\"yellow\"\"\", 3), List(\"\"\"blue\"\"\", 4), List(\"\"\"red\"\"\", 1))\n    var x0 : Map[String, List[Int]] = groupKeyvalue(arg00)\n    var v0 : Map[String, List[Int]] = Map(\"\"\"yellow\"\"\" -> List(1, 3), \"\"\"blue\"\"\" -> List(2, 4), \"\"\"red\"\"\" -> List(1))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(\"\"\"python\"\"\", 1), List(\"\"\"python\"\"\", 2), List(\"\"\"python\"\"\", 3), List(\"\"\"python\"\"\", 4), List(\"\"\"python\"\"\", 5))\n    var x1 : Map[String, List[Int]] = groupKeyvalue(arg10)\n    var v1 : Map[String, List[Int]] = Map(\"\"\"python\"\"\" -> List(1, 2, 3, 4, 5))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(\"\"\"yellow\"\"\", 100), List(\"\"\"blue\"\"\", 200), List(\"\"\"yellow\"\"\", 300), List(\"\"\"blue\"\"\", 400), List(\"\"\"red\"\"\", 100))\n    var x2 : Map[String, List[Int]] = groupKeyvalue(arg20)\n    var v2 : Map[String, List[Int]] = Map(\"\"\"yellow\"\"\" -> List(100, 300), \"\"\"blue\"\"\" -> List(200, 400), \"\"\"red\"\"\" -> List(100))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to group a sequence of key-value pairs into a dictionary of lists.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/175", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to verify validity of a string of parentheses.\n     *\n     * >>> isValidParenthese(\"(){}[]\")\n     * true\n     * >>> isValidParenthese(\"()[{)}\")\n     * false\n     * >>> isValidParenthese(\"()\")\n     * true\n     */\n    def isValidParenthese(str1 : String) : Boolean = {\n", "entry_point": "isValidParenthese", "test": "\n\n    var arg00 : String = \"\"\"(){}[]\"\"\"\n    var x0 : Boolean = isValidParenthese(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"()[{)}\"\"\"\n    var x1 : Boolean = isValidParenthese(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"()\"\"\"\n    var x2 : Boolean = isValidParenthese(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to verify validity of a string of parentheses.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/176", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the perimeter of a triangle.\n     *\n     * >>> perimeterTriangle(10, 20, 30)\n     * 60\n     * >>> perimeterTriangle(3, 4, 5)\n     * 12\n     * >>> perimeterTriangle(25, 35, 45)\n     * 105\n     */\n    def perimeterTriangle(a : Int, b : Int, c : Int) : Int = {\n", "entry_point": "perimeterTriangle", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 20\n    var arg02 : Int = 30\n    var x0 : Int = perimeterTriangle(arg00, arg01, arg02)\n    var v0 : Int = 60\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var arg11 : Int = 4\n    var arg12 : Int = 5\n    var x1 : Int = perimeterTriangle(arg10, arg11, arg12)\n    var v1 : Int = 12\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 25\n    var arg21 : Int = 35\n    var arg22 : Int = 45\n    var x2 : Int = perimeterTriangle(arg20, arg21, arg22)\n    var v2 : Int = 105\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the perimeter of a triangle.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/177", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find two distinct numbers such that their lcm lies within the given range.\n     *\n     * >>> answer(3, 8)\n     * List(3, 6)\n     * >>> answer(2, 6)\n     * List(2, 4)\n     * >>> answer(1, 3)\n     * List(1, 2)\n     */\n    def answer(l : Int, r : Int) : List[Int] = {\n", "entry_point": "answer", "test": "\n\n    var arg00 : Int = 3\n    var arg01 : Int = 8\n    var x0 : List[Int] = answer(arg00, arg01)\n    var v0 : List[Int] = List(3, 6)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var arg11 : Int = 6\n    var x1 : List[Int] = answer(arg10, arg11)\n    var v1 : List[Int] = List(2, 4)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = 3\n    var x2 : List[Int] = answer(arg20, arg21)\n    var v2 : List[Int] = List(1, 2)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find two distinct numbers such that their lcm lies within the given range.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/178", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to search some literals strings in a string.\n     *\n     * >>> stringLiterals(List(\"language\"), \"python language\")\n     * \"Matched!\"\n     * >>> stringLiterals(List(\"program\"), \"python language\")\n     * \"Not Matched!\"\n     * >>> stringLiterals(List(\"python\"), \"programming language\")\n     * \"Not Matched!\"\n     */\n    def stringLiterals(patterns : List[String], text : String) : String = {\n", "entry_point": "stringLiterals", "test": "\n\n    var arg00 : List[String] = List(\"\"\"language\"\"\")\n    var arg01 : String = \"\"\"python language\"\"\"\n    var x0 : String = stringLiterals(arg00, arg01)\n    var v0 : String = \"\"\"Matched!\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"program\"\"\")\n    var arg11 : String = \"\"\"python language\"\"\"\n    var x1 : String = stringLiterals(arg10, arg11)\n    var v1 : String = \"\"\"Not Matched!\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"python\"\"\")\n    var arg21 : String = \"\"\"programming language\"\"\"\n    var x2 : String = stringLiterals(arg20, arg21)\n    var v2 : String = \"\"\"Not Matched!\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to search some literals strings in a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/179", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find if the given number is a keith number or not.\n     *\n     * >>> isNumKeith(14)\n     * true\n     * >>> isNumKeith(12)\n     * false\n     * >>> isNumKeith(197)\n     * true\n     */\n    def isNumKeith(x : Int) : Boolean = {\n", "entry_point": "isNumKeith", "test": "\n\n    var arg00 : Int = 14\n    var x0 : Boolean = isNumKeith(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 12\n    var x1 : Boolean = isNumKeith(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 197\n    var x2 : Boolean = isNumKeith(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find if the given number is a keith number or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/180", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate distance between two points using latitude and longitude.\n     *\n     * >>> distanceLatLong(23.5, 67.5, 25.5, 69.5)\n     * 12179.372041317429\n     * >>> distanceLatLong(10.5, 20.5, 30.5, 40.5)\n     * 6069.397933300514\n     * >>> distanceLatLong(10, 20, 30, 40)\n     * 6783.751974994595\n     */\n    def distanceLatLong(slat : Double, slon : Double, elat : Double, elon : Double) : Double = {\n", "entry_point": "distanceLatLong", "test": "\n\n    var arg00 : Double = 23.5\n    var arg01 : Double = 67.5\n    var arg02 : Double = 25.5\n    var arg03 : Double = 69.5\n    var x0 : Double = distanceLatLong(arg00, arg01, arg02, arg03)\n    var v0 : Double = 12179.372041317429\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Double = 10.5\n    var arg11 : Double = 20.5\n    var arg12 : Double = 30.5\n    var arg13 : Double = 40.5\n    var x1 : Double = distanceLatLong(arg10, arg11, arg12, arg13)\n    var v1 : Double = 6069.397933300514\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Double = 10\n    var arg21 : Double = 20\n    var arg22 : Double = 30\n    var arg23 : Double = 40\n    var x2 : Double = distanceLatLong(arg20, arg21, arg22, arg23)\n    var v2 : Double = 6783.751974994595\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate distance between two points using latitude and longitude.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/181", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the longest common prefix in the given set of strings.\n     *\n     * >>> commonPrefix(List(\"tablets\", \"tables\", \"taxi\", \"tamarind\"), 4)\n     * \"ta\"\n     * >>> commonPrefix(List(\"apples\", \"ape\", \"april\"), 3)\n     * \"ap\"\n     * >>> commonPrefix(List(\"teens\", \"teenager\", \"teenmar\"), 3)\n     * \"teen\"\n     */\n    def commonPrefix(arr : List[String], n : Int) : String = {\n", "entry_point": "commonPrefix", "test": "\n\n    var arg00 : List[String] = List(\"\"\"tablets\"\"\", \"\"\"tables\"\"\", \"\"\"taxi\"\"\", \"\"\"tamarind\"\"\")\n    var arg01 : Int = 4\n    var x0 : String = commonPrefix(arg00, arg01)\n    var v0 : String = \"\"\"ta\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"apples\"\"\", \"\"\"ape\"\"\", \"\"\"april\"\"\")\n    var arg11 : Int = 3\n    var x1 : String = commonPrefix(arg10, arg11)\n    var v1 : String = \"\"\"ap\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"teens\"\"\", \"\"\"teenager\"\"\", \"\"\"teenmar\"\"\")\n    var arg21 : Int = 3\n    var x2 : String = commonPrefix(arg20, arg21)\n    var v2 : String = \"\"\"teen\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the longest common prefix in the given set of strings.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/182", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find uppercase, lowercase, special character and numeric values using regex.\n     *\n     * >>> findCharacter(\"ThisIsGeeksforGeeks\")\n     * List(List(\"T\", \"I\", \"G\", \"G\"), List(\"h\", \"i\", \"s\", \"s\", \"e\", \"e\", \"k\", \"s\", \"f\", \"o\", \"r\", \"e\", \"e\", \"k\", \"s\"), List(), List())\n     * >>> findCharacter(\"Hithere2\")\n     * List(List(\"H\"), List(\"i\", \"t\", \"h\", \"e\", \"r\", \"e\"), List(\"2\"), List())\n     * >>> findCharacter(\"HeyFolks32\")\n     * List(List(\"H\", \"F\"), List(\"e\", \"y\", \"o\", \"l\", \"k\", \"s\"), List(\"3\", \"2\"), List())\n     */\n    def findCharacter(string : String) : List[List[Any]] = {\n", "entry_point": "findCharacter", "test": "\n\n    var arg00 : String = \"\"\"ThisIsGeeksforGeeks\"\"\"\n    var x0 : List[List[Any]] = findCharacter(arg00)\n    var v0 : List[List[Any]] = List(List(\"\"\"T\"\"\", \"\"\"I\"\"\", \"\"\"G\"\"\", \"\"\"G\"\"\"), List(\"\"\"h\"\"\", \"\"\"i\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"e\"\"\", \"\"\"e\"\"\", \"\"\"k\"\"\", \"\"\"s\"\"\", \"\"\"f\"\"\", \"\"\"o\"\"\", \"\"\"r\"\"\", \"\"\"e\"\"\", \"\"\"e\"\"\", \"\"\"k\"\"\", \"\"\"s\"\"\"), List(), List())\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Hithere2\"\"\"\n    var x1 : List[List[Any]] = findCharacter(arg10)\n    var v1 : List[List[Any]] = List(List(\"\"\"H\"\"\"), List(\"\"\"i\"\"\", \"\"\"t\"\"\", \"\"\"h\"\"\", \"\"\"e\"\"\", \"\"\"r\"\"\", \"\"\"e\"\"\"), List(\"\"\"2\"\"\"), List())\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"HeyFolks32\"\"\"\n    var x2 : List[List[Any]] = findCharacter(arg20)\n    var v2 : List[List[Any]] = List(List(\"\"\"H\"\"\", \"\"\"F\"\"\"), List(\"\"\"e\"\"\", \"\"\"y\"\"\", \"\"\"o\"\"\", \"\"\"l\"\"\", \"\"\"k\"\"\", \"\"\"s\"\"\"), List(\"\"\"3\"\"\", \"\"\"2\"\"\"), List())\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find uppercase, lowercase, special character and numeric values using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/183", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count all the distinct pairs having a difference of k in any array.\n     *\n     * >>> countPairs(List(1, 5, 3, 4, 2), 5, 3)\n     * 2\n     * >>> countPairs(List(8, 12, 16, 4, 0, 20), 6, 4)\n     * 5\n     * >>> countPairs(List(2, 4, 1, 3, 4), 5, 2)\n     * 3\n     */\n    def countPairs(arr : List[Int], n : Int, k : Int) : Int = {\n", "entry_point": "countPairs", "test": "\n\n    var arg00 : List[Int] = List(1, 5, 3, 4, 2)\n    var arg01 : Int = 5\n    var arg02 : Int = 3\n    var x0 : Int = countPairs(arg00, arg01, arg02)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(8, 12, 16, 4, 0, 20)\n    var arg11 : Int = 6\n    var arg12 : Int = 4\n    var x1 : Int = countPairs(arg10, arg11, arg12)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 4, 1, 3, 4)\n    var arg21 : Int = 5\n    var arg22 : Int = 2\n    var x2 : Int = countPairs(arg20, arg21, arg22)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count all the distinct pairs having a difference of k in any array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/184", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find all the values in a list that are greater than a specified number.\n     *\n     * >>> greaterSpecificnum(List(220, 330, 500), 200)\n     * true\n     * >>> greaterSpecificnum(List(12, 17, 21), 20)\n     * false\n     * >>> greaterSpecificnum(List(1, 2, 3, 4), 10)\n     * false\n     */\n    def greaterSpecificnum(list : List[Int], num : Int) : Boolean = {\n", "entry_point": "greaterSpecificnum", "test": "\n\n    var arg00 : List[Int] = List(220, 330, 500)\n    var arg01 : Int = 200\n    var x0 : Boolean = greaterSpecificnum(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(12, 17, 21)\n    var arg11 : Int = 20\n    var x1 : Boolean = greaterSpecificnum(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4)\n    var arg21 : Int = 10\n    var x2 : Boolean = greaterSpecificnum(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find all the values in a list that are greater than a specified number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/185", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the focus of a parabola.\n     *\n     * >>> parabolaFocus(5, 3, 2)\n     * List(-0.3, 1.6)\n     * >>> parabolaFocus(9, 8, 4)\n     * List(-0.4444444444444444, 2.25)\n     * >>> parabolaFocus(2, 4, 6)\n     * List(-1.0, 4.125)\n     */\n    def parabolaFocus(a : Int, b : Int, c : Int) : List[Double] = {\n", "entry_point": "parabolaFocus", "test": "\n\n    var arg00 : Int = 5\n    var arg01 : Int = 3\n    var arg02 : Int = 2\n    var x0 : List[Double] = parabolaFocus(arg00, arg01, arg02)\n    var v0 : List[Double] = List(-0.3, 1.6)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 9\n    var arg11 : Int = 8\n    var arg12 : Int = 4\n    var x1 : List[Double] = parabolaFocus(arg10, arg11, arg12)\n    var v1 : List[Double] = List(-0.4444444444444444, 2.25)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var arg21 : Int = 4\n    var arg22 : Int = 6\n    var x2 : List[Double] = parabolaFocus(arg20, arg21, arg22)\n    var v2 : List[Double] = List(-1.0, 4.125)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the focus of a parabola.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/186", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to search some literals strings in a string by using regex.\n     *\n     * >>> checkLiterals(\"The quick brown fox jumps over the lazy dog.\", List(\"fox\"))\n     * \"Matched!\"\n     * >>> checkLiterals(\"The quick brown fox jumps over the lazy dog.\", List(\"horse\"))\n     * \"Not Matched!\"\n     * >>> checkLiterals(\"The quick brown fox jumps over the lazy dog.\", List(\"lazy\"))\n     * \"Matched!\"\n     */\n    def checkLiterals(text : String, patterns : List[String]) : String = {\n", "entry_point": "checkLiterals", "test": "\n\n    var arg00 : String = \"\"\"The quick brown fox jumps over the lazy dog.\"\"\"\n    var arg01 : List[String] = List(\"\"\"fox\"\"\")\n    var x0 : String = checkLiterals(arg00, arg01)\n    var v0 : String = \"\"\"Matched!\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"The quick brown fox jumps over the lazy dog.\"\"\"\n    var arg11 : List[String] = List(\"\"\"horse\"\"\")\n    var x1 : String = checkLiterals(arg10, arg11)\n    var v1 : String = \"\"\"Not Matched!\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"The quick brown fox jumps over the lazy dog.\"\"\"\n    var arg21 : List[String] = List(\"\"\"lazy\"\"\")\n    var x2 : String = checkLiterals(arg20, arg21)\n    var v2 : String = \"\"\"Matched!\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to search some literals strings in a string by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/187", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the longest common subsequence for the given two sequences.\n     *\n     * >>> longestCommonSubsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7)\n     * 4\n     * >>> longestCommonSubsequence(\"ABCDGH\", \"AEDFHR\", 6, 6)\n     * 3\n     * >>> longestCommonSubsequence(\"AXYT\", \"AYZX\", 4, 4)\n     * 2\n     */\n    def longestCommonSubsequence(x : String, y : String, m : Int, n : Int) : Int = {\n", "entry_point": "longestCommonSubsequence", "test": "\n\n    var arg00 : String = \"\"\"AGGTAB\"\"\"\n    var arg01 : String = \"\"\"GXTXAYB\"\"\"\n    var arg02 : Int = 6\n    var arg03 : Int = 7\n    var x0 : Int = longestCommonSubsequence(arg00, arg01, arg02, arg03)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"ABCDGH\"\"\"\n    var arg11 : String = \"\"\"AEDFHR\"\"\"\n    var arg12 : Int = 6\n    var arg13 : Int = 6\n    var x1 : Int = longestCommonSubsequence(arg10, arg11, arg12, arg13)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"AXYT\"\"\"\n    var arg21 : String = \"\"\"AYZX\"\"\"\n    var arg22 : Int = 4\n    var arg23 : Int = 4\n    var x2 : Int = longestCommonSubsequence(arg20, arg21, arg22, arg23)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the longest common subsequence for the given two sequences.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/188", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the given number can be represented by product of two squares or not.\n     *\n     * >>> prodSquare(25)\n     * false\n     * >>> prodSquare(30)\n     * false\n     * >>> prodSquare(16)\n     * true\n     */\n    def prodSquare(n : Int) : Boolean = {\n", "entry_point": "prodSquare", "test": "\n\n    var arg00 : Int = 25\n    var x0 : Boolean = prodSquare(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 30\n    var x1 : Boolean = prodSquare(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 16\n    var x2 : Boolean = prodSquare(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the given number can be represented by product of two squares or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/189", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the first missing positive number.\n     *\n     * >>> firstMissingPositive(List(1, 2, 3, -1, 5), 5)\n     * 4\n     * >>> firstMissingPositive(List(0, -1, -2, 1, 5, 8), 6)\n     * 2\n     * >>> firstMissingPositive(List(0, 1, 2, 5, -8), 5)\n     * 3\n     */\n    def firstMissingPositive(arr : List[Int], n : Int) : Int = {\n", "entry_point": "firstMissingPositive", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, -1, 5)\n    var arg01 : Int = 5\n    var x0 : Int = firstMissingPositive(arg00, arg01)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(0, -1, -2, 1, 5, 8)\n    var arg11 : Int = 6\n    var x1 : Int = firstMissingPositive(arg10, arg11)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(0, 1, 2, 5, -8)\n    var arg21 : Int = 5\n    var x2 : Int = firstMissingPositive(arg20, arg21)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the first missing positive number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/190", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the number of integral co-ordinates that lie inside a square.\n     *\n     * >>> countIntgralPoints(1, 1, 4, 4)\n     * 4\n     * >>> countIntgralPoints(1, 2, 1, 2)\n     * 1\n     * >>> countIntgralPoints(4, 2, 6, 4)\n     * 1\n     */\n    def countIntgralPoints(x1 : Int, y1 : Int, x2 : Int, y2 : Int) : Int = {\n", "entry_point": "countIntgralPoints", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = 1\n    var arg02 : Int = 4\n    var arg03 : Int = 4\n    var x0 : Int = countIntgralPoints(arg00, arg01, arg02, arg03)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var arg11 : Int = 2\n    var arg12 : Int = 1\n    var arg13 : Int = 2\n    var x1 : Int = countIntgralPoints(arg10, arg11, arg12, arg13)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var arg21 : Int = 2\n    var arg22 : Int = 6\n    var arg23 : Int = 4\n    var x2 : Int = countIntgralPoints(arg20, arg21, arg22, arg23)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the number of integral co-ordinates that lie inside a square.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/191", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether the given month name contains 30 days or not.\n     *\n     * >>> checkMonthnumber(\"February\")\n     * false\n     * >>> checkMonthnumber(\"June\")\n     * true\n     * >>> checkMonthnumber(\"April\")\n     * true\n     */\n    def checkMonthnumber(monthname3 : String) : Boolean = {\n", "entry_point": "checkMonthnumber", "test": "\n\n    var arg00 : String = \"\"\"February\"\"\"\n    var x0 : Boolean = checkMonthnumber(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"June\"\"\"\n    var x1 : Boolean = checkMonthnumber(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"April\"\"\"\n    var x2 : Boolean = checkMonthnumber(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether the given month name contains 30 days or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/192", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether a string has atleast one letter and one number.\n     *\n     * >>> checkString(\"thishasboth29\")\n     * true\n     * >>> checkString(\"python\")\n     * false\n     */\n    def checkString(str : String) : Boolean = {\n", "entry_point": "checkString", "test": "\n\n    var arg00 : String = \"\"\"thishasboth29\"\"\"\n    var x0 : Boolean = checkString(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"python\"\"\"\n    var x1 : Boolean = checkString(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n\n}\n", "description": "Write a Scala function to check whether a string has atleast one letter and one number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/193", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove the duplicates from the given tuple.\n     *\n     * >>> removeTuple(List(1, 3, 5, 2, 3, 5, 1, 1, 3))\n     * List(1, 2, 3, 5)\n     * >>> removeTuple(List(2, 3, 4, 4, 5, 6, 6, 7, 8, 8))\n     * List(2, 3, 4, 5, 6, 7, 8)\n     * >>> removeTuple(List(11, 12, 13, 11, 11, 12, 14, 13))\n     * List(11, 12, 13, 14)\n     */\n    def removeTuple(testTup : List[Int]) : List[Int] = {\n", "entry_point": "removeTuple", "test": "\n\n    var arg00 : List[Int] = List(1, 3, 5, 2, 3, 5, 1, 1, 3)\n    var x0 : List[Int] = removeTuple(arg00)\n    var v0 : List[Int] = List(1, 2, 3, 5)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 3, 4, 4, 5, 6, 6, 7, 8, 8)\n    var x1 : List[Int] = removeTuple(arg10)\n    var v1 : List[Int] = List(2, 3, 4, 5, 6, 7, 8)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(11, 12, 13, 11, 11, 12, 14, 13)\n    var x2 : List[Int] = removeTuple(arg20)\n    var v2 : List[Int] = List(11, 12, 13, 14)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove the duplicates from the given tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/194", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to convert octal number to decimal number.\n     *\n     * >>> octalToDecimal(25)\n     * 21\n     * >>> octalToDecimal(30)\n     * 24\n     * >>> octalToDecimal(40)\n     * 32\n     */\n    def octalToDecimal(n : Int) : Int = {\n", "entry_point": "octalToDecimal", "test": "\n\n    var arg00 : Int = 25\n    var x0 : Int = octalToDecimal(arg00)\n    var v0 : Int = 21\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 30\n    var x1 : Int = octalToDecimal(arg10)\n    var v1 : Int = 24\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 40\n    var x2 : Int = octalToDecimal(arg20)\n    var v2 : Int = 32\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to convert octal number to decimal number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/195", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the first position of an element in a sorted array.\n     *\n     * >>> first(List(1, 2, 3, 4, 5, 6, 6), 6, 6)\n     * 5\n     * >>> first(List(1, 2, 2, 2, 3, 2, 2, 4, 2), 2, 9)\n     * 1\n     * >>> first(List(1, 2, 3), 1, 3)\n     * 0\n     */\n    def first(arr : List[Int], x : Int, n : Int) : Int = {\n", "entry_point": "first", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5, 6, 6)\n    var arg01 : Int = 6\n    var arg02 : Int = 6\n    var x0 : Int = first(arg00, arg01, arg02)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 2, 2, 3, 2, 2, 4, 2)\n    var arg11 : Int = 2\n    var arg12 : Int = 9\n    var x1 : Int = first(arg10, arg11, arg12)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3)\n    var arg21 : Int = 1\n    var arg22 : Int = 3\n    var x2 : Int = first(arg20, arg21, arg22)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the first position of an element in a sorted array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/196", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove all the tuples with length k.\n     *\n     * >>> removeTuples(List(List(4, 5), List(4), List(8, 6, 7), List(1), List(3, 4, 6, 7)), 1)\n     * List(List(4, 5), List(8, 6, 7), List(3, 4, 6, 7))\n     * >>> removeTuples(List(List(4, 5), List(4, 5), List(6, 7), List(1, 2, 3), List(3, 4, 6, 7)), 2)\n     * List(List(1, 2, 3), List(3, 4, 6, 7))\n     * >>> removeTuples(List(List(1, 4, 4), List(4, 3), List(8, 6, 7), List(1), List(3, 6, 7)), 3)\n     * List(List(4, 3), List(1))\n     */\n    def removeTuples(testList : List[List[Int]], k : Int) : List[List[Int]] = {\n", "entry_point": "removeTuples", "test": "\n\n    var arg00 : List[List[Int]] = List(List(4, 5), List(4), List(8, 6, 7), List(1), List(3, 4, 6, 7))\n    var arg01 : Int = 1\n    var x0 : List[List[Int]] = removeTuples(arg00, arg01)\n    var v0 : List[List[Int]] = List(List(4, 5), List(8, 6, 7), List(3, 4, 6, 7))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(4, 5), List(4, 5), List(6, 7), List(1, 2, 3), List(3, 4, 6, 7))\n    var arg11 : Int = 2\n    var x1 : List[List[Int]] = removeTuples(arg10, arg11)\n    var v1 : List[List[Int]] = List(List(1, 2, 3), List(3, 4, 6, 7))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(1, 4, 4), List(4, 3), List(8, 6, 7), List(1), List(3, 6, 7))\n    var arg21 : Int = 3\n    var x2 : List[List[Int]] = removeTuples(arg20, arg21)\n    var v2 : List[List[Int]] = List(List(4, 3), List(1))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove all the tuples with length k.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/197", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to perform the exponentiation of the given two tuples.\n     *\n     * >>> findExponentio(List(10, 4, 5, 6), List(5, 6, 7, 5))\n     * List(100000, 4096, 78125, 7776)\n     * >>> findExponentio(List(11, 5, 6, 7), List(6, 7, 8, 6))\n     * List(1771561, 78125, 1679616, 117649)\n     * >>> findExponentio(List(12, 6, 7, 8), List(7, 8, 9, 7))\n     * List(35831808, 1679616, 40353607, 2097152)\n     */\n    def findExponentio(testTup1 : List[Int], testTup2 : List[Int]) : List[Int] = {\n", "entry_point": "findExponentio", "test": "\n\n    var arg00 : List[Int] = List(10, 4, 5, 6)\n    var arg01 : List[Int] = List(5, 6, 7, 5)\n    var x0 : List[Int] = findExponentio(arg00, arg01)\n    var v0 : List[Int] = List(100000, 4096, 78125, 7776)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(11, 5, 6, 7)\n    var arg11 : List[Int] = List(6, 7, 8, 6)\n    var x1 : List[Int] = findExponentio(arg10, arg11)\n    var v1 : List[Int] = List(1771561, 78125, 1679616, 117649)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(12, 6, 7, 8)\n    var arg21 : List[Int] = List(7, 8, 9, 7)\n    var x2 : List[Int] = findExponentio(arg20, arg21)\n    var v2 : List[Int] = List(35831808, 1679616, 40353607, 2097152)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to perform the exponentiation of the given two tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/198", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the largest triangle that can be inscribed in an ellipse.\n     *\n     * >>> largestTriangle(4, 2)\n     * 10.392304845413264\n     * >>> largestTriangle(5, 7)\n     * 4.639421805988064\n     * >>> largestTriangle(9, 1)\n     * 105.2220865598093\n     */\n    def largestTriangle(a : Int, b : Int) : Double = {\n", "entry_point": "largestTriangle", "test": "\n\n    var arg00 : Int = 4\n    var arg01 : Int = 2\n    var x0 : Double = largestTriangle(arg00, arg01)\n    var v0 : Double = 10.392304845413264\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var arg11 : Int = 7\n    var x1 : Double = largestTriangle(arg10, arg11)\n    var v1 : Double = 4.639421805988064\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 9\n    var arg21 : Int = 1\n    var x2 : Double = largestTriangle(arg20, arg21)\n    var v2 : Double = 105.2220865598093\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the largest triangle that can be inscribed in an ellipse.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/199", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find highest power of 2 less than or equal to given number.\n     *\n     * >>> highestPowerOf2(10)\n     * 8\n     * >>> highestPowerOf2(19)\n     * 16\n     * >>> highestPowerOf2(32)\n     * 32\n     */\n    def highestPowerOf2(n : Int) : Int = {\n", "entry_point": "highestPowerOf2", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = highestPowerOf2(arg00)\n    var v0 : Int = 8\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 19\n    var x1 : Int = highestPowerOf2(arg10)\n    var v1 : Int = 16\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 32\n    var x2 : Int = highestPowerOf2(arg20)\n    var v2 : Int = 32\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find highest power of 2 less than or equal to given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/200", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find all index positions of the maximum values in a given list.\n     *\n     * >>> positionMax(List(12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54))\n     * List(7)\n     * >>> positionMax(List(1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5))\n     * List(7, 8, 9, 10)\n     * >>> positionMax(List(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12))\n     * List(11)\n     */\n    def positionMax(list1 : List[Int]) : List[Int] = {\n", "entry_point": "positionMax", "test": "\n\n    var arg00 : List[Int] = List(12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54)\n    var x0 : List[Int] = positionMax(arg00)\n    var v0 : List[Int] = List(7)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5)\n    var x1 : List[Int] = positionMax(arg10)\n    var v1 : List[Int] = List(7, 8, 9, 10)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12)\n    var x2 : List[Int] = positionMax(arg20)\n    var v2 : List[Int] = List(11)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find all index positions of the maximum values in a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/201", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the elements in a list are same or not.\n     *\n     * >>> chklist(List(\"one\", \"one\", \"one\"))\n     * true\n     * >>> chklist(List(\"one\", \"Two\", \"Three\"))\n     * false\n     * >>> chklist(List(\"bigdata\", \"python\", \"Django\"))\n     * false\n     */\n    def chklist(lst : List[String]) : Boolean = {\n", "entry_point": "chklist", "test": "\n\n    var arg00 : List[String] = List(\"\"\"one\"\"\", \"\"\"one\"\"\", \"\"\"one\"\"\")\n    var x0 : Boolean = chklist(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"one\"\"\", \"\"\"Two\"\"\", \"\"\"Three\"\"\")\n    var x1 : Boolean = chklist(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"bigdata\"\"\", \"\"\"python\"\"\", \"\"\"Django\"\"\")\n    var x2 : Boolean = chklist(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the elements in a list are same or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/202", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove even characters in a string.\n     *\n     * >>> removeEven(\"python\")\n     * \"pto\"\n     * >>> removeEven(\"program\")\n     * \"porm\"\n     * >>> removeEven(\"language\")\n     * \"lnug\"\n     */\n    def removeEven(str1 : String) : String = {\n", "entry_point": "removeEven", "test": "\n\n    var arg00 : String = \"\"\"python\"\"\"\n    var x0 : String = removeEven(arg00)\n    var v0 : String = \"\"\"pto\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"program\"\"\"\n    var x1 : String = removeEven(arg10)\n    var v1 : String = \"\"\"porm\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"language\"\"\"\n    var x2 : String = removeEven(arg20)\n    var v2 : String = \"\"\"lnug\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove even characters in a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/203", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the hamming distance between given two integers.\n     *\n     * >>> hammingDistance(4, 8)\n     * 2\n     * >>> hammingDistance(2, 4)\n     * 2\n     * >>> hammingDistance(1, 2)\n     * 2\n     */\n    def hammingDistance(n1 : Int, n2 : Int) : Int = {\n", "entry_point": "hammingDistance", "test": "\n\n    var arg00 : Int = 4\n    var arg01 : Int = 8\n    var x0 : Int = hammingDistance(arg00, arg01)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var arg11 : Int = 4\n    var x1 : Int = hammingDistance(arg10, arg11)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = 2\n    var x2 : Int = hammingDistance(arg20, arg21)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the hamming distance between given two integers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/204", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the occurrence of a given character in a string.\n     *\n     * >>> count(\"abcc\", \"c\")\n     * 2\n     * >>> count(\"ababca\", \"a\")\n     * 3\n     * >>> count(\"mnmm0pm\", \"m\")\n     * 4\n     */\n    def count(s : String, c : String) : Int = {\n", "entry_point": "count", "test": "\n\n    var arg00 : String = \"\"\"abcc\"\"\"\n    var arg01 : String = \"\"\"c\"\"\"\n    var x0 : Int = count(arg00, arg01)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"ababca\"\"\"\n    var arg11 : String = \"\"\"a\"\"\"\n    var x1 : Int = count(arg10, arg11)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"mnmm0pm\"\"\"\n    var arg21 : String = \"\"\"m\"\"\"\n    var x2 : Int = count(arg20, arg21)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the occurrence of a given character in a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/205", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the inversions of tuple elements in the given tuple list.\n     *\n     * >>> inversionElements(List(7, 8, 9, 1, 10, 7))\n     * List(-8, -9, -10, -2, -11, -8)\n     * >>> inversionElements(List(2, 4, 5, 6, 1, 7))\n     * List(-3, -5, -6, -7, -2, -8)\n     * >>> inversionElements(List(8, 9, 11, 14, 12, 13))\n     * List(-9, -10, -12, -15, -13, -14)\n     */\n    def inversionElements(testTup : List[Int]) : List[Int] = {\n", "entry_point": "inversionElements", "test": "\n\n    var arg00 : List[Int] = List(7, 8, 9, 1, 10, 7)\n    var x0 : List[Int] = inversionElements(arg00)\n    var v0 : List[Int] = List(-8, -9, -10, -2, -11, -8)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 4, 5, 6, 1, 7)\n    var x1 : List[Int] = inversionElements(arg10)\n    var v1 : List[Int] = List(-3, -5, -6, -7, -2, -8)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(8, 9, 11, 14, 12, 13)\n    var x2 : List[Int] = inversionElements(arg20)\n    var v2 : List[Int] = List(-9, -10, -12, -15, -13, -14)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the inversions of tuple elements in the given tuple list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/206", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to perform the adjacent element concatenation in the given tuples.\n     *\n     * >>> concatenateElements(List(\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"))\n     * List(\"DSP IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL UTS\")\n     * >>> concatenateElements(List(\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"))\n     * List(\"RES IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL QESR\")\n     * >>> concatenateElements(List(\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"))\n     * List(\"MSAMIS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL SKD\")\n     */\n    def concatenateElements(testTup : List[String]) : List[String] = {\n", "entry_point": "concatenateElements", "test": "\n\n    var arg00 : List[String] = List(\"\"\"DSP \"\"\", \"\"\"IS \"\"\", \"\"\"BEST \"\"\", \"\"\"FOR \"\"\", \"\"\"ALL \"\"\", \"\"\"UTS\"\"\")\n    var x0 : List[String] = concatenateElements(arg00)\n    var v0 : List[String] = List(\"\"\"DSP IS \"\"\", \"\"\"IS BEST \"\"\", \"\"\"BEST FOR \"\"\", \"\"\"FOR ALL \"\"\", \"\"\"ALL UTS\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"RES \"\"\", \"\"\"IS \"\"\", \"\"\"BEST \"\"\", \"\"\"FOR \"\"\", \"\"\"ALL \"\"\", \"\"\"QESR\"\"\")\n    var x1 : List[String] = concatenateElements(arg10)\n    var v1 : List[String] = List(\"\"\"RES IS \"\"\", \"\"\"IS BEST \"\"\", \"\"\"BEST FOR \"\"\", \"\"\"FOR ALL \"\"\", \"\"\"ALL QESR\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"MSAM\"\"\", \"\"\"IS \"\"\", \"\"\"BEST \"\"\", \"\"\"FOR \"\"\", \"\"\"ALL \"\"\", \"\"\"SKD\"\"\")\n    var x2 : List[String] = concatenateElements(arg20)\n    var v2 : List[String] = List(\"\"\"MSAMIS \"\"\", \"\"\"IS BEST \"\"\", \"\"\"BEST FOR \"\"\", \"\"\"FOR ALL \"\"\", \"\"\"ALL SKD\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to perform the adjacent element concatenation in the given tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/207", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n     *\n     * >>> findLongestRepeatingSubseq(\"AABEBCDD\")\n     * 3\n     * >>> findLongestRepeatingSubseq(\"aabb\")\n     * 2\n     * >>> findLongestRepeatingSubseq(\"aab\")\n     * 1\n     */\n    def findLongestRepeatingSubseq(str : String) : Int = {\n", "entry_point": "findLongestRepeatingSubseq", "test": "\n\n    var arg00 : String = \"\"\"AABEBCDD\"\"\"\n    var x0 : Int = findLongestRepeatingSubseq(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"aabb\"\"\"\n    var x1 : Int = findLongestRepeatingSubseq(arg10)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"aab\"\"\"\n    var x2 : Int = findLongestRepeatingSubseq(arg20)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/208", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check the given decimal with a precision of 2 by using regex.\n     *\n     * >>> isDecimal(\"123.11\")\n     * true\n     * >>> isDecimal(\"0.21\")\n     * true\n     * >>> isDecimal(\"123.1214\")\n     * false\n     */\n    def isDecimal(num : String) : Boolean = {\n", "entry_point": "isDecimal", "test": "\n\n    var arg00 : String = \"\"\"123.11\"\"\"\n    var x0 : Boolean = isDecimal(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"0.21\"\"\"\n    var x1 : Boolean = isDecimal(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"123.1214\"\"\"\n    var x2 : Boolean = isDecimal(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check the given decimal with a precision of 2 by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/209", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to delete the smallest element from the given heap and then insert a new item.\n     *\n     * >>> heapReplace(List(25, 44, 68, 21, 39, 23, 89), 21)\n     * List(21, 25, 23, 44, 39, 68, 89)\n     * >>> heapReplace(List(25, 44, 68, 21, 39, 23, 89), 110)\n     * List(23, 25, 68, 44, 39, 110, 89)\n     * >>> heapReplace(List(25, 44, 68, 21, 39, 23, 89), 500)\n     * List(23, 25, 68, 44, 39, 500, 89)\n     */\n    def heapReplace(heap : List[Int], a : Int) : List[Int] = {\n", "entry_point": "heapReplace", "test": "\n\n    var arg00 : List[Int] = List(25, 44, 68, 21, 39, 23, 89)\n    var arg01 : Int = 21\n    var x0 : List[Int] = heapReplace(arg00, arg01)\n    var v0 : List[Int] = List(21, 25, 23, 44, 39, 68, 89)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(25, 44, 68, 21, 39, 23, 89)\n    var arg11 : Int = 110\n    var x1 : List[Int] = heapReplace(arg10, arg11)\n    var v1 : List[Int] = List(23, 25, 68, 44, 39, 110, 89)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(25, 44, 68, 21, 39, 23, 89)\n    var arg21 : Int = 500\n    var x2 : List[Int] = heapReplace(arg20, arg21)\n    var v2 : List[Int] = List(23, 25, 68, 44, 39, 500, 89)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to delete the smallest element from the given heap and then insert a new item.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/210", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n     *\n     * >>> isAllowedSpecificChar(\"ABCDEFabcdef123450\")\n     * true\n     * >>> isAllowedSpecificChar(\"*&%@#!}{\")\n     * false\n     * >>> isAllowedSpecificChar(\"HELLOhowareyou98765\")\n     * true\n     */\n    def isAllowedSpecificChar(string : String) : Boolean = {\n", "entry_point": "isAllowedSpecificChar", "test": "\n\n    var arg00 : String = \"\"\"ABCDEFabcdef123450\"\"\"\n    var x0 : Boolean = isAllowedSpecificChar(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"*&%@#!}{\"\"\"\n    var x1 : Boolean = isAllowedSpecificChar(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"HELLOhowareyou98765\"\"\"\n    var x2 : Boolean = isAllowedSpecificChar(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/211", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count numbers whose oth and nth bits are set.\n     *\n     * >>> countNum(2)\n     * 1\n     * >>> countNum(3)\n     * 2\n     * >>> countNum(1)\n     * 1\n     */\n    def countNum(n : Int) : Int = {\n", "entry_point": "countNum", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = countNum(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var x1 : Int = countNum(arg10)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var x2 : Int = countNum(arg20)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count numbers whose oth and nth bits are set.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/212", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of fourth power of n natural numbers.\n     *\n     * >>> fourthPowerSum(2)\n     * 17\n     * >>> fourthPowerSum(4)\n     * 354\n     * >>> fourthPowerSum(6)\n     * 2275\n     */\n    def fourthPowerSum(n : Int) : Int = {\n", "entry_point": "fourthPowerSum", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = fourthPowerSum(arg00)\n    var v0 : Int = 17\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var x1 : Int = fourthPowerSum(arg10)\n    var v1 : Int = 354\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 6\n    var x2 : Int = fourthPowerSum(arg20)\n    var v2 : Int = 2275\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of fourth power of n natural numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/213", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to perform the concatenation of two string tuples.\n     *\n     * >>> concatenateStrings(List(\"Manjeet\", \"Nikhil\", \"Akshat\"), List(\" Singh\", \" Meherwal\", \" Garg\"))\n     * List(\"Manjeet Singh\", \"Nikhil Meherwal\", \"Akshat Garg\")\n     * >>> concatenateStrings(List(\"Shaik\", \"Ayesha\", \"Sanya\"), List(\" Dawood\", \" Begum\", \" Singh\"))\n     * List(\"Shaik Dawood\", \"Ayesha Begum\", \"Sanya Singh\")\n     * >>> concatenateStrings(List(\"Harpreet\", \"Priyanka\", \"Muskan\"), List(\"Kour\", \" Agarwal\", \"Sethi\"))\n     * List(\"HarpreetKour\", \"Priyanka Agarwal\", \"MuskanSethi\")\n     */\n    def concatenateStrings(testTup1 : List[String], testTup2 : List[String]) : List[String] = {\n", "entry_point": "concatenateStrings", "test": "\n\n    var arg00 : List[String] = List(\"\"\"Manjeet\"\"\", \"\"\"Nikhil\"\"\", \"\"\"Akshat\"\"\")\n    var arg01 : List[String] = List(\"\"\" Singh\"\"\", \"\"\" Meherwal\"\"\", \"\"\" Garg\"\"\")\n    var x0 : List[String] = concatenateStrings(arg00, arg01)\n    var v0 : List[String] = List(\"\"\"Manjeet Singh\"\"\", \"\"\"Nikhil Meherwal\"\"\", \"\"\"Akshat Garg\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"Shaik\"\"\", \"\"\"Ayesha\"\"\", \"\"\"Sanya\"\"\")\n    var arg11 : List[String] = List(\"\"\" Dawood\"\"\", \"\"\" Begum\"\"\", \"\"\" Singh\"\"\")\n    var x1 : List[String] = concatenateStrings(arg10, arg11)\n    var v1 : List[String] = List(\"\"\"Shaik Dawood\"\"\", \"\"\"Ayesha Begum\"\"\", \"\"\"Sanya Singh\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"Harpreet\"\"\", \"\"\"Priyanka\"\"\", \"\"\"Muskan\"\"\")\n    var arg21 : List[String] = List(\"\"\"Kour\"\"\", \"\"\" Agarwal\"\"\", \"\"\"Sethi\"\"\")\n    var x2 : List[String] = concatenateStrings(arg20, arg21)\n    var v2 : List[String] = List(\"\"\"HarpreetKour\"\"\", \"\"\"Priyanka Agarwal\"\"\", \"\"\"MuskanSethi\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to perform the concatenation of two string tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/214", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert radians to degrees.\n     *\n     * >>> degreeRadian(90)\n     * 5156.620156177409\n     * >>> degreeRadian(60)\n     * 3437.746770784939\n     * >>> degreeRadian(120)\n     * 6875.493541569878\n     */\n    def degreeRadian(radian : Int) : Double = {\n", "entry_point": "degreeRadian", "test": "\n\n    var arg00 : Int = 90\n    var x0 : Double = degreeRadian(arg00)\n    var v0 : Double = 5156.620156177409\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 60\n    var x1 : Double = degreeRadian(arg10)\n    var v1 : Double = 3437.746770784939\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 120\n    var x2 : Double = degreeRadian(arg20)\n    var v2 : Double = 6875.493541569878\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert radians to degrees.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/215", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to decode a run-length encoded given list.\n     *\n     * >>> decodeList(List(List(2, 1), 2, 3, List(2, 4), 5, 1))\n     * List(1, 1, 2, 3, 4, 4, 5, 1)\n     * >>> decodeList(List(\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", List(2, \"l\"), \"y\"))\n     * List(\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", \"l\", \"l\", \"y\")\n     * >>> decodeList(List(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))\n     * List(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\")\n     */\n    def decodeList(alist : List[Any]) : List[Any] = {\n", "entry_point": "decodeList", "test": "\n\n    var arg00 : List[Any] = List(List(2, 1), 2, 3, List(2, 4), 5, 1)\n    var x0 : List[Any] = decodeList(arg00)\n    var v0 : List[Any] = List(1, 1, 2, 3, 4, 4, 5, 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(\"\"\"a\"\"\", \"\"\"u\"\"\", \"\"\"t\"\"\", \"\"\"o\"\"\", \"\"\"m\"\"\", \"\"\"a\"\"\", \"\"\"t\"\"\", \"\"\"i\"\"\", \"\"\"c\"\"\", \"\"\"a\"\"\", List(2, \"\"\"l\"\"\"), \"\"\"y\"\"\")\n    var x1 : List[Any] = decodeList(arg10)\n    var v1 : List[Any] = List(\"\"\"a\"\"\", \"\"\"u\"\"\", \"\"\"t\"\"\", \"\"\"o\"\"\", \"\"\"m\"\"\", \"\"\"a\"\"\", \"\"\"t\"\"\", \"\"\"i\"\"\", \"\"\"c\"\"\", \"\"\"a\"\"\", \"\"\"l\"\"\", \"\"\"l\"\"\", \"\"\"y\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(\"\"\"p\"\"\", \"\"\"y\"\"\", \"\"\"t\"\"\", \"\"\"h\"\"\", \"\"\"o\"\"\", \"\"\"n\"\"\")\n    var x2 : List[Any] = decodeList(arg20)\n    var v2 : List[Any] = List(\"\"\"p\"\"\", \"\"\"y\"\"\", \"\"\"t\"\"\", \"\"\"h\"\"\", \"\"\"o\"\"\", \"\"\"n\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to decode a run-length encoded given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/216", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if a nested list is a subset of another nested list.\n     *\n     * >>> checkSubsetList(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), List(List(12, 18, 23, 25, 45), List(7, 11, 19, 24, 28), List(1, 5, 8, 18, 15, 16)))\n     * false\n     * >>> checkSubsetList(List(List(2, 3, 1), List(4, 5), List(6, 8)), List(List(4, 5), List(6, 8)))\n     * true\n     * >>> checkSubsetList(List(List(\"a\", \"b\"), List(\"e\"), List(\"c\", \"d\")), List(List(\"g\")))\n     * false\n     */\n    def checkSubsetList(list1 : List[Any], list2 : List[List[Any]]) : Boolean = {\n", "entry_point": "checkSubsetList", "test": "\n\n    var arg00 : List[Any] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)\n    var arg01 : List[List[Any]] = List(List(12, 18, 23, 25, 45), List(7, 11, 19, 24, 28), List(1, 5, 8, 18, 15, 16))\n    var x0 : Boolean = checkSubsetList(arg00, arg01)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(List(2, 3, 1), List(4, 5), List(6, 8))\n    var arg11 : List[List[Any]] = List(List(4, 5), List(6, 8))\n    var x1 : Boolean = checkSubsetList(arg10, arg11)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(List(\"\"\"a\"\"\", \"\"\"b\"\"\"), List(\"\"\"e\"\"\"), List(\"\"\"c\"\"\", \"\"\"d\"\"\"))\n    var arg21 : List[List[Any]] = List(List(\"\"\"g\"\"\"))\n    var x2 : Boolean = checkSubsetList(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if a nested list is a subset of another nested list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/217", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the first repeated character in a given string.\n     *\n     * >>> firstRepeatedChar(\"Google\")\n     * \"o\"\n     * >>> firstRepeatedChar(\"data\")\n     * \"a\"\n     * >>> firstRepeatedChar(\"python\")\n     * \"\\x00\"\n     */\n    def firstRepeatedChar(str : String) : String = {\n", "entry_point": "firstRepeatedChar", "test": "\n\n    var arg00 : String = \"\"\"Google\"\"\"\n    var x0 : String = firstRepeatedChar(arg00)\n    var v0 : String = \"\"\"o\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"data\"\"\"\n    var x1 : String = firstRepeatedChar(arg10)\n    var v1 : String = \"\"\"a\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"python\"\"\"\n    var x2 : String = firstRepeatedChar(arg20)\n    var v2 : String = \"\"\"\\x00\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the first repeated character in a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/218", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the minimum operations required to make two numbers equal.\n     *\n     * >>> minOperations(2, 4)\n     * 1\n     * >>> minOperations(4, 10)\n     * 4\n     * >>> minOperations(1, 4)\n     * 3\n     */\n    def minOperations(a : Int, b : Int) : Int = {\n", "entry_point": "minOperations", "test": "\n\n    var arg00 : Int = 2\n    var arg01 : Int = 4\n    var x0 : Int = minOperations(arg00, arg01)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var arg11 : Int = 10\n    var x1 : Int = minOperations(arg10, arg11)\n    var v1 : Int = 4\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = 4\n    var x2 : Int = minOperations(arg20, arg21)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the minimum operations required to make two numbers equal.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/219", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract maximum and minimum k elements in the given tuple.\n     *\n     * >>> extractMinMax(List(5, 20, 3, 7, 6, 8), 2)\n     * List(3, 5, 8, 20)\n     * >>> extractMinMax(List(4, 5, 6, 1, 2, 7), 3)\n     * List(1, 2, 4, 5, 6, 7)\n     * >>> extractMinMax(List(2, 3, 4, 8, 9, 11, 7), 4)\n     * List(2, 3, 4, 7, 8, 9, 11)\n     */\n    def extractMinMax(testTup : List[Int], k : Int) : List[Int] = {\n", "entry_point": "extractMinMax", "test": "\n\n    var arg00 : List[Int] = List(5, 20, 3, 7, 6, 8)\n    var arg01 : Int = 2\n    var x0 : List[Int] = extractMinMax(arg00, arg01)\n    var v0 : List[Int] = List(3, 5, 8, 20)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 5, 6, 1, 2, 7)\n    var arg11 : Int = 3\n    var x1 : List[Int] = extractMinMax(arg10, arg11)\n    var v1 : List[Int] = List(1, 2, 4, 5, 6, 7)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 3, 4, 8, 9, 11, 7)\n    var arg21 : Int = 4\n    var x2 : List[Int] = extractMinMax(arg20, arg21)\n    var v2 : List[Int] = List(2, 3, 4, 7, 8, 9, 11)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract maximum and minimum k elements in the given tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/220", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n     *\n     * >>> replaceMaxSpecialchar(\"Python language, Programming language.\", 2)\n     * \"Python:language: Programming language.\"\n     * >>> replaceMaxSpecialchar(\"a b c,d e f\", 3)\n     * \"a:b:c:d e f\"\n     * >>> replaceMaxSpecialchar(\"ram reshma,ram rahim\", 1)\n     * \"ram:reshma,ram rahim\"\n     */\n    def replaceMaxSpecialchar(text : String, n : Int) : String = {\n", "entry_point": "replaceMaxSpecialchar", "test": "\n\n    var arg00 : String = \"\"\"Python language, Programming language.\"\"\"\n    var arg01 : Int = 2\n    var x0 : String = replaceMaxSpecialchar(arg00, arg01)\n    var v0 : String = \"\"\"Python:language: Programming language.\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"a b c,d e f\"\"\"\n    var arg11 : Int = 3\n    var x1 : String = replaceMaxSpecialchar(arg10, arg11)\n    var v1 : String = \"\"\"a:b:c:d e f\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"ram reshma,ram rahim\"\"\"\n    var arg21 : Int = 1\n    var x2 : String = replaceMaxSpecialchar(arg20, arg21)\n    var v2 : String = \"\"\"ram:reshma,ram rahim\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/221", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the first even number in a given list of numbers.\n     *\n     * >>> firstEven(List(2, 3, 4))\n     * 2\n     * >>> firstEven(List(5, 6, 7))\n     * 6\n     */\n    def firstEven(nums : List[Int]) : Int = {\n", "entry_point": "firstEven", "test": "\n\n    var arg00 : List[Int] = List(2, 3, 4)\n    var x0 : Int = firstEven(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(5, 6, 7)\n    var x1 : Int = firstEven(arg10)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n\n}\n", "description": "Write a Scala function to find the first even number in a given list of numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/222", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if all the elements in tuple have same data type or not.\n     *\n     * >>> checkType(List(5, 6, 7, 3, 5, 6))\n     * true\n     * >>> checkType(List(1, 2, \"4\"))\n     * false\n     * >>> checkType(List(3, 2, 1, 4, 5))\n     * true\n     */\n    def checkType(testTuple : List[Any]) : Boolean = {\n", "entry_point": "checkType", "test": "\n\n    var arg00 : List[Any] = List(5, 6, 7, 3, 5, 6)\n    var x0 : Boolean = checkType(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(1, 2, \"\"\"4\"\"\")\n    var x1 : Boolean = checkType(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(3, 2, 1, 4, 5)\n    var x2 : Boolean = checkType(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if all the elements in tuple have same data type or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/223", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check for majority element in the given sorted array.\n     *\n     * >>> isMajority(List(1, 2, 3, 3, 3, 3, 10), 7, 3)\n     * true\n     * >>> isMajority(List(1, 1, 2, 4, 4, 4, 6, 6), 8, 4)\n     * false\n     * >>> isMajority(List(1, 1, 1, 2, 2), 5, 1)\n     * true\n     */\n    def isMajority(arr : List[Int], n : Int, x : Int) : Boolean = {\n", "entry_point": "isMajority", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 3, 3, 3, 10)\n    var arg01 : Int = 7\n    var arg02 : Int = 3\n    var x0 : Boolean = isMajority(arg00, arg01, arg02)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 1, 2, 4, 4, 4, 6, 6)\n    var arg11 : Int = 8\n    var arg12 : Int = 4\n    var x1 : Boolean = isMajority(arg10, arg11, arg12)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 1, 1, 2, 2)\n    var arg21 : Int = 5\n    var arg22 : Int = 1\n    var x2 : Boolean = isMajority(arg20, arg21, arg22)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check for majority element in the given sorted array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/224", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count set bits of a given number.\n     *\n     * >>> countSetBits(2)\n     * 1\n     * >>> countSetBits(4)\n     * 1\n     * >>> countSetBits(6)\n     * 2\n     */\n    def countSetBits(n : Int) : Int = {\n", "entry_point": "countSetBits", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = countSetBits(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var x1 : Int = countSetBits(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 6\n    var x2 : Int = countSetBits(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count set bits of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/225", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the minimum element in a sorted and rotated array.\n     *\n     * >>> findMin(List(1, 2, 3, 4, 5), 0, 4)\n     * 1\n     * >>> findMin(List(4, 6, 8), 0, 2)\n     * 4\n     * >>> findMin(List(2, 3, 5, 7, 9), 0, 4)\n     * 2\n     */\n    def findMin(arr : List[Int], low : Int, high : Int) : Int = {\n", "entry_point": "findMin", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5)\n    var arg01 : Int = 0\n    var arg02 : Int = 4\n    var x0 : Int = findMin(arg00, arg01, arg02)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 6, 8)\n    var arg11 : Int = 0\n    var arg12 : Int = 2\n    var x1 : Int = findMin(arg10, arg11, arg12)\n    var v1 : Int = 4\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 3, 5, 7, 9)\n    var arg21 : Int = 0\n    var arg22 : Int = 4\n    var x2 : Int = findMin(arg20, arg21, arg22)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the minimum element in a sorted and rotated array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/226", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to remove the characters which have odd index values of a given string.\n     *\n     * >>> oddValuesString(\"abcdef\")\n     * \"ace\"\n     * >>> oddValuesString(\"python\")\n     * \"pto\"\n     * >>> oddValuesString(\"data\")\n     * \"dt\"\n     */\n    def oddValuesString(str : String) : String = {\n", "entry_point": "oddValuesString", "test": "\n\n    var arg00 : String = \"\"\"abcdef\"\"\"\n    var x0 : String = oddValuesString(arg00)\n    var v0 : String = \"\"\"ace\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"python\"\"\"\n    var x1 : String = oddValuesString(arg10)\n    var v1 : String = \"\"\"pto\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"data\"\"\"\n    var x2 : String = oddValuesString(arg20)\n    var v2 : String = \"\"\"dt\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to remove the characters which have odd index values of a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/227", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find minimum of three numbers.\n     *\n     * >>> minOfThree(10, 20, 0)\n     * 0\n     * >>> minOfThree(19, 15, 18)\n     * 15\n     * >>> minOfThree(-10, -20, -30)\n     * -30\n     */\n    def minOfThree(a : Int, b : Int, c : Int) : Int = {\n", "entry_point": "minOfThree", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 20\n    var arg02 : Int = 0\n    var x0 : Int = minOfThree(arg00, arg01, arg02)\n    var v0 : Int = 0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 19\n    var arg11 : Int = 15\n    var arg12 : Int = 18\n    var x1 : Int = minOfThree(arg10, arg11, arg12)\n    var v1 : Int = 15\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = -10\n    var arg21 : Int = -20\n    var arg22 : Int = -30\n    var x2 : Int = minOfThree(arg20, arg21, arg22)\n    var v2 : Int = -30\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find minimum of three numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/228", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether all the bits are unset in the given range or not.\n     *\n     * >>> allBitsSetInTheGivenRange(4, 1, 2)\n     * true\n     * >>> allBitsSetInTheGivenRange(17, 2, 4)\n     * true\n     * >>> allBitsSetInTheGivenRange(39, 4, 6)\n     * false\n     */\n    def allBitsSetInTheGivenRange(n : Int, l : Int, r : Int) : Boolean = {\n", "entry_point": "allBitsSetInTheGivenRange", "test": "\n\n    var arg00 : Int = 4\n    var arg01 : Int = 1\n    var arg02 : Int = 2\n    var x0 : Boolean = allBitsSetInTheGivenRange(arg00, arg01, arg02)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 17\n    var arg11 : Int = 2\n    var arg12 : Int = 4\n    var x1 : Boolean = allBitsSetInTheGivenRange(arg10, arg11, arg12)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 39\n    var arg21 : Int = 4\n    var arg22 : Int = 6\n    var x2 : Boolean = allBitsSetInTheGivenRange(arg20, arg21, arg22)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether all the bits are unset in the given range or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/229", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n     *\n     * >>> reArrangeArray(List(-1, 2, -3, 4, 5, 6, -7, 8, 9), 9)\n     * List(-1, -3, -7, 4, 5, 6, 2, 8, 9)\n     * >>> reArrangeArray(List(12, -14, -26, 13, 15), 5)\n     * List(-14, -26, 12, 13, 15)\n     * >>> reArrangeArray(List(10, 24, 36, -42, -39, -78, 85), 7)\n     * List(-42, -39, -78, 10, 24, 36, 85)\n     */\n    def reArrangeArray(arr : List[Int], n : Int) : List[Int] = {\n", "entry_point": "reArrangeArray", "test": "\n\n    var arg00 : List[Int] = List(-1, 2, -3, 4, 5, 6, -7, 8, 9)\n    var arg01 : Int = 9\n    var x0 : List[Int] = reArrangeArray(arg00, arg01)\n    var v0 : List[Int] = List(-1, -3, -7, 4, 5, 6, 2, 8, 9)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(12, -14, -26, 13, 15)\n    var arg11 : Int = 5\n    var x1 : List[Int] = reArrangeArray(arg10, arg11)\n    var v1 : List[Int] = List(-14, -26, 12, 13, 15)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(10, 24, 36, -42, -39, -78, 85)\n    var arg21 : Int = 7\n    var x2 : List[Int] = reArrangeArray(arg20, arg21)\n    var v2 : List[Int] = List(-42, -39, -78, 10, 24, 36, 85)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/230", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to replace blank spaces with any character in a string.\n     *\n     * >>> replaceBlank(\"hello people\", \"@\")\n     * \"hello@people\"\n     * >>> replaceBlank(\"python program language\", \"\\$\")\n     * \"python\\$program\\$language\"\n     * >>> replaceBlank(\"blank space\", \"-\")\n     * \"blank-space\"\n     */\n    def replaceBlank(str1 : String, ch : String) : String = {\n", "entry_point": "replaceBlank", "test": "\n\n    var arg00 : String = \"\"\"hello people\"\"\"\n    var arg01 : String = \"\"\"@\"\"\"\n    var x0 : String = replaceBlank(arg00, arg01)\n    var v0 : String = \"\"\"hello@people\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"python program language\"\"\"\n    var arg11 : String = \"\"\"\\$\"\"\"\n    var x1 : String = replaceBlank(arg10, arg11)\n    var v1 : String = \"\"\"python\\$program\\$language\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"blank space\"\"\"\n    var arg21 : String = \"\"\"-\"\"\"\n    var x2 : String = replaceBlank(arg20, arg21)\n    var v2 : String = \"\"\"blank-space\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to replace blank spaces with any character in a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/231", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the maximum sum in the given right triangle of numbers.\n     *\n     * >>> maxSum(List(List(1), List(2, 1), List(3, 3, 2)), 3)\n     * 6\n     * >>> maxSum(List(List(1), List(1, 2), List(4, 1, 12)), 3)\n     * 15\n     * >>> maxSum(List(List(2), List(3, 2), List(13, 23, 12)), 3)\n     * 28\n     */\n    def maxSum(tri : List[List[Int]], n : Int) : Int = {\n", "entry_point": "maxSum", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1), List(2, 1), List(3, 3, 2))\n    var arg01 : Int = 3\n    var x0 : Int = maxSum(arg00, arg01)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1), List(1, 2), List(4, 1, 12))\n    var arg11 : Int = 3\n    var x1 : Int = maxSum(arg10, arg11)\n    var v1 : Int = 15\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(2), List(3, 2), List(13, 23, 12))\n    var arg21 : Int = 3\n    var x2 : Int = maxSum(arg20, arg21)\n    var v2 : Int = 28\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the maximum sum in the given right triangle of numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/232", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to get the n largest items from a dataset.\n     *\n     * >>> largNnum(List(10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100), 2)\n     * List(100, 90)\n     * >>> largNnum(List(10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100), 5)\n     * List(100, 90, 80, 70, 60)\n     * >>> largNnum(List(10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100), 3)\n     * List(100, 90, 80)\n     */\n    def largNnum(list1 : List[Int], n : Int) : List[Int] = {\n", "entry_point": "largNnum", "test": "\n\n    var arg00 : List[Int] = List(10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100)\n    var arg01 : Int = 2\n    var x0 : List[Int] = largNnum(arg00, arg01)\n    var v0 : List[Int] = List(100, 90)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100)\n    var arg11 : Int = 5\n    var x1 : List[Int] = largNnum(arg10, arg11)\n    var v1 : List[Int] = List(100, 90, 80, 70, 60)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100)\n    var arg21 : Int = 3\n    var x2 : List[Int] = largNnum(arg20, arg21)\n    var v2 : List[Int] = List(100, 90, 80)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to get the n largest items from a dataset.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/233", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the lateral surface area of a cylinder.\n     *\n     * >>> lateralsufaceCylinder(10, 5)\n     * 314.15000000000003\n     * >>> lateralsufaceCylinder(4, 5)\n     * 125.66000000000001\n     * >>> lateralsufaceCylinder(4, 10)\n     * 251.32000000000002\n     */\n    def lateralsufaceCylinder(r : Int, h : Int) : Double = {\n", "entry_point": "lateralsufaceCylinder", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 5\n    var x0 : Double = lateralsufaceCylinder(arg00, arg01)\n    var v0 : Double = 314.15000000000003\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var arg11 : Int = 5\n    var x1 : Double = lateralsufaceCylinder(arg10, arg11)\n    var v1 : Double = 125.66000000000001\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var arg21 : Int = 10\n    var x2 : Double = lateralsufaceCylinder(arg20, arg21)\n    var v2 : Double = 251.32000000000002\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the lateral surface area of a cylinder.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/234", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the volume of a cube.\n     *\n     * >>> volumeCube(3)\n     * 27\n     * >>> volumeCube(2)\n     * 8\n     * >>> volumeCube(5)\n     * 125\n     */\n    def volumeCube(l : Int) : Int = {\n", "entry_point": "volumeCube", "test": "\n\n    var arg00 : Int = 3\n    var x0 : Int = volumeCube(arg00)\n    var v0 : Int = 27\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var x1 : Int = volumeCube(arg10)\n    var v1 : Int = 8\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var x2 : Int = volumeCube(arg20)\n    var v2 : Int = 125\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the volume of a cube.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/235", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to set all even bits of a given number.\n     *\n     * >>> evenBitSetNumber(10)\n     * 10\n     * >>> evenBitSetNumber(20)\n     * 30\n     * >>> evenBitSetNumber(30)\n     * 30\n     */\n    def evenBitSetNumber(n : Int) : Int = {\n", "entry_point": "evenBitSetNumber", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = evenBitSetNumber(arg00)\n    var v0 : Int = 10\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 20\n    var x1 : Int = evenBitSetNumber(arg10)\n    var v1 : Int = 30\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 30\n    var x2 : Int = evenBitSetNumber(arg20)\n    var v2 : Int = 30\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to set all even bits of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/236", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n     *\n     * >>> noOfTriangle(4, 2)\n     * 7\n     * >>> noOfTriangle(4, 3)\n     * 3\n     * >>> noOfTriangle(1, 3)\n     * -1\n     */\n    def noOfTriangle(n : Int, k : Int) : Int = {\n", "entry_point": "noOfTriangle", "test": "\n\n    var arg00 : Int = 4\n    var arg01 : Int = 2\n    var x0 : Int = noOfTriangle(arg00, arg01)\n    var v0 : Int = 7\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var arg11 : Int = 3\n    var x1 : Int = noOfTriangle(arg10, arg11)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = 3\n    var x2 : Int = noOfTriangle(arg20, arg21)\n    var v2 : Int = -1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/237", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check the occurrences of records which occur similar times in the given tuples.\n     *\n     * >>> checkOccurences(List(List(3, 1), List(1, 3), List(2, 5), List(5, 2), List(6, 3)))\n     * Map(List(1, 3)->2, List(2, 5)->2, List(3, 6)->1)\n     * >>> checkOccurences(List(List(4, 2), List(2, 4), List(3, 6), List(6, 3), List(7, 4)))\n     * Map(List(2, 4)->2, List(3, 6)->2, List(4, 7)->1)\n     * >>> checkOccurences(List(List(13, 2), List(11, 23), List(12, 25), List(25, 12), List(16, 23)))\n     * Map(List(2, 13)->1, List(11, 23)->1, List(12, 25)->2, List(16, 23)->1)\n     */\n    def checkOccurences(testList : List[List[Int]]) : Map[List[Int], Int] = {\n", "entry_point": "checkOccurences", "test": "\n\n    var arg00 : List[List[Int]] = List(List(3, 1), List(1, 3), List(2, 5), List(5, 2), List(6, 3))\n    var x0 : Map[List[Int], Int] = checkOccurences(arg00)\n    var v0 : Map[List[Int], Int] = Map(List(1, 3) -> 2, List(2, 5) -> 2, List(3, 6) -> 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(4, 2), List(2, 4), List(3, 6), List(6, 3), List(7, 4))\n    var x1 : Map[List[Int], Int] = checkOccurences(arg10)\n    var v1 : Map[List[Int], Int] = Map(List(2, 4) -> 2, List(3, 6) -> 2, List(4, 7) -> 1)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(13, 2), List(11, 23), List(12, 25), List(25, 12), List(16, 23))\n    var x2 : Map[List[Int], Int] = checkOccurences(arg20)\n    var v2 : Map[List[Int], Int] = Map(List(2, 13) -> 1, List(11, 23) -> 1, List(12, 25) -> 2, List(16, 23) -> 1)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check the occurrences of records which occur similar times in the given tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/238", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count number of non-empty substrings of a given string.\n     *\n     * >>> numberOfSubstrings(\"abc\")\n     * 6\n     * >>> numberOfSubstrings(\"abcd\")\n     * 10\n     * >>> numberOfSubstrings(\"abcde\")\n     * 15\n     */\n    def numberOfSubstrings(str : String) : Int = {\n", "entry_point": "numberOfSubstrings", "test": "\n\n    var arg00 : String = \"\"\"abc\"\"\"\n    var x0 : Int = numberOfSubstrings(arg00)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"abcd\"\"\"\n    var x1 : Int = numberOfSubstrings(arg10)\n    var v1 : Int = 10\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"abcde\"\"\"\n    var x2 : Int = numberOfSubstrings(arg20)\n    var v2 : Int = 15\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count number of non-empty substrings of a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/239", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n     *\n     * >>> getTotalNumberOfSequences(10, 4)\n     * 4\n     * >>> getTotalNumberOfSequences(5, 2)\n     * 6\n     * >>> getTotalNumberOfSequences(16, 3)\n     * 84\n     */\n    def getTotalNumberOfSequences(m : Int, n : Int) : Int = {\n", "entry_point": "getTotalNumberOfSequences", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 4\n    var x0 : Int = getTotalNumberOfSequences(arg00, arg01)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var arg11 : Int = 2\n    var x1 : Int = getTotalNumberOfSequences(arg10, arg11)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 16\n    var arg21 : Int = 3\n    var x2 : Int = getTotalNumberOfSequences(arg20, arg21)\n    var v2 : Int = 84\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/240", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to replace the last element of the list with another list.\n     *\n     * >>> replaceList(List(1, 3, 5, 7, 9, 10), List(2, 4, 6, 8))\n     * List(1, 3, 5, 7, 9, 2, 4, 6, 8)\n     * >>> replaceList(List(1, 2, 3, 4, 5), List(5, 6, 7, 8))\n     * List(1, 2, 3, 4, 5, 6, 7, 8)\n     * >>> replaceList(List(\"red\", \"blue\", \"green\"), List(\"yellow\"))\n     * List(\"red\", \"blue\", \"yellow\")\n     */\n    def replaceList(list1 : List[Any], list2 : List[Any]) : List[Any] = {\n", "entry_point": "replaceList", "test": "\n\n    var arg00 : List[Any] = List(1, 3, 5, 7, 9, 10)\n    var arg01 : List[Any] = List(2, 4, 6, 8)\n    var x0 : List[Any] = replaceList(arg00, arg01)\n    var v0 : List[Any] = List(1, 3, 5, 7, 9, 2, 4, 6, 8)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(1, 2, 3, 4, 5)\n    var arg11 : List[Any] = List(5, 6, 7, 8)\n    var x1 : List[Any] = replaceList(arg10, arg11)\n    var v1 : List[Any] = List(1, 2, 3, 4, 5, 6, 7, 8)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(\"\"\"red\"\"\", \"\"\"blue\"\"\", \"\"\"green\"\"\")\n    var arg21 : List[Any] = List(\"\"\"yellow\"\"\")\n    var x2 : List[Any] = replaceList(arg20, arg21)\n    var v2 : List[Any] = List(\"\"\"red\"\"\", \"\"\"blue\"\"\", \"\"\"yellow\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to replace the last element of the list with another list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/241", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to generate a 3d array having each element as '*'.\n     *\n     * >>> array3d(6, 4, 3)\n     * List(List(List(\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"), List(\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"), List(\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"), List(\"*\", \"*\", \"*\", \"*\", \"*\", \"*\")), List(List(\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"), List(\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"), List(\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"), List(\"*\", \"*\", \"*\", \"*\", \"*\", \"*\")), List(List(\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"), List(\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"), List(\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"), List(\"*\", \"*\", \"*\", \"*\", \"*\", \"*\")))\n     * >>> array3d(5, 3, 4)\n     * List(List(List(\"*\", \"*\", \"*\", \"*\", \"*\"), List(\"*\", \"*\", \"*\", \"*\", \"*\"), List(\"*\", \"*\", \"*\", \"*\", \"*\")), List(List(\"*\", \"*\", \"*\", \"*\", \"*\"), List(\"*\", \"*\", \"*\", \"*\", \"*\"), List(\"*\", \"*\", \"*\", \"*\", \"*\")), List(List(\"*\", \"*\", \"*\", \"*\", \"*\"), List(\"*\", \"*\", \"*\", \"*\", \"*\"), List(\"*\", \"*\", \"*\", \"*\", \"*\")), List(List(\"*\", \"*\", \"*\", \"*\", \"*\"), List(\"*\", \"*\", \"*\", \"*\", \"*\"), List(\"*\", \"*\", \"*\", \"*\", \"*\")))\n     * >>> array3d(1, 2, 3)\n     * List(List(List(\"*\"), List(\"*\")), List(List(\"*\"), List(\"*\")), List(List(\"*\"), List(\"*\")))\n     */\n    def array3d(m : Int, n : Int, o : Int) : List[List[List[String]]] = {\n", "entry_point": "array3d", "test": "\n\n    var arg00 : Int = 6\n    var arg01 : Int = 4\n    var arg02 : Int = 3\n    var x0 : List[List[List[String]]] = array3d(arg00, arg01, arg02)\n    var v0 : List[List[List[String]]] = List(List(List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\"), List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\"), List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\"), List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\")), List(List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\"), List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\"), List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\"), List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\")), List(List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\"), List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\"), List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\"), List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\")))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var arg11 : Int = 3\n    var arg12 : Int = 4\n    var x1 : List[List[List[String]]] = array3d(arg10, arg11, arg12)\n    var v1 : List[List[List[String]]] = List(List(List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\"), List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\"), List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\")), List(List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\"), List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\"), List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\")), List(List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\"), List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\"), List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\")), List(List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\"), List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\"), List(\"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\", \"\"\"*\"\"\")))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = 2\n    var arg22 : Int = 3\n    var x2 : List[List[List[String]]] = array3d(arg20, arg21, arg22)\n    var v2 : List[List[List[String]]] = List(List(List(\"\"\"*\"\"\"), List(\"\"\"*\"\"\")), List(List(\"\"\"*\"\"\"), List(\"\"\"*\"\"\")), List(List(\"\"\"*\"\"\"), List(\"\"\"*\"\"\")))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to generate a 3d array having each element as '*'.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/242", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count total characters in a string.\n     *\n     * >>> countCharac(\"python programming\")\n     * 18\n     * >>> countCharac(\"language\")\n     * 8\n     * >>> countCharac(\"words\")\n     * 5\n     */\n    def countCharac(str1 : String) : Int = {\n", "entry_point": "countCharac", "test": "\n\n    var arg00 : String = \"\"\"python programming\"\"\"\n    var x0 : Int = countCharac(arg00)\n    var v0 : Int = 18\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"language\"\"\"\n    var x1 : Int = countCharac(arg10)\n    var v1 : Int = 8\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"words\"\"\"\n    var x2 : Int = countCharac(arg20)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count total characters in a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/243", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort the given list based on the occurrence of first element of tuples.\n     *\n     * >>> sortOnOccurence(List(List(1, \"Jake\"), List(2, \"Bob\"), List(1, \"Cara\")))\n     * List(List(1, \"Jake\", \"Cara\", 2), List(2, \"Bob\", 1))\n     * >>> sortOnOccurence(List(List(\"b\", \"ball\"), List(\"a\", \"arm\"), List(\"b\", \"b\"), List(\"a\", \"ant\")))\n     * List(List(\"b\", \"ball\", \"b\", 2), List(\"a\", \"arm\", \"ant\", 2))\n     * >>> sortOnOccurence(List(List(2, \"Mark\"), List(3, \"Maze\"), List(2, \"Sara\")))\n     * List(List(2, \"Mark\", \"Sara\", 2), List(3, \"Maze\", 1))\n     */\n    def sortOnOccurence(lst : List[List[Any]]) : List[List[Any]] = {\n", "entry_point": "sortOnOccurence", "test": "\n\n    var arg00 : List[List[Any]] = List(List(1, \"\"\"Jake\"\"\"), List(2, \"\"\"Bob\"\"\"), List(1, \"\"\"Cara\"\"\"))\n    var x0 : List[List[Any]] = sortOnOccurence(arg00)\n    var v0 : List[List[Any]] = List(List(1, \"\"\"Jake\"\"\", \"\"\"Cara\"\"\", 2), List(2, \"\"\"Bob\"\"\", 1))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(\"\"\"b\"\"\", \"\"\"ball\"\"\"), List(\"\"\"a\"\"\", \"\"\"arm\"\"\"), List(\"\"\"b\"\"\", \"\"\"b\"\"\"), List(\"\"\"a\"\"\", \"\"\"ant\"\"\"))\n    var x1 : List[List[Any]] = sortOnOccurence(arg10)\n    var v1 : List[List[Any]] = List(List(\"\"\"b\"\"\", \"\"\"ball\"\"\", \"\"\"b\"\"\", 2), List(\"\"\"a\"\"\", \"\"\"arm\"\"\", \"\"\"ant\"\"\", 2))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(2, \"\"\"Mark\"\"\"), List(3, \"\"\"Maze\"\"\"), List(2, \"\"\"Sara\"\"\"))\n    var x2 : List[List[Any]] = sortOnOccurence(arg20)\n    var v2 : List[List[Any]] = List(List(2, \"\"\"Mark\"\"\", \"\"\"Sara\"\"\", 2), List(3, \"\"\"Maze\"\"\", 1))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort the given list based on the occurrence of first element of tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/244", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the next perfect square greater than a given number.\n     *\n     * >>> nextPerfectSquare(35)\n     * 36\n     * >>> nextPerfectSquare(6)\n     * 9\n     * >>> nextPerfectSquare(9)\n     * 16\n     */\n    def nextPerfectSquare(n : Int) : Int = {\n", "entry_point": "nextPerfectSquare", "test": "\n\n    var arg00 : Int = 35\n    var x0 : Int = nextPerfectSquare(arg00)\n    var v0 : Int = 36\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 6\n    var x1 : Int = nextPerfectSquare(arg10)\n    var v1 : Int = 9\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 9\n    var x2 : Int = nextPerfectSquare(arg20)\n    var v2 : Int = 16\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the next perfect square greater than a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/245", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n     *\n     * >>> maxSum(List(1, 15, 51, 45, 33, 100, 12, 18, 9), 9)\n     * 194\n     * >>> maxSum(List(80, 60, 30, 40, 20, 10), 6)\n     * 210\n     * >>> maxSum(List(2, 3, 14, 16, 21, 23, 29, 30), 8)\n     * 138\n     */\n    def maxSum(arr : List[Int], n : Int) : Int = {\n", "entry_point": "maxSum", "test": "\n\n    var arg00 : List[Int] = List(1, 15, 51, 45, 33, 100, 12, 18, 9)\n    var arg01 : Int = 9\n    var x0 : Int = maxSum(arg00, arg01)\n    var v0 : Int = 194\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(80, 60, 30, 40, 20, 10)\n    var arg11 : Int = 6\n    var x1 : Int = maxSum(arg10, arg11)\n    var v1 : Int = 210\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 3, 14, 16, 21, 23, 29, 30)\n    var arg21 : Int = 8\n    var x2 : Int = maxSum(arg20, arg21)\n    var v2 : Int = 138\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/246", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function for computing square roots using the babylonian method.\n     *\n     * >>> babylonianSquareroot(10)\n     * 3.162277660168379\n     * >>> babylonianSquareroot(2)\n     * 1.414213562373095\n     * >>> babylonianSquareroot(9)\n     * 3.0\n     */\n    def babylonianSquareroot(number : Int) : Double = {\n", "entry_point": "babylonianSquareroot", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Double = babylonianSquareroot(arg00)\n    var v0 : Double = 3.162277660168379\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var x1 : Double = babylonianSquareroot(arg10)\n    var v1 : Double = 1.414213562373095\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 9\n    var x2 : Double = babylonianSquareroot(arg20)\n    var v2 : Double = 3.0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function for computing square roots using the babylonian method.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/247", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the longest palindromic subsequence in the given string.\n     *\n     * >>> lps(\"TENS FOR TENS\")\n     * 5\n     * >>> lps(\"CARDIO FOR CARDS\")\n     * 7\n     * >>> lps(\"PART OF THE JOURNEY IS PART\")\n     * 9\n     */\n    def lps(str : String) : Int = {\n", "entry_point": "lps", "test": "\n\n    var arg00 : String = \"\"\"TENS FOR TENS\"\"\"\n    var x0 : Int = lps(arg00)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"CARDIO FOR CARDS\"\"\"\n    var x1 : Int = lps(arg10)\n    var v1 : Int = 7\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"PART OF THE JOURNEY IS PART\"\"\"\n    var x2 : Int = lps(arg20)\n    var v2 : Int = 9\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the longest palindromic subsequence in the given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/248", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate the harmonic sum of n-1.\n     *\n     * >>> harmonicSum(7)\n     * 2.5928571428571425\n     * >>> harmonicSum(4)\n     * 2.083333333333333\n     * >>> harmonicSum(19)\n     * 3.547739657143682\n     */\n    def harmonicSum(n : Int) : Double = {\n", "entry_point": "harmonicSum", "test": "\n\n    var arg00 : Int = 7\n    var x0 : Double = harmonicSum(arg00)\n    var v0 : Double = 2.5928571428571425\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var x1 : Double = harmonicSum(arg10)\n    var v1 : Double = 2.083333333333333\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 19\n    var x2 : Double = harmonicSum(arg20)\n    var v2 : Double = 3.547739657143682\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate the harmonic sum of n-1.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/249", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the intersection of two arrays using lambda function.\n     *\n     * >>> intersectionArray(List(1, 2, 3, 5, 7, 8, 9, 10), List(1, 2, 4, 8, 9))\n     * List(1, 2, 8, 9)\n     * >>> intersectionArray(List(1, 2, 3, 5, 7, 8, 9, 10), List(3, 5, 7, 9))\n     * List(3, 5, 7, 9)\n     * >>> intersectionArray(List(1, 2, 3, 5, 7, 8, 9, 10), List(10, 20, 30, 40))\n     * List(10)\n     */\n    def intersectionArray(arrayNums1 : List[Int], arrayNums2 : List[Int]) : List[Int] = {\n", "entry_point": "intersectionArray", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 5, 7, 8, 9, 10)\n    var arg01 : List[Int] = List(1, 2, 4, 8, 9)\n    var x0 : List[Int] = intersectionArray(arg00, arg01)\n    var v0 : List[Int] = List(1, 2, 8, 9)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 5, 7, 8, 9, 10)\n    var arg11 : List[Int] = List(3, 5, 7, 9)\n    var x1 : List[Int] = intersectionArray(arg10, arg11)\n    var v1 : List[Int] = List(3, 5, 7, 9)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 5, 7, 8, 9, 10)\n    var arg21 : List[Int] = List(10, 20, 30, 40)\n    var x2 : List[Int] = intersectionArray(arg20, arg21)\n    var v2 : List[Int] = List(10)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the intersection of two arrays using lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/250", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the occcurences of an element in a tuple.\n     *\n     * >>> countX(List(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4)\n     * 0\n     * >>> countX(List(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 10)\n     * 3\n     * >>> countX(List(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 8)\n     * 4\n     */\n    def countX(tup : List[Int], x : Int) : Int = {\n", "entry_point": "countX", "test": "\n\n    var arg00 : List[Int] = List(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2)\n    var arg01 : Int = 4\n    var x0 : Int = countX(arg00, arg01)\n    var v0 : Int = 0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2)\n    var arg11 : Int = 10\n    var x1 : Int = countX(arg10, arg11)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2)\n    var arg21 : Int = 8\n    var x2 : Int = countX(arg20, arg21)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the occcurences of an element in a tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/251", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to insert an element before each element of a list.\n     *\n     * >>> insertElement(List(\"Red\", \"Green\", \"Black\"), \"c\")\n     * List(\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\")\n     * >>> insertElement(List(\"python\", \"java\"), \"program\")\n     * List(\"program\", \"python\", \"program\", \"java\")\n     * >>> insertElement(List(\"happy\", \"sad\"), \"laugh\")\n     * List(\"laugh\", \"happy\", \"laugh\", \"sad\")\n     */\n    def insertElement(list : List[String], element : String) : List[String] = {\n", "entry_point": "insertElement", "test": "\n\n    var arg00 : List[String] = List(\"\"\"Red\"\"\", \"\"\"Green\"\"\", \"\"\"Black\"\"\")\n    var arg01 : String = \"\"\"c\"\"\"\n    var x0 : List[String] = insertElement(arg00, arg01)\n    var v0 : List[String] = List(\"\"\"c\"\"\", \"\"\"Red\"\"\", \"\"\"c\"\"\", \"\"\"Green\"\"\", \"\"\"c\"\"\", \"\"\"Black\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"python\"\"\", \"\"\"java\"\"\")\n    var arg11 : String = \"\"\"program\"\"\"\n    var x1 : List[String] = insertElement(arg10, arg11)\n    var v1 : List[String] = List(\"\"\"program\"\"\", \"\"\"python\"\"\", \"\"\"program\"\"\", \"\"\"java\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"happy\"\"\", \"\"\"sad\"\"\")\n    var arg21 : String = \"\"\"laugh\"\"\"\n    var x2 : List[String] = insertElement(arg20, arg21)\n    var v2 : List[String] = List(\"\"\"laugh\"\"\", \"\"\"happy\"\"\", \"\"\"laugh\"\"\", \"\"\"sad\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to insert an element before each element of a list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/252", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to convert complex numbers to polar coordinates.\n     *\n     * >>> convert(1)\n     * List(1.0, 0.0)\n     * >>> convert(4)\n     * List(4.0, 0.0)\n     * >>> convert(5)\n     * List(5.0, 0.0)\n     */\n    def convert(numbers : Int) : List[Double] = {\n", "entry_point": "convert", "test": "\n\n    var arg00 : Int = 1\n    var x0 : List[Double] = convert(arg00)\n    var v0 : List[Double] = List(1.0, 0.0)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var x1 : List[Double] = convert(arg10)\n    var v1 : List[Double] = List(4.0, 0.0)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var x2 : List[Double] = convert(arg20)\n    var v2 : List[Double] = List(5.0, 0.0)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to convert complex numbers to polar coordinates.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/253", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count integers from a given list.\n     *\n     * >>> countInteger(List(1, 2, \"abc\", 1.2))\n     * 2\n     * >>> countInteger(List(1, 2, 3))\n     * 3\n     * >>> countInteger(List(1, 1.2, 4, 5.1))\n     * 2\n     */\n    def countInteger(list1 : List[Any]) : Int = {\n", "entry_point": "countInteger", "test": "\n\n    var arg00 : List[Any] = List(1, 2, \"\"\"abc\"\"\", 1.2)\n    var x0 : Int = countInteger(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(1, 2, 3)\n    var x1 : Int = countInteger(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(1, 1.2, 4, 5.1)\n    var x2 : Int = countInteger(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count integers from a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/254", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find all words starting with 'a' or 'e' in a given string.\n     *\n     * >>> wordsAe(\"python programe\")\n     * List(\"ame\")\n     * >>> wordsAe(\"python programe language\")\n     * List(\"ame\", \"anguage\")\n     * >>> wordsAe(\"assert statement\")\n     * List(\"assert\", \"atement\")\n     */\n    def wordsAe(text : String) : List[String] = {\n", "entry_point": "wordsAe", "test": "\n\n    var arg00 : String = \"\"\"python programe\"\"\"\n    var x0 : List[String] = wordsAe(arg00)\n    var v0 : List[String] = List(\"\"\"ame\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"python programe language\"\"\"\n    var x1 : List[String] = wordsAe(arg10)\n    var v1 : List[String] = List(\"\"\"ame\"\"\", \"\"\"anguage\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"assert statement\"\"\"\n    var x2 : List[String] = wordsAe(arg20)\n    var v2 : List[String] = List(\"\"\"assert\"\"\", \"\"\"atement\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find all words starting with 'a' or 'e' in a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/255", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n     *\n     * >>> combinationsColors(List(\"Red\", \"Green\", \"Blue\"), 1)\n     * List(List(\"Red\"), List(\"Green\"), List(\"Blue\"))\n     * >>> combinationsColors(List(\"Red\", \"Green\", \"Blue\"), 2)\n     * List(List(\"Red\", \"Red\"), List(\"Red\", \"Green\"), List(\"Red\", \"Blue\"), List(\"Green\", \"Green\"), List(\"Green\", \"Blue\"), List(\"Blue\", \"Blue\"))\n     * >>> combinationsColors(List(\"Red\", \"Green\", \"Blue\"), 3)\n     * List(List(\"Red\", \"Red\", \"Red\"), List(\"Red\", \"Red\", \"Green\"), List(\"Red\", \"Red\", \"Blue\"), List(\"Red\", \"Green\", \"Green\"), List(\"Red\", \"Green\", \"Blue\"), List(\"Red\", \"Blue\", \"Blue\"), List(\"Green\", \"Green\", \"Green\"), List(\"Green\", \"Green\", \"Blue\"), List(\"Green\", \"Blue\", \"Blue\"), List(\"Blue\", \"Blue\", \"Blue\"))\n     */\n    def combinationsColors(l : List[String], n : Int) : List[List[String]] = {\n", "entry_point": "combinationsColors", "test": "\n\n    var arg00 : List[String] = List(\"\"\"Red\"\"\", \"\"\"Green\"\"\", \"\"\"Blue\"\"\")\n    var arg01 : Int = 1\n    var x0 : List[List[String]] = combinationsColors(arg00, arg01)\n    var v0 : List[List[String]] = List(List(\"\"\"Red\"\"\"), List(\"\"\"Green\"\"\"), List(\"\"\"Blue\"\"\"))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"Red\"\"\", \"\"\"Green\"\"\", \"\"\"Blue\"\"\")\n    var arg11 : Int = 2\n    var x1 : List[List[String]] = combinationsColors(arg10, arg11)\n    var v1 : List[List[String]] = List(List(\"\"\"Red\"\"\", \"\"\"Red\"\"\"), List(\"\"\"Red\"\"\", \"\"\"Green\"\"\"), List(\"\"\"Red\"\"\", \"\"\"Blue\"\"\"), List(\"\"\"Green\"\"\", \"\"\"Green\"\"\"), List(\"\"\"Green\"\"\", \"\"\"Blue\"\"\"), List(\"\"\"Blue\"\"\", \"\"\"Blue\"\"\"))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"Red\"\"\", \"\"\"Green\"\"\", \"\"\"Blue\"\"\")\n    var arg21 : Int = 3\n    var x2 : List[List[String]] = combinationsColors(arg20, arg21)\n    var v2 : List[List[String]] = List(List(\"\"\"Red\"\"\", \"\"\"Red\"\"\", \"\"\"Red\"\"\"), List(\"\"\"Red\"\"\", \"\"\"Red\"\"\", \"\"\"Green\"\"\"), List(\"\"\"Red\"\"\", \"\"\"Red\"\"\", \"\"\"Blue\"\"\"), List(\"\"\"Red\"\"\", \"\"\"Green\"\"\", \"\"\"Green\"\"\"), List(\"\"\"Red\"\"\", \"\"\"Green\"\"\", \"\"\"Blue\"\"\"), List(\"\"\"Red\"\"\", \"\"\"Blue\"\"\", \"\"\"Blue\"\"\"), List(\"\"\"Green\"\"\", \"\"\"Green\"\"\", \"\"\"Green\"\"\"), List(\"\"\"Green\"\"\", \"\"\"Green\"\"\", \"\"\"Blue\"\"\"), List(\"\"\"Green\"\"\", \"\"\"Blue\"\"\", \"\"\"Blue\"\"\"), List(\"\"\"Blue\"\"\", \"\"\"Blue\"\"\", \"\"\"Blue\"\"\"))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/256", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the number of prime numbers less than a given non-negative number.\n     *\n     * >>> countPrimesNums(5)\n     * 2\n     * >>> countPrimesNums(10)\n     * 4\n     * >>> countPrimesNums(100)\n     * 25\n     */\n    def countPrimesNums(n : Int) : Int = {\n", "entry_point": "countPrimesNums", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Int = countPrimesNums(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var x1 : Int = countPrimesNums(arg10)\n    var v1 : Int = 4\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 100\n    var x2 : Int = countPrimesNums(arg20)\n    var v2 : Int = 25\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the number of prime numbers less than a given non-negative number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/257", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to swap two numbers.\n     *\n     * >>> swapNumbers(10, 20)\n     * List(20, 10)\n     * >>> swapNumbers(15, 17)\n     * List(17, 15)\n     * >>> swapNumbers(100, 200)\n     * List(200, 100)\n     */\n    def swapNumbers(a : Int, b : Int) : List[Int] = {\n", "entry_point": "swapNumbers", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 20\n    var x0 : List[Int] = swapNumbers(arg00, arg01)\n    var v0 : List[Int] = List(20, 10)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 15\n    var arg11 : Int = 17\n    var x1 : List[Int] = swapNumbers(arg10, arg11)\n    var v1 : List[Int] = List(17, 15)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 100\n    var arg21 : Int = 200\n    var x2 : List[Int] = swapNumbers(arg20, arg21)\n    var v2 : List[Int] = List(200, 100)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to swap two numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/258", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find number of odd elements in the given list using lambda function.\n     *\n     * >>> countOdd(List(1, 2, 3, 5, 7, 8, 10))\n     * 4\n     * >>> countOdd(List(10, 15, 14, 13, -18, 12, -20))\n     * 2\n     * >>> countOdd(List(1, 2, 4, 8, 9))\n     * 2\n     */\n    def countOdd(arrayNums : List[Int]) : Int = {\n", "entry_point": "countOdd", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 5, 7, 8, 10)\n    var x0 : Int = countOdd(arg00)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(10, 15, 14, 13, -18, 12, -20)\n    var x1 : Int = countOdd(arg10)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 4, 8, 9)\n    var x2 : Int = countOdd(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find number of odd elements in the given list using lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/259", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to maximize the given two tuples.\n     *\n     * >>> maximizeElements(List(List(1, 3), List(4, 5), List(2, 9), List(1, 10)), List(List(6, 7), List(3, 9), List(1, 1), List(7, 3)))\n     * List(List(6, 7), List(4, 9), List(2, 9), List(7, 10))\n     * >>> maximizeElements(List(List(2, 4), List(5, 6), List(3, 10), List(2, 11)), List(List(7, 8), List(4, 10), List(2, 2), List(8, 4)))\n     * List(List(7, 8), List(5, 10), List(3, 10), List(8, 11))\n     * >>> maximizeElements(List(List(3, 5), List(6, 7), List(4, 11), List(3, 12)), List(List(8, 9), List(5, 11), List(3, 3), List(9, 5)))\n     * List(List(8, 9), List(6, 11), List(4, 11), List(9, 12))\n     */\n    def maximizeElements(testTup1 : List[List[Int]], testTup2 : List[List[Int]]) : List[List[Int]] = {\n", "entry_point": "maximizeElements", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 3), List(4, 5), List(2, 9), List(1, 10))\n    var arg01 : List[List[Int]] = List(List(6, 7), List(3, 9), List(1, 1), List(7, 3))\n    var x0 : List[List[Int]] = maximizeElements(arg00, arg01)\n    var v0 : List[List[Int]] = List(List(6, 7), List(4, 9), List(2, 9), List(7, 10))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(2, 4), List(5, 6), List(3, 10), List(2, 11))\n    var arg11 : List[List[Int]] = List(List(7, 8), List(4, 10), List(2, 2), List(8, 4))\n    var x1 : List[List[Int]] = maximizeElements(arg10, arg11)\n    var v1 : List[List[Int]] = List(List(7, 8), List(5, 10), List(3, 10), List(8, 11))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(3, 5), List(6, 7), List(4, 11), List(3, 12))\n    var arg21 : List[List[Int]] = List(List(8, 9), List(5, 11), List(3, 3), List(9, 5))\n    var x2 : List[List[Int]] = maximizeElements(arg20, arg21)\n    var v2 : List[List[Int]] = List(List(8, 9), List(6, 11), List(4, 11), List(9, 12))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to maximize the given two tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/260", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n     *\n     * >>> newmanPrime(3)\n     * 7\n     * >>> newmanPrime(4)\n     * 17\n     * >>> newmanPrime(5)\n     * 41\n     */\n    def newmanPrime(n : Int) : Int = {\n", "entry_point": "newmanPrime", "test": "\n\n    var arg00 : Int = 3\n    var x0 : Int = newmanPrime(arg00)\n    var v0 : Int = 7\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var x1 : Int = newmanPrime(arg10)\n    var v1 : Int = 17\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var x2 : Int = newmanPrime(arg20)\n    var v2 : Int = 41\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/261", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to perform mathematical division operation across the given tuples.\n     *\n     * >>> divisionElements(List(10, 4, 6, 9), List(5, 2, 3, 3))\n     * List(2, 2, 2, 3)\n     * >>> divisionElements(List(12, 6, 8, 16), List(6, 3, 4, 4))\n     * List(2, 2, 2, 4)\n     * >>> divisionElements(List(20, 14, 36, 18), List(5, 7, 6, 9))\n     * List(4, 2, 6, 2)\n     */\n    def divisionElements(testTup1 : List[Int], testTup2 : List[Int]) : List[Int] = {\n", "entry_point": "divisionElements", "test": "\n\n    var arg00 : List[Int] = List(10, 4, 6, 9)\n    var arg01 : List[Int] = List(5, 2, 3, 3)\n    var x0 : List[Int] = divisionElements(arg00, arg01)\n    var v0 : List[Int] = List(2, 2, 2, 3)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(12, 6, 8, 16)\n    var arg11 : List[Int] = List(6, 3, 4, 4)\n    var x1 : List[Int] = divisionElements(arg10, arg11)\n    var v1 : List[Int] = List(2, 2, 2, 4)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(20, 14, 36, 18)\n    var arg21 : List[Int] = List(5, 7, 6, 9)\n    var x2 : List[Int] = divisionElements(arg20, arg21)\n    var v2 : List[Int] = List(4, 2, 6, 2)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to perform mathematical division operation across the given tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/262", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to split a given list into two parts where the length of the first part of the list is given.\n     *\n     * >>> splitTwoParts(List(1, 1, 2, 3, 4, 4, 5, 1), 3)\n     * List(List(1, 1, 2), List(3, 4, 4, 5, 1))\n     * >>> splitTwoParts(List(\"a\", \"b\", \"c\", \"d\"), 2)\n     * List(List(\"a\", \"b\"), List(\"c\", \"d\"))\n     * >>> splitTwoParts(List(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4)\n     * List(List(\"p\", \"y\", \"t\", \"h\"), List(\"o\", \"n\"))\n     */\n    def splitTwoParts(list1 : List[Any], l : Int) : List[List[Any]] = {\n", "entry_point": "splitTwoParts", "test": "\n\n    var arg00 : List[Any] = List(1, 1, 2, 3, 4, 4, 5, 1)\n    var arg01 : Int = 3\n    var x0 : List[List[Any]] = splitTwoParts(arg00, arg01)\n    var v0 : List[List[Any]] = List(List(1, 1, 2), List(3, 4, 4, 5, 1))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(\"\"\"a\"\"\", \"\"\"b\"\"\", \"\"\"c\"\"\", \"\"\"d\"\"\")\n    var arg11 : Int = 2\n    var x1 : List[List[Any]] = splitTwoParts(arg10, arg11)\n    var v1 : List[List[Any]] = List(List(\"\"\"a\"\"\", \"\"\"b\"\"\"), List(\"\"\"c\"\"\", \"\"\"d\"\"\"))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(\"\"\"p\"\"\", \"\"\"y\"\"\", \"\"\"t\"\"\", \"\"\"h\"\"\", \"\"\"o\"\"\", \"\"\"n\"\"\")\n    var arg21 : Int = 4\n    var x2 : List[List[Any]] = splitTwoParts(arg20, arg21)\n    var v2 : List[List[Any]] = List(List(\"\"\"p\"\"\", \"\"\"y\"\"\", \"\"\"t\"\"\", \"\"\"h\"\"\"), List(\"\"\"o\"\"\", \"\"\"n\"\"\"))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to split a given list into two parts where the length of the first part of the list is given.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/263", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to merge two dictionaries.\n     *\n     * >>> mergeDict(Map(\"a\"->100, \"b\"->200), Map(\"x\"->300, \"y\"->200))\n     * Map(\"x\"->300, \"y\"->200, \"a\"->100, \"b\"->200)\n     * >>> mergeDict(Map(\"a\"->900, \"b\"->900, \"d\"->900), Map(\"a\"->900, \"b\"->900, \"d\"->900))\n     * Map(\"a\"->900, \"b\"->900, \"d\"->900)\n     * >>> mergeDict(Map(\"a\"->10, \"b\"->20), Map(\"x\"->30, \"y\"->40))\n     * Map(\"x\"->30, \"y\"->40, \"a\"->10, \"b\"->20)\n     */\n    def mergeDict(d1 : Map[String, Int], d2 : Map[String, Int]) : Map[String, Int] = {\n", "entry_point": "mergeDict", "test": "\n\n    var arg00 : Map[String, Int] = Map(\"\"\"a\"\"\" -> 100, \"\"\"b\"\"\" -> 200)\n    var arg01 : Map[String, Int] = Map(\"\"\"x\"\"\" -> 300, \"\"\"y\"\"\" -> 200)\n    var x0 : Map[String, Int] = mergeDict(arg00, arg01)\n    var v0 : Map[String, Int] = Map(\"\"\"x\"\"\" -> 300, \"\"\"y\"\"\" -> 200, \"\"\"a\"\"\" -> 100, \"\"\"b\"\"\" -> 200)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Map[String, Int] = Map(\"\"\"a\"\"\" -> 900, \"\"\"b\"\"\" -> 900, \"\"\"d\"\"\" -> 900)\n    var arg11 : Map[String, Int] = Map(\"\"\"a\"\"\" -> 900, \"\"\"b\"\"\" -> 900, \"\"\"d\"\"\" -> 900)\n    var x1 : Map[String, Int] = mergeDict(arg10, arg11)\n    var v1 : Map[String, Int] = Map(\"\"\"a\"\"\" -> 900, \"\"\"b\"\"\" -> 900, \"\"\"d\"\"\" -> 900)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Map[String, Int] = Map(\"\"\"a\"\"\" -> 10, \"\"\"b\"\"\" -> 20)\n    var arg21 : Map[String, Int] = Map(\"\"\"x\"\"\" -> 30, \"\"\"y\"\"\" -> 40)\n    var x2 : Map[String, Int] = mergeDict(arg20, arg21)\n    var v2 : Map[String, Int] = Map(\"\"\"x\"\"\" -> 30, \"\"\"y\"\"\" -> 40, \"\"\"a\"\"\" -> 10, \"\"\"b\"\"\" -> 20)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to merge two dictionaries.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/264", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate a dog's age in dog's years.\n     *\n     * >>> dogAge(12)\n     * 61\n     * >>> dogAge(15)\n     * 73\n     * >>> dogAge(24)\n     * 109\n     */\n    def dogAge(hAge : Int) : Int = {\n", "entry_point": "dogAge", "test": "\n\n    var arg00 : Int = 12\n    var x0 : Int = dogAge(arg00)\n    var v0 : Int = 61\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 15\n    var x1 : Int = dogAge(arg10)\n    var v1 : Int = 73\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 24\n    var x2 : Int = dogAge(arg20)\n    var v2 : Int = 109\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate a dog's age in dog's years.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/265", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to split a list for every nth element.\n     *\n     * >>> listSplit(List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"), 3)\n     * List(List(\"a\", \"d\", \"g\", \"j\", \"m\"), List(\"b\", \"e\", \"h\", \"k\", \"n\"), List(\"c\", \"f\", \"i\", \"l\"))\n     * >>> listSplit(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), 3)\n     * List(List(1, 4, 7, 10, 13), List(2, 5, 8, 11, 14), List(3, 6, 9, 12))\n     * >>> listSplit(List(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"), 2)\n     * List(List(\"python\", \"C\", \"DBMS\"), List(\"java\", \"C++\", \"SQL\"))\n     */\n    def listSplit(s : List[Any], step : Int) : List[List[Any]] = {\n", "entry_point": "listSplit", "test": "\n\n    var arg00 : List[Any] = List(\"\"\"a\"\"\", \"\"\"b\"\"\", \"\"\"c\"\"\", \"\"\"d\"\"\", \"\"\"e\"\"\", \"\"\"f\"\"\", \"\"\"g\"\"\", \"\"\"h\"\"\", \"\"\"i\"\"\", \"\"\"j\"\"\", \"\"\"k\"\"\", \"\"\"l\"\"\", \"\"\"m\"\"\", \"\"\"n\"\"\")\n    var arg01 : Int = 3\n    var x0 : List[List[Any]] = listSplit(arg00, arg01)\n    var v0 : List[List[Any]] = List(List(\"\"\"a\"\"\", \"\"\"d\"\"\", \"\"\"g\"\"\", \"\"\"j\"\"\", \"\"\"m\"\"\"), List(\"\"\"b\"\"\", \"\"\"e\"\"\", \"\"\"h\"\"\", \"\"\"k\"\"\", \"\"\"n\"\"\"), List(\"\"\"c\"\"\", \"\"\"f\"\"\", \"\"\"i\"\"\", \"\"\"l\"\"\"))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)\n    var arg11 : Int = 3\n    var x1 : List[List[Any]] = listSplit(arg10, arg11)\n    var v1 : List[List[Any]] = List(List(1, 4, 7, 10, 13), List(2, 5, 8, 11, 14), List(3, 6, 9, 12))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(\"\"\"python\"\"\", \"\"\"java\"\"\", \"\"\"C\"\"\", \"\"\"C++\"\"\", \"\"\"DBMS\"\"\", \"\"\"SQL\"\"\")\n    var arg21 : Int = 2\n    var x2 : List[List[Any]] = listSplit(arg20, arg21)\n    var v2 : List[List[Any]] = List(List(\"\"\"python\"\"\", \"\"\"C\"\"\", \"\"\"DBMS\"\"\"), List(\"\"\"java\"\"\", \"\"\"C++\"\"\", \"\"\"SQL\"\"\"))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to split a list for every nth element.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/266", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the lateral surface area of a cube.\n     *\n     * >>> lateralsurfaceCube(5)\n     * 100\n     * >>> lateralsurfaceCube(9)\n     * 324\n     * >>> lateralsurfaceCube(10)\n     * 400\n     */\n    def lateralsurfaceCube(l : Int) : Int = {\n", "entry_point": "lateralsurfaceCube", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Int = lateralsurfaceCube(arg00)\n    var v0 : Int = 100\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 9\n    var x1 : Int = lateralsurfaceCube(arg10)\n    var v1 : Int = 324\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 10\n    var x2 : Int = lateralsurfaceCube(arg20)\n    var v2 : Int = 400\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the lateral surface area of a cube.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/267", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of squares of first n odd natural numbers.\n     *\n     * >>> squareSum(2)\n     * 10\n     * >>> squareSum(3)\n     * 35\n     * >>> squareSum(4)\n     * 84\n     */\n    def squareSum(n : Int) : Int = {\n", "entry_point": "squareSum", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = squareSum(arg00)\n    var v0 : Int = 10\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var x1 : Int = squareSum(arg10)\n    var v1 : Int = 35\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var x2 : Int = squareSum(arg20)\n    var v2 : Int = 84\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of squares of first n odd natural numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/268", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the n'th star number.\n     *\n     * >>> findStarNum(3)\n     * 37\n     * >>> findStarNum(4)\n     * 73\n     * >>> findStarNum(5)\n     * 121\n     */\n    def findStarNum(n : Int) : Int = {\n", "entry_point": "findStarNum", "test": "\n\n    var arg00 : Int = 3\n    var x0 : Int = findStarNum(arg00)\n    var v0 : Int = 37\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var x1 : Int = findStarNum(arg10)\n    var v1 : Int = 73\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var x2 : Int = findStarNum(arg20)\n    var v2 : Int = 121\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the n'th star number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/269", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the ascii value of a character.\n     *\n     * >>> asciiValue(\"A\")\n     * 65\n     * >>> asciiValue(\"R\")\n     * 82\n     * >>> asciiValue(\"S\")\n     * 83\n     */\n    def asciiValue(k : String) : Int = {\n", "entry_point": "asciiValue", "test": "\n\n    var arg00 : String = \"\"\"A\"\"\"\n    var x0 : Int = asciiValue(arg00)\n    var v0 : Int = 65\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"R\"\"\"\n    var x1 : Int = asciiValue(arg10)\n    var v1 : Int = 82\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"S\"\"\"\n    var x2 : Int = asciiValue(arg20)\n    var v2 : Int = 83\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the ascii value of a character.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/270", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of even numbers at even positions.\n     *\n     * >>> sumEvenAndEvenIndex(List(5, 6, 12, 1, 18, 8), 6)\n     * 30\n     * >>> sumEvenAndEvenIndex(List(3, 20, 17, 9, 2, 10, 18, 13, 6, 18), 10)\n     * 26\n     * >>> sumEvenAndEvenIndex(List(5, 6, 12, 1), 4)\n     * 12\n     */\n    def sumEvenAndEvenIndex(arr : List[Int], n : Int) : Int = {\n", "entry_point": "sumEvenAndEvenIndex", "test": "\n\n    var arg00 : List[Int] = List(5, 6, 12, 1, 18, 8)\n    var arg01 : Int = 6\n    var x0 : Int = sumEvenAndEvenIndex(arg00, arg01)\n    var v0 : Int = 30\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(3, 20, 17, 9, 2, 10, 18, 13, 6, 18)\n    var arg11 : Int = 10\n    var x1 : Int = sumEvenAndEvenIndex(arg10, arg11)\n    var v1 : Int = 26\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(5, 6, 12, 1)\n    var arg21 : Int = 4\n    var x2 : Int = sumEvenAndEvenIndex(arg20, arg21)\n    var v2 : Int = 12\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of even numbers at even positions.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/271", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of fifth power of first n even natural numbers.\n     *\n     * >>> evenPowerSum(2)\n     * 1056\n     * >>> evenPowerSum(3)\n     * 8832\n     * >>> evenPowerSum(1)\n     * 32\n     */\n    def evenPowerSum(n : Int) : Int = {\n", "entry_point": "evenPowerSum", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = evenPowerSum(arg00)\n    var v0 : Int = 1056\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var x1 : Int = evenPowerSum(arg10)\n    var v1 : Int = 8832\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var x2 : Int = evenPowerSum(arg20)\n    var v2 : Int = 32\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of fifth power of first n even natural numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/272", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to perfom the rear element extraction from list of tuples records.\n     *\n     * >>> rearExtract(List(List(1, \"Rash\", 21), List(2, \"Varsha\", 20), List(3, \"Kil\", 19)))\n     * List(21, 20, 19)\n     * >>> rearExtract(List(List(1, \"Sai\", 36), List(2, \"Ayesha\", 25), List(3, \"Salman\", 45)))\n     * List(36, 25, 45)\n     * >>> rearExtract(List(List(1, \"Sudeep\", 14), List(2, \"Vandana\", 36), List(3, \"Dawood\", 56)))\n     * List(14, 36, 56)\n     */\n    def rearExtract(testList : List[List[Any]]) : List[Int] = {\n", "entry_point": "rearExtract", "test": "\n\n    var arg00 : List[List[Any]] = List(List(1, \"\"\"Rash\"\"\", 21), List(2, \"\"\"Varsha\"\"\", 20), List(3, \"\"\"Kil\"\"\", 19))\n    var x0 : List[Int] = rearExtract(arg00)\n    var v0 : List[Int] = List(21, 20, 19)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(1, \"\"\"Sai\"\"\", 36), List(2, \"\"\"Ayesha\"\"\", 25), List(3, \"\"\"Salman\"\"\", 45))\n    var x1 : List[Int] = rearExtract(arg10)\n    var v1 : List[Int] = List(36, 25, 45)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(1, \"\"\"Sudeep\"\"\", 14), List(2, \"\"\"Vandana\"\"\", 36), List(3, \"\"\"Dawood\"\"\", 56))\n    var x2 : List[Int] = rearExtract(arg20)\n    var v2 : List[Int] = List(14, 36, 56)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to perfom the rear element extraction from list of tuples records.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/273", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to substract the contents of one tuple with corresponding index of other tuple.\n     *\n     * >>> substractElements(List(10, 4, 5), List(2, 5, 18))\n     * List(8, -1, -13)\n     * >>> substractElements(List(11, 2, 3), List(24, 45, 16))\n     * List(-13, -43, -13)\n     * >>> substractElements(List(7, 18, 9), List(10, 11, 12))\n     * List(-3, 7, -3)\n     */\n    def substractElements(testTup1 : List[Int], testTup2 : List[Int]) : List[Int] = {\n", "entry_point": "substractElements", "test": "\n\n    var arg00 : List[Int] = List(10, 4, 5)\n    var arg01 : List[Int] = List(2, 5, 18)\n    var x0 : List[Int] = substractElements(arg00, arg01)\n    var v0 : List[Int] = List(8, -1, -13)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(11, 2, 3)\n    var arg11 : List[Int] = List(24, 45, 16)\n    var x1 : List[Int] = substractElements(arg10, arg11)\n    var v1 : List[Int] = List(-13, -43, -13)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(7, 18, 9)\n    var arg21 : List[Int] = List(10, 11, 12)\n    var x2 : List[Int] = substractElements(arg20, arg21)\n    var v2 : List[Int] = List(-3, 7, -3)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to substract the contents of one tuple with corresponding index of other tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/274", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find sum of even index binomial coefficients.\n     *\n     * >>> evenBinomialCoeffSum(4)\n     * 8\n     * >>> evenBinomialCoeffSum(6)\n     * 32\n     * >>> evenBinomialCoeffSum(2)\n     * 2\n     */\n    def evenBinomialCoeffSum(n : Int) : Int = {\n", "entry_point": "evenBinomialCoeffSum", "test": "\n\n    var arg00 : Int = 4\n    var x0 : Int = evenBinomialCoeffSum(arg00)\n    var v0 : Int = 8\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 6\n    var x1 : Int = evenBinomialCoeffSum(arg10)\n    var v1 : Int = 32\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var x2 : Int = evenBinomialCoeffSum(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find sum of even index binomial coefficients.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/275", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the position of the last removed element from the given array.\n     *\n     * >>> getPosition(List(2, 5, 4), 3, 2)\n     * 2\n     * >>> getPosition(List(4, 3), 2, 2)\n     * 2\n     * >>> getPosition(List(1, 2, 3, 4), 4, 1)\n     * 4\n     */\n    def getPosition(a : List[Int], n : Int, m : Int) : Int = {\n", "entry_point": "getPosition", "test": "\n\n    var arg00 : List[Int] = List(2, 5, 4)\n    var arg01 : Int = 3\n    var arg02 : Int = 2\n    var x0 : Int = getPosition(arg00, arg01, arg02)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 3)\n    var arg11 : Int = 2\n    var arg12 : Int = 2\n    var x1 : Int = getPosition(arg10, arg11, arg12)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4)\n    var arg21 : Int = 4\n    var arg22 : Int = 1\n    var x2 : Int = getPosition(arg20, arg21, arg22)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the position of the last removed element from the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/276", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the volume of a cylinder.\n     *\n     * >>> volumeCylinder(10, 5)\n     * 1570.7500000000002\n     * >>> volumeCylinder(4, 5)\n     * 251.32000000000002\n     * >>> volumeCylinder(4, 10)\n     * 502.64000000000004\n     */\n    def volumeCylinder(r : Int, h : Int) : Double = {\n", "entry_point": "volumeCylinder", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 5\n    var x0 : Double = volumeCylinder(arg00, arg01)\n    var v0 : Double = 1570.7500000000002\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var arg11 : Int = 5\n    var x1 : Double = volumeCylinder(arg10, arg11)\n    var v1 : Double = 251.32000000000002\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var arg21 : Int = 10\n    var x2 : Double = volumeCylinder(arg20, arg21)\n    var v2 : Double = 502.64000000000004\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the volume of a cylinder.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/277", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to filter a dictionary based on values.\n     *\n     * >>> dictFilter(Map(\"Cierra Vega\"->175, \"Alden Cantrell\"->180, \"Kierra Gentry\"->165, \"Pierre Cox\"->190), 170)\n     * Map(\"Cierra Vega\"->175, \"Alden Cantrell\"->180, \"Pierre Cox\"->190)\n     * >>> dictFilter(Map(\"Cierra Vega\"->175, \"Alden Cantrell\"->180, \"Kierra Gentry\"->165, \"Pierre Cox\"->190), 180)\n     * Map(\"Alden Cantrell\"->180, \"Pierre Cox\"->190)\n     * >>> dictFilter(Map(\"Cierra Vega\"->175, \"Alden Cantrell\"->180, \"Kierra Gentry\"->165, \"Pierre Cox\"->190), 190)\n     * Map(\"Pierre Cox\"->190)\n     */\n    def dictFilter(dict : Map[String, Int], n : Int) : Map[String, Int] = {\n", "entry_point": "dictFilter", "test": "\n\n    var arg00 : Map[String, Int] = Map(\"\"\"Cierra Vega\"\"\" -> 175, \"\"\"Alden Cantrell\"\"\" -> 180, \"\"\"Kierra Gentry\"\"\" -> 165, \"\"\"Pierre Cox\"\"\" -> 190)\n    var arg01 : Int = 170\n    var x0 : Map[String, Int] = dictFilter(arg00, arg01)\n    var v0 : Map[String, Int] = Map(\"\"\"Cierra Vega\"\"\" -> 175, \"\"\"Alden Cantrell\"\"\" -> 180, \"\"\"Pierre Cox\"\"\" -> 190)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Map[String, Int] = Map(\"\"\"Cierra Vega\"\"\" -> 175, \"\"\"Alden Cantrell\"\"\" -> 180, \"\"\"Kierra Gentry\"\"\" -> 165, \"\"\"Pierre Cox\"\"\" -> 190)\n    var arg11 : Int = 180\n    var x1 : Map[String, Int] = dictFilter(arg10, arg11)\n    var v1 : Map[String, Int] = Map(\"\"\"Alden Cantrell\"\"\" -> 180, \"\"\"Pierre Cox\"\"\" -> 190)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Map[String, Int] = Map(\"\"\"Cierra Vega\"\"\" -> 175, \"\"\"Alden Cantrell\"\"\" -> 180, \"\"\"Kierra Gentry\"\"\" -> 165, \"\"\"Pierre Cox\"\"\" -> 190)\n    var arg21 : Int = 190\n    var x2 : Map[String, Int] = dictFilter(arg20, arg21)\n    var v2 : Map[String, Int] = Map(\"\"\"Pierre Cox\"\"\" -> 190)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to filter a dictionary based on values.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/278", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the element count that occurs before the record in the given tuple.\n     *\n     * >>> countFirstElements(List(1, 5, 7, List(4, 6), 10))\n     * 3\n     * >>> countFirstElements(List(2, 9, List(5, 7), 11))\n     * 2\n     * >>> countFirstElements(List(11, 15, 5, 8, List(2, 3), 8))\n     * 4\n     */\n    def countFirstElements(testTup : List[Any]) : Int = {\n", "entry_point": "countFirstElements", "test": "\n\n    var arg00 : List[Any] = List(1, 5, 7, List(4, 6), 10)\n    var x0 : Int = countFirstElements(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(2, 9, List(5, 7), 11)\n    var x1 : Int = countFirstElements(arg10)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(11, 15, 5, 8, List(2, 3), 8)\n    var x2 : Int = countFirstElements(arg20)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the element count that occurs before the record in the given tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/279", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the nth decagonal number.\n     *\n     * >>> isNumDecagonal(3)\n     * 27\n     * >>> isNumDecagonal(7)\n     * 175\n     * >>> isNumDecagonal(10)\n     * 370\n     */\n    def isNumDecagonal(n : Int) : Int = {\n", "entry_point": "isNumDecagonal", "test": "\n\n    var arg00 : Int = 3\n    var x0 : Int = isNumDecagonal(arg00)\n    var v0 : Int = 27\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 7\n    var x1 : Int = isNumDecagonal(arg10)\n    var v1 : Int = 175\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 10\n    var x2 : Int = isNumDecagonal(arg20)\n    var v2 : Int = 370\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the nth decagonal number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/280", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to search an element in the given array by using sequential search.\n     *\n     * >>> sequentialSearch(List(11, 23, 58, 31, 56, 77, 43, 12, 65, 19), 31)\n     * List(true, 3)\n     * >>> sequentialSearch(List(12, 32, 45, 62, 35, 47, 44, 61), 61)\n     * List(true, 7)\n     * >>> sequentialSearch(List(9, 10, 17, 19, 22, 39, 48, 56), 48)\n     * List(true, 6)\n     */\n    def sequentialSearch(dlist : List[Int], item : Int) : List[Any] = {\n", "entry_point": "sequentialSearch", "test": "\n\n    var arg00 : List[Int] = List(11, 23, 58, 31, 56, 77, 43, 12, 65, 19)\n    var arg01 : Int = 31\n    var x0 : List[Any] = sequentialSearch(arg00, arg01)\n    var v0 : List[Any] = List(true, 3)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(12, 32, 45, 62, 35, 47, 44, 61)\n    var arg11 : Int = 61\n    var x1 : List[Any] = sequentialSearch(arg10, arg11)\n    var v1 : List[Any] = List(true, 7)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(9, 10, 17, 19, 22, 39, 48, 56)\n    var arg21 : Int = 48\n    var x2 : List[Any] = sequentialSearch(arg20, arg21)\n    var v2 : List[Any] = List(true, 6)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to search an element in the given array by using sequential search.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/281", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check if the elements of a given list are unique or not.\n     *\n     * >>> allUnique(List(1, 2, 3))\n     * true\n     * >>> allUnique(List(1, 2, 1, 2))\n     * false\n     * >>> allUnique(List(1, 2, 3, 4, 5))\n     * true\n     */\n    def allUnique(testList : List[Int]) : Boolean = {\n", "entry_point": "allUnique", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3)\n    var x0 : Boolean = allUnique(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 1, 2)\n    var x1 : Boolean = allUnique(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4, 5)\n    var x2 : Boolean = allUnique(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check if the elements of a given list are unique or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/282", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to substaract two lists using map and lambda function.\n     *\n     * >>> subList(List(1, 2, 3), List(4, 5, 6))\n     * List(-3, -3, -3)\n     * >>> subList(List(1, 2), List(3, 4))\n     * List(-2, -2)\n     * >>> subList(List(90, 120), List(50, 70))\n     * List(40, 50)\n     */\n    def subList(nums1 : List[Int], nums2 : List[Int]) : List[Int] = {\n", "entry_point": "subList", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3)\n    var arg01 : List[Int] = List(4, 5, 6)\n    var x0 : List[Int] = subList(arg00, arg01)\n    var v0 : List[Int] = List(-3, -3, -3)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2)\n    var arg11 : List[Int] = List(3, 4)\n    var x1 : List[Int] = subList(arg10, arg11)\n    var v1 : List[Int] = List(-2, -2)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(90, 120)\n    var arg21 : List[Int] = List(50, 70)\n    var x2 : List[Int] = subList(arg20, arg21)\n    var v2 : List[Int] = List(40, 50)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to substaract two lists using map and lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/283", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the frequency of each digit is less than or equal to the digit itself.\n     *\n     * >>> validate(1234)\n     * true\n     * >>> validate(51241)\n     * false\n     * >>> validate(321)\n     * true\n     */\n    def validate(n : Int) : Boolean = {\n", "entry_point": "validate", "test": "\n\n    var arg00 : Int = 1234\n    var x0 : Boolean = validate(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 51241\n    var x1 : Boolean = validate(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 321\n    var x2 : Boolean = validate(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the frequency of each digit is less than or equal to the digit itself.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/284", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether all items of a list are equal to a given string.\n     *\n     * >>> checkElement(List(\"green\", \"orange\", \"black\", \"white\"), \"blue\")\n     * false\n     * >>> checkElement(List(1, 2, 3, 4), 7)\n     * false\n     * >>> checkElement(List(\"green\", \"green\", \"green\", \"green\"), \"green\")\n     * true\n     */\n    def checkElement(list : List[Any], element : Any) : Boolean = {\n", "entry_point": "checkElement", "test": "\n\n    var arg00 : List[Any] = List(\"\"\"green\"\"\", \"\"\"orange\"\"\", \"\"\"black\"\"\", \"\"\"white\"\"\")\n    var arg01 : Any = \"\"\"blue\"\"\"\n    var x0 : Boolean = checkElement(arg00, arg01)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(1, 2, 3, 4)\n    var arg11 : Any = 7\n    var x1 : Boolean = checkElement(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(\"\"\"green\"\"\", \"\"\"green\"\"\", \"\"\"green\"\"\", \"\"\"green\"\"\")\n    var arg21 : Any = \"\"\"green\"\"\"\n    var x2 : Boolean = checkElement(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether all items of a list are equal to a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/285", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function that matches a string that has an a followed by two to three 'b'.\n     *\n     * >>> textMatchTwoThree(\"ac\")\n     * \"Not matched!\"\n     * >>> textMatchTwoThree(\"dc\")\n     * \"Not matched!\"\n     * >>> textMatchTwoThree(\"abbbba\")\n     * \"Found a match!\"\n     */\n    def textMatchTwoThree(text : String) : String = {\n", "entry_point": "textMatchTwoThree", "test": "\n\n    var arg00 : String = \"\"\"ac\"\"\"\n    var x0 : String = textMatchTwoThree(arg00)\n    var v0 : String = \"\"\"Not matched!\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"dc\"\"\"\n    var x1 : String = textMatchTwoThree(arg10)\n    var v1 : String = \"\"\"Not matched!\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"abbbba\"\"\"\n    var x2 : String = textMatchTwoThree(arg20)\n    var v2 : String = \"\"\"Found a match!\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function that matches a string that has an a followed by two to three 'b'.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/286", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n     *\n     * >>> maxSubArraySumRepeated(List(10, 20, -30, -1), 4, 3)\n     * 30\n     * >>> maxSubArraySumRepeated(List(-1, 10, 20), 3, 2)\n     * 59\n     * >>> maxSubArraySumRepeated(List(-1, -2, -3), 3, 3)\n     * -1\n     */\n    def maxSubArraySumRepeated(a : List[Int], n : Int, k : Int) : Int = {\n", "entry_point": "maxSubArraySumRepeated", "test": "\n\n    var arg00 : List[Int] = List(10, 20, -30, -1)\n    var arg01 : Int = 4\n    var arg02 : Int = 3\n    var x0 : Int = maxSubArraySumRepeated(arg00, arg01, arg02)\n    var v0 : Int = 30\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(-1, 10, 20)\n    var arg11 : Int = 3\n    var arg12 : Int = 2\n    var x1 : Int = maxSubArraySumRepeated(arg10, arg11, arg12)\n    var v1 : Int = 59\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(-1, -2, -3)\n    var arg21 : Int = 3\n    var arg22 : Int = 3\n    var x2 : Int = maxSubArraySumRepeated(arg20, arg21, arg22)\n    var v2 : Int = -1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/287", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of squares of first n even natural numbers.\n     *\n     * >>> squareSum(2)\n     * 20\n     * >>> squareSum(3)\n     * 56\n     * >>> squareSum(4)\n     * 120\n     */\n    def squareSum(n : Int) : Int = {\n", "entry_point": "squareSum", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = squareSum(arg00)\n    var v0 : Int = 20\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var x1 : Int = squareSum(arg10)\n    var v1 : Int = 56\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var x2 : Int = squareSum(arg20)\n    var v2 : Int = 120\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of squares of first n even natural numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/288", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count array elements having modular inverse under given prime number p equal to itself.\n     *\n     * >>> modularInverse(List(1, 6, 4, 5), 4, 7)\n     * 2\n     * >>> modularInverse(List(1, 3, 8, 12, 12), 5, 13)\n     * 3\n     * >>> modularInverse(List(2, 3, 4, 5), 4, 6)\n     * 1\n     */\n    def modularInverse(arr : List[Int], n : Int, p : Int) : Int = {\n", "entry_point": "modularInverse", "test": "\n\n    var arg00 : List[Int] = List(1, 6, 4, 5)\n    var arg01 : Int = 4\n    var arg02 : Int = 7\n    var x0 : Int = modularInverse(arg00, arg01, arg02)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 3, 8, 12, 12)\n    var arg11 : Int = 5\n    var arg12 : Int = 13\n    var x1 : Int = modularInverse(arg10, arg11, arg12)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 3, 4, 5)\n    var arg21 : Int = 4\n    var arg22 : Int = 6\n    var x2 : Int = modularInverse(arg20, arg21, arg22)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count array elements having modular inverse under given prime number p equal to itself.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/289", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to calculate the number of odd days in a given year.\n     *\n     * >>> oddDays(100)\n     * 5\n     * >>> oddDays(50)\n     * 6\n     * >>> oddDays(75)\n     * 2\n     */\n    def oddDays(n : Int) : Int = {\n", "entry_point": "oddDays", "test": "\n\n    var arg00 : Int = 100\n    var x0 : Int = oddDays(arg00)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 50\n    var x1 : Int = oddDays(arg10)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 75\n    var x2 : Int = oddDays(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to calculate the number of odd days in a given year.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/290", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the list of lists with maximum length.\n     *\n     * >>> maxLength(List(List(0), List(1, 3), List(5, 7), List(9, 11), List(13, 15, 17)))\n     * List(3, List(13, 15, 17))\n     * >>> maxLength(List(List(1), List(5, 7), List(10, 12, 14, 15)))\n     * List(4, List(10, 12, 14, 15))\n     * >>> maxLength(List(List(5), List(15, 20, 25)))\n     * List(3, List(15, 20, 25))\n     */\n    def maxLength(list1 : List[List[Int]]) : List[Any] = {\n", "entry_point": "maxLength", "test": "\n\n    var arg00 : List[List[Int]] = List(List(0), List(1, 3), List(5, 7), List(9, 11), List(13, 15, 17))\n    var x0 : List[Any] = maxLength(arg00)\n    var v0 : List[Any] = List(3, List(13, 15, 17))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1), List(5, 7), List(10, 12, 14, 15))\n    var x1 : List[Any] = maxLength(arg10)\n    var v1 : List[Any] = List(4, List(10, 12, 14, 15))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(5), List(15, 20, 25))\n    var x2 : List[Any] = maxLength(arg20)\n    var v2 : List[Any] = List(3, List(15, 20, 25))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the list of lists with maximum length.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/291", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n     *\n     * >>> countNoOfWays(2, 4)\n     * 16\n     * >>> countNoOfWays(3, 2)\n     * 6\n     * >>> countNoOfWays(4, 4)\n     * 228\n     */\n    def countNoOfWays(n : Int, k : Int) : Int = {\n", "entry_point": "countNoOfWays", "test": "\n\n    var arg00 : Int = 2\n    var arg01 : Int = 4\n    var x0 : Int = countNoOfWays(arg00, arg01)\n    var v0 : Int = 16\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var arg11 : Int = 2\n    var x1 : Int = countNoOfWays(arg10, arg11)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var arg21 : Int = 4\n    var x2 : Int = countNoOfWays(arg20, arg21)\n    var v2 : Int = 228\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/292", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find quotient of two numbers.\n     *\n     * >>> find(10, 3)\n     * 3\n     * >>> find(4, 2)\n     * 2\n     * >>> find(20, 5)\n     * 4\n     */\n    def find(n : Int, m : Int) : Int = {\n", "entry_point": "find", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 3\n    var x0 : Int = find(arg00, arg01)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var arg11 : Int = 2\n    var x1 : Int = find(arg10, arg11)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 20\n    var arg21 : Int = 5\n    var x2 : Int = find(arg20, arg21)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find quotient of two numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/293", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the third side of a right angled triangle.\n     *\n     * >>> othersideRightangle(7, 8)\n     * 10.63014581273465\n     * >>> othersideRightangle(3, 4)\n     * 5\n     * >>> othersideRightangle(7, 15)\n     * 16.55294535724685\n     */\n    def othersideRightangle(w : Int, h : Int) : Double = {\n", "entry_point": "othersideRightangle", "test": "\n\n    var arg00 : Int = 7\n    var arg01 : Int = 8\n    var x0 : Double = othersideRightangle(arg00, arg01)\n    var v0 : Double = 10.63014581273465\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var arg11 : Int = 4\n    var x1 : Double = othersideRightangle(arg10, arg11)\n    var v1 : Double = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 7\n    var arg21 : Int = 15\n    var x2 : Double = othersideRightangle(arg20, arg21)\n    var v2 : Double = 16.55294535724685\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the third side of a right angled triangle.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/294", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the maximum value in a given heterogeneous list.\n     *\n     * >>> maxVal(List(\"Python\", 3, 2, 4, 5, \"version\"))\n     * 5\n     * >>> maxVal(List(\"Python\", 15, 20, 25))\n     * 25\n     * >>> maxVal(List(\"Python\", 30, 20, 40, 50, \"version\"))\n     * 50\n     */\n    def maxVal(listval : List[Any]) : Int = {\n", "entry_point": "maxVal", "test": "\n\n    var arg00 : List[Any] = List(\"\"\"Python\"\"\", 3, 2, 4, 5, \"\"\"version\"\"\")\n    var x0 : Int = maxVal(arg00)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(\"\"\"Python\"\"\", 15, 20, 25)\n    var x1 : Int = maxVal(arg10)\n    var v1 : Int = 25\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(\"\"\"Python\"\"\", 30, 20, 40, 50, \"\"\"version\"\"\")\n    var x2 : Int = maxVal(arg20)\n    var v2 : Int = 50\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the maximum value in a given heterogeneous list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/295", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to return the sum of all divisors of a number.\n     *\n     * >>> sumDiv(8)\n     * 7\n     * >>> sumDiv(12)\n     * 16\n     * >>> sumDiv(7)\n     * 1\n     */\n    def sumDiv(number : Int) : Int = {\n", "entry_point": "sumDiv", "test": "\n\n    var arg00 : Int = 8\n    var x0 : Int = sumDiv(arg00)\n    var v0 : Int = 7\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 12\n    var x1 : Int = sumDiv(arg10)\n    var v1 : Int = 16\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 7\n    var x2 : Int = sumDiv(arg20)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to return the sum of all divisors of a number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/296", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count inversions in an array.\n     *\n     * >>> getInvCount(List(1, 20, 6, 4, 5), 5)\n     * 5\n     * >>> getInvCount(List(1, 2, 1), 3)\n     * 1\n     * >>> getInvCount(List(1, 2, 5, 6, 1), 5)\n     * 3\n     */\n    def getInvCount(arr : List[Int], n : Int) : Int = {\n", "entry_point": "getInvCount", "test": "\n\n    var arg00 : List[Int] = List(1, 20, 6, 4, 5)\n    var arg01 : Int = 5\n    var x0 : Int = getInvCount(arg00, arg01)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 1)\n    var arg11 : Int = 3\n    var x1 : Int = getInvCount(arg10, arg11)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 5, 6, 1)\n    var arg21 : Int = 5\n    var x2 : Int = getInvCount(arg20, arg21)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count inversions in an array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/297", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to flatten a given nested list structure.\n     *\n     * >>> flattenList(List(0, 10, List(20, 30), 40, 50, List(60, 70, 80), List(90, 100, 110, 120)))\n     * List(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)\n     * >>> flattenList(List(List(10, 20), List(40), List(30, 56, 25), List(10, 20), List(33), List(40)))\n     * List(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)\n     * >>> flattenList(List(List(1, 2, 3), List(4, 5, 6), List(10, 11, 12), List(7, 8, 9)))\n     * List(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)\n     */\n    def flattenList(list1 : List[Any]) : List[Int] = {\n", "entry_point": "flattenList", "test": "\n\n    var arg00 : List[Any] = List(0, 10, List(20, 30), 40, 50, List(60, 70, 80), List(90, 100, 110, 120))\n    var x0 : List[Int] = flattenList(arg00)\n    var v0 : List[Int] = List(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(List(10, 20), List(40), List(30, 56, 25), List(10, 20), List(33), List(40))\n    var x1 : List[Int] = flattenList(arg10)\n    var v1 : List[Int] = List(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(List(1, 2, 3), List(4, 5, 6), List(10, 11, 12), List(7, 8, 9))\n    var x2 : List[Int] = flattenList(arg20)\n    var v2 : List[Int] = List(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to flatten a given nested list structure.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/298", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the nested list elements which are present in another list.\n     *\n     * >>> intersectionNestedLists(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), List(List(12, 18, 23, 25, 45), List(7, 11, 19, 24, 28), List(1, 5, 8, 18, 15, 16)))\n     * List(List(12), List(7, 11), List(1, 5, 8))\n     * >>> intersectionNestedLists(List(List(2, 3, 1), List(4, 5), List(6, 8)), List(List(4, 5), List(6, 8)))\n     * List(List(), List())\n     * >>> intersectionNestedLists(List(\"john\", \"amal\", \"joel\", \"george\"), List(List(\"john\"), List(\"jack\", \"john\", \"mary\"), List(\"howard\", \"john\"), List(\"jude\")))\n     * List(List(\"john\"), List(\"john\"), List(\"john\"), List())\n     */\n    def intersectionNestedLists(l1 : List[Any], l2 : List[List[Any]]) : List[List[Any]] = {\n", "entry_point": "intersectionNestedLists", "test": "\n\n    var arg00 : List[Any] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)\n    var arg01 : List[List[Any]] = List(List(12, 18, 23, 25, 45), List(7, 11, 19, 24, 28), List(1, 5, 8, 18, 15, 16))\n    var x0 : List[List[Any]] = intersectionNestedLists(arg00, arg01)\n    var v0 : List[List[Any]] = List(List(12), List(7, 11), List(1, 5, 8))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(List(2, 3, 1), List(4, 5), List(6, 8))\n    var arg11 : List[List[Any]] = List(List(4, 5), List(6, 8))\n    var x1 : List[List[Any]] = intersectionNestedLists(arg10, arg11)\n    var v1 : List[List[Any]] = List(List(), List())\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(\"\"\"john\"\"\", \"\"\"amal\"\"\", \"\"\"joel\"\"\", \"\"\"george\"\"\")\n    var arg21 : List[List[Any]] = List(List(\"\"\"john\"\"\"), List(\"\"\"jack\"\"\", \"\"\"john\"\"\", \"\"\"mary\"\"\"), List(\"\"\"howard\"\"\", \"\"\"john\"\"\"), List(\"\"\"jude\"\"\"))\n    var x2 : List[List[Any]] = intersectionNestedLists(arg20, arg21)\n    var v2 : List[List[Any]] = List(List(\"\"\"john\"\"\"), List(\"\"\"john\"\"\"), List(\"\"\"john\"\"\"), List())\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the nested list elements which are present in another list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/299", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate the maximum aggregate from the list of tuples.\n     *\n     * >>> maxAggregate(List(List(\"Juan Whelan\", 90), List(\"Sabah Colley\", 88), List(\"Peter Nichols\", 7), List(\"Juan Whelan\", 122), List(\"Sabah Colley\", 84)))\n     * List(\"Juan Whelan\", 212)\n     * >>> maxAggregate(List(List(\"Juan Whelan\", 50), List(\"Sabah Colley\", 48), List(\"Peter Nichols\", 37), List(\"Juan Whelan\", 22), List(\"Sabah Colley\", 14)))\n     * List(\"Juan Whelan\", 72)\n     * >>> maxAggregate(List(List(\"Juan Whelan\", 10), List(\"Sabah Colley\", 20), List(\"Peter Nichols\", 30), List(\"Juan Whelan\", 40), List(\"Sabah Colley\", 50)))\n     * List(\"Sabah Colley\", 70)\n     */\n    def maxAggregate(stdata : List[List[Any]]) : List[Any] = {\n", "entry_point": "maxAggregate", "test": "\n\n    var arg00 : List[List[Any]] = List(List(\"\"\"Juan Whelan\"\"\", 90), List(\"\"\"Sabah Colley\"\"\", 88), List(\"\"\"Peter Nichols\"\"\", 7), List(\"\"\"Juan Whelan\"\"\", 122), List(\"\"\"Sabah Colley\"\"\", 84))\n    var x0 : List[Any] = maxAggregate(arg00)\n    var v0 : List[Any] = List(\"\"\"Juan Whelan\"\"\", 212)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(\"\"\"Juan Whelan\"\"\", 50), List(\"\"\"Sabah Colley\"\"\", 48), List(\"\"\"Peter Nichols\"\"\", 37), List(\"\"\"Juan Whelan\"\"\", 22), List(\"\"\"Sabah Colley\"\"\", 14))\n    var x1 : List[Any] = maxAggregate(arg10)\n    var v1 : List[Any] = List(\"\"\"Juan Whelan\"\"\", 72)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(\"\"\"Juan Whelan\"\"\", 10), List(\"\"\"Sabah Colley\"\"\", 20), List(\"\"\"Peter Nichols\"\"\", 30), List(\"\"\"Juan Whelan\"\"\", 40), List(\"\"\"Sabah Colley\"\"\", 50))\n    var x2 : List[Any] = maxAggregate(arg20)\n    var v2 : List[Any] = List(\"\"\"Sabah Colley\"\"\", 70)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate the maximum aggregate from the list of tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/300", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n     *\n     * >>> countBinarySeq(1)\n     * 2.0\n     * >>> countBinarySeq(2)\n     * 6.0\n     * >>> countBinarySeq(3)\n     * 20.0\n     */\n    def countBinarySeq(n : Int) : Double = {\n", "entry_point": "countBinarySeq", "test": "\n\n    var arg00 : Int = 1\n    var x0 : Double = countBinarySeq(arg00)\n    var v0 : Double = 2.0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var x1 : Double = countBinarySeq(arg10)\n    var v1 : Double = 6.0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 3\n    var x2 : Double = countBinarySeq(arg20)\n    var v2 : Double = 20.0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/301", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the depth of a dictionary.\n     *\n     * >>> dictDepth(Map(\"a\"->1, \"b\"->Map(\"c\"->Map(\"d\"->Map()))))\n     * 4\n     * >>> dictDepth(Map(\"a\"->1, \"b\"->Map(\"c\"->\"python\")))\n     * 2\n     * >>> dictDepth(Map(1->\"Sun\", 2->Map(3->Map(4->\"Mon\"))))\n     * 3\n     */\n    def dictDepth(d : Map[Any, Any]) : Int = {\n", "entry_point": "dictDepth", "test": "\n\n    var arg00 : Map[Any, Any] = Map(\"\"\"a\"\"\" -> 1, \"\"\"b\"\"\" -> Map(\"\"\"c\"\"\" -> Map(\"\"\"d\"\"\" -> Map())))\n    var x0 : Int = dictDepth(arg00)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Map[Any, Any] = Map(\"\"\"a\"\"\" -> 1, \"\"\"b\"\"\" -> Map(\"\"\"c\"\"\" -> \"\"\"python\"\"\"))\n    var x1 : Int = dictDepth(arg10)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Map[Any, Any] = Map(1 -> \"\"\"Sun\"\"\", 2 -> Map(3 -> Map(4 -> \"\"\"Mon\"\"\")))\n    var x2 : Int = dictDepth(arg20)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the depth of a dictionary.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/302", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the most significant bit number which is also a set bit.\n     *\n     * >>> setBitNumber(6)\n     * 4\n     * >>> setBitNumber(10)\n     * 8\n     * >>> setBitNumber(18)\n     * 16\n     */\n    def setBitNumber(n : Int) : Int = {\n", "entry_point": "setBitNumber", "test": "\n\n    var arg00 : Int = 6\n    var x0 : Int = setBitNumber(arg00)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var x1 : Int = setBitNumber(arg10)\n    var v1 : Int = 8\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 18\n    var x2 : Int = setBitNumber(arg20)\n    var v2 : Int = 16\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the most significant bit number which is also a set bit.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/303", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the count of inversion of two types are same or not.\n     *\n     * >>> solve(List(1, 0, 2), 3)\n     * true\n     * >>> solve(List(1, 2, 0), 3)\n     * false\n     * >>> solve(List(1, 2, 1), 3)\n     * true\n     */\n    def solve(a : List[Int], n : Int) : Boolean = {\n", "entry_point": "solve", "test": "\n\n    var arg00 : List[Int] = List(1, 0, 2)\n    var arg01 : Int = 3\n    var x0 : Boolean = solve(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 0)\n    var arg11 : Int = 3\n    var x1 : Boolean = solve(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 1)\n    var arg21 : Int = 3\n    var x2 : Boolean = solve(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the count of inversion of two types are same or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/304", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find element at a given index after number of rotations.\n     *\n     * >>> findElement(List(1, 2, 3, 4, 5), List(List(0, 2), List(0, 3)), 2, 1)\n     * 3\n     * >>> findElement(List(1, 2, 3, 4), List(List(0, 1), List(0, 2)), 1, 2)\n     * 3\n     * >>> findElement(List(1, 2, 3, 4, 5, 6), List(List(0, 1), List(0, 2)), 1, 1)\n     * 1\n     */\n    def findElement(arr : List[Int], ranges : List[List[Int]], rotations : Int, index : Int) : Int = {\n", "entry_point": "findElement", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5)\n    var arg01 : List[List[Int]] = List(List(0, 2), List(0, 3))\n    var arg02 : Int = 2\n    var arg03 : Int = 1\n    var x0 : Int = findElement(arg00, arg01, arg02, arg03)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4)\n    var arg11 : List[List[Int]] = List(List(0, 1), List(0, 2))\n    var arg12 : Int = 1\n    var arg13 : Int = 2\n    var x1 : Int = findElement(arg10, arg11, arg12, arg13)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4, 5, 6)\n    var arg21 : List[List[Int]] = List(List(0, 1), List(0, 2))\n    var arg22 : Int = 1\n    var arg23 : Int = 1\n    var x2 : Int = findElement(arg20, arg21, arg22, arg23)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find element at a given index after number of rotations.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/305", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to match two words from a list of words starting with letter 'p'.\n     *\n     * >>> startWithp(List(\"Python PHP\", \"Java JavaScript\", \"c c++\"))\n     * List(\"Python\", \"PHP\")\n     * >>> startWithp(List(\"Python Programming\", \"Java Programming\"))\n     * List(\"Python\", \"Programming\")\n     * >>> startWithp(List(\"Pqrst Pqr\", \"qrstuv\"))\n     * List(\"Pqrst\", \"Pqr\")\n     */\n    def startWithp(words : List[String]) : List[String] = {\n", "entry_point": "startWithp", "test": "\n\n    var arg00 : List[String] = List(\"\"\"Python PHP\"\"\", \"\"\"Java JavaScript\"\"\", \"\"\"c c++\"\"\")\n    var x0 : List[String] = startWithp(arg00)\n    var v0 : List[String] = List(\"\"\"Python\"\"\", \"\"\"PHP\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"Python Programming\"\"\", \"\"\"Java Programming\"\"\")\n    var x1 : List[String] = startWithp(arg10)\n    var v1 : List[String] = List(\"\"\"Python\"\"\", \"\"\"Programming\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"Pqrst Pqr\"\"\", \"\"\"qrstuv\"\"\")\n    var x2 : List[String] = startWithp(arg20)\n    var v2 : List[String] = List(\"\"\"Pqrst\"\"\", \"\"\"Pqr\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to match two words from a list of words starting with letter 'p'.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/306", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n     *\n     * >>> maxSumIncreasingSubseq(List(1, 101, 2, 3, 100, 4, 5), 7, 4, 6)\n     * 11\n     * >>> maxSumIncreasingSubseq(List(1, 101, 2, 3, 100, 4, 5), 7, 2, 5)\n     * 7\n     * >>> maxSumIncreasingSubseq(List(11, 15, 19, 21, 26, 28, 31), 7, 2, 4)\n     * 71\n     */\n    def maxSumIncreasingSubseq(a : List[Int], n : Int, index : Int, k : Int) : Int = {\n", "entry_point": "maxSumIncreasingSubseq", "test": "\n\n    var arg00 : List[Int] = List(1, 101, 2, 3, 100, 4, 5)\n    var arg01 : Int = 7\n    var arg02 : Int = 4\n    var arg03 : Int = 6\n    var x0 : Int = maxSumIncreasingSubseq(arg00, arg01, arg02, arg03)\n    var v0 : Int = 11\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 101, 2, 3, 100, 4, 5)\n    var arg11 : Int = 7\n    var arg12 : Int = 2\n    var arg13 : Int = 5\n    var x1 : Int = maxSumIncreasingSubseq(arg10, arg11, arg12, arg13)\n    var v1 : Int = 7\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(11, 15, 19, 21, 26, 28, 31)\n    var arg21 : Int = 7\n    var arg22 : Int = 2\n    var arg23 : Int = 4\n    var x2 : Int = maxSumIncreasingSubseq(arg20, arg21, arg22, arg23)\n    var v2 : Int = 71\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/307", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to get a colon of a tuple.\n     *\n     * >>> colonTuplex(List(\"HELLO\", 5, List(), true), 2, 50)\n     * List(\"HELLO\", 5, List(50), true)\n     * >>> colonTuplex(List(\"HELLO\", 5, List(), true), 2, 100)\n     * List(\"HELLO\", 5, List(100), true)\n     * >>> colonTuplex(List(\"HELLO\", 5, List(), true), 2, 500)\n     * List(\"HELLO\", 5, List(500), true)\n     */\n    def colonTuplex(tuplex : List[Any], m : Int, n : Int) : List[Any] = {\n", "entry_point": "colonTuplex", "test": "\n\n    var arg00 : List[Any] = List(\"\"\"HELLO\"\"\", 5, List(), true)\n    var arg01 : Int = 2\n    var arg02 : Int = 50\n    var x0 : List[Any] = colonTuplex(arg00, arg01, arg02)\n    var v0 : List[Any] = List(\"\"\"HELLO\"\"\", 5, List(50), true)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(\"\"\"HELLO\"\"\", 5, List(), true)\n    var arg11 : Int = 2\n    var arg12 : Int = 100\n    var x1 : List[Any] = colonTuplex(arg10, arg11, arg12)\n    var v1 : List[Any] = List(\"\"\"HELLO\"\"\", 5, List(100), true)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(\"\"\"HELLO\"\"\", 5, List(), true)\n    var arg21 : Int = 2\n    var arg22 : Int = 500\n    var x2 : List[Any] = colonTuplex(arg20, arg21, arg22)\n    var v2 : List[Any] = List(\"\"\"HELLO\"\"\", 5, List(500), true)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to get a colon of a tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/308", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the specified number of largest products from two given lists.\n     *\n     * >>> largeProduct(List(1, 2, 3, 4, 5, 6), List(3, 6, 8, 9, 10, 6), 3)\n     * List(60, 54, 50)\n     * >>> largeProduct(List(1, 2, 3, 4, 5, 6), List(3, 6, 8, 9, 10, 6), 4)\n     * List(60, 54, 50, 48)\n     * >>> largeProduct(List(1, 2, 3, 4, 5, 6), List(3, 6, 8, 9, 10, 6), 5)\n     * List(60, 54, 50, 48, 45)\n     */\n    def largeProduct(nums1 : List[Int], nums2 : List[Int], n : Int) : List[Int] = {\n", "entry_point": "largeProduct", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5, 6)\n    var arg01 : List[Int] = List(3, 6, 8, 9, 10, 6)\n    var arg02 : Int = 3\n    var x0 : List[Int] = largeProduct(arg00, arg01, arg02)\n    var v0 : List[Int] = List(60, 54, 50)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5, 6)\n    var arg11 : List[Int] = List(3, 6, 8, 9, 10, 6)\n    var arg12 : Int = 4\n    var x1 : List[Int] = largeProduct(arg10, arg11, arg12)\n    var v1 : List[Int] = List(60, 54, 50, 48)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4, 5, 6)\n    var arg21 : List[Int] = List(3, 6, 8, 9, 10, 6)\n    var arg22 : Int = 5\n    var x2 : List[Int] = largeProduct(arg20, arg21, arg22)\n    var v2 : List[Int] = List(60, 54, 50, 48, 45)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the specified number of largest products from two given lists.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/309", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the maximum of two numbers.\n     *\n     * >>> maximum(5, 10)\n     * 10\n     * >>> maximum(-1, -2)\n     * -1\n     * >>> maximum(9, 7)\n     * 9\n     */\n    def maximum(a : Int, b : Int) : Int = {\n", "entry_point": "maximum", "test": "\n\n    var arg00 : Int = 5\n    var arg01 : Int = 10\n    var x0 : Int = maximum(arg00, arg01)\n    var v0 : Int = 10\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = -1\n    var arg11 : Int = -2\n    var x1 : Int = maximum(arg10, arg11)\n    var v1 : Int = -1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 9\n    var arg21 : Int = 7\n    var x2 : Int = maximum(arg20, arg21)\n    var v2 : Int = 9\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the maximum of two numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/310", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert a given string to a tuple.\n     *\n     * >>> stringToTuple(\"python 3.0\")\n     * List(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\")\n     * >>> stringToTuple(\"item1\")\n     * List(\"i\", \"t\", \"e\", \"m\", \"1\")\n     * >>> stringToTuple(\"15.10\")\n     * List(\"1\", \"5\", \".\", \"1\", \"0\")\n     */\n    def stringToTuple(str1 : String) : List[String] = {\n", "entry_point": "stringToTuple", "test": "\n\n    var arg00 : String = \"\"\"python 3.0\"\"\"\n    var x0 : List[String] = stringToTuple(arg00)\n    var v0 : List[String] = List(\"\"\"p\"\"\", \"\"\"y\"\"\", \"\"\"t\"\"\", \"\"\"h\"\"\", \"\"\"o\"\"\", \"\"\"n\"\"\", \"\"\"3\"\"\", \"\"\".\"\"\", \"\"\"0\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"item1\"\"\"\n    var x1 : List[String] = stringToTuple(arg10)\n    var v1 : List[String] = List(\"\"\"i\"\"\", \"\"\"t\"\"\", \"\"\"e\"\"\", \"\"\"m\"\"\", \"\"\"1\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"15.10\"\"\"\n    var x2 : List[String] = stringToTuple(arg20)\n    var v2 : List[String] = List(\"\"\"1\"\"\", \"\"\"5\"\"\", \"\"\".\"\"\", \"\"\"1\"\"\", \"\"\"0\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert a given string to a tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/311", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to set the left most unset bit.\n     *\n     * >>> setLeftMostUnsetBit(10)\n     * 14\n     * >>> setLeftMostUnsetBit(12)\n     * 14\n     * >>> setLeftMostUnsetBit(15)\n     * 15\n     */\n    def setLeftMostUnsetBit(n : Int) : Int = {\n", "entry_point": "setLeftMostUnsetBit", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = setLeftMostUnsetBit(arg00)\n    var v0 : Int = 14\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 12\n    var x1 : Int = setLeftMostUnsetBit(arg10)\n    var v1 : Int = 14\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 15\n    var x2 : Int = setLeftMostUnsetBit(arg20)\n    var v2 : Int = 15\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to set the left most unset bit.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/312", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the volume of a cone.\n     *\n     * >>> volumeCone(5, 12)\n     * 314.15926535897927\n     * >>> volumeCone(10, 15)\n     * 1570.7963267948965\n     * >>> volumeCone(19, 17)\n     * 6426.651371693521\n     */\n    def volumeCone(r : Int, h : Int) : Double = {\n", "entry_point": "volumeCone", "test": "\n\n    var arg00 : Int = 5\n    var arg01 : Int = 12\n    var x0 : Double = volumeCone(arg00, arg01)\n    var v0 : Double = 314.15926535897927\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var arg11 : Int = 15\n    var x1 : Double = volumeCone(arg10, arg11)\n    var v1 : Double = 1570.7963267948965\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 19\n    var arg21 : Int = 17\n    var x2 : Double = volumeCone(arg20, arg21)\n    var v2 : Double = 6426.651371693521\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the volume of a cone.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/313", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to print positive numbers in a list.\n     *\n     * >>> posNos(List(-1, -2, 1, 2))\n     * [1,2]\n     * >>> posNos(List(3, 4, -5))\n     * [3,4]\n     * >>> posNos(List(-2, -3, 1))\n     * 1\n     */\n    def posNos(list1 : List[Int]) : Any = {\n", "entry_point": "posNos", "test": "\n\n    var arg00 : List[Int] = List(-1, -2, 1, 2)\n    var x0 : Any = posNos(arg00)\n    var v0 : Any = List(1, 2)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(3, 4, -5)\n    var x1 : Any = posNos(arg10)\n    var v1 : Any = List(3, 4)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(-2, -3, 1)\n    var x2 : Any = posNos(arg20)\n    var v2 : Any = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to print positive numbers in a list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/314", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n     *\n     * >>> maxSumRectangularGrid(List(List(1, 4, 5), List(2, 0, 0)), 3)\n     * 7\n     * >>> maxSumRectangularGrid(List(List(1, 2, 3, 4, 5), List(6, 7, 8, 9, 10)), 5)\n     * 24\n     * >>> maxSumRectangularGrid(List(List(7, 9, 11, 15, 19), List(21, 25, 28, 31, 32)), 5)\n     * 81\n     */\n    def maxSumRectangularGrid(grid : List[List[Int]], n : Int) : Int = {\n", "entry_point": "maxSumRectangularGrid", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 4, 5), List(2, 0, 0))\n    var arg01 : Int = 3\n    var x0 : Int = maxSumRectangularGrid(arg00, arg01)\n    var v0 : Int = 7\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1, 2, 3, 4, 5), List(6, 7, 8, 9, 10))\n    var arg11 : Int = 5\n    var x1 : Int = maxSumRectangularGrid(arg10, arg11)\n    var v1 : Int = 24\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(7, 9, 11, 15, 19), List(21, 25, 28, 31, 32))\n    var arg21 : Int = 5\n    var x2 : Int = maxSumRectangularGrid(arg20, arg21)\n    var v2 : Int = 81\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/315", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the first maximum length of even word.\n     *\n     * >>> findMaxLenEven(\"python language\")\n     * \"language\"\n     * >>> findMaxLenEven(\"maximum even length\")\n     * \"length\"\n     * >>> findMaxLenEven(\"eve\")\n     * \"-1\"\n     */\n    def findMaxLenEven(str : String) : String = {\n", "entry_point": "findMaxLenEven", "test": "\n\n    var arg00 : String = \"\"\"python language\"\"\"\n    var x0 : String = findMaxLenEven(arg00)\n    var v0 : String = \"\"\"language\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"maximum even length\"\"\"\n    var x1 : String = findMaxLenEven(arg10)\n    var v1 : String = \"\"\"length\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"eve\"\"\"\n    var x2 : String = findMaxLenEven(arg20)\n    var v2 : String = \"\"\"-1\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the first maximum length of even word.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/316", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the index of the last occurrence of a given number in a sorted array.\n     *\n     * >>> findLastOccurrence(List(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5)\n     * 3\n     * >>> findLastOccurrence(List(2, 3, 5, 8, 6, 6, 8, 9, 9, 9), 9)\n     * 9\n     * >>> findLastOccurrence(List(2, 2, 1, 5, 6, 6, 6, 9, 9, 9), 6)\n     * 6\n     */\n    def findLastOccurrence(a : List[Int], x : Int) : Int = {\n", "entry_point": "findLastOccurrence", "test": "\n\n    var arg00 : List[Int] = List(2, 5, 5, 5, 6, 6, 8, 9, 9, 9)\n    var arg01 : Int = 5\n    var x0 : Int = findLastOccurrence(arg00, arg01)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 3, 5, 8, 6, 6, 8, 9, 9, 9)\n    var arg11 : Int = 9\n    var x1 : Int = findLastOccurrence(arg10, arg11)\n    var v1 : Int = 9\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 2, 1, 5, 6, 6, 6, 9, 9, 9)\n    var arg21 : Int = 6\n    var x2 : Int = findLastOccurrence(arg20, arg21)\n    var v2 : Int = 6\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the index of the last occurrence of a given number in a sorted array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/317", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to reflect the modified run-length encoding from a list.\n     *\n     * >>> modifiedEncode(List(1, 1, 2, 3, 4, 4, 5, 1))\n     * List(List(2, 1), 2, 3, List(2, 4), 5, 1)\n     * >>> modifiedEncode(\"automatically\")\n     * List(\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", List(2, \"l\"), \"y\")\n     * >>> modifiedEncode(\"python\")\n     * List(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\")\n     */\n    def modifiedEncode(alist : Any) : List[Any] = {\n", "entry_point": "modifiedEncode", "test": "\n\n    var arg00 : Any = List(1, 1, 2, 3, 4, 4, 5, 1)\n    var x0 : List[Any] = modifiedEncode(arg00)\n    var v0 : List[Any] = List(List(2, 1), 2, 3, List(2, 4), 5, 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Any = \"\"\"automatically\"\"\"\n    var x1 : List[Any] = modifiedEncode(arg10)\n    var v1 : List[Any] = List(\"\"\"a\"\"\", \"\"\"u\"\"\", \"\"\"t\"\"\", \"\"\"o\"\"\", \"\"\"m\"\"\", \"\"\"a\"\"\", \"\"\"t\"\"\", \"\"\"i\"\"\", \"\"\"c\"\"\", \"\"\"a\"\"\", List(2, \"\"\"l\"\"\"), \"\"\"y\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Any = \"\"\"python\"\"\"\n    var x2 : List[Any] = modifiedEncode(arg20)\n    var v2 : List[Any] = List(\"\"\"p\"\"\", \"\"\"y\"\"\", \"\"\"t\"\"\", \"\"\"h\"\"\", \"\"\"o\"\"\", \"\"\"n\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to reflect the modified run-length encoding from a list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/318", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the maximum volume of a cuboid with given sum of sides.\n     *\n     * >>> maxVolume(8)\n     * 18\n     * >>> maxVolume(4)\n     * 2\n     * >>> maxVolume(1)\n     * 0\n     */\n    def maxVolume(s : Int) : Int = {\n", "entry_point": "maxVolume", "test": "\n\n    var arg00 : Int = 8\n    var x0 : Int = maxVolume(arg00)\n    var v0 : Int = 18\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var x1 : Int = maxVolume(arg10)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var x2 : Int = maxVolume(arg20)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the maximum volume of a cuboid with given sum of sides.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/319", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find all five characters long word in the given string by using regex.\n     *\n     * >>> findLongWord(\"Please move back to strem\")\n     * List(\"strem\")\n     * >>> findLongWord(\"4K Ultra HD streaming player\")\n     * List(\"Ultra\")\n     * >>> findLongWord(\"Streaming Media Player\")\n     * List(\"Media\")\n     */\n    def findLongWord(text : String) : List[String] = {\n", "entry_point": "findLongWord", "test": "\n\n    var arg00 : String = \"\"\"Please move back to strem\"\"\"\n    var x0 : List[String] = findLongWord(arg00)\n    var v0 : List[String] = List(\"\"\"strem\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"4K Ultra HD streaming player\"\"\"\n    var x1 : List[String] = findLongWord(arg10)\n    var v1 : List[String] = List(\"\"\"Ultra\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Streaming Media Player\"\"\"\n    var x2 : List[String] = findLongWord(arg20)\n    var v2 : List[String] = List(\"\"\"Media\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find all five characters long word in the given string by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/320", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n     *\n     * >>> sumDifference(12)\n     * 5434\n     * >>> sumDifference(20)\n     * 41230\n     * >>> sumDifference(54)\n     * 2151270\n     */\n    def sumDifference(n : Int) : Int = {\n", "entry_point": "sumDifference", "test": "\n\n    var arg00 : Int = 12\n    var x0 : Int = sumDifference(arg00)\n    var v0 : Int = 5434\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 20\n    var x1 : Int = sumDifference(arg10)\n    var v1 : Int = 41230\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 54\n    var x2 : Int = sumDifference(arg20)\n    var v2 : Int = 2151270\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/321", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the demlo number for the given number.\n     *\n     * >>> findDemlo(\"111111\")\n     * \"12345654321\"\n     * >>> findDemlo(\"1111\")\n     * \"1234321\"\n     * >>> findDemlo(\"13333122222\")\n     * \"123456789101110987654321\"\n     */\n    def findDemlo(s : String) : String = {\n", "entry_point": "findDemlo", "test": "\n\n    var arg00 : String = \"\"\"111111\"\"\"\n    var x0 : String = findDemlo(arg00)\n    var v0 : String = \"\"\"12345654321\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"1111\"\"\"\n    var x1 : String = findDemlo(arg10)\n    var v1 : String = \"\"\"1234321\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"13333122222\"\"\"\n    var x2 : String = findDemlo(arg20)\n    var v2 : String = \"\"\"123456789101110987654321\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the demlo number for the given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/322", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find all index positions of the minimum values in a given list.\n     *\n     * >>> positionMin(List(12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54))\n     * List(3, 11)\n     * >>> positionMin(List(1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5))\n     * List(0)\n     * >>> positionMin(List(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12))\n     * List(1)\n     */\n    def positionMin(list1 : List[Int]) : List[Int] = {\n", "entry_point": "positionMin", "test": "\n\n    var arg00 : List[Int] = List(12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54)\n    var x0 : List[Int] = positionMin(arg00)\n    var v0 : List[Int] = List(3, 11)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5)\n    var x1 : List[Int] = positionMin(arg10)\n    var v1 : List[Int] = List(0)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12)\n    var x2 : List[Int] = positionMin(arg20)\n    var v2 : List[Int] = List(1)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find all index positions of the minimum values in a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/323", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to re-arrange the given array in alternating positive and negative items.\n     *\n     * >>> reArrange(List(-5, -2, 5, 2, 4, 7, 1, 8, 0, -8), 10)\n     * List(-5, 5, -2, 2, -8, 4, 7, 1, 8, 0)\n     * >>> reArrange(List(1, 2, 3, -4, -1, 4), 6)\n     * List(-4, 1, -1, 2, 3, 4)\n     * >>> reArrange(List(4, 7, 9, 77, -4, 5, -3, -9), 8)\n     * List(-4, 4, -3, 7, -9, 9, 77, 5)\n     */\n    def reArrange(arr : List[Int], n : Int) : List[Int] = {\n", "entry_point": "reArrange", "test": "\n\n    var arg00 : List[Int] = List(-5, -2, 5, 2, 4, 7, 1, 8, 0, -8)\n    var arg01 : Int = 10\n    var x0 : List[Int] = reArrange(arg00, arg01)\n    var v0 : List[Int] = List(-5, 5, -2, 2, -8, 4, 7, 1, 8, 0)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, -4, -1, 4)\n    var arg11 : Int = 6\n    var x1 : List[Int] = reArrange(arg10, arg11)\n    var v1 : List[Int] = List(-4, 1, -1, 2, 3, 4)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(4, 7, 9, 77, -4, 5, -3, -9)\n    var arg21 : Int = 8\n    var x2 : List[Int] = reArrange(arg20, arg21)\n    var v2 : List[Int] = List(-4, 4, -3, 7, -9, 9, 77, 5)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to re-arrange the given array in alternating positive and negative items.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/324", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract the sum of alternate chains of tuples.\n     *\n     * >>> sumOfAlternates(List(5, 6, 3, 6, 10, 34))\n     * List(46, 18)\n     * >>> sumOfAlternates(List(1, 2, 3, 4, 5))\n     * List(6, 9)\n     * >>> sumOfAlternates(List(6, 7, 8, 9, 4, 5))\n     * List(21, 18)\n     */\n    def sumOfAlternates(testTuple : List[Int]) : List[Int] = {\n", "entry_point": "sumOfAlternates", "test": "\n\n    var arg00 : List[Int] = List(5, 6, 3, 6, 10, 34)\n    var x0 : List[Int] = sumOfAlternates(arg00)\n    var v0 : List[Int] = List(46, 18)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5)\n    var x1 : List[Int] = sumOfAlternates(arg10)\n    var v1 : List[Int] = List(6, 9)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(6, 7, 8, 9, 4, 5)\n    var x2 : List[Int] = sumOfAlternates(arg20)\n    var v2 : List[Int] = List(21, 18)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract the sum of alternate chains of tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/325", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the minimum number of squares whose sum is equal to a given number.\n     *\n     * >>> getMinSquares(6)\n     * 3\n     * >>> getMinSquares(2)\n     * 2\n     * >>> getMinSquares(4)\n     * 1\n     */\n    def getMinSquares(n : Int) : Int = {\n", "entry_point": "getMinSquares", "test": "\n\n    var arg00 : Int = 6\n    var x0 : Int = getMinSquares(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var x1 : Int = getMinSquares(arg10)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var x2 : Int = getMinSquares(arg20)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the minimum number of squares whose sum is equal to a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/326", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to get the word with most number of occurrences in the given strings list.\n     *\n     * >>> mostOccurrences(List(\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"))\n     * \"UTS\"\n     * >>> mostOccurrences(List(\"Its been a great year\", \"this year is so worse\", \"this year is okay\"))\n     * \"year\"\n     * >>> mostOccurrences(List(\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"))\n     * \"can\"\n     */\n    def mostOccurrences(testList : List[String]) : String = {\n", "entry_point": "mostOccurrences", "test": "\n\n    var arg00 : List[String] = List(\"\"\"UTS is best for RTF\"\"\", \"\"\"RTF love UTS\"\"\", \"\"\"UTS is best\"\"\")\n    var x0 : String = mostOccurrences(arg00)\n    var v0 : String = \"\"\"UTS\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"Its been a great year\"\"\", \"\"\"this year is so worse\"\"\", \"\"\"this year is okay\"\"\")\n    var x1 : String = mostOccurrences(arg10)\n    var v1 : String = \"\"\"year\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"Families can be reunited\"\"\", \"\"\"people can be reunited\"\"\", \"\"\"Tasks can be achieved \"\"\")\n    var x2 : String = mostOccurrences(arg20)\n    var v2 : String = \"\"\"can\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to get the word with most number of occurrences in the given strings list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/327", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to print check if the triangle is isosceles or not.\n     *\n     * >>> checkIsosceles(6, 8, 12)\n     * false\n     * >>> checkIsosceles(6, 6, 12)\n     * true\n     * >>> checkIsosceles(6, 16, 20)\n     * false\n     */\n    def checkIsosceles(x : Int, y : Int, z : Int) : Boolean = {\n", "entry_point": "checkIsosceles", "test": "\n\n    var arg00 : Int = 6\n    var arg01 : Int = 8\n    var arg02 : Int = 12\n    var x0 : Boolean = checkIsosceles(arg00, arg01, arg02)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 6\n    var arg11 : Int = 6\n    var arg12 : Int = 12\n    var x1 : Boolean = checkIsosceles(arg10, arg11, arg12)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 6\n    var arg21 : Int = 16\n    var arg22 : Int = 20\n    var x2 : Boolean = checkIsosceles(arg20, arg21, arg22)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to print check if the triangle is isosceles or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/328", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to rotate a given list by specified number of items to the left direction.\n     *\n     * >>> rotateLeft(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3, 4)\n     * List(4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4)\n     * >>> rotateLeft(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 2, 2)\n     * List(3, 4, 5, 6, 7, 8, 9, 10, 1, 2)\n     * >>> rotateLeft(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 5, 2)\n     * List(6, 7, 8, 9, 10, 1, 2)\n     */\n    def rotateLeft(list1 : List[Int], m : Int, n : Int) : List[Int] = {\n", "entry_point": "rotateLeft", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var arg01 : Int = 3\n    var arg02 : Int = 4\n    var x0 : List[Int] = rotateLeft(arg00, arg01, arg02)\n    var v0 : List[Int] = List(4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var arg11 : Int = 2\n    var arg12 : Int = 2\n    var x1 : List[Int] = rotateLeft(arg10, arg11, arg12)\n    var v1 : List[Int] = List(3, 4, 5, 6, 7, 8, 9, 10, 1, 2)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var arg21 : Int = 5\n    var arg22 : Int = 2\n    var x2 : List[Int] = rotateLeft(arg20, arg21, arg22)\n    var v2 : List[Int] = List(6, 7, 8, 9, 10, 1, 2)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to rotate a given list by specified number of items to the left direction.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/329", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count negative numbers in a list.\n     *\n     * >>> negCount(List(-1, -2, 3, -4, -5))\n     * 4\n     * >>> negCount(List(1, 2, 3))\n     * 0\n     * >>> negCount(List(1, 2, -3, -10, 20))\n     * 2\n     */\n    def negCount(list : List[Int]) : Int = {\n", "entry_point": "negCount", "test": "\n\n    var arg00 : List[Int] = List(-1, -2, 3, -4, -5)\n    var x0 : Int = negCount(arg00)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3)\n    var x1 : Int = negCount(arg10)\n    var v1 : Int = 0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, -3, -10, 20)\n    var x2 : Int = negCount(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count negative numbers in a list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/330", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find all three, four, five characters long words in the given string by using regex.\n     *\n     * >>> findChar(\"For the four consumer complaints contact manager AKR reddy\")\n     * List(\"For\", \"the\", \"four\", \"AKR\", \"reddy\")\n     * >>> findChar(\"Certain service are subject to change MSR\")\n     * List(\"are\", \"MSR\")\n     * >>> findChar(\"Third party legal desclaimers\")\n     * List(\"Third\", \"party\", \"legal\")\n     */\n    def findChar(text : String) : List[String] = {\n", "entry_point": "findChar", "test": "\n\n    var arg00 : String = \"\"\"For the four consumer complaints contact manager AKR reddy\"\"\"\n    var x0 : List[String] = findChar(arg00)\n    var v0 : List[String] = List(\"\"\"For\"\"\", \"\"\"the\"\"\", \"\"\"four\"\"\", \"\"\"AKR\"\"\", \"\"\"reddy\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Certain service are subject to change MSR\"\"\"\n    var x1 : List[String] = findChar(arg10)\n    var v1 : List[String] = List(\"\"\"are\"\"\", \"\"\"MSR\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Third party legal desclaimers\"\"\"\n    var x2 : List[String] = findChar(arg20)\n    var v2 : List[String] = List(\"\"\"Third\"\"\", \"\"\"party\"\"\", \"\"\"legal\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find all three, four, five characters long words in the given string by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/331", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count unset bits of a given number.\n     *\n     * >>> countUnsetBits(2)\n     * 1\n     * >>> countUnsetBits(4)\n     * 2\n     * >>> countUnsetBits(6)\n     * 1\n     */\n    def countUnsetBits(n : Int) : Int = {\n", "entry_point": "countUnsetBits", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = countUnsetBits(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var x1 : Int = countUnsetBits(arg10)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 6\n    var x2 : Int = countUnsetBits(arg20)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count unset bits of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/332", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count character frequency of a given string.\n     *\n     * >>> charFrequency(\"python\")\n     * Map(\"p\"->1, \"y\"->1, \"t\"->1, \"h\"->1, \"o\"->1, \"n\"->1)\n     * >>> charFrequency(\"program\")\n     * Map(\"p\"->1, \"r\"->2, \"o\"->1, \"g\"->1, \"a\"->1, \"m\"->1)\n     * >>> charFrequency(\"language\")\n     * Map(\"l\"->1, \"a\"->2, \"n\"->1, \"g\"->2, \"u\"->1, \"e\"->1)\n     */\n    def charFrequency(str1 : String) : Map[String, Int] = {\n", "entry_point": "charFrequency", "test": "\n\n    var arg00 : String = \"\"\"python\"\"\"\n    var x0 : Map[String, Int] = charFrequency(arg00)\n    var v0 : Map[String, Int] = Map(\"\"\"p\"\"\" -> 1, \"\"\"y\"\"\" -> 1, \"\"\"t\"\"\" -> 1, \"\"\"h\"\"\" -> 1, \"\"\"o\"\"\" -> 1, \"\"\"n\"\"\" -> 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"program\"\"\"\n    var x1 : Map[String, Int] = charFrequency(arg10)\n    var v1 : Map[String, Int] = Map(\"\"\"p\"\"\" -> 1, \"\"\"r\"\"\" -> 2, \"\"\"o\"\"\" -> 1, \"\"\"g\"\"\" -> 1, \"\"\"a\"\"\" -> 1, \"\"\"m\"\"\" -> 1)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"language\"\"\"\n    var x2 : Map[String, Int] = charFrequency(arg20)\n    var v2 : Map[String, Int] = Map(\"\"\"l\"\"\" -> 1, \"\"\"a\"\"\" -> 2, \"\"\"n\"\"\" -> 1, \"\"\"g\"\"\" -> 2, \"\"\"u\"\"\" -> 1, \"\"\"e\"\"\" -> 1)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count character frequency of a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/333", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to sort a list according to the second element in sublist.\n     *\n     * >>> sort(List(List(\"a\", 10), List(\"b\", 5), List(\"c\", 20), List(\"d\", 15)))\n     * List(List(\"b\", 5), List(\"a\", 10), List(\"d\", 15), List(\"c\", 20))\n     * >>> sort(List(List(\"452\", 10), List(\"256\", 5), List(\"100\", 20), List(\"135\", 15)))\n     * List(List(\"256\", 5), List(\"452\", 10), List(\"135\", 15), List(\"100\", 20))\n     * >>> sort(List(List(\"rishi\", 10), List(\"akhil\", 5), List(\"ramya\", 20), List(\"gaur\", 15)))\n     * List(List(\"akhil\", 5), List(\"rishi\", 10), List(\"gaur\", 15), List(\"ramya\", 20))\n     */\n    def sort(subLi : List[List[Any]]) : List[List[Any]] = {\n", "entry_point": "sort", "test": "\n\n    var arg00 : List[List[Any]] = List(List(\"\"\"a\"\"\", 10), List(\"\"\"b\"\"\", 5), List(\"\"\"c\"\"\", 20), List(\"\"\"d\"\"\", 15))\n    var x0 : List[List[Any]] = sort(arg00)\n    var v0 : List[List[Any]] = List(List(\"\"\"b\"\"\", 5), List(\"\"\"a\"\"\", 10), List(\"\"\"d\"\"\", 15), List(\"\"\"c\"\"\", 20))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(\"\"\"452\"\"\", 10), List(\"\"\"256\"\"\", 5), List(\"\"\"100\"\"\", 20), List(\"\"\"135\"\"\", 15))\n    var x1 : List[List[Any]] = sort(arg10)\n    var v1 : List[List[Any]] = List(List(\"\"\"256\"\"\", 5), List(\"\"\"452\"\"\", 10), List(\"\"\"135\"\"\", 15), List(\"\"\"100\"\"\", 20))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(\"\"\"rishi\"\"\", 10), List(\"\"\"akhil\"\"\", 5), List(\"\"\"ramya\"\"\", 20), List(\"\"\"gaur\"\"\", 15))\n    var x2 : List[List[Any]] = sort(arg20)\n    var v2 : List[List[Any]] = List(List(\"\"\"akhil\"\"\", 5), List(\"\"\"rishi\"\"\", 10), List(\"\"\"gaur\"\"\", 15), List(\"\"\"ramya\"\"\", 20))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to sort a list according to the second element in sublist.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/334", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the triangle is valid or not if sides are given.\n     *\n     * >>> checkValidity(1, 2, 3)\n     * false\n     * >>> checkValidity(2, 3, 5)\n     * false\n     * >>> checkValidity(7, 10, 5)\n     * true\n     */\n    def checkValidity(a : Int, b : Int, c : Int) : Boolean = {\n", "entry_point": "checkValidity", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = 2\n    var arg02 : Int = 3\n    var x0 : Boolean = checkValidity(arg00, arg01, arg02)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var arg11 : Int = 3\n    var arg12 : Int = 5\n    var x1 : Boolean = checkValidity(arg10, arg11, arg12)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 7\n    var arg21 : Int = 10\n    var arg22 : Int = 5\n    var x2 : Boolean = checkValidity(arg20, arg21, arg22)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the triangle is valid or not if sides are given.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/335", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the sum of arithmetic progression.\n     *\n     * >>> apSum(1, 5, 2)\n     * 25\n     * >>> apSum(2, 6, 4)\n     * 72\n     * >>> apSum(1, 4, 5)\n     * 34\n     */\n    def apSum(a : Int, n : Int, d : Int) : Int = {\n", "entry_point": "apSum", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = 5\n    var arg02 : Int = 2\n    var x0 : Int = apSum(arg00, arg01, arg02)\n    var v0 : Int = 25\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var arg11 : Int = 6\n    var arg12 : Int = 4\n    var x1 : Int = apSum(arg10, arg11, arg12)\n    var v1 : Int = 72\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = 4\n    var arg22 : Int = 5\n    var x2 : Int = apSum(arg20, arg21, arg22)\n    var v2 : Int = 34\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the sum of arithmetic progression.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/336", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether the given month name contains 28 days or not.\n     *\n     * >>> checkMonthnum(\"February\")\n     * true\n     * >>> checkMonthnum(\"January\")\n     * false\n     * >>> checkMonthnum(\"March\")\n     * false\n     */\n    def checkMonthnum(monthname1 : String) : Boolean = {\n", "entry_point": "checkMonthnum", "test": "\n\n    var arg00 : String = \"\"\"February\"\"\"\n    var x0 : Boolean = checkMonthnum(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"January\"\"\"\n    var x1 : Boolean = checkMonthnum(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"March\"\"\"\n    var x2 : Boolean = checkMonthnum(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether the given month name contains 28 days or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/337", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function that matches a word at the end of a string, with optional punctuation.\n     *\n     * >>> textMatchWord(\"python.\")\n     * \"Found a match!\"\n     * >>> textMatchWord(\"python.\")\n     * \"Found a match!\"\n     * >>> textMatchWord(\"  lang  .\")\n     * \"Not matched!\"\n     */\n    def textMatchWord(text : String) : String = {\n", "entry_point": "textMatchWord", "test": "\n\n    var arg00 : String = \"\"\"python.\"\"\"\n    var x0 : String = textMatchWord(arg00)\n    var v0 : String = \"\"\"Found a match!\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"python.\"\"\"\n    var x1 : String = textMatchWord(arg10)\n    var v1 : String = \"\"\"Found a match!\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"  lang  .\"\"\"\n    var x2 : String = textMatchWord(arg20)\n    var v2 : String = \"\"\"Not matched!\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function that matches a word at the end of a string, with optional punctuation.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/338", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the number of substrings with same first and last characters.\n     *\n     * >>> countSubstringWithEqualEnds(\"aba\")\n     * 4\n     * >>> countSubstringWithEqualEnds(\"abcab\")\n     * 7\n     * >>> countSubstringWithEqualEnds(\"abc\")\n     * 3\n     */\n    def countSubstringWithEqualEnds(s : String) : Int = {\n", "entry_point": "countSubstringWithEqualEnds", "test": "\n\n    var arg00 : String = \"\"\"aba\"\"\"\n    var x0 : Int = countSubstringWithEqualEnds(arg00)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"abcab\"\"\"\n    var x1 : Int = countSubstringWithEqualEnds(arg10)\n    var v1 : Int = 7\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"abc\"\"\"\n    var x2 : Int = countSubstringWithEqualEnds(arg20)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the number of substrings with same first and last characters.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/339", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the maximum occuring divisor in an interval.\n     *\n     * >>> findDivisor(2, 2)\n     * 2\n     * >>> findDivisor(2, 5)\n     * 2\n     * >>> findDivisor(5, 10)\n     * 2\n     */\n    def findDivisor(x : Int, y : Int) : Int = {\n", "entry_point": "findDivisor", "test": "\n\n    var arg00 : Int = 2\n    var arg01 : Int = 2\n    var x0 : Int = findDivisor(arg00, arg01)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var arg11 : Int = 5\n    var x1 : Int = findDivisor(arg10, arg11)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var arg21 : Int = 10\n    var x2 : Int = findDivisor(arg20, arg21)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the maximum occuring divisor in an interval.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/340", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of the three lowest positive numbers from a given list of numbers.\n     *\n     * >>> sumThreeSmallestNums(List(10, 20, 30, 40, 50, 60, 7))\n     * 37\n     * >>> sumThreeSmallestNums(List(1, 2, 3, 4, 5))\n     * 6\n     * >>> sumThreeSmallestNums(List(0, 1, 2, 3, 4, 5))\n     * 6\n     */\n    def sumThreeSmallestNums(lst : List[Int]) : Int = {\n", "entry_point": "sumThreeSmallestNums", "test": "\n\n    var arg00 : List[Int] = List(10, 20, 30, 40, 50, 60, 7)\n    var x0 : Int = sumThreeSmallestNums(arg00)\n    var v0 : Int = 37\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5)\n    var x1 : Int = sumThreeSmallestNums(arg10)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(0, 1, 2, 3, 4, 5)\n    var x2 : Int = sumThreeSmallestNums(arg20)\n    var v2 : Int = 6\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of the three lowest positive numbers from a given list of numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/341", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert the given set into tuples.\n     *\n     * >>> setToTuple(Set(1, 2, 3, 4, 5))\n     * List(1, 2, 3, 4, 5)\n     * >>> setToTuple(Set(6, 7, 8, 9, 10, 11))\n     * List(6, 7, 8, 9, 10, 11)\n     * >>> setToTuple(Set(12, 13, 14, 15, 16))\n     * List(12, 13, 14, 15, 16)\n     */\n    def setToTuple(s : Set[Int]) : List[Int] = {\n", "entry_point": "setToTuple", "test": "\n\n    var arg00 : Set[Int] = Set(1, 2, 3, 4, 5)\n    var x0 : List[Int] = setToTuple(arg00)\n    var v0 : List[Int] = List(1, 2, 3, 4, 5)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Set[Int] = Set(6, 7, 8, 9, 10, 11)\n    var x1 : List[Int] = setToTuple(arg10)\n    var v1 : List[Int] = List(6, 7, 8, 9, 10, 11)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Set[Int] = Set(12, 13, 14, 15, 16)\n    var x2 : List[Int] = setToTuple(arg20)\n    var v2 : List[Int] = List(12, 13, 14, 15, 16)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert the given set into tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/342", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n     *\n     * >>> findMinimumRange(List(List(3, 6, 8, 10, 15), List(1, 5, 12), List(4, 8, 15, 16), List(2, 6)))\n     * List(4, 6)\n     * >>> findMinimumRange(List(List(2, 3, 4, 8, 10, 15), List(1, 5, 12), List(7, 8, 15, 16), List(3, 6)))\n     * List(4, 7)\n     * >>> findMinimumRange(List(List(4, 7, 9, 11, 16), List(2, 6, 13), List(5, 9, 16, 17), List(3, 7)))\n     * List(5, 7)\n     */\n    def findMinimumRange(list : List[List[Int]]) : List[Int] = {\n", "entry_point": "findMinimumRange", "test": "\n\n    var arg00 : List[List[Int]] = List(List(3, 6, 8, 10, 15), List(1, 5, 12), List(4, 8, 15, 16), List(2, 6))\n    var x0 : List[Int] = findMinimumRange(arg00)\n    var v0 : List[Int] = List(4, 6)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(2, 3, 4, 8, 10, 15), List(1, 5, 12), List(7, 8, 15, 16), List(3, 6))\n    var x1 : List[Int] = findMinimumRange(arg10)\n    var v1 : List[Int] = List(4, 7)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(4, 7, 9, 11, 16), List(2, 6, 13), List(5, 9, 16, 17), List(3, 7))\n    var x2 : List[Int] = findMinimumRange(arg20)\n    var v2 : List[Int] = List(5, 7)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/343", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate the number of digits and letters in a string.\n     *\n     * >>> digLet(\"python\")\n     * List(6, 0)\n     * >>> digLet(\"program\")\n     * List(7, 0)\n     * >>> digLet(\"python3.0\")\n     * List(6, 2)\n     */\n    def digLet(s : String) : List[Int] = {\n", "entry_point": "digLet", "test": "\n\n    var arg00 : String = \"\"\"python\"\"\"\n    var x0 : List[Int] = digLet(arg00)\n    var v0 : List[Int] = List(6, 0)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"program\"\"\"\n    var x1 : List[Int] = digLet(arg10)\n    var v1 : List[Int] = List(7, 0)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"python3.0\"\"\"\n    var x2 : List[Int] = digLet(arg20)\n    var v2 : List[Int] = List(6, 2)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate the number of digits and letters in a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/344", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find number of elements with odd factors in a given range.\n     *\n     * >>> countOddSquares(5, 100)\n     * 8\n     * >>> countOddSquares(8, 65)\n     * 6\n     * >>> countOddSquares(2, 5)\n     * 1\n     */\n    def countOddSquares(n : Int, m : Int) : Int = {\n", "entry_point": "countOddSquares", "test": "\n\n    var arg00 : Int = 5\n    var arg01 : Int = 100\n    var x0 : Int = countOddSquares(arg00, arg01)\n    var v0 : Int = 8\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 8\n    var arg11 : Int = 65\n    var x1 : Int = countOddSquares(arg10, arg11)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var arg21 : Int = 5\n    var x2 : Int = countOddSquares(arg20, arg21)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find number of elements with odd factors in a given range.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/345", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the difference between two consecutive numbers in a given list.\n     *\n     * >>> diffConsecutivenums(List(1, 1, 3, 4, 4, 5, 6, 7))\n     * List(0, 2, 1, 0, 1, 1, 1)\n     * >>> diffConsecutivenums(List(4, 5, 8, 9, 6, 10))\n     * List(1, 3, 1, -3, 4)\n     * >>> diffConsecutivenums(List(0, 1, 2, 3, 4, 4, 4, 4, 5, 7))\n     * List(1, 1, 1, 1, 0, 0, 0, 1, 2)\n     */\n    def diffConsecutivenums(nums : List[Int]) : List[Int] = {\n", "entry_point": "diffConsecutivenums", "test": "\n\n    var arg00 : List[Int] = List(1, 1, 3, 4, 4, 5, 6, 7)\n    var x0 : List[Int] = diffConsecutivenums(arg00)\n    var v0 : List[Int] = List(0, 2, 1, 0, 1, 1, 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 5, 8, 9, 6, 10)\n    var x1 : List[Int] = diffConsecutivenums(arg10)\n    var v1 : List[Int] = List(1, 3, 1, -3, 4)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(0, 1, 2, 3, 4, 4, 4, 4, 5, 7)\n    var x2 : List[Int] = diffConsecutivenums(arg20)\n    var v2 : List[Int] = List(1, 1, 1, 1, 0, 0, 0, 1, 2)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the difference between two consecutive numbers in a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/346", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find entringer number e(n, k).\n     *\n     * >>> zigzag(4, 3)\n     * 5\n     * >>> zigzag(4, 2)\n     * 4\n     * >>> zigzag(3, 1)\n     * 1\n     */\n    def zigzag(n : Int, k : Int) : Int = {\n", "entry_point": "zigzag", "test": "\n\n    var arg00 : Int = 4\n    var arg01 : Int = 3\n    var x0 : Int = zigzag(arg00, arg01)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var arg11 : Int = 2\n    var x1 : Int = zigzag(arg10, arg11)\n    var v1 : Int = 4\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 3\n    var arg21 : Int = 1\n    var x2 : Int = zigzag(arg20, arg21)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find entringer number e(n, k).", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/347", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the number of squares in a rectangle.\n     *\n     * >>> countSquares(4, 3)\n     * 20\n     * >>> countSquares(1, 2)\n     * 2\n     * >>> countSquares(2, 2)\n     * 5\n     */\n    def countSquares(m : Int, n : Int) : Int = {\n", "entry_point": "countSquares", "test": "\n\n    var arg00 : Int = 4\n    var arg01 : Int = 3\n    var x0 : Int = countSquares(arg00, arg01)\n    var v0 : Int = 20\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var arg11 : Int = 2\n    var x1 : Int = countSquares(arg10, arg11)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var arg21 : Int = 2\n    var x2 : Int = countSquares(arg20, arg21)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the number of squares in a rectangle.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/348", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n     *\n     * >>> findWays(4)\n     * 2\n     * >>> findWays(6)\n     * 5\n     * >>> findWays(8)\n     * 14\n     */\n    def findWays(m : Int) : Int = {\n", "entry_point": "findWays", "test": "\n\n    var arg00 : Int = 4\n    var x0 : Int = findWays(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 6\n    var x1 : Int = findWays(arg10)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 8\n    var x2 : Int = findWays(arg20)\n    var v2 : Int = 14\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/349", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the given string is a binary string or not.\n     *\n     * >>> check(\"01010101010\")\n     * \"Yes\"\n     * >>> check(\"name0\")\n     * \"No\"\n     * >>> check(\"101\")\n     * \"Yes\"\n     */\n    def check(string : String) : String = {\n", "entry_point": "check", "test": "\n\n    var arg00 : String = \"\"\"01010101010\"\"\"\n    var x0 : String = check(arg00)\n    var v0 : String = \"\"\"Yes\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"name0\"\"\"\n    var x1 : String = check(arg10)\n    var v1 : String = \"\"\"No\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"101\"\"\"\n    var x2 : String = check(arg20)\n    var v2 : String = \"\"\"Yes\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the given string is a binary string or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/350", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to minimize the length of the string by removing occurrence of only one character.\n     *\n     * >>> minimumLength(\"mnm\")\n     * 1\n     * >>> minimumLength(\"abcda\")\n     * 3\n     * >>> minimumLength(\"abcb\")\n     * 2\n     */\n    def minimumLength(s : String) : Int = {\n", "entry_point": "minimumLength", "test": "\n\n    var arg00 : String = \"\"\"mnm\"\"\"\n    var x0 : Int = minimumLength(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"abcda\"\"\"\n    var x1 : Int = minimumLength(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"abcb\"\"\"\n    var x2 : Int = minimumLength(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to minimize the length of the string by removing occurrence of only one character.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/351", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the first element occurring k times in a given array.\n     *\n     * >>> firstElement(List(0, 1, 2, 3, 4, 5), 6, 1)\n     * 0\n     * >>> firstElement(List(1, 2, 1, 3, 4), 5, 2)\n     * 1\n     * >>> firstElement(List(2, 3, 4, 3, 5, 7, 1, 2, 3, 5), 10, 2)\n     * 2\n     */\n    def firstElement(arr : List[Int], n : Int, k : Int) : Int = {\n", "entry_point": "firstElement", "test": "\n\n    var arg00 : List[Int] = List(0, 1, 2, 3, 4, 5)\n    var arg01 : Int = 6\n    var arg02 : Int = 1\n    var x0 : Int = firstElement(arg00, arg01, arg02)\n    var v0 : Int = 0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 1, 3, 4)\n    var arg11 : Int = 5\n    var arg12 : Int = 2\n    var x1 : Int = firstElement(arg10, arg11, arg12)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 3, 4, 3, 5, 7, 1, 2, 3, 5)\n    var arg21 : Int = 10\n    var arg22 : Int = 2\n    var x2 : Int = firstElement(arg20, arg21, arg22)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the first element occurring k times in a given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/352", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether all the characters in a given string are unique.\n     *\n     * >>> uniqueCharacters(\"aba\")\n     * false\n     * >>> uniqueCharacters(\"abc\")\n     * true\n     * >>> uniqueCharacters(\"abab\")\n     * false\n     */\n    def uniqueCharacters(str : String) : Boolean = {\n", "entry_point": "uniqueCharacters", "test": "\n\n    var arg00 : String = \"\"\"aba\"\"\"\n    var x0 : Boolean = uniqueCharacters(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"abc\"\"\"\n    var x1 : Boolean = uniqueCharacters(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"abab\"\"\"\n    var x2 : Boolean = uniqueCharacters(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether all the characters in a given string are unique.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/353", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove a specified column from a given nested list.\n     *\n     * >>> removeColumn(List(List(1, 2, 3), List(2, 4, 5), List(1, 1, 1)), 0)\n     * List(List(2, 3), List(4, 5), List(1, 1))\n     * >>> removeColumn(List(List(1, 2, 3), List(-2, 4, -5), List(1, -1, 1)), 2)\n     * List(List(1, 2), List(-2, 4), List(1, -1))\n     * >>> removeColumn(List(List(1, 3), List(5, 7), List(1, 3), List(13, 15, 17), List(5, 7), List(9, 11)), 0)\n     * List(List(3), List(7), List(3), List(15, 17), List(7), List(11))\n     */\n    def removeColumn(list1 : List[List[Int]], n : Int) : List[List[Int]] = {\n", "entry_point": "removeColumn", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 2, 3), List(2, 4, 5), List(1, 1, 1))\n    var arg01 : Int = 0\n    var x0 : List[List[Int]] = removeColumn(arg00, arg01)\n    var v0 : List[List[Int]] = List(List(2, 3), List(4, 5), List(1, 1))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1, 2, 3), List(-2, 4, -5), List(1, -1, 1))\n    var arg11 : Int = 2\n    var x1 : List[List[Int]] = removeColumn(arg10, arg11)\n    var v1 : List[List[Int]] = List(List(1, 2), List(-2, 4), List(1, -1))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(1, 3), List(5, 7), List(1, 3), List(13, 15, 17), List(5, 7), List(9, 11))\n    var arg21 : Int = 0\n    var x2 : List[List[Int]] = removeColumn(arg20, arg21)\n    var v2 : List[List[Int]] = List(List(3), List(7), List(3), List(15, 17), List(7), List(11))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove a specified column from a given nested list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/354", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find t-nth term of arithemetic progression.\n     *\n     * >>> tnAp(1, 5, 2)\n     * 9\n     * >>> tnAp(2, 6, 4)\n     * 22\n     * >>> tnAp(1, 4, 5)\n     * 16\n     */\n    def tnAp(a : Int, n : Int, d : Int) : Int = {\n", "entry_point": "tnAp", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = 5\n    var arg02 : Int = 2\n    var x0 : Int = tnAp(arg00, arg01, arg02)\n    var v0 : Int = 9\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var arg11 : Int = 6\n    var arg12 : Int = 4\n    var x1 : Int = tnAp(arg10, arg11, arg12)\n    var v1 : Int = 22\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = 4\n    var arg22 : Int = 5\n    var x2 : Int = tnAp(arg20, arg21, arg22)\n    var v2 : Int = 16\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find t-nth term of arithemetic progression.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/355", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the number of rectangles in a circle of radius r.\n     *\n     * >>> countRectangles(2)\n     * 8\n     * >>> countRectangles(1)\n     * 1\n     * >>> countRectangles(0)\n     * 0\n     */\n    def countRectangles(radius : Int) : Int = {\n", "entry_point": "countRectangles", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = countRectangles(arg00)\n    var v0 : Int = 8\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var x1 : Int = countRectangles(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 0\n    var x2 : Int = countRectangles(arg20)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the number of rectangles in a circle of radius r.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/356", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the third angle of a triangle using two angles.\n     *\n     * >>> findAngle(47, 89)\n     * 44\n     * >>> findAngle(45, 95)\n     * 40\n     * >>> findAngle(50, 40)\n     * 90\n     */\n    def findAngle(a : Int, b : Int) : Int = {\n", "entry_point": "findAngle", "test": "\n\n    var arg00 : Int = 47\n    var arg01 : Int = 89\n    var x0 : Int = findAngle(arg00, arg01)\n    var v0 : Int = 44\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 45\n    var arg11 : Int = 95\n    var x1 : Int = findAngle(arg10, arg11)\n    var v1 : Int = 40\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 50\n    var arg21 : Int = 40\n    var x2 : Int = findAngle(arg20, arg21)\n    var v2 : Int = 90\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the third angle of a triangle using two angles.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/357", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the maximum element of all the given tuple records.\n     *\n     * >>> findMax(List(List(2, 4), List(6, 7), List(5, 1), List(6, 10), List(8, 7)))\n     * 10\n     * >>> findMax(List(List(3, 5), List(7, 8), List(6, 2), List(7, 11), List(9, 8)))\n     * 11\n     * >>> findMax(List(List(4, 6), List(8, 9), List(7, 3), List(8, 12), List(10, 9)))\n     * 12\n     */\n    def findMax(testList : List[List[Int]]) : Int = {\n", "entry_point": "findMax", "test": "\n\n    var arg00 : List[List[Int]] = List(List(2, 4), List(6, 7), List(5, 1), List(6, 10), List(8, 7))\n    var x0 : Int = findMax(arg00)\n    var v0 : Int = 10\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(3, 5), List(7, 8), List(6, 2), List(7, 11), List(9, 8))\n    var x1 : Int = findMax(arg10)\n    var v1 : Int = 11\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(4, 6), List(8, 9), List(7, 3), List(8, 12), List(10, 9))\n    var x2 : Int = findMax(arg20)\n    var v2 : Int = 12\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the maximum element of all the given tuple records.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/358", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find modulo division of two lists using map and lambda function.\n     *\n     * >>> moddivList(List(4, 5, 6), List(1, 2, 3))\n     * List(0, 1, 0)\n     * >>> moddivList(List(3, 2), List(1, 4))\n     * List(0, 2)\n     * >>> moddivList(List(90, 120), List(50, 70))\n     * List(40, 50)\n     */\n    def moddivList(nums1 : List[Int], nums2 : List[Int]) : List[Int] = {\n", "entry_point": "moddivList", "test": "\n\n    var arg00 : List[Int] = List(4, 5, 6)\n    var arg01 : List[Int] = List(1, 2, 3)\n    var x0 : List[Int] = moddivList(arg00, arg01)\n    var v0 : List[Int] = List(0, 1, 0)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(3, 2)\n    var arg11 : List[Int] = List(1, 4)\n    var x1 : List[Int] = moddivList(arg10, arg11)\n    var v1 : List[Int] = List(0, 2)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(90, 120)\n    var arg21 : List[Int] = List(50, 70)\n    var x2 : List[Int] = moddivList(arg20, arg21)\n    var v2 : List[Int] = List(40, 50)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find modulo division of two lists using map and lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/359", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether one root of the quadratic equation is twice of the other or not.\n     *\n     * >>> checkSolution(1, 3, 2)\n     * \"Yes\"\n     * >>> checkSolution(1, 2, 3)\n     * \"No\"\n     * >>> checkSolution(1, -5, 6)\n     * \"No\"\n     */\n    def checkSolution(a : Int, b : Int, c : Int) : String = {\n", "entry_point": "checkSolution", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = 3\n    var arg02 : Int = 2\n    var x0 : String = checkSolution(arg00, arg01, arg02)\n    var v0 : String = \"\"\"Yes\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var arg11 : Int = 2\n    var arg12 : Int = 3\n    var x1 : String = checkSolution(arg10, arg11, arg12)\n    var v1 : String = \"\"\"No\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = -5\n    var arg22 : Int = 6\n    var x2 : String = checkSolution(arg20, arg21, arg22)\n    var v2 : String = \"\"\"No\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether one root of the quadratic equation is twice of the other or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/360", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the n\u2019th carol number.\n     *\n     * >>> getCarol(2)\n     * 7\n     * >>> getCarol(4)\n     * 223\n     * >>> getCarol(5)\n     * 959\n     */\n    def getCarol(n : Int) : Int = {\n", "entry_point": "getCarol", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = getCarol(arg00)\n    var v0 : Int = 7\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var x1 : Int = getCarol(arg10)\n    var v1 : Int = 223\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var x2 : Int = getCarol(arg20)\n    var v2 : Int = 959\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the n\u2019th carol number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/361", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove empty lists from a given list of lists.\n     *\n     * >>> removeEmpty(List(List(), List(), List(), \"Red\", \"Green\", List(1, 2), \"Blue\", List(), List()))\n     * List(\"Red\", \"Green\", List(1, 2), \"Blue\")\n     * >>> removeEmpty(List(List(), List(), List(), List(), List(), \"Green\", List(1, 2), \"Blue\", List(), List()))\n     * List(\"Green\", List(1, 2), \"Blue\")\n     * >>> removeEmpty(List(List(), List(), List(), \"Python\", List(), List(), \"programming\", \"language\", List(), List(), List(), List(), List()))\n     * List(\"Python\", \"programming\", \"language\")\n     */\n    def removeEmpty(list1 : List[Any]) : List[Any] = {\n", "entry_point": "removeEmpty", "test": "\n\n    var arg00 : List[Any] = List(List(), List(), List(), \"\"\"Red\"\"\", \"\"\"Green\"\"\", List(1, 2), \"\"\"Blue\"\"\", List(), List())\n    var x0 : List[Any] = removeEmpty(arg00)\n    var v0 : List[Any] = List(\"\"\"Red\"\"\", \"\"\"Green\"\"\", List(1, 2), \"\"\"Blue\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(List(), List(), List(), List(), List(), \"\"\"Green\"\"\", List(1, 2), \"\"\"Blue\"\"\", List(), List())\n    var x1 : List[Any] = removeEmpty(arg10)\n    var v1 : List[Any] = List(\"\"\"Green\"\"\", List(1, 2), \"\"\"Blue\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(List(), List(), List(), \"\"\"Python\"\"\", List(), List(), \"\"\"programming\"\"\", \"\"\"language\"\"\", List(), List(), List(), List(), List())\n    var x2 : List[Any] = removeEmpty(arg20)\n    var v2 : List[Any] = List(\"\"\"Python\"\"\", \"\"\"programming\"\"\", \"\"\"language\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove empty lists from a given list of lists.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/362", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the item with maximum occurrences in a given list.\n     *\n     * >>> maxOccurrences(List(1, 2, 3, 1, 2, 3, 12, 4, 2))\n     * 2\n     * >>> maxOccurrences(List(1, 2, 6, 7, 0, 1, 0, 1, 0))\n     * [1,0]\n     * >>> maxOccurrences(List(1, 2, 3, 1, 2, 4, 1))\n     * 1\n     */\n    def maxOccurrences(nums : List[Int]) : Any = {\n", "entry_point": "maxOccurrences", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 1, 2, 3, 12, 4, 2)\n    var x0 : Any = maxOccurrences(arg00)\n    var v0 : Any = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 6, 7, 0, 1, 0, 1, 0)\n    var x1 : Any = maxOccurrences(arg10)\n    var v1 : Any = List(1, 0)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 1, 2, 4, 1)\n    var x2 : Any = maxOccurrences(arg20)\n    var v2 : Any = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the item with maximum occurrences in a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/363", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to add the k elements to each element in the tuple.\n     *\n     * >>> addKElement(List(List(1, 3, 4), List(2, 4, 6), List(3, 8, 1)), 4)\n     * List(List(5, 7, 8), List(6, 8, 10), List(7, 12, 5))\n     * >>> addKElement(List(List(1, 2, 3), List(4, 5, 6), List(7, 8, 9)), 8)\n     * List(List(9, 10, 11), List(12, 13, 14), List(15, 16, 17))\n     * >>> addKElement(List(List(11, 12, 13), List(14, 15, 16), List(17, 18, 19)), 9)\n     * List(List(20, 21, 22), List(23, 24, 25), List(26, 27, 28))\n     */\n    def addKElement(testList : List[List[Int]], k : Int) : List[List[Int]] = {\n", "entry_point": "addKElement", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 3, 4), List(2, 4, 6), List(3, 8, 1))\n    var arg01 : Int = 4\n    var x0 : List[List[Int]] = addKElement(arg00, arg01)\n    var v0 : List[List[Int]] = List(List(5, 7, 8), List(6, 8, 10), List(7, 12, 5))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1, 2, 3), List(4, 5, 6), List(7, 8, 9))\n    var arg11 : Int = 8\n    var x1 : List[List[Int]] = addKElement(arg10, arg11)\n    var v1 : List[List[Int]] = List(List(9, 10, 11), List(12, 13, 14), List(15, 16, 17))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(11, 12, 13), List(14, 15, 16), List(17, 18, 19))\n    var arg21 : Int = 9\n    var x2 : List[List[Int]] = addKElement(arg20, arg21)\n    var v2 : List[List[Int]] = List(List(20, 21, 22), List(23, 24, 25), List(26, 27, 28))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to add the k elements to each element in the tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/364", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n     *\n     * >>> minFlipToMakeStringAlternate(\"0001010111\")\n     * 2\n     * >>> minFlipToMakeStringAlternate(\"001\")\n     * 1\n     * >>> minFlipToMakeStringAlternate(\"010111011\")\n     * 2\n     */\n    def minFlipToMakeStringAlternate(str : String) : Int = {\n", "entry_point": "minFlipToMakeStringAlternate", "test": "\n\n    var arg00 : String = \"\"\"0001010111\"\"\"\n    var x0 : Int = minFlipToMakeStringAlternate(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"001\"\"\"\n    var x1 : Int = minFlipToMakeStringAlternate(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"010111011\"\"\"\n    var x2 : Int = minFlipToMakeStringAlternate(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/365", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the number of digits of a given number.\n     *\n     * >>> countDigit(12345)\n     * 5\n     * >>> countDigit(11223305)\n     * 8\n     * >>> countDigit(4123459)\n     * 7\n     */\n    def countDigit(n : Int) : Int = {\n", "entry_point": "countDigit", "test": "\n\n    var arg00 : Int = 12345\n    var x0 : Int = countDigit(arg00)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 11223305\n    var x1 : Int = countDigit(arg10)\n    var v1 : Int = 8\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4123459\n    var x2 : Int = countDigit(arg20)\n    var v2 : Int = 7\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the number of digits of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/366", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the largest product of the pair of adjacent elements from a given list of integers.\n     *\n     * >>> adjacentNumProduct(List(1, 2, 3, 4, 5, 6))\n     * 30\n     * >>> adjacentNumProduct(List(1, 2, 3, 4, 5))\n     * 20\n     * >>> adjacentNumProduct(List(2, 3))\n     * 6\n     */\n    def adjacentNumProduct(listNums : List[Int]) : Int = {\n", "entry_point": "adjacentNumProduct", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5, 6)\n    var x0 : Int = adjacentNumProduct(arg00)\n    var v0 : Int = 30\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5)\n    var x1 : Int = adjacentNumProduct(arg10)\n    var v1 : Int = 20\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 3)\n    var x2 : Int = adjacentNumProduct(arg20)\n    var v2 : Int = 6\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the largest product of the pair of adjacent elements from a given list of integers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/368", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to repeat the given tuple n times.\n     *\n     * >>> repeatTuples(List(1, 3), 4)\n     * List(List(1, 3), List(1, 3), List(1, 3), List(1, 3))\n     * >>> repeatTuples(List(1, 2), 3)\n     * List(List(1, 2), List(1, 2), List(1, 2))\n     * >>> repeatTuples(List(3, 4), 5)\n     * List(List(3, 4), List(3, 4), List(3, 4), List(3, 4), List(3, 4))\n     */\n    def repeatTuples(testTup : List[Int], n : Int) : List[List[Int]] = {\n", "entry_point": "repeatTuples", "test": "\n\n    var arg00 : List[Int] = List(1, 3)\n    var arg01 : Int = 4\n    var x0 : List[List[Int]] = repeatTuples(arg00, arg01)\n    var v0 : List[List[Int]] = List(List(1, 3), List(1, 3), List(1, 3), List(1, 3))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2)\n    var arg11 : Int = 3\n    var x1 : List[List[Int]] = repeatTuples(arg10, arg11)\n    var v1 : List[List[Int]] = List(List(1, 2), List(1, 2), List(1, 2))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3, 4)\n    var arg21 : Int = 5\n    var x2 : List[List[Int]] = repeatTuples(arg20, arg21)\n    var v2 : List[List[Int]] = List(List(3, 4), List(3, 4), List(3, 4), List(3, 4), List(3, 4))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to repeat the given tuple n times.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/369", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the lateral surface area of cuboid\n     *\n     * >>> lateralsurfaceCuboid(8, 5, 6)\n     * 156\n     * >>> lateralsurfaceCuboid(7, 9, 10)\n     * 320\n     * >>> lateralsurfaceCuboid(10, 20, 30)\n     * 1800\n     */\n    def lateralsurfaceCuboid(l : Int, w : Int, h : Int) : Int = {\n", "entry_point": "lateralsurfaceCuboid", "test": "\n\n    var arg00 : Int = 8\n    var arg01 : Int = 5\n    var arg02 : Int = 6\n    var x0 : Int = lateralsurfaceCuboid(arg00, arg01, arg02)\n    var v0 : Int = 156\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 7\n    var arg11 : Int = 9\n    var arg12 : Int = 10\n    var x1 : Int = lateralsurfaceCuboid(arg10, arg11, arg12)\n    var v1 : Int = 320\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 10\n    var arg21 : Int = 20\n    var arg22 : Int = 30\n    var x2 : Int = lateralsurfaceCuboid(arg20, arg21, arg22)\n    var v2 : Int = 1800\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the lateral surface area of cuboid", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/370", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort a tuple by its float element.\n     *\n     * >>> floatSort(List(List(\"item1\", \"12.20\"), List(\"item2\", \"15.10\"), List(\"item3\", \"24.5\")))\n     * List(List(\"item3\", \"24.5\"), List(\"item2\", \"15.10\"), List(\"item1\", \"12.20\"))\n     * >>> floatSort(List(List(\"item1\", \"15\"), List(\"item2\", \"10\"), List(\"item3\", \"20\")))\n     * List(List(\"item3\", \"20\"), List(\"item1\", \"15\"), List(\"item2\", \"10\"))\n     * >>> floatSort(List(List(\"item1\", \"5\"), List(\"item2\", \"10\"), List(\"item3\", \"14\")))\n     * List(List(\"item3\", \"14\"), List(\"item2\", \"10\"), List(\"item1\", \"5\"))\n     */\n    def floatSort(price : List[List[String]]) : List[List[String]] = {\n", "entry_point": "floatSort", "test": "\n\n    var arg00 : List[List[String]] = List(List(\"\"\"item1\"\"\", \"\"\"12.20\"\"\"), List(\"\"\"item2\"\"\", \"\"\"15.10\"\"\"), List(\"\"\"item3\"\"\", \"\"\"24.5\"\"\"))\n    var x0 : List[List[String]] = floatSort(arg00)\n    var v0 : List[List[String]] = List(List(\"\"\"item3\"\"\", \"\"\"24.5\"\"\"), List(\"\"\"item2\"\"\", \"\"\"15.10\"\"\"), List(\"\"\"item1\"\"\", \"\"\"12.20\"\"\"))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[String]] = List(List(\"\"\"item1\"\"\", \"\"\"15\"\"\"), List(\"\"\"item2\"\"\", \"\"\"10\"\"\"), List(\"\"\"item3\"\"\", \"\"\"20\"\"\"))\n    var x1 : List[List[String]] = floatSort(arg10)\n    var v1 : List[List[String]] = List(List(\"\"\"item3\"\"\", \"\"\"20\"\"\"), List(\"\"\"item1\"\"\", \"\"\"15\"\"\"), List(\"\"\"item2\"\"\", \"\"\"10\"\"\"))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[String]] = List(List(\"\"\"item1\"\"\", \"\"\"5\"\"\"), List(\"\"\"item2\"\"\", \"\"\"10\"\"\"), List(\"\"\"item3\"\"\", \"\"\"14\"\"\"))\n    var x2 : List[List[String]] = floatSort(arg20)\n    var v2 : List[List[String]] = List(List(\"\"\"item3\"\"\", \"\"\"14\"\"\"), List(\"\"\"item2\"\"\", \"\"\"10\"\"\"), List(\"\"\"item1\"\"\", \"\"\"5\"\"\"))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort a tuple by its float element.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/371", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the smallest missing element in a sorted array.\n     *\n     * >>> smallestMissing(List(0, 1, 2, 3, 4, 5, 6), 0, 6)\n     * 7\n     * >>> smallestMissing(List(0, 1, 2, 6, 9, 11, 15), 0, 6)\n     * 3\n     * >>> smallestMissing(List(1, 2, 3, 4, 6, 9, 11, 15), 0, 7)\n     * 0\n     */\n    def smallestMissing(a : List[Int], leftElement : Int, rightElement : Int) : Int = {\n", "entry_point": "smallestMissing", "test": "\n\n    var arg00 : List[Int] = List(0, 1, 2, 3, 4, 5, 6)\n    var arg01 : Int = 0\n    var arg02 : Int = 6\n    var x0 : Int = smallestMissing(arg00, arg01, arg02)\n    var v0 : Int = 7\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(0, 1, 2, 6, 9, 11, 15)\n    var arg11 : Int = 0\n    var arg12 : Int = 6\n    var x1 : Int = smallestMissing(arg10, arg11, arg12)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4, 6, 9, 11, 15)\n    var arg21 : Int = 0\n    var arg22 : Int = 7\n    var x2 : Int = smallestMissing(arg20, arg21, arg22)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the smallest missing element in a sorted array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/372", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n     *\n     * >>> heapAssending(List(18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1))\n     * List(1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18)\n     * >>> heapAssending(List(25, 35, 22, 85, 14, 65, 75, 25, 58))\n     * List(14, 22, 25, 25, 35, 58, 65, 75, 85)\n     * >>> heapAssending(List(1, 3, 5, 7, 9, 2, 4, 6, 8, 0))\n     * List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n     */\n    def heapAssending(nums : List[Int]) : List[Int] = {\n", "entry_point": "heapAssending", "test": "\n\n    var arg00 : List[Int] = List(18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1)\n    var x0 : List[Int] = heapAssending(arg00)\n    var v0 : List[Int] = List(1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(25, 35, 22, 85, 14, 65, 75, 25, 58)\n    var x1 : List[Int] = heapAssending(arg10)\n    var v1 : List[Int] = List(14, 22, 25, 25, 35, 58, 65, 75, 85)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)\n    var x2 : List[Int] = heapAssending(arg20)\n    var v2 : List[Int] = List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/373", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the volume of a cuboid.\n     *\n     * >>> volumeCuboid(1, 2, 3)\n     * 6\n     * >>> volumeCuboid(5, 7, 9)\n     * 315\n     * >>> volumeCuboid(10, 15, 21)\n     * 3150\n     */\n    def volumeCuboid(l : Int, w : Int, h : Int) : Int = {\n", "entry_point": "volumeCuboid", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = 2\n    var arg02 : Int = 3\n    var x0 : Int = volumeCuboid(arg00, arg01, arg02)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var arg11 : Int = 7\n    var arg12 : Int = 9\n    var x1 : Int = volumeCuboid(arg10, arg11, arg12)\n    var v1 : Int = 315\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 10\n    var arg21 : Int = 15\n    var arg22 : Int = 21\n    var x2 : Int = volumeCuboid(arg20, arg21, arg22)\n    var v2 : Int = 3150\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the volume of a cuboid.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/374", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to print all permutations of a given string including duplicates.\n     *\n     * >>> permuteString(\"ab\")\n     * List(\"ab\", \"ba\")\n     * >>> permuteString(\"abc\")\n     * List(\"abc\", \"bac\", \"bca\", \"acb\", \"cab\", \"cba\")\n     * >>> permuteString(\"abcd\")\n     * List(\"abcd\", \"bacd\", \"bcad\", \"bcda\", \"acbd\", \"cabd\", \"cbad\", \"cbda\", \"acdb\", \"cadb\", \"cdab\", \"cdba\", \"abdc\", \"badc\", \"bdac\", \"bdca\", \"adbc\", \"dabc\", \"dbac\", \"dbca\", \"adcb\", \"dacb\", \"dcab\", \"dcba\")\n     */\n    def permuteString(str : String) : List[String] = {\n", "entry_point": "permuteString", "test": "\n\n    var arg00 : String = \"\"\"ab\"\"\"\n    var x0 : List[String] = permuteString(arg00)\n    var v0 : List[String] = List(\"\"\"ab\"\"\", \"\"\"ba\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"abc\"\"\"\n    var x1 : List[String] = permuteString(arg10)\n    var v1 : List[String] = List(\"\"\"abc\"\"\", \"\"\"bac\"\"\", \"\"\"bca\"\"\", \"\"\"acb\"\"\", \"\"\"cab\"\"\", \"\"\"cba\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"abcd\"\"\"\n    var x2 : List[String] = permuteString(arg20)\n    var v2 : List[String] = List(\"\"\"abcd\"\"\", \"\"\"bacd\"\"\", \"\"\"bcad\"\"\", \"\"\"bcda\"\"\", \"\"\"acbd\"\"\", \"\"\"cabd\"\"\", \"\"\"cbad\"\"\", \"\"\"cbda\"\"\", \"\"\"acdb\"\"\", \"\"\"cadb\"\"\", \"\"\"cdab\"\"\", \"\"\"cdba\"\"\", \"\"\"abdc\"\"\", \"\"\"badc\"\"\", \"\"\"bdac\"\"\", \"\"\"bdca\"\"\", \"\"\"adbc\"\"\", \"\"\"dabc\"\"\", \"\"\"dbac\"\"\", \"\"\"dbca\"\"\", \"\"\"adcb\"\"\", \"\"\"dacb\"\"\", \"\"\"dcab\"\"\", \"\"\"dcba\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to print all permutations of a given string including duplicates.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/375", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to round the given number to the nearest multiple of a specific number.\n     *\n     * >>> roundNum(4722, 10)\n     * 4720\n     * >>> roundNum(1111, 5)\n     * 1110\n     * >>> roundNum(219, 2)\n     * 218\n     */\n    def roundNum(n : Int, m : Int) : Int = {\n", "entry_point": "roundNum", "test": "\n\n    var arg00 : Int = 4722\n    var arg01 : Int = 10\n    var x0 : Int = roundNum(arg00, arg01)\n    var v0 : Int = 4720\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1111\n    var arg11 : Int = 5\n    var x1 : Int = roundNum(arg10, arg11)\n    var v1 : Int = 1110\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 219\n    var arg21 : Int = 2\n    var x2 : Int = roundNum(arg20, arg21)\n    var v2 : Int = 218\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to round the given number to the nearest multiple of a specific number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/376", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n     *\n     * >>> removeReplica(List(1, 1, 4, 4, 4, 5, 5, 6, 7, 7))\n     * List(1, \"MSP\", 4, \"MSP\", \"MSP\", 5, \"MSP\", 6, 7, \"MSP\")\n     * >>> removeReplica(List(2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9))\n     * List(2, 3, 4, \"MSP\", 5, 6, \"MSP\", 7, 8, 9, \"MSP\")\n     * >>> removeReplica(List(2, 2, 5, 4, 5, 7, 5, 6, 7, 7))\n     * List(2, \"MSP\", 5, 4, \"MSP\", 7, \"MSP\", 6, \"MSP\", \"MSP\")\n     */\n    def removeReplica(testTup : List[Int]) : List[Any] = {\n", "entry_point": "removeReplica", "test": "\n\n    var arg00 : List[Int] = List(1, 1, 4, 4, 4, 5, 5, 6, 7, 7)\n    var x0 : List[Any] = removeReplica(arg00)\n    var v0 : List[Any] = List(1, \"\"\"MSP\"\"\", 4, \"\"\"MSP\"\"\", \"\"\"MSP\"\"\", 5, \"\"\"MSP\"\"\", 6, 7, \"\"\"MSP\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)\n    var x1 : List[Any] = removeReplica(arg10)\n    var v1 : List[Any] = List(2, 3, 4, \"\"\"MSP\"\"\", 5, 6, \"\"\"MSP\"\"\", 7, 8, 9, \"\"\"MSP\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 2, 5, 4, 5, 7, 5, 6, 7, 7)\n    var x2 : List[Any] = removeReplica(arg20)\n    var v2 : List[Any] = List(2, \"\"\"MSP\"\"\", 5, 4, \"\"\"MSP\"\"\", 7, \"\"\"MSP\"\"\", 6, \"\"\"MSP\"\"\", \"\"\"MSP\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/377", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to remove all occurrences of a character in a given string.\n     *\n     * >>> removeChar(\"aba\", \"a\")\n     * \"b\"\n     * >>> removeChar(\"toggle\", \"g\")\n     * \"tole\"\n     * >>> removeChar(\"aabbc\", \"b\")\n     * \"aac\"\n     */\n    def removeChar(s : String, c : String) : String = {\n", "entry_point": "removeChar", "test": "\n\n    var arg00 : String = \"\"\"aba\"\"\"\n    var arg01 : String = \"\"\"a\"\"\"\n    var x0 : String = removeChar(arg00, arg01)\n    var v0 : String = \"\"\"b\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"toggle\"\"\"\n    var arg11 : String = \"\"\"g\"\"\"\n    var x1 : String = removeChar(arg10, arg11)\n    var v1 : String = \"\"\"tole\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"aabbc\"\"\"\n    var arg21 : String = \"\"\"b\"\"\"\n    var x2 : String = removeChar(arg20, arg21)\n    var v2 : String = \"\"\"aac\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to remove all occurrences of a character in a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/378", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to shift last element to first position in the given list.\n     *\n     * >>> moveFirst(List(1, 2, 3, 4))\n     * List(4, 1, 2, 3)\n     * >>> moveFirst(List(0, 1, 2, 3))\n     * List(3, 0, 1, 2)\n     * >>> moveFirst(List(9, 8, 7, 1))\n     * List(1, 9, 8, 7)\n     */\n    def moveFirst(testList : List[Int]) : List[Int] = {\n", "entry_point": "moveFirst", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4)\n    var x0 : List[Int] = moveFirst(arg00)\n    var v0 : List[Int] = List(4, 1, 2, 3)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(0, 1, 2, 3)\n    var x1 : List[Int] = moveFirst(arg10)\n    var v1 : List[Int] = List(3, 0, 1, 2)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(9, 8, 7, 1)\n    var x2 : List[Int] = moveFirst(arg20)\n    var v2 : List[Int] = List(1, 9, 8, 7)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to shift last element to first position in the given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/379", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the surface area of a cuboid.\n     *\n     * >>> surfaceareaCuboid(1, 2, 3)\n     * 22\n     * >>> surfaceareaCuboid(5, 7, 9)\n     * 286\n     * >>> surfaceareaCuboid(10, 15, 21)\n     * 1350\n     */\n    def surfaceareaCuboid(l : Int, w : Int, h : Int) : Int = {\n", "entry_point": "surfaceareaCuboid", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = 2\n    var arg02 : Int = 3\n    var x0 : Int = surfaceareaCuboid(arg00, arg01, arg02)\n    var v0 : Int = 22\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var arg11 : Int = 7\n    var arg12 : Int = 9\n    var x1 : Int = surfaceareaCuboid(arg10, arg11, arg12)\n    var v1 : Int = 286\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 10\n    var arg21 : Int = 15\n    var arg22 : Int = 21\n    var x2 : Int = surfaceareaCuboid(arg20, arg21, arg22)\n    var v2 : Int = 1350\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the surface area of a cuboid.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/380", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to generate a two-dimensional array.\n     *\n     * >>> multiList(3, 4)\n     * List(List(0, 0, 0, 0), List(0, 1, 2, 3), List(0, 2, 4, 6))\n     * >>> multiList(5, 7)\n     * List(List(0, 0, 0, 0, 0, 0, 0), List(0, 1, 2, 3, 4, 5, 6), List(0, 2, 4, 6, 8, 10, 12), List(0, 3, 6, 9, 12, 15, 18), List(0, 4, 8, 12, 16, 20, 24))\n     * >>> multiList(10, 15)\n     * List(List(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), List(0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28), List(0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42), List(0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56), List(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70), List(0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84), List(0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98), List(0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112), List(0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126))\n     */\n    def multiList(rownum : Int, colnum : Int) : List[List[Int]] = {\n", "entry_point": "multiList", "test": "\n\n    var arg00 : Int = 3\n    var arg01 : Int = 4\n    var x0 : List[List[Int]] = multiList(arg00, arg01)\n    var v0 : List[List[Int]] = List(List(0, 0, 0, 0), List(0, 1, 2, 3), List(0, 2, 4, 6))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var arg11 : Int = 7\n    var x1 : List[List[Int]] = multiList(arg10, arg11)\n    var v1 : List[List[Int]] = List(List(0, 0, 0, 0, 0, 0, 0), List(0, 1, 2, 3, 4, 5, 6), List(0, 2, 4, 6, 8, 10, 12), List(0, 3, 6, 9, 12, 15, 18), List(0, 4, 8, 12, 16, 20, 24))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 10\n    var arg21 : Int = 15\n    var x2 : List[List[Int]] = multiList(arg20, arg21)\n    var v2 : List[List[Int]] = List(List(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), List(0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28), List(0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42), List(0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56), List(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70), List(0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84), List(0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98), List(0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112), List(0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to generate a two-dimensional array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/381", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort a list of lists by a given index of the inner list.\n     *\n     * >>> indexOnInnerList(List(List(\"Greyson Fulton\", 98, 99), List(\"Brady Kent\", 97, 96), List(\"Wyatt Knott\", 91, 94), List(\"Beau Turnbull\", 94, 98)), 0)\n     * List(List(\"Beau Turnbull\", 94, 98), List(\"Brady Kent\", 97, 96), List(\"Greyson Fulton\", 98, 99), List(\"Wyatt Knott\", 91, 94))\n     * >>> indexOnInnerList(List(List(\"Greyson Fulton\", 98, 99), List(\"Brady Kent\", 97, 96), List(\"Wyatt Knott\", 91, 94), List(\"Beau Turnbull\", 94, 98)), 1)\n     * List(List(\"Wyatt Knott\", 91, 94), List(\"Beau Turnbull\", 94, 98), List(\"Brady Kent\", 97, 96), List(\"Greyson Fulton\", 98, 99))\n     * >>> indexOnInnerList(List(List(\"Greyson Fulton\", 98, 99), List(\"Brady Kent\", 97, 96), List(\"Wyatt Knott\", 91, 94), List(\"Beau Turnbull\", 94, 98)), 2)\n     * List(List(\"Wyatt Knott\", 91, 94), List(\"Brady Kent\", 97, 96), List(\"Beau Turnbull\", 94, 98), List(\"Greyson Fulton\", 98, 99))\n     */\n    def indexOnInnerList(listData : List[List[Any]], indexNo : Int) : List[List[Any]] = {\n", "entry_point": "indexOnInnerList", "test": "\n\n    var arg00 : List[List[Any]] = List(List(\"\"\"Greyson Fulton\"\"\", 98, 99), List(\"\"\"Brady Kent\"\"\", 97, 96), List(\"\"\"Wyatt Knott\"\"\", 91, 94), List(\"\"\"Beau Turnbull\"\"\", 94, 98))\n    var arg01 : Int = 0\n    var x0 : List[List[Any]] = indexOnInnerList(arg00, arg01)\n    var v0 : List[List[Any]] = List(List(\"\"\"Beau Turnbull\"\"\", 94, 98), List(\"\"\"Brady Kent\"\"\", 97, 96), List(\"\"\"Greyson Fulton\"\"\", 98, 99), List(\"\"\"Wyatt Knott\"\"\", 91, 94))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(\"\"\"Greyson Fulton\"\"\", 98, 99), List(\"\"\"Brady Kent\"\"\", 97, 96), List(\"\"\"Wyatt Knott\"\"\", 91, 94), List(\"\"\"Beau Turnbull\"\"\", 94, 98))\n    var arg11 : Int = 1\n    var x1 : List[List[Any]] = indexOnInnerList(arg10, arg11)\n    var v1 : List[List[Any]] = List(List(\"\"\"Wyatt Knott\"\"\", 91, 94), List(\"\"\"Beau Turnbull\"\"\", 94, 98), List(\"\"\"Brady Kent\"\"\", 97, 96), List(\"\"\"Greyson Fulton\"\"\", 98, 99))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(\"\"\"Greyson Fulton\"\"\", 98, 99), List(\"\"\"Brady Kent\"\"\", 97, 96), List(\"\"\"Wyatt Knott\"\"\", 91, 94), List(\"\"\"Beau Turnbull\"\"\", 94, 98))\n    var arg21 : Int = 2\n    var x2 : List[List[Any]] = indexOnInnerList(arg20, arg21)\n    var v2 : List[List[Any]] = List(List(\"\"\"Wyatt Knott\"\"\", 91, 94), List(\"\"\"Brady Kent\"\"\", 97, 96), List(\"\"\"Beau Turnbull\"\"\", 94, 98), List(\"\"\"Greyson Fulton\"\"\", 98, 99))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort a list of lists by a given index of the inner list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/382", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the number of rotations in a circularly sorted array.\n     *\n     * >>> findRotationCount(List(8, 9, 10, 1, 2, 3, 4, 5, 6, 7))\n     * 3\n     * >>> findRotationCount(List(8, 9, 10, 2, 5, 6))\n     * 3\n     * >>> findRotationCount(List(2, 5, 6, 8, 9, 10))\n     * 0\n     */\n    def findRotationCount(a : List[Int]) : Int = {\n", "entry_point": "findRotationCount", "test": "\n\n    var arg00 : List[Int] = List(8, 9, 10, 1, 2, 3, 4, 5, 6, 7)\n    var x0 : Int = findRotationCount(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(8, 9, 10, 2, 5, 6)\n    var x1 : Int = findRotationCount(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 5, 6, 8, 9, 10)\n    var x2 : Int = findRotationCount(arg20)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the number of rotations in a circularly sorted array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/383", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to toggle all odd bits of a given number.\n     *\n     * >>> evenBitToggleNumber(10)\n     * 15\n     * >>> evenBitToggleNumber(20)\n     * 1\n     * >>> evenBitToggleNumber(30)\n     * 11\n     */\n    def evenBitToggleNumber(n : Int) : Int = {\n", "entry_point": "evenBitToggleNumber", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = evenBitToggleNumber(arg00)\n    var v0 : Int = 15\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 20\n    var x1 : Int = evenBitToggleNumber(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 30\n    var x2 : Int = evenBitToggleNumber(arg20)\n    var v2 : Int = 11\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to toggle all odd bits of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/384", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the frequency of the smallest value in a given array.\n     *\n     * >>> frequencyOfSmallest(5, List(1, 2, 3, 4, 3))\n     * 1\n     * >>> frequencyOfSmallest(7, List(3, 1, 2, 5, 6, 2, 3))\n     * 1\n     * >>> frequencyOfSmallest(7, List(3, 3, 6, 3, 7, 4, 9))\n     * 3\n     */\n    def frequencyOfSmallest(n : Int, arr : List[Int]) : Int = {\n", "entry_point": "frequencyOfSmallest", "test": "\n\n    var arg00 : Int = 5\n    var arg01 : List[Int] = List(1, 2, 3, 4, 3)\n    var x0 : Int = frequencyOfSmallest(arg00, arg01)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 7\n    var arg11 : List[Int] = List(3, 1, 2, 5, 6, 2, 3)\n    var x1 : Int = frequencyOfSmallest(arg10, arg11)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 7\n    var arg21 : List[Int] = List(3, 3, 6, 3, 7, 4, 9)\n    var x2 : Int = frequencyOfSmallest(arg20, arg21)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the frequency of the smallest value in a given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/385", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the n'th perrin number using recursion.\n     *\n     * >>> getPerrin(9)\n     * 12\n     * >>> getPerrin(4)\n     * 2\n     * >>> getPerrin(6)\n     * 5\n     */\n    def getPerrin(n : Int) : Int = {\n", "entry_point": "getPerrin", "test": "\n\n    var arg00 : Int = 9\n    var x0 : Int = getPerrin(arg00)\n    var v0 : Int = 12\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var x1 : Int = getPerrin(arg10)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 6\n    var x2 : Int = getPerrin(arg20)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the n'th perrin number using recursion.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/386", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n     *\n     * >>> swapCount(\"[]][][\")\n     * 2\n     * >>> swapCount(\"[[][]]\")\n     * 0\n     * >>> swapCount(\"[[][]]][\")\n     * 1\n     */\n    def swapCount(s : String) : Int = {\n", "entry_point": "swapCount", "test": "\n\n    var arg00 : String = \"\"\"[]][][\"\"\"\n    var x0 : Int = swapCount(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"[[][]]\"\"\"\n    var x1 : Int = swapCount(arg10)\n    var v1 : Int = 0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"[[][]]][\"\"\"\n    var x2 : Int = swapCount(arg20)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/387", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the hexadecimal number is even or odd.\n     *\n     * >>> evenOrOdd(\"AB3454D\")\n     * \"Odd\"\n     * >>> evenOrOdd(\"ABC\")\n     * \"Even\"\n     * >>> evenOrOdd(\"AAD\")\n     * \"Odd\"\n     */\n    def evenOrOdd(n : String) : String = {\n", "entry_point": "evenOrOdd", "test": "\n\n    var arg00 : String = \"\"\"AB3454D\"\"\"\n    var x0 : String = evenOrOdd(arg00)\n    var v0 : String = \"\"\"Odd\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"ABC\"\"\"\n    var x1 : String = evenOrOdd(arg10)\n    var v1 : String = \"\"\"Even\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"AAD\"\"\"\n    var x2 : String = evenOrOdd(arg20)\n    var v2 : String = \"\"\"Odd\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the hexadecimal number is even or odd.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/388", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the highest power of 2 that is less than or equal to n.\n     *\n     * >>> highestPowerOf2(10)\n     * 8\n     * >>> highestPowerOf2(19)\n     * 16\n     * >>> highestPowerOf2(32)\n     * 32\n     */\n    def highestPowerOf2(n : Int) : Int = {\n", "entry_point": "highestPowerOf2", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = highestPowerOf2(arg00)\n    var v0 : Int = 8\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 19\n    var x1 : Int = highestPowerOf2(arg10)\n    var v1 : Int = 16\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 32\n    var x2 : Int = highestPowerOf2(arg20)\n    var v2 : Int = 32\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the highest power of 2 that is less than or equal to n.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/389", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the n'th lucas number.\n     *\n     * >>> findLucas(9)\n     * 76\n     * >>> findLucas(4)\n     * 7\n     * >>> findLucas(3)\n     * 4\n     */\n    def findLucas(n : Int) : Int = {\n", "entry_point": "findLucas", "test": "\n\n    var arg00 : Int = 9\n    var x0 : Int = findLucas(arg00)\n    var v0 : Int = 76\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var x1 : Int = findLucas(arg10)\n    var v1 : Int = 7\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 3\n    var x2 : Int = findLucas(arg20)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the n'th lucas number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/390", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to insert a given string at the beginning of all items in a list.\n     *\n     * >>> addString(List(1, 2, 3, 4), \"temp{0}\")\n     * List(\"temp1\", \"temp2\", \"temp3\", \"temp4\")\n     * >>> addString(List(\"a\", \"b\", \"c\", \"d\"), \"python{0}\")\n     * List(\"pythona\", \"pythonb\", \"pythonc\", \"pythond\")\n     * >>> addString(List(5, 6, 7, 8), \"string{0}\")\n     * List(\"string5\", \"string6\", \"string7\", \"string8\")\n     */\n    def addString(list : List[Any], string : String) : List[String] = {\n", "entry_point": "addString", "test": "\n\n    var arg00 : List[Any] = List(1, 2, 3, 4)\n    var arg01 : String = \"\"\"temp{0}\"\"\"\n    var x0 : List[String] = addString(arg00, arg01)\n    var v0 : List[String] = List(\"\"\"temp1\"\"\", \"\"\"temp2\"\"\", \"\"\"temp3\"\"\", \"\"\"temp4\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(\"\"\"a\"\"\", \"\"\"b\"\"\", \"\"\"c\"\"\", \"\"\"d\"\"\")\n    var arg11 : String = \"\"\"python{0}\"\"\"\n    var x1 : List[String] = addString(arg10, arg11)\n    var v1 : List[String] = List(\"\"\"pythona\"\"\", \"\"\"pythonb\"\"\", \"\"\"pythonc\"\"\", \"\"\"pythond\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(5, 6, 7, 8)\n    var arg21 : String = \"\"\"string{0}\"\"\"\n    var x2 : List[String] = addString(arg20, arg21)\n    var v2 : List[String] = List(\"\"\"string5\"\"\", \"\"\"string6\"\"\", \"\"\"string7\"\"\", \"\"\"string8\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to insert a given string at the beginning of all items in a list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/391", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert more than one list to nested dictionary.\n     *\n     * >>> convertListDictionary(List(\"S001\", \"S002\", \"S003\", \"S004\"), List(\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"), List(85, 98, 89, 92))\n     * List(Map(\"S001\"->Map(\"Adina Park\"->85)), Map(\"S002\"->Map(\"Leyton Marsh\"->98)), Map(\"S003\"->Map(\"Duncan Boyle\"->89)), Map(\"S004\"->Map(\"Saim Richards\"->92)))\n     * >>> convertListDictionary(List(\"abc\", \"def\", \"ghi\", \"jkl\"), List(\"python\", \"program\", \"language\", \"programs\"), List(100, 200, 300, 400))\n     * List(Map(\"abc\"->Map(\"python\"->100)), Map(\"def\"->Map(\"program\"->200)), Map(\"ghi\"->Map(\"language\"->300)), Map(\"jkl\"->Map(\"programs\"->400)))\n     * >>> convertListDictionary(List(\"A1\", \"A2\", \"A3\", \"A4\"), List(\"java\", \"C\", \"C++\", \"DBMS\"), List(10, 20, 30, 40))\n     * List(Map(\"A1\"->Map(\"java\"->10)), Map(\"A2\"->Map(\"C\"->20)), Map(\"A3\"->Map(\"C++\"->30)), Map(\"A4\"->Map(\"DBMS\"->40)))\n     */\n    def convertListDictionary(l1 : List[String], l2 : List[String], l3 : List[Int]) : List[Map[String, Map[String, Int]]] = {\n", "entry_point": "convertListDictionary", "test": "\n\n    var arg00 : List[String] = List(\"\"\"S001\"\"\", \"\"\"S002\"\"\", \"\"\"S003\"\"\", \"\"\"S004\"\"\")\n    var arg01 : List[String] = List(\"\"\"Adina Park\"\"\", \"\"\"Leyton Marsh\"\"\", \"\"\"Duncan Boyle\"\"\", \"\"\"Saim Richards\"\"\")\n    var arg02 : List[Int] = List(85, 98, 89, 92)\n    var x0 : List[Map[String, Map[String, Int]]] = convertListDictionary(arg00, arg01, arg02)\n    var v0 : List[Map[String, Map[String, Int]]] = List(Map(\"\"\"S001\"\"\" -> Map(\"\"\"Adina Park\"\"\" -> 85)), Map(\"\"\"S002\"\"\" -> Map(\"\"\"Leyton Marsh\"\"\" -> 98)), Map(\"\"\"S003\"\"\" -> Map(\"\"\"Duncan Boyle\"\"\" -> 89)), Map(\"\"\"S004\"\"\" -> Map(\"\"\"Saim Richards\"\"\" -> 92)))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"abc\"\"\", \"\"\"def\"\"\", \"\"\"ghi\"\"\", \"\"\"jkl\"\"\")\n    var arg11 : List[String] = List(\"\"\"python\"\"\", \"\"\"program\"\"\", \"\"\"language\"\"\", \"\"\"programs\"\"\")\n    var arg12 : List[Int] = List(100, 200, 300, 400)\n    var x1 : List[Map[String, Map[String, Int]]] = convertListDictionary(arg10, arg11, arg12)\n    var v1 : List[Map[String, Map[String, Int]]] = List(Map(\"\"\"abc\"\"\" -> Map(\"\"\"python\"\"\" -> 100)), Map(\"\"\"def\"\"\" -> Map(\"\"\"program\"\"\" -> 200)), Map(\"\"\"ghi\"\"\" -> Map(\"\"\"language\"\"\" -> 300)), Map(\"\"\"jkl\"\"\" -> Map(\"\"\"programs\"\"\" -> 400)))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"A1\"\"\", \"\"\"A2\"\"\", \"\"\"A3\"\"\", \"\"\"A4\"\"\")\n    var arg21 : List[String] = List(\"\"\"java\"\"\", \"\"\"C\"\"\", \"\"\"C++\"\"\", \"\"\"DBMS\"\"\")\n    var arg22 : List[Int] = List(10, 20, 30, 40)\n    var x2 : List[Map[String, Map[String, Int]]] = convertListDictionary(arg20, arg21, arg22)\n    var v2 : List[Map[String, Map[String, Int]]] = List(Map(\"\"\"A1\"\"\" -> Map(\"\"\"java\"\"\" -> 10)), Map(\"\"\"A2\"\"\" -> Map(\"\"\"C\"\"\" -> 20)), Map(\"\"\"A3\"\"\" -> Map(\"\"\"C++\"\"\" -> 30)), Map(\"\"\"A4\"\"\" -> Map(\"\"\"DBMS\"\"\" -> 40)))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert more than one list to nested dictionary.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/392", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n     *\n     * >>> getMaxSum(60)\n     * 106\n     * >>> getMaxSum(10)\n     * 12\n     * >>> getMaxSum(2)\n     * 2\n     */\n    def getMaxSum(n : Int) : Int = {\n", "entry_point": "getMaxSum", "test": "\n\n    var arg00 : Int = 60\n    var x0 : Int = getMaxSum(arg00)\n    var v0 : Int = 106\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var x1 : Int = getMaxSum(arg10)\n    var v1 : Int = 12\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var x2 : Int = getMaxSum(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/393", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the list with maximum length using lambda function.\n     *\n     * >>> maxLengthList(List(List(0), List(1, 3), List(5, 7), List(9, 11), List(13, 15, 17)))\n     * List(3, List(13, 15, 17))\n     * >>> maxLengthList(List(List(1, 2, 3, 4, 5), List(1, 2, 3, 4), List(1, 2, 3), List(1, 2), List(1)))\n     * List(5, List(1, 2, 3, 4, 5))\n     * >>> maxLengthList(List(List(3, 4, 5), List(6, 7, 8, 9), List(10, 11, 12)))\n     * List(4, List(6, 7, 8, 9))\n     */\n    def maxLengthList(inputList : List[List[Int]]) : List[Any] = {\n", "entry_point": "maxLengthList", "test": "\n\n    var arg00 : List[List[Int]] = List(List(0), List(1, 3), List(5, 7), List(9, 11), List(13, 15, 17))\n    var x0 : List[Any] = maxLengthList(arg00)\n    var v0 : List[Any] = List(3, List(13, 15, 17))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1, 2, 3, 4, 5), List(1, 2, 3, 4), List(1, 2, 3), List(1, 2), List(1))\n    var x1 : List[Any] = maxLengthList(arg10)\n    var v1 : List[Any] = List(5, List(1, 2, 3, 4, 5))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(3, 4, 5), List(6, 7, 8, 9), List(10, 11, 12))\n    var x2 : List[Any] = maxLengthList(arg20)\n    var v2 : List[Any] = List(4, List(6, 7, 8, 9))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the list with maximum length using lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/394", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if given tuple is distinct or not.\n     *\n     * >>> checkDistinct(List(1, 4, 5, 6, 1, 4))\n     * false\n     * >>> checkDistinct(List(1, 4, 5, 6))\n     * true\n     * >>> checkDistinct(List(2, 3, 4, 5, 6))\n     * true\n     */\n    def checkDistinct(testTup : List[Int]) : Boolean = {\n", "entry_point": "checkDistinct", "test": "\n\n    var arg00 : List[Int] = List(1, 4, 5, 6, 1, 4)\n    var x0 : Boolean = checkDistinct(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 4, 5, 6)\n    var x1 : Boolean = checkDistinct(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 3, 4, 5, 6)\n    var x2 : Boolean = checkDistinct(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if given tuple is distinct or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/395", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the first non-repeated character in a given string.\n     *\n     * >>> firstNonRepeatingCharacter(\"abcabc\")\n     * \"none\"\n     * >>> firstNonRepeatingCharacter(\"abc\")\n     * \"a\"\n     * >>> firstNonRepeatingCharacter(\"ababc\")\n     * \"c\"\n     */\n    def firstNonRepeatingCharacter(str1 : String) : Any = {\n", "entry_point": "firstNonRepeatingCharacter", "test": "\n\n    var arg00 : String = \"\"\"abcabc\"\"\"\n    var x0 : Any = firstNonRepeatingCharacter(arg00)\n    var v0 : Any = \"none\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"abc\"\"\"\n    var x1 : Any = firstNonRepeatingCharacter(arg10)\n    var v1 : Any = \"\"\"a\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"ababc\"\"\"\n    var x2 : Any = firstNonRepeatingCharacter(arg20)\n    var v2 : Any = \"\"\"c\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the first non-repeated character in a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/396", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether the given string starts and ends with the same character or not using regex.\n     *\n     * >>> checkChar(\"abba\")\n     * \"Valid\"\n     * >>> checkChar(\"a\")\n     * \"Valid\"\n     * >>> checkChar(\"abcd\")\n     * \"Invalid\"\n     */\n    def checkChar(string : String) : String = {\n", "entry_point": "checkChar", "test": "\n\n    var arg00 : String = \"\"\"abba\"\"\"\n    var x0 : String = checkChar(arg00)\n    var v0 : String = \"\"\"Valid\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"a\"\"\"\n    var x1 : String = checkChar(arg10)\n    var v1 : String = \"\"\"Valid\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"abcd\"\"\"\n    var x2 : String = checkChar(arg20)\n    var v2 : String = \"\"\"Invalid\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether the given string starts and ends with the same character or not using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/397", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the median of three specific numbers.\n     *\n     * >>> medianNumbers(25, 55, 65)\n     * 55.0\n     * >>> medianNumbers(20, 10, 30)\n     * 20.0\n     * >>> medianNumbers(15, 45, 75)\n     * 45.0\n     */\n    def medianNumbers(a : Int, b : Int, c : Int) : Double = {\n", "entry_point": "medianNumbers", "test": "\n\n    var arg00 : Int = 25\n    var arg01 : Int = 55\n    var arg02 : Int = 65\n    var x0 : Double = medianNumbers(arg00, arg01, arg02)\n    var v0 : Double = 55.0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 20\n    var arg11 : Int = 10\n    var arg12 : Int = 30\n    var x1 : Double = medianNumbers(arg10, arg11, arg12)\n    var v1 : Double = 20.0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 15\n    var arg21 : Int = 45\n    var arg22 : Int = 75\n    var x2 : Double = medianNumbers(arg20, arg21, arg22)\n    var v2 : Double = 45.0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the median of three specific numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/398", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to compute the sum of digits of each number of a given list.\n     *\n     * >>> sumOfDigits(List(10, 2, 56))\n     * 14\n     * >>> sumOfDigits(List(List(10, 20, 4, 5, \"b\", 70, \"a\")))\n     * 19\n     * >>> sumOfDigits(List(10, 20, -4, 5, -70))\n     * 19\n     */\n    def sumOfDigits(nums : List[Any]) : Int = {\n", "entry_point": "sumOfDigits", "test": "\n\n    var arg00 : List[Any] = List(10, 2, 56)\n    var x0 : Int = sumOfDigits(arg00)\n    var v0 : Int = 14\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(List(10, 20, 4, 5, \"\"\"b\"\"\", 70, \"\"\"a\"\"\"))\n    var x1 : Int = sumOfDigits(arg10)\n    var v1 : Int = 19\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(10, 20, -4, 5, -70)\n    var x2 : Int = sumOfDigits(arg20)\n    var v2 : Int = 19\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to compute the sum of digits of each number of a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/399", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to perform the mathematical bitwise xor operation across the given tuples.\n     *\n     * >>> bitwiseXor(List(10, 4, 6, 9), List(5, 2, 3, 3))\n     * List(15, 6, 5, 10)\n     * >>> bitwiseXor(List(11, 5, 7, 10), List(6, 3, 4, 4))\n     * List(13, 6, 3, 14)\n     * >>> bitwiseXor(List(12, 6, 8, 11), List(7, 4, 5, 6))\n     * List(11, 2, 13, 13)\n     */\n    def bitwiseXor(testTup1 : List[Int], testTup2 : List[Int]) : List[Int] = {\n", "entry_point": "bitwiseXor", "test": "\n\n    var arg00 : List[Int] = List(10, 4, 6, 9)\n    var arg01 : List[Int] = List(5, 2, 3, 3)\n    var x0 : List[Int] = bitwiseXor(arg00, arg01)\n    var v0 : List[Int] = List(15, 6, 5, 10)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(11, 5, 7, 10)\n    var arg11 : List[Int] = List(6, 3, 4, 4)\n    var x1 : List[Int] = bitwiseXor(arg10, arg11)\n    var v1 : List[Int] = List(13, 6, 3, 14)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(12, 6, 8, 11)\n    var arg21 : List[Int] = List(7, 4, 5, 6)\n    var x2 : List[Int] = bitwiseXor(arg20, arg21)\n    var v2 : List[Int] = List(11, 2, 13, 13)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/400", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract the frequency of unique tuples in the given list order irrespective.\n     *\n     * >>> extractFreq(List(List(3, 4), List(1, 2), List(4, 3), List(5, 6)))\n     * 3\n     * >>> extractFreq(List(List(4, 15), List(2, 3), List(5, 4), List(6, 7)))\n     * 4\n     * >>> extractFreq(List(List(5, 16), List(2, 3), List(6, 5), List(6, 9)))\n     * 4\n     */\n    def extractFreq(testList : List[List[Int]]) : Int = {\n", "entry_point": "extractFreq", "test": "\n\n    var arg00 : List[List[Int]] = List(List(3, 4), List(1, 2), List(4, 3), List(5, 6))\n    var x0 : Int = extractFreq(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(4, 15), List(2, 3), List(5, 4), List(6, 7))\n    var x1 : Int = extractFreq(arg10)\n    var v1 : Int = 4\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(5, 16), List(2, 3), List(6, 5), List(6, 9))\n    var x2 : Int = extractFreq(arg20)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract the frequency of unique tuples in the given list order irrespective.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/401", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n     *\n     * >>> addNestedTuples(List(List(1, 3), List(4, 5), List(2, 9), List(1, 10)), List(List(6, 7), List(3, 9), List(1, 1), List(7, 3)))\n     * List(List(7, 10), List(7, 14), List(3, 10), List(8, 13))\n     * >>> addNestedTuples(List(List(2, 4), List(5, 6), List(3, 10), List(2, 11)), List(List(7, 8), List(4, 10), List(2, 2), List(8, 4)))\n     * List(List(9, 12), List(9, 16), List(5, 12), List(10, 15))\n     * >>> addNestedTuples(List(List(3, 5), List(6, 7), List(4, 11), List(3, 12)), List(List(8, 9), List(5, 11), List(3, 3), List(9, 5)))\n     * List(List(11, 14), List(11, 18), List(7, 14), List(12, 17))\n     */\n    def addNestedTuples(testTup1 : List[List[Int]], testTup2 : List[List[Int]]) : List[List[Int]] = {\n", "entry_point": "addNestedTuples", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 3), List(4, 5), List(2, 9), List(1, 10))\n    var arg01 : List[List[Int]] = List(List(6, 7), List(3, 9), List(1, 1), List(7, 3))\n    var x0 : List[List[Int]] = addNestedTuples(arg00, arg01)\n    var v0 : List[List[Int]] = List(List(7, 10), List(7, 14), List(3, 10), List(8, 13))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(2, 4), List(5, 6), List(3, 10), List(2, 11))\n    var arg11 : List[List[Int]] = List(List(7, 8), List(4, 10), List(2, 2), List(8, 4))\n    var x1 : List[List[Int]] = addNestedTuples(arg10, arg11)\n    var v1 : List[List[Int]] = List(List(9, 12), List(9, 16), List(5, 12), List(10, 15))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(3, 5), List(6, 7), List(4, 11), List(3, 12))\n    var arg21 : List[List[Int]] = List(List(8, 9), List(5, 11), List(3, 3), List(9, 5))\n    var x2 : List[List[Int]] = addNestedTuples(arg20, arg21)\n    var v2 : List[List[Int]] = List(List(11, 14), List(11, 18), List(7, 14), List(12, 17))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/402", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to compute the value of ncr%p.\n     *\n     * >>> ncrModp(10, 2, 13)\n     * 6\n     * >>> ncrModp(15, 12, 43)\n     * 25\n     * >>> ncrModp(17, 9, 18)\n     * 10\n     */\n    def ncrModp(n : Int, r : Int, p : Int) : Int = {\n", "entry_point": "ncrModp", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 2\n    var arg02 : Int = 13\n    var x0 : Int = ncrModp(arg00, arg01, arg02)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 15\n    var arg11 : Int = 12\n    var arg12 : Int = 43\n    var x1 : Int = ncrModp(arg10, arg11, arg12)\n    var v1 : Int = 25\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 17\n    var arg21 : Int = 9\n    var arg22 : Int = 18\n    var x2 : Int = ncrModp(arg20, arg21, arg22)\n    var v2 : Int = 10\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to compute the value of ncr%p.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/403", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if a url is valid or not using regex.\n     *\n     * >>> isValidUrl(\"https:\\/\\/www.google.com\")\n     * true\n     * >>> isValidUrl(\"https:/www.gmail.com\")\n     * false\n     * >>> isValidUrl(\"https:\\/\\/ www.redit.com\")\n     * false\n     */\n    def isValidUrl(str : String) : Boolean = {\n", "entry_point": "isValidUrl", "test": "\n\n    var arg00 : String = \"\"\"https:\\/\\/www.google.com\"\"\"\n    var x0 : Boolean = isValidUrl(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"https:/www.gmail.com\"\"\"\n    var x1 : Boolean = isValidUrl(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"https:\\/\\/ www.redit.com\"\"\"\n    var x2 : Boolean = isValidUrl(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if a url is valid or not using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/404", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the minimum of two numbers.\n     *\n     * >>> minimum(1, 2)\n     * 1\n     * >>> minimum(-5, -4)\n     * -5\n     * >>> minimum(0, 0)\n     * 0\n     */\n    def minimum(a : Int, b : Int) : Int = {\n", "entry_point": "minimum", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = 2\n    var x0 : Int = minimum(arg00, arg01)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = -5\n    var arg11 : Int = -4\n    var x1 : Int = minimum(arg10, arg11)\n    var v1 : Int = -5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 0\n    var arg21 : Int = 0\n    var x2 : Int = minimum(arg20, arg21)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the minimum of two numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/405", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether an element exists within a tuple.\n     *\n     * >>> checkTuplex(List(\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), \"r\")\n     * true\n     * >>> checkTuplex(List(\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), \"5\")\n     * false\n     * >>> checkTuplex(List(\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 3)\n     * true\n     */\n    def checkTuplex(tuplex : List[Any], tuple1 : Any) : Boolean = {\n", "entry_point": "checkTuplex", "test": "\n\n    var arg00 : List[Any] = List(\"\"\"w\"\"\", 3, \"\"\"r\"\"\", \"\"\"e\"\"\", \"\"\"s\"\"\", \"\"\"o\"\"\", \"\"\"u\"\"\", \"\"\"r\"\"\", \"\"\"c\"\"\", \"\"\"e\"\"\")\n    var arg01 : Any = \"\"\"r\"\"\"\n    var x0 : Boolean = checkTuplex(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(\"\"\"w\"\"\", 3, \"\"\"r\"\"\", \"\"\"e\"\"\", \"\"\"s\"\"\", \"\"\"o\"\"\", \"\"\"u\"\"\", \"\"\"r\"\"\", \"\"\"c\"\"\", \"\"\"e\"\"\")\n    var arg11 : Any = \"\"\"5\"\"\"\n    var x1 : Boolean = checkTuplex(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(\"\"\"w\"\"\", 3, \"\"\"r\"\"\", \"\"\"e\"\"\", \"\"\"s\"\"\", \"\"\"o\"\"\", \"\"\"u\"\"\", \"\"\"r\"\"\", \"\"\"c\"\"\", \"\"\"e\"\"\")\n    var arg21 : Any = 3\n    var x2 : Boolean = checkTuplex(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether an element exists within a tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/406", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the parity of a given number.\n     *\n     * >>> findParity(12)\n     * \"Even Parity\"\n     * >>> findParity(7)\n     * \"Odd Parity\"\n     * >>> findParity(10)\n     * \"Even Parity\"\n     */\n    def findParity(x : Int) : String = {\n", "entry_point": "findParity", "test": "\n\n    var arg00 : Int = 12\n    var x0 : String = findParity(arg00)\n    var v0 : String = \"\"\"Even Parity\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 7\n    var x1 : String = findParity(arg10)\n    var v1 : String = \"\"\"Odd Parity\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 10\n    var x2 : String = findParity(arg20)\n    var v2 : String = \"\"\"Even Parity\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the parity of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/407", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to create the next bigger number by rearranging the digits of a given number.\n     *\n     * >>> rearrangeBigger(12)\n     * 21\n     * >>> rearrangeBigger(10)\n     * false\n     * >>> rearrangeBigger(102)\n     * 120\n     */\n    def rearrangeBigger(n : Int) : Any = {\n", "entry_point": "rearrangeBigger", "test": "\n\n    var arg00 : Int = 12\n    var x0 : Any = rearrangeBigger(arg00)\n    var v0 : Any = 21\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var x1 : Any = rearrangeBigger(arg10)\n    var v1 : Any = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 102\n    var x2 : Any = rearrangeBigger(arg20)\n    var v2 : Any = 120\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to create the next bigger number by rearranging the digits of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/408", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n     *\n     * >>> kSmallestPairs(List(1, 3, 7), List(2, 4, 6), 2)\n     * List(List(1, 2), List(1, 4))\n     * >>> kSmallestPairs(List(1, 3, 7), List(2, 4, 6), 1)\n     * List(List(1, 2))\n     * >>> kSmallestPairs(List(1, 3, 7), List(2, 4, 6), 7)\n     * List(List(1, 2), List(1, 4), List(3, 2), List(1, 6), List(3, 4), List(3, 6), List(7, 2))\n     */\n    def kSmallestPairs(nums1 : List[Int], nums2 : List[Int], k : Int) : List[List[Int]] = {\n", "entry_point": "kSmallestPairs", "test": "\n\n    var arg00 : List[Int] = List(1, 3, 7)\n    var arg01 : List[Int] = List(2, 4, 6)\n    var arg02 : Int = 2\n    var x0 : List[List[Int]] = kSmallestPairs(arg00, arg01, arg02)\n    var v0 : List[List[Int]] = List(List(1, 2), List(1, 4))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 3, 7)\n    var arg11 : List[Int] = List(2, 4, 6)\n    var arg12 : Int = 1\n    var x1 : List[List[Int]] = kSmallestPairs(arg10, arg11, arg12)\n    var v1 : List[List[Int]] = List(List(1, 2))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 3, 7)\n    var arg21 : List[Int] = List(2, 4, 6)\n    var arg22 : Int = 7\n    var x2 : List[List[Int]] = kSmallestPairs(arg20, arg21, arg22)\n    var v2 : List[List[Int]] = List(List(1, 2), List(1, 4), List(3, 2), List(1, 6), List(3, 4), List(3, 6), List(7, 2))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/409", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the minimum product from the pairs of tuples within a given list.\n     *\n     * >>> minProductTuple(List(List(2, 7), List(2, 6), List(1, 8), List(4, 9)))\n     * 8\n     * >>> minProductTuple(List(List(10, 20), List(15, 2), List(5, 10)))\n     * 30\n     * >>> minProductTuple(List(List(11, 44), List(10, 15), List(20, 5), List(12, 9)))\n     * 100\n     */\n    def minProductTuple(list1 : List[List[Int]]) : Int = {\n", "entry_point": "minProductTuple", "test": "\n\n    var arg00 : List[List[Int]] = List(List(2, 7), List(2, 6), List(1, 8), List(4, 9))\n    var x0 : Int = minProductTuple(arg00)\n    var v0 : Int = 8\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(10, 20), List(15, 2), List(5, 10))\n    var x1 : Int = minProductTuple(arg10)\n    var v1 : Int = 30\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(11, 44), List(10, 15), List(20, 5), List(12, 9))\n    var x2 : Int = minProductTuple(arg20)\n    var v2 : Int = 100\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the minimum product from the pairs of tuples within a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/410", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the minimum value in a given heterogeneous list.\n     *\n     * >>> minVal(List(\"Python\", 3, 2, 4, 5, \"version\"))\n     * 2\n     * >>> minVal(List(\"Python\", 15, 20, 25))\n     * 15\n     * >>> minVal(List(\"Python\", 30, 20, 40, 50, \"version\"))\n     * 20\n     */\n    def minVal(listval : List[Any]) : Int = {\n", "entry_point": "minVal", "test": "\n\n    var arg00 : List[Any] = List(\"\"\"Python\"\"\", 3, 2, 4, 5, \"\"\"version\"\"\")\n    var x0 : Int = minVal(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(\"\"\"Python\"\"\", 15, 20, 25)\n    var x1 : Int = minVal(arg10)\n    var v1 : Int = 15\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(\"\"\"Python\"\"\", 30, 20, 40, 50, \"\"\"version\"\"\")\n    var x2 : Int = minVal(arg20)\n    var v2 : Int = 20\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the minimum value in a given heterogeneous list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/411", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert the given snake case string to camel case string by using regex.\n     *\n     * >>> snakeToCamel(\"android_tv\")\n     * \"AndroidTv\"\n     * >>> snakeToCamel(\"google_pixel\")\n     * \"GooglePixel\"\n     * >>> snakeToCamel(\"apple_watch\")\n     * \"AppleWatch\"\n     */\n    def snakeToCamel(word : String) : String = {\n", "entry_point": "snakeToCamel", "test": "\n\n    var arg00 : String = \"\"\"android_tv\"\"\"\n    var x0 : String = snakeToCamel(arg00)\n    var v0 : String = \"\"\"AndroidTv\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"google_pixel\"\"\"\n    var x1 : String = snakeToCamel(arg10)\n    var v1 : String = \"\"\"GooglePixel\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"apple_watch\"\"\"\n    var x2 : String = snakeToCamel(arg20)\n    var v2 : String = \"\"\"AppleWatch\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert the given snake case string to camel case string by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/412", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to remove odd numbers from a given list.\n     *\n     * >>> removeOdd(List(1, 2, 3))\n     * List(2)\n     * >>> removeOdd(List(2, 4, 6))\n     * List(2, 4, 6)\n     * >>> removeOdd(List(10, 20, 3))\n     * List(10, 20)\n     */\n    def removeOdd(l : List[Int]) : List[Int] = {\n", "entry_point": "removeOdd", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3)\n    var x0 : List[Int] = removeOdd(arg00)\n    var v0 : List[Int] = List(2)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 4, 6)\n    var x1 : List[Int] = removeOdd(arg10)\n    var v1 : List[Int] = List(2, 4, 6)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(10, 20, 3)\n    var x2 : List[Int] = removeOdd(arg20)\n    var v2 : List[Int] = List(10, 20)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to remove odd numbers from a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/413", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract the nth element from a given list of tuples.\n     *\n     * >>> extractNthElement(List(List(\"Greyson Fulton\", 98, 99), List(\"Brady Kent\", 97, 96), List(\"Wyatt Knott\", 91, 94), List(\"Beau Turnbull\", 94, 98)), 0)\n     * List(\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\")\n     * >>> extractNthElement(List(List(\"Greyson Fulton\", 98, 99), List(\"Brady Kent\", 97, 96), List(\"Wyatt Knott\", 91, 94), List(\"Beau Turnbull\", 94, 98)), 2)\n     * List(99, 96, 94, 98)\n     * >>> extractNthElement(List(List(\"Greyson Fulton\", 98, 99), List(\"Brady Kent\", 97, 96), List(\"Wyatt Knott\", 91, 94), List(\"Beau Turnbull\", 94, 98)), 1)\n     * List(98, 97, 91, 94)\n     */\n    def extractNthElement(list1 : List[List[Any]], n : Int) : List[Any] = {\n", "entry_point": "extractNthElement", "test": "\n\n    var arg00 : List[List[Any]] = List(List(\"\"\"Greyson Fulton\"\"\", 98, 99), List(\"\"\"Brady Kent\"\"\", 97, 96), List(\"\"\"Wyatt Knott\"\"\", 91, 94), List(\"\"\"Beau Turnbull\"\"\", 94, 98))\n    var arg01 : Int = 0\n    var x0 : List[Any] = extractNthElement(arg00, arg01)\n    var v0 : List[Any] = List(\"\"\"Greyson Fulton\"\"\", \"\"\"Brady Kent\"\"\", \"\"\"Wyatt Knott\"\"\", \"\"\"Beau Turnbull\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(\"\"\"Greyson Fulton\"\"\", 98, 99), List(\"\"\"Brady Kent\"\"\", 97, 96), List(\"\"\"Wyatt Knott\"\"\", 91, 94), List(\"\"\"Beau Turnbull\"\"\", 94, 98))\n    var arg11 : Int = 2\n    var x1 : List[Any] = extractNthElement(arg10, arg11)\n    var v1 : List[Any] = List(99, 96, 94, 98)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(\"\"\"Greyson Fulton\"\"\", 98, 99), List(\"\"\"Brady Kent\"\"\", 97, 96), List(\"\"\"Wyatt Knott\"\"\", 91, 94), List(\"\"\"Beau Turnbull\"\"\", 94, 98))\n    var arg21 : Int = 1\n    var x2 : List[Any] = extractNthElement(arg20, arg21)\n    var v2 : List[Any] = List(98, 97, 91, 94)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract the nth element from a given list of tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/414", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the value exists in a sequence or not.\n     *\n     * >>> overlapping(List(1, 2, 3, 4, 5), List(6, 7, 8, 9))\n     * false\n     * >>> overlapping(List(1, 2, 3), List(4, 5, 6))\n     * false\n     * >>> overlapping(List(1, 4, 5), List(1, 4, 5))\n     * true\n     */\n    def overlapping(list1 : List[Int], list2 : List[Int]) : Boolean = {\n", "entry_point": "overlapping", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5)\n    var arg01 : List[Int] = List(6, 7, 8, 9)\n    var x0 : Boolean = overlapping(arg00, arg01)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3)\n    var arg11 : List[Int] = List(4, 5, 6)\n    var x1 : Boolean = overlapping(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 4, 5)\n    var arg21 : List[Int] = List(1, 4, 5)\n    var x2 : Boolean = overlapping(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the value exists in a sequence or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/415", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find a pair with highest product from a given array of integers.\n     *\n     * >>> maxProduct(List(1, 2, 3, 4, 7, 0, 8, 4))\n     * List(7, 8)\n     * >>> maxProduct(List(0, -1, -2, -4, 5, 0, -6))\n     * List(-4, -6)\n     * >>> maxProduct(List(1, 2, 3))\n     * List(2, 3)\n     */\n    def maxProduct(arr : List[Int]) : List[Int] = {\n", "entry_point": "maxProduct", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 7, 0, 8, 4)\n    var x0 : List[Int] = maxProduct(arg00)\n    var v0 : List[Int] = List(7, 8)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(0, -1, -2, -4, 5, 0, -6)\n    var x1 : List[Int] = maxProduct(arg10)\n    var v1 : List[Int] = List(-4, -6)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3)\n    var x2 : List[Int] = maxProduct(arg20)\n    var v2 : List[Int] = List(2, 3)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find a pair with highest product from a given array of integers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/416", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n     *\n     * >>> breaksum(12)\n     * 13\n     * >>> breaksum(24)\n     * 27\n     * >>> breaksum(23)\n     * 23\n     */\n    def breaksum(n : Int) : Int = {\n", "entry_point": "breaksum", "test": "\n\n    var arg00 : Int = 12\n    var x0 : Int = breaksum(arg00)\n    var v0 : Int = 13\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 24\n    var x1 : Int = breaksum(arg10)\n    var v1 : Int = 27\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 23\n    var x2 : Int = breaksum(arg20)\n    var v2 : Int = 23\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/417", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find common first element in given list of tuple.\n     *\n     * >>> groupTuples(List(List(\"x\", \"y\"), List(\"x\", \"z\"), List(\"w\", \"t\")))\n     * List(List(\"x\", \"y\", \"z\"), List(\"w\", \"t\"))\n     * >>> groupTuples(List(List(\"a\", \"b\"), List(\"a\", \"c\"), List(\"d\", \"e\")))\n     * List(List(\"a\", \"b\", \"c\"), List(\"d\", \"e\"))\n     * >>> groupTuples(List(List(\"f\", \"g\"), List(\"f\", \"g\"), List(\"h\", \"i\")))\n     * List(List(\"f\", \"g\", \"g\"), List(\"h\", \"i\"))\n     */\n    def groupTuples(input : List[List[String]]) : List[List[String]] = {\n", "entry_point": "groupTuples", "test": "\n\n    var arg00 : List[List[String]] = List(List(\"\"\"x\"\"\", \"\"\"y\"\"\"), List(\"\"\"x\"\"\", \"\"\"z\"\"\"), List(\"\"\"w\"\"\", \"\"\"t\"\"\"))\n    var x0 : List[List[String]] = groupTuples(arg00)\n    var v0 : List[List[String]] = List(List(\"\"\"x\"\"\", \"\"\"y\"\"\", \"\"\"z\"\"\"), List(\"\"\"w\"\"\", \"\"\"t\"\"\"))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[String]] = List(List(\"\"\"a\"\"\", \"\"\"b\"\"\"), List(\"\"\"a\"\"\", \"\"\"c\"\"\"), List(\"\"\"d\"\"\", \"\"\"e\"\"\"))\n    var x1 : List[List[String]] = groupTuples(arg10)\n    var v1 : List[List[String]] = List(List(\"\"\"a\"\"\", \"\"\"b\"\"\", \"\"\"c\"\"\"), List(\"\"\"d\"\"\", \"\"\"e\"\"\"))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[String]] = List(List(\"\"\"f\"\"\", \"\"\"g\"\"\"), List(\"\"\"f\"\"\", \"\"\"g\"\"\"), List(\"\"\"h\"\"\", \"\"\"i\"\"\"))\n    var x2 : List[List[String]] = groupTuples(arg20)\n    var v2 : List[List[String]] = List(List(\"\"\"f\"\"\", \"\"\"g\"\"\", \"\"\"g\"\"\"), List(\"\"\"h\"\"\", \"\"\"i\"\"\"))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find common first element in given list of tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/418", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sublist having maximum length.\n     *\n     * >>> findMax(List(List(\"A\"), List(\"A\", \"B\"), List(\"A\", \"B\", \"C\")))\n     * List(\"A\", \"B\", \"C\")\n     * >>> findMax(List(List(1), List(1, 2), List(1, 2, 3)))\n     * List(1, 2, 3)\n     * >>> findMax(List(List(1, 1), List(1, 2, 3), List(1, 5, 6, 1)))\n     * List(1, 5, 6, 1)\n     */\n    def findMax(lst : List[List[Any]]) : List[Any] = {\n", "entry_point": "findMax", "test": "\n\n    var arg00 : List[List[Any]] = List(List(\"\"\"A\"\"\"), List(\"\"\"A\"\"\", \"\"\"B\"\"\"), List(\"\"\"A\"\"\", \"\"\"B\"\"\", \"\"\"C\"\"\"))\n    var x0 : List[Any] = findMax(arg00)\n    var v0 : List[Any] = List(\"\"\"A\"\"\", \"\"\"B\"\"\", \"\"\"C\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(1), List(1, 2), List(1, 2, 3))\n    var x1 : List[Any] = findMax(arg10)\n    var v1 : List[Any] = List(1, 2, 3)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(1, 1), List(1, 2, 3), List(1, 5, 6, 1))\n    var x2 : List[Any] = findMax(arg20)\n    var v2 : List[Any] = List(1, 5, 6, 1)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sublist having maximum length.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/419", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n     *\n     * >>> roundAndSum(List(22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5))\n     * 243\n     * >>> roundAndSum(List(5, 2, 9, 24.3, 29))\n     * 345\n     * >>> roundAndSum(List(25.0, 56.7, 89.2))\n     * 513\n     */\n    def roundAndSum(list1 : List[Double]) : Int = {\n", "entry_point": "roundAndSum", "test": "\n\n    var arg00 : List[Double] = List(22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5)\n    var x0 : Int = roundAndSum(arg00)\n    var v0 : Int = 243\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Double] = List(5, 2, 9, 24.3, 29)\n    var x1 : Int = roundAndSum(arg10)\n    var v1 : Int = 345\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Double] = List(25.0, 56.7, 89.2)\n    var x2 : Int = roundAndSum(arg20)\n    var v2 : Int = 513\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/420", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the cube sum of first n even natural numbers.\n     *\n     * >>> cubeSum(2)\n     * 72\n     * >>> cubeSum(3)\n     * 288\n     * >>> cubeSum(4)\n     * 800\n     */\n    def cubeSum(n : Int) : Int = {\n", "entry_point": "cubeSum", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = cubeSum(arg00)\n    var v0 : Int = 72\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var x1 : Int = cubeSum(arg10)\n    var v1 : Int = 288\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var x2 : Int = cubeSum(arg20)\n    var v2 : Int = 800\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the cube sum of first n even natural numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/421", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to concatenate each element of tuple by the delimiter.\n     *\n     * >>> concatenateTuple(List(\"ID\", \"is\", 4, \"UTS\"))\n     * \"ID-is-4-UTS\"\n     * >>> concatenateTuple(List(\"QWE\", \"is\", 4, \"RTY\"))\n     * \"QWE-is-4-RTY\"\n     * >>> concatenateTuple(List(\"ZEN\", \"is\", 4, \"OP\"))\n     * \"ZEN-is-4-OP\"\n     */\n    def concatenateTuple(testTup : List[Any]) : String = {\n", "entry_point": "concatenateTuple", "test": "\n\n    var arg00 : List[Any] = List(\"\"\"ID\"\"\", \"\"\"is\"\"\", 4, \"\"\"UTS\"\"\")\n    var x0 : String = concatenateTuple(arg00)\n    var v0 : String = \"\"\"ID-is-4-UTS\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(\"\"\"QWE\"\"\", \"\"\"is\"\"\", 4, \"\"\"RTY\"\"\")\n    var x1 : String = concatenateTuple(arg10)\n    var v1 : String = \"\"\"QWE-is-4-RTY\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(\"\"\"ZEN\"\"\", \"\"\"is\"\"\", 4, \"\"\"OP\"\"\")\n    var x2 : String = concatenateTuple(arg20)\n    var v2 : String = \"\"\"ZEN-is-4-OP\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to concatenate each element of tuple by the delimiter.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/422", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the average of cubes of first n natural numbers.\n     *\n     * >>> findAverageOfCube(2)\n     * 4.5\n     * >>> findAverageOfCube(3)\n     * 12\n     * >>> findAverageOfCube(1)\n     * 1\n     */\n    def findAverageOfCube(n : Int) : Double = {\n", "entry_point": "findAverageOfCube", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Double = findAverageOfCube(arg00)\n    var v0 : Double = 4.5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var x1 : Double = findAverageOfCube(arg10)\n    var v1 : Double = 12\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var x2 : Double = findAverageOfCube(arg20)\n    var v2 : Double = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the average of cubes of first n natural numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/423", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to solve gold mine problem.\n     *\n     * >>> getMaxgold(List(List(1, 3, 1, 5), List(2, 2, 4, 1), List(5, 0, 2, 3), List(0, 6, 1, 2)), 4, 4)\n     * 16\n     * >>> getMaxgold(List(List(10, 20), List(30, 40)), 2, 2)\n     * 70\n     * >>> getMaxgold(List(List(4, 9), List(3, 7)), 2, 2)\n     * 13\n     */\n    def getMaxgold(gold : List[List[Int]], m : Int, n : Int) : Int = {\n", "entry_point": "getMaxgold", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 3, 1, 5), List(2, 2, 4, 1), List(5, 0, 2, 3), List(0, 6, 1, 2))\n    var arg01 : Int = 4\n    var arg02 : Int = 4\n    var x0 : Int = getMaxgold(arg00, arg01, arg02)\n    var v0 : Int = 16\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(10, 20), List(30, 40))\n    var arg11 : Int = 2\n    var arg12 : Int = 2\n    var x1 : Int = getMaxgold(arg10, arg11, arg12)\n    var v1 : Int = 70\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(4, 9), List(3, 7))\n    var arg21 : Int = 2\n    var arg22 : Int = 2\n    var x2 : Int = getMaxgold(arg20, arg21, arg22)\n    var v2 : Int = 13\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to solve gold mine problem.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/424", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract only the rear index element of each string in the given tuple.\n     *\n     * >>> extractRear(List(\"Mers\", \"for\", \"Vers\"))\n     * List(\"s\", \"r\", \"s\")\n     * >>> extractRear(List(\"Avenge\", \"for\", \"People\"))\n     * List(\"e\", \"r\", \"e\")\n     * >>> extractRear(List(\"Gotta\", \"get\", \"go\"))\n     * List(\"a\", \"t\", \"o\")\n     */\n    def extractRear(testTuple : List[String]) : List[String] = {\n", "entry_point": "extractRear", "test": "\n\n    var arg00 : List[String] = List(\"\"\"Mers\"\"\", \"\"\"for\"\"\", \"\"\"Vers\"\"\")\n    var x0 : List[String] = extractRear(arg00)\n    var v0 : List[String] = List(\"\"\"s\"\"\", \"\"\"r\"\"\", \"\"\"s\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"Avenge\"\"\", \"\"\"for\"\"\", \"\"\"People\"\"\")\n    var x1 : List[String] = extractRear(arg10)\n    var v1 : List[String] = List(\"\"\"e\"\"\", \"\"\"r\"\"\", \"\"\"e\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"Gotta\"\"\", \"\"\"get\"\"\", \"\"\"go\"\"\")\n    var x2 : List[String] = extractRear(arg20)\n    var v2 : List[String] = List(\"\"\"a\"\"\", \"\"\"t\"\"\", \"\"\"o\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract only the rear index element of each string in the given tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/425", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count the number of sublists containing a particular element.\n     *\n     * >>> countElementInList(List(List(1, 3), List(5, 7), List(1, 11), List(1, 15, 7)), 1)\n     * 3\n     * >>> countElementInList(List(List(\"A\", \"B\"), List(\"A\", \"C\"), List(\"A\", \"D\", \"E\"), List(\"B\", \"C\", \"D\")), \"A\")\n     * 3\n     * >>> countElementInList(List(List(\"A\", \"B\"), List(\"A\", \"C\"), List(\"A\", \"D\", \"E\"), List(\"B\", \"C\", \"D\")), \"E\")\n     * 1\n     */\n    def countElementInList(list1 : List[List[Any]], x : Any) : Int = {\n", "entry_point": "countElementInList", "test": "\n\n    var arg00 : List[List[Any]] = List(List(1, 3), List(5, 7), List(1, 11), List(1, 15, 7))\n    var arg01 : Any = 1\n    var x0 : Int = countElementInList(arg00, arg01)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(\"\"\"A\"\"\", \"\"\"B\"\"\"), List(\"\"\"A\"\"\", \"\"\"C\"\"\"), List(\"\"\"A\"\"\", \"\"\"D\"\"\", \"\"\"E\"\"\"), List(\"\"\"B\"\"\", \"\"\"C\"\"\", \"\"\"D\"\"\"))\n    var arg11 : Any = \"\"\"A\"\"\"\n    var x1 : Int = countElementInList(arg10, arg11)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(\"\"\"A\"\"\", \"\"\"B\"\"\"), List(\"\"\"A\"\"\", \"\"\"C\"\"\"), List(\"\"\"A\"\"\", \"\"\"D\"\"\", \"\"\"E\"\"\"), List(\"\"\"B\"\"\", \"\"\"C\"\"\", \"\"\"D\"\"\"))\n    var arg21 : Any = \"\"\"E\"\"\"\n    var x2 : Int = countElementInList(arg20, arg21)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count the number of sublists containing a particular element.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/426", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to filter odd numbers using lambda function.\n     *\n     * >>> filterOddnumbers(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n     * List(1, 3, 5, 7, 9)\n     * >>> filterOddnumbers(List(10, 20, 45, 67, 84, 93))\n     * List(45, 67, 93)\n     * >>> filterOddnumbers(List(5, 7, 9, 8, 6, 4, 3))\n     * List(5, 7, 9, 3)\n     */\n    def filterOddnumbers(nums : List[Int]) : List[Int] = {\n", "entry_point": "filterOddnumbers", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var x0 : List[Int] = filterOddnumbers(arg00)\n    var v0 : List[Int] = List(1, 3, 5, 7, 9)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(10, 20, 45, 67, 84, 93)\n    var x1 : List[Int] = filterOddnumbers(arg10)\n    var v1 : List[Int] = List(45, 67, 93)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(5, 7, 9, 8, 6, 4, 3)\n    var x2 : List[Int] = filterOddnumbers(arg20)\n    var v2 : List[Int] = List(5, 7, 9, 3)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to filter odd numbers using lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/427", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n     *\n     * >>> changeDateFormat(\"2026-01-02\")\n     * \"02-01-2026\"\n     * >>> changeDateFormat(\"2020-11-13\")\n     * \"13-11-2020\"\n     * >>> changeDateFormat(\"2021-04-26\")\n     * \"26-04-2021\"\n     */\n    def changeDateFormat(dt : String) : String = {\n", "entry_point": "changeDateFormat", "test": "\n\n    var arg00 : String = \"\"\"2026-01-02\"\"\"\n    var x0 : String = changeDateFormat(arg00)\n    var v0 : String = \"\"\"02-01-2026\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"2020-11-13\"\"\"\n    var x1 : String = changeDateFormat(arg10)\n    var v1 : String = \"\"\"13-11-2020\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"2021-04-26\"\"\"\n    var x2 : String = changeDateFormat(arg20)\n    var v2 : String = \"\"\"26-04-2021\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/428", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort the given array by using shell sort.\n     *\n     * >>> shellSort(List(12, 23, 4, 5, 3, 2, 12, 81, 56, 95))\n     * List(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)\n     * >>> shellSort(List(24, 22, 39, 34, 87, 73, 68))\n     * List(22, 24, 34, 39, 68, 73, 87)\n     * >>> shellSort(List(32, 30, 16, 96, 82, 83, 74))\n     * List(16, 30, 32, 74, 82, 83, 96)\n     */\n    def shellSort(myList : List[Int]) : List[Int] = {\n", "entry_point": "shellSort", "test": "\n\n    var arg00 : List[Int] = List(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)\n    var x0 : List[Int] = shellSort(arg00)\n    var v0 : List[Int] = List(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(24, 22, 39, 34, 87, 73, 68)\n    var x1 : List[Int] = shellSort(arg10)\n    var v1 : List[Int] = List(22, 24, 34, 39, 68, 73, 87)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(32, 30, 16, 96, 82, 83, 74)\n    var x2 : List[Int] = shellSort(arg20)\n    var v2 : List[Int] = List(16, 30, 32, 74, 82, 83, 96)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort the given array by using shell sort.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/429", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract the elementwise and tuples from the given two tuples.\n     *\n     * >>> andTuples(List(10, 4, 6, 9), List(5, 2, 3, 3))\n     * List(0, 0, 2, 1)\n     * >>> andTuples(List(1, 2, 3, 4), List(5, 6, 7, 8))\n     * List(1, 2, 3, 0)\n     * >>> andTuples(List(8, 9, 11, 12), List(7, 13, 14, 17))\n     * List(0, 9, 10, 0)\n     */\n    def andTuples(testTup1 : List[Int], testTup2 : List[Int]) : List[Int] = {\n", "entry_point": "andTuples", "test": "\n\n    var arg00 : List[Int] = List(10, 4, 6, 9)\n    var arg01 : List[Int] = List(5, 2, 3, 3)\n    var x0 : List[Int] = andTuples(arg00, arg01)\n    var v0 : List[Int] = List(0, 0, 2, 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4)\n    var arg11 : List[Int] = List(5, 6, 7, 8)\n    var x1 : List[Int] = andTuples(arg10, arg11)\n    var v1 : List[Int] = List(1, 2, 3, 0)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(8, 9, 11, 12)\n    var arg21 : List[Int] = List(7, 13, 14, 17)\n    var x2 : List[Int] = andTuples(arg20, arg21)\n    var v2 : List[Int] = List(0, 9, 10, 0)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract the elementwise and tuples from the given two tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/430", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the directrix of a parabola.\n     *\n     * >>> parabolaDirectrix(5, 3, 2)\n     * -198\n     * >>> parabolaDirectrix(9, 8, 4)\n     * -2336\n     * >>> parabolaDirectrix(2, 4, 6)\n     * -130\n     */\n    def parabolaDirectrix(a : Int, b : Int, c : Int) : Int = {\n", "entry_point": "parabolaDirectrix", "test": "\n\n    var arg00 : Int = 5\n    var arg01 : Int = 3\n    var arg02 : Int = 2\n    var x0 : Int = parabolaDirectrix(arg00, arg01, arg02)\n    var v0 : Int = -198\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 9\n    var arg11 : Int = 8\n    var arg12 : Int = 4\n    var x1 : Int = parabolaDirectrix(arg10, arg11, arg12)\n    var v1 : Int = -2336\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var arg21 : Int = 4\n    var arg22 : Int = 6\n    var x2 : Int = parabolaDirectrix(arg20, arg21, arg22)\n    var v2 : Int = -130\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the directrix of a parabola.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/431", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function that takes two lists and returns true if they have at least one common element.\n     *\n     * >>> commonElement(List(1, 2, 3, 4, 5), List(5, 6, 7, 8, 9))\n     * true\n     * >>> commonElement(List(1, 2, 3, 4, 5), List(6, 7, 8, 9))\n     * \"none\"\n     * >>> commonElement(List(\"a\", \"b\", \"c\"), List(\"d\", \"b\", \"e\"))\n     * true\n     */\n    def commonElement(list1 : List[Any], list2 : List[Any]) : Any = {\n", "entry_point": "commonElement", "test": "\n\n    var arg00 : List[Any] = List(1, 2, 3, 4, 5)\n    var arg01 : List[Any] = List(5, 6, 7, 8, 9)\n    var x0 : Any = commonElement(arg00, arg01)\n    var v0 : Any = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(1, 2, 3, 4, 5)\n    var arg11 : List[Any] = List(6, 7, 8, 9)\n    var x1 : Any = commonElement(arg10, arg11)\n    var v1 : Any = \"none\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(\"\"\"a\"\"\", \"\"\"b\"\"\", \"\"\"c\"\"\")\n    var arg21 : List[Any] = List(\"\"\"d\"\"\", \"\"\"b\"\"\", \"\"\"e\"\"\")\n    var x2 : Any = commonElement(arg20, arg21)\n    var v2 : Any = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function that takes two lists and returns true if they have at least one common element.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/432", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the median of a trapezium.\n     *\n     * >>> medianTrapezium(15, 25, 35)\n     * 20\n     * >>> medianTrapezium(10, 20, 30)\n     * 15\n     * >>> medianTrapezium(6, 9, 4)\n     * 7.5\n     */\n    def medianTrapezium(base1 : Int, base2 : Int, height : Int) : Double = {\n", "entry_point": "medianTrapezium", "test": "\n\n    var arg00 : Int = 15\n    var arg01 : Int = 25\n    var arg02 : Int = 35\n    var x0 : Double = medianTrapezium(arg00, arg01, arg02)\n    var v0 : Double = 20\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var arg11 : Int = 20\n    var arg12 : Int = 30\n    var x1 : Double = medianTrapezium(arg10, arg11, arg12)\n    var v1 : Double = 15\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 6\n    var arg21 : Int = 9\n    var arg22 : Int = 4\n    var x2 : Double = medianTrapezium(arg20, arg21, arg22)\n    var v2 : Double = 7.5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the median of a trapezium.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/433", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether the entered number is greater than the elements of the given array.\n     *\n     * >>> checkGreater(List(1, 2, 3, 4, 5), 4)\n     * \"No, entered number is less than those in the array\"\n     * >>> checkGreater(List(2, 3, 4, 5, 6), 8)\n     * \"Yes, the entered number is greater than those in the array\"\n     * >>> checkGreater(List(9, 7, 4, 8, 6, 1), 11)\n     * \"Yes, the entered number is greater than those in the array\"\n     */\n    def checkGreater(arr : List[Int], number : Int) : String = {\n", "entry_point": "checkGreater", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5)\n    var arg01 : Int = 4\n    var x0 : String = checkGreater(arg00, arg01)\n    var v0 : String = \"\"\"No, entered number is less than those in the array\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 3, 4, 5, 6)\n    var arg11 : Int = 8\n    var x1 : String = checkGreater(arg10, arg11)\n    var v1 : String = \"\"\"Yes, the entered number is greater than those in the array\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(9, 7, 4, 8, 6, 1)\n    var arg21 : Int = 11\n    var x2 : String = checkGreater(arg20, arg21)\n    var v2 : String = \"\"\"Yes, the entered number is greater than those in the array\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether the entered number is greater than the elements of the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/434", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function that matches a string that has an a followed by one or more b's.\n     *\n     * >>> textMatchOne(\"ac\")\n     * \"Not matched!\"\n     * >>> textMatchOne(\"dc\")\n     * \"Not matched!\"\n     * >>> textMatchOne(\"abba\")\n     * \"Found a match!\"\n     */\n    def textMatchOne(text : String) : String = {\n", "entry_point": "textMatchOne", "test": "\n\n    var arg00 : String = \"\"\"ac\"\"\"\n    var x0 : String = textMatchOne(arg00)\n    var v0 : String = \"\"\"Not matched!\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"dc\"\"\"\n    var x1 : String = textMatchOne(arg10)\n    var v1 : String = \"\"\"Not matched!\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"abba\"\"\"\n    var x2 : String = textMatchOne(arg20)\n    var v2 : String = \"\"\"Found a match!\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function that matches a string that has an a followed by one or more b's.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/435", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the last digit of a given number.\n     *\n     * >>> lastDigit(123)\n     * 3\n     * >>> lastDigit(25)\n     * 5\n     * >>> lastDigit(30)\n     * 0\n     */\n    def lastDigit(n : Int) : Int = {\n", "entry_point": "lastDigit", "test": "\n\n    var arg00 : Int = 123\n    var x0 : Int = lastDigit(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 25\n    var x1 : Int = lastDigit(arg10)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 30\n    var x2 : Int = lastDigit(arg20)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the last digit of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/436", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to print negative numbers in a list.\n     *\n     * >>> negNos(List(-1, 4, 5, -6))\n     * [-1,-6]\n     * >>> negNos(List(-1, -2, 3, 4))\n     * [-1,-2]\n     * >>> negNos(List(-7, -6, 8, 9))\n     * [-7,-6]\n     */\n    def negNos(list1 : List[Int]) : List[Int] = {\n", "entry_point": "negNos", "test": "\n\n    var arg00 : List[Int] = List(-1, 4, 5, -6)\n    var x0 : List[Int] = negNos(arg00)\n    var v0 : List[Int] = List(-1, -6)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(-1, -2, 3, 4)\n    var x1 : List[Int] = negNos(arg10)\n    var v1 : List[Int] = List(-1, -2)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(-7, -6, 8, 9)\n    var x2 : List[Int] = negNos(arg20)\n    var v2 : List[Int] = List(-7, -6)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to print negative numbers in a list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/437", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove odd characters in a string.\n     *\n     * >>> removeOdd(\"python\")\n     * \"yhn\"\n     * >>> removeOdd(\"program\")\n     * \"rga\"\n     * >>> removeOdd(\"language\")\n     * \"agae\"\n     */\n    def removeOdd(str1 : String) : String = {\n", "entry_point": "removeOdd", "test": "\n\n    var arg00 : String = \"\"\"python\"\"\"\n    var x0 : String = removeOdd(arg00)\n    var v0 : String = \"\"\"yhn\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"program\"\"\"\n    var x1 : String = removeOdd(arg10)\n    var v1 : String = \"\"\"rga\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"language\"\"\"\n    var x2 : String = removeOdd(arg20)\n    var v2 : String = \"\"\"agae\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove odd characters in a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/438", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count bidirectional tuple pairs.\n     *\n     * >>> countBidirectional(List(List(5, 6), List(1, 2), List(6, 5), List(9, 1), List(6, 5), List(2, 1)))\n     * \"3\"\n     * >>> countBidirectional(List(List(5, 6), List(1, 3), List(6, 5), List(9, 1), List(6, 5), List(2, 1)))\n     * \"2\"\n     * >>> countBidirectional(List(List(5, 6), List(1, 2), List(6, 5), List(9, 2), List(6, 5), List(2, 1)))\n     * \"4\"\n     */\n    def countBidirectional(testList : List[List[Int]]) : String = {\n", "entry_point": "countBidirectional", "test": "\n\n    var arg00 : List[List[Int]] = List(List(5, 6), List(1, 2), List(6, 5), List(9, 1), List(6, 5), List(2, 1))\n    var x0 : String = countBidirectional(arg00)\n    var v0 : String = \"\"\"3\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(5, 6), List(1, 3), List(6, 5), List(9, 1), List(6, 5), List(2, 1))\n    var x1 : String = countBidirectional(arg10)\n    var v1 : String = \"\"\"2\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(5, 6), List(1, 2), List(6, 5), List(9, 2), List(6, 5), List(2, 1))\n    var x2 : String = countBidirectional(arg20)\n    var v2 : String = \"\"\"4\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count bidirectional tuple pairs.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/439", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert a list of multiple integers into a single integer.\n     *\n     * >>> multipleToSingle(List(11, 33, 50))\n     * 113350\n     * >>> multipleToSingle(List(-1, 2, 3, 4, 5, 6))\n     * -123456\n     * >>> multipleToSingle(List(10, 15, 20, 25))\n     * 10152025\n     */\n    def multipleToSingle(l : List[Int]) : Int = {\n", "entry_point": "multipleToSingle", "test": "\n\n    var arg00 : List[Int] = List(11, 33, 50)\n    var x0 : Int = multipleToSingle(arg00)\n    var v0 : Int = 113350\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(-1, 2, 3, 4, 5, 6)\n    var x1 : Int = multipleToSingle(arg10)\n    var v1 : Int = -123456\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(10, 15, 20, 25)\n    var x2 : Int = multipleToSingle(arg20)\n    var v2 : Int = 10152025\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert a list of multiple integers into a single integer.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/440", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find all adverbs and their positions in a given sentence.\n     *\n     * >>> findAdverbPosition(\"clearly!! we can see the sky\")\n     * List(0, 7, \"clearly\")\n     * >>> findAdverbPosition(\"seriously!! there are many roses\")\n     * List(0, 9, \"seriously\")\n     * >>> findAdverbPosition(\"unfortunately!! sita is going to home\")\n     * List(0, 13, \"unfortunately\")\n     */\n    def findAdverbPosition(text : String) : List[Any] = {\n", "entry_point": "findAdverbPosition", "test": "\n\n    var arg00 : String = \"\"\"clearly!! we can see the sky\"\"\"\n    var x0 : List[Any] = findAdverbPosition(arg00)\n    var v0 : List[Any] = List(0, 7, \"\"\"clearly\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"seriously!! there are many roses\"\"\"\n    var x1 : List[Any] = findAdverbPosition(arg10)\n    var v1 : List[Any] = List(0, 9, \"\"\"seriously\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"unfortunately!! sita is going to home\"\"\"\n    var x2 : List[Any] = findAdverbPosition(arg20)\n    var v2 : List[Any] = List(0, 13, \"\"\"unfortunately\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find all adverbs and their positions in a given sentence.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/441", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the surface area of a cube.\n     *\n     * >>> surfaceareaCube(5)\n     * 150\n     * >>> surfaceareaCube(3)\n     * 54\n     * >>> surfaceareaCube(10)\n     * 600\n     */\n    def surfaceareaCube(l : Int) : Int = {\n", "entry_point": "surfaceareaCube", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Int = surfaceareaCube(arg00)\n    var v0 : Int = 150\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var x1 : Int = surfaceareaCube(arg10)\n    var v1 : Int = 54\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 10\n    var x2 : Int = surfaceareaCube(arg20)\n    var v2 : Int = 600\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the surface area of a cube.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/442", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the ration of positive numbers in an array of integers.\n     *\n     * >>> positiveCount(List(0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8))\n     * 0.54\n     * >>> positiveCount(List(2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8))\n     * 0.69\n     * >>> positiveCount(List(2, 4, -6, -9, 11, -12, 14, -5, 17))\n     * 0.56\n     */\n    def positiveCount(nums : List[Int]) : Double = {\n", "entry_point": "positiveCount", "test": "\n\n    var arg00 : List[Int] = List(0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8)\n    var x0 : Double = positiveCount(arg00)\n    var v0 : Double = 0.54\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8)\n    var x1 : Double = positiveCount(arg10)\n    var v1 : Double = 0.69\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 4, -6, -9, 11, -12, 14, -5, 17)\n    var x2 : Double = positiveCount(arg20)\n    var v2 : Double = 0.56\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the ration of positive numbers in an array of integers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/443", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the largest negative number from the given list.\n     *\n     * >>> largestNeg(List(1, 2, 3, -4, -6))\n     * -6\n     * >>> largestNeg(List(1, 2, 3, -8, -9))\n     * -9\n     * >>> largestNeg(List(1, 2, 3, 4, -1))\n     * -1\n     */\n    def largestNeg(list1 : List[Int]) : Int = {\n", "entry_point": "largestNeg", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, -4, -6)\n    var x0 : Int = largestNeg(arg00)\n    var v0 : Int = -6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, -8, -9)\n    var x1 : Int = largestNeg(arg10)\n    var v1 : Int = -9\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4, -1)\n    var x2 : Int = largestNeg(arg20)\n    var v2 : Int = -1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the largest negative number from the given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/444", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to trim each tuple by k in the given tuple list.\n     *\n     * >>> trimTuple(List(List(5, 3, 2, 1, 4), List(3, 4, 9, 2, 1), List(9, 1, 2, 3, 5), List(4, 8, 2, 1, 7)), 2)\n     * \"[(2,), (9,), (2,), (2,)]\"\n     * >>> trimTuple(List(List(5, 3, 2, 1, 4), List(3, 4, 9, 2, 1), List(9, 1, 2, 3, 5), List(4, 8, 2, 1, 7)), 1)\n     * \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\"\n     * >>> trimTuple(List(List(7, 8, 4, 9), List(11, 8, 12, 4), List(4, 1, 7, 8), List(3, 6, 9, 7)), 1)\n     * \"[(8, 4), (8, 12), (1, 7), (6, 9)]\"\n     */\n    def trimTuple(testList : List[List[Int]], k : Int) : String = {\n", "entry_point": "trimTuple", "test": "\n\n    var arg00 : List[List[Int]] = List(List(5, 3, 2, 1, 4), List(3, 4, 9, 2, 1), List(9, 1, 2, 3, 5), List(4, 8, 2, 1, 7))\n    var arg01 : Int = 2\n    var x0 : String = trimTuple(arg00, arg01)\n    var v0 : String = \"\"\"[(2,), (9,), (2,), (2,)]\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(5, 3, 2, 1, 4), List(3, 4, 9, 2, 1), List(9, 1, 2, 3, 5), List(4, 8, 2, 1, 7))\n    var arg11 : Int = 1\n    var x1 : String = trimTuple(arg10, arg11)\n    var v1 : String = \"\"\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(7, 8, 4, 9), List(11, 8, 12, 4), List(4, 1, 7, 8), List(3, 6, 9, 7))\n    var arg21 : Int = 1\n    var x2 : String = trimTuple(arg20, arg21)\n    var v2 : String = \"\"\"[(8, 4), (8, 12), (1, 7), (6, 9)]\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to trim each tuple by k in the given tuple list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/445", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n     *\n     * >>> indexMultiplication(List(List(1, 3), List(4, 5), List(2, 9), List(1, 10)), List(List(6, 7), List(3, 9), List(1, 1), List(7, 3)))\n     * List(List(6, 21), List(12, 45), List(2, 9), List(7, 30))\n     * >>> indexMultiplication(List(List(2, 4), List(5, 6), List(3, 10), List(2, 11)), List(List(7, 8), List(4, 10), List(2, 2), List(8, 4)))\n     * List(List(14, 32), List(20, 60), List(6, 20), List(16, 44))\n     * >>> indexMultiplication(List(List(3, 5), List(6, 7), List(4, 11), List(3, 12)), List(List(8, 9), List(5, 11), List(3, 3), List(9, 5)))\n     * List(List(24, 45), List(30, 77), List(12, 33), List(27, 60))\n     */\n    def indexMultiplication(testTup1 : List[List[Int]], testTup2 : List[List[Int]]) : List[List[Int]] = {\n", "entry_point": "indexMultiplication", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 3), List(4, 5), List(2, 9), List(1, 10))\n    var arg01 : List[List[Int]] = List(List(6, 7), List(3, 9), List(1, 1), List(7, 3))\n    var x0 : List[List[Int]] = indexMultiplication(arg00, arg01)\n    var v0 : List[List[Int]] = List(List(6, 21), List(12, 45), List(2, 9), List(7, 30))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(2, 4), List(5, 6), List(3, 10), List(2, 11))\n    var arg11 : List[List[Int]] = List(List(7, 8), List(4, 10), List(2, 2), List(8, 4))\n    var x1 : List[List[Int]] = indexMultiplication(arg10, arg11)\n    var v1 : List[List[Int]] = List(List(14, 32), List(20, 60), List(6, 20), List(16, 44))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(3, 5), List(6, 7), List(4, 11), List(3, 12))\n    var arg21 : List[List[Int]] = List(List(8, 9), List(5, 11), List(3, 3), List(9, 5))\n    var x2 : List[List[Int]] = indexMultiplication(arg20, arg21)\n    var v2 : List[List[Int]] = List(List(24, 45), List(30, 77), List(12, 33), List(27, 60))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/446", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the occurence of all elements of list in a tuple.\n     *\n     * >>> countOccurrence(List(\"a\", \"a\", \"c\", \"b\", \"d\"), List(\"a\", \"b\"))\n     * 3\n     * >>> countOccurrence(List(1, 2, 3, 1, 4, 6, 7, 1, 4), List(1, 4, 7))\n     * 6\n     * >>> countOccurrence(List(1, 2, 3, 4, 5, 6), List(1, 2))\n     * 2\n     */\n    def countOccurrence(tup : List[Any], lst : List[Any]) : Int = {\n", "entry_point": "countOccurrence", "test": "\n\n    var arg00 : List[Any] = List(\"\"\"a\"\"\", \"\"\"a\"\"\", \"\"\"c\"\"\", \"\"\"b\"\"\", \"\"\"d\"\"\")\n    var arg01 : List[Any] = List(\"\"\"a\"\"\", \"\"\"b\"\"\")\n    var x0 : Int = countOccurrence(arg00, arg01)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(1, 2, 3, 1, 4, 6, 7, 1, 4)\n    var arg11 : List[Any] = List(1, 4, 7)\n    var x1 : Int = countOccurrence(arg10, arg11)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(1, 2, 3, 4, 5, 6)\n    var arg21 : List[Any] = List(1, 2)\n    var x2 : Int = countOccurrence(arg20, arg21)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the occurence of all elements of list in a tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/447", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find cubes of individual elements in a list using lambda function.\n     *\n     * >>> cubeNums(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n     * List(1, 8, 27, 64, 125, 216, 343, 512, 729, 1000)\n     * >>> cubeNums(List(10, 20, 30))\n     * List(1000, 8000, 27000)\n     * >>> cubeNums(List(12, 15))\n     * List(1728, 3375)\n     */\n    def cubeNums(nums : List[Int]) : List[Int] = {\n", "entry_point": "cubeNums", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var x0 : List[Int] = cubeNums(arg00)\n    var v0 : List[Int] = List(1, 8, 27, 64, 125, 216, 343, 512, 729, 1000)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(10, 20, 30)\n    var x1 : List[Int] = cubeNums(arg10)\n    var v1 : List[Int] = List(1000, 8000, 27000)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(12, 15)\n    var x2 : List[Int] = cubeNums(arg20)\n    var v2 : List[Int] = List(1728, 3375)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find cubes of individual elements in a list using lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/448", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate the sum of perrin numbers.\n     *\n     * >>> calSum(9)\n     * 49\n     * >>> calSum(10)\n     * 66\n     * >>> calSum(11)\n     * 88\n     */\n    def calSum(n : Int) : Int = {\n", "entry_point": "calSum", "test": "\n\n    var arg00 : Int = 9\n    var x0 : Int = calSum(arg00)\n    var v0 : Int = 49\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var x1 : Int = calSum(arg10)\n    var v1 : Int = 66\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 11\n    var x2 : Int = calSum(arg20)\n    var v2 : Int = 88\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate the sum of perrin numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/449", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the triangle is valid or not if 3 points are given.\n     *\n     * >>> checkTriangle(1, 5, 2, 5, 4, 6)\n     * \"Yes\"\n     * >>> checkTriangle(1, 1, 1, 4, 1, 5)\n     * \"No\"\n     * >>> checkTriangle(1, 1, 1, 1, 1, 1)\n     * \"No\"\n     */\n    def checkTriangle(x1 : Int, y1 : Int, x2 : Int, y2 : Int, x3 : Int, y3 : Int) : String = {\n", "entry_point": "checkTriangle", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = 5\n    var arg02 : Int = 2\n    var arg03 : Int = 5\n    var arg04 : Int = 4\n    var arg05 : Int = 6\n    var x0 : String = checkTriangle(arg00, arg01, arg02, arg03, arg04, arg05)\n    var v0 : String = \"\"\"Yes\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var arg11 : Int = 1\n    var arg12 : Int = 1\n    var arg13 : Int = 4\n    var arg14 : Int = 1\n    var arg15 : Int = 5\n    var x1 : String = checkTriangle(arg10, arg11, arg12, arg13, arg14, arg15)\n    var v1 : String = \"\"\"No\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = 1\n    var arg22 : Int = 1\n    var arg23 : Int = 1\n    var arg24 : Int = 1\n    var arg25 : Int = 1\n    var x2 : String = checkTriangle(arg20, arg21, arg22, arg23, arg24, arg25)\n    var v2 : String = \"\"\"No\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the triangle is valid or not if 3 points are given.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/450", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract specified size of strings from a give list of string values.\n     *\n     * >>> extractString(List(\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"), 8)\n     * List(\"practice\", \"solution\")\n     * >>> extractString(List(\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"), 6)\n     * List(\"Python\")\n     * >>> extractString(List(\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"), 9)\n     * List(\"exercises\")\n     */\n    def extractString(str : List[String], l : Int) : List[String] = {\n", "entry_point": "extractString", "test": "\n\n    var arg00 : List[String] = List(\"\"\"Python\"\"\", \"\"\"list\"\"\", \"\"\"exercises\"\"\", \"\"\"practice\"\"\", \"\"\"solution\"\"\")\n    var arg01 : Int = 8\n    var x0 : List[String] = extractString(arg00, arg01)\n    var v0 : List[String] = List(\"\"\"practice\"\"\", \"\"\"solution\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"Python\"\"\", \"\"\"list\"\"\", \"\"\"exercises\"\"\", \"\"\"practice\"\"\", \"\"\"solution\"\"\")\n    var arg11 : Int = 6\n    var x1 : List[String] = extractString(arg10, arg11)\n    var v1 : List[String] = List(\"\"\"Python\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"Python\"\"\", \"\"\"list\"\"\", \"\"\"exercises\"\"\", \"\"\"practice\"\"\", \"\"\"solution\"\"\")\n    var arg21 : Int = 9\n    var x2 : List[String] = extractString(arg20, arg21)\n    var v2 : List[String] = List(\"\"\"exercises\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract specified size of strings from a give list of string values.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/451", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove all whitespaces from the given string using regex.\n     *\n     * >>> removeWhitespaces(\" Google    Flutter \")\n     * \"GoogleFlutter\"\n     * >>> removeWhitespaces(\" Google    Dart \")\n     * \"GoogleDart\"\n     * >>> removeWhitespaces(\" iOS    Swift \")\n     * \"iOSSwift\"\n     */\n    def removeWhitespaces(text1 : String) : String = {\n", "entry_point": "removeWhitespaces", "test": "\n\n    var arg00 : String = \"\"\" Google    Flutter \"\"\"\n    var x0 : String = removeWhitespaces(arg00)\n    var v0 : String = \"\"\"GoogleFlutter\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\" Google    Dart \"\"\"\n    var x1 : String = removeWhitespaces(arg10)\n    var v1 : String = \"\"\"GoogleDart\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\" iOS    Swift \"\"\"\n    var x2 : String = removeWhitespaces(arg20)\n    var v2 : String = \"\"\"iOSSwift\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove all whitespaces from the given string using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/452", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function that gives loss amount if the given amount has loss else return null.\n     *\n     * >>> lossAmount(1500, 1200)\n     * \"none\"\n     * >>> lossAmount(100, 200)\n     * 100\n     * >>> lossAmount(2000, 5000)\n     * 3000\n     */\n    def lossAmount(actualCost : Int, saleAmount : Int) : Any = {\n", "entry_point": "lossAmount", "test": "\n\n    var arg00 : Int = 1500\n    var arg01 : Int = 1200\n    var x0 : Any = lossAmount(arg00, arg01)\n    var v0 : Any = \"none\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 100\n    var arg11 : Int = 200\n    var x1 : Any = lossAmount(arg10, arg11)\n    var v1 : Any = 100\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2000\n    var arg21 : Int = 5000\n    var x2 : Any = lossAmount(arg20, arg21)\n    var v2 : Any = 3000\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function that gives loss amount if the given amount has loss else return null.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/453", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of even factors of a number.\n     *\n     * >>> sumoffactors(18)\n     * 26\n     * >>> sumoffactors(30)\n     * 48\n     * >>> sumoffactors(6)\n     * 8\n     */\n    def sumoffactors(n : Int) : Int = {\n", "entry_point": "sumoffactors", "test": "\n\n    var arg00 : Int = 18\n    var x0 : Int = sumoffactors(arg00)\n    var v0 : Int = 26\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 30\n    var x1 : Int = sumoffactors(arg10)\n    var v1 : Int = 48\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 6\n    var x2 : Int = sumoffactors(arg20)\n    var v2 : Int = 8\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of even factors of a number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/454", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function that matches a word containing 'z'.\n     *\n     * >>> textMatchWordz(\"pythonz.\")\n     * \"Found a match!\"\n     * >>> textMatchWordz(\"xyz.\")\n     * \"Found a match!\"\n     * >>> textMatchWordz(\"  lang  .\")\n     * \"Not matched!\"\n     */\n    def textMatchWordz(text : String) : String = {\n", "entry_point": "textMatchWordz", "test": "\n\n    var arg00 : String = \"\"\"pythonz.\"\"\"\n    var x0 : String = textMatchWordz(arg00)\n    var v0 : String = \"\"\"Found a match!\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"xyz.\"\"\"\n    var x1 : String = textMatchWordz(arg10)\n    var v1 : String = \"\"\"Found a match!\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"  lang  .\"\"\"\n    var x2 : String = textMatchWordz(arg20)\n    var v2 : String = \"\"\"Not matched!\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function that matches a word containing 'z'.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/455", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether the given month number contains 31 days or not.\n     *\n     * >>> checkMonthnumbNumber(5)\n     * true\n     * >>> checkMonthnumbNumber(2)\n     * false\n     * >>> checkMonthnumbNumber(6)\n     * false\n     */\n    def checkMonthnumbNumber(monthnum2 : Int) : Boolean = {\n", "entry_point": "checkMonthnumbNumber", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Boolean = checkMonthnumbNumber(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var x1 : Boolean = checkMonthnumbNumber(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 6\n    var x2 : Boolean = checkMonthnumbNumber(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether the given month number contains 31 days or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/456", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to reverse strings in a given list of string values.\n     *\n     * >>> reverseStringList(List(\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"))\n     * List(\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\")\n     * >>> reverseStringList(List(\"john\", \"amal\", \"joel\", \"george\"))\n     * List(\"nhoj\", \"lama\", \"leoj\", \"egroeg\")\n     * >>> reverseStringList(List(\"jack\", \"john\", \"mary\"))\n     * List(\"kcaj\", \"nhoj\", \"yram\")\n     */\n    def reverseStringList(stringlist : List[String]) : List[String] = {\n", "entry_point": "reverseStringList", "test": "\n\n    var arg00 : List[String] = List(\"\"\"Red\"\"\", \"\"\"Green\"\"\", \"\"\"Blue\"\"\", \"\"\"White\"\"\", \"\"\"Black\"\"\")\n    var x0 : List[String] = reverseStringList(arg00)\n    var v0 : List[String] = List(\"\"\"deR\"\"\", \"\"\"neerG\"\"\", \"\"\"eulB\"\"\", \"\"\"etihW\"\"\", \"\"\"kcalB\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"john\"\"\", \"\"\"amal\"\"\", \"\"\"joel\"\"\", \"\"\"george\"\"\")\n    var x1 : List[String] = reverseStringList(arg10)\n    var v1 : List[String] = List(\"\"\"nhoj\"\"\", \"\"\"lama\"\"\", \"\"\"leoj\"\"\", \"\"\"egroeg\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"jack\"\"\", \"\"\"john\"\"\", \"\"\"mary\"\"\")\n    var x2 : List[String] = reverseStringList(arg20)\n    var v2 : List[String] = List(\"\"\"kcaj\"\"\", \"\"\"nhoj\"\"\", \"\"\"yram\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to reverse strings in a given list of string values.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/457", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sublist having minimum length.\n     *\n     * >>> findMin(List(List(1), List(1, 2), List(1, 2, 3)))\n     * List(1)\n     * >>> findMin(List(List(1, 1), List(1, 1, 1), List(1, 2, 7, 8)))\n     * List(1, 1)\n     * >>> findMin(List(List(\"x\"), List(\"x\", \"y\"), List(\"x\", \"y\", \"z\")))\n     * List(\"x\")\n     */\n    def findMin(lst : List[List[Any]]) : List[Any] = {\n", "entry_point": "findMin", "test": "\n\n    var arg00 : List[List[Any]] = List(List(1), List(1, 2), List(1, 2, 3))\n    var x0 : List[Any] = findMin(arg00)\n    var v0 : List[Any] = List(1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(1, 1), List(1, 1, 1), List(1, 2, 7, 8))\n    var x1 : List[Any] = findMin(arg10)\n    var v1 : List[Any] = List(1, 1)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(\"\"\"x\"\"\"), List(\"\"\"x\"\"\", \"\"\"y\"\"\"), List(\"\"\"x\"\"\", \"\"\"y\"\"\", \"\"\"z\"\"\"))\n    var x2 : List[Any] = findMin(arg20)\n    var v2 : List[Any] = List(\"\"\"x\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sublist having minimum length.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/458", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the area of a rectangle.\n     *\n     * >>> rectangleArea(10, 20)\n     * 200\n     * >>> rectangleArea(10, 5)\n     * 50\n     * >>> rectangleArea(4, 2)\n     * 8\n     */\n    def rectangleArea(l : Int, b : Int) : Int = {\n", "entry_point": "rectangleArea", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 20\n    var x0 : Int = rectangleArea(arg00, arg01)\n    var v0 : Int = 200\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var arg11 : Int = 5\n    var x1 : Int = rectangleArea(arg10, arg11)\n    var v1 : Int = 50\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var arg21 : Int = 2\n    var x2 : Int = rectangleArea(arg20, arg21)\n    var v2 : Int = 8\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the area of a rectangle.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/459", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove uppercase substrings from a given string by using regex.\n     *\n     * >>> removeUppercase(\"cAstyoUrFavoRitETVshoWs\")\n     * \"cstyoravoitshos\"\n     * >>> removeUppercase(\"wAtchTheinTernEtrAdIo\")\n     * \"wtchheinerntrdo\"\n     * >>> removeUppercase(\"VoicESeaRchAndreComMendaTionS\")\n     * \"oiceachndreomendaion\"\n     */\n    def removeUppercase(str1 : String) : String = {\n", "entry_point": "removeUppercase", "test": "\n\n    var arg00 : String = \"\"\"cAstyoUrFavoRitETVshoWs\"\"\"\n    var x0 : String = removeUppercase(arg00)\n    var v0 : String = \"\"\"cstyoravoitshos\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"wAtchTheinTernEtrAdIo\"\"\"\n    var x1 : String = removeUppercase(arg10)\n    var v1 : String = \"\"\"wtchheinerntrdo\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"VoicESeaRchAndreComMendaTionS\"\"\"\n    var x2 : String = removeUppercase(arg20)\n    var v2 : String = \"\"\"oiceachndreomendaion\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove uppercase substrings from a given string by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/460", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to get the first element of each sublist.\n     *\n     * >>> extract(List(List(1, 2), List(3, 4, 5), List(6, 7, 8, 9)))\n     * List(1, 3, 6)\n     * >>> extract(List(List(1, 2, 3), List(4, 5)))\n     * List(1, 4)\n     * >>> extract(List(List(9, 8, 1), List(1, 2)))\n     * List(9, 1)\n     */\n    def extract(lst : List[List[Int]]) : List[Int] = {\n", "entry_point": "extract", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 2), List(3, 4, 5), List(6, 7, 8, 9))\n    var x0 : List[Int] = extract(arg00)\n    var v0 : List[Int] = List(1, 3, 6)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1, 2, 3), List(4, 5))\n    var x1 : List[Int] = extract(arg10)\n    var v1 : List[Int] = List(1, 4)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(9, 8, 1), List(1, 2))\n    var x2 : List[Int] = extract(arg20)\n    var v2 : List[Int] = List(9, 1)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to get the first element of each sublist.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/461", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the upper case characters in a given string.\n     *\n     * >>> upperCtr(\"PYthon\")\n     * 1\n     * >>> upperCtr(\"BigData\")\n     * 1\n     * >>> upperCtr(\"program\")\n     * 0\n     */\n    def upperCtr(str : String) : Int = {\n", "entry_point": "upperCtr", "test": "\n\n    var arg00 : String = \"\"\"PYthon\"\"\"\n    var x0 : Int = upperCtr(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"BigData\"\"\"\n    var x1 : Int = upperCtr(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"program\"\"\"\n    var x2 : Int = upperCtr(arg20)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the upper case characters in a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/462", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find all possible combinations of the elements of a given list.\n     *\n     * >>> combinationsList(List(\"orange\", \"red\", \"green\", \"blue\"))\n     * List(List(), List(\"orange\"), List(\"red\"), List(\"red\", \"orange\"), List(\"green\"), List(\"green\", \"orange\"), List(\"green\", \"red\"), List(\"green\", \"red\", \"orange\"), List(\"blue\"), List(\"blue\", \"orange\"), List(\"blue\", \"red\"), List(\"blue\", \"red\", \"orange\"), List(\"blue\", \"green\"), List(\"blue\", \"green\", \"orange\"), List(\"blue\", \"green\", \"red\"), List(\"blue\", \"green\", \"red\", \"orange\"))\n     * >>> combinationsList(List(\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"))\n     * List(List(), List(\"red\"), List(\"green\"), List(\"green\", \"red\"), List(\"blue\"), List(\"blue\", \"red\"), List(\"blue\", \"green\"), List(\"blue\", \"green\", \"red\"), List(\"white\"), List(\"white\", \"red\"), List(\"white\", \"green\"), List(\"white\", \"green\", \"red\"), List(\"white\", \"blue\"), List(\"white\", \"blue\", \"red\"), List(\"white\", \"blue\", \"green\"), List(\"white\", \"blue\", \"green\", \"red\"), List(\"black\"), List(\"black\", \"red\"), List(\"black\", \"green\"), List(\"black\", \"green\", \"red\"), List(\"black\", \"blue\"), List(\"black\", \"blue\", \"red\"), List(\"black\", \"blue\", \"green\"), List(\"black\", \"blue\", \"green\", \"red\"), List(\"black\", \"white\"), List(\"black\", \"white\", \"red\"), List(\"black\", \"white\", \"green\"), List(\"black\", \"white\", \"green\", \"red\"), List(\"black\", \"white\", \"blue\"), List(\"black\", \"white\", \"blue\", \"red\"), List(\"black\", \"white\", \"blue\", \"green\"), List(\"black\", \"white\", \"blue\", \"green\", \"red\"), List(\"orange\"), List(\"orange\", \"red\"), List(\"orange\", \"green\"), List(\"orange\", \"green\", \"red\"), List(\"orange\", \"blue\"), List(\"orange\", \"blue\", \"red\"), List(\"orange\", \"blue\", \"green\"), List(\"orange\", \"blue\", \"green\", \"red\"), List(\"orange\", \"white\"), List(\"orange\", \"white\", \"red\"), List(\"orange\", \"white\", \"green\"), List(\"orange\", \"white\", \"green\", \"red\"), List(\"orange\", \"white\", \"blue\"), List(\"orange\", \"white\", \"blue\", \"red\"), List(\"orange\", \"white\", \"blue\", \"green\"), List(\"orange\", \"white\", \"blue\", \"green\", \"red\"), List(\"orange\", \"black\"), List(\"orange\", \"black\", \"red\"), List(\"orange\", \"black\", \"green\"), List(\"orange\", \"black\", \"green\", \"red\"), List(\"orange\", \"black\", \"blue\"), List(\"orange\", \"black\", \"blue\", \"red\"), List(\"orange\", \"black\", \"blue\", \"green\"), List(\"orange\", \"black\", \"blue\", \"green\", \"red\"), List(\"orange\", \"black\", \"white\"), List(\"orange\", \"black\", \"white\", \"red\"), List(\"orange\", \"black\", \"white\", \"green\"), List(\"orange\", \"black\", \"white\", \"green\", \"red\"), List(\"orange\", \"black\", \"white\", \"blue\"), List(\"orange\", \"black\", \"white\", \"blue\", \"red\"), List(\"orange\", \"black\", \"white\", \"blue\", \"green\"), List(\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"))\n     * >>> combinationsList(List(\"red\", \"green\", \"black\", \"orange\"))\n     * List(List(), List(\"red\"), List(\"green\"), List(\"green\", \"red\"), List(\"black\"), List(\"black\", \"red\"), List(\"black\", \"green\"), List(\"black\", \"green\", \"red\"), List(\"orange\"), List(\"orange\", \"red\"), List(\"orange\", \"green\"), List(\"orange\", \"green\", \"red\"), List(\"orange\", \"black\"), List(\"orange\", \"black\", \"red\"), List(\"orange\", \"black\", \"green\"), List(\"orange\", \"black\", \"green\", \"red\"))\n     */\n    def combinationsList(list1 : List[String]) : List[List[Any]] = {\n", "entry_point": "combinationsList", "test": "\n\n    var arg00 : List[String] = List(\"\"\"orange\"\"\", \"\"\"red\"\"\", \"\"\"green\"\"\", \"\"\"blue\"\"\")\n    var x0 : List[List[Any]] = combinationsList(arg00)\n    var v0 : List[List[Any]] = List(List(), List(\"\"\"orange\"\"\"), List(\"\"\"red\"\"\"), List(\"\"\"red\"\"\", \"\"\"orange\"\"\"), List(\"\"\"green\"\"\"), List(\"\"\"green\"\"\", \"\"\"orange\"\"\"), List(\"\"\"green\"\"\", \"\"\"red\"\"\"), List(\"\"\"green\"\"\", \"\"\"red\"\"\", \"\"\"orange\"\"\"), List(\"\"\"blue\"\"\"), List(\"\"\"blue\"\"\", \"\"\"orange\"\"\"), List(\"\"\"blue\"\"\", \"\"\"red\"\"\"), List(\"\"\"blue\"\"\", \"\"\"red\"\"\", \"\"\"orange\"\"\"), List(\"\"\"blue\"\"\", \"\"\"green\"\"\"), List(\"\"\"blue\"\"\", \"\"\"green\"\"\", \"\"\"orange\"\"\"), List(\"\"\"blue\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\"), List(\"\"\"blue\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\", \"\"\"orange\"\"\"))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"red\"\"\", \"\"\"green\"\"\", \"\"\"blue\"\"\", \"\"\"white\"\"\", \"\"\"black\"\"\", \"\"\"orange\"\"\")\n    var x1 : List[List[Any]] = combinationsList(arg10)\n    var v1 : List[List[Any]] = List(List(), List(\"\"\"red\"\"\"), List(\"\"\"green\"\"\"), List(\"\"\"green\"\"\", \"\"\"red\"\"\"), List(\"\"\"blue\"\"\"), List(\"\"\"blue\"\"\", \"\"\"red\"\"\"), List(\"\"\"blue\"\"\", \"\"\"green\"\"\"), List(\"\"\"blue\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\"), List(\"\"\"white\"\"\"), List(\"\"\"white\"\"\", \"\"\"red\"\"\"), List(\"\"\"white\"\"\", \"\"\"green\"\"\"), List(\"\"\"white\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\"), List(\"\"\"white\"\"\", \"\"\"blue\"\"\"), List(\"\"\"white\"\"\", \"\"\"blue\"\"\", \"\"\"red\"\"\"), List(\"\"\"white\"\"\", \"\"\"blue\"\"\", \"\"\"green\"\"\"), List(\"\"\"white\"\"\", \"\"\"blue\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\"), List(\"\"\"black\"\"\"), List(\"\"\"black\"\"\", \"\"\"red\"\"\"), List(\"\"\"black\"\"\", \"\"\"green\"\"\"), List(\"\"\"black\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\"), List(\"\"\"black\"\"\", \"\"\"blue\"\"\"), List(\"\"\"black\"\"\", \"\"\"blue\"\"\", \"\"\"red\"\"\"), List(\"\"\"black\"\"\", \"\"\"blue\"\"\", \"\"\"green\"\"\"), List(\"\"\"black\"\"\", \"\"\"blue\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\"), List(\"\"\"black\"\"\", \"\"\"white\"\"\"), List(\"\"\"black\"\"\", \"\"\"white\"\"\", \"\"\"red\"\"\"), List(\"\"\"black\"\"\", \"\"\"white\"\"\", \"\"\"green\"\"\"), List(\"\"\"black\"\"\", \"\"\"white\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\"), List(\"\"\"black\"\"\", \"\"\"white\"\"\", \"\"\"blue\"\"\"), List(\"\"\"black\"\"\", \"\"\"white\"\"\", \"\"\"blue\"\"\", \"\"\"red\"\"\"), List(\"\"\"black\"\"\", \"\"\"white\"\"\", \"\"\"blue\"\"\", \"\"\"green\"\"\"), List(\"\"\"black\"\"\", \"\"\"white\"\"\", \"\"\"blue\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\"), List(\"\"\"orange\"\"\"), List(\"\"\"orange\"\"\", \"\"\"red\"\"\"), List(\"\"\"orange\"\"\", \"\"\"green\"\"\"), List(\"\"\"orange\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\"), List(\"\"\"orange\"\"\", \"\"\"blue\"\"\"), List(\"\"\"orange\"\"\", \"\"\"blue\"\"\", \"\"\"red\"\"\"), List(\"\"\"orange\"\"\", \"\"\"blue\"\"\", \"\"\"green\"\"\"), List(\"\"\"orange\"\"\", \"\"\"blue\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\"), List(\"\"\"orange\"\"\", \"\"\"white\"\"\"), List(\"\"\"orange\"\"\", \"\"\"white\"\"\", \"\"\"red\"\"\"), List(\"\"\"orange\"\"\", \"\"\"white\"\"\", \"\"\"green\"\"\"), List(\"\"\"orange\"\"\", \"\"\"white\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\"), List(\"\"\"orange\"\"\", \"\"\"white\"\"\", \"\"\"blue\"\"\"), List(\"\"\"orange\"\"\", \"\"\"white\"\"\", \"\"\"blue\"\"\", \"\"\"red\"\"\"), List(\"\"\"orange\"\"\", \"\"\"white\"\"\", \"\"\"blue\"\"\", \"\"\"green\"\"\"), List(\"\"\"orange\"\"\", \"\"\"white\"\"\", \"\"\"blue\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\"), List(\"\"\"orange\"\"\", \"\"\"black\"\"\"), List(\"\"\"orange\"\"\", \"\"\"black\"\"\", \"\"\"red\"\"\"), List(\"\"\"orange\"\"\", \"\"\"black\"\"\", \"\"\"green\"\"\"), List(\"\"\"orange\"\"\", \"\"\"black\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\"), List(\"\"\"orange\"\"\", \"\"\"black\"\"\", \"\"\"blue\"\"\"), List(\"\"\"orange\"\"\", \"\"\"black\"\"\", \"\"\"blue\"\"\", \"\"\"red\"\"\"), List(\"\"\"orange\"\"\", \"\"\"black\"\"\", \"\"\"blue\"\"\", \"\"\"green\"\"\"), List(\"\"\"orange\"\"\", \"\"\"black\"\"\", \"\"\"blue\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\"), List(\"\"\"orange\"\"\", \"\"\"black\"\"\", \"\"\"white\"\"\"), List(\"\"\"orange\"\"\", \"\"\"black\"\"\", \"\"\"white\"\"\", \"\"\"red\"\"\"), List(\"\"\"orange\"\"\", \"\"\"black\"\"\", \"\"\"white\"\"\", \"\"\"green\"\"\"), List(\"\"\"orange\"\"\", \"\"\"black\"\"\", \"\"\"white\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\"), List(\"\"\"orange\"\"\", \"\"\"black\"\"\", \"\"\"white\"\"\", \"\"\"blue\"\"\"), List(\"\"\"orange\"\"\", \"\"\"black\"\"\", \"\"\"white\"\"\", \"\"\"blue\"\"\", \"\"\"red\"\"\"), List(\"\"\"orange\"\"\", \"\"\"black\"\"\", \"\"\"white\"\"\", \"\"\"blue\"\"\", \"\"\"green\"\"\"), List(\"\"\"orange\"\"\", \"\"\"black\"\"\", \"\"\"white\"\"\", \"\"\"blue\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\"))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"red\"\"\", \"\"\"green\"\"\", \"\"\"black\"\"\", \"\"\"orange\"\"\")\n    var x2 : List[List[Any]] = combinationsList(arg20)\n    var v2 : List[List[Any]] = List(List(), List(\"\"\"red\"\"\"), List(\"\"\"green\"\"\"), List(\"\"\"green\"\"\", \"\"\"red\"\"\"), List(\"\"\"black\"\"\"), List(\"\"\"black\"\"\", \"\"\"red\"\"\"), List(\"\"\"black\"\"\", \"\"\"green\"\"\"), List(\"\"\"black\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\"), List(\"\"\"orange\"\"\"), List(\"\"\"orange\"\"\", \"\"\"red\"\"\"), List(\"\"\"orange\"\"\", \"\"\"green\"\"\"), List(\"\"\"orange\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\"), List(\"\"\"orange\"\"\", \"\"\"black\"\"\"), List(\"\"\"orange\"\"\", \"\"\"black\"\"\", \"\"\"red\"\"\"), List(\"\"\"orange\"\"\", \"\"\"black\"\"\", \"\"\"green\"\"\"), List(\"\"\"orange\"\"\", \"\"\"black\"\"\", \"\"\"green\"\"\", \"\"\"red\"\"\"))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find all possible combinations of the elements of a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/463", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the maximum product subarray of the given array.\n     *\n     * >>> maxSubarrayProduct(List(1, -2, -3, 0, 7, -8, -2))\n     * 112\n     * >>> maxSubarrayProduct(List(6, -3, -10, 0, 2))\n     * 180\n     * >>> maxSubarrayProduct(List(-2, -40, 0, -2, -3))\n     * 80\n     */\n    def maxSubarrayProduct(arr : List[Int]) : Int = {\n", "entry_point": "maxSubarrayProduct", "test": "\n\n    var arg00 : List[Int] = List(1, -2, -3, 0, 7, -8, -2)\n    var x0 : Int = maxSubarrayProduct(arg00)\n    var v0 : Int = 112\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(6, -3, -10, 0, 2)\n    var x1 : Int = maxSubarrayProduct(arg10)\n    var v1 : Int = 180\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(-2, -40, 0, -2, -3)\n    var x2 : Int = maxSubarrayProduct(arg20)\n    var v2 : Int = 80\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the maximum product subarray of the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/464", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if all values are same in a dictionary.\n     *\n     * >>> checkValue(Map(\"Cierra Vega\"->12, \"Alden Cantrell\"->12, \"Kierra Gentry\"->12, \"Pierre Cox\"->12), 10)\n     * false\n     * >>> checkValue(Map(\"Cierra Vega\"->12, \"Alden Cantrell\"->12, \"Kierra Gentry\"->12, \"Pierre Cox\"->12), 12)\n     * true\n     * >>> checkValue(Map(\"Cierra Vega\"->12, \"Alden Cantrell\"->12, \"Kierra Gentry\"->12, \"Pierre Cox\"->12), 5)\n     * false\n     */\n    def checkValue(dict : Map[String, Int], n : Int) : Boolean = {\n", "entry_point": "checkValue", "test": "\n\n    var arg00 : Map[String, Int] = Map(\"\"\"Cierra Vega\"\"\" -> 12, \"\"\"Alden Cantrell\"\"\" -> 12, \"\"\"Kierra Gentry\"\"\" -> 12, \"\"\"Pierre Cox\"\"\" -> 12)\n    var arg01 : Int = 10\n    var x0 : Boolean = checkValue(arg00, arg01)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Map[String, Int] = Map(\"\"\"Cierra Vega\"\"\" -> 12, \"\"\"Alden Cantrell\"\"\" -> 12, \"\"\"Kierra Gentry\"\"\" -> 12, \"\"\"Pierre Cox\"\"\" -> 12)\n    var arg11 : Int = 12\n    var x1 : Boolean = checkValue(arg10, arg11)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Map[String, Int] = Map(\"\"\"Cierra Vega\"\"\" -> 12, \"\"\"Alden Cantrell\"\"\" -> 12, \"\"\"Kierra Gentry\"\"\" -> 12, \"\"\"Pierre Cox\"\"\" -> 12)\n    var arg21 : Int = 5\n    var x2 : Boolean = checkValue(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if all values are same in a dictionary.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/465", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to drop empty items from a given dictionary.\n     *\n     * >>> dropEmpty(Map(\"c1\"->\"Red\", \"c2\"->\"Green\", \"c3\"->\"none\"))\n     * Map(\"c1\"->\"Red\", \"c2\"->\"Green\")\n     * >>> dropEmpty(Map(\"c1\"->\"Red\", \"c2\"->\"none\", \"c3\"->\"none\"))\n     * Map(\"c1\"->\"Red\")\n     * >>> dropEmpty(Map(\"c1\"->\"none\", \"c2\"->\"Green\", \"c3\"->\"none\"))\n     * Map(\"c2\"->\"Green\")\n     */\n    def dropEmpty(dict1 : Map[String, Any]) : Map[String, String] = {\n", "entry_point": "dropEmpty", "test": "\n\n    var arg00 : Map[String, Any] = Map(\"\"\"c1\"\"\" -> \"\"\"Red\"\"\", \"\"\"c2\"\"\" -> \"\"\"Green\"\"\", \"\"\"c3\"\"\" -> \"none\")\n    var x0 : Map[String, String] = dropEmpty(arg00)\n    var v0 : Map[String, String] = Map(\"\"\"c1\"\"\" -> \"\"\"Red\"\"\", \"\"\"c2\"\"\" -> \"\"\"Green\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Map[String, Any] = Map(\"\"\"c1\"\"\" -> \"\"\"Red\"\"\", \"\"\"c2\"\"\" -> \"none\", \"\"\"c3\"\"\" -> \"none\")\n    var x1 : Map[String, String] = dropEmpty(arg10)\n    var v1 : Map[String, String] = Map(\"\"\"c1\"\"\" -> \"\"\"Red\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Map[String, Any] = Map(\"\"\"c1\"\"\" -> \"none\", \"\"\"c2\"\"\" -> \"\"\"Green\"\"\", \"\"\"c3\"\"\" -> \"none\")\n    var x2 : Map[String, String] = dropEmpty(arg20)\n    var v2 : Map[String, String] = Map(\"\"\"c2\"\"\" -> \"\"\"Green\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to drop empty items from a given dictionary.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/466", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the peak element in the given array.\n     *\n     * >>> findPeak(List(1, 3, 20, 4, 1, 0), 6)\n     * 2\n     * >>> findPeak(List(2, 3, 4, 5, 6), 5)\n     * 4\n     * >>> findPeak(List(8, 9, 11, 12, 14, 15), 6)\n     * 5\n     */\n    def findPeak(arr : List[Int], n : Int) : Int = {\n", "entry_point": "findPeak", "test": "\n\n    var arg00 : List[Int] = List(1, 3, 20, 4, 1, 0)\n    var arg01 : Int = 6\n    var x0 : Int = findPeak(arg00, arg01)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 3, 4, 5, 6)\n    var arg11 : Int = 5\n    var x1 : Int = findPeak(arg10, arg11)\n    var v1 : Int = 4\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(8, 9, 11, 12, 14, 15)\n    var arg21 : Int = 6\n    var x2 : Int = findPeak(arg20, arg21)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the peak element in the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/467", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to convert decimal number to octal number.\n     *\n     * >>> decimalToOctal(10)\n     * 12\n     * >>> decimalToOctal(2)\n     * 2\n     * >>> decimalToOctal(33)\n     * 41\n     */\n    def decimalToOctal(decinum : Int) : Int = {\n", "entry_point": "decimalToOctal", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = decimalToOctal(arg00)\n    var v0 : Int = 12\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var x1 : Int = decimalToOctal(arg10)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 33\n    var x2 : Int = decimalToOctal(arg20)\n    var v2 : Int = 41\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to convert decimal number to octal number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/468", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n     *\n     * >>> maxProduct(List(3, 100, 4, 5, 150, 6), 6)\n     * 45000\n     * >>> maxProduct(List(4, 42, 55, 68, 80), 5)\n     * 50265600\n     * >>> maxProduct(List(10, 22, 9, 33, 21, 50, 41, 60), 8)\n     * 21780000\n     */\n    def maxProduct(arr : List[Int], n : Int) : Int = {\n", "entry_point": "maxProduct", "test": "\n\n    var arg00 : List[Int] = List(3, 100, 4, 5, 150, 6)\n    var arg01 : Int = 6\n    var x0 : Int = maxProduct(arg00, arg01)\n    var v0 : Int = 45000\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 42, 55, 68, 80)\n    var arg11 : Int = 5\n    var x1 : Int = maxProduct(arg10, arg11)\n    var v1 : Int = 50265600\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(10, 22, 9, 33, 21, 50, 41, 60)\n    var arg21 : Int = 8\n    var x2 : Int = maxProduct(arg20, arg21)\n    var v2 : Int = 21780000\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/469", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the maximum profit earned from a maximum of k stock transactions\n     *\n     * >>> maxProfit(List(1, 5, 2, 3, 7, 6, 4, 5), 3)\n     * 10\n     * >>> maxProfit(List(2, 4, 7, 5, 4, 3, 5), 2)\n     * 7\n     * >>> maxProfit(List(10, 6, 8, 4, 2), 2)\n     * 2\n     */\n    def maxProfit(price : List[Int], k : Int) : Int = {\n", "entry_point": "maxProfit", "test": "\n\n    var arg00 : List[Int] = List(1, 5, 2, 3, 7, 6, 4, 5)\n    var arg01 : Int = 3\n    var x0 : Int = maxProfit(arg00, arg01)\n    var v0 : Int = 10\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 4, 7, 5, 4, 3, 5)\n    var arg11 : Int = 2\n    var x1 : Int = maxProfit(arg10, arg11)\n    var v1 : Int = 7\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(10, 6, 8, 4, 2)\n    var arg21 : Int = 2\n    var x2 : Int = maxProfit(arg20, arg21)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the maximum profit earned from a maximum of k stock transactions", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/470", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the pairwise addition of the elements of the given tuples.\n     *\n     * >>> addPairwise(List(1, 5, 7, 8, 10))\n     * List(6, 12, 15, 18)\n     * >>> addPairwise(List(2, 6, 8, 9, 11))\n     * List(8, 14, 17, 20)\n     * >>> addPairwise(List(3, 7, 9, 10, 12))\n     * List(10, 16, 19, 22)\n     */\n    def addPairwise(testTup : List[Int]) : List[Int] = {\n", "entry_point": "addPairwise", "test": "\n\n    var arg00 : List[Int] = List(1, 5, 7, 8, 10)\n    var x0 : List[Int] = addPairwise(arg00)\n    var v0 : List[Int] = List(6, 12, 15, 18)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 6, 8, 9, 11)\n    var x1 : List[Int] = addPairwise(arg10)\n    var v1 : List[Int] = List(8, 14, 17, 20)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3, 7, 9, 10, 12)\n    var x2 : List[Int] = addPairwise(arg20)\n    var v2 : List[Int] = List(10, 16, 19, 22)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the pairwise addition of the elements of the given tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/471", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find remainder of array multiplication divided by n.\n     *\n     * >>> findRemainder(List(100, 10, 5, 25, 35, 14), 6, 11)\n     * 9\n     * >>> findRemainder(List(1, 1, 1), 3, 1)\n     * 0\n     * >>> findRemainder(List(1, 2, 1), 3, 2)\n     * 0\n     */\n    def findRemainder(arr : List[Int], lens : Int, n : Int) : Int = {\n", "entry_point": "findRemainder", "test": "\n\n    var arg00 : List[Int] = List(100, 10, 5, 25, 35, 14)\n    var arg01 : Int = 6\n    var arg02 : Int = 11\n    var x0 : Int = findRemainder(arg00, arg01, arg02)\n    var v0 : Int = 9\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 1, 1)\n    var arg11 : Int = 3\n    var arg12 : Int = 1\n    var x1 : Int = findRemainder(arg10, arg11, arg12)\n    var v1 : Int = 0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 1)\n    var arg21 : Int = 3\n    var arg22 : Int = 2\n    var x2 : Int = findRemainder(arg20, arg21, arg22)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find remainder of array multiplication divided by n.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/472", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the given list contains consecutive numbers or not.\n     *\n     * >>> checkConsecutive(List(1, 2, 3, 4, 5))\n     * true\n     * >>> checkConsecutive(List(1, 2, 3, 5, 6))\n     * false\n     * >>> checkConsecutive(List(1, 2, 1))\n     * false\n     */\n    def checkConsecutive(l : List[Int]) : Boolean = {\n", "entry_point": "checkConsecutive", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5)\n    var x0 : Boolean = checkConsecutive(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 5, 6)\n    var x1 : Boolean = checkConsecutive(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 1)\n    var x2 : Boolean = checkConsecutive(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the given list contains consecutive numbers or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/473", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n     *\n     * >>> tupleIntersection(List(List(3, 4), List(5, 6), List(9, 10), List(4, 5)), List(List(5, 4), List(3, 4), List(6, 5), List(9, 11)))\n     * Set(List(4, 5), List(5, 6), List(3, 4))\n     * >>> tupleIntersection(List(List(4, 1), List(7, 4), List(11, 13), List(17, 14)), List(List(1, 4), List(7, 4), List(16, 12), List(10, 13)))\n     * Set(List(4, 7), List(1, 4))\n     * >>> tupleIntersection(List(List(2, 1), List(3, 2), List(1, 3), List(1, 4)), List(List(11, 2), List(2, 3), List(6, 2), List(1, 3)))\n     * Set(List(2, 3), List(1, 3))\n     */\n    def tupleIntersection(testList1 : List[List[Int]], testList2 : List[List[Int]]) : Set[List[Int]] = {\n", "entry_point": "tupleIntersection", "test": "\n\n    var arg00 : List[List[Int]] = List(List(3, 4), List(5, 6), List(9, 10), List(4, 5))\n    var arg01 : List[List[Int]] = List(List(5, 4), List(3, 4), List(6, 5), List(9, 11))\n    var x0 : Set[List[Int]] = tupleIntersection(arg00, arg01)\n    var v0 : Set[List[Int]] = Set(List(4, 5), List(5, 6), List(3, 4))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(4, 1), List(7, 4), List(11, 13), List(17, 14))\n    var arg11 : List[List[Int]] = List(List(1, 4), List(7, 4), List(16, 12), List(10, 13))\n    var x1 : Set[List[Int]] = tupleIntersection(arg10, arg11)\n    var v1 : Set[List[Int]] = Set(List(4, 7), List(1, 4))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(2, 1), List(3, 2), List(1, 3), List(1, 4))\n    var arg21 : List[List[Int]] = List(List(11, 2), List(2, 3), List(6, 2), List(1, 3))\n    var x2 : Set[List[Int]] = tupleIntersection(arg20, arg21)\n    var v2 : Set[List[Int]] = Set(List(2, 3), List(1, 3))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/474", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to replace characters in a string.\n     *\n     * >>> replaceChar(\"polygon\", \"y\", \"l\")\n     * \"pollgon\"\n     * >>> replaceChar(\"character\", \"c\", \"a\")\n     * \"aharaater\"\n     * >>> replaceChar(\"python\", \"l\", \"a\")\n     * \"python\"\n     */\n    def replaceChar(str1 : String, ch : String, newch : String) : String = {\n", "entry_point": "replaceChar", "test": "\n\n    var arg00 : String = \"\"\"polygon\"\"\"\n    var arg01 : String = \"\"\"y\"\"\"\n    var arg02 : String = \"\"\"l\"\"\"\n    var x0 : String = replaceChar(arg00, arg01, arg02)\n    var v0 : String = \"\"\"pollgon\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"character\"\"\"\n    var arg11 : String = \"\"\"c\"\"\"\n    var arg12 : String = \"\"\"a\"\"\"\n    var x1 : String = replaceChar(arg10, arg11, arg12)\n    var v1 : String = \"\"\"aharaater\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"python\"\"\"\n    var arg21 : String = \"\"\"l\"\"\"\n    var arg22 : String = \"\"\"a\"\"\"\n    var x2 : String = replaceChar(arg20, arg21, arg22)\n    var v2 : String = \"\"\"python\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to replace characters in a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/475", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort counter by value.\n     *\n     * >>> sortCounter(Map(\"Math\"->81, \"Physics\"->83, \"Chemistry\"->87))\n     * List(List(\"Chemistry\", 87), List(\"Physics\", 83), List(\"Math\", 81))\n     * >>> sortCounter(Map(\"Math\"->400, \"Physics\"->300, \"Chemistry\"->250))\n     * List(List(\"Math\", 400), List(\"Physics\", 300), List(\"Chemistry\", 250))\n     * >>> sortCounter(Map(\"Math\"->900, \"Physics\"->1000, \"Chemistry\"->1250))\n     * List(List(\"Chemistry\", 1250), List(\"Physics\", 1000), List(\"Math\", 900))\n     */\n    def sortCounter(dict1 : Map[String, Int]) : List[List[Any]] = {\n", "entry_point": "sortCounter", "test": "\n\n    var arg00 : Map[String, Int] = Map(\"\"\"Math\"\"\" -> 81, \"\"\"Physics\"\"\" -> 83, \"\"\"Chemistry\"\"\" -> 87)\n    var x0 : List[List[Any]] = sortCounter(arg00)\n    var v0 : List[List[Any]] = List(List(\"\"\"Chemistry\"\"\", 87), List(\"\"\"Physics\"\"\", 83), List(\"\"\"Math\"\"\", 81))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Map[String, Int] = Map(\"\"\"Math\"\"\" -> 400, \"\"\"Physics\"\"\" -> 300, \"\"\"Chemistry\"\"\" -> 250)\n    var x1 : List[List[Any]] = sortCounter(arg10)\n    var v1 : List[List[Any]] = List(List(\"\"\"Math\"\"\", 400), List(\"\"\"Physics\"\"\", 300), List(\"\"\"Chemistry\"\"\", 250))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Map[String, Int] = Map(\"\"\"Math\"\"\" -> 900, \"\"\"Physics\"\"\" -> 1000, \"\"\"Chemistry\"\"\" -> 1250)\n    var x2 : List[List[Any]] = sortCounter(arg20)\n    var v2 : List[List[Any]] = List(List(\"\"\"Chemistry\"\"\", 1250), List(\"\"\"Physics\"\"\", 1000), List(\"\"\"Math\"\"\", 900))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort counter by value.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/476", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of the largest and smallest value in a given array.\n     *\n     * >>> bigSum(List(1, 2, 3))\n     * 4\n     * >>> bigSum(List(-1, 2, 3, 4))\n     * 3\n     * >>> bigSum(List(2, 3, 6))\n     * 8\n     */\n    def bigSum(nums : List[Int]) : Int = {\n", "entry_point": "bigSum", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3)\n    var x0 : Int = bigSum(arg00)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(-1, 2, 3, 4)\n    var x1 : Int = bigSum(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 3, 6)\n    var x2 : Int = bigSum(arg20)\n    var v2 : Int = 8\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of the largest and smallest value in a given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/477", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to convert the given string to lower case.\n     *\n     * >>> isLower(\"InValid\")\n     * \"invalid\"\n     * >>> isLower(\"TruE\")\n     * \"true\"\n     * >>> isLower(\"SenTenCE\")\n     * \"sentence\"\n     */\n    def isLower(string : String) : String = {\n", "entry_point": "isLower", "test": "\n\n    var arg00 : String = \"\"\"InValid\"\"\"\n    var x0 : String = isLower(arg00)\n    var v0 : String = \"\"\"invalid\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"TruE\"\"\"\n    var x1 : String = isLower(arg10)\n    var v1 : String = \"\"\"true\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"SenTenCE\"\"\"\n    var x2 : String = isLower(arg20)\n    var v2 : String = \"\"\"sentence\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to convert the given string to lower case.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/478", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove lowercase substrings from a given string.\n     *\n     * >>> removeLowercase(\"PYTHon\")\n     * \"PYTH\"\n     * >>> removeLowercase(\"FInD\")\n     * \"FID\"\n     * >>> removeLowercase(\"STRinG\")\n     * \"STRG\"\n     */\n    def removeLowercase(str1 : String) : String = {\n", "entry_point": "removeLowercase", "test": "\n\n    var arg00 : String = \"\"\"PYTHon\"\"\"\n    var x0 : String = removeLowercase(arg00)\n    var v0 : String = \"\"\"PYTH\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"FInD\"\"\"\n    var x1 : String = removeLowercase(arg10)\n    var v1 : String = \"\"\"FID\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"STRinG\"\"\"\n    var x2 : String = removeLowercase(arg20)\n    var v2 : String = \"\"\"STRG\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove lowercase substrings from a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/479", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the first digit of a given number.\n     *\n     * >>> firstDigit(123)\n     * 1\n     * >>> firstDigit(456)\n     * 4\n     * >>> firstDigit(12)\n     * 1\n     */\n    def firstDigit(n : Int) : Int = {\n", "entry_point": "firstDigit", "test": "\n\n    var arg00 : Int = 123\n    var x0 : Int = firstDigit(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 456\n    var x1 : Int = firstDigit(arg10)\n    var v1 : Int = 4\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 12\n    var x2 : Int = firstDigit(arg20)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the first digit of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/480", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the maximum occurring character in a given string.\n     *\n     * >>> getMaxOccuringChar(\"data\")\n     * \"a\"\n     * >>> getMaxOccuringChar(\"create\")\n     * \"e\"\n     * >>> getMaxOccuringChar(\"brilliant girl\")\n     * \"i\"\n     */\n    def getMaxOccuringChar(str1 : String) : String = {\n", "entry_point": "getMaxOccuringChar", "test": "\n\n    var arg00 : String = \"\"\"data\"\"\"\n    var x0 : String = getMaxOccuringChar(arg00)\n    var v0 : String = \"\"\"a\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"create\"\"\"\n    var x1 : String = getMaxOccuringChar(arg10)\n    var v1 : String = \"\"\"e\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"brilliant girl\"\"\"\n    var x2 : String = getMaxOccuringChar(arg20)\n    var v2 : String = \"\"\"i\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the maximum occurring character in a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/481", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n     *\n     * >>> isSubsetSum(List(3, 34, 4, 12, 5, 2), 6, 9)\n     * true\n     * >>> isSubsetSum(List(3, 34, 4, 12, 5, 2), 6, 30)\n     * false\n     * >>> isSubsetSum(List(3, 34, 4, 12, 5, 2), 6, 15)\n     * true\n     */\n    def isSubsetSum(set : List[Int], n : Int, sum : Int) : Boolean = {\n", "entry_point": "isSubsetSum", "test": "\n\n    var arg00 : List[Int] = List(3, 34, 4, 12, 5, 2)\n    var arg01 : Int = 6\n    var arg02 : Int = 9\n    var x0 : Boolean = isSubsetSum(arg00, arg01, arg02)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(3, 34, 4, 12, 5, 2)\n    var arg11 : Int = 6\n    var arg12 : Int = 30\n    var x1 : Boolean = isSubsetSum(arg10, arg11, arg12)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3, 34, 4, 12, 5, 2)\n    var arg21 : Int = 6\n    var arg22 : Int = 15\n    var x2 : Boolean = isSubsetSum(arg20, arg21, arg22)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/482", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n     *\n     * >>> perform_match(\"Geeks\")\n     * \"Yes\"\n     * >>> perform_match(\"geeksforGeeks\")\n     * \"Yes\"\n     * >>> perform_match(\"geeks\")\n     * \"No\"\n     */\n    def perform_match(text : String) : String = {\n", "entry_point": "perform_match", "test": "\n\n    var arg00 : String = \"\"\"Geeks\"\"\"\n    var x0 : String = perform_match(arg00)\n    var v0 : String = \"\"\"Yes\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"geeksforGeeks\"\"\"\n    var x1 : String = perform_match(arg10)\n    var v1 : String = \"\"\"Yes\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"geeks\"\"\"\n    var x2 : String = perform_match(arg20)\n    var v2 : String = \"\"\"No\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/483", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the first natural number whose factorial is divisible by x.\n     *\n     * >>> firstFactorialDivisibleNumber(10)\n     * 5\n     * >>> firstFactorialDivisibleNumber(15)\n     * 5\n     * >>> firstFactorialDivisibleNumber(5)\n     * 4\n     */\n    def firstFactorialDivisibleNumber(x : Int) : Int = {\n", "entry_point": "firstFactorialDivisibleNumber", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = firstFactorialDivisibleNumber(arg00)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 15\n    var x1 : Int = firstFactorialDivisibleNumber(arg10)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var x2 : Int = firstFactorialDivisibleNumber(arg20)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the first natural number whose factorial is divisible by x.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/484", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove the matching tuples from the given two tuples.\n     *\n     * >>> removeMatchingTuple(List(List(\"Hello\", \"dude\"), List(\"How\", \"are\"), List(\"you\", \"?\")), List(List(\"Hello\", \"dude\"), List(\"How\", \"are\")))\n     * List(List(\"you\", \"?\"))\n     * >>> removeMatchingTuple(List(List(\"Part\", \"of\"), List(\"the\", \"journey\"), List(\"is \", \"end\")), List(List(\"Journey\", \"the\"), List(\"is\", \"end\")))\n     * List(List(\"Part\", \"of\"), List(\"the\", \"journey\"), List(\"is \", \"end\"))\n     * >>> removeMatchingTuple(List(List(\"Its\", \"been\"), List(\"a\", \"long\"), List(\"day\", \"without\")), List(List(\"a\", \"long\"), List(\"my\", \"friend\")))\n     * List(List(\"Its\", \"been\"), List(\"day\", \"without\"))\n     */\n    def removeMatchingTuple(testList1 : List[List[String]], testList2 : List[List[String]]) : List[List[String]] = {\n", "entry_point": "removeMatchingTuple", "test": "\n\n    var arg00 : List[List[String]] = List(List(\"\"\"Hello\"\"\", \"\"\"dude\"\"\"), List(\"\"\"How\"\"\", \"\"\"are\"\"\"), List(\"\"\"you\"\"\", \"\"\"?\"\"\"))\n    var arg01 : List[List[String]] = List(List(\"\"\"Hello\"\"\", \"\"\"dude\"\"\"), List(\"\"\"How\"\"\", \"\"\"are\"\"\"))\n    var x0 : List[List[String]] = removeMatchingTuple(arg00, arg01)\n    var v0 : List[List[String]] = List(List(\"\"\"you\"\"\", \"\"\"?\"\"\"))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[String]] = List(List(\"\"\"Part\"\"\", \"\"\"of\"\"\"), List(\"\"\"the\"\"\", \"\"\"journey\"\"\"), List(\"\"\"is \"\"\", \"\"\"end\"\"\"))\n    var arg11 : List[List[String]] = List(List(\"\"\"Journey\"\"\", \"\"\"the\"\"\"), List(\"\"\"is\"\"\", \"\"\"end\"\"\"))\n    var x1 : List[List[String]] = removeMatchingTuple(arg10, arg11)\n    var v1 : List[List[String]] = List(List(\"\"\"Part\"\"\", \"\"\"of\"\"\"), List(\"\"\"the\"\"\", \"\"\"journey\"\"\"), List(\"\"\"is \"\"\", \"\"\"end\"\"\"))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[String]] = List(List(\"\"\"Its\"\"\", \"\"\"been\"\"\"), List(\"\"\"a\"\"\", \"\"\"long\"\"\"), List(\"\"\"day\"\"\", \"\"\"without\"\"\"))\n    var arg21 : List[List[String]] = List(List(\"\"\"a\"\"\", \"\"\"long\"\"\"), List(\"\"\"my\"\"\", \"\"\"friend\"\"\"))\n    var x2 : List[List[String]] = removeMatchingTuple(arg20, arg21)\n    var v2 : List[List[String]] = List(List(\"\"\"Its\"\"\", \"\"\"been\"\"\"), List(\"\"\"day\"\"\", \"\"\"without\"\"\"))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove the matching tuples from the given two tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/485", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the largest palindromic number in the given array.\n     *\n     * >>> largestPalindrome(List(1, 232, 54545, 999991), 4)\n     * 54545\n     * >>> largestPalindrome(List(1, 2, 3, 4, 5, 50), 6)\n     * 5\n     */\n    def largestPalindrome(a : List[Int], n : Int) : Int = {\n", "entry_point": "largestPalindrome", "test": "\n\n    var arg00 : List[Int] = List(1, 232, 54545, 999991)\n    var arg01 : Int = 4\n    var x0 : Int = largestPalindrome(arg00, arg01)\n    var v0 : Int = 54545\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5, 50)\n    var arg11 : Int = 6\n    var x1 : Int = largestPalindrome(arg10, arg11)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n\n}\n", "description": "Write a function to find the largest palindromic number in the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/486", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to compute binomial probability for the given number.\n     *\n     * >>> binomialProbability(10, 5, 0.3333333333333333)\n     * 0.13656454808718185\n     * >>> binomialProbability(11, 6, 0.5)\n     * 0.2255859375\n     * >>> binomialProbability(12, 7, 0.6)\n     * 0.227030335488\n     */\n    def binomialProbability(n : Int, k : Int, p : Double) : Double = {\n", "entry_point": "binomialProbability", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 5\n    var arg02 : Double = 0.3333333333333333\n    var x0 : Double = binomialProbability(arg00, arg01, arg02)\n    var v0 : Double = 0.13656454808718185\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 11\n    var arg11 : Int = 6\n    var arg12 : Double = 0.5\n    var x1 : Double = binomialProbability(arg10, arg11, arg12)\n    var v1 : Double = 0.2255859375\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 12\n    var arg21 : Int = 7\n    var arg22 : Double = 0.6\n    var x2 : Double = binomialProbability(arg20, arg21, arg22)\n    var v2 : Double = 0.227030335488\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to compute binomial probability for the given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/487", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n     *\n     * >>> sortTuple(List(List(1, 3), List(3, 2), List(2, 1)))\n     * List(List(2, 1), List(3, 2), List(1, 3))\n     * >>> sortTuple(List(List(2, 4), List(3, 3), List(1, 1)))\n     * List(List(1, 1), List(3, 3), List(2, 4))\n     * >>> sortTuple(List(List(3, 9), List(6, 7), List(4, 3)))\n     * List(List(4, 3), List(6, 7), List(3, 9))\n     */\n    def sortTuple(tup : List[List[Int]]) : List[List[Int]] = {\n", "entry_point": "sortTuple", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 3), List(3, 2), List(2, 1))\n    var x0 : List[List[Int]] = sortTuple(arg00)\n    var v0 : List[List[Int]] = List(List(2, 1), List(3, 2), List(1, 3))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(2, 4), List(3, 3), List(1, 1))\n    var x1 : List[List[Int]] = sortTuple(arg10)\n    var v1 : List[List[Int]] = List(List(1, 1), List(3, 3), List(2, 4))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(3, 9), List(6, 7), List(4, 3))\n    var x2 : List[List[Int]] = sortTuple(arg20)\n    var v2 : List[List[Int]] = List(List(4, 3), List(6, 7), List(3, 9))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/488", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the area of a pentagon.\n     *\n     * >>> areaPentagon(5)\n     * 43.01193501472417\n     * >>> areaPentagon(10)\n     * 172.0477400588967\n     * >>> areaPentagon(15)\n     * 387.10741513251753\n     */\n    def areaPentagon(a : Int) : Double = {\n", "entry_point": "areaPentagon", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Double = areaPentagon(arg00)\n    var v0 : Double = 43.01193501472417\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var x1 : Double = areaPentagon(arg10)\n    var v1 : Double = 172.0477400588967\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 15\n    var x2 : Double = areaPentagon(arg20)\n    var v2 : Double = 387.10741513251753\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the area of a pentagon.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/489", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the frequency of the largest value in a given array.\n     *\n     * >>> frequencyOfLargest(5, List(1, 2, 3, 4, 4))\n     * 2\n     * >>> frequencyOfLargest(3, List(5, 6, 5))\n     * 1\n     * >>> frequencyOfLargest(4, List(2, 7, 7, 7))\n     * 3\n     */\n    def frequencyOfLargest(n : Int, arr : List[Int]) : Int = {\n", "entry_point": "frequencyOfLargest", "test": "\n\n    var arg00 : Int = 5\n    var arg01 : List[Int] = List(1, 2, 3, 4, 4)\n    var x0 : Int = frequencyOfLargest(arg00, arg01)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var arg11 : List[Int] = List(5, 6, 5)\n    var x1 : Int = frequencyOfLargest(arg10, arg11)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var arg21 : List[Int] = List(2, 7, 7, 7)\n    var x2 : Int = frequencyOfLargest(arg20, arg21)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the frequency of the largest value in a given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/490", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract all the pairs which are symmetric in the given tuple list.\n     *\n     * >>> extractSymmetric(List(List(6, 7), List(2, 3), List(7, 6), List(9, 8), List(10, 2), List(8, 9)))\n     * Set(List(6, 7), List(8, 9))\n     * >>> extractSymmetric(List(List(7, 8), List(3, 4), List(8, 7), List(10, 9), List(11, 3), List(9, 10)))\n     * Set(List(9, 10), List(7, 8))\n     * >>> extractSymmetric(List(List(8, 9), List(4, 5), List(9, 8), List(11, 10), List(12, 4), List(10, 11)))\n     * Set(List(8, 9), List(10, 11))\n     */\n    def extractSymmetric(testList : List[List[Int]]) : Set[List[Int]] = {\n", "entry_point": "extractSymmetric", "test": "\n\n    var arg00 : List[List[Int]] = List(List(6, 7), List(2, 3), List(7, 6), List(9, 8), List(10, 2), List(8, 9))\n    var x0 : Set[List[Int]] = extractSymmetric(arg00)\n    var v0 : Set[List[Int]] = Set(List(6, 7), List(8, 9))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(7, 8), List(3, 4), List(8, 7), List(10, 9), List(11, 3), List(9, 10))\n    var x1 : Set[List[Int]] = extractSymmetric(arg10)\n    var v1 : Set[List[Int]] = Set(List(9, 10), List(7, 8))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(8, 9), List(4, 5), List(9, 8), List(11, 10), List(12, 4), List(10, 11))\n    var x2 : Set[List[Int]] = extractSymmetric(arg20)\n    var v2 : Set[List[Int]] = Set(List(8, 9), List(10, 11))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract all the pairs which are symmetric in the given tuple list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/491", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the sum of geometric progression series.\n     *\n     * >>> sumGp(1, 5, 2)\n     * 31\n     * >>> sumGp(1, 5, 4)\n     * 341\n     * >>> sumGp(2, 6, 3)\n     * 728\n     */\n    def sumGp(a : Int, n : Int, r : Int) : Int = {\n", "entry_point": "sumGp", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = 5\n    var arg02 : Int = 2\n    var x0 : Int = sumGp(arg00, arg01, arg02)\n    var v0 : Int = 31\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var arg11 : Int = 5\n    var arg12 : Int = 4\n    var x1 : Int = sumGp(arg10, arg11, arg12)\n    var v1 : Int = 341\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var arg21 : Int = 6\n    var arg22 : Int = 3\n    var x2 : Int = sumGp(arg20, arg21, arg22)\n    var v2 : Int = 728\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the sum of geometric progression series.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/492", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to search an element in the given array by using binary search.\n     *\n     * >>> binarySearch(List(1, 2, 3, 5, 8), 6)\n     * false\n     * >>> binarySearch(List(7, 8, 9, 10, 13), 10)\n     * true\n     * >>> binarySearch(List(11, 13, 14, 19, 22, 36), 23)\n     * false\n     */\n    def binarySearch(itemList : List[Int], item : Int) : Boolean = {\n", "entry_point": "binarySearch", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 5, 8)\n    var arg01 : Int = 6\n    var x0 : Boolean = binarySearch(arg00, arg01)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(7, 8, 9, 10, 13)\n    var arg11 : Int = 10\n    var x1 : Boolean = binarySearch(arg10, arg11)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(11, 13, 14, 19, 22, 36)\n    var arg21 : Int = 23\n    var x2 : Boolean = binarySearch(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to search an element in the given array by using binary search.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/493", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n     *\n     * >>> calculatePolygons(1, 1, 4, 4, 3)\n     * List(List(List(-5.0, -4.196152422706632), List(-5.0, -0.7320508075688767), List(-2.0, 1.0), List(1.0, -0.7320508075688767), List(1.0, -4.196152422706632), List(-2.0, -5.928203230275509), List(-5.0, -4.196152422706632)), List(List(1.0, -4.196152422706632), List(1.0, -0.7320508075688767), List(4.0, 1.0), List(7.0, -0.7320508075688767), List(7.0, -4.196152422706632), List(4.0, -5.928203230275509), List(1.0, -4.196152422706632)), List(List(7.0, -4.196152422706632), List(7.0, -0.7320508075688767), List(10.0, 1.0), List(13.0, -0.7320508075688767), List(13.0, -4.196152422706632), List(10.0, -5.928203230275509), List(7.0, -4.196152422706632)), List(List(-2.0, 1.0000000000000004), List(-2.0, 4.464101615137755), List(1.0, 6.196152422706632), List(4.0, 4.464101615137755), List(4.0, 1.0000000000000004), List(1.0, -0.7320508075688767), List(-2.0, 1.0000000000000004)), List(List(4.0, 1.0000000000000004), List(4.0, 4.464101615137755), List(7.0, 6.196152422706632), List(10.0, 4.464101615137755), List(10.0, 1.0000000000000004), List(7.0, -0.7320508075688767), List(4.0, 1.0000000000000004)), List(List(-5.0, 6.196152422706632), List(-5.0, 9.660254037844387), List(-2.0, 11.392304845413264), List(1.0, 9.660254037844387), List(1.0, 6.196152422706632), List(-2.0, 4.464101615137755), List(-5.0, 6.196152422706632)), List(List(1.0, 6.196152422706632), List(1.0, 9.660254037844387), List(4.0, 11.392304845413264), List(7.0, 9.660254037844387), List(7.0, 6.196152422706632), List(4.0, 4.464101615137755), List(1.0, 6.196152422706632)), List(List(7.0, 6.196152422706632), List(7.0, 9.660254037844387), List(10.0, 11.392304845413264), List(13.0, 9.660254037844387), List(13.0, 6.196152422706632), List(10.0, 4.464101615137755), List(7.0, 6.196152422706632)), List(List(-2.0, 11.392304845413264), List(-2.0, 14.85640646055102), List(1.0, 16.588457268119896), List(4.0, 14.85640646055102), List(4.0, 11.392304845413264), List(1.0, 9.660254037844387), List(-2.0, 11.392304845413264)), List(List(4.0, 11.392304845413264), List(4.0, 14.85640646055102), List(7.0, 16.588457268119896), List(10.0, 14.85640646055102), List(10.0, 11.392304845413264), List(7.0, 9.660254037844387), List(4.0, 11.392304845413264)))\n     * >>> calculatePolygons(5, 4, 7, 9, 8)\n     * List(List(List(-11.0, -9.856406460551018), List(-11.0, -0.6188021535170058), List(-3.0, 4.0), List(5.0, -0.6188021535170058), List(5.0, -9.856406460551018), List(-3.0, -14.475208614068023), List(-11.0, -9.856406460551018)), List(List(5.0, -9.856406460551018), List(5.0, -0.6188021535170058), List(13.0, 4.0), List(21.0, -0.6188021535170058), List(21.0, -9.856406460551018), List(13.0, -14.475208614068023), List(5.0, -9.856406460551018)), List(List(21.0, -9.856406460551018), List(21.0, -0.6188021535170058), List(29.0, 4.0), List(37.0, -0.6188021535170058), List(37.0, -9.856406460551018), List(29.0, -14.475208614068023), List(21.0, -9.856406460551018)), List(List(-3.0, 4.0), List(-3.0, 13.237604307034012), List(5.0, 17.856406460551018), List(13.0, 13.237604307034012), List(13.0, 4.0), List(5.0, -0.6188021535170058), List(-3.0, 4.0)), List(List(13.0, 4.0), List(13.0, 13.237604307034012), List(21.0, 17.856406460551018), List(29.0, 13.237604307034012), List(29.0, 4.0), List(21.0, -0.6188021535170058), List(13.0, 4.0)), List(List(-11.0, 17.856406460551018), List(-11.0, 27.09401076758503), List(-3.0, 31.712812921102035), List(5.0, 27.09401076758503), List(5.0, 17.856406460551018), List(-3.0, 13.237604307034012), List(-11.0, 17.856406460551018)), List(List(5.0, 17.856406460551018), List(5.0, 27.09401076758503), List(13.0, 31.712812921102035), List(21.0, 27.09401076758503), List(21.0, 17.856406460551018), List(13.0, 13.237604307034012), List(5.0, 17.856406460551018)), List(List(21.0, 17.856406460551018), List(21.0, 27.09401076758503), List(29.0, 31.712812921102035), List(37.0, 27.09401076758503), List(37.0, 17.856406460551018), List(29.0, 13.237604307034012), List(21.0, 17.856406460551018)), List(List(-3.0, 31.712812921102035), List(-3.0, 40.95041722813605), List(5.0, 45.569219381653056), List(13.0, 40.95041722813605), List(13.0, 31.712812921102035), List(5.0, 27.09401076758503), List(-3.0, 31.712812921102035)), List(List(13.0, 31.712812921102035), List(13.0, 40.95041722813605), List(21.0, 45.569219381653056), List(29.0, 40.95041722813605), List(29.0, 31.712812921102035), List(21.0, 27.09401076758503), List(13.0, 31.712812921102035)))\n     * >>> calculatePolygons(9, 6, 4, 3, 2)\n     * List(List(List(5.0, 2.5358983848622456), List(5.0, 4.8452994616207485), List(7.0, 6.0), List(9.0, 4.8452994616207485), List(9.0, 2.5358983848622456), List(7.0, 1.3811978464829942), List(5.0, 2.5358983848622456)), List(List(7.0, 6.0), List(7.0, 8.309401076758503), List(9.0, 9.464101615137753), List(11.0, 8.309401076758503), List(11.0, 6.0), List(9.0, 4.8452994616207485), List(7.0, 6.0)))\n     */\n    def calculatePolygons(startx : Int, starty : Int, endx : Int, endy : Int, radius : Int) : List[List[List[Double]]] = {\n", "entry_point": "calculatePolygons", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = 1\n    var arg02 : Int = 4\n    var arg03 : Int = 4\n    var arg04 : Int = 3\n    var x0 : List[List[List[Double]]] = calculatePolygons(arg00, arg01, arg02, arg03, arg04)\n    var v0 : List[List[List[Double]]] = List(List(List(-5.0, -4.196152422706632), List(-5.0, -0.7320508075688767), List(-2.0, 1.0), List(1.0, -0.7320508075688767), List(1.0, -4.196152422706632), List(-2.0, -5.928203230275509), List(-5.0, -4.196152422706632)), List(List(1.0, -4.196152422706632), List(1.0, -0.7320508075688767), List(4.0, 1.0), List(7.0, -0.7320508075688767), List(7.0, -4.196152422706632), List(4.0, -5.928203230275509), List(1.0, -4.196152422706632)), List(List(7.0, -4.196152422706632), List(7.0, -0.7320508075688767), List(10.0, 1.0), List(13.0, -0.7320508075688767), List(13.0, -4.196152422706632), List(10.0, -5.928203230275509), List(7.0, -4.196152422706632)), List(List(-2.0, 1.0000000000000004), List(-2.0, 4.464101615137755), List(1.0, 6.196152422706632), List(4.0, 4.464101615137755), List(4.0, 1.0000000000000004), List(1.0, -0.7320508075688767), List(-2.0, 1.0000000000000004)), List(List(4.0, 1.0000000000000004), List(4.0, 4.464101615137755), List(7.0, 6.196152422706632), List(10.0, 4.464101615137755), List(10.0, 1.0000000000000004), List(7.0, -0.7320508075688767), List(4.0, 1.0000000000000004)), List(List(-5.0, 6.196152422706632), List(-5.0, 9.660254037844387), List(-2.0, 11.392304845413264), List(1.0, 9.660254037844387), List(1.0, 6.196152422706632), List(-2.0, 4.464101615137755), List(-5.0, 6.196152422706632)), List(List(1.0, 6.196152422706632), List(1.0, 9.660254037844387), List(4.0, 11.392304845413264), List(7.0, 9.660254037844387), List(7.0, 6.196152422706632), List(4.0, 4.464101615137755), List(1.0, 6.196152422706632)), List(List(7.0, 6.196152422706632), List(7.0, 9.660254037844387), List(10.0, 11.392304845413264), List(13.0, 9.660254037844387), List(13.0, 6.196152422706632), List(10.0, 4.464101615137755), List(7.0, 6.196152422706632)), List(List(-2.0, 11.392304845413264), List(-2.0, 14.85640646055102), List(1.0, 16.588457268119896), List(4.0, 14.85640646055102), List(4.0, 11.392304845413264), List(1.0, 9.660254037844387), List(-2.0, 11.392304845413264)), List(List(4.0, 11.392304845413264), List(4.0, 14.85640646055102), List(7.0, 16.588457268119896), List(10.0, 14.85640646055102), List(10.0, 11.392304845413264), List(7.0, 9.660254037844387), List(4.0, 11.392304845413264)))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var arg11 : Int = 4\n    var arg12 : Int = 7\n    var arg13 : Int = 9\n    var arg14 : Int = 8\n    var x1 : List[List[List[Double]]] = calculatePolygons(arg10, arg11, arg12, arg13, arg14)\n    var v1 : List[List[List[Double]]] = List(List(List(-11.0, -9.856406460551018), List(-11.0, -0.6188021535170058), List(-3.0, 4.0), List(5.0, -0.6188021535170058), List(5.0, -9.856406460551018), List(-3.0, -14.475208614068023), List(-11.0, -9.856406460551018)), List(List(5.0, -9.856406460551018), List(5.0, -0.6188021535170058), List(13.0, 4.0), List(21.0, -0.6188021535170058), List(21.0, -9.856406460551018), List(13.0, -14.475208614068023), List(5.0, -9.856406460551018)), List(List(21.0, -9.856406460551018), List(21.0, -0.6188021535170058), List(29.0, 4.0), List(37.0, -0.6188021535170058), List(37.0, -9.856406460551018), List(29.0, -14.475208614068023), List(21.0, -9.856406460551018)), List(List(-3.0, 4.0), List(-3.0, 13.237604307034012), List(5.0, 17.856406460551018), List(13.0, 13.237604307034012), List(13.0, 4.0), List(5.0, -0.6188021535170058), List(-3.0, 4.0)), List(List(13.0, 4.0), List(13.0, 13.237604307034012), List(21.0, 17.856406460551018), List(29.0, 13.237604307034012), List(29.0, 4.0), List(21.0, -0.6188021535170058), List(13.0, 4.0)), List(List(-11.0, 17.856406460551018), List(-11.0, 27.09401076758503), List(-3.0, 31.712812921102035), List(5.0, 27.09401076758503), List(5.0, 17.856406460551018), List(-3.0, 13.237604307034012), List(-11.0, 17.856406460551018)), List(List(5.0, 17.856406460551018), List(5.0, 27.09401076758503), List(13.0, 31.712812921102035), List(21.0, 27.09401076758503), List(21.0, 17.856406460551018), List(13.0, 13.237604307034012), List(5.0, 17.856406460551018)), List(List(21.0, 17.856406460551018), List(21.0, 27.09401076758503), List(29.0, 31.712812921102035), List(37.0, 27.09401076758503), List(37.0, 17.856406460551018), List(29.0, 13.237604307034012), List(21.0, 17.856406460551018)), List(List(-3.0, 31.712812921102035), List(-3.0, 40.95041722813605), List(5.0, 45.569219381653056), List(13.0, 40.95041722813605), List(13.0, 31.712812921102035), List(5.0, 27.09401076758503), List(-3.0, 31.712812921102035)), List(List(13.0, 31.712812921102035), List(13.0, 40.95041722813605), List(21.0, 45.569219381653056), List(29.0, 40.95041722813605), List(29.0, 31.712812921102035), List(21.0, 27.09401076758503), List(13.0, 31.712812921102035)))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 9\n    var arg21 : Int = 6\n    var arg22 : Int = 4\n    var arg23 : Int = 3\n    var arg24 : Int = 2\n    var x2 : List[List[List[Double]]] = calculatePolygons(arg20, arg21, arg22, arg23, arg24)\n    var v2 : List[List[List[Double]]] = List(List(List(5.0, 2.5358983848622456), List(5.0, 4.8452994616207485), List(7.0, 6.0), List(9.0, 4.8452994616207485), List(9.0, 2.5358983848622456), List(7.0, 1.3811978464829942), List(5.0, 2.5358983848622456)), List(List(7.0, 6.0), List(7.0, 8.309401076758503), List(9.0, 9.464101615137753), List(11.0, 8.309401076758503), List(11.0, 6.0), List(9.0, 4.8452994616207485), List(7.0, 6.0)))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/494", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert the given binary tuple to integer.\n     *\n     * >>> binaryToInteger(List(1, 1, 0, 1, 0, 0, 1))\n     * \"105\"\n     * >>> binaryToInteger(List(0, 1, 1, 0, 0, 1, 0, 1))\n     * \"101\"\n     * >>> binaryToInteger(List(1, 1, 0, 1, 0, 1))\n     * \"53\"\n     */\n    def binaryToInteger(testTup : List[Int]) : String = {\n", "entry_point": "binaryToInteger", "test": "\n\n    var arg00 : List[Int] = List(1, 1, 0, 1, 0, 0, 1)\n    var x0 : String = binaryToInteger(arg00)\n    var v0 : String = \"\"\"105\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(0, 1, 1, 0, 0, 1, 0, 1)\n    var x1 : String = binaryToInteger(arg10)\n    var v1 : String = \"\"\"101\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 1, 0, 1, 0, 1)\n    var x2 : String = binaryToInteger(arg20)\n    var v2 : String = \"\"\"53\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert the given binary tuple to integer.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/495", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove lowercase substrings from a given string by using regex.\n     *\n     * >>> removeLowercase(\"KDeoALOklOOHserfLoAJSIskdsf\")\n     * \"KDALOOOHLAJSI\"\n     * >>> removeLowercase(\"ProducTnamEstreAmIngMediAplAYer\")\n     * \"PTEAIMAAY\"\n     * >>> removeLowercase(\"maNufacTuredbYSheZenTechNolOGIes\")\n     * \"NTYSZTNOGI\"\n     */\n    def removeLowercase(str1 : String) : String = {\n", "entry_point": "removeLowercase", "test": "\n\n    var arg00 : String = \"\"\"KDeoALOklOOHserfLoAJSIskdsf\"\"\"\n    var x0 : String = removeLowercase(arg00)\n    var v0 : String = \"\"\"KDALOOOHLAJSI\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"ProducTnamEstreAmIngMediAplAYer\"\"\"\n    var x1 : String = removeLowercase(arg10)\n    var v1 : String = \"\"\"PTEAIMAAY\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"maNufacTuredbYSheZenTechNolOGIes\"\"\"\n    var x2 : String = removeLowercase(arg20)\n    var v2 : String = \"\"\"NTYSZTNOGI\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove lowercase substrings from a given string by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/496", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n     *\n     * >>> heapQueueSmallest(List(25, 35, 22, 85, 14, 65, 75, 25, 58), 3)\n     * List(14, 22, 25)\n     * >>> heapQueueSmallest(List(25, 35, 22, 85, 14, 65, 75, 25, 58), 2)\n     * List(14, 22)\n     * >>> heapQueueSmallest(List(25, 35, 22, 85, 14, 65, 75, 22, 58), 5)\n     * List(14, 22, 22, 25, 35)\n     */\n    def heapQueueSmallest(nums : List[Int], n : Int) : List[Int] = {\n", "entry_point": "heapQueueSmallest", "test": "\n\n    var arg00 : List[Int] = List(25, 35, 22, 85, 14, 65, 75, 25, 58)\n    var arg01 : Int = 3\n    var x0 : List[Int] = heapQueueSmallest(arg00, arg01)\n    var v0 : List[Int] = List(14, 22, 25)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(25, 35, 22, 85, 14, 65, 75, 25, 58)\n    var arg11 : Int = 2\n    var x1 : List[Int] = heapQueueSmallest(arg10, arg11)\n    var v1 : List[Int] = List(14, 22)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(25, 35, 22, 85, 14, 65, 75, 22, 58)\n    var arg21 : Int = 5\n    var x2 : List[Int] = heapQueueSmallest(arg20, arg21)\n    var v2 : List[Int] = List(14, 22, 22, 25, 35)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/497", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the surface area of a cone.\n     *\n     * >>> surfaceareaCone(5, 12)\n     * 282.7433388230814\n     * >>> surfaceareaCone(10, 15)\n     * 880.5179353159282\n     * >>> surfaceareaCone(19, 17)\n     * 2655.923961165254\n     */\n    def surfaceareaCone(r : Int, h : Int) : Double = {\n", "entry_point": "surfaceareaCone", "test": "\n\n    var arg00 : Int = 5\n    var arg01 : Int = 12\n    var x0 : Double = surfaceareaCone(arg00, arg01)\n    var v0 : Double = 282.7433388230814\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var arg11 : Int = 15\n    var x1 : Double = surfaceareaCone(arg10, arg11)\n    var v1 : Double = 880.5179353159282\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 19\n    var arg21 : Int = 17\n    var x2 : Double = surfaceareaCone(arg20, arg21)\n    var v2 : Double = 2655.923961165254\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the surface area of a cone.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/498", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find gcd of two positive integers.\n     *\n     * >>> gcd(12, 17)\n     * 1\n     * >>> gcd(4, 6)\n     * 2\n     * >>> gcd(2, 9)\n     * 1\n     */\n    def gcd(x : Int, y : Int) : Int = {\n", "entry_point": "gcd", "test": "\n\n    var arg00 : Int = 12\n    var arg01 : Int = 17\n    var x0 : Int = gcd(arg00, arg01)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var arg11 : Int = 6\n    var x1 : Int = gcd(arg10, arg11)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var arg21 : Int = 9\n    var x2 : Int = gcd(arg20, arg21)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find gcd of two positive integers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/499", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the diameter of a circle.\n     *\n     * >>> diameterCircle(10)\n     * 20\n     * >>> diameterCircle(40)\n     * 80\n     * >>> diameterCircle(15)\n     * 30\n     */\n    def diameterCircle(r : Int) : Int = {\n", "entry_point": "diameterCircle", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = diameterCircle(arg00)\n    var v0 : Int = 20\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 40\n    var x1 : Int = diameterCircle(arg10)\n    var v1 : Int = 80\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 15\n    var x2 : Int = diameterCircle(arg20)\n    var v2 : Int = 30\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the diameter of a circle.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/500", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to concatenate all elements of the given list into a string.\n     *\n     * >>> concatenateElements(List(\"hello\", \"there\", \"have\", \"a\", \"rocky\", \"day\"))\n     * \"  hello there have a rocky day\"\n     * >>> concatenateElements(List(\"Hi\", \"there\", \"How\", \"are\", \"you\"))\n     * \"  Hi there How are you\"\n     * >>> concatenateElements(List(\"Part\", \"of\", \"the\", \"journey\", \"is\", \"end\"))\n     * \"  Part of the journey is end\"\n     */\n    def concatenateElements(list : List[String]) : String = {\n", "entry_point": "concatenateElements", "test": "\n\n    var arg00 : List[String] = List(\"\"\"hello\"\"\", \"\"\"there\"\"\", \"\"\"have\"\"\", \"\"\"a\"\"\", \"\"\"rocky\"\"\", \"\"\"day\"\"\")\n    var x0 : String = concatenateElements(arg00)\n    var v0 : String = \"\"\"  hello there have a rocky day\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"Hi\"\"\", \"\"\"there\"\"\", \"\"\"How\"\"\", \"\"\"are\"\"\", \"\"\"you\"\"\")\n    var x1 : String = concatenateElements(arg10)\n    var v1 : String = \"\"\"  Hi there How are you\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"Part\"\"\", \"\"\"of\"\"\", \"\"\"the\"\"\", \"\"\"journey\"\"\", \"\"\"is\"\"\", \"\"\"end\"\"\")\n    var x2 : String = concatenateElements(arg20)\n    var v2 : String = \"\"\"  Part of the journey is end\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to concatenate all elements of the given list into a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/501", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find common divisor between two numbers in a given pair.\n     *\n     * >>> numCommDiv(2, 4)\n     * 2\n     * >>> numCommDiv(2, 8)\n     * 2\n     * >>> numCommDiv(12, 24)\n     * 6\n     */\n    def numCommDiv(x : Int, y : Int) : Int = {\n", "entry_point": "numCommDiv", "test": "\n\n    var arg00 : Int = 2\n    var arg01 : Int = 4\n    var x0 : Int = numCommDiv(arg00, arg01)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var arg11 : Int = 8\n    var x1 : Int = numCommDiv(arg10, arg11)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 12\n    var arg21 : Int = 24\n    var x2 : Int = numCommDiv(arg20, arg21)\n    var v2 : Int = 6\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find common divisor between two numbers in a given pair.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/502", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find remainder of two numbers.\n     *\n     * >>> find(3, 3)\n     * 0\n     * >>> find(10, 3)\n     * 1\n     * >>> find(16, 5)\n     * 1\n     */\n    def find(n : Int, m : Int) : Int = {\n", "entry_point": "find", "test": "\n\n    var arg00 : Int = 3\n    var arg01 : Int = 3\n    var x0 : Int = find(arg00, arg01)\n    var v0 : Int = 0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var arg11 : Int = 3\n    var x1 : Int = find(arg10, arg11)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 16\n    var arg21 : Int = 5\n    var x2 : Int = find(arg20, arg21)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find remainder of two numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/503", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to add consecutive numbers of a given list.\n     *\n     * >>> addConsecutiveNums(List(1, 1, 3, 4, 4, 5, 6, 7))\n     * List(2, 4, 7, 8, 9, 11, 13)\n     * >>> addConsecutiveNums(List(4, 5, 8, 9, 6, 10))\n     * List(9, 13, 17, 15, 16)\n     * >>> addConsecutiveNums(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n     * List(3, 5, 7, 9, 11, 13, 15, 17, 19)\n     */\n    def addConsecutiveNums(nums : List[Int]) : List[Int] = {\n", "entry_point": "addConsecutiveNums", "test": "\n\n    var arg00 : List[Int] = List(1, 1, 3, 4, 4, 5, 6, 7)\n    var x0 : List[Int] = addConsecutiveNums(arg00)\n    var v0 : List[Int] = List(2, 4, 7, 8, 9, 11, 13)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 5, 8, 9, 6, 10)\n    var x1 : List[Int] = addConsecutiveNums(arg10)\n    var v1 : List[Int] = List(9, 13, 17, 15, 16)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var x2 : List[Int] = addConsecutiveNums(arg20)\n    var v2 : List[Int] = List(3, 5, 7, 9, 11, 13, 15, 17, 19)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to add consecutive numbers of a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/504", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the cube sum of first n natural numbers.\n     *\n     * >>> sumOfSeries(5)\n     * 225\n     * >>> sumOfSeries(2)\n     * 9\n     * >>> sumOfSeries(3)\n     * 36\n     */\n    def sumOfSeries(n : Int) : Int = {\n", "entry_point": "sumOfSeries", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Int = sumOfSeries(arg00)\n    var v0 : Int = 225\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var x1 : Int = sumOfSeries(arg10)\n    var v1 : Int = 9\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 3\n    var x2 : Int = sumOfSeries(arg20)\n    var v2 : Int = 36\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the cube sum of first n natural numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/505", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to move all zeroes to the end of the given array.\n     *\n     * >>> reOrder(List(6, 0, 8, 2, 3, 0, 4, 0, 1))\n     * List(6, 8, 2, 3, 4, 1, 0, 0, 0)\n     * >>> reOrder(List(4, 0, 2, 7, 0, 9, 0, 12, 0))\n     * List(4, 2, 7, 9, 12, 0, 0, 0, 0)\n     * >>> reOrder(List(3, 11, 0, 74, 14, 0, 1, 0, 2))\n     * List(3, 11, 74, 14, 1, 2, 0, 0, 0)\n     */\n    def reOrder(a : List[Int]) : List[Int] = {\n", "entry_point": "reOrder", "test": "\n\n    var arg00 : List[Int] = List(6, 0, 8, 2, 3, 0, 4, 0, 1)\n    var x0 : List[Int] = reOrder(arg00)\n    var v0 : List[Int] = List(6, 8, 2, 3, 4, 1, 0, 0, 0)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 0, 2, 7, 0, 9, 0, 12, 0)\n    var x1 : List[Int] = reOrder(arg10)\n    var v1 : List[Int] = List(4, 2, 7, 9, 12, 0, 0, 0, 0)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3, 11, 0, 74, 14, 0, 1, 0, 2)\n    var x2 : List[Int] = reOrder(arg20)\n    var v2 : List[Int] = List(3, 11, 74, 14, 1, 2, 0, 0, 0)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to move all zeroes to the end of the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/506", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate the permutation coefficient of given p(n, k).\n     *\n     * >>> permutationCoefficient(10, 2)\n     * 90\n     * >>> permutationCoefficient(10, 3)\n     * 720\n     * >>> permutationCoefficient(10, 1)\n     * 10\n     */\n    def permutationCoefficient(n : Int, k : Int) : Int = {\n", "entry_point": "permutationCoefficient", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 2\n    var x0 : Int = permutationCoefficient(arg00, arg01)\n    var v0 : Int = 90\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var arg11 : Int = 3\n    var x1 : Int = permutationCoefficient(arg10, arg11)\n    var v1 : Int = 720\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 10\n    var arg21 : Int = 1\n    var x2 : Int = permutationCoefficient(arg20, arg21)\n    var v2 : Int = 10\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate the permutation coefficient of given p(n, k).", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/507", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove specific words from a given list.\n     *\n     * >>> removeWords(List(\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"), List(\"white\", \"orange\"))\n     * List(\"red\", \"green\", \"blue\", \"black\")\n     * >>> removeWords(List(\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"), List(\"black\", \"orange\"))\n     * List(\"red\", \"green\", \"blue\", \"white\")\n     * >>> removeWords(List(\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"), List(\"blue\", \"white\"))\n     * List(\"red\", \"green\", \"black\", \"orange\")\n     */\n    def removeWords(list1 : List[String], removewords : List[String]) : List[String] = {\n", "entry_point": "removeWords", "test": "\n\n    var arg00 : List[String] = List(\"\"\"red\"\"\", \"\"\"green\"\"\", \"\"\"blue\"\"\", \"\"\"white\"\"\", \"\"\"black\"\"\", \"\"\"orange\"\"\")\n    var arg01 : List[String] = List(\"\"\"white\"\"\", \"\"\"orange\"\"\")\n    var x0 : List[String] = removeWords(arg00, arg01)\n    var v0 : List[String] = List(\"\"\"red\"\"\", \"\"\"green\"\"\", \"\"\"blue\"\"\", \"\"\"black\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"red\"\"\", \"\"\"green\"\"\", \"\"\"blue\"\"\", \"\"\"white\"\"\", \"\"\"black\"\"\", \"\"\"orange\"\"\")\n    var arg11 : List[String] = List(\"\"\"black\"\"\", \"\"\"orange\"\"\")\n    var x1 : List[String] = removeWords(arg10, arg11)\n    var v1 : List[String] = List(\"\"\"red\"\"\", \"\"\"green\"\"\", \"\"\"blue\"\"\", \"\"\"white\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"red\"\"\", \"\"\"green\"\"\", \"\"\"blue\"\"\", \"\"\"white\"\"\", \"\"\"black\"\"\", \"\"\"orange\"\"\")\n    var arg21 : List[String] = List(\"\"\"blue\"\"\", \"\"\"white\"\"\")\n    var x2 : List[String] = removeWords(arg20, arg21)\n    var v2 : List[String] = List(\"\"\"red\"\"\", \"\"\"green\"\"\", \"\"\"black\"\"\", \"\"\"orange\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove specific words from a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/508", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if the common elements between two given lists are in the same order or not.\n     *\n     * >>> sameOrder(List(\"red\", \"green\", \"black\", \"orange\"), List(\"red\", \"pink\", \"green\", \"white\", \"black\"))\n     * true\n     * >>> sameOrder(List(\"red\", \"pink\", \"green\", \"white\", \"black\"), List(\"white\", \"orange\", \"pink\", \"black\"))\n     * false\n     * >>> sameOrder(List(\"red\", \"green\", \"black\", \"orange\"), List(\"red\", \"pink\", \"green\", \"white\", \"black\"))\n     * true\n     */\n    def sameOrder(l1 : List[String], l2 : List[String]) : Boolean = {\n", "entry_point": "sameOrder", "test": "\n\n    var arg00 : List[String] = List(\"\"\"red\"\"\", \"\"\"green\"\"\", \"\"\"black\"\"\", \"\"\"orange\"\"\")\n    var arg01 : List[String] = List(\"\"\"red\"\"\", \"\"\"pink\"\"\", \"\"\"green\"\"\", \"\"\"white\"\"\", \"\"\"black\"\"\")\n    var x0 : Boolean = sameOrder(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"red\"\"\", \"\"\"pink\"\"\", \"\"\"green\"\"\", \"\"\"white\"\"\", \"\"\"black\"\"\")\n    var arg11 : List[String] = List(\"\"\"white\"\"\", \"\"\"orange\"\"\", \"\"\"pink\"\"\", \"\"\"black\"\"\")\n    var x1 : Boolean = sameOrder(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"red\"\"\", \"\"\"green\"\"\", \"\"\"black\"\"\", \"\"\"orange\"\"\")\n    var arg21 : List[String] = List(\"\"\"red\"\"\", \"\"\"pink\"\"\", \"\"\"green\"\"\", \"\"\"white\"\"\", \"\"\"black\"\"\")\n    var x2 : Boolean = sameOrder(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if the common elements between two given lists are in the same order or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/509", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the average of odd numbers till a given odd number.\n     *\n     * >>> averageOdd(9)\n     * 5\n     * >>> averageOdd(5)\n     * 3\n     * >>> averageOdd(11)\n     * 6\n     */\n    def averageOdd(n : Int) : Int = {\n", "entry_point": "averageOdd", "test": "\n\n    var arg00 : Int = 9\n    var x0 : Int = averageOdd(arg00)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var x1 : Int = averageOdd(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 11\n    var x2 : Int = averageOdd(arg20)\n    var v2 : Int = 6\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the average of odd numbers till a given odd number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/510", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n     *\n     * >>> noOfSubsequences(List(1, 2, 3, 4), 10)\n     * 11\n     * >>> noOfSubsequences(List(4, 8, 7, 2), 50)\n     * 9\n     * >>> noOfSubsequences(List(5, 6, 7, 8), 15)\n     * 4\n     */\n    def noOfSubsequences(arr : List[Int], k : Int) : Int = {\n", "entry_point": "noOfSubsequences", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4)\n    var arg01 : Int = 10\n    var x0 : Int = noOfSubsequences(arg00, arg01)\n    var v0 : Int = 11\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 8, 7, 2)\n    var arg11 : Int = 50\n    var x1 : Int = noOfSubsequences(arg10, arg11)\n    var v1 : Int = 9\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(5, 6, 7, 8)\n    var arg21 : Int = 15\n    var x2 : Int = noOfSubsequences(arg20, arg21)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/511", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find minimum sum of factors of a given number.\n     *\n     * >>> findMinSum(12)\n     * 7\n     * >>> findMinSum(105)\n     * 15\n     * >>> findMinSum(2)\n     * 2\n     */\n    def findMinSum(num : Int) : Int = {\n", "entry_point": "findMinSum", "test": "\n\n    var arg00 : Int = 12\n    var x0 : Int = findMinSum(arg00)\n    var v0 : Int = 7\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 105\n    var x1 : Int = findMinSum(arg10)\n    var v1 : Int = 15\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var x2 : Int = findMinSum(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find minimum sum of factors of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/512", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count the element frequency in the mixed nested tuple.\n     *\n     * >>> countElementFreq(List(5, 6, List(5, 6), 7, List(8, 9), 9))\n     * Map(5->2, 6->2, 7->1, 8->1, 9->2)\n     * >>> countElementFreq(List(6, 7, List(6, 7), 8, List(9, 10), 10))\n     * Map(6->2, 7->2, 8->1, 9->1, 10->2)\n     * >>> countElementFreq(List(7, 8, List(7, 8), 9, List(10, 11), 11))\n     * Map(7->2, 8->2, 9->1, 10->1, 11->2)\n     */\n    def countElementFreq(testTuple : List[Any]) : Map[Int, Int] = {\n", "entry_point": "countElementFreq", "test": "\n\n    var arg00 : List[Any] = List(5, 6, List(5, 6), 7, List(8, 9), 9)\n    var x0 : Map[Int, Int] = countElementFreq(arg00)\n    var v0 : Map[Int, Int] = Map(5 -> 2, 6 -> 2, 7 -> 1, 8 -> 1, 9 -> 2)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(6, 7, List(6, 7), 8, List(9, 10), 10)\n    var x1 : Map[Int, Int] = countElementFreq(arg10)\n    var v1 : Map[Int, Int] = Map(6 -> 2, 7 -> 2, 8 -> 1, 9 -> 1, 10 -> 2)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(7, 8, List(7, 8), 9, List(10, 11), 11)\n    var x2 : Map[Int, Int] = countElementFreq(arg20)\n    var v2 : Map[Int, Int] = Map(7 -> 2, 8 -> 2, 9 -> 1, 10 -> 1, 11 -> 2)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count the element frequency in the mixed nested tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/513", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert tuple into list by adding the given string after every element.\n     *\n     * >>> addStr(List(5, 6, 7, 4, 9), \"FDF\")\n     * List(5, \"FDF\", 6, \"FDF\", 7, \"FDF\", 4, \"FDF\", 9, \"FDF\")\n     * >>> addStr(List(7, 8, 9, 10), \"PF\")\n     * List(7, \"PF\", 8, \"PF\", 9, \"PF\", 10, \"PF\")\n     * >>> addStr(List(11, 14, 12, 1, 4), \"JH\")\n     * List(11, \"JH\", 14, \"JH\", 12, \"JH\", 1, \"JH\", 4, \"JH\")\n     */\n    def addStr(testTup : List[Int], k : String) : List[Any] = {\n", "entry_point": "addStr", "test": "\n\n    var arg00 : List[Int] = List(5, 6, 7, 4, 9)\n    var arg01 : String = \"\"\"FDF\"\"\"\n    var x0 : List[Any] = addStr(arg00, arg01)\n    var v0 : List[Any] = List(5, \"\"\"FDF\"\"\", 6, \"\"\"FDF\"\"\", 7, \"\"\"FDF\"\"\", 4, \"\"\"FDF\"\"\", 9, \"\"\"FDF\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(7, 8, 9, 10)\n    var arg11 : String = \"\"\"PF\"\"\"\n    var x1 : List[Any] = addStr(arg10, arg11)\n    var v1 : List[Any] = List(7, \"\"\"PF\"\"\", 8, \"\"\"PF\"\"\", 9, \"\"\"PF\"\"\", 10, \"\"\"PF\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(11, 14, 12, 1, 4)\n    var arg21 : String = \"\"\"JH\"\"\"\n    var x2 : List[Any] = addStr(arg20, arg21)\n    var v2 : List[Any] = List(11, \"\"\"JH\"\"\", 14, \"\"\"JH\"\"\", 12, \"\"\"JH\"\"\", 1, \"\"\"JH\"\"\", 4, \"\"\"JH\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert tuple into list by adding the given string after every element.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/514", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the summation of tuple elements in the given tuple list.\n     *\n     * >>> sumElements(List(7, 8, 9, 1, 10, 7))\n     * 42\n     * >>> sumElements(List(1, 2, 3, 4, 5, 6))\n     * 21\n     * >>> sumElements(List(11, 12, 13, 45, 14))\n     * 95\n     */\n    def sumElements(testTup : List[Int]) : Int = {\n", "entry_point": "sumElements", "test": "\n\n    var arg00 : List[Int] = List(7, 8, 9, 1, 10, 7)\n    var x0 : Int = sumElements(arg00)\n    var v0 : Int = 42\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5, 6)\n    var x1 : Int = sumElements(arg10)\n    var v1 : Int = 21\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(11, 12, 13, 45, 14)\n    var x2 : Int = sumElements(arg20)\n    var v2 : Int = 95\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the summation of tuple elements in the given tuple list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/515", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if there is a subset with sum divisible by m.\n     *\n     * >>> modularSum(List(3, 1, 7, 5), 4, 6)\n     * true\n     * >>> modularSum(List(1, 7), 2, 5)\n     * false\n     * >>> modularSum(List(1, 6), 2, 5)\n     * false\n     */\n    def modularSum(arr : List[Int], n : Int, m : Int) : Boolean = {\n", "entry_point": "modularSum", "test": "\n\n    var arg00 : List[Int] = List(3, 1, 7, 5)\n    var arg01 : Int = 4\n    var arg02 : Int = 6\n    var x0 : Boolean = modularSum(arg00, arg01, arg02)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 7)\n    var arg11 : Int = 2\n    var arg12 : Int = 5\n    var x1 : Boolean = modularSum(arg10, arg11, arg12)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 6)\n    var arg21 : Int = 2\n    var arg22 : Int = 5\n    var x2 : Boolean = modularSum(arg20, arg21, arg22)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if there is a subset with sum divisible by m.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/516", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort a list of elements using radix sort.\n     *\n     * >>> radixSort(List(15, 79, 25, 68, 37))\n     * List(15, 25, 37, 68, 79)\n     * >>> radixSort(List(9, 11, 8, 7, 3, 2))\n     * List(2, 3, 7, 8, 9, 11)\n     * >>> radixSort(List(36, 12, 24, 26, 29))\n     * List(12, 24, 26, 29, 36)\n     */\n    def radixSort(nums : List[Int]) : List[Int] = {\n", "entry_point": "radixSort", "test": "\n\n    var arg00 : List[Int] = List(15, 79, 25, 68, 37)\n    var x0 : List[Int] = radixSort(arg00)\n    var v0 : List[Int] = List(15, 25, 37, 68, 79)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(9, 11, 8, 7, 3, 2)\n    var x1 : List[Int] = radixSort(arg10)\n    var v1 : List[Int] = List(2, 3, 7, 8, 9, 11)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(36, 12, 24, 26, 29)\n    var x2 : List[Int] = radixSort(arg20)\n    var v2 : List[Int] = List(12, 24, 26, 29, 36)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort a list of elements using radix sort.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/517", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the largest postive number from the given list.\n     *\n     * >>> largestPos(List(1, 2, 3, 4, -1))\n     * 4\n     * >>> largestPos(List(0, 1, 2, -5, -1, 6))\n     * 6\n     * >>> largestPos(List(0, 0, 1, 0))\n     * 1\n     */\n    def largestPos(list1 : List[Int]) : Int = {\n", "entry_point": "largestPos", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, -1)\n    var x0 : Int = largestPos(arg00)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(0, 1, 2, -5, -1, 6)\n    var x1 : Int = largestPos(arg10)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(0, 0, 1, 0)\n    var x2 : Int = largestPos(arg20)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the largest postive number from the given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/518", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the square root of a perfect number.\n     *\n     * >>> sqrtRoot(4)\n     * 2\n     * >>> sqrtRoot(16)\n     * 4\n     * >>> sqrtRoot(400)\n     * 20\n     */\n    def sqrtRoot(num : Int) : Int = {\n", "entry_point": "sqrtRoot", "test": "\n\n    var arg00 : Int = 4\n    var x0 : Int = sqrtRoot(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 16\n    var x1 : Int = sqrtRoot(arg10)\n    var v1 : Int = 4\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 400\n    var x2 : Int = sqrtRoot(arg20)\n    var v2 : Int = 20\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the square root of a perfect number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/519", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate volume of a tetrahedron.\n     *\n     * >>> volumeTetrahedron(10)\n     * 117.85\n     * >>> volumeTetrahedron(15)\n     * 397.75\n     * >>> volumeTetrahedron(20)\n     * 942.81\n     */\n    def volumeTetrahedron(num : Int) : Double = {\n", "entry_point": "volumeTetrahedron", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Double = volumeTetrahedron(arg00)\n    var v0 : Double = 117.85\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 15\n    var x1 : Double = volumeTetrahedron(arg10)\n    var v1 : Double = 397.75\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 20\n    var x2 : Double = volumeTetrahedron(arg20)\n    var v2 : Double = 942.81\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate volume of a tetrahedron.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/520", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the lcm of the given array elements.\n     *\n     * >>> getLcm(List(2, 7, 3, 9, 4))\n     * 252\n     * >>> getLcm(List(1, 2, 8, 3))\n     * 24\n     * >>> getLcm(List(3, 8, 4, 10, 5))\n     * 120\n     */\n    def getLcm(l : List[Int]) : Int = {\n", "entry_point": "getLcm", "test": "\n\n    var arg00 : List[Int] = List(2, 7, 3, 9, 4)\n    var x0 : Int = getLcm(arg00)\n    var v0 : Int = 252\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 8, 3)\n    var x1 : Int = getLcm(arg10)\n    var v1 : Int = 24\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3, 8, 4, 10, 5)\n    var x2 : Int = getLcm(arg20)\n    var v2 : Int = 120\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the lcm of the given array elements.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/521", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to print check if the triangle is scalene or not.\n     *\n     * >>> checkIsosceles(6, 8, 12)\n     * true\n     * >>> checkIsosceles(6, 6, 12)\n     * false\n     * >>> checkIsosceles(6, 15, 20)\n     * true\n     */\n    def checkIsosceles(x : Int, y : Int, z : Int) : Boolean = {\n", "entry_point": "checkIsosceles", "test": "\n\n    var arg00 : Int = 6\n    var arg01 : Int = 8\n    var arg02 : Int = 12\n    var x0 : Boolean = checkIsosceles(arg00, arg01, arg02)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 6\n    var arg11 : Int = 6\n    var arg12 : Int = 12\n    var x1 : Boolean = checkIsosceles(arg10, arg11, arg12)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 6\n    var arg21 : Int = 15\n    var arg22 : Int = 20\n    var x2 : Boolean = checkIsosceles(arg20, arg21, arg22)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to print check if the triangle is scalene or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/522", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the longest bitonic subsequence for the given array.\n     *\n     * >>> lbs(List(0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15))\n     * 7\n     * >>> lbs(List(1, 11, 2, 10, 4, 5, 2, 1))\n     * 6\n     * >>> lbs(List(80, 60, 30, 40, 20, 10))\n     * 5\n     */\n    def lbs(arr : List[Int]) : Int = {\n", "entry_point": "lbs", "test": "\n\n    var arg00 : List[Int] = List(0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15)\n    var x0 : Int = lbs(arg00)\n    var v0 : Int = 7\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 11, 2, 10, 4, 5, 2, 1)\n    var x1 : Int = lbs(arg10)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(80, 60, 30, 40, 20, 10)\n    var x2 : Int = lbs(arg20)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the longest bitonic subsequence for the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/523", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n     *\n     * >>> checkString(\"python\")\n     * List(\"String must have 1 upper case character.\", \"String must have 1 number.\", \"String length should be atleast 8.\")\n     * >>> checkString(\"123python\")\n     * List(\"String must have 1 upper case character.\")\n     * >>> checkString(\"123Python\")\n     * List(\"Valid string.\")\n     */\n    def checkString(str1 : String) : List[String] = {\n", "entry_point": "checkString", "test": "\n\n    var arg00 : String = \"\"\"python\"\"\"\n    var x0 : List[String] = checkString(arg00)\n    var v0 : List[String] = List(\"\"\"String must have 1 upper case character.\"\"\", \"\"\"String must have 1 number.\"\"\", \"\"\"String length should be atleast 8.\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"123python\"\"\"\n    var x1 : List[String] = checkString(arg10)\n    var v1 : List[String] = List(\"\"\"String must have 1 upper case character.\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"123Python\"\"\"\n    var x2 : List[String] = checkString(arg20)\n    var v2 : List[String] = List(\"\"\"Valid string.\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/524", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the sum of maximum increasing subsequence of the given array.\n     *\n     * >>> maxSumIncreasingSubsequence(List(1, 101, 2, 3, 100, 4, 5), 7)\n     * 106\n     * >>> maxSumIncreasingSubsequence(List(3, 4, 5, 10), 4)\n     * 22\n     * >>> maxSumIncreasingSubsequence(List(10, 5, 4, 3), 4)\n     * 10\n     */\n    def maxSumIncreasingSubsequence(arr : List[Int], n : Int) : Int = {\n", "entry_point": "maxSumIncreasingSubsequence", "test": "\n\n    var arg00 : List[Int] = List(1, 101, 2, 3, 100, 4, 5)\n    var arg01 : Int = 7\n    var x0 : Int = maxSumIncreasingSubsequence(arg00, arg01)\n    var v0 : Int = 106\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(3, 4, 5, 10)\n    var arg11 : Int = 4\n    var x1 : Int = maxSumIncreasingSubsequence(arg10, arg11)\n    var v1 : Int = 22\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(10, 5, 4, 3)\n    var arg21 : Int = 4\n    var x2 : Int = maxSumIncreasingSubsequence(arg20, arg21)\n    var v2 : Int = 10\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the sum of maximum increasing subsequence of the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/525", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether two given lines are parallel or not.\n     *\n     * >>> parallelLines(List(2, 3, 4), List(2, 3, 8))\n     * true\n     * >>> parallelLines(List(2, 3, 4), List(4, -3, 8))\n     * false\n     * >>> parallelLines(List(3, 3), List(5, 5))\n     * true\n     */\n    def parallelLines(line1 : List[Int], line2 : List[Int]) : Boolean = {\n", "entry_point": "parallelLines", "test": "\n\n    var arg00 : List[Int] = List(2, 3, 4)\n    var arg01 : List[Int] = List(2, 3, 8)\n    var x0 : Boolean = parallelLines(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 3, 4)\n    var arg11 : List[Int] = List(4, -3, 8)\n    var x1 : Boolean = parallelLines(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3, 3)\n    var arg21 : List[Int] = List(5, 5)\n    var x2 : Boolean = parallelLines(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether two given lines are parallel or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/526", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to capitalize first and last letters of each word of a given string.\n     *\n     * >>> capitalizeFirstLastLetters(\"python\")\n     * \"PythoN\"\n     * >>> capitalizeFirstLastLetters(\"bigdata\")\n     * \"BigdatA\"\n     * >>> capitalizeFirstLastLetters(\"Hadoop\")\n     * \"HadooP\"\n     */\n    def capitalizeFirstLastLetters(str1 : String) : String = {\n", "entry_point": "capitalizeFirstLastLetters", "test": "\n\n    var arg00 : String = \"\"\"python\"\"\"\n    var x0 : String = capitalizeFirstLastLetters(arg00)\n    var v0 : String = \"\"\"PythoN\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"bigdata\"\"\"\n    var x1 : String = capitalizeFirstLastLetters(arg10)\n    var v1 : String = \"\"\"BigdatA\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Hadoop\"\"\"\n    var x2 : String = capitalizeFirstLastLetters(arg20)\n    var v2 : String = \"\"\"HadooP\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to capitalize first and last letters of each word of a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/527", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find all pairs in an integer array whose sum is equal to a given number.\n     *\n     * >>> getPairsCount(List(1, 5, 7, -1, 5), 5, 6)\n     * 3\n     * >>> getPairsCount(List(1, 5, 7, -1), 4, 6)\n     * 2\n     * >>> getPairsCount(List(1, 1, 1, 1), 4, 2)\n     * 6\n     */\n    def getPairsCount(arr : List[Int], n : Int, sum : Int) : Int = {\n", "entry_point": "getPairsCount", "test": "\n\n    var arg00 : List[Int] = List(1, 5, 7, -1, 5)\n    var arg01 : Int = 5\n    var arg02 : Int = 6\n    var x0 : Int = getPairsCount(arg00, arg01, arg02)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 5, 7, -1)\n    var arg11 : Int = 4\n    var arg12 : Int = 6\n    var x1 : Int = getPairsCount(arg10, arg11, arg12)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 1, 1, 1)\n    var arg21 : Int = 4\n    var arg22 : Int = 2\n    var x2 : Int = getPairsCount(arg20, arg21, arg22)\n    var v2 : Int = 6\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find all pairs in an integer array whose sum is equal to a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/528", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the list of lists with minimum length.\n     *\n     * >>> minLength(List(List(0), List(1, 3), List(5, 7), List(9, 11), List(13, 15, 17)))\n     * List(1, List(0))\n     * >>> minLength(List(List(1), List(5, 7), List(10, 12, 14, 15)))\n     * List(1, List(1))\n     * >>> minLength(List(List(5), List(15, 20, 25)))\n     * List(1, List(5))\n     */\n    def minLength(list1 : List[List[Int]]) : List[Any] = {\n", "entry_point": "minLength", "test": "\n\n    var arg00 : List[List[Int]] = List(List(0), List(1, 3), List(5, 7), List(9, 11), List(13, 15, 17))\n    var x0 : List[Any] = minLength(arg00)\n    var v0 : List[Any] = List(1, List(0))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1), List(5, 7), List(10, 12, 14, 15))\n    var x1 : List[Any] = minLength(arg10)\n    var v1 : List[Any] = List(1, List(1))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(5), List(15, 20, 25))\n    var x2 : List[Any] = minLength(arg20)\n    var v2 : List[Any] = List(1, List(5))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the list of lists with minimum length.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/529", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the nth jacobsthal-lucas number.\n     *\n     * >>> jacobsthalLucas(5)\n     * 31\n     * >>> jacobsthalLucas(2)\n     * 5\n     * >>> jacobsthalLucas(4)\n     * 17\n     */\n    def jacobsthalLucas(n : Int) : Int = {\n", "entry_point": "jacobsthalLucas", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Int = jacobsthalLucas(arg00)\n    var v0 : Int = 31\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var x1 : Int = jacobsthalLucas(arg10)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var x2 : Int = jacobsthalLucas(arg20)\n    var v2 : Int = 17\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the nth jacobsthal-lucas number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/530", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the ration of negative numbers in an array of integers.\n     *\n     * >>> negativeCount(List(0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8))\n     * 0.31\n     * >>> negativeCount(List(2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8))\n     * 0.31\n     * >>> negativeCount(List(2, 4, -6, -9, 11, -12, 14, -5, 17))\n     * 0.44\n     */\n    def negativeCount(nums : List[Int]) : Double = {\n", "entry_point": "negativeCount", "test": "\n\n    var arg00 : List[Int] = List(0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8)\n    var x0 : Double = negativeCount(arg00)\n    var v0 : Double = 0.31\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8)\n    var x1 : Double = negativeCount(arg10)\n    var v1 : Double = 0.31\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 4, -6, -9, 11, -12, 14, -5, 17)\n    var x2 : Double = negativeCount(arg20)\n    var v2 : Double = 0.44\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the ration of negative numbers in an array of integers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/531", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find minimum number of coins that make a given value.\n     *\n     * >>> minCoins(List(9, 6, 5, 1), 4, 11)\n     * 2\n     * >>> minCoins(List(4, 5, 6, 7, 8, 9), 6, 9)\n     * 1\n     * >>> minCoins(List(1, 2, 3), 3, 4)\n     * 2\n     */\n    def minCoins(coins : List[Int], m : Int, v : Int) : Int = {\n", "entry_point": "minCoins", "test": "\n\n    var arg00 : List[Int] = List(9, 6, 5, 1)\n    var arg01 : Int = 4\n    var arg02 : Int = 11\n    var x0 : Int = minCoins(arg00, arg01, arg02)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 5, 6, 7, 8, 9)\n    var arg11 : Int = 6\n    var arg12 : Int = 9\n    var x1 : Int = minCoins(arg10, arg11, arg12)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3)\n    var arg21 : Int = 3\n    var arg22 : Int = 4\n    var x2 : Int = minCoins(arg20, arg21, arg22)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find minimum number of coins that make a given value.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/532", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if the two given strings are permutations of each other.\n     *\n     * >>> checkPermutation(\"abc\", \"cba\")\n     * true\n     * >>> checkPermutation(\"test\", \"ttew\")\n     * false\n     * >>> checkPermutation(\"xxyz\", \"yxzx\")\n     * true\n     */\n    def checkPermutation(str1 : String, str2 : String) : Boolean = {\n", "entry_point": "checkPermutation", "test": "\n\n    var arg00 : String = \"\"\"abc\"\"\"\n    var arg01 : String = \"\"\"cba\"\"\"\n    var x0 : Boolean = checkPermutation(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"test\"\"\"\n    var arg11 : String = \"\"\"ttew\"\"\"\n    var x1 : Boolean = checkPermutation(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"xxyz\"\"\"\n    var arg21 : String = \"\"\"yxzx\"\"\"\n    var x2 : Boolean = checkPermutation(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if the two given strings are permutations of each other.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/534", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n     *\n     * >>> searchLiteral(\"python\", \"python programming language\")\n     * List(0, 6)\n     * >>> searchLiteral(\"programming\", \"python programming language\")\n     * List(7, 18)\n     * >>> searchLiteral(\"language\", \"python programming language\")\n     * List(19, 27)\n     */\n    def searchLiteral(pattern : String, text : String) : List[Int] = {\n", "entry_point": "searchLiteral", "test": "\n\n    var arg00 : String = \"\"\"python\"\"\"\n    var arg01 : String = \"\"\"python programming language\"\"\"\n    var x0 : List[Int] = searchLiteral(arg00, arg01)\n    var v0 : List[Int] = List(0, 6)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"programming\"\"\"\n    var arg11 : String = \"\"\"python programming language\"\"\"\n    var x1 : List[Int] = searchLiteral(arg10, arg11)\n    var v1 : List[Int] = List(7, 18)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"language\"\"\"\n    var arg21 : String = \"\"\"python programming language\"\"\"\n    var x2 : List[Int] = searchLiteral(arg20, arg21)\n    var v2 : List[Int] = List(19, 27)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/535", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the top or bottom surface area of a cylinder.\n     *\n     * >>> topbottomSurfacearea(10)\n     * 314.15000000000003\n     * >>> topbottomSurfacearea(5)\n     * 78.53750000000001\n     * >>> topbottomSurfacearea(4)\n     * 50.264\n     */\n    def topbottomSurfacearea(r : Int) : Double = {\n", "entry_point": "topbottomSurfacearea", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Double = topbottomSurfacearea(arg00)\n    var v0 : Double = 314.15000000000003\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var x1 : Double = topbottomSurfacearea(arg10)\n    var v1 : Double = 78.53750000000001\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var x2 : Double = topbottomSurfacearea(arg20)\n    var v2 : Double = 50.264\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the top or bottom surface area of a cylinder.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/536", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to select the nth items of a list.\n     *\n     * >>> nthItems(List(1, 2, 3, 4, 5, 6, 7, 8, 9), 2)\n     * List(1, 3, 5, 7, 9)\n     * >>> nthItems(List(10, 15, 19, 17, 16, 18), 3)\n     * List(10, 17)\n     * >>> nthItems(List(14, 16, 19, 15, 17), 4)\n     * List(14, 17)\n     */\n    def nthItems(list : List[Int], n : Int) : List[Int] = {\n", "entry_point": "nthItems", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9)\n    var arg01 : Int = 2\n    var x0 : List[Int] = nthItems(arg00, arg01)\n    var v0 : List[Int] = List(1, 3, 5, 7, 9)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(10, 15, 19, 17, 16, 18)\n    var arg11 : Int = 3\n    var x1 : List[Int] = nthItems(arg10, arg11)\n    var v1 : List[Int] = List(10, 17)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(14, 16, 19, 15, 17)\n    var arg21 : Int = 4\n    var x2 : List[Int] = nthItems(arg20, arg21)\n    var v2 : List[Int] = List(14, 17)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to select the nth items of a list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/537", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the first repeated word in a given string.\n     *\n     * >>> firstRepeatedWord(\"ab ca bc ab\")\n     * \"ab\"\n     * >>> firstRepeatedWord(\"ab ca bc\")\n     * \"None\"\n     * >>> firstRepeatedWord(\"ab ca bc ca ab bc\")\n     * \"ca\"\n     */\n    def firstRepeatedWord(str1 : String) : String = {\n", "entry_point": "firstRepeatedWord", "test": "\n\n    var arg00 : String = \"\"\"ab ca bc ab\"\"\"\n    var x0 : String = firstRepeatedWord(arg00)\n    var v0 : String = \"\"\"ab\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"ab ca bc\"\"\"\n    var x1 : String = firstRepeatedWord(arg10)\n    var v1 : String = \"\"\"None\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"ab ca bc ca ab bc\"\"\"\n    var x2 : String = firstRepeatedWord(arg20)\n    var v2 : String = \"\"\"ca\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the first repeated word in a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/538", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to convert a given string list to a tuple.\n     *\n     * >>> stringListToTuple(\"python 3.0\")\n     * List(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\")\n     * >>> stringListToTuple(\"bigdata\")\n     * List(\"b\", \"i\", \"g\", \"d\", \"a\", \"t\", \"a\")\n     * >>> stringListToTuple(\"language\")\n     * List(\"l\", \"a\", \"n\", \"g\", \"u\", \"a\", \"g\", \"e\")\n     */\n    def stringListToTuple(str1 : String) : List[String] = {\n", "entry_point": "stringListToTuple", "test": "\n\n    var arg00 : String = \"\"\"python 3.0\"\"\"\n    var x0 : List[String] = stringListToTuple(arg00)\n    var v0 : List[String] = List(\"\"\"p\"\"\", \"\"\"y\"\"\", \"\"\"t\"\"\", \"\"\"h\"\"\", \"\"\"o\"\"\", \"\"\"n\"\"\", \"\"\"3\"\"\", \"\"\".\"\"\", \"\"\"0\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"bigdata\"\"\"\n    var x1 : List[String] = stringListToTuple(arg10)\n    var v1 : List[String] = List(\"\"\"b\"\"\", \"\"\"i\"\"\", \"\"\"g\"\"\", \"\"\"d\"\"\", \"\"\"a\"\"\", \"\"\"t\"\"\", \"\"\"a\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"language\"\"\"\n    var x2 : List[String] = stringListToTuple(arg20)\n    var v2 : List[String] = List(\"\"\"l\"\"\", \"\"\"a\"\"\", \"\"\"n\"\"\", \"\"\"g\"\"\", \"\"\"u\"\"\", \"\"\"a\"\"\", \"\"\"g\"\"\", \"\"\"e\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to convert a given string list to a tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/539", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n     *\n     * >>> basesnumCoresspondingnum(List(10, 20, 30, 40, 50, 60, 70, 80, 90, 100), List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n     * List(10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000)\n     * >>> basesnumCoresspondingnum(List(1, 2, 3, 4, 5, 6, 7), List(10, 20, 30, 40, 50, 60, 70))\n     * List(1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249)\n     * >>> basesnumCoresspondingnum(List(4, 8, 12, 16, 20, 24, 28), List(3, 6, 9, 12, 15, 18, 21))\n     * List(64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728)\n     */\n    def basesnumCoresspondingnum(basesNum : List[Int], index : List[Int]) : List[Int] = {\n", "entry_point": "basesnumCoresspondingnum", "test": "\n\n    var arg00 : List[Int] = List(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)\n    var arg01 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var x0 : List[Int] = basesnumCoresspondingnum(arg00, arg01)\n    var v0 : List[Int] = List(10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5, 6, 7)\n    var arg11 : List[Int] = List(10, 20, 30, 40, 50, 60, 70)\n    var x1 : List[Int] = basesnumCoresspondingnum(arg10, arg11)\n    var v1 : List[Int] = List(1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(4, 8, 12, 16, 20, 24, 28)\n    var arg21 : List[Int] = List(3, 6, 9, 12, 15, 18, 21)\n    var x2 : List[Int] = basesnumCoresspondingnum(arg20, arg21)\n    var v2 : List[Int] = List(64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/540", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the difference between highest and least frequencies in a given array.\n     *\n     * >>> findDiff(List(1, 1, 2, 2, 7, 8, 4, 5, 1, 4), 10)\n     * 2\n     * >>> findDiff(List(1, 7, 9, 2, 3, 3, 1, 3, 3), 9)\n     * 3\n     * >>> findDiff(List(1, 2, 1, 2), 4)\n     * 0\n     */\n    def findDiff(arr : List[Int], n : Int) : Int = {\n", "entry_point": "findDiff", "test": "\n\n    var arg00 : List[Int] = List(1, 1, 2, 2, 7, 8, 4, 5, 1, 4)\n    var arg01 : Int = 10\n    var x0 : Int = findDiff(arg00, arg01)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 7, 9, 2, 3, 3, 1, 3, 3)\n    var arg11 : Int = 9\n    var x1 : Int = findDiff(arg10, arg11)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 1, 2)\n    var arg21 : Int = 4\n    var x2 : Int = findDiff(arg20, arg21)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the difference between highest and least frequencies in a given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/541", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find if the given number is abundant or not.\n     *\n     * >>> checkAbundant(12)\n     * true\n     * >>> checkAbundant(15)\n     * false\n     * >>> checkAbundant(18)\n     * true\n     */\n    def checkAbundant(n : Int) : Boolean = {\n", "entry_point": "checkAbundant", "test": "\n\n    var arg00 : Int = 12\n    var x0 : Boolean = checkAbundant(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 15\n    var x1 : Boolean = checkAbundant(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 18\n    var x2 : Boolean = checkAbundant(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find if the given number is abundant or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/542", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n     *\n     * >>> fillSpaces(\"Boult Curve Wireless Neckband\")\n     * \"Boult:Curve:Wireless:Neckband\"\n     * >>> fillSpaces(\"Stereo Sound Sweatproof\")\n     * \"Stereo:Sound:Sweatproof\"\n     * >>> fillSpaces(\"Probass Curve Audio\")\n     * \"Probass:Curve:Audio\"\n     */\n    def fillSpaces(text : String) : String = {\n", "entry_point": "fillSpaces", "test": "\n\n    var arg00 : String = \"\"\"Boult Curve Wireless Neckband\"\"\"\n    var x0 : String = fillSpaces(arg00)\n    var v0 : String = \"\"\"Boult:Curve:Wireless:Neckband\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Stereo Sound Sweatproof\"\"\"\n    var x1 : String = fillSpaces(arg10)\n    var v1 : String = \"\"\"Stereo:Sound:Sweatproof\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Probass Curve Audio\"\"\"\n    var x2 : String = fillSpaces(arg20)\n    var v2 : String = \"\"\"Probass:Curve:Audio\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/543", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to add two numbers and print number of digits of sum.\n     *\n     * >>> countDigits(9875, 10)\n     * 4\n     * >>> countDigits(98759853034, 100)\n     * 11\n     * >>> countDigits(1234567, 500)\n     * 7\n     */\n    def countDigits(num1 : Int, num2 : Int) : Int = {\n", "entry_point": "countDigits", "test": "\n\n    var arg00 : Int = 9875\n    var arg01 : Int = 10\n    var x0 : Int = countDigits(arg00, arg01)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 98759853034\n    var arg11 : Int = 100\n    var x1 : Int = countDigits(arg10, arg11)\n    var v1 : Int = 11\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1234567\n    var arg21 : Int = 500\n    var x2 : Int = countDigits(arg20, arg21)\n    var v2 : Int = 7\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to add two numbers and print number of digits of sum.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/544", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to flatten the tuple list to a string.\n     *\n     * >>> flattenTuple(List(List(\"1\", \"4\", \"6\"), List(\"5\", \"8\"), List(\"2\", \"9\"), List(\"1\", \"10\")))\n     * \"1 4 6 5 8 2 9 1 10\"\n     * >>> flattenTuple(List(List(\"2\", \"3\", \"4\"), List(\"6\", \"9\"), List(\"3\", \"2\"), List(\"2\", \"11\")))\n     * \"2 3 4 6 9 3 2 2 11\"\n     * >>> flattenTuple(List(List(\"14\", \"21\", \"9\"), List(\"24\", \"19\"), List(\"12\", \"29\"), List(\"23\", \"17\")))\n     * \"14 21 9 24 19 12 29 23 17\"\n     */\n    def flattenTuple(testList : List[List[String]]) : String = {\n", "entry_point": "flattenTuple", "test": "\n\n    var arg00 : List[List[String]] = List(List(\"\"\"1\"\"\", \"\"\"4\"\"\", \"\"\"6\"\"\"), List(\"\"\"5\"\"\", \"\"\"8\"\"\"), List(\"\"\"2\"\"\", \"\"\"9\"\"\"), List(\"\"\"1\"\"\", \"\"\"10\"\"\"))\n    var x0 : String = flattenTuple(arg00)\n    var v0 : String = \"\"\"1 4 6 5 8 2 9 1 10\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[String]] = List(List(\"\"\"2\"\"\", \"\"\"3\"\"\", \"\"\"4\"\"\"), List(\"\"\"6\"\"\", \"\"\"9\"\"\"), List(\"\"\"3\"\"\", \"\"\"2\"\"\"), List(\"\"\"2\"\"\", \"\"\"11\"\"\"))\n    var x1 : String = flattenTuple(arg10)\n    var v1 : String = \"\"\"2 3 4 6 9 3 2 2 11\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[String]] = List(List(\"\"\"14\"\"\", \"\"\"21\"\"\", \"\"\"9\"\"\"), List(\"\"\"24\"\"\", \"\"\"19\"\"\"), List(\"\"\"12\"\"\", \"\"\"29\"\"\"), List(\"\"\"23\"\"\", \"\"\"17\"\"\"))\n    var x2 : String = flattenTuple(arg20)\n    var v2 : String = \"\"\"14 21 9 24 19 12 29 23 17\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to flatten the tuple list to a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/545", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to toggle only first and last bits of a given number.\n     *\n     * >>> toggleFAndLBits(10)\n     * 3\n     * >>> toggleFAndLBits(15)\n     * 6\n     * >>> toggleFAndLBits(20)\n     * 5\n     */\n    def toggleFAndLBits(n : Int) : Int = {\n", "entry_point": "toggleFAndLBits", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = toggleFAndLBits(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 15\n    var x1 : Int = toggleFAndLBits(arg10)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 20\n    var x2 : Int = toggleFAndLBits(arg20)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to toggle only first and last bits of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/546", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the last occurrence of a character in a string.\n     *\n     * >>> lastOccurenceChar(\"hello world\", \"l\")\n     * 10\n     * >>> lastOccurenceChar(\"language\", \"g\")\n     * 7\n     * >>> lastOccurenceChar(\"little\", \"y\")\n     * \"none\"\n     */\n    def lastOccurenceChar(string : String, ch : String) : Any = {\n", "entry_point": "lastOccurenceChar", "test": "\n\n    var arg00 : String = \"\"\"hello world\"\"\"\n    var arg01 : String = \"\"\"l\"\"\"\n    var x0 : Any = lastOccurenceChar(arg00, arg01)\n    var v0 : Any = 10\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"language\"\"\"\n    var arg11 : String = \"\"\"g\"\"\"\n    var x1 : Any = lastOccurenceChar(arg10, arg11)\n    var v1 : Any = 7\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"little\"\"\"\n    var arg21 : String = \"\"\"y\"\"\"\n    var x2 : Any = lastOccurenceChar(arg20, arg21)\n    var v2 : Any = \"none\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the last occurrence of a character in a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/547", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of hamming distances of all consecutive numbers from o to n.\n     *\n     * >>> totalHammingDistance(4)\n     * 7\n     * >>> totalHammingDistance(2)\n     * 3\n     * >>> totalHammingDistance(5)\n     * 8\n     */\n    def totalHammingDistance(n : Int) : Int = {\n", "entry_point": "totalHammingDistance", "test": "\n\n    var arg00 : Int = 4\n    var x0 : Int = totalHammingDistance(arg00)\n    var v0 : Int = 7\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var x1 : Int = totalHammingDistance(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var x2 : Int = totalHammingDistance(arg20)\n    var v2 : Int = 8\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of hamming distances of all consecutive numbers from o to n.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/548", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the length of the longest increasing subsequence of the given sequence.\n     *\n     * >>> longestIncreasingSubsequence(List(10, 22, 9, 33, 21, 50, 41, 60))\n     * 5\n     * >>> longestIncreasingSubsequence(List(3, 10, 2, 1, 20))\n     * 3\n     * >>> longestIncreasingSubsequence(List(50, 3, 10, 7, 40, 80))\n     * 4\n     */\n    def longestIncreasingSubsequence(arr : List[Int]) : Int = {\n", "entry_point": "longestIncreasingSubsequence", "test": "\n\n    var arg00 : List[Int] = List(10, 22, 9, 33, 21, 50, 41, 60)\n    var x0 : Int = longestIncreasingSubsequence(arg00)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(3, 10, 2, 1, 20)\n    var x1 : Int = longestIncreasingSubsequence(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(50, 3, 10, 7, 40, 80)\n    var x2 : Int = longestIncreasingSubsequence(arg20)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the length of the longest increasing subsequence of the given sequence.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/549", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of fifth power of first n odd natural numbers.\n     *\n     * >>> oddNumSum(1)\n     * 1\n     * >>> oddNumSum(2)\n     * 244\n     * >>> oddNumSum(3)\n     * 3369\n     */\n    def oddNumSum(n : Int) : Int = {\n", "entry_point": "oddNumSum", "test": "\n\n    var arg00 : Int = 1\n    var x0 : Int = oddNumSum(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var x1 : Int = oddNumSum(arg10)\n    var v1 : Int = 244\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 3\n    var x2 : Int = oddNumSum(arg20)\n    var v2 : Int = 3369\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of fifth power of first n odd natural numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/550", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the maximum element in a sorted and rotated array.\n     *\n     * >>> findMax(List(2, 3, 5, 6, 9), 0, 4)\n     * 9\n     * >>> findMax(List(3, 4, 5, 2, 1), 0, 4)\n     * 5\n     * >>> findMax(List(1, 2, 3), 0, 2)\n     * 3\n     */\n    def findMax(arr : List[Int], low : Int, high : Int) : Int = {\n", "entry_point": "findMax", "test": "\n\n    var arg00 : List[Int] = List(2, 3, 5, 6, 9)\n    var arg01 : Int = 0\n    var arg02 : Int = 4\n    var x0 : Int = findMax(arg00, arg01, arg02)\n    var v0 : Int = 9\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(3, 4, 5, 2, 1)\n    var arg11 : Int = 0\n    var arg12 : Int = 4\n    var x1 : Int = findMax(arg10, arg11, arg12)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3)\n    var arg21 : Int = 0\n    var arg22 : Int = 2\n    var x2 : Int = findMax(arg20, arg21, arg22)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the maximum element in a sorted and rotated array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/551", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract a specified column from a given nested list.\n     *\n     * >>> extractColumn(List(List(1, 2, 3), List(2, 4, 5), List(1, 1, 1)), 0)\n     * List(1, 2, 1)\n     * >>> extractColumn(List(List(1, 2, 3), List(-2, 4, -5), List(1, -1, 1)), 2)\n     * List(3, -5, 1)\n     * >>> extractColumn(List(List(1, 3), List(5, 7), List(1, 3), List(13, 15, 17), List(5, 7), List(9, 11)), 0)\n     * List(1, 5, 1, 13, 5, 9)\n     */\n    def extractColumn(list1 : List[List[Int]], n : Int) : List[Int] = {\n", "entry_point": "extractColumn", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 2, 3), List(2, 4, 5), List(1, 1, 1))\n    var arg01 : Int = 0\n    var x0 : List[Int] = extractColumn(arg00, arg01)\n    var v0 : List[Int] = List(1, 2, 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1, 2, 3), List(-2, 4, -5), List(1, -1, 1))\n    var arg11 : Int = 2\n    var x1 : List[Int] = extractColumn(arg10, arg11)\n    var v1 : List[Int] = List(3, -5, 1)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(1, 3), List(5, 7), List(1, 3), List(13, 15, 17), List(5, 7), List(9, 11))\n    var arg21 : Int = 0\n    var x2 : List[Int] = extractColumn(arg20, arg21)\n    var v2 : List[Int] = List(1, 5, 1, 13, 5, 9)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract a specified column from a given nested list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/552", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether a given sequence is linear or not.\n     *\n     * >>> seqLinear(List(0, 2, 4, 6, 8, 10))\n     * \"Linear Sequence\"\n     * >>> seqLinear(List(1, 2, 3))\n     * \"Linear Sequence\"\n     * >>> seqLinear(List(1, 5, 2))\n     * \"Non Linear Sequence\"\n     */\n    def seqLinear(seqNums : List[Int]) : String = {\n", "entry_point": "seqLinear", "test": "\n\n    var arg00 : List[Int] = List(0, 2, 4, 6, 8, 10)\n    var x0 : String = seqLinear(arg00)\n    var v0 : String = \"\"\"Linear Sequence\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3)\n    var x1 : String = seqLinear(arg10)\n    var v1 : String = \"\"\"Linear Sequence\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 5, 2)\n    var x2 : String = seqLinear(arg20)\n    var v2 : String = \"\"\"Non Linear Sequence\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether a given sequence is linear or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/553", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert the given tuple to a floating-point number.\n     *\n     * >>> tupleToFloat(List(4, 56))\n     * 4.56\n     * >>> tupleToFloat(List(7, 256))\n     * 7.256\n     * >>> tupleToFloat(List(8, 123))\n     * 8.123\n     */\n    def tupleToFloat(testTup : List[Int]) : Double = {\n", "entry_point": "tupleToFloat", "test": "\n\n    var arg00 : List[Int] = List(4, 56)\n    var x0 : Double = tupleToFloat(arg00)\n    var v0 : Double = 4.56\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(7, 256)\n    var x1 : Double = tupleToFloat(arg10)\n    var v1 : Double = 7.256\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(8, 123)\n    var x2 : Double = tupleToFloat(arg20)\n    var v2 : Double = 8.123\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert the given tuple to a floating-point number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/554", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find odd numbers from a mixed list.\n     *\n     * >>> split(List(1, 2, 3, 4, 5, 6))\n     * List(1, 3, 5)\n     * >>> split(List(10, 11, 12, 13))\n     * List(11, 13)\n     * >>> split(List(7, 8, 9, 1))\n     * List(7, 9, 1)\n     */\n    def split(list : List[Int]) : List[Int] = {\n", "entry_point": "split", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5, 6)\n    var x0 : List[Int] = split(arg00)\n    var v0 : List[Int] = List(1, 3, 5)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(10, 11, 12, 13)\n    var x1 : List[Int] = split(arg10)\n    var v1 : List[Int] = List(11, 13)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(7, 8, 9, 1)\n    var x2 : List[Int] = split(arg20)\n    var v2 : List[Int] = List(7, 9, 1)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find odd numbers from a mixed list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/555", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n     *\n     * >>> difference(3)\n     * 30\n     * >>> difference(5)\n     * 210\n     * >>> difference(2)\n     * 6\n     */\n    def difference(n : Int) : Int = {\n", "entry_point": "difference", "test": "\n\n    var arg00 : Int = 3\n    var x0 : Int = difference(arg00)\n    var v0 : Int = 30\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var x1 : Int = difference(arg10)\n    var v1 : Int = 210\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var x2 : Int = difference(arg20)\n    var v2 : Int = 6\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/556", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the pairs with xor as an odd number.\n     *\n     * >>> findOddPair(List(5, 4, 7, 2, 1), 5)\n     * 6\n     * >>> findOddPair(List(7, 2, 8, 1, 0, 5, 11), 7)\n     * 12\n     * >>> findOddPair(List(1, 2, 3), 3)\n     * 2\n     */\n    def findOddPair(a : List[Int], n : Int) : Int = {\n", "entry_point": "findOddPair", "test": "\n\n    var arg00 : List[Int] = List(5, 4, 7, 2, 1)\n    var arg01 : Int = 5\n    var x0 : Int = findOddPair(arg00, arg01)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(7, 2, 8, 1, 0, 5, 11)\n    var arg11 : Int = 7\n    var x1 : Int = findOddPair(arg10, arg11)\n    var v1 : Int = 12\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3)\n    var arg21 : Int = 3\n    var x2 : Int = findOddPair(arg20, arg21)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the pairs with xor as an odd number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/557", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to toggle characters case in a string.\n     *\n     * >>> toggleString(\"Python\")\n     * \"pYTHON\"\n     * >>> toggleString(\"Pangram\")\n     * \"pANGRAM\"\n     * >>> toggleString(\"LIttLE\")\n     * \"liTTle\"\n     */\n    def toggleString(string : String) : String = {\n", "entry_point": "toggleString", "test": "\n\n    var arg00 : String = \"\"\"Python\"\"\"\n    var x0 : String = toggleString(arg00)\n    var v0 : String = \"\"\"pYTHON\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Pangram\"\"\"\n    var x1 : String = toggleString(arg10)\n    var v1 : String = \"\"\"pANGRAM\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"LIttLE\"\"\"\n    var x2 : String = toggleString(arg20)\n    var v2 : String = \"\"\"liTTle\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to toggle characters case in a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/558", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the digit distance between two integers.\n     *\n     * >>> digitDistanceNums(1, 2)\n     * 1\n     * >>> digitDistanceNums(23, 56)\n     * 6\n     * >>> digitDistanceNums(123, 256)\n     * 7\n     */\n    def digitDistanceNums(n1 : Int, n2 : Int) : Int = {\n", "entry_point": "digitDistanceNums", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = 2\n    var x0 : Int = digitDistanceNums(arg00, arg01)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 23\n    var arg11 : Int = 56\n    var x1 : Int = digitDistanceNums(arg10, arg11)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 123\n    var arg21 : Int = 256\n    var x2 : Int = digitDistanceNums(arg20, arg21)\n    var v2 : Int = 7\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the digit distance between two integers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/559", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the largest sum of contiguous subarray in the given array.\n     *\n     * >>> maxSubArraySum(List(-2, -3, 4, -1, -2, 1, 5, -3), 8)\n     * 7\n     * >>> maxSubArraySum(List(-3, -4, 5, -2, -3, 2, 6, -4), 8)\n     * 8\n     * >>> maxSubArraySum(List(-4, -5, 6, -3, -4, 3, 7, -5), 8)\n     * 10\n     */\n    def maxSubArraySum(a : List[Int], size : Int) : Int = {\n", "entry_point": "maxSubArraySum", "test": "\n\n    var arg00 : List[Int] = List(-2, -3, 4, -1, -2, 1, 5, -3)\n    var arg01 : Int = 8\n    var x0 : Int = maxSubArraySum(arg00, arg01)\n    var v0 : Int = 7\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(-3, -4, 5, -2, -3, 2, 6, -4)\n    var arg11 : Int = 8\n    var x1 : Int = maxSubArraySum(arg10, arg11)\n    var v1 : Int = 8\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(-4, -5, 6, -3, -4, 3, 7, -5)\n    var arg21 : Int = 8\n    var x2 : Int = maxSubArraySum(arg20, arg21)\n    var v2 : Int = 10\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the largest sum of contiguous subarray in the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/560", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the union of elements of the given tuples.\n     *\n     * >>> unionElements(List(3, 4, 5, 6), List(5, 7, 4, 10))\n     * List(3, 4, 5, 6, 7, 10)\n     * >>> unionElements(List(1, 2, 3, 4), List(3, 4, 5, 6))\n     * List(1, 2, 3, 4, 5, 6)\n     * >>> unionElements(List(11, 12, 13, 14), List(13, 15, 16, 17))\n     * List(11, 12, 13, 14, 15, 16, 17)\n     */\n    def unionElements(testTup1 : List[Int], testTup2 : List[Int]) : List[Int] = {\n", "entry_point": "unionElements", "test": "\n\n    var arg00 : List[Int] = List(3, 4, 5, 6)\n    var arg01 : List[Int] = List(5, 7, 4, 10)\n    var x0 : List[Int] = unionElements(arg00, arg01)\n    var v0 : List[Int] = List(3, 4, 5, 6, 7, 10)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4)\n    var arg11 : List[Int] = List(3, 4, 5, 6)\n    var x1 : List[Int] = unionElements(arg10, arg11)\n    var v1 : List[Int] = List(1, 2, 3, 4, 5, 6)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(11, 12, 13, 14)\n    var arg21 : List[Int] = List(13, 15, 16, 17)\n    var x2 : List[Int] = unionElements(arg20, arg21)\n    var v2 : List[Int] = List(11, 12, 13, 14, 15, 16, 17)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the union of elements of the given tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/561", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n     *\n     * >>> assignElements(List(List(5, 3), List(7, 5), List(2, 7), List(3, 8), List(8, 4)))\n     * Map(3->List(8), 5->List(3), 7->List(5), 2->List(7), 8->List(4), 4->List())\n     * >>> assignElements(List(List(6, 4), List(9, 4), List(3, 8), List(4, 9), List(9, 5)))\n     * Map(4->List(9), 6->List(4), 9->List(4, 5), 8->List(), 3->List(8), 5->List())\n     * >>> assignElements(List(List(6, 2), List(6, 8), List(4, 9), List(4, 9), List(3, 7)))\n     * Map(2->List(), 6->List(2, 8), 8->List(), 9->List(), 4->List(9, 9), 7->List(), 3->List(7))\n     */\n    def assignElements(testList : List[List[Int]]) : Map[Int, List[Any]] = {\n", "entry_point": "assignElements", "test": "\n\n    var arg00 : List[List[Int]] = List(List(5, 3), List(7, 5), List(2, 7), List(3, 8), List(8, 4))\n    var x0 : Map[Int, List[Any]] = assignElements(arg00)\n    var v0 : Map[Int, List[Any]] = Map(3 -> List(8), 5 -> List(3), 7 -> List(5), 2 -> List(7), 8 -> List(4), 4 -> List())\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(6, 4), List(9, 4), List(3, 8), List(4, 9), List(9, 5))\n    var x1 : Map[Int, List[Any]] = assignElements(arg10)\n    var v1 : Map[Int, List[Any]] = Map(4 -> List(9), 6 -> List(4), 9 -> List(4, 5), 8 -> List(), 3 -> List(8), 5 -> List())\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(6, 2), List(6, 8), List(4, 9), List(4, 9), List(3, 7))\n    var x2 : Map[Int, List[Any]] = assignElements(arg20)\n    var v2 : Map[Int, List[Any]] = Map(2 -> List(), 6 -> List(2, 8), 8 -> List(), 9 -> List(), 4 -> List(9, 9), 7 -> List(), 3 -> List(7))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/562", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the maximum length of sublist.\n     *\n     * >>> findMaxLength(List(List(1), List(1, 4), List(5, 6, 7, 8)))\n     * 4\n     * >>> findMaxLength(List(List(0, 1), List(2, 2), List(3, 2, 1)))\n     * 3\n     * >>> findMaxLength(List(List(7), List(22, 23), List(13, 14, 15), List(10, 20, 30, 40, 50)))\n     * 5\n     */\n    def findMaxLength(lst : List[List[Int]]) : Int = {\n", "entry_point": "findMaxLength", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1), List(1, 4), List(5, 6, 7, 8))\n    var x0 : Int = findMaxLength(arg00)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(0, 1), List(2, 2), List(3, 2, 1))\n    var x1 : Int = findMaxLength(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(7), List(22, 23), List(13, 14, 15), List(10, 20, 30, 40, 50))\n    var x2 : Int = findMaxLength(arg20)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the maximum length of sublist.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/563", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract values between quotation marks of a string.\n     *\n     * >>> extractValues(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\")\n     * List(\"Python\", \"PHP\", \"Java\")\n     * >>> extractValues(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\")\n     * List(\"python\", \"program\", \"language\")\n     * >>> extractValues(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\")\n     * List(\"red\", \"blue\", \"green\", \"yellow\")\n     */\n    def extractValues(text : String) : List[String] = {\n", "entry_point": "extractValues", "test": "\n\n    var arg00 : String = \"\"\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\"\"\"\n    var x0 : List[String] = extractValues(arg00)\n    var v0 : List[String] = List(\"\"\"Python\"\"\", \"\"\"PHP\"\"\", \"\"\"Java\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\"\"\"\n    var x1 : List[String] = extractValues(arg10)\n    var v1 : List[String] = List(\"\"\"python\"\"\", \"\"\"program\"\"\", \"\"\"language\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\"\"\"\n    var x2 : List[String] = extractValues(arg20)\n    var v2 : List[String] = List(\"\"\"red\"\"\", \"\"\"blue\"\"\", \"\"\"green\"\"\", \"\"\"yellow\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract values between quotation marks of a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/564", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count unequal element pairs from the given array.\n     *\n     * >>> countPairs(List(1, 2, 1), 3)\n     * 2\n     * >>> countPairs(List(1, 1, 1, 1), 4)\n     * 0\n     * >>> countPairs(List(1, 2, 3, 4, 5), 5)\n     * 10\n     */\n    def countPairs(arr : List[Int], n : Int) : Int = {\n", "entry_point": "countPairs", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 1)\n    var arg01 : Int = 3\n    var x0 : Int = countPairs(arg00, arg01)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 1, 1, 1)\n    var arg11 : Int = 4\n    var x1 : Int = countPairs(arg10, arg11)\n    var v1 : Int = 0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4, 5)\n    var arg21 : Int = 5\n    var x2 : Int = countPairs(arg20, arg21)\n    var v2 : Int = 10\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count unequal element pairs from the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/565", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to split a string into characters.\n     *\n     * >>> split(\"python\")\n     * List(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\")\n     * >>> split(\"Name\")\n     * List(\"N\", \"a\", \"m\", \"e\")\n     * >>> split(\"program\")\n     * List(\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\")\n     */\n    def split(word : String) : List[String] = {\n", "entry_point": "split", "test": "\n\n    var arg00 : String = \"\"\"python\"\"\"\n    var x0 : List[String] = split(arg00)\n    var v0 : List[String] = List(\"\"\"p\"\"\", \"\"\"y\"\"\", \"\"\"t\"\"\", \"\"\"h\"\"\", \"\"\"o\"\"\", \"\"\"n\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Name\"\"\"\n    var x1 : List[String] = split(arg10)\n    var v1 : List[String] = List(\"\"\"N\"\"\", \"\"\"a\"\"\", \"\"\"m\"\"\", \"\"\"e\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"program\"\"\"\n    var x2 : List[String] = split(arg20)\n    var v2 : List[String] = List(\"\"\"p\"\"\", \"\"\"r\"\"\", \"\"\"o\"\"\", \"\"\"g\"\"\", \"\"\"r\"\"\", \"\"\"a\"\"\", \"\"\"m\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to split a string into characters.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/566", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to get the sum of a non-negative integer.\n     *\n     * >>> sumDigits(345)\n     * 12\n     * >>> sumDigits(12)\n     * 3\n     * >>> sumDigits(97)\n     * 16\n     */\n    def sumDigits(n : Int) : Int = {\n", "entry_point": "sumDigits", "test": "\n\n    var arg00 : Int = 345\n    var x0 : Int = sumDigits(arg00)\n    var v0 : Int = 12\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 12\n    var x1 : Int = sumDigits(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 97\n    var x2 : Int = sumDigits(arg20)\n    var v2 : Int = 16\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to get the sum of a non-negative integer.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/567", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether a specified list is sorted or not.\n     *\n     * >>> issortList(List(1, 2, 4, 6, 8, 10, 12, 14, 16, 17))\n     * true\n     * >>> issortList(List(1, 2, 4, 6, 8, 10, 12, 14, 20, 17))\n     * false\n     * >>> issortList(List(1, 2, 4, 6, 8, 10, 15, 14, 20))\n     * false\n     */\n    def issortList(list1 : List[Int]) : Boolean = {\n", "entry_point": "issortList", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 4, 6, 8, 10, 12, 14, 16, 17)\n    var x0 : Boolean = issortList(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 4, 6, 8, 10, 12, 14, 20, 17)\n    var x1 : Boolean = issortList(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 4, 6, 8, 10, 15, 14, 20)\n    var x2 : Boolean = issortList(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether a specified list is sorted or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/568", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to create a list of empty dictionaries.\n     *\n     * >>> emptyList(5)\n     * List(Map(), Map(), Map(), Map(), Map())\n     * >>> emptyList(6)\n     * List(Map(), Map(), Map(), Map(), Map(), Map())\n     * >>> emptyList(7)\n     * List(Map(), Map(), Map(), Map(), Map(), Map(), Map())\n     */\n    def emptyList(length : Int) : List[Map[Any, Any]] = {\n", "entry_point": "emptyList", "test": "\n\n    var arg00 : Int = 5\n    var x0 : List[Map[Any, Any]] = emptyList(arg00)\n    var v0 : List[Map[Any, Any]] = List(Map(), Map(), Map(), Map(), Map())\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 6\n    var x1 : List[Map[Any, Any]] = emptyList(arg10)\n    var v1 : List[Map[Any, Any]] = List(Map(), Map(), Map(), Map(), Map(), Map())\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 7\n    var x2 : List[Map[Any, Any]] = emptyList(arg20)\n    var v2 : List[Map[Any, Any]] = List(Map(), Map(), Map(), Map(), Map(), Map(), Map())\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to create a list of empty dictionaries.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/569", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort each sublist of strings in a given list of lists.\n     *\n     * >>> sortSublists(List(List(\"green\", \"orange\"), List(\"black\", \"white\"), List(\"white\", \"black\", \"orange\")))\n     * List(List(\"green\", \"orange\"), List(\"black\", \"white\"), List(\"black\", \"orange\", \"white\"))\n     * >>> sortSublists(List(List(\"green\", \"orange\"), List(\"black\"), List(\"green\", \"orange\"), List(\"white\")))\n     * List(List(\"green\", \"orange\"), List(\"black\"), List(\"green\", \"orange\"), List(\"white\"))\n     * >>> sortSublists(List(List(\"a\", \"b\"), List(\"d\", \"c\"), List(\"g\", \"h\"), List(\"f\", \"e\")))\n     * List(List(\"a\", \"b\"), List(\"c\", \"d\"), List(\"g\", \"h\"), List(\"e\", \"f\"))\n     */\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n", "entry_point": "sortSublists", "test": "\n\n    var arg00 : List[List[String]] = List(List(\"\"\"green\"\"\", \"\"\"orange\"\"\"), List(\"\"\"black\"\"\", \"\"\"white\"\"\"), List(\"\"\"white\"\"\", \"\"\"black\"\"\", \"\"\"orange\"\"\"))\n    var x0 : List[List[String]] = sortSublists(arg00)\n    var v0 : List[List[String]] = List(List(\"\"\"green\"\"\", \"\"\"orange\"\"\"), List(\"\"\"black\"\"\", \"\"\"white\"\"\"), List(\"\"\"black\"\"\", \"\"\"orange\"\"\", \"\"\"white\"\"\"))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[String]] = List(List(\"\"\"green\"\"\", \"\"\"orange\"\"\"), List(\"\"\"black\"\"\"), List(\"\"\"green\"\"\", \"\"\"orange\"\"\"), List(\"\"\"white\"\"\"))\n    var x1 : List[List[String]] = sortSublists(arg10)\n    var v1 : List[List[String]] = List(List(\"\"\"green\"\"\", \"\"\"orange\"\"\"), List(\"\"\"black\"\"\"), List(\"\"\"green\"\"\", \"\"\"orange\"\"\"), List(\"\"\"white\"\"\"))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[String]] = List(List(\"\"\"a\"\"\", \"\"\"b\"\"\"), List(\"\"\"d\"\"\", \"\"\"c\"\"\"), List(\"\"\"g\"\"\", \"\"\"h\"\"\"), List(\"\"\"f\"\"\", \"\"\"e\"\"\"))\n    var x2 : List[List[String]] = sortSublists(arg20)\n    var v2 : List[List[String]] = List(List(\"\"\"a\"\"\", \"\"\"b\"\"\"), List(\"\"\"c\"\"\", \"\"\"d\"\"\"), List(\"\"\"g\"\"\", \"\"\"h\"\"\"), List(\"\"\"e\"\"\", \"\"\"f\"\"\"))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort each sublist of strings in a given list of lists.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/570", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove words from a given list of strings containing a character or string.\n     *\n     * >>> removeWords(List(\"Red color\", \"Orange#\", \"Green\", \"Orange @\", \"White\"), List(\"#\", \"color\", \"@\"))\n     * List(\"Red\", \"\", \"Green\", \"Orange\", \"White\")\n     * >>> removeWords(List(\"Red &\", \"Orange+\", \"Green\", \"Orange @\", \"White\"), List(\"&\", \"+\", \"@\"))\n     * List(\"Red\", \"\", \"Green\", \"Orange\", \"White\")\n     * >>> removeWords(List(\"Red &\", \"Orange+\", \"Green\", \"Orange @\", \"White\"), List(\"@\"))\n     * List(\"Red &\", \"Orange+\", \"Green\", \"Orange\", \"White\")\n     */\n    def removeWords(list1 : List[String], charlist : List[String]) : List[String] = {\n", "entry_point": "removeWords", "test": "\n\n    var arg00 : List[String] = List(\"\"\"Red color\"\"\", \"\"\"Orange#\"\"\", \"\"\"Green\"\"\", \"\"\"Orange @\"\"\", \"\"\"White\"\"\")\n    var arg01 : List[String] = List(\"\"\"#\"\"\", \"\"\"color\"\"\", \"\"\"@\"\"\")\n    var x0 : List[String] = removeWords(arg00, arg01)\n    var v0 : List[String] = List(\"\"\"Red\"\"\", \"\"\"\"\"\", \"\"\"Green\"\"\", \"\"\"Orange\"\"\", \"\"\"White\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"Red &\"\"\", \"\"\"Orange+\"\"\", \"\"\"Green\"\"\", \"\"\"Orange @\"\"\", \"\"\"White\"\"\")\n    var arg11 : List[String] = List(\"\"\"&\"\"\", \"\"\"+\"\"\", \"\"\"@\"\"\")\n    var x1 : List[String] = removeWords(arg10, arg11)\n    var v1 : List[String] = List(\"\"\"Red\"\"\", \"\"\"\"\"\", \"\"\"Green\"\"\", \"\"\"Orange\"\"\", \"\"\"White\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"Red &\"\"\", \"\"\"Orange+\"\"\", \"\"\"Green\"\"\", \"\"\"Orange @\"\"\", \"\"\"White\"\"\")\n    var arg21 : List[String] = List(\"\"\"@\"\"\")\n    var x2 : List[String] = removeWords(arg20, arg21)\n    var v2 : List[String] = List(\"\"\"Red &\"\"\", \"\"\"Orange+\"\"\", \"\"\"Green\"\"\", \"\"\"Orange\"\"\", \"\"\"White\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove words from a given list of strings containing a character or string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/571", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n     *\n     * >>> maxSumPairDiffLessthanK(List(3, 5, 10, 15, 17, 12, 9), 7, 4)\n     * 62\n     * >>> maxSumPairDiffLessthanK(List(5, 15, 10, 300), 4, 12)\n     * 25\n     * >>> maxSumPairDiffLessthanK(List(1, 2, 3, 4, 5, 6), 6, 6)\n     * 21\n     */\n    def maxSumPairDiffLessthanK(arr : List[Int], n : Int, k : Int) : Int = {\n", "entry_point": "maxSumPairDiffLessthanK", "test": "\n\n    var arg00 : List[Int] = List(3, 5, 10, 15, 17, 12, 9)\n    var arg01 : Int = 7\n    var arg02 : Int = 4\n    var x0 : Int = maxSumPairDiffLessthanK(arg00, arg01, arg02)\n    var v0 : Int = 62\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(5, 15, 10, 300)\n    var arg11 : Int = 4\n    var arg12 : Int = 12\n    var x1 : Int = maxSumPairDiffLessthanK(arg10, arg11, arg12)\n    var v1 : Int = 25\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4, 5, 6)\n    var arg21 : Int = 6\n    var arg22 : Int = 6\n    var x2 : Int = maxSumPairDiffLessthanK(arg20, arg21, arg22)\n    var v2 : Int = 21\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/572", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to remove two duplicate numbers from a given number of lists.\n     *\n     * >>> twoUniqueNums(List(1, 2, 3, 2, 3, 4, 5))\n     * List(1, 4, 5)\n     * >>> twoUniqueNums(List(1, 2, 3, 2, 4, 5))\n     * List(1, 3, 4, 5)\n     * >>> twoUniqueNums(List(1, 2, 3, 4, 5))\n     * List(1, 2, 3, 4, 5)\n     */\n    def twoUniqueNums(nums : List[Int]) : List[Int] = {\n", "entry_point": "twoUniqueNums", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 2, 3, 4, 5)\n    var x0 : List[Int] = twoUniqueNums(arg00)\n    var v0 : List[Int] = List(1, 4, 5)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 2, 4, 5)\n    var x1 : List[Int] = twoUniqueNums(arg10)\n    var v1 : List[Int] = List(1, 3, 4, 5)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4, 5)\n    var x2 : List[Int] = twoUniqueNums(arg20)\n    var v2 : List[Int] = List(1, 2, 3, 4, 5)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to remove two duplicate numbers from a given number of lists.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/573", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to calculate the product of the unique numbers of a given list.\n     *\n     * >>> uniqueProduct(List(10, 20, 30, 40, 20, 50, 60, 40))\n     * 720000000\n     * >>> uniqueProduct(List(1, 2, 3, 1))\n     * 6\n     * >>> uniqueProduct(List(7, 8, 9, 0, 1, 1))\n     * 0\n     */\n    def uniqueProduct(listData : List[Int]) : Int = {\n", "entry_point": "uniqueProduct", "test": "\n\n    var arg00 : List[Int] = List(10, 20, 30, 40, 20, 50, 60, 40)\n    var x0 : Int = uniqueProduct(arg00)\n    var v0 : Int = 720000000\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 1)\n    var x1 : Int = uniqueProduct(arg10)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(7, 8, 9, 0, 1, 1)\n    var x2 : Int = uniqueProduct(arg20)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to calculate the product of the unique numbers of a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/574", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the surface area of a cylinder.\n     *\n     * >>> surfaceareaCylinder(10, 5)\n     * 942.45\n     * >>> surfaceareaCylinder(4, 5)\n     * 226.18800000000002\n     * >>> surfaceareaCylinder(4, 10)\n     * 351.848\n     */\n    def surfaceareaCylinder(r : Int, h : Int) : Double = {\n", "entry_point": "surfaceareaCylinder", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 5\n    var x0 : Double = surfaceareaCylinder(arg00, arg01)\n    var v0 : Double = 942.45\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var arg11 : Int = 5\n    var x1 : Double = surfaceareaCylinder(arg10, arg11)\n    var v1 : Double = 226.18800000000002\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var arg21 : Int = 10\n    var x2 : Double = surfaceareaCylinder(arg20, arg21)\n    var v2 : Double = 351.848\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the surface area of a cylinder.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/575", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find nth number in a sequence which is not a multiple of a given number.\n     *\n     * >>> countNo(2, 3, 1, 10)\n     * 5\n     * >>> countNo(3, 6, 4, 20)\n     * 11\n     * >>> countNo(5, 10, 4, 20)\n     * 16\n     */\n    def countNo(a : Int, n : Int, l : Int, r : Int) : Int = {\n", "entry_point": "countNo", "test": "\n\n    var arg00 : Int = 2\n    var arg01 : Int = 3\n    var arg02 : Int = 1\n    var arg03 : Int = 10\n    var x0 : Int = countNo(arg00, arg01, arg02, arg03)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var arg11 : Int = 6\n    var arg12 : Int = 4\n    var arg13 : Int = 20\n    var x1 : Int = countNo(arg10, arg11, arg12, arg13)\n    var v1 : Int = 11\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var arg21 : Int = 10\n    var arg22 : Int = 4\n    var arg23 : Int = 20\n    var x2 : Int = countNo(arg20, arg21, arg22, arg23)\n    var v2 : Int = 16\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find nth number in a sequence which is not a multiple of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/576", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether an array is subarray of another or not.\n     *\n     * >>> isSubArray(List(1, 4, 3, 5), List(1, 2), 4, 2)\n     * false\n     * >>> isSubArray(List(1, 2, 1), List(1, 2, 1), 3, 3)\n     * true\n     * >>> isSubArray(List(1, 0, 2, 2), List(2, 2, 0), 4, 3)\n     * false\n     */\n    def isSubArray(a : List[Int], b : List[Int], n : Int, m : Int) : Boolean = {\n", "entry_point": "isSubArray", "test": "\n\n    var arg00 : List[Int] = List(1, 4, 3, 5)\n    var arg01 : List[Int] = List(1, 2)\n    var arg02 : Int = 4\n    var arg03 : Int = 2\n    var x0 : Boolean = isSubArray(arg00, arg01, arg02, arg03)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 1)\n    var arg11 : List[Int] = List(1, 2, 1)\n    var arg12 : Int = 3\n    var arg13 : Int = 3\n    var x1 : Boolean = isSubArray(arg10, arg11, arg12, arg13)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 0, 2, 2)\n    var arg21 : List[Int] = List(2, 2, 0)\n    var arg22 : Int = 4\n    var arg23 : Int = 3\n    var x2 : Boolean = isSubArray(arg20, arg21, arg22, arg23)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether an array is subarray of another or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/577", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the last digit in factorial of a given number.\n     *\n     * >>> lastDigitFactorial(4)\n     * 4\n     * >>> lastDigitFactorial(21)\n     * 0\n     * >>> lastDigitFactorial(30)\n     * 0\n     */\n    def lastDigitFactorial(n : Int) : Int = {\n", "entry_point": "lastDigitFactorial", "test": "\n\n    var arg00 : Int = 4\n    var x0 : Int = lastDigitFactorial(arg00)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 21\n    var x1 : Int = lastDigitFactorial(arg10)\n    var v1 : Int = 0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 30\n    var x2 : Int = lastDigitFactorial(arg20)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the last digit in factorial of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/578", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to interleave lists of the same length.\n     *\n     * >>> interleaveLists(List(1, 2, 3, 4, 5, 6, 7), List(10, 20, 30, 40, 50, 60, 70), List(100, 200, 300, 400, 500, 600, 700))\n     * List(1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700)\n     * >>> interleaveLists(List(10, 20), List(15, 2), List(5, 10))\n     * List(10, 15, 5, 20, 2, 10)\n     * >>> interleaveLists(List(11, 44), List(10, 15), List(20, 5))\n     * List(11, 10, 20, 44, 15, 5)\n     */\n    def interleaveLists(list1 : List[Int], list2 : List[Int], list3 : List[Int]) : List[Int] = {\n", "entry_point": "interleaveLists", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5, 6, 7)\n    var arg01 : List[Int] = List(10, 20, 30, 40, 50, 60, 70)\n    var arg02 : List[Int] = List(100, 200, 300, 400, 500, 600, 700)\n    var x0 : List[Int] = interleaveLists(arg00, arg01, arg02)\n    var v0 : List[Int] = List(1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(10, 20)\n    var arg11 : List[Int] = List(15, 2)\n    var arg12 : List[Int] = List(5, 10)\n    var x1 : List[Int] = interleaveLists(arg10, arg11, arg12)\n    var v1 : List[Int] = List(10, 15, 5, 20, 2, 10)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(11, 44)\n    var arg21 : List[Int] = List(10, 15)\n    var arg22 : List[Int] = List(20, 5)\n    var x2 : List[Int] = interleaveLists(arg20, arg21, arg22)\n    var v2 : List[Int] = List(11, 10, 20, 44, 15, 5)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to interleave lists of the same length.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/579", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the dissimilar elements in the given two tuples.\n     *\n     * >>> findDissimilar(List(3, 4, 5, 6), List(5, 7, 4, 10))\n     * List(3, 6, 7, 10)\n     * >>> findDissimilar(List(1, 2, 3, 4), List(7, 2, 3, 9))\n     * List(1, 4, 7, 9)\n     * >>> findDissimilar(List(21, 11, 25, 26), List(26, 34, 21, 36))\n     * List(34, 36, 11, 25)\n     */\n    def findDissimilar(testTup1 : List[Int], testTup2 : List[Int]) : List[Int] = {\n", "entry_point": "findDissimilar", "test": "\n\n    var arg00 : List[Int] = List(3, 4, 5, 6)\n    var arg01 : List[Int] = List(5, 7, 4, 10)\n    var x0 : List[Int] = findDissimilar(arg00, arg01)\n    var v0 : List[Int] = List(3, 6, 7, 10)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4)\n    var arg11 : List[Int] = List(7, 2, 3, 9)\n    var x1 : List[Int] = findDissimilar(arg10, arg11)\n    var v1 : List[Int] = List(1, 4, 7, 9)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(21, 11, 25, 26)\n    var arg21 : List[Int] = List(26, 34, 21, 36)\n    var x2 : List[Int] = findDissimilar(arg20, arg21)\n    var v2 : List[Int] = List(34, 36, 11, 25)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the dissimilar elements in the given two tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/580", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract the even elements in the nested mixed tuple.\n     *\n     * >>> extractEven(List(4, 5, List(7, 6, List(2, 4)), 6, 8))\n     * List(4, List(6, List(2, 4)), 6, 8)\n     * >>> extractEven(List(5, 6, List(8, 7, List(4, 8)), 7, 9))\n     * List(6, List(8, List(4, 8)))\n     * >>> extractEven(List(5, 6, List(9, 8, List(4, 6)), 8, 10))\n     * List(6, List(8, List(4, 6)), 8, 10)\n     */\n    def extractEven(testTuple : List[Any]) : List[Any] = {\n", "entry_point": "extractEven", "test": "\n\n    var arg00 : List[Any] = List(4, 5, List(7, 6, List(2, 4)), 6, 8)\n    var x0 : List[Any] = extractEven(arg00)\n    var v0 : List[Any] = List(4, List(6, List(2, 4)), 6, 8)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(5, 6, List(8, 7, List(4, 8)), 7, 9)\n    var x1 : List[Any] = extractEven(arg10)\n    var v1 : List[Any] = List(6, List(8, List(4, 8)))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(5, 6, List(9, 8, List(4, 6)), 8, 10)\n    var x2 : List[Any] = extractEven(arg20)\n    var v2 : List[Any] = List(6, List(8, List(4, 6)), 8, 10)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract the even elements in the nested mixed tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/581", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the surface area of the square pyramid.\n     *\n     * >>> surfaceArea(3, 4)\n     * 33\n     * >>> surfaceArea(4, 5)\n     * 56\n     * >>> surfaceArea(1, 2)\n     * 5\n     */\n    def surfaceArea(b : Int, s : Int) : Int = {\n", "entry_point": "surfaceArea", "test": "\n\n    var arg00 : Int = 3\n    var arg01 : Int = 4\n    var x0 : Int = surfaceArea(arg00, arg01)\n    var v0 : Int = 33\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var arg11 : Int = 5\n    var x1 : Int = surfaceArea(arg10, arg11)\n    var v1 : Int = 56\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = 2\n    var x2 : Int = surfaceArea(arg20, arg21)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the surface area of the square pyramid.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/582", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if a dictionary is empty or not.\n     *\n     * >>> myDict(Set(10))\n     * false\n     * >>> myDict(Set(11))\n     * false\n     * >>> myDict(Map())\n     * true\n     */\n    def myDict(dict1 : Any) : Boolean = {\n", "entry_point": "myDict", "test": "\n\n    var arg00 : Any = Set(10)\n    var x0 : Boolean = myDict(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Any = Set(11)\n    var x1 : Boolean = myDict(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Any = Map()\n    var x2 : Boolean = myDict(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if a dictionary is empty or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/583", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function for nth catalan number.\n     *\n     * >>> catalanNumber(10)\n     * 16796\n     * >>> catalanNumber(9)\n     * 4862\n     * >>> catalanNumber(7)\n     * 429\n     */\n    def catalanNumber(num : Int) : Int = {\n", "entry_point": "catalanNumber", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = catalanNumber(arg00)\n    var v0 : Int = 16796\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 9\n    var x1 : Int = catalanNumber(arg10)\n    var v1 : Int = 4862\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 7\n    var x2 : Int = catalanNumber(arg20)\n    var v2 : Int = 429\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function for nth catalan number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/584", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find all adverbs and their positions in a given sentence by using regex.\n     *\n     * >>> findAdverbs(\"Clearly, he has no excuse for such behavior.\")\n     * \"0-7: Clearly\"\n     * >>> findAdverbs(\"Please handle the situation carefuly\")\n     * \"28-36: carefuly\"\n     * >>> findAdverbs(\"Complete the task quickly\")\n     * \"18-25: quickly\"\n     */\n    def findAdverbs(text : String) : String = {\n", "entry_point": "findAdverbs", "test": "\n\n    var arg00 : String = \"\"\"Clearly, he has no excuse for such behavior.\"\"\"\n    var x0 : String = findAdverbs(arg00)\n    var v0 : String = \"\"\"0-7: Clearly\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Please handle the situation carefuly\"\"\"\n    var x1 : String = findAdverbs(arg10)\n    var v1 : String = \"\"\"28-36: carefuly\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Complete the task quickly\"\"\"\n    var x2 : String = findAdverbs(arg20)\n    var v2 : String = \"\"\"18-25: quickly\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find all adverbs and their positions in a given sentence by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/585", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n     *\n     * >>> expensiveItems(List(Map(\"name\"->\"Item-1\", \"price\"->101.1), Map(\"name\"->\"Item-2\", \"price\"->555.22)), 1)\n     * List(Map(\"name\"->\"Item-2\", \"price\"->555.22))\n     * >>> expensiveItems(List(Map(\"name\"->\"Item-1\", \"price\"->101.1), Map(\"name\"->\"Item-2\", \"price\"->555.22), Map(\"name\"->\"Item-3\", \"price\"->45.09)), 2)\n     * List(Map(\"name\"->\"Item-2\", \"price\"->555.22), Map(\"name\"->\"Item-1\", \"price\"->101.1))\n     * >>> expensiveItems(List(Map(\"name\"->\"Item-1\", \"price\"->101.1), Map(\"name\"->\"Item-2\", \"price\"->555.22), Map(\"name\"->\"Item-3\", \"price\"->45.09), Map(\"name\"->\"Item-4\", \"price\"->22.75)), 1)\n     * List(Map(\"name\"->\"Item-2\", \"price\"->555.22))\n     */\n    def expensiveItems(items : List[Map[String, Any]], n : Int) : List[Map[String, Any]] = {\n", "entry_point": "expensiveItems", "test": "\n\n    var arg00 : List[Map[String, Any]] = List(Map(\"\"\"name\"\"\" -> \"\"\"Item-1\"\"\", \"\"\"price\"\"\" -> 101.1), Map(\"\"\"name\"\"\" -> \"\"\"Item-2\"\"\", \"\"\"price\"\"\" -> 555.22))\n    var arg01 : Int = 1\n    var x0 : List[Map[String, Any]] = expensiveItems(arg00, arg01)\n    var v0 : List[Map[String, Any]] = List(Map(\"\"\"name\"\"\" -> \"\"\"Item-2\"\"\", \"\"\"price\"\"\" -> 555.22))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Map[String, Any]] = List(Map(\"\"\"name\"\"\" -> \"\"\"Item-1\"\"\", \"\"\"price\"\"\" -> 101.1), Map(\"\"\"name\"\"\" -> \"\"\"Item-2\"\"\", \"\"\"price\"\"\" -> 555.22), Map(\"\"\"name\"\"\" -> \"\"\"Item-3\"\"\", \"\"\"price\"\"\" -> 45.09))\n    var arg11 : Int = 2\n    var x1 : List[Map[String, Any]] = expensiveItems(arg10, arg11)\n    var v1 : List[Map[String, Any]] = List(Map(\"\"\"name\"\"\" -> \"\"\"Item-2\"\"\", \"\"\"price\"\"\" -> 555.22), Map(\"\"\"name\"\"\" -> \"\"\"Item-1\"\"\", \"\"\"price\"\"\" -> 101.1))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Map[String, Any]] = List(Map(\"\"\"name\"\"\" -> \"\"\"Item-1\"\"\", \"\"\"price\"\"\" -> 101.1), Map(\"\"\"name\"\"\" -> \"\"\"Item-2\"\"\", \"\"\"price\"\"\" -> 555.22), Map(\"\"\"name\"\"\" -> \"\"\"Item-3\"\"\", \"\"\"price\"\"\" -> 45.09), Map(\"\"\"name\"\"\" -> \"\"\"Item-4\"\"\", \"\"\"price\"\"\" -> 22.75))\n    var arg21 : Int = 1\n    var x2 : List[Map[String, Any]] = expensiveItems(arg20, arg21)\n    var v2 : List[Map[String, Any]] = List(Map(\"\"\"name\"\"\" -> \"\"\"Item-2\"\"\", \"\"\"price\"\"\" -> 555.22))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/586", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to split the array and add the first part to the end.\n     *\n     * >>> splitArr(List(12, 10, 5, 6, 52, 36), 6, 2)\n     * List(5, 6, 52, 36, 12, 10)\n     * >>> splitArr(List(1, 2, 3, 4), 4, 1)\n     * List(2, 3, 4, 1)\n     * >>> splitArr(List(0, 1, 2, 3, 4, 5, 6, 7), 8, 3)\n     * List(3, 4, 5, 6, 7, 0, 1, 2)\n     */\n    def splitArr(a : List[Int], n : Int, k : Int) : List[Int] = {\n", "entry_point": "splitArr", "test": "\n\n    var arg00 : List[Int] = List(12, 10, 5, 6, 52, 36)\n    var arg01 : Int = 6\n    var arg02 : Int = 2\n    var x0 : List[Int] = splitArr(arg00, arg01, arg02)\n    var v0 : List[Int] = List(5, 6, 52, 36, 12, 10)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4)\n    var arg11 : Int = 4\n    var arg12 : Int = 1\n    var x1 : List[Int] = splitArr(arg10, arg11, arg12)\n    var v1 : List[Int] = List(2, 3, 4, 1)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(0, 1, 2, 3, 4, 5, 6, 7)\n    var arg21 : Int = 8\n    var arg22 : Int = 3\n    var x2 : List[Int] = splitArr(arg20, arg21, arg22)\n    var v2 : List[Int] = List(3, 4, 5, 6, 7, 0, 1, 2)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to split the array and add the first part to the end.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/587", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert a list to a tuple.\n     *\n     * >>> listTuple(List(5, 10, 7, 4, 15, 3))\n     * List(5, 10, 7, 4, 15, 3)\n     * >>> listTuple(List(2, 4, 5, 6, 2, 3, 4, 4, 7))\n     * List(2, 4, 5, 6, 2, 3, 4, 4, 7)\n     * >>> listTuple(List(58, 44, 56))\n     * List(58, 44, 56)\n     */\n    def listTuple(listx : List[Int]) : List[Int] = {\n", "entry_point": "listTuple", "test": "\n\n    var arg00 : List[Int] = List(5, 10, 7, 4, 15, 3)\n    var x0 : List[Int] = listTuple(arg00)\n    var v0 : List[Int] = List(5, 10, 7, 4, 15, 3)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 4, 5, 6, 2, 3, 4, 4, 7)\n    var x1 : List[Int] = listTuple(arg10)\n    var v1 : List[Int] = List(2, 4, 5, 6, 2, 3, 4, 4, 7)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(58, 44, 56)\n    var x2 : List[Int] = listTuple(arg20)\n    var v2 : List[Int] = List(58, 44, 56)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert a list to a tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/588", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the difference between largest and smallest value in a given array.\n     *\n     * >>> bigDiff(List(1, 2, 3, 4))\n     * 3\n     * >>> bigDiff(List(4, 5, 12))\n     * 8\n     * >>> bigDiff(List(9, 2, 3))\n     * 7\n     */\n    def bigDiff(nums : List[Int]) : Int = {\n", "entry_point": "bigDiff", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4)\n    var x0 : Int = bigDiff(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 5, 12)\n    var x1 : Int = bigDiff(arg10)\n    var v1 : Int = 8\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(9, 2, 3)\n    var x2 : Int = bigDiff(arg20)\n    var v2 : Int = 7\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the difference between largest and smallest value in a given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/589", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find perfect squares between two given numbers.\n     *\n     * >>> perfectSquares(1, 30)\n     * List(1, 4, 9, 16, 25)\n     * >>> perfectSquares(50, 100)\n     * List(64, 81, 100)\n     * >>> perfectSquares(100, 200)\n     * List(100, 121, 144, 169, 196)\n     */\n    def perfectSquares(a : Int, b : Int) : List[Int] = {\n", "entry_point": "perfectSquares", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = 30\n    var x0 : List[Int] = perfectSquares(arg00, arg01)\n    var v0 : List[Int] = List(1, 4, 9, 16, 25)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 50\n    var arg11 : Int = 100\n    var x1 : List[Int] = perfectSquares(arg10, arg11)\n    var v1 : List[Int] = List(64, 81, 100)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 100\n    var arg21 : Int = 200\n    var x2 : List[Int] = perfectSquares(arg20, arg21)\n    var v2 : List[Int] = List(100, 121, 144, 169, 196)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find perfect squares between two given numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/591", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to interchange the first and last elements in a list.\n     *\n     * >>> swapList(List(12, 35, 9, 56, 24))\n     * List(24, 35, 9, 56, 12)\n     * >>> swapList(List(1, 2, 3))\n     * List(3, 2, 1)\n     * >>> swapList(List(4, 5, 6))\n     * List(6, 5, 4)\n     */\n    def swapList(newlist : List[Int]) : List[Int] = {\n", "entry_point": "swapList", "test": "\n\n    var arg00 : List[Int] = List(12, 35, 9, 56, 24)\n    var x0 : List[Int] = swapList(arg00)\n    var v0 : List[Int] = List(24, 35, 9, 56, 12)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3)\n    var x1 : List[Int] = swapList(arg10)\n    var v1 : List[Int] = List(3, 2, 1)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(4, 5, 6)\n    var x2 : List[Int] = swapList(arg20)\n    var v2 : List[Int] = List(6, 5, 4)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to interchange the first and last elements in a list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/592", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find sum of product of binomial co-efficients.\n     *\n     * >>> sumOfProduct(3)\n     * 15\n     * >>> sumOfProduct(4)\n     * 56\n     * >>> sumOfProduct(1)\n     * 1\n     */\n    def sumOfProduct(n : Int) : Int = {\n", "entry_point": "sumOfProduct", "test": "\n\n    var arg00 : Int = 3\n    var x0 : Int = sumOfProduct(arg00)\n    var v0 : Int = 15\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var x1 : Int = sumOfProduct(arg10)\n    var v1 : Int = 56\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var x2 : Int = sumOfProduct(arg20)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find sum of product of binomial co-efficients.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/593", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove leading zeroes from an ip address.\n     *\n     * >>> removezeroIp(\"216.08.094.196\")\n     * \"216.8.94.196\"\n     * >>> removezeroIp(\"12.01.024\")\n     * \"12.1.24\"\n     * >>> removezeroIp(\"216.08.094.0196\")\n     * \"216.8.94.196\"\n     */\n    def removezeroIp(ip : String) : String = {\n", "entry_point": "removezeroIp", "test": "\n\n    var arg00 : String = \"\"\"216.08.094.196\"\"\"\n    var x0 : String = removezeroIp(arg00)\n    var v0 : String = \"\"\"216.8.94.196\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"12.01.024\"\"\"\n    var x1 : String = removezeroIp(arg10)\n    var v1 : String = \"\"\"12.1.24\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"216.08.094.0196\"\"\"\n    var x2 : String = removezeroIp(arg20)\n    var v2 : String = \"\"\"216.8.94.196\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove leading zeroes from an ip address.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/594", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the difference of first even and odd number of a given list.\n     *\n     * >>> diffEvenOdd(List(1, 3, 5, 7, 4, 1, 6, 8))\n     * 3\n     * >>> diffEvenOdd(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n     * 1\n     * >>> diffEvenOdd(List(1, 5, 7, 9, 10))\n     * 9\n     */\n    def diffEvenOdd(list1 : List[Int]) : Int = {\n", "entry_point": "diffEvenOdd", "test": "\n\n    var arg00 : List[Int] = List(1, 3, 5, 7, 4, 1, 6, 8)\n    var x0 : Int = diffEvenOdd(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var x1 : Int = diffEvenOdd(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 5, 7, 9, 10)\n    var x2 : Int = diffEvenOdd(arg20)\n    var v2 : Int = 9\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the difference of first even and odd number of a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/595", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count minimum number of swaps required to convert one binary string to another.\n     *\n     * >>> minSwaps(\"1101\", \"1110\")\n     * 1\n     * >>> minSwaps(\"111\", \"000\")\n     * \"Not Possible\"\n     * >>> minSwaps(\"111\", \"110\")\n     * \"Not Possible\"\n     */\n    def minSwaps(str1 : String, str2 : String) : Any = {\n", "entry_point": "minSwaps", "test": "\n\n    var arg00 : String = \"\"\"1101\"\"\"\n    var arg01 : String = \"\"\"1110\"\"\"\n    var x0 : Any = minSwaps(arg00, arg01)\n    var v0 : Any = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"111\"\"\"\n    var arg11 : String = \"\"\"000\"\"\"\n    var x1 : Any = minSwaps(arg10, arg11)\n    var v1 : Any = \"\"\"Not Possible\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"111\"\"\"\n    var arg21 : String = \"\"\"110\"\"\"\n    var x2 : Any = minSwaps(arg20, arg21)\n    var v2 : Any = \"\"\"Not Possible\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count minimum number of swaps required to convert one binary string to another.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/597", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find kth element from the given two sorted arrays.\n     *\n     * >>> findKth(List(2, 3, 6, 7, 9), List(1, 4, 8, 10), 5, 4, 5)\n     * 6\n     * >>> findKth(List(100, 112, 256, 349, 770), List(72, 86, 113, 119, 265, 445, 892), 5, 7, 7)\n     * 256\n     * >>> findKth(List(3, 4, 7, 8, 10), List(2, 5, 9, 11), 5, 4, 6)\n     * 8\n     */\n    def findKth(arr1 : List[Int], arr2 : List[Int], m : Int, n : Int, k : Int) : Int = {\n", "entry_point": "findKth", "test": "\n\n    var arg00 : List[Int] = List(2, 3, 6, 7, 9)\n    var arg01 : List[Int] = List(1, 4, 8, 10)\n    var arg02 : Int = 5\n    var arg03 : Int = 4\n    var arg04 : Int = 5\n    var x0 : Int = findKth(arg00, arg01, arg02, arg03, arg04)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(100, 112, 256, 349, 770)\n    var arg11 : List[Int] = List(72, 86, 113, 119, 265, 445, 892)\n    var arg12 : Int = 5\n    var arg13 : Int = 7\n    var arg14 : Int = 7\n    var x1 : Int = findKth(arg10, arg11, arg12, arg13, arg14)\n    var v1 : Int = 256\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3, 4, 7, 8, 10)\n    var arg21 : List[Int] = List(2, 5, 9, 11)\n    var arg22 : Int = 5\n    var arg23 : Int = 4\n    var arg24 : Int = 6\n    var x2 : Int = findKth(arg20, arg21, arg22, arg23, arg24)\n    var v2 : Int = 8\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find kth element from the given two sorted arrays.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/598", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether the given number is armstrong or not.\n     *\n     * >>> armstrongNumber(153)\n     * true\n     * >>> armstrongNumber(259)\n     * false\n     * >>> armstrongNumber(4458)\n     * false\n     */\n    def armstrongNumber(number : Int) : Boolean = {\n", "entry_point": "armstrongNumber", "test": "\n\n    var arg00 : Int = 153\n    var x0 : Boolean = armstrongNumber(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 259\n    var x1 : Boolean = armstrongNumber(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4458\n    var x2 : Boolean = armstrongNumber(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether the given number is armstrong or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/599", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find sum and average of first n natural numbers.\n     *\n     * >>> sumAverage(10)\n     * List(55, 5.5)\n     * >>> sumAverage(15)\n     * List(120, 8.0)\n     * >>> sumAverage(20)\n     * List(210, 10.5)\n     */\n    def sumAverage(number : Int) : List[Double] = {\n", "entry_point": "sumAverage", "test": "\n\n    var arg00 : Int = 10\n    var x0 : List[Double] = sumAverage(arg00)\n    var v0 : List[Double] = List(55, 5.5)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 15\n    var x1 : List[Double] = sumAverage(arg10)\n    var v1 : List[Double] = List(120, 8.0)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 20\n    var x2 : List[Double] = sumAverage(arg20)\n    var v2 : List[Double] = List(210, 10.5)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find sum and average of first n natural numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/600", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the given number is even or not using bitwise operator.\n     *\n     * >>> isEven(1)\n     * false\n     * >>> isEven(2)\n     * true\n     * >>> isEven(3)\n     * false\n     */\n    def isEven(n : Int) : Boolean = {\n", "entry_point": "isEven", "test": "\n\n    var arg00 : Int = 1\n    var x0 : Boolean = isEven(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var x1 : Boolean = isEven(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 3\n    var x2 : Boolean = isEven(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the given number is even or not using bitwise operator.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/602", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the first repeated character in a given string.\n     *\n     * >>> firstRepeatedChar(\"abcabc\")\n     * \"a\"\n     * >>> firstRepeatedChar(\"abc\")\n     * \"None\"\n     * >>> firstRepeatedChar(\"123123\")\n     * \"1\"\n     */\n    def firstRepeatedChar(str1 : String) : String = {\n", "entry_point": "firstRepeatedChar", "test": "\n\n    var arg00 : String = \"\"\"abcabc\"\"\"\n    var x0 : String = firstRepeatedChar(arg00)\n    var v0 : String = \"\"\"a\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"abc\"\"\"\n    var x1 : String = firstRepeatedChar(arg10)\n    var v1 : String = \"\"\"None\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"123123\"\"\"\n    var x2 : String = firstRepeatedChar(arg20)\n    var v2 : String = \"\"\"1\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the first repeated character in a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/603", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to get a lucid number smaller than or equal to n.\n     *\n     * >>> getLudic(10)\n     * List(1, 2, 3, 5, 7)\n     * >>> getLudic(25)\n     * List(1, 2, 3, 5, 7, 11, 13, 17, 23, 25)\n     * >>> getLudic(45)\n     * List(1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43)\n     */\n    def getLudic(n : Int) : List[Int] = {\n", "entry_point": "getLudic", "test": "\n\n    var arg00 : Int = 10\n    var x0 : List[Int] = getLudic(arg00)\n    var v0 : List[Int] = List(1, 2, 3, 5, 7)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 25\n    var x1 : List[Int] = getLudic(arg10)\n    var v1 : List[Int] = List(1, 2, 3, 5, 7, 11, 13, 17, 23, 25)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 45\n    var x2 : List[Int] = getLudic(arg20)\n    var v2 : List[Int] = List(1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to get a lucid number smaller than or equal to n.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/604", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to reverse words in a given string.\n     *\n     * >>> reverseWords(\"python program\")\n     * \"program python\"\n     * >>> reverseWords(\"java language\")\n     * \"language java\"\n     * >>> reverseWords(\"indian man\")\n     * \"man indian\"\n     */\n    def reverseWords(s : String) : String = {\n", "entry_point": "reverseWords", "test": "\n\n    var arg00 : String = \"\"\"python program\"\"\"\n    var x0 : String = reverseWords(arg00)\n    var v0 : String = \"\"\"program python\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"java language\"\"\"\n    var x1 : String = reverseWords(arg10)\n    var v1 : String = \"\"\"language java\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"indian man\"\"\"\n    var x2 : String = reverseWords(arg20)\n    var v2 : String = \"\"\"man indian\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to reverse words in a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/605", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if the given integer is a prime number.\n     *\n     * >>> primeNum(13)\n     * true\n     * >>> primeNum(7)\n     * true\n     * >>> primeNum(-1010)\n     * false\n     */\n    def primeNum(num : Int) : Boolean = {\n", "entry_point": "primeNum", "test": "\n\n    var arg00 : Int = 13\n    var x0 : Boolean = primeNum(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 7\n    var x1 : Boolean = primeNum(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = -1010\n    var x2 : Boolean = primeNum(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if the given integer is a prime number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/606", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert degrees to radians.\n     *\n     * >>> radianDegree(90)\n     * 1.5707963267948966\n     * >>> radianDegree(60)\n     * 1.0471975511965976\n     * >>> radianDegree(120)\n     * 2.0943951023931953\n     */\n    def radianDegree(degree : Int) : Double = {\n", "entry_point": "radianDegree", "test": "\n\n    var arg00 : Int = 90\n    var x0 : Double = radianDegree(arg00)\n    var v0 : Double = 1.5707963267948966\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 60\n    var x1 : Double = radianDegree(arg10)\n    var v1 : Double = 1.0471975511965976\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 120\n    var x2 : Double = radianDegree(arg20)\n    var v2 : Double = 2.0943951023931953\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert degrees to radians.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/607", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n     *\n     * >>> findLiterals(\"The quick brown fox jumps over the lazy dog.\", \"fox\")\n     * List(\"fox\", 16, 19)\n     * >>> findLiterals(\"Its been a very crazy procedure right\", \"crazy\")\n     * List(\"crazy\", 16, 21)\n     * >>> findLiterals(\"Hardest choices required strongest will\", \"will\")\n     * List(\"will\", 35, 39)\n     */\n    def findLiterals(text : String, pattern : String) : List[Any] = {\n", "entry_point": "findLiterals", "test": "\n\n    var arg00 : String = \"\"\"The quick brown fox jumps over the lazy dog.\"\"\"\n    var arg01 : String = \"\"\"fox\"\"\"\n    var x0 : List[Any] = findLiterals(arg00, arg01)\n    var v0 : List[Any] = List(\"\"\"fox\"\"\", 16, 19)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Its been a very crazy procedure right\"\"\"\n    var arg11 : String = \"\"\"crazy\"\"\"\n    var x1 : List[Any] = findLiterals(arg10, arg11)\n    var v1 : List[Any] = List(\"\"\"crazy\"\"\", 16, 21)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Hardest choices required strongest will\"\"\"\n    var arg21 : String = \"\"\"will\"\"\"\n    var x2 : List[Any] = findLiterals(arg20, arg21)\n    var v2 : List[Any] = List(\"\"\"will\"\"\", 35, 39)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/608", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find nth bell number.\n     *\n     * >>> bellNumber(2)\n     * 2\n     * >>> bellNumber(3)\n     * 5\n     * >>> bellNumber(4)\n     * 15\n     */\n    def bellNumber(n : Int) : Int = {\n", "entry_point": "bellNumber", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = bellNumber(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var x1 : Int = bellNumber(arg10)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var x2 : Int = bellNumber(arg20)\n    var v2 : Int = 15\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find nth bell number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/609", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find minimum possible value for the given periodic function.\n     *\n     * >>> floorMin(10, 20, 30)\n     * 15\n     * >>> floorMin(1, 2, 1)\n     * 0\n     * >>> floorMin(11, 10, 9)\n     * 9\n     */\n    def floorMin(a : Int, b : Int, n : Int) : Int = {\n", "entry_point": "floorMin", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 20\n    var arg02 : Int = 30\n    var x0 : Int = floorMin(arg00, arg01, arg02)\n    var v0 : Int = 15\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var arg11 : Int = 2\n    var arg12 : Int = 1\n    var x1 : Int = floorMin(arg10, arg11, arg12)\n    var v1 : Int = 0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 11\n    var arg21 : Int = 10\n    var arg22 : Int = 9\n    var x2 : Int = floorMin(arg20, arg21, arg22)\n    var v2 : Int = 9\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find minimum possible value for the given periodic function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/610", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to remove the k'th element from a given list.\n     *\n     * >>> removeKthElement(List(1, 1, 2, 3, 4, 4, 5, 1), 3)\n     * List(1, 1, 3, 4, 4, 5, 1)\n     * >>> removeKthElement(List(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4), 4)\n     * List(0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)\n     * >>> removeKthElement(List(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10), 5)\n     * List(10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10)\n     */\n    def removeKthElement(list1 : List[Int], l : Int) : List[Int] = {\n", "entry_point": "removeKthElement", "test": "\n\n    var arg00 : List[Int] = List(1, 1, 2, 3, 4, 4, 5, 1)\n    var arg01 : Int = 3\n    var x0 : List[Int] = removeKthElement(arg00, arg01)\n    var v0 : List[Int] = List(1, 1, 3, 4, 4, 5, 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)\n    var arg11 : Int = 4\n    var x1 : List[Int] = removeKthElement(arg10, arg11)\n    var v1 : List[Int] = List(0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)\n    var arg21 : Int = 5\n    var x2 : List[Int] = removeKthElement(arg20, arg21)\n    var v2 : List[Int] = List(10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to remove the k'th element from a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/611", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the maximum of nth column from the given tuple list.\n     *\n     * >>> maxOfNth(List(List(5, 6, 7), List(1, 3, 5), List(8, 9, 19)), 2)\n     * 19\n     * >>> maxOfNth(List(List(6, 7, 8), List(2, 4, 6), List(9, 10, 20)), 1)\n     * 10\n     * >>> maxOfNth(List(List(7, 8, 9), List(3, 5, 7), List(10, 11, 21)), 1)\n     * 11\n     */\n    def maxOfNth(testList : List[List[Int]], n : Int) : Int = {\n", "entry_point": "maxOfNth", "test": "\n\n    var arg00 : List[List[Int]] = List(List(5, 6, 7), List(1, 3, 5), List(8, 9, 19))\n    var arg01 : Int = 2\n    var x0 : Int = maxOfNth(arg00, arg01)\n    var v0 : Int = 19\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(6, 7, 8), List(2, 4, 6), List(9, 10, 20))\n    var arg11 : Int = 1\n    var x1 : Int = maxOfNth(arg10, arg11)\n    var v1 : Int = 10\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(7, 8, 9), List(3, 5, 7), List(10, 11, 21))\n    var arg21 : Int = 1\n    var x2 : Int = maxOfNth(arg20, arg21)\n    var v2 : Int = 11\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the maximum of nth column from the given tuple list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/612", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to merge the first and last elements separately in a list of lists.\n     *\n     * >>> merge(List(List(\"x\", \"y\"), List(\"a\", \"b\"), List(\"m\", \"n\")))\n     * List(List(\"x\", \"a\", \"m\"), List(\"y\", \"b\", \"n\"))\n     * >>> merge(List(List(1, 2), List(3, 4), List(5, 6), List(7, 8)))\n     * List(List(1, 3, 5, 7), List(2, 4, 6, 8))\n     * >>> merge(List(List(\"x\", \"y\", \"z\"), List(\"a\", \"b\", \"c\"), List(\"m\", \"n\", \"o\")))\n     * List(List(\"x\", \"a\", \"m\"), List(\"y\", \"b\", \"n\"), List(\"z\", \"c\", \"o\"))\n     */\n    def merge(lst : List[List[Any]]) : List[List[Any]] = {\n", "entry_point": "merge", "test": "\n\n    var arg00 : List[List[Any]] = List(List(\"\"\"x\"\"\", \"\"\"y\"\"\"), List(\"\"\"a\"\"\", \"\"\"b\"\"\"), List(\"\"\"m\"\"\", \"\"\"n\"\"\"))\n    var x0 : List[List[Any]] = merge(arg00)\n    var v0 : List[List[Any]] = List(List(\"\"\"x\"\"\", \"\"\"a\"\"\", \"\"\"m\"\"\"), List(\"\"\"y\"\"\", \"\"\"b\"\"\", \"\"\"n\"\"\"))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(1, 2), List(3, 4), List(5, 6), List(7, 8))\n    var x1 : List[List[Any]] = merge(arg10)\n    var v1 : List[List[Any]] = List(List(1, 3, 5, 7), List(2, 4, 6, 8))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(\"\"\"x\"\"\", \"\"\"y\"\"\", \"\"\"z\"\"\"), List(\"\"\"a\"\"\", \"\"\"b\"\"\", \"\"\"c\"\"\"), List(\"\"\"m\"\"\", \"\"\"n\"\"\", \"\"\"o\"\"\"))\n    var x2 : List[List[Any]] = merge(arg20)\n    var v2 : List[List[Any]] = List(List(\"\"\"x\"\"\", \"\"\"a\"\"\", \"\"\"m\"\"\"), List(\"\"\"y\"\"\", \"\"\"b\"\"\", \"\"\"n\"\"\"), List(\"\"\"z\"\"\", \"\"\"c\"\"\", \"\"\"o\"\"\"))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to merge the first and last elements separately in a list of lists.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/613", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\n     *\n     * >>> maximumValue(List(List(\"key1\", List(3, 4, 5)), List(\"key2\", List(1, 4, 2)), List(\"key3\", List(9, 3))))\n     * List(List(\"key1\", 5), List(\"key2\", 4), List(\"key3\", 9))\n     * >>> maximumValue(List(List(\"key1\", List(4, 5, 6)), List(\"key2\", List(2, 5, 3)), List(\"key3\", List(10, 4))))\n     * List(List(\"key1\", 6), List(\"key2\", 5), List(\"key3\", 10))\n     * >>> maximumValue(List(List(\"key1\", List(5, 6, 7)), List(\"key2\", List(3, 6, 4)), List(\"key3\", List(11, 5))))\n     * List(List(\"key1\", 7), List(\"key2\", 6), List(\"key3\", 11))\n     */\n    def maximumValue(testList : List[List[Any]]) : List[List[Any]] = {\n", "entry_point": "maximumValue", "test": "\n\n    var arg00 : List[List[Any]] = List(List(\"\"\"key1\"\"\", List(3, 4, 5)), List(\"\"\"key2\"\"\", List(1, 4, 2)), List(\"\"\"key3\"\"\", List(9, 3)))\n    var x0 : List[List[Any]] = maximumValue(arg00)\n    var v0 : List[List[Any]] = List(List(\"\"\"key1\"\"\", 5), List(\"\"\"key2\"\"\", 4), List(\"\"\"key3\"\"\", 9))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(\"\"\"key1\"\"\", List(4, 5, 6)), List(\"\"\"key2\"\"\", List(2, 5, 3)), List(\"\"\"key3\"\"\", List(10, 4)))\n    var x1 : List[List[Any]] = maximumValue(arg10)\n    var v1 : List[List[Any]] = List(List(\"\"\"key1\"\"\", 6), List(\"\"\"key2\"\"\", 5), List(\"\"\"key3\"\"\", 10))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(\"\"\"key1\"\"\", List(5, 6, 7)), List(\"\"\"key2\"\"\", List(3, 6, 4)), List(\"\"\"key3\"\"\", List(11, 5)))\n    var x2 : List[List[Any]] = maximumValue(arg20)\n    var v2 : List[List[Any]] = List(List(\"\"\"key1\"\"\", 7), List(\"\"\"key2\"\"\", 6), List(\"\"\"key3\"\"\", 11))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/614", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n     *\n     * >>> cummulativeSum(List(List(1, 3), List(5, 6, 7), List(2, 6)))\n     * 30\n     * >>> cummulativeSum(List(List(2, 4), List(6, 7, 8), List(3, 7)))\n     * 37\n     * >>> cummulativeSum(List(List(3, 5), List(7, 8, 9), List(4, 8)))\n     * 44\n     */\n    def cummulativeSum(testList : List[List[Int]]) : Int = {\n", "entry_point": "cummulativeSum", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 3), List(5, 6, 7), List(2, 6))\n    var x0 : Int = cummulativeSum(arg00)\n    var v0 : Int = 30\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(2, 4), List(6, 7, 8), List(3, 7))\n    var x1 : Int = cummulativeSum(arg10)\n    var v1 : Int = 37\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(3, 5), List(7, 8, 9), List(4, 8))\n    var x2 : Int = cummulativeSum(arg20)\n    var v2 : Int = 44\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/615", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find average value of the numbers in a given tuple of tuples.\n     *\n     * >>> averageTuple(List(List(10, 10, 10, 12), List(30, 45, 56, 45), List(81, 80, 39, 32), List(1, 2, 3, 4)))\n     * List(30.5, 34.25, 27.0, 23.25)\n     * >>> averageTuple(List(List(1, 1, -5), List(30, -15, 56), List(81, -60, -39), List(-10, 2, 3)))\n     * List(25.5, -18.0, 3.75)\n     * >>> averageTuple(List(List(100, 100, 100, 120), List(300, 450, 560, 450), List(810, 800, 390, 320), List(10, 20, 30, 40)))\n     * List(305.0, 342.5, 270.0, 232.5)\n     */\n    def averageTuple(nums : List[List[Int]]) : List[Double] = {\n", "entry_point": "averageTuple", "test": "\n\n    var arg00 : List[List[Int]] = List(List(10, 10, 10, 12), List(30, 45, 56, 45), List(81, 80, 39, 32), List(1, 2, 3, 4))\n    var x0 : List[Double] = averageTuple(arg00)\n    var v0 : List[Double] = List(30.5, 34.25, 27.0, 23.25)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1, 1, -5), List(30, -15, 56), List(81, -60, -39), List(-10, 2, 3))\n    var x1 : List[Double] = averageTuple(arg10)\n    var v1 : List[Double] = List(25.5, -18.0, 3.75)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(100, 100, 100, 120), List(300, 450, 560, 450), List(810, 800, 390, 320), List(10, 20, 30, 40))\n    var x2 : List[Double] = averageTuple(arg20)\n    var v2 : List[Double] = List(305.0, 342.5, 270.0, 232.5)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find average value of the numbers in a given tuple of tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/616", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to perfom the modulo of tuple elements in the given two tuples.\n     *\n     * >>> tupleModulo(List(10, 4, 5, 6), List(5, 6, 7, 5))\n     * List(0, 4, 5, 1)\n     * >>> tupleModulo(List(11, 5, 6, 7), List(6, 7, 8, 6))\n     * List(5, 5, 6, 1)\n     * >>> tupleModulo(List(12, 6, 7, 8), List(7, 8, 9, 7))\n     * List(5, 6, 7, 1)\n     */\n    def tupleModulo(testTup1 : List[Int], testTup2 : List[Int]) : List[Int] = {\n", "entry_point": "tupleModulo", "test": "\n\n    var arg00 : List[Int] = List(10, 4, 5, 6)\n    var arg01 : List[Int] = List(5, 6, 7, 5)\n    var x0 : List[Int] = tupleModulo(arg00, arg01)\n    var v0 : List[Int] = List(0, 4, 5, 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(11, 5, 6, 7)\n    var arg11 : List[Int] = List(6, 7, 8, 6)\n    var x1 : List[Int] = tupleModulo(arg10, arg11)\n    var v1 : List[Int] = List(5, 5, 6, 1)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(12, 6, 7, 8)\n    var arg21 : List[Int] = List(7, 8, 9, 7)\n    var x2 : List[Int] = tupleModulo(arg20, arg21)\n    var v2 : List[Int] = List(5, 6, 7, 1)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to perfom the modulo of tuple elements in the given two tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/617", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n     *\n     * >>> minJumps(3, 4, 11)\n     * 3.5\n     * >>> minJumps(3, 4, 0)\n     * 0\n     * >>> minJumps(11, 14, 11)\n     * 1\n     */\n    def minJumps(a : Int, b : Int, d : Int) : Double = {\n", "entry_point": "minJumps", "test": "\n\n    var arg00 : Int = 3\n    var arg01 : Int = 4\n    var arg02 : Int = 11\n    var x0 : Double = minJumps(arg00, arg01, arg02)\n    var v0 : Double = 3.5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var arg11 : Int = 4\n    var arg12 : Int = 0\n    var x1 : Double = minJumps(arg10, arg11, arg12)\n    var v1 : Double = 0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 11\n    var arg21 : Int = 14\n    var arg22 : Int = 11\n    var x2 : Double = minJumps(arg20, arg21, arg22)\n    var v2 : Double = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/618", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to divide two lists using map and lambda function.\n     *\n     * >>> divList(List(4, 5, 6), List(1, 2, 3))\n     * List(4.0, 2.5, 2.0)\n     * >>> divList(List(3, 2), List(1, 4))\n     * List(3.0, 0.5)\n     * >>> divList(List(90, 120), List(50, 70))\n     * List(1.8, 1.7142857142857142)\n     */\n    def divList(nums1 : List[Int], nums2 : List[Int]) : List[Double] = {\n", "entry_point": "divList", "test": "\n\n    var arg00 : List[Int] = List(4, 5, 6)\n    var arg01 : List[Int] = List(1, 2, 3)\n    var x0 : List[Double] = divList(arg00, arg01)\n    var v0 : List[Double] = List(4.0, 2.5, 2.0)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(3, 2)\n    var arg11 : List[Int] = List(1, 4)\n    var x1 : List[Double] = divList(arg10, arg11)\n    var v1 : List[Double] = List(3.0, 0.5)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(90, 120)\n    var arg21 : List[Int] = List(50, 70)\n    var x2 : List[Double] = divList(arg20, arg21)\n    var v2 : List[Double] = List(1.8, 1.7142857142857142)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to divide two lists using map and lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/619", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to move all the numbers in it to the given string.\n     *\n     * >>> moveNum(\"I1love143you55three3000thousand\")\n     * \"Iloveyouthreethousand1143553000\"\n     * >>> moveNum(\"Avengers124Assemble\")\n     * \"AvengersAssemble124\"\n     * >>> moveNum(\"Its11our12path13to14see15things16do17things\")\n     * \"Itsourpathtoseethingsdothings11121314151617\"\n     */\n    def moveNum(testStr : String) : String = {\n", "entry_point": "moveNum", "test": "\n\n    var arg00 : String = \"\"\"I1love143you55three3000thousand\"\"\"\n    var x0 : String = moveNum(arg00)\n    var v0 : String = \"\"\"Iloveyouthreethousand1143553000\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Avengers124Assemble\"\"\"\n    var x1 : String = moveNum(arg10)\n    var v1 : String = \"\"\"AvengersAssemble124\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Its11our12path13to14see15things16do17things\"\"\"\n    var x2 : String = moveNum(arg20)\n    var v2 : String = \"\"\"Itsourpathtoseethingsdothings11121314151617\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to move all the numbers in it to the given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/620", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the largest subset where each pair is divisible.\n     *\n     * >>> largestSubset(List(1, 3, 6, 13, 17, 18), 6)\n     * 4\n     * >>> largestSubset(List(10, 5, 3, 15, 20), 5)\n     * 3\n     * >>> largestSubset(List(18, 1, 3, 6, 13, 17), 6)\n     * 4\n     */\n    def largestSubset(a : List[Int], n : Int) : Int = {\n", "entry_point": "largestSubset", "test": "\n\n    var arg00 : List[Int] = List(1, 3, 6, 13, 17, 18)\n    var arg01 : Int = 6\n    var x0 : Int = largestSubset(arg00, arg01)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(10, 5, 3, 15, 20)\n    var arg11 : Int = 5\n    var x1 : Int = largestSubset(arg10, arg11)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(18, 1, 3, 6, 13, 17)\n    var arg21 : Int = 6\n    var x2 : Int = largestSubset(arg20, arg21)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the largest subset where each pair is divisible.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/621", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to increment the numeric values in the given strings by k.\n     *\n     * >>> incrementNumerics(List(\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"), 6)\n     * List(\"MSM\", \"240\", \"is\", \"104\", \"129\", \"best\", \"10\")\n     * >>> incrementNumerics(List(\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"), 12)\n     * List(\"Dart\", \"368\", \"is\", \"100\", \"181\", \"Super\", \"18\")\n     * >>> incrementNumerics(List(\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"), 33)\n     * List(\"Flutter\", \"484\", \"is\", \"77\", \"129\", \"Magnificent\", \"45\")\n     */\n    def incrementNumerics(testList : List[String], k : Int) : List[String] = {\n", "entry_point": "incrementNumerics", "test": "\n\n    var arg00 : List[String] = List(\"\"\"MSM\"\"\", \"\"\"234\"\"\", \"\"\"is\"\"\", \"\"\"98\"\"\", \"\"\"123\"\"\", \"\"\"best\"\"\", \"\"\"4\"\"\")\n    var arg01 : Int = 6\n    var x0 : List[String] = incrementNumerics(arg00, arg01)\n    var v0 : List[String] = List(\"\"\"MSM\"\"\", \"\"\"240\"\"\", \"\"\"is\"\"\", \"\"\"104\"\"\", \"\"\"129\"\"\", \"\"\"best\"\"\", \"\"\"10\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"Dart\"\"\", \"\"\"356\"\"\", \"\"\"is\"\"\", \"\"\"88\"\"\", \"\"\"169\"\"\", \"\"\"Super\"\"\", \"\"\"6\"\"\")\n    var arg11 : Int = 12\n    var x1 : List[String] = incrementNumerics(arg10, arg11)\n    var v1 : List[String] = List(\"\"\"Dart\"\"\", \"\"\"368\"\"\", \"\"\"is\"\"\", \"\"\"100\"\"\", \"\"\"181\"\"\", \"\"\"Super\"\"\", \"\"\"18\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"Flutter\"\"\", \"\"\"451\"\"\", \"\"\"is\"\"\", \"\"\"44\"\"\", \"\"\"96\"\"\", \"\"\"Magnificent\"\"\", \"\"\"12\"\"\")\n    var arg21 : Int = 33\n    var x2 : List[String] = incrementNumerics(arg20, arg21)\n    var v2 : List[String] = List(\"\"\"Flutter\"\"\", \"\"\"484\"\"\", \"\"\"is\"\"\", \"\"\"77\"\"\", \"\"\"129\"\"\", \"\"\"Magnificent\"\"\", \"\"\"45\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to increment the numeric values in the given strings by k.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/622", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the median of two sorted arrays of same size.\n     *\n     * >>> getMedian(List(1, 12, 15, 26, 38), List(2, 13, 17, 30, 45), 5)\n     * 16.0\n     * >>> getMedian(List(2, 4, 8, 9), List(7, 13, 19, 28), 4)\n     * 8.5\n     * >>> getMedian(List(3, 6, 14, 23, 36, 42), List(2, 18, 27, 39, 49, 55), 6)\n     * 25.0\n     */\n    def getMedian(arr1 : List[Int], arr2 : List[Int], n : Int) : Double = {\n", "entry_point": "getMedian", "test": "\n\n    var arg00 : List[Int] = List(1, 12, 15, 26, 38)\n    var arg01 : List[Int] = List(2, 13, 17, 30, 45)\n    var arg02 : Int = 5\n    var x0 : Double = getMedian(arg00, arg01, arg02)\n    var v0 : Double = 16.0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 4, 8, 9)\n    var arg11 : List[Int] = List(7, 13, 19, 28)\n    var arg12 : Int = 4\n    var x1 : Double = getMedian(arg10, arg11, arg12)\n    var v1 : Double = 8.5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3, 6, 14, 23, 36, 42)\n    var arg21 : List[Int] = List(2, 18, 27, 39, 49, 55)\n    var arg22 : Int = 6\n    var x2 : Double = getMedian(arg20, arg21, arg22)\n    var v2 : Double = 25.0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the median of two sorted arrays of same size.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/623", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the n-th power of individual elements in a list using lambda function.\n     *\n     * >>> nthNums(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 2)\n     * List(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)\n     * >>> nthNums(List(10, 20, 30), 3)\n     * List(1000, 8000, 27000)\n     * >>> nthNums(List(12, 15), 5)\n     * List(248832, 759375)\n     */\n    def nthNums(nums : List[Int], n : Int) : List[Int] = {\n", "entry_point": "nthNums", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var arg01 : Int = 2\n    var x0 : List[Int] = nthNums(arg00, arg01)\n    var v0 : List[Int] = List(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(10, 20, 30)\n    var arg11 : Int = 3\n    var x1 : List[Int] = nthNums(arg10, arg11)\n    var v1 : List[Int] = List(1000, 8000, 27000)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(12, 15)\n    var arg21 : Int = 5\n    var x2 : List[Int] = nthNums(arg20, arg21)\n    var v2 : List[Int] = List(248832, 759375)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the n-th power of individual elements in a list using lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/624", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to convert the given string to upper case.\n     *\n     * >>> isUpper(\"person\")\n     * \"PERSON\"\n     * >>> isUpper(\"final\")\n     * \"FINAL\"\n     * >>> isUpper(\"Valid\")\n     * \"VALID\"\n     */\n    def isUpper(string : String) : String = {\n", "entry_point": "isUpper", "test": "\n\n    var arg00 : String = \"\"\"person\"\"\"\n    var x0 : String = isUpper(arg00)\n    var v0 : String = \"\"\"PERSON\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"final\"\"\"\n    var x1 : String = isUpper(arg10)\n    var v1 : String = \"\"\"FINAL\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Valid\"\"\"\n    var x2 : String = isUpper(arg20)\n    var v2 : String = \"\"\"VALID\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to convert the given string to upper case.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/625", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to interchange first and last elements in a given list.\n     *\n     * >>> swapList(List(1, 2, 3))\n     * List(3, 2, 1)\n     * >>> swapList(List(1, 2, 3, 4, 4))\n     * List(4, 2, 3, 4, 1)\n     * >>> swapList(List(4, 5, 6))\n     * List(6, 5, 4)\n     */\n    def swapList(newlist : List[Int]) : List[Int] = {\n", "entry_point": "swapList", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3)\n    var x0 : List[Int] = swapList(arg00)\n    var v0 : List[Int] = List(3, 2, 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 4)\n    var x1 : List[Int] = swapList(arg10)\n    var v1 : List[Int] = List(4, 2, 3, 4, 1)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(4, 5, 6)\n    var x2 : List[Int] = swapList(arg20)\n    var v2 : List[Int] = List(6, 5, 4)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to interchange first and last elements in a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/626", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the largest triangle that can be inscribed in the semicircle.\n     *\n     * >>> triangleArea(0)\n     * 0\n     * >>> triangleArea(-1)\n     * -1\n     * >>> triangleArea(2)\n     * 4\n     */\n    def triangleArea(r : Int) : Int = {\n", "entry_point": "triangleArea", "test": "\n\n    var arg00 : Int = 0\n    var x0 : Int = triangleArea(arg00)\n    var v0 : Int = 0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = -1\n    var x1 : Int = triangleArea(arg10)\n    var v1 : Int = -1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var x2 : Int = triangleArea(arg20)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the largest triangle that can be inscribed in the semicircle.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/627", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the smallest missing number from the given array.\n     *\n     * >>> findFirstMissing(List(0, 1, 2, 3), 0, 3)\n     * 4\n     * >>> findFirstMissing(List(0, 1, 2, 6, 9), 0, 4)\n     * 3\n     * >>> findFirstMissing(List(2, 3, 5, 8, 9), 0, 4)\n     * 0\n     */\n    def findFirstMissing(array : List[Int], start : Int, end : Int) : Int = {\n", "entry_point": "findFirstMissing", "test": "\n\n    var arg00 : List[Int] = List(0, 1, 2, 3)\n    var arg01 : Int = 0\n    var arg02 : Int = 3\n    var x0 : Int = findFirstMissing(arg00, arg01, arg02)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(0, 1, 2, 6, 9)\n    var arg11 : Int = 0\n    var arg12 : Int = 4\n    var x1 : Int = findFirstMissing(arg10, arg11, arg12)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 3, 5, 8, 9)\n    var arg21 : Int = 0\n    var arg22 : Int = 4\n    var x2 : Int = findFirstMissing(arg20, arg21, arg22)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the smallest missing number from the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/628", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n     *\n     * >>> replaceSpaces(\"My Name is Dawood\")\n     * \"My%20Name%20is%20Dawood\"\n     * >>> replaceSpaces(\"I am a Programmer\")\n     * \"I%20am%20a%20Programmer\"\n     * >>> replaceSpaces(\"I love Coding\")\n     * \"I%20love%20Coding\"\n     */\n    def replaceSpaces(string : String) : String = {\n", "entry_point": "replaceSpaces", "test": "\n\n    var arg00 : String = \"\"\"My Name is Dawood\"\"\"\n    var x0 : String = replaceSpaces(arg00)\n    var v0 : String = \"\"\"My%20Name%20is%20Dawood\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"I am a Programmer\"\"\"\n    var x1 : String = replaceSpaces(arg10)\n    var v1 : String = \"\"\"I%20am%20a%20Programmer\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"I love Coding\"\"\"\n    var x2 : String = replaceSpaces(arg20)\n    var v2 : String = \"\"\"I%20love%20Coding\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/629", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find even numbers from a mixed list.\n     *\n     * >>> split(List(1, 2, 3, 4, 5))\n     * List(2, 4)\n     * >>> split(List(4, 5, 6, 7, 8, 0, 1))\n     * List(4, 6, 8, 0)\n     */\n    def split(list : List[Int]) : List[Int] = {\n", "entry_point": "split", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5)\n    var x0 : List[Int] = split(arg00)\n    var v0 : List[Int] = List(2, 4)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 5, 6, 7, 8, 0, 1)\n    var x1 : List[Int] = split(arg10)\n    var v1 : List[Int] = List(4, 6, 8, 0)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n\n}\n", "description": "Write a Scala function to find even numbers from a mixed list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/630", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n     *\n     * >>> getCoordinates(List(3, 4))\n     * List(List(2, 3), List(2, 4), List(2, 5), List(3, 3), List(3, 4), List(3, 5), List(4, 3), List(4, 4), List(4, 5))\n     * >>> getCoordinates(List(4, 5))\n     * List(List(3, 4), List(3, 5), List(3, 6), List(4, 4), List(4, 5), List(4, 6), List(5, 4), List(5, 5), List(5, 6))\n     * >>> getCoordinates(List(5, 6))\n     * List(List(4, 5), List(4, 6), List(4, 7), List(5, 5), List(5, 6), List(5, 7), List(6, 5), List(6, 6), List(6, 7))\n     */\n    def getCoordinates(testTup : List[Int]) : List[List[Int]] = {\n", "entry_point": "getCoordinates", "test": "\n\n    var arg00 : List[Int] = List(3, 4)\n    var x0 : List[List[Int]] = getCoordinates(arg00)\n    var v0 : List[List[Int]] = List(List(2, 3), List(2, 4), List(2, 5), List(3, 3), List(3, 4), List(3, 5), List(4, 3), List(4, 4), List(4, 5))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 5)\n    var x1 : List[List[Int]] = getCoordinates(arg10)\n    var v1 : List[List[Int]] = List(List(3, 4), List(3, 5), List(3, 6), List(4, 4), List(4, 5), List(4, 6), List(5, 4), List(5, 5), List(5, 6))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(5, 6)\n    var x2 : List[List[Int]] = getCoordinates(arg20)\n    var v2 : List[List[Int]] = List(List(4, 5), List(4, 6), List(4, 7), List(5, 5), List(5, 6), List(5, 7), List(6, 5), List(6, 6), List(6, 7))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/631", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n     *\n     * >>> replaceSpaces(\"Jumanji The Jungle\")\n     * \"Jumanji_The_Jungle\"\n     * >>> replaceSpaces(\"The Avengers\")\n     * \"The_Avengers\"\n     * >>> replaceSpaces(\"Fast and Furious\")\n     * \"Fast_and_Furious\"\n     */\n    def replaceSpaces(text : String) : String = {\n", "entry_point": "replaceSpaces", "test": "\n\n    var arg00 : String = \"\"\"Jumanji The Jungle\"\"\"\n    var x0 : String = replaceSpaces(arg00)\n    var v0 : String = \"\"\"Jumanji_The_Jungle\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"The Avengers\"\"\"\n    var x1 : String = replaceSpaces(arg10)\n    var v1 : String = \"\"\"The_Avengers\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Fast and Furious\"\"\"\n    var x2 : String = replaceSpaces(arg20)\n    var v2 : String = \"\"\"Fast_and_Furious\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/632", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to move all zeroes to the end of the given list.\n     *\n     * >>> moveZero(List(1, 0, 2, 0, 3, 4))\n     * List(1, 2, 3, 4, 0, 0)\n     * >>> moveZero(List(2, 3, 2, 0, 0, 4, 0, 5, 0))\n     * List(2, 3, 2, 4, 5, 0, 0, 0, 0)\n     * >>> moveZero(List(0, 1, 0, 1, 1))\n     * List(1, 1, 1, 0, 0)\n     */\n    def moveZero(numList : List[Int]) : List[Int] = {\n", "entry_point": "moveZero", "test": "\n\n    var arg00 : List[Int] = List(1, 0, 2, 0, 3, 4)\n    var x0 : List[Int] = moveZero(arg00)\n    var v0 : List[Int] = List(1, 2, 3, 4, 0, 0)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 3, 2, 0, 0, 4, 0, 5, 0)\n    var x1 : List[Int] = moveZero(arg10)\n    var v1 : List[Int] = List(2, 3, 2, 4, 5, 0, 0, 0, 0)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(0, 1, 0, 1, 1)\n    var x2 : List[Int] = moveZero(arg20)\n    var v2 : List[Int] = List(1, 1, 1, 0, 0)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to move all zeroes to the end of the given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/633", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of xor of all pairs of numbers in the given array.\n     *\n     * >>> pairOrSum(List(5, 9, 7, 6), 4)\n     * 47\n     * >>> pairOrSum(List(7, 3, 5), 3)\n     * 12\n     * >>> pairOrSum(List(7, 3), 2)\n     * 4\n     */\n    def pairOrSum(arr : List[Int], n : Int) : Int = {\n", "entry_point": "pairOrSum", "test": "\n\n    var arg00 : List[Int] = List(5, 9, 7, 6)\n    var arg01 : Int = 4\n    var x0 : Int = pairOrSum(arg00, arg01)\n    var v0 : Int = 47\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(7, 3, 5)\n    var arg11 : Int = 3\n    var x1 : Int = pairOrSum(arg10, arg11)\n    var v1 : Int = 12\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(7, 3)\n    var arg21 : Int = 2\n    var x2 : Int = pairOrSum(arg20, arg21)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of xor of all pairs of numbers in the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/634", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of fourth power of first n even natural numbers.\n     *\n     * >>> evenPowerSum(2)\n     * 272\n     * >>> evenPowerSum(3)\n     * 1568\n     * >>> evenPowerSum(4)\n     * 5664\n     */\n    def evenPowerSum(n : Int) : Int = {\n", "entry_point": "evenPowerSum", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = evenPowerSum(arg00)\n    var v0 : Int = 272\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var x1 : Int = evenPowerSum(arg10)\n    var v1 : Int = 1568\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var x2 : Int = evenPowerSum(arg20)\n    var v2 : Int = 5664\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of fourth power of first n even natural numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/635", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to push all values into a heap and then pop off the smallest values one at a time.\n     *\n     * >>> heapSort(List(1, 3, 5, 7, 9, 2, 4, 6, 8, 0))\n     * List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n     * >>> heapSort(List(25, 35, 22, 85, 14, 65, 75, 25, 58))\n     * List(14, 22, 25, 25, 35, 58, 65, 75, 85)\n     * >>> heapSort(List(7, 1, 9, 5))\n     * List(1, 5, 7, 9)\n     */\n    def heapSort(iterable : List[Int]) : List[Int] = {\n", "entry_point": "heapSort", "test": "\n\n    var arg00 : List[Int] = List(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)\n    var x0 : List[Int] = heapSort(arg00)\n    var v0 : List[Int] = List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(25, 35, 22, 85, 14, 65, 75, 25, 58)\n    var x1 : List[Int] = heapSort(arg10)\n    var v1 : List[Int] = List(14, 22, 25, 25, 35, 58, 65, 75, 85)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(7, 1, 9, 5)\n    var x2 : List[Int] = heapSort(arg20)\n    var v2 : List[Int] = List(1, 5, 7, 9)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to push all values into a heap and then pop off the smallest values one at a time.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/636", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check if roots of a quadratic equation are reciprocal of each other or not.\n     *\n     * >>> checkSolution(2, 0, 2)\n     * \"Yes\"\n     * >>> checkSolution(2, -5, 2)\n     * \"Yes\"\n     * >>> checkSolution(1, 2, 3)\n     * \"No\"\n     */\n    def checkSolution(a : Int, b : Int, c : Int) : String = {\n", "entry_point": "checkSolution", "test": "\n\n    var arg00 : Int = 2\n    var arg01 : Int = 0\n    var arg02 : Int = 2\n    var x0 : String = checkSolution(arg00, arg01, arg02)\n    var v0 : String = \"\"\"Yes\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var arg11 : Int = -5\n    var arg12 : Int = 2\n    var x1 : String = checkSolution(arg10, arg11, arg12)\n    var v1 : String = \"\"\"Yes\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = 2\n    var arg22 : Int = 3\n    var x2 : String = checkSolution(arg20, arg21, arg22)\n    var v2 : String = \"\"\"No\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check if roots of a quadratic equation are reciprocal of each other or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/637", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether the given amount has no profit and no loss\n     *\n     * >>> noprofitNoloss(1500, 1200)\n     * false\n     * >>> noprofitNoloss(100, 100)\n     * true\n     * >>> noprofitNoloss(2000, 5000)\n     * false\n     */\n    def noprofitNoloss(actualCost : Int, saleAmount : Int) : Boolean = {\n", "entry_point": "noprofitNoloss", "test": "\n\n    var arg00 : Int = 1500\n    var arg01 : Int = 1200\n    var x0 : Boolean = noprofitNoloss(arg00, arg01)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 100\n    var arg11 : Int = 100\n    var x1 : Boolean = noprofitNoloss(arg10, arg11)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2000\n    var arg21 : Int = 5000\n    var x2 : Boolean = noprofitNoloss(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether the given amount has no profit and no loss", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/638", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate wind chill index.\n     *\n     * >>> windChill(120, 35)\n     * 40\n     * >>> windChill(40, 70)\n     * 86\n     * >>> windChill(10, 100)\n     * 116\n     */\n    def windChill(v : Int, t : Int) : Int = {\n", "entry_point": "windChill", "test": "\n\n    var arg00 : Int = 120\n    var arg01 : Int = 35\n    var x0 : Int = windChill(arg00, arg01)\n    var v0 : Int = 40\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 40\n    var arg11 : Int = 70\n    var x1 : Int = windChill(arg10, arg11)\n    var v1 : Int = 86\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 10\n    var arg21 : Int = 100\n    var x2 : Int = windChill(arg20, arg21)\n    var v2 : Int = 116\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate wind chill index.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/639", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n     *\n     * >>> sampleNam(List(\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"))\n     * 16\n     * >>> sampleNam(List(\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"))\n     * 10\n     * >>> sampleNam(List(\"abcd\", \"Python\", \"abba\", \"aba\"))\n     * 6\n     */\n    def sampleNam(sampleNames : List[String]) : Int = {\n", "entry_point": "sampleNam", "test": "\n\n    var arg00 : List[String] = List(\"\"\"sally\"\"\", \"\"\"Dylan\"\"\", \"\"\"rebecca\"\"\", \"\"\"Diana\"\"\", \"\"\"Joanne\"\"\", \"\"\"keith\"\"\")\n    var x0 : Int = sampleNam(arg00)\n    var v0 : Int = 16\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"php\"\"\", \"\"\"res\"\"\", \"\"\"Python\"\"\", \"\"\"abcd\"\"\", \"\"\"Java\"\"\", \"\"\"aaa\"\"\")\n    var x1 : Int = sampleNam(arg10)\n    var v1 : Int = 10\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"abcd\"\"\", \"\"\"Python\"\"\", \"\"\"abba\"\"\", \"\"\"aba\"\"\")\n    var x2 : Int = sampleNam(arg20)\n    var v2 : Int = 6\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/640", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove the parenthesis area in a string.\n     *\n     * >>> removeParenthesis(List(\"python (chrome)\"))\n     * \"python\"\n     * >>> removeParenthesis(List(\"string(.abc)\"))\n     * \"string\"\n     * >>> removeParenthesis(List(\"alpha(num)\"))\n     * \"alpha\"\n     */\n    def removeParenthesis(items : List[String]) : String = {\n", "entry_point": "removeParenthesis", "test": "\n\n    var arg00 : List[String] = List(\"\"\"python (chrome)\"\"\")\n    var x0 : String = removeParenthesis(arg00)\n    var v0 : String = \"\"\"python\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"string(.abc)\"\"\")\n    var x1 : String = removeParenthesis(arg10)\n    var v1 : String = \"\"\"string\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"alpha(num)\"\"\")\n    var x2 : String = removeParenthesis(arg20)\n    var v2 : String = \"\"\"alpha\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove the parenthesis area in a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/641", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the nth nonagonal number.\n     *\n     * >>> isNonagonal(10)\n     * 325\n     * >>> isNonagonal(15)\n     * 750\n     * >>> isNonagonal(18)\n     * 1089\n     */\n    def isNonagonal(n : Int) : Int = {\n", "entry_point": "isNonagonal", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = isNonagonal(arg00)\n    var v0 : Int = 325\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 15\n    var x1 : Int = isNonagonal(arg10)\n    var v1 : Int = 750\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 18\n    var x2 : Int = isNonagonal(arg20)\n    var v2 : Int = 1089\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the nth nonagonal number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/643", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function that matches a word containing 'z', not at the start or end of the word.\n     *\n     * >>> textMatchWordzMiddle(\"pythonzabc.\")\n     * \"Found a match!\"\n     * >>> textMatchWordzMiddle(\"xyzabc.\")\n     * \"Found a match!\"\n     * >>> textMatchWordzMiddle(\"  lang  .\")\n     * \"Not matched!\"\n     */\n    def textMatchWordzMiddle(text : String) : String = {\n", "entry_point": "textMatchWordzMiddle", "test": "\n\n    var arg00 : String = \"\"\"pythonzabc.\"\"\"\n    var x0 : String = textMatchWordzMiddle(arg00)\n    var v0 : String = \"\"\"Found a match!\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"xyzabc.\"\"\"\n    var x1 : String = textMatchWordzMiddle(arg10)\n    var v1 : String = \"\"\"Found a match!\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"  lang  .\"\"\"\n    var x2 : String = textMatchWordzMiddle(arg20)\n    var v2 : String = \"\"\"Not matched!\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function that matches a word containing 'z', not at the start or end of the word.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/644", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to reverse an array upto a given position.\n     *\n     * >>> reverseArrayUptoK(List(1, 2, 3, 4, 5, 6), 4)\n     * List(4, 3, 2, 1, 5, 6)\n     * >>> reverseArrayUptoK(List(4, 5, 6, 7), 2)\n     * List(5, 4, 6, 7)\n     * >>> reverseArrayUptoK(List(9, 8, 7, 6, 5), 3)\n     * List(7, 8, 9, 6, 5)\n     */\n    def reverseArrayUptoK(input : List[Int], k : Int) : List[Int] = {\n", "entry_point": "reverseArrayUptoK", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5, 6)\n    var arg01 : Int = 4\n    var x0 : List[Int] = reverseArrayUptoK(arg00, arg01)\n    var v0 : List[Int] = List(4, 3, 2, 1, 5, 6)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 5, 6, 7)\n    var arg11 : Int = 2\n    var x1 : List[Int] = reverseArrayUptoK(arg10, arg11)\n    var v1 : List[Int] = List(5, 4, 6, 7)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(9, 8, 7, 6, 5)\n    var arg21 : Int = 3\n    var x2 : List[Int] = reverseArrayUptoK(arg20, arg21)\n    var v2 : List[Int] = List(7, 8, 9, 6, 5)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to reverse an array upto a given position.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/645", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the product of it\u2019s kth index in the given tuples.\n     *\n     * >>> findKProduct(List(List(5, 6, 7), List(1, 3, 5), List(8, 9, 19)), 2)\n     * 665\n     * >>> findKProduct(List(List(6, 7, 8), List(2, 4, 6), List(9, 10, 20)), 1)\n     * 280\n     * >>> findKProduct(List(List(7, 8, 9), List(3, 5, 7), List(10, 11, 21)), 0)\n     * 210\n     */\n    def findKProduct(testList : List[List[Int]], k : Int) : Int = {\n", "entry_point": "findKProduct", "test": "\n\n    var arg00 : List[List[Int]] = List(List(5, 6, 7), List(1, 3, 5), List(8, 9, 19))\n    var arg01 : Int = 2\n    var x0 : Int = findKProduct(arg00, arg01)\n    var v0 : Int = 665\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(6, 7, 8), List(2, 4, 6), List(9, 10, 20))\n    var arg11 : Int = 1\n    var x1 : Int = findKProduct(arg10, arg11)\n    var v1 : Int = 280\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(7, 8, 9), List(3, 5, 7), List(10, 11, 21))\n    var arg21 : Int = 0\n    var x2 : Int = findKProduct(arg20, arg21)\n    var v2 : Int = 210\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the product of it\u2019s kth index in the given tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/646", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count number of cubes of size k in a cube of size n.\n     *\n     * >>> noOfCubes(2, 1)\n     * 8\n     * >>> noOfCubes(5, 2)\n     * 64\n     * >>> noOfCubes(1, 1)\n     * 1\n     */\n    def noOfCubes(n : Int, k : Int) : Int = {\n", "entry_point": "noOfCubes", "test": "\n\n    var arg00 : Int = 2\n    var arg01 : Int = 1\n    var x0 : Int = noOfCubes(arg00, arg01)\n    var v0 : Int = 8\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var arg11 : Int = 2\n    var x1 : Int = noOfCubes(arg10, arg11)\n    var v1 : Int = 64\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = 1\n    var x2 : Int = noOfCubes(arg20, arg21)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count number of cubes of size k in a cube of size n.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/647", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to split a string at uppercase letters.\n     *\n     * >>> splitUpperstring(\"PythonProgramLanguage\")\n     * List(\"Python\", \"Program\", \"Language\")\n     * >>> splitUpperstring(\"PythonProgram\")\n     * List(\"Python\", \"Program\")\n     * >>> splitUpperstring(\"ProgrammingLanguage\")\n     * List(\"Programming\", \"Language\")\n     */\n    def splitUpperstring(text : String) : List[String] = {\n", "entry_point": "splitUpperstring", "test": "\n\n    var arg00 : String = \"\"\"PythonProgramLanguage\"\"\"\n    var x0 : List[String] = splitUpperstring(arg00)\n    var v0 : List[String] = List(\"\"\"Python\"\"\", \"\"\"Program\"\"\", \"\"\"Language\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"PythonProgram\"\"\"\n    var x1 : List[String] = splitUpperstring(arg10)\n    var v1 : List[String] = List(\"\"\"Python\"\"\", \"\"\"Program\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"ProgrammingLanguage\"\"\"\n    var x2 : List[String] = splitUpperstring(arg20)\n    var v2 : List[String] = List(\"\"\"Programming\"\"\", \"\"\"Language\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to split a string at uppercase letters.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/648", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n     *\n     * >>> exchangeElements(List(0, 1, 2, 3, 4, 5))\n     * List(1, 0, 3, 2, 5, 4)\n     * >>> exchangeElements(List(5, 6, 7, 8, 9, 10))\n     * List(6, 5, 8, 7, 10, 9)\n     * >>> exchangeElements(List(25, 35, 45, 55, 75, 95))\n     * List(35, 25, 55, 45, 95, 75)\n     */\n    def exchangeElements(lst : List[Int]) : List[Int] = {\n", "entry_point": "exchangeElements", "test": "\n\n    var arg00 : List[Int] = List(0, 1, 2, 3, 4, 5)\n    var x0 : List[Int] = exchangeElements(arg00)\n    var v0 : List[Int] = List(1, 0, 3, 2, 5, 4)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(5, 6, 7, 8, 9, 10)\n    var x1 : List[Int] = exchangeElements(arg10)\n    var v1 : List[Int] = List(6, 5, 8, 7, 10, 9)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(25, 35, 45, 55, 75, 95)\n    var x2 : List[Int] = exchangeElements(arg20)\n    var v2 : List[Int] = List(35, 25, 55, 45, 95, 75)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/649", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to calculate the sum of the numbers in a list between the indices of a specified range.\n     *\n     * >>> sumRangeList(List(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12), 8, 10)\n     * 29\n     * >>> sumRangeList(List(1, 2, 3, 4, 5), 1, 2)\n     * 5\n     * >>> sumRangeList(List(1, 0, 1, 2, 5, 6), 4, 5)\n     * 11\n     */\n    def sumRangeList(nums : List[Int], m : Int, n : Int) : Int = {\n", "entry_point": "sumRangeList", "test": "\n\n    var arg00 : List[Int] = List(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12)\n    var arg01 : Int = 8\n    var arg02 : Int = 10\n    var x0 : Int = sumRangeList(arg00, arg01, arg02)\n    var v0 : Int = 29\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5)\n    var arg11 : Int = 1\n    var arg12 : Int = 2\n    var x1 : Int = sumRangeList(arg10, arg11, arg12)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 0, 1, 2, 5, 6)\n    var arg21 : Int = 4\n    var arg22 : Int = 5\n    var x2 : Int = sumRangeList(arg20, arg21, arg22)\n    var v2 : Int = 11\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to calculate the sum of the numbers in a list between the indices of a specified range.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/650", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the given two arrays are equal or not.\n     *\n     * >>> areEqual(List(1, 2, 3), List(3, 2, 1), 3, 3)\n     * true\n     * >>> areEqual(List(1, 1, 1), List(2, 2, 2), 3, 3)\n     * false\n     * >>> areEqual(List(8, 9), List(4, 5, 6), 2, 3)\n     * false\n     */\n    def areEqual(arr1 : List[Int], arr2 : List[Int], n : Int, m : Int) : Boolean = {\n", "entry_point": "areEqual", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3)\n    var arg01 : List[Int] = List(3, 2, 1)\n    var arg02 : Int = 3\n    var arg03 : Int = 3\n    var x0 : Boolean = areEqual(arg00, arg01, arg02, arg03)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 1, 1)\n    var arg11 : List[Int] = List(2, 2, 2)\n    var arg12 : Int = 3\n    var arg13 : Int = 3\n    var x1 : Boolean = areEqual(arg10, arg11, arg12, arg13)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(8, 9)\n    var arg21 : List[Int] = List(4, 5, 6)\n    var arg22 : Int = 2\n    var arg23 : Int = 3\n    var x2 : Boolean = areEqual(arg20, arg21, arg22, arg23)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the given two arrays are equal or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/651", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if one tuple is a subset of another tuple.\n     *\n     * >>> checkSubset(List(10, 4, 5, 6), List(5, 10))\n     * true\n     * >>> checkSubset(List(1, 2, 3, 4), List(5, 6))\n     * false\n     * >>> checkSubset(List(7, 8, 9, 10), List(10, 8))\n     * true\n     */\n    def checkSubset(testTup1 : List[Int], testTup2 : List[Int]) : Boolean = {\n", "entry_point": "checkSubset", "test": "\n\n    var arg00 : List[Int] = List(10, 4, 5, 6)\n    var arg01 : List[Int] = List(5, 10)\n    var x0 : Boolean = checkSubset(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4)\n    var arg11 : List[Int] = List(5, 6)\n    var x1 : Boolean = checkSubset(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(7, 8, 9, 10)\n    var arg21 : List[Int] = List(10, 8)\n    var x2 : Boolean = checkSubset(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if one tuple is a subset of another tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/652", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n     *\n     * >>> matrixToList(List(List(List(4, 5), List(7, 8)), List(List(10, 13), List(18, 17)), List(List(0, 4), List(10, 1))))\n     * \"[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]\"\n     * >>> matrixToList(List(List(List(5, 6), List(8, 9)), List(List(11, 14), List(19, 18)), List(List(1, 5), List(11, 2))))\n     * \"[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]\"\n     * >>> matrixToList(List(List(List(6, 7), List(9, 10)), List(List(12, 15), List(20, 21)), List(List(23, 7), List(15, 8))))\n     * \"[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]\"\n     */\n    def matrixToList(testList : List[List[List[Int]]]) : String = {\n", "entry_point": "matrixToList", "test": "\n\n    var arg00 : List[List[List[Int]]] = List(List(List(4, 5), List(7, 8)), List(List(10, 13), List(18, 17)), List(List(0, 4), List(10, 1)))\n    var x0 : String = matrixToList(arg00)\n    var v0 : String = \"\"\"[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[List[Int]]] = List(List(List(5, 6), List(8, 9)), List(List(11, 14), List(19, 18)), List(List(1, 5), List(11, 2)))\n    var x1 : String = matrixToList(arg10)\n    var v1 : String = \"\"\"[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[List[Int]]] = List(List(List(6, 7), List(9, 10)), List(List(12, 15), List(20, 21)), List(List(23, 7), List(15, 8)))\n    var x2 : String = matrixToList(arg20)\n    var v2 : String = \"\"\"[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/653", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n     *\n     * >>> groupingDictionary(List(List(\"yellow\", 1), List(\"blue\", 2), List(\"yellow\", 3), List(\"blue\", 4), List(\"red\", 1)))\n     * Map(\"yellow\"->List(1, 3), \"blue\"->List(2, 4), \"red\"->List(1))\n     * >>> groupingDictionary(List(List(\"yellow\", 10), List(\"blue\", 20), List(\"yellow\", 30), List(\"blue\", 40), List(\"red\", 10)))\n     * Map(\"yellow\"->List(10, 30), \"blue\"->List(20, 40), \"red\"->List(10))\n     * >>> groupingDictionary(List(List(\"yellow\", 15), List(\"blue\", 25), List(\"yellow\", 35), List(\"blue\", 45), List(\"red\", 15)))\n     * Map(\"yellow\"->List(15, 35), \"blue\"->List(25, 45), \"red\"->List(15))\n     */\n    def groupingDictionary(l : List[List[Any]]) : Map[String, List[Int]] = {\n", "entry_point": "groupingDictionary", "test": "\n\n    var arg00 : List[List[Any]] = List(List(\"\"\"yellow\"\"\", 1), List(\"\"\"blue\"\"\", 2), List(\"\"\"yellow\"\"\", 3), List(\"\"\"blue\"\"\", 4), List(\"\"\"red\"\"\", 1))\n    var x0 : Map[String, List[Int]] = groupingDictionary(arg00)\n    var v0 : Map[String, List[Int]] = Map(\"\"\"yellow\"\"\" -> List(1, 3), \"\"\"blue\"\"\" -> List(2, 4), \"\"\"red\"\"\" -> List(1))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(\"\"\"yellow\"\"\", 10), List(\"\"\"blue\"\"\", 20), List(\"\"\"yellow\"\"\", 30), List(\"\"\"blue\"\"\", 40), List(\"\"\"red\"\"\", 10))\n    var x1 : Map[String, List[Int]] = groupingDictionary(arg10)\n    var v1 : Map[String, List[Int]] = Map(\"\"\"yellow\"\"\" -> List(10, 30), \"\"\"blue\"\"\" -> List(20, 40), \"\"\"red\"\"\" -> List(10))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(\"\"\"yellow\"\"\", 15), List(\"\"\"blue\"\"\", 25), List(\"\"\"yellow\"\"\", 35), List(\"\"\"blue\"\"\", 45), List(\"\"\"red\"\"\", 15))\n    var x2 : Map[String, List[Int]] = groupingDictionary(arg20)\n    var v2 : Map[String, List[Int]] = Map(\"\"\"yellow\"\"\" -> List(15, 35), \"\"\"blue\"\"\" -> List(25, 45), \"\"\"red\"\"\" -> List(15))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/654", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the perimeter of a rectangle.\n     *\n     * >>> rectanglePerimeter(10, 20)\n     * 60\n     * >>> rectanglePerimeter(10, 5)\n     * 30\n     * >>> rectanglePerimeter(4, 2)\n     * 12\n     */\n    def rectanglePerimeter(l : Int, b : Int) : Int = {\n", "entry_point": "rectanglePerimeter", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 20\n    var x0 : Int = rectanglePerimeter(arg00, arg01)\n    var v0 : Int = 60\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var arg11 : Int = 5\n    var x1 : Int = rectanglePerimeter(arg10, arg11)\n    var v1 : Int = 30\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var arg21 : Int = 2\n    var x2 : Int = rectanglePerimeter(arg20, arg21)\n    var v2 : Int = 12\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the perimeter of a rectangle.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/655", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of fifth power of n natural numbers.\n     *\n     * >>> fifthPowerSum(2)\n     * 33\n     * >>> fifthPowerSum(4)\n     * 1300\n     * >>> fifthPowerSum(3)\n     * 276\n     */\n    def fifthPowerSum(n : Int) : Int = {\n", "entry_point": "fifthPowerSum", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = fifthPowerSum(arg00)\n    var v0 : Int = 33\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var x1 : Int = fifthPowerSum(arg10)\n    var v1 : Int = 1300\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 3\n    var x2 : Int = fifthPowerSum(arg20)\n    var v2 : Int = 276\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of fifth power of n natural numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/656", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the minimum sum of absolute differences of two arrays.\n     *\n     * >>> findMinSum(List(3, 2, 1), List(2, 1, 3), 3)\n     * 0\n     * >>> findMinSum(List(1, 2, 3), List(4, 5, 6), 3)\n     * 9\n     * >>> findMinSum(List(4, 1, 8, 7), List(2, 3, 6, 5), 4)\n     * 6\n     */\n    def findMinSum(a : List[Int], b : List[Int], n : Int) : Int = {\n", "entry_point": "findMinSum", "test": "\n\n    var arg00 : List[Int] = List(3, 2, 1)\n    var arg01 : List[Int] = List(2, 1, 3)\n    var arg02 : Int = 3\n    var x0 : Int = findMinSum(arg00, arg01, arg02)\n    var v0 : Int = 0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3)\n    var arg11 : List[Int] = List(4, 5, 6)\n    var arg12 : Int = 3\n    var x1 : Int = findMinSum(arg10, arg11, arg12)\n    var v1 : Int = 9\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(4, 1, 8, 7)\n    var arg21 : List[Int] = List(2, 3, 6, 5)\n    var arg22 : Int = 4\n    var x2 : Int = findMinSum(arg20, arg21, arg22)\n    var v2 : Int = 6\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the minimum sum of absolute differences of two arrays.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/657", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the first digit in factorial of a given number.\n     *\n     * >>> firstDigit(5)\n     * 1\n     * >>> firstDigit(10)\n     * 3\n     * >>> firstDigit(7)\n     * 5\n     */\n    def firstDigit(n : Int) : Int = {\n", "entry_point": "firstDigit", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Int = firstDigit(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var x1 : Int = firstDigit(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 7\n    var x2 : Int = firstDigit(arg20)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the first digit in factorial of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/658", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the item with maximum occurrences in a given list.\n     *\n     * >>> maxOccurrences(List(2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2))\n     * 2\n     * >>> maxOccurrences(List(1, 3, 5, 7, 1, 3, 13, 15, 17, 5, 7, 9, 1, 11))\n     * 1\n     * >>> maxOccurrences(List(1, 2, 3, 2, 4, 5, 1, 1, 1))\n     * 1\n     */\n    def maxOccurrences(list1 : List[Int]) : Int = {\n", "entry_point": "maxOccurrences", "test": "\n\n    var arg00 : List[Int] = List(2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2)\n    var x0 : Int = maxOccurrences(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 3, 5, 7, 1, 3, 13, 15, 17, 5, 7, 9, 1, 11)\n    var x1 : Int = maxOccurrences(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 2, 4, 5, 1, 1, 1)\n    var x2 : Int = maxOccurrences(arg20)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the item with maximum occurrences in a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/659", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to print duplicants from a list of integers.\n     *\n     * >>> repeat(List(10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20))\n     * List(20, 30, -20, 60)\n     * >>> repeat(List(-1, 1, -1, 8))\n     * List(-1)\n     * >>> repeat(List(1, 2, 3, 1, 2))\n     * List(1, 2)\n     */\n    def repeat(x : List[Int]) : List[Int] = {\n", "entry_point": "repeat", "test": "\n\n    var arg00 : List[Int] = List(10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20)\n    var x0 : List[Int] = repeat(arg00)\n    var v0 : List[Int] = List(20, 30, -20, 60)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(-1, 1, -1, 8)\n    var x1 : List[Int] = repeat(arg10)\n    var v1 : List[Int] = List(-1)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 1, 2)\n    var x2 : List[Int] = repeat(arg20)\n    var v2 : List[Int] = List(1, 2)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to print duplicants from a list of integers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/660", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to choose points from two ranges such that no point lies in both the ranges.\n     *\n     * >>> findPoints(5, 10, 1, 5)\n     * List(1, 10)\n     * >>> findPoints(3, 5, 7, 9)\n     * List(3, 9)\n     * >>> findPoints(1, 5, 2, 8)\n     * List(1, 8)\n     */\n    def findPoints(l1 : Int, r1 : Int, l2 : Int, r2 : Int) : List[Int] = {\n", "entry_point": "findPoints", "test": "\n\n    var arg00 : Int = 5\n    var arg01 : Int = 10\n    var arg02 : Int = 1\n    var arg03 : Int = 5\n    var x0 : List[Int] = findPoints(arg00, arg01, arg02, arg03)\n    var v0 : List[Int] = List(1, 10)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var arg11 : Int = 5\n    var arg12 : Int = 7\n    var arg13 : Int = 9\n    var x1 : List[Int] = findPoints(arg10, arg11, arg12, arg13)\n    var v1 : List[Int] = List(3, 9)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = 5\n    var arg22 : Int = 2\n    var arg23 : Int = 8\n    var x2 : List[Int] = findPoints(arg20, arg21, arg22, arg23)\n    var v2 : List[Int] = List(1, 8)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to choose points from two ranges such that no point lies in both the ranges.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/661", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\n     *\n     * >>> maxSumOfThreeConsecutive(List(100, 1000, 100, 1000, 1), 5)\n     * 2101\n     * >>> maxSumOfThreeConsecutive(List(3000, 2000, 1000, 3, 10), 5)\n     * 5013\n     * >>> maxSumOfThreeConsecutive(List(1, 2, 3, 4, 5, 6, 7, 8), 8)\n     * 27\n     */\n    def maxSumOfThreeConsecutive(arr : List[Int], n : Int) : Int = {\n", "entry_point": "maxSumOfThreeConsecutive", "test": "\n\n    var arg00 : List[Int] = List(100, 1000, 100, 1000, 1)\n    var arg01 : Int = 5\n    var x0 : Int = maxSumOfThreeConsecutive(arg00, arg01)\n    var v0 : Int = 2101\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(3000, 2000, 1000, 3, 10)\n    var arg11 : Int = 5\n    var x1 : Int = maxSumOfThreeConsecutive(arg10, arg11)\n    var v1 : Int = 5013\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8)\n    var arg21 : Int = 8\n    var x2 : Int = maxSumOfThreeConsecutive(arg20, arg21)\n    var v2 : Int = 27\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/662", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort a list in a dictionary.\n     *\n     * >>> sortedDict(Map(\"n1\"->List(2, 3, 1), \"n2\"->List(5, 1, 2), \"n3\"->List(3, 2, 4)))\n     * Map(\"n1\"->List(1, 2, 3), \"n2\"->List(1, 2, 5), \"n3\"->List(2, 3, 4))\n     * >>> sortedDict(Map(\"n1\"->List(25, 37, 41), \"n2\"->List(41, 54, 63), \"n3\"->List(29, 38, 93)))\n     * Map(\"n1\"->List(25, 37, 41), \"n2\"->List(41, 54, 63), \"n3\"->List(29, 38, 93))\n     * >>> sortedDict(Map(\"n1\"->List(58, 44, 56), \"n2\"->List(91, 34, 58), \"n3\"->List(100, 200, 300)))\n     * Map(\"n1\"->List(44, 56, 58), \"n2\"->List(34, 58, 91), \"n3\"->List(100, 200, 300))\n     */\n    def sortedDict(dict1 : Map[String, List[Int]]) : Map[String, List[Int]] = {\n", "entry_point": "sortedDict", "test": "\n\n    var arg00 : Map[String, List[Int]] = Map(\"\"\"n1\"\"\" -> List(2, 3, 1), \"\"\"n2\"\"\" -> List(5, 1, 2), \"\"\"n3\"\"\" -> List(3, 2, 4))\n    var x0 : Map[String, List[Int]] = sortedDict(arg00)\n    var v0 : Map[String, List[Int]] = Map(\"\"\"n1\"\"\" -> List(1, 2, 3), \"\"\"n2\"\"\" -> List(1, 2, 5), \"\"\"n3\"\"\" -> List(2, 3, 4))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Map[String, List[Int]] = Map(\"\"\"n1\"\"\" -> List(25, 37, 41), \"\"\"n2\"\"\" -> List(41, 54, 63), \"\"\"n3\"\"\" -> List(29, 38, 93))\n    var x1 : Map[String, List[Int]] = sortedDict(arg10)\n    var v1 : Map[String, List[Int]] = Map(\"\"\"n1\"\"\" -> List(25, 37, 41), \"\"\"n2\"\"\" -> List(41, 54, 63), \"\"\"n3\"\"\" -> List(29, 38, 93))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Map[String, List[Int]] = Map(\"\"\"n1\"\"\" -> List(58, 44, 56), \"\"\"n2\"\"\" -> List(91, 34, 58), \"\"\"n3\"\"\" -> List(100, 200, 300))\n    var x2 : Map[String, List[Int]] = sortedDict(arg20)\n    var v2 : Map[String, List[Int]] = Map(\"\"\"n1\"\"\" -> List(44, 56, 58), \"\"\"n2\"\"\" -> List(34, 58, 91), \"\"\"n3\"\"\" -> List(100, 200, 300))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort a list in a dictionary.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/663", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the largest possible value of k such that k modulo x is y.\n     *\n     * >>> findMaxVal(15, 10, 5)\n     * 15\n     * >>> findMaxVal(187, 10, 5)\n     * 185\n     * >>> findMaxVal(16, 11, 1)\n     * 12\n     */\n    def findMaxVal(n : Int, x : Int, y : Int) : Int = {\n", "entry_point": "findMaxVal", "test": "\n\n    var arg00 : Int = 15\n    var arg01 : Int = 10\n    var arg02 : Int = 5\n    var x0 : Int = findMaxVal(arg00, arg01, arg02)\n    var v0 : Int = 15\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 187\n    var arg11 : Int = 10\n    var arg12 : Int = 5\n    var x1 : Int = findMaxVal(arg10, arg11, arg12)\n    var v1 : Int = 185\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 16\n    var arg21 : Int = 11\n    var arg22 : Int = 1\n    var x2 : Int = findMaxVal(arg20, arg21, arg22)\n    var v2 : Int = 12\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the largest possible value of k such that k modulo x is y.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/664", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the average of even numbers till a given even number.\n     *\n     * >>> averageEven(2)\n     * 2\n     * >>> averageEven(4)\n     * 3\n     * >>> averageEven(100)\n     * 51\n     */\n    def averageEven(n : Int) : Int = {\n", "entry_point": "averageEven", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = averageEven(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var x1 : Int = averageEven(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 100\n    var x2 : Int = averageEven(arg20)\n    var v2 : Int = 51\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the average of even numbers till a given even number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/665", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to shift first element to the end of given list.\n     *\n     * >>> moveLast(List(1, 2, 3, 4))\n     * List(2, 3, 4, 1)\n     * >>> moveLast(List(2, 3, 4, 1, 5, 0))\n     * List(3, 4, 1, 5, 0, 2)\n     * >>> moveLast(List(5, 4, 3, 2, 1))\n     * List(4, 3, 2, 1, 5)\n     */\n    def moveLast(numList : List[Int]) : List[Int] = {\n", "entry_point": "moveLast", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4)\n    var x0 : List[Int] = moveLast(arg00)\n    var v0 : List[Int] = List(2, 3, 4, 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 3, 4, 1, 5, 0)\n    var x1 : List[Int] = moveLast(arg10)\n    var v1 : List[Int] = List(3, 4, 1, 5, 0, 2)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(5, 4, 3, 2, 1)\n    var x2 : List[Int] = moveLast(arg20)\n    var v2 : List[Int] = List(4, 3, 2, 1, 5)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to shift first element to the end of given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/666", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count occurrence of a character in a string.\n     *\n     * >>> countChar(\"Python\", \"o\")\n     * 1\n     * >>> countChar(\"little\", \"t\")\n     * 2\n     * >>> countChar(\"assert\", \"s\")\n     * 2\n     */\n    def countChar(string : String, ch : String) : Int = {\n", "entry_point": "countChar", "test": "\n\n    var arg00 : String = \"\"\"Python\"\"\"\n    var arg01 : String = \"\"\"o\"\"\"\n    var x0 : Int = countChar(arg00, arg01)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"little\"\"\"\n    var arg11 : String = \"\"\"t\"\"\"\n    var x1 : Int = countChar(arg10, arg11)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"assert\"\"\"\n    var arg21 : String = \"\"\"s\"\"\"\n    var x2 : Int = countChar(arg20, arg21)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count occurrence of a character in a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/667", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count number of vowels in the string.\n     *\n     * >>> checkVow(\"corner\", \"AaEeIiOoUu\")\n     * 2\n     * >>> checkVow(\"valid\", \"AaEeIiOoUu\")\n     * 2\n     * >>> checkVow(\"true\", \"AaEeIiOoUu\")\n     * 2\n     */\n    def checkVow(string : String, vowels : String) : Int = {\n", "entry_point": "checkVow", "test": "\n\n    var arg00 : String = \"\"\"corner\"\"\"\n    var arg01 : String = \"\"\"AaEeIiOoUu\"\"\"\n    var x0 : Int = checkVow(arg00, arg01)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"valid\"\"\"\n    var arg11 : String = \"\"\"AaEeIiOoUu\"\"\"\n    var x1 : Int = checkVow(arg10, arg11)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"true\"\"\"\n    var arg21 : String = \"\"\"AaEeIiOoUu\"\"\"\n    var x2 : Int = checkVow(arg20, arg21)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count number of vowels in the string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/668", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to replace multiple occurence of character by single.\n     *\n     * >>> replace(\"peep\", \"e\")\n     * \"pep\"\n     * >>> replace(\"Greek\", \"e\")\n     * \"Grek\"\n     * >>> replace(\"Moon\", \"o\")\n     * \"Mon\"\n     */\n    def replace(string : String, ch : String) : String = {\n", "entry_point": "replace", "test": "\n\n    var arg00 : String = \"\"\"peep\"\"\"\n    var arg01 : String = \"\"\"e\"\"\"\n    var x0 : String = replace(arg00, arg01)\n    var v0 : String = \"\"\"pep\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Greek\"\"\"\n    var arg11 : String = \"\"\"e\"\"\"\n    var x1 : String = replace(arg10, arg11)\n    var v1 : String = \"\"\"Grek\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Moon\"\"\"\n    var arg21 : String = \"\"\"o\"\"\"\n    var x2 : String = replace(arg20, arg21)\n    var v2 : String = \"\"\"Mon\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to replace multiple occurence of character by single.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/669", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether the given ip address is valid or not using regex.\n     *\n     * >>> checkIp(\"192.168.0.1\")\n     * \"Valid IP address\"\n     * >>> checkIp(\"110.234.52.124\")\n     * \"Valid IP address\"\n     * >>> checkIp(\"366.1.2.2\")\n     * \"Invalid IP address\"\n     */\n    def checkIp(ip : String) : String = {\n", "entry_point": "checkIp", "test": "\n\n    var arg00 : String = \"\"\"192.168.0.1\"\"\"\n    var x0 : String = checkIp(arg00)\n    var v0 : String = \"\"\"Valid IP address\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"110.234.52.124\"\"\"\n    var x1 : String = checkIp(arg10)\n    var v1 : String = \"\"\"Valid IP address\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"366.1.2.2\"\"\"\n    var x2 : String = checkIp(arg20)\n    var v2 : String = \"\"\"Invalid IP address\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether the given ip address is valid or not using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/670", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether a sequence of numbers has a decreasing trend or not.\n     *\n     * >>> decreasingTrend(List(-4, -3, -2, -1))\n     * true\n     * >>> decreasingTrend(List(1, 2, 3))\n     * true\n     * >>> decreasingTrend(List(3, 2, 1))\n     * false\n     */\n    def decreasingTrend(nums : List[Int]) : Boolean = {\n", "entry_point": "decreasingTrend", "test": "\n\n    var arg00 : List[Int] = List(-4, -3, -2, -1)\n    var x0 : Boolean = decreasingTrend(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3)\n    var x1 : Boolean = decreasingTrend(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3, 2, 1)\n    var x2 : Boolean = decreasingTrend(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether a sequence of numbers has a decreasing trend or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/671", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to set the right most unset bit.\n     *\n     * >>> setRightMostUnsetBit(21)\n     * 23\n     * >>> setRightMostUnsetBit(11)\n     * 15\n     * >>> setRightMostUnsetBit(15)\n     * 15\n     */\n    def setRightMostUnsetBit(n : Int) : Int = {\n", "entry_point": "setRightMostUnsetBit", "test": "\n\n    var arg00 : Int = 21\n    var x0 : Int = setRightMostUnsetBit(arg00)\n    var v0 : Int = 23\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 11\n    var x1 : Int = setRightMostUnsetBit(arg10)\n    var v1 : Int = 15\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 15\n    var x2 : Int = setRightMostUnsetBit(arg20)\n    var v2 : Int = 15\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to set the right most unset bit.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/672", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find maximum of three numbers.\n     *\n     * >>> maxOfThree(10, 20, 30)\n     * 30\n     * >>> maxOfThree(55, 47, 39)\n     * 55\n     * >>> maxOfThree(10, 49, 30)\n     * 49\n     */\n    def maxOfThree(num1 : Int, num2 : Int, num3 : Int) : Int = {\n", "entry_point": "maxOfThree", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 20\n    var arg02 : Int = 30\n    var x0 : Int = maxOfThree(arg00, arg01, arg02)\n    var v0 : Int = 30\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 55\n    var arg11 : Int = 47\n    var arg12 : Int = 39\n    var x1 : Int = maxOfThree(arg10, arg11, arg12)\n    var v1 : Int = 55\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 10\n    var arg21 : Int = 49\n    var arg22 : Int = 30\n    var x2 : Int = maxOfThree(arg20, arg21, arg22)\n    var v2 : Int = 49\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find maximum of three numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/673", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to convert a list of multiple integers into a single integer.\n     *\n     * >>> convert(List(1, 2, 3))\n     * 123\n     * >>> convert(List(4, 5, 6))\n     * 456\n     * >>> convert(List(7, 8, 9))\n     * 789\n     */\n    def convert(list : List[Int]) : Int = {\n", "entry_point": "convert", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3)\n    var x0 : Int = convert(arg00)\n    var v0 : Int = 123\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 5, 6)\n    var x1 : Int = convert(arg10)\n    var v1 : Int = 456\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(7, 8, 9)\n    var x2 : Int = convert(arg20)\n    var v2 : Int = 789\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to convert a list of multiple integers into a single integer.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/674", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove duplicate words from a given string using collections module.\n     *\n     * >>> removeDuplicate(\"Python Exercises Practice Solution Exercises\")\n     * \"Python Exercises Practice Solution\"\n     * >>> removeDuplicate(\"Python Exercises Practice Solution Python\")\n     * \"Python Exercises Practice Solution\"\n     * >>> removeDuplicate(\"Python Exercises Practice Solution Practice\")\n     * \"Python Exercises Practice Solution\"\n     */\n    def removeDuplicate(string : String) : String = {\n", "entry_point": "removeDuplicate", "test": "\n\n    var arg00 : String = \"\"\"Python Exercises Practice Solution Exercises\"\"\"\n    var x0 : String = removeDuplicate(arg00)\n    var v0 : String = \"\"\"Python Exercises Practice Solution\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Python Exercises Practice Solution Python\"\"\"\n    var x1 : String = removeDuplicate(arg10)\n    var v1 : String = \"\"\"Python Exercises Practice Solution\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Python Exercises Practice Solution Practice\"\"\"\n    var x2 : String = removeDuplicate(arg20)\n    var v2 : String = \"\"\"Python Exercises Practice Solution\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove duplicate words from a given string using collections module.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/675", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to add two integers. however, if the sum is between the given range it will return 20.\n     *\n     * >>> sumNums(2, 10, 11, 20)\n     * 20\n     * >>> sumNums(15, 17, 1, 10)\n     * 32\n     * >>> sumNums(10, 15, 5, 30)\n     * 20\n     */\n    def sumNums(x : Int, y : Int, m : Int, n : Int) : Int = {\n", "entry_point": "sumNums", "test": "\n\n    var arg00 : Int = 2\n    var arg01 : Int = 10\n    var arg02 : Int = 11\n    var arg03 : Int = 20\n    var x0 : Int = sumNums(arg00, arg01, arg02, arg03)\n    var v0 : Int = 20\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 15\n    var arg11 : Int = 17\n    var arg12 : Int = 1\n    var arg13 : Int = 10\n    var x1 : Int = sumNums(arg10, arg11, arg12, arg13)\n    var v1 : Int = 32\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 10\n    var arg21 : Int = 15\n    var arg22 : Int = 5\n    var arg23 : Int = 30\n    var x2 : Int = sumNums(arg20, arg21, arg22, arg23)\n    var v2 : Int = 20\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to add two integers. however, if the sum is between the given range it will return 20.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/676", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove everything except alphanumeric characters from the given string by using regex.\n     *\n     * >>> removeExtraChar(\"**\\\\/\\/Google Android\\/\\/ - 12. \")\n     * \"GoogleAndroid12\"\n     * >>> removeExtraChar(\"****\\\\/\\/Google Flutter/\\/*** - 36. \")\n     * \"GoogleFlutter36\"\n     * >>> removeExtraChar(\"**\\\\/\\/Google Firebase\\/\\/ - 478. \")\n     * \"GoogleFirebase478\"\n     */\n    def removeExtraChar(text1 : String) : String = {\n", "entry_point": "removeExtraChar", "test": "\n\n    var arg00 : String = \"\"\"**\\\\/\\/Google Android\\/\\/ - 12. \"\"\"\n    var x0 : String = removeExtraChar(arg00)\n    var v0 : String = \"\"\"GoogleAndroid12\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"****\\\\/\\/Google Flutter/\\/*** - 36. \"\"\"\n    var x1 : String = removeExtraChar(arg10)\n    var v1 : String = \"\"\"GoogleFlutter36\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"**\\\\/\\/Google Firebase\\/\\/ - 478. \"\"\"\n    var x2 : String = removeExtraChar(arg20)\n    var v2 : String = \"\"\"GoogleFirebase478\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove everything except alphanumeric characters from the given string by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/677", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if the triangle is valid or not.\n     *\n     * >>> validityTriangle(60, 50, 90)\n     * false\n     * >>> validityTriangle(45, 75, 60)\n     * true\n     * >>> validityTriangle(30, 50, 100)\n     * true\n     */\n    def validityTriangle(a : Int, b : Int, c : Int) : Boolean = {\n", "entry_point": "validityTriangle", "test": "\n\n    var arg00 : Int = 60\n    var arg01 : Int = 50\n    var arg02 : Int = 90\n    var x0 : Boolean = validityTriangle(arg00, arg01, arg02)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 45\n    var arg11 : Int = 75\n    var arg12 : Int = 60\n    var x1 : Boolean = validityTriangle(arg10, arg11, arg12)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 30\n    var arg21 : Int = 50\n    var arg22 : Int = 100\n    var x2 : Boolean = validityTriangle(arg20, arg21, arg22)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if the triangle is valid or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/678", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to remove spaces from a given string.\n     *\n     * >>> removeSpaces(\"a b c\")\n     * \"abc\"\n     * >>> removeSpaces(\"1 2 3\")\n     * \"123\"\n     * >>> removeSpaces(\" b c\")\n     * \"bc\"\n     */\n    def removeSpaces(str1 : String) : String = {\n", "entry_point": "removeSpaces", "test": "\n\n    var arg00 : String = \"\"\"a b c\"\"\"\n    var x0 : String = removeSpaces(arg00)\n    var v0 : String = \"\"\"abc\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"1 2 3\"\"\"\n    var x1 : String = removeSpaces(arg10)\n    var v1 : String = \"\"\"123\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\" b c\"\"\"\n    var x2 : String = removeSpaces(arg20)\n    var v2 : String = \"\"\"bc\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to remove spaces from a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/679", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to access dictionary key\u2019s element by index.\n     *\n     * >>> accessKey(Map(\"physics\"->80, \"math\"->90, \"chemistry\"->86), 0)\n     * \"physics\"\n     * >>> accessKey(Map(\"python\"->10, \"java\"->20, \"C++\"->30), 2)\n     * \"C++\"\n     * >>> accessKey(Map(\"program\"->15, \"computer\"->45), 1)\n     * \"computer\"\n     */\n    def accessKey(ditionary : Map[String, Int], key : Int) : String = {\n", "entry_point": "accessKey", "test": "\n\n    var arg00 : Map[String, Int] = Map(\"\"\"physics\"\"\" -> 80, \"\"\"math\"\"\" -> 90, \"\"\"chemistry\"\"\" -> 86)\n    var arg01 : Int = 0\n    var x0 : String = accessKey(arg00, arg01)\n    var v0 : String = \"\"\"physics\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Map[String, Int] = Map(\"\"\"python\"\"\" -> 10, \"\"\"java\"\"\" -> 20, \"\"\"C++\"\"\" -> 30)\n    var arg11 : Int = 2\n    var x1 : String = accessKey(arg10, arg11)\n    var v1 : String = \"\"\"C++\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Map[String, Int] = Map(\"\"\"program\"\"\" -> 15, \"\"\"computer\"\"\" -> 45)\n    var arg21 : Int = 1\n    var x2 : String = accessKey(arg20, arg21)\n    var v2 : String = \"\"\"computer\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to access dictionary key\u2019s element by index.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/680", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether a sequence of numbers has an increasing trend or not.\n     *\n     * >>> increasingTrend(List(1, 2, 3, 4))\n     * true\n     * >>> increasingTrend(List(4, 3, 2, 1))\n     * false\n     * >>> increasingTrend(List(0, 1, 4, 9))\n     * true\n     */\n    def increasingTrend(nums : List[Int]) : Boolean = {\n", "entry_point": "increasingTrend", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4)\n    var x0 : Boolean = increasingTrend(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 3, 2, 1)\n    var x1 : Boolean = increasingTrend(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(0, 1, 4, 9)\n    var x2 : Boolean = increasingTrend(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether a sequence of numbers has an increasing trend or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/681", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the smallest prime divisor of a number.\n     *\n     * >>> smallestDivisor(10)\n     * 2\n     * >>> smallestDivisor(25)\n     * 5\n     * >>> smallestDivisor(31)\n     * 31\n     */\n    def smallestDivisor(n : Int) : Int = {\n", "entry_point": "smallestDivisor", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = smallestDivisor(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 25\n    var x1 : Int = smallestDivisor(arg10)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 31\n    var x2 : Int = smallestDivisor(arg20)\n    var v2 : Int = 31\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the smallest prime divisor of a number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/682", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to multiply two lists using map and lambda function.\n     *\n     * >>> mulList(List(1, 2, 3), List(4, 5, 6))\n     * List(4, 10, 18)\n     * >>> mulList(List(1, 2), List(3, 4))\n     * List(3, 8)\n     * >>> mulList(List(90, 120), List(50, 70))\n     * List(4500, 8400)\n     */\n    def mulList(nums1 : List[Int], nums2 : List[Int]) : List[Int] = {\n", "entry_point": "mulList", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3)\n    var arg01 : List[Int] = List(4, 5, 6)\n    var x0 : List[Int] = mulList(arg00, arg01)\n    var v0 : List[Int] = List(4, 10, 18)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2)\n    var arg11 : List[Int] = List(3, 4)\n    var x1 : List[Int] = mulList(arg10, arg11)\n    var v1 : List[Int] = List(3, 8)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(90, 120)\n    var arg21 : List[Int] = List(50, 70)\n    var x2 : List[Int] = mulList(arg20, arg21)\n    var v2 : List[Int] = List(4500, 8400)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to multiply two lists using map and lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/683", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the given number can be represented by sum of two squares or not.\n     *\n     * >>> sumSquare(25)\n     * true\n     * >>> sumSquare(24)\n     * false\n     * >>> sumSquare(17)\n     * true\n     */\n    def sumSquare(n : Int) : Boolean = {\n", "entry_point": "sumSquare", "test": "\n\n    var arg00 : Int = 25\n    var x0 : Boolean = sumSquare(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 24\n    var x1 : Boolean = sumSquare(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 17\n    var x2 : Boolean = sumSquare(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the given number can be represented by sum of two squares or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/684", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count occurences of a character in a repeated string.\n     *\n     * >>> countChar(\"abcac\", \"a\")\n     * 4\n     * >>> countChar(\"abca\", \"c\")\n     * 2\n     * >>> countChar(\"aba\", \"a\")\n     * 7\n     */\n    def countChar(str : String, x : String) : Int = {\n", "entry_point": "countChar", "test": "\n\n    var arg00 : String = \"\"\"abcac\"\"\"\n    var arg01 : String = \"\"\"a\"\"\"\n    var x0 : Int = countChar(arg00, arg01)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"abca\"\"\"\n    var arg11 : String = \"\"\"c\"\"\"\n    var x1 : Int = countChar(arg10, arg11)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"aba\"\"\"\n    var arg21 : String = \"\"\"a\"\"\"\n    var x2 : Int = countChar(arg20, arg21)\n    var v2 : Int = 7\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count occurences of a character in a repeated string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/685", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find sum of prime numbers between 1 to n.\n     *\n     * >>> sumOfPrimes(10)\n     * 17\n     * >>> sumOfPrimes(20)\n     * 77\n     * >>> sumOfPrimes(5)\n     * 10\n     */\n    def sumOfPrimes(n : Int) : Int = {\n", "entry_point": "sumOfPrimes", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = sumOfPrimes(arg00)\n    var v0 : Int = 17\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 20\n    var x1 : Int = sumOfPrimes(arg10)\n    var v1 : Int = 77\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var x2 : Int = sumOfPrimes(arg20)\n    var v2 : Int = 10\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find sum of prime numbers between 1 to n.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/686", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the frequency of each element in the given list.\n     *\n     * >>> freqElement(List(4, 5, 4, 5, 6, 6, 5, 5, 4))\n     * \"{4: 3, 5: 4, 6: 2}\"\n     * >>> freqElement(List(7, 8, 8, 9, 4, 7, 6, 5, 4))\n     * \"{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}\"\n     * >>> freqElement(List(1, 4, 3, 1, 4, 5, 2, 6, 2, 7))\n     * \"{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}\"\n     */\n    def freqElement(testTup : List[Int]) : String = {\n", "entry_point": "freqElement", "test": "\n\n    var arg00 : List[Int] = List(4, 5, 4, 5, 6, 6, 5, 5, 4)\n    var x0 : String = freqElement(arg00)\n    var v0 : String = \"\"\"{4: 3, 5: 4, 6: 2}\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(7, 8, 8, 9, 4, 7, 6, 5, 4)\n    var x1 : String = freqElement(arg10)\n    var v1 : String = \"\"\"{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 4, 3, 1, 4, 5, 2, 6, 2, 7)\n    var x2 : String = freqElement(arg20)\n    var v2 : String = \"\"\"{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the frequency of each element in the given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/687", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\n     *\n     * >>> recurGcd(12, 14)\n     * 2\n     * >>> recurGcd(13, 17)\n     * 1\n     * >>> recurGcd(9, 3)\n     * 3\n     */\n    def recurGcd(a : Int, b : Int) : Int = {\n", "entry_point": "recurGcd", "test": "\n\n    var arg00 : Int = 12\n    var arg01 : Int = 14\n    var x0 : Int = recurGcd(arg00, arg01)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 13\n    var arg11 : Int = 17\n    var x1 : Int = recurGcd(arg10, arg11)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 9\n    var arg21 : Int = 3\n    var x2 : Int = recurGcd(arg20, arg21)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/688", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to get the length of a complex number.\n     *\n     * >>> lenComplex(3, 4)\n     * 5.0\n     * >>> lenComplex(9, 10)\n     * 13.45362404707371\n     * >>> lenComplex(7, 9)\n     * 11.40175425099138\n     */\n    def lenComplex(a : Int, b : Int) : Double = {\n", "entry_point": "lenComplex", "test": "\n\n    var arg00 : Int = 3\n    var arg01 : Int = 4\n    var x0 : Double = lenComplex(arg00, arg01)\n    var v0 : Double = 5.0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 9\n    var arg11 : Int = 10\n    var x1 : Double = lenComplex(arg10, arg11)\n    var v1 : Double = 13.45362404707371\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 7\n    var arg21 : Int = 9\n    var x2 : Double = lenComplex(arg20, arg21)\n    var v2 : Double = 11.40175425099138\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to get the length of a complex number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/689", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * ## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n     *\n     * >>> minJumps(List(1, 3, 6, 1, 0, 9), 6)\n     * 3\n     * >>> minJumps(List(1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9), 11)\n     * 3\n     * >>> minJumps(List(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), 11)\n     * 10\n     */\n    def minJumps(arr : List[Int], n : Int) : Int = {\n", "entry_point": "minJumps", "test": "\n\n    var arg00 : List[Int] = List(1, 3, 6, 1, 0, 9)\n    var arg01 : Int = 6\n    var x0 : Int = minJumps(arg00, arg01)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9)\n    var arg11 : Int = 11\n    var x1 : Int = minJumps(arg10, arg11)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    var arg21 : Int = 11\n    var x2 : Int = minJumps(arg20, arg21)\n    var v2 : Int = 10\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/690", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to multiply consecutive numbers of a given list.\n     *\n     * >>> mulConsecutiveNums(List(1, 1, 3, 4, 4, 5, 6, 7))\n     * List(1, 3, 12, 16, 20, 30, 42)\n     * >>> mulConsecutiveNums(List(4, 5, 8, 9, 6, 10))\n     * List(20, 40, 72, 54, 60)\n     * >>> mulConsecutiveNums(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n     * List(2, 6, 12, 20, 30, 42, 56, 72, 90)\n     */\n    def mulConsecutiveNums(nums : List[Int]) : List[Int] = {\n", "entry_point": "mulConsecutiveNums", "test": "\n\n    var arg00 : List[Int] = List(1, 1, 3, 4, 4, 5, 6, 7)\n    var x0 : List[Int] = mulConsecutiveNums(arg00)\n    var v0 : List[Int] = List(1, 3, 12, 16, 20, 30, 42)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 5, 8, 9, 6, 10)\n    var x1 : List[Int] = mulConsecutiveNums(arg10)\n    var v1 : List[Int] = List(20, 40, 72, 54, 60)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var x2 : List[Int] = mulConsecutiveNums(arg20)\n    var v2 : List[Int] = List(2, 6, 12, 20, 30, 42, 56, 72, 90)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to multiply consecutive numbers of a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/691", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n     *\n     * >>> groupElement(List(List(6, 5), List(2, 7), List(2, 5), List(8, 7), List(9, 8), List(3, 7)))\n     * Map(5->List(6, 2), 7->List(2, 8, 3), 8->List(9))\n     * >>> groupElement(List(List(7, 6), List(3, 8), List(3, 6), List(9, 8), List(10, 9), List(4, 8)))\n     * Map(6->List(7, 3), 8->List(3, 9, 4), 9->List(10))\n     * >>> groupElement(List(List(8, 7), List(4, 9), List(4, 7), List(10, 9), List(11, 10), List(5, 9)))\n     * Map(7->List(8, 4), 9->List(4, 10, 5), 10->List(11))\n     */\n    def groupElement(testList : List[List[Int]]) : Map[Int, List[Int]] = {\n", "entry_point": "groupElement", "test": "\n\n    var arg00 : List[List[Int]] = List(List(6, 5), List(2, 7), List(2, 5), List(8, 7), List(9, 8), List(3, 7))\n    var x0 : Map[Int, List[Int]] = groupElement(arg00)\n    var v0 : Map[Int, List[Int]] = Map(5 -> List(6, 2), 7 -> List(2, 8, 3), 8 -> List(9))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(7, 6), List(3, 8), List(3, 6), List(9, 8), List(10, 9), List(4, 8))\n    var x1 : Map[Int, List[Int]] = groupElement(arg10)\n    var v1 : Map[Int, List[Int]] = Map(6 -> List(7, 3), 8 -> List(3, 9, 4), 9 -> List(10))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(8, 7), List(4, 9), List(4, 7), List(10, 9), List(11, 10), List(5, 9))\n    var x2 : Map[Int, List[Int]] = groupElement(arg20)\n    var v2 : Map[Int, List[Int]] = Map(7 -> List(8, 4), 9 -> List(4, 10, 5), 10 -> List(11))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/692", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the last two digits in factorial of a given number.\n     *\n     * >>> lastTwoDigits(7)\n     * 40\n     * >>> lastTwoDigits(5)\n     * 20\n     * >>> lastTwoDigits(2)\n     * 2\n     */\n    def lastTwoDigits(n : Int) : Int = {\n", "entry_point": "lastTwoDigits", "test": "\n\n    var arg00 : Int = 7\n    var x0 : Int = lastTwoDigits(arg00)\n    var v0 : Int = 40\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var x1 : Int = lastTwoDigits(arg10)\n    var v1 : Int = 20\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var x2 : Int = lastTwoDigits(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the last two digits in factorial of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/693", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove multiple spaces in a string by using regex.\n     *\n     * >>> removeMultipleSpaces(\"Google      Assistant\")\n     * \"Google Assistant\"\n     * >>> removeMultipleSpaces(\"Quad      Core\")\n     * \"Quad Core\"\n     * >>> removeMultipleSpaces(\"ChromeCast      Built-in\")\n     * \"ChromeCast Built-in\"\n     */\n    def removeMultipleSpaces(text1 : String) : String = {\n", "entry_point": "removeMultipleSpaces", "test": "\n\n    var arg00 : String = \"\"\"Google      Assistant\"\"\"\n    var x0 : String = removeMultipleSpaces(arg00)\n    var v0 : String = \"\"\"Google Assistant\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Quad      Core\"\"\"\n    var x1 : String = removeMultipleSpaces(arg10)\n    var v1 : String = \"\"\"Quad Core\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"ChromeCast      Built-in\"\"\"\n    var x2 : String = removeMultipleSpaces(arg20)\n    var v2 : String = \"\"\"ChromeCast Built-in\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove multiple spaces in a string by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/694", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract unique values from the given dictionary values.\n     *\n     * >>> extractUnique(Map(\"msm\"->List(5, 6, 7, 8), \"is\"->List(10, 11, 7, 5), \"best\"->List(6, 12, 10, 8), \"for\"->List(1, 2, 5)))\n     * List(1, 2, 5, 6, 7, 8, 10, 11, 12)\n     * >>> extractUnique(Map(\"Built\"->List(7, 1, 9, 4), \"for\"->List(11, 21, 36, 14, 9), \"ISP\"->List(4, 1, 21, 39, 47), \"TV\"->List(1, 32, 38)))\n     * List(1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47)\n     * >>> extractUnique(Map(\"F\"->List(11, 13, 14, 17), \"A\"->List(12, 11, 15, 18), \"N\"->List(19, 21, 15, 36), \"G\"->List(37, 36, 35)))\n     * List(11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37)\n     */\n    def extractUnique(testDict : Map[String, List[Int]]) : List[Int] = {\n", "entry_point": "extractUnique", "test": "\n\n    var arg00 : Map[String, List[Int]] = Map(\"\"\"msm\"\"\" -> List(5, 6, 7, 8), \"\"\"is\"\"\" -> List(10, 11, 7, 5), \"\"\"best\"\"\" -> List(6, 12, 10, 8), \"\"\"for\"\"\" -> List(1, 2, 5))\n    var x0 : List[Int] = extractUnique(arg00)\n    var v0 : List[Int] = List(1, 2, 5, 6, 7, 8, 10, 11, 12)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Map[String, List[Int]] = Map(\"\"\"Built\"\"\" -> List(7, 1, 9, 4), \"\"\"for\"\"\" -> List(11, 21, 36, 14, 9), \"\"\"ISP\"\"\" -> List(4, 1, 21, 39, 47), \"\"\"TV\"\"\" -> List(1, 32, 38))\n    var x1 : List[Int] = extractUnique(arg10)\n    var v1 : List[Int] = List(1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Map[String, List[Int]] = Map(\"\"\"F\"\"\" -> List(11, 13, 14, 17), \"\"\"A\"\"\" -> List(12, 11, 15, 18), \"\"\"N\"\"\" -> List(19, 21, 15, 36), \"\"\"G\"\"\" -> List(37, 36, 35))\n    var x2 : List[Int] = extractUnique(arg20)\n    var v2 : List[Int] = List(11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract unique values from the given dictionary values.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/695", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n     *\n     * >>> checkGreater(List(10, 4, 5), List(13, 5, 18))\n     * true\n     * >>> checkGreater(List(1, 2, 3), List(2, 1, 4))\n     * false\n     * >>> checkGreater(List(4, 5, 6), List(5, 6, 7))\n     * true\n     */\n    def checkGreater(testTup1 : List[Int], testTup2 : List[Int]) : Boolean = {\n", "entry_point": "checkGreater", "test": "\n\n    var arg00 : List[Int] = List(10, 4, 5)\n    var arg01 : List[Int] = List(13, 5, 18)\n    var x0 : Boolean = checkGreater(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3)\n    var arg11 : List[Int] = List(2, 1, 4)\n    var x1 : Boolean = checkGreater(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(4, 5, 6)\n    var arg21 : List[Int] = List(5, 6, 7)\n    var x2 : Boolean = checkGreater(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/696", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to zip two given lists of lists.\n     *\n     * >>> zipList(List(List(1, 3), List(5, 7), List(9, 11)), List(List(2, 4), List(6, 8), List(10, 12, 14)))\n     * List(List(1, 3, 2, 4), List(5, 7, 6, 8), List(9, 11, 10, 12, 14))\n     * >>> zipList(List(List(1, 2), List(3, 4), List(5, 6)), List(List(7, 8), List(9, 10), List(11, 12)))\n     * List(List(1, 2, 7, 8), List(3, 4, 9, 10), List(5, 6, 11, 12))\n     * >>> zipList(List(List(\"a\", \"b\"), List(\"c\", \"d\")), List(List(\"e\", \"f\"), List(\"g\", \"h\")))\n     * List(List(\"a\", \"b\", \"e\", \"f\"), List(\"c\", \"d\", \"g\", \"h\"))\n     */\n    def zipList(list1 : List[List[Any]], list2 : List[List[Any]]) : List[List[Any]] = {\n", "entry_point": "zipList", "test": "\n\n    var arg00 : List[List[Any]] = List(List(1, 3), List(5, 7), List(9, 11))\n    var arg01 : List[List[Any]] = List(List(2, 4), List(6, 8), List(10, 12, 14))\n    var x0 : List[List[Any]] = zipList(arg00, arg01)\n    var v0 : List[List[Any]] = List(List(1, 3, 2, 4), List(5, 7, 6, 8), List(9, 11, 10, 12, 14))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(1, 2), List(3, 4), List(5, 6))\n    var arg11 : List[List[Any]] = List(List(7, 8), List(9, 10), List(11, 12))\n    var x1 : List[List[Any]] = zipList(arg10, arg11)\n    var v1 : List[List[Any]] = List(List(1, 2, 7, 8), List(3, 4, 9, 10), List(5, 6, 11, 12))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(\"\"\"a\"\"\", \"\"\"b\"\"\"), List(\"\"\"c\"\"\", \"\"\"d\"\"\"))\n    var arg21 : List[List[Any]] = List(List(\"\"\"e\"\"\", \"\"\"f\"\"\"), List(\"\"\"g\"\"\", \"\"\"h\"\"\"))\n    var x2 : List[List[Any]] = zipList(arg20, arg21)\n    var v2 : List[List[Any]] = List(List(\"\"\"a\"\"\", \"\"\"b\"\"\", \"\"\"e\"\"\", \"\"\"f\"\"\"), List(\"\"\"c\"\"\", \"\"\"d\"\"\", \"\"\"g\"\"\", \"\"\"h\"\"\"))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to zip two given lists of lists.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/697", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find number of even elements in the given list using lambda function.\n     *\n     * >>> countEven(List(1, 2, 3, 5, 7, 8, 9, 10))\n     * 3\n     * >>> countEven(List(10, 15, 14, 13, -18, 12, -20))\n     * 5\n     * >>> countEven(List(1, 2, 4, 8, 9))\n     * 3\n     */\n    def countEven(arrayNums : List[Int]) : Int = {\n", "entry_point": "countEven", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 5, 7, 8, 9, 10)\n    var x0 : Int = countEven(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(10, 15, 14, 13, -18, 12, -20)\n    var x1 : Int = countEven(arg10)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 4, 8, 9)\n    var x2 : Int = countEven(arg20)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find number of even elements in the given list using lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/698", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n     *\n     * >>> sortDictItem(Map(List(5, 6)->3, List(2, 3)->9, List(8, 4)->10, List(6, 4)->12))\n     * Map(List(2, 3)->9, List(6, 4)->12, List(5, 6)->3, List(8, 4)->10)\n     * >>> sortDictItem(Map(List(6, 7)->4, List(3, 4)->10, List(9, 5)->11, List(7, 5)->13))\n     * Map(List(3, 4)->10, List(7, 5)->13, List(6, 7)->4, List(9, 5)->11)\n     * >>> sortDictItem(Map(List(7, 8)->5, List(4, 5)->11, List(10, 6)->12, List(8, 6)->14))\n     * Map(List(4, 5)->11, List(8, 6)->14, List(7, 8)->5, List(10, 6)->12)\n     */\n    def sortDictItem(testDict : Map[List[Int], Int]) : Map[List[Int], Int] = {\n", "entry_point": "sortDictItem", "test": "\n\n    var arg00 : Map[List[Int], Int] = Map(List(5, 6) -> 3, List(2, 3) -> 9, List(8, 4) -> 10, List(6, 4) -> 12)\n    var x0 : Map[List[Int], Int] = sortDictItem(arg00)\n    var v0 : Map[List[Int], Int] = Map(List(2, 3) -> 9, List(6, 4) -> 12, List(5, 6) -> 3, List(8, 4) -> 10)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Map[List[Int], Int] = Map(List(6, 7) -> 4, List(3, 4) -> 10, List(9, 5) -> 11, List(7, 5) -> 13)\n    var x1 : Map[List[Int], Int] = sortDictItem(arg10)\n    var v1 : Map[List[Int], Int] = Map(List(3, 4) -> 10, List(7, 5) -> 13, List(6, 7) -> 4, List(9, 5) -> 11)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Map[List[Int], Int] = Map(List(7, 8) -> 5, List(4, 5) -> 11, List(10, 6) -> 12, List(8, 6) -> 14)\n    var x2 : Map[List[Int], Int] = sortDictItem(arg20)\n    var v2 : Map[List[Int], Int] = Map(List(4, 5) -> 11, List(8, 6) -> 14, List(7, 8) -> 5, List(10, 6) -> 12)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/699", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the minimum number of swaps required to convert one binary string to another.\n     *\n     * >>> minSwaps(\"1101\", \"1110\")\n     * 1\n     * >>> minSwaps(\"1111\", \"0100\")\n     * \"Not Possible\"\n     * >>> minSwaps(\"1110000\", \"0001101\")\n     * 3\n     */\n    def minSwaps(str1 : String, str2 : String) : Any = {\n", "entry_point": "minSwaps", "test": "\n\n    var arg00 : String = \"\"\"1101\"\"\"\n    var arg01 : String = \"\"\"1110\"\"\"\n    var x0 : Any = minSwaps(arg00, arg01)\n    var v0 : Any = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"1111\"\"\"\n    var arg11 : String = \"\"\"0100\"\"\"\n    var x1 : Any = minSwaps(arg10, arg11)\n    var v1 : Any = \"\"\"Not Possible\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"1110000\"\"\"\n    var arg21 : String = \"\"\"0001101\"\"\"\n    var x2 : Any = minSwaps(arg20, arg21)\n    var v2 : Any = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the minimum number of swaps required to convert one binary string to another.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/700", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count the number of elements in a list which are within a specific range.\n     *\n     * >>> countRangeInList(List(10, 20, 30, 40, 40, 40, 70, 80, 99), 40, 100)\n     * 6\n     * >>> countRangeInList(List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"), \"a\", \"e\")\n     * 5\n     * >>> countRangeInList(List(7, 8, 9, 15, 17, 19, 45), 15, 20)\n     * 3\n     */\n    def countRangeInList(li : List[Any], min : Any, max : Any) : Int = {\n", "entry_point": "countRangeInList", "test": "\n\n    var arg00 : List[Any] = List(10, 20, 30, 40, 40, 40, 70, 80, 99)\n    var arg01 : Any = 40\n    var arg02 : Any = 100\n    var x0 : Int = countRangeInList(arg00, arg01, arg02)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(\"\"\"a\"\"\", \"\"\"b\"\"\", \"\"\"c\"\"\", \"\"\"d\"\"\", \"\"\"e\"\"\", \"\"\"f\"\"\")\n    var arg11 : Any = \"\"\"a\"\"\"\n    var arg12 : Any = \"\"\"e\"\"\"\n    var x1 : Int = countRangeInList(arg10, arg11, arg12)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(7, 8, 9, 15, 17, 19, 45)\n    var arg21 : Any = 15\n    var arg22 : Any = 20\n    var x2 : Int = countRangeInList(arg20, arg21, arg22)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count the number of elements in a list which are within a specific range.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/701", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the equilibrium index of the given array.\n     *\n     * >>> equilibriumIndex(List(1, 2, 3, 4, 1, 2, 3))\n     * 3\n     * >>> equilibriumIndex(List(-7, 1, 5, 2, -4, 3, 0))\n     * 3\n     * >>> equilibriumIndex(List(1, 2, 3))\n     * -1\n     */\n    def equilibriumIndex(arr : List[Int]) : Int = {\n", "entry_point": "equilibriumIndex", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 1, 2, 3)\n    var x0 : Int = equilibriumIndex(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(-7, 1, 5, 2, -4, 3, 0)\n    var x1 : Int = equilibriumIndex(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3)\n    var x2 : Int = equilibriumIndex(arg20)\n    var v2 : Int = -1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the equilibrium index of the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/702", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n     *\n     * >>> removals(List(1, 3, 4, 9, 10, 11, 12, 17, 20), 9, 4)\n     * 5\n     * >>> removals(List(1, 5, 6, 2, 8), 5, 2)\n     * 3\n     * >>> removals(List(1, 2, 3, 4, 5, 6), 6, 3)\n     * 2\n     */\n    def removals(arr : List[Int], n : Int, k : Int) : Int = {\n", "entry_point": "removals", "test": "\n\n    var arg00 : List[Int] = List(1, 3, 4, 9, 10, 11, 12, 17, 20)\n    var arg01 : Int = 9\n    var arg02 : Int = 4\n    var x0 : Int = removals(arg00, arg01, arg02)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 5, 6, 2, 8)\n    var arg11 : Int = 5\n    var arg12 : Int = 2\n    var x1 : Int = removals(arg10, arg11, arg12)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4, 5, 6)\n    var arg21 : Int = 6\n    var arg22 : Int = 3\n    var x2 : Int = removals(arg20, arg21, arg22)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/703", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether the given key is present in the dictionary or not.\n     *\n     * >>> isKeyPresent(Map(1->10, 2->20, 3->30, 4->40, 5->50, 6->60), 5)\n     * true\n     * >>> isKeyPresent(Map(1->10, 2->20, 3->30, 4->40, 5->50, 6->60), 6)\n     * true\n     * >>> isKeyPresent(Map(1->10, 2->20, 3->30, 4->40, 5->50, 6->60), 10)\n     * false\n     */\n    def isKeyPresent(d : Map[Int, Int], x : Int) : Boolean = {\n", "entry_point": "isKeyPresent", "test": "\n\n    var arg00 : Map[Int, Int] = Map(1 -> 10, 2 -> 20, 3 -> 30, 4 -> 40, 5 -> 50, 6 -> 60)\n    var arg01 : Int = 5\n    var x0 : Boolean = isKeyPresent(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Map[Int, Int] = Map(1 -> 10, 2 -> 20, 3 -> 30, 4 -> 40, 5 -> 50, 6 -> 60)\n    var arg11 : Int = 6\n    var x1 : Boolean = isKeyPresent(arg10, arg11)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Map[Int, Int] = Map(1 -> 10, 2 -> 20, 3 -> 30, 4 -> 40, 5 -> 50, 6 -> 60)\n    var arg21 : Int = 10\n    var x2 : Boolean = isKeyPresent(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether the given key is present in the dictionary or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/704", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate the harmonic sum of n-1.\n     *\n     * >>> harmonicSum(10)\n     * 2.9289682539682538\n     * >>> harmonicSum(4)\n     * 2.083333333333333\n     * >>> harmonicSum(7)\n     * 2.5928571428571425\n     */\n    def harmonicSum(n : Int) : Double = {\n", "entry_point": "harmonicSum", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Double = harmonicSum(arg00)\n    var v0 : Double = 2.9289682539682538\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var x1 : Double = harmonicSum(arg10)\n    var v1 : Double = 2.083333333333333\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 7\n    var x2 : Double = harmonicSum(arg20)\n    var v2 : Double = 2.5928571428571425\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate the harmonic sum of n-1.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/705", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort a list of lists by length and value.\n     *\n     * >>> sortSublists(List(List(2), List(0), List(1, 3), List(0, 7), List(9, 11), List(13, 15, 17)))\n     * List(List(0), List(2), List(0, 7), List(1, 3), List(9, 11), List(13, 15, 17))\n     * >>> sortSublists(List(List(1), List(2, 3), List(4, 5, 6), List(7), List(10, 11)))\n     * List(List(1), List(7), List(2, 3), List(10, 11), List(4, 5, 6))\n     * >>> sortSublists(List(List(\"python\"), List(\"java\", \"C\", \"C++\"), List(\"DBMS\"), List(\"SQL\", \"HTML\")))\n     * List(List(\"DBMS\"), List(\"python\"), List(\"SQL\", \"HTML\"), List(\"java\", \"C\", \"C++\"))\n     */\n    def sortSublists(list1 : List[List[Any]]) : List[List[Any]] = {\n", "entry_point": "sortSublists", "test": "\n\n    var arg00 : List[List[Any]] = List(List(2), List(0), List(1, 3), List(0, 7), List(9, 11), List(13, 15, 17))\n    var x0 : List[List[Any]] = sortSublists(arg00)\n    var v0 : List[List[Any]] = List(List(0), List(2), List(0, 7), List(1, 3), List(9, 11), List(13, 15, 17))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(1), List(2, 3), List(4, 5, 6), List(7), List(10, 11))\n    var x1 : List[List[Any]] = sortSublists(arg10)\n    var v1 : List[List[Any]] = List(List(1), List(7), List(2, 3), List(10, 11), List(4, 5, 6))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(\"\"\"python\"\"\"), List(\"\"\"java\"\"\", \"\"\"C\"\"\", \"\"\"C++\"\"\"), List(\"\"\"DBMS\"\"\"), List(\"\"\"SQL\"\"\", \"\"\"HTML\"\"\"))\n    var x2 : List[List[Any]] = sortSublists(arg20)\n    var v2 : List[List[Any]] = List(List(\"\"\"DBMS\"\"\"), List(\"\"\"python\"\"\"), List(\"\"\"SQL\"\"\", \"\"\"HTML\"\"\"), List(\"\"\"java\"\"\", \"\"\"C\"\"\", \"\"\"C++\"\"\"))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort a list of lists by length and value.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/706", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find whether an array is subset of another array.\n     *\n     * >>> isSubset(List(11, 1, 13, 21, 3, 7), 6, List(11, 3, 7, 1), 4)\n     * true\n     * >>> isSubset(List(1, 2, 3, 4, 5, 6), 6, List(1, 2, 4), 3)\n     * true\n     * >>> isSubset(List(10, 5, 2, 23, 19), 5, List(19, 5, 3), 3)\n     * false\n     */\n    def isSubset(arr1 : List[Int], m : Int, arr2 : List[Int], n : Int) : Boolean = {\n", "entry_point": "isSubset", "test": "\n\n    var arg00 : List[Int] = List(11, 1, 13, 21, 3, 7)\n    var arg01 : Int = 6\n    var arg02 : List[Int] = List(11, 3, 7, 1)\n    var arg03 : Int = 4\n    var x0 : Boolean = isSubset(arg00, arg01, arg02, arg03)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5, 6)\n    var arg11 : Int = 6\n    var arg12 : List[Int] = List(1, 2, 4)\n    var arg13 : Int = 3\n    var x1 : Boolean = isSubset(arg10, arg11, arg12, arg13)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(10, 5, 2, 23, 19)\n    var arg21 : Int = 5\n    var arg22 : List[Int] = List(19, 5, 3)\n    var arg23 : Int = 3\n    var x2 : Boolean = isSubset(arg20, arg21, arg22, arg23)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find whether an array is subset of another array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/707", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the total set bits from 1 to n.\n     *\n     * >>> countSetBits(16)\n     * 33\n     * >>> countSetBits(2)\n     * 2\n     * >>> countSetBits(14)\n     * 28\n     */\n    def countSetBits(n : Int) : Int = {\n", "entry_point": "countSetBits", "test": "\n\n    var arg00 : Int = 16\n    var x0 : Int = countSetBits(arg00)\n    var v0 : Int = 33\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var x1 : Int = countSetBits(arg10)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 14\n    var x2 : Int = countSetBits(arg20)\n    var v2 : Int = 28\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the total set bits from 1 to n.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/708", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to convert a string to a list.\n     *\n     * >>> convert(\"python program\")\n     * List(\"python\", \"program\")\n     * >>> convert(\"Data Analysis\")\n     * List(\"Data\", \"Analysis\")\n     * >>> convert(\"Hadoop Training\")\n     * List(\"Hadoop\", \"Training\")\n     */\n    def convert(string : String) : List[String] = {\n", "entry_point": "convert", "test": "\n\n    var arg00 : String = \"\"\"python program\"\"\"\n    var x0 : List[String] = convert(arg00)\n    var v0 : List[String] = List(\"\"\"python\"\"\", \"\"\"program\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Data Analysis\"\"\"\n    var x1 : List[String] = convert(arg10)\n    var v1 : List[String] = List(\"\"\"Data\"\"\", \"\"\"Analysis\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Hadoop Training\"\"\"\n    var x2 : List[String] = convert(arg20)\n    var v2 : List[String] = List(\"\"\"Hadoop\"\"\", \"\"\"Training\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to convert a string to a list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/709", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count unique keys for each value present in the tuple.\n     *\n     * >>> getUnique(List(List(3, 4), List(1, 2), List(2, 4), List(8, 2), List(7, 2), List(8, 1), List(9, 1), List(8, 4), List(10, 4)))\n     * \"{4: 4, 2: 3, 1: 2}\"\n     * >>> getUnique(List(List(4, 5), List(2, 3), List(3, 5), List(9, 3), List(8, 3), List(9, 2), List(10, 2), List(9, 5), List(11, 5)))\n     * \"{5: 4, 3: 3, 2: 2}\"\n     * >>> getUnique(List(List(6, 5), List(3, 4), List(2, 6), List(11, 1), List(8, 22), List(8, 11), List(4, 3), List(14, 3), List(11, 6)))\n     * \"{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}\"\n     */\n    def getUnique(testList : List[List[Int]]) : String = {\n", "entry_point": "getUnique", "test": "\n\n    var arg00 : List[List[Int]] = List(List(3, 4), List(1, 2), List(2, 4), List(8, 2), List(7, 2), List(8, 1), List(9, 1), List(8, 4), List(10, 4))\n    var x0 : String = getUnique(arg00)\n    var v0 : String = \"\"\"{4: 4, 2: 3, 1: 2}\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(4, 5), List(2, 3), List(3, 5), List(9, 3), List(8, 3), List(9, 2), List(10, 2), List(9, 5), List(11, 5))\n    var x1 : String = getUnique(arg10)\n    var v1 : String = \"\"\"{5: 4, 3: 3, 2: 2}\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(6, 5), List(3, 4), List(2, 6), List(11, 1), List(8, 22), List(8, 11), List(4, 3), List(14, 3), List(11, 6))\n    var x2 : String = getUnique(arg20)\n    var v2 : String = \"\"\"{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count unique keys for each value present in the tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/710", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to access the initial and last data of the given tuple record.\n     *\n     * >>> frontAndRear(List(10, 4, 5, 6, 7))\n     * List(10, 7)\n     * >>> frontAndRear(List(1, 2, 3, 4, 5))\n     * List(1, 5)\n     * >>> frontAndRear(List(6, 7, 8, 9, 10))\n     * List(6, 10)\n     */\n    def frontAndRear(testTup : List[Int]) : List[Int] = {\n", "entry_point": "frontAndRear", "test": "\n\n    var arg00 : List[Int] = List(10, 4, 5, 6, 7)\n    var x0 : List[Int] = frontAndRear(arg00)\n    var v0 : List[Int] = List(10, 7)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5)\n    var x1 : List[Int] = frontAndRear(arg10)\n    var v1 : List[Int] = List(1, 5)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(6, 7, 8, 9, 10)\n    var x2 : List[Int] = frontAndRear(arg20)\n    var v2 : List[Int] = List(6, 10)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to access the initial and last data of the given tuple record.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/711", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the product of digits of a number at even and odd places is equal or not.\n     *\n     * >>> productEqual(2841)\n     * true\n     * >>> productEqual(1234)\n     * false\n     * >>> productEqual(1212)\n     * false\n     */\n    def productEqual(n : Int) : Boolean = {\n", "entry_point": "productEqual", "test": "\n\n    var arg00 : Int = 2841\n    var x0 : Boolean = productEqual(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1234\n    var x1 : Boolean = productEqual(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1212\n    var x2 : Boolean = productEqual(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the product of digits of a number at even and odd places is equal or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/712", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove duplicates from a list of lists.\n     *\n     * >>> removeDuplicate(List(List(10, 20), List(40), List(30, 56, 25), List(10, 20), List(33), List(40)))\n     * List(List(10, 20), List(30, 56, 25), List(33), List(40))\n     * >>> removeDuplicate(List(\"a\", \"b\", \"a\", \"c\", \"c\"))\n     * List(\"a\", \"b\", \"c\")\n     * >>> removeDuplicate(List(1, 3, 5, 6, 3, 5, 6, 1))\n     * List(1, 3, 5, 6)\n     */\n    def removeDuplicate(list1 : List[Any]) : List[Any] = {\n", "entry_point": "removeDuplicate", "test": "\n\n    var arg00 : List[Any] = List(List(10, 20), List(40), List(30, 56, 25), List(10, 20), List(33), List(40))\n    var x0 : List[Any] = removeDuplicate(arg00)\n    var v0 : List[Any] = List(List(10, 20), List(30, 56, 25), List(33), List(40))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(\"\"\"a\"\"\", \"\"\"b\"\"\", \"\"\"a\"\"\", \"\"\"c\"\"\", \"\"\"c\"\"\")\n    var x1 : List[Any] = removeDuplicate(arg10)\n    var v1 : List[Any] = List(\"\"\"a\"\"\", \"\"\"b\"\"\", \"\"\"c\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(1, 3, 5, 6, 3, 5, 6, 1)\n    var x2 : List[Any] = removeDuplicate(arg20)\n    var v2 : List[Any] = List(1, 3, 5, 6)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove duplicates from a list of lists.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/713", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if the given tuple contains all valid values or not.\n     *\n     * >>> checkValid(List(true, true, true, true))\n     * true\n     * >>> checkValid(List(true, false, true, true))\n     * false\n     * >>> checkValid(List(true, true, true, true))\n     * true\n     */\n    def checkValid(testTup : List[Boolean]) : Boolean = {\n", "entry_point": "checkValid", "test": "\n\n    var arg00 : List[Boolean] = List(true, true, true, true)\n    var x0 : Boolean = checkValid(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Boolean] = List(true, false, true, true)\n    var x1 : Boolean = checkValid(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Boolean] = List(true, true, true, true)\n    var x2 : Boolean = checkValid(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if the given tuple contains all valid values or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/714", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the number of distinct power of prime factor of given number.\n     *\n     * >>> countFac(24)\n     * 3\n     * >>> countFac(12)\n     * 2\n     * >>> countFac(4)\n     * 1\n     */\n    def countFac(n : Int) : Int = {\n", "entry_point": "countFac", "test": "\n\n    var arg00 : Int = 24\n    var x0 : Int = countFac(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 12\n    var x1 : Int = countFac(arg10)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var x2 : Int = countFac(arg20)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the number of distinct power of prime factor of given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/715", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert the given string of integers into a tuple.\n     *\n     * >>> strToTuple(\"1, -5, 4, 6, 7\")\n     * List(1, -5, 4, 6, 7)\n     * >>> strToTuple(\"1, 2, 3, 4, 5\")\n     * List(1, 2, 3, 4, 5)\n     * >>> strToTuple(\"4, 6, 9, 11, 13, 14\")\n     * List(4, 6, 9, 11, 13, 14)\n     */\n    def strToTuple(testStr : String) : List[Int] = {\n", "entry_point": "strToTuple", "test": "\n\n    var arg00 : String = \"\"\"1, -5, 4, 6, 7\"\"\"\n    var x0 : List[Int] = strToTuple(arg00)\n    var v0 : List[Int] = List(1, -5, 4, 6, 7)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"1, 2, 3, 4, 5\"\"\"\n    var x1 : List[Int] = strToTuple(arg10)\n    var v1 : List[Int] = List(1, 2, 3, 4, 5)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"4, 6, 9, 11, 13, 14\"\"\"\n    var x2 : List[Int] = strToTuple(arg20)\n    var v2 : List[Int] = List(4, 6, 9, 11, 13, 14)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert the given string of integers into a tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/716", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the perimeter of a rombus.\n     *\n     * >>> rombusPerimeter(10)\n     * 40\n     * >>> rombusPerimeter(5)\n     * 20\n     * >>> rombusPerimeter(4)\n     * 16\n     */\n    def rombusPerimeter(a : Int) : Int = {\n", "entry_point": "rombusPerimeter", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = rombusPerimeter(arg00)\n    var v0 : Int = 40\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var x1 : Int = rombusPerimeter(arg10)\n    var v1 : Int = 20\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var x2 : Int = rombusPerimeter(arg20)\n    var v2 : Int = 16\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the perimeter of a rombus.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/717", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate the standard deviation.\n     *\n     * >>> sdCalc(List(4, 2, 5, 8, 6))\n     * 2.23606797749979\n     * >>> sdCalc(List(1, 2, 3, 4, 5, 6, 7))\n     * 2.160246899469287\n     * >>> sdCalc(List(5, 9, 10, 15, 6, 4))\n     * 4.070217029430577\n     */\n    def sdCalc(data : List[Int]) : Double = {\n", "entry_point": "sdCalc", "test": "\n\n    var arg00 : List[Int] = List(4, 2, 5, 8, 6)\n    var x0 : Double = sdCalc(arg00)\n    var v0 : Double = 2.23606797749979\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5, 6, 7)\n    var x1 : Double = sdCalc(arg10)\n    var v1 : Double = 2.160246899469287\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(5, 9, 10, 15, 6, 4)\n    var x2 : Double = sdCalc(arg20)\n    var v2 : Double = 4.070217029430577\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate the standard deviation.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/718", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to create a list taking alternate elements from another given list.\n     *\n     * >>> alternateElements(List(\"red\", \"black\", \"white\", \"green\", \"orange\"))\n     * List(\"red\", \"white\", \"orange\")\n     * >>> alternateElements(List(2, 0, 3, 4, 0, 2, 8, 3, 4, 2))\n     * List(2, 3, 0, 8, 4)\n     * >>> alternateElements(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n     * List(1, 3, 5, 7, 9)\n     */\n    def alternateElements(list1 : List[Any]) : List[Any] = {\n", "entry_point": "alternateElements", "test": "\n\n    var arg00 : List[Any] = List(\"\"\"red\"\"\", \"\"\"black\"\"\", \"\"\"white\"\"\", \"\"\"green\"\"\", \"\"\"orange\"\"\")\n    var x0 : List[Any] = alternateElements(arg00)\n    var v0 : List[Any] = List(\"\"\"red\"\"\", \"\"\"white\"\"\", \"\"\"orange\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(2, 0, 3, 4, 0, 2, 8, 3, 4, 2)\n    var x1 : List[Any] = alternateElements(arg10)\n    var v1 : List[Any] = List(2, 3, 0, 8, 4)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var x2 : List[Any] = alternateElements(arg20)\n    var v2 : List[Any] = List(1, 3, 5, 7, 9)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to create a list taking alternate elements from another given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/719", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function that matches a string that has an a followed by zero or more b's.\n     *\n     * >>> textMatch(\"ac\")\n     * \"Found a match!\"\n     * >>> textMatch(\"dc\")\n     * \"Not matched!\"\n     * >>> textMatch(\"abba\")\n     * \"Found a match!\"\n     */\n    def textMatch(text : String) : String = {\n", "entry_point": "textMatch", "test": "\n\n    var arg00 : String = \"\"\"ac\"\"\"\n    var x0 : String = textMatch(arg00)\n    var v0 : String = \"\"\"Found a match!\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"dc\"\"\"\n    var x1 : String = textMatch(arg10)\n    var v1 : String = \"\"\"Not matched!\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"abba\"\"\"\n    var x2 : String = textMatch(arg20)\n    var v2 : String = \"\"\"Found a match!\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function that matches a string that has an a followed by zero or more b's.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/720", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to add a dictionary to the tuple.\n     *\n     * >>> addDictToTuple(List(4, 5, 6), Map(\"MSAM\"->1, \"is\"->2, \"best\"->3))\n     * List(4, 5, 6, Map(\"MSAM\"->1, \"is\"->2, \"best\"->3))\n     * >>> addDictToTuple(List(1, 2, 3), Map(\"UTS\"->2, \"is\"->3, \"Worst\"->4))\n     * List(1, 2, 3, Map(\"UTS\"->2, \"is\"->3, \"Worst\"->4))\n     * >>> addDictToTuple(List(8, 9, 10), Map(\"POS\"->3, \"is\"->4, \"Okay\"->5))\n     * List(8, 9, 10, Map(\"POS\"->3, \"is\"->4, \"Okay\"->5))\n     */\n    def addDictToTuple(testTup : List[Int], testDict : Map[String, Int]) : List[Any] = {\n", "entry_point": "addDictToTuple", "test": "\n\n    var arg00 : List[Int] = List(4, 5, 6)\n    var arg01 : Map[String, Int] = Map(\"\"\"MSAM\"\"\" -> 1, \"\"\"is\"\"\" -> 2, \"\"\"best\"\"\" -> 3)\n    var x0 : List[Any] = addDictToTuple(arg00, arg01)\n    var v0 : List[Any] = List(4, 5, 6, Map(\"\"\"MSAM\"\"\" -> 1, \"\"\"is\"\"\" -> 2, \"\"\"best\"\"\" -> 3))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3)\n    var arg11 : Map[String, Int] = Map(\"\"\"UTS\"\"\" -> 2, \"\"\"is\"\"\" -> 3, \"\"\"Worst\"\"\" -> 4)\n    var x1 : List[Any] = addDictToTuple(arg10, arg11)\n    var v1 : List[Any] = List(1, 2, 3, Map(\"\"\"UTS\"\"\" -> 2, \"\"\"is\"\"\" -> 3, \"\"\"Worst\"\"\" -> 4))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(8, 9, 10)\n    var arg21 : Map[String, Int] = Map(\"\"\"POS\"\"\" -> 3, \"\"\"is\"\"\" -> 4, \"\"\"Okay\"\"\" -> 5)\n    var x2 : List[Any] = addDictToTuple(arg20, arg21)\n    var v2 : List[Any] = List(8, 9, 10, Map(\"\"\"POS\"\"\" -> 3, \"\"\"is\"\"\" -> 4, \"\"\"Okay\"\"\" -> 5))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to add a dictionary to the tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/721", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n     *\n     * >>> maxaverageofpath(List(List(1, 2, 3), List(6, 5, 4), List(7, 3, 9)), 3)\n     * 5.2\n     * >>> maxaverageofpath(List(List(2, 3, 4), List(7, 6, 5), List(8, 4, 10)), 3)\n     * 6.2\n     * >>> maxaverageofpath(List(List(3, 4, 5), List(8, 7, 6), List(9, 5, 11)), 3)\n     * 7.2\n     */\n    def maxaverageofpath(cost : List[List[Int]], n : Int) : Double = {\n", "entry_point": "maxaverageofpath", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 2, 3), List(6, 5, 4), List(7, 3, 9))\n    var arg01 : Int = 3\n    var x0 : Double = maxaverageofpath(arg00, arg01)\n    var v0 : Double = 5.2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(2, 3, 4), List(7, 6, 5), List(8, 4, 10))\n    var arg11 : Int = 3\n    var x1 : Double = maxaverageofpath(arg10, arg11)\n    var v1 : Double = 6.2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(3, 4, 5), List(8, 7, 6), List(9, 5, 11))\n    var arg21 : Int = 3\n    var x2 : Double = maxaverageofpath(arg20, arg21)\n    var v2 : Double = 7.2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/722", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to filter the height and width of students which are stored in a dictionary.\n     *\n     * >>> filterData(Map(\"Cierra Vega\"->List(6.2, 70), \"Alden Cantrell\"->List(5.9, 65), \"Kierra Gentry\"->List(6.0, 68), \"Pierre Cox\"->List(5.8, 66)), 6.0, 70)\n     * Map(\"Cierra Vega\"->List(6.2, 70))\n     * >>> filterData(Map(\"Cierra Vega\"->List(6.2, 70), \"Alden Cantrell\"->List(5.9, 65), \"Kierra Gentry\"->List(6.0, 68), \"Pierre Cox\"->List(5.8, 66)), 5.9, 67)\n     * Map(\"Cierra Vega\"->List(6.2, 70), \"Kierra Gentry\"->List(6.0, 68))\n     * >>> filterData(Map(\"Cierra Vega\"->List(6.2, 70), \"Alden Cantrell\"->List(5.9, 65), \"Kierra Gentry\"->List(6.0, 68), \"Pierre Cox\"->List(5.8, 66)), 5.7, 64)\n     * Map(\"Cierra Vega\"->List(6.2, 70), \"Alden Cantrell\"->List(5.9, 65), \"Kierra Gentry\"->List(6.0, 68), \"Pierre Cox\"->List(5.8, 66))\n     */\n    def filterData(students : Map[String, List[Double]], h : Double, w : Int) : Map[String, List[Double]] = {\n", "entry_point": "filterData", "test": "\n\n    var arg00 : Map[String, List[Double]] = Map(\"\"\"Cierra Vega\"\"\" -> List(6.2, 70), \"\"\"Alden Cantrell\"\"\" -> List(5.9, 65), \"\"\"Kierra Gentry\"\"\" -> List(6.0, 68), \"\"\"Pierre Cox\"\"\" -> List(5.8, 66))\n    var arg01 : Double = 6.0\n    var arg02 : Int = 70\n    var x0 : Map[String, List[Double]] = filterData(arg00, arg01, arg02)\n    var v0 : Map[String, List[Double]] = Map(\"\"\"Cierra Vega\"\"\" -> List(6.2, 70))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Map[String, List[Double]] = Map(\"\"\"Cierra Vega\"\"\" -> List(6.2, 70), \"\"\"Alden Cantrell\"\"\" -> List(5.9, 65), \"\"\"Kierra Gentry\"\"\" -> List(6.0, 68), \"\"\"Pierre Cox\"\"\" -> List(5.8, 66))\n    var arg11 : Double = 5.9\n    var arg12 : Int = 67\n    var x1 : Map[String, List[Double]] = filterData(arg10, arg11, arg12)\n    var v1 : Map[String, List[Double]] = Map(\"\"\"Cierra Vega\"\"\" -> List(6.2, 70), \"\"\"Kierra Gentry\"\"\" -> List(6.0, 68))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Map[String, List[Double]] = Map(\"\"\"Cierra Vega\"\"\" -> List(6.2, 70), \"\"\"Alden Cantrell\"\"\" -> List(5.9, 65), \"\"\"Kierra Gentry\"\"\" -> List(6.0, 68), \"\"\"Pierre Cox\"\"\" -> List(5.8, 66))\n    var arg21 : Double = 5.7\n    var arg22 : Int = 64\n    var x2 : Map[String, List[Double]] = filterData(arg20, arg21, arg22)\n    var v2 : Map[String, List[Double]] = Map(\"\"\"Cierra Vega\"\"\" -> List(6.2, 70), \"\"\"Alden Cantrell\"\"\" -> List(5.9, 65), \"\"\"Kierra Gentry\"\"\" -> List(6.0, 68), \"\"\"Pierre Cox\"\"\" -> List(5.8, 66))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to filter the height and width of students which are stored in a dictionary.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/723", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count the same pair in two given lists using map function.\n     *\n     * >>> countSamePair(List(1, 2, 3, 4, 5, 6, 7, 8), List(2, 2, 3, 1, 2, 6, 7, 9))\n     * 4\n     * >>> countSamePair(List(0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8), List(2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8))\n     * 11\n     * >>> countSamePair(List(2, 4, -6, -9, 11, -12, 14, -5, 17), List(2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8))\n     * 1\n     */\n    def countSamePair(nums1 : List[Int], nums2 : List[Int]) : Int = {\n", "entry_point": "countSamePair", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8)\n    var arg01 : List[Int] = List(2, 2, 3, 1, 2, 6, 7, 9)\n    var x0 : Int = countSamePair(arg00, arg01)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8)\n    var arg11 : List[Int] = List(2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8)\n    var x1 : Int = countSamePair(arg10, arg11)\n    var v1 : Int = 11\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 4, -6, -9, 11, -12, 14, -5, 17)\n    var arg21 : List[Int] = List(2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8)\n    var x2 : Int = countSamePair(arg20, arg21)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count the same pair in two given lists using map function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/724", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate the sum of all digits of the base to the specified power.\n     *\n     * >>> powerBaseSum(2, 100)\n     * 115\n     * >>> powerBaseSum(8, 10)\n     * 37\n     * >>> powerBaseSum(8, 15)\n     * 62\n     */\n    def powerBaseSum(base : Int, power : Int) : Int = {\n", "entry_point": "powerBaseSum", "test": "\n\n    var arg00 : Int = 2\n    var arg01 : Int = 100\n    var x0 : Int = powerBaseSum(arg00, arg01)\n    var v0 : Int = 115\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 8\n    var arg11 : Int = 10\n    var x1 : Int = powerBaseSum(arg10, arg11)\n    var v1 : Int = 37\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 8\n    var arg21 : Int = 15\n    var x2 : Int = powerBaseSum(arg20, arg21)\n    var v2 : Int = 62\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate the sum of all digits of the base to the specified power.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/725", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract values between quotation marks of the given string by using regex.\n     *\n     * >>> extractQuotation(\"Cortex \\\"A53\\\" Based \\\"multi\\\" tasking \\\"Processor\\\"\")\n     * List(\"A53\", \"multi\", \"Processor\")\n     * >>> extractQuotation(\"Cast your \\\"favorite\\\" entertainment \\\"apps\\\"\")\n     * List(\"favorite\", \"apps\")\n     * >>> extractQuotation(\"Watch content \\\"4k Ultra HD\\\" resolution with \\\"HDR 10\\\" Support\")\n     * List(\"4k Ultra HD\", \"HDR 10\")\n     */\n    def extractQuotation(text1 : String) : List[String] = {\n", "entry_point": "extractQuotation", "test": "\n\n    var arg00 : String = \"\"\"Cortex \\\"A53\\\" Based \\\"multi\\\" tasking \\\"Processor\\\"\"\"\"\n    var x0 : List[String] = extractQuotation(arg00)\n    var v0 : List[String] = List(\"\"\"A53\"\"\", \"\"\"multi\"\"\", \"\"\"Processor\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Cast your \\\"favorite\\\" entertainment \\\"apps\\\"\"\"\"\n    var x1 : List[String] = extractQuotation(arg10)\n    var v1 : List[String] = List(\"\"\"favorite\"\"\", \"\"\"apps\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Watch content \\\"4k Ultra HD\\\" resolution with \\\"HDR 10\\\" Support\"\"\"\n    var x2 : List[String] = extractQuotation(arg20)\n    var v2 : List[String] = List(\"\"\"4k Ultra HD\"\"\", \"\"\"HDR 10\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract values between quotation marks of the given string by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/726", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to multiply the adjacent elements of the given tuple.\n     *\n     * >>> multiplyElements(List(1, 5, 7, 8, 10))\n     * List(5, 35, 56, 80)\n     * >>> multiplyElements(List(2, 4, 5, 6, 7))\n     * List(8, 20, 30, 42)\n     * >>> multiplyElements(List(12, 13, 14, 9, 15))\n     * List(156, 182, 126, 135)\n     */\n    def multiplyElements(testTup : List[Int]) : List[Int] = {\n", "entry_point": "multiplyElements", "test": "\n\n    var arg00 : List[Int] = List(1, 5, 7, 8, 10)\n    var x0 : List[Int] = multiplyElements(arg00)\n    var v0 : List[Int] = List(5, 35, 56, 80)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 4, 5, 6, 7)\n    var x1 : List[Int] = multiplyElements(arg10)\n    var v1 : List[Int] = List(8, 20, 30, 42)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(12, 13, 14, 9, 15)\n    var x2 : List[Int] = multiplyElements(arg20)\n    var v2 : List[Int] = List(156, 182, 126, 135)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to multiply the adjacent elements of the given tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/727", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove all characters except letters and numbers using regex\n     *\n     * >>> removeChar(\"123abcjw:, .@! eiw\")\n     * \"123abcjweiw\"\n     * >>> removeChar(\"Hello1234:, ! Howare33u\")\n     * \"Hello1234Howare33u\"\n     * >>> removeChar(\"Cool543Triks@:, Make@987Trips\")\n     * \"Cool543TriksMake987Trips\"\n     */\n    def removeChar(s : String) : String = {\n", "entry_point": "removeChar", "test": "\n\n    var arg00 : String = \"\"\"123abcjw:, .@! eiw\"\"\"\n    var x0 : String = removeChar(arg00)\n    var v0 : String = \"\"\"123abcjweiw\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Hello1234:, ! Howare33u\"\"\"\n    var x1 : String = removeChar(arg10)\n    var v1 : String = \"\"\"Hello1234Howare33u\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Cool543Triks@:, Make@987Trips\"\"\"\n    var x2 : String = removeChar(arg20)\n    var v2 : String = \"\"\"Cool543TriksMake987Trips\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove all characters except letters and numbers using regex", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/728", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sum elements in two lists.\n     *\n     * >>> sumList(List(10, 20, 30), List(15, 25, 35))\n     * List(25, 45, 65)\n     * >>> sumList(List(1, 2, 3), List(5, 6, 7))\n     * List(6, 8, 10)\n     * >>> sumList(List(15, 20, 30), List(15, 45, 75))\n     * List(30, 65, 105)\n     */\n    def sumList(lst1 : List[Int], lst2 : List[Int]) : List[Int] = {\n", "entry_point": "sumList", "test": "\n\n    var arg00 : List[Int] = List(10, 20, 30)\n    var arg01 : List[Int] = List(15, 25, 35)\n    var x0 : List[Int] = sumList(arg00, arg01)\n    var v0 : List[Int] = List(25, 45, 65)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3)\n    var arg11 : List[Int] = List(5, 6, 7)\n    var x1 : List[Int] = sumList(arg10, arg11)\n    var v1 : List[Int] = List(6, 8, 10)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(15, 20, 30)\n    var arg21 : List[Int] = List(15, 45, 75)\n    var x2 : List[Int] = sumList(arg20, arg21)\n    var v2 : List[Int] = List(30, 65, 105)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sum elements in two lists.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/729", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to add two lists using map and lambda function.\n     *\n     * >>> addList(List(1, 2, 3), List(4, 5, 6))\n     * List(5, 7, 9)\n     * >>> addList(List(1, 2), List(3, 4))\n     * List(4, 6)\n     * >>> addList(List(10, 20), List(50, 70))\n     * List(60, 90)\n     */\n    def addList(nums1 : List[Int], nums2 : List[Int]) : List[Int] = {\n", "entry_point": "addList", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3)\n    var arg01 : List[Int] = List(4, 5, 6)\n    var x0 : List[Int] = addList(arg00, arg01)\n    var v0 : List[Int] = List(5, 7, 9)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2)\n    var arg11 : List[Int] = List(3, 4)\n    var x1 : List[Int] = addList(arg10, arg11)\n    var v1 : List[Int] = List(4, 6)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(10, 20)\n    var arg21 : List[Int] = List(50, 70)\n    var x2 : List[Int] = addList(arg20, arg21)\n    var v2 : List[Int] = List(60, 90)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to add two lists using map and lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/730", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove consecutive duplicates of a given list.\n     *\n     * >>> consecutiveDuplicates(List(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4))\n     * List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4)\n     * >>> consecutiveDuplicates(List(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10))\n     * List(10, 15, 19, 18, 17, 26, 17, 18, 10)\n     * >>> consecutiveDuplicates(List(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))\n     * List(\"a\", \"b\", \"c\", \"d\")\n     */\n    def consecutiveDuplicates(nums : List[Any]) : List[Any] = {\n", "entry_point": "consecutiveDuplicates", "test": "\n\n    var arg00 : List[Any] = List(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)\n    var x0 : List[Any] = consecutiveDuplicates(arg00)\n    var v0 : List[Any] = List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)\n    var x1 : List[Any] = consecutiveDuplicates(arg10)\n    var v1 : List[Any] = List(10, 15, 19, 18, 17, 26, 17, 18, 10)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(\"\"\"a\"\"\", \"\"\"a\"\"\", \"\"\"b\"\"\", \"\"\"c\"\"\", \"\"\"d\"\"\", \"\"\"d\"\"\")\n    var x2 : List[Any] = consecutiveDuplicates(arg20)\n    var v2 : List[Any] = List(\"\"\"a\"\"\", \"\"\"b\"\"\", \"\"\"c\"\"\", \"\"\"d\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove consecutive duplicates of a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/731", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the lateral surface area of a cone.\n     *\n     * >>> lateralsurfaceCone(5, 12)\n     * 204.20352248333654\n     * >>> lateralsurfaceCone(10, 15)\n     * 566.3586699569488\n     * >>> lateralsurfaceCone(19, 17)\n     * 1521.8090132193388\n     */\n    def lateralsurfaceCone(r : Int, h : Int) : Double = {\n", "entry_point": "lateralsurfaceCone", "test": "\n\n    var arg00 : Int = 5\n    var arg01 : Int = 12\n    var x0 : Double = lateralsurfaceCone(arg00, arg01)\n    var v0 : Double = 204.20352248333654\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var arg11 : Int = 15\n    var x1 : Double = lateralsurfaceCone(arg10, arg11)\n    var v1 : Double = 566.3586699569488\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 19\n    var arg21 : Int = 17\n    var x2 : Double = lateralsurfaceCone(arg20, arg21)\n    var v2 : Double = 1521.8090132193388\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the lateral surface area of a cone.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/732", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n     *\n     * >>> replaceSpecialchar(\"Python language, Programming language.\")\n     * \"Python:language::Programming:language:\"\n     * >>> replaceSpecialchar(\"a b c,d e f\")\n     * \"a:b:c:d:e:f\"\n     * >>> replaceSpecialchar(\"ram reshma,ram rahim\")\n     * \"ram:reshma:ram:rahim\"\n     */\n    def replaceSpecialchar(text : String) : String = {\n", "entry_point": "replaceSpecialchar", "test": "\n\n    var arg00 : String = \"\"\"Python language, Programming language.\"\"\"\n    var x0 : String = replaceSpecialchar(arg00)\n    var v0 : String = \"\"\"Python:language::Programming:language:\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"a b c,d e f\"\"\"\n    var x1 : String = replaceSpecialchar(arg10)\n    var v1 : String = \"\"\"a:b:c:d:e:f\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"ram reshma,ram rahim\"\"\"\n    var x2 : String = replaceSpecialchar(arg20)\n    var v2 : String = \"\"\"ram:reshma:ram:rahim\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/733", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the index of the first occurrence of a given number in a sorted array.\n     *\n     * >>> findFirstOccurrence(List(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5)\n     * 1\n     * >>> findFirstOccurrence(List(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5)\n     * 2\n     * >>> findFirstOccurrence(List(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6)\n     * 4\n     */\n    def findFirstOccurrence(a : List[Int], x : Int) : Int = {\n", "entry_point": "findFirstOccurrence", "test": "\n\n    var arg00 : List[Int] = List(2, 5, 5, 5, 6, 6, 8, 9, 9, 9)\n    var arg01 : Int = 5\n    var x0 : Int = findFirstOccurrence(arg00, arg01)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 3, 5, 5, 6, 6, 8, 9, 9, 9)\n    var arg11 : Int = 5\n    var x1 : Int = findFirstOccurrence(arg10, arg11)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 4, 1, 5, 6, 6, 8, 9, 9, 9)\n    var arg21 : Int = 6\n    var x2 : Int = findFirstOccurrence(arg20, arg21)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/734", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find sum of products of all possible subarrays.\n     *\n     * >>> sumOfSubarrayProd(List(1, 2, 3), 3)\n     * 20\n     * >>> sumOfSubarrayProd(List(1, 2), 2)\n     * 5\n     * >>> sumOfSubarrayProd(List(1, 2, 3, 4), 4)\n     * 84\n     */\n    def sumOfSubarrayProd(arr : List[Int], n : Int) : Int = {\n", "entry_point": "sumOfSubarrayProd", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3)\n    var arg01 : Int = 3\n    var x0 : Int = sumOfSubarrayProd(arg00, arg01)\n    var v0 : Int = 20\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2)\n    var arg11 : Int = 2\n    var x1 : Int = sumOfSubarrayProd(arg10, arg11)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4)\n    var arg21 : Int = 4\n    var x2 : Int = sumOfSubarrayProd(arg20, arg21)\n    var v2 : Int = 84\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find sum of products of all possible subarrays.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/735", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to toggle bits of the number except the first and the last bit.\n     *\n     * >>> toggleMiddleBits(9)\n     * 15\n     * >>> toggleMiddleBits(10)\n     * 12\n     * >>> toggleMiddleBits(11)\n     * 13\n     */\n    def toggleMiddleBits(n : Int) : Int = {\n", "entry_point": "toggleMiddleBits", "test": "\n\n    var arg00 : Int = 9\n    var x0 : Int = toggleMiddleBits(arg00)\n    var v0 : Int = 15\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var x1 : Int = toggleMiddleBits(arg10)\n    var v1 : Int = 12\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 11\n    var x2 : Int = toggleMiddleBits(arg20)\n    var v2 : Int = 13\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to toggle bits of the number except the first and the last bit.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/736", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to locate the left insertion point for a specified value in sorted order.\n     *\n     * >>> leftInsertion(List(1, 2, 4, 5), 6)\n     * 4\n     * >>> leftInsertion(List(1, 2, 4, 5), 3)\n     * 2\n     * >>> leftInsertion(List(1, 2, 4, 5), 7)\n     * 4\n     */\n    def leftInsertion(a : List[Int], x : Int) : Int = {\n", "entry_point": "leftInsertion", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 4, 5)\n    var arg01 : Int = 6\n    var x0 : Int = leftInsertion(arg00, arg01)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 4, 5)\n    var arg11 : Int = 3\n    var x1 : Int = leftInsertion(arg10, arg11)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 4, 5)\n    var arg21 : Int = 7\n    var x2 : Int = leftInsertion(arg20, arg21)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to locate the left insertion point for a specified value in sorted order.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/737", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether the given string is starting with a vowel or not using regex.\n     *\n     * >>> checkStr(\"annie\")\n     * \"Valid\"\n     * >>> checkStr(\"dawood\")\n     * \"Invalid\"\n     * >>> checkStr(\"Else\")\n     * \"Valid\"\n     */\n    def checkStr(string : String) : String = {\n", "entry_point": "checkStr", "test": "\n\n    var arg00 : String = \"\"\"annie\"\"\"\n    var x0 : String = checkStr(arg00)\n    var v0 : String = \"\"\"Valid\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"dawood\"\"\"\n    var x1 : String = checkStr(arg10)\n    var v1 : String = \"\"\"Invalid\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Else\"\"\"\n    var x2 : String = checkStr(arg20)\n    var v2 : String = \"\"\"Valid\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether the given string is starting with a vowel or not using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/738", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate the geometric sum of n-1.\n     *\n     * >>> geometricSum(7)\n     * 1.9921875\n     * >>> geometricSum(4)\n     * 1.9375\n     * >>> geometricSum(8)\n     * 1.99609375\n     */\n    def geometricSum(n : Int) : Double = {\n", "entry_point": "geometricSum", "test": "\n\n    var arg00 : Int = 7\n    var x0 : Double = geometricSum(arg00)\n    var v0 : Double = 1.9921875\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var x1 : Double = geometricSum(arg10)\n    var v1 : Double = 1.9375\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 8\n    var x2 : Double = geometricSum(arg20)\n    var v2 : Double = 1.99609375\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate the geometric sum of n-1.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/739", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the index of smallest triangular number with n digits.\n     *\n     * >>> findIndex(2)\n     * 4\n     * >>> findIndex(3)\n     * 14\n     * >>> findIndex(4)\n     * 45\n     */\n    def findIndex(n : Int) : Int = {\n", "entry_point": "findIndex", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = findIndex(arg00)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var x1 : Int = findIndex(arg10)\n    var v1 : Int = 14\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var x2 : Int = findIndex(arg20)\n    var v2 : Int = 45\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the index of smallest triangular number with n digits.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/740", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n     *\n     * >>> tupleToDict(List(1, 5, 7, 10, 13, 5))\n     * Map(1->5, 7->10, 13->5)\n     * >>> tupleToDict(List(1, 2, 3, 4, 5, 6))\n     * Map(1->2, 3->4, 5->6)\n     * >>> tupleToDict(List(7, 8, 9, 10, 11, 12))\n     * Map(7->8, 9->10, 11->12)\n     */\n    def tupleToDict(testTup : List[Int]) : Map[Int, Int] = {\n", "entry_point": "tupleToDict", "test": "\n\n    var arg00 : List[Int] = List(1, 5, 7, 10, 13, 5)\n    var x0 : Map[Int, Int] = tupleToDict(arg00)\n    var v0 : Map[Int, Int] = Map(1 -> 5, 7 -> 10, 13 -> 5)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5, 6)\n    var x1 : Map[Int, Int] = tupleToDict(arg10)\n    var v1 : Map[Int, Int] = Map(1 -> 2, 3 -> 4, 5 -> 6)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(7, 8, 9, 10, 11, 12)\n    var x2 : Map[Int, Int] = tupleToDict(arg20)\n    var v2 : Map[Int, Int] = Map(7 -> 8, 9 -> 10, 11 -> 12)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/741", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether all the characters are same or not.\n     *\n     * >>> allCharactersSame(\"python\")\n     * false\n     * >>> allCharactersSame(\"aaa\")\n     * true\n     * >>> allCharactersSame(\"data\")\n     * false\n     */\n    def allCharactersSame(s : String) : Boolean = {\n", "entry_point": "allCharactersSame", "test": "\n\n    var arg00 : String = \"\"\"python\"\"\"\n    var x0 : Boolean = allCharactersSame(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"aaa\"\"\"\n    var x1 : Boolean = allCharactersSame(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"data\"\"\"\n    var x2 : Boolean = allCharactersSame(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether all the characters are same or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/742", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to caluclate the area of a tetrahedron.\n     *\n     * >>> areaTetrahedron(3)\n     * 15.588457268119894\n     * >>> areaTetrahedron(20)\n     * 692.8203230275509\n     * >>> areaTetrahedron(10)\n     * 173.20508075688772\n     */\n    def areaTetrahedron(side : Int) : Double = {\n", "entry_point": "areaTetrahedron", "test": "\n\n    var arg00 : Int = 3\n    var x0 : Double = areaTetrahedron(arg00)\n    var v0 : Double = 15.588457268119894\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 20\n    var x1 : Double = areaTetrahedron(arg10)\n    var v1 : Double = 692.8203230275509\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 10\n    var x2 : Double = areaTetrahedron(arg20)\n    var v2 : Double = 173.20508075688772\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to caluclate the area of a tetrahedron.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/743", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to rotate a given list by specified number of items to the right direction.\n     *\n     * >>> rotateRight(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3, 4)\n     * List(8, 9, 10, 1, 2, 3, 4, 5, 6)\n     * >>> rotateRight(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 2, 2)\n     * List(9, 10, 1, 2, 3, 4, 5, 6, 7, 8)\n     * >>> rotateRight(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 5, 2)\n     * List(6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8)\n     */\n    def rotateRight(list1 : List[Int], m : Int, n : Int) : List[Int] = {\n", "entry_point": "rotateRight", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var arg01 : Int = 3\n    var arg02 : Int = 4\n    var x0 : List[Int] = rotateRight(arg00, arg01, arg02)\n    var v0 : List[Int] = List(8, 9, 10, 1, 2, 3, 4, 5, 6)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var arg11 : Int = 2\n    var arg12 : Int = 2\n    var x1 : List[Int] = rotateRight(arg10, arg11, arg12)\n    var v1 : List[Int] = List(9, 10, 1, 2, 3, 4, 5, 6, 7, 8)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var arg21 : Int = 5\n    var arg22 : Int = 2\n    var x2 : List[Int] = rotateRight(arg20, arg21, arg22)\n    var v2 : List[Int] = List(6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to rotate a given list by specified number of items to the right direction.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/744", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if the given tuple has any null value or not.\n     *\n     * >>> checkNone(List(10, 4, 5, 6, \"none\"))\n     * true\n     * >>> checkNone(List(7, 8, 9, 11, 14))\n     * false\n     * >>> checkNone(List(1, 2, 3, 4, \"none\"))\n     * true\n     */\n    def checkNone(testTup : List[Any]) : Boolean = {\n", "entry_point": "checkNone", "test": "\n\n    var arg00 : List[Any] = List(10, 4, 5, 6, \"none\")\n    var x0 : Boolean = checkNone(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(7, 8, 9, 11, 14)\n    var x1 : Boolean = checkNone(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(1, 2, 3, 4, \"none\")\n    var x2 : Boolean = checkNone(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if the given tuple has any null value or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/745", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find numbers within a given range where every number is divisible by every digit it contains.\n     *\n     * >>> divisibleByDigits(1, 22)\n     * List(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)\n     * >>> divisibleByDigits(1, 15)\n     * List(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)\n     * >>> divisibleByDigits(20, 25)\n     * List(22, 24)\n     */\n    def divisibleByDigits(startnum : Int, endnum : Int) : List[Int] = {\n", "entry_point": "divisibleByDigits", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = 22\n    var x0 : List[Int] = divisibleByDigits(arg00, arg01)\n    var v0 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var arg11 : Int = 15\n    var x1 : List[Int] = divisibleByDigits(arg10, arg11)\n    var v1 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 20\n    var arg21 : Int = 25\n    var x2 : List[Int] = divisibleByDigits(arg20, arg21)\n    var v2 : List[Int] = List(22, 24)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/746", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find area of a sector.\n     *\n     * >>> sectorArea(4, 45)\n     * 6.285714285714286\n     * >>> sectorArea(9, 45)\n     * 31.82142857142857\n     * >>> sectorArea(9, 360)\n     * \"none\"\n     */\n    def sectorArea(r : Int, a : Int) : Any = {\n", "entry_point": "sectorArea", "test": "\n\n    var arg00 : Int = 4\n    var arg01 : Int = 45\n    var x0 : Any = sectorArea(arg00, arg01)\n    var v0 : Any = 6.285714285714286\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 9\n    var arg11 : Int = 45\n    var x1 : Any = sectorArea(arg10, arg11)\n    var v1 : Any = 31.82142857142857\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 9\n    var arg21 : Int = 360\n    var x2 : Any = sectorArea(arg20, arg21)\n    var v2 : Any = \"none\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find area of a sector.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/747", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the longest common subsequence for the given three string sequence.\n     *\n     * >>> lcsOfThree(\"AGGT12\", \"12TXAYB\", \"12XBA\", 6, 7, 5)\n     * 2\n     * >>> lcsOfThree(\"Reels\", \"Reelsfor\", \"ReelsforReels\", 5, 8, 13)\n     * 5\n     * >>> lcsOfThree(\"abcd1e2\", \"bc12ea\", \"bd1ea\", 7, 6, 5)\n     * 3\n     */\n    def lcsOfThree(x : String, y : String, z : String, m : Int, n : Int, o : Int) : Int = {\n", "entry_point": "lcsOfThree", "test": "\n\n    var arg00 : String = \"\"\"AGGT12\"\"\"\n    var arg01 : String = \"\"\"12TXAYB\"\"\"\n    var arg02 : String = \"\"\"12XBA\"\"\"\n    var arg03 : Int = 6\n    var arg04 : Int = 7\n    var arg05 : Int = 5\n    var x0 : Int = lcsOfThree(arg00, arg01, arg02, arg03, arg04, arg05)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Reels\"\"\"\n    var arg11 : String = \"\"\"Reelsfor\"\"\"\n    var arg12 : String = \"\"\"ReelsforReels\"\"\"\n    var arg13 : Int = 5\n    var arg14 : Int = 8\n    var arg15 : Int = 13\n    var x1 : Int = lcsOfThree(arg10, arg11, arg12, arg13, arg14, arg15)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"abcd1e2\"\"\"\n    var arg21 : String = \"\"\"bc12ea\"\"\"\n    var arg22 : String = \"\"\"bd1ea\"\"\"\n    var arg23 : Int = 7\n    var arg24 : Int = 6\n    var arg25 : Int = 5\n    var x2 : Int = lcsOfThree(arg20, arg21, arg22, arg23, arg24, arg25)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the longest common subsequence for the given three string sequence.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/748", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to put spaces between words starting with capital letters in a given string by using regex.\n     *\n     * >>> capitalWordsSpaces(\"Python\")\n     * \"Python\"\n     * >>> capitalWordsSpaces(\"PythonProgrammingExamples\")\n     * \"Python Programming Examples\"\n     * >>> capitalWordsSpaces(\"GetReadyToBeCodingFreak\")\n     * \"Get Ready To Be Coding Freak\"\n     */\n    def capitalWordsSpaces(str1 : String) : String = {\n", "entry_point": "capitalWordsSpaces", "test": "\n\n    var arg00 : String = \"\"\"Python\"\"\"\n    var x0 : String = capitalWordsSpaces(arg00)\n    var v0 : String = \"\"\"Python\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"PythonProgrammingExamples\"\"\"\n    var x1 : String = capitalWordsSpaces(arg10)\n    var v1 : String = \"\"\"Python Programming Examples\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"GetReadyToBeCodingFreak\"\"\"\n    var x2 : String = capitalWordsSpaces(arg20)\n    var v2 : String = \"\"\"Get Ready To Be Coding Freak\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to put spaces between words starting with capital letters in a given string by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/749", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort a given list of strings of numbers numerically.\n     *\n     * >>> sortNumericStrings(List(\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))\n     * List(-500, -12, 0, 4, 7, 12, 45, 100, 200)\n     * >>> sortNumericStrings(List(\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))\n     * List(1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9)\n     * >>> sortNumericStrings(List(\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))\n     * List(1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17)\n     */\n    def sortNumericStrings(numsStr : List[String]) : List[Int] = {\n", "entry_point": "sortNumericStrings", "test": "\n\n    var arg00 : List[String] = List(\"\"\"4\"\"\", \"\"\"12\"\"\", \"\"\"45\"\"\", \"\"\"7\"\"\", \"\"\"0\"\"\", \"\"\"100\"\"\", \"\"\"200\"\"\", \"\"\"-12\"\"\", \"\"\"-500\"\"\")\n    var x0 : List[Int] = sortNumericStrings(arg00)\n    var v0 : List[Int] = List(-500, -12, 0, 4, 7, 12, 45, 100, 200)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"2\"\"\", \"\"\"3\"\"\", \"\"\"8\"\"\", \"\"\"4\"\"\", \"\"\"7\"\"\", \"\"\"9\"\"\", \"\"\"8\"\"\", \"\"\"2\"\"\", \"\"\"6\"\"\", \"\"\"5\"\"\", \"\"\"1\"\"\", \"\"\"6\"\"\", \"\"\"1\"\"\", \"\"\"2\"\"\", \"\"\"3\"\"\", \"\"\"4\"\"\", \"\"\"6\"\"\", \"\"\"9\"\"\", \"\"\"1\"\"\", \"\"\"2\"\"\")\n    var x1 : List[Int] = sortNumericStrings(arg10)\n    var v1 : List[Int] = List(1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"1\"\"\", \"\"\"3\"\"\", \"\"\"5\"\"\", \"\"\"7\"\"\", \"\"\"1\"\"\", \"\"\"3\"\"\", \"\"\"13\"\"\", \"\"\"15\"\"\", \"\"\"17\"\"\", \"\"\"5\"\"\", \"\"\"7 \"\"\", \"\"\"9\"\"\", \"\"\"1\"\"\", \"\"\"11\"\"\")\n    var x2 : List[Int] = sortNumericStrings(arg20)\n    var v2 : List[Int] = List(1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort a given list of strings of numbers numerically.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/750", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to add the given tuple to the given list.\n     *\n     * >>> addTuple(List(5, 6, 7), List(9, 10))\n     * List(5, 6, 7, 9, 10)\n     * >>> addTuple(List(6, 7, 8), List(10, 11))\n     * List(6, 7, 8, 10, 11)\n     * >>> addTuple(List(7, 8, 9), List(11, 12))\n     * List(7, 8, 9, 11, 12)\n     */\n    def addTuple(testList : List[Int], testTup : List[Int]) : List[Int] = {\n", "entry_point": "addTuple", "test": "\n\n    var arg00 : List[Int] = List(5, 6, 7)\n    var arg01 : List[Int] = List(9, 10)\n    var x0 : List[Int] = addTuple(arg00, arg01)\n    var v0 : List[Int] = List(5, 6, 7, 9, 10)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(6, 7, 8)\n    var arg11 : List[Int] = List(10, 11)\n    var x1 : List[Int] = addTuple(arg10, arg11)\n    var v1 : List[Int] = List(6, 7, 8, 10, 11)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(7, 8, 9)\n    var arg21 : List[Int] = List(11, 12)\n    var x2 : List[Int] = addTuple(arg20, arg21)\n    var v2 : List[Int] = List(7, 8, 9, 11, 12)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to add the given tuple to the given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/751", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if the given array represents min heap or not.\n     *\n     * >>> checkMinHeap(List(1, 2, 3, 4, 5, 6), 0)\n     * true\n     * >>> checkMinHeap(List(2, 3, 4, 5, 10, 15), 0)\n     * true\n     * >>> checkMinHeap(List(2, 10, 4, 5, 3, 15), 0)\n     * false\n     */\n    def checkMinHeap(arr : List[Int], i : Int) : Boolean = {\n", "entry_point": "checkMinHeap", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5, 6)\n    var arg01 : Int = 0\n    var x0 : Boolean = checkMinHeap(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 3, 4, 5, 10, 15)\n    var arg11 : Int = 0\n    var x1 : Boolean = checkMinHeap(arg10, arg11)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 10, 4, 5, 3, 15)\n    var arg21 : Int = 0\n    var x2 : Boolean = checkMinHeap(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if the given array represents min heap or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/752", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the nth jacobsthal number.\n     *\n     * >>> jacobsthalNum(5)\n     * 11\n     * >>> jacobsthalNum(2)\n     * 1\n     * >>> jacobsthalNum(4)\n     * 5\n     */\n    def jacobsthalNum(n : Int) : Int = {\n", "entry_point": "jacobsthalNum", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Int = jacobsthalNum(arg00)\n    var v0 : Int = 11\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var x1 : Int = jacobsthalNum(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var x2 : Int = jacobsthalNum(arg20)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the nth jacobsthal number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/753", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find minimum k records from tuple list.\n     *\n     * >>> minK(List(List(\"Manjeet\", 10), List(\"Akshat\", 4), List(\"Akash\", 2), List(\"Nikhil\", 8)), 2)\n     * List(List(\"Akash\", 2), List(\"Akshat\", 4))\n     * >>> minK(List(List(\"Sanjeev\", 11), List(\"Angat\", 5), List(\"Akash\", 3), List(\"Nepin\", 9)), 3)\n     * List(List(\"Akash\", 3), List(\"Angat\", 5), List(\"Nepin\", 9))\n     * >>> minK(List(List(\"tanmay\", 14), List(\"Amer\", 11), List(\"Ayesha\", 9), List(\"SKD\", 16)), 1)\n     * List(List(\"Ayesha\", 9))\n     */\n    def minK(testList : List[List[Any]], k : Int) : List[List[Any]] = {\n", "entry_point": "minK", "test": "\n\n    var arg00 : List[List[Any]] = List(List(\"\"\"Manjeet\"\"\", 10), List(\"\"\"Akshat\"\"\", 4), List(\"\"\"Akash\"\"\", 2), List(\"\"\"Nikhil\"\"\", 8))\n    var arg01 : Int = 2\n    var x0 : List[List[Any]] = minK(arg00, arg01)\n    var v0 : List[List[Any]] = List(List(\"\"\"Akash\"\"\", 2), List(\"\"\"Akshat\"\"\", 4))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(\"\"\"Sanjeev\"\"\", 11), List(\"\"\"Angat\"\"\", 5), List(\"\"\"Akash\"\"\", 3), List(\"\"\"Nepin\"\"\", 9))\n    var arg11 : Int = 3\n    var x1 : List[List[Any]] = minK(arg10, arg11)\n    var v1 : List[List[Any]] = List(List(\"\"\"Akash\"\"\", 3), List(\"\"\"Angat\"\"\", 5), List(\"\"\"Nepin\"\"\", 9))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(\"\"\"tanmay\"\"\", 14), List(\"\"\"Amer\"\"\", 11), List(\"\"\"Ayesha\"\"\", 9), List(\"\"\"SKD\"\"\", 16))\n    var arg21 : Int = 1\n    var x2 : List[List[Any]] = minK(arg20, arg21)\n    var v2 : List[List[Any]] = List(List(\"\"\"Ayesha\"\"\", 9))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find minimum k records from tuple list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/754", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find common index elements from three lists.\n     *\n     * >>> extractIndexList(List(1, 1, 3, 4, 5, 6, 7), List(0, 1, 2, 3, 4, 5, 7), List(0, 1, 2, 3, 4, 5, 7))\n     * List(1, 7)\n     * >>> extractIndexList(List(1, 1, 3, 4, 5, 6, 7), List(0, 1, 2, 3, 4, 6, 5), List(0, 1, 2, 3, 4, 6, 7))\n     * List(1, 6)\n     * >>> extractIndexList(List(1, 1, 3, 4, 6, 5, 6), List(0, 1, 2, 3, 4, 5, 7), List(0, 1, 2, 3, 4, 5, 7))\n     * List(1, 5)\n     */\n    def extractIndexList(l1 : List[Int], l2 : List[Int], l3 : List[Int]) : List[Int] = {\n", "entry_point": "extractIndexList", "test": "\n\n    var arg00 : List[Int] = List(1, 1, 3, 4, 5, 6, 7)\n    var arg01 : List[Int] = List(0, 1, 2, 3, 4, 5, 7)\n    var arg02 : List[Int] = List(0, 1, 2, 3, 4, 5, 7)\n    var x0 : List[Int] = extractIndexList(arg00, arg01, arg02)\n    var v0 : List[Int] = List(1, 7)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 1, 3, 4, 5, 6, 7)\n    var arg11 : List[Int] = List(0, 1, 2, 3, 4, 6, 5)\n    var arg12 : List[Int] = List(0, 1, 2, 3, 4, 6, 7)\n    var x1 : List[Int] = extractIndexList(arg10, arg11, arg12)\n    var v1 : List[Int] = List(1, 6)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 1, 3, 4, 6, 5, 6)\n    var arg21 : List[Int] = List(0, 1, 2, 3, 4, 5, 7)\n    var arg22 : List[Int] = List(0, 1, 2, 3, 4, 5, 7)\n    var x2 : List[Int] = extractIndexList(arg20, arg21, arg22)\n    var v2 : List[Int] = List(1, 5)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find common index elements from three lists.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/755", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the second smallest number in a list.\n     *\n     * >>> secondSmallest(List(1, 2, -8, -2, 0, -2))\n     * -2\n     * >>> secondSmallest(List(1, 1, -0.5, 0, 2, -2, -2))\n     * -0.5\n     * >>> secondSmallest(List(2, 2))\n     * \"none\"\n     */\n    def secondSmallest(numbers : List[Double]) : Any = {\n", "entry_point": "secondSmallest", "test": "\n\n    var arg00 : List[Double] = List(1, 2, -8, -2, 0, -2)\n    var x0 : Any = secondSmallest(arg00)\n    var v0 : Any = -2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Double] = List(1, 1, -0.5, 0, 2, -2, -2)\n    var x1 : Any = secondSmallest(arg10)\n    var v1 : Any = -0.5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Double] = List(2, 2)\n    var x2 : Any = secondSmallest(arg20)\n    var v2 : Any = \"none\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the second smallest number in a list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/756", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function that matches a string that has an a followed by zero or one 'b'.\n     *\n     * >>> textMatchZeroOne(\"ac\")\n     * \"Found a match!\"\n     * >>> textMatchZeroOne(\"dc\")\n     * \"Not matched!\"\n     * >>> textMatchZeroOne(\"abbbba\")\n     * \"Found a match!\"\n     */\n    def textMatchZeroOne(text : String) : String = {\n", "entry_point": "textMatchZeroOne", "test": "\n\n    var arg00 : String = \"\"\"ac\"\"\"\n    var x0 : String = textMatchZeroOne(arg00)\n    var v0 : String = \"\"\"Found a match!\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"dc\"\"\"\n    var x1 : String = textMatchZeroOne(arg10)\n    var v1 : String = \"\"\"Not matched!\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"abbbba\"\"\"\n    var x2 : String = textMatchZeroOne(arg20)\n    var v2 : String = \"\"\"Found a match!\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function that matches a string that has an a followed by zero or one 'b'.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/757", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count the pairs of reverse strings in the given string list.\n     *\n     * >>> countReversePairs(List(\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"))\n     * \"2\"\n     * >>> countReversePairs(List(\"geeks\", \"best\", \"for\", \"skeeg\"))\n     * \"1\"\n     * >>> countReversePairs(List(\"makes\", \"best\", \"sekam\", \"for\", \"rof\"))\n     * \"2\"\n     */\n    def countReversePairs(testList : List[String]) : String = {\n", "entry_point": "countReversePairs", "test": "\n\n    var arg00 : List[String] = List(\"\"\"julia\"\"\", \"\"\"best\"\"\", \"\"\"tseb\"\"\", \"\"\"for\"\"\", \"\"\"ailuj\"\"\")\n    var x0 : String = countReversePairs(arg00)\n    var v0 : String = \"\"\"2\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"geeks\"\"\", \"\"\"best\"\"\", \"\"\"for\"\"\", \"\"\"skeeg\"\"\")\n    var x1 : String = countReversePairs(arg10)\n    var v1 : String = \"\"\"1\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"makes\"\"\", \"\"\"best\"\"\", \"\"\"sekam\"\"\", \"\"\"for\"\"\", \"\"\"rof\"\"\")\n    var x2 : String = countReversePairs(arg20)\n    var v2 : String = \"\"\"2\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count the pairs of reverse strings in the given string list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/758", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count number of unique lists within a list.\n     *\n     * >>> uniqueSublists(List(List(1, 3), List(5, 7), List(1, 3), List(13, 15, 17), List(5, 7), List(9, 11)))\n     * Map(List(1, 3)->2, List(5, 7)->2, List(13, 15, 17)->1, List(9, 11)->1)\n     * >>> uniqueSublists(List(List(\"green\", \"orange\"), List(\"black\"), List(\"green\", \"orange\"), List(\"white\")))\n     * Map(List(\"green\", \"orange\")->2, List(\"black\")->1, List(\"white\")->1)\n     * >>> uniqueSublists(List(List(10, 20, 30, 40), List(60, 70, 50, 50), List(90, 100, 200)))\n     * Map(List(10, 20, 30, 40)->1, List(60, 70, 50, 50)->1, List(90, 100, 200)->1)\n     */\n    def uniqueSublists(list1 : List[List[Any]]) : Map[List[Any], Int] = {\n", "entry_point": "uniqueSublists", "test": "\n\n    var arg00 : List[List[Any]] = List(List(1, 3), List(5, 7), List(1, 3), List(13, 15, 17), List(5, 7), List(9, 11))\n    var x0 : Map[List[Any], Int] = uniqueSublists(arg00)\n    var v0 : Map[List[Any], Int] = Map(List(1, 3) -> 2, List(5, 7) -> 2, List(13, 15, 17) -> 1, List(9, 11) -> 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(\"\"\"green\"\"\", \"\"\"orange\"\"\"), List(\"\"\"black\"\"\"), List(\"\"\"green\"\"\", \"\"\"orange\"\"\"), List(\"\"\"white\"\"\"))\n    var x1 : Map[List[Any], Int] = uniqueSublists(arg10)\n    var v1 : Map[List[Any], Int] = Map(List(\"\"\"green\"\"\", \"\"\"orange\"\"\") -> 2, List(\"\"\"black\"\"\") -> 1, List(\"\"\"white\"\"\") -> 1)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(10, 20, 30, 40), List(60, 70, 50, 50), List(90, 100, 200))\n    var x2 : Map[List[Any], Int] = uniqueSublists(arg20)\n    var v2 : Map[List[Any], Int] = Map(List(10, 20, 30, 40) -> 1, List(60, 70, 50, 50) -> 1, List(90, 100, 200) -> 1)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count number of unique lists within a list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/759", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check a decimal with a precision of 2.\n     *\n     * >>> isDecimal(\"123.11\")\n     * true\n     * >>> isDecimal(\"e666.86\")\n     * false\n     * >>> isDecimal(\"3.124587\")\n     * false\n     */\n    def isDecimal(num : String) : Boolean = {\n", "entry_point": "isDecimal", "test": "\n\n    var arg00 : String = \"\"\"123.11\"\"\"\n    var x0 : Boolean = isDecimal(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"e666.86\"\"\"\n    var x1 : Boolean = isDecimal(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"3.124587\"\"\"\n    var x2 : Boolean = isDecimal(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check a decimal with a precision of 2.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/760", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether an array contains only one distinct element or not.\n     *\n     * >>> uniqueElement(List(1, 1, 1), 3)\n     * \"YES\"\n     * >>> uniqueElement(List(1, 2, 1, 2), 4)\n     * \"NO\"\n     * >>> uniqueElement(List(1, 2, 3, 4, 5), 5)\n     * \"NO\"\n     */\n    def uniqueElement(arr : List[Int], n : Int) : String = {\n", "entry_point": "uniqueElement", "test": "\n\n    var arg00 : List[Int] = List(1, 1, 1)\n    var arg01 : Int = 3\n    var x0 : String = uniqueElement(arg00, arg01)\n    var v0 : String = \"\"\"YES\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 1, 2)\n    var arg11 : Int = 4\n    var x1 : String = uniqueElement(arg10, arg11)\n    var v1 : String = \"\"\"NO\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4, 5)\n    var arg21 : Int = 5\n    var x2 : String = uniqueElement(arg20, arg21)\n    var v2 : String = \"\"\"NO\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether an array contains only one distinct element or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/761", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to caluclate arc length of an angle.\n     *\n     * >>> arcLength(9, 45)\n     * 3.5357142857142856\n     * >>> arcLength(9, 480)\n     * \"none\"\n     * >>> arcLength(5, 270)\n     * 11.785714285714285\n     */\n    def arcLength(d : Int, a : Int) : Any = {\n", "entry_point": "arcLength", "test": "\n\n    var arg00 : Int = 9\n    var arg01 : Int = 45\n    var x0 : Any = arcLength(arg00, arg01)\n    var v0 : Any = 3.5357142857142856\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 9\n    var arg11 : Int = 480\n    var x1 : Any = arcLength(arg10, arg11)\n    var v1 : Any = \"none\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var arg21 : Int = 270\n    var x2 : Any = arcLength(arg20, arg21)\n    var v2 : Any = 11.785714285714285\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to caluclate arc length of an angle.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/762", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether the given month number contains 30 days or not.\n     *\n     * >>> checkMonthnumberNumber(6)\n     * true\n     * >>> checkMonthnumberNumber(2)\n     * false\n     * >>> checkMonthnumberNumber(12)\n     * false\n     */\n    def checkMonthnumberNumber(monthnum3 : Int) : Boolean = {\n", "entry_point": "checkMonthnumberNumber", "test": "\n\n    var arg00 : Int = 6\n    var x0 : Boolean = checkMonthnumberNumber(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var x1 : Boolean = checkMonthnumberNumber(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 12\n    var x2 : Boolean = checkMonthnumberNumber(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether the given month number contains 30 days or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/763", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the minimum difference between any two elements in a given array.\n     *\n     * >>> findMinDiff(List(1, 5, 3, 19, 18, 25), 6)\n     * 1\n     * >>> findMinDiff(List(4, 3, 2, 6), 4)\n     * 1\n     * >>> findMinDiff(List(30, 5, 20, 9), 4)\n     * 4\n     */\n    def findMinDiff(arr : List[Int], n : Int) : Int = {\n", "entry_point": "findMinDiff", "test": "\n\n    var arg00 : List[Int] = List(1, 5, 3, 19, 18, 25)\n    var arg01 : Int = 6\n    var x0 : Int = findMinDiff(arg00, arg01)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 3, 2, 6)\n    var arg11 : Int = 4\n    var x1 : Int = findMinDiff(arg10, arg11)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(30, 5, 20, 9)\n    var arg21 : Int = 4\n    var x2 : Int = findMinDiff(arg20, arg21)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the minimum difference between any two elements in a given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/764", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count numeric values in a given string.\n     *\n     * >>> numberCtr(\"program2bedone\")\n     * 1\n     * >>> numberCtr(\"3wonders\")\n     * 1\n     * >>> numberCtr(\"123\")\n     * 3\n     */\n    def numberCtr(str : String) : Int = {\n", "entry_point": "numberCtr", "test": "\n\n    var arg00 : String = \"\"\"program2bedone\"\"\"\n    var x0 : Int = numberCtr(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"3wonders\"\"\"\n    var x1 : Int = numberCtr(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"123\"\"\"\n    var x2 : Int = numberCtr(arg20)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count numeric values in a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/765", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find nth polite number.\n     *\n     * >>> isPolite(7)\n     * 11\n     * >>> isPolite(4)\n     * 7\n     * >>> isPolite(9)\n     * 13\n     */\n    def isPolite(n : Int) : Int = {\n", "entry_point": "isPolite", "test": "\n\n    var arg00 : Int = 7\n    var x0 : Int = isPolite(arg00)\n    var v0 : Int = 11\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var x1 : Int = isPolite(arg10)\n    var v1 : Int = 7\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 9\n    var x2 : Int = isPolite(arg20)\n    var v2 : Int = 13\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find nth polite number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/766", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to iterate over all pairs of consecutive items in a given list.\n     *\n     * >>> pairWise(List(1, 1, 2, 3, 3, 4, 4, 5))\n     * List(List(1, 1), List(1, 2), List(2, 3), List(3, 3), List(3, 4), List(4, 4), List(4, 5))\n     * >>> pairWise(List(1, 5, 7, 9, 10))\n     * List(List(1, 5), List(5, 7), List(7, 9), List(9, 10))\n     * >>> pairWise(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n     * List(List(1, 2), List(2, 3), List(3, 4), List(4, 5), List(5, 6), List(6, 7), List(7, 8), List(8, 9), List(9, 10))\n     */\n    def pairWise(l1 : List[Int]) : List[List[Int]] = {\n", "entry_point": "pairWise", "test": "\n\n    var arg00 : List[Int] = List(1, 1, 2, 3, 3, 4, 4, 5)\n    var x0 : List[List[Int]] = pairWise(arg00)\n    var v0 : List[List[Int]] = List(List(1, 1), List(1, 2), List(2, 3), List(3, 3), List(3, 4), List(4, 4), List(4, 5))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 5, 7, 9, 10)\n    var x1 : List[List[Int]] = pairWise(arg10)\n    var v1 : List[List[Int]] = List(List(1, 5), List(5, 7), List(7, 9), List(9, 10))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var x2 : List[List[Int]] = pairWise(arg20)\n    var v2 : List[List[Int]] = List(List(1, 2), List(2, 3), List(3, 4), List(4, 5), List(5, 6), List(6, 7), List(7, 8), List(8, 9), List(9, 10))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to iterate over all pairs of consecutive items in a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/767", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n     *\n     * >>> getPairsCount(List(1, 1, 1, 1), 4, 2)\n     * 6\n     * >>> getPairsCount(List(1, 5, 7, -1, 5), 5, 6)\n     * 3\n     * >>> getPairsCount(List(1, -2, 3), 3, 1)\n     * 1\n     */\n    def getPairsCount(arr : List[Int], n : Int, sum : Int) : Int = {\n", "entry_point": "getPairsCount", "test": "\n\n    var arg00 : List[Int] = List(1, 1, 1, 1)\n    var arg01 : Int = 4\n    var arg02 : Int = 2\n    var x0 : Int = getPairsCount(arg00, arg01, arg02)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 5, 7, -1, 5)\n    var arg11 : Int = 5\n    var arg12 : Int = 6\n    var x1 : Int = getPairsCount(arg10, arg11, arg12)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, -2, 3)\n    var arg21 : Int = 3\n    var arg22 : Int = 1\n    var x2 : Int = getPairsCount(arg20, arg21, arg22)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the number of pairs whose sum is equal to \u2018sum\u2019.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/768", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check for odd parity of a given number.\n     *\n     * >>> checkOddParity(13)\n     * true\n     * >>> checkOddParity(21)\n     * true\n     * >>> checkOddParity(18)\n     * false\n     */\n    def checkOddParity(x : Int) : Boolean = {\n", "entry_point": "checkOddParity", "test": "\n\n    var arg00 : Int = 13\n    var x0 : Boolean = checkOddParity(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 21\n    var x1 : Boolean = checkOddParity(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 18\n    var x2 : Boolean = checkOddParity(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check for odd parity of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/769", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to get the difference between two lists.\n     *\n     * >>> diff(List(10, 15, 20, 25, 30, 35, 40), List(25, 40, 35))\n     * List(10, 20, 30, 15)\n     * >>> diff(List(1, 2, 3, 4, 5), List(6, 7, 1))\n     * List(2, 3, 4, 5, 6, 7)\n     * >>> diff(List(1, 2, 3), List(6, 7, 1))\n     * List(2, 3, 6, 7)\n     */\n    def diff(li1 : List[Int], li2 : List[Int]) : List[Int] = {\n", "entry_point": "diff", "test": "\n\n    var arg00 : List[Int] = List(10, 15, 20, 25, 30, 35, 40)\n    var arg01 : List[Int] = List(25, 40, 35)\n    var x0 : List[Int] = diff(arg00, arg01)\n    var v0 : List[Int] = List(10, 20, 30, 15)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5)\n    var arg11 : List[Int] = List(6, 7, 1)\n    var x1 : List[Int] = diff(arg10, arg11)\n    var v1 : List[Int] = List(2, 3, 4, 5, 6, 7)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3)\n    var arg21 : List[Int] = List(6, 7, 1)\n    var x2 : List[Int] = diff(arg20, arg21)\n    var v2 : List[Int] = List(2, 3, 6, 7)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to get the difference between two lists.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/770", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of fourth power of first n odd natural numbers.\n     *\n     * >>> oddNumSum(2)\n     * 82\n     * >>> oddNumSum(3)\n     * 707\n     * >>> oddNumSum(4)\n     * 3108\n     */\n    def oddNumSum(n : Int) : Int = {\n", "entry_point": "oddNumSum", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = oddNumSum(arg00)\n    var v0 : Int = 82\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var x1 : Int = oddNumSum(arg10)\n    var v1 : Int = 707\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var x2 : Int = oddNumSum(arg20)\n    var v2 : Int = 3108\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of fourth power of first n odd natural numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/771", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if the given expression is balanced or not.\n     *\n     * >>> checkExpression(\"{()}[{}]\")\n     * true\n     * >>> checkExpression(\"{()}[{]\")\n     * false\n     * >>> checkExpression(\"{()}[{}][]({})\")\n     * true\n     */\n    def checkExpression(exp : String) : Boolean = {\n", "entry_point": "checkExpression", "test": "\n\n    var arg00 : String = \"\"\"{()}[{}]\"\"\"\n    var x0 : Boolean = checkExpression(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"{()}[{]\"\"\"\n    var x1 : Boolean = checkExpression(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"{()}[{}][]({})\"\"\"\n    var x2 : Boolean = checkExpression(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if the given expression is balanced or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/772", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove all the words with k length in the given string.\n     *\n     * >>> removeLength(\"The person is most value tet\", 3)\n     * \"person is most value\"\n     * >>> removeLength(\"If you told me about this ok\", 4)\n     * \"If you me about ok\"\n     * >>> removeLength(\"Forces of darkeness is come into the play\", 4)\n     * \"Forces of darkeness is the\"\n     */\n    def removeLength(testStr : String, k : Int) : String = {\n", "entry_point": "removeLength", "test": "\n\n    var arg00 : String = \"\"\"The person is most value tet\"\"\"\n    var arg01 : Int = 3\n    var x0 : String = removeLength(arg00, arg01)\n    var v0 : String = \"\"\"person is most value\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"If you told me about this ok\"\"\"\n    var arg11 : Int = 4\n    var x1 : String = removeLength(arg10, arg11)\n    var v1 : String = \"\"\"If you me about ok\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Forces of darkeness is come into the play\"\"\"\n    var arg21 : Int = 4\n    var x2 : String = removeLength(arg20, arg21)\n    var v2 : String = \"\"\"Forces of darkeness is the\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove all the words with k length in the given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/773", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the occurrence and position of the substrings within a string.\n     *\n     * >>> occuranceSubstring(\"python programming, python language\", \"python\")\n     * List(\"python\", 0, 6)\n     * >>> occuranceSubstring(\"python programming,programming language\", \"programming\")\n     * List(\"programming\", 7, 18)\n     * >>> occuranceSubstring(\"python programming,programming language\", \"language\")\n     * List(\"language\", 31, 39)\n     */\n    def occuranceSubstring(text : String, pattern : String) : List[Any] = {\n", "entry_point": "occuranceSubstring", "test": "\n\n    var arg00 : String = \"\"\"python programming, python language\"\"\"\n    var arg01 : String = \"\"\"python\"\"\"\n    var x0 : List[Any] = occuranceSubstring(arg00, arg01)\n    var v0 : List[Any] = List(\"\"\"python\"\"\", 0, 6)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"python programming,programming language\"\"\"\n    var arg11 : String = \"\"\"programming\"\"\"\n    var x1 : List[Any] = occuranceSubstring(arg10, arg11)\n    var v1 : List[Any] = List(\"\"\"programming\"\"\", 7, 18)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"python programming,programming language\"\"\"\n    var arg21 : String = \"\"\"language\"\"\"\n    var x2 : List[Any] = occuranceSubstring(arg20, arg21)\n    var v2 : List[Any] = List(\"\"\"language\"\"\", 31, 39)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the occurrence and position of the substrings within a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/774", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if the string is a valid email address or not using regex.\n     *\n     * >>> checkEmail(\"ankitrai326@gmail.com\")\n     * \"Valid Email\"\n     * >>> checkEmail(\"my.ownsite@ourearth.org\")\n     * \"Valid Email\"\n     * >>> checkEmail(\"ankitaoie326.com\")\n     * \"Invalid Email\"\n     */\n    def checkEmail(email : String) : String = {\n", "entry_point": "checkEmail", "test": "\n\n    var arg00 : String = \"\"\"ankitrai326@gmail.com\"\"\"\n    var x0 : String = checkEmail(arg00)\n    var v0 : String = \"\"\"Valid Email\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"my.ownsite@ourearth.org\"\"\"\n    var x1 : String = checkEmail(arg10)\n    var v1 : String = \"\"\"Valid Email\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"ankitaoie326.com\"\"\"\n    var x2 : String = checkEmail(arg20)\n    var v2 : String = \"\"\"Invalid Email\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if the string is a valid email address or not using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/775", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether every odd index contains odd numbers of a given list.\n     *\n     * >>> oddPosition(List(2, 1, 4, 3, 6, 7, 6, 3))\n     * true\n     * >>> oddPosition(List(4, 1, 2))\n     * true\n     * >>> oddPosition(List(1, 2, 3))\n     * false\n     */\n    def oddPosition(nums : List[Int]) : Boolean = {\n", "entry_point": "oddPosition", "test": "\n\n    var arg00 : List[Int] = List(2, 1, 4, 3, 6, 7, 6, 3)\n    var x0 : Boolean = oddPosition(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 1, 2)\n    var x1 : Boolean = oddPosition(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3)\n    var x2 : Boolean = oddPosition(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether every odd index contains odd numbers of a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/776", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count those characters which have vowels as their neighbors in the given string.\n     *\n     * >>> countVowels(\"bestinstareels\")\n     * 7\n     * >>> countVowels(\"partofthejourneyistheend\")\n     * 12\n     * >>> countVowels(\"amazonprime\")\n     * 5\n     */\n    def countVowels(testStr : String) : Int = {\n", "entry_point": "countVowels", "test": "\n\n    var arg00 : String = \"\"\"bestinstareels\"\"\"\n    var x0 : Int = countVowels(arg00)\n    var v0 : Int = 7\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"partofthejourneyistheend\"\"\"\n    var x1 : Int = countVowels(arg10)\n    var v1 : Int = 12\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"amazonprime\"\"\"\n    var x2 : Int = countVowels(arg20)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count those characters which have vowels as their neighbors in the given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/777", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of non-repeated elements in a given array.\n     *\n     * >>> findSum(List(1, 2, 3, 1, 1, 4, 5, 6), 8)\n     * 21\n     * >>> findSum(List(1, 10, 9, 4, 2, 10, 10, 45, 4), 9)\n     * 71\n     * >>> findSum(List(12, 10, 9, 45, 2, 10, 10, 45, 10), 9)\n     * 78\n     */\n    def findSum(arr : List[Int], n : Int) : Int = {\n", "entry_point": "findSum", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 1, 1, 4, 5, 6)\n    var arg01 : Int = 8\n    var x0 : Int = findSum(arg00, arg01)\n    var v0 : Int = 21\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 10, 9, 4, 2, 10, 10, 45, 4)\n    var arg11 : Int = 9\n    var x1 : Int = findSum(arg10, arg11)\n    var v1 : Int = 71\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(12, 10, 9, 45, 2, 10, 10, 45, 10)\n    var arg21 : Int = 9\n    var x2 : Int = findSum(arg20, arg21)\n    var v2 : Int = 78\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of non-repeated elements in a given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/778", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to pack consecutive duplicates of a given list elements into sublists.\n     *\n     * >>> packConsecutiveDuplicates(List(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4))\n     * List(List(0, 0), List(1), List(2), List(3), List(4, 4), List(5), List(6, 6, 6), List(7), List(8), List(9), List(4, 4))\n     * >>> packConsecutiveDuplicates(List(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10))\n     * List(List(10, 10), List(15), List(19), List(18, 18), List(17), List(26, 26), List(17), List(18), List(10))\n     * >>> packConsecutiveDuplicates(List(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))\n     * List(List(\"a\", \"a\"), List(\"b\"), List(\"c\"), List(\"d\", \"d\"))\n     */\n    def packConsecutiveDuplicates(list1 : List[Any]) : List[List[Any]] = {\n", "entry_point": "packConsecutiveDuplicates", "test": "\n\n    var arg00 : List[Any] = List(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)\n    var x0 : List[List[Any]] = packConsecutiveDuplicates(arg00)\n    var v0 : List[List[Any]] = List(List(0, 0), List(1), List(2), List(3), List(4, 4), List(5), List(6, 6, 6), List(7), List(8), List(9), List(4, 4))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)\n    var x1 : List[List[Any]] = packConsecutiveDuplicates(arg10)\n    var v1 : List[List[Any]] = List(List(10, 10), List(15), List(19), List(18, 18), List(17), List(26, 26), List(17), List(18), List(10))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(\"\"\"a\"\"\", \"\"\"a\"\"\", \"\"\"b\"\"\", \"\"\"c\"\"\", \"\"\"d\"\"\", \"\"\"d\"\"\")\n    var x2 : List[List[Any]] = packConsecutiveDuplicates(arg20)\n    var v2 : List[List[Any]] = List(List(\"\"\"a\"\"\", \"\"\"a\"\"\"), List(\"\"\"b\"\"\"), List(\"\"\"c\"\"\"), List(\"\"\"d\"\"\", \"\"\"d\"\"\"))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/779", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count the number of unique lists within a list.\n     *\n     * >>> uniqueSublists(List(List(1, 3), List(5, 7), List(1, 3), List(13, 15, 17), List(5, 7), List(9, 11)))\n     * Map(List(1, 3)->2, List(5, 7)->2, List(13, 15, 17)->1, List(9, 11)->1)\n     * >>> uniqueSublists(List(List(\"green\", \"orange\"), List(\"black\"), List(\"green\", \"orange\"), List(\"white\")))\n     * Map(List(\"green\", \"orange\")->2, List(\"black\")->1, List(\"white\")->1)\n     * >>> uniqueSublists(List(List(1, 2), List(3, 4), List(4, 5), List(6, 7)))\n     * Map(List(1, 2)->1, List(3, 4)->1, List(4, 5)->1, List(6, 7)->1)\n     */\n    def uniqueSublists(list1 : List[List[Any]]) : Map[List[Any], Int] = {\n", "entry_point": "uniqueSublists", "test": "\n\n    var arg00 : List[List[Any]] = List(List(1, 3), List(5, 7), List(1, 3), List(13, 15, 17), List(5, 7), List(9, 11))\n    var x0 : Map[List[Any], Int] = uniqueSublists(arg00)\n    var v0 : Map[List[Any], Int] = Map(List(1, 3) -> 2, List(5, 7) -> 2, List(13, 15, 17) -> 1, List(9, 11) -> 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(\"\"\"green\"\"\", \"\"\"orange\"\"\"), List(\"\"\"black\"\"\"), List(\"\"\"green\"\"\", \"\"\"orange\"\"\"), List(\"\"\"white\"\"\"))\n    var x1 : Map[List[Any], Int] = uniqueSublists(arg10)\n    var v1 : Map[List[Any], Int] = Map(List(\"\"\"green\"\"\", \"\"\"orange\"\"\") -> 2, List(\"\"\"black\"\"\") -> 1, List(\"\"\"white\"\"\") -> 1)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(1, 2), List(3, 4), List(4, 5), List(6, 7))\n    var x2 : Map[List[Any], Int] = uniqueSublists(arg20)\n    var v2 : Map[List[Any], Int] = Map(List(1, 2) -> 1, List(3, 4) -> 1, List(4, 5) -> 1, List(6, 7) -> 1)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count the number of unique lists within a list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/780", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the combinations of sums with tuples in the given tuple list.\n     *\n     * >>> findCombinations(List(List(2, 4), List(6, 7), List(5, 1), List(6, 10)))\n     * List(List(8, 11), List(7, 5), List(8, 14), List(11, 8), List(12, 17), List(11, 11))\n     * >>> findCombinations(List(List(3, 5), List(7, 8), List(6, 2), List(7, 11)))\n     * List(List(10, 13), List(9, 7), List(10, 16), List(13, 10), List(14, 19), List(13, 13))\n     * >>> findCombinations(List(List(4, 6), List(8, 9), List(7, 3), List(8, 12)))\n     * List(List(12, 15), List(11, 9), List(12, 18), List(15, 12), List(16, 21), List(15, 15))\n     */\n    def findCombinations(testList : List[List[Int]]) : List[List[Int]] = {\n", "entry_point": "findCombinations", "test": "\n\n    var arg00 : List[List[Int]] = List(List(2, 4), List(6, 7), List(5, 1), List(6, 10))\n    var x0 : List[List[Int]] = findCombinations(arg00)\n    var v0 : List[List[Int]] = List(List(8, 11), List(7, 5), List(8, 14), List(11, 8), List(12, 17), List(11, 11))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(3, 5), List(7, 8), List(6, 2), List(7, 11))\n    var x1 : List[List[Int]] = findCombinations(arg10)\n    var v1 : List[List[Int]] = List(List(10, 13), List(9, 7), List(10, 16), List(13, 10), List(14, 19), List(13, 13))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(4, 6), List(8, 9), List(7, 3), List(8, 12))\n    var x2 : List[List[Int]] = findCombinations(arg20)\n    var v2 : List[List[Int]] = List(List(12, 15), List(11, 9), List(12, 18), List(15, 12), List(16, 21), List(15, 15))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the combinations of sums with tuples in the given tuple list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/781", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the count of divisors is even or odd.\n     *\n     * >>> countDivisors(10)\n     * \"Even\"\n     * >>> countDivisors(100)\n     * \"Odd\"\n     * >>> countDivisors(125)\n     * \"Even\"\n     */\n    def countDivisors(n : Int) : String = {\n", "entry_point": "countDivisors", "test": "\n\n    var arg00 : Int = 10\n    var x0 : String = countDivisors(arg00)\n    var v0 : String = \"\"\"Even\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 100\n    var x1 : String = countDivisors(arg10)\n    var v1 : String = \"\"\"Odd\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 125\n    var x2 : String = countDivisors(arg20)\n    var v2 : String = \"\"\"Even\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the count of divisors is even or odd.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/782", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of all odd length subarrays.\n     *\n     * >>> oddLengthSum(List(1, 2, 4))\n     * 14\n     * >>> oddLengthSum(List(1, 2, 1, 2))\n     * 15\n     * >>> oddLengthSum(List(1, 7))\n     * 8\n     */\n    def oddLengthSum(arr : List[Int]) : Int = {\n", "entry_point": "oddLengthSum", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 4)\n    var x0 : Int = oddLengthSum(arg00)\n    var v0 : Int = 14\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 1, 2)\n    var x1 : Int = oddLengthSum(arg10)\n    var v1 : Int = 15\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 7)\n    var x2 : Int = oddLengthSum(arg20)\n    var v2 : Int = 8\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of all odd length subarrays.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/783", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert rgb color to hsv color.\n     *\n     * >>> rgbToHsv(255, 255, 255)\n     * List(0, 0.0, 100.0)\n     * >>> rgbToHsv(0, 215, 0)\n     * List(120.0, 100.0, 84.31372549019608)\n     * >>> rgbToHsv(10, 215, 110)\n     * List(149.26829268292684, 95.34883720930233, 84.31372549019608)\n     */\n    def rgbToHsv(r : Int, g : Int, b : Int) : List[Double] = {\n", "entry_point": "rgbToHsv", "test": "\n\n    var arg00 : Int = 255\n    var arg01 : Int = 255\n    var arg02 : Int = 255\n    var x0 : List[Double] = rgbToHsv(arg00, arg01, arg02)\n    var v0 : List[Double] = List(0, 0.0, 100.0)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 0\n    var arg11 : Int = 215\n    var arg12 : Int = 0\n    var x1 : List[Double] = rgbToHsv(arg10, arg11, arg12)\n    var v1 : List[Double] = List(120.0, 100.0, 84.31372549019608)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 10\n    var arg21 : Int = 215\n    var arg22 : Int = 110\n    var x2 : List[Double] = rgbToHsv(arg20, arg21, arg22)\n    var v2 : List[Double] = List(149.26829268292684, 95.34883720930233, 84.31372549019608)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert rgb color to hsv color.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/784", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the product of first even and odd number of a given list.\n     *\n     * >>> mulEvenOdd(List(1, 3, 5, 7, 4, 1, 6, 8))\n     * 4\n     * >>> mulEvenOdd(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n     * 2\n     * >>> mulEvenOdd(List(1, 5, 7, 9, 10))\n     * 10\n     */\n    def mulEvenOdd(list1 : List[Int]) : Int = {\n", "entry_point": "mulEvenOdd", "test": "\n\n    var arg00 : List[Int] = List(1, 3, 5, 7, 4, 1, 6, 8)\n    var x0 : Int = mulEvenOdd(arg00)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var x1 : Int = mulEvenOdd(arg10)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 5, 7, 9, 10)\n    var x2 : Int = mulEvenOdd(arg20)\n    var v2 : Int = 10\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the product of first even and odd number of a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/785", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert tuple string to integer tuple.\n     *\n     * >>> tupleStrInt(\"(7, 8, 9)\")\n     * List(7, 8, 9)\n     * >>> tupleStrInt(\"(1, 2, 3)\")\n     * List(1, 2, 3)\n     * >>> tupleStrInt(\"(4, 5, 6)\")\n     * List(4, 5, 6)\n     */\n    def tupleStrInt(testStr : String) : List[Int] = {\n", "entry_point": "tupleStrInt", "test": "\n\n    var arg00 : String = \"\"\"(7, 8, 9)\"\"\"\n    var x0 : List[Int] = tupleStrInt(arg00)\n    var v0 : List[Int] = List(7, 8, 9)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"(1, 2, 3)\"\"\"\n    var x1 : List[Int] = tupleStrInt(arg10)\n    var v1 : List[Int] = List(1, 2, 3)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"(4, 5, 6)\"\"\"\n    var x2 : List[Int] = tupleStrInt(arg20)\n    var v2 : List[Int] = List(4, 5, 6)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert tuple string to integer tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/786", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to locate the right insertion point for a specified value in sorted order.\n     *\n     * >>> rightInsertion(List(1, 2, 4, 5), 6)\n     * 4\n     * >>> rightInsertion(List(1, 2, 4, 5), 3)\n     * 2\n     * >>> rightInsertion(List(1, 2, 4, 5), 7)\n     * 4\n     */\n    def rightInsertion(a : List[Int], x : Int) : Int = {\n", "entry_point": "rightInsertion", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 4, 5)\n    var arg01 : Int = 6\n    var x0 : Int = rightInsertion(arg00, arg01)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 4, 5)\n    var arg11 : Int = 3\n    var x1 : Int = rightInsertion(arg10, arg11)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 4, 5)\n    var arg21 : Int = 7\n    var x2 : Int = rightInsertion(arg20, arg21)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to locate the right insertion point for a specified value in sorted order.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/787", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function that matches a string that has an a followed by three 'b'.\n     *\n     * >>> textMatchThree(\"ac\")\n     * \"Not matched!\"\n     * >>> textMatchThree(\"dc\")\n     * \"Not matched!\"\n     * >>> textMatchThree(\"abbbba\")\n     * \"Found a match!\"\n     */\n    def textMatchThree(text : String) : String = {\n", "entry_point": "textMatchThree", "test": "\n\n    var arg00 : String = \"\"\"ac\"\"\"\n    var x0 : String = textMatchThree(arg00)\n    var v0 : String = \"\"\"Not matched!\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"dc\"\"\"\n    var x1 : String = textMatchThree(arg10)\n    var v1 : String = \"\"\"Not matched!\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"abbbba\"\"\"\n    var x2 : String = textMatchThree(arg20)\n    var v2 : String = \"\"\"Found a match!\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function that matches a string that has an a followed by three 'b'.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/788", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to create a new tuple from the given string and list.\n     *\n     * >>> newTuple(List(\"WEB\", \"is\"), \"best\")\n     * List(\"WEB\", \"is\", \"best\")\n     * >>> newTuple(List(\"We\", \"are\"), \"Developers\")\n     * List(\"We\", \"are\", \"Developers\")\n     * >>> newTuple(List(\"Part\", \"is\"), \"Wrong\")\n     * List(\"Part\", \"is\", \"Wrong\")\n     */\n    def newTuple(testList : List[String], testStr : String) : List[String] = {\n", "entry_point": "newTuple", "test": "\n\n    var arg00 : List[String] = List(\"\"\"WEB\"\"\", \"\"\"is\"\"\")\n    var arg01 : String = \"\"\"best\"\"\"\n    var x0 : List[String] = newTuple(arg00, arg01)\n    var v0 : List[String] = List(\"\"\"WEB\"\"\", \"\"\"is\"\"\", \"\"\"best\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"We\"\"\", \"\"\"are\"\"\")\n    var arg11 : String = \"\"\"Developers\"\"\"\n    var x1 : List[String] = newTuple(arg10, arg11)\n    var v1 : List[String] = List(\"\"\"We\"\"\", \"\"\"are\"\"\", \"\"\"Developers\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"Part\"\"\", \"\"\"is\"\"\")\n    var arg21 : String = \"\"\"Wrong\"\"\"\n    var x2 : List[String] = newTuple(arg20, arg21)\n    var v2 : List[String] = List(\"\"\"Part\"\"\", \"\"\"is\"\"\", \"\"\"Wrong\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to create a new tuple from the given string and list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/789", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate the perimeter of a regular polygon.\n     *\n     * >>> perimeterPolygon(4, 20)\n     * 80\n     * >>> perimeterPolygon(10, 15)\n     * 150\n     * >>> perimeterPolygon(9, 7)\n     * 63\n     */\n    def perimeterPolygon(s : Int, l : Int) : Int = {\n", "entry_point": "perimeterPolygon", "test": "\n\n    var arg00 : Int = 4\n    var arg01 : Int = 20\n    var x0 : Int = perimeterPolygon(arg00, arg01)\n    var v0 : Int = 80\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var arg11 : Int = 15\n    var x1 : Int = perimeterPolygon(arg10, arg11)\n    var v1 : Int = 150\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 9\n    var arg21 : Int = 7\n    var x2 : Int = perimeterPolygon(arg20, arg21)\n    var v2 : Int = 63\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate the perimeter of a regular polygon.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/790", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether every even index contains even numbers of a given list.\n     *\n     * >>> evenPosition(List(3, 2, 1))\n     * false\n     * >>> evenPosition(List(1, 2, 3))\n     * false\n     * >>> evenPosition(List(2, 1, 4))\n     * true\n     */\n    def evenPosition(nums : List[Int]) : Boolean = {\n", "entry_point": "evenPosition", "test": "\n\n    var arg00 : List[Int] = List(3, 2, 1)\n    var x0 : Boolean = evenPosition(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3)\n    var x1 : Boolean = evenPosition(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 1, 4)\n    var x2 : Boolean = evenPosition(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether every even index contains even numbers of a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/791", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove the nested record from the given tuple.\n     *\n     * >>> removeNested(List(1, 5, 7, List(4, 6), 10))\n     * List(1, 5, 7, 10)\n     * >>> removeNested(List(2, 6, 8, List(5, 7), 11))\n     * List(2, 6, 8, 11)\n     * >>> removeNested(List(3, 7, 9, List(6, 8), 12))\n     * List(3, 7, 9, 12)\n     */\n    def removeNested(testTup : List[Any]) : List[Int] = {\n", "entry_point": "removeNested", "test": "\n\n    var arg00 : List[Any] = List(1, 5, 7, List(4, 6), 10)\n    var x0 : List[Int] = removeNested(arg00)\n    var v0 : List[Int] = List(1, 5, 7, 10)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(2, 6, 8, List(5, 7), 11)\n    var x1 : List[Int] = removeNested(arg10)\n    var v1 : List[Int] = List(2, 6, 8, 11)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(3, 7, 9, List(6, 8), 12)\n    var x2 : List[Int] = removeNested(arg20)\n    var v2 : List[Int] = List(3, 7, 9, 12)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove the nested record from the given tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/792", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the number of lists in a given number of lists.\n     *\n     * >>> countList(List(List(1, 3), List(5, 7), List(9, 11), List(13, 15, 17)))\n     * 4\n     * >>> countList(List(List(1, 2), List(2, 3), List(4, 5)))\n     * 3\n     * >>> countList(List(List(1, 0), List(2, 0)))\n     * 2\n     */\n    def countList(inputList : List[List[Int]]) : Int = {\n", "entry_point": "countList", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 3), List(5, 7), List(9, 11), List(13, 15, 17))\n    var x0 : Int = countList(arg00)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1, 2), List(2, 3), List(4, 5))\n    var x1 : Int = countList(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(1, 0), List(2, 0))\n    var x2 : Int = countList(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the number of lists in a given number of lists.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/793", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the last position of an element in a sorted array.\n     *\n     * >>> last(List(1, 2, 3), 1, 3)\n     * 0\n     * >>> last(List(1, 1, 1, 2, 3, 4), 1, 6)\n     * 2\n     * >>> last(List(2, 3, 2, 3, 6, 8, 9), 3, 8)\n     * 3\n     */\n    def last(arr : List[Int], x : Int, n : Int) : Int = {\n", "entry_point": "last", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3)\n    var arg01 : Int = 1\n    var arg02 : Int = 3\n    var x0 : Int = last(arg00, arg01, arg02)\n    var v0 : Int = 0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 1, 1, 2, 3, 4)\n    var arg11 : Int = 1\n    var arg12 : Int = 6\n    var x1 : Int = last(arg10, arg11, arg12)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 3, 2, 3, 6, 8, 9)\n    var arg21 : Int = 3\n    var arg22 : Int = 8\n    var x2 : Int = last(arg20, arg21, arg22)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the last position of an element in a sorted array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/794", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n     *\n     * >>> textStartaEndb(\"aabbbb\")\n     * \"Found a match!\"\n     * >>> textStartaEndb(\"aabAbbbc\")\n     * \"Not matched!\"\n     * >>> textStartaEndb(\"accddbbjjj\")\n     * \"Not matched!\"\n     */\n    def textStartaEndb(text : String) : String = {\n", "entry_point": "textStartaEndb", "test": "\n\n    var arg00 : String = \"\"\"aabbbb\"\"\"\n    var x0 : String = textStartaEndb(arg00)\n    var v0 : String = \"\"\"Found a match!\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"aabAbbbc\"\"\"\n    var x1 : String = textStartaEndb(arg10)\n    var v1 : String = \"\"\"Not matched!\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"accddbbjjj\"\"\"\n    var x2 : String = textStartaEndb(arg20)\n    var v2 : String = \"\"\"Not matched!\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/795", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n     *\n     * >>> cheapItems(List(Map(\"name\"->\"Item-1\", \"price\"->101.1), Map(\"name\"->\"Item-2\", \"price\"->555.22)), 1)\n     * List(Map(\"name\"->\"Item-1\", \"price\"->101.1))\n     * >>> cheapItems(List(Map(\"name\"->\"Item-1\", \"price\"->101.1), Map(\"name\"->\"Item-2\", \"price\"->555.22)), 2)\n     * List(Map(\"name\"->\"Item-1\", \"price\"->101.1), Map(\"name\"->\"Item-2\", \"price\"->555.22))\n     * >>> cheapItems(List(Map(\"name\"->\"Item-1\", \"price\"->101.1), Map(\"name\"->\"Item-2\", \"price\"->555.22), Map(\"name\"->\"Item-3\", \"price\"->45.09), Map(\"name\"->\"Item-4\", \"price\"->22.75)), 1)\n     * List(Map(\"name\"->\"Item-4\", \"price\"->22.75))\n     */\n    def cheapItems(items : List[Map[String, Any]], n : Int) : List[Map[String, Any]] = {\n", "entry_point": "cheapItems", "test": "\n\n    var arg00 : List[Map[String, Any]] = List(Map(\"\"\"name\"\"\" -> \"\"\"Item-1\"\"\", \"\"\"price\"\"\" -> 101.1), Map(\"\"\"name\"\"\" -> \"\"\"Item-2\"\"\", \"\"\"price\"\"\" -> 555.22))\n    var arg01 : Int = 1\n    var x0 : List[Map[String, Any]] = cheapItems(arg00, arg01)\n    var v0 : List[Map[String, Any]] = List(Map(\"\"\"name\"\"\" -> \"\"\"Item-1\"\"\", \"\"\"price\"\"\" -> 101.1))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Map[String, Any]] = List(Map(\"\"\"name\"\"\" -> \"\"\"Item-1\"\"\", \"\"\"price\"\"\" -> 101.1), Map(\"\"\"name\"\"\" -> \"\"\"Item-2\"\"\", \"\"\"price\"\"\" -> 555.22))\n    var arg11 : Int = 2\n    var x1 : List[Map[String, Any]] = cheapItems(arg10, arg11)\n    var v1 : List[Map[String, Any]] = List(Map(\"\"\"name\"\"\" -> \"\"\"Item-1\"\"\", \"\"\"price\"\"\" -> 101.1), Map(\"\"\"name\"\"\" -> \"\"\"Item-2\"\"\", \"\"\"price\"\"\" -> 555.22))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Map[String, Any]] = List(Map(\"\"\"name\"\"\" -> \"\"\"Item-1\"\"\", \"\"\"price\"\"\" -> 101.1), Map(\"\"\"name\"\"\" -> \"\"\"Item-2\"\"\", \"\"\"price\"\"\" -> 555.22), Map(\"\"\"name\"\"\" -> \"\"\"Item-3\"\"\", \"\"\"price\"\"\" -> 45.09), Map(\"\"\"name\"\"\" -> \"\"\"Item-4\"\"\", \"\"\"price\"\"\" -> 22.75))\n    var arg21 : Int = 1\n    var x2 : List[Map[String, Any]] = cheapItems(arg20, arg21)\n    var v2 : List[Map[String, Any]] = List(Map(\"\"\"name\"\"\" -> \"\"\"Item-4\"\"\", \"\"\"price\"\"\" -> 22.75))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/796", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write function to find the sum of all items in the given dictionary.\n     *\n     * >>> returnSum(Map(\"a\"->100, \"b\"->200, \"c\"->300))\n     * 600\n     * >>> returnSum(Map(\"a\"->25, \"b\"->18, \"c\"->45))\n     * 88\n     * >>> returnSum(Map(\"a\"->36, \"b\"->39, \"c\"->49))\n     * 124\n     */\n    def returnSum(dict : Map[String, Int]) : Int = {\n", "entry_point": "returnSum", "test": "\n\n    var arg00 : Map[String, Int] = Map(\"\"\"a\"\"\" -> 100, \"\"\"b\"\"\" -> 200, \"\"\"c\"\"\" -> 300)\n    var x0 : Int = returnSum(arg00)\n    var v0 : Int = 600\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Map[String, Int] = Map(\"\"\"a\"\"\" -> 25, \"\"\"b\"\"\" -> 18, \"\"\"c\"\"\" -> 45)\n    var x1 : Int = returnSum(arg10)\n    var v1 : Int = 88\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Map[String, Int] = Map(\"\"\"a\"\"\" -> 36, \"\"\"b\"\"\" -> 39, \"\"\"c\"\"\" -> 49)\n    var x2 : Int = returnSum(arg20)\n    var v2 : Int = 124\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write function to find the sum of all items in the given dictionary.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/797", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of all odd natural numbers within the range l and r.\n     *\n     * >>> sumInRange(2, 5)\n     * 8\n     * >>> sumInRange(5, 7)\n     * 12\n     * >>> sumInRange(7, 13)\n     * 40\n     */\n    def sumInRange(l : Int, r : Int) : Int = {\n", "entry_point": "sumInRange", "test": "\n\n    var arg00 : Int = 2\n    var arg01 : Int = 5\n    var x0 : Int = sumInRange(arg00, arg01)\n    var v0 : Int = 8\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var arg11 : Int = 7\n    var x1 : Int = sumInRange(arg10, arg11)\n    var v1 : Int = 12\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 7\n    var arg21 : Int = 13\n    var x2 : Int = sumInRange(arg20, arg21)\n    var v2 : Int = 40\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of all odd natural numbers within the range l and r.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/798", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of an array.\n     *\n     * >>> Sum(List(1, 2, 3))\n     * 6\n     * >>> Sum(List(15, 12, 13, 10))\n     * 50\n     * >>> Sum(List(0, 1, 2))\n     * 3\n     */\n    def Sum(arr : List[Int]) : Int = {\n", "entry_point": "Sum", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3)\n    var x0 : Int = Sum(arg00)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(15, 12, 13, 10)\n    var x1 : Int = Sum(arg10)\n    var v1 : Int = 50\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(0, 1, 2)\n    var x2 : Int = Sum(arg20)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of an array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/799", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to left rotate the bits of a given number.\n     *\n     * >>> leftRotate(16, 2)\n     * 64\n     * >>> leftRotate(10, 2)\n     * 40\n     * >>> leftRotate(99, 3)\n     * 792\n     */\n    def leftRotate(n : Int, d : Int) : Int = {\n", "entry_point": "leftRotate", "test": "\n\n    var arg00 : Int = 16\n    var arg01 : Int = 2\n    var x0 : Int = leftRotate(arg00, arg01)\n    var v0 : Int = 64\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var arg11 : Int = 2\n    var x1 : Int = leftRotate(arg10, arg11)\n    var v1 : Int = 40\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 99\n    var arg21 : Int = 3\n    var x2 : Int = leftRotate(arg20, arg21)\n    var v2 : Int = 792\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to left rotate the bits of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/800", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove all whitespaces from a string.\n     *\n     * >>> removeAllSpaces(\"python  program\")\n     * \"pythonprogram\"\n     * >>> removeAllSpaces(\"python   programming    language\")\n     * \"pythonprogramminglanguage\"\n     * >>> removeAllSpaces(\"python                     program\")\n     * \"pythonprogram\"\n     */\n    def removeAllSpaces(text : String) : String = {\n", "entry_point": "removeAllSpaces", "test": "\n\n    var arg00 : String = \"\"\"python  program\"\"\"\n    var x0 : String = removeAllSpaces(arg00)\n    var v0 : String = \"\"\"pythonprogram\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"python   programming    language\"\"\"\n    var x1 : String = removeAllSpaces(arg10)\n    var v1 : String = \"\"\"pythonprogramminglanguage\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"python                     program\"\"\"\n    var x2 : String = removeAllSpaces(arg20)\n    var v2 : String = \"\"\"pythonprogram\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove all whitespaces from a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/801", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the number of equal numbers from three given integers.\n     *\n     * >>> testThreeEqual(1, 1, 1)\n     * 3\n     * >>> testThreeEqual(-1, -2, -3)\n     * 0\n     * >>> testThreeEqual(1, 2, 2)\n     * 2\n     */\n    def testThreeEqual(x : Int, y : Int, z : Int) : Int = {\n", "entry_point": "testThreeEqual", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = 1\n    var arg02 : Int = 1\n    var x0 : Int = testThreeEqual(arg00, arg01, arg02)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = -1\n    var arg11 : Int = -2\n    var arg12 : Int = -3\n    var x1 : Int = testThreeEqual(arg10, arg11, arg12)\n    var v1 : Int = 0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = 2\n    var arg22 : Int = 2\n    var x2 : Int = testThreeEqual(arg20, arg21, arg22)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the number of equal numbers from three given integers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/802", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the number of rotations required to generate a sorted array.\n     *\n     * >>> countRotation(List(3, 2, 1), 3)\n     * 1\n     * >>> countRotation(List(4, 5, 1, 2, 3), 5)\n     * 2\n     * >>> countRotation(List(7, 8, 9, 1, 2, 3), 6)\n     * 3\n     */\n    def countRotation(arr : List[Int], n : Int) : Int = {\n", "entry_point": "countRotation", "test": "\n\n    var arg00 : List[Int] = List(3, 2, 1)\n    var arg01 : Int = 3\n    var x0 : Int = countRotation(arg00, arg01)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 5, 1, 2, 3)\n    var arg11 : Int = 5\n    var x1 : Int = countRotation(arg10, arg11)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(7, 8, 9, 1, 2, 3)\n    var arg21 : Int = 6\n    var x2 : Int = countRotation(arg20, arg21)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the number of rotations required to generate a sorted array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/803", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the given number is a perfect square or not.\n     *\n     * >>> isPerfectSquare(10)\n     * false\n     * >>> isPerfectSquare(36)\n     * true\n     * >>> isPerfectSquare(14)\n     * false\n     */\n    def isPerfectSquare(n : Int) : Boolean = {\n", "entry_point": "isPerfectSquare", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Boolean = isPerfectSquare(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 36\n    var x1 : Boolean = isPerfectSquare(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 14\n    var x2 : Boolean = isPerfectSquare(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the given number is a perfect square or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/804", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the product of numbers is even or not.\n     *\n     * >>> isProductEven(List(1, 2, 3), 3)\n     * true\n     * >>> isProductEven(List(1, 2, 1, 4), 4)\n     * true\n     * >>> isProductEven(List(1, 1), 2)\n     * false\n     */\n    def isProductEven(arr : List[Int], n : Int) : Boolean = {\n", "entry_point": "isProductEven", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3)\n    var arg01 : Int = 3\n    var x0 : Boolean = isProductEven(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 1, 4)\n    var arg11 : Int = 4\n    var x1 : Boolean = isProductEven(arg10, arg11)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 1)\n    var arg21 : Int = 2\n    var x2 : Boolean = isProductEven(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the product of numbers is even or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/805", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the list in a list of lists whose sum of elements is the highest.\n     *\n     * >>> maxSumList(List(List(1, 2, 3), List(4, 5, 6), List(10, 11, 12), List(7, 8, 9)))\n     * List(10, 11, 12)\n     * >>> maxSumList(List(List(3, 2, 1), List(6, 5, 4), List(12, 11, 10)))\n     * List(12, 11, 10)\n     * >>> maxSumList(List(List(2, 3, 1)))\n     * List(2, 3, 1)\n     */\n    def maxSumList(lists : List[List[Int]]) : List[Int] = {\n", "entry_point": "maxSumList", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 2, 3), List(4, 5, 6), List(10, 11, 12), List(7, 8, 9))\n    var x0 : List[Int] = maxSumList(arg00)\n    var v0 : List[Int] = List(10, 11, 12)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(3, 2, 1), List(6, 5, 4), List(12, 11, 10))\n    var x1 : List[Int] = maxSumList(arg10)\n    var v1 : List[Int] = List(12, 11, 10)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(2, 3, 1))\n    var x2 : List[Int] = maxSumList(arg20)\n    var v2 : List[Int] = List(2, 3, 1)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the list in a list of lists whose sum of elements is the highest.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/806", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find maximum run of uppercase characters in the given string.\n     *\n     * >>> maxRunUppercase(\"GeMKSForGERksISBESt\")\n     * 5\n     * >>> maxRunUppercase(\"PrECIOusMOVemENTSYT\")\n     * 6\n     * >>> maxRunUppercase(\"GooGLEFluTTER\")\n     * 4\n     */\n    def maxRunUppercase(testStr : String) : Int = {\n", "entry_point": "maxRunUppercase", "test": "\n\n    var arg00 : String = \"\"\"GeMKSForGERksISBESt\"\"\"\n    var x0 : Int = maxRunUppercase(arg00)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"PrECIOusMOVemENTSYT\"\"\"\n    var x1 : Int = maxRunUppercase(arg10)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"GooGLEFluTTER\"\"\"\n    var x2 : Int = maxRunUppercase(arg20)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find maximum run of uppercase characters in the given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/807", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the first odd number in a given list of numbers.\n     *\n     * >>> firstOdd(List(1, 3, 5))\n     * 1\n     * >>> firstOdd(List(2, 4, 1, 3))\n     * 1\n     */\n    def firstOdd(nums : List[Int]) : Int = {\n", "entry_point": "firstOdd", "test": "\n\n    var arg00 : List[Int] = List(1, 3, 5)\n    var x0 : Int = firstOdd(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 4, 1, 3)\n    var x1 : Int = firstOdd(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n\n}\n", "description": "Write a Scala function to find the first odd number in a given list of numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/808", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if the given tuples contain the k or not.\n     *\n     * >>> checkK(List(10, 4, 5, 6, 8), 6)\n     * true\n     * >>> checkK(List(1, 2, 3, 4, 5, 6), 7)\n     * false\n     * >>> checkK(List(7, 8, 9, 44, 11, 12), 11)\n     * true\n     */\n    def checkK(testTup : List[Int], k : Int) : Boolean = {\n", "entry_point": "checkK", "test": "\n\n    var arg00 : List[Int] = List(10, 4, 5, 6, 8)\n    var arg01 : Int = 6\n    var x0 : Boolean = checkK(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5, 6)\n    var arg11 : Int = 7\n    var x1 : Boolean = checkK(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(7, 8, 9, 44, 11, 12)\n    var arg21 : Int = 11\n    var x2 : Boolean = checkK(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if the given tuples contain the k or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/809", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n     *\n     * >>> checkSmaller(List(1, 2, 3), List(2, 3, 4))\n     * false\n     * >>> checkSmaller(List(4, 5, 6), List(3, 4, 5))\n     * true\n     * >>> checkSmaller(List(11, 12, 13), List(10, 11, 12))\n     * true\n     */\n    def checkSmaller(testTup1 : List[Int], testTup2 : List[Int]) : Boolean = {\n", "entry_point": "checkSmaller", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3)\n    var arg01 : List[Int] = List(2, 3, 4)\n    var x0 : Boolean = checkSmaller(arg00, arg01)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 5, 6)\n    var arg11 : List[Int] = List(3, 4, 5)\n    var x1 : Boolean = checkSmaller(arg10, arg11)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(11, 12, 13)\n    var arg21 : List[Int] = List(10, 11, 12)\n    var x2 : Boolean = checkSmaller(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/810", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to iterate over elements repeating each as many times as its count.\n     *\n     * >>> countVariable(4, 2, 0, -2)\n     * List(\"p\", \"p\", \"p\", \"p\", \"q\", \"q\")\n     * >>> countVariable(0, 1, 2, 3)\n     * List(\"q\", \"r\", \"r\", \"s\", \"s\", \"s\")\n     * >>> countVariable(11, 15, 12, 23)\n     * List(\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\")\n     */\n    def countVariable(a : Int, b : Int, c : Int, d : Int) : List[String] = {\n", "entry_point": "countVariable", "test": "\n\n    var arg00 : Int = 4\n    var arg01 : Int = 2\n    var arg02 : Int = 0\n    var arg03 : Int = -2\n    var x0 : List[String] = countVariable(arg00, arg01, arg02, arg03)\n    var v0 : List[String] = List(\"\"\"p\"\"\", \"\"\"p\"\"\", \"\"\"p\"\"\", \"\"\"p\"\"\", \"\"\"q\"\"\", \"\"\"q\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 0\n    var arg11 : Int = 1\n    var arg12 : Int = 2\n    var arg13 : Int = 3\n    var x1 : List[String] = countVariable(arg10, arg11, arg12, arg13)\n    var v1 : List[String] = List(\"\"\"q\"\"\", \"\"\"r\"\"\", \"\"\"r\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 11\n    var arg21 : Int = 15\n    var arg22 : Int = 12\n    var arg23 : Int = 23\n    var x2 : List[String] = countVariable(arg20, arg21, arg22, arg23)\n    var v2 : List[String] = List(\"\"\"p\"\"\", \"\"\"p\"\"\", \"\"\"p\"\"\", \"\"\"p\"\"\", \"\"\"p\"\"\", \"\"\"p\"\"\", \"\"\"p\"\"\", \"\"\"p\"\"\", \"\"\"p\"\"\", \"\"\"p\"\"\", \"\"\"p\"\"\", \"\"\"q\"\"\", \"\"\"q\"\"\", \"\"\"q\"\"\", \"\"\"q\"\"\", \"\"\"q\"\"\", \"\"\"q\"\"\", \"\"\"q\"\"\", \"\"\"q\"\"\", \"\"\"q\"\"\", \"\"\"q\"\"\", \"\"\"q\"\"\", \"\"\"q\"\"\", \"\"\"q\"\"\", \"\"\"q\"\"\", \"\"\"q\"\"\", \"\"\"r\"\"\", \"\"\"r\"\"\", \"\"\"r\"\"\", \"\"\"r\"\"\", \"\"\"r\"\"\", \"\"\"r\"\"\", \"\"\"r\"\"\", \"\"\"r\"\"\", \"\"\"r\"\"\", \"\"\"r\"\"\", \"\"\"r\"\"\", \"\"\"r\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\", \"\"\"s\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to iterate over elements repeating each as many times as its count.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/811", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if two lists of tuples are identical or not.\n     *\n     * >>> checkIdentical(List(List(10, 4), List(2, 5)), List(List(10, 4), List(2, 5)))\n     * true\n     * >>> checkIdentical(List(List(1, 2), List(3, 7)), List(List(12, 14), List(12, 45)))\n     * false\n     * >>> checkIdentical(List(List(2, 14), List(12, 25)), List(List(2, 14), List(12, 25)))\n     * true\n     */\n    def checkIdentical(testList1 : List[List[Int]], testList2 : List[List[Int]]) : Boolean = {\n", "entry_point": "checkIdentical", "test": "\n\n    var arg00 : List[List[Int]] = List(List(10, 4), List(2, 5))\n    var arg01 : List[List[Int]] = List(List(10, 4), List(2, 5))\n    var x0 : Boolean = checkIdentical(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1, 2), List(3, 7))\n    var arg11 : List[List[Int]] = List(List(12, 14), List(12, 45))\n    var x1 : Boolean = checkIdentical(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(2, 14), List(12, 25))\n    var arg21 : List[List[Int]] = List(List(2, 14), List(12, 25))\n    var x2 : Boolean = checkIdentical(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if two lists of tuples are identical or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/812", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to abbreviate 'road' as 'rd.' in a given string.\n     *\n     * >>> roadRd(\"ravipadu Road\")\n     * \"ravipadu Rd.\"\n     * >>> roadRd(\"palnadu Road\")\n     * \"palnadu Rd.\"\n     * >>> roadRd(\"eshwar enclave Road\")\n     * \"eshwar enclave Rd.\"\n     */\n    def roadRd(street : String) : String = {\n", "entry_point": "roadRd", "test": "\n\n    var arg00 : String = \"\"\"ravipadu Road\"\"\"\n    var x0 : String = roadRd(arg00)\n    var v0 : String = \"\"\"ravipadu Rd.\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"palnadu Road\"\"\"\n    var x1 : String = roadRd(arg10)\n    var v1 : String = \"\"\"palnadu Rd.\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"eshwar enclave Road\"\"\"\n    var x2 : String = roadRd(arg20)\n    var v2 : String = \"\"\"eshwar enclave Rd.\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to abbreviate 'road' as 'rd.' in a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/813", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find length of the string.\n     *\n     * >>> stringLength(\"python\")\n     * 6\n     * >>> stringLength(\"program\")\n     * 7\n     * >>> stringLength(\"language\")\n     * 8\n     */\n    def stringLength(str1 : String) : Int = {\n", "entry_point": "stringLength", "test": "\n\n    var arg00 : String = \"\"\"python\"\"\"\n    var x0 : Int = stringLength(arg00)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"program\"\"\"\n    var x1 : Int = stringLength(arg10)\n    var v1 : Int = 7\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"language\"\"\"\n    var x2 : Int = stringLength(arg20)\n    var v2 : Int = 8\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find length of the string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/814", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the area of a rombus.\n     *\n     * >>> rombusArea(10, 20)\n     * 100\n     * >>> rombusArea(10, 5)\n     * 25\n     * >>> rombusArea(4, 2)\n     * 4\n     */\n    def rombusArea(p : Int, q : Int) : Int = {\n", "entry_point": "rombusArea", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 20\n    var x0 : Int = rombusArea(arg00, arg01)\n    var v0 : Int = 100\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var arg11 : Int = 5\n    var x1 : Int = rombusArea(arg10, arg11)\n    var v1 : Int = 25\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var arg21 : Int = 2\n    var x2 : Int = rombusArea(arg20, arg21)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the area of a rombus.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/815", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n     *\n     * >>> sortByDnf(List(1, 2, 0, 1, 0, 1, 2, 1, 1), 9)\n     * List(0, 0, 1, 1, 1, 1, 1, 2, 2)\n     * >>> sortByDnf(List(1, 0, 0, 1, 2, 1, 2, 2, 1, 0), 10)\n     * List(0, 0, 0, 1, 1, 1, 1, 2, 2, 2)\n     * >>> sortByDnf(List(2, 2, 1, 0, 0, 0, 1, 1, 2, 1), 10)\n     * List(0, 0, 0, 1, 1, 1, 1, 2, 2, 2)\n     */\n    def sortByDnf(arr : List[Int], n : Int) : List[Int] = {\n", "entry_point": "sortByDnf", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 0, 1, 0, 1, 2, 1, 1)\n    var arg01 : Int = 9\n    var x0 : List[Int] = sortByDnf(arg00, arg01)\n    var v0 : List[Int] = List(0, 0, 1, 1, 1, 1, 1, 2, 2)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 0, 0, 1, 2, 1, 2, 2, 1, 0)\n    var arg11 : Int = 10\n    var x1 : List[Int] = sortByDnf(arg10, arg11)\n    var v1 : List[Int] = List(0, 0, 0, 1, 1, 1, 1, 2, 2, 2)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 2, 1, 0, 0, 0, 1, 1, 2, 1)\n    var arg21 : Int = 10\n    var x2 : List[Int] = sortByDnf(arg20, arg21)\n    var v2 : List[Int] = List(0, 0, 0, 1, 1, 1, 1, 2, 2, 2)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/816", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to clear the values of the given tuples.\n     *\n     * >>> clearTuple(List(1, 5, 3, 6, 8))\n     * List()\n     * >>> clearTuple(List(2, 1, 4, 5, 6))\n     * List()\n     * >>> clearTuple(List(3, 2, 5, 6, 8))\n     * List()\n     */\n    def clearTuple(testTup : List[Int]) : List[Any] = {\n", "entry_point": "clearTuple", "test": "\n\n    var arg00 : List[Int] = List(1, 5, 3, 6, 8)\n    var x0 : List[Any] = clearTuple(arg00)\n    var v0 : List[Any] = List()\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 1, 4, 5, 6)\n    var x1 : List[Any] = clearTuple(arg10)\n    var v1 : List[Any] = List()\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3, 2, 5, 6, 8)\n    var x2 : List[Any] = clearTuple(arg20)\n    var v2 : List[Any] = List()\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to clear the values of the given tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/817", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\n     *\n     * >>> divOfNums(List(19, 65, 57, 39, 152, 639, 121, 44, 90, 190), 19, 13)\n     * List(19, 65, 57, 39, 152, 190)\n     * >>> divOfNums(List(1, 2, 3, 5, 7, 8, 10), 2, 5)\n     * List(2, 5, 8, 10)\n     * >>> divOfNums(List(10, 15, 14, 13, 18, 12, 20), 10, 5)\n     * List(10, 15, 20)\n     */\n    def divOfNums(nums : List[Int], m : Int, n : Int) : List[Int] = {\n", "entry_point": "divOfNums", "test": "\n\n    var arg00 : List[Int] = List(19, 65, 57, 39, 152, 639, 121, 44, 90, 190)\n    var arg01 : Int = 19\n    var arg02 : Int = 13\n    var x0 : List[Int] = divOfNums(arg00, arg01, arg02)\n    var v0 : List[Int] = List(19, 65, 57, 39, 152, 190)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 5, 7, 8, 10)\n    var arg11 : Int = 2\n    var arg12 : Int = 5\n    var x1 : List[Int] = divOfNums(arg10, arg11, arg12)\n    var v1 : List[Int] = List(2, 5, 8, 10)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(10, 15, 14, 13, 18, 12, 20)\n    var arg21 : Int = 10\n    var arg22 : Int = 5\n    var x2 : List[Int] = divOfNums(arg20, arg21, arg22)\n    var v2 : List[Int] = List(10, 15, 20)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/818", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count lower case letters in a given string.\n     *\n     * >>> lowerCtr(\"abc\")\n     * 3\n     * >>> lowerCtr(\"string\")\n     * 6\n     * >>> lowerCtr(\"Python\")\n     * 5\n     */\n    def lowerCtr(str : String) : Int = {\n", "entry_point": "lowerCtr", "test": "\n\n    var arg00 : String = \"\"\"abc\"\"\"\n    var x0 : Int = lowerCtr(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"string\"\"\"\n    var x1 : Int = lowerCtr(arg10)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Python\"\"\"\n    var x2 : Int = lowerCtr(arg20)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count lower case letters in a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/819", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n     *\n     * >>> countDuplic(List(1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5))\n     * List(List(1, 2, 4, 5), List(1, 3, 3, 4))\n     * >>> countDuplic(List(2, 2, 3, 1, 2, 6, 7, 9))\n     * List(List(2, 3, 1, 2, 6, 7, 9), List(2, 1, 1, 1, 1, 1, 1))\n     * >>> countDuplic(List(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12))\n     * List(List(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12), List(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))\n     */\n    def countDuplic(lists : List[Int]) : List[List[Int]] = {\n", "entry_point": "countDuplic", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5)\n    var x0 : List[List[Int]] = countDuplic(arg00)\n    var v0 : List[List[Int]] = List(List(1, 2, 4, 5), List(1, 3, 3, 4))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 2, 3, 1, 2, 6, 7, 9)\n    var x1 : List[List[Int]] = countDuplic(arg10)\n    var v1 : List[List[Int]] = List(List(2, 3, 1, 2, 6, 7, 9), List(2, 1, 1, 1, 1, 1, 1))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12)\n    var x2 : List[List[Int]] = countDuplic(arg20)\n    var v2 : List[List[Int]] = List(List(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12), List(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/820", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether the given month number contains 28 days or not.\n     *\n     * >>> checkMonthnumNumber(2)\n     * true\n     * >>> checkMonthnumNumber(1)\n     * false\n     * >>> checkMonthnumNumber(3)\n     * false\n     */\n    def checkMonthnumNumber(monthnum1 : Int) : Boolean = {\n", "entry_point": "checkMonthnumNumber", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Boolean = checkMonthnumNumber(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var x1 : Boolean = checkMonthnumNumber(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 3\n    var x2 : Boolean = checkMonthnumNumber(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether the given month number contains 28 days or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/821", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to merge two dictionaries into a single expression.\n     *\n     * >>> mergeDictionaries(Map(\"R\"->\"Red\", \"B\"->\"Black\", \"P\"->\"Pink\"), Map(\"G\"->\"Green\", \"W\"->\"White\"))\n     * Map(\"B\"->\"Black\", \"R\"->\"Red\", \"P\"->\"Pink\", \"G\"->\"Green\", \"W\"->\"White\")\n     * >>> mergeDictionaries(Map(\"R\"->\"Red\", \"B\"->\"Black\", \"P\"->\"Pink\"), Map(\"O\"->\"Orange\", \"W\"->\"White\", \"B\"->\"Black\"))\n     * Map(\"O\"->\"Orange\", \"P\"->\"Pink\", \"B\"->\"Black\", \"W\"->\"White\", \"R\"->\"Red\")\n     * >>> mergeDictionaries(Map(\"G\"->\"Green\", \"W\"->\"White\"), Map(\"O\"->\"Orange\", \"W\"->\"White\", \"B\"->\"Black\"))\n     * Map(\"W\"->\"White\", \"O\"->\"Orange\", \"G\"->\"Green\", \"B\"->\"Black\")\n     */\n    def mergeDictionaries(dict1 : Map[String, String], dict2 : Map[String, String]) : Map[String, String] = {\n", "entry_point": "mergeDictionaries", "test": "\n\n    var arg00 : Map[String, String] = Map(\"\"\"R\"\"\" -> \"\"\"Red\"\"\", \"\"\"B\"\"\" -> \"\"\"Black\"\"\", \"\"\"P\"\"\" -> \"\"\"Pink\"\"\")\n    var arg01 : Map[String, String] = Map(\"\"\"G\"\"\" -> \"\"\"Green\"\"\", \"\"\"W\"\"\" -> \"\"\"White\"\"\")\n    var x0 : Map[String, String] = mergeDictionaries(arg00, arg01)\n    var v0 : Map[String, String] = Map(\"\"\"B\"\"\" -> \"\"\"Black\"\"\", \"\"\"R\"\"\" -> \"\"\"Red\"\"\", \"\"\"P\"\"\" -> \"\"\"Pink\"\"\", \"\"\"G\"\"\" -> \"\"\"Green\"\"\", \"\"\"W\"\"\" -> \"\"\"White\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Map[String, String] = Map(\"\"\"R\"\"\" -> \"\"\"Red\"\"\", \"\"\"B\"\"\" -> \"\"\"Black\"\"\", \"\"\"P\"\"\" -> \"\"\"Pink\"\"\")\n    var arg11 : Map[String, String] = Map(\"\"\"O\"\"\" -> \"\"\"Orange\"\"\", \"\"\"W\"\"\" -> \"\"\"White\"\"\", \"\"\"B\"\"\" -> \"\"\"Black\"\"\")\n    var x1 : Map[String, String] = mergeDictionaries(arg10, arg11)\n    var v1 : Map[String, String] = Map(\"\"\"O\"\"\" -> \"\"\"Orange\"\"\", \"\"\"P\"\"\" -> \"\"\"Pink\"\"\", \"\"\"B\"\"\" -> \"\"\"Black\"\"\", \"\"\"W\"\"\" -> \"\"\"White\"\"\", \"\"\"R\"\"\" -> \"\"\"Red\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Map[String, String] = Map(\"\"\"G\"\"\" -> \"\"\"Green\"\"\", \"\"\"W\"\"\" -> \"\"\"White\"\"\")\n    var arg21 : Map[String, String] = Map(\"\"\"O\"\"\" -> \"\"\"Orange\"\"\", \"\"\"W\"\"\" -> \"\"\"White\"\"\", \"\"\"B\"\"\" -> \"\"\"Black\"\"\")\n    var x2 : Map[String, String] = mergeDictionaries(arg20, arg21)\n    var v2 : Map[String, String] = Map(\"\"\"W\"\"\" -> \"\"\"White\"\"\", \"\"\"O\"\"\" -> \"\"\"Orange\"\"\", \"\"\"G\"\"\" -> \"\"\"Green\"\"\", \"\"\"B\"\"\" -> \"\"\"Black\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to merge two dictionaries into a single expression.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/822", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to return true if the password is valid.\n     *\n     * >>> passValidity(\"password\")\n     * false\n     * >>> passValidity(\"Password@10\")\n     * true\n     * >>> passValidity(\"password@10\")\n     * false\n     */\n    def passValidity(p : String) : Boolean = {\n", "entry_point": "passValidity", "test": "\n\n    var arg00 : String = \"\"\"password\"\"\"\n    var x0 : Boolean = passValidity(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Password@10\"\"\"\n    var x1 : Boolean = passValidity(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"password@10\"\"\"\n    var x2 : Boolean = passValidity(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to return true if the password is valid.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/823", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if the given string starts with a substring using regex.\n     *\n     * >>> checkSubstring(\"dreams for dreams makes life fun\", \"makes\")\n     * \"string doesnt start with the given substring\"\n     * >>> checkSubstring(\"Hi there how are you Hi alex\", \"Hi\")\n     * \"string starts with the given substring\"\n     * >>> checkSubstring(\"Its been a long day\", \"been\")\n     * \"string doesnt start with the given substring\"\n     */\n    def checkSubstring(string : String, sample : String) : String = {\n", "entry_point": "checkSubstring", "test": "\n\n    var arg00 : String = \"\"\"dreams for dreams makes life fun\"\"\"\n    var arg01 : String = \"\"\"makes\"\"\"\n    var x0 : String = checkSubstring(arg00, arg01)\n    var v0 : String = \"\"\"string doesnt start with the given substring\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Hi there how are you Hi alex\"\"\"\n    var arg11 : String = \"\"\"Hi\"\"\"\n    var x1 : String = checkSubstring(arg10, arg11)\n    var v1 : String = \"\"\"string starts with the given substring\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Its been a long day\"\"\"\n    var arg21 : String = \"\"\"been\"\"\"\n    var x2 : String = checkSubstring(arg20, arg21)\n    var v2 : String = \"\"\"string doesnt start with the given substring\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if the given string starts with a substring using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/824", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to remove even numbers from a given list.\n     *\n     * >>> removeEven(List(1, 3, 5, 2))\n     * List(1, 3, 5)\n     * >>> removeEven(List(5, 6, 7))\n     * List(5, 7)\n     * >>> removeEven(List(1, 2, 3, 4))\n     * List(1, 3)\n     */\n    def removeEven(l : List[Int]) : List[Int] = {\n", "entry_point": "removeEven", "test": "\n\n    var arg00 : List[Int] = List(1, 3, 5, 2)\n    var x0 : List[Int] = removeEven(arg00)\n    var v0 : List[Int] = List(1, 3, 5)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(5, 6, 7)\n    var x1 : List[Int] = removeEven(arg10)\n    var v1 : List[Int] = List(5, 7)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4)\n    var x2 : List[Int] = removeEven(arg20)\n    var v2 : List[Int] = List(1, 3)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to remove even numbers from a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/825", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to access multiple elements of specified index from a given list.\n     *\n     * >>> accessElements(List(2, 3, 8, 4, 7, 9), List(0, 3, 5))\n     * List(2, 4, 9)\n     * >>> accessElements(List(1, 2, 3, 4, 5), List(1, 2))\n     * List(2, 3)\n     * >>> accessElements(List(1, 0, 2, 3), List(0, 1))\n     * List(1, 0)\n     */\n    def accessElements(nums : List[Int], listIndex : List[Int]) : List[Int] = {\n", "entry_point": "accessElements", "test": "\n\n    var arg00 : List[Int] = List(2, 3, 8, 4, 7, 9)\n    var arg01 : List[Int] = List(0, 3, 5)\n    var x0 : List[Int] = accessElements(arg00, arg01)\n    var v0 : List[Int] = List(2, 4, 9)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5)\n    var arg11 : List[Int] = List(1, 2)\n    var x1 : List[Int] = accessElements(arg10, arg11)\n    var v1 : List[Int] = List(2, 3)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 0, 2, 3)\n    var arg21 : List[Int] = List(0, 1)\n    var x2 : List[Int] = accessElements(arg20, arg21)\n    var v2 : List[Int] = List(1, 0)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to access multiple elements of specified index from a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/826", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the type of triangle from the given sides.\n     *\n     * >>> checkTypeOfTriangle(1, 2, 3)\n     * \"Obtuse-angled Triangle\"\n     * >>> checkTypeOfTriangle(2, 2, 2)\n     * \"Acute-angled Triangle\"\n     * >>> checkTypeOfTriangle(1, 0, 1)\n     * \"Right-angled Triangle\"\n     */\n    def checkTypeOfTriangle(a : Int, b : Int, c : Int) : String = {\n", "entry_point": "checkTypeOfTriangle", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = 2\n    var arg02 : Int = 3\n    var x0 : String = checkTypeOfTriangle(arg00, arg01, arg02)\n    var v0 : String = \"\"\"Obtuse-angled Triangle\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var arg11 : Int = 2\n    var arg12 : Int = 2\n    var x1 : String = checkTypeOfTriangle(arg10, arg11, arg12)\n    var v1 : String = \"\"\"Acute-angled Triangle\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = 0\n    var arg22 : Int = 1\n    var x2 : String = checkTypeOfTriangle(arg20, arg21, arg22)\n    var v2 : String = \"\"\"Right-angled Triangle\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the type of triangle from the given sides.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/827", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sum a specific column of a list in a given list of lists.\n     *\n     * >>> sumColumn(List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 8, 9, 5)), 0)\n     * 12\n     * >>> sumColumn(List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 8, 9, 5)), 1)\n     * 15\n     * >>> sumColumn(List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 8, 9, 5)), 3)\n     * 9\n     */\n    def sumColumn(list1 : List[List[Int]], c : Int) : Int = {\n", "entry_point": "sumColumn", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 8, 9, 5))\n    var arg01 : Int = 0\n    var x0 : Int = sumColumn(arg00, arg01)\n    var v0 : Int = 12\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 8, 9, 5))\n    var arg11 : Int = 1\n    var x1 : Int = sumColumn(arg10, arg11)\n    var v1 : Int = 15\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(1, 2, 3, 2), List(4, 5, 6, 2), List(7, 8, 9, 5))\n    var arg21 : Int = 3\n    var x2 : Int = sumColumn(arg20, arg21)\n    var v2 : Int = 9\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sum a specific column of a list in a given list of lists.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/828", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count alphabets,digits and special charactes in a given string.\n     *\n     * >>> countAlphaDigSpl(\"abc!@#123\")\n     * List(3, 3, 3)\n     * >>> countAlphaDigSpl(\"dgsuy@#\\$%&1255\")\n     * List(5, 4, 5)\n     * >>> countAlphaDigSpl(\"fjdsif627348#%\\$^&\")\n     * List(6, 6, 5)\n     */\n    def countAlphaDigSpl(string : String) : List[Int] = {\n", "entry_point": "countAlphaDigSpl", "test": "\n\n    var arg00 : String = \"\"\"abc!@#123\"\"\"\n    var x0 : List[Int] = countAlphaDigSpl(arg00)\n    var v0 : List[Int] = List(3, 3, 3)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"dgsuy@#\\$%&1255\"\"\"\n    var x1 : List[Int] = countAlphaDigSpl(arg10)\n    var v1 : List[Int] = List(5, 4, 5)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"fjdsif627348#%\\$^&\"\"\"\n    var x2 : List[Int] = countAlphaDigSpl(arg20)\n    var v2 : List[Int] = List(6, 6, 5)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count alphabets,digits and special charactes in a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/829", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find out the second most repeated (or frequent) string in the given sequence.\n     *\n     * >>> secondFrequent(List(\"aaa\", \"bbb\", \"ccc\", \"bbb\", \"aaa\", \"aaa\"))\n     * \"bbb\"\n     * >>> secondFrequent(List(\"abc\", \"bcd\", \"abc\", \"bcd\", \"bcd\", \"bcd\"))\n     * \"abc\"\n     * >>> secondFrequent(List(\"cdma\", \"gsm\", \"hspa\", \"gsm\", \"cdma\", \"cdma\"))\n     * \"gsm\"\n     */\n    def secondFrequent(input : List[String]) : String = {\n", "entry_point": "secondFrequent", "test": "\n\n    var arg00 : List[String] = List(\"\"\"aaa\"\"\", \"\"\"bbb\"\"\", \"\"\"ccc\"\"\", \"\"\"bbb\"\"\", \"\"\"aaa\"\"\", \"\"\"aaa\"\"\")\n    var x0 : String = secondFrequent(arg00)\n    var v0 : String = \"\"\"bbb\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"abc\"\"\", \"\"\"bcd\"\"\", \"\"\"abc\"\"\", \"\"\"bcd\"\"\", \"\"\"bcd\"\"\", \"\"\"bcd\"\"\")\n    var x1 : String = secondFrequent(arg10)\n    var v1 : String = \"\"\"abc\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"cdma\"\"\", \"\"\"gsm\"\"\", \"\"\"hspa\"\"\", \"\"\"gsm\"\"\", \"\"\"cdma\"\"\", \"\"\"cdma\"\"\")\n    var x2 : String = secondFrequent(arg20)\n    var v2 : String = \"\"\"gsm\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find out the second most repeated (or frequent) string in the given sequence.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/830", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to round up a number to specific digits.\n     *\n     * >>> roundUp(123.01247, 0)\n     * 124\n     * >>> roundUp(123.01247, 1)\n     * 123.1\n     * >>> roundUp(123.01247, 2)\n     * 123.02\n     */\n    def roundUp(a : Double, digits : Int) : Double = {\n", "entry_point": "roundUp", "test": "\n\n    var arg00 : Double = 123.01247\n    var arg01 : Int = 0\n    var x0 : Double = roundUp(arg00, arg01)\n    var v0 : Double = 124\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Double = 123.01247\n    var arg11 : Int = 1\n    var x1 : Double = roundUp(arg10, arg11)\n    var v1 : Double = 123.1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Double = 123.01247\n    var arg21 : Int = 2\n    var x2 : Double = roundUp(arg20, arg21)\n    var v2 : Double = 123.02\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to round up a number to specific digits.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/831", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count equal element pairs from the given array.\n     *\n     * >>> countPairs(List(1, 1, 1, 1), 4)\n     * 6\n     * >>> countPairs(List(1, 5, 1), 3)\n     * 1\n     * >>> countPairs(List(3, 2, 1, 7, 8, 9), 6)\n     * 0\n     */\n    def countPairs(arr : List[Int], n : Int) : Int = {\n", "entry_point": "countPairs", "test": "\n\n    var arg00 : List[Int] = List(1, 1, 1, 1)\n    var arg01 : Int = 4\n    var x0 : Int = countPairs(arg00, arg01)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 5, 1)\n    var arg11 : Int = 3\n    var x1 : Int = countPairs(arg10, arg11)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3, 2, 1, 7, 8, 9)\n    var arg21 : Int = 6\n    var x2 : Int = countPairs(arg20, arg21)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count equal element pairs from the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/832", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract the maximum numeric value from a string by using regex.\n     *\n     * >>> extractMax(\"100klh564abc365bg\")\n     * 564\n     * >>> extractMax(\"hello300how546mer231\")\n     * 546\n     * >>> extractMax(\"its233beenalong343journey234\")\n     * 343\n     */\n    def extractMax(input : String) : Int = {\n", "entry_point": "extractMax", "test": "\n\n    var arg00 : String = \"\"\"100klh564abc365bg\"\"\"\n    var x0 : Int = extractMax(arg00)\n    var v0 : Int = 564\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"hello300how546mer231\"\"\"\n    var x1 : Int = extractMax(arg10)\n    var v1 : Int = 546\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"its233beenalong343journey234\"\"\"\n    var x2 : Int = extractMax(arg20)\n    var v2 : Int = 343\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract the maximum numeric value from a string by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/833", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to get dictionary keys as a list.\n     *\n     * >>> getKey(Map(1->\"python\", 2->\"java\"))\n     * List(1, 2)\n     * >>> getKey(Map(10->\"red\", 20->\"blue\", 30->\"black\"))\n     * List(10, 20, 30)\n     * >>> getKey(Map(27->\"language\", 39->\"java\", 44->\"little\"))\n     * List(27, 39, 44)\n     */\n    def getKey(dict : Map[Int, String]) : List[Int] = {\n", "entry_point": "getKey", "test": "\n\n    var arg00 : Map[Int, String] = Map(1 -> \"\"\"python\"\"\", 2 -> \"\"\"java\"\"\")\n    var x0 : List[Int] = getKey(arg00)\n    var v0 : List[Int] = List(1, 2)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Map[Int, String] = Map(10 -> \"\"\"red\"\"\", 20 -> \"\"\"blue\"\"\", 30 -> \"\"\"black\"\"\")\n    var x1 : List[Int] = getKey(arg10)\n    var v1 : List[Int] = List(10, 20, 30)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Map[Int, String] = Map(27 -> \"\"\"language\"\"\", 39 -> \"\"\"java\"\"\", 44 -> \"\"\"little\"\"\")\n    var x2 : List[Int] = getKey(arg20)\n    var v2 : List[Int] = List(27, 39, 44)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to get dictionary keys as a list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/834", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n     *\n     * >>> generateMatrix(3)\n     * List(List(1, 2, 3), List(8, 9, 4), List(7, 6, 5))\n     * >>> generateMatrix(2)\n     * List(List(1, 2), List(4, 3))\n     * >>> generateMatrix(7)\n     * List(List(1, 2, 3, 4, 5, 6, 7), List(24, 25, 26, 27, 28, 29, 8), List(23, 40, 41, 42, 43, 30, 9), List(22, 39, 48, 49, 44, 31, 10), List(21, 38, 47, 46, 45, 32, 11), List(20, 37, 36, 35, 34, 33, 12), List(19, 18, 17, 16, 15, 14, 13))\n     */\n    def generateMatrix(n : Int) : List[List[Int]] = {\n", "entry_point": "generateMatrix", "test": "\n\n    var arg00 : Int = 3\n    var x0 : List[List[Int]] = generateMatrix(arg00)\n    var v0 : List[List[Int]] = List(List(1, 2, 3), List(8, 9, 4), List(7, 6, 5))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var x1 : List[List[Int]] = generateMatrix(arg10)\n    var v1 : List[List[Int]] = List(List(1, 2), List(4, 3))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 7\n    var x2 : List[List[Int]] = generateMatrix(arg20)\n    var v2 : List[List[Int]] = List(List(1, 2, 3, 4, 5, 6, 7), List(24, 25, 26, 27, 28, 29, 8), List(23, 40, 41, 42, 43, 30, 9), List(22, 39, 48, 49, 44, 31, 10), List(21, 38, 47, 46, 45, 32, 11), List(20, 37, 36, 35, 34, 33, 12), List(19, 18, 17, 16, 15, 14, 13))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/835", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the slope of a line.\n     *\n     * >>> slope(4, 2, 2, 5)\n     * -1.5\n     * >>> slope(2, 4, 4, 6)\n     * 1\n     * >>> slope(1, 2, 4, 2)\n     * 0\n     */\n    def slope(x1 : Int, y1 : Int, x2 : Int, y2 : Int) : Double = {\n", "entry_point": "slope", "test": "\n\n    var arg00 : Int = 4\n    var arg01 : Int = 2\n    var arg02 : Int = 2\n    var arg03 : Int = 5\n    var x0 : Double = slope(arg00, arg01, arg02, arg03)\n    var v0 : Double = -1.5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var arg11 : Int = 4\n    var arg12 : Int = 4\n    var arg13 : Int = 6\n    var x1 : Double = slope(arg10, arg11, arg12, arg13)\n    var v1 : Double = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = 2\n    var arg22 : Int = 4\n    var arg23 : Int = 2\n    var x2 : Double = slope(arg20, arg21, arg22, arg23)\n    var v2 : Double = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the slope of a line.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/836", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find length of the subarray having maximum sum.\n     *\n     * >>> maxSubArraySum(List(-2, -3, 4, -1, -2, 1, 5, -3), 8)\n     * 5\n     * >>> maxSubArraySum(List(1, -2, 1, 1, -2, 1), 6)\n     * 2\n     * >>> maxSubArraySum(List(-1, -2, 3, 4, 5), 5)\n     * 3\n     */\n    def maxSubArraySum(a : List[Int], size : Int) : Int = {\n", "entry_point": "maxSubArraySum", "test": "\n\n    var arg00 : List[Int] = List(-2, -3, 4, -1, -2, 1, 5, -3)\n    var arg01 : Int = 8\n    var x0 : Int = maxSubArraySum(arg00, arg01)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, -2, 1, 1, -2, 1)\n    var arg11 : Int = 6\n    var x1 : Int = maxSubArraySum(arg10, arg11)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(-1, -2, 3, 4, 5)\n    var arg21 : Int = 5\n    var x2 : Int = maxSubArraySum(arg20, arg21)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find length of the subarray having maximum sum.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/837", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the cube sum of first n odd natural numbers.\n     *\n     * >>> cubeSum(2)\n     * 28\n     * >>> cubeSum(3)\n     * 153\n     * >>> cubeSum(4)\n     * 496\n     */\n    def cubeSum(n : Int) : Int = {\n", "entry_point": "cubeSum", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = cubeSum(arg00)\n    var v0 : Int = 28\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var x1 : Int = cubeSum(arg10)\n    var v1 : Int = 153\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var x2 : Int = cubeSum(arg20)\n    var v2 : Int = 496\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the cube sum of first n odd natural numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/838", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find minimum number swaps required to make two binary strings equal.\n     *\n     * >>> minSwaps(\"0011\", \"1111\")\n     * 1\n     * >>> minSwaps(\"00011\", \"01001\")\n     * 2\n     * >>> minSwaps(\"111\", \"111\")\n     * 0\n     */\n    def minSwaps(s1 : String, s2 : String) : Int = {\n", "entry_point": "minSwaps", "test": "\n\n    var arg00 : String = \"\"\"0011\"\"\"\n    var arg01 : String = \"\"\"1111\"\"\"\n    var x0 : Int = minSwaps(arg00, arg01)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"00011\"\"\"\n    var arg11 : String = \"\"\"01001\"\"\"\n    var x1 : Int = minSwaps(arg10, arg11)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"111\"\"\"\n    var arg21 : String = \"\"\"111\"\"\"\n    var x2 : Int = minSwaps(arg20, arg21)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find minimum number swaps required to make two binary strings equal.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/839", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort the tuples alphabetically by the first item of each tuple.\n     *\n     * >>> sortTuple(List(List(\"Amana\", 28), List(\"Zenat\", 30), List(\"Abhishek\", 29), List(\"Nikhil\", 21), List(\"B\", \"C\")))\n     * List(List(\"Abhishek\", 29), List(\"Amana\", 28), List(\"B\", \"C\"), List(\"Nikhil\", 21), List(\"Zenat\", 30))\n     * >>> sortTuple(List(List(\"aaaa\", 28), List(\"aa\", 30), List(\"bab\", 29), List(\"bb\", 21), List(\"csa\", \"C\")))\n     * List(List(\"aa\", 30), List(\"aaaa\", 28), List(\"bab\", 29), List(\"bb\", 21), List(\"csa\", \"C\"))\n     * >>> sortTuple(List(List(\"Sarala\", 28), List(\"Ayesha\", 30), List(\"Suman\", 29), List(\"Sai\", 21), List(\"G\", \"H\")))\n     * List(List(\"Ayesha\", 30), List(\"G\", \"H\"), List(\"Sai\", 21), List(\"Sarala\", 28), List(\"Suman\", 29))\n     */\n    def sortTuple(tup : List[List[Any]]) : List[List[Any]] = {\n", "entry_point": "sortTuple", "test": "\n\n    var arg00 : List[List[Any]] = List(List(\"\"\"Amana\"\"\", 28), List(\"\"\"Zenat\"\"\", 30), List(\"\"\"Abhishek\"\"\", 29), List(\"\"\"Nikhil\"\"\", 21), List(\"\"\"B\"\"\", \"\"\"C\"\"\"))\n    var x0 : List[List[Any]] = sortTuple(arg00)\n    var v0 : List[List[Any]] = List(List(\"\"\"Abhishek\"\"\", 29), List(\"\"\"Amana\"\"\", 28), List(\"\"\"B\"\"\", \"\"\"C\"\"\"), List(\"\"\"Nikhil\"\"\", 21), List(\"\"\"Zenat\"\"\", 30))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(\"\"\"aaaa\"\"\", 28), List(\"\"\"aa\"\"\", 30), List(\"\"\"bab\"\"\", 29), List(\"\"\"bb\"\"\", 21), List(\"\"\"csa\"\"\", \"\"\"C\"\"\"))\n    var x1 : List[List[Any]] = sortTuple(arg10)\n    var v1 : List[List[Any]] = List(List(\"\"\"aa\"\"\", 30), List(\"\"\"aaaa\"\"\", 28), List(\"\"\"bab\"\"\", 29), List(\"\"\"bb\"\"\", 21), List(\"\"\"csa\"\"\", \"\"\"C\"\"\"))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(\"\"\"Sarala\"\"\", 28), List(\"\"\"Ayesha\"\"\", 30), List(\"\"\"Suman\"\"\", 29), List(\"\"\"Sai\"\"\", 21), List(\"\"\"G\"\"\", \"\"\"H\"\"\"))\n    var x2 : List[List[Any]] = sortTuple(arg20)\n    var v2 : List[List[Any]] = List(List(\"\"\"Ayesha\"\"\", 30), List(\"\"\"G\"\"\", \"\"\"H\"\"\"), List(\"\"\"Sai\"\"\", 21), List(\"\"\"Sarala\"\"\", 28), List(\"\"\"Suman\"\"\", 29))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort the tuples alphabetically by the first item of each tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/840", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n     *\n     * >>> checkSolution(2, 0, -1)\n     * \"Yes\"\n     * >>> checkSolution(1, -5, 6)\n     * \"No\"\n     * >>> checkSolution(2, 0, 2)\n     * \"Yes\"\n     */\n    def checkSolution(a : Int, b : Int, c : Int) : String = {\n", "entry_point": "checkSolution", "test": "\n\n    var arg00 : Int = 2\n    var arg01 : Int = 0\n    var arg02 : Int = -1\n    var x0 : String = checkSolution(arg00, arg01, arg02)\n    var v0 : String = \"\"\"Yes\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var arg11 : Int = -5\n    var arg12 : Int = 6\n    var x1 : String = checkSolution(arg10, arg11, arg12)\n    var v1 : String = \"\"\"No\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var arg21 : Int = 0\n    var arg22 : Int = 2\n    var x2 : String = checkSolution(arg20, arg21, arg22)\n    var v2 : String = \"\"\"Yes\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/841", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count the number of inversions in the given array.\n     *\n     * >>> getInvCount(List(1, 20, 6, 4, 5), 5)\n     * 5\n     * >>> getInvCount(List(8, 4, 2, 1), 4)\n     * 6\n     * >>> getInvCount(List(3, 1, 2), 3)\n     * 2\n     */\n    def getInvCount(arr : List[Int], n : Int) : Int = {\n", "entry_point": "getInvCount", "test": "\n\n    var arg00 : List[Int] = List(1, 20, 6, 4, 5)\n    var arg01 : Int = 5\n    var x0 : Int = getInvCount(arg00, arg01)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(8, 4, 2, 1)\n    var arg11 : Int = 4\n    var x1 : Int = getInvCount(arg10, arg11)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3, 1, 2)\n    var arg21 : Int = 3\n    var x2 : Int = getInvCount(arg20, arg21)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count the number of inversions in the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/842", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the number which occurs for odd number of times in the given array.\n     *\n     * >>> getOddOccurence(List(2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2), 13)\n     * 5\n     * >>> getOddOccurence(List(1, 2, 3, 2, 3, 1, 3), 7)\n     * 3\n     * >>> getOddOccurence(List(5, 7, 2, 7, 5, 2, 5), 7)\n     * 5\n     */\n    def getOddOccurence(arr : List[Int], arrSize : Int) : Int = {\n", "entry_point": "getOddOccurence", "test": "\n\n    var arg00 : List[Int] = List(2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2)\n    var arg01 : Int = 13\n    var x0 : Int = getOddOccurence(arg00, arg01)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 2, 3, 1, 3)\n    var arg11 : Int = 7\n    var x1 : Int = getOddOccurence(arg10, arg11)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(5, 7, 2, 7, 5, 2, 5)\n    var arg21 : Int = 7\n    var x2 : Int = getOddOccurence(arg20, arg21)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the number which occurs for odd number of times in the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/843", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n     *\n     * >>> nthSuperUglyNumber(12, List(2, 7, 13, 19))\n     * 32\n     * >>> nthSuperUglyNumber(10, List(2, 7, 13, 19))\n     * 26\n     * >>> nthSuperUglyNumber(100, List(2, 7, 13, 19))\n     * 5408\n     */\n    def nthSuperUglyNumber(n : Int, primes : List[Int]) : Int = {\n", "entry_point": "nthSuperUglyNumber", "test": "\n\n    var arg00 : Int = 12\n    var arg01 : List[Int] = List(2, 7, 13, 19)\n    var x0 : Int = nthSuperUglyNumber(arg00, arg01)\n    var v0 : Int = 32\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var arg11 : List[Int] = List(2, 7, 13, 19)\n    var x1 : Int = nthSuperUglyNumber(arg10, arg11)\n    var v1 : Int = 26\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 100\n    var arg21 : List[Int] = List(2, 7, 13, 19)\n    var x2 : Int = nthSuperUglyNumber(arg20, arg21)\n    var v2 : Int = 5408\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/844", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the kth element in an array containing odd elements first and then even elements.\n     *\n     * >>> getNumber(8, 5)\n     * 2\n     * >>> getNumber(7, 2)\n     * 3\n     * >>> getNumber(5, 2)\n     * 3\n     */\n    def getNumber(n : Int, k : Int) : Int = {\n", "entry_point": "getNumber", "test": "\n\n    var arg00 : Int = 8\n    var arg01 : Int = 5\n    var x0 : Int = getNumber(arg00, arg01)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 7\n    var arg11 : Int = 2\n    var x1 : Int = getNumber(arg10, arg11)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var arg21 : Int = 2\n    var x2 : Int = getNumber(arg20, arg21)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the kth element in an array containing odd elements first and then even elements.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/845", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the number of digits in factorial of a given number.\n     *\n     * >>> findDigits(7)\n     * 4\n     * >>> findDigits(5)\n     * 3\n     * >>> findDigits(4)\n     * 2\n     */\n    def findDigits(n : Int) : Int = {\n", "entry_point": "findDigits", "test": "\n\n    var arg00 : Int = 7\n    var x0 : Int = findDigits(arg00)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var x1 : Int = findDigits(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var x2 : Int = findDigits(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the number of digits in factorial of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/846", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the minimum number of platforms required for a railway/bus station.\n     *\n     * >>> findPlatform(List(900, 940, 950, 1100, 1500, 1800), List(910, 1200, 1120, 1130, 1900, 2000), 6)\n     * 3\n     * >>> findPlatform(List(100, 200, 300, 400), List(700, 800, 900, 1000), 4)\n     * 4\n     * >>> findPlatform(List(5, 6, 7, 8), List(4, 3, 2, 1), 4)\n     * 1\n     */\n    def findPlatform(arr : List[Int], dep : List[Int], n : Int) : Int = {\n", "entry_point": "findPlatform", "test": "\n\n    var arg00 : List[Int] = List(900, 940, 950, 1100, 1500, 1800)\n    var arg01 : List[Int] = List(910, 1200, 1120, 1130, 1900, 2000)\n    var arg02 : Int = 6\n    var x0 : Int = findPlatform(arg00, arg01, arg02)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(100, 200, 300, 400)\n    var arg11 : List[Int] = List(700, 800, 900, 1000)\n    var arg12 : Int = 4\n    var x1 : Int = findPlatform(arg10, arg11, arg12)\n    var v1 : Int = 4\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(5, 6, 7, 8)\n    var arg21 : List[Int] = List(4, 3, 2, 1)\n    var arg22 : Int = 4\n    var x2 : Int = findPlatform(arg20, arg21, arg22)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the minimum number of platforms required for a railway/bus station.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/847", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to copy a list from a singleton tuple.\n     *\n     * >>> lcopy(List(1, 2, 3))\n     * List(1, 2, 3)\n     * >>> lcopy(List(4, 8, 2, 10, 15, 18))\n     * List(4, 8, 2, 10, 15, 18)\n     * >>> lcopy(List(4, 5, 6))\n     * List(4, 5, 6)\n     */\n    def lcopy(xs : List[Int]) : List[Int] = {\n", "entry_point": "lcopy", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3)\n    var x0 : List[Int] = lcopy(arg00)\n    var v0 : List[Int] = List(1, 2, 3)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 8, 2, 10, 15, 18)\n    var x1 : List[Int] = lcopy(arg10)\n    var v1 : List[Int] = List(4, 8, 2, 10, 15, 18)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(4, 5, 6)\n    var x2 : List[Int] = lcopy(arg20)\n    var v2 : List[Int] = List(4, 5, 6)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to copy a list from a singleton tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/848", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the area of a trapezium.\n     *\n     * >>> areaTrapezium(6, 9, 4)\n     * 30\n     * >>> areaTrapezium(10, 20, 30)\n     * 450\n     * >>> areaTrapezium(15, 25, 35)\n     * 700\n     */\n    def areaTrapezium(base1 : Int, base2 : Int, height : Int) : Int = {\n", "entry_point": "areaTrapezium", "test": "\n\n    var arg00 : Int = 6\n    var arg01 : Int = 9\n    var arg02 : Int = 4\n    var x0 : Int = areaTrapezium(arg00, arg01, arg02)\n    var v0 : Int = 30\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var arg11 : Int = 20\n    var arg12 : Int = 30\n    var x1 : Int = areaTrapezium(arg10, arg11, arg12)\n    var v1 : Int = 450\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 15\n    var arg21 : Int = 25\n    var arg22 : Int = 35\n    var x2 : Int = areaTrapezium(arg20, arg21, arg22)\n    var v2 : Int = 700\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the area of a trapezium.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/849", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find sum of all prime divisors of a given number.\n     *\n     * >>> sum(60)\n     * 10\n     * >>> sum(39)\n     * 16\n     * >>> sum(40)\n     * 7\n     */\n    def sum(n : Int) : Int = {\n", "entry_point": "sum", "test": "\n\n    var arg00 : Int = 60\n    var x0 : Int = sum(arg00)\n    var v0 : Int = 10\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 39\n    var x1 : Int = sum(arg10)\n    var v1 : Int = 16\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 40\n    var x2 : Int = sum(arg20)\n    var v2 : Int = 7\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find sum of all prime divisors of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/850", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if a triangle of positive area is possible with the given angles.\n     *\n     * >>> isTriangleexists(50, 60, 70)\n     * true\n     * >>> isTriangleexists(90, 45, 45)\n     * true\n     * >>> isTriangleexists(150, 30, 70)\n     * false\n     */\n    def isTriangleexists(a : Int, b : Int, c : Int) : Boolean = {\n", "entry_point": "isTriangleexists", "test": "\n\n    var arg00 : Int = 50\n    var arg01 : Int = 60\n    var arg02 : Int = 70\n    var x0 : Boolean = isTriangleexists(arg00, arg01, arg02)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 90\n    var arg11 : Int = 45\n    var arg12 : Int = 45\n    var x1 : Boolean = isTriangleexists(arg10, arg11, arg12)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 150\n    var arg21 : Int = 30\n    var arg22 : Int = 70\n    var x2 : Boolean = isTriangleexists(arg20, arg21, arg22)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if a triangle of positive area is possible with the given angles.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/851", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find sum of inverse of divisors.\n     *\n     * >>> sumOfInverseDivisors(6, 12)\n     * 2\n     * >>> sumOfInverseDivisors(9, 13)\n     * 1.44\n     * >>> sumOfInverseDivisors(1, 4)\n     * 4\n     */\n    def sumOfInverseDivisors(n : Int, sum : Int) : Double = {\n", "entry_point": "sumOfInverseDivisors", "test": "\n\n    var arg00 : Int = 6\n    var arg01 : Int = 12\n    var x0 : Double = sumOfInverseDivisors(arg00, arg01)\n    var v0 : Double = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 9\n    var arg11 : Int = 13\n    var x1 : Double = sumOfInverseDivisors(arg10, arg11)\n    var v1 : Double = 1.44\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = 4\n    var x2 : Double = sumOfInverseDivisors(arg20, arg21)\n    var v2 : Double = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find sum of inverse of divisors.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/852", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to remove negative numbers from a list.\n     *\n     * >>> removeNegs(List(1, -2, 3, -4))\n     * List(1, 3)\n     * >>> removeNegs(List(1, 2, 3, -4))\n     * List(1, 2, 3)\n     * >>> removeNegs(List(4, 5, -6, 7, -8))\n     * List(4, 5, 7)\n     */\n    def removeNegs(numList : List[Int]) : List[Int] = {\n", "entry_point": "removeNegs", "test": "\n\n    var arg00 : List[Int] = List(1, -2, 3, -4)\n    var x0 : List[Int] = removeNegs(arg00)\n    var v0 : List[Int] = List(1, 3)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, -4)\n    var x1 : List[Int] = removeNegs(arg10)\n    var v1 : List[Int] = List(1, 2, 3)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(4, 5, -6, 7, -8)\n    var x2 : List[Int] = removeNegs(arg20)\n    var v2 : List[Int] = List(4, 5, 7)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to remove negative numbers from a list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/853", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find sum of odd factors of a number.\n     *\n     * >>> sumOfOddFactors(30)\n     * 24\n     * >>> sumOfOddFactors(18)\n     * 13\n     * >>> sumOfOddFactors(2)\n     * 1\n     */\n    def sumOfOddFactors(n : Int) : Int = {\n", "entry_point": "sumOfOddFactors", "test": "\n\n    var arg00 : Int = 30\n    var x0 : Int = sumOfOddFactors(arg00)\n    var v0 : Int = 24\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 18\n    var x1 : Int = sumOfOddFactors(arg10)\n    var v1 : Int = 13\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var x2 : Int = sumOfOddFactors(arg20)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find sum of odd factors of a number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/854", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n     *\n     * >>> rawHeap(List(25, 44, 68, 21, 39, 23, 89))\n     * List(21, 25, 23, 44, 39, 68, 89)\n     * >>> rawHeap(List(25, 35, 22, 85, 14, 65, 75, 25, 58))\n     * List(14, 25, 22, 25, 35, 65, 75, 85, 58)\n     * >>> rawHeap(List(4, 5, 6, 2))\n     * List(2, 4, 6, 5)\n     */\n    def rawHeap(rawheap : List[Int]) : List[Int] = {\n", "entry_point": "rawHeap", "test": "\n\n    var arg00 : List[Int] = List(25, 44, 68, 21, 39, 23, 89)\n    var x0 : List[Int] = rawHeap(arg00)\n    var v0 : List[Int] = List(21, 25, 23, 44, 39, 68, 89)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(25, 35, 22, 85, 14, 65, 75, 25, 58)\n    var x1 : List[Int] = rawHeap(arg10)\n    var v1 : List[Int] = List(14, 25, 22, 25, 35, 65, 75, 85, 58)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(4, 5, 6, 2)\n    var x2 : List[Int] = rawHeap(arg20)\n    var v2 : List[Int] = List(2, 4, 6, 5)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/855", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check for even parity of a given number.\n     *\n     * >>> checkEvenParity(10)\n     * true\n     * >>> checkEvenParity(11)\n     * false\n     * >>> checkEvenParity(18)\n     * true\n     */\n    def checkEvenParity(x : Int) : Boolean = {\n", "entry_point": "checkEvenParity", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Boolean = checkEvenParity(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 11\n    var x1 : Boolean = checkEvenParity(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 18\n    var x2 : Boolean = checkEvenParity(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check for even parity of a given number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/856", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find minimum adjacent swaps required to sort binary array.\n     *\n     * >>> findMinSwaps(List(1, 0, 1, 0), 4)\n     * 3\n     * >>> findMinSwaps(List(0, 1, 0), 3)\n     * 1\n     * >>> findMinSwaps(List(0, 0, 1, 1, 0), 5)\n     * 2\n     */\n    def findMinSwaps(arr : List[Int], n : Int) : Int = {\n", "entry_point": "findMinSwaps", "test": "\n\n    var arg00 : List[Int] = List(1, 0, 1, 0)\n    var arg01 : Int = 4\n    var x0 : Int = findMinSwaps(arg00, arg01)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(0, 1, 0)\n    var arg11 : Int = 3\n    var x1 : Int = findMinSwaps(arg10, arg11)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(0, 0, 1, 1, 0)\n    var arg21 : Int = 5\n    var x2 : Int = findMinSwaps(arg20, arg21)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find minimum adjacent swaps required to sort binary array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/857", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to list out the list of given strings individually using map function.\n     *\n     * >>> listifyList(List(\"Red\", \"Blue\", \"Black\", \"White\", \"Pink\"))\n     * List(List(\"R\", \"e\", \"d\"), List(\"B\", \"l\", \"u\", \"e\"), List(\"B\", \"l\", \"a\", \"c\", \"k\"), List(\"W\", \"h\", \"i\", \"t\", \"e\"), List(\"P\", \"i\", \"n\", \"k\"))\n     * >>> listifyList(List(\"python\"))\n     * List(List(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))\n     * >>> listifyList(List(\" red \", \"green\", \" black\", \"blue \", \" orange\", \"brown\"))\n     * List(List(\" \", \"r\", \"e\", \"d\", \" \"), List(\"g\", \"r\", \"e\", \"e\", \"n\"), List(\" \", \"b\", \"l\", \"a\", \"c\", \"k\"), List(\"b\", \"l\", \"u\", \"e\", \" \"), List(\" \", \"o\", \"r\", \"a\", \"n\", \"g\", \"e\"), List(\"b\", \"r\", \"o\", \"w\", \"n\"))\n     */\n    def listifyList(list1 : List[String]) : List[List[String]] = {\n", "entry_point": "listifyList", "test": "\n\n    var arg00 : List[String] = List(\"\"\"Red\"\"\", \"\"\"Blue\"\"\", \"\"\"Black\"\"\", \"\"\"White\"\"\", \"\"\"Pink\"\"\")\n    var x0 : List[List[String]] = listifyList(arg00)\n    var v0 : List[List[String]] = List(List(\"\"\"R\"\"\", \"\"\"e\"\"\", \"\"\"d\"\"\"), List(\"\"\"B\"\"\", \"\"\"l\"\"\", \"\"\"u\"\"\", \"\"\"e\"\"\"), List(\"\"\"B\"\"\", \"\"\"l\"\"\", \"\"\"a\"\"\", \"\"\"c\"\"\", \"\"\"k\"\"\"), List(\"\"\"W\"\"\", \"\"\"h\"\"\", \"\"\"i\"\"\", \"\"\"t\"\"\", \"\"\"e\"\"\"), List(\"\"\"P\"\"\", \"\"\"i\"\"\", \"\"\"n\"\"\", \"\"\"k\"\"\"))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"python\"\"\")\n    var x1 : List[List[String]] = listifyList(arg10)\n    var v1 : List[List[String]] = List(List(\"\"\"p\"\"\", \"\"\"y\"\"\", \"\"\"t\"\"\", \"\"\"h\"\"\", \"\"\"o\"\"\", \"\"\"n\"\"\"))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\" red \"\"\", \"\"\"green\"\"\", \"\"\" black\"\"\", \"\"\"blue \"\"\", \"\"\" orange\"\"\", \"\"\"brown\"\"\")\n    var x2 : List[List[String]] = listifyList(arg20)\n    var v2 : List[List[String]] = List(List(\"\"\" \"\"\", \"\"\"r\"\"\", \"\"\"e\"\"\", \"\"\"d\"\"\", \"\"\" \"\"\"), List(\"\"\"g\"\"\", \"\"\"r\"\"\", \"\"\"e\"\"\", \"\"\"e\"\"\", \"\"\"n\"\"\"), List(\"\"\" \"\"\", \"\"\"b\"\"\", \"\"\"l\"\"\", \"\"\"a\"\"\", \"\"\"c\"\"\", \"\"\"k\"\"\"), List(\"\"\"b\"\"\", \"\"\"l\"\"\", \"\"\"u\"\"\", \"\"\"e\"\"\", \"\"\" \"\"\"), List(\"\"\" \"\"\", \"\"\"o\"\"\", \"\"\"r\"\"\", \"\"\"a\"\"\", \"\"\"n\"\"\", \"\"\"g\"\"\", \"\"\"e\"\"\"), List(\"\"\"b\"\"\", \"\"\"r\"\"\", \"\"\"o\"\"\", \"\"\"w\"\"\", \"\"\"n\"\"\"))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to list out the list of given strings individually using map function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/858", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count number of lists in a given list of lists and square the count.\n     *\n     * >>> countList(List(List(0), List(1, 3), List(5, 7), List(9, 11), List(13, 15, 17)))\n     * 25\n     * >>> countList(List(List(1, 3), List(5, 7), List(9, 11), List(13, 15, 17)))\n     * 16\n     * >>> countList(List(List(2, 4), List(List(6, 8), List(4, 5, 8)), List(10, 12, 14)))\n     * 9\n     */\n    def countList(inputList : List[List[Any]]) : Int = {\n", "entry_point": "countList", "test": "\n\n    var arg00 : List[List[Any]] = List(List(0), List(1, 3), List(5, 7), List(9, 11), List(13, 15, 17))\n    var x0 : Int = countList(arg00)\n    var v0 : Int = 25\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(1, 3), List(5, 7), List(9, 11), List(13, 15, 17))\n    var x1 : Int = countList(arg10)\n    var v1 : Int = 16\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(2, 4), List(List(6, 8), List(4, 5, 8)), List(10, 12, 14))\n    var x2 : Int = countList(arg20)\n    var v2 : Int = 9\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count number of lists in a given list of lists and square the count.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/859", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to generate all sublists of a given list.\n     *\n     * >>> subLists(List(10, 20, 30, 40))\n     * List(List(), List(10), List(20), List(30), List(40), List(10, 20), List(10, 30), List(10, 40), List(20, 30), List(20, 40), List(30, 40), List(10, 20, 30), List(10, 20, 40), List(10, 30, 40), List(20, 30, 40), List(10, 20, 30, 40))\n     * >>> subLists(List(\"X\", \"Y\", \"Z\"))\n     * List(List(), List(\"X\"), List(\"Y\"), List(\"Z\"), List(\"X\", \"Y\"), List(\"X\", \"Z\"), List(\"Y\", \"Z\"), List(\"X\", \"Y\", \"Z\"))\n     * >>> subLists(List(1, 2, 3))\n     * List(List(), List(1), List(2), List(3), List(1, 2), List(1, 3), List(2, 3), List(1, 2, 3))\n     */\n    def subLists(myList : List[Any]) : List[List[Any]] = {\n", "entry_point": "subLists", "test": "\n\n    var arg00 : List[Any] = List(10, 20, 30, 40)\n    var x0 : List[List[Any]] = subLists(arg00)\n    var v0 : List[List[Any]] = List(List(), List(10), List(20), List(30), List(40), List(10, 20), List(10, 30), List(10, 40), List(20, 30), List(20, 40), List(30, 40), List(10, 20, 30), List(10, 20, 40), List(10, 30, 40), List(20, 30, 40), List(10, 20, 30, 40))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(\"\"\"X\"\"\", \"\"\"Y\"\"\", \"\"\"Z\"\"\")\n    var x1 : List[List[Any]] = subLists(arg10)\n    var v1 : List[List[Any]] = List(List(), List(\"\"\"X\"\"\"), List(\"\"\"Y\"\"\"), List(\"\"\"Z\"\"\"), List(\"\"\"X\"\"\", \"\"\"Y\"\"\"), List(\"\"\"X\"\"\", \"\"\"Z\"\"\"), List(\"\"\"Y\"\"\", \"\"\"Z\"\"\"), List(\"\"\"X\"\"\", \"\"\"Y\"\"\", \"\"\"Z\"\"\"))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(1, 2, 3)\n    var x2 : List[List[Any]] = subLists(arg20)\n    var v2 : List[List[Any]] = List(List(), List(1), List(2), List(3), List(1, 2), List(1, 3), List(2, 3), List(1, 2, 3))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to generate all sublists of a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/860", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n     *\n     * >>> checkAlphanumeric(\"dawood@\")\n     * \"Discard\"\n     * >>> checkAlphanumeric(\"skdmsam326\")\n     * \"Accept\"\n     * >>> checkAlphanumeric(\"cooltricks@\")\n     * \"Discard\"\n     */\n    def checkAlphanumeric(string : String) : String = {\n", "entry_point": "checkAlphanumeric", "test": "\n\n    var arg00 : String = \"\"\"dawood@\"\"\"\n    var x0 : String = checkAlphanumeric(arg00)\n    var v0 : String = \"\"\"Discard\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"skdmsam326\"\"\"\n    var x1 : String = checkAlphanumeric(arg10)\n    var v1 : String = \"\"\"Accept\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"cooltricks@\"\"\"\n    var x2 : String = checkAlphanumeric(arg20)\n    var v2 : String = \"\"\"Discard\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/861", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find all anagrams of a string in a given list of strings using lambda function.\n     *\n     * >>> anagramLambda(List(\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"), \"abcd\")\n     * List(\"bcda\", \"cbda\", \"adcb\")\n     * >>> anagramLambda(List(\"recitals\", \" python\"), \"articles\")\n     * List(\"recitals\")\n     * >>> anagramLambda(List(\" keep\", \" abcdef\", \" xyz\"), \" peek\")\n     * List(\" keep\")\n     */\n    def anagramLambda(texts : List[String], str : String) : List[String] = {\n", "entry_point": "anagramLambda", "test": "\n\n    var arg00 : List[String] = List(\"\"\"bcda\"\"\", \"\"\"abce\"\"\", \"\"\"cbda\"\"\", \"\"\"cbea\"\"\", \"\"\"adcb\"\"\")\n    var arg01 : String = \"\"\"abcd\"\"\"\n    var x0 : List[String] = anagramLambda(arg00, arg01)\n    var v0 : List[String] = List(\"\"\"bcda\"\"\", \"\"\"cbda\"\"\", \"\"\"adcb\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"recitals\"\"\", \"\"\" python\"\"\")\n    var arg11 : String = \"\"\"articles\"\"\"\n    var x1 : List[String] = anagramLambda(arg10, arg11)\n    var v1 : List[String] = List(\"\"\"recitals\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\" keep\"\"\", \"\"\" abcdef\"\"\", \"\"\" xyz\"\"\")\n    var arg21 : String = \"\"\" peek\"\"\"\n    var x2 : List[String] = anagramLambda(arg20, arg21)\n    var v2 : List[String] = List(\"\"\" keep\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find all anagrams of a string in a given list of strings using lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/862", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the occurrences of n most common words in a given text.\n     *\n     * >>> nCommonWords(\"python is a programming language\", 1)\n     * List(List(\"python\", 1))\n     * >>> nCommonWords(\"python is a programming language\", 1)\n     * List(List(\"python\", 1))\n     * >>> nCommonWords(\"python is a programming language\", 5)\n     * List(List(\"python\", 1), List(\"is\", 1), List(\"a\", 1), List(\"programming\", 1), List(\"language\", 1))\n     */\n    def nCommonWords(text : String, n : Int) : List[List[Any]] = {\n", "entry_point": "nCommonWords", "test": "\n\n    var arg00 : String = \"\"\"python is a programming language\"\"\"\n    var arg01 : Int = 1\n    var x0 : List[List[Any]] = nCommonWords(arg00, arg01)\n    var v0 : List[List[Any]] = List(List(\"\"\"python\"\"\", 1))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"python is a programming language\"\"\"\n    var arg11 : Int = 1\n    var x1 : List[List[Any]] = nCommonWords(arg10, arg11)\n    var v1 : List[List[Any]] = List(List(\"\"\"python\"\"\", 1))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"python is a programming language\"\"\"\n    var arg21 : Int = 5\n    var x2 : List[List[Any]] = nCommonWords(arg20, arg21)\n    var v2 : List[List[Any]] = List(List(\"\"\"python\"\"\", 1), List(\"\"\"is\"\"\", 1), List(\"\"\"a\"\"\", 1), List(\"\"\"programming\"\"\", 1), List(\"\"\"language\"\"\", 1))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the occurrences of n most common words in a given text.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/863", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n     *\n     * >>> findLongestConseqSubseq(List(1, 2, 2, 3), 4)\n     * 3\n     * >>> findLongestConseqSubseq(List(1, 9, 3, 10, 4, 20, 2), 7)\n     * 4\n     * >>> findLongestConseqSubseq(List(36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42), 11)\n     * 5\n     */\n    def findLongestConseqSubseq(arr : List[Int], n : Int) : Int = {\n", "entry_point": "findLongestConseqSubseq", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 2, 3)\n    var arg01 : Int = 4\n    var x0 : Int = findLongestConseqSubseq(arg00, arg01)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 9, 3, 10, 4, 20, 2)\n    var arg11 : Int = 7\n    var x1 : Int = findLongestConseqSubseq(arg10, arg11)\n    var v1 : Int = 4\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42)\n    var arg21 : Int = 11\n    var x2 : Int = findLongestConseqSubseq(arg20, arg21)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/864", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find palindromes in a given list of strings using lambda function.\n     *\n     * >>> palindromeLambda(List(\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"))\n     * List(\"php\", \"aaa\")\n     * >>> palindromeLambda(List(\"abcd\", \"Python\", \"abba\", \"aba\"))\n     * List(\"abba\", \"aba\")\n     * >>> palindromeLambda(List(\"abcd\", \"abbccbba\", \"abba\", \"aba\"))\n     * List(\"abbccbba\", \"abba\", \"aba\")\n     */\n    def palindromeLambda(texts : List[String]) : List[String] = {\n", "entry_point": "palindromeLambda", "test": "\n\n    var arg00 : List[String] = List(\"\"\"php\"\"\", \"\"\"res\"\"\", \"\"\"Python\"\"\", \"\"\"abcd\"\"\", \"\"\"Java\"\"\", \"\"\"aaa\"\"\")\n    var x0 : List[String] = palindromeLambda(arg00)\n    var v0 : List[String] = List(\"\"\"php\"\"\", \"\"\"aaa\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"abcd\"\"\", \"\"\"Python\"\"\", \"\"\"abba\"\"\", \"\"\"aba\"\"\")\n    var x1 : List[String] = palindromeLambda(arg10)\n    var v1 : List[String] = List(\"\"\"abba\"\"\", \"\"\"aba\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"abcd\"\"\", \"\"\"abbccbba\"\"\", \"\"\"abba\"\"\", \"\"\"aba\"\"\")\n    var x2 : List[String] = palindromeLambda(arg20)\n    var v2 : List[String] = List(\"\"\"abbccbba\"\"\", \"\"\"abba\"\"\", \"\"\"aba\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find palindromes in a given list of strings using lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/865", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to print n-times a list using map function.\n     *\n     * >>> ntimesList(List(1, 2, 3, 4, 5, 6, 7), 3)\n     * List(3, 6, 9, 12, 15, 18, 21)\n     * >>> ntimesList(List(1, 2, 3, 4, 5, 6, 7), 4)\n     * List(4, 8, 12, 16, 20, 24, 28)\n     * >>> ntimesList(List(1, 2, 3, 4, 5, 6, 7), 10)\n     * List(10, 20, 30, 40, 50, 60, 70)\n     */\n    def ntimesList(nums : List[Int], n : Int) : List[Int] = {\n", "entry_point": "ntimesList", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5, 6, 7)\n    var arg01 : Int = 3\n    var x0 : List[Int] = ntimesList(arg00, arg01)\n    var v0 : List[Int] = List(3, 6, 9, 12, 15, 18, 21)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5, 6, 7)\n    var arg11 : Int = 4\n    var x1 : List[Int] = ntimesList(arg10, arg11)\n    var v1 : List[Int] = List(4, 8, 12, 16, 20, 24, 28)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4, 5, 6, 7)\n    var arg21 : Int = 10\n    var x2 : List[Int] = ntimesList(arg20, arg21)\n    var v2 : List[Int] = List(10, 20, 30, 40, 50, 60, 70)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to print n-times a list using map function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/866", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check whether the given month name contains 31 days or not.\n     *\n     * >>> checkMonthnumb(\"February\")\n     * false\n     * >>> checkMonthnumb(\"January\")\n     * true\n     * >>> checkMonthnumb(\"March\")\n     * true\n     */\n    def checkMonthnumb(monthname2 : String) : Boolean = {\n", "entry_point": "checkMonthnumb", "test": "\n\n    var arg00 : String = \"\"\"February\"\"\"\n    var x0 : Boolean = checkMonthnumb(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"January\"\"\"\n    var x1 : Boolean = checkMonthnumb(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"March\"\"\"\n    var x2 : Boolean = checkMonthnumb(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check whether the given month name contains 31 days or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/867", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to add a minimum number such that the sum of array becomes even.\n     *\n     * >>> minNum(List(1, 2, 3, 4, 5, 6, 7, 8, 9), 9)\n     * 1\n     * >>> minNum(List(1, 2, 3, 4, 5, 6, 7, 8), 8)\n     * 2\n     * >>> minNum(List(1, 2, 3), 3)\n     * 2\n     */\n    def minNum(arr : List[Int], n : Int) : Int = {\n", "entry_point": "minNum", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9)\n    var arg01 : Int = 9\n    var x0 : Int = minNum(arg00, arg01)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8)\n    var arg11 : Int = 8\n    var x1 : Int = minNum(arg10, arg11)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3)\n    var arg21 : Int = 3\n    var x2 : Int = minNum(arg20, arg21)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to add a minimum number such that the sum of array becomes even.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/868", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the length of the last word in a given string.\n     *\n     * >>> lengthOfLastWord(\"python language\")\n     * 8\n     * >>> lengthOfLastWord(\"PHP\")\n     * 3\n     * >>> lengthOfLastWord(\"\")\n     * 0\n     */\n    def lengthOfLastWord(a : String) : Int = {\n", "entry_point": "lengthOfLastWord", "test": "\n\n    var arg00 : String = \"\"\"python language\"\"\"\n    var x0 : Int = lengthOfLastWord(arg00)\n    var v0 : Int = 8\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"PHP\"\"\"\n    var x1 : Int = lengthOfLastWord(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"\"\"\"\n    var x2 : Int = lengthOfLastWord(arg20)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the length of the last word in a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/869", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove sublists from a given list of lists, which are outside a given range.\n     *\n     * >>> removeListRange(List(List(2), List(0), List(1, 2, 3), List(0, 1, 2, 3, 6, 7), List(9, 11), List(13, 14, 15, 17)), 13, 17)\n     * List(List(13, 14, 15, 17))\n     * >>> removeListRange(List(List(2), List(0), List(1, 2, 3), List(0, 1, 2, 3, 6, 7), List(9, 11), List(13, 14, 15, 17)), 1, 3)\n     * List(List(2), List(1, 2, 3))\n     * >>> removeListRange(List(List(2), List(0), List(1, 2, 3), List(0, 1, 2, 3, 6, 7), List(9, 11), List(13, 14, 15, 17)), 0, 7)\n     * List(List(2), List(0), List(1, 2, 3), List(0, 1, 2, 3, 6, 7))\n     */\n    def removeListRange(list1 : List[List[Int]], leftrange : Int, rigthrange : Int) : List[List[Int]] = {\n", "entry_point": "removeListRange", "test": "\n\n    var arg00 : List[List[Int]] = List(List(2), List(0), List(1, 2, 3), List(0, 1, 2, 3, 6, 7), List(9, 11), List(13, 14, 15, 17))\n    var arg01 : Int = 13\n    var arg02 : Int = 17\n    var x0 : List[List[Int]] = removeListRange(arg00, arg01, arg02)\n    var v0 : List[List[Int]] = List(List(13, 14, 15, 17))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(2), List(0), List(1, 2, 3), List(0, 1, 2, 3, 6, 7), List(9, 11), List(13, 14, 15, 17))\n    var arg11 : Int = 1\n    var arg12 : Int = 3\n    var x1 : List[List[Int]] = removeListRange(arg10, arg11, arg12)\n    var v1 : List[List[Int]] = List(List(2), List(1, 2, 3))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(2), List(0), List(1, 2, 3), List(0, 1, 2, 3, 6, 7), List(9, 11), List(13, 14, 15, 17))\n    var arg21 : Int = 0\n    var arg22 : Int = 7\n    var x2 : List[List[Int]] = removeListRange(arg20, arg21, arg22)\n    var v2 : List[List[Int]] = List(List(2), List(0), List(1, 2, 3), List(0, 1, 2, 3, 6, 7))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove sublists from a given list of lists, which are outside a given range.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/870", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n     *\n     * >>> sumPositivenum(List(2, 4, -6, -9, 11, -12, 14, -5, 17))\n     * 48\n     * >>> sumPositivenum(List(10, 15, -14, 13, -18, 12, -20))\n     * 50\n     * >>> sumPositivenum(List(19, -65, 57, 39, 152, -639, 121, 44, 90, -190))\n     * 522\n     */\n    def sumPositivenum(nums : List[Int]) : Int = {\n", "entry_point": "sumPositivenum", "test": "\n\n    var arg00 : List[Int] = List(2, 4, -6, -9, 11, -12, 14, -5, 17)\n    var x0 : Int = sumPositivenum(arg00)\n    var v0 : Int = 48\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(10, 15, -14, 13, -18, 12, -20)\n    var x1 : Int = sumPositivenum(arg10)\n    var v1 : Int = 50\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(19, -65, 57, 39, 152, -639, 121, 44, 90, -190)\n    var x2 : Int = sumPositivenum(arg20)\n    var v2 : Int = 522\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/871", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the given strings are rotations of each other or not.\n     *\n     * >>> areRotations(\"abc\", \"cba\")\n     * false\n     * >>> areRotations(\"abcd\", \"cdba\")\n     * false\n     * >>> areRotations(\"abacd\", \"cdaba\")\n     * true\n     */\n    def areRotations(string1 : String, string2 : String) : Boolean = {\n", "entry_point": "areRotations", "test": "\n\n    var arg00 : String = \"\"\"abc\"\"\"\n    var arg01 : String = \"\"\"cba\"\"\"\n    var x0 : Boolean = areRotations(arg00, arg01)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"abcd\"\"\"\n    var arg11 : String = \"\"\"cdba\"\"\"\n    var x1 : Boolean = areRotations(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"abacd\"\"\"\n    var arg21 : String = \"\"\"cdaba\"\"\"\n    var x2 : Boolean = areRotations(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the given strings are rotations of each other or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/872", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if a nested list is a subset of another nested list.\n     *\n     * >>> checkSubset(List(List(1, 3), List(5, 7), List(9, 11), List(13, 15, 17)), List(List(1, 3), List(13, 15, 17)))\n     * true\n     * >>> checkSubset(List(List(1, 2), List(2, 3), List(3, 4), List(5, 6)), List(List(3, 4), List(5, 6)))\n     * true\n     * >>> checkSubset(List(List(List(1, 2), List(2, 3)), List(List(3, 4), List(5, 7))), List(List(List(3, 4), List(5, 6))))\n     * false\n     */\n    def checkSubset(list1 : List[List[Any]], list2 : List[List[Any]]) : Boolean = {\n", "entry_point": "checkSubset", "test": "\n\n    var arg00 : List[List[Any]] = List(List(1, 3), List(5, 7), List(9, 11), List(13, 15, 17))\n    var arg01 : List[List[Any]] = List(List(1, 3), List(13, 15, 17))\n    var x0 : Boolean = checkSubset(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(1, 2), List(2, 3), List(3, 4), List(5, 6))\n    var arg11 : List[List[Any]] = List(List(3, 4), List(5, 6))\n    var x1 : Boolean = checkSubset(arg10, arg11)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(List(1, 2), List(2, 3)), List(List(3, 4), List(5, 7)))\n    var arg21 : List[List[Any]] = List(List(List(3, 4), List(5, 6)))\n    var x2 : Boolean = checkSubset(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if a nested list is a subset of another nested list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/873", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to solve the fibonacci sequence using recursion.\n     *\n     * >>> fibonacci(7)\n     * 13\n     * >>> fibonacci(8)\n     * 21\n     * >>> fibonacci(9)\n     * 34\n     */\n    def fibonacci(n : Int) : Int = {\n", "entry_point": "fibonacci", "test": "\n\n    var arg00 : Int = 7\n    var x0 : Int = fibonacci(arg00)\n    var v0 : Int = 13\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 8\n    var x1 : Int = fibonacci(arg10)\n    var v1 : Int = 21\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 9\n    var x2 : Int = fibonacci(arg20)\n    var v2 : Int = 34\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to solve the fibonacci sequence using recursion.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/874", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check if the string is a concatenation of another string.\n     *\n     * >>> checkConcat(\"abcabcabc\", \"abc\")\n     * true\n     * >>> checkConcat(\"abcab\", \"abc\")\n     * false\n     * >>> checkConcat(\"aba\", \"ab\")\n     * false\n     */\n    def checkConcat(str1 : String, str2 : String) : Boolean = {\n", "entry_point": "checkConcat", "test": "\n\n    var arg00 : String = \"\"\"abcabcabc\"\"\"\n    var arg01 : String = \"\"\"abc\"\"\"\n    var x0 : Boolean = checkConcat(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"abcab\"\"\"\n    var arg11 : String = \"\"\"abc\"\"\"\n    var x1 : Boolean = checkConcat(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"aba\"\"\"\n    var arg21 : String = \"\"\"ab\"\"\"\n    var x2 : Boolean = checkConcat(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check if the string is a concatenation of another string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/875", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the minimum difference in the tuple pairs of given tuples.\n     *\n     * >>> minDifference(List(List(3, 5), List(1, 7), List(10, 3), List(1, 2)))\n     * 1\n     * >>> minDifference(List(List(4, 6), List(12, 8), List(11, 4), List(2, 13)))\n     * 2\n     * >>> minDifference(List(List(5, 17), List(3, 9), List(12, 5), List(3, 24)))\n     * 6\n     */\n    def minDifference(testList : List[List[Int]]) : Int = {\n", "entry_point": "minDifference", "test": "\n\n    var arg00 : List[List[Int]] = List(List(3, 5), List(1, 7), List(10, 3), List(1, 2))\n    var x0 : Int = minDifference(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(4, 6), List(12, 8), List(11, 4), List(2, 13))\n    var x1 : Int = minDifference(arg10)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(5, 17), List(3, 9), List(12, 5), List(3, 24))\n    var x2 : Int = minDifference(arg20)\n    var v2 : Int = 6\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the minimum difference in the tuple pairs of given tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/876", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find lcm of two positive integers.\n     *\n     * >>> lcm(4, 6)\n     * 12\n     * >>> lcm(15, 17)\n     * 255\n     * >>> lcm(2, 6)\n     * 6\n     */\n    def lcm(x : Int, y : Int) : Int = {\n", "entry_point": "lcm", "test": "\n\n    var arg00 : Int = 4\n    var arg01 : Int = 6\n    var x0 : Int = lcm(arg00, arg01)\n    var v0 : Int = 12\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 15\n    var arg11 : Int = 17\n    var x1 : Int = lcm(arg10, arg11)\n    var v1 : Int = 255\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var arg21 : Int = 6\n    var x2 : Int = lcm(arg20, arg21)\n    var v2 : Int = 6\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find lcm of two positive integers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/877", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to sort the given string.\n     *\n     * >>> sortString(\"cba\")\n     * \"abc\"\n     * >>> sortString(\"data\")\n     * \"aadt\"\n     * >>> sortString(\"zxy\")\n     * \"xyz\"\n     */\n    def sortString(str : String) : String = {\n", "entry_point": "sortString", "test": "\n\n    var arg00 : String = \"\"\"cba\"\"\"\n    var x0 : String = sortString(arg00)\n    var v0 : String = \"\"\"abc\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"data\"\"\"\n    var x1 : String = sortString(arg10)\n    var v1 : String = \"\"\"aadt\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"zxy\"\"\"\n    var x2 : String = sortString(arg20)\n    var v2 : String = \"\"\"xyz\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to sort the given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/878", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if the given tuple contains only k elements.\n     *\n     * >>> checkTuples(List(3, 5, 6, 5, 3, 6), List(3, 6, 5))\n     * true\n     * >>> checkTuples(List(4, 5, 6, 4, 6, 5), List(4, 5, 6))\n     * true\n     * >>> checkTuples(List(9, 8, 7, 6, 8, 9), List(9, 8, 1))\n     * false\n     */\n    def checkTuples(testTuple : List[Int], k : List[Int]) : Boolean = {\n", "entry_point": "checkTuples", "test": "\n\n    var arg00 : List[Int] = List(3, 5, 6, 5, 3, 6)\n    var arg01 : List[Int] = List(3, 6, 5)\n    var x0 : Boolean = checkTuples(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 5, 6, 4, 6, 5)\n    var arg11 : List[Int] = List(4, 5, 6)\n    var x1 : Boolean = checkTuples(arg10, arg11)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(9, 8, 7, 6, 8, 9)\n    var arg21 : List[Int] = List(9, 8, 1)\n    var x2 : Boolean = checkTuples(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if the given tuple contains only k elements.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/879", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n     *\n     * >>> textMatch(\"aabbbbd\")\n     * \"Not matched!\"\n     * >>> textMatch(\"aabAbbbc\")\n     * \"Not matched!\"\n     * >>> textMatch(\"accddbbjjjb\")\n     * \"Found a match!\"\n     */\n    def textMatch(text : String) : String = {\n", "entry_point": "textMatch", "test": "\n\n    var arg00 : String = \"\"\"aabbbbd\"\"\"\n    var x0 : String = textMatch(arg00)\n    var v0 : String = \"\"\"Not matched!\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"aabAbbbc\"\"\"\n    var x1 : String = textMatch(arg10)\n    var v1 : String = \"\"\"Not matched!\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"accddbbjjjb\"\"\"\n    var x2 : String = textMatch(arg20)\n    var v2 : String = \"\"\"Found a match!\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/880", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find number of solutions in quadratic equation.\n     *\n     * >>> checkSolution(2, 5, 2)\n     * \"2 solutions\"\n     * >>> checkSolution(1, 1, 1)\n     * \"No solutions\"\n     * >>> checkSolution(1, 2, 1)\n     * \"1 solution\"\n     */\n    def checkSolution(a : Int, b : Int, c : Int) : String = {\n", "entry_point": "checkSolution", "test": "\n\n    var arg00 : Int = 2\n    var arg01 : Int = 5\n    var arg02 : Int = 2\n    var x0 : String = checkSolution(arg00, arg01, arg02)\n    var v0 : String = \"\"\"2 solutions\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var arg11 : Int = 1\n    var arg12 : Int = 1\n    var x1 : String = checkSolution(arg10, arg11, arg12)\n    var v1 : String = \"\"\"No solutions\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var arg21 : Int = 2\n    var arg22 : Int = 1\n    var x2 : String = checkSolution(arg20, arg21, arg22)\n    var v2 : String = \"\"\"1 solution\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find number of solutions in quadratic equation.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/881", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the sum of first even and odd number of a given list.\n     *\n     * >>> sumEvenOdd(List(1, 3, 5, 7, 4, 1, 6, 8))\n     * 5\n     * >>> sumEvenOdd(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n     * 3\n     * >>> sumEvenOdd(List(1, 5, 7, 9, 10))\n     * 11\n     */\n    def sumEvenOdd(list1 : List[Int]) : Int = {\n", "entry_point": "sumEvenOdd", "test": "\n\n    var arg00 : List[Int] = List(1, 3, 5, 7, 4, 1, 6, 8)\n    var x0 : Int = sumEvenOdd(arg00)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var x1 : Int = sumEvenOdd(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 5, 7, 9, 10)\n    var x2 : Int = sumEvenOdd(arg20)\n    var v2 : Int = 11\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the sum of first even and odd number of a given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/882", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to caluclate perimeter of a parallelogram.\n     *\n     * >>> parallelogramPerimeter(10, 20)\n     * 400\n     * >>> parallelogramPerimeter(15, 20)\n     * 600\n     * >>> parallelogramPerimeter(8, 9)\n     * 144\n     */\n    def parallelogramPerimeter(b : Int, h : Int) : Int = {\n", "entry_point": "parallelogramPerimeter", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 20\n    var x0 : Int = parallelogramPerimeter(arg00, arg01)\n    var v0 : Int = 400\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 15\n    var arg11 : Int = 20\n    var x1 : Int = parallelogramPerimeter(arg10, arg11)\n    var v1 : Int = 600\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 8\n    var arg21 : Int = 9\n    var x2 : Int = parallelogramPerimeter(arg20, arg21)\n    var v2 : Int = 144\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to caluclate perimeter of a parallelogram.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/883", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\n     *\n     * >>> divOfNums(List(19, 65, 57, 39, 152, 639, 121, 44, 90, 190), 2, 4)\n     * List(152, 44)\n     * >>> divOfNums(List(1, 2, 3, 5, 7, 8, 10), 2, 5)\n     * List(10)\n     * >>> divOfNums(List(10, 15, 14, 13, 18, 12, 20), 10, 5)\n     * List(10, 20)\n     */\n    def divOfNums(nums : List[Int], m : Int, n : Int) : List[Int] = {\n", "entry_point": "divOfNums", "test": "\n\n    var arg00 : List[Int] = List(19, 65, 57, 39, 152, 639, 121, 44, 90, 190)\n    var arg01 : Int = 2\n    var arg02 : Int = 4\n    var x0 : List[Int] = divOfNums(arg00, arg01, arg02)\n    var v0 : List[Int] = List(152, 44)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 5, 7, 8, 10)\n    var arg11 : Int = 2\n    var arg12 : Int = 5\n    var x1 : List[Int] = divOfNums(arg10, arg11, arg12)\n    var v1 : List[Int] = List(10)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(10, 15, 14, 13, 18, 12, 20)\n    var arg21 : Int = 10\n    var arg22 : Int = 5\n    var x2 : List[Int] = divOfNums(arg20, arg21, arg22)\n    var v2 : List[Int] = List(10, 20)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/884", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether all the bits are within a given range or not.\n     *\n     * >>> allBitsSetInTheGivenRange(10, 2, 1)\n     * true\n     * >>> allBitsSetInTheGivenRange(5, 2, 4)\n     * false\n     * >>> allBitsSetInTheGivenRange(22, 2, 3)\n     * true\n     */\n    def allBitsSetInTheGivenRange(n : Int, l : Int, r : Int) : Boolean = {\n", "entry_point": "allBitsSetInTheGivenRange", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 2\n    var arg02 : Int = 1\n    var x0 : Boolean = allBitsSetInTheGivenRange(arg00, arg01, arg02)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var arg11 : Int = 2\n    var arg12 : Int = 4\n    var x1 : Boolean = allBitsSetInTheGivenRange(arg10, arg11, arg12)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 22\n    var arg21 : Int = 2\n    var arg22 : Int = 3\n    var x2 : Boolean = allBitsSetInTheGivenRange(arg20, arg21, arg22)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether all the bits are within a given range or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/885", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the two given strings are isomorphic to each other or not.\n     *\n     * >>> isIsomorphic(\"paper\", \"title\")\n     * true\n     * >>> isIsomorphic(\"ab\", \"ba\")\n     * true\n     * >>> isIsomorphic(\"ab\", \"aa\")\n     * false\n     */\n    def isIsomorphic(str1 : String, str2 : String) : Boolean = {\n", "entry_point": "isIsomorphic", "test": "\n\n    var arg00 : String = \"\"\"paper\"\"\"\n    var arg01 : String = \"\"\"title\"\"\"\n    var x0 : Boolean = isIsomorphic(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"ab\"\"\"\n    var arg11 : String = \"\"\"ba\"\"\"\n    var x1 : Boolean = isIsomorphic(arg10, arg11)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"ab\"\"\"\n    var arg21 : String = \"\"\"aa\"\"\"\n    var x2 : Boolean = isIsomorphic(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the two given strings are isomorphic to each other or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/886", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to add all the numbers in a list and divide it with the length of the list.\n     *\n     * >>> sumNum(List(8, 2, 3, 0, 7))\n     * 4.0\n     * >>> sumNum(List(-10, -20, -30))\n     * -20.0\n     * >>> sumNum(List(19, 15, 18))\n     * 17.333333333333332\n     */\n    def sumNum(numbers : List[Int]) : Double = {\n", "entry_point": "sumNum", "test": "\n\n    var arg00 : List[Int] = List(8, 2, 3, 0, 7)\n    var x0 : Double = sumNum(arg00)\n    var v0 : Double = 4.0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(-10, -20, -30)\n    var x1 : Double = sumNum(arg10)\n    var v1 : Double = -20.0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(19, 15, 18)\n    var x2 : Double = sumNum(arg20)\n    var v2 : Double = 17.333333333333332\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to add all the numbers in a list and divide it with the length of the list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/887", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the given number is odd or not using bitwise operator.\n     *\n     * >>> isOdd(5)\n     * true\n     * >>> isOdd(6)\n     * false\n     * >>> isOdd(7)\n     * true\n     */\n    def isOdd(n : Int) : Boolean = {\n", "entry_point": "isOdd", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Boolean = isOdd(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 6\n    var x1 : Boolean = isOdd(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 7\n    var x2 : Boolean = isOdd(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the given number is odd or not using bitwise operator.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/888", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to substract the elements of the given nested tuples.\n     *\n     * >>> substractElements(List(List(1, 3), List(4, 5), List(2, 9), List(1, 10)), List(List(6, 7), List(3, 9), List(1, 1), List(7, 3)))\n     * List(List(-5, -4), List(1, -4), List(1, 8), List(-6, 7))\n     * >>> substractElements(List(List(13, 4), List(14, 6), List(13, 10), List(12, 11)), List(List(19, 8), List(14, 10), List(12, 2), List(18, 4)))\n     * List(List(-6, -4), List(0, -4), List(1, 8), List(-6, 7))\n     * >>> substractElements(List(List(19, 5), List(18, 7), List(19, 11), List(17, 12)), List(List(12, 9), List(17, 11), List(13, 3), List(19, 5)))\n     * List(List(7, -4), List(1, -4), List(6, 8), List(-2, 7))\n     */\n    def substractElements(testTup1 : List[List[Int]], testTup2 : List[List[Int]]) : List[List[Int]] = {\n", "entry_point": "substractElements", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 3), List(4, 5), List(2, 9), List(1, 10))\n    var arg01 : List[List[Int]] = List(List(6, 7), List(3, 9), List(1, 1), List(7, 3))\n    var x0 : List[List[Int]] = substractElements(arg00, arg01)\n    var v0 : List[List[Int]] = List(List(-5, -4), List(1, -4), List(1, 8), List(-6, 7))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(13, 4), List(14, 6), List(13, 10), List(12, 11))\n    var arg11 : List[List[Int]] = List(List(19, 8), List(14, 10), List(12, 2), List(18, 4))\n    var x1 : List[List[Int]] = substractElements(arg10, arg11)\n    var v1 : List[List[Int]] = List(List(-6, -4), List(0, -4), List(1, 8), List(-6, 7))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(19, 5), List(18, 7), List(19, 11), List(17, 12))\n    var arg21 : List[List[Int]] = List(List(12, 9), List(17, 11), List(13, 3), List(19, 5))\n    var x2 : List[List[Int]] = substractElements(arg20, arg21)\n    var v2 : List[List[Int]] = List(List(7, -4), List(1, -4), List(6, 8), List(-2, 7))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to substract the elements of the given nested tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/889", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to reverse each list in a given list of lists.\n     *\n     * >>> reverseListLists(List(List(1, 2, 3, 4), List(5, 6, 7, 8), List(9, 10, 11, 12), List(13, 14, 15, 16)))\n     * List(List(4, 3, 2, 1), List(8, 7, 6, 5), List(12, 11, 10, 9), List(16, 15, 14, 13))\n     * >>> reverseListLists(List(List(1, 2), List(2, 3), List(3, 4)))\n     * List(List(2, 1), List(3, 2), List(4, 3))\n     * >>> reverseListLists(List(List(10, 20), List(30, 40)))\n     * List(List(20, 10), List(40, 30))\n     */\n    def reverseListLists(lists : List[List[Int]]) : List[List[Int]] = {\n", "entry_point": "reverseListLists", "test": "\n\n    var arg00 : List[List[Int]] = List(List(1, 2, 3, 4), List(5, 6, 7, 8), List(9, 10, 11, 12), List(13, 14, 15, 16))\n    var x0 : List[List[Int]] = reverseListLists(arg00)\n    var v0 : List[List[Int]] = List(List(4, 3, 2, 1), List(8, 7, 6, 5), List(12, 11, 10, 9), List(16, 15, 14, 13))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(1, 2), List(2, 3), List(3, 4))\n    var x1 : List[List[Int]] = reverseListLists(arg10)\n    var v1 : List[List[Int]] = List(List(2, 1), List(3, 2), List(4, 3))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(10, 20), List(30, 40))\n    var x2 : List[List[Int]] = reverseListLists(arg20)\n    var v2 : List[List[Int]] = List(List(20, 10), List(40, 30))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to reverse each list in a given list of lists.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/890", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the index of an extra element present in one sorted array.\n     *\n     * >>> findExtra(List(1, 2, 3, 4), List(1, 2, 3), 3)\n     * 3\n     * >>> findExtra(List(2, 4, 6, 8, 10), List(2, 4, 6, 8), 4)\n     * 4\n     * >>> findExtra(List(1, 3, 5, 7, 9, 11), List(1, 3, 5, 7, 9), 5)\n     * 5\n     */\n    def findExtra(arr1 : List[Int], arr2 : List[Int], n : Int) : Int = {\n", "entry_point": "findExtra", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4)\n    var arg01 : List[Int] = List(1, 2, 3)\n    var arg02 : Int = 3\n    var x0 : Int = findExtra(arg00, arg01, arg02)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 4, 6, 8, 10)\n    var arg11 : List[Int] = List(2, 4, 6, 8)\n    var arg12 : Int = 4\n    var x1 : Int = findExtra(arg10, arg11, arg12)\n    var v1 : Int = 4\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 3, 5, 7, 9, 11)\n    var arg21 : List[Int] = List(1, 3, 5, 7, 9)\n    var arg22 : Int = 5\n    var x2 : Int = findExtra(arg20, arg21, arg22)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the index of an extra element present in one sorted array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/891", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the given two numbers have same number of digits or not.\n     *\n     * >>> sameLength(12, 1)\n     * false\n     * >>> sameLength(2, 2)\n     * true\n     * >>> sameLength(10, 20)\n     * true\n     */\n    def sameLength(a : Int, b : Int) : Boolean = {\n", "entry_point": "sameLength", "test": "\n\n    var arg00 : Int = 12\n    var arg01 : Int = 1\n    var x0 : Boolean = sameLength(arg00, arg01)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var arg11 : Int = 2\n    var x1 : Boolean = sameLength(arg10, arg11)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 10\n    var arg21 : Int = 20\n    var x2 : Boolean = sameLength(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the given two numbers have same number of digits or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/892", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove multiple spaces in a string.\n     *\n     * >>> removeSpaces(\"python  program\")\n     * \"python program\"\n     * >>> removeSpaces(\"python   programming    language\")\n     * \"python programming language\"\n     * >>> removeSpaces(\"python                     program\")\n     * \"python program\"\n     */\n    def removeSpaces(text : String) : String = {\n", "entry_point": "removeSpaces", "test": "\n\n    var arg00 : String = \"\"\"python  program\"\"\"\n    var x0 : String = removeSpaces(arg00)\n    var v0 : String = \"\"\"python program\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"python   programming    language\"\"\"\n    var x1 : String = removeSpaces(arg10)\n    var v1 : String = \"\"\"python programming language\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"python                     program\"\"\"\n    var x2 : String = removeSpaces(arg20)\n    var v2 : String = \"\"\"python program\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove multiple spaces in a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/893", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to get the last element of each sublist.\n     *\n     * >>> extract(List(List(1, 2, 3), List(4, 5), List(6, 7, 8, 9)))\n     * List(3, 5, 9)\n     * >>> extract(List(List(\"x\", \"y\", \"z\"), List(\"m\"), List(\"a\", \"b\"), List(\"u\", \"v\")))\n     * List(\"z\", \"m\", \"b\", \"v\")\n     * >>> extract(List(List(1, 2, 3), List(4, 5)))\n     * List(3, 5)\n     */\n    def extract(lst : List[List[Any]]) : List[Any] = {\n", "entry_point": "extract", "test": "\n\n    var arg00 : List[List[Any]] = List(List(1, 2, 3), List(4, 5), List(6, 7, 8, 9))\n    var x0 : List[Any] = extract(arg00)\n    var v0 : List[Any] = List(3, 5, 9)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(\"\"\"x\"\"\", \"\"\"y\"\"\", \"\"\"z\"\"\"), List(\"\"\"m\"\"\"), List(\"\"\"a\"\"\", \"\"\"b\"\"\"), List(\"\"\"u\"\"\", \"\"\"v\"\"\"))\n    var x1 : List[Any] = extract(arg10)\n    var v1 : List[Any] = List(\"\"\"z\"\"\", \"\"\"m\"\"\", \"\"\"b\"\"\", \"\"\"v\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(1, 2, 3), List(4, 5))\n    var x2 : List[Any] = extract(arg20)\n    var v2 : List[Any] = List(3, 5)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to get the last element of each sublist.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/894", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert the given string of float type into tuple.\n     *\n     * >>> floatToTuple(\"1.2, 1.3, 2.3, 2.4, 6.5\")\n     * List(1.2, 1.3, 2.3, 2.4, 6.5)\n     * >>> floatToTuple(\"2.3, 2.4, 5.6, 5.4, 8.9\")\n     * List(2.3, 2.4, 5.6, 5.4, 8.9)\n     * >>> floatToTuple(\"0.3, 0.5, 7.8, 9.4\")\n     * List(0.3, 0.5, 7.8, 9.4)\n     */\n    def floatToTuple(testStr : String) : List[Double] = {\n", "entry_point": "floatToTuple", "test": "\n\n    var arg00 : String = \"\"\"1.2, 1.3, 2.3, 2.4, 6.5\"\"\"\n    var x0 : List[Double] = floatToTuple(arg00)\n    var v0 : List[Double] = List(1.2, 1.3, 2.3, 2.4, 6.5)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"2.3, 2.4, 5.6, 5.4, 8.9\"\"\"\n    var x1 : List[Double] = floatToTuple(arg10)\n    var v1 : List[Double] = List(2.3, 2.4, 5.6, 5.4, 8.9)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"0.3, 0.5, 7.8, 9.4\"\"\"\n    var x2 : List[Double] = floatToTuple(arg20)\n    var v2 : List[Double] = List(0.3, 0.5, 7.8, 9.4)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert the given string of float type into tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/895", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\n     *\n     * >>> maxSumSubseq(List(1, 2, 9, 4, 5, 0, 4, 11, 6))\n     * 26\n     * >>> maxSumSubseq(List(1, 2, 9, 5, 6, 0, 5, 12, 7))\n     * 28\n     * >>> maxSumSubseq(List(1, 3, 10, 5, 6, 0, 6, 14, 21))\n     * 44\n     */\n    def maxSumSubseq(a : List[Int]) : Int = {\n", "entry_point": "maxSumSubseq", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 9, 4, 5, 0, 4, 11, 6)\n    var x0 : Int = maxSumSubseq(arg00)\n    var v0 : Int = 26\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 9, 5, 6, 0, 5, 12, 7)\n    var x1 : Int = maxSumSubseq(arg10)\n    var v1 : Int = 28\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 3, 10, 5, 6, 0, 6, 14, 21)\n    var x2 : Int = maxSumSubseq(arg20)\n    var v2 : Int = 44\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/896", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n     *\n     * >>> sortListLast(List(List(2, 5), List(1, 2), List(4, 4), List(2, 3), List(2, 1)))\n     * List(List(2, 1), List(1, 2), List(2, 3), List(4, 4), List(2, 5))\n     * >>> sortListLast(List(List(9, 8), List(4, 7), List(3, 5), List(7, 9), List(1, 2)))\n     * List(List(1, 2), List(3, 5), List(4, 7), List(9, 8), List(7, 9))\n     * >>> sortListLast(List(List(20, 50), List(10, 20), List(40, 40)))\n     * List(List(10, 20), List(40, 40), List(20, 50))\n     */\n    def sortListLast(tuples : List[List[Int]]) : List[List[Int]] = {\n", "entry_point": "sortListLast", "test": "\n\n    var arg00 : List[List[Int]] = List(List(2, 5), List(1, 2), List(4, 4), List(2, 3), List(2, 1))\n    var x0 : List[List[Int]] = sortListLast(arg00)\n    var v0 : List[List[Int]] = List(List(2, 1), List(1, 2), List(2, 3), List(4, 4), List(2, 5))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(9, 8), List(4, 7), List(3, 5), List(7, 9), List(1, 2))\n    var x1 : List[List[Int]] = sortListLast(arg10)\n    var v1 : List[List[Int]] = List(List(1, 2), List(3, 5), List(4, 7), List(9, 8), List(7, 9))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(20, 50), List(10, 20), List(40, 40))\n    var x2 : List[List[Int]] = sortListLast(arg20)\n    var v2 : List[List[Int]] = List(List(10, 20), List(40, 40), List(20, 50))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/897", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the word is present in a given sentence or not.\n     *\n     * >>> isWordPresent(\"machine learning\", \"machine\")\n     * true\n     * >>> isWordPresent(\"easy\", \"fun\")\n     * false\n     * >>> isWordPresent(\"python language\", \"code\")\n     * false\n     */\n    def isWordPresent(sentence : String, word : String) : Boolean = {\n", "entry_point": "isWordPresent", "test": "\n\n    var arg00 : String = \"\"\"machine learning\"\"\"\n    var arg01 : String = \"\"\"machine\"\"\"\n    var x0 : Boolean = isWordPresent(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"easy\"\"\"\n    var arg11 : String = \"\"\"fun\"\"\"\n    var x1 : Boolean = isWordPresent(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"python language\"\"\"\n    var arg21 : String = \"\"\"code\"\"\"\n    var x2 : Boolean = isWordPresent(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the word is present in a given sentence or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/898", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n     *\n     * >>> extractElements(List(1, 1, 3, 4, 4, 5, 6, 7), 2)\n     * List(1, 4)\n     * >>> extractElements(List(0, 1, 2, 3, 4, 4, 4, 4, 5, 7), 4)\n     * List(4)\n     * >>> extractElements(List(0, 0, 0, 0, 0), 5)\n     * List(0)\n     */\n    def extractElements(numbers : List[Int], n : Int) : List[Int] = {\n", "entry_point": "extractElements", "test": "\n\n    var arg00 : List[Int] = List(1, 1, 3, 4, 4, 5, 6, 7)\n    var arg01 : Int = 2\n    var x0 : List[Int] = extractElements(arg00, arg01)\n    var v0 : List[Int] = List(1, 4)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(0, 1, 2, 3, 4, 4, 4, 4, 5, 7)\n    var arg11 : Int = 4\n    var x1 : List[Int] = extractElements(arg10, arg11)\n    var v1 : List[Int] = List(4)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(0, 0, 0, 0, 0)\n    var arg21 : Int = 5\n    var x2 : List[Int] = extractElements(arg20, arg21)\n    var v2 : List[Int] = List(0)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract specified number of elements from a given list, which follow each other continuously.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/899", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether an array can be sorted or not by picking only the corner elements.\n     *\n     * >>> check(List(3, 2, 1, 2, 3, 4), 6)\n     * true\n     * >>> check(List(2, 1, 4, 5, 1), 5)\n     * true\n     * >>> check(List(1, 2, 2, 1, 2, 3), 6)\n     * true\n     */\n    def check(arr : List[Int], n : Int) : Boolean = {\n", "entry_point": "check", "test": "\n\n    var arg00 : List[Int] = List(3, 2, 1, 2, 3, 4)\n    var arg01 : Int = 6\n    var x0 : Boolean = check(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 1, 4, 5, 1)\n    var arg11 : Int = 5\n    var x1 : Boolean = check(arg10, arg11)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 2, 1, 2, 3)\n    var arg21 : Int = 6\n    var x2 : Boolean = check(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether an array can be sorted or not by picking only the corner elements.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/900", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function where a string will start with a specific number.\n     *\n     * >>> matchNum(\"5-2345861\")\n     * true\n     * >>> matchNum(\"6-2345861\")\n     * false\n     * >>> matchNum(\"78910\")\n     * false\n     */\n    def matchNum(string : String) : Boolean = {\n", "entry_point": "matchNum", "test": "\n\n    var arg00 : String = \"\"\"5-2345861\"\"\"\n    var x0 : Boolean = matchNum(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"6-2345861\"\"\"\n    var x1 : Boolean = matchNum(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"78910\"\"\"\n    var x2 : Boolean = matchNum(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function where a string will start with a specific number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/901", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the smallest multiple of the first n numbers.\n     *\n     * >>> smallestMultiple(13)\n     * 360360\n     * >>> smallestMultiple(2)\n     * 2\n     * >>> smallestMultiple(1)\n     * 1\n     */\n    def smallestMultiple(n : Int) : Int = {\n", "entry_point": "smallestMultiple", "test": "\n\n    var arg00 : Int = 13\n    var x0 : Int = smallestMultiple(arg00)\n    var v0 : Int = 360360\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var x1 : Int = smallestMultiple(arg10)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var x2 : Int = smallestMultiple(arg20)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the smallest multiple of the first n numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/902", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to combine two dictionaries by adding values for common keys.\n     *\n     * >>> addDict(Map(\"a\"->100, \"b\"->200, \"c\"->300), Map(\"a\"->300, \"b\"->200, \"d\"->400))\n     * Map(\"b\"->400, \"d\"->400, \"a\"->400, \"c\"->300)\n     * >>> addDict(Map(\"a\"->500, \"b\"->700, \"c\"->900), Map(\"a\"->500, \"b\"->600, \"d\"->900))\n     * Map(\"b\"->1300, \"d\"->900, \"a\"->1000, \"c\"->900)\n     * >>> addDict(Map(\"a\"->900, \"b\"->900, \"d\"->900), Map(\"a\"->900, \"b\"->900, \"d\"->900))\n     * Map(\"b\"->1800, \"d\"->1800, \"a\"->1800)\n     */\n    def addDict(d1 : Map[String, Int], d2 : Map[String, Int]) : Map[String, Int] = {\n", "entry_point": "addDict", "test": "\n\n    var arg00 : Map[String, Int] = Map(\"\"\"a\"\"\" -> 100, \"\"\"b\"\"\" -> 200, \"\"\"c\"\"\" -> 300)\n    var arg01 : Map[String, Int] = Map(\"\"\"a\"\"\" -> 300, \"\"\"b\"\"\" -> 200, \"\"\"d\"\"\" -> 400)\n    var x0 : Map[String, Int] = addDict(arg00, arg01)\n    var v0 : Map[String, Int] = Map(\"\"\"b\"\"\" -> 400, \"\"\"d\"\"\" -> 400, \"\"\"a\"\"\" -> 400, \"\"\"c\"\"\" -> 300)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Map[String, Int] = Map(\"\"\"a\"\"\" -> 500, \"\"\"b\"\"\" -> 700, \"\"\"c\"\"\" -> 900)\n    var arg11 : Map[String, Int] = Map(\"\"\"a\"\"\" -> 500, \"\"\"b\"\"\" -> 600, \"\"\"d\"\"\" -> 900)\n    var x1 : Map[String, Int] = addDict(arg10, arg11)\n    var v1 : Map[String, Int] = Map(\"\"\"b\"\"\" -> 1300, \"\"\"d\"\"\" -> 900, \"\"\"a\"\"\" -> 1000, \"\"\"c\"\"\" -> 900)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Map[String, Int] = Map(\"\"\"a\"\"\" -> 900, \"\"\"b\"\"\" -> 900, \"\"\"d\"\"\" -> 900)\n    var arg21 : Map[String, Int] = Map(\"\"\"a\"\"\" -> 900, \"\"\"b\"\"\" -> 900, \"\"\"d\"\"\" -> 900)\n    var x2 : Map[String, Int] = addDict(arg20, arg21)\n    var v2 : Map[String, Int] = Map(\"\"\"b\"\"\" -> 1800, \"\"\"d\"\"\" -> 1800, \"\"\"a\"\"\" -> 1800)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to combine two dictionaries by adding values for common keys.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/903", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to count the total unset bits from 1 to n.\n     *\n     * >>> countUnsetBits(2)\n     * 1\n     * >>> countUnsetBits(5)\n     * 4\n     * >>> countUnsetBits(14)\n     * 17\n     */\n    def countUnsetBits(n : Int) : Int = {\n", "entry_point": "countUnsetBits", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = countUnsetBits(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var x1 : Int = countUnsetBits(arg10)\n    var v1 : Int = 4\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 14\n    var x2 : Int = countUnsetBits(arg20)\n    var v2 : Int = 17\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to count the total unset bits from 1 to n.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/904", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to return true if the given number is even else return false.\n     *\n     * >>> evenNum(13.5)\n     * false\n     * >>> evenNum(0)\n     * true\n     * >>> evenNum(-9)\n     * false\n     */\n    def evenNum(x : Double) : Boolean = {\n", "entry_point": "evenNum", "test": "\n\n    var arg00 : Double = 13.5\n    var x0 : Boolean = evenNum(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Double = 0\n    var x1 : Boolean = evenNum(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Double = -9\n    var x2 : Boolean = evenNum(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to return true if the given number is even else return false.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/905", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of squares of binomial co-efficients.\n     *\n     * >>> sumOfSquare(4)\n     * 70\n     * >>> sumOfSquare(5)\n     * 252\n     * >>> sumOfSquare(2)\n     * 6\n     */\n    def sumOfSquare(n : Int) : Int = {\n", "entry_point": "sumOfSquare", "test": "\n\n    var arg00 : Int = 4\n    var x0 : Int = sumOfSquare(arg00)\n    var v0 : Int = 70\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var x1 : Int = sumOfSquare(arg10)\n    var v1 : Int = 252\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var x2 : Int = sumOfSquare(arg20)\n    var v2 : Int = 6\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of squares of binomial co-efficients.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/906", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to extract year, month and date from a url by using regex.\n     *\n     * >>> extractDate(\"https:\\/\\/www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\")\n     * List(List(\"2016\", \"09\", \"02\"))\n     * >>> extractDate(\"https:\\/\\/www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\")\n     * List(List(\"2020\", \"11\", \"03\"))\n     * >>> extractDate(\"https:\\/\\/economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\")\n     * List(List(\"2020\", \"12\", \"29\"))\n     */\n    def extractDate(url : String) : List[List[String]] = {\n", "entry_point": "extractDate", "test": "\n\n    var arg00 : String = \"\"\"https:\\/\\/www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\"\"\"\n    var x0 : List[List[String]] = extractDate(arg00)\n    var v0 : List[List[String]] = List(List(\"\"\"2016\"\"\", \"\"\"09\"\"\", \"\"\"02\"\"\"))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"https:\\/\\/www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\"\"\"\n    var x1 : List[List[String]] = extractDate(arg10)\n    var v1 : List[List[String]] = List(List(\"\"\"2020\"\"\", \"\"\"11\"\"\", \"\"\"03\"\"\"))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"https:\\/\\/economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\"\"\"\n    var x2 : List[List[String]] = extractDate(arg20)\n    var v2 : List[List[String]] = List(List(\"\"\"2020\"\"\", \"\"\"12\"\"\", \"\"\"29\"\"\"))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to extract year, month and date from a url by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/907", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to print the first n lucky numbers.\n     *\n     * >>> luckyNum(10)\n     * List(1, 3, 7, 9, 13, 15, 21, 25, 31, 33)\n     * >>> luckyNum(5)\n     * List(1, 3, 7, 9, 13)\n     * >>> luckyNum(8)\n     * List(1, 3, 7, 9, 13, 15, 21, 25)\n     */\n    def luckyNum(n : Int) : List[Int] = {\n", "entry_point": "luckyNum", "test": "\n\n    var arg00 : Int = 10\n    var x0 : List[Int] = luckyNum(arg00)\n    var v0 : List[Int] = List(1, 3, 7, 9, 13, 15, 21, 25, 31, 33)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var x1 : List[Int] = luckyNum(arg10)\n    var v1 : List[Int] = List(1, 3, 7, 9, 13)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 8\n    var x2 : List[Int] = luckyNum(arg20)\n    var v2 : List[Int] = List(1, 3, 7, 9, 13, 15, 21, 25)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to print the first n lucky numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/908", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the fixed point in the given array.\n     *\n     * >>> findFixedPoint(List(-10, -1, 0, 3, 10, 11, 30, 50, 100), 9)\n     * 3\n     * >>> findFixedPoint(List(1, 2, 3, 4, 5, 6, 7, 8), 8)\n     * -1\n     * >>> findFixedPoint(List(0, 2, 5, 8, 17), 5)\n     * 0\n     */\n    def findFixedPoint(arr : List[Int], n : Int) : Int = {\n", "entry_point": "findFixedPoint", "test": "\n\n    var arg00 : List[Int] = List(-10, -1, 0, 3, 10, 11, 30, 50, 100)\n    var arg01 : Int = 9\n    var x0 : Int = findFixedPoint(arg00, arg01)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8)\n    var arg11 : Int = 8\n    var x1 : Int = findFixedPoint(arg10, arg11)\n    var v1 : Int = -1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(0, 2, 5, 8, 17)\n    var arg21 : Int = 5\n    var x2 : Int = findFixedPoint(arg20, arg21)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the fixed point in the given array.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/909", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the previous palindrome of a specified number.\n     *\n     * >>> previousPalindrome(99)\n     * 88\n     * >>> previousPalindrome(1221)\n     * 1111\n     * >>> previousPalindrome(120)\n     * 111\n     */\n    def previousPalindrome(num : Int) : Int = {\n", "entry_point": "previousPalindrome", "test": "\n\n    var arg00 : Int = 99\n    var x0 : Int = previousPalindrome(arg00)\n    var v0 : Int = 88\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1221\n    var x1 : Int = previousPalindrome(arg10)\n    var v1 : Int = 1111\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 120\n    var x2 : Int = previousPalindrome(arg20)\n    var v2 : Int = 111\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the previous palindrome of a specified number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/910", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to validate a gregorian date.\n     *\n     * >>> checkDate(11, 11, 2002)\n     * true\n     * >>> checkDate(13, 11, 2002)\n     * false\n     * >>> checkDate(\"11\", \"11\", \"2002\")\n     * true\n     */\n    def checkDate(m : Any, d : Any, y : Any) : Boolean = {\n", "entry_point": "checkDate", "test": "\n\n    var arg00 : Any = 11\n    var arg01 : Any = 11\n    var arg02 : Any = 2002\n    var x0 : Boolean = checkDate(arg00, arg01, arg02)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Any = 13\n    var arg11 : Any = 11\n    var arg12 : Any = 2002\n    var x1 : Boolean = checkDate(arg10, arg11, arg12)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Any = \"\"\"11\"\"\"\n    var arg21 : Any = \"\"\"11\"\"\"\n    var arg22 : Any = \"\"\"2002\"\"\"\n    var x2 : Boolean = checkDate(arg20, arg21, arg22)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to validate a gregorian date.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/911", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n     *\n     * >>> maximumProduct(List(12, 74, 9, 50, 61, 41))\n     * 225700\n     * >>> maximumProduct(List(25, 35, 22, 85, 14, 65, 75, 25, 58))\n     * 414375\n     * >>> maximumProduct(List(18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1))\n     * 2520\n     */\n    def maximumProduct(nums : List[Int]) : Int = {\n", "entry_point": "maximumProduct", "test": "\n\n    var arg00 : List[Int] = List(12, 74, 9, 50, 61, 41)\n    var x0 : Int = maximumProduct(arg00)\n    var v0 : Int = 225700\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(25, 35, 22, 85, 14, 65, 75, 25, 58)\n    var x1 : Int = maximumProduct(arg10)\n    var v1 : Int = 414375\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1)\n    var x2 : Int = maximumProduct(arg20)\n    var v2 : Int = 2520\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/912", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find ln, m lobb number.\n     *\n     * >>> lobbNum(5, 3)\n     * 35\n     * >>> lobbNum(3, 2)\n     * 5\n     * >>> lobbNum(4, 2)\n     * 20\n     */\n    def lobbNum(n : Int, m : Int) : Int = {\n", "entry_point": "lobbNum", "test": "\n\n    var arg00 : Int = 5\n    var arg01 : Int = 3\n    var x0 : Int = lobbNum(arg00, arg01)\n    var v0 : Int = 35\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var arg11 : Int = 2\n    var x1 : Int = lobbNum(arg10, arg11)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var arg21 : Int = 2\n    var x2 : Int = lobbNum(arg20, arg21)\n    var v2 : Int = 20\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find ln, m lobb number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/913", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check for a number at the end of a string.\n     *\n     * >>> endNum(\"abcdef\")\n     * false\n     * >>> endNum(\"abcdef7\")\n     * true\n     * >>> endNum(\"abc\")\n     * false\n     */\n    def endNum(string : String) : Boolean = {\n", "entry_point": "endNum", "test": "\n\n    var arg00 : String = \"\"\"abcdef\"\"\"\n    var x0 : Boolean = endNum(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"abcdef7\"\"\"\n    var x1 : Boolean = endNum(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"abc\"\"\"\n    var x2 : Boolean = endNum(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check for a number at the end of a string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/914", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the given string is made up of two alternating characters or not.\n     *\n     * >>> isTwoAlter(\"abab\")\n     * true\n     * >>> isTwoAlter(\"aaaa\")\n     * false\n     * >>> isTwoAlter(\"xyz\")\n     * false\n     */\n    def isTwoAlter(s : String) : Boolean = {\n", "entry_point": "isTwoAlter", "test": "\n\n    var arg00 : String = \"\"\"abab\"\"\"\n    var x0 : Boolean = isTwoAlter(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"aaaa\"\"\"\n    var x1 : Boolean = isTwoAlter(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"xyz\"\"\"\n    var x2 : Boolean = isTwoAlter(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the given string is made up of two alternating characters or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/915", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to rearrange positive and negative numbers in a given array using lambda function.\n     *\n     * >>> rearrangeNumbs(List(-1, 2, -3, 5, 7, 8, 9, -10))\n     * List(2, 5, 7, 8, 9, -10, -3, -1)\n     * >>> rearrangeNumbs(List(10, 15, 14, 13, -18, 12, -20))\n     * List(10, 12, 13, 14, 15, -20, -18)\n     * >>> rearrangeNumbs(List(-20, 20, -10, 10, -30, 30))\n     * List(10, 20, 30, -30, -20, -10)\n     */\n    def rearrangeNumbs(arrayNums : List[Int]) : List[Int] = {\n", "entry_point": "rearrangeNumbs", "test": "\n\n    var arg00 : List[Int] = List(-1, 2, -3, 5, 7, 8, 9, -10)\n    var x0 : List[Int] = rearrangeNumbs(arg00)\n    var v0 : List[Int] = List(2, 5, 7, 8, 9, -10, -3, -1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(10, 15, 14, 13, -18, 12, -20)\n    var x1 : List[Int] = rearrangeNumbs(arg10)\n    var v1 : List[Int] = List(10, 12, 13, 14, 15, -20, -18)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(-20, 20, -10, 10, -30, 30)\n    var x2 : List[Int] = rearrangeNumbs(arg20)\n    var v2 : List[Int] = List(10, 20, 30, -30, -20, -10)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to rearrange positive and negative numbers in a given array using lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/916", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find if there is a triplet in the array whose sum is equal to a given value.\n     *\n     * >>> findTripletArray(List(1, 4, 45, 6, 10, 8), 6, 22)\n     * List(4, 10, 8)\n     * >>> findTripletArray(List(12, 3, 5, 2, 6, 9), 6, 24)\n     * List(12, 3, 9)\n     * >>> findTripletArray(List(1, 2, 3, 4, 5), 5, 9)\n     * List(1, 3, 5)\n     */\n    def findTripletArray(a : List[Int], arrSize : Int, sum : Int) : List[Int] = {\n", "entry_point": "findTripletArray", "test": "\n\n    var arg00 : List[Int] = List(1, 4, 45, 6, 10, 8)\n    var arg01 : Int = 6\n    var arg02 : Int = 22\n    var x0 : List[Int] = findTripletArray(arg00, arg01, arg02)\n    var v0 : List[Int] = List(4, 10, 8)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(12, 3, 5, 2, 6, 9)\n    var arg11 : Int = 6\n    var arg12 : Int = 24\n    var x1 : List[Int] = findTripletArray(arg10, arg11, arg12)\n    var v1 : List[Int] = List(12, 3, 9)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4, 5)\n    var arg21 : Int = 5\n    var arg22 : Int = 9\n    var x2 : List[Int] = findTripletArray(arg20, arg21, arg22)\n    var v2 : List[Int] = List(1, 3, 5)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/917", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the sequences of one upper case letter followed by lower case letters.\n     *\n     * >>> textUppercaseLowercase(\"AaBbGg\")\n     * \"Found a match!\"\n     * >>> textUppercaseLowercase(\"aA\")\n     * \"Not matched!\"\n     * >>> textUppercaseLowercase(\"PYTHON\")\n     * \"Not matched!\"\n     */\n    def textUppercaseLowercase(text : String) : String = {\n", "entry_point": "textUppercaseLowercase", "test": "\n\n    var arg00 : String = \"\"\"AaBbGg\"\"\"\n    var x0 : String = textUppercaseLowercase(arg00)\n    var v0 : String = \"\"\"Found a match!\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"aA\"\"\"\n    var x1 : String = textUppercaseLowercase(arg10)\n    var v1 : String = \"\"\"Not matched!\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"PYTHON\"\"\"\n    var x2 : String = textUppercaseLowercase(arg20)\n    var v2 : String = \"\"\"Not matched!\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the sequences of one upper case letter followed by lower case letters.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/918", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count coin change.\n     *\n     * >>> coinChange(List(1, 2, 3), 3, 4)\n     * 4\n     * >>> coinChange(List(4, 5, 6, 7, 8, 9), 6, 9)\n     * 2\n     * >>> coinChange(List(4, 5, 6, 7, 8, 9), 6, 4)\n     * 1\n     */\n    def coinChange(s : List[Int], m : Int, n : Int) : Int = {\n", "entry_point": "coinChange", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3)\n    var arg01 : Int = 3\n    var arg02 : Int = 4\n    var x0 : Int = coinChange(arg00, arg01, arg02)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 5, 6, 7, 8, 9)\n    var arg11 : Int = 6\n    var arg12 : Int = 9\n    var x1 : Int = coinChange(arg10, arg11, arg12)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(4, 5, 6, 7, 8, 9)\n    var arg21 : Int = 6\n    var arg22 : Int = 4\n    var x2 : Int = coinChange(arg20, arg21, arg22)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count coin change.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/919", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to multiply all items in the list.\n     *\n     * >>> multiplyList(List(1, -2, 3))\n     * -6\n     * >>> multiplyList(List(1, 2, 3, 4))\n     * 24\n     * >>> multiplyList(List(3, 1, 2, 3))\n     * 18\n     */\n    def multiplyList(items : List[Int]) : Int = {\n", "entry_point": "multiplyList", "test": "\n\n    var arg00 : List[Int] = List(1, -2, 3)\n    var x0 : Int = multiplyList(arg00)\n    var v0 : Int = -6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4)\n    var x1 : Int = multiplyList(arg10)\n    var v1 : Int = 24\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3, 1, 2, 3)\n    var x2 : Int = multiplyList(arg20)\n    var v2 : Int = 18\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to multiply all items in the list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/920", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove all tuples with all null values in the given tuple list.\n     *\n     * >>> removeTuple(List(List(\"none\", 2), List(\"none\", \"none\"), List(3, 4), List(12, 3), List(\"none\")))\n     * List(List(\"none\", 2), List(3, 4), List(12, 3))\n     * >>> removeTuple(List(List(\"none\", \"none\"), List(\"none\", \"none\"), List(3, 6), List(17, 3), List(\"none\", 1)))\n     * List(List(3, 6), List(17, 3), List(\"none\", 1))\n     * >>> removeTuple(List(List(1, 2), List(2, \"none\"), List(3, \"none\"), List(24, 3), List(\"none\", \"none\")))\n     * List(List(1, 2), List(2, \"none\"), List(3, \"none\"), List(24, 3))\n     */\n    def removeTuple(testList : List[List[Any]]) : List[List[Any]] = {\n", "entry_point": "removeTuple", "test": "\n\n    var arg00 : List[List[Any]] = List(List(\"none\", 2), List(\"none\", \"none\"), List(3, 4), List(12, 3), List(\"none\"))\n    var x0 : List[List[Any]] = removeTuple(arg00)\n    var v0 : List[List[Any]] = List(List(\"none\", 2), List(3, 4), List(12, 3))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Any]] = List(List(\"none\", \"none\"), List(\"none\", \"none\"), List(3, 6), List(17, 3), List(\"none\", 1))\n    var x1 : List[List[Any]] = removeTuple(arg10)\n    var v1 : List[List[Any]] = List(List(3, 6), List(17, 3), List(\"none\", 1))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Any]] = List(List(1, 2), List(2, \"none\"), List(3, \"none\"), List(24, 3), List(\"none\", \"none\"))\n    var x2 : List[List[Any]] = removeTuple(arg20)\n    var v2 : List[List[Any]] = List(List(1, 2), List(2, \"none\"), List(3, \"none\"), List(24, 3))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove all tuples with all null values in the given tuple list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/921", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to perform chunking of tuples each of size n.\n     *\n     * >>> chunkTuples(List(10, 4, 5, 6, 7, 6, 8, 3, 4), 3)\n     * List(List(10, 4, 5), List(6, 7, 6), List(8, 3, 4))\n     * >>> chunkTuples(List(1, 2, 3, 4, 5, 6, 7, 8, 9), 2)\n     * List(List(1, 2), List(3, 4), List(5, 6), List(7, 8), List(9))\n     * >>> chunkTuples(List(11, 14, 16, 17, 19, 21, 22, 25), 4)\n     * List(List(11, 14, 16, 17), List(19, 21, 22, 25))\n     */\n    def chunkTuples(testTup : List[Int], n : Int) : List[List[Int]] = {\n", "entry_point": "chunkTuples", "test": "\n\n    var arg00 : List[Int] = List(10, 4, 5, 6, 7, 6, 8, 3, 4)\n    var arg01 : Int = 3\n    var x0 : List[List[Int]] = chunkTuples(arg00, arg01)\n    var v0 : List[List[Int]] = List(List(10, 4, 5), List(6, 7, 6), List(8, 3, 4))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9)\n    var arg11 : Int = 2\n    var x1 : List[List[Int]] = chunkTuples(arg10, arg11)\n    var v1 : List[List[Int]] = List(List(1, 2), List(3, 4), List(5, 6), List(7, 8), List(9))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(11, 14, 16, 17, 19, 21, 22, 25)\n    var arg21 : Int = 4\n    var x2 : List[List[Int]] = chunkTuples(arg20, arg21)\n    var v2 : List[List[Int]] = List(List(11, 14, 16, 17), List(19, 21, 22, 25))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to perform chunking of tuples each of size n.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/922", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find a pair with the highest product from a given array of integers.\n     *\n     * >>> maxProduct(List(1, 2, 3, 4, 7, 0, 8, 4))\n     * List(7, 8)\n     * >>> maxProduct(List(0, -1, -2, -4, 5, 0, -6))\n     * List(-4, -6)\n     * >>> maxProduct(List(1, 3, 5, 6, 8, 9))\n     * List(8, 9)\n     */\n    def maxProduct(arr : List[Int]) : List[Int] = {\n", "entry_point": "maxProduct", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4, 7, 0, 8, 4)\n    var x0 : List[Int] = maxProduct(arg00)\n    var v0 : List[Int] = List(7, 8)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(0, -1, -2, -4, 5, 0, -6)\n    var x1 : List[Int] = maxProduct(arg10)\n    var v1 : List[Int] = List(-4, -6)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 3, 5, 6, 8, 9)\n    var x2 : List[Int] = maxProduct(arg20)\n    var v2 : List[Int] = List(8, 9)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find a pair with the highest product from a given array of integers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/923", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n     *\n     * >>> superSeq(\"AGGTAB\", \"GXTXAYB\", 6, 7)\n     * 9\n     * >>> superSeq(\"feek\", \"eke\", 4, 3)\n     * 5\n     * >>> superSeq(\"PARRT\", \"RTA\", 5, 3)\n     * 6\n     */\n    def superSeq(x : String, y : String, m : Int, n : Int) : Int = {\n", "entry_point": "superSeq", "test": "\n\n    var arg00 : String = \"\"\"AGGTAB\"\"\"\n    var arg01 : String = \"\"\"GXTXAYB\"\"\"\n    var arg02 : Int = 6\n    var arg03 : Int = 7\n    var x0 : Int = superSeq(arg00, arg01, arg02, arg03)\n    var v0 : Int = 9\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"feek\"\"\"\n    var arg11 : String = \"\"\"eke\"\"\"\n    var arg12 : Int = 4\n    var arg13 : Int = 3\n    var x1 : Int = superSeq(arg10, arg11, arg12, arg13)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"PARRT\"\"\"\n    var arg21 : String = \"\"\"RTA\"\"\"\n    var arg22 : Int = 5\n    var arg23 : Int = 3\n    var x2 : Int = superSeq(arg20, arg21, arg22, arg23)\n    var v2 : Int = 6\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/924", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find maximum of two numbers.\n     *\n     * >>> maxOfTwo(10, 20)\n     * 20\n     * >>> maxOfTwo(19, 15)\n     * 19\n     * >>> maxOfTwo(-10, -20)\n     * -10\n     */\n    def maxOfTwo(x : Int, y : Int) : Int = {\n", "entry_point": "maxOfTwo", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 20\n    var x0 : Int = maxOfTwo(arg00, arg01)\n    var v0 : Int = 20\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 19\n    var arg11 : Int = 15\n    var x1 : Int = maxOfTwo(arg10, arg11)\n    var v1 : Int = 19\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = -10\n    var arg21 : Int = -20\n    var x2 : Int = maxOfTwo(arg20, arg21)\n    var v2 : Int = -10\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find maximum of two numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/925", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to calculate the product of all the numbers of a given tuple.\n     *\n     * >>> mutipleTuple(List(4, 3, 2, 2, -1, 18))\n     * -864\n     * >>> mutipleTuple(List(1, 2, 3))\n     * 6\n     * >>> mutipleTuple(List(-2, -4, -6))\n     * -48\n     */\n    def mutipleTuple(nums : List[Int]) : Int = {\n", "entry_point": "mutipleTuple", "test": "\n\n    var arg00 : List[Int] = List(4, 3, 2, 2, -1, 18)\n    var x0 : Int = mutipleTuple(arg00)\n    var v0 : Int = -864\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3)\n    var x1 : Int = mutipleTuple(arg10)\n    var v1 : Int = 6\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(-2, -4, -6)\n    var x2 : Int = mutipleTuple(arg20)\n    var v2 : Int = -48\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to calculate the product of all the numbers of a given tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/926", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find n-th rencontres number.\n     *\n     * >>> rencontresNumber(7, 2)\n     * 924\n     * >>> rencontresNumber(3, 0)\n     * 2\n     * >>> rencontresNumber(3, 1)\n     * 3\n     */\n    def rencontresNumber(n : Int, m : Int) : Int = {\n", "entry_point": "rencontresNumber", "test": "\n\n    var arg00 : Int = 7\n    var arg01 : Int = 2\n    var x0 : Int = rencontresNumber(arg00, arg01)\n    var v0 : Int = 924\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var arg11 : Int = 0\n    var x1 : Int = rencontresNumber(arg10, arg11)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 3\n    var arg21 : Int = 1\n    var x2 : Int = rencontresNumber(arg20, arg21)\n    var v2 : Int = 3\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find n-th rencontres number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/928", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n     *\n     * >>> changeDateFormat(\"2026-01-02\")\n     * \"02-01-2026\"\n     * >>> changeDateFormat(\"2021-01-04\")\n     * \"04-01-2021\"\n     * >>> changeDateFormat(\"2030-06-06\")\n     * \"06-06-2030\"\n     */\n    def changeDateFormat(dt : String) : String = {\n", "entry_point": "changeDateFormat", "test": "\n\n    var arg00 : String = \"\"\"2026-01-02\"\"\"\n    var x0 : String = changeDateFormat(arg00)\n    var v0 : String = \"\"\"02-01-2026\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"2021-01-04\"\"\"\n    var x1 : String = changeDateFormat(arg10)\n    var v1 : String = \"\"\"04-01-2021\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"2030-06-06\"\"\"\n    var x2 : String = changeDateFormat(arg20)\n    var v2 : String = \"\"\"06-06-2030\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/929", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count repeated items of a tuple.\n     *\n     * >>> countTuplex(List(2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n     * 3\n     * >>> countTuplex(List(2, 4, 5, 6, 2, 3, 4, 4, 7), 2)\n     * 2\n     * >>> countTuplex(List(2, 4, 7, 7, 7, 3, 4, 4, 7), 7)\n     * 4\n     */\n    def countTuplex(tuplex : List[Int], value : Int) : Int = {\n", "entry_point": "countTuplex", "test": "\n\n    var arg00 : List[Int] = List(2, 4, 5, 6, 2, 3, 4, 4, 7)\n    var arg01 : Int = 4\n    var x0 : Int = countTuplex(arg00, arg01)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(2, 4, 5, 6, 2, 3, 4, 4, 7)\n    var arg11 : Int = 2\n    var x1 : Int = countTuplex(arg10, arg11)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 4, 7, 7, 7, 3, 4, 4, 7)\n    var arg21 : Int = 7\n    var x2 : Int = countTuplex(arg20, arg21)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count repeated items of a tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/930", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function that matches a string that has an a followed by zero or more b's by using regex.\n     *\n     * >>> textMatch(\"msb\")\n     * \"Not matched!\"\n     * >>> textMatch(\"a0c\")\n     * \"Found a match!\"\n     * >>> textMatch(\"abbc\")\n     * \"Found a match!\"\n     */\n    def textMatch(text : String) : String = {\n", "entry_point": "textMatch", "test": "\n\n    var arg00 : String = \"\"\"msb\"\"\"\n    var x0 : String = textMatch(arg00)\n    var v0 : String = \"\"\"Not matched!\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"a0c\"\"\"\n    var x1 : String = textMatch(arg10)\n    var v1 : String = \"\"\"Found a match!\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"abbc\"\"\"\n    var x2 : String = textMatch(arg20)\n    var v2 : String = \"\"\"Found a match!\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function that matches a string that has an a followed by zero or more b's by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/931", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n     *\n     * >>> sumSeries(7)\n     * 784\n     * >>> sumSeries(5)\n     * 225\n     * >>> sumSeries(15)\n     * 14400\n     */\n    def sumSeries(number : Int) : Int = {\n", "entry_point": "sumSeries", "test": "\n\n    var arg00 : Int = 7\n    var x0 : Int = sumSeries(arg00)\n    var v0 : Int = 784\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var x1 : Int = sumSeries(arg10)\n    var v1 : Int = 225\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 15\n    var x2 : Int = sumSeries(arg20)\n    var v2 : Int = 14400\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/932", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove duplicate words from a given list of strings.\n     *\n     * >>> removeDuplicList(List(\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"))\n     * List(\"Python\", \"Exercises\", \"Practice\", \"Solution\")\n     * >>> removeDuplicList(List(\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\", \"Java\"))\n     * List(\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Java\")\n     * >>> removeDuplicList(List(\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\", \"C++\", \"C\", \"C++\"))\n     * List(\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"C++\", \"C\")\n     */\n    def removeDuplicList(l : List[String]) : List[String] = {\n", "entry_point": "removeDuplicList", "test": "\n\n    var arg00 : List[String] = List(\"\"\"Python\"\"\", \"\"\"Exercises\"\"\", \"\"\"Practice\"\"\", \"\"\"Solution\"\"\", \"\"\"Exercises\"\"\")\n    var x0 : List[String] = removeDuplicList(arg00)\n    var v0 : List[String] = List(\"\"\"Python\"\"\", \"\"\"Exercises\"\"\", \"\"\"Practice\"\"\", \"\"\"Solution\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"Python\"\"\", \"\"\"Exercises\"\"\", \"\"\"Practice\"\"\", \"\"\"Solution\"\"\", \"\"\"Exercises\"\"\", \"\"\"Java\"\"\")\n    var x1 : List[String] = removeDuplicList(arg10)\n    var v1 : List[String] = List(\"\"\"Python\"\"\", \"\"\"Exercises\"\"\", \"\"\"Practice\"\"\", \"\"\"Solution\"\"\", \"\"\"Java\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"Python\"\"\", \"\"\"Exercises\"\"\", \"\"\"Practice\"\"\", \"\"\"Solution\"\"\", \"\"\"Exercises\"\"\", \"\"\"C++\"\"\", \"\"\"C\"\"\", \"\"\"C++\"\"\")\n    var x2 : List[String] = removeDuplicList(arg20)\n    var v2 : List[String] = List(\"\"\"Python\"\"\", \"\"\"Exercises\"\"\", \"\"\"Practice\"\"\", \"\"\"Solution\"\"\", \"\"\"C++\"\"\", \"\"\"C\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove duplicate words from a given list of strings.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/933", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert camel case string to snake case string by using regex.\n     *\n     * >>> camelToSnake(\"GoogleAssistant\")\n     * \"google_assistant\"\n     * >>> camelToSnake(\"ChromeCast\")\n     * \"chrome_cast\"\n     * >>> camelToSnake(\"QuadCore\")\n     * \"quad_core\"\n     */\n    def camelToSnake(text : String) : String = {\n", "entry_point": "camelToSnake", "test": "\n\n    var arg00 : String = \"\"\"GoogleAssistant\"\"\"\n    var x0 : String = camelToSnake(arg00)\n    var v0 : String = \"\"\"google_assistant\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"ChromeCast\"\"\"\n    var x1 : String = camelToSnake(arg10)\n    var v1 : String = \"\"\"chrome_cast\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"QuadCore\"\"\"\n    var x2 : String = camelToSnake(arg20)\n    var v2 : String = \"\"\"quad_core\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert camel case string to snake case string by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/934", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the nth delannoy number.\n     *\n     * >>> dealnnoyNum(3, 4)\n     * 129\n     * >>> dealnnoyNum(3, 3)\n     * 63\n     * >>> dealnnoyNum(4, 5)\n     * 681\n     */\n    def dealnnoyNum(n : Int, m : Int) : Int = {\n", "entry_point": "dealnnoyNum", "test": "\n\n    var arg00 : Int = 3\n    var arg01 : Int = 4\n    var x0 : Int = dealnnoyNum(arg00, arg01)\n    var v0 : Int = 129\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var arg11 : Int = 3\n    var x1 : Int = dealnnoyNum(arg10, arg11)\n    var v1 : Int = 63\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var arg21 : Int = 5\n    var x2 : Int = dealnnoyNum(arg20, arg21)\n    var v2 : Int = 681\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the nth delannoy number.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/935", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\n     *\n     * >>> seriesSum(6)\n     * 91\n     * >>> seriesSum(7)\n     * 140\n     * >>> seriesSum(12)\n     * 650\n     */\n    def seriesSum(number : Int) : Int = {\n", "entry_point": "seriesSum", "test": "\n\n    var arg00 : Int = 6\n    var x0 : Int = seriesSum(arg00)\n    var v0 : Int = 91\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 7\n    var x1 : Int = seriesSum(arg10)\n    var v1 : Int = 140\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 12\n    var x2 : Int = seriesSum(arg20)\n    var v2 : Int = 650\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/936", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to re-arrange the given tuples based on the given ordered list.\n     *\n     * >>> reArrangeTuples(List(List(4, 3), List(1, 9), List(2, 10), List(3, 2)), List(1, 4, 2, 3))\n     * List(List(1, 9), List(4, 3), List(2, 10), List(3, 2))\n     * >>> reArrangeTuples(List(List(5, 4), List(2, 10), List(3, 11), List(4, 3)), List(3, 4, 2, 3))\n     * List(List(3, 11), List(4, 3), List(2, 10), List(3, 11))\n     * >>> reArrangeTuples(List(List(6, 3), List(3, 8), List(5, 7), List(2, 4)), List(2, 5, 3, 6))\n     * List(List(2, 4), List(5, 7), List(3, 8), List(6, 3))\n     */\n    def reArrangeTuples(testList : List[List[Int]], ordList : List[Int]) : List[List[Int]] = {\n", "entry_point": "reArrangeTuples", "test": "\n\n    var arg00 : List[List[Int]] = List(List(4, 3), List(1, 9), List(2, 10), List(3, 2))\n    var arg01 : List[Int] = List(1, 4, 2, 3)\n    var x0 : List[List[Int]] = reArrangeTuples(arg00, arg01)\n    var v0 : List[List[Int]] = List(List(1, 9), List(4, 3), List(2, 10), List(3, 2))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(5, 4), List(2, 10), List(3, 11), List(4, 3))\n    var arg11 : List[Int] = List(3, 4, 2, 3)\n    var x1 : List[List[Int]] = reArrangeTuples(arg10, arg11)\n    var v1 : List[List[Int]] = List(List(3, 11), List(4, 3), List(2, 10), List(3, 11))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(6, 3), List(3, 8), List(5, 7), List(2, 4))\n    var arg21 : List[Int] = List(2, 5, 3, 6)\n    var x2 : List[List[Int]] = reArrangeTuples(arg20, arg21)\n    var v2 : List[List[Int]] = List(List(2, 4), List(5, 7), List(3, 8), List(6, 3))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to re-arrange the given tuples based on the given ordered list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/937", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count the most common character in a given string.\n     *\n     * >>> maxChar(\"hello world\")\n     * \"l\"\n     * >>> maxChar(\"hello \")\n     * \"l\"\n     * >>> maxChar(\"python pr\")\n     * \"p\"\n     */\n    def maxChar(str1 : String) : String = {\n", "entry_point": "maxChar", "test": "\n\n    var arg00 : String = \"\"\"hello world\"\"\"\n    var x0 : String = maxChar(arg00)\n    var v0 : String = \"\"\"l\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"hello \"\"\"\n    var x1 : String = maxChar(arg10)\n    var v1 : String = \"\"\"l\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"python pr\"\"\"\n    var x2 : String = maxChar(arg20)\n    var v2 : String = \"\"\"p\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count the most common character in a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/938", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find three closest elements from three sorted arrays.\n     *\n     * >>> findCloset(List(1, 4, 10), List(2, 15, 20), List(10, 12), 3, 3, 2)\n     * List(10, 15, 10)\n     * >>> findCloset(List(20, 24, 100), List(2, 19, 22, 79, 800), List(10, 12, 23, 24, 119), 3, 5, 5)\n     * List(24, 22, 23)\n     * >>> findCloset(List(2, 5, 11), List(3, 16, 21), List(11, 13), 3, 3, 2)\n     * List(11, 16, 11)\n     */\n    def findCloset(a : List[Int], b : List[Int], c : List[Int], p : Int, q : Int, r : Int) : List[Int] = {\n", "entry_point": "findCloset", "test": "\n\n    var arg00 : List[Int] = List(1, 4, 10)\n    var arg01 : List[Int] = List(2, 15, 20)\n    var arg02 : List[Int] = List(10, 12)\n    var arg03 : Int = 3\n    var arg04 : Int = 3\n    var arg05 : Int = 2\n    var x0 : List[Int] = findCloset(arg00, arg01, arg02, arg03, arg04, arg05)\n    var v0 : List[Int] = List(10, 15, 10)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(20, 24, 100)\n    var arg11 : List[Int] = List(2, 19, 22, 79, 800)\n    var arg12 : List[Int] = List(10, 12, 23, 24, 119)\n    var arg13 : Int = 3\n    var arg14 : Int = 5\n    var arg15 : Int = 5\n    var x1 : List[Int] = findCloset(arg10, arg11, arg12, arg13, arg14, arg15)\n    var v1 : List[Int] = List(24, 22, 23)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(2, 5, 11)\n    var arg21 : List[Int] = List(3, 16, 21)\n    var arg22 : List[Int] = List(11, 13)\n    var arg23 : Int = 3\n    var arg24 : Int = 3\n    var arg25 : Int = 2\n    var x2 : List[Int] = findCloset(arg20, arg21, arg22, arg23, arg24, arg25)\n    var v2 : List[Int] = List(11, 16, 11)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find three closest elements from three sorted arrays.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/939", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort a list of dictionaries using lambda function.\n     *\n     * >>> sortedModels(List(Map(\"make\"->\"Nokia\", \"model\"->216, \"color\"->\"Black\"), Map(\"make\"->\"Mi Max\", \"model\"->2, \"color\"->\"Gold\"), Map(\"make\"->\"Samsung\", \"model\"->7, \"color\"->\"Blue\")))\n     * List(Map(\"make\"->\"Nokia\", \"model\"->216, \"color\"->\"Black\"), Map(\"make\"->\"Samsung\", \"model\"->7, \"color\"->\"Blue\"), Map(\"make\"->\"Mi Max\", \"model\"->2, \"color\"->\"Gold\"))\n     * >>> sortedModels(List(Map(\"make\"->\"Vivo\", \"model\"->20, \"color\"->\"Blue\"), Map(\"make\"->\"oppo\", \"model\"->17, \"color\"->\"Gold\"), Map(\"make\"->\"Apple\", \"model\"->11, \"color\"->\"red\")))\n     * List(Map(\"make\"->\"Vivo\", \"model\"->20, \"color\"->\"Blue\"), Map(\"make\"->\"oppo\", \"model\"->17, \"color\"->\"Gold\"), Map(\"make\"->\"Apple\", \"model\"->11, \"color\"->\"red\"))\n     * >>> sortedModels(List(Map(\"make\"->\"micromax\", \"model\"->40, \"color\"->\"grey\"), Map(\"make\"->\"poco\", \"model\"->60, \"color\"->\"blue\")))\n     * List(Map(\"make\"->\"poco\", \"model\"->60, \"color\"->\"blue\"), Map(\"make\"->\"micromax\", \"model\"->40, \"color\"->\"grey\"))\n     */\n    def sortedModels(models : List[Map[String, Any]]) : List[Map[String, Any]] = {\n", "entry_point": "sortedModels", "test": "\n\n    var arg00 : List[Map[String, Any]] = List(Map(\"\"\"make\"\"\" -> \"\"\"Nokia\"\"\", \"\"\"model\"\"\" -> 216, \"\"\"color\"\"\" -> \"\"\"Black\"\"\"), Map(\"\"\"make\"\"\" -> \"\"\"Mi Max\"\"\", \"\"\"model\"\"\" -> 2, \"\"\"color\"\"\" -> \"\"\"Gold\"\"\"), Map(\"\"\"make\"\"\" -> \"\"\"Samsung\"\"\", \"\"\"model\"\"\" -> 7, \"\"\"color\"\"\" -> \"\"\"Blue\"\"\"))\n    var x0 : List[Map[String, Any]] = sortedModels(arg00)\n    var v0 : List[Map[String, Any]] = List(Map(\"\"\"make\"\"\" -> \"\"\"Nokia\"\"\", \"\"\"model\"\"\" -> 216, \"\"\"color\"\"\" -> \"\"\"Black\"\"\"), Map(\"\"\"make\"\"\" -> \"\"\"Samsung\"\"\", \"\"\"model\"\"\" -> 7, \"\"\"color\"\"\" -> \"\"\"Blue\"\"\"), Map(\"\"\"make\"\"\" -> \"\"\"Mi Max\"\"\", \"\"\"model\"\"\" -> 2, \"\"\"color\"\"\" -> \"\"\"Gold\"\"\"))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Map[String, Any]] = List(Map(\"\"\"make\"\"\" -> \"\"\"Vivo\"\"\", \"\"\"model\"\"\" -> 20, \"\"\"color\"\"\" -> \"\"\"Blue\"\"\"), Map(\"\"\"make\"\"\" -> \"\"\"oppo\"\"\", \"\"\"model\"\"\" -> 17, \"\"\"color\"\"\" -> \"\"\"Gold\"\"\"), Map(\"\"\"make\"\"\" -> \"\"\"Apple\"\"\", \"\"\"model\"\"\" -> 11, \"\"\"color\"\"\" -> \"\"\"red\"\"\"))\n    var x1 : List[Map[String, Any]] = sortedModels(arg10)\n    var v1 : List[Map[String, Any]] = List(Map(\"\"\"make\"\"\" -> \"\"\"Vivo\"\"\", \"\"\"model\"\"\" -> 20, \"\"\"color\"\"\" -> \"\"\"Blue\"\"\"), Map(\"\"\"make\"\"\" -> \"\"\"oppo\"\"\", \"\"\"model\"\"\" -> 17, \"\"\"color\"\"\" -> \"\"\"Gold\"\"\"), Map(\"\"\"make\"\"\" -> \"\"\"Apple\"\"\", \"\"\"model\"\"\" -> 11, \"\"\"color\"\"\" -> \"\"\"red\"\"\"))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Map[String, Any]] = List(Map(\"\"\"make\"\"\" -> \"\"\"micromax\"\"\", \"\"\"model\"\"\" -> 40, \"\"\"color\"\"\" -> \"\"\"grey\"\"\"), Map(\"\"\"make\"\"\" -> \"\"\"poco\"\"\", \"\"\"model\"\"\" -> 60, \"\"\"color\"\"\" -> \"\"\"blue\"\"\"))\n    var x2 : List[Map[String, Any]] = sortedModels(arg20)\n    var v2 : List[Map[String, Any]] = List(Map(\"\"\"make\"\"\" -> \"\"\"poco\"\"\", \"\"\"model\"\"\" -> 60, \"\"\"color\"\"\" -> \"\"\"blue\"\"\"), Map(\"\"\"make\"\"\" -> \"\"\"micromax\"\"\", \"\"\"model\"\"\" -> 40, \"\"\"color\"\"\" -> \"\"\"grey\"\"\"))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort a list of dictionaries using lambda function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/940", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort the given array by using heap sort.\n     *\n     * >>> heapSort(List(12, 2, 4, 5, 2, 3))\n     * List(2, 2, 3, 4, 5, 12)\n     * >>> heapSort(List(32, 14, 5, 6, 7, 19))\n     * List(5, 6, 7, 14, 19, 32)\n     * >>> heapSort(List(21, 15, 29, 78, 65))\n     * List(15, 21, 29, 65, 78)\n     */\n    def heapSort(arr : List[Int]) : List[Int] = {\n", "entry_point": "heapSort", "test": "\n\n    var arg00 : List[Int] = List(12, 2, 4, 5, 2, 3)\n    var x0 : List[Int] = heapSort(arg00)\n    var v0 : List[Int] = List(2, 2, 3, 4, 5, 12)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(32, 14, 5, 6, 7, 19)\n    var x1 : List[Int] = heapSort(arg10)\n    var v1 : List[Int] = List(5, 6, 7, 14, 19, 32)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(21, 15, 29, 78, 65)\n    var x2 : List[Int] = heapSort(arg20)\n    var v2 : List[Int] = List(15, 21, 29, 65, 78)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort the given array by using heap sort.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/941", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count the elements in a list until an element is a tuple.\n     *\n     * >>> countElim(List(10, 20, 30, List(10, 20), 40))\n     * 3\n     * >>> countElim(List(10, List(20, 30), List(10, 20), 40))\n     * 1\n     * >>> countElim(List(List(10, List(20, 30, List(10, 20), 40))))\n     * 0\n     */\n    def countElim(num : List[Any]) : Int = {\n", "entry_point": "countElim", "test": "\n\n    var arg00 : List[Any] = List(10, 20, 30, List(10, 20), 40)\n    var x0 : Int = countElim(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(10, List(20, 30), List(10, 20), 40)\n    var x1 : Int = countElim(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(List(10, List(20, 30, List(10, 20), 40)))\n    var x2 : Int = countElim(arg20)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to count the elements in a list until an element is a tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/942", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to check if any list element is present in the given list.\n     *\n     * >>> checkElement(List(4, 5, 7, 9, 3), List(6, 7, 10, 11))\n     * true\n     * >>> checkElement(List(1, 2, 3, 4), List(4, 6, 7, 8, 9))\n     * true\n     * >>> checkElement(List(3, 2, 1, 4, 5), List(9, 8, 7, 6))\n     * false\n     */\n    def checkElement(testTup : List[Int], checkList : List[Int]) : Boolean = {\n", "entry_point": "checkElement", "test": "\n\n    var arg00 : List[Int] = List(4, 5, 7, 9, 3)\n    var arg01 : List[Int] = List(6, 7, 10, 11)\n    var x0 : Boolean = checkElement(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4)\n    var arg11 : List[Int] = List(4, 6, 7, 8, 9)\n    var x1 : Boolean = checkElement(arg10, arg11)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3, 2, 1, 4, 5)\n    var arg21 : List[Int] = List(9, 8, 7, 6)\n    var x2 : Boolean = checkElement(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to check if any list element is present in the given list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/943", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to combine two given sorted lists using heapq module.\n     *\n     * >>> combineLists(List(1, 3, 5, 7, 9, 11), List(0, 2, 4, 6, 8, 10))\n     * List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n     * >>> combineLists(List(1, 3, 5, 6, 8, 9), List(2, 5, 7, 11))\n     * List(1, 2, 3, 5, 5, 6, 7, 8, 9, 11)\n     * >>> combineLists(List(1, 3, 7), List(2, 4, 6))\n     * List(1, 2, 3, 4, 6, 7)\n     */\n    def combineLists(num1 : List[Int], num2 : List[Int]) : List[Int] = {\n", "entry_point": "combineLists", "test": "\n\n    var arg00 : List[Int] = List(1, 3, 5, 7, 9, 11)\n    var arg01 : List[Int] = List(0, 2, 4, 6, 8, 10)\n    var x0 : List[Int] = combineLists(arg00, arg01)\n    var v0 : List[Int] = List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 3, 5, 6, 8, 9)\n    var arg11 : List[Int] = List(2, 5, 7, 11)\n    var x1 : List[Int] = combineLists(arg10, arg11)\n    var v1 : List[Int] = List(1, 2, 3, 5, 5, 6, 7, 8, 9, 11)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 3, 7)\n    var arg21 : List[Int] = List(2, 4, 6)\n    var x2 : List[Int] = combineLists(arg20, arg21)\n    var v2 : List[Int] = List(1, 2, 3, 4, 6, 7)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to combine two given sorted lists using heapq module.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/944", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to separate and print the numbers and their position of a given string.\n     *\n     * >>> numPosition(\"there are 70 flats in this apartment\")\n     * 10\n     * >>> numPosition(\"every adult have 32 teeth\")\n     * 17\n     * >>> numPosition(\"isha has 79 chocolates in her bag\")\n     * 9\n     */\n    def numPosition(text : String) : Int = {\n", "entry_point": "numPosition", "test": "\n\n    var arg00 : String = \"\"\"there are 70 flats in this apartment\"\"\"\n    var x0 : Int = numPosition(arg00)\n    var v0 : Int = 10\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"every adult have 32 teeth\"\"\"\n    var x1 : Int = numPosition(arg10)\n    var v1 : Int = 17\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"isha has 79 chocolates in her bag\"\"\"\n    var x2 : Int = numPosition(arg20)\n    var v2 : Int = 9\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to separate and print the numbers and their position of a given string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/945", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert the given tuples into set.\n     *\n     * >>> tupleToSet(List(\"x\", \"y\", \"z\"))\n     * Set(\"y\", \"z\", \"x\")\n     * >>> tupleToSet(List(\"a\", \"b\", \"c\"))\n     * Set(\"c\", \"b\", \"a\")\n     * >>> tupleToSet(List(\"z\", \"d\", \"e\"))\n     * Set(\"e\", \"z\", \"d\")\n     */\n    def tupleToSet(t : List[String]) : Set[String] = {\n", "entry_point": "tupleToSet", "test": "\n\n    var arg00 : List[String] = List(\"\"\"x\"\"\", \"\"\"y\"\"\", \"\"\"z\"\"\")\n    var x0 : Set[String] = tupleToSet(arg00)\n    var v0 : Set[String] = Set(\"\"\"y\"\"\", \"\"\"z\"\"\", \"\"\"x\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"a\"\"\", \"\"\"b\"\"\", \"\"\"c\"\"\")\n    var x1 : Set[String] = tupleToSet(arg10)\n    var v1 : Set[String] = Set(\"\"\"c\"\"\", \"\"\"b\"\"\", \"\"\"a\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"z\"\"\", \"\"\"d\"\"\", \"\"\"e\"\"\")\n    var x2 : Set[String] = tupleToSet(arg20)\n    var v2 : Set[String] = Set(\"\"\"e\"\"\", \"\"\"z\"\"\", \"\"\"d\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert the given tuples into set.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/946", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the most common elements and their counts of a specified text.\n     *\n     * >>> mostCommonElem(\"lkseropewdssafsdfafkpwe\", 3)\n     * List(List(\"s\", 4), List(\"e\", 3), List(\"f\", 3))\n     * >>> mostCommonElem(\"lkseropewdssafsdfafkpwe\", 2)\n     * List(List(\"s\", 4), List(\"e\", 3))\n     * >>> mostCommonElem(\"lkseropewdssafsdfafkpwe\", 7)\n     * List(List(\"s\", 4), List(\"e\", 3), List(\"f\", 3), List(\"k\", 2), List(\"p\", 2), List(\"w\", 2), List(\"d\", 2))\n     */\n    def mostCommonElem(s : String, a : Int) : List[List[Any]] = {\n", "entry_point": "mostCommonElem", "test": "\n\n    var arg00 : String = \"\"\"lkseropewdssafsdfafkpwe\"\"\"\n    var arg01 : Int = 3\n    var x0 : List[List[Any]] = mostCommonElem(arg00, arg01)\n    var v0 : List[List[Any]] = List(List(\"\"\"s\"\"\", 4), List(\"\"\"e\"\"\", 3), List(\"\"\"f\"\"\", 3))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"lkseropewdssafsdfafkpwe\"\"\"\n    var arg11 : Int = 2\n    var x1 : List[List[Any]] = mostCommonElem(arg10, arg11)\n    var v1 : List[List[Any]] = List(List(\"\"\"s\"\"\", 4), List(\"\"\"e\"\"\", 3))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"lkseropewdssafsdfafkpwe\"\"\"\n    var arg21 : Int = 7\n    var x2 : List[List[Any]] = mostCommonElem(arg20, arg21)\n    var v2 : List[List[Any]] = List(List(\"\"\"s\"\"\", 4), List(\"\"\"e\"\"\", 3), List(\"\"\"f\"\"\", 3), List(\"\"\"k\"\"\", 2), List(\"\"\"p\"\"\", 2), List(\"\"\"w\"\"\", 2), List(\"\"\"d\"\"\", 2))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the most common elements and their counts of a specified text.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/947", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the length of the shortest word.\n     *\n     * >>> lenLog(List(\"win\", \"lose\", \"great\"))\n     * 3\n     * >>> lenLog(List(\"a\", \"ab\", \"abc\"))\n     * 1\n     * >>> lenLog(List(\"12\", \"12\", \"1234\"))\n     * 2\n     */\n    def lenLog(list1 : List[String]) : Int = {\n", "entry_point": "lenLog", "test": "\n\n    var arg00 : List[String] = List(\"\"\"win\"\"\", \"\"\"lose\"\"\", \"\"\"great\"\"\")\n    var x0 : Int = lenLog(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[String] = List(\"\"\"a\"\"\", \"\"\"ab\"\"\", \"\"\"abc\"\"\")\n    var x1 : Int = lenLog(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[String] = List(\"\"\"12\"\"\", \"\"\"12\"\"\", \"\"\"1234\"\"\")\n    var x2 : Int = lenLog(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the length of the shortest word.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/948", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to get an item of a tuple.\n     *\n     * >>> getItem(List(\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 3)\n     * \"e\"\n     * >>> getItem(List(\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), -4)\n     * \"u\"\n     * >>> getItem(List(\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), -3)\n     * \"r\"\n     */\n    def getItem(tup1 : List[Any], index : Int) : String = {\n", "entry_point": "getItem", "test": "\n\n    var arg00 : List[Any] = List(\"\"\"w\"\"\", 3, \"\"\"r\"\"\", \"\"\"e\"\"\", \"\"\"s\"\"\", \"\"\"o\"\"\", \"\"\"u\"\"\", \"\"\"r\"\"\", \"\"\"c\"\"\", \"\"\"e\"\"\")\n    var arg01 : Int = 3\n    var x0 : String = getItem(arg00, arg01)\n    var v0 : String = \"\"\"e\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(\"\"\"w\"\"\", 3, \"\"\"r\"\"\", \"\"\"e\"\"\", \"\"\"s\"\"\", \"\"\"o\"\"\", \"\"\"u\"\"\", \"\"\"r\"\"\", \"\"\"c\"\"\", \"\"\"e\"\"\")\n    var arg11 : Int = -4\n    var x1 : String = getItem(arg10, arg11)\n    var v1 : String = \"\"\"u\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(\"\"\"w\"\"\", 3, \"\"\"r\"\"\", \"\"\"e\"\"\", \"\"\"s\"\"\", \"\"\"o\"\"\", \"\"\"u\"\"\", \"\"\"r\"\"\", \"\"\"c\"\"\", \"\"\"e\"\"\")\n    var arg21 : Int = -3\n    var x2 : String = getItem(arg20, arg21)\n    var v2 : String = \"\"\"r\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to get an item of a tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/949", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to sort the given tuple list basis the total digits in tuple.\n     *\n     * >>> sortList(List(List(3, 4, 6, 723), List(1, 2), List(12345), List(134, 234, 34)))\n     * \"[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]\"\n     * >>> sortList(List(List(3, 4, 8), List(1, 2), List(1234335), List(1345, 234, 334)))\n     * \"[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]\"\n     * >>> sortList(List(List(34, 4, 61, 723), List(1, 2), List(145), List(134, 23)))\n     * \"[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]\"\n     */\n    def sortList(testList : List[List[Int]]) : String = {\n", "entry_point": "sortList", "test": "\n\n    var arg00 : List[List[Int]] = List(List(3, 4, 6, 723), List(1, 2), List(12345), List(134, 234, 34))\n    var x0 : String = sortList(arg00)\n    var v0 : String = \"\"\"[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(3, 4, 8), List(1, 2), List(1234335), List(1345, 234, 334))\n    var x1 : String = sortList(arg10)\n    var v1 : String = \"\"\"[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(34, 4, 61, 723), List(1, 2), List(145), List(134, 23))\n    var x2 : String = sortList(arg20)\n    var v2 : String = \"\"\"[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to sort the given tuple list basis the total digits in tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/950", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to display sign of the chinese zodiac for given year.\n     *\n     * >>> chineseZodiac(1997)\n     * \"Ox\"\n     * >>> chineseZodiac(1998)\n     * \"Tiger\"\n     * >>> chineseZodiac(1994)\n     * \"Dog\"\n     */\n    def chineseZodiac(year : Int) : String = {\n", "entry_point": "chineseZodiac", "test": "\n\n    var arg00 : Int = 1997\n    var x0 : String = chineseZodiac(arg00)\n    var v0 : String = \"\"\"Ox\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1998\n    var x1 : String = chineseZodiac(arg10)\n    var v1 : String = \"\"\"Tiger\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1994\n    var x2 : String = chineseZodiac(arg20)\n    var v2 : String = \"\"\"Dog\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to display sign of the chinese zodiac for given year.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/951", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the maximum of similar indices in two lists of tuples.\n     *\n     * >>> maxSimilarIndices(List(List(2, 4), List(6, 7), List(5, 1)), List(List(5, 4), List(8, 10), List(8, 14)))\n     * List(List(5, 4), List(8, 10), List(8, 14))\n     * >>> maxSimilarIndices(List(List(3, 5), List(7, 8), List(6, 2)), List(List(6, 5), List(9, 11), List(9, 15)))\n     * List(List(6, 5), List(9, 11), List(9, 15))\n     * >>> maxSimilarIndices(List(List(4, 6), List(8, 9), List(7, 3)), List(List(7, 6), List(10, 12), List(10, 16)))\n     * List(List(7, 6), List(10, 12), List(10, 16))\n     */\n    def maxSimilarIndices(testList1 : List[List[Int]], testList2 : List[List[Int]]) : List[List[Int]] = {\n", "entry_point": "maxSimilarIndices", "test": "\n\n    var arg00 : List[List[Int]] = List(List(2, 4), List(6, 7), List(5, 1))\n    var arg01 : List[List[Int]] = List(List(5, 4), List(8, 10), List(8, 14))\n    var x0 : List[List[Int]] = maxSimilarIndices(arg00, arg01)\n    var v0 : List[List[Int]] = List(List(5, 4), List(8, 10), List(8, 14))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(3, 5), List(7, 8), List(6, 2))\n    var arg11 : List[List[Int]] = List(List(6, 5), List(9, 11), List(9, 15))\n    var x1 : List[List[Int]] = maxSimilarIndices(arg10, arg11)\n    var v1 : List[List[Int]] = List(List(6, 5), List(9, 11), List(9, 15))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(4, 6), List(8, 9), List(7, 3))\n    var arg21 : List[List[Int]] = List(List(7, 6), List(10, 12), List(10, 16))\n    var x2 : List[List[Int]] = maxSimilarIndices(arg20, arg21)\n    var v2 : List[List[Int]] = List(List(7, 6), List(10, 12), List(10, 16))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the maximum of similar indices in two lists of tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/952", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to compute the value of ncr mod p.\n     *\n     * >>> ncrModP(10, 2, 13)\n     * 6\n     * >>> ncrModP(11, 3, 14)\n     * 11\n     * >>> ncrModP(18, 14, 19)\n     * 1\n     */\n    def ncrModP(n : Int, r : Int, p : Int) : Int = {\n", "entry_point": "ncrModP", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 2\n    var arg02 : Int = 13\n    var x0 : Int = ncrModP(arg00, arg01, arg02)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 11\n    var arg11 : Int = 3\n    var arg12 : Int = 14\n    var x1 : Int = ncrModP(arg10, arg11, arg12)\n    var v1 : Int = 11\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 18\n    var arg21 : Int = 14\n    var arg22 : Int = 19\n    var x2 : Int = ncrModP(arg20, arg21, arg22)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to compute the value of ncr mod p.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/953", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the minimun number of subsets with distinct elements.\n     *\n     * >>> subset(List(1, 2, 3, 4), 4)\n     * 1\n     * >>> subset(List(5, 6, 9, 3, 4, 3, 4), 7)\n     * 2\n     * >>> subset(List(1, 2, 3), 3)\n     * 1\n     */\n    def subset(ar : List[Int], n : Int) : Int = {\n", "entry_point": "subset", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4)\n    var arg01 : Int = 4\n    var x0 : Int = subset(arg00, arg01)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(5, 6, 9, 3, 4, 3, 4)\n    var arg11 : Int = 7\n    var x1 : Int = subset(arg10, arg11)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3)\n    var arg21 : Int = 3\n    var x2 : Int = subset(arg20, arg21)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the minimun number of subsets with distinct elements.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/954", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function that gives profit amount if the given amount has profit else return null.\n     *\n     * >>> profitAmount(1500, 1200)\n     * 300\n     * >>> profitAmount(100, 200)\n     * \"none\"\n     * >>> profitAmount(2000, 5000)\n     * \"none\"\n     */\n    def profitAmount(actualCost : Int, saleAmount : Int) : Any = {\n", "entry_point": "profitAmount", "test": "\n\n    var arg00 : Int = 1500\n    var arg01 : Int = 1200\n    var x0 : Any = profitAmount(arg00, arg01)\n    var v0 : Any = 300\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 100\n    var arg11 : Int = 200\n    var x1 : Any = profitAmount(arg10, arg11)\n    var v1 : Any = \"none\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2000\n    var arg21 : Int = 5000\n    var x2 : Any = profitAmount(arg20, arg21)\n    var v2 : Any = \"none\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function that gives profit amount if the given amount has profit else return null.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/955", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find out, if the given number is abundant.\n     *\n     * >>> isAbundant(12)\n     * true\n     * >>> isAbundant(13)\n     * false\n     * >>> isAbundant(9)\n     * false\n     */\n    def isAbundant(n : Int) : Boolean = {\n", "entry_point": "isAbundant", "test": "\n\n    var arg00 : Int = 12\n    var x0 : Boolean = isAbundant(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 13\n    var x1 : Boolean = isAbundant(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 9\n    var x2 : Boolean = isAbundant(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find out, if the given number is abundant.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/956", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to split the given string at uppercase letters by using regex.\n     *\n     * >>> splitList(\"LearnToBuildAnythingWithGoogle\")\n     * List(\"Learn\", \"To\", \"Build\", \"Anything\", \"With\", \"Google\")\n     * >>> splitList(\"ApmlifyingTheBlack+DeveloperCommunity\")\n     * List(\"Apmlifying\", \"The\", \"Black+\", \"Developer\", \"Community\")\n     * >>> splitList(\"UpdateInTheGoEcoSystem\")\n     * List(\"Update\", \"In\", \"The\", \"Go\", \"Eco\", \"System\")\n     */\n    def splitList(text : String) : List[String] = {\n", "entry_point": "splitList", "test": "\n\n    var arg00 : String = \"\"\"LearnToBuildAnythingWithGoogle\"\"\"\n    var x0 : List[String] = splitList(arg00)\n    var v0 : List[String] = List(\"\"\"Learn\"\"\", \"\"\"To\"\"\", \"\"\"Build\"\"\", \"\"\"Anything\"\"\", \"\"\"With\"\"\", \"\"\"Google\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"ApmlifyingTheBlack+DeveloperCommunity\"\"\"\n    var x1 : List[String] = splitList(arg10)\n    var v1 : List[String] = List(\"\"\"Apmlifying\"\"\", \"\"\"The\"\"\", \"\"\"Black+\"\"\", \"\"\"Developer\"\"\", \"\"\"Community\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"UpdateInTheGoEcoSystem\"\"\"\n    var x2 : List[String] = splitList(arg20)\n    var v2 : List[String] = List(\"\"\"Update\"\"\", \"\"\"In\"\"\", \"\"\"The\"\"\", \"\"\"Go\"\"\", \"\"\"Eco\"\"\", \"\"\"System\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to split the given string at uppercase letters by using regex.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/957", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to get the position of rightmost set bit.\n     *\n     * >>> getFirstSetBitPos(12)\n     * 3\n     * >>> getFirstSetBitPos(18)\n     * 2\n     * >>> getFirstSetBitPos(16)\n     * 5\n     */\n    def getFirstSetBitPos(n : Int) : Int = {\n", "entry_point": "getFirstSetBitPos", "test": "\n\n    var arg00 : Int = 12\n    var x0 : Int = getFirstSetBitPos(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 18\n    var x1 : Int = getFirstSetBitPos(arg10)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 16\n    var x2 : Int = getFirstSetBitPos(arg20)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to get the position of rightmost set bit.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/958", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert an integer into a roman numeral.\n     *\n     * >>> intToRoman(1)\n     * \"I\"\n     * >>> intToRoman(50)\n     * \"L\"\n     * >>> intToRoman(4)\n     * \"IV\"\n     */\n    def intToRoman(num : Int) : String = {\n", "entry_point": "intToRoman", "test": "\n\n    var arg00 : Int = 1\n    var x0 : String = intToRoman(arg00)\n    var v0 : String = \"\"\"I\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 50\n    var x1 : String = intToRoman(arg10)\n    var v1 : String = \"\"\"L\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var x2 : String = intToRoman(arg20)\n    var v2 : String = \"\"\"IV\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert an integer into a roman numeral.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/959", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the average of a list.\n     *\n     * >>> average(List(15, 9, 55, 41, 35, 20, 62, 49))\n     * 35.75\n     * >>> average(List(4, 5, 1, 2, 9, 7, 10, 8))\n     * 5.75\n     * >>> average(List(1, 2, 3))\n     * 2\n     */\n    def average(lst : List[Int]) : Double = {\n", "entry_point": "average", "test": "\n\n    var arg00 : List[Int] = List(15, 9, 55, 41, 35, 20, 62, 49)\n    var x0 : Double = average(arg00)\n    var v0 : Double = 35.75\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 5, 1, 2, 9, 7, 10, 8)\n    var x1 : Double = average(arg10)\n    var v1 : Double = 5.75\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3)\n    var x2 : Double = average(arg20)\n    var v2 : Double = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the average of a list.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/960", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to solve tiling problem.\n     *\n     * >>> getNoofways(4)\n     * 3\n     * >>> getNoofways(3)\n     * 2\n     * >>> getNoofways(5)\n     * 5\n     */\n    def getNoofways(n : Int) : Int = {\n", "entry_point": "getNoofways", "test": "\n\n    var arg00 : Int = 4\n    var x0 : Int = getNoofways(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var x1 : Int = getNoofways(arg10)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var x2 : Int = getNoofways(arg20)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to solve tiling problem.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/961", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert a roman numeral to an integer.\n     *\n     * >>> romanToInt(\"MMMCMLXXXVI\")\n     * 3986\n     * >>> romanToInt(\"MMMM\")\n     * 4000\n     * >>> romanToInt(\"C\")\n     * 100\n     */\n    def romanToInt(s : String) : Int = {\n", "entry_point": "romanToInt", "test": "\n\n    var arg00 : String = \"\"\"MMMCMLXXXVI\"\"\"\n    var x0 : Int = romanToInt(arg00)\n    var v0 : Int = 3986\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"MMMM\"\"\"\n    var x1 : Int = romanToInt(arg10)\n    var v1 : Int = 4000\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"C\"\"\"\n    var x2 : Int = romanToInt(arg20)\n    var v2 : Int = 100\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert a roman numeral to an integer.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/962", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find the sum of all even natural numbers within the range l and r.\n     *\n     * >>> sumEven(2, 5)\n     * 6\n     * >>> sumEven(3, 8)\n     * 18\n     * >>> sumEven(4, 6)\n     * 10\n     */\n    def sumEven(l : Int, r : Int) : Int = {\n", "entry_point": "sumEven", "test": "\n\n    var arg00 : Int = 2\n    var arg01 : Int = 5\n    var x0 : Int = sumEven(arg00, arg01)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 3\n    var arg11 : Int = 8\n    var x1 : Int = sumEven(arg10, arg11)\n    var v1 : Int = 18\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var arg21 : Int = 6\n    var x2 : Int = sumEven(arg20, arg21)\n    var v2 : Int = 10\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find the sum of all even natural numbers within the range l and r.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/963", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to calculate the discriminant value.\n     *\n     * >>> discriminantValue(4, 8, 2)\n     * List(\"Two solutions\", 32)\n     * >>> discriminantValue(5, 7, 9)\n     * List(\"no real solution\", -131)\n     * >>> discriminantValue(0, 0, 9)\n     * List(\"one solution\", 0)\n     */\n    def discriminantValue(x : Int, y : Int, z : Int) : List[Any] = {\n", "entry_point": "discriminantValue", "test": "\n\n    var arg00 : Int = 4\n    var arg01 : Int = 8\n    var arg02 : Int = 2\n    var x0 : List[Any] = discriminantValue(arg00, arg01, arg02)\n    var v0 : List[Any] = List(\"\"\"Two solutions\"\"\", 32)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var arg11 : Int = 7\n    var arg12 : Int = 9\n    var x1 : List[Any] = discriminantValue(arg10, arg11, arg12)\n    var v1 : List[Any] = List(\"\"\"no real solution\"\"\", -131)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 0\n    var arg21 : Int = 0\n    var arg22 : Int = 9\n    var x2 : List[Any] = discriminantValue(arg20, arg21, arg22)\n    var v2 : List[Any] = List(\"\"\"one solution\"\"\", 0)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to calculate the discriminant value.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/964", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to check whether the length of the word is even or not.\n     *\n     * >>> wordLen(\"program\")\n     * false\n     * >>> wordLen(\"solution\")\n     * true\n     * >>> wordLen(\"data\")\n     * true\n     */\n    def wordLen(s : String) : Boolean = {\n", "entry_point": "wordLen", "test": "\n\n    var arg00 : String = \"\"\"program\"\"\"\n    var x0 : Boolean = wordLen(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"solution\"\"\"\n    var x1 : Boolean = wordLen(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"data\"\"\"\n    var x2 : Boolean = wordLen(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to check whether the length of the word is even or not.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/965", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to convert camel case string to snake case string.\n     *\n     * >>> camelToSnake(\"PythonProgram\")\n     * \"python_program\"\n     * >>> camelToSnake(\"pythonLanguage\")\n     * \"python_language\"\n     * >>> camelToSnake(\"ProgrammingLanguage\")\n     * \"programming_language\"\n     */\n    def camelToSnake(text : String) : String = {\n", "entry_point": "camelToSnake", "test": "\n\n    var arg00 : String = \"\"\"PythonProgram\"\"\"\n    var x0 : String = camelToSnake(arg00)\n    var v0 : String = \"\"\"python_program\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"pythonLanguage\"\"\"\n    var x1 : String = camelToSnake(arg10)\n    var v1 : String = \"\"\"python_language\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"ProgrammingLanguage\"\"\"\n    var x2 : String = camelToSnake(arg20)\n    var v2 : String = \"\"\"programming_language\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to convert camel case string to snake case string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/966", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to remove an empty tuple from a list of tuples.\n     *\n     * >>> removeEmpty(List(List(), List(), List(\"\"), List(\"a\", \"b\"), List(\"a\", \"b\", \"c\"), \"d\"))\n     * List(List(\"\"), List(\"a\", \"b\"), List(\"a\", \"b\", \"c\"), \"d\")\n     * >>> removeEmpty(List(List(), List(), List(\"\"), \"python\", \"program\"))\n     * List(List(\"\"), \"python\", \"program\")\n     * >>> removeEmpty(List(List(), List(), List(\"\"), \"java\"))\n     * List(List(\"\"), \"java\")\n     */\n    def removeEmpty(tuple1 : List[Any]) : List[Any] = {\n", "entry_point": "removeEmpty", "test": "\n\n    var arg00 : List[Any] = List(List(), List(), List(\"\"\"\"\"\"), List(\"\"\"a\"\"\", \"\"\"b\"\"\"), List(\"\"\"a\"\"\", \"\"\"b\"\"\", \"\"\"c\"\"\"), \"\"\"d\"\"\")\n    var x0 : List[Any] = removeEmpty(arg00)\n    var v0 : List[Any] = List(List(\"\"\"\"\"\"), List(\"\"\"a\"\"\", \"\"\"b\"\"\"), List(\"\"\"a\"\"\", \"\"\"b\"\"\", \"\"\"c\"\"\"), \"\"\"d\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(List(), List(), List(\"\"\"\"\"\"), \"\"\"python\"\"\", \"\"\"program\"\"\")\n    var x1 : List[Any] = removeEmpty(arg10)\n    var v1 : List[Any] = List(List(\"\"\"\"\"\"), \"\"\"python\"\"\", \"\"\"program\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(List(), List(), List(\"\"\"\"\"\"), \"\"\"java\"\"\")\n    var x2 : List[Any] = removeEmpty(arg20)\n    var v2 : List[Any] = List(List(\"\"\"\"\"\"), \"\"\"java\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to remove an empty tuple from a list of tuples.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/967", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to accept the strings which contains all vowels.\n     *\n     * >>> check(\"SEEquoiaL\")\n     * \"accepted\"\n     * >>> check(\"program\")\n     * \"not accepted\"\n     * >>> check(\"fine\")\n     * \"not accepted\"\n     */\n    def check(string : String) : String = {\n", "entry_point": "check", "test": "\n\n    var arg00 : String = \"\"\"SEEquoiaL\"\"\"\n    var x0 : String = check(arg00)\n    var v0 : String = \"\"\"accepted\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"program\"\"\"\n    var x1 : String = check(arg10)\n    var v1 : String = \"\"\"not accepted\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"fine\"\"\"\n    var x2 : String = check(arg20)\n    var v2 : String = \"\"\"not accepted\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to accept the strings which contains all vowels.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/968", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find maximum possible value for the given periodic function.\n     *\n     * >>> floorMax(11, 10, 9)\n     * 9\n     * >>> floorMax(5, 7, 4)\n     * 2\n     * >>> floorMax(2, 2, 1)\n     * 1\n     */\n    def floorMax(a : Int, b : Int, n : Int) : Int = {\n", "entry_point": "floorMax", "test": "\n\n    var arg00 : Int = 11\n    var arg01 : Int = 10\n    var arg02 : Int = 9\n    var x0 : Int = floorMax(arg00, arg01, arg02)\n    var v0 : Int = 9\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var arg11 : Int = 7\n    var arg12 : Int = 4\n    var x1 : Int = floorMax(arg10, arg11, arg12)\n    var v1 : Int = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var arg21 : Int = 2\n    var arg22 : Int = 1\n    var x2 : Int = floorMax(arg20, arg21, arg22)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to find maximum possible value for the given periodic function.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/969", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to join the tuples if they have similar initial elements.\n     *\n     * >>> joinTuples(List(List(5, 6), List(5, 7), List(6, 8), List(6, 10), List(7, 13)))\n     * List(List(5, 6, 7), List(6, 8, 10), List(7, 13))\n     * >>> joinTuples(List(List(6, 7), List(6, 8), List(7, 9), List(7, 11), List(8, 14)))\n     * List(List(6, 7, 8), List(7, 9, 11), List(8, 14))\n     * >>> joinTuples(List(List(7, 8), List(7, 9), List(8, 10), List(8, 12), List(9, 15)))\n     * List(List(7, 8, 9), List(8, 10, 12), List(9, 15))\n     */\n    def joinTuples(testList : List[List[Int]]) : List[List[Int]] = {\n", "entry_point": "joinTuples", "test": "\n\n    var arg00 : List[List[Int]] = List(List(5, 6), List(5, 7), List(6, 8), List(6, 10), List(7, 13))\n    var x0 : List[List[Int]] = joinTuples(arg00)\n    var v0 : List[List[Int]] = List(List(5, 6, 7), List(6, 8, 10), List(7, 13))\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(6, 7), List(6, 8), List(7, 9), List(7, 11), List(8, 14))\n    var x1 : List[List[Int]] = joinTuples(arg10)\n    var v1 : List[List[Int]] = List(List(6, 7, 8), List(7, 9, 11), List(8, 14))\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(7, 8), List(7, 9), List(8, 10), List(8, 12), List(9, 15))\n    var x2 : List[List[Int]] = joinTuples(arg20)\n    var v2 : List[List[Int]] = List(List(7, 8, 9), List(8, 10, 12), List(9, 15))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to join the tuples if they have similar initial elements.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/970", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find minimum of two numbers.\n     *\n     * >>> minOfTwo(10, 20)\n     * 10\n     * >>> minOfTwo(19, 15)\n     * 15\n     * >>> minOfTwo(-10, -20)\n     * -20\n     */\n    def minOfTwo(x : Int, y : Int) : Int = {\n", "entry_point": "minOfTwo", "test": "\n\n    var arg00 : Int = 10\n    var arg01 : Int = 20\n    var x0 : Int = minOfTwo(arg00, arg01)\n    var v0 : Int = 10\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 19\n    var arg11 : Int = 15\n    var x1 : Int = minOfTwo(arg10, arg11)\n    var v1 : Int = 15\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = -10\n    var arg21 : Int = -20\n    var x2 : Int = minOfTwo(arg20, arg21)\n    var v2 : Int = -20\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find minimum of two numbers.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/971", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n     *\n     * >>> maximumSegments(7, 5, 2, 5)\n     * 2\n     * >>> maximumSegments(17, 2, 1, 3)\n     * 17\n     * >>> maximumSegments(18, 16, 3, 6)\n     * 6\n     */\n    def maximumSegments(n : Int, a : Int, b : Int, c : Int) : Int = {\n", "entry_point": "maximumSegments", "test": "\n\n    var arg00 : Int = 7\n    var arg01 : Int = 5\n    var arg02 : Int = 2\n    var arg03 : Int = 5\n    var x0 : Int = maximumSegments(arg00, arg01, arg02, arg03)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 17\n    var arg11 : Int = 2\n    var arg12 : Int = 1\n    var arg13 : Int = 3\n    var x1 : Int = maximumSegments(arg10, arg11, arg12, arg13)\n    var v1 : Int = 17\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 18\n    var arg21 : Int = 16\n    var arg22 : Int = 3\n    var arg23 : Int = 6\n    var x2 : Int = maximumSegments(arg20, arg21, arg22, arg23)\n    var v2 : Int = 6\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/972", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to concatenate the given two tuples to a nested tuple.\n     *\n     * >>> concatenateNested(List(3, 4), List(5, 6))\n     * List(3, 4, 5, 6)\n     * >>> concatenateNested(List(1, 2), List(3, 4))\n     * List(1, 2, 3, 4)\n     * >>> concatenateNested(List(4, 5), List(6, 8))\n     * List(4, 5, 6, 8)\n     */\n    def concatenateNested(testTup1 : List[Int], testTup2 : List[Int]) : List[Int] = {\n", "entry_point": "concatenateNested", "test": "\n\n    var arg00 : List[Int] = List(3, 4)\n    var arg01 : List[Int] = List(5, 6)\n    var x0 : List[Int] = concatenateNested(arg00, arg01)\n    var v0 : List[Int] = List(3, 4, 5, 6)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2)\n    var arg11 : List[Int] = List(3, 4)\n    var x1 : List[Int] = concatenateNested(arg10, arg11)\n    var v1 : List[Int] = List(1, 2, 3, 4)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(4, 5)\n    var arg21 : List[Int] = List(6, 8)\n    var x2 : List[Int] = concatenateNested(arg20, arg21)\n    var v2 : List[Int] = List(4, 5, 6, 8)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to concatenate the given two tuples to a nested tuple.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/973", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to left rotate the string.\n     *\n     * >>> leftRotate(\"python\", 2)\n     * \"thonpy\"\n     * >>> leftRotate(\"bigdata\", 3)\n     * \"databig\"\n     * >>> leftRotate(\"hadoop\", 1)\n     * \"adooph\"\n     */\n    def leftRotate(s : String, d : Int) : String = {\n", "entry_point": "leftRotate", "test": "\n\n    var arg00 : String = \"\"\"python\"\"\"\n    var arg01 : Int = 2\n    var x0 : String = leftRotate(arg00, arg01)\n    var v0 : String = \"\"\"thonpy\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"bigdata\"\"\"\n    var arg11 : Int = 3\n    var x1 : String = leftRotate(arg10, arg11)\n    var v1 : String = \"\"\"databig\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"hadoop\"\"\"\n    var arg21 : Int = 1\n    var x2 : String = leftRotate(arg20, arg21)\n    var v2 : String = \"\"\"adooph\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a Scala function to left rotate the string.", "language": "scala", "canonical_solution": null}
{"task_id": "MBSCP/974", "prompt": "object Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to find the minimum total path sum in the given triangle.\n     *\n     * >>> minSumPath(List(List(2), List(3, 9), List(1, 6, 7)))\n     * 6\n     * >>> minSumPath(List(List(2), List(3, 7), List(8, 5, 6)))\n     * 10\n     * >>> minSumPath(List(List(3), List(6, 4), List(5, 2, 7)))\n     * 9\n     */\n    def minSumPath(a : List[List[Int]]) : Int = {\n", "entry_point": "minSumPath", "test": "\n\n    var arg00 : List[List[Int]] = List(List(2), List(3, 9), List(1, 6, 7))\n    var x0 : Int = minSumPath(arg00)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(2), List(3, 7), List(8, 5, 6))\n    var x1 : Int = minSumPath(arg10)\n    var v1 : Int = 10\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(3), List(6, 4), List(5, 2, 7))\n    var x2 : Int = minSumPath(arg20)\n    var v2 : Int = 9\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "Write a function to find the minimum total path sum in the given triangle.", "language": "scala", "canonical_solution": null}
