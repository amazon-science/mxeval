{"task_id": "MBSWP/1", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n *\n * >>> minCost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)\n * 8\n * >>> minCost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)\n * 12\n * >>> minCost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)\n * 16\n */\nfunc minCost(cost : [[Int]], m : Int, n : Int) -> Int {\n", "entry_point": "minCost", "test": "\n\nvar arg00 : [[Int]] = [[1, 2, 3], [4, 8, 2], [1, 5, 3]]\nvar arg01 : Int = 2\nvar arg02 : Int = 2\nvar x0 : Int = minCost(cost : arg00, m : arg01, n : arg02)\nvar v0 : Int = 8\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[2, 3, 4], [5, 9, 3], [2, 6, 4]]\nvar arg11 : Int = 2\nvar arg12 : Int = 2\nvar x1 : Int = minCost(cost : arg10, m : arg11, n : arg12)\nvar v1 : Int = 12\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[3, 4, 5], [6, 10, 4], [3, 7, 5]]\nvar arg21 : Int = 2\nvar arg22 : Int = 2\nvar x2 : Int = minCost(cost : arg20, m : arg21, n : arg22)\nvar v2 : Int = 16\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/2", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the similar elements from the given two tuple lists.\n *\n * >>> similarElements([3, 4, 5, 6], [5, 7, 4, 10])\n * [4, 5]\n * >>> similarElements([1, 2, 3, 4], [5, 4, 3, 7])\n * [3, 4]\n * >>> similarElements([11, 12, 14, 13], [17, 15, 14, 13])\n * [13, 14]\n */\nfunc similarElements(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n", "entry_point": "similarElements", "test": "\n\nvar arg00 : [Int] = [3, 4, 5, 6]\nvar arg01 : [Int] = [5, 7, 4, 10]\nvar x0 : [Int] = similarElements(testTup1 : arg00, testTup2 : arg01)\nvar v0 : [Int] = [4, 5]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4]\nvar arg11 : [Int] = [5, 4, 3, 7]\nvar x1 : [Int] = similarElements(testTup1 : arg10, testTup2 : arg11)\nvar v1 : [Int] = [3, 4]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [11, 12, 14, 13]\nvar arg21 : [Int] = [17, 15, 14, 13]\nvar x2 : [Int] = similarElements(testTup1 : arg20, testTup2 : arg21)\nvar v2 : [Int] = [13, 14]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the similar elements from the given two tuple lists.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/3", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to identify non-prime numbers.\n *\n * >>> isNotPrime(2)\n * false\n * >>> isNotPrime(10)\n * true\n * >>> isNotPrime(35)\n * true\n */\nfunc isNotPrime(n : Int) -> Bool {\n", "entry_point": "isNotPrime", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Bool = isNotPrime(n : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar x1 : Bool = isNotPrime(n : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 35\nvar x2 : Bool = isNotPrime(n : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to identify non-prime numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/4", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n *\n * >>> heapQueueLargest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)\n * [85, 75, 65]\n * >>> heapQueueLargest([25, 35, 22, 85, 14, 65, 75, 22, 58], 2)\n * [85, 75]\n * >>> heapQueueLargest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)\n * [85, 75, 65, 58, 35]\n */\nfunc heapQueueLargest(nums : [Int], n : Int) -> [Int] {\n", "entry_point": "heapQueueLargest", "test": "\n\nvar arg00 : [Int] = [25, 35, 22, 85, 14, 65, 75, 22, 58]\nvar arg01 : Int = 3\nvar x0 : [Int] = heapQueueLargest(nums : arg00, n : arg01)\nvar v0 : [Int] = [85, 75, 65]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [25, 35, 22, 85, 14, 65, 75, 22, 58]\nvar arg11 : Int = 2\nvar x1 : [Int] = heapQueueLargest(nums : arg10, n : arg11)\nvar v1 : [Int] = [85, 75]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [25, 35, 22, 85, 14, 65, 75, 22, 58]\nvar arg21 : Int = 5\nvar x2 : [Int] = heapQueueLargest(nums : arg20, n : arg21)\nvar v2 : [Int] = [85, 75, 65, 58, 35]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/5", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n *\n * >>> countWays(2)\n * 3\n * >>> countWays(8)\n * 153\n * >>> countWays(12)\n * 2131\n */\nfunc countWays(n : Int) -> Int {\n", "entry_point": "countWays", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = countWays(n : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 8\nvar x1 : Int = countWays(n : arg10)\nvar v1 : Int = 153\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 12\nvar x2 : Int = countWays(n : arg20)\nvar v2 : Int = 2131\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/6", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the two numbers differ at one bit position only or not.\n *\n * >>> differAtOneBitPos(13, 9)\n * true\n * >>> differAtOneBitPos(15, 8)\n * false\n * >>> differAtOneBitPos(2, 4)\n * false\n */\nfunc differAtOneBitPos(a : Int, b : Int) -> Bool {\n", "entry_point": "differAtOneBitPos", "test": "\n\nvar arg00 : Int = 13\nvar arg01 : Int = 9\nvar x0 : Bool = differAtOneBitPos(a : arg00, b : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 15\nvar arg11 : Int = 8\nvar x1 : Bool = differAtOneBitPos(a : arg10, b : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar arg21 : Int = 4\nvar x2 : Bool = differAtOneBitPos(a : arg20, b : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the two numbers differ at one bit position only or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/7", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all words which are at least 4 characters long in a string by using regex.\n *\n * >>> findCharLong(\"Please move back to stream\")\n * [\"Please\", \"move\", \"back\", \"stream\"]\n * >>> findCharLong(\"Jing Eco and Tech\")\n * [\"Jing\", \"Tech\"]\n * >>> findCharLong(\"Jhingai wulu road Zone 3\")\n * [\"Jhingai\", \"wulu\", \"road\", \"Zone\"]\n */\nfunc findCharLong(text : String) -> [String] {\n", "entry_point": "findCharLong", "test": "\n\nvar arg00 : String = #\"Please move back to stream\"#\nvar x0 : [String] = findCharLong(text : arg00)\nvar v0 : [String] = [#\"Please\"#, #\"move\"#, #\"back\"#, #\"stream\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Jing Eco and Tech\"#\nvar x1 : [String] = findCharLong(text : arg10)\nvar v1 : [String] = [#\"Jing\"#, #\"Tech\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Jhingai wulu road Zone 3\"#\nvar x2 : [String] = findCharLong(text : arg20)\nvar v2 : [String] = [#\"Jhingai\"#, #\"wulu\"#, #\"road\"#, #\"Zone\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find all words which are at least 4 characters long in a string by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/8", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find squares of individual elements in a list using lambda function.\n *\n * >>> squareNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n * >>> squareNums([10, 20, 30])\n * [100, 400, 900]\n * >>> squareNums([12, 15])\n * [144, 225]\n */\nfunc squareNums(nums : [Int]) -> [Int] {\n", "entry_point": "squareNums", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar x0 : [Int] = squareNums(nums : arg00)\nvar v0 : [Int] = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [10, 20, 30]\nvar x1 : [Int] = squareNums(nums : arg10)\nvar v1 : [Int] = [100, 400, 900]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [12, 15]\nvar x2 : [Int] = squareNums(nums : arg20)\nvar v2 : [Int] = [144, 225]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find squares of individual elements in a list using lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/9", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum number of rotations required to get the same string.\n *\n * >>> findRotations(\"aaaa\")\n * 1\n * >>> findRotations(\"ab\")\n * 2\n * >>> findRotations(\"abc\")\n * 3\n */\nfunc findRotations(str : String) -> Int {\n", "entry_point": "findRotations", "test": "\n\nvar arg00 : String = #\"aaaa\"#\nvar x0 : Int = findRotations(str : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"ab\"#\nvar x1 : Int = findRotations(str : arg10)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"abc\"#\nvar x2 : Int = findRotations(str : arg20)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the minimum number of rotations required to get the same string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/10", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get the n smallest items from a dataset.\n *\n * >>> smallNnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n * [10, 20]\n * >>> smallNnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)\n * [10, 20, 20, 40, 50]\n * >>> smallNnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)\n * [10, 20, 20]\n */\nfunc smallNnum(list1 : [Int], n : Int) -> [Int] {\n", "entry_point": "smallNnum", "test": "\n\nvar arg00 : [Int] = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100]\nvar arg01 : Int = 2\nvar x0 : [Int] = smallNnum(list1 : arg00, n : arg01)\nvar v0 : [Int] = [10, 20]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100]\nvar arg11 : Int = 5\nvar x1 : [Int] = smallNnum(list1 : arg10, n : arg11)\nvar v1 : [Int] = [10, 20, 20, 40, 50]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100]\nvar arg21 : Int = 3\nvar x2 : [Int] = smallNnum(list1 : arg20, n : arg21)\nvar v2 : [Int] = [10, 20, 20]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to get the n smallest items from a dataset.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/11", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove first and last occurrence of a given character from the string.\n *\n * >>> removeOcc(\"hello\", \"l\")\n * \"heo\"\n * >>> removeOcc(\"abcda\", \"a\")\n * \"bcd\"\n * >>> removeOcc(\"PHP\", \"P\")\n * \"H\"\n */\nfunc removeOcc(s : String, ch : String) -> String {\n", "entry_point": "removeOcc", "test": "\n\nvar arg00 : String = #\"hello\"#\nvar arg01 : String = #\"l\"#\nvar x0 : String = removeOcc(s : arg00, ch : arg01)\nvar v0 : String = #\"heo\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"abcda\"#\nvar arg11 : String = #\"a\"#\nvar x1 : String = removeOcc(s : arg10, ch : arg11)\nvar v1 : String = #\"bcd\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"PHP\"#\nvar arg21 : String = #\"P\"#\nvar x2 : String = removeOcc(s : arg20, ch : arg21)\nvar v2 : String = #\"H\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to remove first and last occurrence of a given character from the string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/12", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a given matrix in ascending order according to the sum of its rows.\n *\n * >>> sortMatrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n * [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n * >>> sortMatrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])\n * [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n * >>> sortMatrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]])\n * [[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n */\nfunc sortMatrix(m : [[Int]]) -> [[Int]] {\n", "entry_point": "sortMatrix", "test": "\n\nvar arg00 : [[Int]] = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\nvar x0 : [[Int]] = sortMatrix(m : arg00)\nvar v0 : [[Int]] = [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]\nvar x1 : [[Int]] = sortMatrix(m : arg10)\nvar v1 : [[Int]] = [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[5, 8, 9], [6, 4, 3], [2, 1, 4]]\nvar x2 : [[Int]] = sortMatrix(m : arg20)\nvar v2 : [[Int]] = [[2, 1, 4], [6, 4, 3], [5, 8, 9]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/13", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the most common words in a dictionary.\n *\n * >>> countCommon([\"red\", \"green\", \"black\", \"pink\", \"black\", \"white\", \"black\", \"eyes\", \"white\", \"black\", \"orange\", \"pink\", \"pink\", \"red\", \"red\", \"white\", \"orange\", \"white\", \"black\", \"pink\", \"green\", \"green\", \"pink\", \"green\", \"pink\", \"white\", \"orange\", \"orange\", \"red\"])\n * [[\"pink\", 6], [\"black\", 5], [\"white\", 5], [\"red\", 4]]\n * >>> countCommon([\"one\", \"two\", \"three\", \"four\", \"five\", \"one\", \"two\", \"one\", \"three\", \"one\"])\n * [[\"one\", 4], [\"two\", 2], [\"three\", 2], [\"four\", 1]]\n * >>> countCommon([\"Facebook\", \"Apple\", \"Amazon\", \"Netflix\", \"Google\", \"Apple\", \"Netflix\", \"Amazon\"])\n * [[\"Apple\", 2], [\"Amazon\", 2], [\"Netflix\", 2], [\"Facebook\", 1]]\n */\nfunc countCommon(words : [String]) -> [[AnyHashable]] {\n", "entry_point": "countCommon", "test": "\n\nvar arg00 : [String] = [#\"red\"#, #\"green\"#, #\"black\"#, #\"pink\"#, #\"black\"#, #\"white\"#, #\"black\"#, #\"eyes\"#, #\"white\"#, #\"black\"#, #\"orange\"#, #\"pink\"#, #\"pink\"#, #\"red\"#, #\"red\"#, #\"white\"#, #\"orange\"#, #\"white\"#, #\"black\"#, #\"pink\"#, #\"green\"#, #\"green\"#, #\"pink\"#, #\"green\"#, #\"pink\"#, #\"white\"#, #\"orange\"#, #\"orange\"#, #\"red\"#]\nvar x0 : [[AnyHashable]] = countCommon(words : arg00)\nvar v0 : [[AnyHashable]] = [[#\"pink\"#, 6], [#\"black\"#, 5], [#\"white\"#, 5], [#\"red\"#, 4]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"one\"#, #\"two\"#, #\"three\"#, #\"four\"#, #\"five\"#, #\"one\"#, #\"two\"#, #\"one\"#, #\"three\"#, #\"one\"#]\nvar x1 : [[AnyHashable]] = countCommon(words : arg10)\nvar v1 : [[AnyHashable]] = [[#\"one\"#, 4], [#\"two\"#, 2], [#\"three\"#, 2], [#\"four\"#, 1]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"Facebook\"#, #\"Apple\"#, #\"Amazon\"#, #\"Netflix\"#, #\"Google\"#, #\"Apple\"#, #\"Netflix\"#, #\"Amazon\"#]\nvar x2 : [[AnyHashable]] = countCommon(words : arg20)\nvar v2 : [[AnyHashable]] = [[#\"Apple\"#, 2], [#\"Amazon\"#, 2], [#\"Netflix\"#, 2], [#\"Facebook\"#, 1]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count the most common words in a dictionary.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/14", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the volume of a triangular prism.\n *\n * >>> findVolume(10, 8, 6)\n * 240\n * >>> findVolume(3, 2, 2)\n * 6\n * >>> findVolume(1, 2, 1)\n * 1\n */\nfunc findVolume(l : Int, b : Int, h : Int) -> Int {\n", "entry_point": "findVolume", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 8\nvar arg02 : Int = 6\nvar x0 : Int = findVolume(l : arg00, b : arg01, h : arg02)\nvar v0 : Int = 240\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar arg11 : Int = 2\nvar arg12 : Int = 2\nvar x1 : Int = findVolume(l : arg10, b : arg11, h : arg12)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = 2\nvar arg22 : Int = 1\nvar x2 : Int = findVolume(l : arg20, b : arg21, h : arg22)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the volume of a triangular prism.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/15", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to split a string at lowercase letters.\n *\n * >>> splitLowerstring(\"AbCd\")\n * [\"bC\", \"d\"]\n * >>> splitLowerstring(\"Python\")\n * [\"y\", \"t\", \"h\", \"o\", \"n\"]\n * >>> splitLowerstring(\"Programming\")\n * [\"r\", \"o\", \"g\", \"r\", \"a\", \"m\", \"m\", \"i\", \"n\", \"g\"]\n */\nfunc splitLowerstring(text : String) -> [String] {\n", "entry_point": "splitLowerstring", "test": "\n\nvar arg00 : String = #\"AbCd\"#\nvar x0 : [String] = splitLowerstring(text : arg00)\nvar v0 : [String] = [#\"bC\"#, #\"d\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Python\"#\nvar x1 : [String] = splitLowerstring(text : arg10)\nvar v1 : [String] = [#\"y\"#, #\"t\"#, #\"h\"#, #\"o\"#, #\"n\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Programming\"#\nvar x2 : [String] = splitLowerstring(text : arg20)\nvar v2 : [String] = [#\"r\"#, #\"o\"#, #\"g\"#, #\"r\"#, #\"a\"#, #\"m\"#, #\"m\"#, #\"i\"#, #\"n\"#, #\"g\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to split a string at lowercase letters.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/16", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find sequences of lowercase letters joined with an underscore.\n *\n * >>> textLowercaseUnderscore(\"aab_cbbbc\")\n * \"Found a match!\"\n * >>> textLowercaseUnderscore(\"aab_Abbbc\")\n * \"Not matched!\"\n * >>> textLowercaseUnderscore(\"Aaab_abbbc\")\n * \"Not matched!\"\n */\nfunc textLowercaseUnderscore(text : String) -> String {\n", "entry_point": "textLowercaseUnderscore", "test": "\n\nvar arg00 : String = #\"aab_cbbbc\"#\nvar x0 : String = textLowercaseUnderscore(text : arg00)\nvar v0 : String = #\"Found a match!\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"aab_Abbbc\"#\nvar x1 : String = textLowercaseUnderscore(text : arg10)\nvar v1 : String = #\"Not matched!\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Aaab_abbbc\"#\nvar x2 : String = textLowercaseUnderscore(text : arg20)\nvar v2 : String = #\"Not matched!\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find sequences of lowercase letters joined with an underscore.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/17", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a square.\n *\n * >>> squarePerimeter(10)\n * 40\n * >>> squarePerimeter(5)\n * 20\n * >>> squarePerimeter(4)\n * 16\n */\nfunc squarePerimeter(a : Int) -> Int {\n", "entry_point": "squarePerimeter", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = squarePerimeter(a : arg00)\nvar v0 : Int = 40\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar x1 : Int = squarePerimeter(a : arg10)\nvar v1 : Int = 20\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar x2 : Int = squarePerimeter(a : arg20)\nvar v2 : Int = 16\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the perimeter of a square.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/18", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove characters from the first string which are present in the second string.\n *\n * >>> removeDirtyChars(\"probasscurve\", \"pros\")\n * \"bacuve\"\n * >>> removeDirtyChars(\"digitalindia\", \"talent\")\n * \"digiidi\"\n * >>> removeDirtyChars(\"exoticmiles\", \"toxic\")\n * \"emles\"\n */\nfunc removeDirtyChars(string : String, secondString : String) -> String {\n", "entry_point": "removeDirtyChars", "test": "\n\nvar arg00 : String = #\"probasscurve\"#\nvar arg01 : String = #\"pros\"#\nvar x0 : String = removeDirtyChars(string : arg00, secondString : arg01)\nvar v0 : String = #\"bacuve\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"digitalindia\"#\nvar arg11 : String = #\"talent\"#\nvar x1 : String = removeDirtyChars(string : arg10, secondString : arg11)\nvar v1 : String = #\"digiidi\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"exoticmiles\"#\nvar arg21 : String = #\"toxic\"#\nvar x2 : String = removeDirtyChars(string : arg20, secondString : arg21)\nvar v2 : String = #\"emles\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove characters from the first string which are present in the second string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/19", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find whether a given array of integers contains any duplicate element.\n *\n * >>> testDuplicate([1, 2, 3, 4, 5])\n * false\n * >>> testDuplicate([1, 2, 3, 4, 4])\n * true\n * >>> testDuplicate([1, 1, 2, 2, 3, 3, 4, 4, 5])\n * true\n */\nfunc testDuplicate(arraynums : [Int]) -> Bool {\n", "entry_point": "testDuplicate", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5]\nvar x0 : Bool = testDuplicate(arraynums : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 4]\nvar x1 : Bool = testDuplicate(arraynums : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 1, 2, 2, 3, 3, 4, 4, 5]\nvar x2 : Bool = testDuplicate(arraynums : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find whether a given array of integers contains any duplicate element.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/20", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given number is woodball or not.\n *\n * >>> isWoodall(383)\n * true\n * >>> isWoodall(254)\n * false\n * >>> isWoodall(200)\n * false\n */\nfunc isWoodall(x : Int) -> Bool {\n", "entry_point": "isWoodall", "test": "\n\nvar arg00 : Int = 383\nvar x0 : Bool = isWoodall(x : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 254\nvar x1 : Bool = isWoodall(x : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 200\nvar x2 : Bool = isWoodall(x : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if the given number is woodball or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/21", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find m number of multiples of n.\n *\n * >>> multiplesOfNum(4, 3)\n * [3, 6, 9, 12]\n * >>> multiplesOfNum(2, 5)\n * [5, 10]\n * >>> multiplesOfNum(9, 2)\n * [2, 4, 6, 8, 10, 12, 14, 16, 18]\n */\nfunc multiplesOfNum(m : Int, n : Int) -> [Int] {\n", "entry_point": "multiplesOfNum", "test": "\n\nvar arg00 : Int = 4\nvar arg01 : Int = 3\nvar x0 : [Int] = multiplesOfNum(m : arg00, n : arg01)\nvar v0 : [Int] = [3, 6, 9, 12]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar arg11 : Int = 5\nvar x1 : [Int] = multiplesOfNum(m : arg10, n : arg11)\nvar v1 : [Int] = [5, 10]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 9\nvar arg21 : Int = 2\nvar x2 : [Int] = multiplesOfNum(m : arg20, n : arg21)\nvar v2 : [Int] = [2, 4, 6, 8, 10, 12, 14, 16, 18]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find m number of multiples of n.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/22", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the first duplicate element in a given array of integers.\n *\n * >>> findFirstDuplicate([1, 2, 3, 4, 4, 5])\n * 4\n * >>> findFirstDuplicate([1, 2, 3, 4])\n * -1\n * >>> findFirstDuplicate([1, 1, 2, 3, 3, 2, 2])\n * 1\n */\nfunc findFirstDuplicate(nums : [Int]) -> Int {\n", "entry_point": "findFirstDuplicate", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 4, 5]\nvar x0 : Int = findFirstDuplicate(nums : arg00)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4]\nvar x1 : Int = findFirstDuplicate(nums : arg10)\nvar v1 : Int = -1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 1, 2, 3, 3, 2, 2]\nvar x2 : Int = findFirstDuplicate(nums : arg20)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the first duplicate element in a given array of integers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/23", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum sum of elements of list in a list of lists.\n *\n * >>> maximumSum([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n * 33\n * >>> maximumSum([[0, 1, 1], [1, 1, 2], [3, 2, 1]])\n * 6\n * >>> maximumSum([[0, 1, 3], [1, 2, 1], [9, 8, 2], [0, 1, 0], [6, 4, 8]])\n * 19\n */\nfunc maximumSum(list1 : [[Int]]) -> Int {\n", "entry_point": "maximumSum", "test": "\n\nvar arg00 : [[Int]] = [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]\nvar x0 : Int = maximumSum(list1 : arg00)\nvar v0 : Int = 33\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[0, 1, 1], [1, 1, 2], [3, 2, 1]]\nvar x1 : Int = maximumSum(list1 : arg10)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[0, 1, 3], [1, 2, 1], [9, 8, 2], [0, 1, 0], [6, 4, 8]]\nvar x2 : Int = maximumSum(list1 : arg20)\nvar v2 : Int = 19\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the maximum sum of elements of list in a list of lists.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/24", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given binary number to its decimal equivalent.\n *\n * >>> binaryToDecimal(100)\n * 4\n * >>> binaryToDecimal(1011)\n * 11\n * >>> binaryToDecimal(1101101)\n * 109\n */\nfunc binaryToDecimal(binary : Int) -> Int {\n", "entry_point": "binaryToDecimal", "test": "\n\nvar arg00 : Int = 100\nvar x0 : Int = binaryToDecimal(binary : arg00)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1011\nvar x1 : Int = binaryToDecimal(binary : arg10)\nvar v1 : Int = 11\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1101101\nvar x2 : Int = binaryToDecimal(binary : arg20)\nvar v2 : Int = 109\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert the given binary number to its decimal equivalent.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/25", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the product of non-repeated elements in a given array.\n *\n * >>> findProduct([1, 1, 2, 3], 4)\n * 6\n * >>> findProduct([1, 2, 3, 1, 1], 5)\n * 6\n * >>> findProduct([1, 1, 4, 5, 6], 5)\n * 120\n */\nfunc findProduct(arr : [Int], n : Int) -> Int {\n", "entry_point": "findProduct", "test": "\n\nvar arg00 : [Int] = [1, 1, 2, 3]\nvar arg01 : Int = 4\nvar x0 : Int = findProduct(arr : arg00, n : arg01)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 1, 1]\nvar arg11 : Int = 5\nvar x1 : Int = findProduct(arr : arg10, n : arg11)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 1, 4, 5, 6]\nvar arg21 : Int = 5\nvar x2 : Int = findProduct(arr : arg20, n : arg21)\nvar v2 : Int = 120\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the product of non-repeated elements in a given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/26", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given tuple list has all k elements.\n *\n * >>> checkKElements([[4, 4], [4, 4, 4], [4, 4], [4, 4, 4, 4], [4]], 4)\n * true\n * >>> checkKElements([[7, 7, 7], [7, 7]], 7)\n * true\n * >>> checkKElements([[9, 9], [9, 9, 9, 9]], 7)\n * false\n */\nfunc checkKElements(testList : [[Int]], k : Int) -> Bool {\n", "entry_point": "checkKElements", "test": "\n\nvar arg00 : [[Int]] = [[4, 4], [4, 4, 4], [4, 4], [4, 4, 4, 4], [4]]\nvar arg01 : Int = 4\nvar x0 : Bool = checkKElements(testList : arg00, k : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[7, 7, 7], [7, 7]]\nvar arg11 : Int = 7\nvar x1 : Bool = checkKElements(testList : arg10, k : arg11)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[9, 9], [9, 9, 9, 9]]\nvar arg21 : Int = 7\nvar x2 : Bool = checkKElements(testList : arg20, k : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if the given tuple list has all k elements.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/27", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove all digits from a list of strings.\n *\n * >>> remove([\"4words\", \"3letters\", \"4digits\"])\n * [\"words\", \"letters\", \"digits\"]\n * >>> remove([\"28Jan\", \"12Jan\", \"11Jan\"])\n * [\"Jan\", \"Jan\", \"Jan\"]\n * >>> remove([\"wonder1\", \"wonder2\", \"wonder3\"])\n * [\"wonder\", \"wonder\", \"wonder\"]\n */\nfunc remove(list : [String]) -> [String] {\n", "entry_point": "remove", "test": "\n\nvar arg00 : [String] = [#\"4words\"#, #\"3letters\"#, #\"4digits\"#]\nvar x0 : [String] = remove(list : arg00)\nvar v0 : [String] = [#\"words\"#, #\"letters\"#, #\"digits\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"28Jan\"#, #\"12Jan\"#, #\"11Jan\"#]\nvar x1 : [String] = remove(list : arg10)\nvar v1 : [String] = [#\"Jan\"#, #\"Jan\"#, #\"Jan\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"wonder1\"#, #\"wonder2\"#, #\"wonder3\"#]\nvar x2 : [String] = remove(list : arg20)\nvar v2 : [String] = [#\"wonder\"#, #\"wonder\"#, #\"wonder\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to remove all digits from a list of strings.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/28", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find binomial co-efficient.\n *\n * >>> binomialCoeff(5, 2)\n * 10\n * >>> binomialCoeff(4, 3)\n * 4\n * >>> binomialCoeff(3, 2)\n * 3\n */\nfunc binomialCoeff(n : Int, k : Int) -> Int {\n", "entry_point": "binomialCoeff", "test": "\n\nvar arg00 : Int = 5\nvar arg01 : Int = 2\nvar x0 : Int = binomialCoeff(n : arg00, k : arg01)\nvar v0 : Int = 10\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar arg11 : Int = 3\nvar x1 : Int = binomialCoeff(n : arg10, k : arg11)\nvar v1 : Int = 4\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 3\nvar arg21 : Int = 2\nvar x2 : Int = binomialCoeff(n : arg20, k : arg21)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find binomial co-efficient.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/29", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the element occurring odd number of times.\n *\n * >>> getOddOccurrence([1, 2, 3, 1, 2, 3, 1], 7)\n * 1\n * >>> getOddOccurrence([1, 2, 3, 2, 3, 1, 3], 7)\n * 3\n * >>> getOddOccurrence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)\n * 5\n */\nfunc getOddOccurrence(arr : [Int], arrSize : Int) -> Int {\n", "entry_point": "getOddOccurrence", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 1, 2, 3, 1]\nvar arg01 : Int = 7\nvar x0 : Int = getOddOccurrence(arr : arg00, arrSize : arg01)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 2, 3, 1, 3]\nvar arg11 : Int = 7\nvar x1 : Int = getOddOccurrence(arr : arg10, arrSize : arg11)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2]\nvar arg21 : Int = 13\nvar x2 : Int = getOddOccurrence(arr : arg20, arrSize : arg21)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the element occurring odd number of times.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/30", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count all the substrings starting and ending with same characters.\n *\n * >>> countSubstringWithEqualEnds(\"abc\")\n * 3\n * >>> countSubstringWithEqualEnds(\"abcda\")\n * 6\n * >>> countSubstringWithEqualEnds(\"ab\")\n * 2\n */\nfunc countSubstringWithEqualEnds(s : String) -> Int {\n", "entry_point": "countSubstringWithEqualEnds", "test": "\n\nvar arg00 : String = #\"abc\"#\nvar x0 : Int = countSubstringWithEqualEnds(s : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"abcda\"#\nvar x1 : Int = countSubstringWithEqualEnds(s : arg10)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"ab\"#\nvar x2 : Int = countSubstringWithEqualEnds(s : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count all the substrings starting and ending with same characters.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/31", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n *\n * >>> funct([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 3)\n * [5, 7, 1]\n * >>> funct([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 1)\n * [1]\n * >>> funct([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 5)\n * [6, 5, 7, 8, 1]\n */\nfunc funct(nums : [[Int]], k : Int) -> [Int] {\n", "entry_point": "funct", "test": "\n\nvar arg00 : [[Int]] = [[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]]\nvar arg01 : Int = 3\nvar x0 : [Int] = funct(nums : arg00, k : arg01)\nvar v0 : [Int] = [5, 7, 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]]\nvar arg11 : Int = 1\nvar x1 : [Int] = funct(nums : arg10, k : arg11)\nvar v1 : [Int] = [1]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]]\nvar arg21 : Int = 5\nvar x2 : [Int] = funct(nums : arg20, k : arg21)\nvar v2 : [Int] = [6, 5, 7, 8, 1]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/32", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the largest prime factor of a given number.\n *\n * >>> maxPrimeFactors(15)\n * 5\n * >>> maxPrimeFactors(6)\n * 3\n * >>> maxPrimeFactors(2)\n * 2\n */\nfunc maxPrimeFactors(n : Int) -> Int {\n", "entry_point": "maxPrimeFactors", "test": "\n\nvar arg00 : Int = 15\nvar x0 : Int = maxPrimeFactors(n : arg00)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 6\nvar x1 : Int = maxPrimeFactors(n : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar x2 : Int = maxPrimeFactors(n : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the largest prime factor of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/33", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert a decimal number to binary number.\n *\n * >>> decimalToBinary(10)\n * 1010\n * >>> decimalToBinary(1)\n * 1\n * >>> decimalToBinary(20)\n * 10100\n */\nfunc decimalToBinary(n : Int) -> Int {\n", "entry_point": "decimalToBinary", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = decimalToBinary(n : arg00)\nvar v0 : Int = 1010\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar x1 : Int = decimalToBinary(n : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 20\nvar x2 : Int = decimalToBinary(n : arg20)\nvar v2 : Int = 10100\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to convert a decimal number to binary number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/34", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the missing number in a sorted array.\n *\n * >>> findMissing([1, 2, 3, 5], 4)\n * 4\n * >>> findMissing([1, 3, 4, 5], 4)\n * 2\n * >>> findMissing([1, 2, 3, 5, 6, 7], 5)\n * 4\n */\nfunc findMissing(ar : [Int], n : Int) -> Int {\n", "entry_point": "findMissing", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 5]\nvar arg01 : Int = 4\nvar x0 : Int = findMissing(ar : arg00, n : arg01)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 3, 4, 5]\nvar arg11 : Int = 4\nvar x1 : Int = findMissing(ar : arg10, n : arg11)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 5, 6, 7]\nvar arg21 : Int = 5\nvar x2 : Int = findMissing(ar : arg20, n : arg21)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the missing number in a sorted array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/35", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n-th rectangular number.\n *\n * >>> findRectNum(4)\n * 20\n * >>> findRectNum(5)\n * 30\n * >>> findRectNum(6)\n * 42\n */\nfunc findRectNum(n : Int) -> Int {\n", "entry_point": "findRectNum", "test": "\n\nvar arg00 : Int = 4\nvar x0 : Int = findRectNum(n : arg00)\nvar v0 : Int = 20\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar x1 : Int = findRectNum(n : arg10)\nvar v1 : Int = 30\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 6\nvar x2 : Int = findRectNum(n : arg20)\nvar v2 : Int = 42\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the n-th rectangular number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/36", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the nth digit in the proper fraction of two given numbers.\n *\n * >>> findNthDigit(1, 2, 1)\n * 5\n * >>> findNthDigit(3, 5, 1)\n * 6\n * >>> findNthDigit(5, 6, 5)\n * 3\n */\nfunc findNthDigit(p : Int, q : Int, n : Int) -> Int {\n", "entry_point": "findNthDigit", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = 2\nvar arg02 : Int = 1\nvar x0 : Int = findNthDigit(p : arg00, q : arg01, n : arg02)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar arg11 : Int = 5\nvar arg12 : Int = 1\nvar x1 : Int = findNthDigit(p : arg10, q : arg11, n : arg12)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar arg21 : Int = 6\nvar arg22 : Int = 5\nvar x2 : Int = findNthDigit(p : arg20, q : arg21, n : arg22)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the nth digit in the proper fraction of two given numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/37", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a given mixed list of integers and strings.\n *\n * >>> sortMixedList([19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1])\n * [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"]\n * >>> sortMixedList([19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1])\n * [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"]\n * >>> sortMixedList([19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1])\n * [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"]\n */\nfunc sortMixedList(mixedList : [AnyHashable]) -> [AnyHashable] {\n", "entry_point": "sortMixedList", "test": "\n\nvar arg00 : [AnyHashable] = [19, #\"red\"#, 12, #\"green\"#, #\"blue\"#, 10, #\"white\"#, #\"green\"#, 1]\nvar x0 : [AnyHashable] = sortMixedList(mixedList : arg00)\nvar v0 : [AnyHashable] = [1, 10, 12, 19, #\"blue\"#, #\"green\"#, #\"green\"#, #\"red\"#, #\"white\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [19, #\"red\"#, 12, #\"green\"#, #\"blue\"#, 10, #\"white\"#, #\"green\"#, 1]\nvar x1 : [AnyHashable] = sortMixedList(mixedList : arg10)\nvar v1 : [AnyHashable] = [1, 10, 12, 19, #\"blue\"#, #\"green\"#, #\"green\"#, #\"red\"#, #\"white\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [19, #\"red\"#, 12, #\"green\"#, #\"blue\"#, 10, #\"white\"#, #\"green\"#, 1]\nvar x2 : [AnyHashable] = sortMixedList(mixedList : arg20)\nvar v2 : [AnyHashable] = [1, 10, 12, 19, #\"blue\"#, #\"green\"#, #\"green\"#, #\"red\"#, #\"white\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort a given mixed list of integers and strings.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/38", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the division of first even and odd number of a given list.\n *\n * >>> divEvenOdd([1, 3, 5, 7, 4, 1, 6, 8])\n * 4\n * >>> divEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * 2\n * >>> divEvenOdd([1, 5, 7, 9, 10])\n * 10\n */\nfunc divEvenOdd(list1 : [Int]) -> Int {\n", "entry_point": "divEvenOdd", "test": "\n\nvar arg00 : [Int] = [1, 3, 5, 7, 4, 1, 6, 8]\nvar x0 : Int = divEvenOdd(list1 : arg00)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar x1 : Int = divEvenOdd(list1 : arg10)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 5, 7, 9, 10]\nvar x2 : Int = divEvenOdd(list1 : arg20)\nvar v2 : Int = 10\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the division of first even and odd number of a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/39", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n *\n * >>> rearangeString(\"aab\")\n * \"aba\"\n * >>> rearangeString(\"aabb\")\n * \"abab\"\n * >>> rearangeString(\"abccdd\")\n * \"cdabcd\"\n */\nfunc rearangeString(s : String) -> String {\n", "entry_point": "rearangeString", "test": "\n\nvar arg00 : String = #\"aab\"#\nvar x0 : String = rearangeString(s : arg00)\nvar v0 : String = #\"aba\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"aabb\"#\nvar x1 : String = rearangeString(s : arg10)\nvar v1 : String = #\"abab\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"abccdd\"#\nvar x2 : String = rearangeString(s : arg20)\nvar v2 : String = #\"cdabcd\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/40", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find frequency of the elements in a given list of lists using collections module.\n *\n * >>> freqElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])\n * [2 : 3, 1 : 2, 5 : 2, 3 : 1, 4 : 1, 6 : 1, 7 : 1, 9 : 1]\n * >>> freqElement([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n * [1 : 1, 2 : 1, 3 : 1, 4 : 1, 5 : 1, 6 : 1, 7 : 1, 8 : 1, 9 : 1, 10 : 1, 11 : 1, 12 : 1]\n * >>> freqElement([[15, 20, 30, 40], [80, 90, 100, 110], [30, 30, 80, 90]])\n * [30 : 3, 80 : 2, 90 : 2, 15 : 1, 20 : 1, 40 : 1, 100 : 1, 110 : 1]\n */\nfunc freqElement(nums : [[Int]]) -> [Int: Int] {\n", "entry_point": "freqElement", "test": "\n\nvar arg00 : [[Int]] = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]\nvar x0 : [Int: Int] = freqElement(nums : arg00)\nvar v0 : [Int: Int] = [2 : 3, 1 : 2, 5 : 2, 3 : 1, 4 : 1, 6 : 1, 7 : 1, 9 : 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\nvar x1 : [Int: Int] = freqElement(nums : arg10)\nvar v1 : [Int: Int] = [1 : 1, 2 : 1, 3 : 1, 4 : 1, 5 : 1, 6 : 1, 7 : 1, 8 : 1, 9 : 1, 10 : 1, 11 : 1, 12 : 1]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[15, 20, 30, 40], [80, 90, 100, 110], [30, 30, 80, 90]]\nvar x2 : [Int: Int] = freqElement(nums : arg20)\nvar v2 : [Int: Int] = [30 : 3, 80 : 2, 90 : 2, 15 : 1, 20 : 1, 40 : 1, 100 : 1, 110 : 1]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find frequency of the elements in a given list of lists using collections module.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/41", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to filter even numbers using lambda function.\n *\n * >>> filterEvennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [2, 4, 6, 8, 10]\n * >>> filterEvennumbers([10, 20, 45, 67, 84, 93])\n * [10, 20, 84]\n * >>> filterEvennumbers([5, 7, 9, 8, 6, 4, 3])\n * [8, 6, 4]\n */\nfunc filterEvennumbers(nums : [Int]) -> [Int] {\n", "entry_point": "filterEvennumbers", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar x0 : [Int] = filterEvennumbers(nums : arg00)\nvar v0 : [Int] = [2, 4, 6, 8, 10]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [10, 20, 45, 67, 84, 93]\nvar x1 : [Int] = filterEvennumbers(nums : arg10)\nvar v1 : [Int] = [10, 20, 84]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [5, 7, 9, 8, 6, 4, 3]\nvar x2 : [Int] = filterEvennumbers(nums : arg20)\nvar v2 : [Int] = [8, 6, 4]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to filter even numbers using lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/42", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of repeated elements in a given array.\n *\n * >>> findSum([1, 2, 3, 1, 1, 4, 5, 6], 8)\n * 3\n * >>> findSum([1, 2, 3, 1, 1], 5)\n * 3\n * >>> findSum([1, 1, 2], 3)\n * 2\n */\nfunc findSum(arr : [Int], n : Int) -> Int {\n", "entry_point": "findSum", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 1, 1, 4, 5, 6]\nvar arg01 : Int = 8\nvar x0 : Int = findSum(arr : arg00, n : arg01)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 1, 1]\nvar arg11 : Int = 5\nvar x1 : Int = findSum(arr : arg10, n : arg11)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 1, 2]\nvar arg21 : Int = 3\nvar x2 : Int = findSum(arr : arg20, n : arg21)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of repeated elements in a given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/43", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find sequences of lowercase letters joined with an underscore using regex.\n *\n * >>> textMatch(\"aab_cbbbc\")\n * \"Found a match!\"\n * >>> textMatch(\"aab_Abbbc\")\n * \"Not matched!\"\n * >>> textMatch(\"Aaab_abbbc\")\n * \"Not matched!\"\n */\nfunc textMatch(text : String) -> String {\n", "entry_point": "textMatch", "test": "\n\nvar arg00 : String = #\"aab_cbbbc\"#\nvar x0 : String = textMatch(text : arg00)\nvar v0 : String = #\"Found a match!\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"aab_Abbbc\"#\nvar x1 : String = textMatch(text : arg10)\nvar v1 : String = #\"Not matched!\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Aaab_abbbc\"#\nvar x2 : String = textMatch(text : arg20)\nvar v2 : String = #\"Not matched!\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find sequences of lowercase letters joined with an underscore using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/44", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a word at the beginning of a string.\n *\n * >>> textMatchString(\" python\")\n * \"Not matched!\"\n * >>> textMatchString(\"python\")\n * \"Found a match!\"\n * >>> textMatchString(\"  lang\")\n * \"Not matched!\"\n */\nfunc textMatchString(text : String) -> String {\n", "entry_point": "textMatchString", "test": "\n\nvar arg00 : String = #\" python\"#\nvar x0 : String = textMatchString(text : arg00)\nvar v0 : String = #\"Not matched!\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"python\"#\nvar x1 : String = textMatchString(text : arg10)\nvar v1 : String = #\"Found a match!\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"  lang\"#\nvar x2 : String = textMatchString(text : arg20)\nvar v2 : String = #\"Not matched!\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function that matches a word at the beginning of a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/45", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the gcd of the given array elements.\n *\n * >>> getGcd([2, 4, 6, 8, 16])\n * 2\n * >>> getGcd([1, 2, 3])\n * 1\n * >>> getGcd([2, 4, 6, 8])\n * 2\n */\nfunc getGcd(l : [Int]) -> Int {\n", "entry_point": "getGcd", "test": "\n\nvar arg00 : [Int] = [2, 4, 6, 8, 16]\nvar x0 : Int = getGcd(l : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3]\nvar x1 : Int = getGcd(l : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 4, 6, 8]\nvar x2 : Int = getGcd(l : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the gcd of the given array elements.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/46", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to determine whether all the numbers are different from each other are not.\n *\n * >>> testDistinct([1, 5, 7, 9])\n * true\n * >>> testDistinct([2, 4, 5, 5, 7, 9])\n * false\n * >>> testDistinct([1, 2, 3])\n * true\n */\nfunc testDistinct(data : [Int]) -> Bool {\n", "entry_point": "testDistinct", "test": "\n\nvar arg00 : [Int] = [1, 5, 7, 9]\nvar x0 : Bool = testDistinct(data : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 4, 5, 5, 7, 9]\nvar x1 : Bool = testDistinct(data : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3]\nvar x2 : Bool = testDistinct(data : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to determine whether all the numbers are different from each other are not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/47", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the last digit when factorial of a divides factorial of b.\n *\n * >>> computeLastDigit(2, 4)\n * 2\n * >>> computeLastDigit(6, 8)\n * 6\n * >>> computeLastDigit(1, 2)\n * 2\n */\nfunc computeLastDigit(a : Int, b : Int) -> Int {\n", "entry_point": "computeLastDigit", "test": "\n\nvar arg00 : Int = 2\nvar arg01 : Int = 4\nvar x0 : Int = computeLastDigit(a : arg00, b : arg01)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 6\nvar arg11 : Int = 8\nvar x1 : Int = computeLastDigit(a : arg10, b : arg11)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = 2\nvar x2 : Int = computeLastDigit(a : arg20, b : arg21)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the last digit when factorial of a divides factorial of b.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/48", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to set all odd bits of a given number.\n *\n * >>> oddBitSetNumber(10)\n * 15\n * >>> oddBitSetNumber(20)\n * 21\n * >>> oddBitSetNumber(30)\n * 31\n */\nfunc oddBitSetNumber(n : Int) -> Int {\n", "entry_point": "oddBitSetNumber", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = oddBitSetNumber(n : arg00)\nvar v0 : Int = 15\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 20\nvar x1 : Int = oddBitSetNumber(n : arg10)\nvar v1 : Int = 21\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 30\nvar x2 : Int = oddBitSetNumber(n : arg20)\nvar v2 : Int = 31\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to set all odd bits of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/49", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract every first or specified element from a given two-dimensional list.\n *\n * >>> specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)\n * [1, 4, 7]\n * >>> specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)\n * [3, 6, 9]\n * >>> specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1)\n * [2, 5, 1]\n */\nfunc specifiedElement(nums : [[Int]], n : Int) -> [Int] {\n", "entry_point": "specifiedElement", "test": "\n\nvar arg00 : [[Int]] = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]\nvar arg01 : Int = 0\nvar x0 : [Int] = specifiedElement(nums : arg00, n : arg01)\nvar v0 : [Int] = [1, 4, 7]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]\nvar arg11 : Int = 2\nvar x1 : [Int] = specifiedElement(nums : arg10, n : arg11)\nvar v1 : [Int] = [3, 6, 9]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]\nvar arg21 : Int = 1\nvar x2 : [Int] = specifiedElement(nums : arg20, n : arg21)\nvar v2 : [Int] = [2, 5, 1]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract every first or specified element from a given two-dimensional list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/50", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the list with minimum length using lambda function.\n *\n * >>> minLengthList([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n * [1, [0]]\n * >>> minLengthList([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])\n * [1, [1]]\n * >>> minLengthList([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2]])\n * [2, [1, 2]]\n */\nfunc minLengthList(inputList : [[Int]]) -> [AnyHashable] {\n", "entry_point": "minLengthList", "test": "\n\nvar arg00 : [[Int]] = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]\nvar x0 : [AnyHashable] = minLengthList(inputList : arg00)\nvar v0 : [AnyHashable] = [1, [0]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]\nvar x1 : [AnyHashable] = minLengthList(inputList : arg10)\nvar v1 : [AnyHashable] = [1, [1]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2]]\nvar x2 : [AnyHashable] = minLengthList(inputList : arg20)\nvar v2 : [AnyHashable] = [2, [1, 2]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the list with minimum length using lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/51", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print check if the triangle is equilateral or not.\n *\n * >>> checkEquilateral(6, 8, 12)\n * false\n * >>> checkEquilateral(6, 6, 12)\n * false\n * >>> checkEquilateral(6, 6, 6)\n * true\n */\nfunc checkEquilateral(x : Int, y : Int, z : Int) -> Bool {\n", "entry_point": "checkEquilateral", "test": "\n\nvar arg00 : Int = 6\nvar arg01 : Int = 8\nvar arg02 : Int = 12\nvar x0 : Bool = checkEquilateral(x : arg00, y : arg01, z : arg02)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 6\nvar arg11 : Int = 6\nvar arg12 : Int = 12\nvar x1 : Bool = checkEquilateral(x : arg10, y : arg11, z : arg12)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 6\nvar arg21 : Int = 6\nvar arg22 : Int = 6\nvar x2 : Bool = checkEquilateral(x : arg20, y : arg21, z : arg22)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to print check if the triangle is equilateral or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/52", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate area of a parallelogram.\n *\n * >>> parallelogramArea(10, 20)\n * 200\n * >>> parallelogramArea(15, 20)\n * 300\n * >>> parallelogramArea(8, 9)\n * 72\n */\nfunc parallelogramArea(b : Int, h : Int) -> Int {\n", "entry_point": "parallelogramArea", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 20\nvar x0 : Int = parallelogramArea(b : arg00, h : arg01)\nvar v0 : Int = 200\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 15\nvar arg11 : Int = 20\nvar x1 : Int = parallelogramArea(b : arg10, h : arg11)\nvar v1 : Int = 300\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 8\nvar arg21 : Int = 9\nvar x2 : Int = parallelogramArea(b : arg20, h : arg21)\nvar v2 : Int = 72\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to caluclate area of a parallelogram.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/53", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the first and last characters of a given string are equal or not.\n *\n * >>> checkEquality(\"abcda\")\n * \"Equal\"\n * >>> checkEquality(\"ab\")\n * \"Not Equal\"\n * >>> checkEquality(\"mad\")\n * \"Not Equal\"\n */\nfunc checkEquality(str : String) -> String {\n", "entry_point": "checkEquality", "test": "\n\nvar arg00 : String = #\"abcda\"#\nvar x0 : String = checkEquality(str : arg00)\nvar v0 : String = #\"Equal\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"ab\"#\nvar x1 : String = checkEquality(str : arg10)\nvar v1 : String = #\"Not Equal\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"mad\"#\nvar x2 : String = checkEquality(str : arg20)\nvar v2 : String = #\"Not Equal\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the first and last characters of a given string are equal or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/54", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the given array by using counting sort.\n *\n * >>> countingSort([1, 23, 4, 5, 6, 7, 8])\n * [1, 4, 5, 6, 7, 8, 23]\n * >>> countingSort([12, 9, 28, 33, 69, 45])\n * [9, 12, 28, 33, 45, 69]\n * >>> countingSort([8, 4, 14, 3, 2, 1])\n * [1, 2, 3, 4, 8, 14]\n */\nfunc countingSort(myList : [Int]) -> [Int] {\n", "entry_point": "countingSort", "test": "\n\nvar arg00 : [Int] = [1, 23, 4, 5, 6, 7, 8]\nvar x0 : [Int] = countingSort(myList : arg00)\nvar v0 : [Int] = [1, 4, 5, 6, 7, 8, 23]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [12, 9, 28, 33, 69, 45]\nvar x1 : [Int] = countingSort(myList : arg10)\nvar v1 : [Int] = [9, 12, 28, 33, 45, 69]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [8, 4, 14, 3, 2, 1]\nvar x2 : [Int] = countingSort(myList : arg20)\nvar v2 : [Int] = [1, 2, 3, 4, 8, 14]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort the given array by using counting sort.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/55", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find t-nth term of geometric series.\n *\n * >>> tnGp(1, 5, 2)\n * 16\n * >>> tnGp(1, 5, 4)\n * 256\n * >>> tnGp(2, 6, 3)\n * 486\n */\nfunc tnGp(a : Int, n : Int, r : Int) -> Int {\n", "entry_point": "tnGp", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = 5\nvar arg02 : Int = 2\nvar x0 : Int = tnGp(a : arg00, n : arg01, r : arg02)\nvar v0 : Int = 16\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar arg11 : Int = 5\nvar arg12 : Int = 4\nvar x1 : Int = tnGp(a : arg10, n : arg11, r : arg12)\nvar v1 : Int = 256\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar arg21 : Int = 6\nvar arg22 : Int = 3\nvar x2 : Int = tnGp(a : arg20, n : arg21, r : arg22)\nvar v2 : Int = 486\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find t-nth term of geometric series.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/56", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if a given number is one less than twice its reverse.\n *\n * >>> check(70)\n * false\n * >>> check(23)\n * false\n * >>> check(73)\n * true\n */\nfunc check(n : Int) -> Bool {\n", "entry_point": "check", "test": "\n\nvar arg00 : Int = 70\nvar x0 : Bool = check(n : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 23\nvar x1 : Bool = check(n : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 73\nvar x2 : Bool = check(n : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check if a given number is one less than twice its reverse.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/57", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the largest number that can be formed with the given digits.\n *\n * >>> findMaxNum([1, 2, 3], 3)\n * 321\n * >>> findMaxNum([4, 5, 6, 1], 4)\n * 6541\n * >>> findMaxNum([1, 2, 3, 9], 4)\n * 9321\n */\nfunc findMaxNum(arr : [Int], n : Int) -> Int {\n", "entry_point": "findMaxNum", "test": "\n\nvar arg00 : [Int] = [1, 2, 3]\nvar arg01 : Int = 3\nvar x0 : Int = findMaxNum(arr : arg00, n : arg01)\nvar v0 : Int = 321\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 5, 6, 1]\nvar arg11 : Int = 4\nvar x1 : Int = findMaxNum(arr : arg10, n : arg11)\nvar v1 : Int = 6541\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 9]\nvar arg21 : Int = 4\nvar x2 : Int = findMaxNum(arr : arg20, n : arg21)\nvar v2 : Int = 9321\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the largest number that can be formed with the given digits.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/58", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given two integers have opposite sign or not.\n *\n * >>> oppositeSigns(1, -2)\n * true\n * >>> oppositeSigns(3, 2)\n * false\n * >>> oppositeSigns(-10, -10)\n * false\n */\nfunc oppositeSigns(x : Int, y : Int) -> Bool {\n", "entry_point": "oppositeSigns", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = -2\nvar x0 : Bool = oppositeSigns(x : arg00, y : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar arg11 : Int = 2\nvar x1 : Bool = oppositeSigns(x : arg10, y : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = -10\nvar arg21 : Int = -10\nvar x2 : Bool = oppositeSigns(x : arg20, y : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the given two integers have opposite sign or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/59", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth octagonal number.\n *\n * >>> isOctagonal(5)\n * 65\n * >>> isOctagonal(10)\n * 280\n * >>> isOctagonal(15)\n * 645\n */\nfunc isOctagonal(n : Int) -> Int {\n", "entry_point": "isOctagonal", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Int = isOctagonal(n : arg00)\nvar v0 : Int = 65\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar x1 : Int = isOctagonal(n : arg10)\nvar v1 : Int = 280\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 15\nvar x2 : Int = isOctagonal(n : arg20)\nvar v2 : Int = 645\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the nth octagonal number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/60", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n *\n * >>> maxLenSub([2, 5, 6, 3, 7, 6, 5, 8], 8)\n * 5\n * >>> maxLenSub([-2, -1, 5, -1, 4, 0, 3], 7)\n * 4\n * >>> maxLenSub([9, 11, 13, 15, 18], 5)\n * 1\n */\nfunc maxLenSub(arr : [Int], n : Int) -> Int {\n", "entry_point": "maxLenSub", "test": "\n\nvar arg00 : [Int] = [2, 5, 6, 3, 7, 6, 5, 8]\nvar arg01 : Int = 8\nvar x0 : Int = maxLenSub(arr : arg00, n : arg01)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [-2, -1, 5, -1, 4, 0, 3]\nvar arg11 : Int = 7\nvar x1 : Int = maxLenSub(arr : arg10, n : arg11)\nvar v1 : Int = 4\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [9, 11, 13, 15, 18]\nvar arg21 : Int = 5\nvar x2 : Int = maxLenSub(arr : arg20, n : arg21)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/61", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count number of substrings with the sum of digits equal to their length.\n *\n * >>> countSubstrings(\"112112\", 6)\n * 6\n * >>> countSubstrings(\"111\", 3)\n * 6\n * >>> countSubstrings(\"1101112\", 7)\n * 12\n */\nfunc countSubstrings(s : String, n : Int) -> Int {\n", "entry_point": "countSubstrings", "test": "\n\nvar arg00 : String = #\"112112\"#\nvar arg01 : Int = 6\nvar x0 : Int = countSubstrings(s : arg00, n : arg01)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"111\"#\nvar arg11 : Int = 3\nvar x1 : Int = countSubstrings(s : arg10, n : arg11)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"1101112\"#\nvar arg21 : Int = 7\nvar x2 : Int = countSubstrings(s : arg20, n : arg21)\nvar v2 : Int = 12\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count number of substrings with the sum of digits equal to their length.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/62", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find smallest number in a list.\n *\n * >>> smallestNum([10, 20, 1, 45, 99])\n * 1\n * >>> smallestNum([1, 2, 3])\n * 1\n * >>> smallestNum([45, 46, 50, 60])\n * 45\n */\nfunc smallestNum(xs : [Int]) -> Int {\n", "entry_point": "smallestNum", "test": "\n\nvar arg00 : [Int] = [10, 20, 1, 45, 99]\nvar x0 : Int = smallestNum(xs : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3]\nvar x1 : Int = smallestNum(xs : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [45, 46, 50, 60]\nvar x2 : Int = smallestNum(xs : arg20)\nvar v2 : Int = 45\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find smallest number in a list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/63", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum difference between available pairs in the given tuple list.\n *\n * >>> maxDifference([[3, 5], [1, 7], [10, 3], [1, 2]])\n * 7\n * >>> maxDifference([[4, 6], [2, 17], [9, 13], [11, 12]])\n * 15\n * >>> maxDifference([[12, 35], [21, 27], [13, 23], [41, 22]])\n * 23\n */\nfunc maxDifference(testList : [[Int]]) -> Int {\n", "entry_point": "maxDifference", "test": "\n\nvar arg00 : [[Int]] = [[3, 5], [1, 7], [10, 3], [1, 2]]\nvar x0 : Int = maxDifference(testList : arg00)\nvar v0 : Int = 7\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[4, 6], [2, 17], [9, 13], [11, 12]]\nvar x1 : Int = maxDifference(testList : arg10)\nvar v1 : Int = 15\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[12, 35], [21, 27], [13, 23], [41, 22]]\nvar x2 : Int = maxDifference(testList : arg20)\nvar v2 : Int = 23\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the maximum difference between available pairs in the given tuple list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/64", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of tuples using lambda.\n *\n * >>> subjectMarks([[\"English\", 88], [\"Science\", 90], [\"Maths\", 97], [\"Social sciences\", 82]])\n * [[\"Social sciences\", 82], [\"English\", 88], [\"Science\", 90], [\"Maths\", 97]]\n * >>> subjectMarks([[\"Telugu\", 49], [\"Hindhi\", 54], [\"Social\", 33]])\n * [[\"Social\", 33], [\"Telugu\", 49], [\"Hindhi\", 54]]\n * >>> subjectMarks([[\"Physics\", 96], [\"Chemistry\", 97], [\"Biology\", 45]])\n * [[\"Biology\", 45], [\"Physics\", 96], [\"Chemistry\", 97]]\n */\nfunc subjectMarks(subjectmarks : [[AnyHashable]]) -> [[AnyHashable]] {\n", "entry_point": "subjectMarks", "test": "\n\nvar arg00 : [[AnyHashable]] = [[#\"English\"#, 88], [#\"Science\"#, 90], [#\"Maths\"#, 97], [#\"Social sciences\"#, 82]]\nvar x0 : [[AnyHashable]] = subjectMarks(subjectmarks : arg00)\nvar v0 : [[AnyHashable]] = [[#\"Social sciences\"#, 82], [#\"English\"#, 88], [#\"Science\"#, 90], [#\"Maths\"#, 97]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[#\"Telugu\"#, 49], [#\"Hindhi\"#, 54], [#\"Social\"#, 33]]\nvar x1 : [[AnyHashable]] = subjectMarks(subjectmarks : arg10)\nvar v1 : [[AnyHashable]] = [[#\"Social\"#, 33], [#\"Telugu\"#, 49], [#\"Hindhi\"#, 54]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[#\"Physics\"#, 96], [#\"Chemistry\"#, 97], [#\"Biology\"#, 45]]\nvar x2 : [[AnyHashable]] = subjectMarks(subjectmarks : arg20)\nvar v2 : [[AnyHashable]] = [[#\"Biology\"#, 45], [#\"Physics\"#, 96], [#\"Chemistry\"#, 97]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort a list of tuples using lambda.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/65", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function of recursion list sum.\n *\n * >>> recursiveListSum([1, 2, [3, 4], [5, 6]])\n * 21\n * >>> recursiveListSum([7, 10, [15, 14], [19, 41]])\n * 106\n * >>> recursiveListSum([10, 20, [30, 40], [50, 60]])\n * 210\n */\nfunc recursiveListSum(dataList : [AnyHashable]) -> Int {\n", "entry_point": "recursiveListSum", "test": "\n\nvar arg00 : [AnyHashable] = [1, 2, [3, 4], [5, 6]]\nvar x0 : Int = recursiveListSum(dataList : arg00)\nvar v0 : Int = 21\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [7, 10, [15, 14], [19, 41]]\nvar x1 : Int = recursiveListSum(dataList : arg10)\nvar v1 : Int = 106\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [10, 20, [30, 40], [50, 60]]\nvar x2 : Int = recursiveListSum(dataList : arg20)\nvar v2 : Int = 210\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function of recursion list sum.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/66", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count positive numbers in a list.\n *\n * >>> posCount([1, -2, 3, -4])\n * 2\n * >>> posCount([3, 4, 5, -1])\n * 3\n * >>> posCount([1, 2, 3, 4])\n * 4\n */\nfunc posCount(list : [Int]) -> Int {\n", "entry_point": "posCount", "test": "\n\nvar arg00 : [Int] = [1, -2, 3, -4]\nvar x0 : Int = posCount(list : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [3, 4, 5, -1]\nvar x1 : Int = posCount(list : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4]\nvar x2 : Int = posCount(list : arg20)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count positive numbers in a list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/67", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the number of ways to partition a set of bell numbers.\n *\n * >>> bellNumber(2)\n * 2\n * >>> bellNumber(10)\n * 115975\n * >>> bellNumber(56)\n * 6775685320645824322581483068371419745979053216268760300\n */\nfunc bellNumber(n : Int) -> Int {\n", "entry_point": "bellNumber", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = bellNumber(n : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar x1 : Int = bellNumber(n : arg10)\nvar v1 : Int = 115975\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 56\nvar x2 : Int = bellNumber(n : arg20)\nvar v2 : Int = 6775685320645824322581483068371419745979053216268760300\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the number of ways to partition a set of bell numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/68", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given array is monotonic or not.\n *\n * >>> isMonotonic([6, 5, 4, 4])\n * true\n * >>> isMonotonic([1, 2, 2, 3])\n * true\n * >>> isMonotonic([1, 3, 2])\n * false\n */\nfunc isMonotonic(a : [Int]) -> Bool {\n", "entry_point": "isMonotonic", "test": "\n\nvar arg00 : [Int] = [6, 5, 4, 4]\nvar x0 : Bool = isMonotonic(a : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 2, 3]\nvar x1 : Bool = isMonotonic(a : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 3, 2]\nvar x2 : Bool = isMonotonic(a : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the given array is monotonic or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/69", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether a list contains the given sublist or not.\n *\n * >>> isSublist([2, 4, 3, 5, 7], [3, 7])\n * false\n * >>> isSublist([2, 4, 3, 5, 7], [4, 3])\n * true\n * >>> isSublist([2, 4, 3, 5, 7], [1, 6])\n * false\n */\nfunc isSublist(l : [Int], s : [Int]) -> Bool {\n", "entry_point": "isSublist", "test": "\n\nvar arg00 : [Int] = [2, 4, 3, 5, 7]\nvar arg01 : [Int] = [3, 7]\nvar x0 : Bool = isSublist(l : arg00, s : arg01)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 4, 3, 5, 7]\nvar arg11 : [Int] = [4, 3]\nvar x1 : Bool = isSublist(l : arg10, s : arg11)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 4, 3, 5, 7]\nvar arg21 : [Int] = [1, 6]\nvar x2 : Bool = isSublist(l : arg20, s : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether a list contains the given sublist or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/70", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find whether all the given tuples have equal length or not.\n *\n * >>> getEqual([[11, 22, 33], [44, 55, 66]], 3)\n * \"All tuples have same length\"\n * >>> getEqual([[1, 2, 3], [4, 5, 6, 7]], 3)\n * \"All tuples do not have same length\"\n * >>> getEqual([[1, 2], [3, 4]], 2)\n * \"All tuples have same length\"\n */\nfunc getEqual(input : [[Int]], k : Int) -> String {\n", "entry_point": "getEqual", "test": "\n\nvar arg00 : [[Int]] = [[11, 22, 33], [44, 55, 66]]\nvar arg01 : Int = 3\nvar x0 : String = getEqual(input : arg00, k : arg01)\nvar v0 : String = #\"All tuples have same length\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1, 2, 3], [4, 5, 6, 7]]\nvar arg11 : Int = 3\nvar x1 : String = getEqual(input : arg10, k : arg11)\nvar v1 : String = #\"All tuples do not have same length\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[1, 2], [3, 4]]\nvar arg21 : Int = 2\nvar x2 : String = getEqual(input : arg20, k : arg21)\nvar v2 : String = #\"All tuples have same length\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find whether all the given tuples have equal length or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/71", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of elements using comb sort.\n *\n * >>> combSort([5, 15, 37, 25, 79])\n * [5, 15, 25, 37, 79]\n * >>> combSort([41, 32, 15, 19, 22])\n * [15, 19, 22, 32, 41]\n * >>> combSort([99, 15, 13, 47])\n * [13, 15, 47, 99]\n */\nfunc combSort(nums : [Int]) -> [Int] {\n", "entry_point": "combSort", "test": "\n\nvar arg00 : [Int] = [5, 15, 37, 25, 79]\nvar x0 : [Int] = combSort(nums : arg00)\nvar v0 : [Int] = [5, 15, 25, 37, 79]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [41, 32, 15, 19, 22]\nvar x1 : [Int] = combSort(nums : arg10)\nvar v1 : [Int] = [15, 19, 22, 32, 41]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [99, 15, 13, 47]\nvar x2 : [Int] = combSort(nums : arg20)\nvar v2 : [Int] = [13, 15, 47, 99]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort a list of elements using comb sort.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/72", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given number can be represented as difference of two squares or not.\n *\n * >>> difSquare(5)\n * true\n * >>> difSquare(10)\n * false\n * >>> difSquare(15)\n * true\n */\nfunc difSquare(n : Int) -> Bool {\n", "entry_point": "difSquare", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Bool = difSquare(n : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar x1 : Bool = difSquare(n : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 15\nvar x2 : Bool = difSquare(n : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the given number can be represented as difference of two squares or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/73", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to split the given string with multiple delimiters by using regex.\n *\n * >>> multipleSplit(\"Forces of the \\ndarkness*are coming into the play.\")\n * [\"Forces of the \", \"darkness\", \"are coming into the play.\"]\n * >>> multipleSplit(\"Mi Box runs on the \\n Latest android*which has google assistance and chromecast.\")\n * [\"Mi Box runs on the \", \" Latest android\", \"which has google assistance and chromecast.\"]\n * >>> multipleSplit(\"Certain services\\nare subjected to change*over the seperate subscriptions.\")\n * [\"Certain services\", \"are subjected to change\", \"over the seperate subscriptions.\"]\n */\nfunc multipleSplit(text : String) -> [String] {\n", "entry_point": "multipleSplit", "test": "\n\nvar arg00 : String = #\"Forces of the \\ndarkness*are coming into the play.\"#\nvar x0 : [String] = multipleSplit(text : arg00)\nvar v0 : [String] = [#\"Forces of the \"#, #\"darkness\"#, #\"are coming into the play.\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Mi Box runs on the \\n Latest android*which has google assistance and chromecast.\"#\nvar x1 : [String] = multipleSplit(text : arg10)\nvar v1 : [String] = [#\"Mi Box runs on the \"#, #\" Latest android\"#, #\"which has google assistance and chromecast.\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Certain services\\nare subjected to change*over the seperate subscriptions.\"#\nvar x2 : [String] = multipleSplit(text : arg20)\nvar v2 : [String] = [#\"Certain services\"#, #\"are subjected to change\"#, #\"over the seperate subscriptions.\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to split the given string with multiple delimiters by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/74", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether it follows the sequence given in the patterns array.\n *\n * >>> isSamepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"])\n * true\n * >>> isSamepatterns([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"])\n * false\n * >>> isSamepatterns([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"])\n * false\n */\nfunc isSamepatterns(colors : [String], patterns : [String]) -> Bool {\n", "entry_point": "isSamepatterns", "test": "\n\nvar arg00 : [String] = [#\"red\"#, #\"green\"#, #\"green\"#]\nvar arg01 : [String] = [#\"a\"#, #\"b\"#, #\"b\"#]\nvar x0 : Bool = isSamepatterns(colors : arg00, patterns : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"red\"#, #\"green\"#, #\"greenn\"#]\nvar arg11 : [String] = [#\"a\"#, #\"b\"#, #\"b\"#]\nvar x1 : Bool = isSamepatterns(colors : arg10, patterns : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"red\"#, #\"green\"#, #\"greenn\"#]\nvar arg21 : [String] = [#\"a\"#, #\"b\"#]\nvar x2 : Bool = isSamepatterns(colors : arg20, patterns : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether it follows the sequence given in the patterns array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/75", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n *\n * >>> findTuples([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6)\n * \"[(6, 24, 12)]\"\n * >>> findTuples([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5)\n * \"[(5, 25, 30)]\"\n * >>> findTuples([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4)\n * \"[(8, 16, 4)]\"\n */\nfunc findTuples(testList : [[Int]], k : Int) -> String {\n", "entry_point": "findTuples", "test": "\n\nvar arg00 : [[Int]] = [[6, 24, 12], [7, 9, 6], [12, 18, 21]]\nvar arg01 : Int = 6\nvar x0 : String = findTuples(testList : arg00, k : arg01)\nvar v0 : String = #\"[(6, 24, 12)]\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[5, 25, 30], [4, 2, 3], [7, 8, 9]]\nvar arg11 : Int = 5\nvar x1 : String = findTuples(testList : arg10, k : arg11)\nvar v1 : String = #\"[(5, 25, 30)]\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[7, 9, 16], [8, 16, 4], [19, 17, 18]]\nvar arg21 : Int = 4\nvar x2 : String = findTuples(testList : arg20, k : arg21)\nvar v2 : String = #\"[(8, 16, 4)]\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/76", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of squares in a rectangle.\n *\n * >>> countSquares(4, 3)\n * 20\n * >>> countSquares(2, 2)\n * 5\n * >>> countSquares(1, 1)\n * 1\n */\nfunc countSquares(m : Int, n : Int) -> Int {\n", "entry_point": "countSquares", "test": "\n\nvar arg00 : Int = 4\nvar arg01 : Int = 3\nvar x0 : Int = countSquares(m : arg00, n : arg01)\nvar v0 : Int = 20\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar arg11 : Int = 2\nvar x1 : Int = countSquares(m : arg10, n : arg11)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = 1\nvar x2 : Int = countSquares(m : arg20, n : arg21)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the number of squares in a rectangle.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/77", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the difference between sum of even and odd digits.\n *\n * >>> isDiff(1212112)\n * true\n * >>> isDiff(1212)\n * false\n */\nfunc isDiff(n : Int) -> Bool {\n", "entry_point": "isDiff", "test": "\n\nvar arg00 : Int = 1212112\nvar x0 : Bool = isDiff(n : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1212\nvar x1 : Bool = isDiff(n : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\n", "description": "Write a Swift function to find the difference between sum of even and odd digits.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/78", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find number of integers with odd number of set bits.\n *\n * >>> countWithOddSetbits(5)\n * 3\n * >>> countWithOddSetbits(10)\n * 5\n * >>> countWithOddSetbits(15)\n * 8\n */\nfunc countWithOddSetbits(n : Int) -> Int {\n", "entry_point": "countWithOddSetbits", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Int = countWithOddSetbits(n : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar x1 : Int = countWithOddSetbits(n : arg10)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 15\nvar x2 : Int = countWithOddSetbits(n : arg20)\nvar v2 : Int = 8\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find number of integers with odd number of set bits.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/79", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the length of the word is odd or not.\n *\n * >>> wordLen(\"Hadoop\")\n * false\n * >>> wordLen(\"great\")\n * true\n * >>> wordLen(\"structure\")\n * true\n */\nfunc wordLen(s : String) -> Bool {\n", "entry_point": "wordLen", "test": "\n\nvar arg00 : String = #\"Hadoop\"#\nvar x0 : Bool = wordLen(s : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"great\"#\nvar x1 : Bool = wordLen(s : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"structure\"#\nvar x2 : Bool = wordLen(s : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the length of the word is odd or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/80", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth tetrahedral number.\n *\n * >>> tetrahedralNumber(5)\n * 35.0\n * >>> tetrahedralNumber(6)\n * 56.0\n * >>> tetrahedralNumber(7)\n * 84.0\n */\nfunc tetrahedralNumber(n : Int) -> Double {\n", "entry_point": "tetrahedralNumber", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Double = tetrahedralNumber(n : arg00)\nvar v0 : Double = 35.0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 6\nvar x1 : Double = tetrahedralNumber(n : arg10)\nvar v1 : Double = 56.0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 7\nvar x2 : Double = tetrahedralNumber(n : arg20)\nvar v2 : Double = 84.0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the nth tetrahedral number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/81", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to zip the two given tuples.\n *\n * >>> zipTuples([7, 8, 4, 5, 9, 10], [1, 5, 6])\n * [[7, 1], [8, 5], [4, 6], [5, 1], [9, 5], [10, 6]]\n * >>> zipTuples([8, 9, 5, 6, 10, 11], [2, 6, 7])\n * [[8, 2], [9, 6], [5, 7], [6, 2], [10, 6], [11, 7]]\n * >>> zipTuples([9, 10, 6, 7, 11, 12], [3, 7, 8])\n * [[9, 3], [10, 7], [6, 8], [7, 3], [11, 7], [12, 8]]\n */\nfunc zipTuples(testTup1 : [Int], testTup2 : [Int]) -> [[Int]] {\n", "entry_point": "zipTuples", "test": "\n\nvar arg00 : [Int] = [7, 8, 4, 5, 9, 10]\nvar arg01 : [Int] = [1, 5, 6]\nvar x0 : [[Int]] = zipTuples(testTup1 : arg00, testTup2 : arg01)\nvar v0 : [[Int]] = [[7, 1], [8, 5], [4, 6], [5, 1], [9, 5], [10, 6]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [8, 9, 5, 6, 10, 11]\nvar arg11 : [Int] = [2, 6, 7]\nvar x1 : [[Int]] = zipTuples(testTup1 : arg10, testTup2 : arg11)\nvar v1 : [[Int]] = [[8, 2], [9, 6], [5, 7], [6, 2], [10, 6], [11, 7]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [9, 10, 6, 7, 11, 12]\nvar arg21 : [Int] = [3, 7, 8]\nvar x2 : [[Int]] = zipTuples(testTup1 : arg20, testTup2 : arg21)\nvar v2 : [[Int]] = [[9, 3], [10, 7], [6, 8], [7, 3], [11, 7], [12, 8]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to zip the two given tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/82", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a sphere.\n *\n * >>> volumeSphere(10)\n * 4188.790204786391\n * >>> volumeSphere(25)\n * 65449.84694978735\n * >>> volumeSphere(20)\n * 33510.32163829113\n */\nfunc volumeSphere(r : Int) -> Double {\n", "entry_point": "volumeSphere", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Double = volumeSphere(r : arg00)\nvar v0 : Double = 4188.790204786391\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 25\nvar x1 : Double = volumeSphere(r : arg10)\nvar v1 : Double = 65449.84694978735\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 20\nvar x2 : Double = volumeSphere(r : arg20)\nvar v2 : Double = 33510.32163829113\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the volume of a sphere.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/83", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the character made by adding all the characters of the given string.\n *\n * >>> getChar(\"abc\")\n * \"f\"\n * >>> getChar(\"gfg\")\n * \"t\"\n * >>> getChar(\"ab\")\n * \"c\"\n */\nfunc getChar(strr : String) -> String {\n", "entry_point": "getChar", "test": "\n\nvar arg00 : String = #\"abc\"#\nvar x0 : String = getChar(strr : arg00)\nvar v0 : String = #\"f\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"gfg\"#\nvar x1 : String = getChar(strr : arg10)\nvar v1 : String = #\"t\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"ab\"#\nvar x2 : String = getChar(strr : arg20)\nvar v2 : String = #\"c\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the character made by adding all the characters of the given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/84", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n-th number in newman conway sequence.\n *\n * >>> sequence(10)\n * 6\n * >>> sequence(2)\n * 1\n * >>> sequence(3)\n * 2\n */\nfunc sequence(n : Int) -> Int {\n", "entry_point": "sequence", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = sequence(n : arg00)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar x1 : Int = sequence(n : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 3\nvar x2 : Int = sequence(n : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the n-th number in newman conway sequence.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/85", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the surface area of a sphere.\n *\n * >>> surfaceareaSphere(10)\n * 1256.6370614359173\n * >>> surfaceareaSphere(15)\n * 2827.4333882308138\n * >>> surfaceareaSphere(20)\n * 5026.548245743669\n */\nfunc surfaceareaSphere(r : Int) -> Double {\n", "entry_point": "surfaceareaSphere", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Double = surfaceareaSphere(r : arg00)\nvar v0 : Double = 1256.6370614359173\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 15\nvar x1 : Double = surfaceareaSphere(r : arg10)\nvar v1 : Double = 2827.4333882308138\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 20\nvar x2 : Double = surfaceareaSphere(r : arg20)\nvar v2 : Double = 5026.548245743669\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the surface area of a sphere.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/86", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find nth centered hexagonal number.\n *\n * >>> centeredHexagonalNumber(10)\n * 271\n * >>> centeredHexagonalNumber(2)\n * 7\n * >>> centeredHexagonalNumber(9)\n * 217\n */\nfunc centeredHexagonalNumber(n : Int) -> Int {\n", "entry_point": "centeredHexagonalNumber", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = centeredHexagonalNumber(n : arg00)\nvar v0 : Int = 271\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar x1 : Int = centeredHexagonalNumber(n : arg10)\nvar v1 : Int = 7\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 9\nvar x2 : Int = centeredHexagonalNumber(n : arg20)\nvar v2 : Int = 217\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find nth centered hexagonal number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/87", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to merge three dictionaries into a single expression.\n *\n * >>> mergeDictionariesThree([\"R\" : \"Red\", \"B\" : \"Black\", \"P\" : \"Pink\"], [\"G\" : \"Green\", \"W\" : \"White\"], [\"O\" : \"Orange\", \"W\" : \"White\", \"B\" : \"Black\"])\n * [\"B\" : \"Black\", \"R\" : \"Red\", \"P\" : \"Pink\", \"G\" : \"Green\", \"W\" : \"White\", \"O\" : \"Orange\"]\n * >>> mergeDictionariesThree([\"R\" : \"Red\", \"B\" : \"Black\", \"P\" : \"Pink\"], [\"G\" : \"Green\", \"W\" : \"White\"], [\"L\" : \"lavender\", \"B\" : \"Blue\"])\n * [\"W\" : \"White\", \"P\" : \"Pink\", \"B\" : \"Black\", \"R\" : \"Red\", \"G\" : \"Green\", \"L\" : \"lavender\"]\n * >>> mergeDictionariesThree([\"R\" : \"Red\", \"B\" : \"Black\", \"P\" : \"Pink\"], [\"L\" : \"lavender\", \"B\" : \"Blue\"], [\"G\" : \"Green\", \"W\" : \"White\"])\n * [\"B\" : \"Black\", \"P\" : \"Pink\", \"R\" : \"Red\", \"G\" : \"Green\", \"L\" : \"lavender\", \"W\" : \"White\"]\n */\nfunc mergeDictionariesThree(dict1 : [String: String], dict2 : [String: String], dict3 : [String: String]) -> [String: String] {\n", "entry_point": "mergeDictionariesThree", "test": "\n\nvar arg00 : [String: String] = [#\"R\"# : #\"Red\"#, #\"B\"# : #\"Black\"#, #\"P\"# : #\"Pink\"#]\nvar arg01 : [String: String] = [#\"G\"# : #\"Green\"#, #\"W\"# : #\"White\"#]\nvar arg02 : [String: String] = [#\"O\"# : #\"Orange\"#, #\"W\"# : #\"White\"#, #\"B\"# : #\"Black\"#]\nvar x0 : [String: String] = mergeDictionariesThree(dict1 : arg00, dict2 : arg01, dict3 : arg02)\nvar v0 : [String: String] = [#\"B\"# : #\"Black\"#, #\"R\"# : #\"Red\"#, #\"P\"# : #\"Pink\"#, #\"G\"# : #\"Green\"#, #\"W\"# : #\"White\"#, #\"O\"# : #\"Orange\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String: String] = [#\"R\"# : #\"Red\"#, #\"B\"# : #\"Black\"#, #\"P\"# : #\"Pink\"#]\nvar arg11 : [String: String] = [#\"G\"# : #\"Green\"#, #\"W\"# : #\"White\"#]\nvar arg12 : [String: String] = [#\"L\"# : #\"lavender\"#, #\"B\"# : #\"Blue\"#]\nvar x1 : [String: String] = mergeDictionariesThree(dict1 : arg10, dict2 : arg11, dict3 : arg12)\nvar v1 : [String: String] = [#\"W\"# : #\"White\"#, #\"P\"# : #\"Pink\"#, #\"B\"# : #\"Black\"#, #\"R\"# : #\"Red\"#, #\"G\"# : #\"Green\"#, #\"L\"# : #\"lavender\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String: String] = [#\"R\"# : #\"Red\"#, #\"B\"# : #\"Black\"#, #\"P\"# : #\"Pink\"#]\nvar arg21 : [String: String] = [#\"L\"# : #\"lavender\"#, #\"B\"# : #\"Blue\"#]\nvar arg22 : [String: String] = [#\"G\"# : #\"Green\"#, #\"W\"# : #\"White\"#]\nvar x2 : [String: String] = mergeDictionariesThree(dict1 : arg20, dict2 : arg21, dict3 : arg22)\nvar v2 : [String: String] = [#\"B\"# : #\"Black\"#, #\"P\"# : #\"Pink\"#, #\"R\"# : #\"Red\"#, #\"G\"# : #\"Green\"#, #\"L\"# : #\"lavender\"#, #\"W\"# : #\"White\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to merge three dictionaries into a single expression.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/88", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get the frequency of the elements in a list.\n *\n * >>> freqCount([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30])\n * [10 : 4, 20 : 4, 40 : 2, 50 : 2, 30 : 1]\n * >>> freqCount([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4])\n * [1 : 3, 2 : 2, 3 : 3, 4 : 3]\n * >>> freqCount([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5])\n * [10 : 1, 5 : 3, 6 : 2, 7 : 2, 4 : 2, 9 : 2]\n */\nfunc freqCount(list1 : [Int]) -> [Int: Int] {\n", "entry_point": "freqCount", "test": "\n\nvar arg00 : [Int] = [10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]\nvar x0 : [Int: Int] = freqCount(list1 : arg00)\nvar v0 : [Int: Int] = [10 : 4, 20 : 4, 40 : 2, 50 : 2, 30 : 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]\nvar x1 : [Int: Int] = freqCount(list1 : arg10)\nvar v1 : [Int: Int] = [1 : 3, 2 : 2, 3 : 3, 4 : 3]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]\nvar x2 : [Int: Int] = freqCount(list1 : arg20)\nvar v2 : [Int: Int] = [10 : 1, 5 : 3, 6 : 2, 7 : 2, 4 : 2, 9 : 2]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to get the frequency of the elements in a list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/89", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the closest smaller number than n.\n *\n * >>> closestNum(11)\n * 10\n * >>> closestNum(7)\n * 6\n * >>> closestNum(12)\n * 11\n */\nfunc closestNum(n : Int) -> Int {\n", "entry_point": "closestNum", "test": "\n\nvar arg00 : Int = 11\nvar x0 : Int = closestNum(n : arg00)\nvar v0 : Int = 10\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 7\nvar x1 : Int = closestNum(n : arg10)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 12\nvar x2 : Int = closestNum(n : arg20)\nvar v2 : Int = 11\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the closest smaller number than n.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/90", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the length of the longest word.\n *\n * >>> lenLog([\"python\", \"PHP\", \"bigdata\"])\n * 7\n * >>> lenLog([\"a\", \"ab\", \"abc\"])\n * 3\n * >>> lenLog([\"small\", \"big\", \"tall\"])\n * 5\n */\nfunc lenLog(list1 : [String]) -> Int {\n", "entry_point": "lenLog", "test": "\n\nvar arg00 : [String] = [#\"python\"#, #\"PHP\"#, #\"bigdata\"#]\nvar x0 : Int = lenLog(list1 : arg00)\nvar v0 : Int = 7\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"a\"#, #\"ab\"#, #\"abc\"#]\nvar x1 : Int = lenLog(list1 : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"small\"#, #\"big\"#, #\"tall\"#]\nvar x2 : Int = lenLog(list1 : arg20)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the length of the longest word.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/91", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a substring is present in a given list of string values.\n *\n * >>> findSubstring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\")\n * true\n * >>> findSubstring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\")\n * false\n * >>> findSubstring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\")\n * true\n */\nfunc findSubstring(str1 : [String], subStr : String) -> Bool {\n", "entry_point": "findSubstring", "test": "\n\nvar arg00 : [String] = [#\"red\"#, #\"black\"#, #\"white\"#, #\"green\"#, #\"orange\"#]\nvar arg01 : String = #\"ack\"#\nvar x0 : Bool = findSubstring(str1 : arg00, subStr : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"red\"#, #\"black\"#, #\"white\"#, #\"green\"#, #\"orange\"#]\nvar arg11 : String = #\"abc\"#\nvar x1 : Bool = findSubstring(str1 : arg10, subStr : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"red\"#, #\"black\"#, #\"white\"#, #\"green\"#, #\"orange\"#]\nvar arg21 : String = #\"ange\"#\nvar x2 : Bool = findSubstring(str1 : arg20, subStr : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if a substring is present in a given list of string values.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/92", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given number is undulating or not.\n *\n * >>> isUndulating(\"1212121\")\n * true\n * >>> isUndulating(\"1991\")\n * false\n * >>> isUndulating(\"121\")\n * true\n */\nfunc isUndulating(n : String) -> Bool {\n", "entry_point": "isUndulating", "test": "\n\nvar arg00 : String = #\"1212121\"#\nvar x0 : Bool = isUndulating(n : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"1991\"#\nvar x1 : Bool = isUndulating(n : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"121\"#\nvar x2 : Bool = isUndulating(n : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether the given number is undulating or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/93", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the value of 'a' to the power 'b'.\n *\n * >>> power(3, 4)\n * 81\n * >>> power(2, 3)\n * 8\n * >>> power(5, 5)\n * 3125\n */\nfunc power(a : Int, b : Int) -> Int {\n", "entry_point": "power", "test": "\n\nvar arg00 : Int = 3\nvar arg01 : Int = 4\nvar x0 : Int = power(a : arg00, b : arg01)\nvar v0 : Int = 81\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar arg11 : Int = 3\nvar x1 : Int = power(a : arg10, b : arg11)\nvar v1 : Int = 8\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar arg21 : Int = 5\nvar x2 : Int = power(a : arg20, b : arg21)\nvar v2 : Int = 3125\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate the value of 'a' to the power 'b'.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/94", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the index minimum value record from the given tuples.\n *\n * >>> indexMinimum([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]])\n * \"Varsha\"\n * >>> indexMinimum([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]])\n * \"Dawood\"\n * >>> indexMinimum([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]])\n * \"Ayesha\"\n */\nfunc indexMinimum(testList : [[AnyHashable]]) -> String {\n", "entry_point": "indexMinimum", "test": "\n\nvar arg00 : [[AnyHashable]] = [[#\"Rash\"#, 143], [#\"Manjeet\"#, 200], [#\"Varsha\"#, 100]]\nvar x0 : String = indexMinimum(testList : arg00)\nvar v0 : String = #\"Varsha\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[#\"Yash\"#, 185], [#\"Dawood\"#, 125], [#\"Sanya\"#, 175]]\nvar x1 : String = indexMinimum(testList : arg10)\nvar v1 : String = #\"Dawood\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[#\"Sai\"#, 345], [#\"Salman\"#, 145], [#\"Ayesha\"#, 96]]\nvar x2 : String = indexMinimum(testList : arg20)\nvar v2 : String = #\"Ayesha\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract the index minimum value record from the given tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/95", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum length of sublist.\n *\n * >>> findMinLength([[1], [1, 2]])\n * 1\n * >>> findMinLength([[1, 2], [1, 2, 3], [1, 2, 3, 4]])\n * 2\n * >>> findMinLength([[3, 3, 3], [4, 4, 4, 4]])\n * 3\n */\nfunc findMinLength(lst : [[Int]]) -> Int {\n", "entry_point": "findMinLength", "test": "\n\nvar arg00 : [[Int]] = [[1], [1, 2]]\nvar x0 : Int = findMinLength(lst : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1, 2], [1, 2, 3], [1, 2, 3, 4]]\nvar x1 : Int = findMinLength(lst : arg10)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[3, 3, 3], [4, 4, 4, 4]]\nvar x2 : Int = findMinLength(lst : arg20)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the minimum length of sublist.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/96", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the number of divisors of a given integer.\n *\n * >>> divisor(15)\n * 4\n * >>> divisor(12)\n * 6\n * >>> divisor(9)\n * 3\n */\nfunc divisor(n : Int) -> Int {\n", "entry_point": "divisor", "test": "\n\nvar arg00 : Int = 15\nvar x0 : Int = divisor(n : arg00)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 12\nvar x1 : Int = divisor(n : arg10)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 9\nvar x2 : Int = divisor(n : arg20)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the number of divisors of a given integer.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/97", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find frequency count of list of lists.\n *\n * >>> frequencyLists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n * [1 : 1, 2 : 3, 3 : 1, 4 : 1, 5 : 2, 6 : 1, 7 : 1, 8 : 1, 9 : 1]\n * >>> frequencyLists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n * [1 : 1, 2 : 1, 3 : 1, 4 : 1, 5 : 1, 6 : 1, 7 : 1, 8 : 1, 9 : 1, 10 : 1, 11 : 1, 12 : 1]\n * >>> frequencyLists([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]])\n * [20 : 2, 30 : 2, 40 : 2, 17 : 1, 18 : 1, 16 : 1, 14 : 1, 13 : 1, 10 : 1]\n */\nfunc frequencyLists(list1 : [[Int]]) -> [Int: Int] {\n", "entry_point": "frequencyLists", "test": "\n\nvar arg00 : [[Int]] = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]\nvar x0 : [Int: Int] = frequencyLists(list1 : arg00)\nvar v0 : [Int: Int] = [1 : 1, 2 : 3, 3 : 1, 4 : 1, 5 : 2, 6 : 1, 7 : 1, 8 : 1, 9 : 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\nvar x1 : [Int: Int] = frequencyLists(list1 : arg10)\nvar v1 : [Int: Int] = [1 : 1, 2 : 1, 3 : 1, 4 : 1, 5 : 1, 6 : 1, 7 : 1, 8 : 1, 9 : 1, 10 : 1, 11 : 1, 12 : 1]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]\nvar x2 : [Int: Int] = frequencyLists(list1 : arg20)\nvar v2 : [Int: Int] = [20 : 2, 30 : 2, 40 : 2, 17 : 1, 18 : 1, 16 : 1, 14 : 1, 13 : 1, 10 : 1]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find frequency count of list of lists.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/98", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to multiply all the numbers in a list and divide with the length of the list.\n *\n * >>> multiplyNum([8, 2, 3, -1, 7])\n * -67.2\n * >>> multiplyNum([-10, -20, -30])\n * -2000.0\n * >>> multiplyNum([19, 15, 18])\n * 1710.0\n */\nfunc multiplyNum(numbers : [Int]) -> Double {\n", "entry_point": "multiplyNum", "test": "\n\nvar arg00 : [Int] = [8, 2, 3, -1, 7]\nvar x0 : Double = multiplyNum(numbers : arg00)\nvar v0 : Double = -67.2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [-10, -20, -30]\nvar x1 : Double = multiplyNum(numbers : arg10)\nvar v1 : Double = -2000.0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [19, 15, 18]\nvar x2 : Double = multiplyNum(numbers : arg20)\nvar v2 : Double = 1710.0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/99", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given decimal number to its binary equivalent.\n *\n * >>> decimalToBinary(8)\n * \"1000\"\n * >>> decimalToBinary(18)\n * \"10010\"\n * >>> decimalToBinary(7)\n * \"111\"\n */\nfunc decimalToBinary(n : Int) -> String {\n", "entry_point": "decimalToBinary", "test": "\n\nvar arg00 : Int = 8\nvar x0 : String = decimalToBinary(n : arg00)\nvar v0 : String = #\"1000\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 18\nvar x1 : String = decimalToBinary(n : arg10)\nvar v1 : String = #\"10010\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 7\nvar x2 : String = decimalToBinary(n : arg20)\nvar v2 : String = #\"111\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert the given decimal number to its binary equivalent.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/100", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the next smallest palindrome of a specified number.\n *\n * >>> nextSmallestPalindrome(99)\n * 101\n * >>> nextSmallestPalindrome(1221)\n * 1331\n * >>> nextSmallestPalindrome(120)\n * 121\n */\nfunc nextSmallestPalindrome(num : Int) -> Int {\n", "entry_point": "nextSmallestPalindrome", "test": "\n\nvar arg00 : Int = 99\nvar x0 : Int = nextSmallestPalindrome(num : arg00)\nvar v0 : Int = 101\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1221\nvar x1 : Int = nextSmallestPalindrome(num : arg10)\nvar v1 : Int = 1331\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 120\nvar x2 : Int = nextSmallestPalindrome(num : arg20)\nvar v2 : Int = 121\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the next smallest palindrome of a specified number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/101", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the kth element in the given array.\n *\n * >>> kthElement([12, 3, 5, 7, 19], 5, 2)\n * 3\n * >>> kthElement([17, 24, 8, 23], 4, 3)\n * 8\n * >>> kthElement([16, 21, 25, 36, 4], 5, 4)\n * 36\n */\nfunc kthElement(arr : [Int], n : Int, k : Int) -> Int {\n", "entry_point": "kthElement", "test": "\n\nvar arg00 : [Int] = [12, 3, 5, 7, 19]\nvar arg01 : Int = 5\nvar arg02 : Int = 2\nvar x0 : Int = kthElement(arr : arg00, n : arg01, k : arg02)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [17, 24, 8, 23]\nvar arg11 : Int = 4\nvar arg12 : Int = 3\nvar x1 : Int = kthElement(arr : arg10, n : arg11, k : arg12)\nvar v1 : Int = 8\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [16, 21, 25, 36, 4]\nvar arg21 : Int = 5\nvar arg22 : Int = 4\nvar x2 : Int = kthElement(arr : arg20, n : arg21, k : arg22)\nvar v2 : Int = 36\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the kth element in the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/102", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert snake case string to camel case string.\n *\n * >>> snakeToCamel(\"python_program\")\n * \"PythonProgram\"\n * >>> snakeToCamel(\"python_language\")\n * \"PythonLanguage\"\n * >>> snakeToCamel(\"programming_language\")\n * \"ProgrammingLanguage\"\n */\nfunc snakeToCamel(word : String) -> String {\n", "entry_point": "snakeToCamel", "test": "\n\nvar arg00 : String = #\"python_program\"#\nvar x0 : String = snakeToCamel(word : arg00)\nvar v0 : String = #\"PythonProgram\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"python_language\"#\nvar x1 : String = snakeToCamel(word : arg10)\nvar v1 : String = #\"PythonLanguage\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"programming_language\"#\nvar x2 : String = snakeToCamel(word : arg20)\nvar v2 : String = #\"ProgrammingLanguage\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert snake case string to camel case string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/103", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find eulerian number a(n, m).\n *\n * >>> eulerianNum(3, 1)\n * 4\n * >>> eulerianNum(4, 1)\n * 11\n * >>> eulerianNum(5, 3)\n * 26\n */\nfunc eulerianNum(n : Int, m : Int) -> Int {\n", "entry_point": "eulerianNum", "test": "\n\nvar arg00 : Int = 3\nvar arg01 : Int = 1\nvar x0 : Int = eulerianNum(n : arg00, m : arg01)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar arg11 : Int = 1\nvar x1 : Int = eulerianNum(n : arg10, m : arg11)\nvar v1 : Int = 11\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar arg21 : Int = 3\nvar x2 : Int = eulerianNum(n : arg20, m : arg21)\nvar v2 : Int = 26\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find eulerian number a(n, m).", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/104", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort each sublist of strings in a given list of lists using lambda function.\n *\n * >>> sortSublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n * [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]]\n * >>> sortSublists([[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]])\n * [[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]]\n * >>> sortSublists([[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]])\n * [[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]]\n */\nfunc sortSublists(inputList : [[String]]) -> [[String]] {\n", "entry_point": "sortSublists", "test": "\n\nvar arg00 : [[String]] = [[#\"green\"#, #\"orange\"#], [#\"black\"#, #\"white\"#], [#\"white\"#, #\"black\"#, #\"orange\"#]]\nvar x0 : [[String]] = sortSublists(inputList : arg00)\nvar v0 : [[String]] = [[#\"green\"#, #\"orange\"#], [#\"black\"#, #\"white\"#], [#\"black\"#, #\"orange\"#, #\"white\"#]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[String]] = [[#\" red \"#, #\"green\"#], [#\"blue \"#, #\" black\"#], [#\" orange\"#, #\"brown\"#]]\nvar x1 : [[String]] = sortSublists(inputList : arg10)\nvar v1 : [[String]] = [[#\" red \"#, #\"green\"#], [#\" black\"#, #\"blue \"#], [#\" orange\"#, #\"brown\"#]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[String]] = [[#\"zilver\"#, #\"gold\"#], [#\"magnesium\"#, #\"aluminium\"#], [#\"steel\"#, #\"bronze\"#]]\nvar x2 : [[String]] = sortSublists(inputList : arg20)\nvar v2 : [[String]] = [[#\"gold\"#, #\"zilver\"#], [#\"aluminium\"#, #\"magnesium\"#], [#\"bronze\"#, #\"steel\"#]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort each sublist of strings in a given list of lists using lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/105", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count true booleans in the given list.\n *\n * >>> count([true, false, true])\n * 2\n * >>> count([false, false])\n * 0\n * >>> count([true, true, true])\n * 3\n */\nfunc count(lst : [Bool]) -> Int {\n", "entry_point": "count", "test": "\n\nvar arg00 : [Bool] = [true, false, true]\nvar x0 : Int = count(lst : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Bool] = [false, false]\nvar x1 : Int = count(lst : arg10)\nvar v1 : Int = 0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Bool] = [true, true, true]\nvar x2 : Int = count(lst : arg20)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count true booleans in the given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/106", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add the given list to the given tuples.\n *\n * >>> addLists([5, 6, 7], [9, 10])\n * [9, 10, 5, 6, 7]\n * >>> addLists([6, 7, 8], [10, 11])\n * [10, 11, 6, 7, 8]\n * >>> addLists([7, 8, 9], [11, 12])\n * [11, 12, 7, 8, 9]\n */\nfunc addLists(testList : [Int], testTup : [Int]) -> [Int] {\n", "entry_point": "addLists", "test": "\n\nvar arg00 : [Int] = [5, 6, 7]\nvar arg01 : [Int] = [9, 10]\nvar x0 : [Int] = addLists(testList : arg00, testTup : arg01)\nvar v0 : [Int] = [9, 10, 5, 6, 7]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [6, 7, 8]\nvar arg11 : [Int] = [10, 11]\nvar x1 : [Int] = addLists(testList : arg10, testTup : arg11)\nvar v1 : [Int] = [10, 11, 6, 7, 8]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [7, 8, 9]\nvar arg21 : [Int] = [11, 12]\nvar x2 : [Int] = addLists(testList : arg20, testTup : arg21)\nvar v2 : [Int] = [11, 12, 7, 8, 9]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to add the given list to the given tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/107", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count hexadecimal numbers for a given range.\n *\n * >>> countHexadecimal(10, 15)\n * 6\n * >>> countHexadecimal(2, 4)\n * 0\n * >>> countHexadecimal(15, 16)\n * 1\n */\nfunc countHexadecimal(l : Int, r : Int) -> Int {\n", "entry_point": "countHexadecimal", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 15\nvar x0 : Int = countHexadecimal(l : arg00, r : arg01)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar arg11 : Int = 4\nvar x1 : Int = countHexadecimal(l : arg10, r : arg11)\nvar v1 : Int = 0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 15\nvar arg21 : Int = 16\nvar x2 : Int = countHexadecimal(l : arg20, r : arg21)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count hexadecimal numbers for a given range.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/108", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n *\n * >>> mergeSortedList([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48])\n * [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n * >>> mergeSortedList([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])\n * [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n * >>> mergeSortedList([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41])\n * [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n */\nfunc mergeSortedList(num1 : [Int], num2 : [Int], num3 : [Int]) -> [Int] {\n", "entry_point": "mergeSortedList", "test": "\n\nvar arg00 : [Int] = [25, 24, 15, 4, 5, 29, 110]\nvar arg01 : [Int] = [19, 20, 11, 56, 25, 233, 154]\nvar arg02 : [Int] = [24, 26, 54, 48]\nvar x0 : [Int] = mergeSortedList(num1 : arg00, num2 : arg01, num3 : arg02)\nvar v0 : [Int] = [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 3, 5, 6, 8, 9]\nvar arg11 : [Int] = [2, 5, 7, 11]\nvar arg12 : [Int] = [1, 4, 7, 8, 12]\nvar x1 : [Int] = mergeSortedList(num1 : arg10, num2 : arg11, num3 : arg12)\nvar v1 : [Int] = [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]\nvar arg21 : [Int] = [25, 35, 22, 85, 14, 65, 75, 25, 58]\nvar arg22 : [Int] = [12, 74, 9, 50, 61, 41]\nvar x2 : [Int] = mergeSortedList(num1 : arg20, num2 : arg21, num3 : arg22)\nvar v2 : [Int] = [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/109", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the count of rotations of a binary string with odd value.\n *\n * >>> oddEquivalent(\"011001\", 6)\n * 3\n * >>> oddEquivalent(\"11011\", 5)\n * 4\n * >>> oddEquivalent(\"1010\", 4)\n * 2\n */\nfunc oddEquivalent(s : String, n : Int) -> Int {\n", "entry_point": "oddEquivalent", "test": "\n\nvar arg00 : String = #\"011001\"#\nvar arg01 : Int = 6\nvar x0 : Int = oddEquivalent(s : arg00, n : arg01)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"11011\"#\nvar arg11 : Int = 5\nvar x1 : Int = oddEquivalent(s : arg10, n : arg11)\nvar v1 : Int = 4\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"1010\"#\nvar arg21 : Int = 4\nvar x2 : Int = oddEquivalent(s : arg20, n : arg21)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the count of rotations of a binary string with odd value.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/110", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n *\n * >>> extractMissing([[6, 9], [15, 34], [48, 70]], 2, 100)\n * [[2, 6], [9, 100], [9, 15], [34, 100], [34, 48], [70, 100]]\n * >>> extractMissing([[7, 2], [15, 19], [38, 50]], 5, 60)\n * [[5, 7], [2, 60], [2, 15], [19, 60], [19, 38], [50, 60]]\n * >>> extractMissing([[7, 2], [15, 19], [38, 50]], 1, 52)\n * [[1, 7], [2, 52], [2, 15], [19, 52], [19, 38], [50, 52]]\n */\nfunc extractMissing(testList : [[Int]], strtVal : Int, stopVal : Int) -> [[Int]] {\n", "entry_point": "extractMissing", "test": "\n\nvar arg00 : [[Int]] = [[6, 9], [15, 34], [48, 70]]\nvar arg01 : Int = 2\nvar arg02 : Int = 100\nvar x0 : [[Int]] = extractMissing(testList : arg00, strtVal : arg01, stopVal : arg02)\nvar v0 : [[Int]] = [[2, 6], [9, 100], [9, 15], [34, 100], [34, 48], [70, 100]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[7, 2], [15, 19], [38, 50]]\nvar arg11 : Int = 5\nvar arg12 : Int = 60\nvar x1 : [[Int]] = extractMissing(testList : arg10, strtVal : arg11, stopVal : arg12)\nvar v1 : [[Int]] = [[5, 7], [2, 60], [2, 15], [19, 60], [19, 38], [50, 60]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[7, 2], [15, 19], [38, 50]]\nvar arg21 : Int = 1\nvar arg22 : Int = 52\nvar x2 : [[Int]] = extractMissing(testList : arg20, strtVal : arg21, stopVal : arg22)\nvar v2 : [[Int]] = [[1, 7], [2, 52], [2, 15], [19, 52], [19, 38], [50, 52]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/111", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n *\n * >>> commonInNestedLists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n * [18, 12]\n * >>> commonInNestedLists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])\n * [5, 23]\n * >>> commonInNestedLists([[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]])\n * [4]\n */\nfunc commonInNestedLists(nestedlist : [[Int]]) -> [Int] {\n", "entry_point": "commonInNestedLists", "test": "\n\nvar arg00 : [[Int]] = [[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]\nvar x0 : [Int] = commonInNestedLists(nestedlist : arg00)\nvar v0 : [Int] = [18, 12]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]\nvar x1 : [Int] = commonInNestedLists(nestedlist : arg10)\nvar v1 : [Int] = [5, 23]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]]\nvar x2 : [Int] = commonInNestedLists(nestedlist : arg20)\nvar v2 : [Int] = [4]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/112", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the perimeter of a cylinder.\n *\n * >>> perimeter(2, 4)\n * 12\n * >>> perimeter(1, 2)\n * 6\n * >>> perimeter(3, 1)\n * 8\n */\nfunc perimeter(diameter : Int, height : Int) -> Int {\n", "entry_point": "perimeter", "test": "\n\nvar arg00 : Int = 2\nvar arg01 : Int = 4\nvar x0 : Int = perimeter(diameter : arg00, height : arg01)\nvar v0 : Int = 12\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar arg11 : Int = 2\nvar x1 : Int = perimeter(diameter : arg10, height : arg11)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 3\nvar arg21 : Int = 1\nvar x2 : Int = perimeter(diameter : arg20, height : arg21)\nvar v2 : Int = 8\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the perimeter of a cylinder.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/113", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a string represents an integer or not.\n *\n * >>> checkInteger(\"python\")\n * false\n * >>> checkInteger(\"1\")\n * true\n * >>> checkInteger(\"12345\")\n * true\n */\nfunc checkInteger(text : String) -> Bool {\n", "entry_point": "checkInteger", "test": "\n\nvar arg00 : String = #\"python\"#\nvar x0 : Bool = checkInteger(text : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"1\"#\nvar x1 : Bool = checkInteger(text : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"12345\"#\nvar x2 : Bool = checkInteger(text : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if a string represents an integer or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/114", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to assign frequency to each tuple in the given tuple list.\n *\n * >>> assignFreq([[6, 5, 8], [2, 7], [6, 5, 8], [6, 5, 8], [9], [2, 7]])\n * \"[(6, 5, 8, 3), (2, 7, 2), (9, 1)]\"\n * >>> assignFreq([[4, 2, 4], [7, 1], [4, 8], [4, 2, 4], [9, 2], [7, 1]])\n * \"[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]\"\n * >>> assignFreq([[11, 13, 10], [17, 21], [4, 2, 3], [17, 21], [9, 2], [4, 2, 3]])\n * \"[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]\"\n */\nfunc assignFreq(testList : [[Int]]) -> String {\n", "entry_point": "assignFreq", "test": "\n\nvar arg00 : [[Int]] = [[6, 5, 8], [2, 7], [6, 5, 8], [6, 5, 8], [9], [2, 7]]\nvar x0 : String = assignFreq(testList : arg00)\nvar v0 : String = #\"[(6, 5, 8, 3), (2, 7, 2), (9, 1)]\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[4, 2, 4], [7, 1], [4, 8], [4, 2, 4], [9, 2], [7, 1]]\nvar x1 : String = assignFreq(testList : arg10)\nvar v1 : String = #\"[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[11, 13, 10], [17, 21], [4, 2, 3], [17, 21], [9, 2], [4, 2, 3]]\nvar x2 : String = assignFreq(testList : arg20)\nvar v2 : String = #\"[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to assign frequency to each tuple in the given tuple list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/115", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether all dictionaries in a list are empty or not.\n *\n * >>> emptyDit([[], [], []])\n * true\n * >>> emptyDit([{1, 2}, [], []])\n * false\n * >>> emptyDit([])\n * true\n */\nfunc emptyDit(list1 : AnyHashable) -> Bool {\n", "entry_point": "emptyDit", "test": "\n\nvar arg00 : AnyHashable = [[], [], []]\nvar x0 : Bool = emptyDit(list1 : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : AnyHashable = [[1, 2], [], []]\nvar x1 : Bool = emptyDit(list1 : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : AnyHashable = []\nvar x2 : Bool = emptyDit(list1 : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether all dictionaries in a list are empty or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/116", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a given tuple of positive integers into an integer.\n *\n * >>> tupleToInt([1, 2, 3])\n * 123\n * >>> tupleToInt([4, 5, 6])\n * 456\n * >>> tupleToInt([5, 6, 7])\n * 567\n */\nfunc tupleToInt(nums : [Int]) -> Int {\n", "entry_point": "tupleToInt", "test": "\n\nvar arg00 : [Int] = [1, 2, 3]\nvar x0 : Int = tupleToInt(nums : arg00)\nvar v0 : Int = 123\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 5, 6]\nvar x1 : Int = tupleToInt(nums : arg10)\nvar v1 : Int = 456\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [5, 6, 7]\nvar x2 : Int = tupleToInt(nums : arg20)\nvar v2 : Int = 567\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert a given tuple of positive integers into an integer.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/117", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert all possible convertible elements in the list to float.\n *\n * >>> listToFloat([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]])\n * \"[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\"\n * >>> listToFloat([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]])\n * \"[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\"\n * >>> listToFloat([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]])\n * \"[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\"\n */\nfunc listToFloat(testList : [[String]]) -> String {\n", "entry_point": "listToFloat", "test": "\n\nvar arg00 : [[String]] = [[#\"3\"#, #\"4\"#], [#\"1\"#, #\"26.45\"#], [#\"7.32\"#, #\"8\"#], [#\"4\"#, #\"8\"#]]\nvar x0 : String = listToFloat(testList : arg00)\nvar v0 : String = #\"[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[String]] = [[#\"4\"#, #\"4\"#], [#\"2\"#, #\"27\"#], [#\"4.12\"#, #\"9\"#], [#\"7\"#, #\"11\"#]]\nvar x1 : String = listToFloat(testList : arg10)\nvar v1 : String = #\"[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[String]] = [[#\"6\"#, #\"78\"#], [#\"5\"#, #\"26.45\"#], [#\"1.33\"#, #\"4\"#], [#\"82\"#, #\"13\"#]]\nvar x2 : String = listToFloat(testList : arg20)\nvar v2 : String = #\"[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert all possible convertible elements in the list to float.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/118", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n *\n * >>> stringToList(\"python programming\")\n * [\"python\", \"programming\"]\n * >>> stringToList(\"lists tuples strings\")\n * [\"lists\", \"tuples\", \"strings\"]\n * >>> stringToList(\"write a program\")\n * [\"write\", \"a\", \"program\"]\n */\nfunc stringToList(string : String) -> [String] {\n", "entry_point": "stringToList", "test": "\n\nvar arg00 : String = #\"python programming\"#\nvar x0 : [String] = stringToList(string : arg00)\nvar v0 : [String] = [#\"python\"#, #\"programming\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"lists tuples strings\"#\nvar x1 : [String] = stringToList(string : arg10)\nvar v1 : [String] = [#\"lists\"#, #\"tuples\"#, #\"strings\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"write a program\"#\nvar x2 : [String] = stringToList(string : arg20)\nvar v2 : [String] = [#\"write\"#, #\"a\"#, #\"program\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/119", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the element that appears only once in a sorted array.\n *\n * >>> search([1, 1, 2, 2, 3], 5)\n * 3\n * >>> search([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8], 11)\n * 8\n * >>> search([1, 2, 2, 3, 3, 4, 4], 7)\n * 1\n */\nfunc search(arr : [Int], n : Int) -> Int {\n", "entry_point": "search", "test": "\n\nvar arg00 : [Int] = [1, 1, 2, 2, 3]\nvar arg01 : Int = 5\nvar x0 : Int = search(arr : arg00, n : arg01)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]\nvar arg11 : Int = 11\nvar x1 : Int = search(arr : arg10, n : arg11)\nvar v1 : Int = 8\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 2, 3, 3, 4, 4]\nvar arg21 : Int = 7\nvar x2 : Int = search(arr : arg20, n : arg21)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the element that appears only once in a sorted array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/120", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum product from the pairs of tuples within a given list.\n *\n * >>> maxProductTuple([[2, 7], [2, 6], [1, 8], [4, 9]])\n * 36\n * >>> maxProductTuple([[10, 20], [15, 2], [5, 10]])\n * 200\n * >>> maxProductTuple([[11, 44], [10, 15], [20, 5], [12, 9]])\n * 484\n */\nfunc maxProductTuple(list1 : [[Int]]) -> Int {\n", "entry_point": "maxProductTuple", "test": "\n\nvar arg00 : [[Int]] = [[2, 7], [2, 6], [1, 8], [4, 9]]\nvar x0 : Int = maxProductTuple(list1 : arg00)\nvar v0 : Int = 36\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[10, 20], [15, 2], [5, 10]]\nvar x1 : Int = maxProductTuple(list1 : arg10)\nvar v1 : Int = 200\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[11, 44], [10, 15], [20, 5], [12, 9]]\nvar x2 : Int = maxProductTuple(list1 : arg20)\nvar v2 : Int = 484\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the maximum product from the pairs of tuples within a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/121", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the triplet with sum of the given array\n *\n * >>> checkTriplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0)\n * true\n * >>> checkTriplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0)\n * false\n * >>> checkTriplet([10, 4, 2, 3, 5], 5, 15, 0)\n * true\n */\nfunc checkTriplet(a : [Int], n : Int, sum : Int, count : Int) -> Bool {\n", "entry_point": "checkTriplet", "test": "\n\nvar arg00 : [Int] = [2, 7, 4, 0, 9, 5, 1, 3]\nvar arg01 : Int = 8\nvar arg02 : Int = 6\nvar arg03 : Int = 0\nvar x0 : Bool = checkTriplet(a : arg00, n : arg01, sum : arg02, count : arg03)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 4, 5, 6, 7, 8, 5, 9]\nvar arg11 : Int = 8\nvar arg12 : Int = 6\nvar arg13 : Int = 0\nvar x1 : Bool = checkTriplet(a : arg10, n : arg11, sum : arg12, count : arg13)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [10, 4, 2, 3, 5]\nvar arg21 : Int = 5\nvar arg22 : Int = 15\nvar arg23 : Int = 0\nvar x2 : Bool = checkTriplet(a : arg20, n : arg21, sum : arg22, count : arg23)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the triplet with sum of the given array", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/122", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find n\u2019th smart number.\n *\n * >>> smartnumber(1)\n * 30\n * >>> smartnumber(50)\n * 273\n * >>> smartnumber(1000)\n * 2664\n */\nfunc smartnumber(n : Int) -> Int {\n", "entry_point": "smartnumber", "test": "\n\nvar arg00 : Int = 1\nvar x0 : Int = smartnumber(n : arg00)\nvar v0 : Int = 30\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 50\nvar x1 : Int = smartnumber(n : arg10)\nvar v1 : Int = 273\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1000\nvar x2 : Int = smartnumber(n : arg20)\nvar v2 : Int = 2664\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find n\u2019th smart number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/123", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n *\n * >>> amicableNumbersSum(999)\n * 504\n * >>> amicableNumbersSum(9999)\n * 31626\n * >>> amicableNumbersSum(99)\n * 0\n */\nfunc amicableNumbersSum(limit : Int) -> Int {\n", "entry_point": "amicableNumbersSum", "test": "\n\nvar arg00 : Int = 999\nvar x0 : Int = amicableNumbersSum(limit : arg00)\nvar v0 : Int = 504\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 9999\nvar x1 : Int = amicableNumbersSum(limit : arg10)\nvar v1 : Int = 31626\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 99\nvar x2 : Int = amicableNumbersSum(limit : arg20)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sum all amicable numbers from 1 to a specified number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/125", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n *\n * >>> findLength(\"11000010001\", 11)\n * 6\n * >>> findLength(\"10111\", 5)\n * 1\n * >>> findLength(\"11011101100101\", 14)\n * 2\n */\nfunc findLength(string : String, n : Int) -> Int {\n", "entry_point": "findLength", "test": "\n\nvar arg00 : String = #\"11000010001\"#\nvar arg01 : Int = 11\nvar x0 : Int = findLength(string : arg00, n : arg01)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"10111\"#\nvar arg11 : Int = 5\nvar x1 : Int = findLength(string : arg10, n : arg11)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"11011101100101\"#\nvar arg21 : Int = 14\nvar x2 : Int = findLength(string : arg20, n : arg21)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/126", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of common divisors of two given numbers.\n *\n * >>> sum(10, 15)\n * 6\n * >>> sum(100, 150)\n * 93\n * >>> sum(4, 6)\n * 3\n */\nfunc sum(a : Int, b : Int) -> Int {\n", "entry_point": "sum", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 15\nvar x0 : Int = sum(a : arg00, b : arg01)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 100\nvar arg11 : Int = 150\nvar x1 : Int = sum(a : arg10, b : arg11)\nvar v1 : Int = 93\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar arg21 : Int = 6\nvar x2 : Int = sum(a : arg20, b : arg21)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of common divisors of two given numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/127", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to multiply two integers without using the * operator in Swift.\n *\n * >>> multiplyInt(10, 20)\n * 200\n * >>> multiplyInt(5, 10)\n * 50\n * >>> multiplyInt(4, 8)\n * 32\n */\nfunc multiplyInt(x : Int, y : Int) -> Int {\n", "entry_point": "multiplyInt", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 20\nvar x0 : Int = multiplyInt(x : arg00, y : arg01)\nvar v0 : Int = 200\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar arg11 : Int = 10\nvar x1 : Int = multiplyInt(x : arg10, y : arg11)\nvar v1 : Int = 50\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar arg21 : Int = 8\nvar x2 : Int = multiplyInt(x : arg20, y : arg21)\nvar v2 : Int = 32\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to multiply two integers without using the * operator in Swift.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/128", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to shortlist words that are longer than n from a given list of words.\n *\n * >>> longWords(3, \"python is a programming language\")\n * [\"python\", \"programming\", \"language\"]\n * >>> longWords(2, \"writing a program\")\n * [\"writing\", \"program\"]\n * >>> longWords(5, \"sorting list\")\n * [\"sorting\"]\n */\nfunc longWords(n : Int, str : String) -> [String] {\n", "entry_point": "longWords", "test": "\n\nvar arg00 : Int = 3\nvar arg01 : String = #\"python is a programming language\"#\nvar x0 : [String] = longWords(n : arg00, str : arg01)\nvar v0 : [String] = [#\"python\"#, #\"programming\"#, #\"language\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar arg11 : String = #\"writing a program\"#\nvar x1 : [String] = longWords(n : arg10, str : arg11)\nvar v1 : [String] = [#\"writing\"#, #\"program\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar arg21 : String = #\"sorting list\"#\nvar x2 : [String] = longWords(n : arg20, str : arg21)\nvar v2 : [String] = [#\"sorting\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to shortlist words that are longer than n from a given list of words.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/129", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate magic square.\n *\n * >>> magicSquareTest([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])\n * true\n * >>> magicSquareTest([[2, 7, 6], [9, 5, 1], [4, 3, 8]])\n * true\n * >>> magicSquareTest([[2, 7, 6], [9, 5, 1], [4, 3, 7]])\n * false\n */\nfunc magicSquareTest(myMatrix : [[Int]]) -> Bool {\n", "entry_point": "magicSquareTest", "test": "\n\nvar arg00 : [[Int]] = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\nvar x0 : Bool = magicSquareTest(myMatrix : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nvar x1 : Bool = magicSquareTest(myMatrix : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 7]]\nvar x2 : Bool = magicSquareTest(myMatrix : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate magic square.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/130", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the item with maximum frequency in a given list.\n *\n * >>> maxOccurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2])\n * [2, 5]\n * >>> maxOccurrences([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18])\n * [8, 2]\n * >>> maxOccurrences([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10])\n * [20, 3]\n */\nfunc maxOccurrences(nums : [Int]) -> [Int] {\n", "entry_point": "maxOccurrences", "test": "\n\nvar arg00 : [Int] = [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]\nvar x0 : [Int] = maxOccurrences(nums : arg00)\nvar v0 : [Int] = [2, 5]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18]\nvar x1 : [Int] = maxOccurrences(nums : arg10)\nvar v1 : [Int] = [8, 2]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]\nvar x2 : [Int] = maxOccurrences(nums : arg20)\nvar v2 : [Int] = [20, 3]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the item with maximum frequency in a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/131", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to reverse only the vowels of a given string.\n *\n * >>> reverseVowels(\"Python\")\n * \"Python\"\n * >>> reverseVowels(\"USA\")\n * \"ASU\"\n * >>> reverseVowels(\"ab\")\n * \"ab\"\n */\nfunc reverseVowels(str1 : String) -> String {\n", "entry_point": "reverseVowels", "test": "\n\nvar arg00 : String = #\"Python\"#\nvar x0 : String = reverseVowels(str1 : arg00)\nvar v0 : String = #\"Python\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"USA\"#\nvar x1 : String = reverseVowels(str1 : arg10)\nvar v1 : String = #\"ASU\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"ab\"#\nvar x2 : String = reverseVowels(str1 : arg20)\nvar v2 : String = #\"ab\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to reverse only the vowels of a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/132", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert tuple to a string.\n *\n * >>> tupString([\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"])\n * \"exercises\"\n * >>> tupString([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"])\n * \"python\"\n * >>> tupString([\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"])\n * \"program\"\n */\nfunc tupString(tup1 : [String]) -> String {\n", "entry_point": "tupString", "test": "\n\nvar arg00 : [String] = [#\"e\"#, #\"x\"#, #\"e\"#, #\"r\"#, #\"c\"#, #\"i\"#, #\"s\"#, #\"e\"#, #\"s\"#]\nvar x0 : String = tupString(tup1 : arg00)\nvar v0 : String = #\"exercises\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"p\"#, #\"y\"#, #\"t\"#, #\"h\"#, #\"o\"#, #\"n\"#]\nvar x1 : String = tupString(tup1 : arg10)\nvar v1 : String = #\"python\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"p\"#, #\"r\"#, #\"o\"#, #\"g\"#, #\"r\"#, #\"a\"#, #\"m\"#]\nvar x2 : String = tupString(tup1 : arg20)\nvar v2 : String = #\"program\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert tuple to a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/133", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n *\n * >>> sumNegativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n * -32\n * >>> sumNegativenum([10, 15, -14, 13, -18, 12, -20])\n * -52\n * >>> sumNegativenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190])\n * -894\n */\nfunc sumNegativenum(nums : [Int]) -> Int {\n", "entry_point": "sumNegativenum", "test": "\n\nvar arg00 : [Int] = [2, 4, -6, -9, 11, -12, 14, -5, 17]\nvar x0 : Int = sumNegativenum(nums : arg00)\nvar v0 : Int = -32\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [10, 15, -14, 13, -18, 12, -20]\nvar x1 : Int = sumNegativenum(nums : arg10)\nvar v1 : Int = -52\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [19, -65, 57, 39, 152, -639, 121, 44, 90, -190]\nvar x2 : Int = sumNegativenum(nums : arg20)\nvar v2 : Int = -894\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/134", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the last element of given array is even or odd after performing an operation p times.\n *\n * >>> checkLast([5, 7, 10], 3, 1)\n * \"ODD\"\n * >>> checkLast([2, 3], 2, 3)\n * \"EVEN\"\n * >>> checkLast([1, 2, 3], 3, 1)\n * \"ODD\"\n */\nfunc checkLast(arr : [Int], n : Int, p : Int) -> String {\n", "entry_point": "checkLast", "test": "\n\nvar arg00 : [Int] = [5, 7, 10]\nvar arg01 : Int = 3\nvar arg02 : Int = 1\nvar x0 : String = checkLast(arr : arg00, n : arg01, p : arg02)\nvar v0 : String = #\"ODD\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 3]\nvar arg11 : Int = 2\nvar arg12 : Int = 3\nvar x1 : String = checkLast(arr : arg10, n : arg11, p : arg12)\nvar v1 : String = #\"EVEN\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3]\nvar arg21 : Int = 3\nvar arg22 : Int = 1\nvar x2 : String = checkLast(arr : arg20, n : arg21, p : arg22)\nvar v2 : String = #\"ODD\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the last element of given array is even or odd after performing an operation p times.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/135", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth hexagonal number.\n *\n * >>> hexagonalNum(10)\n * 190\n * >>> hexagonalNum(5)\n * 45\n * >>> hexagonalNum(7)\n * 91\n */\nfunc hexagonalNum(n : Int) -> Int {\n", "entry_point": "hexagonalNum", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = hexagonalNum(n : arg00)\nvar v0 : Int = 190\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar x1 : Int = hexagonalNum(n : arg10)\nvar v1 : Int = 45\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 7\nvar x2 : Int = hexagonalNum(n : arg20)\nvar v2 : Int = 91\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the nth hexagonal number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/136", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate electricity bill.\n *\n * >>> calElectbill(75)\n * 246.25\n * >>> calElectbill(265)\n * 1442.75\n * >>> calElectbill(100)\n * 327.5\n */\nfunc calElectbill(units : Int) -> Double {\n", "entry_point": "calElectbill", "test": "\n\nvar arg00 : Int = 75\nvar x0 : Double = calElectbill(units : arg00)\nvar v0 : Double = 246.25\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 265\nvar x1 : Double = calElectbill(units : arg10)\nvar v1 : Double = 1442.75\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 100\nvar x2 : Double = calElectbill(units : arg20)\nvar v2 : Double = 327.5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate electricity bill.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/137", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the ration of zeroes in an array of integers.\n *\n * >>> zeroCount([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n * 0.15\n * >>> zeroCount([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n * 0.0\n * >>> zeroCount([2, 4, -6, -9, 11, -12, 14, -5, 17])\n * 0.0\n */\nfunc zeroCount(nums : [Int]) -> Double {\n", "entry_point": "zeroCount", "test": "\n\nvar arg00 : [Int] = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]\nvar x0 : Double = zeroCount(nums : arg00)\nvar v0 : Double = 0.15\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]\nvar x1 : Double = zeroCount(nums : arg10)\nvar v1 : Double = 0.0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 4, -6, -9, 11, -12, 14, -5, 17]\nvar x2 : Double = zeroCount(nums : arg20)\nvar v2 : Double = 0.0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the ration of zeroes in an array of integers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/138", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n *\n * >>> isSumOfPowersOfTwo(10)\n * true\n * >>> isSumOfPowersOfTwo(7)\n * false\n * >>> isSumOfPowersOfTwo(14)\n * true\n */\nfunc isSumOfPowersOfTwo(n : Int) -> Bool {\n", "entry_point": "isSumOfPowersOfTwo", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Bool = isSumOfPowersOfTwo(n : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 7\nvar x1 : Bool = isSumOfPowersOfTwo(n : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 14\nvar x2 : Bool = isSumOfPowersOfTwo(n : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/139", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the circumference of a circle.\n *\n * >>> circleCircumference(10)\n * 62.830000000000005\n * >>> circleCircumference(5)\n * 31.415000000000003\n * >>> circleCircumference(4)\n * 25.132\n */\nfunc circleCircumference(r : Int) -> Double {\n", "entry_point": "circleCircumference", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Double = circleCircumference(r : arg00)\nvar v0 : Double = 62.830000000000005\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar x1 : Double = circleCircumference(r : arg10)\nvar v1 : Double = 31.415000000000003\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar x2 : Double = circleCircumference(r : arg20)\nvar v2 : Double = 25.132\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the circumference of a circle.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/140", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract elements that occur singly in the given tuple list.\n *\n * >>> extractSingly([[3, 4, 5], [4, 5, 7], [1, 4]])\n * [3, 4, 5, 7, 1]\n * >>> extractSingly([[1, 2, 3], [4, 2, 3], [7, 8]])\n * [1, 2, 3, 4, 7, 8]\n * >>> extractSingly([[7, 8, 9], [10, 11, 12], [10, 11]])\n * [7, 8, 9, 10, 11, 12]\n */\nfunc extractSingly(testList : [[Int]]) -> [Int] {\n", "entry_point": "extractSingly", "test": "\n\nvar arg00 : [[Int]] = [[3, 4, 5], [4, 5, 7], [1, 4]]\nvar x0 : [Int] = extractSingly(testList : arg00)\nvar v0 : [Int] = [3, 4, 5, 7, 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1, 2, 3], [4, 2, 3], [7, 8]]\nvar x1 : [Int] = extractSingly(testList : arg10)\nvar v1 : [Int] = [1, 2, 3, 4, 7, 8]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[7, 8, 9], [10, 11, 12], [10, 11]]\nvar x2 : [Int] = extractSingly(testList : arg20)\nvar v2 : [Int] = [7, 8, 9, 10, 11, 12]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract elements that occur singly in the given tuple list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/141", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of elements using pancake sort.\n *\n * >>> pancakeSort([15, 79, 25, 38, 69])\n * [15, 25, 38, 69, 79]\n * >>> pancakeSort([98, 12, 54, 36, 85])\n * [12, 36, 54, 85, 98]\n * >>> pancakeSort([41, 42, 32, 12, 23])\n * [12, 23, 32, 41, 42]\n */\nfunc pancakeSort(nums : [Int]) -> [Int] {\n", "entry_point": "pancakeSort", "test": "\n\nvar arg00 : [Int] = [15, 79, 25, 38, 69]\nvar x0 : [Int] = pancakeSort(nums : arg00)\nvar v0 : [Int] = [15, 25, 38, 69, 79]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [98, 12, 54, 36, 85]\nvar x1 : [Int] = pancakeSort(nums : arg10)\nvar v1 : [Int] = [12, 36, 54, 85, 98]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [41, 42, 32, 12, 23]\nvar x2 : [Int] = pancakeSort(nums : arg20)\nvar v2 : [Int] = [12, 23, 32, 41, 42]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort a list of elements using pancake sort.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/142", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the same pair in three given lists.\n *\n * >>> countSamepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9])\n * 3\n * >>> countSamepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])\n * 4\n * >>> countSamepair([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])\n * 5\n */\nfunc countSamepair(list1 : [Int], list2 : [Int], list3 : [Int]) -> Int {\n", "entry_point": "countSamepair", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8]\nvar arg01 : [Int] = [2, 2, 3, 1, 2, 6, 7, 9]\nvar arg02 : [Int] = [2, 1, 3, 1, 2, 6, 7, 9]\nvar x0 : Int = countSamepair(list1 : arg00, list2 : arg01, list3 : arg02)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8]\nvar arg11 : [Int] = [2, 2, 3, 1, 2, 6, 7, 8]\nvar arg12 : [Int] = [2, 1, 3, 1, 2, 6, 7, 8]\nvar x1 : Int = countSamepair(list1 : arg10, list2 : arg11, list3 : arg12)\nvar v1 : Int = 4\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4, 2, 6, 7, 8]\nvar arg21 : [Int] = [2, 2, 3, 1, 2, 6, 7, 8]\nvar arg22 : [Int] = [2, 1, 3, 1, 2, 6, 7, 8]\nvar x2 : Int = countSamepair(list1 : arg20, list2 : arg21, list3 : arg22)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count the same pair in three given lists.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/143", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find number of lists present in the given tuple.\n *\n * >>> findLists([[1, 2, 3, 4], [5, 6, 7, 8]])\n * 2\n * >>> findLists([9, 8, 7, 6, 5, 4, 3, 2, 1])\n * 1\n */\nfunc findLists(input : [AnyHashable]) -> Int {\n", "entry_point": "findLists", "test": "\n\nvar arg00 : [AnyHashable] = [[1, 2, 3, 4], [5, 6, 7, 8]]\nvar x0 : Int = findLists(input : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [9, 8, 7, 6, 5, 4, 3, 2, 1]\nvar x1 : Int = findLists(input : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\n", "description": "Write a function to find number of lists present in the given tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/144", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of absolute differences in all pairs of the given array.\n *\n * >>> sumPairs([1, 8, 9, 15, 16], 5)\n * 74\n * >>> sumPairs([1, 2, 3, 4], 4)\n * 10\n * >>> sumPairs([1, 2, 3, 4, 5, 7, 9, 11, 14], 9)\n * 188\n */\nfunc sumPairs(arr : [Int], n : Int) -> Int {\n", "entry_point": "sumPairs", "test": "\n\nvar arg00 : [Int] = [1, 8, 9, 15, 16]\nvar arg01 : Int = 5\nvar x0 : Int = sumPairs(arr : arg00, n : arg01)\nvar v0 : Int = 74\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4]\nvar arg11 : Int = 4\nvar x1 : Int = sumPairs(arr : arg10, n : arg11)\nvar v1 : Int = 10\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4, 5, 7, 9, 11, 14]\nvar arg21 : Int = 9\nvar x2 : Int = sumPairs(arr : arg20, n : arg21)\nvar v2 : Int = 188\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of absolute differences in all pairs of the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/145", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum difference between any two elements in a given array.\n *\n * >>> maxAbsDiff([2, 1, 5, 3], 4)\n * 4\n * >>> maxAbsDiff([9, 3, 2, 5, 1], 5)\n * 8\n * >>> maxAbsDiff([3, 2, 1], 3)\n * 2\n */\nfunc maxAbsDiff(arr : [Int], n : Int) -> Int {\n", "entry_point": "maxAbsDiff", "test": "\n\nvar arg00 : [Int] = [2, 1, 5, 3]\nvar arg01 : Int = 4\nvar x0 : Int = maxAbsDiff(arr : arg00, n : arg01)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [9, 3, 2, 5, 1]\nvar arg11 : Int = 5\nvar x1 : Int = maxAbsDiff(arr : arg10, n : arg11)\nvar v1 : Int = 8\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3, 2, 1]\nvar arg21 : Int = 3\nvar x2 : Int = maxAbsDiff(arr : arg20, n : arg21)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the maximum difference between any two elements in a given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/146", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the ascii value of total characters in a string.\n *\n * >>> asciiValueString(\"python\")\n * 112\n * >>> asciiValueString(\"Program\")\n * 80\n * >>> asciiValueString(\"Language\")\n * 76\n */\nfunc asciiValueString(str1 : String) -> Int {\n", "entry_point": "asciiValueString", "test": "\n\nvar arg00 : String = #\"python\"#\nvar x0 : Int = asciiValueString(str1 : arg00)\nvar v0 : Int = 112\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Program\"#\nvar x1 : Int = asciiValueString(str1 : arg10)\nvar v1 : Int = 80\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Language\"#\nvar x2 : Int = asciiValueString(str1 : arg20)\nvar v2 : Int = 76\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the ascii value of total characters in a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/147", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum total path sum in the given triangle.\n *\n * >>> maxPathSum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2)\n * 14\n * >>> maxPathSum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2)\n * 24\n * >>> maxPathSum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2)\n * 53\n */\nfunc maxPathSum(tri : [[Int]], m : Int, n : Int) -> Int {\n", "entry_point": "maxPathSum", "test": "\n\nvar arg00 : [[Int]] = [[1, 0, 0], [4, 8, 0], [1, 5, 3]]\nvar arg01 : Int = 2\nvar arg02 : Int = 2\nvar x0 : Int = maxPathSum(tri : arg00, m : arg01, n : arg02)\nvar v0 : Int = 14\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[13, 0, 0], [7, 4, 0], [2, 4, 6]]\nvar arg11 : Int = 2\nvar arg12 : Int = 2\nvar x1 : Int = maxPathSum(tri : arg10, m : arg11, n : arg12)\nvar v1 : Int = 24\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[2, 0, 0], [11, 18, 0], [21, 25, 33]]\nvar arg21 : Int = 2\nvar arg22 : Int = 2\nvar x2 : Int = maxPathSum(tri : arg20, m : arg21, n : arg22)\nvar v2 : Int = 53\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the maximum total path sum in the given triangle.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/148", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to divide a number into two parts such that the sum of digits is maximum.\n *\n * >>> sumDigitsTwoparts(35)\n * 17\n * >>> sumDigitsTwoparts(7)\n * 7\n * >>> sumDigitsTwoparts(100)\n * 19\n */\nfunc sumDigitsTwoparts(n : Int) -> Int {\n", "entry_point": "sumDigitsTwoparts", "test": "\n\nvar arg00 : Int = 35\nvar x0 : Int = sumDigitsTwoparts(n : arg00)\nvar v0 : Int = 17\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 7\nvar x1 : Int = sumDigitsTwoparts(n : arg10)\nvar v1 : Int = 7\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 100\nvar x2 : Int = sumDigitsTwoparts(n : arg20)\nvar v2 : Int = 19\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to divide a number into two parts such that the sum of digits is maximum.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/149", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n *\n * >>> longestSubseqWithDiffOne([1, 2, 3, 4, 5, 3, 2], 7)\n * 6\n * >>> longestSubseqWithDiffOne([10, 9, 4, 5, 4, 8, 6], 7)\n * 3\n * >>> longestSubseqWithDiffOne([1, 2, 3, 2, 3, 7, 2, 1], 8)\n * 7\n */\nfunc longestSubseqWithDiffOne(arr : [Int], n : Int) -> Int {\n", "entry_point": "longestSubseqWithDiffOne", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5, 3, 2]\nvar arg01 : Int = 7\nvar x0 : Int = longestSubseqWithDiffOne(arr : arg00, n : arg01)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [10, 9, 4, 5, 4, 8, 6]\nvar arg11 : Int = 7\nvar x1 : Int = longestSubseqWithDiffOne(arr : arg10, n : arg11)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 2, 3, 7, 2, 1]\nvar arg21 : Int = 8\nvar x2 : Int = longestSubseqWithDiffOne(arr : arg20, n : arg21)\nvar v2 : Int = 7\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/150", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find whether the given number is present in the infinite sequence or not.\n *\n * >>> doesContainB(1, 7, 3)\n * true\n * >>> doesContainB(1, -3, 5)\n * false\n * >>> doesContainB(3, 2, 5)\n * false\n */\nfunc doesContainB(a : Int, b : Int, c : Int) -> Bool {\n", "entry_point": "doesContainB", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = 7\nvar arg02 : Int = 3\nvar x0 : Bool = doesContainB(a : arg00, b : arg01, c : arg02)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar arg11 : Int = -3\nvar arg12 : Int = 5\nvar x1 : Bool = doesContainB(a : arg10, b : arg11, c : arg12)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 3\nvar arg21 : Int = 2\nvar arg22 : Int = 5\nvar x2 : Bool = doesContainB(a : arg20, b : arg21, c : arg22)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find whether the given number is present in the infinite sequence or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/151", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given number is co-prime or not.\n *\n * >>> isCoprime(17, 13)\n * true\n * >>> isCoprime(15, 21)\n * false\n * >>> isCoprime(25, 45)\n * false\n */\nfunc isCoprime(x : Int, y : Int) -> Bool {\n", "entry_point": "isCoprime", "test": "\n\nvar arg00 : Int = 17\nvar arg01 : Int = 13\nvar x0 : Bool = isCoprime(x : arg00, y : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 15\nvar arg11 : Int = 21\nvar x1 : Bool = isCoprime(x : arg10, y : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 25\nvar arg21 : Int = 45\nvar x2 : Bool = isCoprime(x : arg20, y : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the given number is co-prime or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/152", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the given array by using merge sort.\n *\n * >>> mergeSort([3, 4, 2, 6, 5, 7, 1, 9])\n * [1, 2, 3, 4, 5, 6, 7, 9]\n * >>> mergeSort([7, 25, 45, 78, 11, 33, 19])\n * [7, 11, 19, 25, 33, 45, 78]\n * >>> mergeSort([3, 1, 4, 9, 8])\n * [1, 3, 4, 8, 9]\n */\nfunc mergeSort(x : [Int]) -> [Int] {\n", "entry_point": "mergeSort", "test": "\n\nvar arg00 : [Int] = [3, 4, 2, 6, 5, 7, 1, 9]\nvar x0 : [Int] = mergeSort(x : arg00)\nvar v0 : [Int] = [1, 2, 3, 4, 5, 6, 7, 9]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [7, 25, 45, 78, 11, 33, 19]\nvar x1 : [Int] = mergeSort(x : arg10)\nvar v1 : [Int] = [7, 11, 19, 25, 33, 45, 78]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3, 1, 4, 9, 8]\nvar x2 : [Int] = mergeSort(x : arg20)\nvar v2 : [Int] = [1, 3, 4, 8, 9]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort the given array by using merge sort.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/153", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the vertex of a parabola.\n *\n * >>> parabolaVertex(5, 3, 2)\n * [-0.3, 1.55]\n * >>> parabolaVertex(9, 8, 4)\n * [-0.4444444444444444, 2.2222222222222223]\n * >>> parabolaVertex(2, 4, 6)\n * [-1.0, 4.0]\n */\nfunc parabolaVertex(a : Int, b : Int, c : Int) -> [Double] {\n", "entry_point": "parabolaVertex", "test": "\n\nvar arg00 : Int = 5\nvar arg01 : Int = 3\nvar arg02 : Int = 2\nvar x0 : [Double] = parabolaVertex(a : arg00, b : arg01, c : arg02)\nvar v0 : [Double] = [-0.3, 1.55]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 9\nvar arg11 : Int = 8\nvar arg12 : Int = 4\nvar x1 : [Double] = parabolaVertex(a : arg10, b : arg11, c : arg12)\nvar v1 : [Double] = [-0.4444444444444444, 2.2222222222222223]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar arg21 : Int = 4\nvar arg22 : Int = 6\nvar x2 : [Double] = parabolaVertex(a : arg20, b : arg21, c : arg22)\nvar v2 : [Double] = [-1.0, 4.0]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the vertex of a parabola.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/154", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract every specified element from a given two dimensional list.\n *\n * >>> specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)\n * [1, 4, 7]\n * >>> specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)\n * [3, 6, 9]\n * >>> specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3)\n * [2, 2, 5]\n */\nfunc specifiedElement(nums : [[Int]], n : Int) -> [Int] {\n", "entry_point": "specifiedElement", "test": "\n\nvar arg00 : [[Int]] = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]\nvar arg01 : Int = 0\nvar x0 : [Int] = specifiedElement(nums : arg00, n : arg01)\nvar v0 : [Int] = [1, 4, 7]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]\nvar arg11 : Int = 2\nvar x1 : [Int] = specifiedElement(nums : arg10, n : arg11)\nvar v1 : [Int] = [3, 6, 9]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]\nvar arg21 : Int = 3\nvar x2 : [Int] = specifiedElement(nums : arg20, n : arg21)\nvar v2 : [Int] = [2, 2, 5]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract every specified element from a given two dimensional list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/155", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to toggle all even bits of a given number.\n *\n * >>> evenBitToggleNumber(10)\n * 0\n * >>> evenBitToggleNumber(20)\n * 30\n * >>> evenBitToggleNumber(30)\n * 20\n */\nfunc evenBitToggleNumber(n : Int) -> Int {\n", "entry_point": "evenBitToggleNumber", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = evenBitToggleNumber(n : arg00)\nvar v0 : Int = 0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 20\nvar x1 : Int = evenBitToggleNumber(n : arg10)\nvar v1 : Int = 30\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 30\nvar x2 : Int = evenBitToggleNumber(n : arg20)\nvar v2 : Int = 20\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to toggle all even bits of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/156", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a tuple of string values to a tuple of integer values.\n *\n * >>> tupleIntStr([[\"333\", \"33\"], [\"1416\", \"55\"]])\n * [[333, 33], [1416, 55]]\n * >>> tupleIntStr([[\"999\", \"99\"], [\"1000\", \"500\"]])\n * [[999, 99], [1000, 500]]\n * >>> tupleIntStr([[\"666\", \"66\"], [\"1500\", \"555\"]])\n * [[666, 66], [1500, 555]]\n */\nfunc tupleIntStr(tupleStr : [[String]]) -> [[Int]] {\n", "entry_point": "tupleIntStr", "test": "\n\nvar arg00 : [[String]] = [[#\"333\"#, #\"33\"#], [#\"1416\"#, #\"55\"#]]\nvar x0 : [[Int]] = tupleIntStr(tupleStr : arg00)\nvar v0 : [[Int]] = [[333, 33], [1416, 55]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[String]] = [[#\"999\"#, #\"99\"#], [#\"1000\"#, #\"500\"#]]\nvar x1 : [[Int]] = tupleIntStr(tupleStr : arg10)\nvar v1 : [[Int]] = [[999, 99], [1000, 500]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[String]] = [[#\"666\"#, #\"66\"#], [#\"1500\"#, #\"555\"#]]\nvar x2 : [[Int]] = tupleIntStr(tupleStr : arg20)\nvar v2 : [[Int]] = [[666, 66], [1500, 555]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert a tuple of string values to a tuple of integer values.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/157", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to reflect the run-length encoding from a list.\n *\n * >>> encodeList([1, 1, 2, 3, 4, 4.3, 5, 1])\n * [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n * >>> encodeList(\"automatically\")\n * [[1, \"a\"], [1, \"u\"], [1, \"t\"], [1, \"o\"], [1, \"m\"], [1, \"a\"], [1, \"t\"], [1, \"i\"], [1, \"c\"], [1, \"a\"], [2, \"l\"], [1, \"y\"]]\n * >>> encodeList(\"python\")\n * [[1, \"p\"], [1, \"y\"], [1, \"t\"], [1, \"h\"], [1, \"o\"], [1, \"n\"]]\n */\nfunc encodeList(list1 : AnyHashable) -> [[AnyHashable]] {\n", "entry_point": "encodeList", "test": "\n\nvar arg00 : AnyHashable = [1, 1, 2, 3, 4, 4.3, 5, 1]\nvar x0 : [[AnyHashable]] = encodeList(list1 : arg00)\nvar v0 : [[AnyHashable]] = [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : AnyHashable = #\"automatically\"#\nvar x1 : [[AnyHashable]] = encodeList(list1 : arg10)\nvar v1 : [[AnyHashable]] = [[1, #\"a\"#], [1, #\"u\"#], [1, #\"t\"#], [1, #\"o\"#], [1, #\"m\"#], [1, #\"a\"#], [1, #\"t\"#], [1, #\"i\"#], [1, #\"c\"#], [1, #\"a\"#], [2, #\"l\"#], [1, #\"y\"#]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : AnyHashable = #\"python\"#\nvar x2 : [[AnyHashable]] = encodeList(list1 : arg20)\nvar v2 : [[AnyHashable]] = [[1, #\"p\"#], [1, #\"y\"#], [1, #\"t\"#], [1, #\"h\"#], [1, #\"o\"#], [1, #\"n\"#]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to reflect the run-length encoding from a list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/158", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find k number of operations required to make all elements equal.\n *\n * >>> minOps([2, 2, 2, 2], 4, 3)\n * 0\n * >>> minOps([4, 2, 6, 8], 4, 3)\n * -1\n * >>> minOps([21, 33, 9, 45, 63], 5, 6)\n * 24\n */\nfunc minOps(arr : [Int], n : Int, k : Int) -> Int {\n", "entry_point": "minOps", "test": "\n\nvar arg00 : [Int] = [2, 2, 2, 2]\nvar arg01 : Int = 4\nvar arg02 : Int = 3\nvar x0 : Int = minOps(arr : arg00, n : arg01, k : arg02)\nvar v0 : Int = 0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 2, 6, 8]\nvar arg11 : Int = 4\nvar arg12 : Int = 3\nvar x1 : Int = minOps(arr : arg10, n : arg11, k : arg12)\nvar v1 : Int = -1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [21, 33, 9, 45, 63]\nvar arg21 : Int = 5\nvar arg22 : Int = 6\nvar x2 : Int = minOps(arr : arg20, n : arg21, k : arg22)\nvar v2 : Int = 24\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find k number of operations required to make all elements equal.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/159", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print the season for the given month and day.\n *\n * >>> monthSeason(\"January\", 4)\n * \"winter\"\n * >>> monthSeason(\"October\", 28)\n * \"autumn\"\n * >>> monthSeason(\"June\", 6)\n * \"spring\"\n */\nfunc monthSeason(month : String, days : Int) -> String {\n", "entry_point": "monthSeason", "test": "\n\nvar arg00 : String = #\"January\"#\nvar arg01 : Int = 4\nvar x0 : String = monthSeason(month : arg00, days : arg01)\nvar v0 : String = #\"winter\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"October\"#\nvar arg11 : Int = 28\nvar x1 : String = monthSeason(month : arg10, days : arg11)\nvar v1 : String = #\"autumn\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"June\"#\nvar arg21 : Int = 6\nvar x2 : String = monthSeason(month : arg20, days : arg21)\nvar v2 : String = #\"spring\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to print the season for the given month and day.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/160", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find x and y that satisfies ax + by = n.\n *\n * >>> solution(2, 3, 7)\n * [\"x = \", 2, \", y = \", 1]\n * >>> solution(4, 2, 7)\n * \"No solution\"\n * >>> solution(1, 13, 17)\n * [\"x = \", 4, \", y = \", 1]\n */\nfunc solution(a : Int, b : Int, n : Int) -> AnyHashable {\n", "entry_point": "solution", "test": "\n\nvar arg00 : Int = 2\nvar arg01 : Int = 3\nvar arg02 : Int = 7\nvar x0 : AnyHashable = solution(a : arg00, b : arg01, n : arg02)\nvar v0 : AnyHashable = [#\"x = \"#, 2, #\", y = \"#, 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar arg11 : Int = 2\nvar arg12 : Int = 7\nvar x1 : AnyHashable = solution(a : arg10, b : arg11, n : arg12)\nvar v1 : AnyHashable = #\"No solution\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = 13\nvar arg22 : Int = 17\nvar x2 : AnyHashable = solution(a : arg20, b : arg21, n : arg22)\nvar v2 : AnyHashable = [#\"x = \"#, 4, #\", y = \"#, 1]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find x and y that satisfies ax + by = n.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/161", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all elements from a given list present in another list.\n *\n * >>> removeElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])\n * [1, 3, 5, 7, 9, 10]\n * >>> removeElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7])\n * [2, 4, 6, 8, 9, 10]\n * >>> removeElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7])\n * [1, 2, 3, 4, 6, 8, 9, 10]\n */\nfunc removeElements(list1 : [Int], list2 : [Int]) -> [Int] {\n", "entry_point": "removeElements", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar arg01 : [Int] = [2, 4, 6, 8]\nvar x0 : [Int] = removeElements(list1 : arg00, list2 : arg01)\nvar v0 : [Int] = [1, 3, 5, 7, 9, 10]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar arg11 : [Int] = [1, 3, 5, 7]\nvar x1 : [Int] = removeElements(list1 : arg10, list2 : arg11)\nvar v1 : [Int] = [2, 4, 6, 8, 9, 10]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar arg21 : [Int] = [5, 7]\nvar x2 : [Int] = removeElements(list1 : arg20, list2 : arg21)\nvar v2 : [Int] = [1, 2, 3, 4, 6, 8, 9, 10]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove all elements from a given list present in another list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/162", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n *\n * >>> sumSeries(6)\n * 12\n * >>> sumSeries(10)\n * 30\n * >>> sumSeries(9)\n * 25\n */\nfunc sumSeries(n : Int) -> Int {\n", "entry_point": "sumSeries", "test": "\n\nvar arg00 : Int = 6\nvar x0 : Int = sumSeries(n : arg00)\nvar v0 : Int = 12\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar x1 : Int = sumSeries(n : arg10)\nvar v1 : Int = 30\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 9\nvar x2 : Int = sumSeries(n : arg20)\nvar v2 : Int = 25\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/163", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the area of a regular polygon.\n *\n * >>> areaPolygon(4, 20)\n * 400.00000000000006\n * >>> areaPolygon(10, 15)\n * 1731.1969896610804\n * >>> areaPolygon(9, 7)\n * 302.90938549487214\n */\nfunc areaPolygon(s : Int, l : Int) -> Double {\n", "entry_point": "areaPolygon", "test": "\n\nvar arg00 : Int = 4\nvar arg01 : Int = 20\nvar x0 : Double = areaPolygon(s : arg00, l : arg01)\nvar v0 : Double = 400.00000000000006\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar arg11 : Int = 15\nvar x1 : Double = areaPolygon(s : arg10, l : arg11)\nvar v1 : Double = 1731.1969896610804\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 9\nvar arg21 : Int = 7\nvar x2 : Double = areaPolygon(s : arg20, l : arg21)\nvar v2 : Double = 302.90938549487214\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate the area of a regular polygon.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/164", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the sum of divisors are same or not.\n *\n * >>> areequivalent(36, 57)\n * false\n * >>> areequivalent(2, 4)\n * false\n * >>> areequivalent(23, 47)\n * true\n */\nfunc areequivalent(num1 : Int, num2 : Int) -> Bool {\n", "entry_point": "areequivalent", "test": "\n\nvar arg00 : Int = 36\nvar arg01 : Int = 57\nvar x0 : Bool = areequivalent(num1 : arg00, num2 : arg01)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar arg11 : Int = 4\nvar x1 : Bool = areequivalent(num1 : arg10, num2 : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 23\nvar arg21 : Int = 47\nvar x2 : Bool = areequivalent(num1 : arg20, num2 : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the sum of divisors are same or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/165", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n *\n * >>> countCharPosition(\"xbcefg\")\n * 2\n * >>> countCharPosition(\"ABcED\")\n * 3\n * >>> countCharPosition(\"AbgdeF\")\n * 5\n */\nfunc countCharPosition(str1 : String) -> Int {\n", "entry_point": "countCharPosition", "test": "\n\nvar arg00 : String = #\"xbcefg\"#\nvar x0 : Int = countCharPosition(str1 : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"ABcED\"#\nvar x1 : Int = countCharPosition(str1 : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"AbgdeF\"#\nvar x2 : Int = countCharPosition(str1 : arg20)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/166", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the pairs with xor as an even number.\n *\n * >>> findEvenPair([5, 4, 7, 2, 1], 5)\n * 4\n * >>> findEvenPair([7, 2, 8, 1, 0, 5, 11], 7)\n * 9\n * >>> findEvenPair([1, 2, 3], 3)\n * 1\n */\nfunc findEvenPair(a : [Int], n : Int) -> Int {\n", "entry_point": "findEvenPair", "test": "\n\nvar arg00 : [Int] = [5, 4, 7, 2, 1]\nvar arg01 : Int = 5\nvar x0 : Int = findEvenPair(a : arg00, n : arg01)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [7, 2, 8, 1, 0, 5, 11]\nvar arg11 : Int = 7\nvar x1 : Int = findEvenPair(a : arg10, n : arg11)\nvar v1 : Int = 9\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3]\nvar arg21 : Int = 3\nvar x2 : Int = findEvenPair(a : arg20, n : arg21)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the pairs with xor as an even number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/167", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find smallest power of 2 greater than or equal to n.\n *\n * >>> nextPowerOf2(0)\n * 1\n * >>> nextPowerOf2(5)\n * 8\n * >>> nextPowerOf2(17)\n * 32\n */\nfunc nextPowerOf2(n : Int) -> Int {\n", "entry_point": "nextPowerOf2", "test": "\n\nvar arg00 : Int = 0\nvar x0 : Int = nextPowerOf2(n : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar x1 : Int = nextPowerOf2(n : arg10)\nvar v1 : Int = 8\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 17\nvar x2 : Int = nextPowerOf2(n : arg20)\nvar v2 : Int = 32\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find smallest power of 2 greater than or equal to n.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/168", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the frequency of a number in a given array.\n *\n * >>> frequency([1, 2, 3], 4)\n * 0\n * >>> frequency([1, 2, 2, 3, 3, 3, 4], 3)\n * 3\n * >>> frequency([0, 1, 2, 3, 1, 2], 1)\n * 2\n */\nfunc frequency(a : [Int], x : Int) -> Int {\n", "entry_point": "frequency", "test": "\n\nvar arg00 : [Int] = [1, 2, 3]\nvar arg01 : Int = 4\nvar x0 : Int = frequency(a : arg00, x : arg01)\nvar v0 : Int = 0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 2, 3, 3, 3, 4]\nvar arg11 : Int = 3\nvar x1 : Int = frequency(a : arg10, x : arg11)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [0, 1, 2, 3, 1, 2]\nvar arg21 : Int = 1\nvar x2 : Int = frequency(a : arg20, x : arg21)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the frequency of a number in a given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/169", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the nth pell number.\n *\n * >>> getPell(4)\n * 12\n * >>> getPell(7)\n * 169\n * >>> getPell(8)\n * 408\n */\nfunc getPell(n : Int) -> Int {\n", "entry_point": "getPell", "test": "\n\nvar arg00 : Int = 4\nvar x0 : Int = getPell(n : arg00)\nvar v0 : Int = 12\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 7\nvar x1 : Int = getPell(n : arg10)\nvar v1 : Int = 169\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 8\nvar x2 : Int = getPell(n : arg20)\nvar v2 : Int = 408\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate the nth pell number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/170", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find sum of the numbers in a list between the indices of a specified range.\n *\n * >>> sumRangeList([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n * 29\n * >>> sumRangeList([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7)\n * 16\n * >>> sumRangeList([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10)\n * 38\n */\nfunc sumRangeList(list1 : [Int], m : Int, n : Int) -> Int {\n", "entry_point": "sumRangeList", "test": "\n\nvar arg00 : [Int] = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12]\nvar arg01 : Int = 8\nvar arg02 : Int = 10\nvar x0 : Int = sumRangeList(list1 : arg00, m : arg01, n : arg02)\nvar v0 : Int = 29\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12]\nvar arg11 : Int = 5\nvar arg12 : Int = 7\nvar x1 : Int = sumRangeList(list1 : arg10, m : arg11, n : arg12)\nvar v1 : Int = 16\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12]\nvar arg21 : Int = 7\nvar arg22 : Int = 10\nvar x2 : Int = sumRangeList(list1 : arg20, m : arg21, n : arg22)\nvar v2 : Int = 38\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find sum of the numbers in a list between the indices of a specified range.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/171", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a pentagon.\n *\n * >>> perimeterPentagon(5)\n * 25\n * >>> perimeterPentagon(10)\n * 50\n * >>> perimeterPentagon(15)\n * 75\n */\nfunc perimeterPentagon(a : Int) -> Int {\n", "entry_point": "perimeterPentagon", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Int = perimeterPentagon(a : arg00)\nvar v0 : Int = 25\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar x1 : Int = perimeterPentagon(a : arg10)\nvar v1 : Int = 50\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 15\nvar x2 : Int = perimeterPentagon(a : arg20)\nvar v2 : Int = 75\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the perimeter of a pentagon.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/172", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n *\n * >>> countOccurance(\"letstdlenstdporstd\")\n * 3\n * >>> countOccurance(\"truststdsolensporsd\")\n * 1\n * >>> countOccurance(\"makestdsostdworthit\")\n * 2\n */\nfunc countOccurance(s : String) -> Int {\n", "entry_point": "countOccurance", "test": "\n\nvar arg00 : String = #\"letstdlenstdporstd\"#\nvar x0 : Int = countOccurance(s : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"truststdsolensporsd\"#\nvar x1 : Int = countOccurance(s : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"makestdsostdworthit\"#\nvar x2 : Int = countOccurance(s : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/173", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove everything except alphanumeric characters from a string.\n *\n * >>> removeSplchar(\"python  @#&^%\\$*program123\")\n * \"pythonprogram123\"\n * >>> removeSplchar(\"python %^\\$@!^&*()  programming24%\\$^^()    language\")\n * \"pythonprogramming24language\"\n * >>> removeSplchar(\"python   ^%&^()(+_)(_^&67)                  program\")\n * \"python67program\"\n */\nfunc removeSplchar(text : String) -> String {\n", "entry_point": "removeSplchar", "test": "\n\nvar arg00 : String = #\"python  @#&^%\\$*program123\"#\nvar x0 : String = removeSplchar(text : arg00)\nvar v0 : String = #\"pythonprogram123\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"python %^\\$@!^&*()  programming24%\\$^^()    language\"#\nvar x1 : String = removeSplchar(text : arg10)\nvar v1 : String = #\"pythonprogramming24language\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"python   ^%&^()(+_)(_^&67)                  program\"#\nvar x2 : String = removeSplchar(text : arg20)\nvar v2 : String = #\"python67program\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove everything except alphanumeric characters from a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/174", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to group a sequence of key-value pairs into a dictionary of lists.\n *\n * >>> groupKeyvalue([[\"yellow\", 1], [\"blue\", 2], [\"yellow\", 3], [\"blue\", 4], [\"red\", 1]])\n * [\"yellow\" : [1, 3], \"blue\" : [2, 4], \"red\" : [1]]\n * >>> groupKeyvalue([[\"python\", 1], [\"python\", 2], [\"python\", 3], [\"python\", 4], [\"python\", 5]])\n * [\"python\" : [1, 2, 3, 4, 5]]\n * >>> groupKeyvalue([[\"yellow\", 100], [\"blue\", 200], [\"yellow\", 300], [\"blue\", 400], [\"red\", 100]])\n * [\"yellow\" : [100, 300], \"blue\" : [200, 400], \"red\" : [100]]\n */\nfunc groupKeyvalue(l : [[AnyHashable]]) -> [String: [Int]] {\n", "entry_point": "groupKeyvalue", "test": "\n\nvar arg00 : [[AnyHashable]] = [[#\"yellow\"#, 1], [#\"blue\"#, 2], [#\"yellow\"#, 3], [#\"blue\"#, 4], [#\"red\"#, 1]]\nvar x0 : [String: [Int]] = groupKeyvalue(l : arg00)\nvar v0 : [String: [Int]] = [#\"yellow\"# : [1, 3], #\"blue\"# : [2, 4], #\"red\"# : [1]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[#\"python\"#, 1], [#\"python\"#, 2], [#\"python\"#, 3], [#\"python\"#, 4], [#\"python\"#, 5]]\nvar x1 : [String: [Int]] = groupKeyvalue(l : arg10)\nvar v1 : [String: [Int]] = [#\"python\"# : [1, 2, 3, 4, 5]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[#\"yellow\"#, 100], [#\"blue\"#, 200], [#\"yellow\"#, 300], [#\"blue\"#, 400], [#\"red\"#, 100]]\nvar x2 : [String: [Int]] = groupKeyvalue(l : arg20)\nvar v2 : [String: [Int]] = [#\"yellow\"# : [100, 300], #\"blue\"# : [200, 400], #\"red\"# : [100]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to group a sequence of key-value pairs into a dictionary of lists.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/175", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to verify validity of a string of parentheses.\n *\n * >>> isValidParenthese(\"(){}[]\")\n * true\n * >>> isValidParenthese(\"()[{)}\")\n * false\n * >>> isValidParenthese(\"()\")\n * true\n */\nfunc isValidParenthese(str1 : String) -> Bool {\n", "entry_point": "isValidParenthese", "test": "\n\nvar arg00 : String = #\"(){}[]\"#\nvar x0 : Bool = isValidParenthese(str1 : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"()[{)}\"#\nvar x1 : Bool = isValidParenthese(str1 : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"()\"#\nvar x2 : Bool = isValidParenthese(str1 : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to verify validity of a string of parentheses.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/176", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a triangle.\n *\n * >>> perimeterTriangle(10, 20, 30)\n * 60\n * >>> perimeterTriangle(3, 4, 5)\n * 12\n * >>> perimeterTriangle(25, 35, 45)\n * 105\n */\nfunc perimeterTriangle(a : Int, b : Int, c : Int) -> Int {\n", "entry_point": "perimeterTriangle", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 20\nvar arg02 : Int = 30\nvar x0 : Int = perimeterTriangle(a : arg00, b : arg01, c : arg02)\nvar v0 : Int = 60\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar arg11 : Int = 4\nvar arg12 : Int = 5\nvar x1 : Int = perimeterTriangle(a : arg10, b : arg11, c : arg12)\nvar v1 : Int = 12\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 25\nvar arg21 : Int = 35\nvar arg22 : Int = 45\nvar x2 : Int = perimeterTriangle(a : arg20, b : arg21, c : arg22)\nvar v2 : Int = 105\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the perimeter of a triangle.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/177", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find two distinct numbers such that their lcm lies within the given range.\n *\n * >>> answer(3, 8)\n * [3, 6]\n * >>> answer(2, 6)\n * [2, 4]\n * >>> answer(1, 3)\n * [1, 2]\n */\nfunc answer(l : Int, r : Int) -> [Int] {\n", "entry_point": "answer", "test": "\n\nvar arg00 : Int = 3\nvar arg01 : Int = 8\nvar x0 : [Int] = answer(l : arg00, r : arg01)\nvar v0 : [Int] = [3, 6]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar arg11 : Int = 6\nvar x1 : [Int] = answer(l : arg10, r : arg11)\nvar v1 : [Int] = [2, 4]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = 3\nvar x2 : [Int] = answer(l : arg20, r : arg21)\nvar v2 : [Int] = [1, 2]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find two distinct numbers such that their lcm lies within the given range.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/178", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to search some literals strings in a string.\n *\n * >>> stringLiterals([\"language\"], \"python language\")\n * \"Matched!\"\n * >>> stringLiterals([\"program\"], \"python language\")\n * \"Not Matched!\"\n * >>> stringLiterals([\"python\"], \"programming language\")\n * \"Not Matched!\"\n */\nfunc stringLiterals(patterns : [String], text : String) -> String {\n", "entry_point": "stringLiterals", "test": "\n\nvar arg00 : [String] = [#\"language\"#]\nvar arg01 : String = #\"python language\"#\nvar x0 : String = stringLiterals(patterns : arg00, text : arg01)\nvar v0 : String = #\"Matched!\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"program\"#]\nvar arg11 : String = #\"python language\"#\nvar x1 : String = stringLiterals(patterns : arg10, text : arg11)\nvar v1 : String = #\"Not Matched!\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"python\"#]\nvar arg21 : String = #\"programming language\"#\nvar x2 : String = stringLiterals(patterns : arg20, text : arg21)\nvar v2 : String = #\"Not Matched!\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to search some literals strings in a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/179", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find if the given number is a keith number or not.\n *\n * >>> isNumKeith(14)\n * true\n * >>> isNumKeith(12)\n * false\n * >>> isNumKeith(197)\n * true\n */\nfunc isNumKeith(x : Int) -> Bool {\n", "entry_point": "isNumKeith", "test": "\n\nvar arg00 : Int = 14\nvar x0 : Bool = isNumKeith(x : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 12\nvar x1 : Bool = isNumKeith(x : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 197\nvar x2 : Bool = isNumKeith(x : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find if the given number is a keith number or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/180", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate distance between two points using latitude and longitude.\n *\n * >>> distanceLatLong(23.5, 67.5, 25.5, 69.5)\n * 12179.372041317429\n * >>> distanceLatLong(10.5, 20.5, 30.5, 40.5)\n * 6069.397933300514\n * >>> distanceLatLong(10, 20, 30, 40)\n * 6783.751974994595\n */\nfunc distanceLatLong(slat : Double, slon : Double, elat : Double, elon : Double) -> Double {\n", "entry_point": "distanceLatLong", "test": "\n\nvar arg00 : Double = 23.5\nvar arg01 : Double = 67.5\nvar arg02 : Double = 25.5\nvar arg03 : Double = 69.5\nvar x0 : Double = distanceLatLong(slat : arg00, slon : arg01, elat : arg02, elon : arg03)\nvar v0 : Double = 12179.372041317429\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Double = 10.5\nvar arg11 : Double = 20.5\nvar arg12 : Double = 30.5\nvar arg13 : Double = 40.5\nvar x1 : Double = distanceLatLong(slat : arg10, slon : arg11, elat : arg12, elon : arg13)\nvar v1 : Double = 6069.397933300514\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Double = 10\nvar arg21 : Double = 20\nvar arg22 : Double = 30\nvar arg23 : Double = 40\nvar x2 : Double = distanceLatLong(slat : arg20, slon : arg21, elat : arg22, elon : arg23)\nvar v2 : Double = 6783.751974994595\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate distance between two points using latitude and longitude.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/181", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the longest common prefix in the given set of strings.\n *\n * >>> commonPrefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4)\n * \"ta\"\n * >>> commonPrefix([\"apples\", \"ape\", \"april\"], 3)\n * \"ap\"\n * >>> commonPrefix([\"teens\", \"teenager\", \"teenmar\"], 3)\n * \"teen\"\n */\nfunc commonPrefix(arr : [String], n : Int) -> String {\n", "entry_point": "commonPrefix", "test": "\n\nvar arg00 : [String] = [#\"tablets\"#, #\"tables\"#, #\"taxi\"#, #\"tamarind\"#]\nvar arg01 : Int = 4\nvar x0 : String = commonPrefix(arr : arg00, n : arg01)\nvar v0 : String = #\"ta\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"apples\"#, #\"ape\"#, #\"april\"#]\nvar arg11 : Int = 3\nvar x1 : String = commonPrefix(arr : arg10, n : arg11)\nvar v1 : String = #\"ap\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"teens\"#, #\"teenager\"#, #\"teenmar\"#]\nvar arg21 : Int = 3\nvar x2 : String = commonPrefix(arr : arg20, n : arg21)\nvar v2 : String = #\"teen\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the longest common prefix in the given set of strings.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/182", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find uppercase, lowercase, special character and numeric values using regex.\n *\n * >>> findCharacter(\"ThisIsGeeksforGeeks\")\n * [[\"T\", \"I\", \"G\", \"G\"], [\"h\", \"i\", \"s\", \"s\", \"e\", \"e\", \"k\", \"s\", \"f\", \"o\", \"r\", \"e\", \"e\", \"k\", \"s\"], [], []]\n * >>> findCharacter(\"Hithere2\")\n * [[\"H\"], [\"i\", \"t\", \"h\", \"e\", \"r\", \"e\"], [\"2\"], []]\n * >>> findCharacter(\"HeyFolks32\")\n * [[\"H\", \"F\"], [\"e\", \"y\", \"o\", \"l\", \"k\", \"s\"], [\"3\", \"2\"], []]\n */\nfunc findCharacter(string : String) -> [[AnyHashable]] {\n", "entry_point": "findCharacter", "test": "\n\nvar arg00 : String = #\"ThisIsGeeksforGeeks\"#\nvar x0 : [[AnyHashable]] = findCharacter(string : arg00)\nvar v0 : [[AnyHashable]] = [[#\"T\"#, #\"I\"#, #\"G\"#, #\"G\"#], [#\"h\"#, #\"i\"#, #\"s\"#, #\"s\"#, #\"e\"#, #\"e\"#, #\"k\"#, #\"s\"#, #\"f\"#, #\"o\"#, #\"r\"#, #\"e\"#, #\"e\"#, #\"k\"#, #\"s\"#], [], []]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Hithere2\"#\nvar x1 : [[AnyHashable]] = findCharacter(string : arg10)\nvar v1 : [[AnyHashable]] = [[#\"H\"#], [#\"i\"#, #\"t\"#, #\"h\"#, #\"e\"#, #\"r\"#, #\"e\"#], [#\"2\"#], []]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"HeyFolks32\"#\nvar x2 : [[AnyHashable]] = findCharacter(string : arg20)\nvar v2 : [[AnyHashable]] = [[#\"H\"#, #\"F\"#], [#\"e\"#, #\"y\"#, #\"o\"#, #\"l\"#, #\"k\"#, #\"s\"#], [#\"3\"#, #\"2\"#], []]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find uppercase, lowercase, special character and numeric values using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/183", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count all the distinct pairs having a difference of k in any array.\n *\n * >>> countPairs([1, 5, 3, 4, 2], 5, 3)\n * 2\n * >>> countPairs([8, 12, 16, 4, 0, 20], 6, 4)\n * 5\n * >>> countPairs([2, 4, 1, 3, 4], 5, 2)\n * 3\n */\nfunc countPairs(arr : [Int], n : Int, k : Int) -> Int {\n", "entry_point": "countPairs", "test": "\n\nvar arg00 : [Int] = [1, 5, 3, 4, 2]\nvar arg01 : Int = 5\nvar arg02 : Int = 3\nvar x0 : Int = countPairs(arr : arg00, n : arg01, k : arg02)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [8, 12, 16, 4, 0, 20]\nvar arg11 : Int = 6\nvar arg12 : Int = 4\nvar x1 : Int = countPairs(arr : arg10, n : arg11, k : arg12)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 4, 1, 3, 4]\nvar arg21 : Int = 5\nvar arg22 : Int = 2\nvar x2 : Int = countPairs(arr : arg20, n : arg21, k : arg22)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count all the distinct pairs having a difference of k in any array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/184", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all the values in a list that are greater than a specified number.\n *\n * >>> greaterSpecificnum([220, 330, 500], 200)\n * true\n * >>> greaterSpecificnum([12, 17, 21], 20)\n * false\n * >>> greaterSpecificnum([1, 2, 3, 4], 10)\n * false\n */\nfunc greaterSpecificnum(list : [Int], num : Int) -> Bool {\n", "entry_point": "greaterSpecificnum", "test": "\n\nvar arg00 : [Int] = [220, 330, 500]\nvar arg01 : Int = 200\nvar x0 : Bool = greaterSpecificnum(list : arg00, num : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [12, 17, 21]\nvar arg11 : Int = 20\nvar x1 : Bool = greaterSpecificnum(list : arg10, num : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4]\nvar arg21 : Int = 10\nvar x2 : Bool = greaterSpecificnum(list : arg20, num : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find all the values in a list that are greater than a specified number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/185", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the focus of a parabola.\n *\n * >>> parabolaFocus(5, 3, 2)\n * [-0.3, 1.6]\n * >>> parabolaFocus(9, 8, 4)\n * [-0.4444444444444444, 2.25]\n * >>> parabolaFocus(2, 4, 6)\n * [-1.0, 4.125]\n */\nfunc parabolaFocus(a : Int, b : Int, c : Int) -> [Double] {\n", "entry_point": "parabolaFocus", "test": "\n\nvar arg00 : Int = 5\nvar arg01 : Int = 3\nvar arg02 : Int = 2\nvar x0 : [Double] = parabolaFocus(a : arg00, b : arg01, c : arg02)\nvar v0 : [Double] = [-0.3, 1.6]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 9\nvar arg11 : Int = 8\nvar arg12 : Int = 4\nvar x1 : [Double] = parabolaFocus(a : arg10, b : arg11, c : arg12)\nvar v1 : [Double] = [-0.4444444444444444, 2.25]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar arg21 : Int = 4\nvar arg22 : Int = 6\nvar x2 : [Double] = parabolaFocus(a : arg20, b : arg21, c : arg22)\nvar v2 : [Double] = [-1.0, 4.125]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the focus of a parabola.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/186", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to search some literals strings in a string by using regex.\n *\n * >>> checkLiterals(\"The quick brown fox jumps over the lazy dog.\", [\"fox\"])\n * \"Matched!\"\n * >>> checkLiterals(\"The quick brown fox jumps over the lazy dog.\", [\"horse\"])\n * \"Not Matched!\"\n * >>> checkLiterals(\"The quick brown fox jumps over the lazy dog.\", [\"lazy\"])\n * \"Matched!\"\n */\nfunc checkLiterals(text : String, patterns : [String]) -> String {\n", "entry_point": "checkLiterals", "test": "\n\nvar arg00 : String = #\"The quick brown fox jumps over the lazy dog.\"#\nvar arg01 : [String] = [#\"fox\"#]\nvar x0 : String = checkLiterals(text : arg00, patterns : arg01)\nvar v0 : String = #\"Matched!\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"The quick brown fox jumps over the lazy dog.\"#\nvar arg11 : [String] = [#\"horse\"#]\nvar x1 : String = checkLiterals(text : arg10, patterns : arg11)\nvar v1 : String = #\"Not Matched!\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"The quick brown fox jumps over the lazy dog.\"#\nvar arg21 : [String] = [#\"lazy\"#]\nvar x2 : String = checkLiterals(text : arg20, patterns : arg21)\nvar v2 : String = #\"Matched!\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to search some literals strings in a string by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/187", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the longest common subsequence for the given two sequences.\n *\n * >>> longestCommonSubsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7)\n * 4\n * >>> longestCommonSubsequence(\"ABCDGH\", \"AEDFHR\", 6, 6)\n * 3\n * >>> longestCommonSubsequence(\"AXYT\", \"AYZX\", 4, 4)\n * 2\n */\nfunc longestCommonSubsequence(x : String, y : String, m : Int, n : Int) -> Int {\n", "entry_point": "longestCommonSubsequence", "test": "\n\nvar arg00 : String = #\"AGGTAB\"#\nvar arg01 : String = #\"GXTXAYB\"#\nvar arg02 : Int = 6\nvar arg03 : Int = 7\nvar x0 : Int = longestCommonSubsequence(x : arg00, y : arg01, m : arg02, n : arg03)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"ABCDGH\"#\nvar arg11 : String = #\"AEDFHR\"#\nvar arg12 : Int = 6\nvar arg13 : Int = 6\nvar x1 : Int = longestCommonSubsequence(x : arg10, y : arg11, m : arg12, n : arg13)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"AXYT\"#\nvar arg21 : String = #\"AYZX\"#\nvar arg22 : Int = 4\nvar arg23 : Int = 4\nvar x2 : Int = longestCommonSubsequence(x : arg20, y : arg21, m : arg22, n : arg23)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the longest common subsequence for the given two sequences.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/188", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given number can be represented by product of two squares or not.\n *\n * >>> prodSquare(25)\n * false\n * >>> prodSquare(30)\n * false\n * >>> prodSquare(16)\n * true\n */\nfunc prodSquare(n : Int) -> Bool {\n", "entry_point": "prodSquare", "test": "\n\nvar arg00 : Int = 25\nvar x0 : Bool = prodSquare(n : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 30\nvar x1 : Bool = prodSquare(n : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 16\nvar x2 : Bool = prodSquare(n : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the given number can be represented by product of two squares or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/189", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first missing positive number.\n *\n * >>> firstMissingPositive([1, 2, 3, -1, 5], 5)\n * 4\n * >>> firstMissingPositive([0, -1, -2, 1, 5, 8], 6)\n * 2\n * >>> firstMissingPositive([0, 1, 2, 5, -8], 5)\n * 3\n */\nfunc firstMissingPositive(arr : [Int], n : Int) -> Int {\n", "entry_point": "firstMissingPositive", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, -1, 5]\nvar arg01 : Int = 5\nvar x0 : Int = firstMissingPositive(arr : arg00, n : arg01)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [0, -1, -2, 1, 5, 8]\nvar arg11 : Int = 6\nvar x1 : Int = firstMissingPositive(arr : arg10, n : arg11)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [0, 1, 2, 5, -8]\nvar arg21 : Int = 5\nvar x2 : Int = firstMissingPositive(arr : arg20, n : arg21)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the first missing positive number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/190", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of integral co-ordinates that lie inside a square.\n *\n * >>> countIntgralPoints(1, 1, 4, 4)\n * 4\n * >>> countIntgralPoints(1, 2, 1, 2)\n * 1\n * >>> countIntgralPoints(4, 2, 6, 4)\n * 1\n */\nfunc countIntgralPoints(x1 : Int, y1 : Int, x2 : Int, y2 : Int) -> Int {\n", "entry_point": "countIntgralPoints", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = 1\nvar arg02 : Int = 4\nvar arg03 : Int = 4\nvar x0 : Int = countIntgralPoints(x1 : arg00, y1 : arg01, x2 : arg02, y2 : arg03)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar arg11 : Int = 2\nvar arg12 : Int = 1\nvar arg13 : Int = 2\nvar x1 : Int = countIntgralPoints(x1 : arg10, y1 : arg11, x2 : arg12, y2 : arg13)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar arg21 : Int = 2\nvar arg22 : Int = 6\nvar arg23 : Int = 4\nvar x2 : Int = countIntgralPoints(x1 : arg20, y1 : arg21, x2 : arg22, y2 : arg23)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the number of integral co-ordinates that lie inside a square.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/191", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month name contains 30 days or not.\n *\n * >>> checkMonthnumber(\"February\")\n * false\n * >>> checkMonthnumber(\"June\")\n * true\n * >>> checkMonthnumber(\"April\")\n * true\n */\nfunc checkMonthnumber(monthname3 : String) -> Bool {\n", "entry_point": "checkMonthnumber", "test": "\n\nvar arg00 : String = #\"February\"#\nvar x0 : Bool = checkMonthnumber(monthname3 : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"June\"#\nvar x1 : Bool = checkMonthnumber(monthname3 : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"April\"#\nvar x2 : Bool = checkMonthnumber(monthname3 : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether the given month name contains 30 days or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/192", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether a string has atleast one letter and one number.\n *\n * >>> checkString(\"thishasboth29\")\n * true\n * >>> checkString(\"python\")\n * false\n */\nfunc checkString(str : String) -> Bool {\n", "entry_point": "checkString", "test": "\n\nvar arg00 : String = #\"thishasboth29\"#\nvar x0 : Bool = checkString(str : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"python\"#\nvar x1 : Bool = checkString(str : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\n", "description": "Write a Swift function to check whether a string has atleast one letter and one number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/193", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove the duplicates from the given tuple.\n *\n * >>> removeTuple([1, 3, 5, 2, 3, 5, 1, 1, 3])\n * [1, 2, 3, 5]\n * >>> removeTuple([2, 3, 4, 4, 5, 6, 6, 7, 8, 8])\n * [2, 3, 4, 5, 6, 7, 8]\n * >>> removeTuple([11, 12, 13, 11, 11, 12, 14, 13])\n * [11, 12, 13, 14]\n */\nfunc removeTuple(testTup : [Int]) -> [Int] {\n", "entry_point": "removeTuple", "test": "\n\nvar arg00 : [Int] = [1, 3, 5, 2, 3, 5, 1, 1, 3]\nvar x0 : [Int] = removeTuple(testTup : arg00)\nvar v0 : [Int] = [1, 2, 3, 5]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 3, 4, 4, 5, 6, 6, 7, 8, 8]\nvar x1 : [Int] = removeTuple(testTup : arg10)\nvar v1 : [Int] = [2, 3, 4, 5, 6, 7, 8]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [11, 12, 13, 11, 11, 12, 14, 13]\nvar x2 : [Int] = removeTuple(testTup : arg20)\nvar v2 : [Int] = [11, 12, 13, 14]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove the duplicates from the given tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/194", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert octal number to decimal number.\n *\n * >>> octalToDecimal(25)\n * 21\n * >>> octalToDecimal(30)\n * 24\n * >>> octalToDecimal(40)\n * 32\n */\nfunc octalToDecimal(n : Int) -> Int {\n", "entry_point": "octalToDecimal", "test": "\n\nvar arg00 : Int = 25\nvar x0 : Int = octalToDecimal(n : arg00)\nvar v0 : Int = 21\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 30\nvar x1 : Int = octalToDecimal(n : arg10)\nvar v1 : Int = 24\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 40\nvar x2 : Int = octalToDecimal(n : arg20)\nvar v2 : Int = 32\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to convert octal number to decimal number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/195", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first position of an element in a sorted array.\n *\n * >>> first([1, 2, 3, 4, 5, 6, 6], 6, 6)\n * 5\n * >>> first([1, 2, 2, 2, 3, 2, 2, 4, 2], 2, 9)\n * 1\n * >>> first([1, 2, 3], 1, 3)\n * 0\n */\nfunc first(arr : [Int], x : Int, n : Int) -> Int {\n", "entry_point": "first", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5, 6, 6]\nvar arg01 : Int = 6\nvar arg02 : Int = 6\nvar x0 : Int = first(arr : arg00, x : arg01, n : arg02)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 2, 2, 3, 2, 2, 4, 2]\nvar arg11 : Int = 2\nvar arg12 : Int = 9\nvar x1 : Int = first(arr : arg10, x : arg11, n : arg12)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3]\nvar arg21 : Int = 1\nvar arg22 : Int = 3\nvar x2 : Int = first(arr : arg20, x : arg21, n : arg22)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the first position of an element in a sorted array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/196", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all the tuples with length k.\n *\n * >>> removeTuples([[4, 5], [4], [8, 6, 7], [1], [3, 4, 6, 7]], 1)\n * [[4, 5], [8, 6, 7], [3, 4, 6, 7]]\n * >>> removeTuples([[4, 5], [4, 5], [6, 7], [1, 2, 3], [3, 4, 6, 7]], 2)\n * [[1, 2, 3], [3, 4, 6, 7]]\n * >>> removeTuples([[1, 4, 4], [4, 3], [8, 6, 7], [1], [3, 6, 7]], 3)\n * [[4, 3], [1]]\n */\nfunc removeTuples(testList : [[Int]], k : Int) -> [[Int]] {\n", "entry_point": "removeTuples", "test": "\n\nvar arg00 : [[Int]] = [[4, 5], [4], [8, 6, 7], [1], [3, 4, 6, 7]]\nvar arg01 : Int = 1\nvar x0 : [[Int]] = removeTuples(testList : arg00, k : arg01)\nvar v0 : [[Int]] = [[4, 5], [8, 6, 7], [3, 4, 6, 7]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[4, 5], [4, 5], [6, 7], [1, 2, 3], [3, 4, 6, 7]]\nvar arg11 : Int = 2\nvar x1 : [[Int]] = removeTuples(testList : arg10, k : arg11)\nvar v1 : [[Int]] = [[1, 2, 3], [3, 4, 6, 7]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[1, 4, 4], [4, 3], [8, 6, 7], [1], [3, 6, 7]]\nvar arg21 : Int = 3\nvar x2 : [[Int]] = removeTuples(testList : arg20, k : arg21)\nvar v2 : [[Int]] = [[4, 3], [1]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove all the tuples with length k.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/197", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform the exponentiation of the given two tuples.\n *\n * >>> findExponentio([10, 4, 5, 6], [5, 6, 7, 5])\n * [100000, 4096, 78125, 7776]\n * >>> findExponentio([11, 5, 6, 7], [6, 7, 8, 6])\n * [1771561, 78125, 1679616, 117649]\n * >>> findExponentio([12, 6, 7, 8], [7, 8, 9, 7])\n * [35831808, 1679616, 40353607, 2097152]\n */\nfunc findExponentio(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n", "entry_point": "findExponentio", "test": "\n\nvar arg00 : [Int] = [10, 4, 5, 6]\nvar arg01 : [Int] = [5, 6, 7, 5]\nvar x0 : [Int] = findExponentio(testTup1 : arg00, testTup2 : arg01)\nvar v0 : [Int] = [100000, 4096, 78125, 7776]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [11, 5, 6, 7]\nvar arg11 : [Int] = [6, 7, 8, 6]\nvar x1 : [Int] = findExponentio(testTup1 : arg10, testTup2 : arg11)\nvar v1 : [Int] = [1771561, 78125, 1679616, 117649]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [12, 6, 7, 8]\nvar arg21 : [Int] = [7, 8, 9, 7]\nvar x2 : [Int] = findExponentio(testTup1 : arg20, testTup2 : arg21)\nvar v2 : [Int] = [35831808, 1679616, 40353607, 2097152]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to perform the exponentiation of the given two tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/198", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the largest triangle that can be inscribed in an ellipse.\n *\n * >>> largestTriangle(4, 2)\n * 10.392304845413264\n * >>> largestTriangle(5, 7)\n * 4.639421805988064\n * >>> largestTriangle(9, 1)\n * 105.2220865598093\n */\nfunc largestTriangle(a : Int, b : Int) -> Double {\n", "entry_point": "largestTriangle", "test": "\n\nvar arg00 : Int = 4\nvar arg01 : Int = 2\nvar x0 : Double = largestTriangle(a : arg00, b : arg01)\nvar v0 : Double = 10.392304845413264\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar arg11 : Int = 7\nvar x1 : Double = largestTriangle(a : arg10, b : arg11)\nvar v1 : Double = 4.639421805988064\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 9\nvar arg21 : Int = 1\nvar x2 : Double = largestTriangle(a : arg20, b : arg21)\nvar v2 : Double = 105.2220865598093\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the largest triangle that can be inscribed in an ellipse.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/199", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find highest power of 2 less than or equal to given number.\n *\n * >>> highestPowerOf2(10)\n * 8\n * >>> highestPowerOf2(19)\n * 16\n * >>> highestPowerOf2(32)\n * 32\n */\nfunc highestPowerOf2(n : Int) -> Int {\n", "entry_point": "highestPowerOf2", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = highestPowerOf2(n : arg00)\nvar v0 : Int = 8\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 19\nvar x1 : Int = highestPowerOf2(n : arg10)\nvar v1 : Int = 16\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 32\nvar x2 : Int = highestPowerOf2(n : arg20)\nvar v2 : Int = 32\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find highest power of 2 less than or equal to given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/200", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all index positions of the maximum values in a given list.\n *\n * >>> positionMax([12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54])\n * [7]\n * >>> positionMax([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])\n * [7, 8, 9, 10]\n * >>> positionMax([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])\n * [11]\n */\nfunc positionMax(list1 : [Int]) -> [Int] {\n", "entry_point": "positionMax", "test": "\n\nvar arg00 : [Int] = [12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54]\nvar x0 : [Int] = positionMax(list1 : arg00)\nvar v0 : [Int] = [7]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5]\nvar x1 : [Int] = positionMax(list1 : arg10)\nvar v1 : [Int] = [7, 8, 9, 10]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12]\nvar x2 : [Int] = positionMax(list1 : arg20)\nvar v2 : [Int] = [11]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find all index positions of the maximum values in a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/201", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the elements in a list are same or not.\n *\n * >>> chklist([\"one\", \"one\", \"one\"])\n * true\n * >>> chklist([\"one\", \"Two\", \"Three\"])\n * false\n * >>> chklist([\"bigdata\", \"python\", \"Django\"])\n * false\n */\nfunc chklist(lst : [String]) -> Bool {\n", "entry_point": "chklist", "test": "\n\nvar arg00 : [String] = [#\"one\"#, #\"one\"#, #\"one\"#]\nvar x0 : Bool = chklist(lst : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"one\"#, #\"Two\"#, #\"Three\"#]\nvar x1 : Bool = chklist(lst : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"bigdata\"#, #\"python\"#, #\"Django\"#]\nvar x2 : Bool = chklist(lst : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the elements in a list are same or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/202", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove even characters in a string.\n *\n * >>> removeEven(\"python\")\n * \"pto\"\n * >>> removeEven(\"program\")\n * \"porm\"\n * >>> removeEven(\"language\")\n * \"lnug\"\n */\nfunc removeEven(str1 : String) -> String {\n", "entry_point": "removeEven", "test": "\n\nvar arg00 : String = #\"python\"#\nvar x0 : String = removeEven(str1 : arg00)\nvar v0 : String = #\"pto\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"program\"#\nvar x1 : String = removeEven(str1 : arg10)\nvar v1 : String = #\"porm\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"language\"#\nvar x2 : String = removeEven(str1 : arg20)\nvar v2 : String = #\"lnug\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove even characters in a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/203", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the hamming distance between given two integers.\n *\n * >>> hammingDistance(4, 8)\n * 2\n * >>> hammingDistance(2, 4)\n * 2\n * >>> hammingDistance(1, 2)\n * 2\n */\nfunc hammingDistance(n1 : Int, n2 : Int) -> Int {\n", "entry_point": "hammingDistance", "test": "\n\nvar arg00 : Int = 4\nvar arg01 : Int = 8\nvar x0 : Int = hammingDistance(n1 : arg00, n2 : arg01)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar arg11 : Int = 4\nvar x1 : Int = hammingDistance(n1 : arg10, n2 : arg11)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = 2\nvar x2 : Int = hammingDistance(n1 : arg20, n2 : arg21)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the hamming distance between given two integers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/204", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the occurrence of a given character in a string.\n *\n * >>> count(\"abcc\", \"c\")\n * 2\n * >>> count(\"ababca\", \"a\")\n * 3\n * >>> count(\"mnmm0pm\", \"m\")\n * 4\n */\nfunc count(s : String, c : String) -> Int {\n", "entry_point": "count", "test": "\n\nvar arg00 : String = #\"abcc\"#\nvar arg01 : String = #\"c\"#\nvar x0 : Int = count(s : arg00, c : arg01)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"ababca\"#\nvar arg11 : String = #\"a\"#\nvar x1 : Int = count(s : arg10, c : arg11)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"mnmm0pm\"#\nvar arg21 : String = #\"m\"#\nvar x2 : Int = count(s : arg20, c : arg21)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the occurrence of a given character in a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/205", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the inversions of tuple elements in the given tuple list.\n *\n * >>> inversionElements([7, 8, 9, 1, 10, 7])\n * [-8, -9, -10, -2, -11, -8]\n * >>> inversionElements([2, 4, 5, 6, 1, 7])\n * [-3, -5, -6, -7, -2, -8]\n * >>> inversionElements([8, 9, 11, 14, 12, 13])\n * [-9, -10, -12, -15, -13, -14]\n */\nfunc inversionElements(testTup : [Int]) -> [Int] {\n", "entry_point": "inversionElements", "test": "\n\nvar arg00 : [Int] = [7, 8, 9, 1, 10, 7]\nvar x0 : [Int] = inversionElements(testTup : arg00)\nvar v0 : [Int] = [-8, -9, -10, -2, -11, -8]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 4, 5, 6, 1, 7]\nvar x1 : [Int] = inversionElements(testTup : arg10)\nvar v1 : [Int] = [-3, -5, -6, -7, -2, -8]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [8, 9, 11, 14, 12, 13]\nvar x2 : [Int] = inversionElements(testTup : arg20)\nvar v2 : [Int] = [-9, -10, -12, -15, -13, -14]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the inversions of tuple elements in the given tuple list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/206", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform the adjacent element concatenation in the given tuples.\n *\n * >>> concatenateElements([\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"])\n * [\"DSP IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL UTS\"]\n * >>> concatenateElements([\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"])\n * [\"RES IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL QESR\"]\n * >>> concatenateElements([\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"])\n * [\"MSAMIS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL SKD\"]\n */\nfunc concatenateElements(testTup : [String]) -> [String] {\n", "entry_point": "concatenateElements", "test": "\n\nvar arg00 : [String] = [#\"DSP \"#, #\"IS \"#, #\"BEST \"#, #\"FOR \"#, #\"ALL \"#, #\"UTS\"#]\nvar x0 : [String] = concatenateElements(testTup : arg00)\nvar v0 : [String] = [#\"DSP IS \"#, #\"IS BEST \"#, #\"BEST FOR \"#, #\"FOR ALL \"#, #\"ALL UTS\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"RES \"#, #\"IS \"#, #\"BEST \"#, #\"FOR \"#, #\"ALL \"#, #\"QESR\"#]\nvar x1 : [String] = concatenateElements(testTup : arg10)\nvar v1 : [String] = [#\"RES IS \"#, #\"IS BEST \"#, #\"BEST FOR \"#, #\"FOR ALL \"#, #\"ALL QESR\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"MSAM\"#, #\"IS \"#, #\"BEST \"#, #\"FOR \"#, #\"ALL \"#, #\"SKD\"#]\nvar x2 : [String] = concatenateElements(testTup : arg20)\nvar v2 : [String] = [#\"MSAMIS \"#, #\"IS BEST \"#, #\"BEST FOR \"#, #\"FOR ALL \"#, #\"ALL SKD\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to perform the adjacent element concatenation in the given tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/207", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n *\n * >>> findLongestRepeatingSubseq(\"AABEBCDD\")\n * 3\n * >>> findLongestRepeatingSubseq(\"aabb\")\n * 2\n * >>> findLongestRepeatingSubseq(\"aab\")\n * 1\n */\nfunc findLongestRepeatingSubseq(str : String) -> Int {\n", "entry_point": "findLongestRepeatingSubseq", "test": "\n\nvar arg00 : String = #\"AABEBCDD\"#\nvar x0 : Int = findLongestRepeatingSubseq(str : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"aabb\"#\nvar x1 : Int = findLongestRepeatingSubseq(str : arg10)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"aab\"#\nvar x2 : Int = findLongestRepeatingSubseq(str : arg20)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/208", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check the given decimal with a precision of 2 by using regex.\n *\n * >>> isDecimal(\"123.11\")\n * true\n * >>> isDecimal(\"0.21\")\n * true\n * >>> isDecimal(\"123.1214\")\n * false\n */\nfunc isDecimal(num : String) -> Bool {\n", "entry_point": "isDecimal", "test": "\n\nvar arg00 : String = #\"123.11\"#\nvar x0 : Bool = isDecimal(num : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"0.21\"#\nvar x1 : Bool = isDecimal(num : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"123.1214\"#\nvar x2 : Bool = isDecimal(num : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check the given decimal with a precision of 2 by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/209", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to delete the smallest element from the given heap and then insert a new item.\n *\n * >>> heapReplace([25, 44, 68, 21, 39, 23, 89], 21)\n * [21, 25, 23, 44, 39, 68, 89]\n * >>> heapReplace([25, 44, 68, 21, 39, 23, 89], 110)\n * [23, 25, 68, 44, 39, 110, 89]\n * >>> heapReplace([25, 44, 68, 21, 39, 23, 89], 500)\n * [23, 25, 68, 44, 39, 500, 89]\n */\nfunc heapReplace(heap : [Int], a : Int) -> [Int] {\n", "entry_point": "heapReplace", "test": "\n\nvar arg00 : [Int] = [25, 44, 68, 21, 39, 23, 89]\nvar arg01 : Int = 21\nvar x0 : [Int] = heapReplace(heap : arg00, a : arg01)\nvar v0 : [Int] = [21, 25, 23, 44, 39, 68, 89]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [25, 44, 68, 21, 39, 23, 89]\nvar arg11 : Int = 110\nvar x1 : [Int] = heapReplace(heap : arg10, a : arg11)\nvar v1 : [Int] = [23, 25, 68, 44, 39, 110, 89]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [25, 44, 68, 21, 39, 23, 89]\nvar arg21 : Int = 500\nvar x2 : [Int] = heapReplace(heap : arg20, a : arg21)\nvar v2 : [Int] = [23, 25, 68, 44, 39, 500, 89]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to delete the smallest element from the given heap and then insert a new item.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/210", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n *\n * >>> isAllowedSpecificChar(\"ABCDEFabcdef123450\")\n * true\n * >>> isAllowedSpecificChar(\"*&%@#!}{\")\n * false\n * >>> isAllowedSpecificChar(\"HELLOhowareyou98765\")\n * true\n */\nfunc isAllowedSpecificChar(string : String) -> Bool {\n", "entry_point": "isAllowedSpecificChar", "test": "\n\nvar arg00 : String = #\"ABCDEFabcdef123450\"#\nvar x0 : Bool = isAllowedSpecificChar(string : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"*&%@#!}{\"#\nvar x1 : Bool = isAllowedSpecificChar(string : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"HELLOhowareyou98765\"#\nvar x2 : Bool = isAllowedSpecificChar(string : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/211", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count numbers whose oth and nth bits are set.\n *\n * >>> countNum(2)\n * 1\n * >>> countNum(3)\n * 2\n * >>> countNum(1)\n * 1\n */\nfunc countNum(n : Int) -> Int {\n", "entry_point": "countNum", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = countNum(n : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar x1 : Int = countNum(n : arg10)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar x2 : Int = countNum(n : arg20)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count numbers whose oth and nth bits are set.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/212", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of fourth power of n natural numbers.\n *\n * >>> fourthPowerSum(2)\n * 17\n * >>> fourthPowerSum(4)\n * 354\n * >>> fourthPowerSum(6)\n * 2275\n */\nfunc fourthPowerSum(n : Int) -> Int {\n", "entry_point": "fourthPowerSum", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = fourthPowerSum(n : arg00)\nvar v0 : Int = 17\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar x1 : Int = fourthPowerSum(n : arg10)\nvar v1 : Int = 354\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 6\nvar x2 : Int = fourthPowerSum(n : arg20)\nvar v2 : Int = 2275\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of fourth power of n natural numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/213", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform the concatenation of two string tuples.\n *\n * >>> concatenateStrings([\"Manjeet\", \"Nikhil\", \"Akshat\"], [\" Singh\", \" Meherwal\", \" Garg\"])\n * [\"Manjeet Singh\", \"Nikhil Meherwal\", \"Akshat Garg\"]\n * >>> concatenateStrings([\"Shaik\", \"Ayesha\", \"Sanya\"], [\" Dawood\", \" Begum\", \" Singh\"])\n * [\"Shaik Dawood\", \"Ayesha Begum\", \"Sanya Singh\"]\n * >>> concatenateStrings([\"Harpreet\", \"Priyanka\", \"Muskan\"], [\"Kour\", \" Agarwal\", \"Sethi\"])\n * [\"HarpreetKour\", \"Priyanka Agarwal\", \"MuskanSethi\"]\n */\nfunc concatenateStrings(testTup1 : [String], testTup2 : [String]) -> [String] {\n", "entry_point": "concatenateStrings", "test": "\n\nvar arg00 : [String] = [#\"Manjeet\"#, #\"Nikhil\"#, #\"Akshat\"#]\nvar arg01 : [String] = [#\" Singh\"#, #\" Meherwal\"#, #\" Garg\"#]\nvar x0 : [String] = concatenateStrings(testTup1 : arg00, testTup2 : arg01)\nvar v0 : [String] = [#\"Manjeet Singh\"#, #\"Nikhil Meherwal\"#, #\"Akshat Garg\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"Shaik\"#, #\"Ayesha\"#, #\"Sanya\"#]\nvar arg11 : [String] = [#\" Dawood\"#, #\" Begum\"#, #\" Singh\"#]\nvar x1 : [String] = concatenateStrings(testTup1 : arg10, testTup2 : arg11)\nvar v1 : [String] = [#\"Shaik Dawood\"#, #\"Ayesha Begum\"#, #\"Sanya Singh\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"Harpreet\"#, #\"Priyanka\"#, #\"Muskan\"#]\nvar arg21 : [String] = [#\"Kour\"#, #\" Agarwal\"#, #\"Sethi\"#]\nvar x2 : [String] = concatenateStrings(testTup1 : arg20, testTup2 : arg21)\nvar v2 : [String] = [#\"HarpreetKour\"#, #\"Priyanka Agarwal\"#, #\"MuskanSethi\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to perform the concatenation of two string tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/214", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert radians to degrees.\n *\n * >>> degreeRadian(90)\n * 5156.620156177409\n * >>> degreeRadian(60)\n * 3437.746770784939\n * >>> degreeRadian(120)\n * 6875.493541569878\n */\nfunc degreeRadian(radian : Int) -> Double {\n", "entry_point": "degreeRadian", "test": "\n\nvar arg00 : Int = 90\nvar x0 : Double = degreeRadian(radian : arg00)\nvar v0 : Double = 5156.620156177409\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 60\nvar x1 : Double = degreeRadian(radian : arg10)\nvar v1 : Double = 3437.746770784939\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 120\nvar x2 : Double = degreeRadian(radian : arg20)\nvar v2 : Double = 6875.493541569878\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert radians to degrees.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/215", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to decode a run-length encoded given list.\n *\n * >>> decodeList([[2, 1], 2, 3, [2, 4], 5, 1])\n * [1, 1, 2, 3, 4, 4, 5, 1]\n * >>> decodeList([\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", [2, \"l\"], \"y\"])\n * [\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", \"l\", \"l\", \"y\"]\n * >>> decodeList([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"])\n * [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]\n */\nfunc decodeList(alist : [AnyHashable]) -> [AnyHashable] {\n", "entry_point": "decodeList", "test": "\n\nvar arg00 : [AnyHashable] = [[2, 1], 2, 3, [2, 4], 5, 1]\nvar x0 : [AnyHashable] = decodeList(alist : arg00)\nvar v0 : [AnyHashable] = [1, 1, 2, 3, 4, 4, 5, 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [#\"a\"#, #\"u\"#, #\"t\"#, #\"o\"#, #\"m\"#, #\"a\"#, #\"t\"#, #\"i\"#, #\"c\"#, #\"a\"#, [2, #\"l\"#], #\"y\"#]\nvar x1 : [AnyHashable] = decodeList(alist : arg10)\nvar v1 : [AnyHashable] = [#\"a\"#, #\"u\"#, #\"t\"#, #\"o\"#, #\"m\"#, #\"a\"#, #\"t\"#, #\"i\"#, #\"c\"#, #\"a\"#, #\"l\"#, #\"l\"#, #\"y\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [#\"p\"#, #\"y\"#, #\"t\"#, #\"h\"#, #\"o\"#, #\"n\"#]\nvar x2 : [AnyHashable] = decodeList(alist : arg20)\nvar v2 : [AnyHashable] = [#\"p\"#, #\"y\"#, #\"t\"#, #\"h\"#, #\"o\"#, #\"n\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to decode a run-length encoded given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/216", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a nested list is a subset of another nested list.\n *\n * >>> checkSubsetList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])\n * false\n * >>> checkSubsetList([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])\n * true\n * >>> checkSubsetList([[\"a\", \"b\"], [\"e\"], [\"c\", \"d\"]], [[\"g\"]])\n * false\n */\nfunc checkSubsetList(list1 : [AnyHashable], list2 : [[AnyHashable]]) -> Bool {\n", "entry_point": "checkSubsetList", "test": "\n\nvar arg00 : [AnyHashable] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nvar arg01 : [[AnyHashable]] = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]\nvar x0 : Bool = checkSubsetList(list1 : arg00, list2 : arg01)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [[2, 3, 1], [4, 5], [6, 8]]\nvar arg11 : [[AnyHashable]] = [[4, 5], [6, 8]]\nvar x1 : Bool = checkSubsetList(list1 : arg10, list2 : arg11)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [[#\"a\"#, #\"b\"#], [#\"e\"#], [#\"c\"#, #\"d\"#]]\nvar arg21 : [[AnyHashable]] = [[#\"g\"#]]\nvar x2 : Bool = checkSubsetList(list1 : arg20, list2 : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if a nested list is a subset of another nested list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/217", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first repeated character in a given string.\n *\n * >>> firstRepeatedChar(\"Google\")\n * \"o\"\n * >>> firstRepeatedChar(\"data\")\n * \"a\"\n * >>> firstRepeatedChar(\"python\")\n * \"\\x00\"\n */\nfunc firstRepeatedChar(str : String) -> String {\n", "entry_point": "firstRepeatedChar", "test": "\n\nvar arg00 : String = #\"Google\"#\nvar x0 : String = firstRepeatedChar(str : arg00)\nvar v0 : String = #\"o\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"data\"#\nvar x1 : String = firstRepeatedChar(str : arg10)\nvar v1 : String = #\"a\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"python\"#\nvar x2 : String = firstRepeatedChar(str : arg20)\nvar v2 : String = #\"\\x00\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the first repeated character in a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/218", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum operations required to make two numbers equal.\n *\n * >>> minOperations(2, 4)\n * 1\n * >>> minOperations(4, 10)\n * 4\n * >>> minOperations(1, 4)\n * 3\n */\nfunc minOperations(a : Int, b : Int) -> Int {\n", "entry_point": "minOperations", "test": "\n\nvar arg00 : Int = 2\nvar arg01 : Int = 4\nvar x0 : Int = minOperations(a : arg00, b : arg01)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar arg11 : Int = 10\nvar x1 : Int = minOperations(a : arg10, b : arg11)\nvar v1 : Int = 4\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = 4\nvar x2 : Int = minOperations(a : arg20, b : arg21)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the minimum operations required to make two numbers equal.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/219", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract maximum and minimum k elements in the given tuple.\n *\n * >>> extractMinMax([5, 20, 3, 7, 6, 8], 2)\n * [3, 5, 8, 20]\n * >>> extractMinMax([4, 5, 6, 1, 2, 7], 3)\n * [1, 2, 4, 5, 6, 7]\n * >>> extractMinMax([2, 3, 4, 8, 9, 11, 7], 4)\n * [2, 3, 4, 7, 8, 9, 11]\n */\nfunc extractMinMax(testTup : [Int], k : Int) -> [Int] {\n", "entry_point": "extractMinMax", "test": "\n\nvar arg00 : [Int] = [5, 20, 3, 7, 6, 8]\nvar arg01 : Int = 2\nvar x0 : [Int] = extractMinMax(testTup : arg00, k : arg01)\nvar v0 : [Int] = [3, 5, 8, 20]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 5, 6, 1, 2, 7]\nvar arg11 : Int = 3\nvar x1 : [Int] = extractMinMax(testTup : arg10, k : arg11)\nvar v1 : [Int] = [1, 2, 4, 5, 6, 7]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 3, 4, 8, 9, 11, 7]\nvar arg21 : Int = 4\nvar x2 : [Int] = extractMinMax(testTup : arg20, k : arg21)\nvar v2 : [Int] = [2, 3, 4, 7, 8, 9, 11]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract maximum and minimum k elements in the given tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/220", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n *\n * >>> replaceMaxSpecialchar(\"Python language, Programming language.\", 2)\n * \"Python:language: Programming language.\"\n * >>> replaceMaxSpecialchar(\"a b c,d e f\", 3)\n * \"a:b:c:d e f\"\n * >>> replaceMaxSpecialchar(\"ram reshma,ram rahim\", 1)\n * \"ram:reshma,ram rahim\"\n */\nfunc replaceMaxSpecialchar(text : String, n : Int) -> String {\n", "entry_point": "replaceMaxSpecialchar", "test": "\n\nvar arg00 : String = #\"Python language, Programming language.\"#\nvar arg01 : Int = 2\nvar x0 : String = replaceMaxSpecialchar(text : arg00, n : arg01)\nvar v0 : String = #\"Python:language: Programming language.\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"a b c,d e f\"#\nvar arg11 : Int = 3\nvar x1 : String = replaceMaxSpecialchar(text : arg10, n : arg11)\nvar v1 : String = #\"a:b:c:d e f\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"ram reshma,ram rahim\"#\nvar arg21 : Int = 1\nvar x2 : String = replaceMaxSpecialchar(text : arg20, n : arg21)\nvar v2 : String = #\"ram:reshma,ram rahim\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/221", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first even number in a given list of numbers.\n *\n * >>> firstEven([2, 3, 4])\n * 2\n * >>> firstEven([5, 6, 7])\n * 6\n */\nfunc firstEven(nums : [Int]) -> Int {\n", "entry_point": "firstEven", "test": "\n\nvar arg00 : [Int] = [2, 3, 4]\nvar x0 : Int = firstEven(nums : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [5, 6, 7]\nvar x1 : Int = firstEven(nums : arg10)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\n", "description": "Write a Swift function to find the first even number in a given list of numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/222", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if all the elements in tuple have same data type or not.\n *\n * >>> checkType([5, 6, 7, 3, 5, 6])\n * true\n * >>> checkType([1, 2, \"4\"])\n * false\n * >>> checkType([3, 2, 1, 4, 5])\n * true\n */\nfunc checkType(testTuple : [AnyHashable]) -> Bool {\n", "entry_point": "checkType", "test": "\n\nvar arg00 : [AnyHashable] = [5, 6, 7, 3, 5, 6]\nvar x0 : Bool = checkType(testTuple : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [1, 2, #\"4\"#]\nvar x1 : Bool = checkType(testTuple : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [3, 2, 1, 4, 5]\nvar x2 : Bool = checkType(testTuple : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if all the elements in tuple have same data type or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/223", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check for majority element in the given sorted array.\n *\n * >>> isMajority([1, 2, 3, 3, 3, 3, 10], 7, 3)\n * true\n * >>> isMajority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)\n * false\n * >>> isMajority([1, 1, 1, 2, 2], 5, 1)\n * true\n */\nfunc isMajority(arr : [Int], n : Int, x : Int) -> Bool {\n", "entry_point": "isMajority", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 3, 3, 3, 10]\nvar arg01 : Int = 7\nvar arg02 : Int = 3\nvar x0 : Bool = isMajority(arr : arg00, n : arg01, x : arg02)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 1, 2, 4, 4, 4, 6, 6]\nvar arg11 : Int = 8\nvar arg12 : Int = 4\nvar x1 : Bool = isMajority(arr : arg10, n : arg11, x : arg12)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 1, 1, 2, 2]\nvar arg21 : Int = 5\nvar arg22 : Int = 1\nvar x2 : Bool = isMajority(arr : arg20, n : arg21, x : arg22)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check for majority element in the given sorted array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/224", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count set bits of a given number.\n *\n * >>> countSetBits(2)\n * 1\n * >>> countSetBits(4)\n * 1\n * >>> countSetBits(6)\n * 2\n */\nfunc countSetBits(n : Int) -> Int {\n", "entry_point": "countSetBits", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = countSetBits(n : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar x1 : Int = countSetBits(n : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 6\nvar x2 : Int = countSetBits(n : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count set bits of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/225", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum element in a sorted and rotated array.\n *\n * >>> findMin([1, 2, 3, 4, 5], 0, 4)\n * 1\n * >>> findMin([4, 6, 8], 0, 2)\n * 4\n * >>> findMin([2, 3, 5, 7, 9], 0, 4)\n * 2\n */\nfunc findMin(arr : [Int], low : Int, high : Int) -> Int {\n", "entry_point": "findMin", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5]\nvar arg01 : Int = 0\nvar arg02 : Int = 4\nvar x0 : Int = findMin(arr : arg00, low : arg01, high : arg02)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 6, 8]\nvar arg11 : Int = 0\nvar arg12 : Int = 2\nvar x1 : Int = findMin(arr : arg10, low : arg11, high : arg12)\nvar v1 : Int = 4\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 3, 5, 7, 9]\nvar arg21 : Int = 0\nvar arg22 : Int = 4\nvar x2 : Int = findMin(arr : arg20, low : arg21, high : arg22)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the minimum element in a sorted and rotated array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/226", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove the characters which have odd index values of a given string.\n *\n * >>> oddValuesString(\"abcdef\")\n * \"ace\"\n * >>> oddValuesString(\"python\")\n * \"pto\"\n * >>> oddValuesString(\"data\")\n * \"dt\"\n */\nfunc oddValuesString(str : String) -> String {\n", "entry_point": "oddValuesString", "test": "\n\nvar arg00 : String = #\"abcdef\"#\nvar x0 : String = oddValuesString(str : arg00)\nvar v0 : String = #\"ace\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"python\"#\nvar x1 : String = oddValuesString(str : arg10)\nvar v1 : String = #\"pto\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"data\"#\nvar x2 : String = oddValuesString(str : arg20)\nvar v2 : String = #\"dt\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to remove the characters which have odd index values of a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/227", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find minimum of three numbers.\n *\n * >>> minOfThree(10, 20, 0)\n * 0\n * >>> minOfThree(19, 15, 18)\n * 15\n * >>> minOfThree(-10, -20, -30)\n * -30\n */\nfunc minOfThree(a : Int, b : Int, c : Int) -> Int {\n", "entry_point": "minOfThree", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 20\nvar arg02 : Int = 0\nvar x0 : Int = minOfThree(a : arg00, b : arg01, c : arg02)\nvar v0 : Int = 0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 19\nvar arg11 : Int = 15\nvar arg12 : Int = 18\nvar x1 : Int = minOfThree(a : arg10, b : arg11, c : arg12)\nvar v1 : Int = 15\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = -10\nvar arg21 : Int = -20\nvar arg22 : Int = -30\nvar x2 : Int = minOfThree(a : arg20, b : arg21, c : arg22)\nvar v2 : Int = -30\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find minimum of three numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/228", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether all the bits are unset in the given range or not.\n *\n * >>> allBitsSetInTheGivenRange(4, 1, 2)\n * true\n * >>> allBitsSetInTheGivenRange(17, 2, 4)\n * true\n * >>> allBitsSetInTheGivenRange(39, 4, 6)\n * false\n */\nfunc allBitsSetInTheGivenRange(n : Int, l : Int, r : Int) -> Bool {\n", "entry_point": "allBitsSetInTheGivenRange", "test": "\n\nvar arg00 : Int = 4\nvar arg01 : Int = 1\nvar arg02 : Int = 2\nvar x0 : Bool = allBitsSetInTheGivenRange(n : arg00, l : arg01, r : arg02)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 17\nvar arg11 : Int = 2\nvar arg12 : Int = 4\nvar x1 : Bool = allBitsSetInTheGivenRange(n : arg10, l : arg11, r : arg12)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 39\nvar arg21 : Int = 4\nvar arg22 : Int = 6\nvar x2 : Bool = allBitsSetInTheGivenRange(n : arg20, l : arg21, r : arg22)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether all the bits are unset in the given range or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/229", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n *\n * >>> reArrangeArray([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)\n * [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n * >>> reArrangeArray([12, -14, -26, 13, 15], 5)\n * [-14, -26, 12, 13, 15]\n * >>> reArrangeArray([10, 24, 36, -42, -39, -78, 85], 7)\n * [-42, -39, -78, 10, 24, 36, 85]\n */\nfunc reArrangeArray(arr : [Int], n : Int) -> [Int] {\n", "entry_point": "reArrangeArray", "test": "\n\nvar arg00 : [Int] = [-1, 2, -3, 4, 5, 6, -7, 8, 9]\nvar arg01 : Int = 9\nvar x0 : [Int] = reArrangeArray(arr : arg00, n : arg01)\nvar v0 : [Int] = [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [12, -14, -26, 13, 15]\nvar arg11 : Int = 5\nvar x1 : [Int] = reArrangeArray(arr : arg10, n : arg11)\nvar v1 : [Int] = [-14, -26, 12, 13, 15]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [10, 24, 36, -42, -39, -78, 85]\nvar arg21 : Int = 7\nvar x2 : [Int] = reArrangeArray(arr : arg20, n : arg21)\nvar v2 : [Int] = [-42, -39, -78, 10, 24, 36, 85]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/230", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace blank spaces with any character in a string.\n *\n * >>> replaceBlank(\"hello people\", \"@\")\n * \"hello@people\"\n * >>> replaceBlank(\"python program language\", \"\\$\")\n * \"python\\$program\\$language\"\n * >>> replaceBlank(\"blank space\", \"-\")\n * \"blank-space\"\n */\nfunc replaceBlank(str1 : String, ch : String) -> String {\n", "entry_point": "replaceBlank", "test": "\n\nvar arg00 : String = #\"hello people\"#\nvar arg01 : String = #\"@\"#\nvar x0 : String = replaceBlank(str1 : arg00, ch : arg01)\nvar v0 : String = #\"hello@people\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"python program language\"#\nvar arg11 : String = #\"\\$\"#\nvar x1 : String = replaceBlank(str1 : arg10, ch : arg11)\nvar v1 : String = #\"python\\$program\\$language\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"blank space\"#\nvar arg21 : String = #\"-\"#\nvar x2 : String = replaceBlank(str1 : arg20, ch : arg21)\nvar v2 : String = #\"blank-space\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to replace blank spaces with any character in a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/231", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum sum in the given right triangle of numbers.\n *\n * >>> maxSum([[1], [2, 1], [3, 3, 2]], 3)\n * 6\n * >>> maxSum([[1], [1, 2], [4, 1, 12]], 3)\n * 15\n * >>> maxSum([[2], [3, 2], [13, 23, 12]], 3)\n * 28\n */\nfunc maxSum(tri : [[Int]], n : Int) -> Int {\n", "entry_point": "maxSum", "test": "\n\nvar arg00 : [[Int]] = [[1], [2, 1], [3, 3, 2]]\nvar arg01 : Int = 3\nvar x0 : Int = maxSum(tri : arg00, n : arg01)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1], [1, 2], [4, 1, 12]]\nvar arg11 : Int = 3\nvar x1 : Int = maxSum(tri : arg10, n : arg11)\nvar v1 : Int = 15\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[2], [3, 2], [13, 23, 12]]\nvar arg21 : Int = 3\nvar x2 : Int = maxSum(tri : arg20, n : arg21)\nvar v2 : Int = 28\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the maximum sum in the given right triangle of numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/232", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get the n largest items from a dataset.\n *\n * >>> largNnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n * [100, 90]\n * >>> largNnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)\n * [100, 90, 80, 70, 60]\n * >>> largNnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)\n * [100, 90, 80]\n */\nfunc largNnum(list1 : [Int], n : Int) -> [Int] {\n", "entry_point": "largNnum", "test": "\n\nvar arg00 : [Int] = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100]\nvar arg01 : Int = 2\nvar x0 : [Int] = largNnum(list1 : arg00, n : arg01)\nvar v0 : [Int] = [100, 90]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100]\nvar arg11 : Int = 5\nvar x1 : [Int] = largNnum(list1 : arg10, n : arg11)\nvar v1 : [Int] = [100, 90, 80, 70, 60]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100]\nvar arg21 : Int = 3\nvar x2 : [Int] = largNnum(list1 : arg20, n : arg21)\nvar v2 : [Int] = [100, 90, 80]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to get the n largest items from a dataset.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/233", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lateral surface area of a cylinder.\n *\n * >>> lateralsufaceCylinder(10, 5)\n * 314.15000000000003\n * >>> lateralsufaceCylinder(4, 5)\n * 125.66000000000001\n * >>> lateralsufaceCylinder(4, 10)\n * 251.32000000000002\n */\nfunc lateralsufaceCylinder(r : Int, h : Int) -> Double {\n", "entry_point": "lateralsufaceCylinder", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 5\nvar x0 : Double = lateralsufaceCylinder(r : arg00, h : arg01)\nvar v0 : Double = 314.15000000000003\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar arg11 : Int = 5\nvar x1 : Double = lateralsufaceCylinder(r : arg10, h : arg11)\nvar v1 : Double = 125.66000000000001\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar arg21 : Int = 10\nvar x2 : Double = lateralsufaceCylinder(r : arg20, h : arg21)\nvar v2 : Double = 251.32000000000002\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the lateral surface area of a cylinder.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/234", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cube.\n *\n * >>> volumeCube(3)\n * 27\n * >>> volumeCube(2)\n * 8\n * >>> volumeCube(5)\n * 125\n */\nfunc volumeCube(l : Int) -> Int {\n", "entry_point": "volumeCube", "test": "\n\nvar arg00 : Int = 3\nvar x0 : Int = volumeCube(l : arg00)\nvar v0 : Int = 27\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar x1 : Int = volumeCube(l : arg10)\nvar v1 : Int = 8\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar x2 : Int = volumeCube(l : arg20)\nvar v2 : Int = 125\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the volume of a cube.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/235", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to set all even bits of a given number.\n *\n * >>> evenBitSetNumber(10)\n * 10\n * >>> evenBitSetNumber(20)\n * 30\n * >>> evenBitSetNumber(30)\n * 30\n */\nfunc evenBitSetNumber(n : Int) -> Int {\n", "entry_point": "evenBitSetNumber", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = evenBitSetNumber(n : arg00)\nvar v0 : Int = 10\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 20\nvar x1 : Int = evenBitSetNumber(n : arg10)\nvar v1 : Int = 30\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 30\nvar x2 : Int = evenBitSetNumber(n : arg20)\nvar v2 : Int = 30\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to set all even bits of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/236", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n *\n * >>> noOfTriangle(4, 2)\n * 7\n * >>> noOfTriangle(4, 3)\n * 3\n * >>> noOfTriangle(1, 3)\n * -1\n */\nfunc noOfTriangle(n : Int, k : Int) -> Int {\n", "entry_point": "noOfTriangle", "test": "\n\nvar arg00 : Int = 4\nvar arg01 : Int = 2\nvar x0 : Int = noOfTriangle(n : arg00, k : arg01)\nvar v0 : Int = 7\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar arg11 : Int = 3\nvar x1 : Int = noOfTriangle(n : arg10, k : arg11)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = 3\nvar x2 : Int = noOfTriangle(n : arg20, k : arg21)\nvar v2 : Int = -1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/237", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check the occurrences of records which occur similar times in the given tuples.\n *\n * >>> checkOccurences([[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]])\n * [[1, 3] : 2, [2, 5] : 2, [3, 6] : 1]\n * >>> checkOccurences([[4, 2], [2, 4], [3, 6], [6, 3], [7, 4]])\n * [[2, 4] : 2, [3, 6] : 2, [4, 7] : 1]\n * >>> checkOccurences([[13, 2], [11, 23], [12, 25], [25, 12], [16, 23]])\n * [[2, 13] : 1, [11, 23] : 1, [12, 25] : 2, [16, 23] : 1]\n */\nfunc checkOccurences(testList : [[Int]]) -> [[Int]: Int] {\n", "entry_point": "checkOccurences", "test": "\n\nvar arg00 : [[Int]] = [[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]]\nvar x0 : [[Int]: Int] = checkOccurences(testList : arg00)\nvar v0 : [[Int]: Int] = [[1, 3] : 2, [2, 5] : 2, [3, 6] : 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[4, 2], [2, 4], [3, 6], [6, 3], [7, 4]]\nvar x1 : [[Int]: Int] = checkOccurences(testList : arg10)\nvar v1 : [[Int]: Int] = [[2, 4] : 2, [3, 6] : 2, [4, 7] : 1]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[13, 2], [11, 23], [12, 25], [25, 12], [16, 23]]\nvar x2 : [[Int]: Int] = checkOccurences(testList : arg20)\nvar v2 : [[Int]: Int] = [[2, 13] : 1, [11, 23] : 1, [12, 25] : 2, [16, 23] : 1]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check the occurrences of records which occur similar times in the given tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/238", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count number of non-empty substrings of a given string.\n *\n * >>> numberOfSubstrings(\"abc\")\n * 6\n * >>> numberOfSubstrings(\"abcd\")\n * 10\n * >>> numberOfSubstrings(\"abcde\")\n * 15\n */\nfunc numberOfSubstrings(str : String) -> Int {\n", "entry_point": "numberOfSubstrings", "test": "\n\nvar arg00 : String = #\"abc\"#\nvar x0 : Int = numberOfSubstrings(str : arg00)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"abcd\"#\nvar x1 : Int = numberOfSubstrings(str : arg10)\nvar v1 : Int = 10\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"abcde\"#\nvar x2 : Int = numberOfSubstrings(str : arg20)\nvar v2 : Int = 15\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count number of non-empty substrings of a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/239", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n *\n * >>> getTotalNumberOfSequences(10, 4)\n * 4\n * >>> getTotalNumberOfSequences(5, 2)\n * 6\n * >>> getTotalNumberOfSequences(16, 3)\n * 84\n */\nfunc getTotalNumberOfSequences(m : Int, n : Int) -> Int {\n", "entry_point": "getTotalNumberOfSequences", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 4\nvar x0 : Int = getTotalNumberOfSequences(m : arg00, n : arg01)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar arg11 : Int = 2\nvar x1 : Int = getTotalNumberOfSequences(m : arg10, n : arg11)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 16\nvar arg21 : Int = 3\nvar x2 : Int = getTotalNumberOfSequences(m : arg20, n : arg21)\nvar v2 : Int = 84\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/240", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace the last element of the list with another list.\n *\n * >>> replaceList([1, 3, 5, 7, 9, 10], [2, 4, 6, 8])\n * [1, 3, 5, 7, 9, 2, 4, 6, 8]\n * >>> replaceList([1, 2, 3, 4, 5], [5, 6, 7, 8])\n * [1, 2, 3, 4, 5, 6, 7, 8]\n * >>> replaceList([\"red\", \"blue\", \"green\"], [\"yellow\"])\n * [\"red\", \"blue\", \"yellow\"]\n */\nfunc replaceList(list1 : [AnyHashable], list2 : [AnyHashable]) -> [AnyHashable] {\n", "entry_point": "replaceList", "test": "\n\nvar arg00 : [AnyHashable] = [1, 3, 5, 7, 9, 10]\nvar arg01 : [AnyHashable] = [2, 4, 6, 8]\nvar x0 : [AnyHashable] = replaceList(list1 : arg00, list2 : arg01)\nvar v0 : [AnyHashable] = [1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [1, 2, 3, 4, 5]\nvar arg11 : [AnyHashable] = [5, 6, 7, 8]\nvar x1 : [AnyHashable] = replaceList(list1 : arg10, list2 : arg11)\nvar v1 : [AnyHashable] = [1, 2, 3, 4, 5, 6, 7, 8]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [#\"red\"#, #\"blue\"#, #\"green\"#]\nvar arg21 : [AnyHashable] = [#\"yellow\"#]\nvar x2 : [AnyHashable] = replaceList(list1 : arg20, list2 : arg21)\nvar v2 : [AnyHashable] = [#\"red\"#, #\"blue\"#, #\"yellow\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to replace the last element of the list with another list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/241", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to generate a 3d array having each element as '*'.\n *\n * >>> array3d(6, 4, 3)\nn * >>> array3d(5, 3, 4)\n * [[[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]]]\n * >>> array3d(1, 2, 3)\n * [[[\"*\"], [\"*\"]], [[\"*\"], [\"*\"]], [[\"*\"], [\"*\"]]]\n */\nfunc array3d(m : Int, n : Int, o : Int) -> [[[String]]] {\n", "entry_point": "array3d", "test": "\n\nvar arg00 : Int = 6\nvar arg01 : Int = 4\nvar arg02 : Int = 3\nvar x0 : [[[String]]] = array3d(m : arg00, n : arg01, o : arg02)\nvar v0 : [[[Stringnassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar arg11 : Int = 3\nvar arg12 : Int = 4\nvar x1 : [[[String]]] = array3d(m : arg10, n : arg11, o : arg12)\nvar v1 : [[[String]]] = [[[#\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#], [#\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#], [#\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#]], [[#\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#], [#\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#], [#\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#]], [[#\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#], [#\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#], [#\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#]], [[#\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#], [#\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#], [#\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#, #\"*\"#]]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = 2\nvar arg22 : Int = 3\nvar x2 : [[[String]]] = array3d(m : arg20, n : arg21, o : arg22)\nvar v2 : [[[String]]] = [[[#\"*\"#], [#\"*\"#]], [[#\"*\"#], [#\"*\"#]], [[#\"*\"#], [#\"*\"#]]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to generate a 3d array having each element as '*'.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/242", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count total characters in a string.\n *\n * >>> countCharac(\"python programming\")\n * 18\n * >>> countCharac(\"language\")\n * 8\n * >>> countCharac(\"words\")\n * 5\n */\nfunc countCharac(str1 : String) -> Int {\n", "entry_point": "countCharac", "test": "\n\nvar arg00 : String = #\"python programming\"#\nvar x0 : Int = countCharac(str1 : arg00)\nvar v0 : Int = 18\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"language\"#\nvar x1 : Int = countCharac(str1 : arg10)\nvar v1 : Int = 8\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"words\"#\nvar x2 : Int = countCharac(str1 : arg20)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count total characters in a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/243", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the given list based on the occurrence of first element of tuples.\n *\n * >>> sortOnOccurence([[1, \"Jake\"], [2, \"Bob\"], [1, \"Cara\"]])\n * [[1, \"Jake\", \"Cara\", 2], [2, \"Bob\", 1]]\n * >>> sortOnOccurence([[\"b\", \"ball\"], [\"a\", \"arm\"], [\"b\", \"b\"], [\"a\", \"ant\"]])\n * [[\"b\", \"ball\", \"b\", 2], [\"a\", \"arm\", \"ant\", 2]]\n * >>> sortOnOccurence([[2, \"Mark\"], [3, \"Maze\"], [2, \"Sara\"]])\n * [[2, \"Mark\", \"Sara\", 2], [3, \"Maze\", 1]]\n */\nfunc sortOnOccurence(lst : [[AnyHashable]]) -> [[AnyHashable]] {\n", "entry_point": "sortOnOccurence", "test": "\n\nvar arg00 : [[AnyHashable]] = [[1, #\"Jake\"#], [2, #\"Bob\"#], [1, #\"Cara\"#]]\nvar x0 : [[AnyHashable]] = sortOnOccurence(lst : arg00)\nvar v0 : [[AnyHashable]] = [[1, #\"Jake\"#, #\"Cara\"#, 2], [2, #\"Bob\"#, 1]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[#\"b\"#, #\"ball\"#], [#\"a\"#, #\"arm\"#], [#\"b\"#, #\"b\"#], [#\"a\"#, #\"ant\"#]]\nvar x1 : [[AnyHashable]] = sortOnOccurence(lst : arg10)\nvar v1 : [[AnyHashable]] = [[#\"b\"#, #\"ball\"#, #\"b\"#, 2], [#\"a\"#, #\"arm\"#, #\"ant\"#, 2]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[2, #\"Mark\"#], [3, #\"Maze\"#], [2, #\"Sara\"#]]\nvar x2 : [[AnyHashable]] = sortOnOccurence(lst : arg20)\nvar v2 : [[AnyHashable]] = [[2, #\"Mark\"#, #\"Sara\"#, 2], [3, #\"Maze\"#, 1]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort the given list based on the occurrence of first element of tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/244", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the next perfect square greater than a given number.\n *\n * >>> nextPerfectSquare(35)\n * 36\n * >>> nextPerfectSquare(6)\n * 9\n * >>> nextPerfectSquare(9)\n * 16\n */\nfunc nextPerfectSquare(n : Int) -> Int {\n", "entry_point": "nextPerfectSquare", "test": "\n\nvar arg00 : Int = 35\nvar x0 : Int = nextPerfectSquare(n : arg00)\nvar v0 : Int = 36\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 6\nvar x1 : Int = nextPerfectSquare(n : arg10)\nvar v1 : Int = 9\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 9\nvar x2 : Int = nextPerfectSquare(n : arg20)\nvar v2 : Int = 16\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the next perfect square greater than a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/245", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n *\n * >>> maxSum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9)\n * 194\n * >>> maxSum([80, 60, 30, 40, 20, 10], 6)\n * 210\n * >>> maxSum([2, 3, 14, 16, 21, 23, 29, 30], 8)\n * 138\n */\nfunc maxSum(arr : [Int], n : Int) -> Int {\n", "entry_point": "maxSum", "test": "\n\nvar arg00 : [Int] = [1, 15, 51, 45, 33, 100, 12, 18, 9]\nvar arg01 : Int = 9\nvar x0 : Int = maxSum(arr : arg00, n : arg01)\nvar v0 : Int = 194\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [80, 60, 30, 40, 20, 10]\nvar arg11 : Int = 6\nvar x1 : Int = maxSum(arr : arg10, n : arg11)\nvar v1 : Int = 210\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 3, 14, 16, 21, 23, 29, 30]\nvar arg21 : Int = 8\nvar x2 : Int = maxSum(arr : arg20, n : arg21)\nvar v2 : Int = 138\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/246", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function for computing square roots using the babylonian method.\n *\n * >>> babylonianSquareroot(10)\n * 3.162277660168379\n * >>> babylonianSquareroot(2)\n * 1.414213562373095\n * >>> babylonianSquareroot(9)\n * 3.0\n */\nfunc babylonianSquareroot(number : Int) -> Double {\n", "entry_point": "babylonianSquareroot", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Double = babylonianSquareroot(number : arg00)\nvar v0 : Double = 3.162277660168379\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar x1 : Double = babylonianSquareroot(number : arg10)\nvar v1 : Double = 1.414213562373095\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 9\nvar x2 : Double = babylonianSquareroot(number : arg20)\nvar v2 : Double = 3.0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function for computing square roots using the babylonian method.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/247", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the longest palindromic subsequence in the given string.\n *\n * >>> lps(\"TENS FOR TENS\")\n * 5\n * >>> lps(\"CARDIO FOR CARDS\")\n * 7\n * >>> lps(\"PART OF THE JOURNEY IS PART\")\n * 9\n */\nfunc lps(str : String) -> Int {\n", "entry_point": "lps", "test": "\n\nvar arg00 : String = #\"TENS FOR TENS\"#\nvar x0 : Int = lps(str : arg00)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"CARDIO FOR CARDS\"#\nvar x1 : Int = lps(str : arg10)\nvar v1 : Int = 7\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"PART OF THE JOURNEY IS PART\"#\nvar x2 : Int = lps(str : arg20)\nvar v2 : Int = 9\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the longest palindromic subsequence in the given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/248", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the harmonic sum of n-1.\n *\n * >>> harmonicSum(7)\n * 2.5928571428571425\n * >>> harmonicSum(4)\n * 2.083333333333333\n * >>> harmonicSum(19)\n * 3.547739657143682\n */\nfunc harmonicSum(n : Int) -> Double {\n", "entry_point": "harmonicSum", "test": "\n\nvar arg00 : Int = 7\nvar x0 : Double = harmonicSum(n : arg00)\nvar v0 : Double = 2.5928571428571425\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar x1 : Double = harmonicSum(n : arg10)\nvar v1 : Double = 2.083333333333333\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 19\nvar x2 : Double = harmonicSum(n : arg20)\nvar v2 : Double = 3.547739657143682\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate the harmonic sum of n-1.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/249", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the intersection of two arrays using lambda function.\n *\n * >>> intersectionArray([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9])\n * [1, 2, 8, 9]\n * >>> intersectionArray([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9])\n * [3, 5, 7, 9]\n * >>> intersectionArray([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40])\n * [10]\n */\nfunc intersectionArray(arrayNums1 : [Int], arrayNums2 : [Int]) -> [Int] {\n", "entry_point": "intersectionArray", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 5, 7, 8, 9, 10]\nvar arg01 : [Int] = [1, 2, 4, 8, 9]\nvar x0 : [Int] = intersectionArray(arrayNums1 : arg00, arrayNums2 : arg01)\nvar v0 : [Int] = [1, 2, 8, 9]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 5, 7, 8, 9, 10]\nvar arg11 : [Int] = [3, 5, 7, 9]\nvar x1 : [Int] = intersectionArray(arrayNums1 : arg10, arrayNums2 : arg11)\nvar v1 : [Int] = [3, 5, 7, 9]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 5, 7, 8, 9, 10]\nvar arg21 : [Int] = [10, 20, 30, 40]\nvar x2 : [Int] = intersectionArray(arrayNums1 : arg20, arrayNums2 : arg21)\nvar v2 : [Int] = [10]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the intersection of two arrays using lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/250", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the occcurences of an element in a tuple.\n *\n * >>> countX([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4)\n * 0\n * >>> countX([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10)\n * 3\n * >>> countX([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8)\n * 4\n */\nfunc countX(tup : [Int], x : Int) -> Int {\n", "entry_point": "countX", "test": "\n\nvar arg00 : [Int] = [10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2]\nvar arg01 : Int = 4\nvar x0 : Int = countX(tup : arg00, x : arg01)\nvar v0 : Int = 0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2]\nvar arg11 : Int = 10\nvar x1 : Int = countX(tup : arg10, x : arg11)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2]\nvar arg21 : Int = 8\nvar x2 : Int = countX(tup : arg20, x : arg21)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the occcurences of an element in a tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/251", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to insert an element before each element of a list.\n *\n * >>> insertElement([\"Red\", \"Green\", \"Black\"], \"c\")\n * [\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"]\n * >>> insertElement([\"python\", \"java\"], \"program\")\n * [\"program\", \"python\", \"program\", \"java\"]\n * >>> insertElement([\"happy\", \"sad\"], \"laugh\")\n * [\"laugh\", \"happy\", \"laugh\", \"sad\"]\n */\nfunc insertElement(list : [String], element : String) -> [String] {\n", "entry_point": "insertElement", "test": "\n\nvar arg00 : [String] = [#\"Red\"#, #\"Green\"#, #\"Black\"#]\nvar arg01 : String = #\"c\"#\nvar x0 : [String] = insertElement(list : arg00, element : arg01)\nvar v0 : [String] = [#\"c\"#, #\"Red\"#, #\"c\"#, #\"Green\"#, #\"c\"#, #\"Black\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"python\"#, #\"java\"#]\nvar arg11 : String = #\"program\"#\nvar x1 : [String] = insertElement(list : arg10, element : arg11)\nvar v1 : [String] = [#\"program\"#, #\"python\"#, #\"program\"#, #\"java\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"happy\"#, #\"sad\"#]\nvar arg21 : String = #\"laugh\"#\nvar x2 : [String] = insertElement(list : arg20, element : arg21)\nvar v2 : [String] = [#\"laugh\"#, #\"happy\"#, #\"laugh\"#, #\"sad\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to insert an element before each element of a list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/252", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert complex numbers to polar coordinates.\n *\n * >>> convert(1)\n * [1.0, 0.0]\n * >>> convert(4)\n * [4.0, 0.0]\n * >>> convert(5)\n * [5.0, 0.0]\n */\nfunc convert(numbers : Int) -> [Double] {\n", "entry_point": "convert", "test": "\n\nvar arg00 : Int = 1\nvar x0 : [Double] = convert(numbers : arg00)\nvar v0 : [Double] = [1.0, 0.0]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar x1 : [Double] = convert(numbers : arg10)\nvar v1 : [Double] = [4.0, 0.0]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar x2 : [Double] = convert(numbers : arg20)\nvar v2 : [Double] = [5.0, 0.0]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to convert complex numbers to polar coordinates.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/253", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count integers from a given list.\n *\n * >>> countInteger([1, 2, \"abc\", 1.2])\n * 2\n * >>> countInteger([1, 2, 3])\n * 3\n * >>> countInteger([1, 1.2, 4, 5.1])\n * 2\n */\nfunc countInteger(list1 : [AnyHashable]) -> Int {\n", "entry_point": "countInteger", "test": "\n\nvar arg00 : [AnyHashable] = [1, 2, #\"abc\"#, 1.2]\nvar x0 : Int = countInteger(list1 : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [1, 2, 3]\nvar x1 : Int = countInteger(list1 : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [1, 1.2, 4, 5.1]\nvar x2 : Int = countInteger(list1 : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count integers from a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/254", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all words starting with 'a' or 'e' in a given string.\n *\n * >>> wordsAe(\"python programe\")\n * [\"ame\"]\n * >>> wordsAe(\"python programe language\")\n * [\"ame\", \"anguage\"]\n * >>> wordsAe(\"assert statement\")\n * [\"assert\", \"atement\"]\n */\nfunc wordsAe(text : String) -> [String] {\n", "entry_point": "wordsAe", "test": "\n\nvar arg00 : String = #\"python programe\"#\nvar x0 : [String] = wordsAe(text : arg00)\nvar v0 : [String] = [#\"ame\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"python programe language\"#\nvar x1 : [String] = wordsAe(text : arg10)\nvar v1 : [String] = [#\"ame\"#, #\"anguage\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"assert statement\"#\nvar x2 : [String] = wordsAe(text : arg20)\nvar v2 : [String] = [#\"assert\"#, #\"atement\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find all words starting with 'a' or 'e' in a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/255", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n *\n * >>> combinationsColors([\"Red\", \"Green\", \"Blue\"], 1)\n * [[\"Red\"], [\"Green\"], [\"Blue\"]]\n * >>> combinationsColors([\"Red\", \"Green\", \"Blue\"], 2)\n * [[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]]\n * >>> combinationsColors([\"Red\", \"Green\", \"Blue\"], 3)\n * [[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]]\n */\nfunc combinationsColors(l : [String], n : Int) -> [[String]] {\n", "entry_point": "combinationsColors", "test": "\n\nvar arg00 : [String] = [#\"Red\"#, #\"Green\"#, #\"Blue\"#]\nvar arg01 : Int = 1\nvar x0 : [[String]] = combinationsColors(l : arg00, n : arg01)\nvar v0 : [[String]] = [[#\"Red\"#], [#\"Green\"#], [#\"Blue\"#]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"Red\"#, #\"Green\"#, #\"Blue\"#]\nvar arg11 : Int = 2\nvar x1 : [[String]] = combinationsColors(l : arg10, n : arg11)\nvar v1 : [[String]] = [[#\"Red\"#, #\"Red\"#], [#\"Red\"#, #\"Green\"#], [#\"Red\"#, #\"Blue\"#], [#\"Green\"#, #\"Green\"#], [#\"Green\"#, #\"Blue\"#], [#\"Blue\"#, #\"Blue\"#]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"Red\"#, #\"Green\"#, #\"Blue\"#]\nvar arg21 : Int = 3\nvar x2 : [[String]] = combinationsColors(l : arg20, n : arg21)\nvar v2 : [[String]] = [[#\"Red\"#, #\"Red\"#, #\"Red\"#], [#\"Red\"#, #\"Red\"#, #\"Green\"#], [#\"Red\"#, #\"Red\"#, #\"Blue\"#], [#\"Red\"#, #\"Green\"#, #\"Green\"#], [#\"Red\"#, #\"Green\"#, #\"Blue\"#], [#\"Red\"#, #\"Blue\"#, #\"Blue\"#], [#\"Green\"#, #\"Green\"#, #\"Green\"#], [#\"Green\"#, #\"Green\"#, #\"Blue\"#], [#\"Green\"#, #\"Blue\"#, #\"Blue\"#], [#\"Blue\"#, #\"Blue\"#, #\"Blue\"#]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/256", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of prime numbers less than a given non-negative number.\n *\n * >>> countPrimesNums(5)\n * 2\n * >>> countPrimesNums(10)\n * 4\n * >>> countPrimesNums(100)\n * 25\n */\nfunc countPrimesNums(n : Int) -> Int {\n", "entry_point": "countPrimesNums", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Int = countPrimesNums(n : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar x1 : Int = countPrimesNums(n : arg10)\nvar v1 : Int = 4\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 100\nvar x2 : Int = countPrimesNums(n : arg20)\nvar v2 : Int = 25\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the number of prime numbers less than a given non-negative number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/257", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to swap two numbers.\n *\n * >>> swapNumbers(10, 20)\n * [20, 10]\n * >>> swapNumbers(15, 17)\n * [17, 15]\n * >>> swapNumbers(100, 200)\n * [200, 100]\n */\nfunc swapNumbers(a : Int, b : Int) -> [Int] {\n", "entry_point": "swapNumbers", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 20\nvar x0 : [Int] = swapNumbers(a : arg00, b : arg01)\nvar v0 : [Int] = [20, 10]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 15\nvar arg11 : Int = 17\nvar x1 : [Int] = swapNumbers(a : arg10, b : arg11)\nvar v1 : [Int] = [17, 15]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 100\nvar arg21 : Int = 200\nvar x2 : [Int] = swapNumbers(a : arg20, b : arg21)\nvar v2 : [Int] = [200, 100]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to swap two numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/258", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find number of odd elements in the given list using lambda function.\n *\n * >>> countOdd([1, 2, 3, 5, 7, 8, 10])\n * 4\n * >>> countOdd([10, 15, 14, 13, -18, 12, -20])\n * 2\n * >>> countOdd([1, 2, 4, 8, 9])\n * 2\n */\nfunc countOdd(arrayNums : [Int]) -> Int {\n", "entry_point": "countOdd", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 5, 7, 8, 10]\nvar x0 : Int = countOdd(arrayNums : arg00)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [10, 15, 14, 13, -18, 12, -20]\nvar x1 : Int = countOdd(arrayNums : arg10)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 4, 8, 9]\nvar x2 : Int = countOdd(arrayNums : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find number of odd elements in the given list using lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/259", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to maximize the given two tuples.\n *\n * >>> maximizeElements([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n * [[6, 7], [4, 9], [2, 9], [7, 10]]\n * >>> maximizeElements([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])\n * [[7, 8], [5, 10], [3, 10], [8, 11]]\n * >>> maximizeElements([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])\n * [[8, 9], [6, 11], [4, 11], [9, 12]]\n */\nfunc maximizeElements(testTup1 : [[Int]], testTup2 : [[Int]]) -> [[Int]] {\n", "entry_point": "maximizeElements", "test": "\n\nvar arg00 : [[Int]] = [[1, 3], [4, 5], [2, 9], [1, 10]]\nvar arg01 : [[Int]] = [[6, 7], [3, 9], [1, 1], [7, 3]]\nvar x0 : [[Int]] = maximizeElements(testTup1 : arg00, testTup2 : arg01)\nvar v0 : [[Int]] = [[6, 7], [4, 9], [2, 9], [7, 10]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[2, 4], [5, 6], [3, 10], [2, 11]]\nvar arg11 : [[Int]] = [[7, 8], [4, 10], [2, 2], [8, 4]]\nvar x1 : [[Int]] = maximizeElements(testTup1 : arg10, testTup2 : arg11)\nvar v1 : [[Int]] = [[7, 8], [5, 10], [3, 10], [8, 11]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[3, 5], [6, 7], [4, 11], [3, 12]]\nvar arg21 : [[Int]] = [[8, 9], [5, 11], [3, 3], [9, 5]]\nvar x2 : [[Int]] = maximizeElements(testTup1 : arg20, testTup2 : arg21)\nvar v2 : [[Int]] = [[8, 9], [6, 11], [4, 11], [9, 12]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to maximize the given two tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/260", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n *\n * >>> newmanPrime(3)\n * 7\n * >>> newmanPrime(4)\n * 17\n * >>> newmanPrime(5)\n * 41\n */\nfunc newmanPrime(n : Int) -> Int {\n", "entry_point": "newmanPrime", "test": "\n\nvar arg00 : Int = 3\nvar x0 : Int = newmanPrime(n : arg00)\nvar v0 : Int = 7\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar x1 : Int = newmanPrime(n : arg10)\nvar v1 : Int = 17\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar x2 : Int = newmanPrime(n : arg20)\nvar v2 : Int = 41\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/261", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform mathematical division operation across the given tuples.\n *\n * >>> divisionElements([10, 4, 6, 9], [5, 2, 3, 3])\n * [2, 2, 2, 3]\n * >>> divisionElements([12, 6, 8, 16], [6, 3, 4, 4])\n * [2, 2, 2, 4]\n * >>> divisionElements([20, 14, 36, 18], [5, 7, 6, 9])\n * [4, 2, 6, 2]\n */\nfunc divisionElements(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n", "entry_point": "divisionElements", "test": "\n\nvar arg00 : [Int] = [10, 4, 6, 9]\nvar arg01 : [Int] = [5, 2, 3, 3]\nvar x0 : [Int] = divisionElements(testTup1 : arg00, testTup2 : arg01)\nvar v0 : [Int] = [2, 2, 2, 3]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [12, 6, 8, 16]\nvar arg11 : [Int] = [6, 3, 4, 4]\nvar x1 : [Int] = divisionElements(testTup1 : arg10, testTup2 : arg11)\nvar v1 : [Int] = [2, 2, 2, 4]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [20, 14, 36, 18]\nvar arg21 : [Int] = [5, 7, 6, 9]\nvar x2 : [Int] = divisionElements(testTup1 : arg20, testTup2 : arg21)\nvar v2 : [Int] = [4, 2, 6, 2]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to perform mathematical division operation across the given tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/262", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to split a given list into two parts where the length of the first part of the list is given.\n *\n * >>> splitTwoParts([1, 1, 2, 3, 4, 4, 5, 1], 3)\n * [[1, 1, 2], [3, 4, 4, 5, 1]]\n * >>> splitTwoParts([\"a\", \"b\", \"c\", \"d\"], 2)\n * [[\"a\", \"b\"], [\"c\", \"d\"]]\n * >>> splitTwoParts([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4)\n * [[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]\n */\nfunc splitTwoParts(list1 : [AnyHashable], l : Int) -> [[AnyHashable]] {\n", "entry_point": "splitTwoParts", "test": "\n\nvar arg00 : [AnyHashable] = [1, 1, 2, 3, 4, 4, 5, 1]\nvar arg01 : Int = 3\nvar x0 : [[AnyHashable]] = splitTwoParts(list1 : arg00, l : arg01)\nvar v0 : [[AnyHashable]] = [[1, 1, 2], [3, 4, 4, 5, 1]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [#\"a\"#, #\"b\"#, #\"c\"#, #\"d\"#]\nvar arg11 : Int = 2\nvar x1 : [[AnyHashable]] = splitTwoParts(list1 : arg10, l : arg11)\nvar v1 : [[AnyHashable]] = [[#\"a\"#, #\"b\"#], [#\"c\"#, #\"d\"#]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [#\"p\"#, #\"y\"#, #\"t\"#, #\"h\"#, #\"o\"#, #\"n\"#]\nvar arg21 : Int = 4\nvar x2 : [[AnyHashable]] = splitTwoParts(list1 : arg20, l : arg21)\nvar v2 : [[AnyHashable]] = [[#\"p\"#, #\"y\"#, #\"t\"#, #\"h\"#], [#\"o\"#, #\"n\"#]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to split a given list into two parts where the length of the first part of the list is given.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/263", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to merge two dictionaries.\n *\n * >>> mergeDict([\"a\" : 100, \"b\" : 200], [\"x\" : 300, \"y\" : 200])\n * [\"x\" : 300, \"y\" : 200, \"a\" : 100, \"b\" : 200]\n * >>> mergeDict([\"a\" : 900, \"b\" : 900, \"d\" : 900], [\"a\" : 900, \"b\" : 900, \"d\" : 900])\n * [\"a\" : 900, \"b\" : 900, \"d\" : 900]\n * >>> mergeDict([\"a\" : 10, \"b\" : 20], [\"x\" : 30, \"y\" : 40])\n * [\"x\" : 30, \"y\" : 40, \"a\" : 10, \"b\" : 20]\n */\nfunc mergeDict(d1 : [String: Int], d2 : [String: Int]) -> [String: Int] {\n", "entry_point": "mergeDict", "test": "\n\nvar arg00 : [String: Int] = [#\"a\"# : 100, #\"b\"# : 200]\nvar arg01 : [String: Int] = [#\"x\"# : 300, #\"y\"# : 200]\nvar x0 : [String: Int] = mergeDict(d1 : arg00, d2 : arg01)\nvar v0 : [String: Int] = [#\"x\"# : 300, #\"y\"# : 200, #\"a\"# : 100, #\"b\"# : 200]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String: Int] = [#\"a\"# : 900, #\"b\"# : 900, #\"d\"# : 900]\nvar arg11 : [String: Int] = [#\"a\"# : 900, #\"b\"# : 900, #\"d\"# : 900]\nvar x1 : [String: Int] = mergeDict(d1 : arg10, d2 : arg11)\nvar v1 : [String: Int] = [#\"a\"# : 900, #\"b\"# : 900, #\"d\"# : 900]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String: Int] = [#\"a\"# : 10, #\"b\"# : 20]\nvar arg21 : [String: Int] = [#\"x\"# : 30, #\"y\"# : 40]\nvar x2 : [String: Int] = mergeDict(d1 : arg20, d2 : arg21)\nvar v2 : [String: Int] = [#\"x\"# : 30, #\"y\"# : 40, #\"a\"# : 10, #\"b\"# : 20]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to merge two dictionaries.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/264", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate a dog's age in dog's years.\n *\n * >>> dogAge(12)\n * 61\n * >>> dogAge(15)\n * 73\n * >>> dogAge(24)\n * 109\n */\nfunc dogAge(hAge : Int) -> Int {\n", "entry_point": "dogAge", "test": "\n\nvar arg00 : Int = 12\nvar x0 : Int = dogAge(hAge : arg00)\nvar v0 : Int = 61\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 15\nvar x1 : Int = dogAge(hAge : arg10)\nvar v1 : Int = 73\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 24\nvar x2 : Int = dogAge(hAge : arg20)\nvar v2 : Int = 109\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate a dog's age in dog's years.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/265", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to split a list for every nth element.\n *\n * >>> listSplit([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], 3)\n * [[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]]\n * >>> listSplit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3)\n * [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]\n * >>> listSplit([\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"], 2)\n * [[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]]\n */\nfunc listSplit(s : [AnyHashable], step : Int) -> [[AnyHashable]] {\n", "entry_point": "listSplit", "test": "\n\nvar arg00 : [AnyHashable] = [#\"a\"#, #\"b\"#, #\"c\"#, #\"d\"#, #\"e\"#, #\"f\"#, #\"g\"#, #\"h\"#, #\"i\"#, #\"j\"#, #\"k\"#, #\"l\"#, #\"m\"#, #\"n\"#]\nvar arg01 : Int = 3\nvar x0 : [[AnyHashable]] = listSplit(s : arg00, step : arg01)\nvar v0 : [[AnyHashable]] = [[#\"a\"#, #\"d\"#, #\"g\"#, #\"j\"#, #\"m\"#], [#\"b\"#, #\"e\"#, #\"h\"#, #\"k\"#, #\"n\"#], [#\"c\"#, #\"f\"#, #\"i\"#, #\"l\"#]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nvar arg11 : Int = 3\nvar x1 : [[AnyHashable]] = listSplit(s : arg10, step : arg11)\nvar v1 : [[AnyHashable]] = [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [#\"python\"#, #\"java\"#, #\"C\"#, #\"C++\"#, #\"DBMS\"#, #\"SQL\"#]\nvar arg21 : Int = 2\nvar x2 : [[AnyHashable]] = listSplit(s : arg20, step : arg21)\nvar v2 : [[AnyHashable]] = [[#\"python\"#, #\"C\"#, #\"DBMS\"#], [#\"java\"#, #\"C++\"#, #\"SQL\"#]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to split a list for every nth element.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/266", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lateral surface area of a cube.\n *\n * >>> lateralsurfaceCube(5)\n * 100\n * >>> lateralsurfaceCube(9)\n * 324\n * >>> lateralsurfaceCube(10)\n * 400\n */\nfunc lateralsurfaceCube(l : Int) -> Int {\n", "entry_point": "lateralsurfaceCube", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Int = lateralsurfaceCube(l : arg00)\nvar v0 : Int = 100\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 9\nvar x1 : Int = lateralsurfaceCube(l : arg10)\nvar v1 : Int = 324\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 10\nvar x2 : Int = lateralsurfaceCube(l : arg20)\nvar v2 : Int = 400\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the lateral surface area of a cube.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/267", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of squares of first n odd natural numbers.\n *\n * >>> squareSum(2)\n * 10\n * >>> squareSum(3)\n * 35\n * >>> squareSum(4)\n * 84\n */\nfunc squareSum(n : Int) -> Int {\n", "entry_point": "squareSum", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = squareSum(n : arg00)\nvar v0 : Int = 10\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar x1 : Int = squareSum(n : arg10)\nvar v1 : Int = 35\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar x2 : Int = squareSum(n : arg20)\nvar v2 : Int = 84\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of squares of first n odd natural numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/268", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n'th star number.\n *\n * >>> findStarNum(3)\n * 37\n * >>> findStarNum(4)\n * 73\n * >>> findStarNum(5)\n * 121\n */\nfunc findStarNum(n : Int) -> Int {\n", "entry_point": "findStarNum", "test": "\n\nvar arg00 : Int = 3\nvar x0 : Int = findStarNum(n : arg00)\nvar v0 : Int = 37\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar x1 : Int = findStarNum(n : arg10)\nvar v1 : Int = 73\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar x2 : Int = findStarNum(n : arg20)\nvar v2 : Int = 121\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the n'th star number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/269", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the ascii value of a character.\n *\n * >>> asciiValue(\"A\")\n * 65\n * >>> asciiValue(\"R\")\n * 82\n * >>> asciiValue(\"S\")\n * 83\n */\nfunc asciiValue(k : String) -> Int {\n", "entry_point": "asciiValue", "test": "\n\nvar arg00 : String = #\"A\"#\nvar x0 : Int = asciiValue(k : arg00)\nvar v0 : Int = 65\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"R\"#\nvar x1 : Int = asciiValue(k : arg10)\nvar v1 : Int = 82\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"S\"#\nvar x2 : Int = asciiValue(k : arg20)\nvar v2 : Int = 83\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the ascii value of a character.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/270", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of even numbers at even positions.\n *\n * >>> sumEvenAndEvenIndex([5, 6, 12, 1, 18, 8], 6)\n * 30\n * >>> sumEvenAndEvenIndex([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10)\n * 26\n * >>> sumEvenAndEvenIndex([5, 6, 12, 1], 4)\n * 12\n */\nfunc sumEvenAndEvenIndex(arr : [Int], n : Int) -> Int {\n", "entry_point": "sumEvenAndEvenIndex", "test": "\n\nvar arg00 : [Int] = [5, 6, 12, 1, 18, 8]\nvar arg01 : Int = 6\nvar x0 : Int = sumEvenAndEvenIndex(arr : arg00, n : arg01)\nvar v0 : Int = 30\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]\nvar arg11 : Int = 10\nvar x1 : Int = sumEvenAndEvenIndex(arr : arg10, n : arg11)\nvar v1 : Int = 26\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [5, 6, 12, 1]\nvar arg21 : Int = 4\nvar x2 : Int = sumEvenAndEvenIndex(arr : arg20, n : arg21)\nvar v2 : Int = 12\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of even numbers at even positions.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/271", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of fifth power of first n even natural numbers.\n *\n * >>> evenPowerSum(2)\n * 1056\n * >>> evenPowerSum(3)\n * 8832\n * >>> evenPowerSum(1)\n * 32\n */\nfunc evenPowerSum(n : Int) -> Int {\n", "entry_point": "evenPowerSum", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = evenPowerSum(n : arg00)\nvar v0 : Int = 1056\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar x1 : Int = evenPowerSum(n : arg10)\nvar v1 : Int = 8832\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar x2 : Int = evenPowerSum(n : arg20)\nvar v2 : Int = 32\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of fifth power of first n even natural numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/272", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perfom the rear element extraction from list of tuples records.\n *\n * >>> rearExtract([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]])\n * [21, 20, 19]\n * >>> rearExtract([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]])\n * [36, 25, 45]\n * >>> rearExtract([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]])\n * [14, 36, 56]\n */\nfunc rearExtract(testList : [[AnyHashable]]) -> [Int] {\n", "entry_point": "rearExtract", "test": "\n\nvar arg00 : [[AnyHashable]] = [[1, #\"Rash\"#, 21], [2, #\"Varsha\"#, 20], [3, #\"Kil\"#, 19]]\nvar x0 : [Int] = rearExtract(testList : arg00)\nvar v0 : [Int] = [21, 20, 19]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[1, #\"Sai\"#, 36], [2, #\"Ayesha\"#, 25], [3, #\"Salman\"#, 45]]\nvar x1 : [Int] = rearExtract(testList : arg10)\nvar v1 : [Int] = [36, 25, 45]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[1, #\"Sudeep\"#, 14], [2, #\"Vandana\"#, 36], [3, #\"Dawood\"#, 56]]\nvar x2 : [Int] = rearExtract(testList : arg20)\nvar v2 : [Int] = [14, 36, 56]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to perfom the rear element extraction from list of tuples records.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/273", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to substract the contents of one tuple with corresponding index of other tuple.\n *\n * >>> substractElements([10, 4, 5], [2, 5, 18])\n * [8, -1, -13]\n * >>> substractElements([11, 2, 3], [24, 45, 16])\n * [-13, -43, -13]\n * >>> substractElements([7, 18, 9], [10, 11, 12])\n * [-3, 7, -3]\n */\nfunc substractElements(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n", "entry_point": "substractElements", "test": "\n\nvar arg00 : [Int] = [10, 4, 5]\nvar arg01 : [Int] = [2, 5, 18]\nvar x0 : [Int] = substractElements(testTup1 : arg00, testTup2 : arg01)\nvar v0 : [Int] = [8, -1, -13]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [11, 2, 3]\nvar arg11 : [Int] = [24, 45, 16]\nvar x1 : [Int] = substractElements(testTup1 : arg10, testTup2 : arg11)\nvar v1 : [Int] = [-13, -43, -13]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [7, 18, 9]\nvar arg21 : [Int] = [10, 11, 12]\nvar x2 : [Int] = substractElements(testTup1 : arg20, testTup2 : arg21)\nvar v2 : [Int] = [-3, 7, -3]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to substract the contents of one tuple with corresponding index of other tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/274", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of even index binomial coefficients.\n *\n * >>> evenBinomialCoeffSum(4)\n * 8\n * >>> evenBinomialCoeffSum(6)\n * 32\n * >>> evenBinomialCoeffSum(2)\n * 2\n */\nfunc evenBinomialCoeffSum(n : Int) -> Int {\n", "entry_point": "evenBinomialCoeffSum", "test": "\n\nvar arg00 : Int = 4\nvar x0 : Int = evenBinomialCoeffSum(n : arg00)\nvar v0 : Int = 8\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 6\nvar x1 : Int = evenBinomialCoeffSum(n : arg10)\nvar v1 : Int = 32\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar x2 : Int = evenBinomialCoeffSum(n : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find sum of even index binomial coefficients.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/275", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the position of the last removed element from the given array.\n *\n * >>> getPosition([2, 5, 4], 3, 2)\n * 2\n * >>> getPosition([4, 3], 2, 2)\n * 2\n * >>> getPosition([1, 2, 3, 4], 4, 1)\n * 4\n */\nfunc getPosition(a : [Int], n : Int, m : Int) -> Int {\n", "entry_point": "getPosition", "test": "\n\nvar arg00 : [Int] = [2, 5, 4]\nvar arg01 : Int = 3\nvar arg02 : Int = 2\nvar x0 : Int = getPosition(a : arg00, n : arg01, m : arg02)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 3]\nvar arg11 : Int = 2\nvar arg12 : Int = 2\nvar x1 : Int = getPosition(a : arg10, n : arg11, m : arg12)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4]\nvar arg21 : Int = 4\nvar arg22 : Int = 1\nvar x2 : Int = getPosition(a : arg20, n : arg21, m : arg22)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the position of the last removed element from the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/276", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cylinder.\n *\n * >>> volumeCylinder(10, 5)\n * 1570.7500000000002\n * >>> volumeCylinder(4, 5)\n * 251.32000000000002\n * >>> volumeCylinder(4, 10)\n * 502.64000000000004\n */\nfunc volumeCylinder(r : Int, h : Int) -> Double {\n", "entry_point": "volumeCylinder", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 5\nvar x0 : Double = volumeCylinder(r : arg00, h : arg01)\nvar v0 : Double = 1570.7500000000002\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar arg11 : Int = 5\nvar x1 : Double = volumeCylinder(r : arg10, h : arg11)\nvar v1 : Double = 251.32000000000002\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar arg21 : Int = 10\nvar x2 : Double = volumeCylinder(r : arg20, h : arg21)\nvar v2 : Double = 502.64000000000004\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the volume of a cylinder.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/277", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to filter a dictionary based on values.\n *\n * >>> dictFilter([\"Cierra Vega\" : 175, \"Alden Cantrell\" : 180, \"Kierra Gentry\" : 165, \"Pierre Cox\" : 190], 170)\n * [\"Cierra Vega\" : 175, \"Alden Cantrell\" : 180, \"Pierre Cox\" : 190]\n * >>> dictFilter([\"Cierra Vega\" : 175, \"Alden Cantrell\" : 180, \"Kierra Gentry\" : 165, \"Pierre Cox\" : 190], 180)\n * [\"Alden Cantrell\" : 180, \"Pierre Cox\" : 190]\n * >>> dictFilter([\"Cierra Vega\" : 175, \"Alden Cantrell\" : 180, \"Kierra Gentry\" : 165, \"Pierre Cox\" : 190], 190)\n * [\"Pierre Cox\" : 190]\n */\nfunc dictFilter(dict : [String: Int], n : Int) -> [String: Int] {\n", "entry_point": "dictFilter", "test": "\n\nvar arg00 : [String: Int] = [#\"Cierra Vega\"# : 175, #\"Alden Cantrell\"# : 180, #\"Kierra Gentry\"# : 165, #\"Pierre Cox\"# : 190]\nvar arg01 : Int = 170\nvar x0 : [String: Int] = dictFilter(dict : arg00, n : arg01)\nvar v0 : [String: Int] = [#\"Cierra Vega\"# : 175, #\"Alden Cantrell\"# : 180, #\"Pierre Cox\"# : 190]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String: Int] = [#\"Cierra Vega\"# : 175, #\"Alden Cantrell\"# : 180, #\"Kierra Gentry\"# : 165, #\"Pierre Cox\"# : 190]\nvar arg11 : Int = 180\nvar x1 : [String: Int] = dictFilter(dict : arg10, n : arg11)\nvar v1 : [String: Int] = [#\"Alden Cantrell\"# : 180, #\"Pierre Cox\"# : 190]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String: Int] = [#\"Cierra Vega\"# : 175, #\"Alden Cantrell\"# : 180, #\"Kierra Gentry\"# : 165, #\"Pierre Cox\"# : 190]\nvar arg21 : Int = 190\nvar x2 : [String: Int] = dictFilter(dict : arg20, n : arg21)\nvar v2 : [String: Int] = [#\"Pierre Cox\"# : 190]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to filter a dictionary based on values.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/278", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the element count that occurs before the record in the given tuple.\n *\n * >>> countFirstElements([1, 5, 7, [4, 6], 10])\n * 3\n * >>> countFirstElements([2, 9, [5, 7], 11])\n * 2\n * >>> countFirstElements([11, 15, 5, 8, [2, 3], 8])\n * 4\n */\nfunc countFirstElements(testTup : [AnyHashable]) -> Int {\n", "entry_point": "countFirstElements", "test": "\n\nvar arg00 : [AnyHashable] = [1, 5, 7, [4, 6], 10]\nvar x0 : Int = countFirstElements(testTup : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [2, 9, [5, 7], 11]\nvar x1 : Int = countFirstElements(testTup : arg10)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [11, 15, 5, 8, [2, 3], 8]\nvar x2 : Int = countFirstElements(testTup : arg20)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the element count that occurs before the record in the given tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/279", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth decagonal number.\n *\n * >>> isNumDecagonal(3)\n * 27\n * >>> isNumDecagonal(7)\n * 175\n * >>> isNumDecagonal(10)\n * 370\n */\nfunc isNumDecagonal(n : Int) -> Int {\n", "entry_point": "isNumDecagonal", "test": "\n\nvar arg00 : Int = 3\nvar x0 : Int = isNumDecagonal(n : arg00)\nvar v0 : Int = 27\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 7\nvar x1 : Int = isNumDecagonal(n : arg10)\nvar v1 : Int = 175\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 10\nvar x2 : Int = isNumDecagonal(n : arg20)\nvar v2 : Int = 370\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the nth decagonal number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/280", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to search an element in the given array by using sequential search.\n *\n * >>> sequentialSearch([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31)\n * [true, 3]\n * >>> sequentialSearch([12, 32, 45, 62, 35, 47, 44, 61], 61)\n * [true, 7]\n * >>> sequentialSearch([9, 10, 17, 19, 22, 39, 48, 56], 48)\n * [true, 6]\n */\nfunc sequentialSearch(dlist : [Int], item : Int) -> [AnyHashable] {\n", "entry_point": "sequentialSearch", "test": "\n\nvar arg00 : [Int] = [11, 23, 58, 31, 56, 77, 43, 12, 65, 19]\nvar arg01 : Int = 31\nvar x0 : [AnyHashable] = sequentialSearch(dlist : arg00, item : arg01)\nvar v0 : [AnyHashable] = [true, 3]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [12, 32, 45, 62, 35, 47, 44, 61]\nvar arg11 : Int = 61\nvar x1 : [AnyHashable] = sequentialSearch(dlist : arg10, item : arg11)\nvar v1 : [AnyHashable] = [true, 7]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [9, 10, 17, 19, 22, 39, 48, 56]\nvar arg21 : Int = 48\nvar x2 : [AnyHashable] = sequentialSearch(dlist : arg20, item : arg21)\nvar v2 : [AnyHashable] = [true, 6]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to search an element in the given array by using sequential search.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/281", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if the elements of a given list are unique or not.\n *\n * >>> allUnique([1, 2, 3])\n * true\n * >>> allUnique([1, 2, 1, 2])\n * false\n * >>> allUnique([1, 2, 3, 4, 5])\n * true\n */\nfunc allUnique(testList : [Int]) -> Bool {\n", "entry_point": "allUnique", "test": "\n\nvar arg00 : [Int] = [1, 2, 3]\nvar x0 : Bool = allUnique(testList : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 1, 2]\nvar x1 : Bool = allUnique(testList : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4, 5]\nvar x2 : Bool = allUnique(testList : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check if the elements of a given list are unique or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/282", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to substaract two lists using map and lambda function.\n *\n * >>> subList([1, 2, 3], [4, 5, 6])\n * [-3, -3, -3]\n * >>> subList([1, 2], [3, 4])\n * [-2, -2]\n * >>> subList([90, 120], [50, 70])\n * [40, 50]\n */\nfunc subList(nums1 : [Int], nums2 : [Int]) -> [Int] {\n", "entry_point": "subList", "test": "\n\nvar arg00 : [Int] = [1, 2, 3]\nvar arg01 : [Int] = [4, 5, 6]\nvar x0 : [Int] = subList(nums1 : arg00, nums2 : arg01)\nvar v0 : [Int] = [-3, -3, -3]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2]\nvar arg11 : [Int] = [3, 4]\nvar x1 : [Int] = subList(nums1 : arg10, nums2 : arg11)\nvar v1 : [Int] = [-2, -2]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [90, 120]\nvar arg21 : [Int] = [50, 70]\nvar x2 : [Int] = subList(nums1 : arg20, nums2 : arg21)\nvar v2 : [Int] = [40, 50]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to substaract two lists using map and lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/283", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the frequency of each digit is less than or equal to the digit itself.\n *\n * >>> validate(1234)\n * true\n * >>> validate(51241)\n * false\n * >>> validate(321)\n * true\n */\nfunc validate(n : Int) -> Bool {\n", "entry_point": "validate", "test": "\n\nvar arg00 : Int = 1234\nvar x0 : Bool = validate(n : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 51241\nvar x1 : Bool = validate(n : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 321\nvar x2 : Bool = validate(n : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the frequency of each digit is less than or equal to the digit itself.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/284", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether all items of a list are equal to a given string.\n *\n * >>> checkElement([\"green\", \"orange\", \"black\", \"white\"], \"blue\")\n * false\n * >>> checkElement([1, 2, 3, 4], 7)\n * false\n * >>> checkElement([\"green\", \"green\", \"green\", \"green\"], \"green\")\n * true\n */\nfunc checkElement(list : [AnyHashable], element : AnyHashable) -> Bool {\n", "entry_point": "checkElement", "test": "\n\nvar arg00 : [AnyHashable] = [#\"green\"#, #\"orange\"#, #\"black\"#, #\"white\"#]\nvar arg01 : AnyHashable = #\"blue\"#\nvar x0 : Bool = checkElement(list : arg00, element : arg01)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [1, 2, 3, 4]\nvar arg11 : AnyHashable = 7\nvar x1 : Bool = checkElement(list : arg10, element : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [#\"green\"#, #\"green\"#, #\"green\"#, #\"green\"#]\nvar arg21 : AnyHashable = #\"green\"#\nvar x2 : Bool = checkElement(list : arg20, element : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether all items of a list are equal to a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/285", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n *\n * >>> textMatchTwoThree(\"ac\")\n * \"Not matched!\"\n * >>> textMatchTwoThree(\"dc\")\n * \"Not matched!\"\n * >>> textMatchTwoThree(\"abbbba\")\n * \"Found a match!\"\n */\nfunc textMatchTwoThree(text : String) -> String {\n", "entry_point": "textMatchTwoThree", "test": "\n\nvar arg00 : String = #\"ac\"#\nvar x0 : String = textMatchTwoThree(text : arg00)\nvar v0 : String = #\"Not matched!\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"dc\"#\nvar x1 : String = textMatchTwoThree(text : arg10)\nvar v1 : String = #\"Not matched!\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"abbbba\"#\nvar x2 : String = textMatchTwoThree(text : arg20)\nvar v2 : String = #\"Found a match!\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function that matches a string that has an a followed by two to three 'b'.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/286", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n *\n * >>> maxSubArraySumRepeated([10, 20, -30, -1], 4, 3)\n * 30\n * >>> maxSubArraySumRepeated([-1, 10, 20], 3, 2)\n * 59\n * >>> maxSubArraySumRepeated([-1, -2, -3], 3, 3)\n * -1\n */\nfunc maxSubArraySumRepeated(a : [Int], n : Int, k : Int) -> Int {\n", "entry_point": "maxSubArraySumRepeated", "test": "\n\nvar arg00 : [Int] = [10, 20, -30, -1]\nvar arg01 : Int = 4\nvar arg02 : Int = 3\nvar x0 : Int = maxSubArraySumRepeated(a : arg00, n : arg01, k : arg02)\nvar v0 : Int = 30\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [-1, 10, 20]\nvar arg11 : Int = 3\nvar arg12 : Int = 2\nvar x1 : Int = maxSubArraySumRepeated(a : arg10, n : arg11, k : arg12)\nvar v1 : Int = 59\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [-1, -2, -3]\nvar arg21 : Int = 3\nvar arg22 : Int = 3\nvar x2 : Int = maxSubArraySumRepeated(a : arg20, n : arg21, k : arg22)\nvar v2 : Int = -1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/287", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of squares of first n even natural numbers.\n *\n * >>> squareSum(2)\n * 20\n * >>> squareSum(3)\n * 56\n * >>> squareSum(4)\n * 120\n */\nfunc squareSum(n : Int) -> Int {\n", "entry_point": "squareSum", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = squareSum(n : arg00)\nvar v0 : Int = 20\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar x1 : Int = squareSum(n : arg10)\nvar v1 : Int = 56\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar x2 : Int = squareSum(n : arg20)\nvar v2 : Int = 120\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of squares of first n even natural numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/288", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count array elements having modular inverse under given prime number p equal to itself.\n *\n * >>> modularInverse([1, 6, 4, 5], 4, 7)\n * 2\n * >>> modularInverse([1, 3, 8, 12, 12], 5, 13)\n * 3\n * >>> modularInverse([2, 3, 4, 5], 4, 6)\n * 1\n */\nfunc modularInverse(arr : [Int], n : Int, p : Int) -> Int {\n", "entry_point": "modularInverse", "test": "\n\nvar arg00 : [Int] = [1, 6, 4, 5]\nvar arg01 : Int = 4\nvar arg02 : Int = 7\nvar x0 : Int = modularInverse(arr : arg00, n : arg01, p : arg02)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 3, 8, 12, 12]\nvar arg11 : Int = 5\nvar arg12 : Int = 13\nvar x1 : Int = modularInverse(arr : arg10, n : arg11, p : arg12)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 3, 4, 5]\nvar arg21 : Int = 4\nvar arg22 : Int = 6\nvar x2 : Int = modularInverse(arr : arg20, n : arg21, p : arg22)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count array elements having modular inverse under given prime number p equal to itself.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/289", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to calculate the number of odd days in a given year.\n *\n * >>> oddDays(100)\n * 5\n * >>> oddDays(50)\n * 6\n * >>> oddDays(75)\n * 2\n */\nfunc oddDays(n : Int) -> Int {\n", "entry_point": "oddDays", "test": "\n\nvar arg00 : Int = 100\nvar x0 : Int = oddDays(n : arg00)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 50\nvar x1 : Int = oddDays(n : arg10)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 75\nvar x2 : Int = oddDays(n : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to calculate the number of odd days in a given year.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/290", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the list of lists with maximum length.\n *\n * >>> maxLength([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n * [3, [13, 15, 17]]\n * >>> maxLength([[1], [5, 7], [10, 12, 14, 15]])\n * [4, [10, 12, 14, 15]]\n * >>> maxLength([[5], [15, 20, 25]])\n * [3, [15, 20, 25]]\n */\nfunc maxLength(list1 : [[Int]]) -> [AnyHashable] {\n", "entry_point": "maxLength", "test": "\n\nvar arg00 : [[Int]] = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]\nvar x0 : [AnyHashable] = maxLength(list1 : arg00)\nvar v0 : [AnyHashable] = [3, [13, 15, 17]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1], [5, 7], [10, 12, 14, 15]]\nvar x1 : [AnyHashable] = maxLength(list1 : arg10)\nvar v1 : [AnyHashable] = [4, [10, 12, 14, 15]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[5], [15, 20, 25]]\nvar x2 : [AnyHashable] = maxLength(list1 : arg20)\nvar v2 : [AnyHashable] = [3, [15, 20, 25]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the list of lists with maximum length.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/291", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n *\n * >>> countNoOfWays(2, 4)\n * 16\n * >>> countNoOfWays(3, 2)\n * 6\n * >>> countNoOfWays(4, 4)\n * 228\n */\nfunc countNoOfWays(n : Int, k : Int) -> Int {\n", "entry_point": "countNoOfWays", "test": "\n\nvar arg00 : Int = 2\nvar arg01 : Int = 4\nvar x0 : Int = countNoOfWays(n : arg00, k : arg01)\nvar v0 : Int = 16\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar arg11 : Int = 2\nvar x1 : Int = countNoOfWays(n : arg10, k : arg11)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar arg21 : Int = 4\nvar x2 : Int = countNoOfWays(n : arg20, k : arg21)\nvar v2 : Int = 228\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/292", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find quotient of two numbers.\n *\n * >>> find(10, 3)\n * 3\n * >>> find(4, 2)\n * 2\n * >>> find(20, 5)\n * 4\n */\nfunc find(n : Int, m : Int) -> Int {\n", "entry_point": "find", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 3\nvar x0 : Int = find(n : arg00, m : arg01)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar arg11 : Int = 2\nvar x1 : Int = find(n : arg10, m : arg11)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 20\nvar arg21 : Int = 5\nvar x2 : Int = find(n : arg20, m : arg21)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find quotient of two numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/293", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the third side of a right angled triangle.\n *\n * >>> othersideRightangle(7, 8)\n * 10.63014581273465\n * >>> othersideRightangle(3, 4)\n * 5\n * >>> othersideRightangle(7, 15)\n * 16.55294535724685\n */\nfunc othersideRightangle(w : Int, h : Int) -> Double {\n", "entry_point": "othersideRightangle", "test": "\n\nvar arg00 : Int = 7\nvar arg01 : Int = 8\nvar x0 : Double = othersideRightangle(w : arg00, h : arg01)\nvar v0 : Double = 10.63014581273465\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar arg11 : Int = 4\nvar x1 : Double = othersideRightangle(w : arg10, h : arg11)\nvar v1 : Double = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 7\nvar arg21 : Int = 15\nvar x2 : Double = othersideRightangle(w : arg20, h : arg21)\nvar v2 : Double = 16.55294535724685\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the third side of a right angled triangle.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/294", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum value in a given heterogeneous list.\n *\n * >>> maxVal([\"Python\", 3, 2, 4, 5, \"version\"])\n * 5\n * >>> maxVal([\"Python\", 15, 20, 25])\n * 25\n * >>> maxVal([\"Python\", 30, 20, 40, 50, \"version\"])\n * 50\n */\nfunc maxVal(listval : [AnyHashable]) -> Int {\n", "entry_point": "maxVal", "test": "\n\nvar arg00 : [AnyHashable] = [#\"Python\"#, 3, 2, 4, 5, #\"version\"#]\nvar x0 : Int = maxVal(listval : arg00)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [#\"Python\"#, 15, 20, 25]\nvar x1 : Int = maxVal(listval : arg10)\nvar v1 : Int = 25\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [#\"Python\"#, 30, 20, 40, 50, #\"version\"#]\nvar x2 : Int = maxVal(listval : arg20)\nvar v2 : Int = 50\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the maximum value in a given heterogeneous list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/295", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to return the sum of all divisors of a number.\n *\n * >>> sumDiv(8)\n * 7\n * >>> sumDiv(12)\n * 16\n * >>> sumDiv(7)\n * 1\n */\nfunc sumDiv(number : Int) -> Int {\n", "entry_point": "sumDiv", "test": "\n\nvar arg00 : Int = 8\nvar x0 : Int = sumDiv(number : arg00)\nvar v0 : Int = 7\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 12\nvar x1 : Int = sumDiv(number : arg10)\nvar v1 : Int = 16\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 7\nvar x2 : Int = sumDiv(number : arg20)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to return the sum of all divisors of a number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/296", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count inversions in an array.\n *\n * >>> getInvCount([1, 20, 6, 4, 5], 5)\n * 5\n * >>> getInvCount([1, 2, 1], 3)\n * 1\n * >>> getInvCount([1, 2, 5, 6, 1], 5)\n * 3\n */\nfunc getInvCount(arr : [Int], n : Int) -> Int {\n", "entry_point": "getInvCount", "test": "\n\nvar arg00 : [Int] = [1, 20, 6, 4, 5]\nvar arg01 : Int = 5\nvar x0 : Int = getInvCount(arr : arg00, n : arg01)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 1]\nvar arg11 : Int = 3\nvar x1 : Int = getInvCount(arr : arg10, n : arg11)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 5, 6, 1]\nvar arg21 : Int = 5\nvar x2 : Int = getInvCount(arr : arg20, n : arg21)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count inversions in an array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/297", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to flatten a given nested list structure.\n *\n * >>> flattenList([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n * [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n * >>> flattenList([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\n * [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n * >>> flattenList([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n * [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n */\nfunc flattenList(list1 : [AnyHashable]) -> [Int] {\n", "entry_point": "flattenList", "test": "\n\nvar arg00 : [AnyHashable] = [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]\nvar x0 : [Int] = flattenList(list1 : arg00)\nvar v0 : [Int] = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]\nvar x1 : [Int] = flattenList(list1 : arg10)\nvar v1 : [Int] = [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]\nvar x2 : [Int] = flattenList(list1 : arg20)\nvar v2 : [Int] = [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to flatten a given nested list structure.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/298", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nested list elements which are present in another list.\n *\n * >>> intersectionNestedLists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])\n * [[12], [7, 11], [1, 5, 8]]\n * >>> intersectionNestedLists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])\n * [[], []]\n * >>> intersectionNestedLists([\"john\", \"amal\", \"joel\", \"george\"], [[\"john\"], [\"jack\", \"john\", \"mary\"], [\"howard\", \"john\"], [\"jude\"]])\n * [[\"john\"], [\"john\"], [\"john\"], []]\n */\nfunc intersectionNestedLists(l1 : [AnyHashable], l2 : [[AnyHashable]]) -> [[AnyHashable]] {\n", "entry_point": "intersectionNestedLists", "test": "\n\nvar arg00 : [AnyHashable] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nvar arg01 : [[AnyHashable]] = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]\nvar x0 : [[AnyHashable]] = intersectionNestedLists(l1 : arg00, l2 : arg01)\nvar v0 : [[AnyHashable]] = [[12], [7, 11], [1, 5, 8]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [[2, 3, 1], [4, 5], [6, 8]]\nvar arg11 : [[AnyHashable]] = [[4, 5], [6, 8]]\nvar x1 : [[AnyHashable]] = intersectionNestedLists(l1 : arg10, l2 : arg11)\nvar v1 : [[AnyHashable]] = [[], []]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [#\"john\"#, #\"amal\"#, #\"joel\"#, #\"george\"#]\nvar arg21 : [[AnyHashable]] = [[#\"john\"#], [#\"jack\"#, #\"john\"#, #\"mary\"#], [#\"howard\"#, #\"john\"#], [#\"jude\"#]]\nvar x2 : [[AnyHashable]] = intersectionNestedLists(l1 : arg20, l2 : arg21)\nvar v2 : [[AnyHashable]] = [[#\"john\"#], [#\"john\"#], [#\"john\"#], []]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the nested list elements which are present in another list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/299", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the maximum aggregate from the list of tuples.\n *\n * >>> maxAggregate([[\"Juan Whelan\", 90], [\"Sabah Colley\", 88], [\"Peter Nichols\", 7], [\"Juan Whelan\", 122], [\"Sabah Colley\", 84]])\n * [\"Juan Whelan\", 212]\n * >>> maxAggregate([[\"Juan Whelan\", 50], [\"Sabah Colley\", 48], [\"Peter Nichols\", 37], [\"Juan Whelan\", 22], [\"Sabah Colley\", 14]])\n * [\"Juan Whelan\", 72]\n * >>> maxAggregate([[\"Juan Whelan\", 10], [\"Sabah Colley\", 20], [\"Peter Nichols\", 30], [\"Juan Whelan\", 40], [\"Sabah Colley\", 50]])\n * [\"Sabah Colley\", 70]\n */\nfunc maxAggregate(stdata : [[AnyHashable]]) -> [AnyHashable] {\n", "entry_point": "maxAggregate", "test": "\n\nvar arg00 : [[AnyHashable]] = [[#\"Juan Whelan\"#, 90], [#\"Sabah Colley\"#, 88], [#\"Peter Nichols\"#, 7], [#\"Juan Whelan\"#, 122], [#\"Sabah Colley\"#, 84]]\nvar x0 : [AnyHashable] = maxAggregate(stdata : arg00)\nvar v0 : [AnyHashable] = [#\"Juan Whelan\"#, 212]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[#\"Juan Whelan\"#, 50], [#\"Sabah Colley\"#, 48], [#\"Peter Nichols\"#, 37], [#\"Juan Whelan\"#, 22], [#\"Sabah Colley\"#, 14]]\nvar x1 : [AnyHashable] = maxAggregate(stdata : arg10)\nvar v1 : [AnyHashable] = [#\"Juan Whelan\"#, 72]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[#\"Juan Whelan\"#, 10], [#\"Sabah Colley\"#, 20], [#\"Peter Nichols\"#, 30], [#\"Juan Whelan\"#, 40], [#\"Sabah Colley\"#, 50]]\nvar x2 : [AnyHashable] = maxAggregate(stdata : arg20)\nvar v2 : [AnyHashable] = [#\"Sabah Colley\"#, 70]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate the maximum aggregate from the list of tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/300", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n *\n * >>> countBinarySeq(1)\n * 2.0\n * >>> countBinarySeq(2)\n * 6.0\n * >>> countBinarySeq(3)\n * 20.0\n */\nfunc countBinarySeq(n : Int) -> Double {\n", "entry_point": "countBinarySeq", "test": "\n\nvar arg00 : Int = 1\nvar x0 : Double = countBinarySeq(n : arg00)\nvar v0 : Double = 2.0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar x1 : Double = countBinarySeq(n : arg10)\nvar v1 : Double = 6.0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 3\nvar x2 : Double = countBinarySeq(n : arg20)\nvar v2 : Double = 20.0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/301", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the depth of a dictionary.\n *\n * >>> dictDepth([\"a\" : 1, \"b\" : [\"c\" : [\"d\" : []]]])\n * 4\n * >>> dictDepth([\"a\" : 1, \"b\" : [\"c\" : \"python\"]])\n * 2\n * >>> dictDepth([1 : \"Sun\", 2 : [3 : [4 : \"Mon\"]]])\n * 3\n */\nfunc dictDepth(d : [AnyHashable: AnyHashable]) -> Int {\n", "entry_point": "dictDepth", "test": "\n\nvar arg00 : [AnyHashable: AnyHashable] = [#\"a\"# : 1, #\"b\"# : [#\"c\"# : [#\"d\"# : []]]]\nvar x0 : Int = dictDepth(d : arg00)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable: AnyHashable] = [#\"a\"# : 1, #\"b\"# : [#\"c\"# : #\"python\"#]]\nvar x1 : Int = dictDepth(d : arg10)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable: AnyHashable] = [1 : #\"Sun\"#, 2 : [3 : [4 : #\"Mon\"#]]]\nvar x2 : Int = dictDepth(d : arg20)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the depth of a dictionary.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/302", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the most significant bit number which is also a set bit.\n *\n * >>> setBitNumber(6)\n * 4\n * >>> setBitNumber(10)\n * 8\n * >>> setBitNumber(18)\n * 16\n */\nfunc setBitNumber(n : Int) -> Int {\n", "entry_point": "setBitNumber", "test": "\n\nvar arg00 : Int = 6\nvar x0 : Int = setBitNumber(n : arg00)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar x1 : Int = setBitNumber(n : arg10)\nvar v1 : Int = 8\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 18\nvar x2 : Int = setBitNumber(n : arg20)\nvar v2 : Int = 16\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the most significant bit number which is also a set bit.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/303", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the count of inversion of two types are same or not.\n *\n * >>> solve([1, 0, 2], 3)\n * true\n * >>> solve([1, 2, 0], 3)\n * false\n * >>> solve([1, 2, 1], 3)\n * true\n */\nfunc solve(a : [Int], n : Int) -> Bool {\n", "entry_point": "solve", "test": "\n\nvar arg00 : [Int] = [1, 0, 2]\nvar arg01 : Int = 3\nvar x0 : Bool = solve(a : arg00, n : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 0]\nvar arg11 : Int = 3\nvar x1 : Bool = solve(a : arg10, n : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 1]\nvar arg21 : Int = 3\nvar x2 : Bool = solve(a : arg20, n : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the count of inversion of two types are same or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/304", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find element at a given index after number of rotations.\n *\n * >>> findElement([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1)\n * 3\n * >>> findElement([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2)\n * 3\n * >>> findElement([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1)\n * 1\n */\nfunc findElement(arr : [Int], ranges : [[Int]], rotations : Int, index : Int) -> Int {\n", "entry_point": "findElement", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5]\nvar arg01 : [[Int]] = [[0, 2], [0, 3]]\nvar arg02 : Int = 2\nvar arg03 : Int = 1\nvar x0 : Int = findElement(arr : arg00, ranges : arg01, rotations : arg02, index : arg03)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4]\nvar arg11 : [[Int]] = [[0, 1], [0, 2]]\nvar arg12 : Int = 1\nvar arg13 : Int = 2\nvar x1 : Int = findElement(arr : arg10, ranges : arg11, rotations : arg12, index : arg13)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4, 5, 6]\nvar arg21 : [[Int]] = [[0, 1], [0, 2]]\nvar arg22 : Int = 1\nvar arg23 : Int = 1\nvar x2 : Int = findElement(arr : arg20, ranges : arg21, rotations : arg22, index : arg23)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find element at a given index after number of rotations.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/305", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to match two words from a list of words starting with letter 'p'.\n *\n * >>> startWithp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n * [\"Python\", \"PHP\"]\n * >>> startWithp([\"Python Programming\", \"Java Programming\"])\n * [\"Python\", \"Programming\"]\n * >>> startWithp([\"Pqrst Pqr\", \"qrstuv\"])\n * [\"Pqrst\", \"Pqr\"]\n */\nfunc startWithp(words : [String]) -> [String] {\n", "entry_point": "startWithp", "test": "\n\nvar arg00 : [String] = [#\"Python PHP\"#, #\"Java JavaScript\"#, #\"c c++\"#]\nvar x0 : [String] = startWithp(words : arg00)\nvar v0 : [String] = [#\"Python\"#, #\"PHP\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"Python Programming\"#, #\"Java Programming\"#]\nvar x1 : [String] = startWithp(words : arg10)\nvar v1 : [String] = [#\"Python\"#, #\"Programming\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"Pqrst Pqr\"#, #\"qrstuv\"#]\nvar x2 : [String] = startWithp(words : arg20)\nvar v2 : [String] = [#\"Pqrst\"#, #\"Pqr\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to match two words from a list of words starting with letter 'p'.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/306", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n *\n * >>> maxSumIncreasingSubseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6)\n * 11\n * >>> maxSumIncreasingSubseq([1, 101, 2, 3, 100, 4, 5], 7, 2, 5)\n * 7\n * >>> maxSumIncreasingSubseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4)\n * 71\n */\nfunc maxSumIncreasingSubseq(a : [Int], n : Int, index : Int, k : Int) -> Int {\n", "entry_point": "maxSumIncreasingSubseq", "test": "\n\nvar arg00 : [Int] = [1, 101, 2, 3, 100, 4, 5]\nvar arg01 : Int = 7\nvar arg02 : Int = 4\nvar arg03 : Int = 6\nvar x0 : Int = maxSumIncreasingSubseq(a : arg00, n : arg01, index : arg02, k : arg03)\nvar v0 : Int = 11\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 101, 2, 3, 100, 4, 5]\nvar arg11 : Int = 7\nvar arg12 : Int = 2\nvar arg13 : Int = 5\nvar x1 : Int = maxSumIncreasingSubseq(a : arg10, n : arg11, index : arg12, k : arg13)\nvar v1 : Int = 7\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [11, 15, 19, 21, 26, 28, 31]\nvar arg21 : Int = 7\nvar arg22 : Int = 2\nvar arg23 : Int = 4\nvar x2 : Int = maxSumIncreasingSubseq(a : arg20, n : arg21, index : arg22, k : arg23)\nvar v2 : Int = 71\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/307", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get a colon of a tuple.\n *\n * >>> colonTuplex([\"HELLO\", 5, [], true], 2, 50)\n * [\"HELLO\", 5, [50], true]\n * >>> colonTuplex([\"HELLO\", 5, [], true], 2, 100)\n * [\"HELLO\", 5, [100], true]\n * >>> colonTuplex([\"HELLO\", 5, [], true], 2, 500)\n * [\"HELLO\", 5, [500], true]\n */\nfunc colonTuplex(tuplex : [AnyHashable], m : Int, n : Int) -> [AnyHashable] {\n", "entry_point": "colonTuplex", "test": "\n\nvar arg00 : [AnyHashable] = [#\"HELLO\"#, 5, [], true]\nvar arg01 : Int = 2\nvar arg02 : Int = 50\nvar x0 : [AnyHashable] = colonTuplex(tuplex : arg00, m : arg01, n : arg02)\nvar v0 : [AnyHashable] = [#\"HELLO\"#, 5, [50], true]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [#\"HELLO\"#, 5, [], true]\nvar arg11 : Int = 2\nvar arg12 : Int = 100\nvar x1 : [AnyHashable] = colonTuplex(tuplex : arg10, m : arg11, n : arg12)\nvar v1 : [AnyHashable] = [#\"HELLO\"#, 5, [100], true]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [#\"HELLO\"#, 5, [], true]\nvar arg21 : Int = 2\nvar arg22 : Int = 500\nvar x2 : [AnyHashable] = colonTuplex(tuplex : arg20, m : arg21, n : arg22)\nvar v2 : [AnyHashable] = [#\"HELLO\"#, 5, [500], true]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to get a colon of a tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/308", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the specified number of largest products from two given lists.\n *\n * >>> largeProduct([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3)\n * [60, 54, 50]\n * >>> largeProduct([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4)\n * [60, 54, 50, 48]\n * >>> largeProduct([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5)\n * [60, 54, 50, 48, 45]\n */\nfunc largeProduct(nums1 : [Int], nums2 : [Int], n : Int) -> [Int] {\n", "entry_point": "largeProduct", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5, 6]\nvar arg01 : [Int] = [3, 6, 8, 9, 10, 6]\nvar arg02 : Int = 3\nvar x0 : [Int] = largeProduct(nums1 : arg00, nums2 : arg01, n : arg02)\nvar v0 : [Int] = [60, 54, 50]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5, 6]\nvar arg11 : [Int] = [3, 6, 8, 9, 10, 6]\nvar arg12 : Int = 4\nvar x1 : [Int] = largeProduct(nums1 : arg10, nums2 : arg11, n : arg12)\nvar v1 : [Int] = [60, 54, 50, 48]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4, 5, 6]\nvar arg21 : [Int] = [3, 6, 8, 9, 10, 6]\nvar arg22 : Int = 5\nvar x2 : [Int] = largeProduct(nums1 : arg20, nums2 : arg21, n : arg22)\nvar v2 : [Int] = [60, 54, 50, 48, 45]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the specified number of largest products from two given lists.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/309", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum of two numbers.\n *\n * >>> maximum(5, 10)\n * 10\n * >>> maximum(-1, -2)\n * -1\n * >>> maximum(9, 7)\n * 9\n */\nfunc maximum(a : Int, b : Int) -> Int {\n", "entry_point": "maximum", "test": "\n\nvar arg00 : Int = 5\nvar arg01 : Int = 10\nvar x0 : Int = maximum(a : arg00, b : arg01)\nvar v0 : Int = 10\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = -1\nvar arg11 : Int = -2\nvar x1 : Int = maximum(a : arg10, b : arg11)\nvar v1 : Int = -1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 9\nvar arg21 : Int = 7\nvar x2 : Int = maximum(a : arg20, b : arg21)\nvar v2 : Int = 9\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the maximum of two numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/310", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a given string to a tuple.\n *\n * >>> stringToTuple(\"python 3.0\")\n * [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"]\n * >>> stringToTuple(\"item1\")\n * [\"i\", \"t\", \"e\", \"m\", \"1\"]\n * >>> stringToTuple(\"15.10\")\n * [\"1\", \"5\", \".\", \"1\", \"0\"]\n */\nfunc stringToTuple(str1 : String) -> [String] {\n", "entry_point": "stringToTuple", "test": "\n\nvar arg00 : String = #\"python 3.0\"#\nvar x0 : [String] = stringToTuple(str1 : arg00)\nvar v0 : [String] = [#\"p\"#, #\"y\"#, #\"t\"#, #\"h\"#, #\"o\"#, #\"n\"#, #\"3\"#, #\".\"#, #\"0\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"item1\"#\nvar x1 : [String] = stringToTuple(str1 : arg10)\nvar v1 : [String] = [#\"i\"#, #\"t\"#, #\"e\"#, #\"m\"#, #\"1\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"15.10\"#\nvar x2 : [String] = stringToTuple(str1 : arg20)\nvar v2 : [String] = [#\"1\"#, #\"5\"#, #\".\"#, #\"1\"#, #\"0\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert a given string to a tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/311", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to set the left most unset bit.\n *\n * >>> setLeftMostUnsetBit(10)\n * 14\n * >>> setLeftMostUnsetBit(12)\n * 14\n * >>> setLeftMostUnsetBit(15)\n * 15\n */\nfunc setLeftMostUnsetBit(n : Int) -> Int {\n", "entry_point": "setLeftMostUnsetBit", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = setLeftMostUnsetBit(n : arg00)\nvar v0 : Int = 14\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 12\nvar x1 : Int = setLeftMostUnsetBit(n : arg10)\nvar v1 : Int = 14\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 15\nvar x2 : Int = setLeftMostUnsetBit(n : arg20)\nvar v2 : Int = 15\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to set the left most unset bit.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/312", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cone.\n *\n * >>> volumeCone(5, 12)\n * 314.15926535897927\n * >>> volumeCone(10, 15)\n * 1570.7963267948965\n * >>> volumeCone(19, 17)\n * 6426.651371693521\n */\nfunc volumeCone(r : Int, h : Int) -> Double {\n", "entry_point": "volumeCone", "test": "\n\nvar arg00 : Int = 5\nvar arg01 : Int = 12\nvar x0 : Double = volumeCone(r : arg00, h : arg01)\nvar v0 : Double = 314.15926535897927\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar arg11 : Int = 15\nvar x1 : Double = volumeCone(r : arg10, h : arg11)\nvar v1 : Double = 1570.7963267948965\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 19\nvar arg21 : Int = 17\nvar x2 : Double = volumeCone(r : arg20, h : arg21)\nvar v2 : Double = 6426.651371693521\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the volume of a cone.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/313", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to print positive numbers in a list.\n *\n * >>> posNos([-1, -2, 1, 2])\n * [1,2]\n * >>> posNos([3, 4, -5])\n * [3,4]\n * >>> posNos([-2, -3, 1])\n * 1\n */\nfunc posNos(list1 : [Int]) -> AnyHashable {\n", "entry_point": "posNos", "test": "\n\nvar arg00 : [Int] = [-1, -2, 1, 2]\nvar x0 : AnyHashable = posNos(list1 : arg00)\nvar v0 : AnyHashable = [1, 2]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [3, 4, -5]\nvar x1 : AnyHashable = posNos(list1 : arg10)\nvar v1 : AnyHashable = [3, 4]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [-2, -3, 1]\nvar x2 : AnyHashable = posNos(list1 : arg20)\nvar v2 : AnyHashable = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to print positive numbers in a list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/314", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n *\n * >>> maxSumRectangularGrid([[1, 4, 5], [2, 0, 0]], 3)\n * 7\n * >>> maxSumRectangularGrid([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 5)\n * 24\n * >>> maxSumRectangularGrid([[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]], 5)\n * 81\n */\nfunc maxSumRectangularGrid(grid : [[Int]], n : Int) -> Int {\n", "entry_point": "maxSumRectangularGrid", "test": "\n\nvar arg00 : [[Int]] = [[1, 4, 5], [2, 0, 0]]\nvar arg01 : Int = 3\nvar x0 : Int = maxSumRectangularGrid(grid : arg00, n : arg01)\nvar v0 : Int = 7\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]\nvar arg11 : Int = 5\nvar x1 : Int = maxSumRectangularGrid(grid : arg10, n : arg11)\nvar v1 : Int = 24\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]]\nvar arg21 : Int = 5\nvar x2 : Int = maxSumRectangularGrid(grid : arg20, n : arg21)\nvar v2 : Int = 81\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/315", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first maximum length of even word.\n *\n * >>> findMaxLenEven(\"python language\")\n * \"language\"\n * >>> findMaxLenEven(\"maximum even length\")\n * \"length\"\n * >>> findMaxLenEven(\"eve\")\n * \"-1\"\n */\nfunc findMaxLenEven(str : String) -> String {\n", "entry_point": "findMaxLenEven", "test": "\n\nvar arg00 : String = #\"python language\"#\nvar x0 : String = findMaxLenEven(str : arg00)\nvar v0 : String = #\"language\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"maximum even length\"#\nvar x1 : String = findMaxLenEven(str : arg10)\nvar v1 : String = #\"length\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"eve\"#\nvar x2 : String = findMaxLenEven(str : arg20)\nvar v2 : String = #\"-1\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the first maximum length of even word.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/316", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the index of the last occurrence of a given number in a sorted array.\n *\n * >>> findLastOccurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n * 3\n * >>> findLastOccurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9)\n * 9\n * >>> findLastOccurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6)\n * 6\n */\nfunc findLastOccurrence(a : [Int], x : Int) -> Int {\n", "entry_point": "findLastOccurrence", "test": "\n\nvar arg00 : [Int] = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9]\nvar arg01 : Int = 5\nvar x0 : Int = findLastOccurrence(a : arg00, x : arg01)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 3, 5, 8, 6, 6, 8, 9, 9, 9]\nvar arg11 : Int = 9\nvar x1 : Int = findLastOccurrence(a : arg10, x : arg11)\nvar v1 : Int = 9\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 2, 1, 5, 6, 6, 6, 9, 9, 9]\nvar arg21 : Int = 6\nvar x2 : Int = findLastOccurrence(a : arg20, x : arg21)\nvar v2 : Int = 6\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the index of the last occurrence of a given number in a sorted array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/317", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to reflect the modified run-length encoding from a list.\n *\n * >>> modifiedEncode([1, 1, 2, 3, 4, 4, 5, 1])\n * [[2, 1], 2, 3, [2, 4], 5, 1]\n * >>> modifiedEncode(\"automatically\")\n * [\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", [2, \"l\"], \"y\"]\n * >>> modifiedEncode(\"python\")\n * [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]\n */\nfunc modifiedEncode(alist : AnyHashable) -> [AnyHashable] {\n", "entry_point": "modifiedEncode", "test": "\n\nvar arg00 : AnyHashable = [1, 1, 2, 3, 4, 4, 5, 1]\nvar x0 : [AnyHashable] = modifiedEncode(alist : arg00)\nvar v0 : [AnyHashable] = [[2, 1], 2, 3, [2, 4], 5, 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : AnyHashable = #\"automatically\"#\nvar x1 : [AnyHashable] = modifiedEncode(alist : arg10)\nvar v1 : [AnyHashable] = [#\"a\"#, #\"u\"#, #\"t\"#, #\"o\"#, #\"m\"#, #\"a\"#, #\"t\"#, #\"i\"#, #\"c\"#, #\"a\"#, [2, #\"l\"#], #\"y\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : AnyHashable = #\"python\"#\nvar x2 : [AnyHashable] = modifiedEncode(alist : arg20)\nvar v2 : [AnyHashable] = [#\"p\"#, #\"y\"#, #\"t\"#, #\"h\"#, #\"o\"#, #\"n\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to reflect the modified run-length encoding from a list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/318", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum volume of a cuboid with given sum of sides.\n *\n * >>> maxVolume(8)\n * 18\n * >>> maxVolume(4)\n * 2\n * >>> maxVolume(1)\n * 0\n */\nfunc maxVolume(s : Int) -> Int {\n", "entry_point": "maxVolume", "test": "\n\nvar arg00 : Int = 8\nvar x0 : Int = maxVolume(s : arg00)\nvar v0 : Int = 18\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar x1 : Int = maxVolume(s : arg10)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar x2 : Int = maxVolume(s : arg20)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the maximum volume of a cuboid with given sum of sides.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/319", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all five characters long word in the given string by using regex.\n *\n * >>> findLongWord(\"Please move back to strem\")\n * [\"strem\"]\n * >>> findLongWord(\"4K Ultra HD streaming player\")\n * [\"Ultra\"]\n * >>> findLongWord(\"Streaming Media Player\")\n * [\"Media\"]\n */\nfunc findLongWord(text : String) -> [String] {\n", "entry_point": "findLongWord", "test": "\n\nvar arg00 : String = #\"Please move back to strem\"#\nvar x0 : [String] = findLongWord(text : arg00)\nvar v0 : [String] = [#\"strem\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"4K Ultra HD streaming player\"#\nvar x1 : [String] = findLongWord(text : arg10)\nvar v1 : [String] = [#\"Ultra\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Streaming Media Player\"#\nvar x2 : [String] = findLongWord(text : arg20)\nvar v2 : [String] = [#\"Media\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find all five characters long word in the given string by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/320", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n *\n * >>> sumDifference(12)\n * 5434\n * >>> sumDifference(20)\n * 41230\n * >>> sumDifference(54)\n * 2151270\n */\nfunc sumDifference(n : Int) -> Int {\n", "entry_point": "sumDifference", "test": "\n\nvar arg00 : Int = 12\nvar x0 : Int = sumDifference(n : arg00)\nvar v0 : Int = 5434\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 20\nvar x1 : Int = sumDifference(n : arg10)\nvar v1 : Int = 41230\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 54\nvar x2 : Int = sumDifference(n : arg20)\nvar v2 : Int = 2151270\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/321", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the demlo number for the given number.\n *\n * >>> findDemlo(\"111111\")\n * \"12345654321\"\n * >>> findDemlo(\"1111\")\n * \"1234321\"\n * >>> findDemlo(\"13333122222\")\n * \"123456789101110987654321\"\n */\nfunc findDemlo(s : String) -> String {\n", "entry_point": "findDemlo", "test": "\n\nvar arg00 : String = #\"111111\"#\nvar x0 : String = findDemlo(s : arg00)\nvar v0 : String = #\"12345654321\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"1111\"#\nvar x1 : String = findDemlo(s : arg10)\nvar v1 : String = #\"1234321\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"13333122222\"#\nvar x2 : String = findDemlo(s : arg20)\nvar v2 : String = #\"123456789101110987654321\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the demlo number for the given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/322", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all index positions of the minimum values in a given list.\n *\n * >>> positionMin([12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54])\n * [3, 11]\n * >>> positionMin([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])\n * [0]\n * >>> positionMin([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])\n * [1]\n */\nfunc positionMin(list1 : [Int]) -> [Int] {\n", "entry_point": "positionMin", "test": "\n\nvar arg00 : [Int] = [12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54]\nvar x0 : [Int] = positionMin(list1 : arg00)\nvar v0 : [Int] = [3, 11]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5]\nvar x1 : [Int] = positionMin(list1 : arg10)\nvar v1 : [Int] = [0]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12]\nvar x2 : [Int] = positionMin(list1 : arg20)\nvar v2 : [Int] = [1]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find all index positions of the minimum values in a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/323", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to re-arrange the given array in alternating positive and negative items.\n *\n * >>> reArrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10)\n * [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n * >>> reArrange([1, 2, 3, -4, -1, 4], 6)\n * [-4, 1, -1, 2, 3, 4]\n * >>> reArrange([4, 7, 9, 77, -4, 5, -3, -9], 8)\n * [-4, 4, -3, 7, -9, 9, 77, 5]\n */\nfunc reArrange(arr : [Int], n : Int) -> [Int] {\n", "entry_point": "reArrange", "test": "\n\nvar arg00 : [Int] = [-5, -2, 5, 2, 4, 7, 1, 8, 0, -8]\nvar arg01 : Int = 10\nvar x0 : [Int] = reArrange(arr : arg00, n : arg01)\nvar v0 : [Int] = [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, -4, -1, 4]\nvar arg11 : Int = 6\nvar x1 : [Int] = reArrange(arr : arg10, n : arg11)\nvar v1 : [Int] = [-4, 1, -1, 2, 3, 4]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [4, 7, 9, 77, -4, 5, -3, -9]\nvar arg21 : Int = 8\nvar x2 : [Int] = reArrange(arr : arg20, n : arg21)\nvar v2 : [Int] = [-4, 4, -3, 7, -9, 9, 77, 5]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to re-arrange the given array in alternating positive and negative items.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/324", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the sum of alternate chains of tuples.\n *\n * >>> sumOfAlternates([5, 6, 3, 6, 10, 34])\n * [46, 18]\n * >>> sumOfAlternates([1, 2, 3, 4, 5])\n * [6, 9]\n * >>> sumOfAlternates([6, 7, 8, 9, 4, 5])\n * [21, 18]\n */\nfunc sumOfAlternates(testTuple : [Int]) -> [Int] {\n", "entry_point": "sumOfAlternates", "test": "\n\nvar arg00 : [Int] = [5, 6, 3, 6, 10, 34]\nvar x0 : [Int] = sumOfAlternates(testTuple : arg00)\nvar v0 : [Int] = [46, 18]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5]\nvar x1 : [Int] = sumOfAlternates(testTuple : arg10)\nvar v1 : [Int] = [6, 9]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [6, 7, 8, 9, 4, 5]\nvar x2 : [Int] = sumOfAlternates(testTuple : arg20)\nvar v2 : [Int] = [21, 18]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract the sum of alternate chains of tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/325", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum number of squares whose sum is equal to a given number.\n *\n * >>> getMinSquares(6)\n * 3\n * >>> getMinSquares(2)\n * 2\n * >>> getMinSquares(4)\n * 1\n */\nfunc getMinSquares(n : Int) -> Int {\n", "entry_point": "getMinSquares", "test": "\n\nvar arg00 : Int = 6\nvar x0 : Int = getMinSquares(n : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar x1 : Int = getMinSquares(n : arg10)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar x2 : Int = getMinSquares(n : arg20)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the minimum number of squares whose sum is equal to a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/326", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get the word with most number of occurrences in the given strings list.\n *\n * >>> mostOccurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"])\n * \"UTS\"\n * >>> mostOccurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"])\n * \"year\"\n * >>> mostOccurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"])\n * \"can\"\n */\nfunc mostOccurrences(testList : [String]) -> String {\n", "entry_point": "mostOccurrences", "test": "\n\nvar arg00 : [String] = [#\"UTS is best for RTF\"#, #\"RTF love UTS\"#, #\"UTS is best\"#]\nvar x0 : String = mostOccurrences(testList : arg00)\nvar v0 : String = #\"UTS\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"Its been a great year\"#, #\"this year is so worse\"#, #\"this year is okay\"#]\nvar x1 : String = mostOccurrences(testList : arg10)\nvar v1 : String = #\"year\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"Families can be reunited\"#, #\"people can be reunited\"#, #\"Tasks can be achieved \"#]\nvar x2 : String = mostOccurrences(testList : arg20)\nvar v2 : String = #\"can\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to get the word with most number of occurrences in the given strings list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/327", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print check if the triangle is isosceles or not.\n *\n * >>> checkIsosceles(6, 8, 12)\n * false\n * >>> checkIsosceles(6, 6, 12)\n * true\n * >>> checkIsosceles(6, 16, 20)\n * false\n */\nfunc checkIsosceles(x : Int, y : Int, z : Int) -> Bool {\n", "entry_point": "checkIsosceles", "test": "\n\nvar arg00 : Int = 6\nvar arg01 : Int = 8\nvar arg02 : Int = 12\nvar x0 : Bool = checkIsosceles(x : arg00, y : arg01, z : arg02)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 6\nvar arg11 : Int = 6\nvar arg12 : Int = 12\nvar x1 : Bool = checkIsosceles(x : arg10, y : arg11, z : arg12)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 6\nvar arg21 : Int = 16\nvar arg22 : Int = 20\nvar x2 : Bool = checkIsosceles(x : arg20, y : arg21, z : arg22)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to print check if the triangle is isosceles or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/328", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to rotate a given list by specified number of items to the left direction.\n *\n * >>> rotateLeft([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)\n * [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n * >>> rotateLeft([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)\n * [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n * >>> rotateLeft([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)\n * [6, 7, 8, 9, 10, 1, 2]\n */\nfunc rotateLeft(list1 : [Int], m : Int, n : Int) -> [Int] {\n", "entry_point": "rotateLeft", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar arg01 : Int = 3\nvar arg02 : Int = 4\nvar x0 : [Int] = rotateLeft(list1 : arg00, m : arg01, n : arg02)\nvar v0 : [Int] = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar arg11 : Int = 2\nvar arg12 : Int = 2\nvar x1 : [Int] = rotateLeft(list1 : arg10, m : arg11, n : arg12)\nvar v1 : [Int] = [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar arg21 : Int = 5\nvar arg22 : Int = 2\nvar x2 : [Int] = rotateLeft(list1 : arg20, m : arg21, n : arg22)\nvar v2 : [Int] = [6, 7, 8, 9, 10, 1, 2]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to rotate a given list by specified number of items to the left direction.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/329", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count negative numbers in a list.\n *\n * >>> negCount([-1, -2, 3, -4, -5])\n * 4\n * >>> negCount([1, 2, 3])\n * 0\n * >>> negCount([1, 2, -3, -10, 20])\n * 2\n */\nfunc negCount(list : [Int]) -> Int {\n", "entry_point": "negCount", "test": "\n\nvar arg00 : [Int] = [-1, -2, 3, -4, -5]\nvar x0 : Int = negCount(list : arg00)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3]\nvar x1 : Int = negCount(list : arg10)\nvar v1 : Int = 0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, -3, -10, 20]\nvar x2 : Int = negCount(list : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count negative numbers in a list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/330", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all three, four, five characters long words in the given string by using regex.\n *\n * >>> findChar(\"For the four consumer complaints contact manager AKR reddy\")\n * [\"For\", \"the\", \"four\", \"AKR\", \"reddy\"]\n * >>> findChar(\"Certain service are subject to change MSR\")\n * [\"are\", \"MSR\"]\n * >>> findChar(\"Third party legal desclaimers\")\n * [\"Third\", \"party\", \"legal\"]\n */\nfunc findChar(text : String) -> [String] {\n", "entry_point": "findChar", "test": "\n\nvar arg00 : String = #\"For the four consumer complaints contact manager AKR reddy\"#\nvar x0 : [String] = findChar(text : arg00)\nvar v0 : [String] = [#\"For\"#, #\"the\"#, #\"four\"#, #\"AKR\"#, #\"reddy\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Certain service are subject to change MSR\"#\nvar x1 : [String] = findChar(text : arg10)\nvar v1 : [String] = [#\"are\"#, #\"MSR\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Third party legal desclaimers\"#\nvar x2 : [String] = findChar(text : arg20)\nvar v2 : [String] = [#\"Third\"#, #\"party\"#, #\"legal\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find all three, four, five characters long words in the given string by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/331", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count unset bits of a given number.\n *\n * >>> countUnsetBits(2)\n * 1\n * >>> countUnsetBits(4)\n * 2\n * >>> countUnsetBits(6)\n * 1\n */\nfunc countUnsetBits(n : Int) -> Int {\n", "entry_point": "countUnsetBits", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = countUnsetBits(n : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar x1 : Int = countUnsetBits(n : arg10)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 6\nvar x2 : Int = countUnsetBits(n : arg20)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count unset bits of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/332", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count character frequency of a given string.\n *\n * >>> charFrequency(\"python\")\n * [\"p\" : 1, \"y\" : 1, \"t\" : 1, \"h\" : 1, \"o\" : 1, \"n\" : 1]\n * >>> charFrequency(\"program\")\n * [\"p\" : 1, \"r\" : 2, \"o\" : 1, \"g\" : 1, \"a\" : 1, \"m\" : 1]\n * >>> charFrequency(\"language\")\n * [\"l\" : 1, \"a\" : 2, \"n\" : 1, \"g\" : 2, \"u\" : 1, \"e\" : 1]\n */\nfunc charFrequency(str1 : String) -> [String: Int] {\n", "entry_point": "charFrequency", "test": "\n\nvar arg00 : String = #\"python\"#\nvar x0 : [String: Int] = charFrequency(str1 : arg00)\nvar v0 : [String: Int] = [#\"p\"# : 1, #\"y\"# : 1, #\"t\"# : 1, #\"h\"# : 1, #\"o\"# : 1, #\"n\"# : 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"program\"#\nvar x1 : [String: Int] = charFrequency(str1 : arg10)\nvar v1 : [String: Int] = [#\"p\"# : 1, #\"r\"# : 2, #\"o\"# : 1, #\"g\"# : 1, #\"a\"# : 1, #\"m\"# : 1]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"language\"#\nvar x2 : [String: Int] = charFrequency(str1 : arg20)\nvar v2 : [String: Int] = [#\"l\"# : 1, #\"a\"# : 2, #\"n\"# : 1, #\"g\"# : 2, #\"u\"# : 1, #\"e\"# : 1]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count character frequency of a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/333", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to sort a list according to the second element in sublist.\n *\n * >>> sort([[\"a\", 10], [\"b\", 5], [\"c\", 20], [\"d\", 15]])\n * [[\"b\", 5], [\"a\", 10], [\"d\", 15], [\"c\", 20]]\n * >>> sort([[\"452\", 10], [\"256\", 5], [\"100\", 20], [\"135\", 15]])\n * [[\"256\", 5], [\"452\", 10], [\"135\", 15], [\"100\", 20]]\n * >>> sort([[\"rishi\", 10], [\"akhil\", 5], [\"ramya\", 20], [\"gaur\", 15]])\n * [[\"akhil\", 5], [\"rishi\", 10], [\"gaur\", 15], [\"ramya\", 20]]\n */\nfunc sort(subLi : [[AnyHashable]]) -> [[AnyHashable]] {\n", "entry_point": "sort", "test": "\n\nvar arg00 : [[AnyHashable]] = [[#\"a\"#, 10], [#\"b\"#, 5], [#\"c\"#, 20], [#\"d\"#, 15]]\nvar x0 : [[AnyHashable]] = sort(subLi : arg00)\nvar v0 : [[AnyHashable]] = [[#\"b\"#, 5], [#\"a\"#, 10], [#\"d\"#, 15], [#\"c\"#, 20]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[#\"452\"#, 10], [#\"256\"#, 5], [#\"100\"#, 20], [#\"135\"#, 15]]\nvar x1 : [[AnyHashable]] = sort(subLi : arg10)\nvar v1 : [[AnyHashable]] = [[#\"256\"#, 5], [#\"452\"#, 10], [#\"135\"#, 15], [#\"100\"#, 20]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[#\"rishi\"#, 10], [#\"akhil\"#, 5], [#\"ramya\"#, 20], [#\"gaur\"#, 15]]\nvar x2 : [[AnyHashable]] = sort(subLi : arg20)\nvar v2 : [[AnyHashable]] = [[#\"akhil\"#, 5], [#\"rishi\"#, 10], [#\"gaur\"#, 15], [#\"ramya\"#, 20]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to sort a list according to the second element in sublist.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/334", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the triangle is valid or not if sides are given.\n *\n * >>> checkValidity(1, 2, 3)\n * false\n * >>> checkValidity(2, 3, 5)\n * false\n * >>> checkValidity(7, 10, 5)\n * true\n */\nfunc checkValidity(a : Int, b : Int, c : Int) -> Bool {\n", "entry_point": "checkValidity", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = 2\nvar arg02 : Int = 3\nvar x0 : Bool = checkValidity(a : arg00, b : arg01, c : arg02)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar arg11 : Int = 3\nvar arg12 : Int = 5\nvar x1 : Bool = checkValidity(a : arg10, b : arg11, c : arg12)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 7\nvar arg21 : Int = 10\nvar arg22 : Int = 5\nvar x2 : Bool = checkValidity(a : arg20, b : arg21, c : arg22)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the triangle is valid or not if sides are given.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/335", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sum of arithmetic progression.\n *\n * >>> apSum(1, 5, 2)\n * 25\n * >>> apSum(2, 6, 4)\n * 72\n * >>> apSum(1, 4, 5)\n * 34\n */\nfunc apSum(a : Int, n : Int, d : Int) -> Int {\n", "entry_point": "apSum", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = 5\nvar arg02 : Int = 2\nvar x0 : Int = apSum(a : arg00, n : arg01, d : arg02)\nvar v0 : Int = 25\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar arg11 : Int = 6\nvar arg12 : Int = 4\nvar x1 : Int = apSum(a : arg10, n : arg11, d : arg12)\nvar v1 : Int = 72\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = 4\nvar arg22 : Int = 5\nvar x2 : Int = apSum(a : arg20, n : arg21, d : arg22)\nvar v2 : Int = 34\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the sum of arithmetic progression.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/336", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month name contains 28 days or not.\n *\n * >>> checkMonthnum(\"February\")\n * true\n * >>> checkMonthnum(\"January\")\n * false\n * >>> checkMonthnum(\"March\")\n * false\n */\nfunc checkMonthnum(monthname1 : String) -> Bool {\n", "entry_point": "checkMonthnum", "test": "\n\nvar arg00 : String = #\"February\"#\nvar x0 : Bool = checkMonthnum(monthname1 : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"January\"#\nvar x1 : Bool = checkMonthnum(monthname1 : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"March\"#\nvar x2 : Bool = checkMonthnum(monthname1 : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether the given month name contains 28 days or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/337", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a word at the end of a string, with optional punctuation.\n *\n * >>> textMatchWord(\"python.\")\n * \"Found a match!\"\n * >>> textMatchWord(\"python.\")\n * \"Found a match!\"\n * >>> textMatchWord(\"  lang  .\")\n * \"Not matched!\"\n */\nfunc textMatchWord(text : String) -> String {\n", "entry_point": "textMatchWord", "test": "\n\nvar arg00 : String = #\"python.\"#\nvar x0 : String = textMatchWord(text : arg00)\nvar v0 : String = #\"Found a match!\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"python.\"#\nvar x1 : String = textMatchWord(text : arg10)\nvar v1 : String = #\"Found a match!\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"  lang  .\"#\nvar x2 : String = textMatchWord(text : arg20)\nvar v2 : String = #\"Not matched!\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function that matches a word at the end of a string, with optional punctuation.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/338", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of substrings with same first and last characters.\n *\n * >>> countSubstringWithEqualEnds(\"aba\")\n * 4\n * >>> countSubstringWithEqualEnds(\"abcab\")\n * 7\n * >>> countSubstringWithEqualEnds(\"abc\")\n * 3\n */\nfunc countSubstringWithEqualEnds(s : String) -> Int {\n", "entry_point": "countSubstringWithEqualEnds", "test": "\n\nvar arg00 : String = #\"aba\"#\nvar x0 : Int = countSubstringWithEqualEnds(s : arg00)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"abcab\"#\nvar x1 : Int = countSubstringWithEqualEnds(s : arg10)\nvar v1 : Int = 7\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"abc\"#\nvar x2 : Int = countSubstringWithEqualEnds(s : arg20)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the number of substrings with same first and last characters.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/339", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum occuring divisor in an interval.\n *\n * >>> findDivisor(2, 2)\n * 2\n * >>> findDivisor(2, 5)\n * 2\n * >>> findDivisor(5, 10)\n * 2\n */\nfunc findDivisor(x : Int, y : Int) -> Int {\n", "entry_point": "findDivisor", "test": "\n\nvar arg00 : Int = 2\nvar arg01 : Int = 2\nvar x0 : Int = findDivisor(x : arg00, y : arg01)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar arg11 : Int = 5\nvar x1 : Int = findDivisor(x : arg10, y : arg11)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar arg21 : Int = 10\nvar x2 : Int = findDivisor(x : arg20, y : arg21)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the maximum occuring divisor in an interval.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/340", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of the three lowest positive numbers from a given list of numbers.\n *\n * >>> sumThreeSmallestNums([10, 20, 30, 40, 50, 60, 7])\n * 37\n * >>> sumThreeSmallestNums([1, 2, 3, 4, 5])\n * 6\n * >>> sumThreeSmallestNums([0, 1, 2, 3, 4, 5])\n * 6\n */\nfunc sumThreeSmallestNums(lst : [Int]) -> Int {\n", "entry_point": "sumThreeSmallestNums", "test": "\n\nvar arg00 : [Int] = [10, 20, 30, 40, 50, 60, 7]\nvar x0 : Int = sumThreeSmallestNums(lst : arg00)\nvar v0 : Int = 37\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5]\nvar x1 : Int = sumThreeSmallestNums(lst : arg10)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [0, 1, 2, 3, 4, 5]\nvar x2 : Int = sumThreeSmallestNums(lst : arg20)\nvar v2 : Int = 6\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of the three lowest positive numbers from a given list of numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/341", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given set into tuples.\n *\n * >>> setToTuple({1, 2, 3, 4, 5})\n * [1, 2, 3, 4, 5]\n * >>> setToTuple({6, 7, 8, 9, 10, 11})\n * [6, 7, 8, 9, 10, 11]\n * >>> setToTuple({12, 13, 14, 15, 16})\n * [12, 13, 14, 15, 16]\n */\nfunc setToTuple(s : Set<Int>) -> [Int] {\n", "entry_point": "setToTuple", "test": "\n\nvar arg00 : Set<Int> = [1, 2, 3, 4, 5]\nvar x0 : [Int] = setToTuple(s : arg00)\nvar v0 : [Int] = [1, 2, 3, 4, 5]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Set<Int> = [6, 7, 8, 9, 10, 11]\nvar x1 : [Int] = setToTuple(s : arg10)\nvar v1 : [Int] = [6, 7, 8, 9, 10, 11]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Set<Int> = [12, 13, 14, 15, 16]\nvar x2 : [Int] = setToTuple(s : arg20)\nvar v2 : [Int] = [12, 13, 14, 15, 16]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert the given set into tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/342", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n *\n * >>> findMinimumRange([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]])\n * [4, 6]\n * >>> findMinimumRange([[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]])\n * [4, 7]\n * >>> findMinimumRange([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]])\n * [5, 7]\n */\nfunc findMinimumRange(list : [[Int]]) -> [Int] {\n", "entry_point": "findMinimumRange", "test": "\n\nvar arg00 : [[Int]] = [[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]\nvar x0 : [Int] = findMinimumRange(list : arg00)\nvar v0 : [Int] = [4, 6]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]]\nvar x1 : [Int] = findMinimumRange(list : arg10)\nvar v1 : [Int] = [4, 7]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]\nvar x2 : [Int] = findMinimumRange(list : arg20)\nvar v2 : [Int] = [5, 7]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/343", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the number of digits and letters in a string.\n *\n * >>> digLet(\"python\")\n * [6, 0]\n * >>> digLet(\"program\")\n * [7, 0]\n * >>> digLet(\"python3.0\")\n * [6, 2]\n */\nfunc digLet(s : String) -> [Int] {\n", "entry_point": "digLet", "test": "\n\nvar arg00 : String = #\"python\"#\nvar x0 : [Int] = digLet(s : arg00)\nvar v0 : [Int] = [6, 0]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"program\"#\nvar x1 : [Int] = digLet(s : arg10)\nvar v1 : [Int] = [7, 0]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"python3.0\"#\nvar x2 : [Int] = digLet(s : arg20)\nvar v2 : [Int] = [6, 2]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate the number of digits and letters in a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/344", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find number of elements with odd factors in a given range.\n *\n * >>> countOddSquares(5, 100)\n * 8\n * >>> countOddSquares(8, 65)\n * 6\n * >>> countOddSquares(2, 5)\n * 1\n */\nfunc countOddSquares(n : Int, m : Int) -> Int {\n", "entry_point": "countOddSquares", "test": "\n\nvar arg00 : Int = 5\nvar arg01 : Int = 100\nvar x0 : Int = countOddSquares(n : arg00, m : arg01)\nvar v0 : Int = 8\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 8\nvar arg11 : Int = 65\nvar x1 : Int = countOddSquares(n : arg10, m : arg11)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar arg21 : Int = 5\nvar x2 : Int = countOddSquares(n : arg20, m : arg21)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find number of elements with odd factors in a given range.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/345", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the difference between two consecutive numbers in a given list.\n *\n * >>> diffConsecutivenums([1, 1, 3, 4, 4, 5, 6, 7])\n * [0, 2, 1, 0, 1, 1, 1]\n * >>> diffConsecutivenums([4, 5, 8, 9, 6, 10])\n * [1, 3, 1, -3, 4]\n * >>> diffConsecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])\n * [1, 1, 1, 1, 0, 0, 0, 1, 2]\n */\nfunc diffConsecutivenums(nums : [Int]) -> [Int] {\n", "entry_point": "diffConsecutivenums", "test": "\n\nvar arg00 : [Int] = [1, 1, 3, 4, 4, 5, 6, 7]\nvar x0 : [Int] = diffConsecutivenums(nums : arg00)\nvar v0 : [Int] = [0, 2, 1, 0, 1, 1, 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 5, 8, 9, 6, 10]\nvar x1 : [Int] = diffConsecutivenums(nums : arg10)\nvar v1 : [Int] = [1, 3, 1, -3, 4]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [0, 1, 2, 3, 4, 4, 4, 4, 5, 7]\nvar x2 : [Int] = diffConsecutivenums(nums : arg20)\nvar v2 : [Int] = [1, 1, 1, 1, 0, 0, 0, 1, 2]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the difference between two consecutive numbers in a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/346", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find entringer number e(n, k).\n *\n * >>> zigzag(4, 3)\n * 5\n * >>> zigzag(4, 2)\n * 4\n * >>> zigzag(3, 1)\n * 1\n */\nfunc zigzag(n : Int, k : Int) -> Int {\n", "entry_point": "zigzag", "test": "\n\nvar arg00 : Int = 4\nvar arg01 : Int = 3\nvar x0 : Int = zigzag(n : arg00, k : arg01)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar arg11 : Int = 2\nvar x1 : Int = zigzag(n : arg10, k : arg11)\nvar v1 : Int = 4\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 3\nvar arg21 : Int = 1\nvar x2 : Int = zigzag(n : arg20, k : arg21)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find entringer number e(n, k).", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/347", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of squares in a rectangle.\n *\n * >>> countSquares(4, 3)\n * 20\n * >>> countSquares(1, 2)\n * 2\n * >>> countSquares(2, 2)\n * 5\n */\nfunc countSquares(m : Int, n : Int) -> Int {\n", "entry_point": "countSquares", "test": "\n\nvar arg00 : Int = 4\nvar arg01 : Int = 3\nvar x0 : Int = countSquares(m : arg00, n : arg01)\nvar v0 : Int = 20\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar arg11 : Int = 2\nvar x1 : Int = countSquares(m : arg10, n : arg11)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar arg21 : Int = 2\nvar x2 : Int = countSquares(m : arg20, n : arg21)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the number of squares in a rectangle.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/348", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n *\n * >>> findWays(4)\n * 2\n * >>> findWays(6)\n * 5\n * >>> findWays(8)\n * 14\n */\nfunc findWays(m : Int) -> Int {\n", "entry_point": "findWays", "test": "\n\nvar arg00 : Int = 4\nvar x0 : Int = findWays(m : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 6\nvar x1 : Int = findWays(m : arg10)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 8\nvar x2 : Int = findWays(m : arg20)\nvar v2 : Int = 14\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/349", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given string is a binary string or not.\n *\n * >>> check(\"01010101010\")\n * \"Yes\"\n * >>> check(\"name0\")\n * \"No\"\n * >>> check(\"101\")\n * \"Yes\"\n */\nfunc check(string : String) -> String {\n", "entry_point": "check", "test": "\n\nvar arg00 : String = #\"01010101010\"#\nvar x0 : String = check(string : arg00)\nvar v0 : String = #\"Yes\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"name0\"#\nvar x1 : String = check(string : arg10)\nvar v1 : String = #\"No\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"101\"#\nvar x2 : String = check(string : arg20)\nvar v2 : String = #\"Yes\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the given string is a binary string or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/350", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to minimize the length of the string by removing occurrence of only one character.\n *\n * >>> minimumLength(\"mnm\")\n * 1\n * >>> minimumLength(\"abcda\")\n * 3\n * >>> minimumLength(\"abcb\")\n * 2\n */\nfunc minimumLength(s : String) -> Int {\n", "entry_point": "minimumLength", "test": "\n\nvar arg00 : String = #\"mnm\"#\nvar x0 : Int = minimumLength(s : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"abcda\"#\nvar x1 : Int = minimumLength(s : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"abcb\"#\nvar x2 : Int = minimumLength(s : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to minimize the length of the string by removing occurrence of only one character.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/351", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first element occurring k times in a given array.\n *\n * >>> firstElement([0, 1, 2, 3, 4, 5], 6, 1)\n * 0\n * >>> firstElement([1, 2, 1, 3, 4], 5, 2)\n * 1\n * >>> firstElement([2, 3, 4, 3, 5, 7, 1, 2, 3, 5], 10, 2)\n * 2\n */\nfunc firstElement(arr : [Int], n : Int, k : Int) -> Int {\n", "entry_point": "firstElement", "test": "\n\nvar arg00 : [Int] = [0, 1, 2, 3, 4, 5]\nvar arg01 : Int = 6\nvar arg02 : Int = 1\nvar x0 : Int = firstElement(arr : arg00, n : arg01, k : arg02)\nvar v0 : Int = 0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 1, 3, 4]\nvar arg11 : Int = 5\nvar arg12 : Int = 2\nvar x1 : Int = firstElement(arr : arg10, n : arg11, k : arg12)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 3, 4, 3, 5, 7, 1, 2, 3, 5]\nvar arg21 : Int = 10\nvar arg22 : Int = 2\nvar x2 : Int = firstElement(arr : arg20, n : arg21, k : arg22)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the first element occurring k times in a given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/352", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether all the characters in a given string are unique.\n *\n * >>> uniqueCharacters(\"aba\")\n * false\n * >>> uniqueCharacters(\"abc\")\n * true\n * >>> uniqueCharacters(\"abab\")\n * false\n */\nfunc uniqueCharacters(str : String) -> Bool {\n", "entry_point": "uniqueCharacters", "test": "\n\nvar arg00 : String = #\"aba\"#\nvar x0 : Bool = uniqueCharacters(str : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"abc\"#\nvar x1 : Bool = uniqueCharacters(str : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"abab\"#\nvar x2 : Bool = uniqueCharacters(str : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether all the characters in a given string are unique.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/353", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove a specified column from a given nested list.\n *\n * >>> removeColumn([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)\n * [[2, 3], [4, 5], [1, 1]]\n * >>> removeColumn([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2)\n * [[1, 2], [-2, 4], [1, -1]]\n * >>> removeColumn([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0)\n * [[3], [7], [3], [15, 17], [7], [11]]\n */\nfunc removeColumn(list1 : [[Int]], n : Int) -> [[Int]] {\n", "entry_point": "removeColumn", "test": "\n\nvar arg00 : [[Int]] = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\nvar arg01 : Int = 0\nvar x0 : [[Int]] = removeColumn(list1 : arg00, n : arg01)\nvar v0 : [[Int]] = [[2, 3], [4, 5], [1, 1]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]\nvar arg11 : Int = 2\nvar x1 : [[Int]] = removeColumn(list1 : arg10, n : arg11)\nvar v1 : [[Int]] = [[1, 2], [-2, 4], [1, -1]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]\nvar arg21 : Int = 0\nvar x2 : [[Int]] = removeColumn(list1 : arg20, n : arg21)\nvar v2 : [[Int]] = [[3], [7], [3], [15, 17], [7], [11]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove a specified column from a given nested list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/354", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find t-nth term of arithemetic progression.\n *\n * >>> tnAp(1, 5, 2)\n * 9\n * >>> tnAp(2, 6, 4)\n * 22\n * >>> tnAp(1, 4, 5)\n * 16\n */\nfunc tnAp(a : Int, n : Int, d : Int) -> Int {\n", "entry_point": "tnAp", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = 5\nvar arg02 : Int = 2\nvar x0 : Int = tnAp(a : arg00, n : arg01, d : arg02)\nvar v0 : Int = 9\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar arg11 : Int = 6\nvar arg12 : Int = 4\nvar x1 : Int = tnAp(a : arg10, n : arg11, d : arg12)\nvar v1 : Int = 22\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = 4\nvar arg22 : Int = 5\nvar x2 : Int = tnAp(a : arg20, n : arg21, d : arg22)\nvar v2 : Int = 16\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find t-nth term of arithemetic progression.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/355", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of rectangles in a circle of radius r.\n *\n * >>> countRectangles(2)\n * 8\n * >>> countRectangles(1)\n * 1\n * >>> countRectangles(0)\n * 0\n */\nfunc countRectangles(radius : Int) -> Int {\n", "entry_point": "countRectangles", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = countRectangles(radius : arg00)\nvar v0 : Int = 8\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar x1 : Int = countRectangles(radius : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 0\nvar x2 : Int = countRectangles(radius : arg20)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the number of rectangles in a circle of radius r.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/356", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the third angle of a triangle using two angles.\n *\n * >>> findAngle(47, 89)\n * 44\n * >>> findAngle(45, 95)\n * 40\n * >>> findAngle(50, 40)\n * 90\n */\nfunc findAngle(a : Int, b : Int) -> Int {\n", "entry_point": "findAngle", "test": "\n\nvar arg00 : Int = 47\nvar arg01 : Int = 89\nvar x0 : Int = findAngle(a : arg00, b : arg01)\nvar v0 : Int = 44\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 45\nvar arg11 : Int = 95\nvar x1 : Int = findAngle(a : arg10, b : arg11)\nvar v1 : Int = 40\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 50\nvar arg21 : Int = 40\nvar x2 : Int = findAngle(a : arg20, b : arg21)\nvar v2 : Int = 90\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the third angle of a triangle using two angles.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/357", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum element of all the given tuple records.\n *\n * >>> findMax([[2, 4], [6, 7], [5, 1], [6, 10], [8, 7]])\n * 10\n * >>> findMax([[3, 5], [7, 8], [6, 2], [7, 11], [9, 8]])\n * 11\n * >>> findMax([[4, 6], [8, 9], [7, 3], [8, 12], [10, 9]])\n * 12\n */\nfunc findMax(testList : [[Int]]) -> Int {\n", "entry_point": "findMax", "test": "\n\nvar arg00 : [[Int]] = [[2, 4], [6, 7], [5, 1], [6, 10], [8, 7]]\nvar x0 : Int = findMax(testList : arg00)\nvar v0 : Int = 10\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[3, 5], [7, 8], [6, 2], [7, 11], [9, 8]]\nvar x1 : Int = findMax(testList : arg10)\nvar v1 : Int = 11\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[4, 6], [8, 9], [7, 3], [8, 12], [10, 9]]\nvar x2 : Int = findMax(testList : arg20)\nvar v2 : Int = 12\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the maximum element of all the given tuple records.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/358", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find modulo division of two lists using map and lambda function.\n *\n * >>> moddivList([4, 5, 6], [1, 2, 3])\n * [0, 1, 0]\n * >>> moddivList([3, 2], [1, 4])\n * [0, 2]\n * >>> moddivList([90, 120], [50, 70])\n * [40, 50]\n */\nfunc moddivList(nums1 : [Int], nums2 : [Int]) -> [Int] {\n", "entry_point": "moddivList", "test": "\n\nvar arg00 : [Int] = [4, 5, 6]\nvar arg01 : [Int] = [1, 2, 3]\nvar x0 : [Int] = moddivList(nums1 : arg00, nums2 : arg01)\nvar v0 : [Int] = [0, 1, 0]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [3, 2]\nvar arg11 : [Int] = [1, 4]\nvar x1 : [Int] = moddivList(nums1 : arg10, nums2 : arg11)\nvar v1 : [Int] = [0, 2]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [90, 120]\nvar arg21 : [Int] = [50, 70]\nvar x2 : [Int] = moddivList(nums1 : arg20, nums2 : arg21)\nvar v2 : [Int] = [40, 50]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find modulo division of two lists using map and lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/359", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether one root of the quadratic equation is twice of the other or not.\n *\n * >>> checkSolution(1, 3, 2)\n * \"Yes\"\n * >>> checkSolution(1, 2, 3)\n * \"No\"\n * >>> checkSolution(1, -5, 6)\n * \"No\"\n */\nfunc checkSolution(a : Int, b : Int, c : Int) -> String {\n", "entry_point": "checkSolution", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = 3\nvar arg02 : Int = 2\nvar x0 : String = checkSolution(a : arg00, b : arg01, c : arg02)\nvar v0 : String = #\"Yes\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar arg11 : Int = 2\nvar arg12 : Int = 3\nvar x1 : String = checkSolution(a : arg10, b : arg11, c : arg12)\nvar v1 : String = #\"No\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = -5\nvar arg22 : Int = 6\nvar x2 : String = checkSolution(a : arg20, b : arg21, c : arg22)\nvar v2 : String = #\"No\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether one root of the quadratic equation is twice of the other or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/360", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n\u2019th carol number.\n *\n * >>> getCarol(2)\n * 7\n * >>> getCarol(4)\n * 223\n * >>> getCarol(5)\n * 959\n */\nfunc getCarol(n : Int) -> Int {\n", "entry_point": "getCarol", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = getCarol(n : arg00)\nvar v0 : Int = 7\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar x1 : Int = getCarol(n : arg10)\nvar v1 : Int = 223\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar x2 : Int = getCarol(n : arg20)\nvar v2 : Int = 959\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the n\u2019th carol number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/361", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove empty lists from a given list of lists.\n *\n * >>> removeEmpty([[], [], [], \"Red\", \"Green\", [1, 2], \"Blue\", [], []])\n * [\"Red\", \"Green\", [1, 2], \"Blue\"]\n * >>> removeEmpty([[], [], [], [], [], \"Green\", [1, 2], \"Blue\", [], []])\n * [\"Green\", [1, 2], \"Blue\"]\n * >>> removeEmpty([[], [], [], \"Python\", [], [], \"programming\", \"language\", [], [], [], [], []])\n * [\"Python\", \"programming\", \"language\"]\n */\nfunc removeEmpty(list1 : [AnyHashable]) -> [AnyHashable] {\n", "entry_point": "removeEmpty", "test": "\n\nvar arg00 : [AnyHashable] = [[], [], [], #\"Red\"#, #\"Green\"#, [1, 2], #\"Blue\"#, [], []]\nvar x0 : [AnyHashable] = removeEmpty(list1 : arg00)\nvar v0 : [AnyHashable] = [#\"Red\"#, #\"Green\"#, [1, 2], #\"Blue\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [[], [], [], [], [], #\"Green\"#, [1, 2], #\"Blue\"#, [], []]\nvar x1 : [AnyHashable] = removeEmpty(list1 : arg10)\nvar v1 : [AnyHashable] = [#\"Green\"#, [1, 2], #\"Blue\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [[], [], [], #\"Python\"#, [], [], #\"programming\"#, #\"language\"#, [], [], [], [], []]\nvar x2 : [AnyHashable] = removeEmpty(list1 : arg20)\nvar v2 : [AnyHashable] = [#\"Python\"#, #\"programming\"#, #\"language\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove empty lists from a given list of lists.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/362", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the item with maximum occurrences in a given list.\n *\n * >>> maxOccurrences([1, 2, 3, 1, 2, 3, 12, 4, 2])\n * 2\n * >>> maxOccurrences([1, 2, 6, 7, 0, 1, 0, 1, 0])\n * [1,0]\n * >>> maxOccurrences([1, 2, 3, 1, 2, 4, 1])\n * 1\n */\nfunc maxOccurrences(nums : [Int]) -> AnyHashable {\n", "entry_point": "maxOccurrences", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 1, 2, 3, 12, 4, 2]\nvar x0 : AnyHashable = maxOccurrences(nums : arg00)\nvar v0 : AnyHashable = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 6, 7, 0, 1, 0, 1, 0]\nvar x1 : AnyHashable = maxOccurrences(nums : arg10)\nvar v1 : AnyHashable = [1, 0]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 1, 2, 4, 1]\nvar x2 : AnyHashable = maxOccurrences(nums : arg20)\nvar v2 : AnyHashable = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the item with maximum occurrences in a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/363", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add the k elements to each element in the tuple.\n *\n * >>> addKElement([[1, 3, 4], [2, 4, 6], [3, 8, 1]], 4)\n * [[5, 7, 8], [6, 8, 10], [7, 12, 5]]\n * >>> addKElement([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8)\n * [[9, 10, 11], [12, 13, 14], [15, 16, 17]]\n * >>> addKElement([[11, 12, 13], [14, 15, 16], [17, 18, 19]], 9)\n * [[20, 21, 22], [23, 24, 25], [26, 27, 28]]\n */\nfunc addKElement(testList : [[Int]], k : Int) -> [[Int]] {\n", "entry_point": "addKElement", "test": "\n\nvar arg00 : [[Int]] = [[1, 3, 4], [2, 4, 6], [3, 8, 1]]\nvar arg01 : Int = 4\nvar x0 : [[Int]] = addKElement(testList : arg00, k : arg01)\nvar v0 : [[Int]] = [[5, 7, 8], [6, 8, 10], [7, 12, 5]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nvar arg11 : Int = 8\nvar x1 : [[Int]] = addKElement(testList : arg10, k : arg11)\nvar v1 : [[Int]] = [[9, 10, 11], [12, 13, 14], [15, 16, 17]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[11, 12, 13], [14, 15, 16], [17, 18, 19]]\nvar arg21 : Int = 9\nvar x2 : [[Int]] = addKElement(testList : arg20, k : arg21)\nvar v2 : [[Int]] = [[20, 21, 22], [23, 24, 25], [26, 27, 28]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to add the k elements to each element in the tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/364", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n *\n * >>> minFlipToMakeStringAlternate(\"0001010111\")\n * 2\n * >>> minFlipToMakeStringAlternate(\"001\")\n * 1\n * >>> minFlipToMakeStringAlternate(\"010111011\")\n * 2\n */\nfunc minFlipToMakeStringAlternate(str : String) -> Int {\n", "entry_point": "minFlipToMakeStringAlternate", "test": "\n\nvar arg00 : String = #\"0001010111\"#\nvar x0 : Int = minFlipToMakeStringAlternate(str : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"001\"#\nvar x1 : Int = minFlipToMakeStringAlternate(str : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"010111011\"#\nvar x2 : Int = minFlipToMakeStringAlternate(str : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/365", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of digits of a given number.\n *\n * >>> countDigit(12345)\n * 5\n * >>> countDigit(11223305)\n * 8\n * >>> countDigit(4123459)\n * 7\n */\nfunc countDigit(n : Int) -> Int {\n", "entry_point": "countDigit", "test": "\n\nvar arg00 : Int = 12345\nvar x0 : Int = countDigit(n : arg00)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 11223305\nvar x1 : Int = countDigit(n : arg10)\nvar v1 : Int = 8\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4123459\nvar x2 : Int = countDigit(n : arg20)\nvar v2 : Int = 7\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the number of digits of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/366", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the largest product of the pair of adjacent elements from a given list of integers.\n *\n * >>> adjacentNumProduct([1, 2, 3, 4, 5, 6])\n * 30\n * >>> adjacentNumProduct([1, 2, 3, 4, 5])\n * 20\n * >>> adjacentNumProduct([2, 3])\n * 6\n */\nfunc adjacentNumProduct(listNums : [Int]) -> Int {\n", "entry_point": "adjacentNumProduct", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5, 6]\nvar x0 : Int = adjacentNumProduct(listNums : arg00)\nvar v0 : Int = 30\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5]\nvar x1 : Int = adjacentNumProduct(listNums : arg10)\nvar v1 : Int = 20\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 3]\nvar x2 : Int = adjacentNumProduct(listNums : arg20)\nvar v2 : Int = 6\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the largest product of the pair of adjacent elements from a given list of integers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/368", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to repeat the given tuple n times.\n *\n * >>> repeatTuples([1, 3], 4)\n * [[1, 3], [1, 3], [1, 3], [1, 3]]\n * >>> repeatTuples([1, 2], 3)\n * [[1, 2], [1, 2], [1, 2]]\n * >>> repeatTuples([3, 4], 5)\n * [[3, 4], [3, 4], [3, 4], [3, 4], [3, 4]]\n */\nfunc repeatTuples(testTup : [Int], n : Int) -> [[Int]] {\n", "entry_point": "repeatTuples", "test": "\n\nvar arg00 : [Int] = [1, 3]\nvar arg01 : Int = 4\nvar x0 : [[Int]] = repeatTuples(testTup : arg00, n : arg01)\nvar v0 : [[Int]] = [[1, 3], [1, 3], [1, 3], [1, 3]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2]\nvar arg11 : Int = 3\nvar x1 : [[Int]] = repeatTuples(testTup : arg10, n : arg11)\nvar v1 : [[Int]] = [[1, 2], [1, 2], [1, 2]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3, 4]\nvar arg21 : Int = 5\nvar x2 : [[Int]] = repeatTuples(testTup : arg20, n : arg21)\nvar v2 : [[Int]] = [[3, 4], [3, 4], [3, 4], [3, 4], [3, 4]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to repeat the given tuple n times.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/369", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lateral surface area of cuboid\n *\n * >>> lateralsurfaceCuboid(8, 5, 6)\n * 156\n * >>> lateralsurfaceCuboid(7, 9, 10)\n * 320\n * >>> lateralsurfaceCuboid(10, 20, 30)\n * 1800\n */\nfunc lateralsurfaceCuboid(l : Int, w : Int, h : Int) -> Int {\n", "entry_point": "lateralsurfaceCuboid", "test": "\n\nvar arg00 : Int = 8\nvar arg01 : Int = 5\nvar arg02 : Int = 6\nvar x0 : Int = lateralsurfaceCuboid(l : arg00, w : arg01, h : arg02)\nvar v0 : Int = 156\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 7\nvar arg11 : Int = 9\nvar arg12 : Int = 10\nvar x1 : Int = lateralsurfaceCuboid(l : arg10, w : arg11, h : arg12)\nvar v1 : Int = 320\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 10\nvar arg21 : Int = 20\nvar arg22 : Int = 30\nvar x2 : Int = lateralsurfaceCuboid(l : arg20, w : arg21, h : arg22)\nvar v2 : Int = 1800\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the lateral surface area of cuboid", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/370", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a tuple by its float element.\n *\n * >>> floatSort([[\"item1\", \"12.20\"], [\"item2\", \"15.10\"], [\"item3\", \"24.5\"]])\n * [[\"item3\", \"24.5\"], [\"item2\", \"15.10\"], [\"item1\", \"12.20\"]]\n * >>> floatSort([[\"item1\", \"15\"], [\"item2\", \"10\"], [\"item3\", \"20\"]])\n * [[\"item3\", \"20\"], [\"item1\", \"15\"], [\"item2\", \"10\"]]\n * >>> floatSort([[\"item1\", \"5\"], [\"item2\", \"10\"], [\"item3\", \"14\"]])\n * [[\"item3\", \"14\"], [\"item2\", \"10\"], [\"item1\", \"5\"]]\n */\nfunc floatSort(price : [[String]]) -> [[String]] {\n", "entry_point": "floatSort", "test": "\n\nvar arg00 : [[String]] = [[#\"item1\"#, #\"12.20\"#], [#\"item2\"#, #\"15.10\"#], [#\"item3\"#, #\"24.5\"#]]\nvar x0 : [[String]] = floatSort(price : arg00)\nvar v0 : [[String]] = [[#\"item3\"#, #\"24.5\"#], [#\"item2\"#, #\"15.10\"#], [#\"item1\"#, #\"12.20\"#]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[String]] = [[#\"item1\"#, #\"15\"#], [#\"item2\"#, #\"10\"#], [#\"item3\"#, #\"20\"#]]\nvar x1 : [[String]] = floatSort(price : arg10)\nvar v1 : [[String]] = [[#\"item3\"#, #\"20\"#], [#\"item1\"#, #\"15\"#], [#\"item2\"#, #\"10\"#]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[String]] = [[#\"item1\"#, #\"5\"#], [#\"item2\"#, #\"10\"#], [#\"item3\"#, #\"14\"#]]\nvar x2 : [[String]] = floatSort(price : arg20)\nvar v2 : [[String]] = [[#\"item3\"#, #\"14\"#], [#\"item2\"#, #\"10\"#], [#\"item1\"#, #\"5\"#]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort a tuple by its float element.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/371", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the smallest missing element in a sorted array.\n *\n * >>> smallestMissing([0, 1, 2, 3, 4, 5, 6], 0, 6)\n * 7\n * >>> smallestMissing([0, 1, 2, 6, 9, 11, 15], 0, 6)\n * 3\n * >>> smallestMissing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7)\n * 0\n */\nfunc smallestMissing(a : [Int], leftElement : Int, rightElement : Int) -> Int {\n", "entry_point": "smallestMissing", "test": "\n\nvar arg00 : [Int] = [0, 1, 2, 3, 4, 5, 6]\nvar arg01 : Int = 0\nvar arg02 : Int = 6\nvar x0 : Int = smallestMissing(a : arg00, leftElement : arg01, rightElement : arg02)\nvar v0 : Int = 7\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [0, 1, 2, 6, 9, 11, 15]\nvar arg11 : Int = 0\nvar arg12 : Int = 6\nvar x1 : Int = smallestMissing(a : arg10, leftElement : arg11, rightElement : arg12)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4, 6, 9, 11, 15]\nvar arg21 : Int = 0\nvar arg22 : Int = 7\nvar x2 : Int = smallestMissing(a : arg20, leftElement : arg21, rightElement : arg22)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the smallest missing element in a sorted array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/372", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n *\n * >>> heapAssending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])\n * [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n * >>> heapAssending([25, 35, 22, 85, 14, 65, 75, 25, 58])\n * [14, 22, 25, 25, 35, 58, 65, 75, 85]\n * >>> heapAssending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n * [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n */\nfunc heapAssending(nums : [Int]) -> [Int] {\n", "entry_point": "heapAssending", "test": "\n\nvar arg00 : [Int] = [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]\nvar x0 : [Int] = heapAssending(nums : arg00)\nvar v0 : [Int] = [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [25, 35, 22, 85, 14, 65, 75, 25, 58]\nvar x1 : [Int] = heapAssending(nums : arg10)\nvar v1 : [Int] = [14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\nvar x2 : [Int] = heapAssending(nums : arg20)\nvar v2 : [Int] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/373", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cuboid.\n *\n * >>> volumeCuboid(1, 2, 3)\n * 6\n * >>> volumeCuboid(5, 7, 9)\n * 315\n * >>> volumeCuboid(10, 15, 21)\n * 3150\n */\nfunc volumeCuboid(l : Int, w : Int, h : Int) -> Int {\n", "entry_point": "volumeCuboid", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = 2\nvar arg02 : Int = 3\nvar x0 : Int = volumeCuboid(l : arg00, w : arg01, h : arg02)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar arg11 : Int = 7\nvar arg12 : Int = 9\nvar x1 : Int = volumeCuboid(l : arg10, w : arg11, h : arg12)\nvar v1 : Int = 315\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 10\nvar arg21 : Int = 15\nvar arg22 : Int = 21\nvar x2 : Int = volumeCuboid(l : arg20, w : arg21, h : arg22)\nvar v2 : Int = 3150\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the volume of a cuboid.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/374", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print all permutations of a given string including duplicates.\n *\n * >>> permuteString(\"ab\")\n * [\"ab\", \"ba\"]\n * >>> permuteString(\"abc\")\n * [\"abc\", \"bac\", \"bca\", \"acb\", \"cab\", \"cba\"]\n * >>> permuteString(\"abcd\")\n * [\"abcd\", \"bacd\", \"bcad\", \"bcda\", \"acbd\", \"cabd\", \"cbad\", \"cbda\", \"acdb\", \"cadb\", \"cdab\", \"cdba\", \"abdc\", \"badc\", \"bdac\", \"bdca\", \"adbc\", \"dabc\", \"dbac\", \"dbca\", \"adcb\", \"dacb\", \"dcab\", \"dcba\"]\n */\nfunc permuteString(str : String) -> [String] {\n", "entry_point": "permuteString", "test": "\n\nvar arg00 : String = #\"ab\"#\nvar x0 : [String] = permuteString(str : arg00)\nvar v0 : [String] = [#\"ab\"#, #\"ba\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"abc\"#\nvar x1 : [String] = permuteString(str : arg10)\nvar v1 : [String] = [#\"abc\"#, #\"bac\"#, #\"bca\"#, #\"acb\"#, #\"cab\"#, #\"cba\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"abcd\"#\nvar x2 : [String] = permuteString(str : arg20)\nvar v2 : [String] = [#\"abcd\"#, #\"bacd\"#, #\"bcad\"#, #\"bcda\"#, #\"acbd\"#, #\"cabd\"#, #\"cbad\"#, #\"cbda\"#, #\"acdb\"#, #\"cadb\"#, #\"cdab\"#, #\"cdba\"#, #\"abdc\"#, #\"badc\"#, #\"bdac\"#, #\"bdca\"#, #\"adbc\"#, #\"dabc\"#, #\"dbac\"#, #\"dbca\"#, #\"adcb\"#, #\"dacb\"#, #\"dcab\"#, #\"dcba\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to print all permutations of a given string including duplicates.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/375", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to round the given number to the nearest multiple of a specific number.\n *\n * >>> roundNum(4722, 10)\n * 4720\n * >>> roundNum(1111, 5)\n * 1110\n * >>> roundNum(219, 2)\n * 218\n */\nfunc roundNum(n : Int, m : Int) -> Int {\n", "entry_point": "roundNum", "test": "\n\nvar arg00 : Int = 4722\nvar arg01 : Int = 10\nvar x0 : Int = roundNum(n : arg00, m : arg01)\nvar v0 : Int = 4720\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1111\nvar arg11 : Int = 5\nvar x1 : Int = roundNum(n : arg10, m : arg11)\nvar v1 : Int = 1110\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 219\nvar arg21 : Int = 2\nvar x2 : Int = roundNum(n : arg20, m : arg21)\nvar v2 : Int = 218\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to round the given number to the nearest multiple of a specific number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/376", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n *\n * >>> removeReplica([1, 1, 4, 4, 4, 5, 5, 6, 7, 7])\n * [1, \"MSP\", 4, \"MSP\", \"MSP\", 5, \"MSP\", 6, 7, \"MSP\"]\n * >>> removeReplica([2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9])\n * [2, 3, 4, \"MSP\", 5, 6, \"MSP\", 7, 8, 9, \"MSP\"]\n * >>> removeReplica([2, 2, 5, 4, 5, 7, 5, 6, 7, 7])\n * [2, \"MSP\", 5, 4, \"MSP\", 7, \"MSP\", 6, \"MSP\", \"MSP\"]\n */\nfunc removeReplica(testTup : [Int]) -> [AnyHashable] {\n", "entry_point": "removeReplica", "test": "\n\nvar arg00 : [Int] = [1, 1, 4, 4, 4, 5, 5, 6, 7, 7]\nvar x0 : [AnyHashable] = removeReplica(testTup : arg00)\nvar v0 : [AnyHashable] = [1, #\"MSP\"#, 4, #\"MSP\"#, #\"MSP\"#, 5, #\"MSP\"#, 6, 7, #\"MSP\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9]\nvar x1 : [AnyHashable] = removeReplica(testTup : arg10)\nvar v1 : [AnyHashable] = [2, 3, 4, #\"MSP\"#, 5, 6, #\"MSP\"#, 7, 8, 9, #\"MSP\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 2, 5, 4, 5, 7, 5, 6, 7, 7]\nvar x2 : [AnyHashable] = removeReplica(testTup : arg20)\nvar v2 : [AnyHashable] = [2, #\"MSP\"#, 5, 4, #\"MSP\"#, 7, #\"MSP\"#, 6, #\"MSP\"#, #\"MSP\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/377", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove all occurrences of a character in a given string.\n *\n * >>> removeChar(\"aba\", \"a\")\n * \"b\"\n * >>> removeChar(\"toggle\", \"g\")\n * \"tole\"\n * >>> removeChar(\"aabbc\", \"b\")\n * \"aac\"\n */\nfunc removeChar(s : String, c : String) -> String {\n", "entry_point": "removeChar", "test": "\n\nvar arg00 : String = #\"aba\"#\nvar arg01 : String = #\"a\"#\nvar x0 : String = removeChar(s : arg00, c : arg01)\nvar v0 : String = #\"b\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"toggle\"#\nvar arg11 : String = #\"g\"#\nvar x1 : String = removeChar(s : arg10, c : arg11)\nvar v1 : String = #\"tole\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"aabbc\"#\nvar arg21 : String = #\"b\"#\nvar x2 : String = removeChar(s : arg20, c : arg21)\nvar v2 : String = #\"aac\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to remove all occurrences of a character in a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/378", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to shift last element to first position in the given list.\n *\n * >>> moveFirst([1, 2, 3, 4])\n * [4, 1, 2, 3]\n * >>> moveFirst([0, 1, 2, 3])\n * [3, 0, 1, 2]\n * >>> moveFirst([9, 8, 7, 1])\n * [1, 9, 8, 7]\n */\nfunc moveFirst(testList : [Int]) -> [Int] {\n", "entry_point": "moveFirst", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4]\nvar x0 : [Int] = moveFirst(testList : arg00)\nvar v0 : [Int] = [4, 1, 2, 3]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [0, 1, 2, 3]\nvar x1 : [Int] = moveFirst(testList : arg10)\nvar v1 : [Int] = [3, 0, 1, 2]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [9, 8, 7, 1]\nvar x2 : [Int] = moveFirst(testList : arg20)\nvar v2 : [Int] = [1, 9, 8, 7]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to shift last element to first position in the given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/379", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the surface area of a cuboid.\n *\n * >>> surfaceareaCuboid(1, 2, 3)\n * 22\n * >>> surfaceareaCuboid(5, 7, 9)\n * 286\n * >>> surfaceareaCuboid(10, 15, 21)\n * 1350\n */\nfunc surfaceareaCuboid(l : Int, w : Int, h : Int) -> Int {\n", "entry_point": "surfaceareaCuboid", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = 2\nvar arg02 : Int = 3\nvar x0 : Int = surfaceareaCuboid(l : arg00, w : arg01, h : arg02)\nvar v0 : Int = 22\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar arg11 : Int = 7\nvar arg12 : Int = 9\nvar x1 : Int = surfaceareaCuboid(l : arg10, w : arg11, h : arg12)\nvar v1 : Int = 286\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 10\nvar arg21 : Int = 15\nvar arg22 : Int = 21\nvar x2 : Int = surfaceareaCuboid(l : arg20, w : arg21, h : arg22)\nvar v2 : Int = 1350\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the surface area of a cuboid.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/380", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to generate a two-dimensional array.\n *\n * >>> multiList(3, 4)\n * [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n * >>> multiList(5, 7)\n * [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\n * >>> multiList(10, 15)\n * [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]\n */\nfunc multiList(rownum : Int, colnum : Int) -> [[Int]] {\n", "entry_point": "multiList", "test": "\n\nvar arg00 : Int = 3\nvar arg01 : Int = 4\nvar x0 : [[Int]] = multiList(rownum : arg00, colnum : arg01)\nvar v0 : [[Int]] = [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar arg11 : Int = 7\nvar x1 : [[Int]] = multiList(rownum : arg10, colnum : arg11)\nvar v1 : [[Int]] = [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 10\nvar arg21 : Int = 15\nvar x2 : [[Int]] = multiList(rownum : arg20, colnum : arg21)\nvar v2 : [[Int]] = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to generate a two-dimensional array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/381", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of lists by a given index of the inner list.\n *\n * >>> indexOnInnerList([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 0)\n * [[\"Beau Turnbull\", 94, 98], [\"Brady Kent\", 97, 96], [\"Greyson Fulton\", 98, 99], [\"Wyatt Knott\", 91, 94]]\n * >>> indexOnInnerList([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 1)\n * [[\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98], [\"Brady Kent\", 97, 96], [\"Greyson Fulton\", 98, 99]]\n * >>> indexOnInnerList([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 2)\n * [[\"Wyatt Knott\", 91, 94], [\"Brady Kent\", 97, 96], [\"Beau Turnbull\", 94, 98], [\"Greyson Fulton\", 98, 99]]\n */\nfunc indexOnInnerList(listData : [[AnyHashable]], indexNo : Int) -> [[AnyHashable]] {\n", "entry_point": "indexOnInnerList", "test": "\n\nvar arg00 : [[AnyHashable]] = [[#\"Greyson Fulton\"#, 98, 99], [#\"Brady Kent\"#, 97, 96], [#\"Wyatt Knott\"#, 91, 94], [#\"Beau Turnbull\"#, 94, 98]]\nvar arg01 : Int = 0\nvar x0 : [[AnyHashable]] = indexOnInnerList(listData : arg00, indexNo : arg01)\nvar v0 : [[AnyHashable]] = [[#\"Beau Turnbull\"#, 94, 98], [#\"Brady Kent\"#, 97, 96], [#\"Greyson Fulton\"#, 98, 99], [#\"Wyatt Knott\"#, 91, 94]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[#\"Greyson Fulton\"#, 98, 99], [#\"Brady Kent\"#, 97, 96], [#\"Wyatt Knott\"#, 91, 94], [#\"Beau Turnbull\"#, 94, 98]]\nvar arg11 : Int = 1\nvar x1 : [[AnyHashable]] = indexOnInnerList(listData : arg10, indexNo : arg11)\nvar v1 : [[AnyHashable]] = [[#\"Wyatt Knott\"#, 91, 94], [#\"Beau Turnbull\"#, 94, 98], [#\"Brady Kent\"#, 97, 96], [#\"Greyson Fulton\"#, 98, 99]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[#\"Greyson Fulton\"#, 98, 99], [#\"Brady Kent\"#, 97, 96], [#\"Wyatt Knott\"#, 91, 94], [#\"Beau Turnbull\"#, 94, 98]]\nvar arg21 : Int = 2\nvar x2 : [[AnyHashable]] = indexOnInnerList(listData : arg20, indexNo : arg21)\nvar v2 : [[AnyHashable]] = [[#\"Wyatt Knott\"#, 91, 94], [#\"Brady Kent\"#, 97, 96], [#\"Beau Turnbull\"#, 94, 98], [#\"Greyson Fulton\"#, 98, 99]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort a list of lists by a given index of the inner list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/382", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the number of rotations in a circularly sorted array.\n *\n * >>> findRotationCount([8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\n * 3\n * >>> findRotationCount([8, 9, 10, 2, 5, 6])\n * 3\n * >>> findRotationCount([2, 5, 6, 8, 9, 10])\n * 0\n */\nfunc findRotationCount(a : [Int]) -> Int {\n", "entry_point": "findRotationCount", "test": "\n\nvar arg00 : [Int] = [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\nvar x0 : Int = findRotationCount(a : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [8, 9, 10, 2, 5, 6]\nvar x1 : Int = findRotationCount(a : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 5, 6, 8, 9, 10]\nvar x2 : Int = findRotationCount(a : arg20)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the number of rotations in a circularly sorted array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/383", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to toggle all odd bits of a given number.\n *\n * >>> evenBitToggleNumber(10)\n * 15\n * >>> evenBitToggleNumber(20)\n * 1\n * >>> evenBitToggleNumber(30)\n * 11\n */\nfunc evenBitToggleNumber(n : Int) -> Int {\n", "entry_point": "evenBitToggleNumber", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = evenBitToggleNumber(n : arg00)\nvar v0 : Int = 15\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 20\nvar x1 : Int = evenBitToggleNumber(n : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 30\nvar x2 : Int = evenBitToggleNumber(n : arg20)\nvar v2 : Int = 11\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to toggle all odd bits of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/384", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the frequency of the smallest value in a given array.\n *\n * >>> frequencyOfSmallest(5, [1, 2, 3, 4, 3])\n * 1\n * >>> frequencyOfSmallest(7, [3, 1, 2, 5, 6, 2, 3])\n * 1\n * >>> frequencyOfSmallest(7, [3, 3, 6, 3, 7, 4, 9])\n * 3\n */\nfunc frequencyOfSmallest(n : Int, arr : [Int]) -> Int {\n", "entry_point": "frequencyOfSmallest", "test": "\n\nvar arg00 : Int = 5\nvar arg01 : [Int] = [1, 2, 3, 4, 3]\nvar x0 : Int = frequencyOfSmallest(n : arg00, arr : arg01)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 7\nvar arg11 : [Int] = [3, 1, 2, 5, 6, 2, 3]\nvar x1 : Int = frequencyOfSmallest(n : arg10, arr : arg11)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 7\nvar arg21 : [Int] = [3, 3, 6, 3, 7, 4, 9]\nvar x2 : Int = frequencyOfSmallest(n : arg20, arr : arg21)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the frequency of the smallest value in a given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/385", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n'th perrin number using recursion.\n *\n * >>> getPerrin(9)\n * 12\n * >>> getPerrin(4)\n * 2\n * >>> getPerrin(6)\n * 5\n */\nfunc getPerrin(n : Int) -> Int {\n", "entry_point": "getPerrin", "test": "\n\nvar arg00 : Int = 9\nvar x0 : Int = getPerrin(n : arg00)\nvar v0 : Int = 12\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar x1 : Int = getPerrin(n : arg10)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 6\nvar x2 : Int = getPerrin(n : arg20)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the n'th perrin number using recursion.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/386", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n *\n * >>> swapCount(\"[]][][\")\n * 2\n * >>> swapCount(\"[[][]]\")\n * 0\n * >>> swapCount(\"[[][]]][\")\n * 1\n */\nfunc swapCount(s : String) -> Int {\n", "entry_point": "swapCount", "test": "\n\nvar arg00 : String = #\"[]][][\"#\nvar x0 : Int = swapCount(s : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"[[][]]\"#\nvar x1 : Int = swapCount(s : arg10)\nvar v1 : Int = 0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"[[][]]][\"#\nvar x2 : Int = swapCount(s : arg20)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/387", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the hexadecimal number is even or odd.\n *\n * >>> evenOrOdd(\"AB3454D\")\n * \"Odd\"\n * >>> evenOrOdd(\"ABC\")\n * \"Even\"\n * >>> evenOrOdd(\"AAD\")\n * \"Odd\"\n */\nfunc evenOrOdd(n : String) -> String {\n", "entry_point": "evenOrOdd", "test": "\n\nvar arg00 : String = #\"AB3454D\"#\nvar x0 : String = evenOrOdd(n : arg00)\nvar v0 : String = #\"Odd\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"ABC\"#\nvar x1 : String = evenOrOdd(n : arg10)\nvar v1 : String = #\"Even\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"AAD\"#\nvar x2 : String = evenOrOdd(n : arg20)\nvar v2 : String = #\"Odd\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the hexadecimal number is even or odd.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/388", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the highest power of 2 that is less than or equal to n.\n *\n * >>> highestPowerOf2(10)\n * 8\n * >>> highestPowerOf2(19)\n * 16\n * >>> highestPowerOf2(32)\n * 32\n */\nfunc highestPowerOf2(n : Int) -> Int {\n", "entry_point": "highestPowerOf2", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = highestPowerOf2(n : arg00)\nvar v0 : Int = 8\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 19\nvar x1 : Int = highestPowerOf2(n : arg10)\nvar v1 : Int = 16\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 32\nvar x2 : Int = highestPowerOf2(n : arg20)\nvar v2 : Int = 32\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the highest power of 2 that is less than or equal to n.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/389", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n'th lucas number.\n *\n * >>> findLucas(9)\n * 76\n * >>> findLucas(4)\n * 7\n * >>> findLucas(3)\n * 4\n */\nfunc findLucas(n : Int) -> Int {\n", "entry_point": "findLucas", "test": "\n\nvar arg00 : Int = 9\nvar x0 : Int = findLucas(n : arg00)\nvar v0 : Int = 76\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar x1 : Int = findLucas(n : arg10)\nvar v1 : Int = 7\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 3\nvar x2 : Int = findLucas(n : arg20)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the n'th lucas number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/390", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to insert a given string at the beginning of all items in a list.\n *\n * >>> addString([1, 2, 3, 4], \"temp{0}\")\n * [\"temp1\", \"temp2\", \"temp3\", \"temp4\"]\n * >>> addString([\"a\", \"b\", \"c\", \"d\"], \"python{0}\")\n * [\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"]\n * >>> addString([5, 6, 7, 8], \"string{0}\")\n * [\"string5\", \"string6\", \"string7\", \"string8\"]\n */\nfunc addString(list : [AnyHashable], string : String) -> [String] {\n", "entry_point": "addString", "test": "\n\nvar arg00 : [AnyHashable] = [1, 2, 3, 4]\nvar arg01 : String = #\"temp{0}\"#\nvar x0 : [String] = addString(list : arg00, string : arg01)\nvar v0 : [String] = [#\"temp1\"#, #\"temp2\"#, #\"temp3\"#, #\"temp4\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [#\"a\"#, #\"b\"#, #\"c\"#, #\"d\"#]\nvar arg11 : String = #\"python{0}\"#\nvar x1 : [String] = addString(list : arg10, string : arg11)\nvar v1 : [String] = [#\"pythona\"#, #\"pythonb\"#, #\"pythonc\"#, #\"pythond\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [5, 6, 7, 8]\nvar arg21 : String = #\"string{0}\"#\nvar x2 : [String] = addString(list : arg20, string : arg21)\nvar v2 : [String] = [#\"string5\"#, #\"string6\"#, #\"string7\"#, #\"string8\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to insert a given string at the beginning of all items in a list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/391", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert more than one list to nested dictionary.\n *\n * >>> convertListDictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92])\n * [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]]\n * >>> convertListDictionary([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400])\n * [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]]\n * >>> convertListDictionary([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40])\n * [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]]\n */\nfunc convertListDictionary(l1 : [String], l2 : [String], l3 : [Int]) -> [[String: [String: Int]]] {\n", "entry_point": "convertListDictionary", "test": "\n\nvar arg00 : [String] = [#\"S001\"#, #\"S002\"#, #\"S003\"#, #\"S004\"#]\nvar arg01 : [String] = [#\"Adina Park\"#, #\"Leyton Marsh\"#, #\"Duncan Boyle\"#, #\"Saim Richards\"#]\nvar arg02 : [Int] = [85, 98, 89, 92]\nvar x0 : [[String: [String: Int]]] = convertListDictionary(l1 : arg00, l2 : arg01, l3 : arg02)\nvar v0 : [[String: [String: Int]]] = [[#\"S001\"# : [#\"Adina Park\"# : 85]], [#\"S002\"# : [#\"Leyton Marsh\"# : 98]], [#\"S003\"# : [#\"Duncan Boyle\"# : 89]], [#\"S004\"# : [#\"Saim Richards\"# : 92]]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"abc\"#, #\"def\"#, #\"ghi\"#, #\"jkl\"#]\nvar arg11 : [String] = [#\"python\"#, #\"program\"#, #\"language\"#, #\"programs\"#]\nvar arg12 : [Int] = [100, 200, 300, 400]\nvar x1 : [[String: [String: Int]]] = convertListDictionary(l1 : arg10, l2 : arg11, l3 : arg12)\nvar v1 : [[String: [String: Int]]] = [[#\"abc\"# : [#\"python\"# : 100]], [#\"def\"# : [#\"program\"# : 200]], [#\"ghi\"# : [#\"language\"# : 300]], [#\"jkl\"# : [#\"programs\"# : 400]]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"A1\"#, #\"A2\"#, #\"A3\"#, #\"A4\"#]\nvar arg21 : [String] = [#\"java\"#, #\"C\"#, #\"C++\"#, #\"DBMS\"#]\nvar arg22 : [Int] = [10, 20, 30, 40]\nvar x2 : [[String: [String: Int]]] = convertListDictionary(l1 : arg20, l2 : arg21, l3 : arg22)\nvar v2 : [[String: [String: Int]]] = [[#\"A1\"# : [#\"java\"# : 10]], [#\"A2\"# : [#\"C\"# : 20]], [#\"A3\"# : [#\"C++\"# : 30]], [#\"A4\"# : [#\"DBMS\"# : 40]]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert more than one list to nested dictionary.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/392", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n *\n * >>> getMaxSum(60)\n * 106\n * >>> getMaxSum(10)\n * 12\n * >>> getMaxSum(2)\n * 2\n */\nfunc getMaxSum(n : Int) -> Int {\n", "entry_point": "getMaxSum", "test": "\n\nvar arg00 : Int = 60\nvar x0 : Int = getMaxSum(n : arg00)\nvar v0 : Int = 106\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar x1 : Int = getMaxSum(n : arg10)\nvar v1 : Int = 12\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar x2 : Int = getMaxSum(n : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/393", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the list with maximum length using lambda function.\n *\n * >>> maxLengthList([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n * [3, [13, 15, 17]]\n * >>> maxLengthList([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])\n * [5, [1, 2, 3, 4, 5]]\n * >>> maxLengthList([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]])\n * [4, [6, 7, 8, 9]]\n */\nfunc maxLengthList(inputList : [[Int]]) -> [AnyHashable] {\n", "entry_point": "maxLengthList", "test": "\n\nvar arg00 : [[Int]] = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]\nvar x0 : [AnyHashable] = maxLengthList(inputList : arg00)\nvar v0 : [AnyHashable] = [3, [13, 15, 17]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]\nvar x1 : [AnyHashable] = maxLengthList(inputList : arg10)\nvar v1 : [AnyHashable] = [5, [1, 2, 3, 4, 5]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]]\nvar x2 : [AnyHashable] = maxLengthList(inputList : arg20)\nvar v2 : [AnyHashable] = [4, [6, 7, 8, 9]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the list with maximum length using lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/394", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if given tuple is distinct or not.\n *\n * >>> checkDistinct([1, 4, 5, 6, 1, 4])\n * false\n * >>> checkDistinct([1, 4, 5, 6])\n * true\n * >>> checkDistinct([2, 3, 4, 5, 6])\n * true\n */\nfunc checkDistinct(testTup : [Int]) -> Bool {\n", "entry_point": "checkDistinct", "test": "\n\nvar arg00 : [Int] = [1, 4, 5, 6, 1, 4]\nvar x0 : Bool = checkDistinct(testTup : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 4, 5, 6]\nvar x1 : Bool = checkDistinct(testTup : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 3, 4, 5, 6]\nvar x2 : Bool = checkDistinct(testTup : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if given tuple is distinct or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/395", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first non-repeated character in a given string.\n *\n * >>> firstNonRepeatingCharacter(\"abcabc\")\n * \"none\"\n * >>> firstNonRepeatingCharacter(\"abc\")\n * \"a\"\n * >>> firstNonRepeatingCharacter(\"ababc\")\n * \"c\"\n */\nfunc firstNonRepeatingCharacter(str1 : String) -> String {\n", "entry_point": "firstNonRepeatingCharacter", "test": "\n\nvar arg00 : String = #\"abcabc\"#\nvar x0 : String = firstNonRepeatingCharacter(str1 : arg00)\nvar v0 : String = \"none\"\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"abc\"#\nvar x1 : String = firstNonRepeatingCharacter(str1 : arg10)\nvar v1 : String = #\"a\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"ababc\"#\nvar x2 : String = firstNonRepeatingCharacter(str1 : arg20)\nvar v2 : String = #\"c\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the first non-repeated character in a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/396", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given string starts and ends with the same character or not using regex.\n *\n * >>> checkChar(\"abba\")\n * \"Valid\"\n * >>> checkChar(\"a\")\n * \"Valid\"\n * >>> checkChar(\"abcd\")\n * \"Invalid\"\n */\nfunc checkChar(string : String) -> String {\n", "entry_point": "checkChar", "test": "\n\nvar arg00 : String = #\"abba\"#\nvar x0 : String = checkChar(string : arg00)\nvar v0 : String = #\"Valid\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"a\"#\nvar x1 : String = checkChar(string : arg10)\nvar v1 : String = #\"Valid\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"abcd\"#\nvar x2 : String = checkChar(string : arg20)\nvar v2 : String = #\"Invalid\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether the given string starts and ends with the same character or not using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/397", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the median of three specific numbers.\n *\n * >>> medianNumbers(25, 55, 65)\n * 55.0\n * >>> medianNumbers(20, 10, 30)\n * 20.0\n * >>> medianNumbers(15, 45, 75)\n * 45.0\n */\nfunc medianNumbers(a : Int, b : Int, c : Int) -> Double {\n", "entry_point": "medianNumbers", "test": "\n\nvar arg00 : Int = 25\nvar arg01 : Int = 55\nvar arg02 : Int = 65\nvar x0 : Double = medianNumbers(a : arg00, b : arg01, c : arg02)\nvar v0 : Double = 55.0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 20\nvar arg11 : Int = 10\nvar arg12 : Int = 30\nvar x1 : Double = medianNumbers(a : arg10, b : arg11, c : arg12)\nvar v1 : Double = 20.0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 15\nvar arg21 : Int = 45\nvar arg22 : Int = 75\nvar x2 : Double = medianNumbers(a : arg20, b : arg21, c : arg22)\nvar v2 : Double = 45.0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the median of three specific numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/398", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to compute the sum of digits of each number of a given list.\n *\n * >>> sumOfDigits([10, 2, 56])\n * 14\n * >>> sumOfDigits([[10, 20, 4, 5, \"b\", 70, \"a\"]])\n * 19\n * >>> sumOfDigits([10, 20, -4, 5, -70])\n * 19\n */\nfunc sumOfDigits(nums : [AnyHashable]) -> Int {\n", "entry_point": "sumOfDigits", "test": "\n\nvar arg00 : [AnyHashable] = [10, 2, 56]\nvar x0 : Int = sumOfDigits(nums : arg00)\nvar v0 : Int = 14\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [[10, 20, 4, 5, #\"b\"#, 70, #\"a\"#]]\nvar x1 : Int = sumOfDigits(nums : arg10)\nvar v1 : Int = 19\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [10, 20, -4, 5, -70]\nvar x2 : Int = sumOfDigits(nums : arg20)\nvar v2 : Int = 19\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to compute the sum of digits of each number of a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/399", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform the mathematical bitwise xor operation across the given tuples.\n *\n * >>> bitwiseXor([10, 4, 6, 9], [5, 2, 3, 3])\n * [15, 6, 5, 10]\n * >>> bitwiseXor([11, 5, 7, 10], [6, 3, 4, 4])\n * [13, 6, 3, 14]\n * >>> bitwiseXor([12, 6, 8, 11], [7, 4, 5, 6])\n * [11, 2, 13, 13]\n */\nfunc bitwiseXor(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n", "entry_point": "bitwiseXor", "test": "\n\nvar arg00 : [Int] = [10, 4, 6, 9]\nvar arg01 : [Int] = [5, 2, 3, 3]\nvar x0 : [Int] = bitwiseXor(testTup1 : arg00, testTup2 : arg01)\nvar v0 : [Int] = [15, 6, 5, 10]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [11, 5, 7, 10]\nvar arg11 : [Int] = [6, 3, 4, 4]\nvar x1 : [Int] = bitwiseXor(testTup1 : arg10, testTup2 : arg11)\nvar v1 : [Int] = [13, 6, 3, 14]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [12, 6, 8, 11]\nvar arg21 : [Int] = [7, 4, 5, 6]\nvar x2 : [Int] = bitwiseXor(testTup1 : arg20, testTup2 : arg21)\nvar v2 : [Int] = [11, 2, 13, 13]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/400", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the frequency of unique tuples in the given list order irrespective.\n *\n * >>> extractFreq([[3, 4], [1, 2], [4, 3], [5, 6]])\n * 3\n * >>> extractFreq([[4, 15], [2, 3], [5, 4], [6, 7]])\n * 4\n * >>> extractFreq([[5, 16], [2, 3], [6, 5], [6, 9]])\n * 4\n */\nfunc extractFreq(testList : [[Int]]) -> Int {\n", "entry_point": "extractFreq", "test": "\n\nvar arg00 : [[Int]] = [[3, 4], [1, 2], [4, 3], [5, 6]]\nvar x0 : Int = extractFreq(testList : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[4, 15], [2, 3], [5, 4], [6, 7]]\nvar x1 : Int = extractFreq(testList : arg10)\nvar v1 : Int = 4\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[5, 16], [2, 3], [6, 5], [6, 9]]\nvar x2 : Int = extractFreq(testList : arg20)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract the frequency of unique tuples in the given list order irrespective.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/401", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n *\n * >>> addNestedTuples([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n * [[7, 10], [7, 14], [3, 10], [8, 13]]\n * >>> addNestedTuples([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])\n * [[9, 12], [9, 16], [5, 12], [10, 15]]\n * >>> addNestedTuples([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])\n * [[11, 14], [11, 18], [7, 14], [12, 17]]\n */\nfunc addNestedTuples(testTup1 : [[Int]], testTup2 : [[Int]]) -> [[Int]] {\n", "entry_point": "addNestedTuples", "test": "\n\nvar arg00 : [[Int]] = [[1, 3], [4, 5], [2, 9], [1, 10]]\nvar arg01 : [[Int]] = [[6, 7], [3, 9], [1, 1], [7, 3]]\nvar x0 : [[Int]] = addNestedTuples(testTup1 : arg00, testTup2 : arg01)\nvar v0 : [[Int]] = [[7, 10], [7, 14], [3, 10], [8, 13]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[2, 4], [5, 6], [3, 10], [2, 11]]\nvar arg11 : [[Int]] = [[7, 8], [4, 10], [2, 2], [8, 4]]\nvar x1 : [[Int]] = addNestedTuples(testTup1 : arg10, testTup2 : arg11)\nvar v1 : [[Int]] = [[9, 12], [9, 16], [5, 12], [10, 15]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[3, 5], [6, 7], [4, 11], [3, 12]]\nvar arg21 : [[Int]] = [[8, 9], [5, 11], [3, 3], [9, 5]]\nvar x2 : [[Int]] = addNestedTuples(testTup1 : arg20, testTup2 : arg21)\nvar v2 : [[Int]] = [[11, 14], [11, 18], [7, 14], [12, 17]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/402", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to compute the value of ncr%p.\n *\n * >>> ncrModp(10, 2, 13)\n * 6\n * >>> ncrModp(15, 12, 43)\n * 25\n * >>> ncrModp(17, 9, 18)\n * 10\n */\nfunc ncrModp(n : Int, r : Int, p : Int) -> Int {\n", "entry_point": "ncrModp", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 2\nvar arg02 : Int = 13\nvar x0 : Int = ncrModp(n : arg00, r : arg01, p : arg02)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 15\nvar arg11 : Int = 12\nvar arg12 : Int = 43\nvar x1 : Int = ncrModp(n : arg10, r : arg11, p : arg12)\nvar v1 : Int = 25\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 17\nvar arg21 : Int = 9\nvar arg22 : Int = 18\nvar x2 : Int = ncrModp(n : arg20, r : arg21, p : arg22)\nvar v2 : Int = 10\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to compute the value of ncr%p.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/403", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a url is valid or not using regex.\n *\n * >>> isValidUrl(\"https:\\/\\/www.google.com\")\n * true\n * >>> isValidUrl(\"https:/www.gmail.com\")\n * false\n * >>> isValidUrl(\"https:\\/\\/ www.redit.com\")\n * false\n */\nfunc isValidUrl(str : String) -> Bool {\n", "entry_point": "isValidUrl", "test": "\n\nvar arg00 : String = #\"https:\\/\\/www.google.com\"#\nvar x0 : Bool = isValidUrl(str : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"https:/www.gmail.com\"#\nvar x1 : Bool = isValidUrl(str : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"https:\\/\\/ www.redit.com\"#\nvar x2 : Bool = isValidUrl(str : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if a url is valid or not using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/404", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum of two numbers.\n *\n * >>> minimum(1, 2)\n * 1\n * >>> minimum(-5, -4)\n * -5\n * >>> minimum(0, 0)\n * 0\n */\nfunc minimum(a : Int, b : Int) -> Int {\n", "entry_point": "minimum", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = 2\nvar x0 : Int = minimum(a : arg00, b : arg01)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = -5\nvar arg11 : Int = -4\nvar x1 : Int = minimum(a : arg10, b : arg11)\nvar v1 : Int = -5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 0\nvar arg21 : Int = 0\nvar x2 : Int = minimum(a : arg20, b : arg21)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the minimum of two numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/405", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether an element exists within a tuple.\n *\n * >>> checkTuplex([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"r\")\n * true\n * >>> checkTuplex([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"5\")\n * false\n * >>> checkTuplex([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], 3)\n * true\n */\nfunc checkTuplex(tuplex : [AnyHashable], tuple1 : AnyHashable) -> Bool {\n", "entry_point": "checkTuplex", "test": "\n\nvar arg00 : [AnyHashable] = [#\"w\"#, 3, #\"r\"#, #\"e\"#, #\"s\"#, #\"o\"#, #\"u\"#, #\"r\"#, #\"c\"#, #\"e\"#]\nvar arg01 : AnyHashable = #\"r\"#\nvar x0 : Bool = checkTuplex(tuplex : arg00, tuple1 : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [#\"w\"#, 3, #\"r\"#, #\"e\"#, #\"s\"#, #\"o\"#, #\"u\"#, #\"r\"#, #\"c\"#, #\"e\"#]\nvar arg11 : AnyHashable = #\"5\"#\nvar x1 : Bool = checkTuplex(tuplex : arg10, tuple1 : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [#\"w\"#, 3, #\"r\"#, #\"e\"#, #\"s\"#, #\"o\"#, #\"u\"#, #\"r\"#, #\"c\"#, #\"e\"#]\nvar arg21 : AnyHashable = 3\nvar x2 : Bool = checkTuplex(tuplex : arg20, tuple1 : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether an element exists within a tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/406", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the parity of a given number.\n *\n * >>> findParity(12)\n * \"Even Parity\"\n * >>> findParity(7)\n * \"Odd Parity\"\n * >>> findParity(10)\n * \"Even Parity\"\n */\nfunc findParity(x : Int) -> String {\n", "entry_point": "findParity", "test": "\n\nvar arg00 : Int = 12\nvar x0 : String = findParity(x : arg00)\nvar v0 : String = #\"Even Parity\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 7\nvar x1 : String = findParity(x : arg10)\nvar v1 : String = #\"Odd Parity\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 10\nvar x2 : String = findParity(x : arg20)\nvar v2 : String = #\"Even Parity\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the parity of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/407", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to create the next bigger number by rearranging the digits of a given number.\n *\n * >>> rearrangeBigger(12)\n * 21\n * >>> rearrangeBigger(10)\n * false\n * >>> rearrangeBigger(102)\n * 120\n */\nfunc rearrangeBigger(n : Int) -> AnyHashable {\n", "entry_point": "rearrangeBigger", "test": "\n\nvar arg00 : Int = 12\nvar x0 : AnyHashable = rearrangeBigger(n : arg00)\nvar v0 : AnyHashable = 21\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar x1 : AnyHashable = rearrangeBigger(n : arg10)\nvar v1 : AnyHashable = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 102\nvar x2 : AnyHashable = rearrangeBigger(n : arg20)\nvar v2 : AnyHashable = 120\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to create the next bigger number by rearranging the digits of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/408", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n *\n * >>> kSmallestPairs([1, 3, 7], [2, 4, 6], 2)\n * [[1, 2], [1, 4]]\n * >>> kSmallestPairs([1, 3, 7], [2, 4, 6], 1)\n * [[1, 2]]\n * >>> kSmallestPairs([1, 3, 7], [2, 4, 6], 7)\n * [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n */\nfunc kSmallestPairs(nums1 : [Int], nums2 : [Int], k : Int) -> [[Int]] {\n", "entry_point": "kSmallestPairs", "test": "\n\nvar arg00 : [Int] = [1, 3, 7]\nvar arg01 : [Int] = [2, 4, 6]\nvar arg02 : Int = 2\nvar x0 : [[Int]] = kSmallestPairs(nums1 : arg00, nums2 : arg01, k : arg02)\nvar v0 : [[Int]] = [[1, 2], [1, 4]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 3, 7]\nvar arg11 : [Int] = [2, 4, 6]\nvar arg12 : Int = 1\nvar x1 : [[Int]] = kSmallestPairs(nums1 : arg10, nums2 : arg11, k : arg12)\nvar v1 : [[Int]] = [[1, 2]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 3, 7]\nvar arg21 : [Int] = [2, 4, 6]\nvar arg22 : Int = 7\nvar x2 : [[Int]] = kSmallestPairs(nums1 : arg20, nums2 : arg21, k : arg22)\nvar v2 : [[Int]] = [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/409", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the minimum product from the pairs of tuples within a given list.\n *\n * >>> minProductTuple([[2, 7], [2, 6], [1, 8], [4, 9]])\n * 8\n * >>> minProductTuple([[10, 20], [15, 2], [5, 10]])\n * 30\n * >>> minProductTuple([[11, 44], [10, 15], [20, 5], [12, 9]])\n * 100\n */\nfunc minProductTuple(list1 : [[Int]]) -> Int {\n", "entry_point": "minProductTuple", "test": "\n\nvar arg00 : [[Int]] = [[2, 7], [2, 6], [1, 8], [4, 9]]\nvar x0 : Int = minProductTuple(list1 : arg00)\nvar v0 : Int = 8\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[10, 20], [15, 2], [5, 10]]\nvar x1 : Int = minProductTuple(list1 : arg10)\nvar v1 : Int = 30\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[11, 44], [10, 15], [20, 5], [12, 9]]\nvar x2 : Int = minProductTuple(list1 : arg20)\nvar v2 : Int = 100\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the minimum product from the pairs of tuples within a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/410", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the minimum value in a given heterogeneous list.\n *\n * >>> minVal([\"Python\", 3, 2, 4, 5, \"version\"])\n * 2\n * >>> minVal([\"Python\", 15, 20, 25])\n * 15\n * >>> minVal([\"Python\", 30, 20, 40, 50, \"version\"])\n * 20\n */\nfunc minVal(listval : [AnyHashable]) -> Int {\n", "entry_point": "minVal", "test": "\n\nvar arg00 : [AnyHashable] = [#\"Python\"#, 3, 2, 4, 5, #\"version\"#]\nvar x0 : Int = minVal(listval : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [#\"Python\"#, 15, 20, 25]\nvar x1 : Int = minVal(listval : arg10)\nvar v1 : Int = 15\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [#\"Python\"#, 30, 20, 40, 50, #\"version\"#]\nvar x2 : Int = minVal(listval : arg20)\nvar v2 : Int = 20\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the minimum value in a given heterogeneous list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/411", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given snake case string to camel case string by using regex.\n *\n * >>> snakeToCamel(\"android_tv\")\n * \"AndroidTv\"\n * >>> snakeToCamel(\"google_pixel\")\n * \"GooglePixel\"\n * >>> snakeToCamel(\"apple_watch\")\n * \"AppleWatch\"\n */\nfunc snakeToCamel(word : String) -> String {\n", "entry_point": "snakeToCamel", "test": "\n\nvar arg00 : String = #\"android_tv\"#\nvar x0 : String = snakeToCamel(word : arg00)\nvar v0 : String = #\"AndroidTv\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"google_pixel\"#\nvar x1 : String = snakeToCamel(word : arg10)\nvar v1 : String = #\"GooglePixel\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"apple_watch\"#\nvar x2 : String = snakeToCamel(word : arg20)\nvar v2 : String = #\"AppleWatch\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert the given snake case string to camel case string by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/412", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove odd numbers from a given list.\n *\n * >>> removeOdd([1, 2, 3])\n * [2]\n * >>> removeOdd([2, 4, 6])\n * [2, 4, 6]\n * >>> removeOdd([10, 20, 3])\n * [10, 20]\n */\nfunc removeOdd(l : [Int]) -> [Int] {\n", "entry_point": "removeOdd", "test": "\n\nvar arg00 : [Int] = [1, 2, 3]\nvar x0 : [Int] = removeOdd(l : arg00)\nvar v0 : [Int] = [2]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 4, 6]\nvar x1 : [Int] = removeOdd(l : arg10)\nvar v1 : [Int] = [2, 4, 6]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [10, 20, 3]\nvar x2 : [Int] = removeOdd(l : arg20)\nvar v2 : [Int] = [10, 20]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to remove odd numbers from a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/413", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the nth element from a given list of tuples.\n *\n * >>> extractNthElement([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 0)\n * [\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"]\n * >>> extractNthElement([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 2)\n * [99, 96, 94, 98]\n * >>> extractNthElement([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 1)\n * [98, 97, 91, 94]\n */\nfunc extractNthElement(list1 : [[AnyHashable]], n : Int) -> [AnyHashable] {\n", "entry_point": "extractNthElement", "test": "\n\nvar arg00 : [[AnyHashable]] = [[#\"Greyson Fulton\"#, 98, 99], [#\"Brady Kent\"#, 97, 96], [#\"Wyatt Knott\"#, 91, 94], [#\"Beau Turnbull\"#, 94, 98]]\nvar arg01 : Int = 0\nvar x0 : [AnyHashable] = extractNthElement(list1 : arg00, n : arg01)\nvar v0 : [AnyHashable] = [#\"Greyson Fulton\"#, #\"Brady Kent\"#, #\"Wyatt Knott\"#, #\"Beau Turnbull\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[#\"Greyson Fulton\"#, 98, 99], [#\"Brady Kent\"#, 97, 96], [#\"Wyatt Knott\"#, 91, 94], [#\"Beau Turnbull\"#, 94, 98]]\nvar arg11 : Int = 2\nvar x1 : [AnyHashable] = extractNthElement(list1 : arg10, n : arg11)\nvar v1 : [AnyHashable] = [99, 96, 94, 98]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[#\"Greyson Fulton\"#, 98, 99], [#\"Brady Kent\"#, 97, 96], [#\"Wyatt Knott\"#, 91, 94], [#\"Beau Turnbull\"#, 94, 98]]\nvar arg21 : Int = 1\nvar x2 : [AnyHashable] = extractNthElement(list1 : arg20, n : arg21)\nvar v2 : [AnyHashable] = [98, 97, 91, 94]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract the nth element from a given list of tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/414", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the value exists in a sequence or not.\n *\n * >>> overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9])\n * false\n * >>> overlapping([1, 2, 3], [4, 5, 6])\n * false\n * >>> overlapping([1, 4, 5], [1, 4, 5])\n * true\n */\nfunc overlapping(list1 : [Int], list2 : [Int]) -> Bool {\n", "entry_point": "overlapping", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5]\nvar arg01 : [Int] = [6, 7, 8, 9]\nvar x0 : Bool = overlapping(list1 : arg00, list2 : arg01)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3]\nvar arg11 : [Int] = [4, 5, 6]\nvar x1 : Bool = overlapping(list1 : arg10, list2 : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 4, 5]\nvar arg21 : [Int] = [1, 4, 5]\nvar x2 : Bool = overlapping(list1 : arg20, list2 : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the value exists in a sequence or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/415", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find a pair with highest product from a given array of integers.\n *\n * >>> maxProduct([1, 2, 3, 4, 7, 0, 8, 4])\n * [7, 8]\n * >>> maxProduct([0, -1, -2, -4, 5, 0, -6])\n * [-4, -6]\n * >>> maxProduct([1, 2, 3])\n * [2, 3]\n */\nfunc maxProduct(arr : [Int]) -> [Int] {\n", "entry_point": "maxProduct", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 7, 0, 8, 4]\nvar x0 : [Int] = maxProduct(arr : arg00)\nvar v0 : [Int] = [7, 8]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [0, -1, -2, -4, 5, 0, -6]\nvar x1 : [Int] = maxProduct(arr : arg10)\nvar v1 : [Int] = [-4, -6]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3]\nvar x2 : [Int] = maxProduct(arr : arg20)\nvar v2 : [Int] = [2, 3]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find a pair with highest product from a given array of integers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/416", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n *\n * >>> breaksum(12)\n * 13\n * >>> breaksum(24)\n * 27\n * >>> breaksum(23)\n * 23\n */\nfunc breaksum(n : Int) -> Int {\n", "entry_point": "breaksum", "test": "\n\nvar arg00 : Int = 12\nvar x0 : Int = breaksum(n : arg00)\nvar v0 : Int = 13\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 24\nvar x1 : Int = breaksum(n : arg10)\nvar v1 : Int = 27\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 23\nvar x2 : Int = breaksum(n : arg20)\nvar v2 : Int = 23\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/417", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find common first element in given list of tuple.\n *\n * >>> groupTuples([[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]])\n * [[\"x\", \"y\", \"z\"], [\"w\", \"t\"]]\n * >>> groupTuples([[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]])\n * [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]]\n * >>> groupTuples([[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]])\n * [[\"f\", \"g\", \"g\"], [\"h\", \"i\"]]\n */\nfunc groupTuples(input : [[String]]) -> [[String]] {\n", "entry_point": "groupTuples", "test": "\n\nvar arg00 : [[String]] = [[#\"x\"#, #\"y\"#], [#\"x\"#, #\"z\"#], [#\"w\"#, #\"t\"#]]\nvar x0 : [[String]] = groupTuples(input : arg00)\nvar v0 : [[String]] = [[#\"x\"#, #\"y\"#, #\"z\"#], [#\"w\"#, #\"t\"#]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[String]] = [[#\"a\"#, #\"b\"#], [#\"a\"#, #\"c\"#], [#\"d\"#, #\"e\"#]]\nvar x1 : [[String]] = groupTuples(input : arg10)\nvar v1 : [[String]] = [[#\"a\"#, #\"b\"#, #\"c\"#], [#\"d\"#, #\"e\"#]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[String]] = [[#\"f\"#, #\"g\"#], [#\"f\"#, #\"g\"#], [#\"h\"#, #\"i\"#]]\nvar x2 : [[String]] = groupTuples(input : arg20)\nvar v2 : [[String]] = [[#\"f\"#, #\"g\"#, #\"g\"#], [#\"h\"#, #\"i\"#]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find common first element in given list of tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/418", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sublist having maximum length.\n *\n * >>> findMax([[\"A\"], [\"A\", \"B\"], [\"A\", \"B\", \"C\"]])\n * [\"A\", \"B\", \"C\"]\n * >>> findMax([[1], [1, 2], [1, 2, 3]])\n * [1, 2, 3]\n * >>> findMax([[1, 1], [1, 2, 3], [1, 5, 6, 1]])\n * [1, 5, 6, 1]\n */\nfunc findMax(lst : [[AnyHashable]]) -> [AnyHashable] {\n", "entry_point": "findMax", "test": "\n\nvar arg00 : [[AnyHashable]] = [[#\"A\"#], [#\"A\"#, #\"B\"#], [#\"A\"#, #\"B\"#, #\"C\"#]]\nvar x0 : [AnyHashable] = findMax(lst : arg00)\nvar v0 : [AnyHashable] = [#\"A\"#, #\"B\"#, #\"C\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[1], [1, 2], [1, 2, 3]]\nvar x1 : [AnyHashable] = findMax(lst : arg10)\nvar v1 : [AnyHashable] = [1, 2, 3]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[1, 1], [1, 2, 3], [1, 5, 6, 1]]\nvar x2 : [AnyHashable] = findMax(lst : arg20)\nvar v2 : [AnyHashable] = [1, 5, 6, 1]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sublist having maximum length.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/419", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n *\n * >>> roundAndSum([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5])\n * 243\n * >>> roundAndSum([5, 2, 9, 24.3, 29])\n * 345\n * >>> roundAndSum([25.0, 56.7, 89.2])\n * 513\n */\nfunc roundAndSum(list1 : [Double]) -> Int {\n", "entry_point": "roundAndSum", "test": "\n\nvar arg00 : [Double] = [22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]\nvar x0 : Int = roundAndSum(list1 : arg00)\nvar v0 : Int = 243\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Double] = [5, 2, 9, 24.3, 29]\nvar x1 : Int = roundAndSum(list1 : arg10)\nvar v1 : Int = 345\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Double] = [25.0, 56.7, 89.2]\nvar x2 : Int = roundAndSum(list1 : arg20)\nvar v2 : Int = 513\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/420", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the cube sum of first n even natural numbers.\n *\n * >>> cubeSum(2)\n * 72\n * >>> cubeSum(3)\n * 288\n * >>> cubeSum(4)\n * 800\n */\nfunc cubeSum(n : Int) -> Int {\n", "entry_point": "cubeSum", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = cubeSum(n : arg00)\nvar v0 : Int = 72\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar x1 : Int = cubeSum(n : arg10)\nvar v1 : Int = 288\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar x2 : Int = cubeSum(n : arg20)\nvar v2 : Int = 800\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the cube sum of first n even natural numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/421", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to concatenate each element of tuple by the delimiter.\n *\n * >>> concatenateTuple([\"ID\", \"is\", 4, \"UTS\"])\n * \"ID-is-4-UTS\"\n * >>> concatenateTuple([\"QWE\", \"is\", 4, \"RTY\"])\n * \"QWE-is-4-RTY\"\n * >>> concatenateTuple([\"ZEN\", \"is\", 4, \"OP\"])\n * \"ZEN-is-4-OP\"\n */\nfunc concatenateTuple(testTup : [AnyHashable]) -> String {\n", "entry_point": "concatenateTuple", "test": "\n\nvar arg00 : [AnyHashable] = [#\"ID\"#, #\"is\"#, 4, #\"UTS\"#]\nvar x0 : String = concatenateTuple(testTup : arg00)\nvar v0 : String = #\"ID-is-4-UTS\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [#\"QWE\"#, #\"is\"#, 4, #\"RTY\"#]\nvar x1 : String = concatenateTuple(testTup : arg10)\nvar v1 : String = #\"QWE-is-4-RTY\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [#\"ZEN\"#, #\"is\"#, 4, #\"OP\"#]\nvar x2 : String = concatenateTuple(testTup : arg20)\nvar v2 : String = #\"ZEN-is-4-OP\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to concatenate each element of tuple by the delimiter.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/422", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the average of cubes of first n natural numbers.\n *\n * >>> findAverageOfCube(2)\n * 4.5\n * >>> findAverageOfCube(3)\n * 12\n * >>> findAverageOfCube(1)\n * 1\n */\nfunc findAverageOfCube(n : Int) -> Double {\n", "entry_point": "findAverageOfCube", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Double = findAverageOfCube(n : arg00)\nvar v0 : Double = 4.5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar x1 : Double = findAverageOfCube(n : arg10)\nvar v1 : Double = 12\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar x2 : Double = findAverageOfCube(n : arg20)\nvar v2 : Double = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the average of cubes of first n natural numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/423", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to solve gold mine problem.\n *\n * >>> getMaxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]], 4, 4)\n * 16\n * >>> getMaxgold([[10, 20], [30, 40]], 2, 2)\n * 70\n * >>> getMaxgold([[4, 9], [3, 7]], 2, 2)\n * 13\n */\nfunc getMaxgold(gold : [[Int]], m : Int, n : Int) -> Int {\n", "entry_point": "getMaxgold", "test": "\n\nvar arg00 : [[Int]] = [[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]]\nvar arg01 : Int = 4\nvar arg02 : Int = 4\nvar x0 : Int = getMaxgold(gold : arg00, m : arg01, n : arg02)\nvar v0 : Int = 16\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[10, 20], [30, 40]]\nvar arg11 : Int = 2\nvar arg12 : Int = 2\nvar x1 : Int = getMaxgold(gold : arg10, m : arg11, n : arg12)\nvar v1 : Int = 70\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[4, 9], [3, 7]]\nvar arg21 : Int = 2\nvar arg22 : Int = 2\nvar x2 : Int = getMaxgold(gold : arg20, m : arg21, n : arg22)\nvar v2 : Int = 13\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to solve gold mine problem.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/424", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract only the rear index element of each string in the given tuple.\n *\n * >>> extractRear([\"Mers\", \"for\", \"Vers\"])\n * [\"s\", \"r\", \"s\"]\n * >>> extractRear([\"Avenge\", \"for\", \"People\"])\n * [\"e\", \"r\", \"e\"]\n * >>> extractRear([\"Gotta\", \"get\", \"go\"])\n * [\"a\", \"t\", \"o\"]\n */\nfunc extractRear(testTuple : [String]) -> [String] {\n", "entry_point": "extractRear", "test": "\n\nvar arg00 : [String] = [#\"Mers\"#, #\"for\"#, #\"Vers\"#]\nvar x0 : [String] = extractRear(testTuple : arg00)\nvar v0 : [String] = [#\"s\"#, #\"r\"#, #\"s\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"Avenge\"#, #\"for\"#, #\"People\"#]\nvar x1 : [String] = extractRear(testTuple : arg10)\nvar v1 : [String] = [#\"e\"#, #\"r\"#, #\"e\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"Gotta\"#, #\"get\"#, #\"go\"#]\nvar x2 : [String] = extractRear(testTuple : arg20)\nvar v2 : [String] = [#\"a\"#, #\"t\"#, #\"o\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract only the rear index element of each string in the given tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/425", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the number of sublists containing a particular element.\n *\n * >>> countElementInList([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)\n * 3\n * >>> countElementInList([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\")\n * 3\n * >>> countElementInList([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\")\n * 1\n */\nfunc countElementInList(list1 : [[AnyHashable]], x : AnyHashable) -> Int {\n", "entry_point": "countElementInList", "test": "\n\nvar arg00 : [[AnyHashable]] = [[1, 3], [5, 7], [1, 11], [1, 15, 7]]\nvar arg01 : AnyHashable = 1\nvar x0 : Int = countElementInList(list1 : arg00, x : arg01)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[#\"A\"#, #\"B\"#], [#\"A\"#, #\"C\"#], [#\"A\"#, #\"D\"#, #\"E\"#], [#\"B\"#, #\"C\"#, #\"D\"#]]\nvar arg11 : AnyHashable = #\"A\"#\nvar x1 : Int = countElementInList(list1 : arg10, x : arg11)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[#\"A\"#, #\"B\"#], [#\"A\"#, #\"C\"#], [#\"A\"#, #\"D\"#, #\"E\"#], [#\"B\"#, #\"C\"#, #\"D\"#]]\nvar arg21 : AnyHashable = #\"E\"#\nvar x2 : Int = countElementInList(list1 : arg20, x : arg21)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count the number of sublists containing a particular element.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/426", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to filter odd numbers using lambda function.\n *\n * >>> filterOddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [1, 3, 5, 7, 9]\n * >>> filterOddnumbers([10, 20, 45, 67, 84, 93])\n * [45, 67, 93]\n * >>> filterOddnumbers([5, 7, 9, 8, 6, 4, 3])\n * [5, 7, 9, 3]\n */\nfunc filterOddnumbers(nums : [Int]) -> [Int] {\n", "entry_point": "filterOddnumbers", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar x0 : [Int] = filterOddnumbers(nums : arg00)\nvar v0 : [Int] = [1, 3, 5, 7, 9]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [10, 20, 45, 67, 84, 93]\nvar x1 : [Int] = filterOddnumbers(nums : arg10)\nvar v1 : [Int] = [45, 67, 93]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [5, 7, 9, 8, 6, 4, 3]\nvar x2 : [Int] = filterOddnumbers(nums : arg20)\nvar v2 : [Int] = [5, 7, 9, 3]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to filter odd numbers using lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/427", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n *\n * >>> changeDateFormat(\"2026-01-02\")\n * \"02-01-2026\"\n * >>> changeDateFormat(\"2020-11-13\")\n * \"13-11-2020\"\n * >>> changeDateFormat(\"2021-04-26\")\n * \"26-04-2021\"\n */\nfunc changeDateFormat(dt : String) -> String {\n", "entry_point": "changeDateFormat", "test": "\n\nvar arg00 : String = #\"2026-01-02\"#\nvar x0 : String = changeDateFormat(dt : arg00)\nvar v0 : String = #\"02-01-2026\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"2020-11-13\"#\nvar x1 : String = changeDateFormat(dt : arg10)\nvar v1 : String = #\"13-11-2020\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"2021-04-26\"#\nvar x2 : String = changeDateFormat(dt : arg20)\nvar v2 : String = #\"26-04-2021\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/428", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the given array by using shell sort.\n *\n * >>> shellSort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])\n * [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n * >>> shellSort([24, 22, 39, 34, 87, 73, 68])\n * [22, 24, 34, 39, 68, 73, 87]\n * >>> shellSort([32, 30, 16, 96, 82, 83, 74])\n * [16, 30, 32, 74, 82, 83, 96]\n */\nfunc shellSort(myList : [Int]) -> [Int] {\n", "entry_point": "shellSort", "test": "\n\nvar arg00 : [Int] = [12, 23, 4, 5, 3, 2, 12, 81, 56, 95]\nvar x0 : [Int] = shellSort(myList : arg00)\nvar v0 : [Int] = [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [24, 22, 39, 34, 87, 73, 68]\nvar x1 : [Int] = shellSort(myList : arg10)\nvar v1 : [Int] = [22, 24, 34, 39, 68, 73, 87]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [32, 30, 16, 96, 82, 83, 74]\nvar x2 : [Int] = shellSort(myList : arg20)\nvar v2 : [Int] = [16, 30, 32, 74, 82, 83, 96]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort the given array by using shell sort.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/429", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the elementwise and tuples from the given two tuples.\n *\n * >>> andTuples([10, 4, 6, 9], [5, 2, 3, 3])\n * [0, 0, 2, 1]\n * >>> andTuples([1, 2, 3, 4], [5, 6, 7, 8])\n * [1, 2, 3, 0]\n * >>> andTuples([8, 9, 11, 12], [7, 13, 14, 17])\n * [0, 9, 10, 0]\n */\nfunc andTuples(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n", "entry_point": "andTuples", "test": "\n\nvar arg00 : [Int] = [10, 4, 6, 9]\nvar arg01 : [Int] = [5, 2, 3, 3]\nvar x0 : [Int] = andTuples(testTup1 : arg00, testTup2 : arg01)\nvar v0 : [Int] = [0, 0, 2, 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4]\nvar arg11 : [Int] = [5, 6, 7, 8]\nvar x1 : [Int] = andTuples(testTup1 : arg10, testTup2 : arg11)\nvar v1 : [Int] = [1, 2, 3, 0]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [8, 9, 11, 12]\nvar arg21 : [Int] = [7, 13, 14, 17]\nvar x2 : [Int] = andTuples(testTup1 : arg20, testTup2 : arg21)\nvar v2 : [Int] = [0, 9, 10, 0]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract the elementwise and tuples from the given two tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/430", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the directrix of a parabola.\n *\n * >>> parabolaDirectrix(5, 3, 2)\n * -198\n * >>> parabolaDirectrix(9, 8, 4)\n * -2336\n * >>> parabolaDirectrix(2, 4, 6)\n * -130\n */\nfunc parabolaDirectrix(a : Int, b : Int, c : Int) -> Int {\n", "entry_point": "parabolaDirectrix", "test": "\n\nvar arg00 : Int = 5\nvar arg01 : Int = 3\nvar arg02 : Int = 2\nvar x0 : Int = parabolaDirectrix(a : arg00, b : arg01, c : arg02)\nvar v0 : Int = -198\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 9\nvar arg11 : Int = 8\nvar arg12 : Int = 4\nvar x1 : Int = parabolaDirectrix(a : arg10, b : arg11, c : arg12)\nvar v1 : Int = -2336\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar arg21 : Int = 4\nvar arg22 : Int = 6\nvar x2 : Int = parabolaDirectrix(a : arg20, b : arg21, c : arg22)\nvar v2 : Int = -130\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the directrix of a parabola.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/431", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that takes two lists and returns true if they have at least one common element.\n *\n * >>> commonElement([1, 2, 3, 4, 5], [5, 6, 7, 8, 9])\n * true\n * >>> commonElement([1, 2, 3, 4, 5], [6, 7, 8, 9])\n * \"none\"\n * >>> commonElement([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"])\n * true\n */\nfunc commonElement(list1 : [AnyHashable], list2 : [AnyHashable]) -> AnyHashable {\n", "entry_point": "commonElement", "test": "\n\nvar arg00 : [AnyHashable] = [1, 2, 3, 4, 5]\nvar arg01 : [AnyHashable] = [5, 6, 7, 8, 9]\nvar x0 : AnyHashable = commonElement(list1 : arg00, list2 : arg01)\nvar v0 : AnyHashable = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [1, 2, 3, 4, 5]\nvar arg11 : [AnyHashable] = [6, 7, 8, 9]\nvar x1 : AnyHashable = commonElement(list1 : arg10, list2 : arg11)\nvar v1 : AnyHashable = \"none\"\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [#\"a\"#, #\"b\"#, #\"c\"#]\nvar arg21 : [AnyHashable] = [#\"d\"#, #\"b\"#, #\"e\"#]\nvar x2 : AnyHashable = commonElement(list1 : arg20, list2 : arg21)\nvar v2 : AnyHashable = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function that takes two lists and returns true if they have at least one common element.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/432", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the median of a trapezium.\n *\n * >>> medianTrapezium(15, 25, 35)\n * 20\n * >>> medianTrapezium(10, 20, 30)\n * 15\n * >>> medianTrapezium(6, 9, 4)\n * 7.5\n */\nfunc medianTrapezium(base1 : Int, base2 : Int, height : Int) -> Double {\n", "entry_point": "medianTrapezium", "test": "\n\nvar arg00 : Int = 15\nvar arg01 : Int = 25\nvar arg02 : Int = 35\nvar x0 : Double = medianTrapezium(base1 : arg00, base2 : arg01, height : arg02)\nvar v0 : Double = 20\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar arg11 : Int = 20\nvar arg12 : Int = 30\nvar x1 : Double = medianTrapezium(base1 : arg10, base2 : arg11, height : arg12)\nvar v1 : Double = 15\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 6\nvar arg21 : Int = 9\nvar arg22 : Int = 4\nvar x2 : Double = medianTrapezium(base1 : arg20, base2 : arg21, height : arg22)\nvar v2 : Double = 7.5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the median of a trapezium.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/433", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the entered number is greater than the elements of the given array.\n *\n * >>> checkGreater([1, 2, 3, 4, 5], 4)\n * \"No, entered number is less than those in the array\"\n * >>> checkGreater([2, 3, 4, 5, 6], 8)\n * \"Yes, the entered number is greater than those in the array\"\n * >>> checkGreater([9, 7, 4, 8, 6, 1], 11)\n * \"Yes, the entered number is greater than those in the array\"\n */\nfunc checkGreater(arr : [Int], number : Int) -> String {\n", "entry_point": "checkGreater", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5]\nvar arg01 : Int = 4\nvar x0 : String = checkGreater(arr : arg00, number : arg01)\nvar v0 : String = #\"No, entered number is less than those in the array\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 3, 4, 5, 6]\nvar arg11 : Int = 8\nvar x1 : String = checkGreater(arr : arg10, number : arg11)\nvar v1 : String = #\"Yes, the entered number is greater than those in the array\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [9, 7, 4, 8, 6, 1]\nvar arg21 : Int = 11\nvar x2 : String = checkGreater(arr : arg20, number : arg21)\nvar v2 : String = #\"Yes, the entered number is greater than those in the array\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether the entered number is greater than the elements of the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/434", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by one or more b's.\n *\n * >>> textMatchOne(\"ac\")\n * \"Not matched!\"\n * >>> textMatchOne(\"dc\")\n * \"Not matched!\"\n * >>> textMatchOne(\"abba\")\n * \"Found a match!\"\n */\nfunc textMatchOne(text : String) -> String {\n", "entry_point": "textMatchOne", "test": "\n\nvar arg00 : String = #\"ac\"#\nvar x0 : String = textMatchOne(text : arg00)\nvar v0 : String = #\"Not matched!\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"dc\"#\nvar x1 : String = textMatchOne(text : arg10)\nvar v1 : String = #\"Not matched!\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"abba\"#\nvar x2 : String = textMatchOne(text : arg20)\nvar v2 : String = #\"Found a match!\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function that matches a string that has an a followed by one or more b's.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/435", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the last digit of a given number.\n *\n * >>> lastDigit(123)\n * 3\n * >>> lastDigit(25)\n * 5\n * >>> lastDigit(30)\n * 0\n */\nfunc lastDigit(n : Int) -> Int {\n", "entry_point": "lastDigit", "test": "\n\nvar arg00 : Int = 123\nvar x0 : Int = lastDigit(n : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 25\nvar x1 : Int = lastDigit(n : arg10)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 30\nvar x2 : Int = lastDigit(n : arg20)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the last digit of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/436", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to print negative numbers in a list.\n *\n * >>> negNos([-1, 4, 5, -6])\n * [-1,-6]\n * >>> negNos([-1, -2, 3, 4])\n * [-1,-2]\n * >>> negNos([-7, -6, 8, 9])\n * [-7,-6]\n */\nfunc negNos(list1 : [Int]) -> [Int] {\n", "entry_point": "negNos", "test": "\n\nvar arg00 : [Int] = [-1, 4, 5, -6]\nvar x0 : [Int] = negNos(list1 : arg00)\nvar v0 : [Int] = [-1, -6]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [-1, -2, 3, 4]\nvar x1 : [Int] = negNos(list1 : arg10)\nvar v1 : [Int] = [-1, -2]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [-7, -6, 8, 9]\nvar x2 : [Int] = negNos(list1 : arg20)\nvar v2 : [Int] = [-7, -6]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to print negative numbers in a list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/437", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove odd characters in a string.\n *\n * >>> removeOdd(\"python\")\n * \"yhn\"\n * >>> removeOdd(\"program\")\n * \"rga\"\n * >>> removeOdd(\"language\")\n * \"agae\"\n */\nfunc removeOdd(str1 : String) -> String {\n", "entry_point": "removeOdd", "test": "\n\nvar arg00 : String = #\"python\"#\nvar x0 : String = removeOdd(str1 : arg00)\nvar v0 : String = #\"yhn\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"program\"#\nvar x1 : String = removeOdd(str1 : arg10)\nvar v1 : String = #\"rga\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"language\"#\nvar x2 : String = removeOdd(str1 : arg20)\nvar v2 : String = #\"agae\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove odd characters in a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/438", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count bidirectional tuple pairs.\n *\n * >>> countBidirectional([[5, 6], [1, 2], [6, 5], [9, 1], [6, 5], [2, 1]])\n * \"3\"\n * >>> countBidirectional([[5, 6], [1, 3], [6, 5], [9, 1], [6, 5], [2, 1]])\n * \"2\"\n * >>> countBidirectional([[5, 6], [1, 2], [6, 5], [9, 2], [6, 5], [2, 1]])\n * \"4\"\n */\nfunc countBidirectional(testList : [[Int]]) -> String {\n", "entry_point": "countBidirectional", "test": "\n\nvar arg00 : [[Int]] = [[5, 6], [1, 2], [6, 5], [9, 1], [6, 5], [2, 1]]\nvar x0 : String = countBidirectional(testList : arg00)\nvar v0 : String = #\"3\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[5, 6], [1, 3], [6, 5], [9, 1], [6, 5], [2, 1]]\nvar x1 : String = countBidirectional(testList : arg10)\nvar v1 : String = #\"2\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[5, 6], [1, 2], [6, 5], [9, 2], [6, 5], [2, 1]]\nvar x2 : String = countBidirectional(testList : arg20)\nvar v2 : String = #\"4\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count bidirectional tuple pairs.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/439", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a list of multiple integers into a single integer.\n *\n * >>> multipleToSingle([11, 33, 50])\n * 113350\n * >>> multipleToSingle([-1, 2, 3, 4, 5, 6])\n * -123456\n * >>> multipleToSingle([10, 15, 20, 25])\n * 10152025\n */\nfunc multipleToSingle(l : [Int]) -> Int {\n", "entry_point": "multipleToSingle", "test": "\n\nvar arg00 : [Int] = [11, 33, 50]\nvar x0 : Int = multipleToSingle(l : arg00)\nvar v0 : Int = 113350\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [-1, 2, 3, 4, 5, 6]\nvar x1 : Int = multipleToSingle(l : arg10)\nvar v1 : Int = -123456\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [10, 15, 20, 25]\nvar x2 : Int = multipleToSingle(l : arg20)\nvar v2 : Int = 10152025\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert a list of multiple integers into a single integer.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/440", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all adverbs and their positions in a given sentence.\n *\n * >>> findAdverbPosition(\"clearly!! we can see the sky\")\n * [0, 7, \"clearly\"]\n * >>> findAdverbPosition(\"seriously!! there are many roses\")\n * [0, 9, \"seriously\"]\n * >>> findAdverbPosition(\"unfortunately!! sita is going to home\")\n * [0, 13, \"unfortunately\"]\n */\nfunc findAdverbPosition(text : String) -> [AnyHashable] {\n", "entry_point": "findAdverbPosition", "test": "\n\nvar arg00 : String = #\"clearly!! we can see the sky\"#\nvar x0 : [AnyHashable] = findAdverbPosition(text : arg00)\nvar v0 : [AnyHashable] = [0, 7, #\"clearly\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"seriously!! there are many roses\"#\nvar x1 : [AnyHashable] = findAdverbPosition(text : arg10)\nvar v1 : [AnyHashable] = [0, 9, #\"seriously\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"unfortunately!! sita is going to home\"#\nvar x2 : [AnyHashable] = findAdverbPosition(text : arg20)\nvar v2 : [AnyHashable] = [0, 13, #\"unfortunately\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find all adverbs and their positions in a given sentence.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/441", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the surface area of a cube.\n *\n * >>> surfaceareaCube(5)\n * 150\n * >>> surfaceareaCube(3)\n * 54\n * >>> surfaceareaCube(10)\n * 600\n */\nfunc surfaceareaCube(l : Int) -> Int {\n", "entry_point": "surfaceareaCube", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Int = surfaceareaCube(l : arg00)\nvar v0 : Int = 150\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar x1 : Int = surfaceareaCube(l : arg10)\nvar v1 : Int = 54\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 10\nvar x2 : Int = surfaceareaCube(l : arg20)\nvar v2 : Int = 600\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the surface area of a cube.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/442", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the ration of positive numbers in an array of integers.\n *\n * >>> positiveCount([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n * 0.54\n * >>> positiveCount([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n * 0.69\n * >>> positiveCount([2, 4, -6, -9, 11, -12, 14, -5, 17])\n * 0.56\n */\nfunc positiveCount(nums : [Int]) -> Double {\n", "entry_point": "positiveCount", "test": "\n\nvar arg00 : [Int] = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]\nvar x0 : Double = positiveCount(nums : arg00)\nvar v0 : Double = 0.54\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]\nvar x1 : Double = positiveCount(nums : arg10)\nvar v1 : Double = 0.69\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 4, -6, -9, 11, -12, 14, -5, 17]\nvar x2 : Double = positiveCount(nums : arg20)\nvar v2 : Double = 0.56\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the ration of positive numbers in an array of integers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/443", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the largest negative number from the given list.\n *\n * >>> largestNeg([1, 2, 3, -4, -6])\n * -6\n * >>> largestNeg([1, 2, 3, -8, -9])\n * -9\n * >>> largestNeg([1, 2, 3, 4, -1])\n * -1\n */\nfunc largestNeg(list1 : [Int]) -> Int {\n", "entry_point": "largestNeg", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, -4, -6]\nvar x0 : Int = largestNeg(list1 : arg00)\nvar v0 : Int = -6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, -8, -9]\nvar x1 : Int = largestNeg(list1 : arg10)\nvar v1 : Int = -9\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4, -1]\nvar x2 : Int = largestNeg(list1 : arg20)\nvar v2 : Int = -1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the largest negative number from the given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/444", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to trim each tuple by k in the given tuple list.\n *\n * >>> trimTuple([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2)\n * \"[(2,), (9,), (2,), (2,)]\"\n * >>> trimTuple([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1)\n * \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\"\n * >>> trimTuple([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1)\n * \"[(8, 4), (8, 12), (1, 7), (6, 9)]\"\n */\nfunc trimTuple(testList : [[Int]], k : Int) -> String {\n", "entry_point": "trimTuple", "test": "\n\nvar arg00 : [[Int]] = [[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]]\nvar arg01 : Int = 2\nvar x0 : String = trimTuple(testList : arg00, k : arg01)\nvar v0 : String = #\"[(2,), (9,), (2,), (2,)]\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]]\nvar arg11 : Int = 1\nvar x1 : String = trimTuple(testList : arg10, k : arg11)\nvar v1 : String = #\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]]\nvar arg21 : Int = 1\nvar x2 : String = trimTuple(testList : arg20, k : arg21)\nvar v2 : String = #\"[(8, 4), (8, 12), (1, 7), (6, 9)]\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to trim each tuple by k in the given tuple list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/445", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n *\n * >>> indexMultiplication([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n * [[6, 21], [12, 45], [2, 9], [7, 30]]\n * >>> indexMultiplication([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])\n * [[14, 32], [20, 60], [6, 20], [16, 44]]\n * >>> indexMultiplication([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])\n * [[24, 45], [30, 77], [12, 33], [27, 60]]\n */\nfunc indexMultiplication(testTup1 : [[Int]], testTup2 : [[Int]]) -> [[Int]] {\n", "entry_point": "indexMultiplication", "test": "\n\nvar arg00 : [[Int]] = [[1, 3], [4, 5], [2, 9], [1, 10]]\nvar arg01 : [[Int]] = [[6, 7], [3, 9], [1, 1], [7, 3]]\nvar x0 : [[Int]] = indexMultiplication(testTup1 : arg00, testTup2 : arg01)\nvar v0 : [[Int]] = [[6, 21], [12, 45], [2, 9], [7, 30]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[2, 4], [5, 6], [3, 10], [2, 11]]\nvar arg11 : [[Int]] = [[7, 8], [4, 10], [2, 2], [8, 4]]\nvar x1 : [[Int]] = indexMultiplication(testTup1 : arg10, testTup2 : arg11)\nvar v1 : [[Int]] = [[14, 32], [20, 60], [6, 20], [16, 44]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[3, 5], [6, 7], [4, 11], [3, 12]]\nvar arg21 : [[Int]] = [[8, 9], [5, 11], [3, 3], [9, 5]]\nvar x2 : [[Int]] = indexMultiplication(testTup1 : arg20, testTup2 : arg21)\nvar v2 : [[Int]] = [[24, 45], [30, 77], [12, 33], [27, 60]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/446", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the occurence of all elements of list in a tuple.\n *\n * >>> countOccurrence([\"a\", \"a\", \"c\", \"b\", \"d\"], [\"a\", \"b\"])\n * 3\n * >>> countOccurrence([1, 2, 3, 1, 4, 6, 7, 1, 4], [1, 4, 7])\n * 6\n * >>> countOccurrence([1, 2, 3, 4, 5, 6], [1, 2])\n * 2\n */\nfunc countOccurrence(tup : [AnyHashable], lst : [AnyHashable]) -> Int {\n", "entry_point": "countOccurrence", "test": "\n\nvar arg00 : [AnyHashable] = [#\"a\"#, #\"a\"#, #\"c\"#, #\"b\"#, #\"d\"#]\nvar arg01 : [AnyHashable] = [#\"a\"#, #\"b\"#]\nvar x0 : Int = countOccurrence(tup : arg00, lst : arg01)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [1, 2, 3, 1, 4, 6, 7, 1, 4]\nvar arg11 : [AnyHashable] = [1, 4, 7]\nvar x1 : Int = countOccurrence(tup : arg10, lst : arg11)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [1, 2, 3, 4, 5, 6]\nvar arg21 : [AnyHashable] = [1, 2]\nvar x2 : Int = countOccurrence(tup : arg20, lst : arg21)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the occurence of all elements of list in a tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/447", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find cubes of individual elements in a list using lambda function.\n *\n * >>> cubeNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n * >>> cubeNums([10, 20, 30])\n * [1000, 8000, 27000]\n * >>> cubeNums([12, 15])\n * [1728, 3375]\n */\nfunc cubeNums(nums : [Int]) -> [Int] {\n", "entry_point": "cubeNums", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar x0 : [Int] = cubeNums(nums : arg00)\nvar v0 : [Int] = [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [10, 20, 30]\nvar x1 : [Int] = cubeNums(nums : arg10)\nvar v1 : [Int] = [1000, 8000, 27000]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [12, 15]\nvar x2 : [Int] = cubeNums(nums : arg20)\nvar v2 : [Int] = [1728, 3375]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find cubes of individual elements in a list using lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/448", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of perrin numbers.\n *\n * >>> calSum(9)\n * 49\n * >>> calSum(10)\n * 66\n * >>> calSum(11)\n * 88\n */\nfunc calSum(n : Int) -> Int {\n", "entry_point": "calSum", "test": "\n\nvar arg00 : Int = 9\nvar x0 : Int = calSum(n : arg00)\nvar v0 : Int = 49\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar x1 : Int = calSum(n : arg10)\nvar v1 : Int = 66\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 11\nvar x2 : Int = calSum(n : arg20)\nvar v2 : Int = 88\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate the sum of perrin numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/449", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the triangle is valid or not if 3 points are given.\n *\n * >>> checkTriangle(1, 5, 2, 5, 4, 6)\n * \"Yes\"\n * >>> checkTriangle(1, 1, 1, 4, 1, 5)\n * \"No\"\n * >>> checkTriangle(1, 1, 1, 1, 1, 1)\n * \"No\"\n */\nfunc checkTriangle(x1 : Int, y1 : Int, x2 : Int, y2 : Int, x3 : Int, y3 : Int) -> String {\n", "entry_point": "checkTriangle", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = 5\nvar arg02 : Int = 2\nvar arg03 : Int = 5\nvar arg04 : Int = 4\nvar arg05 : Int = 6\nvar x0 : String = checkTriangle(x1 : arg00, y1 : arg01, x2 : arg02, y2 : arg03, x3 : arg04, y3 : arg05)\nvar v0 : String = #\"Yes\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar arg11 : Int = 1\nvar arg12 : Int = 1\nvar arg13 : Int = 4\nvar arg14 : Int = 1\nvar arg15 : Int = 5\nvar x1 : String = checkTriangle(x1 : arg10, y1 : arg11, x2 : arg12, y2 : arg13, x3 : arg14, y3 : arg15)\nvar v1 : String = #\"No\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = 1\nvar arg22 : Int = 1\nvar arg23 : Int = 1\nvar arg24 : Int = 1\nvar arg25 : Int = 1\nvar x2 : String = checkTriangle(x1 : arg20, y1 : arg21, x2 : arg22, y2 : arg23, x3 : arg24, y3 : arg25)\nvar v2 : String = #\"No\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the triangle is valid or not if 3 points are given.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/450", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract specified size of strings from a give list of string values.\n *\n * >>> extractString([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8)\n * [\"practice\", \"solution\"]\n * >>> extractString([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6)\n * [\"Python\"]\n * >>> extractString([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9)\n * [\"exercises\"]\n */\nfunc extractString(str : [String], l : Int) -> [String] {\n", "entry_point": "extractString", "test": "\n\nvar arg00 : [String] = [#\"Python\"#, #\"list\"#, #\"exercises\"#, #\"practice\"#, #\"solution\"#]\nvar arg01 : Int = 8\nvar x0 : [String] = extractString(str : arg00, l : arg01)\nvar v0 : [String] = [#\"practice\"#, #\"solution\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"Python\"#, #\"list\"#, #\"exercises\"#, #\"practice\"#, #\"solution\"#]\nvar arg11 : Int = 6\nvar x1 : [String] = extractString(str : arg10, l : arg11)\nvar v1 : [String] = [#\"Python\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"Python\"#, #\"list\"#, #\"exercises\"#, #\"practice\"#, #\"solution\"#]\nvar arg21 : Int = 9\nvar x2 : [String] = extractString(str : arg20, l : arg21)\nvar v2 : [String] = [#\"exercises\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract specified size of strings from a give list of string values.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/451", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all whitespaces from the given string using regex.\n *\n * >>> removeWhitespaces(\" Google    Flutter \")\n * \"GoogleFlutter\"\n * >>> removeWhitespaces(\" Google    Dart \")\n * \"GoogleDart\"\n * >>> removeWhitespaces(\" iOS    Swift \")\n * \"iOSSwift\"\n */\nfunc removeWhitespaces(text1 : String) -> String {\n", "entry_point": "removeWhitespaces", "test": "\n\nvar arg00 : String = #\" Google    Flutter \"#\nvar x0 : String = removeWhitespaces(text1 : arg00)\nvar v0 : String = #\"GoogleFlutter\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\" Google    Dart \"#\nvar x1 : String = removeWhitespaces(text1 : arg10)\nvar v1 : String = #\"GoogleDart\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\" iOS    Swift \"#\nvar x2 : String = removeWhitespaces(text1 : arg20)\nvar v2 : String = #\"iOSSwift\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove all whitespaces from the given string using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/452", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that gives loss amount if the given amount has loss else return none.\n *\n * >>> lossAmount(1500, 1200)\n * \"none\"\n * >>> lossAmount(100, 200)\n * 100\n * >>> lossAmount(2000, 5000)\n * 3000\n */\nfunc lossAmount(actualCost : Int, saleAmount : Int) -> AnyHashable {\n", "entry_point": "lossAmount", "test": "\n\nvar arg00 : Int = 1500\nvar arg01 : Int = 1200\nvar x0 : AnyHashable = lossAmount(actualCost : arg00, saleAmount : arg01)\nvar v0 : AnyHashable = \"none\"\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 100\nvar arg11 : Int = 200\nvar x1 : AnyHashable = lossAmount(actualCost : arg10, saleAmount : arg11)\nvar v1 : AnyHashable = 100\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2000\nvar arg21 : Int = 5000\nvar x2 : AnyHashable = lossAmount(actualCost : arg20, saleAmount : arg21)\nvar v2 : AnyHashable = 3000\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function that gives loss amount if the given amount has loss else return none.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/453", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of even factors of a number.\n *\n * >>> sumoffactors(18)\n * 26\n * >>> sumoffactors(30)\n * 48\n * >>> sumoffactors(6)\n * 8\n */\nfunc sumoffactors(n : Int) -> Int {\n", "entry_point": "sumoffactors", "test": "\n\nvar arg00 : Int = 18\nvar x0 : Int = sumoffactors(n : arg00)\nvar v0 : Int = 26\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 30\nvar x1 : Int = sumoffactors(n : arg10)\nvar v1 : Int = 48\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 6\nvar x2 : Int = sumoffactors(n : arg20)\nvar v2 : Int = 8\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of even factors of a number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/454", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a word containing 'z'.\n *\n * >>> textMatchWordz(\"pythonz.\")\n * \"Found a match!\"\n * >>> textMatchWordz(\"xyz.\")\n * \"Found a match!\"\n * >>> textMatchWordz(\"  lang  .\")\n * \"Not matched!\"\n */\nfunc textMatchWordz(text : String) -> String {\n", "entry_point": "textMatchWordz", "test": "\n\nvar arg00 : String = #\"pythonz.\"#\nvar x0 : String = textMatchWordz(text : arg00)\nvar v0 : String = #\"Found a match!\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"xyz.\"#\nvar x1 : String = textMatchWordz(text : arg10)\nvar v1 : String = #\"Found a match!\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"  lang  .\"#\nvar x2 : String = textMatchWordz(text : arg20)\nvar v2 : String = #\"Not matched!\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function that matches a word containing 'z'.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/455", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month number contains 31 days or not.\n *\n * >>> checkMonthnumbNumber(5)\n * true\n * >>> checkMonthnumbNumber(2)\n * false\n * >>> checkMonthnumbNumber(6)\n * false\n */\nfunc checkMonthnumbNumber(monthnum2 : Int) -> Bool {\n", "entry_point": "checkMonthnumbNumber", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Bool = checkMonthnumbNumber(monthnum2 : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar x1 : Bool = checkMonthnumbNumber(monthnum2 : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 6\nvar x2 : Bool = checkMonthnumbNumber(monthnum2 : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether the given month number contains 31 days or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/456", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to reverse strings in a given list of string values.\n *\n * >>> reverseStringList([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"])\n * [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]\n * >>> reverseStringList([\"john\", \"amal\", \"joel\", \"george\"])\n * [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]\n * >>> reverseStringList([\"jack\", \"john\", \"mary\"])\n * [\"kcaj\", \"nhoj\", \"yram\"]\n */\nfunc reverseStringList(stringlist : [String]) -> [String] {\n", "entry_point": "reverseStringList", "test": "\n\nvar arg00 : [String] = [#\"Red\"#, #\"Green\"#, #\"Blue\"#, #\"White\"#, #\"Black\"#]\nvar x0 : [String] = reverseStringList(stringlist : arg00)\nvar v0 : [String] = [#\"deR\"#, #\"neerG\"#, #\"eulB\"#, #\"etihW\"#, #\"kcalB\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"john\"#, #\"amal\"#, #\"joel\"#, #\"george\"#]\nvar x1 : [String] = reverseStringList(stringlist : arg10)\nvar v1 : [String] = [#\"nhoj\"#, #\"lama\"#, #\"leoj\"#, #\"egroeg\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"jack\"#, #\"john\"#, #\"mary\"#]\nvar x2 : [String] = reverseStringList(stringlist : arg20)\nvar v2 : [String] = [#\"kcaj\"#, #\"nhoj\"#, #\"yram\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to reverse strings in a given list of string values.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/457", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sublist having minimum length.\n *\n * >>> findMin([[1], [1, 2], [1, 2, 3]])\n * [1]\n * >>> findMin([[1, 1], [1, 1, 1], [1, 2, 7, 8]])\n * [1, 1]\n * >>> findMin([[\"x\"], [\"x\", \"y\"], [\"x\", \"y\", \"z\"]])\n * [\"x\"]\n */\nfunc findMin(lst : [[AnyHashable]]) -> [AnyHashable] {\n", "entry_point": "findMin", "test": "\n\nvar arg00 : [[AnyHashable]] = [[1], [1, 2], [1, 2, 3]]\nvar x0 : [AnyHashable] = findMin(lst : arg00)\nvar v0 : [AnyHashable] = [1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[1, 1], [1, 1, 1], [1, 2, 7, 8]]\nvar x1 : [AnyHashable] = findMin(lst : arg10)\nvar v1 : [AnyHashable] = [1, 1]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[#\"x\"#], [#\"x\"#, #\"y\"#], [#\"x\"#, #\"y\"#, #\"z\"#]]\nvar x2 : [AnyHashable] = findMin(lst : arg20)\nvar v2 : [AnyHashable] = [#\"x\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sublist having minimum length.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/458", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a rectangle.\n *\n * >>> rectangleArea(10, 20)\n * 200\n * >>> rectangleArea(10, 5)\n * 50\n * >>> rectangleArea(4, 2)\n * 8\n */\nfunc rectangleArea(l : Int, b : Int) -> Int {\n", "entry_point": "rectangleArea", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 20\nvar x0 : Int = rectangleArea(l : arg00, b : arg01)\nvar v0 : Int = 200\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar arg11 : Int = 5\nvar x1 : Int = rectangleArea(l : arg10, b : arg11)\nvar v1 : Int = 50\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar arg21 : Int = 2\nvar x2 : Int = rectangleArea(l : arg20, b : arg21)\nvar v2 : Int = 8\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the area of a rectangle.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/459", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove uppercase substrings from a given string by using regex.\n *\n * >>> removeUppercase(\"cAstyoUrFavoRitETVshoWs\")\n * \"cstyoravoitshos\"\n * >>> removeUppercase(\"wAtchTheinTernEtrAdIo\")\n * \"wtchheinerntrdo\"\n * >>> removeUppercase(\"VoicESeaRchAndreComMendaTionS\")\n * \"oiceachndreomendaion\"\n */\nfunc removeUppercase(str1 : String) -> String {\n", "entry_point": "removeUppercase", "test": "\n\nvar arg00 : String = #\"cAstyoUrFavoRitETVshoWs\"#\nvar x0 : String = removeUppercase(str1 : arg00)\nvar v0 : String = #\"cstyoravoitshos\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"wAtchTheinTernEtrAdIo\"#\nvar x1 : String = removeUppercase(str1 : arg10)\nvar v1 : String = #\"wtchheinerntrdo\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"VoicESeaRchAndreComMendaTionS\"#\nvar x2 : String = removeUppercase(str1 : arg20)\nvar v2 : String = #\"oiceachndreomendaion\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove uppercase substrings from a given string by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/460", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to get the first element of each sublist.\n *\n * >>> extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n * [1, 3, 6]\n * >>> extract([[1, 2, 3], [4, 5]])\n * [1, 4]\n * >>> extract([[9, 8, 1], [1, 2]])\n * [9, 1]\n */\nfunc extract(lst : [[Int]]) -> [Int] {\n", "entry_point": "extract", "test": "\n\nvar arg00 : [[Int]] = [[1, 2], [3, 4, 5], [6, 7, 8, 9]]\nvar x0 : [Int] = extract(lst : arg00)\nvar v0 : [Int] = [1, 3, 6]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1, 2, 3], [4, 5]]\nvar x1 : [Int] = extract(lst : arg10)\nvar v1 : [Int] = [1, 4]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[9, 8, 1], [1, 2]]\nvar x2 : [Int] = extract(lst : arg20)\nvar v2 : [Int] = [9, 1]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to get the first element of each sublist.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/461", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the upper case characters in a given string.\n *\n * >>> upperCtr(\"PYthon\")\n * 1\n * >>> upperCtr(\"BigData\")\n * 1\n * >>> upperCtr(\"program\")\n * 0\n */\nfunc upperCtr(str : String) -> Int {\n", "entry_point": "upperCtr", "test": "\n\nvar arg00 : String = #\"PYthon\"#\nvar x0 : Int = upperCtr(str : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"BigData\"#\nvar x1 : Int = upperCtr(str : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"program\"#\nvar x2 : Int = upperCtr(str : arg20)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the upper case characters in a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/462", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all possible combinations of the elements of a given list.\n *\n * >>> combinationsList([\"orange\", \"red\", \"green\", \"blue\"])\n * [[], [\"orange\"], [\"red\"], [\"red\", \"orange\"], [\"green\"], [\"green\", \"orange\"], [\"green\", \"red\"], [\"green\", \"red\", \"orange\"], [\"blue\"], [\"blue\", \"orange\"], [\"blue\", \"red\"], [\"blue\", \"red\", \"orange\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"orange\"], [\"blue\", \"green\", \"red\"], [\"blue\", \"green\", \"red\", \"orange\"]]\n * >>> combinationsList([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"])\n * [[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"blue\"], [\"blue\", \"red\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"red\"], [\"white\"], [\"white\", \"red\"], [\"white\", \"green\"], [\"white\", \"green\", \"red\"], [\"white\", \"blue\"], [\"white\", \"blue\", \"red\"], [\"white\", \"blue\", \"green\"], [\"white\", \"blue\", \"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"black\", \"blue\"], [\"black\", \"blue\", \"red\"], [\"black\", \"blue\", \"green\"], [\"black\", \"blue\", \"green\", \"red\"], [\"black\", \"white\"], [\"black\", \"white\", \"red\"], [\"black\", \"white\", \"green\"], [\"black\", \"white\", \"green\", \"red\"], [\"black\", \"white\", \"blue\"], [\"black\", \"white\", \"blue\", \"red\"], [\"black\", \"white\", \"blue\", \"green\"], [\"black\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"blue\"], [\"orange\", \"blue\", \"red\"], [\"orange\", \"blue\", \"green\"], [\"orange\", \"blue\", \"green\", \"red\"], [\"orange\", \"white\"], [\"orange\", \"white\", \"red\"], [\"orange\", \"white\", \"green\"], [\"orange\", \"white\", \"green\", \"red\"], [\"orange\", \"white\", \"blue\"], [\"orange\", \"white\", \"blue\", \"red\"], [\"orange\", \"white\", \"blue\", \"green\"], [\"orange\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"], [\"orange\", \"black\", \"blue\"], [\"orange\", \"black\", \"blue\", \"red\"], [\"orange\", \"black\", \"blue\", \"green\"], [\"orange\", \"black\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\", \"white\"], [\"orange\", \"black\", \"white\", \"red\"], [\"orange\", \"black\", \"white\", \"green\"], [\"orange\", \"black\", \"white\", \"green\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\"], [\"orange\", \"black\", \"white\", \"blue\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"]]\n * >>> combinationsList([\"red\", \"green\", \"black\", \"orange\"])\n * [[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"]]\n */\nfunc combinationsList(list1 : [String]) -> [[AnyHashable]] {\n", "entry_point": "combinationsList", "test": "\n\nvar arg00 : [String] = [#\"orange\"#, #\"red\"#, #\"green\"#, #\"blue\"#]\nvar x0 : [[AnyHashable]] = combinationsList(list1 : arg00)\nvar v0 : [[AnyHashable]] = [[], [#\"orange\"#], [#\"red\"#], [#\"red\"#, #\"orange\"#], [#\"green\"#], [#\"green\"#, #\"orange\"#], [#\"green\"#, #\"red\"#], [#\"green\"#, #\"red\"#, #\"orange\"#], [#\"blue\"#], [#\"blue\"#, #\"orange\"#], [#\"blue\"#, #\"red\"#], [#\"blue\"#, #\"red\"#, #\"orange\"#], [#\"blue\"#, #\"green\"#], [#\"blue\"#, #\"green\"#, #\"orange\"#], [#\"blue\"#, #\"green\"#, #\"red\"#], [#\"blue\"#, #\"green\"#, #\"red\"#, #\"orange\"#]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"red\"#, #\"green\"#, #\"blue\"#, #\"white\"#, #\"black\"#, #\"orange\"#]\nvar x1 : [[AnyHashable]] = combinationsList(list1 : arg10)\nvar v1 : [[AnyHashable]] = [[], [#\"red\"#], [#\"green\"#], [#\"green\"#, #\"red\"#], [#\"blue\"#], [#\"blue\"#, #\"red\"#], [#\"blue\"#, #\"green\"#], [#\"blue\"#, #\"green\"#, #\"red\"#], [#\"white\"#], [#\"white\"#, #\"red\"#], [#\"white\"#, #\"green\"#], [#\"white\"#, #\"green\"#, #\"red\"#], [#\"white\"#, #\"blue\"#], [#\"white\"#, #\"blue\"#, #\"red\"#], [#\"white\"#, #\"blue\"#, #\"green\"#], [#\"white\"#, #\"blue\"#, #\"green\"#, #\"red\"#], [#\"black\"#], [#\"black\"#, #\"red\"#], [#\"black\"#, #\"green\"#], [#\"black\"#, #\"green\"#, #\"red\"#], [#\"black\"#, #\"blue\"#], [#\"black\"#, #\"blue\"#, #\"red\"#], [#\"black\"#, #\"blue\"#, #\"green\"#], [#\"black\"#, #\"blue\"#, #\"green\"#, #\"red\"#], [#\"black\"#, #\"white\"#], [#\"black\"#, #\"white\"#, #\"red\"#], [#\"black\"#, #\"white\"#, #\"green\"#], [#\"black\"#, #\"white\"#, #\"green\"#, #\"red\"#], [#\"black\"#, #\"white\"#, #\"blue\"#], [#\"black\"#, #\"white\"#, #\"blue\"#, #\"red\"#], [#\"black\"#, #\"white\"#, #\"blue\"#, #\"green\"#], [#\"black\"#, #\"white\"#, #\"blue\"#, #\"green\"#, #\"red\"#], [#\"orange\"#], [#\"orange\"#, #\"red\"#], [#\"orange\"#, #\"green\"#], [#\"orange\"#, #\"green\"#, #\"red\"#], [#\"orange\"#, #\"blue\"#], [#\"orange\"#, #\"blue\"#, #\"red\"#], [#\"orange\"#, #\"blue\"#, #\"green\"#], [#\"orange\"#, #\"blue\"#, #\"green\"#, #\"red\"#], [#\"orange\"#, #\"white\"#], [#\"orange\"#, #\"white\"#, #\"red\"#], [#\"orange\"#, #\"white\"#, #\"green\"#], [#\"orange\"#, #\"white\"#, #\"green\"#, #\"red\"#], [#\"orange\"#, #\"white\"#, #\"blue\"#], [#\"orange\"#, #\"white\"#, #\"blue\"#, #\"red\"#], [#\"orange\"#, #\"white\"#, #\"blue\"#, #\"green\"#], [#\"orange\"#, #\"white\"#, #\"blue\"#, #\"green\"#, #\"red\"#], [#\"orange\"#, #\"black\"#], [#\"orange\"#, #\"black\"#, #\"red\"#], [#\"orange\"#, #\"black\"#, #\"green\"#], [#\"orange\"#, #\"black\"#, #\"green\"#, #\"red\"#], [#\"orange\"#, #\"black\"#, #\"blue\"#], [#\"orange\"#, #\"black\"#, #\"blue\"#, #\"red\"#], [#\"orange\"#, #\"black\"#, #\"blue\"#, #\"green\"#], [#\"orange\"#, #\"black\"#, #\"blue\"#, #\"green\"#, #\"red\"#], [#\"orange\"#, #\"black\"#, #\"white\"#], [#\"orange\"#, #\"black\"#, #\"white\"#, #\"red\"#], [#\"orange\"#, #\"black\"#, #\"white\"#, #\"green\"#], [#\"orange\"#, #\"black\"#, #\"white\"#, #\"green\"#, #\"red\"#], [#\"orange\"#, #\"black\"#, #\"white\"#, #\"blue\"#], [#\"orange\"#, #\"black\"#, #\"white\"#, #\"blue\"#, #\"red\"#], [#\"orange\"#, #\"black\"#, #\"white\"#, #\"blue\"#, #\"green\"#], [#\"orange\"#, #\"black\"#, #\"white\"#, #\"blue\"#, #\"green\"#, #\"red\"#]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"red\"#, #\"green\"#, #\"black\"#, #\"orange\"#]\nvar x2 : [[AnyHashable]] = combinationsList(list1 : arg20)\nvar v2 : [[AnyHashable]] = [[], [#\"red\"#], [#\"green\"#], [#\"green\"#, #\"red\"#], [#\"black\"#], [#\"black\"#, #\"red\"#], [#\"black\"#, #\"green\"#], [#\"black\"#, #\"green\"#, #\"red\"#], [#\"orange\"#], [#\"orange\"#, #\"red\"#], [#\"orange\"#, #\"green\"#], [#\"orange\"#, #\"green\"#, #\"red\"#], [#\"orange\"#, #\"black\"#], [#\"orange\"#, #\"black\"#, #\"red\"#], [#\"orange\"#, #\"black\"#, #\"green\"#], [#\"orange\"#, #\"black\"#, #\"green\"#, #\"red\"#]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find all possible combinations of the elements of a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/463", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum product subarray of the given array.\n *\n * >>> maxSubarrayProduct([1, -2, -3, 0, 7, -8, -2])\n * 112\n * >>> maxSubarrayProduct([6, -3, -10, 0, 2])\n * 180\n * >>> maxSubarrayProduct([-2, -40, 0, -2, -3])\n * 80\n */\nfunc maxSubarrayProduct(arr : [Int]) -> Int {\n", "entry_point": "maxSubarrayProduct", "test": "\n\nvar arg00 : [Int] = [1, -2, -3, 0, 7, -8, -2]\nvar x0 : Int = maxSubarrayProduct(arr : arg00)\nvar v0 : Int = 112\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [6, -3, -10, 0, 2]\nvar x1 : Int = maxSubarrayProduct(arr : arg10)\nvar v1 : Int = 180\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [-2, -40, 0, -2, -3]\nvar x2 : Int = maxSubarrayProduct(arr : arg20)\nvar v2 : Int = 80\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the maximum product subarray of the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/464", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if all values are same in a dictionary.\n *\n * >>> checkValue([\"Cierra Vega\" : 12, \"Alden Cantrell\" : 12, \"Kierra Gentry\" : 12, \"Pierre Cox\" : 12], 10)\n * false\n * >>> checkValue([\"Cierra Vega\" : 12, \"Alden Cantrell\" : 12, \"Kierra Gentry\" : 12, \"Pierre Cox\" : 12], 12)\n * true\n * >>> checkValue([\"Cierra Vega\" : 12, \"Alden Cantrell\" : 12, \"Kierra Gentry\" : 12, \"Pierre Cox\" : 12], 5)\n * false\n */\nfunc checkValue(dict : [String: Int], n : Int) -> Bool {\n", "entry_point": "checkValue", "test": "\n\nvar arg00 : [String: Int] = [#\"Cierra Vega\"# : 12, #\"Alden Cantrell\"# : 12, #\"Kierra Gentry\"# : 12, #\"Pierre Cox\"# : 12]\nvar arg01 : Int = 10\nvar x0 : Bool = checkValue(dict : arg00, n : arg01)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String: Int] = [#\"Cierra Vega\"# : 12, #\"Alden Cantrell\"# : 12, #\"Kierra Gentry\"# : 12, #\"Pierre Cox\"# : 12]\nvar arg11 : Int = 12\nvar x1 : Bool = checkValue(dict : arg10, n : arg11)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String: Int] = [#\"Cierra Vega\"# : 12, #\"Alden Cantrell\"# : 12, #\"Kierra Gentry\"# : 12, #\"Pierre Cox\"# : 12]\nvar arg21 : Int = 5\nvar x2 : Bool = checkValue(dict : arg20, n : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if all values are same in a dictionary.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/465", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to drop empty items from a given dictionary.\n *\n * >>> dropEmpty([\"c1\" : \"Red\", \"c2\" : \"Green\", \"c3\" : \"none\"])\n * [\"c1\" : \"Red\", \"c2\" : \"Green\"]\n * >>> dropEmpty([\"c1\" : \"Red\", \"c2\" : \"none\", \"c3\" : \"none\"])\n * [\"c1\" : \"Red\"]\n * >>> dropEmpty([\"c1\" : \"none\", \"c2\" : \"Green\", \"c3\" : \"none\"])\n * [\"c2\" : \"Green\"]\n */\nfunc dropEmpty(dict1 : [String: String]) -> [String: String] {\n", "entry_point": "dropEmpty", "test": "\n\nvar arg00 : [String: String] = [#\"c1\"# : #\"Red\"#, #\"c2\"# : #\"Green\"#, #\"c3\"# : \"none\"]\nvar x0 : [String: String] = dropEmpty(dict1 : arg00)\nvar v0 : [String: String] = [#\"c1\"# : #\"Red\"#, #\"c2\"# : #\"Green\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String: String] = [#\"c1\"# : #\"Red\"#, #\"c2\"# : \"none\", #\"c3\"# : \"none\"]\nvar x1 : [String: String] = dropEmpty(dict1 : arg10)\nvar v1 : [String: String] = [#\"c1\"# : #\"Red\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String: String] = [#\"c1\"# : \"none\", #\"c2\"# : #\"Green\"#, #\"c3\"# : \"none\"]\nvar x2 : [String: String] = dropEmpty(dict1 : arg20)\nvar v2 : [String: String] = [#\"c2\"# : #\"Green\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to drop empty items from a given dictionary.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/466", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the peak element in the given array.\n *\n * >>> findPeak([1, 3, 20, 4, 1, 0], 6)\n * 2\n * >>> findPeak([2, 3, 4, 5, 6], 5)\n * 4\n * >>> findPeak([8, 9, 11, 12, 14, 15], 6)\n * 5\n */\nfunc findPeak(arr : [Int], n : Int) -> Int {\n", "entry_point": "findPeak", "test": "\n\nvar arg00 : [Int] = [1, 3, 20, 4, 1, 0]\nvar arg01 : Int = 6\nvar x0 : Int = findPeak(arr : arg00, n : arg01)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 3, 4, 5, 6]\nvar arg11 : Int = 5\nvar x1 : Int = findPeak(arr : arg10, n : arg11)\nvar v1 : Int = 4\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [8, 9, 11, 12, 14, 15]\nvar arg21 : Int = 6\nvar x2 : Int = findPeak(arr : arg20, n : arg21)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the peak element in the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/467", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert decimal number to octal number.\n *\n * >>> decimalToOctal(10)\n * 12\n * >>> decimalToOctal(2)\n * 2\n * >>> decimalToOctal(33)\n * 41\n */\nfunc decimalToOctal(decinum : Int) -> Int {\n", "entry_point": "decimalToOctal", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = decimalToOctal(decinum : arg00)\nvar v0 : Int = 12\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar x1 : Int = decimalToOctal(decinum : arg10)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 33\nvar x2 : Int = decimalToOctal(decinum : arg20)\nvar v2 : Int = 41\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to convert decimal number to octal number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/468", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n *\n * >>> maxProduct([3, 100, 4, 5, 150, 6], 6)\n * 45000\n * >>> maxProduct([4, 42, 55, 68, 80], 5)\n * 50265600\n * >>> maxProduct([10, 22, 9, 33, 21, 50, 41, 60], 8)\n * 21780000\n */\nfunc maxProduct(arr : [Int], n : Int) -> Int {\n", "entry_point": "maxProduct", "test": "\n\nvar arg00 : [Int] = [3, 100, 4, 5, 150, 6]\nvar arg01 : Int = 6\nvar x0 : Int = maxProduct(arr : arg00, n : arg01)\nvar v0 : Int = 45000\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 42, 55, 68, 80]\nvar arg11 : Int = 5\nvar x1 : Int = maxProduct(arr : arg10, n : arg11)\nvar v1 : Int = 50265600\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [10, 22, 9, 33, 21, 50, 41, 60]\nvar arg21 : Int = 8\nvar x2 : Int = maxProduct(arr : arg20, n : arg21)\nvar v2 : Int = 21780000\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/469", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum profit earned from a maximum of k stock transactions\n *\n * >>> maxProfit([1, 5, 2, 3, 7, 6, 4, 5], 3)\n * 10\n * >>> maxProfit([2, 4, 7, 5, 4, 3, 5], 2)\n * 7\n * >>> maxProfit([10, 6, 8, 4, 2], 2)\n * 2\n */\nfunc maxProfit(price : [Int], k : Int) -> Int {\n", "entry_point": "maxProfit", "test": "\n\nvar arg00 : [Int] = [1, 5, 2, 3, 7, 6, 4, 5]\nvar arg01 : Int = 3\nvar x0 : Int = maxProfit(price : arg00, k : arg01)\nvar v0 : Int = 10\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 4, 7, 5, 4, 3, 5]\nvar arg11 : Int = 2\nvar x1 : Int = maxProfit(price : arg10, k : arg11)\nvar v1 : Int = 7\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [10, 6, 8, 4, 2]\nvar arg21 : Int = 2\nvar x2 : Int = maxProfit(price : arg20, k : arg21)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the maximum profit earned from a maximum of k stock transactions", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/470", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the pairwise addition of the elements of the given tuples.\n *\n * >>> addPairwise([1, 5, 7, 8, 10])\n * [6, 12, 15, 18]\n * >>> addPairwise([2, 6, 8, 9, 11])\n * [8, 14, 17, 20]\n * >>> addPairwise([3, 7, 9, 10, 12])\n * [10, 16, 19, 22]\n */\nfunc addPairwise(testTup : [Int]) -> [Int] {\n", "entry_point": "addPairwise", "test": "\n\nvar arg00 : [Int] = [1, 5, 7, 8, 10]\nvar x0 : [Int] = addPairwise(testTup : arg00)\nvar v0 : [Int] = [6, 12, 15, 18]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 6, 8, 9, 11]\nvar x1 : [Int] = addPairwise(testTup : arg10)\nvar v1 : [Int] = [8, 14, 17, 20]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3, 7, 9, 10, 12]\nvar x2 : [Int] = addPairwise(testTup : arg20)\nvar v2 : [Int] = [10, 16, 19, 22]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the pairwise addition of the elements of the given tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/471", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find remainder of array multiplication divided by n.\n *\n * >>> findRemainder([100, 10, 5, 25, 35, 14], 6, 11)\n * 9\n * >>> findRemainder([1, 1, 1], 3, 1)\n * 0\n * >>> findRemainder([1, 2, 1], 3, 2)\n * 0\n */\nfunc findRemainder(arr : [Int], lens : Int, n : Int) -> Int {\n", "entry_point": "findRemainder", "test": "\n\nvar arg00 : [Int] = [100, 10, 5, 25, 35, 14]\nvar arg01 : Int = 6\nvar arg02 : Int = 11\nvar x0 : Int = findRemainder(arr : arg00, lens : arg01, n : arg02)\nvar v0 : Int = 9\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 1, 1]\nvar arg11 : Int = 3\nvar arg12 : Int = 1\nvar x1 : Int = findRemainder(arr : arg10, lens : arg11, n : arg12)\nvar v1 : Int = 0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 1]\nvar arg21 : Int = 3\nvar arg22 : Int = 2\nvar x2 : Int = findRemainder(arr : arg20, lens : arg21, n : arg22)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find remainder of array multiplication divided by n.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/472", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given list contains consecutive numbers or not.\n *\n * >>> checkConsecutive([1, 2, 3, 4, 5])\n * true\n * >>> checkConsecutive([1, 2, 3, 5, 6])\n * false\n * >>> checkConsecutive([1, 2, 1])\n * false\n */\nfunc checkConsecutive(l : [Int]) -> Bool {\n", "entry_point": "checkConsecutive", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5]\nvar x0 : Bool = checkConsecutive(l : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 5, 6]\nvar x1 : Bool = checkConsecutive(l : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 1]\nvar x2 : Bool = checkConsecutive(l : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the given list contains consecutive numbers or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/473", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n *\n * >>> tupleIntersection([[3, 4], [5, 6], [9, 10], [4, 5]], [[5, 4], [3, 4], [6, 5], [9, 11]])\n * {[4, 5], [5, 6], [3, 4]}\n * >>> tupleIntersection([[4, 1], [7, 4], [11, 13], [17, 14]], [[1, 4], [7, 4], [16, 12], [10, 13]])\n * {[4, 7], [1, 4]}\n * >>> tupleIntersection([[2, 1], [3, 2], [1, 3], [1, 4]], [[11, 2], [2, 3], [6, 2], [1, 3]])\n * {[2, 3], [1, 3]}\n */\nfunc tupleIntersection(testList1 : [[Int]], testList2 : [[Int]]) -> Set<[Int]> {\n", "entry_point": "tupleIntersection", "test": "\n\nvar arg00 : [[Int]] = [[3, 4], [5, 6], [9, 10], [4, 5]]\nvar arg01 : [[Int]] = [[5, 4], [3, 4], [6, 5], [9, 11]]\nvar x0 : Set<[Int]> = tupleIntersection(testList1 : arg00, testList2 : arg01)\nvar v0 : Set<[Int]> = [[4, 5], [5, 6], [3, 4]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[4, 1], [7, 4], [11, 13], [17, 14]]\nvar arg11 : [[Int]] = [[1, 4], [7, 4], [16, 12], [10, 13]]\nvar x1 : Set<[Int]> = tupleIntersection(testList1 : arg10, testList2 : arg11)\nvar v1 : Set<[Int]> = [[4, 7], [1, 4]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[2, 1], [3, 2], [1, 3], [1, 4]]\nvar arg21 : [[Int]] = [[11, 2], [2, 3], [6, 2], [1, 3]]\nvar x2 : Set<[Int]> = tupleIntersection(testList1 : arg20, testList2 : arg21)\nvar v2 : Set<[Int]> = [[2, 3], [1, 3]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/474", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace characters in a string.\n *\n * >>> replaceChar(\"polygon\", \"y\", \"l\")\n * \"pollgon\"\n * >>> replaceChar(\"character\", \"c\", \"a\")\n * \"aharaater\"\n * >>> replaceChar(\"python\", \"l\", \"a\")\n * \"python\"\n */\nfunc replaceChar(str1 : String, ch : String, newch : String) -> String {\n", "entry_point": "replaceChar", "test": "\n\nvar arg00 : String = #\"polygon\"#\nvar arg01 : String = #\"y\"#\nvar arg02 : String = #\"l\"#\nvar x0 : String = replaceChar(str1 : arg00, ch : arg01, newch : arg02)\nvar v0 : String = #\"pollgon\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"character\"#\nvar arg11 : String = #\"c\"#\nvar arg12 : String = #\"a\"#\nvar x1 : String = replaceChar(str1 : arg10, ch : arg11, newch : arg12)\nvar v1 : String = #\"aharaater\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"python\"#\nvar arg21 : String = #\"l\"#\nvar arg22 : String = #\"a\"#\nvar x2 : String = replaceChar(str1 : arg20, ch : arg21, newch : arg22)\nvar v2 : String = #\"python\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to replace characters in a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/475", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort counter by value.\n *\n * >>> sortCounter([\"Math\" : 81, \"Physics\" : 83, \"Chemistry\" : 87])\n * [[\"Chemistry\", 87], [\"Physics\", 83], [\"Math\", 81]]\n * >>> sortCounter([\"Math\" : 400, \"Physics\" : 300, \"Chemistry\" : 250])\n * [[\"Math\", 400], [\"Physics\", 300], [\"Chemistry\", 250]]\n * >>> sortCounter([\"Math\" : 900, \"Physics\" : 1000, \"Chemistry\" : 1250])\n * [[\"Chemistry\", 1250], [\"Physics\", 1000], [\"Math\", 900]]\n */\nfunc sortCounter(dict1 : [String: Int]) -> [[AnyHashable]] {\n", "entry_point": "sortCounter", "test": "\n\nvar arg00 : [String: Int] = [#\"Math\"# : 81, #\"Physics\"# : 83, #\"Chemistry\"# : 87]\nvar x0 : [[AnyHashable]] = sortCounter(dict1 : arg00)\nvar v0 : [[AnyHashable]] = [[#\"Chemistry\"#, 87], [#\"Physics\"#, 83], [#\"Math\"#, 81]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String: Int] = [#\"Math\"# : 400, #\"Physics\"# : 300, #\"Chemistry\"# : 250]\nvar x1 : [[AnyHashable]] = sortCounter(dict1 : arg10)\nvar v1 : [[AnyHashable]] = [[#\"Math\"#, 400], [#\"Physics\"#, 300], [#\"Chemistry\"#, 250]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String: Int] = [#\"Math\"# : 900, #\"Physics\"# : 1000, #\"Chemistry\"# : 1250]\nvar x2 : [[AnyHashable]] = sortCounter(dict1 : arg20)\nvar v2 : [[AnyHashable]] = [[#\"Chemistry\"#, 1250], [#\"Physics\"#, 1000], [#\"Math\"#, 900]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort counter by value.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/476", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of the largest and smallest value in a given array.\n *\n * >>> bigSum([1, 2, 3])\n * 4\n * >>> bigSum([-1, 2, 3, 4])\n * 3\n * >>> bigSum([2, 3, 6])\n * 8\n */\nfunc bigSum(nums : [Int]) -> Int {\n", "entry_point": "bigSum", "test": "\n\nvar arg00 : [Int] = [1, 2, 3]\nvar x0 : Int = bigSum(nums : arg00)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [-1, 2, 3, 4]\nvar x1 : Int = bigSum(nums : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 3, 6]\nvar x2 : Int = bigSum(nums : arg20)\nvar v2 : Int = 8\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of the largest and smallest value in a given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/477", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert the given string to lower case.\n *\n * >>> isLower(\"InValid\")\n * \"invalid\"\n * >>> isLower(\"TruE\")\n * \"true\"\n * >>> isLower(\"SenTenCE\")\n * \"sentence\"\n */\nfunc isLower(string : String) -> String {\n", "entry_point": "isLower", "test": "\n\nvar arg00 : String = #\"InValid\"#\nvar x0 : String = isLower(string : arg00)\nvar v0 : String = #\"invalid\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"TruE\"#\nvar x1 : String = isLower(string : arg10)\nvar v1 : String = #\"true\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"SenTenCE\"#\nvar x2 : String = isLower(string : arg20)\nvar v2 : String = #\"sentence\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to convert the given string to lower case.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/478", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove lowercase substrings from a given string.\n *\n * >>> removeLowercase(\"PYTHon\")\n * \"PYTH\"\n * >>> removeLowercase(\"FInD\")\n * \"FID\"\n * >>> removeLowercase(\"STRinG\")\n * \"STRG\"\n */\nfunc removeLowercase(str1 : String) -> String {\n", "entry_point": "removeLowercase", "test": "\n\nvar arg00 : String = #\"PYTHon\"#\nvar x0 : String = removeLowercase(str1 : arg00)\nvar v0 : String = #\"PYTH\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"FInD\"#\nvar x1 : String = removeLowercase(str1 : arg10)\nvar v1 : String = #\"FID\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"STRinG\"#\nvar x2 : String = removeLowercase(str1 : arg20)\nvar v2 : String = #\"STRG\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove lowercase substrings from a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/479", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first digit of a given number.\n *\n * >>> firstDigit(123)\n * 1\n * >>> firstDigit(456)\n * 4\n * >>> firstDigit(12)\n * 1\n */\nfunc firstDigit(n : Int) -> Int {\n", "entry_point": "firstDigit", "test": "\n\nvar arg00 : Int = 123\nvar x0 : Int = firstDigit(n : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 456\nvar x1 : Int = firstDigit(n : arg10)\nvar v1 : Int = 4\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 12\nvar x2 : Int = firstDigit(n : arg20)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the first digit of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/480", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum occurring character in a given string.\n *\n * >>> getMaxOccuringChar(\"data\")\n * \"a\"\n * >>> getMaxOccuringChar(\"create\")\n * \"e\"\n * >>> getMaxOccuringChar(\"brilliant girl\")\n * \"i\"\n */\nfunc getMaxOccuringChar(str1 : String) -> String {\n", "entry_point": "getMaxOccuringChar", "test": "\n\nvar arg00 : String = #\"data\"#\nvar x0 : String = getMaxOccuringChar(str1 : arg00)\nvar v0 : String = #\"a\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"create\"#\nvar x1 : String = getMaxOccuringChar(str1 : arg10)\nvar v1 : String = #\"e\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"brilliant girl\"#\nvar x2 : String = getMaxOccuringChar(str1 : arg20)\nvar v2 : String = #\"i\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the maximum occurring character in a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/481", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n *\n * >>> isSubsetSum([3, 34, 4, 12, 5, 2], 6, 9)\n * true\n * >>> isSubsetSum([3, 34, 4, 12, 5, 2], 6, 30)\n * false\n * >>> isSubsetSum([3, 34, 4, 12, 5, 2], 6, 15)\n * true\n */\nfunc isSubsetSum(set : [Int], n : Int, sum : Int) -> Bool {\n", "entry_point": "isSubsetSum", "test": "\n\nvar arg00 : [Int] = [3, 34, 4, 12, 5, 2]\nvar arg01 : Int = 6\nvar arg02 : Int = 9\nvar x0 : Bool = isSubsetSum(set : arg00, n : arg01, sum : arg02)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [3, 34, 4, 12, 5, 2]\nvar arg11 : Int = 6\nvar arg12 : Int = 30\nvar x1 : Bool = isSubsetSum(set : arg10, n : arg11, sum : arg12)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3, 34, 4, 12, 5, 2]\nvar arg21 : Int = 6\nvar arg22 : Int = 15\nvar x2 : Bool = isSubsetSum(set : arg20, n : arg21, sum : arg22)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/482", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n *\n * >>> match(\"Geeks\")\n * \"Yes\"\n * >>> match(\"geeksforGeeks\")\n * \"Yes\"\n * >>> match(\"geeks\")\n * \"No\"\n */\nfunc match(text : String) -> String {\n", "entry_point": "match", "test": "\n\nvar arg00 : String = #\"Geeks\"#\nvar x0 : String = match(text : arg00)\nvar v0 : String = #\"Yes\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"geeksforGeeks\"#\nvar x1 : String = match(text : arg10)\nvar v1 : String = #\"Yes\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"geeks\"#\nvar x2 : String = match(text : arg20)\nvar v2 : String = #\"No\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/483", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first natural number whose factorial is divisible by x.\n *\n * >>> firstFactorialDivisibleNumber(10)\n * 5\n * >>> firstFactorialDivisibleNumber(15)\n * 5\n * >>> firstFactorialDivisibleNumber(5)\n * 4\n */\nfunc firstFactorialDivisibleNumber(x : Int) -> Int {\n", "entry_point": "firstFactorialDivisibleNumber", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = firstFactorialDivisibleNumber(x : arg00)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 15\nvar x1 : Int = firstFactorialDivisibleNumber(x : arg10)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar x2 : Int = firstFactorialDivisibleNumber(x : arg20)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the first natural number whose factorial is divisible by x.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/484", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove the matching tuples from the given two tuples.\n *\n * >>> removeMatchingTuple([[\"Hello\", \"dude\"], [\"How\", \"are\"], [\"you\", \"?\"]], [[\"Hello\", \"dude\"], [\"How\", \"are\"]])\n * [[\"you\", \"?\"]]\n * >>> removeMatchingTuple([[\"Part\", \"of\"], [\"the\", \"journey\"], [\"is \", \"end\"]], [[\"Journey\", \"the\"], [\"is\", \"end\"]])\n * [[\"Part\", \"of\"], [\"the\", \"journey\"], [\"is \", \"end\"]]\n * >>> removeMatchingTuple([[\"Its\", \"been\"], [\"a\", \"long\"], [\"day\", \"without\"]], [[\"a\", \"long\"], [\"my\", \"friend\"]])\n * [[\"Its\", \"been\"], [\"day\", \"without\"]]\n */\nfunc removeMatchingTuple(testList1 : [[String]], testList2 : [[String]]) -> [[String]] {\n", "entry_point": "removeMatchingTuple", "test": "\n\nvar arg00 : [[String]] = [[#\"Hello\"#, #\"dude\"#], [#\"How\"#, #\"are\"#], [#\"you\"#, #\"?\"#]]\nvar arg01 : [[String]] = [[#\"Hello\"#, #\"dude\"#], [#\"How\"#, #\"are\"#]]\nvar x0 : [[String]] = removeMatchingTuple(testList1 : arg00, testList2 : arg01)\nvar v0 : [[String]] = [[#\"you\"#, #\"?\"#]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[String]] = [[#\"Part\"#, #\"of\"#], [#\"the\"#, #\"journey\"#], [#\"is \"#, #\"end\"#]]\nvar arg11 : [[String]] = [[#\"Journey\"#, #\"the\"#], [#\"is\"#, #\"end\"#]]\nvar x1 : [[String]] = removeMatchingTuple(testList1 : arg10, testList2 : arg11)\nvar v1 : [[String]] = [[#\"Part\"#, #\"of\"#], [#\"the\"#, #\"journey\"#], [#\"is \"#, #\"end\"#]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[String]] = [[#\"Its\"#, #\"been\"#], [#\"a\"#, #\"long\"#], [#\"day\"#, #\"without\"#]]\nvar arg21 : [[String]] = [[#\"a\"#, #\"long\"#], [#\"my\"#, #\"friend\"#]]\nvar x2 : [[String]] = removeMatchingTuple(testList1 : arg20, testList2 : arg21)\nvar v2 : [[String]] = [[#\"Its\"#, #\"been\"#], [#\"day\"#, #\"without\"#]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove the matching tuples from the given two tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/485", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the largest palindromic number in the given array.\n *\n * >>> largestPalindrome([1, 232, 54545, 999991], 4)\n * 54545\n * >>> largestPalindrome([1, 2, 3, 4, 5, 50], 6)\n * 5\n */\nfunc largestPalindrome(a : [Int], n : Int) -> Int {\n", "entry_point": "largestPalindrome", "test": "\n\nvar arg00 : [Int] = [1, 232, 54545, 999991]\nvar arg01 : Int = 4\nvar x0 : Int = largestPalindrome(a : arg00, n : arg01)\nvar v0 : Int = 54545\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5, 50]\nvar arg11 : Int = 6\nvar x1 : Int = largestPalindrome(a : arg10, n : arg11)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\n", "description": "Write a function to find the largest palindromic number in the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/486", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to compute binomial probability for the given number.\n *\n * >>> binomialProbability(10, 5, 0.3333333333333333)\n * 0.13656454808718185\n * >>> binomialProbability(11, 6, 0.5)\n * 0.2255859375\n * >>> binomialProbability(12, 7, 0.6)\n * 0.227030335488\n */\nfunc binomialProbability(n : Int, k : Int, p : Double) -> Double {\n", "entry_point": "binomialProbability", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 5\nvar arg02 : Double = 0.3333333333333333\nvar x0 : Double = binomialProbability(n : arg00, k : arg01, p : arg02)\nvar v0 : Double = 0.13656454808718185\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 11\nvar arg11 : Int = 6\nvar arg12 : Double = 0.5\nvar x1 : Double = binomialProbability(n : arg10, k : arg11, p : arg12)\nvar v1 : Double = 0.2255859375\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 12\nvar arg21 : Int = 7\nvar arg22 : Double = 0.6\nvar x2 : Double = binomialProbability(n : arg20, k : arg21, p : arg22)\nvar v2 : Double = 0.227030335488\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to compute binomial probability for the given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/487", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n *\n * >>> sortTuple([[1, 3], [3, 2], [2, 1]])\n * [[2, 1], [3, 2], [1, 3]]\n * >>> sortTuple([[2, 4], [3, 3], [1, 1]])\n * [[1, 1], [3, 3], [2, 4]]\n * >>> sortTuple([[3, 9], [6, 7], [4, 3]])\n * [[4, 3], [6, 7], [3, 9]]\n */\nfunc sortTuple(tup : [[Int]]) -> [[Int]] {\n", "entry_point": "sortTuple", "test": "\n\nvar arg00 : [[Int]] = [[1, 3], [3, 2], [2, 1]]\nvar x0 : [[Int]] = sortTuple(tup : arg00)\nvar v0 : [[Int]] = [[2, 1], [3, 2], [1, 3]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[2, 4], [3, 3], [1, 1]]\nvar x1 : [[Int]] = sortTuple(tup : arg10)\nvar v1 : [[Int]] = [[1, 1], [3, 3], [2, 4]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[3, 9], [6, 7], [4, 3]]\nvar x2 : [[Int]] = sortTuple(tup : arg20)\nvar v2 : [[Int]] = [[4, 3], [6, 7], [3, 9]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/488", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a pentagon.\n *\n * >>> areaPentagon(5)\n * 43.01193501472417\n * >>> areaPentagon(10)\n * 172.0477400588967\n * >>> areaPentagon(15)\n * 387.10741513251753\n */\nfunc areaPentagon(a : Int) -> Double {\n", "entry_point": "areaPentagon", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Double = areaPentagon(a : arg00)\nvar v0 : Double = 43.01193501472417\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar x1 : Double = areaPentagon(a : arg10)\nvar v1 : Double = 172.0477400588967\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 15\nvar x2 : Double = areaPentagon(a : arg20)\nvar v2 : Double = 387.10741513251753\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the area of a pentagon.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/489", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the frequency of the largest value in a given array.\n *\n * >>> frequencyOfLargest(5, [1, 2, 3, 4, 4])\n * 2\n * >>> frequencyOfLargest(3, [5, 6, 5])\n * 1\n * >>> frequencyOfLargest(4, [2, 7, 7, 7])\n * 3\n */\nfunc frequencyOfLargest(n : Int, arr : [Int]) -> Int {\n", "entry_point": "frequencyOfLargest", "test": "\n\nvar arg00 : Int = 5\nvar arg01 : [Int] = [1, 2, 3, 4, 4]\nvar x0 : Int = frequencyOfLargest(n : arg00, arr : arg01)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar arg11 : [Int] = [5, 6, 5]\nvar x1 : Int = frequencyOfLargest(n : arg10, arr : arg11)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar arg21 : [Int] = [2, 7, 7, 7]\nvar x2 : Int = frequencyOfLargest(n : arg20, arr : arg21)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the frequency of the largest value in a given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/490", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract all the pairs which are symmetric in the given tuple list.\n *\n * >>> extractSymmetric([[6, 7], [2, 3], [7, 6], [9, 8], [10, 2], [8, 9]])\n * {[6, 7], [8, 9]}\n * >>> extractSymmetric([[7, 8], [3, 4], [8, 7], [10, 9], [11, 3], [9, 10]])\n * {[9, 10], [7, 8]}\n * >>> extractSymmetric([[8, 9], [4, 5], [9, 8], [11, 10], [12, 4], [10, 11]])\n * {[8, 9], [10, 11]}\n */\nfunc extractSymmetric(testList : [[Int]]) -> Set<[Int]> {\n", "entry_point": "extractSymmetric", "test": "\n\nvar arg00 : [[Int]] = [[6, 7], [2, 3], [7, 6], [9, 8], [10, 2], [8, 9]]\nvar x0 : Set<[Int]> = extractSymmetric(testList : arg00)\nvar v0 : Set<[Int]> = [[6, 7], [8, 9]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[7, 8], [3, 4], [8, 7], [10, 9], [11, 3], [9, 10]]\nvar x1 : Set<[Int]> = extractSymmetric(testList : arg10)\nvar v1 : Set<[Int]> = [[9, 10], [7, 8]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[8, 9], [4, 5], [9, 8], [11, 10], [12, 4], [10, 11]]\nvar x2 : Set<[Int]> = extractSymmetric(testList : arg20)\nvar v2 : Set<[Int]> = [[8, 9], [10, 11]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract all the pairs which are symmetric in the given tuple list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/491", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sum of geometric progression series.\n *\n * >>> sumGp(1, 5, 2)\n * 31\n * >>> sumGp(1, 5, 4)\n * 341\n * >>> sumGp(2, 6, 3)\n * 728\n */\nfunc sumGp(a : Int, n : Int, r : Int) -> Int {\n", "entry_point": "sumGp", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = 5\nvar arg02 : Int = 2\nvar x0 : Int = sumGp(a : arg00, n : arg01, r : arg02)\nvar v0 : Int = 31\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar arg11 : Int = 5\nvar arg12 : Int = 4\nvar x1 : Int = sumGp(a : arg10, n : arg11, r : arg12)\nvar v1 : Int = 341\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar arg21 : Int = 6\nvar arg22 : Int = 3\nvar x2 : Int = sumGp(a : arg20, n : arg21, r : arg22)\nvar v2 : Int = 728\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the sum of geometric progression series.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/492", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to search an element in the given array by using binary search.\n *\n * >>> binarySearch([1, 2, 3, 5, 8], 6)\n * false\n * >>> binarySearch([7, 8, 9, 10, 13], 10)\n * true\n * >>> binarySearch([11, 13, 14, 19, 22, 36], 23)\n * false\n */\nfunc binarySearch(itemList : [Int], item : Int) -> Bool {\n", "entry_point": "binarySearch", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 5, 8]\nvar arg01 : Int = 6\nvar x0 : Bool = binarySearch(itemList : arg00, item : arg01)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [7, 8, 9, 10, 13]\nvar arg11 : Int = 10\nvar x1 : Bool = binarySearch(itemList : arg10, item : arg11)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [11, 13, 14, 19, 22, 36]\nvar arg21 : Int = 23\nvar x2 : Bool = binarySearch(itemList : arg20, item : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to search an element in the given array by using binary search.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/493", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n *\n * >>> calculatePolygons(1, 1, 4, 4, 3)\n * [[[-5.0, -4.196152422706632], [-5.0, -0.7320508075688767], [-2.0, 1.0], [1.0, -0.7320508075688767], [1.0, -4.196152422706632], [-2.0, -5.928203230275509], [-5.0, -4.196152422706632]], [[1.0, -4.196152422706632], [1.0, -0.7320508075688767], [4.0, 1.0], [7.0, -0.7320508075688767], [7.0, -4.196152422706632], [4.0, -5.928203230275509], [1.0, -4.196152422706632]], [[7.0, -4.196152422706632], [7.0, -0.7320508075688767], [10.0, 1.0], [13.0, -0.7320508075688767], [13.0, -4.196152422706632], [10.0, -5.928203230275509], [7.0, -4.196152422706632]], [[-2.0, 1.0000000000000004], [-2.0, 4.464101615137755], [1.0, 6.196152422706632], [4.0, 4.464101615137755], [4.0, 1.0000000000000004], [1.0, -0.7320508075688767], [-2.0, 1.0000000000000004]], [[4.0, 1.0000000000000004], [4.0, 4.464101615137755], [7.0, 6.196152422706632], [10.0, 4.464101615137755], [10.0, 1.0000000000000004], [7.0, -0.7320508075688767], [4.0, 1.0000000000000004]], [[-5.0, 6.196152422706632], [-5.0, 9.660254037844387], [-2.0, 11.392304845413264], [1.0, 9.660254037844387], [1.0, 6.196152422706632], [-2.0, 4.464101615137755], [-5.0, 6.196152422706632]], [[1.0, 6.196152422706632], [1.0, 9.660254037844387], [4.0, 11.392304845413264], [7.0, 9.660254037844387], [7.0, 6.196152422706632], [4.0, 4.464101615137755], [1.0, 6.196152422706632]], [[7.0, 6.196152422706632], [7.0, 9.660254037844387], [10.0, 11.392304845413264], [13.0, 9.660254037844387], [13.0, 6.196152422706632], [10.0, 4.464101615137755], [7.0, 6.196152422706632]], [[-2.0, 11.392304845413264], [-2.0, 14.85640646055102], [1.0, 16.588457268119896], [4.0, 14.85640646055102], [4.0, 11.392304845413264], [1.0, 9.660254037844387], [-2.0, 11.392304845413264]], [[4.0, 11.392304845413264], [4.0, 14.85640646055102], [7.0, 16.588457268119896], [10.0, 14.85640646055102], [10.0, 11.392304845413264], [7.0, 9.660254037844387], [4.0, 11.392304845413264]]]\n * >>> calculatePolygons(5, 4, 7, 9, 8)\n * [[[-11.0, -9.856406460551018], [-11.0, -0.6188021535170058], [-3.0, 4.0], [5.0, -0.6188021535170058], [5.0, -9.856406460551018], [-3.0, -14.475208614068023], [-11.0, -9.856406460551018]], [[5.0, -9.856406460551018], [5.0, -0.6188021535170058], [13.0, 4.0], [21.0, -0.6188021535170058], [21.0, -9.856406460551018], [13.0, -14.475208614068023], [5.0, -9.856406460551018]], [[21.0, -9.856406460551018], [21.0, -0.6188021535170058], [29.0, 4.0], [37.0, -0.6188021535170058], [37.0, -9.856406460551018], [29.0, -14.475208614068023], [21.0, -9.856406460551018]], [[-3.0, 4.0], [-3.0, 13.237604307034012], [5.0, 17.856406460551018], [13.0, 13.237604307034012], [13.0, 4.0], [5.0, -0.6188021535170058], [-3.0, 4.0]], [[13.0, 4.0], [13.0, 13.237604307034012], [21.0, 17.856406460551018], [29.0, 13.237604307034012], [29.0, 4.0], [21.0, -0.6188021535170058], [13.0, 4.0]], [[-11.0, 17.856406460551018], [-11.0, 27.09401076758503], [-3.0, 31.712812921102035], [5.0, 27.09401076758503], [5.0, 17.856406460551018], [-3.0, 13.237604307034012], [-11.0, 17.856406460551018]], [[5.0, 17.856406460551018], [5.0, 27.09401076758503], [13.0, 31.712812921102035], [21.0, 27.09401076758503], [21.0, 17.856406460551018], [13.0, 13.237604307034012], [5.0, 17.856406460551018]], [[21.0, 17.856406460551018], [21.0, 27.09401076758503], [29.0, 31.712812921102035], [37.0, 27.09401076758503], [37.0, 17.856406460551018], [29.0, 13.237604307034012], [21.0, 17.856406460551018]], [[-3.0, 31.712812921102035], [-3.0, 40.95041722813605], [5.0, 45.569219381653056], [13.0, 40.95041722813605], [13.0, 31.712812921102035], [5.0, 27.09401076758503], [-3.0, 31.712812921102035]], [[13.0, 31.712812921102035], [13.0, 40.95041722813605], [21.0, 45.569219381653056], [29.0, 40.95041722813605], [29.0, 31.712812921102035], [21.0, 27.09401076758503], [13.0, 31.712812921102035]]]\n * >>> calculatePolygons(9, 6, 4, 3, 2)\n * [[[5.0, 2.5358983848622456], [5.0, 4.8452994616207485], [7.0, 6.0], [9.0, 4.8452994616207485], [9.0, 2.5358983848622456], [7.0, 1.3811978464829942], [5.0, 2.5358983848622456]], [[7.0, 6.0], [7.0, 8.309401076758503], [9.0, 9.464101615137753], [11.0, 8.309401076758503], [11.0, 6.0], [9.0, 4.8452994616207485], [7.0, 6.0]]]\n */\nfunc calculatePolygons(startx : Int, starty : Int, endx : Int, endy : Int, radius : Int) -> [[[Double]]] {\n", "entry_point": "calculatePolygons", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = 1\nvar arg02 : Int = 4\nvar arg03 : Int = 4\nvar arg04 : Int = 3\nvar x0 : [[[Double]]] = calculatePolygons(startx : arg00, starty : arg01, endx : arg02, endy : arg03, radius : arg04)\nvar v0 : [[[Double]]] = [[[-5.0, -4.196152422706632], [-5.0, -0.7320508075688767], [-2.0, 1.0], [1.0, -0.7320508075688767], [1.0, -4.196152422706632], [-2.0, -5.928203230275509], [-5.0, -4.196152422706632]], [[1.0, -4.196152422706632], [1.0, -0.7320508075688767], [4.0, 1.0], [7.0, -0.7320508075688767], [7.0, -4.196152422706632], [4.0, -5.928203230275509], [1.0, -4.196152422706632]], [[7.0, -4.196152422706632], [7.0, -0.7320508075688767], [10.0, 1.0], [13.0, -0.7320508075688767], [13.0, -4.196152422706632], [10.0, -5.928203230275509], [7.0, -4.196152422706632]], [[-2.0, 1.0000000000000004], [-2.0, 4.464101615137755], [1.0, 6.196152422706632], [4.0, 4.464101615137755], [4.0, 1.0000000000000004], [1.0, -0.7320508075688767], [-2.0, 1.0000000000000004]], [[4.0, 1.0000000000000004], [4.0, 4.464101615137755], [7.0, 6.196152422706632], [10.0, 4.464101615137755], [10.0, 1.0000000000000004], [7.0, -0.7320508075688767], [4.0, 1.0000000000000004]], [[-5.0, 6.196152422706632], [-5.0, 9.660254037844387], [-2.0, 11.392304845413264], [1.0, 9.660254037844387], [1.0, 6.196152422706632], [-2.0, 4.464101615137755], [-5.0, 6.196152422706632]], [[1.0, 6.196152422706632], [1.0, 9.660254037844387], [4.0, 11.392304845413264], [7.0, 9.660254037844387], [7.0, 6.196152422706632], [4.0, 4.464101615137755], [1.0, 6.196152422706632]], [[7.0, 6.196152422706632], [7.0, 9.660254037844387], [10.0, 11.392304845413264], [13.0, 9.660254037844387], [13.0, 6.196152422706632], [10.0, 4.464101615137755], [7.0, 6.196152422706632]], [[-2.0, 11.392304845413264], [-2.0, 14.85640646055102], [1.0, 16.588457268119896], [4.0, 14.85640646055102], [4.0, 11.392304845413264], [1.0, 9.660254037844387], [-2.0, 11.392304845413264]], [[4.0, 11.392304845413264], [4.0, 14.85640646055102], [7.0, 16.588457268119896], [10.0, 14.85640646055102], [10.0, 11.392304845413264], [7.0, 9.660254037844387], [4.0, 11.392304845413264]]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar arg11 : Int = 4\nvar arg12 : Int = 7\nvar arg13 : Int = 9\nvar arg14 : Int = 8\nvar x1 : [[[Double]]] = calculatePolygons(startx : arg10, starty : arg11, endx : arg12, endy : arg13, radius : arg14)\nvar v1 : [[[Double]]] = [[[-11.0, -9.856406460551018], [-11.0, -0.6188021535170058], [-3.0, 4.0], [5.0, -0.6188021535170058], [5.0, -9.856406460551018], [-3.0, -14.475208614068023], [-11.0, -9.856406460551018]], [[5.0, -9.856406460551018], [5.0, -0.6188021535170058], [13.0, 4.0], [21.0, -0.6188021535170058], [21.0, -9.856406460551018], [13.0, -14.475208614068023], [5.0, -9.856406460551018]], [[21.0, -9.856406460551018], [21.0, -0.6188021535170058], [29.0, 4.0], [37.0, -0.6188021535170058], [37.0, -9.856406460551018], [29.0, -14.475208614068023], [21.0, -9.856406460551018]], [[-3.0, 4.0], [-3.0, 13.237604307034012], [5.0, 17.856406460551018], [13.0, 13.237604307034012], [13.0, 4.0], [5.0, -0.6188021535170058], [-3.0, 4.0]], [[13.0, 4.0], [13.0, 13.237604307034012], [21.0, 17.856406460551018], [29.0, 13.237604307034012], [29.0, 4.0], [21.0, -0.6188021535170058], [13.0, 4.0]], [[-11.0, 17.856406460551018], [-11.0, 27.09401076758503], [-3.0, 31.712812921102035], [5.0, 27.09401076758503], [5.0, 17.856406460551018], [-3.0, 13.237604307034012], [-11.0, 17.856406460551018]], [[5.0, 17.856406460551018], [5.0, 27.09401076758503], [13.0, 31.712812921102035], [21.0, 27.09401076758503], [21.0, 17.856406460551018], [13.0, 13.237604307034012], [5.0, 17.856406460551018]], [[21.0, 17.856406460551018], [21.0, 27.09401076758503], [29.0, 31.712812921102035], [37.0, 27.09401076758503], [37.0, 17.856406460551018], [29.0, 13.237604307034012], [21.0, 17.856406460551018]], [[-3.0, 31.712812921102035], [-3.0, 40.95041722813605], [5.0, 45.569219381653056], [13.0, 40.95041722813605], [13.0, 31.712812921102035], [5.0, 27.09401076758503], [-3.0, 31.712812921102035]], [[13.0, 31.712812921102035], [13.0, 40.95041722813605], [21.0, 45.569219381653056], [29.0, 40.95041722813605], [29.0, 31.712812921102035], [21.0, 27.09401076758503], [13.0, 31.712812921102035]]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 9\nvar arg21 : Int = 6\nvar arg22 : Int = 4\nvar arg23 : Int = 3\nvar arg24 : Int = 2\nvar x2 : [[[Double]]] = calculatePolygons(startx : arg20, starty : arg21, endx : arg22, endy : arg23, radius : arg24)\nvar v2 : [[[Double]]] = [[[5.0, 2.5358983848622456], [5.0, 4.8452994616207485], [7.0, 6.0], [9.0, 4.8452994616207485], [9.0, 2.5358983848622456], [7.0, 1.3811978464829942], [5.0, 2.5358983848622456]], [[7.0, 6.0], [7.0, 8.309401076758503], [9.0, 9.464101615137753], [11.0, 8.309401076758503], [11.0, 6.0], [9.0, 4.8452994616207485], [7.0, 6.0]]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/494", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given binary tuple to integer.\n *\n * >>> binaryToInteger([1, 1, 0, 1, 0, 0, 1])\n * \"105\"\n * >>> binaryToInteger([0, 1, 1, 0, 0, 1, 0, 1])\n * \"101\"\n * >>> binaryToInteger([1, 1, 0, 1, 0, 1])\n * \"53\"\n */\nfunc binaryToInteger(testTup : [Int]) -> String {\n", "entry_point": "binaryToInteger", "test": "\n\nvar arg00 : [Int] = [1, 1, 0, 1, 0, 0, 1]\nvar x0 : String = binaryToInteger(testTup : arg00)\nvar v0 : String = #\"105\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [0, 1, 1, 0, 0, 1, 0, 1]\nvar x1 : String = binaryToInteger(testTup : arg10)\nvar v1 : String = #\"101\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 1, 0, 1, 0, 1]\nvar x2 : String = binaryToInteger(testTup : arg20)\nvar v2 : String = #\"53\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert the given binary tuple to integer.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/495", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove lowercase substrings from a given string by using regex.\n *\n * >>> removeLowercase(\"KDeoALOklOOHserfLoAJSIskdsf\")\n * \"KDALOOOHLAJSI\"\n * >>> removeLowercase(\"ProducTnamEstreAmIngMediAplAYer\")\n * \"PTEAIMAAY\"\n * >>> removeLowercase(\"maNufacTuredbYSheZenTechNolOGIes\")\n * \"NTYSZTNOGI\"\n */\nfunc removeLowercase(str1 : String) -> String {\n", "entry_point": "removeLowercase", "test": "\n\nvar arg00 : String = #\"KDeoALOklOOHserfLoAJSIskdsf\"#\nvar x0 : String = removeLowercase(str1 : arg00)\nvar v0 : String = #\"KDALOOOHLAJSI\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"ProducTnamEstreAmIngMediAplAYer\"#\nvar x1 : String = removeLowercase(str1 : arg10)\nvar v1 : String = #\"PTEAIMAAY\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"maNufacTuredbYSheZenTechNolOGIes\"#\nvar x2 : String = removeLowercase(str1 : arg20)\nvar v2 : String = #\"NTYSZTNOGI\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove lowercase substrings from a given string by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/496", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n *\n * >>> heapQueueSmallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3)\n * [14, 22, 25]\n * >>> heapQueueSmallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2)\n * [14, 22]\n * >>> heapQueueSmallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)\n * [14, 22, 22, 25, 35]\n */\nfunc heapQueueSmallest(nums : [Int], n : Int) -> [Int] {\n", "entry_point": "heapQueueSmallest", "test": "\n\nvar arg00 : [Int] = [25, 35, 22, 85, 14, 65, 75, 25, 58]\nvar arg01 : Int = 3\nvar x0 : [Int] = heapQueueSmallest(nums : arg00, n : arg01)\nvar v0 : [Int] = [14, 22, 25]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [25, 35, 22, 85, 14, 65, 75, 25, 58]\nvar arg11 : Int = 2\nvar x1 : [Int] = heapQueueSmallest(nums : arg10, n : arg11)\nvar v1 : [Int] = [14, 22]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [25, 35, 22, 85, 14, 65, 75, 22, 58]\nvar arg21 : Int = 5\nvar x2 : [Int] = heapQueueSmallest(nums : arg20, n : arg21)\nvar v2 : [Int] = [14, 22, 22, 25, 35]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/497", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the surface area of a cone.\n *\n * >>> surfaceareaCone(5, 12)\n * 282.7433388230814\n * >>> surfaceareaCone(10, 15)\n * 880.5179353159282\n * >>> surfaceareaCone(19, 17)\n * 2655.923961165254\n */\nfunc surfaceareaCone(r : Int, h : Int) -> Double {\n", "entry_point": "surfaceareaCone", "test": "\n\nvar arg00 : Int = 5\nvar arg01 : Int = 12\nvar x0 : Double = surfaceareaCone(r : arg00, h : arg01)\nvar v0 : Double = 282.7433388230814\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar arg11 : Int = 15\nvar x1 : Double = surfaceareaCone(r : arg10, h : arg11)\nvar v1 : Double = 880.5179353159282\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 19\nvar arg21 : Int = 17\nvar x2 : Double = surfaceareaCone(r : arg20, h : arg21)\nvar v2 : Double = 2655.923961165254\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the surface area of a cone.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/498", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find gcd of two positive integers.\n *\n * >>> gcd(12, 17)\n * 1\n * >>> gcd(4, 6)\n * 2\n * >>> gcd(2, 9)\n * 1\n */\nfunc gcd(x : Int, y : Int) -> Int {\n", "entry_point": "gcd", "test": "\n\nvar arg00 : Int = 12\nvar arg01 : Int = 17\nvar x0 : Int = gcd(x : arg00, y : arg01)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar arg11 : Int = 6\nvar x1 : Int = gcd(x : arg10, y : arg11)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar arg21 : Int = 9\nvar x2 : Int = gcd(x : arg20, y : arg21)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find gcd of two positive integers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/499", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the diameter of a circle.\n *\n * >>> diameterCircle(10)\n * 20\n * >>> diameterCircle(40)\n * 80\n * >>> diameterCircle(15)\n * 30\n */\nfunc diameterCircle(r : Int) -> Int {\n", "entry_point": "diameterCircle", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = diameterCircle(r : arg00)\nvar v0 : Int = 20\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 40\nvar x1 : Int = diameterCircle(r : arg10)\nvar v1 : Int = 80\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 15\nvar x2 : Int = diameterCircle(r : arg20)\nvar v2 : Int = 30\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the diameter of a circle.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/500", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to concatenate all elements of the given list into a string.\n *\n * >>> concatenateElements([\"hello\", \"there\", \"have\", \"a\", \"rocky\", \"day\"])\n * \"  hello there have a rocky day\"\n * >>> concatenateElements([\"Hi\", \"there\", \"How\", \"are\", \"you\"])\n * \"  Hi there How are you\"\n * >>> concatenateElements([\"Part\", \"of\", \"the\", \"journey\", \"is\", \"end\"])\n * \"  Part of the journey is end\"\n */\nfunc concatenateElements(list : [String]) -> String {\n", "entry_point": "concatenateElements", "test": "\n\nvar arg00 : [String] = [#\"hello\"#, #\"there\"#, #\"have\"#, #\"a\"#, #\"rocky\"#, #\"day\"#]\nvar x0 : String = concatenateElements(list : arg00)\nvar v0 : String = #\"  hello there have a rocky day\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"Hi\"#, #\"there\"#, #\"How\"#, #\"are\"#, #\"you\"#]\nvar x1 : String = concatenateElements(list : arg10)\nvar v1 : String = #\"  Hi there How are you\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"Part\"#, #\"of\"#, #\"the\"#, #\"journey\"#, #\"is\"#, #\"end\"#]\nvar x2 : String = concatenateElements(list : arg20)\nvar v2 : String = #\"  Part of the journey is end\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to concatenate all elements of the given list into a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/501", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find common divisor between two numbers in a given pair.\n *\n * >>> numCommDiv(2, 4)\n * 2\n * >>> numCommDiv(2, 8)\n * 2\n * >>> numCommDiv(12, 24)\n * 6\n */\nfunc numCommDiv(x : Int, y : Int) -> Int {\n", "entry_point": "numCommDiv", "test": "\n\nvar arg00 : Int = 2\nvar arg01 : Int = 4\nvar x0 : Int = numCommDiv(x : arg00, y : arg01)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar arg11 : Int = 8\nvar x1 : Int = numCommDiv(x : arg10, y : arg11)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 12\nvar arg21 : Int = 24\nvar x2 : Int = numCommDiv(x : arg20, y : arg21)\nvar v2 : Int = 6\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find common divisor between two numbers in a given pair.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/502", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find remainder of two numbers.\n *\n * >>> find(3, 3)\n * 0\n * >>> find(10, 3)\n * 1\n * >>> find(16, 5)\n * 1\n */\nfunc find(n : Int, m : Int) -> Int {\n", "entry_point": "find", "test": "\n\nvar arg00 : Int = 3\nvar arg01 : Int = 3\nvar x0 : Int = find(n : arg00, m : arg01)\nvar v0 : Int = 0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar arg11 : Int = 3\nvar x1 : Int = find(n : arg10, m : arg11)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 16\nvar arg21 : Int = 5\nvar x2 : Int = find(n : arg20, m : arg21)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find remainder of two numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/503", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add consecutive numbers of a given list.\n *\n * >>> addConsecutiveNums([1, 1, 3, 4, 4, 5, 6, 7])\n * [2, 4, 7, 8, 9, 11, 13]\n * >>> addConsecutiveNums([4, 5, 8, 9, 6, 10])\n * [9, 13, 17, 15, 16]\n * >>> addConsecutiveNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [3, 5, 7, 9, 11, 13, 15, 17, 19]\n */\nfunc addConsecutiveNums(nums : [Int]) -> [Int] {\n", "entry_point": "addConsecutiveNums", "test": "\n\nvar arg00 : [Int] = [1, 1, 3, 4, 4, 5, 6, 7]\nvar x0 : [Int] = addConsecutiveNums(nums : arg00)\nvar v0 : [Int] = [2, 4, 7, 8, 9, 11, 13]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 5, 8, 9, 6, 10]\nvar x1 : [Int] = addConsecutiveNums(nums : arg10)\nvar v1 : [Int] = [9, 13, 17, 15, 16]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar x2 : [Int] = addConsecutiveNums(nums : arg20)\nvar v2 : [Int] = [3, 5, 7, 9, 11, 13, 15, 17, 19]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to add consecutive numbers of a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/504", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the cube sum of first n natural numbers.\n *\n * >>> sumOfSeries(5)\n * 225\n * >>> sumOfSeries(2)\n * 9\n * >>> sumOfSeries(3)\n * 36\n */\nfunc sumOfSeries(n : Int) -> Int {\n", "entry_point": "sumOfSeries", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Int = sumOfSeries(n : arg00)\nvar v0 : Int = 225\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar x1 : Int = sumOfSeries(n : arg10)\nvar v1 : Int = 9\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 3\nvar x2 : Int = sumOfSeries(n : arg20)\nvar v2 : Int = 36\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the cube sum of first n natural numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/505", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to move all zeroes to the end of the given array.\n *\n * >>> reOrder([6, 0, 8, 2, 3, 0, 4, 0, 1])\n * [6, 8, 2, 3, 4, 1, 0, 0, 0]\n * >>> reOrder([4, 0, 2, 7, 0, 9, 0, 12, 0])\n * [4, 2, 7, 9, 12, 0, 0, 0, 0]\n * >>> reOrder([3, 11, 0, 74, 14, 0, 1, 0, 2])\n * [3, 11, 74, 14, 1, 2, 0, 0, 0]\n */\nfunc reOrder(a : [Int]) -> [Int] {\n", "entry_point": "reOrder", "test": "\n\nvar arg00 : [Int] = [6, 0, 8, 2, 3, 0, 4, 0, 1]\nvar x0 : [Int] = reOrder(a : arg00)\nvar v0 : [Int] = [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 0, 2, 7, 0, 9, 0, 12, 0]\nvar x1 : [Int] = reOrder(a : arg10)\nvar v1 : [Int] = [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3, 11, 0, 74, 14, 0, 1, 0, 2]\nvar x2 : [Int] = reOrder(a : arg20)\nvar v2 : [Int] = [3, 11, 74, 14, 1, 2, 0, 0, 0]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to move all zeroes to the end of the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/506", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the permutation coefficient of given p(n, k).\n *\n * >>> permutationCoefficient(10, 2)\n * 90\n * >>> permutationCoefficient(10, 3)\n * 720\n * >>> permutationCoefficient(10, 1)\n * 10\n */\nfunc permutationCoefficient(n : Int, k : Int) -> Int {\n", "entry_point": "permutationCoefficient", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 2\nvar x0 : Int = permutationCoefficient(n : arg00, k : arg01)\nvar v0 : Int = 90\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar arg11 : Int = 3\nvar x1 : Int = permutationCoefficient(n : arg10, k : arg11)\nvar v1 : Int = 720\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 10\nvar arg21 : Int = 1\nvar x2 : Int = permutationCoefficient(n : arg20, k : arg21)\nvar v2 : Int = 10\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate the permutation coefficient of given p(n, k).", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/507", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove specific words from a given list.\n *\n * >>> removeWords([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"], [\"white\", \"orange\"])\n * [\"red\", \"green\", \"blue\", \"black\"]\n * >>> removeWords([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"], [\"black\", \"orange\"])\n * [\"red\", \"green\", \"blue\", \"white\"]\n * >>> removeWords([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"], [\"blue\", \"white\"])\n * [\"red\", \"green\", \"black\", \"orange\"]\n */\nfunc removeWords(list1 : [String], removewords : [String]) -> [String] {\n", "entry_point": "removeWords", "test": "\n\nvar arg00 : [String] = [#\"red\"#, #\"green\"#, #\"blue\"#, #\"white\"#, #\"black\"#, #\"orange\"#]\nvar arg01 : [String] = [#\"white\"#, #\"orange\"#]\nvar x0 : [String] = removeWords(list1 : arg00, removewords : arg01)\nvar v0 : [String] = [#\"red\"#, #\"green\"#, #\"blue\"#, #\"black\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"red\"#, #\"green\"#, #\"blue\"#, #\"white\"#, #\"black\"#, #\"orange\"#]\nvar arg11 : [String] = [#\"black\"#, #\"orange\"#]\nvar x1 : [String] = removeWords(list1 : arg10, removewords : arg11)\nvar v1 : [String] = [#\"red\"#, #\"green\"#, #\"blue\"#, #\"white\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"red\"#, #\"green\"#, #\"blue\"#, #\"white\"#, #\"black\"#, #\"orange\"#]\nvar arg21 : [String] = [#\"blue\"#, #\"white\"#]\nvar x2 : [String] = removeWords(list1 : arg20, removewords : arg21)\nvar v2 : [String] = [#\"red\"#, #\"green\"#, #\"black\"#, #\"orange\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove specific words from a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/508", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the common elements between two given lists are in the same order or not.\n *\n * >>> sameOrder([\"red\", \"green\", \"black\", \"orange\"], [\"red\", \"pink\", \"green\", \"white\", \"black\"])\n * true\n * >>> sameOrder([\"red\", \"pink\", \"green\", \"white\", \"black\"], [\"white\", \"orange\", \"pink\", \"black\"])\n * false\n * >>> sameOrder([\"red\", \"green\", \"black\", \"orange\"], [\"red\", \"pink\", \"green\", \"white\", \"black\"])\n * true\n */\nfunc sameOrder(l1 : [String], l2 : [String]) -> Bool {\n", "entry_point": "sameOrder", "test": "\n\nvar arg00 : [String] = [#\"red\"#, #\"green\"#, #\"black\"#, #\"orange\"#]\nvar arg01 : [String] = [#\"red\"#, #\"pink\"#, #\"green\"#, #\"white\"#, #\"black\"#]\nvar x0 : Bool = sameOrder(l1 : arg00, l2 : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"red\"#, #\"pink\"#, #\"green\"#, #\"white\"#, #\"black\"#]\nvar arg11 : [String] = [#\"white\"#, #\"orange\"#, #\"pink\"#, #\"black\"#]\nvar x1 : Bool = sameOrder(l1 : arg10, l2 : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"red\"#, #\"green\"#, #\"black\"#, #\"orange\"#]\nvar arg21 : [String] = [#\"red\"#, #\"pink\"#, #\"green\"#, #\"white\"#, #\"black\"#]\nvar x2 : Bool = sameOrder(l1 : arg20, l2 : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if the common elements between two given lists are in the same order or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/509", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the average of odd numbers till a given odd number.\n *\n * >>> averageOdd(9)\n * 5\n * >>> averageOdd(5)\n * 3\n * >>> averageOdd(11)\n * 6\n */\nfunc averageOdd(n : Int) -> Int {\n", "entry_point": "averageOdd", "test": "\n\nvar arg00 : Int = 9\nvar x0 : Int = averageOdd(n : arg00)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar x1 : Int = averageOdd(n : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 11\nvar x2 : Int = averageOdd(n : arg20)\nvar v2 : Int = 6\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the average of odd numbers till a given odd number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/510", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n *\n * >>> noOfSubsequences([1, 2, 3, 4], 10)\n * 11\n * >>> noOfSubsequences([4, 8, 7, 2], 50)\n * 9\n * >>> noOfSubsequences([5, 6, 7, 8], 15)\n * 4\n */\nfunc noOfSubsequences(arr : [Int], k : Int) -> Int {\n", "entry_point": "noOfSubsequences", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4]\nvar arg01 : Int = 10\nvar x0 : Int = noOfSubsequences(arr : arg00, k : arg01)\nvar v0 : Int = 11\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 8, 7, 2]\nvar arg11 : Int = 50\nvar x1 : Int = noOfSubsequences(arr : arg10, k : arg11)\nvar v1 : Int = 9\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [5, 6, 7, 8]\nvar arg21 : Int = 15\nvar x2 : Int = noOfSubsequences(arr : arg20, k : arg21)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/511", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find minimum sum of factors of a given number.\n *\n * >>> findMinSum(12)\n * 7\n * >>> findMinSum(105)\n * 15\n * >>> findMinSum(2)\n * 2\n */\nfunc findMinSum(num : Int) -> Int {\n", "entry_point": "findMinSum", "test": "\n\nvar arg00 : Int = 12\nvar x0 : Int = findMinSum(num : arg00)\nvar v0 : Int = 7\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 105\nvar x1 : Int = findMinSum(num : arg10)\nvar v1 : Int = 15\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar x2 : Int = findMinSum(num : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find minimum sum of factors of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/512", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the element frequency in the mixed nested tuple.\n *\n * >>> countElementFreq([5, 6, [5, 6], 7, [8, 9], 9])\n * [5 : 2, 6 : 2, 7 : 1, 8 : 1, 9 : 2]\n * >>> countElementFreq([6, 7, [6, 7], 8, [9, 10], 10])\n * [6 : 2, 7 : 2, 8 : 1, 9 : 1, 10 : 2]\n * >>> countElementFreq([7, 8, [7, 8], 9, [10, 11], 11])\n * [7 : 2, 8 : 2, 9 : 1, 10 : 1, 11 : 2]\n */\nfunc countElementFreq(testTuple : [AnyHashable]) -> [Int: Int] {\n", "entry_point": "countElementFreq", "test": "\n\nvar arg00 : [AnyHashable] = [5, 6, [5, 6], 7, [8, 9], 9]\nvar x0 : [Int: Int] = countElementFreq(testTuple : arg00)\nvar v0 : [Int: Int] = [5 : 2, 6 : 2, 7 : 1, 8 : 1, 9 : 2]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [6, 7, [6, 7], 8, [9, 10], 10]\nvar x1 : [Int: Int] = countElementFreq(testTuple : arg10)\nvar v1 : [Int: Int] = [6 : 2, 7 : 2, 8 : 1, 9 : 1, 10 : 2]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [7, 8, [7, 8], 9, [10, 11], 11]\nvar x2 : [Int: Int] = countElementFreq(testTuple : arg20)\nvar v2 : [Int: Int] = [7 : 2, 8 : 2, 9 : 1, 10 : 1, 11 : 2]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count the element frequency in the mixed nested tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/513", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert tuple into list by adding the given string after every element.\n *\n * >>> addStr([5, 6, 7, 4, 9], \"FDF\")\n * [5, \"FDF\", 6, \"FDF\", 7, \"FDF\", 4, \"FDF\", 9, \"FDF\"]\n * >>> addStr([7, 8, 9, 10], \"PF\")\n * [7, \"PF\", 8, \"PF\", 9, \"PF\", 10, \"PF\"]\n * >>> addStr([11, 14, 12, 1, 4], \"JH\")\n * [11, \"JH\", 14, \"JH\", 12, \"JH\", 1, \"JH\", 4, \"JH\"]\n */\nfunc addStr(testTup : [Int], k : String) -> [AnyHashable] {\n", "entry_point": "addStr", "test": "\n\nvar arg00 : [Int] = [5, 6, 7, 4, 9]\nvar arg01 : String = #\"FDF\"#\nvar x0 : [AnyHashable] = addStr(testTup : arg00, k : arg01)\nvar v0 : [AnyHashable] = [5, #\"FDF\"#, 6, #\"FDF\"#, 7, #\"FDF\"#, 4, #\"FDF\"#, 9, #\"FDF\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [7, 8, 9, 10]\nvar arg11 : String = #\"PF\"#\nvar x1 : [AnyHashable] = addStr(testTup : arg10, k : arg11)\nvar v1 : [AnyHashable] = [7, #\"PF\"#, 8, #\"PF\"#, 9, #\"PF\"#, 10, #\"PF\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [11, 14, 12, 1, 4]\nvar arg21 : String = #\"JH\"#\nvar x2 : [AnyHashable] = addStr(testTup : arg20, k : arg21)\nvar v2 : [AnyHashable] = [11, #\"JH\"#, 14, #\"JH\"#, 12, #\"JH\"#, 1, #\"JH\"#, 4, #\"JH\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert tuple into list by adding the given string after every element.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/514", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the summation of tuple elements in the given tuple list.\n *\n * >>> sumElements([7, 8, 9, 1, 10, 7])\n * 42\n * >>> sumElements([1, 2, 3, 4, 5, 6])\n * 21\n * >>> sumElements([11, 12, 13, 45, 14])\n * 95\n */\nfunc sumElements(testTup : [Int]) -> Int {\n", "entry_point": "sumElements", "test": "\n\nvar arg00 : [Int] = [7, 8, 9, 1, 10, 7]\nvar x0 : Int = sumElements(testTup : arg00)\nvar v0 : Int = 42\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5, 6]\nvar x1 : Int = sumElements(testTup : arg10)\nvar v1 : Int = 21\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [11, 12, 13, 45, 14]\nvar x2 : Int = sumElements(testTup : arg20)\nvar v2 : Int = 95\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the summation of tuple elements in the given tuple list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/515", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if there is a subset with sum divisible by m.\n *\n * >>> modularSum([3, 1, 7, 5], 4, 6)\n * true\n * >>> modularSum([1, 7], 2, 5)\n * false\n * >>> modularSum([1, 6], 2, 5)\n * false\n */\nfunc modularSum(arr : [Int], n : Int, m : Int) -> Bool {\n", "entry_point": "modularSum", "test": "\n\nvar arg00 : [Int] = [3, 1, 7, 5]\nvar arg01 : Int = 4\nvar arg02 : Int = 6\nvar x0 : Bool = modularSum(arr : arg00, n : arg01, m : arg02)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 7]\nvar arg11 : Int = 2\nvar arg12 : Int = 5\nvar x1 : Bool = modularSum(arr : arg10, n : arg11, m : arg12)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 6]\nvar arg21 : Int = 2\nvar arg22 : Int = 5\nvar x2 : Bool = modularSum(arr : arg20, n : arg21, m : arg22)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if there is a subset with sum divisible by m.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/516", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of elements using radix sort.\n *\n * >>> radixSort([15, 79, 25, 68, 37])\n * [15, 25, 37, 68, 79]\n * >>> radixSort([9, 11, 8, 7, 3, 2])\n * [2, 3, 7, 8, 9, 11]\n * >>> radixSort([36, 12, 24, 26, 29])\n * [12, 24, 26, 29, 36]\n */\nfunc radixSort(nums : [Int]) -> [Int] {\n", "entry_point": "radixSort", "test": "\n\nvar arg00 : [Int] = [15, 79, 25, 68, 37]\nvar x0 : [Int] = radixSort(nums : arg00)\nvar v0 : [Int] = [15, 25, 37, 68, 79]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [9, 11, 8, 7, 3, 2]\nvar x1 : [Int] = radixSort(nums : arg10)\nvar v1 : [Int] = [2, 3, 7, 8, 9, 11]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [36, 12, 24, 26, 29]\nvar x2 : [Int] = radixSort(nums : arg20)\nvar v2 : [Int] = [12, 24, 26, 29, 36]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort a list of elements using radix sort.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/517", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the largest postive number from the given list.\n *\n * >>> largestPos([1, 2, 3, 4, -1])\n * 4\n * >>> largestPos([0, 1, 2, -5, -1, 6])\n * 6\n * >>> largestPos([0, 0, 1, 0])\n * 1\n */\nfunc largestPos(list1 : [Int]) -> Int {\n", "entry_point": "largestPos", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, -1]\nvar x0 : Int = largestPos(list1 : arg00)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [0, 1, 2, -5, -1, 6]\nvar x1 : Int = largestPos(list1 : arg10)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [0, 0, 1, 0]\nvar x2 : Int = largestPos(list1 : arg20)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the largest postive number from the given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/518", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the square root of a perfect number.\n *\n * >>> sqrtRoot(4)\n * 2\n * >>> sqrtRoot(16)\n * 4\n * >>> sqrtRoot(400)\n * 20\n */\nfunc sqrtRoot(num : Int) -> Int {\n", "entry_point": "sqrtRoot", "test": "\n\nvar arg00 : Int = 4\nvar x0 : Int = sqrtRoot(num : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 16\nvar x1 : Int = sqrtRoot(num : arg10)\nvar v1 : Int = 4\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 400\nvar x2 : Int = sqrtRoot(num : arg20)\nvar v2 : Int = 20\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the square root of a perfect number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/519", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate volume of a tetrahedron.\n *\n * >>> volumeTetrahedron(10)\n * 117.85\n * >>> volumeTetrahedron(15)\n * 397.75\n * >>> volumeTetrahedron(20)\n * 942.81\n */\nfunc volumeTetrahedron(num : Int) -> Double {\n", "entry_point": "volumeTetrahedron", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Double = volumeTetrahedron(num : arg00)\nvar v0 : Double = 117.85\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 15\nvar x1 : Double = volumeTetrahedron(num : arg10)\nvar v1 : Double = 397.75\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 20\nvar x2 : Double = volumeTetrahedron(num : arg20)\nvar v2 : Double = 942.81\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate volume of a tetrahedron.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/520", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lcm of the given array elements.\n *\n * >>> getLcm([2, 7, 3, 9, 4])\n * 252\n * >>> getLcm([1, 2, 8, 3])\n * 24\n * >>> getLcm([3, 8, 4, 10, 5])\n * 120\n */\nfunc getLcm(l : [Int]) -> Int {\n", "entry_point": "getLcm", "test": "\n\nvar arg00 : [Int] = [2, 7, 3, 9, 4]\nvar x0 : Int = getLcm(l : arg00)\nvar v0 : Int = 252\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 8, 3]\nvar x1 : Int = getLcm(l : arg10)\nvar v1 : Int = 24\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3, 8, 4, 10, 5]\nvar x2 : Int = getLcm(l : arg20)\nvar v2 : Int = 120\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the lcm of the given array elements.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/521", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print check if the triangle is scalene or not.\n *\n * >>> checkIsosceles(6, 8, 12)\n * true\n * >>> checkIsosceles(6, 6, 12)\n * false\n * >>> checkIsosceles(6, 15, 20)\n * true\n */\nfunc checkIsosceles(x : Int, y : Int, z : Int) -> Bool {\n", "entry_point": "checkIsosceles", "test": "\n\nvar arg00 : Int = 6\nvar arg01 : Int = 8\nvar arg02 : Int = 12\nvar x0 : Bool = checkIsosceles(x : arg00, y : arg01, z : arg02)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 6\nvar arg11 : Int = 6\nvar arg12 : Int = 12\nvar x1 : Bool = checkIsosceles(x : arg10, y : arg11, z : arg12)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 6\nvar arg21 : Int = 15\nvar arg22 : Int = 20\nvar x2 : Bool = checkIsosceles(x : arg20, y : arg21, z : arg22)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to print check if the triangle is scalene or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/522", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the longest bitonic subsequence for the given array.\n *\n * >>> lbs([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15])\n * 7\n * >>> lbs([1, 11, 2, 10, 4, 5, 2, 1])\n * 6\n * >>> lbs([80, 60, 30, 40, 20, 10])\n * 5\n */\nfunc lbs(arr : [Int]) -> Int {\n", "entry_point": "lbs", "test": "\n\nvar arg00 : [Int] = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\nvar x0 : Int = lbs(arr : arg00)\nvar v0 : Int = 7\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 11, 2, 10, 4, 5, 2, 1]\nvar x1 : Int = lbs(arr : arg10)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [80, 60, 30, 40, 20, 10]\nvar x2 : Int = lbs(arr : arg20)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the longest bitonic subsequence for the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/523", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n *\n * >>> checkString(\"python\")\n * [\"String must have 1 upper case character.\", \"String must have 1 number.\", \"String length should be atleast 8.\"]\n * >>> checkString(\"123python\")\n * [\"String must have 1 upper case character.\"]\n * >>> checkString(\"123Python\")\n * [\"Valid string.\"]\n */\nfunc checkString(str1 : String) -> [String] {\n", "entry_point": "checkString", "test": "\n\nvar arg00 : String = #\"python\"#\nvar x0 : [String] = checkString(str1 : arg00)\nvar v0 : [String] = [#\"String must have 1 upper case character.\"#, #\"String must have 1 number.\"#, #\"String length should be atleast 8.\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"123python\"#\nvar x1 : [String] = checkString(str1 : arg10)\nvar v1 : [String] = [#\"String must have 1 upper case character.\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"123Python\"#\nvar x2 : [String] = checkString(str1 : arg20)\nvar v2 : [String] = [#\"Valid string.\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/524", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sum of maximum increasing subsequence of the given array.\n *\n * >>> maxSumIncreasingSubsequence([1, 101, 2, 3, 100, 4, 5], 7)\n * 106\n * >>> maxSumIncreasingSubsequence([3, 4, 5, 10], 4)\n * 22\n * >>> maxSumIncreasingSubsequence([10, 5, 4, 3], 4)\n * 10\n */\nfunc maxSumIncreasingSubsequence(arr : [Int], n : Int) -> Int {\n", "entry_point": "maxSumIncreasingSubsequence", "test": "\n\nvar arg00 : [Int] = [1, 101, 2, 3, 100, 4, 5]\nvar arg01 : Int = 7\nvar x0 : Int = maxSumIncreasingSubsequence(arr : arg00, n : arg01)\nvar v0 : Int = 106\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [3, 4, 5, 10]\nvar arg11 : Int = 4\nvar x1 : Int = maxSumIncreasingSubsequence(arr : arg10, n : arg11)\nvar v1 : Int = 22\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [10, 5, 4, 3]\nvar arg21 : Int = 4\nvar x2 : Int = maxSumIncreasingSubsequence(arr : arg20, n : arg21)\nvar v2 : Int = 10\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the sum of maximum increasing subsequence of the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/525", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether two given lines are parallel or not.\n *\n * >>> parallelLines([2, 3, 4], [2, 3, 8])\n * true\n * >>> parallelLines([2, 3, 4], [4, -3, 8])\n * false\n * >>> parallelLines([3, 3], [5, 5])\n * true\n */\nfunc parallelLines(line1 : [Int], line2 : [Int]) -> Bool {\n", "entry_point": "parallelLines", "test": "\n\nvar arg00 : [Int] = [2, 3, 4]\nvar arg01 : [Int] = [2, 3, 8]\nvar x0 : Bool = parallelLines(line1 : arg00, line2 : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 3, 4]\nvar arg11 : [Int] = [4, -3, 8]\nvar x1 : Bool = parallelLines(line1 : arg10, line2 : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3, 3]\nvar arg21 : [Int] = [5, 5]\nvar x2 : Bool = parallelLines(line1 : arg20, line2 : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether two given lines are parallel or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/526", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to capitalize first and last letters of each word of a given string.\n *\n * >>> capitalizeFirstLastLetters(\"python\")\n * \"PythoN\"\n * >>> capitalizeFirstLastLetters(\"bigdata\")\n * \"BigdatA\"\n * >>> capitalizeFirstLastLetters(\"Hadoop\")\n * \"HadooP\"\n */\nfunc capitalizeFirstLastLetters(str1 : String) -> String {\n", "entry_point": "capitalizeFirstLastLetters", "test": "\n\nvar arg00 : String = #\"python\"#\nvar x0 : String = capitalizeFirstLastLetters(str1 : arg00)\nvar v0 : String = #\"PythoN\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"bigdata\"#\nvar x1 : String = capitalizeFirstLastLetters(str1 : arg10)\nvar v1 : String = #\"BigdatA\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Hadoop\"#\nvar x2 : String = capitalizeFirstLastLetters(str1 : arg20)\nvar v2 : String = #\"HadooP\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to capitalize first and last letters of each word of a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/527", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all pairs in an integer array whose sum is equal to a given number.\n *\n * >>> getPairsCount([1, 5, 7, -1, 5], 5, 6)\n * 3\n * >>> getPairsCount([1, 5, 7, -1], 4, 6)\n * 2\n * >>> getPairsCount([1, 1, 1, 1], 4, 2)\n * 6\n */\nfunc getPairsCount(arr : [Int], n : Int, sum : Int) -> Int {\n", "entry_point": "getPairsCount", "test": "\n\nvar arg00 : [Int] = [1, 5, 7, -1, 5]\nvar arg01 : Int = 5\nvar arg02 : Int = 6\nvar x0 : Int = getPairsCount(arr : arg00, n : arg01, sum : arg02)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 5, 7, -1]\nvar arg11 : Int = 4\nvar arg12 : Int = 6\nvar x1 : Int = getPairsCount(arr : arg10, n : arg11, sum : arg12)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 1, 1, 1]\nvar arg21 : Int = 4\nvar arg22 : Int = 2\nvar x2 : Int = getPairsCount(arr : arg20, n : arg21, sum : arg22)\nvar v2 : Int = 6\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find all pairs in an integer array whose sum is equal to a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/528", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the list of lists with minimum length.\n *\n * >>> minLength([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n * [1, [0]]\n * >>> minLength([[1], [5, 7], [10, 12, 14, 15]])\n * [1, [1]]\n * >>> minLength([[5], [15, 20, 25]])\n * [1, [5]]\n */\nfunc minLength(list1 : [[Int]]) -> [AnyHashable] {\n", "entry_point": "minLength", "test": "\n\nvar arg00 : [[Int]] = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]\nvar x0 : [AnyHashable] = minLength(list1 : arg00)\nvar v0 : [AnyHashable] = [1, [0]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1], [5, 7], [10, 12, 14, 15]]\nvar x1 : [AnyHashable] = minLength(list1 : arg10)\nvar v1 : [AnyHashable] = [1, [1]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[5], [15, 20, 25]]\nvar x2 : [AnyHashable] = minLength(list1 : arg20)\nvar v2 : [AnyHashable] = [1, [5]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the list of lists with minimum length.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/529", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth jacobsthal-lucas number.\n *\n * >>> jacobsthalLucas(5)\n * 31\n * >>> jacobsthalLucas(2)\n * 5\n * >>> jacobsthalLucas(4)\n * 17\n */\nfunc jacobsthalLucas(n : Int) -> Int {\n", "entry_point": "jacobsthalLucas", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Int = jacobsthalLucas(n : arg00)\nvar v0 : Int = 31\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar x1 : Int = jacobsthalLucas(n : arg10)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar x2 : Int = jacobsthalLucas(n : arg20)\nvar v2 : Int = 17\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the nth jacobsthal-lucas number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/530", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the ration of negative numbers in an array of integers.\n *\n * >>> negativeCount([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n * 0.31\n * >>> negativeCount([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n * 0.31\n * >>> negativeCount([2, 4, -6, -9, 11, -12, 14, -5, 17])\n * 0.44\n */\nfunc negativeCount(nums : [Int]) -> Double {\n", "entry_point": "negativeCount", "test": "\n\nvar arg00 : [Int] = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]\nvar x0 : Double = negativeCount(nums : arg00)\nvar v0 : Double = 0.31\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]\nvar x1 : Double = negativeCount(nums : arg10)\nvar v1 : Double = 0.31\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 4, -6, -9, 11, -12, 14, -5, 17]\nvar x2 : Double = negativeCount(nums : arg20)\nvar v2 : Double = 0.44\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the ration of negative numbers in an array of integers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/531", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find minimum number of coins that make a given value.\n *\n * >>> minCoins([9, 6, 5, 1], 4, 11)\n * 2\n * >>> minCoins([4, 5, 6, 7, 8, 9], 6, 9)\n * 1\n * >>> minCoins([1, 2, 3], 3, 4)\n * 2\n */\nfunc minCoins(coins : [Int], m : Int, v : Int) -> Int {\n", "entry_point": "minCoins", "test": "\n\nvar arg00 : [Int] = [9, 6, 5, 1]\nvar arg01 : Int = 4\nvar arg02 : Int = 11\nvar x0 : Int = minCoins(coins : arg00, m : arg01, v : arg02)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 5, 6, 7, 8, 9]\nvar arg11 : Int = 6\nvar arg12 : Int = 9\nvar x1 : Int = minCoins(coins : arg10, m : arg11, v : arg12)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3]\nvar arg21 : Int = 3\nvar arg22 : Int = 4\nvar x2 : Int = minCoins(coins : arg20, m : arg21, v : arg22)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find minimum number of coins that make a given value.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/532", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the two given strings are permutations of each other.\n *\n * >>> checkPermutation(\"abc\", \"cba\")\n * true\n * >>> checkPermutation(\"test\", \"ttew\")\n * false\n * >>> checkPermutation(\"xxyz\", \"yxzx\")\n * true\n */\nfunc checkPermutation(str1 : String, str2 : String) -> Bool {\n", "entry_point": "checkPermutation", "test": "\n\nvar arg00 : String = #\"abc\"#\nvar arg01 : String = #\"cba\"#\nvar x0 : Bool = checkPermutation(str1 : arg00, str2 : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"test\"#\nvar arg11 : String = #\"ttew\"#\nvar x1 : Bool = checkPermutation(str1 : arg10, str2 : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"xxyz\"#\nvar arg21 : String = #\"yxzx\"#\nvar x2 : Bool = checkPermutation(str1 : arg20, str2 : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if the two given strings are permutations of each other.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/534", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n *\n * >>> searchLiteral(\"python\", \"python programming language\")\n * [0, 6]\n * >>> searchLiteral(\"programming\", \"python programming language\")\n * [7, 18]\n * >>> searchLiteral(\"language\", \"python programming language\")\n * [19, 27]\n */\nfunc searchLiteral(pattern : String, text : String) -> [Int] {\n", "entry_point": "searchLiteral", "test": "\n\nvar arg00 : String = #\"python\"#\nvar arg01 : String = #\"python programming language\"#\nvar x0 : [Int] = searchLiteral(pattern : arg00, text : arg01)\nvar v0 : [Int] = [0, 6]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"programming\"#\nvar arg11 : String = #\"python programming language\"#\nvar x1 : [Int] = searchLiteral(pattern : arg10, text : arg11)\nvar v1 : [Int] = [7, 18]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"language\"#\nvar arg21 : String = #\"python programming language\"#\nvar x2 : [Int] = searchLiteral(pattern : arg20, text : arg21)\nvar v2 : [Int] = [19, 27]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/535", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the top or bottom surface area of a cylinder.\n *\n * >>> topbottomSurfacearea(10)\n * 314.15000000000003\n * >>> topbottomSurfacearea(5)\n * 78.53750000000001\n * >>> topbottomSurfacearea(4)\n * 50.264\n */\nfunc topbottomSurfacearea(r : Int) -> Double {\n", "entry_point": "topbottomSurfacearea", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Double = topbottomSurfacearea(r : arg00)\nvar v0 : Double = 314.15000000000003\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar x1 : Double = topbottomSurfacearea(r : arg10)\nvar v1 : Double = 78.53750000000001\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar x2 : Double = topbottomSurfacearea(r : arg20)\nvar v2 : Double = 50.264\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the top or bottom surface area of a cylinder.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/536", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to select the nth items of a list.\n *\n * >>> nthItems([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)\n * [1, 3, 5, 7, 9]\n * >>> nthItems([10, 15, 19, 17, 16, 18], 3)\n * [10, 17]\n * >>> nthItems([14, 16, 19, 15, 17], 4)\n * [14, 17]\n */\nfunc nthItems(list : [Int], n : Int) -> [Int] {\n", "entry_point": "nthItems", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nvar arg01 : Int = 2\nvar x0 : [Int] = nthItems(list : arg00, n : arg01)\nvar v0 : [Int] = [1, 3, 5, 7, 9]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [10, 15, 19, 17, 16, 18]\nvar arg11 : Int = 3\nvar x1 : [Int] = nthItems(list : arg10, n : arg11)\nvar v1 : [Int] = [10, 17]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [14, 16, 19, 15, 17]\nvar arg21 : Int = 4\nvar x2 : [Int] = nthItems(list : arg20, n : arg21)\nvar v2 : [Int] = [14, 17]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to select the nth items of a list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/537", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first repeated word in a given string.\n *\n * >>> firstRepeatedWord(\"ab ca bc ab\")\n * \"ab\"\n * >>> firstRepeatedWord(\"ab ca bc\")\n * \"None\"\n * >>> firstRepeatedWord(\"ab ca bc ca ab bc\")\n * \"ca\"\n */\nfunc firstRepeatedWord(str1 : String) -> String {\n", "entry_point": "firstRepeatedWord", "test": "\n\nvar arg00 : String = #\"ab ca bc ab\"#\nvar x0 : String = firstRepeatedWord(str1 : arg00)\nvar v0 : String = #\"ab\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"ab ca bc\"#\nvar x1 : String = firstRepeatedWord(str1 : arg10)\nvar v1 : String = #\"None\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"ab ca bc ca ab bc\"#\nvar x2 : String = firstRepeatedWord(str1 : arg20)\nvar v2 : String = #\"ca\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the first repeated word in a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/538", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert a given string list to a tuple.\n *\n * >>> stringListToTuple(\"python 3.0\")\n * [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"]\n * >>> stringListToTuple(\"bigdata\")\n * [\"b\", \"i\", \"g\", \"d\", \"a\", \"t\", \"a\"]\n * >>> stringListToTuple(\"language\")\n * [\"l\", \"a\", \"n\", \"g\", \"u\", \"a\", \"g\", \"e\"]\n */\nfunc stringListToTuple(str1 : String) -> [String] {\n", "entry_point": "stringListToTuple", "test": "\n\nvar arg00 : String = #\"python 3.0\"#\nvar x0 : [String] = stringListToTuple(str1 : arg00)\nvar v0 : [String] = [#\"p\"#, #\"y\"#, #\"t\"#, #\"h\"#, #\"o\"#, #\"n\"#, #\"3\"#, #\".\"#, #\"0\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"bigdata\"#\nvar x1 : [String] = stringListToTuple(str1 : arg10)\nvar v1 : [String] = [#\"b\"#, #\"i\"#, #\"g\"#, #\"d\"#, #\"a\"#, #\"t\"#, #\"a\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"language\"#\nvar x2 : [String] = stringListToTuple(str1 : arg20)\nvar v2 : [String] = [#\"l\"#, #\"a\"#, #\"n\"#, #\"g\"#, #\"u\"#, #\"a\"#, #\"g\"#, #\"e\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to convert a given string list to a tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/539", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n *\n * >>> basesnumCoresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\n * >>> basesnumCoresspondingnum([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70])\n * [1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\n * >>> basesnumCoresspondingnum([4, 8, 12, 16, 20, 24, 28], [3, 6, 9, 12, 15, 18, 21])\n * [64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]\n */\nfunc basesnumCoresspondingnum(basesNum : [Int], index : [Int]) -> [Int] {\n", "entry_point": "basesnumCoresspondingnum", "test": "\n\nvar arg00 : [Int] = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nvar arg01 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar x0 : [Int] = basesnumCoresspondingnum(basesNum : arg00, index : arg01)\nvar v0 : [Int] = [10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5, 6, 7]\nvar arg11 : [Int] = [10, 20, 30, 40, 50, 60, 70]\nvar x1 : [Int] = basesnumCoresspondingnum(basesNum : arg10, index : arg11)\nvar v1 : [Int] = [1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [4, 8, 12, 16, 20, 24, 28]\nvar arg21 : [Int] = [3, 6, 9, 12, 15, 18, 21]\nvar x2 : [Int] = basesnumCoresspondingnum(basesNum : arg20, index : arg21)\nvar v2 : [Int] = [64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/540", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the difference between highest and least frequencies in a given array.\n *\n * >>> findDiff([1, 1, 2, 2, 7, 8, 4, 5, 1, 4], 10)\n * 2\n * >>> findDiff([1, 7, 9, 2, 3, 3, 1, 3, 3], 9)\n * 3\n * >>> findDiff([1, 2, 1, 2], 4)\n * 0\n */\nfunc findDiff(arr : [Int], n : Int) -> Int {\n", "entry_point": "findDiff", "test": "\n\nvar arg00 : [Int] = [1, 1, 2, 2, 7, 8, 4, 5, 1, 4]\nvar arg01 : Int = 10\nvar x0 : Int = findDiff(arr : arg00, n : arg01)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 7, 9, 2, 3, 3, 1, 3, 3]\nvar arg11 : Int = 9\nvar x1 : Int = findDiff(arr : arg10, n : arg11)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 1, 2]\nvar arg21 : Int = 4\nvar x2 : Int = findDiff(arr : arg20, n : arg21)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the difference between highest and least frequencies in a given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/541", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find if the given number is abundant or not.\n *\n * >>> checkAbundant(12)\n * true\n * >>> checkAbundant(15)\n * false\n * >>> checkAbundant(18)\n * true\n */\nfunc checkAbundant(n : Int) -> Bool {\n", "entry_point": "checkAbundant", "test": "\n\nvar arg00 : Int = 12\nvar x0 : Bool = checkAbundant(n : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 15\nvar x1 : Bool = checkAbundant(n : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 18\nvar x2 : Bool = checkAbundant(n : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find if the given number is abundant or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/542", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n *\n * >>> fillSpaces(\"Boult Curve Wireless Neckband\")\n * \"Boult:Curve:Wireless:Neckband\"\n * >>> fillSpaces(\"Stereo Sound Sweatproof\")\n * \"Stereo:Sound:Sweatproof\"\n * >>> fillSpaces(\"Probass Curve Audio\")\n * \"Probass:Curve:Audio\"\n */\nfunc fillSpaces(text : String) -> String {\n", "entry_point": "fillSpaces", "test": "\n\nvar arg00 : String = #\"Boult Curve Wireless Neckband\"#\nvar x0 : String = fillSpaces(text : arg00)\nvar v0 : String = #\"Boult:Curve:Wireless:Neckband\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Stereo Sound Sweatproof\"#\nvar x1 : String = fillSpaces(text : arg10)\nvar v1 : String = #\"Stereo:Sound:Sweatproof\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Probass Curve Audio\"#\nvar x2 : String = fillSpaces(text : arg20)\nvar v2 : String = #\"Probass:Curve:Audio\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/543", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add two numbers and print number of digits of sum.\n *\n * >>> countDigits(9875, 10)\n * 4\n * >>> countDigits(98759853034, 100)\n * 11\n * >>> countDigits(1234567, 500)\n * 7\n */\nfunc countDigits(num1 : Int, num2 : Int) -> Int {\n", "entry_point": "countDigits", "test": "\n\nvar arg00 : Int = 9875\nvar arg01 : Int = 10\nvar x0 : Int = countDigits(num1 : arg00, num2 : arg01)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 98759853034\nvar arg11 : Int = 100\nvar x1 : Int = countDigits(num1 : arg10, num2 : arg11)\nvar v1 : Int = 11\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1234567\nvar arg21 : Int = 500\nvar x2 : Int = countDigits(num1 : arg20, num2 : arg21)\nvar v2 : Int = 7\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to add two numbers and print number of digits of sum.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/544", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to flatten the tuple list to a string.\n *\n * >>> flattenTuple([[\"1\", \"4\", \"6\"], [\"5\", \"8\"], [\"2\", \"9\"], [\"1\", \"10\"]])\n * \"1 4 6 5 8 2 9 1 10\"\n * >>> flattenTuple([[\"2\", \"3\", \"4\"], [\"6\", \"9\"], [\"3\", \"2\"], [\"2\", \"11\"]])\n * \"2 3 4 6 9 3 2 2 11\"\n * >>> flattenTuple([[\"14\", \"21\", \"9\"], [\"24\", \"19\"], [\"12\", \"29\"], [\"23\", \"17\"]])\n * \"14 21 9 24 19 12 29 23 17\"\n */\nfunc flattenTuple(testList : [[String]]) -> String {\n", "entry_point": "flattenTuple", "test": "\n\nvar arg00 : [[String]] = [[#\"1\"#, #\"4\"#, #\"6\"#], [#\"5\"#, #\"8\"#], [#\"2\"#, #\"9\"#], [#\"1\"#, #\"10\"#]]\nvar x0 : String = flattenTuple(testList : arg00)\nvar v0 : String = #\"1 4 6 5 8 2 9 1 10\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[String]] = [[#\"2\"#, #\"3\"#, #\"4\"#], [#\"6\"#, #\"9\"#], [#\"3\"#, #\"2\"#], [#\"2\"#, #\"11\"#]]\nvar x1 : String = flattenTuple(testList : arg10)\nvar v1 : String = #\"2 3 4 6 9 3 2 2 11\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[String]] = [[#\"14\"#, #\"21\"#, #\"9\"#], [#\"24\"#, #\"19\"#], [#\"12\"#, #\"29\"#], [#\"23\"#, #\"17\"#]]\nvar x2 : String = flattenTuple(testList : arg20)\nvar v2 : String = #\"14 21 9 24 19 12 29 23 17\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to flatten the tuple list to a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/545", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to toggle only first and last bits of a given number.\n *\n * >>> toggleFAndLBits(10)\n * 3\n * >>> toggleFAndLBits(15)\n * 6\n * >>> toggleFAndLBits(20)\n * 5\n */\nfunc toggleFAndLBits(n : Int) -> Int {\n", "entry_point": "toggleFAndLBits", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = toggleFAndLBits(n : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 15\nvar x1 : Int = toggleFAndLBits(n : arg10)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 20\nvar x2 : Int = toggleFAndLBits(n : arg20)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to toggle only first and last bits of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/546", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the last occurrence of a character in a string.\n *\n * >>> lastOccurenceChar(\"hello world\", \"l\")\n * 10\n * >>> lastOccurenceChar(\"language\", \"g\")\n * 7\n * >>> lastOccurenceChar(\"little\", \"y\")\n * \"none\"\n */\nfunc lastOccurenceChar(string : String, ch : String) -> AnyHashable {\n", "entry_point": "lastOccurenceChar", "test": "\n\nvar arg00 : String = #\"hello world\"#\nvar arg01 : String = #\"l\"#\nvar x0 : AnyHashable = lastOccurenceChar(string : arg00, ch : arg01)\nvar v0 : AnyHashable = 10\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"language\"#\nvar arg11 : String = #\"g\"#\nvar x1 : AnyHashable = lastOccurenceChar(string : arg10, ch : arg11)\nvar v1 : AnyHashable = 7\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"little\"#\nvar arg21 : String = #\"y\"#\nvar x2 : AnyHashable = lastOccurenceChar(string : arg20, ch : arg21)\nvar v2 : AnyHashable = \"none\"\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the last occurrence of a character in a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/547", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of hamming distances of all consecutive numbers from o to n.\n *\n * >>> totalHammingDistance(4)\n * 7\n * >>> totalHammingDistance(2)\n * 3\n * >>> totalHammingDistance(5)\n * 8\n */\nfunc totalHammingDistance(n : Int) -> Int {\n", "entry_point": "totalHammingDistance", "test": "\n\nvar arg00 : Int = 4\nvar x0 : Int = totalHammingDistance(n : arg00)\nvar v0 : Int = 7\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar x1 : Int = totalHammingDistance(n : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar x2 : Int = totalHammingDistance(n : arg20)\nvar v2 : Int = 8\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of hamming distances of all consecutive numbers from o to n.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/548", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the length of the longest increasing subsequence of the given sequence.\n *\n * >>> longestIncreasingSubsequence([10, 22, 9, 33, 21, 50, 41, 60])\n * 5\n * >>> longestIncreasingSubsequence([3, 10, 2, 1, 20])\n * 3\n * >>> longestIncreasingSubsequence([50, 3, 10, 7, 40, 80])\n * 4\n */\nfunc longestIncreasingSubsequence(arr : [Int]) -> Int {\n", "entry_point": "longestIncreasingSubsequence", "test": "\n\nvar arg00 : [Int] = [10, 22, 9, 33, 21, 50, 41, 60]\nvar x0 : Int = longestIncreasingSubsequence(arr : arg00)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [3, 10, 2, 1, 20]\nvar x1 : Int = longestIncreasingSubsequence(arr : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [50, 3, 10, 7, 40, 80]\nvar x2 : Int = longestIncreasingSubsequence(arr : arg20)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the length of the longest increasing subsequence of the given sequence.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/549", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of fifth power of first n odd natural numbers.\n *\n * >>> oddNumSum(1)\n * 1\n * >>> oddNumSum(2)\n * 244\n * >>> oddNumSum(3)\n * 3369\n */\nfunc oddNumSum(n : Int) -> Int {\n", "entry_point": "oddNumSum", "test": "\n\nvar arg00 : Int = 1\nvar x0 : Int = oddNumSum(n : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar x1 : Int = oddNumSum(n : arg10)\nvar v1 : Int = 244\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 3\nvar x2 : Int = oddNumSum(n : arg20)\nvar v2 : Int = 3369\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of fifth power of first n odd natural numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/550", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum element in a sorted and rotated array.\n *\n * >>> findMax([2, 3, 5, 6, 9], 0, 4)\n * 9\n * >>> findMax([3, 4, 5, 2, 1], 0, 4)\n * 5\n * >>> findMax([1, 2, 3], 0, 2)\n * 3\n */\nfunc findMax(arr : [Int], low : Int, high : Int) -> Int {\n", "entry_point": "findMax", "test": "\n\nvar arg00 : [Int] = [2, 3, 5, 6, 9]\nvar arg01 : Int = 0\nvar arg02 : Int = 4\nvar x0 : Int = findMax(arr : arg00, low : arg01, high : arg02)\nvar v0 : Int = 9\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [3, 4, 5, 2, 1]\nvar arg11 : Int = 0\nvar arg12 : Int = 4\nvar x1 : Int = findMax(arr : arg10, low : arg11, high : arg12)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3]\nvar arg21 : Int = 0\nvar arg22 : Int = 2\nvar x2 : Int = findMax(arr : arg20, low : arg21, high : arg22)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the maximum element in a sorted and rotated array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/551", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract a specified column from a given nested list.\n *\n * >>> extractColumn([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)\n * [1, 2, 1]\n * >>> extractColumn([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2)\n * [3, -5, 1]\n * >>> extractColumn([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0)\n * [1, 5, 1, 13, 5, 9]\n */\nfunc extractColumn(list1 : [[Int]], n : Int) -> [Int] {\n", "entry_point": "extractColumn", "test": "\n\nvar arg00 : [[Int]] = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\nvar arg01 : Int = 0\nvar x0 : [Int] = extractColumn(list1 : arg00, n : arg01)\nvar v0 : [Int] = [1, 2, 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]\nvar arg11 : Int = 2\nvar x1 : [Int] = extractColumn(list1 : arg10, n : arg11)\nvar v1 : [Int] = [3, -5, 1]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]\nvar arg21 : Int = 0\nvar x2 : [Int] = extractColumn(list1 : arg20, n : arg21)\nvar v2 : [Int] = [1, 5, 1, 13, 5, 9]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract a specified column from a given nested list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/552", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether a given sequence is linear or not.\n *\n * >>> seqLinear([0, 2, 4, 6, 8, 10])\n * \"Linear Sequence\"\n * >>> seqLinear([1, 2, 3])\n * \"Linear Sequence\"\n * >>> seqLinear([1, 5, 2])\n * \"Non Linear Sequence\"\n */\nfunc seqLinear(seqNums : [Int]) -> String {\n", "entry_point": "seqLinear", "test": "\n\nvar arg00 : [Int] = [0, 2, 4, 6, 8, 10]\nvar x0 : String = seqLinear(seqNums : arg00)\nvar v0 : String = #\"Linear Sequence\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3]\nvar x1 : String = seqLinear(seqNums : arg10)\nvar v1 : String = #\"Linear Sequence\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 5, 2]\nvar x2 : String = seqLinear(seqNums : arg20)\nvar v2 : String = #\"Non Linear Sequence\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether a given sequence is linear or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/553", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given tuple to a floating-point number.\n *\n * >>> tupleToFloat([4, 56])\n * 4.56\n * >>> tupleToFloat([7, 256])\n * 7.256\n * >>> tupleToFloat([8, 123])\n * 8.123\n */\nfunc tupleToFloat(testTup : [Int]) -> Double {\n", "entry_point": "tupleToFloat", "test": "\n\nvar arg00 : [Int] = [4, 56]\nvar x0 : Double = tupleToFloat(testTup : arg00)\nvar v0 : Double = 4.56\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [7, 256]\nvar x1 : Double = tupleToFloat(testTup : arg10)\nvar v1 : Double = 7.256\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [8, 123]\nvar x2 : Double = tupleToFloat(testTup : arg20)\nvar v2 : Double = 8.123\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert the given tuple to a floating-point number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/554", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find odd numbers from a mixed list.\n *\n * >>> split([1, 2, 3, 4, 5, 6])\n * [1, 3, 5]\n * >>> split([10, 11, 12, 13])\n * [11, 13]\n * >>> split([7, 8, 9, 1])\n * [7, 9, 1]\n */\nfunc split(list : [Int]) -> [Int] {\n", "entry_point": "split", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5, 6]\nvar x0 : [Int] = split(list : arg00)\nvar v0 : [Int] = [1, 3, 5]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [10, 11, 12, 13]\nvar x1 : [Int] = split(list : arg10)\nvar v1 : [Int] = [11, 13]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [7, 8, 9, 1]\nvar x2 : [Int] = split(list : arg20)\nvar v2 : [Int] = [7, 9, 1]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find odd numbers from a mixed list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/555", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n *\n * >>> difference(3)\n * 30\n * >>> difference(5)\n * 210\n * >>> difference(2)\n * 6\n */\nfunc difference(n : Int) -> Int {\n", "entry_point": "difference", "test": "\n\nvar arg00 : Int = 3\nvar x0 : Int = difference(n : arg00)\nvar v0 : Int = 30\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar x1 : Int = difference(n : arg10)\nvar v1 : Int = 210\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar x2 : Int = difference(n : arg20)\nvar v2 : Int = 6\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/556", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the pairs with xor as an odd number.\n *\n * >>> findOddPair([5, 4, 7, 2, 1], 5)\n * 6\n * >>> findOddPair([7, 2, 8, 1, 0, 5, 11], 7)\n * 12\n * >>> findOddPair([1, 2, 3], 3)\n * 2\n */\nfunc findOddPair(a : [Int], n : Int) -> Int {\n", "entry_point": "findOddPair", "test": "\n\nvar arg00 : [Int] = [5, 4, 7, 2, 1]\nvar arg01 : Int = 5\nvar x0 : Int = findOddPair(a : arg00, n : arg01)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [7, 2, 8, 1, 0, 5, 11]\nvar arg11 : Int = 7\nvar x1 : Int = findOddPair(a : arg10, n : arg11)\nvar v1 : Int = 12\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3]\nvar arg21 : Int = 3\nvar x2 : Int = findOddPair(a : arg20, n : arg21)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the pairs with xor as an odd number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/557", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to toggle characters case in a string.\n *\n * >>> toggleString(\"Python\")\n * \"pYTHON\"\n * >>> toggleString(\"Pangram\")\n * \"pANGRAM\"\n * >>> toggleString(\"LIttLE\")\n * \"liTTle\"\n */\nfunc toggleString(string : String) -> String {\n", "entry_point": "toggleString", "test": "\n\nvar arg00 : String = #\"Python\"#\nvar x0 : String = toggleString(string : arg00)\nvar v0 : String = #\"pYTHON\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Pangram\"#\nvar x1 : String = toggleString(string : arg10)\nvar v1 : String = #\"pANGRAM\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"LIttLE\"#\nvar x2 : String = toggleString(string : arg20)\nvar v2 : String = #\"liTTle\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to toggle characters case in a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/558", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the digit distance between two integers.\n *\n * >>> digitDistanceNums(1, 2)\n * 1\n * >>> digitDistanceNums(23, 56)\n * 6\n * >>> digitDistanceNums(123, 256)\n * 7\n */\nfunc digitDistanceNums(n1 : Int, n2 : Int) -> Int {\n", "entry_point": "digitDistanceNums", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = 2\nvar x0 : Int = digitDistanceNums(n1 : arg00, n2 : arg01)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 23\nvar arg11 : Int = 56\nvar x1 : Int = digitDistanceNums(n1 : arg10, n2 : arg11)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 123\nvar arg21 : Int = 256\nvar x2 : Int = digitDistanceNums(n1 : arg20, n2 : arg21)\nvar v2 : Int = 7\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the digit distance between two integers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/559", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the largest sum of contiguous subarray in the given array.\n *\n * >>> maxSubArraySum([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n * 7\n * >>> maxSubArraySum([-3, -4, 5, -2, -3, 2, 6, -4], 8)\n * 8\n * >>> maxSubArraySum([-4, -5, 6, -3, -4, 3, 7, -5], 8)\n * 10\n */\nfunc maxSubArraySum(a : [Int], size : Int) -> Int {\n", "entry_point": "maxSubArraySum", "test": "\n\nvar arg00 : [Int] = [-2, -3, 4, -1, -2, 1, 5, -3]\nvar arg01 : Int = 8\nvar x0 : Int = maxSubArraySum(a : arg00, size : arg01)\nvar v0 : Int = 7\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [-3, -4, 5, -2, -3, 2, 6, -4]\nvar arg11 : Int = 8\nvar x1 : Int = maxSubArraySum(a : arg10, size : arg11)\nvar v1 : Int = 8\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [-4, -5, 6, -3, -4, 3, 7, -5]\nvar arg21 : Int = 8\nvar x2 : Int = maxSubArraySum(a : arg20, size : arg21)\nvar v2 : Int = 10\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the largest sum of contiguous subarray in the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/560", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the union of elements of the given tuples.\n *\n * >>> unionElements([3, 4, 5, 6], [5, 7, 4, 10])\n * [3, 4, 5, 6, 7, 10]\n * >>> unionElements([1, 2, 3, 4], [3, 4, 5, 6])\n * [1, 2, 3, 4, 5, 6]\n * >>> unionElements([11, 12, 13, 14], [13, 15, 16, 17])\n * [11, 12, 13, 14, 15, 16, 17]\n */\nfunc unionElements(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n", "entry_point": "unionElements", "test": "\n\nvar arg00 : [Int] = [3, 4, 5, 6]\nvar arg01 : [Int] = [5, 7, 4, 10]\nvar x0 : [Int] = unionElements(testTup1 : arg00, testTup2 : arg01)\nvar v0 : [Int] = [3, 4, 5, 6, 7, 10]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4]\nvar arg11 : [Int] = [3, 4, 5, 6]\nvar x1 : [Int] = unionElements(testTup1 : arg10, testTup2 : arg11)\nvar v1 : [Int] = [1, 2, 3, 4, 5, 6]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [11, 12, 13, 14]\nvar arg21 : [Int] = [13, 15, 16, 17]\nvar x2 : [Int] = unionElements(testTup1 : arg20, testTup2 : arg21)\nvar v2 : [Int] = [11, 12, 13, 14, 15, 16, 17]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the union of elements of the given tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/561", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n *\n * >>> assignElements([[5, 3], [7, 5], [2, 7], [3, 8], [8, 4]])\n * [3 : [8], 5 : [3], 7 : [5], 2 : [7], 8 : [4], 4 : []]\n * >>> assignElements([[6, 4], [9, 4], [3, 8], [4, 9], [9, 5]])\n * [4 : [9], 6 : [4], 9 : [4, 5], 8 : [], 3 : [8], 5 : []]\n * >>> assignElements([[6, 2], [6, 8], [4, 9], [4, 9], [3, 7]])\n * [2 : [], 6 : [2, 8], 8 : [], 9 : [], 4 : [9, 9], 7 : [], 3 : [7]]\n */\nfunc assignElements(testList : [[Int]]) -> [Int: [AnyHashable]] {\n", "entry_point": "assignElements", "test": "\n\nvar arg00 : [[Int]] = [[5, 3], [7, 5], [2, 7], [3, 8], [8, 4]]\nvar x0 : [Int: [AnyHashable]] = assignElements(testList : arg00)\nvar v0 : [Int: [AnyHashable]] = [3 : [8], 5 : [3], 7 : [5], 2 : [7], 8 : [4], 4 : []]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[6, 4], [9, 4], [3, 8], [4, 9], [9, 5]]\nvar x1 : [Int: [AnyHashable]] = assignElements(testList : arg10)\nvar v1 : [Int: [AnyHashable]] = [4 : [9], 6 : [4], 9 : [4, 5], 8 : [], 3 : [8], 5 : []]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[6, 2], [6, 8], [4, 9], [4, 9], [3, 7]]\nvar x2 : [Int: [AnyHashable]] = assignElements(testList : arg20)\nvar v2 : [Int: [AnyHashable]] = [2 : [], 6 : [2, 8], 8 : [], 9 : [], 4 : [9, 9], 7 : [], 3 : [7]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/562", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum length of sublist.\n *\n * >>> findMaxLength([[1], [1, 4], [5, 6, 7, 8]])\n * 4\n * >>> findMaxLength([[0, 1], [2, 2], [3, 2, 1]])\n * 3\n * >>> findMaxLength([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]])\n * 5\n */\nfunc findMaxLength(lst : [[Int]]) -> Int {\n", "entry_point": "findMaxLength", "test": "\n\nvar arg00 : [[Int]] = [[1], [1, 4], [5, 6, 7, 8]]\nvar x0 : Int = findMaxLength(lst : arg00)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[0, 1], [2, 2], [3, 2, 1]]\nvar x1 : Int = findMaxLength(lst : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]\nvar x2 : Int = findMaxLength(lst : arg20)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the maximum length of sublist.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/563", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract values between quotation marks of a string.\n *\n * >>> extractValues(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\")\n * [\"Python\", \"PHP\", \"Java\"]\n * >>> extractValues(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\")\n * [\"python\", \"program\", \"language\"]\n * >>> extractValues(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\")\n * [\"red\", \"blue\", \"green\", \"yellow\"]\n */\nfunc extractValues(text : String) -> [String] {\n", "entry_point": "extractValues", "test": "\n\nvar arg00 : String = #\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\"#\nvar x0 : [String] = extractValues(text : arg00)\nvar v0 : [String] = [#\"Python\"#, #\"PHP\"#, #\"Java\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\"#\nvar x1 : [String] = extractValues(text : arg10)\nvar v1 : [String] = [#\"python\"#, #\"program\"#, #\"language\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\"#\nvar x2 : [String] = extractValues(text : arg20)\nvar v2 : [String] = [#\"red\"#, #\"blue\"#, #\"green\"#, #\"yellow\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract values between quotation marks of a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/564", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count unequal element pairs from the given array.\n *\n * >>> countPairs([1, 2, 1], 3)\n * 2\n * >>> countPairs([1, 1, 1, 1], 4)\n * 0\n * >>> countPairs([1, 2, 3, 4, 5], 5)\n * 10\n */\nfunc countPairs(arr : [Int], n : Int) -> Int {\n", "entry_point": "countPairs", "test": "\n\nvar arg00 : [Int] = [1, 2, 1]\nvar arg01 : Int = 3\nvar x0 : Int = countPairs(arr : arg00, n : arg01)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 1, 1, 1]\nvar arg11 : Int = 4\nvar x1 : Int = countPairs(arr : arg10, n : arg11)\nvar v1 : Int = 0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4, 5]\nvar arg21 : Int = 5\nvar x2 : Int = countPairs(arr : arg20, n : arg21)\nvar v2 : Int = 10\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count unequal element pairs from the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/565", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to split a string into characters.\n *\n * >>> split(\"python\")\n * [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]\n * >>> split(\"Name\")\n * [\"N\", \"a\", \"m\", \"e\"]\n * >>> split(\"program\")\n * [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]\n */\nfunc split(word : String) -> [String] {\n", "entry_point": "split", "test": "\n\nvar arg00 : String = #\"python\"#\nvar x0 : [String] = split(word : arg00)\nvar v0 : [String] = [#\"p\"#, #\"y\"#, #\"t\"#, #\"h\"#, #\"o\"#, #\"n\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Name\"#\nvar x1 : [String] = split(word : arg10)\nvar v1 : [String] = [#\"N\"#, #\"a\"#, #\"m\"#, #\"e\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"program\"#\nvar x2 : [String] = split(word : arg20)\nvar v2 : [String] = [#\"p\"#, #\"r\"#, #\"o\"#, #\"g\"#, #\"r\"#, #\"a\"#, #\"m\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to split a string into characters.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/566", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get the sum of a non-negative integer.\n *\n * >>> sumDigits(345)\n * 12\n * >>> sumDigits(12)\n * 3\n * >>> sumDigits(97)\n * 16\n */\nfunc sumDigits(n : Int) -> Int {\n", "entry_point": "sumDigits", "test": "\n\nvar arg00 : Int = 345\nvar x0 : Int = sumDigits(n : arg00)\nvar v0 : Int = 12\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 12\nvar x1 : Int = sumDigits(n : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 97\nvar x2 : Int = sumDigits(n : arg20)\nvar v2 : Int = 16\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to get the sum of a non-negative integer.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/567", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether a specified list is sorted or not.\n *\n * >>> issortList([1, 2, 4, 6, 8, 10, 12, 14, 16, 17])\n * true\n * >>> issortList([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])\n * false\n * >>> issortList([1, 2, 4, 6, 8, 10, 15, 14, 20])\n * false\n */\nfunc issortList(list1 : [Int]) -> Bool {\n", "entry_point": "issortList", "test": "\n\nvar arg00 : [Int] = [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]\nvar x0 : Bool = issortList(list1 : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]\nvar x1 : Bool = issortList(list1 : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 4, 6, 8, 10, 15, 14, 20]\nvar x2 : Bool = issortList(list1 : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether a specified list is sorted or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/568", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to create a list of empty dictionaries.\n *\n * >>> emptyList(5)\n * [[], [], [], [], []]\n * >>> emptyList(6)\n * [[], [], [], [], [], []]\n * >>> emptyList(7)\n * [[], [], [], [], [], [], []]\n */\nfunc emptyList(length : Int) -> [[AnyHashable: AnyHashable]] {\n", "entry_point": "emptyList", "test": "\n\nvar arg00 : Int = 5\nvar x0 : [[AnyHashable: AnyHashable]] = emptyList(length : arg00)\nvar v0 : [[AnyHashable: AnyHashable]] = [[], [], [], [], []]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 6\nvar x1 : [[AnyHashable: AnyHashable]] = emptyList(length : arg10)\nvar v1 : [[AnyHashable: AnyHashable]] = [[], [], [], [], [], []]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 7\nvar x2 : [[AnyHashable: AnyHashable]] = emptyList(length : arg20)\nvar v2 : [[AnyHashable: AnyHashable]] = [[], [], [], [], [], [], []]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to create a list of empty dictionaries.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/569", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort each sublist of strings in a given list of lists.\n *\n * >>> sortSublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n * [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]]\n * >>> sortSublists([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]])\n * [[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]\n * >>> sortSublists([[\"a\", \"b\"], [\"d\", \"c\"], [\"g\", \"h\"], [\"f\", \"e\"]])\n * [[\"a\", \"b\"], [\"c\", \"d\"], [\"g\", \"h\"], [\"e\", \"f\"]]\n */\nfunc sortSublists(list1 : [[String]]) -> [[String]] {\n", "entry_point": "sortSublists", "test": "\n\nvar arg00 : [[String]] = [[#\"green\"#, #\"orange\"#], [#\"black\"#, #\"white\"#], [#\"white\"#, #\"black\"#, #\"orange\"#]]\nvar x0 : [[String]] = sortSublists(list1 : arg00)\nvar v0 : [[String]] = [[#\"green\"#, #\"orange\"#], [#\"black\"#, #\"white\"#], [#\"black\"#, #\"orange\"#, #\"white\"#]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[String]] = [[#\"green\"#, #\"orange\"#], [#\"black\"#], [#\"green\"#, #\"orange\"#], [#\"white\"#]]\nvar x1 : [[String]] = sortSublists(list1 : arg10)\nvar v1 : [[String]] = [[#\"green\"#, #\"orange\"#], [#\"black\"#], [#\"green\"#, #\"orange\"#], [#\"white\"#]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[String]] = [[#\"a\"#, #\"b\"#], [#\"d\"#, #\"c\"#], [#\"g\"#, #\"h\"#], [#\"f\"#, #\"e\"#]]\nvar x2 : [[String]] = sortSublists(list1 : arg20)\nvar v2 : [[String]] = [[#\"a\"#, #\"b\"#], [#\"c\"#, #\"d\"#], [#\"g\"#, #\"h\"#], [#\"e\"#, #\"f\"#]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort each sublist of strings in a given list of lists.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/570", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove words from a given list of strings containing a character or string.\n *\n * >>> removeWords([\"Red color\", \"Orange#\", \"Green\", \"Orange @\", \"White\"], [\"#\", \"color\", \"@\"])\n * [\"Red\", \"\", \"Green\", \"Orange\", \"White\"]\n * >>> removeWords([\"Red &\", \"Orange+\", \"Green\", \"Orange @\", \"White\"], [\"&\", \"+\", \"@\"])\n * [\"Red\", \"\", \"Green\", \"Orange\", \"White\"]\n * >>> removeWords([\"Red &\", \"Orange+\", \"Green\", \"Orange @\", \"White\"], [\"@\"])\n * [\"Red &\", \"Orange+\", \"Green\", \"Orange\", \"White\"]\n */\nfunc removeWords(list1 : [String], charlist : [String]) -> [String] {\n", "entry_point": "removeWords", "test": "\n\nvar arg00 : [String] = [#\"Red color\"#, #\"Orange#\"#, #\"Green\"#, #\"Orange @\"#, #\"White\"#]\nvar arg01 : [String] = [#\"#\"#, #\"color\"#, #\"@\"#]\nvar x0 : [String] = removeWords(list1 : arg00, charlist : arg01)\nvar v0 : [String] = [#\"Red\"#, #\"\"#, #\"Green\"#, #\"Orange\"#, #\"White\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"Red &\"#, #\"Orange+\"#, #\"Green\"#, #\"Orange @\"#, #\"White\"#]\nvar arg11 : [String] = [#\"&\"#, #\"+\"#, #\"@\"#]\nvar x1 : [String] = removeWords(list1 : arg10, charlist : arg11)\nvar v1 : [String] = [#\"Red\"#, #\"\"#, #\"Green\"#, #\"Orange\"#, #\"White\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"Red &\"#, #\"Orange+\"#, #\"Green\"#, #\"Orange @\"#, #\"White\"#]\nvar arg21 : [String] = [#\"@\"#]\nvar x2 : [String] = removeWords(list1 : arg20, charlist : arg21)\nvar v2 : [String] = [#\"Red &\"#, #\"Orange+\"#, #\"Green\"#, #\"Orange\"#, #\"White\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove words from a given list of strings containing a character or string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/571", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n *\n * >>> maxSumPairDiffLessthanK([3, 5, 10, 15, 17, 12, 9], 7, 4)\n * 62\n * >>> maxSumPairDiffLessthanK([5, 15, 10, 300], 4, 12)\n * 25\n * >>> maxSumPairDiffLessthanK([1, 2, 3, 4, 5, 6], 6, 6)\n * 21\n */\nfunc maxSumPairDiffLessthanK(arr : [Int], n : Int, k : Int) -> Int {\n", "entry_point": "maxSumPairDiffLessthanK", "test": "\n\nvar arg00 : [Int] = [3, 5, 10, 15, 17, 12, 9]\nvar arg01 : Int = 7\nvar arg02 : Int = 4\nvar x0 : Int = maxSumPairDiffLessthanK(arr : arg00, n : arg01, k : arg02)\nvar v0 : Int = 62\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [5, 15, 10, 300]\nvar arg11 : Int = 4\nvar arg12 : Int = 12\nvar x1 : Int = maxSumPairDiffLessthanK(arr : arg10, n : arg11, k : arg12)\nvar v1 : Int = 25\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4, 5, 6]\nvar arg21 : Int = 6\nvar arg22 : Int = 6\nvar x2 : Int = maxSumPairDiffLessthanK(arr : arg20, n : arg21, k : arg22)\nvar v2 : Int = 21\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/572", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove two duplicate numbers from a given number of lists.\n *\n * >>> twoUniqueNums([1, 2, 3, 2, 3, 4, 5])\n * [1, 4, 5]\n * >>> twoUniqueNums([1, 2, 3, 2, 4, 5])\n * [1, 3, 4, 5]\n * >>> twoUniqueNums([1, 2, 3, 4, 5])\n * [1, 2, 3, 4, 5]\n */\nfunc twoUniqueNums(nums : [Int]) -> [Int] {\n", "entry_point": "twoUniqueNums", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 2, 3, 4, 5]\nvar x0 : [Int] = twoUniqueNums(nums : arg00)\nvar v0 : [Int] = [1, 4, 5]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 2, 4, 5]\nvar x1 : [Int] = twoUniqueNums(nums : arg10)\nvar v1 : [Int] = [1, 3, 4, 5]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4, 5]\nvar x2 : [Int] = twoUniqueNums(nums : arg20)\nvar v2 : [Int] = [1, 2, 3, 4, 5]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to remove two duplicate numbers from a given number of lists.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/573", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to calculate the product of the unique numbers of a given list.\n *\n * >>> uniqueProduct([10, 20, 30, 40, 20, 50, 60, 40])\n * 720000000\n * >>> uniqueProduct([1, 2, 3, 1])\n * 6\n * >>> uniqueProduct([7, 8, 9, 0, 1, 1])\n * 0\n */\nfunc uniqueProduct(listData : [Int]) -> Int {\n", "entry_point": "uniqueProduct", "test": "\n\nvar arg00 : [Int] = [10, 20, 30, 40, 20, 50, 60, 40]\nvar x0 : Int = uniqueProduct(listData : arg00)\nvar v0 : Int = 720000000\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 1]\nvar x1 : Int = uniqueProduct(listData : arg10)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [7, 8, 9, 0, 1, 1]\nvar x2 : Int = uniqueProduct(listData : arg20)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to calculate the product of the unique numbers of a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/574", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the surface area of a cylinder.\n *\n * >>> surfaceareaCylinder(10, 5)\n * 942.45\n * >>> surfaceareaCylinder(4, 5)\n * 226.18800000000002\n * >>> surfaceareaCylinder(4, 10)\n * 351.848\n */\nfunc surfaceareaCylinder(r : Int, h : Int) -> Double {\n", "entry_point": "surfaceareaCylinder", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 5\nvar x0 : Double = surfaceareaCylinder(r : arg00, h : arg01)\nvar v0 : Double = 942.45\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar arg11 : Int = 5\nvar x1 : Double = surfaceareaCylinder(r : arg10, h : arg11)\nvar v1 : Double = 226.18800000000002\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar arg21 : Int = 10\nvar x2 : Double = surfaceareaCylinder(r : arg20, h : arg21)\nvar v2 : Double = 351.848\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the surface area of a cylinder.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/575", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find nth number in a sequence which is not a multiple of a given number.\n *\n * >>> countNo(2, 3, 1, 10)\n * 5\n * >>> countNo(3, 6, 4, 20)\n * 11\n * >>> countNo(5, 10, 4, 20)\n * 16\n */\nfunc countNo(a : Int, n : Int, l : Int, r : Int) -> Int {\n", "entry_point": "countNo", "test": "\n\nvar arg00 : Int = 2\nvar arg01 : Int = 3\nvar arg02 : Int = 1\nvar arg03 : Int = 10\nvar x0 : Int = countNo(a : arg00, n : arg01, l : arg02, r : arg03)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar arg11 : Int = 6\nvar arg12 : Int = 4\nvar arg13 : Int = 20\nvar x1 : Int = countNo(a : arg10, n : arg11, l : arg12, r : arg13)\nvar v1 : Int = 11\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar arg21 : Int = 10\nvar arg22 : Int = 4\nvar arg23 : Int = 20\nvar x2 : Int = countNo(a : arg20, n : arg21, l : arg22, r : arg23)\nvar v2 : Int = 16\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find nth number in a sequence which is not a multiple of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/576", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether an array is subarray of another or not.\n *\n * >>> isSubArray([1, 4, 3, 5], [1, 2], 4, 2)\n * false\n * >>> isSubArray([1, 2, 1], [1, 2, 1], 3, 3)\n * true\n * >>> isSubArray([1, 0, 2, 2], [2, 2, 0], 4, 3)\n * false\n */\nfunc isSubArray(a : [Int], b : [Int], n : Int, m : Int) -> Bool {\n", "entry_point": "isSubArray", "test": "\n\nvar arg00 : [Int] = [1, 4, 3, 5]\nvar arg01 : [Int] = [1, 2]\nvar arg02 : Int = 4\nvar arg03 : Int = 2\nvar x0 : Bool = isSubArray(a : arg00, b : arg01, n : arg02, m : arg03)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 1]\nvar arg11 : [Int] = [1, 2, 1]\nvar arg12 : Int = 3\nvar arg13 : Int = 3\nvar x1 : Bool = isSubArray(a : arg10, b : arg11, n : arg12, m : arg13)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 0, 2, 2]\nvar arg21 : [Int] = [2, 2, 0]\nvar arg22 : Int = 4\nvar arg23 : Int = 3\nvar x2 : Bool = isSubArray(a : arg20, b : arg21, n : arg22, m : arg23)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether an array is subarray of another or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/577", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the last digit in factorial of a given number.\n *\n * >>> lastDigitFactorial(4)\n * 4\n * >>> lastDigitFactorial(21)\n * 0\n * >>> lastDigitFactorial(30)\n * 0\n */\nfunc lastDigitFactorial(n : Int) -> Int {\n", "entry_point": "lastDigitFactorial", "test": "\n\nvar arg00 : Int = 4\nvar x0 : Int = lastDigitFactorial(n : arg00)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 21\nvar x1 : Int = lastDigitFactorial(n : arg10)\nvar v1 : Int = 0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 30\nvar x2 : Int = lastDigitFactorial(n : arg20)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the last digit in factorial of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/578", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to interleave lists of the same length.\n *\n * >>> interleaveLists([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700])\n * [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n * >>> interleaveLists([10, 20], [15, 2], [5, 10])\n * [10, 15, 5, 20, 2, 10]\n * >>> interleaveLists([11, 44], [10, 15], [20, 5])\n * [11, 10, 20, 44, 15, 5]\n */\nfunc interleaveLists(list1 : [Int], list2 : [Int], list3 : [Int]) -> [Int] {\n", "entry_point": "interleaveLists", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5, 6, 7]\nvar arg01 : [Int] = [10, 20, 30, 40, 50, 60, 70]\nvar arg02 : [Int] = [100, 200, 300, 400, 500, 600, 700]\nvar x0 : [Int] = interleaveLists(list1 : arg00, list2 : arg01, list3 : arg02)\nvar v0 : [Int] = [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [10, 20]\nvar arg11 : [Int] = [15, 2]\nvar arg12 : [Int] = [5, 10]\nvar x1 : [Int] = interleaveLists(list1 : arg10, list2 : arg11, list3 : arg12)\nvar v1 : [Int] = [10, 15, 5, 20, 2, 10]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [11, 44]\nvar arg21 : [Int] = [10, 15]\nvar arg22 : [Int] = [20, 5]\nvar x2 : [Int] = interleaveLists(list1 : arg20, list2 : arg21, list3 : arg22)\nvar v2 : [Int] = [11, 10, 20, 44, 15, 5]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to interleave lists of the same length.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/579", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the dissimilar elements in the given two tuples.\n *\n * >>> findDissimilar([3, 4, 5, 6], [5, 7, 4, 10])\n * [3, 6, 7, 10]\n * >>> findDissimilar([1, 2, 3, 4], [7, 2, 3, 9])\n * [1, 4, 7, 9]\n * >>> findDissimilar([21, 11, 25, 26], [26, 34, 21, 36])\n * [34, 36, 11, 25]\n */\nfunc findDissimilar(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n", "entry_point": "findDissimilar", "test": "\n\nvar arg00 : [Int] = [3, 4, 5, 6]\nvar arg01 : [Int] = [5, 7, 4, 10]\nvar x0 : [Int] = findDissimilar(testTup1 : arg00, testTup2 : arg01)\nvar v0 : [Int] = [3, 6, 7, 10]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4]\nvar arg11 : [Int] = [7, 2, 3, 9]\nvar x1 : [Int] = findDissimilar(testTup1 : arg10, testTup2 : arg11)\nvar v1 : [Int] = [1, 4, 7, 9]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [21, 11, 25, 26]\nvar arg21 : [Int] = [26, 34, 21, 36]\nvar x2 : [Int] = findDissimilar(testTup1 : arg20, testTup2 : arg21)\nvar v2 : [Int] = [34, 36, 11, 25]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the dissimilar elements in the given two tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/580", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the even elements in the nested mixed tuple.\n *\n * >>> extractEven([4, 5, [7, 6, [2, 4]], 6, 8])\n * [4, [6, [2, 4]], 6, 8]\n * >>> extractEven([5, 6, [8, 7, [4, 8]], 7, 9])\n * [6, [8, [4, 8]]]\n * >>> extractEven([5, 6, [9, 8, [4, 6]], 8, 10])\n * [6, [8, [4, 6]], 8, 10]\n */\nfunc extractEven(testTuple : [AnyHashable]) -> [AnyHashable] {\n", "entry_point": "extractEven", "test": "\n\nvar arg00 : [AnyHashable] = [4, 5, [7, 6, [2, 4]], 6, 8]\nvar x0 : [AnyHashable] = extractEven(testTuple : arg00)\nvar v0 : [AnyHashable] = [4, [6, [2, 4]], 6, 8]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [5, 6, [8, 7, [4, 8]], 7, 9]\nvar x1 : [AnyHashable] = extractEven(testTuple : arg10)\nvar v1 : [AnyHashable] = [6, [8, [4, 8]]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [5, 6, [9, 8, [4, 6]], 8, 10]\nvar x2 : [AnyHashable] = extractEven(testTuple : arg20)\nvar v2 : [AnyHashable] = [6, [8, [4, 6]], 8, 10]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract the even elements in the nested mixed tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/581", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the surface area of the square pyramid.\n *\n * >>> surfaceArea(3, 4)\n * 33\n * >>> surfaceArea(4, 5)\n * 56\n * >>> surfaceArea(1, 2)\n * 5\n */\nfunc surfaceArea(b : Int, s : Int) -> Int {\n", "entry_point": "surfaceArea", "test": "\n\nvar arg00 : Int = 3\nvar arg01 : Int = 4\nvar x0 : Int = surfaceArea(b : arg00, s : arg01)\nvar v0 : Int = 33\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar arg11 : Int = 5\nvar x1 : Int = surfaceArea(b : arg10, s : arg11)\nvar v1 : Int = 56\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = 2\nvar x2 : Int = surfaceArea(b : arg20, s : arg21)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the surface area of the square pyramid.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/582", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a dictionary is empty or not.\n *\n * >>> myDict({10})\n * false\n * >>> myDict({11})\n * false\n * >>> myDict([])\n * true\n */\nfunc myDict(dict1 : AnyHashable) -> Bool {\n", "entry_point": "myDict", "test": "\n\nvar arg00 : AnyHashable = [10]\nvar x0 : Bool = myDict(dict1 : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : AnyHashable = [11]\nvar x1 : Bool = myDict(dict1 : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : AnyHashable = []\nvar x2 : Bool = myDict(dict1 : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if a dictionary is empty or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/583", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function for nth catalan number.\n *\n * >>> catalanNumber(10)\n * 16796\n * >>> catalanNumber(9)\n * 4862\n * >>> catalanNumber(7)\n * 429\n */\nfunc catalanNumber(num : Int) -> Int {\n", "entry_point": "catalanNumber", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = catalanNumber(num : arg00)\nvar v0 : Int = 16796\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 9\nvar x1 : Int = catalanNumber(num : arg10)\nvar v1 : Int = 4862\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 7\nvar x2 : Int = catalanNumber(num : arg20)\nvar v2 : Int = 429\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function for nth catalan number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/584", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all adverbs and their positions in a given sentence by using regex.\n *\n * >>> findAdverbs(\"Clearly, he has no excuse for such behavior.\")\n * \"0-7: Clearly\"\n * >>> findAdverbs(\"Please handle the situation carefuly\")\n * \"28-36: carefuly\"\n * >>> findAdverbs(\"Complete the task quickly\")\n * \"18-25: quickly\"\n */\nfunc findAdverbs(text : String) -> String {\n", "entry_point": "findAdverbs", "test": "\n\nvar arg00 : String = #\"Clearly, he has no excuse for such behavior.\"#\nvar x0 : String = findAdverbs(text : arg00)\nvar v0 : String = #\"0-7: Clearly\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Please handle the situation carefuly\"#\nvar x1 : String = findAdverbs(text : arg10)\nvar v1 : String = #\"28-36: carefuly\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Complete the task quickly\"#\nvar x2 : String = findAdverbs(text : arg20)\nvar v2 : String = #\"18-25: quickly\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find all adverbs and their positions in a given sentence by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/585", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n *\n * >>> expensiveItems([[\"name\" : \"Item-1\", \"price\" : 101.1], [\"name\" : \"Item-2\", \"price\" : 555.22]], 1)\n * [[\"name\" : \"Item-2\", \"price\" : 555.22]]\n * >>> expensiveItems([[\"name\" : \"Item-1\", \"price\" : 101.1], [\"name\" : \"Item-2\", \"price\" : 555.22], [\"name\" : \"Item-3\", \"price\" : 45.09]], 2)\n * [[\"name\" : \"Item-2\", \"price\" : 555.22], [\"name\" : \"Item-1\", \"price\" : 101.1]]\n * >>> expensiveItems([[\"name\" : \"Item-1\", \"price\" : 101.1], [\"name\" : \"Item-2\", \"price\" : 555.22], [\"name\" : \"Item-3\", \"price\" : 45.09], [\"name\" : \"Item-4\", \"price\" : 22.75]], 1)\n * [[\"name\" : \"Item-2\", \"price\" : 555.22]]\n */\nfunc expensiveItems(items : [[String: AnyHashable]], n : Int) -> [[String: AnyHashable]] {\n", "entry_point": "expensiveItems", "test": "\n\nvar arg00 : [[String: AnyHashable]] = [[#\"name\"# : #\"Item-1\"#, #\"price\"# : 101.1], [#\"name\"# : #\"Item-2\"#, #\"price\"# : 555.22]]\nvar arg01 : Int = 1\nvar x0 : [[String: AnyHashable]] = expensiveItems(items : arg00, n : arg01)\nvar v0 : [[String: AnyHashable]] = [[#\"name\"# : #\"Item-2\"#, #\"price\"# : 555.22]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[String: AnyHashable]] = [[#\"name\"# : #\"Item-1\"#, #\"price\"# : 101.1], [#\"name\"# : #\"Item-2\"#, #\"price\"# : 555.22], [#\"name\"# : #\"Item-3\"#, #\"price\"# : 45.09]]\nvar arg11 : Int = 2\nvar x1 : [[String: AnyHashable]] = expensiveItems(items : arg10, n : arg11)\nvar v1 : [[String: AnyHashable]] = [[#\"name\"# : #\"Item-2\"#, #\"price\"# : 555.22], [#\"name\"# : #\"Item-1\"#, #\"price\"# : 101.1]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[String: AnyHashable]] = [[#\"name\"# : #\"Item-1\"#, #\"price\"# : 101.1], [#\"name\"# : #\"Item-2\"#, #\"price\"# : 555.22], [#\"name\"# : #\"Item-3\"#, #\"price\"# : 45.09], [#\"name\"# : #\"Item-4\"#, #\"price\"# : 22.75]]\nvar arg21 : Int = 1\nvar x2 : [[String: AnyHashable]] = expensiveItems(items : arg20, n : arg21)\nvar v2 : [[String: AnyHashable]] = [[#\"name\"# : #\"Item-2\"#, #\"price\"# : 555.22]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/586", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to split the array and add the first part to the end.\n *\n * >>> splitArr([12, 10, 5, 6, 52, 36], 6, 2)\n * [5, 6, 52, 36, 12, 10]\n * >>> splitArr([1, 2, 3, 4], 4, 1)\n * [2, 3, 4, 1]\n * >>> splitArr([0, 1, 2, 3, 4, 5, 6, 7], 8, 3)\n * [3, 4, 5, 6, 7, 0, 1, 2]\n */\nfunc splitArr(a : [Int], n : Int, k : Int) -> [Int] {\n", "entry_point": "splitArr", "test": "\n\nvar arg00 : [Int] = [12, 10, 5, 6, 52, 36]\nvar arg01 : Int = 6\nvar arg02 : Int = 2\nvar x0 : [Int] = splitArr(a : arg00, n : arg01, k : arg02)\nvar v0 : [Int] = [5, 6, 52, 36, 12, 10]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4]\nvar arg11 : Int = 4\nvar arg12 : Int = 1\nvar x1 : [Int] = splitArr(a : arg10, n : arg11, k : arg12)\nvar v1 : [Int] = [2, 3, 4, 1]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [0, 1, 2, 3, 4, 5, 6, 7]\nvar arg21 : Int = 8\nvar arg22 : Int = 3\nvar x2 : [Int] = splitArr(a : arg20, n : arg21, k : arg22)\nvar v2 : [Int] = [3, 4, 5, 6, 7, 0, 1, 2]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to split the array and add the first part to the end.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/587", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a list to a tuple.\n *\n * >>> listTuple([5, 10, 7, 4, 15, 3])\n * [5, 10, 7, 4, 15, 3]\n * >>> listTuple([2, 4, 5, 6, 2, 3, 4, 4, 7])\n * [2, 4, 5, 6, 2, 3, 4, 4, 7]\n * >>> listTuple([58, 44, 56])\n * [58, 44, 56]\n */\nfunc listTuple(listx : [Int]) -> [Int] {\n", "entry_point": "listTuple", "test": "\n\nvar arg00 : [Int] = [5, 10, 7, 4, 15, 3]\nvar x0 : [Int] = listTuple(listx : arg00)\nvar v0 : [Int] = [5, 10, 7, 4, 15, 3]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 4, 5, 6, 2, 3, 4, 4, 7]\nvar x1 : [Int] = listTuple(listx : arg10)\nvar v1 : [Int] = [2, 4, 5, 6, 2, 3, 4, 4, 7]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [58, 44, 56]\nvar x2 : [Int] = listTuple(listx : arg20)\nvar v2 : [Int] = [58, 44, 56]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert a list to a tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/588", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the difference between largest and smallest value in a given array.\n *\n * >>> bigDiff([1, 2, 3, 4])\n * 3\n * >>> bigDiff([4, 5, 12])\n * 8\n * >>> bigDiff([9, 2, 3])\n * 7\n */\nfunc bigDiff(nums : [Int]) -> Int {\n", "entry_point": "bigDiff", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4]\nvar x0 : Int = bigDiff(nums : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 5, 12]\nvar x1 : Int = bigDiff(nums : arg10)\nvar v1 : Int = 8\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [9, 2, 3]\nvar x2 : Int = bigDiff(nums : arg20)\nvar v2 : Int = 7\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the difference between largest and smallest value in a given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/589", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find perfect squares between two given numbers.\n *\n * >>> perfectSquares(1, 30)\n * [1, 4, 9, 16, 25]\n * >>> perfectSquares(50, 100)\n * [64, 81, 100]\n * >>> perfectSquares(100, 200)\n * [100, 121, 144, 169, 196]\n */\nfunc perfectSquares(a : Int, b : Int) -> [Int] {\n", "entry_point": "perfectSquares", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = 30\nvar x0 : [Int] = perfectSquares(a : arg00, b : arg01)\nvar v0 : [Int] = [1, 4, 9, 16, 25]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 50\nvar arg11 : Int = 100\nvar x1 : [Int] = perfectSquares(a : arg10, b : arg11)\nvar v1 : [Int] = [64, 81, 100]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 100\nvar arg21 : Int = 200\nvar x2 : [Int] = perfectSquares(a : arg20, b : arg21)\nvar v2 : [Int] = [100, 121, 144, 169, 196]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find perfect squares between two given numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/591", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to interchange the first and last elements in a list.\n *\n * >>> swapList([12, 35, 9, 56, 24])\n * [24, 35, 9, 56, 12]\n * >>> swapList([1, 2, 3])\n * [3, 2, 1]\n * >>> swapList([4, 5, 6])\n * [6, 5, 4]\n */\nfunc swapList(newlist : [Int]) -> [Int] {\n", "entry_point": "swapList", "test": "\n\nvar arg00 : [Int] = [12, 35, 9, 56, 24]\nvar x0 : [Int] = swapList(newlist : arg00)\nvar v0 : [Int] = [24, 35, 9, 56, 12]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3]\nvar x1 : [Int] = swapList(newlist : arg10)\nvar v1 : [Int] = [3, 2, 1]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [4, 5, 6]\nvar x2 : [Int] = swapList(newlist : arg20)\nvar v2 : [Int] = [6, 5, 4]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to interchange the first and last elements in a list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/592", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of product of binomial co-efficients.\n *\n * >>> sumOfProduct(3)\n * 15\n * >>> sumOfProduct(4)\n * 56\n * >>> sumOfProduct(1)\n * 1\n */\nfunc sumOfProduct(n : Int) -> Int {\n", "entry_point": "sumOfProduct", "test": "\n\nvar arg00 : Int = 3\nvar x0 : Int = sumOfProduct(n : arg00)\nvar v0 : Int = 15\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar x1 : Int = sumOfProduct(n : arg10)\nvar v1 : Int = 56\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar x2 : Int = sumOfProduct(n : arg20)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find sum of product of binomial co-efficients.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/593", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove leading zeroes from an ip address.\n *\n * >>> removezeroIp(\"216.08.094.196\")\n * \"216.8.94.196\"\n * >>> removezeroIp(\"12.01.024\")\n * \"12.1.24\"\n * >>> removezeroIp(\"216.08.094.0196\")\n * \"216.8.94.196\"\n */\nfunc removezeroIp(ip : String) -> String {\n", "entry_point": "removezeroIp", "test": "\n\nvar arg00 : String = #\"216.08.094.196\"#\nvar x0 : String = removezeroIp(ip : arg00)\nvar v0 : String = #\"216.8.94.196\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"12.01.024\"#\nvar x1 : String = removezeroIp(ip : arg10)\nvar v1 : String = #\"12.1.24\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"216.08.094.0196\"#\nvar x2 : String = removezeroIp(ip : arg20)\nvar v2 : String = #\"216.8.94.196\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove leading zeroes from an ip address.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/594", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the difference of first even and odd number of a given list.\n *\n * >>> diffEvenOdd([1, 3, 5, 7, 4, 1, 6, 8])\n * 3\n * >>> diffEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * 1\n * >>> diffEvenOdd([1, 5, 7, 9, 10])\n * 9\n */\nfunc diffEvenOdd(list1 : [Int]) -> Int {\n", "entry_point": "diffEvenOdd", "test": "\n\nvar arg00 : [Int] = [1, 3, 5, 7, 4, 1, 6, 8]\nvar x0 : Int = diffEvenOdd(list1 : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar x1 : Int = diffEvenOdd(list1 : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 5, 7, 9, 10]\nvar x2 : Int = diffEvenOdd(list1 : arg20)\nvar v2 : Int = 9\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the difference of first even and odd number of a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/595", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count minimum number of swaps required to convert one binary string to another.\n *\n * >>> minSwaps(\"1101\", \"1110\")\n * 1\n * >>> minSwaps(\"111\", \"000\")\n * \"Not Possible\"\n * >>> minSwaps(\"111\", \"110\")\n * \"Not Possible\"\n */\nfunc minSwaps(str1 : String, str2 : String) -> AnyHashable {\n", "entry_point": "minSwaps", "test": "\n\nvar arg00 : String = #\"1101\"#\nvar arg01 : String = #\"1110\"#\nvar x0 : AnyHashable = minSwaps(str1 : arg00, str2 : arg01)\nvar v0 : AnyHashable = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"111\"#\nvar arg11 : String = #\"000\"#\nvar x1 : AnyHashable = minSwaps(str1 : arg10, str2 : arg11)\nvar v1 : AnyHashable = #\"Not Possible\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"111\"#\nvar arg21 : String = #\"110\"#\nvar x2 : AnyHashable = minSwaps(str1 : arg20, str2 : arg21)\nvar v2 : AnyHashable = #\"Not Possible\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count minimum number of swaps required to convert one binary string to another.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/597", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find kth element from the given two sorted arrays.\n *\n * >>> findKth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5)\n * 6\n * >>> findKth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7)\n * 256\n * >>> findKth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6)\n * 8\n */\nfunc findKth(arr1 : [Int], arr2 : [Int], m : Int, n : Int, k : Int) -> Int {\n", "entry_point": "findKth", "test": "\n\nvar arg00 : [Int] = [2, 3, 6, 7, 9]\nvar arg01 : [Int] = [1, 4, 8, 10]\nvar arg02 : Int = 5\nvar arg03 : Int = 4\nvar arg04 : Int = 5\nvar x0 : Int = findKth(arr1 : arg00, arr2 : arg01, m : arg02, n : arg03, k : arg04)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [100, 112, 256, 349, 770]\nvar arg11 : [Int] = [72, 86, 113, 119, 265, 445, 892]\nvar arg12 : Int = 5\nvar arg13 : Int = 7\nvar arg14 : Int = 7\nvar x1 : Int = findKth(arr1 : arg10, arr2 : arg11, m : arg12, n : arg13, k : arg14)\nvar v1 : Int = 256\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3, 4, 7, 8, 10]\nvar arg21 : [Int] = [2, 5, 9, 11]\nvar arg22 : Int = 5\nvar arg23 : Int = 4\nvar arg24 : Int = 6\nvar x2 : Int = findKth(arr1 : arg20, arr2 : arg21, m : arg22, n : arg23, k : arg24)\nvar v2 : Int = 8\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find kth element from the given two sorted arrays.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/598", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given number is armstrong or not.\n *\n * >>> armstrongNumber(153)\n * true\n * >>> armstrongNumber(259)\n * false\n * >>> armstrongNumber(4458)\n * false\n */\nfunc armstrongNumber(number : Int) -> Bool {\n", "entry_point": "armstrongNumber", "test": "\n\nvar arg00 : Int = 153\nvar x0 : Bool = armstrongNumber(number : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 259\nvar x1 : Bool = armstrongNumber(number : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4458\nvar x2 : Bool = armstrongNumber(number : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether the given number is armstrong or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/599", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find sum and average of first n natural numbers.\n *\n * >>> sumAverage(10)\n * [55, 5.5]\n * >>> sumAverage(15)\n * [120, 8.0]\n * >>> sumAverage(20)\n * [210, 10.5]\n */\nfunc sumAverage(number : Int) -> [Double] {\n", "entry_point": "sumAverage", "test": "\n\nvar arg00 : Int = 10\nvar x0 : [Double] = sumAverage(number : arg00)\nvar v0 : [Double] = [55, 5.5]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 15\nvar x1 : [Double] = sumAverage(number : arg10)\nvar v1 : [Double] = [120, 8.0]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 20\nvar x2 : [Double] = sumAverage(number : arg20)\nvar v2 : [Double] = [210, 10.5]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find sum and average of first n natural numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/600", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given number is even or not using bitwise operator.\n *\n * >>> isEven(1)\n * false\n * >>> isEven(2)\n * true\n * >>> isEven(3)\n * false\n */\nfunc isEven(n : Int) -> Bool {\n", "entry_point": "isEven", "test": "\n\nvar arg00 : Int = 1\nvar x0 : Bool = isEven(n : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar x1 : Bool = isEven(n : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 3\nvar x2 : Bool = isEven(n : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the given number is even or not using bitwise operator.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/602", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first repeated character in a given string.\n *\n * >>> firstRepeatedChar(\"abcabc\")\n * \"a\"\n * >>> firstRepeatedChar(\"abc\")\n * \"None\"\n * >>> firstRepeatedChar(\"123123\")\n * \"1\"\n */\nfunc firstRepeatedChar(str1 : String) -> String {\n", "entry_point": "firstRepeatedChar", "test": "\n\nvar arg00 : String = #\"abcabc\"#\nvar x0 : String = firstRepeatedChar(str1 : arg00)\nvar v0 : String = #\"a\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"abc\"#\nvar x1 : String = firstRepeatedChar(str1 : arg10)\nvar v1 : String = #\"None\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"123123\"#\nvar x2 : String = firstRepeatedChar(str1 : arg20)\nvar v2 : String = #\"1\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the first repeated character in a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/603", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get a lucid number smaller than or equal to n.\n *\n * >>> getLudic(10)\n * [1, 2, 3, 5, 7]\n * >>> getLudic(25)\n * [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\n * >>> getLudic(45)\n * [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n */\nfunc getLudic(n : Int) -> [Int] {\n", "entry_point": "getLudic", "test": "\n\nvar arg00 : Int = 10\nvar x0 : [Int] = getLudic(n : arg00)\nvar v0 : [Int] = [1, 2, 3, 5, 7]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 25\nvar x1 : [Int] = getLudic(n : arg10)\nvar v1 : [Int] = [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 45\nvar x2 : [Int] = getLudic(n : arg20)\nvar v2 : [Int] = [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to get a lucid number smaller than or equal to n.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/604", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to reverse words in a given string.\n *\n * >>> reverseWords(\"python program\")\n * \"program python\"\n * >>> reverseWords(\"java language\")\n * \"language java\"\n * >>> reverseWords(\"indian man\")\n * \"man indian\"\n */\nfunc reverseWords(s : String) -> String {\n", "entry_point": "reverseWords", "test": "\n\nvar arg00 : String = #\"python program\"#\nvar x0 : String = reverseWords(s : arg00)\nvar v0 : String = #\"program python\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"java language\"#\nvar x1 : String = reverseWords(s : arg10)\nvar v1 : String = #\"language java\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"indian man\"#\nvar x2 : String = reverseWords(s : arg20)\nvar v2 : String = #\"man indian\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to reverse words in a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/605", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given integer is a prime number.\n *\n * >>> primeNum(13)\n * true\n * >>> primeNum(7)\n * true\n * >>> primeNum(-1010)\n * false\n */\nfunc primeNum(num : Int) -> Bool {\n", "entry_point": "primeNum", "test": "\n\nvar arg00 : Int = 13\nvar x0 : Bool = primeNum(num : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 7\nvar x1 : Bool = primeNum(num : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = -1010\nvar x2 : Bool = primeNum(num : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if the given integer is a prime number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/606", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert degrees to radians.\n *\n * >>> radianDegree(90)\n * 1.5707963267948966\n * >>> radianDegree(60)\n * 1.0471975511965976\n * >>> radianDegree(120)\n * 2.0943951023931953\n */\nfunc radianDegree(degree : Int) -> Double {\n", "entry_point": "radianDegree", "test": "\n\nvar arg00 : Int = 90\nvar x0 : Double = radianDegree(degree : arg00)\nvar v0 : Double = 1.5707963267948966\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 60\nvar x1 : Double = radianDegree(degree : arg10)\nvar v1 : Double = 1.0471975511965976\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 120\nvar x2 : Double = radianDegree(degree : arg20)\nvar v2 : Double = 2.0943951023931953\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert degrees to radians.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/607", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n *\n * >>> findLiterals(\"The quick brown fox jumps over the lazy dog.\", \"fox\")\n * [\"fox\", 16, 19]\n * >>> findLiterals(\"Its been a very crazy procedure right\", \"crazy\")\n * [\"crazy\", 16, 21]\n * >>> findLiterals(\"Hardest choices required strongest will\", \"will\")\n * [\"will\", 35, 39]\n */\nfunc findLiterals(text : String, pattern : String) -> [AnyHashable] {\n", "entry_point": "findLiterals", "test": "\n\nvar arg00 : String = #\"The quick brown fox jumps over the lazy dog.\"#\nvar arg01 : String = #\"fox\"#\nvar x0 : [AnyHashable] = findLiterals(text : arg00, pattern : arg01)\nvar v0 : [AnyHashable] = [#\"fox\"#, 16, 19]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Its been a very crazy procedure right\"#\nvar arg11 : String = #\"crazy\"#\nvar x1 : [AnyHashable] = findLiterals(text : arg10, pattern : arg11)\nvar v1 : [AnyHashable] = [#\"crazy\"#, 16, 21]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Hardest choices required strongest will\"#\nvar arg21 : String = #\"will\"#\nvar x2 : [AnyHashable] = findLiterals(text : arg20, pattern : arg21)\nvar v2 : [AnyHashable] = [#\"will\"#, 35, 39]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/608", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find nth bell number.\n *\n * >>> bellNumber(2)\n * 2\n * >>> bellNumber(3)\n * 5\n * >>> bellNumber(4)\n * 15\n */\nfunc bellNumber(n : Int) -> Int {\n", "entry_point": "bellNumber", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = bellNumber(n : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar x1 : Int = bellNumber(n : arg10)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar x2 : Int = bellNumber(n : arg20)\nvar v2 : Int = 15\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find nth bell number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/609", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find minimum possible value for the given periodic function.\n *\n * >>> floorMin(10, 20, 30)\n * 15\n * >>> floorMin(1, 2, 1)\n * 0\n * >>> floorMin(11, 10, 9)\n * 9\n */\nfunc floorMin(a : Int, b : Int, n : Int) -> Int {\n", "entry_point": "floorMin", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 20\nvar arg02 : Int = 30\nvar x0 : Int = floorMin(a : arg00, b : arg01, n : arg02)\nvar v0 : Int = 15\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar arg11 : Int = 2\nvar arg12 : Int = 1\nvar x1 : Int = floorMin(a : arg10, b : arg11, n : arg12)\nvar v1 : Int = 0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 11\nvar arg21 : Int = 10\nvar arg22 : Int = 9\nvar x2 : Int = floorMin(a : arg20, b : arg21, n : arg22)\nvar v2 : Int = 9\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find minimum possible value for the given periodic function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/610", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove the k'th element from a given list.\n *\n * >>> removeKthElement([1, 1, 2, 3, 4, 4, 5, 1], 3)\n * [1, 1, 3, 4, 4, 5, 1]\n * >>> removeKthElement([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4)\n * [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n * >>> removeKthElement([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5)\n * [10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]\n */\nfunc removeKthElement(list1 : [Int], l : Int) -> [Int] {\n", "entry_point": "removeKthElement", "test": "\n\nvar arg00 : [Int] = [1, 1, 2, 3, 4, 4, 5, 1]\nvar arg01 : Int = 3\nvar x0 : [Int] = removeKthElement(list1 : arg00, l : arg01)\nvar v0 : [Int] = [1, 1, 3, 4, 4, 5, 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nvar arg11 : Int = 4\nvar x1 : [Int] = removeKthElement(list1 : arg10, l : arg11)\nvar v1 : [Int] = [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]\nvar arg21 : Int = 5\nvar x2 : [Int] = removeKthElement(list1 : arg20, l : arg21)\nvar v2 : [Int] = [10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to remove the k'th element from a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/611", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum of nth column from the given tuple list.\n *\n * >>> maxOfNth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n * 19\n * >>> maxOfNth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1)\n * 10\n * >>> maxOfNth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1)\n * 11\n */\nfunc maxOfNth(testList : [[Int]], n : Int) -> Int {\n", "entry_point": "maxOfNth", "test": "\n\nvar arg00 : [[Int]] = [[5, 6, 7], [1, 3, 5], [8, 9, 19]]\nvar arg01 : Int = 2\nvar x0 : Int = maxOfNth(testList : arg00, n : arg01)\nvar v0 : Int = 19\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[6, 7, 8], [2, 4, 6], [9, 10, 20]]\nvar arg11 : Int = 1\nvar x1 : Int = maxOfNth(testList : arg10, n : arg11)\nvar v1 : Int = 10\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[7, 8, 9], [3, 5, 7], [10, 11, 21]]\nvar arg21 : Int = 1\nvar x2 : Int = maxOfNth(testList : arg20, n : arg21)\nvar v2 : Int = 11\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the maximum of nth column from the given tuple list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/612", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to merge the first and last elements separately in a list of lists.\n *\n * >>> merge([[\"x\", \"y\"], [\"a\", \"b\"], [\"m\", \"n\"]])\n * [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"]]\n * >>> merge([[1, 2], [3, 4], [5, 6], [7, 8]])\n * [[1, 3, 5, 7], [2, 4, 6, 8]]\n * >>> merge([[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"], [\"m\", \"n\", \"o\"]])\n * [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"], [\"z\", \"c\", \"o\"]]\n */\nfunc merge(lst : [[AnyHashable]]) -> [[AnyHashable]] {\n", "entry_point": "merge", "test": "\n\nvar arg00 : [[AnyHashable]] = [[#\"x\"#, #\"y\"#], [#\"a\"#, #\"b\"#], [#\"m\"#, #\"n\"#]]\nvar x0 : [[AnyHashable]] = merge(lst : arg00)\nvar v0 : [[AnyHashable]] = [[#\"x\"#, #\"a\"#, #\"m\"#], [#\"y\"#, #\"b\"#, #\"n\"#]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[1, 2], [3, 4], [5, 6], [7, 8]]\nvar x1 : [[AnyHashable]] = merge(lst : arg10)\nvar v1 : [[AnyHashable]] = [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[#\"x\"#, #\"y\"#, #\"z\"#], [#\"a\"#, #\"b\"#, #\"c\"#], [#\"m\"#, #\"n\"#, #\"o\"#]]\nvar x2 : [[AnyHashable]] = merge(lst : arg20)\nvar v2 : [[AnyHashable]] = [[#\"x\"#, #\"a\"#, #\"m\"#], [#\"y\"#, #\"b\"#, #\"n\"#], [#\"z\"#, #\"c\"#, #\"o\"#]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to merge the first and last elements separately in a list of lists.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/613", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\n *\n * >>> maximumValue([[\"key1\", [3, 4, 5]], [\"key2\", [1, 4, 2]], [\"key3\", [9, 3]]])\n * [[\"key1\", 5], [\"key2\", 4], [\"key3\", 9]]\n * >>> maximumValue([[\"key1\", [4, 5, 6]], [\"key2\", [2, 5, 3]], [\"key3\", [10, 4]]])\n * [[\"key1\", 6], [\"key2\", 5], [\"key3\", 10]]\n * >>> maximumValue([[\"key1\", [5, 6, 7]], [\"key2\", [3, 6, 4]], [\"key3\", [11, 5]]])\n * [[\"key1\", 7], [\"key2\", 6], [\"key3\", 11]]\n */\nfunc maximumValue(testList : [[AnyHashable]]) -> [[AnyHashable]] {\n", "entry_point": "maximumValue", "test": "\n\nvar arg00 : [[AnyHashable]] = [[#\"key1\"#, [3, 4, 5]], [#\"key2\"#, [1, 4, 2]], [#\"key3\"#, [9, 3]]]\nvar x0 : [[AnyHashable]] = maximumValue(testList : arg00)\nvar v0 : [[AnyHashable]] = [[#\"key1\"#, 5], [#\"key2\"#, 4], [#\"key3\"#, 9]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[#\"key1\"#, [4, 5, 6]], [#\"key2\"#, [2, 5, 3]], [#\"key3\"#, [10, 4]]]\nvar x1 : [[AnyHashable]] = maximumValue(testList : arg10)\nvar v1 : [[AnyHashable]] = [[#\"key1\"#, 6], [#\"key2\"#, 5], [#\"key3\"#, 10]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[#\"key1\"#, [5, 6, 7]], [#\"key2\"#, [3, 6, 4]], [#\"key3\"#, [11, 5]]]\nvar x2 : [[AnyHashable]] = maximumValue(testList : arg20)\nvar v2 : [[AnyHashable]] = [[#\"key1\"#, 7], [#\"key2\"#, 6], [#\"key3\"#, 11]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/614", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n *\n * >>> cummulativeSum([[1, 3], [5, 6, 7], [2, 6]])\n * 30\n * >>> cummulativeSum([[2, 4], [6, 7, 8], [3, 7]])\n * 37\n * >>> cummulativeSum([[3, 5], [7, 8, 9], [4, 8]])\n * 44\n */\nfunc cummulativeSum(testList : [[Int]]) -> Int {\n", "entry_point": "cummulativeSum", "test": "\n\nvar arg00 : [[Int]] = [[1, 3], [5, 6, 7], [2, 6]]\nvar x0 : Int = cummulativeSum(testList : arg00)\nvar v0 : Int = 30\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[2, 4], [6, 7, 8], [3, 7]]\nvar x1 : Int = cummulativeSum(testList : arg10)\nvar v1 : Int = 37\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[3, 5], [7, 8, 9], [4, 8]]\nvar x2 : Int = cummulativeSum(testList : arg20)\nvar v2 : Int = 44\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/615", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find average value of the numbers in a given tuple of tuples.\n *\n * >>> averageTuple([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]])\n * [30.5, 34.25, 27.0, 23.25]\n * >>> averageTuple([[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]])\n * [25.5, -18.0, 3.75]\n * >>> averageTuple([[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]])\n * [305.0, 342.5, 270.0, 232.5]\n */\nfunc averageTuple(nums : [[Int]]) -> [Double] {\n", "entry_point": "averageTuple", "test": "\n\nvar arg00 : [[Int]] = [[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]\nvar x0 : [Double] = averageTuple(nums : arg00)\nvar v0 : [Double] = [30.5, 34.25, 27.0, 23.25]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]]\nvar x1 : [Double] = averageTuple(nums : arg10)\nvar v1 : [Double] = [25.5, -18.0, 3.75]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]]\nvar x2 : [Double] = averageTuple(nums : arg20)\nvar v2 : [Double] = [305.0, 342.5, 270.0, 232.5]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find average value of the numbers in a given tuple of tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/616", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perfom the modulo of tuple elements in the given two tuples.\n *\n * >>> tupleModulo([10, 4, 5, 6], [5, 6, 7, 5])\n * [0, 4, 5, 1]\n * >>> tupleModulo([11, 5, 6, 7], [6, 7, 8, 6])\n * [5, 5, 6, 1]\n * >>> tupleModulo([12, 6, 7, 8], [7, 8, 9, 7])\n * [5, 6, 7, 1]\n */\nfunc tupleModulo(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n", "entry_point": "tupleModulo", "test": "\n\nvar arg00 : [Int] = [10, 4, 5, 6]\nvar arg01 : [Int] = [5, 6, 7, 5]\nvar x0 : [Int] = tupleModulo(testTup1 : arg00, testTup2 : arg01)\nvar v0 : [Int] = [0, 4, 5, 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [11, 5, 6, 7]\nvar arg11 : [Int] = [6, 7, 8, 6]\nvar x1 : [Int] = tupleModulo(testTup1 : arg10, testTup2 : arg11)\nvar v1 : [Int] = [5, 5, 6, 1]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [12, 6, 7, 8]\nvar arg21 : [Int] = [7, 8, 9, 7]\nvar x2 : [Int] = tupleModulo(testTup1 : arg20, testTup2 : arg21)\nvar v2 : [Int] = [5, 6, 7, 1]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to perfom the modulo of tuple elements in the given two tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/617", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n *\n * >>> minJumps(3, 4, 11)\n * 3.5\n * >>> minJumps(3, 4, 0)\n * 0\n * >>> minJumps(11, 14, 11)\n * 1\n */\nfunc minJumps(a : Int, b : Int, d : Int) -> Double {\n", "entry_point": "minJumps", "test": "\n\nvar arg00 : Int = 3\nvar arg01 : Int = 4\nvar arg02 : Int = 11\nvar x0 : Double = minJumps(a : arg00, b : arg01, d : arg02)\nvar v0 : Double = 3.5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar arg11 : Int = 4\nvar arg12 : Int = 0\nvar x1 : Double = minJumps(a : arg10, b : arg11, d : arg12)\nvar v1 : Double = 0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 11\nvar arg21 : Int = 14\nvar arg22 : Int = 11\nvar x2 : Double = minJumps(a : arg20, b : arg21, d : arg22)\nvar v2 : Double = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/618", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to divide two lists using map and lambda function.\n *\n * >>> divList([4, 5, 6], [1, 2, 3])\n * [4.0, 2.5, 2.0]\n * >>> divList([3, 2], [1, 4])\n * [3.0, 0.5]\n * >>> divList([90, 120], [50, 70])\n * [1.8, 1.7142857142857142]\n */\nfunc divList(nums1 : [Int], nums2 : [Int]) -> [Double] {\n", "entry_point": "divList", "test": "\n\nvar arg00 : [Int] = [4, 5, 6]\nvar arg01 : [Int] = [1, 2, 3]\nvar x0 : [Double] = divList(nums1 : arg00, nums2 : arg01)\nvar v0 : [Double] = [4.0, 2.5, 2.0]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [3, 2]\nvar arg11 : [Int] = [1, 4]\nvar x1 : [Double] = divList(nums1 : arg10, nums2 : arg11)\nvar v1 : [Double] = [3.0, 0.5]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [90, 120]\nvar arg21 : [Int] = [50, 70]\nvar x2 : [Double] = divList(nums1 : arg20, nums2 : arg21)\nvar v2 : [Double] = [1.8, 1.7142857142857142]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to divide two lists using map and lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/619", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to move all the numbers in it to the given string.\n *\n * >>> moveNum(\"I1love143you55three3000thousand\")\n * \"Iloveyouthreethousand1143553000\"\n * >>> moveNum(\"Avengers124Assemble\")\n * \"AvengersAssemble124\"\n * >>> moveNum(\"Its11our12path13to14see15things16do17things\")\n * \"Itsourpathtoseethingsdothings11121314151617\"\n */\nfunc moveNum(testStr : String) -> String {\n", "entry_point": "moveNum", "test": "\n\nvar arg00 : String = #\"I1love143you55three3000thousand\"#\nvar x0 : String = moveNum(testStr : arg00)\nvar v0 : String = #\"Iloveyouthreethousand1143553000\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Avengers124Assemble\"#\nvar x1 : String = moveNum(testStr : arg10)\nvar v1 : String = #\"AvengersAssemble124\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Its11our12path13to14see15things16do17things\"#\nvar x2 : String = moveNum(testStr : arg20)\nvar v2 : String = #\"Itsourpathtoseethingsdothings11121314151617\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to move all the numbers in it to the given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/620", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the largest subset where each pair is divisible.\n *\n * >>> largestSubset([1, 3, 6, 13, 17, 18], 6)\n * 4\n * >>> largestSubset([10, 5, 3, 15, 20], 5)\n * 3\n * >>> largestSubset([18, 1, 3, 6, 13, 17], 6)\n * 4\n */\nfunc largestSubset(a : [Int], n : Int) -> Int {\n", "entry_point": "largestSubset", "test": "\n\nvar arg00 : [Int] = [1, 3, 6, 13, 17, 18]\nvar arg01 : Int = 6\nvar x0 : Int = largestSubset(a : arg00, n : arg01)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [10, 5, 3, 15, 20]\nvar arg11 : Int = 5\nvar x1 : Int = largestSubset(a : arg10, n : arg11)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [18, 1, 3, 6, 13, 17]\nvar arg21 : Int = 6\nvar x2 : Int = largestSubset(a : arg20, n : arg21)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the largest subset where each pair is divisible.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/621", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to increment the numeric values in the given strings by k.\n *\n * >>> incrementNumerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"], 6)\n * [\"MSM\", \"240\", \"is\", \"104\", \"129\", \"best\", \"10\"]\n * >>> incrementNumerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"], 12)\n * [\"Dart\", \"368\", \"is\", \"100\", \"181\", \"Super\", \"18\"]\n * >>> incrementNumerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"], 33)\n * [\"Flutter\", \"484\", \"is\", \"77\", \"129\", \"Magnificent\", \"45\"]\n */\nfunc incrementNumerics(testList : [String], k : Int) -> [String] {\n", "entry_point": "incrementNumerics", "test": "\n\nvar arg00 : [String] = [#\"MSM\"#, #\"234\"#, #\"is\"#, #\"98\"#, #\"123\"#, #\"best\"#, #\"4\"#]\nvar arg01 : Int = 6\nvar x0 : [String] = incrementNumerics(testList : arg00, k : arg01)\nvar v0 : [String] = [#\"MSM\"#, #\"240\"#, #\"is\"#, #\"104\"#, #\"129\"#, #\"best\"#, #\"10\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"Dart\"#, #\"356\"#, #\"is\"#, #\"88\"#, #\"169\"#, #\"Super\"#, #\"6\"#]\nvar arg11 : Int = 12\nvar x1 : [String] = incrementNumerics(testList : arg10, k : arg11)\nvar v1 : [String] = [#\"Dart\"#, #\"368\"#, #\"is\"#, #\"100\"#, #\"181\"#, #\"Super\"#, #\"18\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"Flutter\"#, #\"451\"#, #\"is\"#, #\"44\"#, #\"96\"#, #\"Magnificent\"#, #\"12\"#]\nvar arg21 : Int = 33\nvar x2 : [String] = incrementNumerics(testList : arg20, k : arg21)\nvar v2 : [String] = [#\"Flutter\"#, #\"484\"#, #\"is\"#, #\"77\"#, #\"129\"#, #\"Magnificent\"#, #\"45\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to increment the numeric values in the given strings by k.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/622", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the median of two sorted arrays of same size.\n *\n * >>> getMedian([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)\n * 16.0\n * >>> getMedian([2, 4, 8, 9], [7, 13, 19, 28], 4)\n * 8.5\n * >>> getMedian([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6)\n * 25.0\n */\nfunc getMedian(arr1 : [Int], arr2 : [Int], n : Int) -> Double {\n", "entry_point": "getMedian", "test": "\n\nvar arg00 : [Int] = [1, 12, 15, 26, 38]\nvar arg01 : [Int] = [2, 13, 17, 30, 45]\nvar arg02 : Int = 5\nvar x0 : Double = getMedian(arr1 : arg00, arr2 : arg01, n : arg02)\nvar v0 : Double = 16.0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 4, 8, 9]\nvar arg11 : [Int] = [7, 13, 19, 28]\nvar arg12 : Int = 4\nvar x1 : Double = getMedian(arr1 : arg10, arr2 : arg11, n : arg12)\nvar v1 : Double = 8.5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3, 6, 14, 23, 36, 42]\nvar arg21 : [Int] = [2, 18, 27, 39, 49, 55]\nvar arg22 : Int = 6\nvar x2 : Double = getMedian(arr1 : arg20, arr2 : arg21, n : arg22)\nvar v2 : Double = 25.0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the median of two sorted arrays of same size.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/623", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n-th power of individual elements in a list using lambda function.\n *\n * >>> nthNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n * [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n * >>> nthNums([10, 20, 30], 3)\n * [1000, 8000, 27000]\n * >>> nthNums([12, 15], 5)\n * [248832, 759375]\n */\nfunc nthNums(nums : [Int], n : Int) -> [Int] {\n", "entry_point": "nthNums", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar arg01 : Int = 2\nvar x0 : [Int] = nthNums(nums : arg00, n : arg01)\nvar v0 : [Int] = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [10, 20, 30]\nvar arg11 : Int = 3\nvar x1 : [Int] = nthNums(nums : arg10, n : arg11)\nvar v1 : [Int] = [1000, 8000, 27000]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [12, 15]\nvar arg21 : Int = 5\nvar x2 : [Int] = nthNums(nums : arg20, n : arg21)\nvar v2 : [Int] = [248832, 759375]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the n-th power of individual elements in a list using lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/624", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert the given string to upper case.\n *\n * >>> isUpper(\"person\")\n * \"PERSON\"\n * >>> isUpper(\"final\")\n * \"FINAL\"\n * >>> isUpper(\"Valid\")\n * \"VALID\"\n */\nfunc isUpper(string : String) -> String {\n", "entry_point": "isUpper", "test": "\n\nvar arg00 : String = #\"person\"#\nvar x0 : String = isUpper(string : arg00)\nvar v0 : String = #\"PERSON\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"final\"#\nvar x1 : String = isUpper(string : arg10)\nvar v1 : String = #\"FINAL\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Valid\"#\nvar x2 : String = isUpper(string : arg20)\nvar v2 : String = #\"VALID\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to convert the given string to upper case.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/625", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to interchange first and last elements in a given list.\n *\n * >>> swapList([1, 2, 3])\n * [3, 2, 1]\n * >>> swapList([1, 2, 3, 4, 4])\n * [4, 2, 3, 4, 1]\n * >>> swapList([4, 5, 6])\n * [6, 5, 4]\n */\nfunc swapList(newlist : [Int]) -> [Int] {\n", "entry_point": "swapList", "test": "\n\nvar arg00 : [Int] = [1, 2, 3]\nvar x0 : [Int] = swapList(newlist : arg00)\nvar v0 : [Int] = [3, 2, 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 4]\nvar x1 : [Int] = swapList(newlist : arg10)\nvar v1 : [Int] = [4, 2, 3, 4, 1]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [4, 5, 6]\nvar x2 : [Int] = swapList(newlist : arg20)\nvar v2 : [Int] = [6, 5, 4]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to interchange first and last elements in a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/626", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the largest triangle that can be inscribed in the semicircle.\n *\n * >>> triangleArea(0)\n * 0\n * >>> triangleArea(-1)\n * -1\n * >>> triangleArea(2)\n * 4\n */\nfunc triangleArea(r : Int) -> Int {\n", "entry_point": "triangleArea", "test": "\n\nvar arg00 : Int = 0\nvar x0 : Int = triangleArea(r : arg00)\nvar v0 : Int = 0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = -1\nvar x1 : Int = triangleArea(r : arg10)\nvar v1 : Int = -1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar x2 : Int = triangleArea(r : arg20)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the largest triangle that can be inscribed in the semicircle.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/627", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the smallest missing number from the given array.\n *\n * >>> findFirstMissing([0, 1, 2, 3], 0, 3)\n * 4\n * >>> findFirstMissing([0, 1, 2, 6, 9], 0, 4)\n * 3\n * >>> findFirstMissing([2, 3, 5, 8, 9], 0, 4)\n * 0\n */\nfunc findFirstMissing(array : [Int], start : Int, end : Int) -> Int {\n", "entry_point": "findFirstMissing", "test": "\n\nvar arg00 : [Int] = [0, 1, 2, 3]\nvar arg01 : Int = 0\nvar arg02 : Int = 3\nvar x0 : Int = findFirstMissing(array : arg00, start : arg01, end : arg02)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [0, 1, 2, 6, 9]\nvar arg11 : Int = 0\nvar arg12 : Int = 4\nvar x1 : Int = findFirstMissing(array : arg10, start : arg11, end : arg12)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 3, 5, 8, 9]\nvar arg21 : Int = 0\nvar arg22 : Int = 4\nvar x2 : Int = findFirstMissing(array : arg20, start : arg21, end : arg22)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the smallest missing number from the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/628", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n *\n * >>> replaceSpaces(\"My Name is Dawood\")\n * \"My%20Name%20is%20Dawood\"\n * >>> replaceSpaces(\"I am a Programmer\")\n * \"I%20am%20a%20Programmer\"\n * >>> replaceSpaces(\"I love Coding\")\n * \"I%20love%20Coding\"\n */\nfunc replaceSpaces(string : String) -> String {\n", "entry_point": "replaceSpaces", "test": "\n\nvar arg00 : String = #\"My Name is Dawood\"#\nvar x0 : String = replaceSpaces(string : arg00)\nvar v0 : String = #\"My%20Name%20is%20Dawood\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"I am a Programmer\"#\nvar x1 : String = replaceSpaces(string : arg10)\nvar v1 : String = #\"I%20am%20a%20Programmer\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"I love Coding\"#\nvar x2 : String = replaceSpaces(string : arg20)\nvar v2 : String = #\"I%20love%20Coding\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/629", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find even numbers from a mixed list.\n *\n * >>> split([1, 2, 3, 4, 5])\n * [2, 4]\n * >>> split([4, 5, 6, 7, 8, 0, 1])\n * [4, 6, 8, 0]\n */\nfunc split(list : [Int]) -> [Int] {\n", "entry_point": "split", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5]\nvar x0 : [Int] = split(list : arg00)\nvar v0 : [Int] = [2, 4]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 5, 6, 7, 8, 0, 1]\nvar x1 : [Int] = split(list : arg10)\nvar v1 : [Int] = [4, 6, 8, 0]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\n", "description": "Write a Swift function to find even numbers from a mixed list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/630", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n *\n * >>> getCoordinates([3, 4])\n * [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n * >>> getCoordinates([4, 5])\n * [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n * >>> getCoordinates([5, 6])\n * [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n */\nfunc getCoordinates(testTup : [Int]) -> [[Int]] {\n", "entry_point": "getCoordinates", "test": "\n\nvar arg00 : [Int] = [3, 4]\nvar x0 : [[Int]] = getCoordinates(testTup : arg00)\nvar v0 : [[Int]] = [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 5]\nvar x1 : [[Int]] = getCoordinates(testTup : arg10)\nvar v1 : [[Int]] = [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [5, 6]\nvar x2 : [[Int]] = getCoordinates(testTup : arg20)\nvar v2 : [[Int]] = [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/631", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n *\n * >>> replaceSpaces(\"Jumanji The Jungle\")\n * \"Jumanji_The_Jungle\"\n * >>> replaceSpaces(\"The Avengers\")\n * \"The_Avengers\"\n * >>> replaceSpaces(\"Fast and Furious\")\n * \"Fast_and_Furious\"\n */\nfunc replaceSpaces(text : String) -> String {\n", "entry_point": "replaceSpaces", "test": "\n\nvar arg00 : String = #\"Jumanji The Jungle\"#\nvar x0 : String = replaceSpaces(text : arg00)\nvar v0 : String = #\"Jumanji_The_Jungle\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"The Avengers\"#\nvar x1 : String = replaceSpaces(text : arg10)\nvar v1 : String = #\"The_Avengers\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Fast and Furious\"#\nvar x2 : String = replaceSpaces(text : arg20)\nvar v2 : String = #\"Fast_and_Furious\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/632", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to move all zeroes to the end of the given list.\n *\n * >>> moveZero([1, 0, 2, 0, 3, 4])\n * [1, 2, 3, 4, 0, 0]\n * >>> moveZero([2, 3, 2, 0, 0, 4, 0, 5, 0])\n * [2, 3, 2, 4, 5, 0, 0, 0, 0]\n * >>> moveZero([0, 1, 0, 1, 1])\n * [1, 1, 1, 0, 0]\n */\nfunc moveZero(numList : [Int]) -> [Int] {\n", "entry_point": "moveZero", "test": "\n\nvar arg00 : [Int] = [1, 0, 2, 0, 3, 4]\nvar x0 : [Int] = moveZero(numList : arg00)\nvar v0 : [Int] = [1, 2, 3, 4, 0, 0]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 3, 2, 0, 0, 4, 0, 5, 0]\nvar x1 : [Int] = moveZero(numList : arg10)\nvar v1 : [Int] = [2, 3, 2, 4, 5, 0, 0, 0, 0]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [0, 1, 0, 1, 1]\nvar x2 : [Int] = moveZero(numList : arg20)\nvar v2 : [Int] = [1, 1, 1, 0, 0]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to move all zeroes to the end of the given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/633", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of xor of all pairs of numbers in the given array.\n *\n * >>> pairOrSum([5, 9, 7, 6], 4)\n * 47\n * >>> pairOrSum([7, 3, 5], 3)\n * 12\n * >>> pairOrSum([7, 3], 2)\n * 4\n */\nfunc pairOrSum(arr : [Int], n : Int) -> Int {\n", "entry_point": "pairOrSum", "test": "\n\nvar arg00 : [Int] = [5, 9, 7, 6]\nvar arg01 : Int = 4\nvar x0 : Int = pairOrSum(arr : arg00, n : arg01)\nvar v0 : Int = 47\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [7, 3, 5]\nvar arg11 : Int = 3\nvar x1 : Int = pairOrSum(arr : arg10, n : arg11)\nvar v1 : Int = 12\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [7, 3]\nvar arg21 : Int = 2\nvar x2 : Int = pairOrSum(arr : arg20, n : arg21)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of xor of all pairs of numbers in the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/634", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of fourth power of first n even natural numbers.\n *\n * >>> evenPowerSum(2)\n * 272\n * >>> evenPowerSum(3)\n * 1568\n * >>> evenPowerSum(4)\n * 5664\n */\nfunc evenPowerSum(n : Int) -> Int {\n", "entry_point": "evenPowerSum", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = evenPowerSum(n : arg00)\nvar v0 : Int = 272\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar x1 : Int = evenPowerSum(n : arg10)\nvar v1 : Int = 1568\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar x2 : Int = evenPowerSum(n : arg20)\nvar v2 : Int = 5664\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of fourth power of first n even natural numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/635", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to push all values into a heap and then pop off the smallest values one at a time.\n *\n * >>> heapSort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n * [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n * >>> heapSort([25, 35, 22, 85, 14, 65, 75, 25, 58])\n * [14, 22, 25, 25, 35, 58, 65, 75, 85]\n * >>> heapSort([7, 1, 9, 5])\n * [1, 5, 7, 9]\n */\nfunc heapSort(iterable : [Int]) -> [Int] {\n", "entry_point": "heapSort", "test": "\n\nvar arg00 : [Int] = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\nvar x0 : [Int] = heapSort(iterable : arg00)\nvar v0 : [Int] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [25, 35, 22, 85, 14, 65, 75, 25, 58]\nvar x1 : [Int] = heapSort(iterable : arg10)\nvar v1 : [Int] = [14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [7, 1, 9, 5]\nvar x2 : [Int] = heapSort(iterable : arg20)\nvar v2 : [Int] = [1, 5, 7, 9]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to push all values into a heap and then pop off the smallest values one at a time.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/636", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if roots of a quadratic equation are reciprocal of each other or not.\n *\n * >>> checkSolution(2, 0, 2)\n * \"Yes\"\n * >>> checkSolution(2, -5, 2)\n * \"Yes\"\n * >>> checkSolution(1, 2, 3)\n * \"No\"\n */\nfunc checkSolution(a : Int, b : Int, c : Int) -> String {\n", "entry_point": "checkSolution", "test": "\n\nvar arg00 : Int = 2\nvar arg01 : Int = 0\nvar arg02 : Int = 2\nvar x0 : String = checkSolution(a : arg00, b : arg01, c : arg02)\nvar v0 : String = #\"Yes\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar arg11 : Int = -5\nvar arg12 : Int = 2\nvar x1 : String = checkSolution(a : arg10, b : arg11, c : arg12)\nvar v1 : String = #\"Yes\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = 2\nvar arg22 : Int = 3\nvar x2 : String = checkSolution(a : arg20, b : arg21, c : arg22)\nvar v2 : String = #\"No\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check if roots of a quadratic equation are reciprocal of each other or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/637", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given amount has no profit and no loss\n *\n * >>> noprofitNoloss(1500, 1200)\n * false\n * >>> noprofitNoloss(100, 100)\n * true\n * >>> noprofitNoloss(2000, 5000)\n * false\n */\nfunc noprofitNoloss(actualCost : Int, saleAmount : Int) -> Bool {\n", "entry_point": "noprofitNoloss", "test": "\n\nvar arg00 : Int = 1500\nvar arg01 : Int = 1200\nvar x0 : Bool = noprofitNoloss(actualCost : arg00, saleAmount : arg01)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 100\nvar arg11 : Int = 100\nvar x1 : Bool = noprofitNoloss(actualCost : arg10, saleAmount : arg11)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2000\nvar arg21 : Int = 5000\nvar x2 : Bool = noprofitNoloss(actualCost : arg20, saleAmount : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether the given amount has no profit and no loss", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/638", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate wind chill index.\n *\n * >>> windChill(120, 35)\n * 40\n * >>> windChill(40, 70)\n * 86\n * >>> windChill(10, 100)\n * 116\n */\nfunc windChill(v : Int, t : Int) -> Int {\n", "entry_point": "windChill", "test": "\n\nvar arg00 : Int = 120\nvar arg01 : Int = 35\nvar x0 : Int = windChill(v : arg00, t : arg01)\nvar v0 : Int = 40\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 40\nvar arg11 : Int = 70\nvar x1 : Int = windChill(v : arg10, t : arg11)\nvar v1 : Int = 86\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 10\nvar arg21 : Int = 100\nvar x2 : Int = windChill(v : arg20, t : arg21)\nvar v2 : Int = 116\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate wind chill index.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/639", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n *\n * >>> sampleNam([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"])\n * 16\n * >>> sampleNam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])\n * 10\n * >>> sampleNam([\"abcd\", \"Python\", \"abba\", \"aba\"])\n * 6\n */\nfunc sampleNam(sampleNames : [String]) -> Int {\n", "entry_point": "sampleNam", "test": "\n\nvar arg00 : [String] = [#\"sally\"#, #\"Dylan\"#, #\"rebecca\"#, #\"Diana\"#, #\"Joanne\"#, #\"keith\"#]\nvar x0 : Int = sampleNam(sampleNames : arg00)\nvar v0 : Int = 16\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"php\"#, #\"res\"#, #\"Python\"#, #\"abcd\"#, #\"Java\"#, #\"aaa\"#]\nvar x1 : Int = sampleNam(sampleNames : arg10)\nvar v1 : Int = 10\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"abcd\"#, #\"Python\"#, #\"abba\"#, #\"aba\"#]\nvar x2 : Int = sampleNam(sampleNames : arg20)\nvar v2 : Int = 6\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/640", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove the parenthesis area in a string.\n *\n * >>> removeParenthesis([\"python (chrome)\"])\n * \"python\"\n * >>> removeParenthesis([\"string(.abc)\"])\n * \"string\"\n * >>> removeParenthesis([\"alpha(num)\"])\n * \"alpha\"\n */\nfunc removeParenthesis(items : [String]) -> String {\n", "entry_point": "removeParenthesis", "test": "\n\nvar arg00 : [String] = [#\"python (chrome)\"#]\nvar x0 : String = removeParenthesis(items : arg00)\nvar v0 : String = #\"python\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"string(.abc)\"#]\nvar x1 : String = removeParenthesis(items : arg10)\nvar v1 : String = #\"string\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"alpha(num)\"#]\nvar x2 : String = removeParenthesis(items : arg20)\nvar v2 : String = #\"alpha\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove the parenthesis area in a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/641", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth nonagonal number.\n *\n * >>> isNonagonal(10)\n * 325\n * >>> isNonagonal(15)\n * 750\n * >>> isNonagonal(18)\n * 1089\n */\nfunc isNonagonal(n : Int) -> Int {\n", "entry_point": "isNonagonal", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = isNonagonal(n : arg00)\nvar v0 : Int = 325\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 15\nvar x1 : Int = isNonagonal(n : arg10)\nvar v1 : Int = 750\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 18\nvar x2 : Int = isNonagonal(n : arg20)\nvar v2 : Int = 1089\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the nth nonagonal number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/643", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a word containing 'z', not at the start or end of the word.\n *\n * >>> textMatchWordzMiddle(\"pythonzabc.\")\n * \"Found a match!\"\n * >>> textMatchWordzMiddle(\"xyzabc.\")\n * \"Found a match!\"\n * >>> textMatchWordzMiddle(\"  lang  .\")\n * \"Not matched!\"\n */\nfunc textMatchWordzMiddle(text : String) -> String {\n", "entry_point": "textMatchWordzMiddle", "test": "\n\nvar arg00 : String = #\"pythonzabc.\"#\nvar x0 : String = textMatchWordzMiddle(text : arg00)\nvar v0 : String = #\"Found a match!\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"xyzabc.\"#\nvar x1 : String = textMatchWordzMiddle(text : arg10)\nvar v1 : String = #\"Found a match!\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"  lang  .\"#\nvar x2 : String = textMatchWordzMiddle(text : arg20)\nvar v2 : String = #\"Not matched!\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function that matches a word containing 'z', not at the start or end of the word.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/644", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to reverse an array upto a given position.\n *\n * >>> reverseArrayUptoK([1, 2, 3, 4, 5, 6], 4)\n * [4, 3, 2, 1, 5, 6]\n * >>> reverseArrayUptoK([4, 5, 6, 7], 2)\n * [5, 4, 6, 7]\n * >>> reverseArrayUptoK([9, 8, 7, 6, 5], 3)\n * [7, 8, 9, 6, 5]\n */\nfunc reverseArrayUptoK(input : [Int], k : Int) -> [Int] {\n", "entry_point": "reverseArrayUptoK", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5, 6]\nvar arg01 : Int = 4\nvar x0 : [Int] = reverseArrayUptoK(input : arg00, k : arg01)\nvar v0 : [Int] = [4, 3, 2, 1, 5, 6]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 5, 6, 7]\nvar arg11 : Int = 2\nvar x1 : [Int] = reverseArrayUptoK(input : arg10, k : arg11)\nvar v1 : [Int] = [5, 4, 6, 7]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [9, 8, 7, 6, 5]\nvar arg21 : Int = 3\nvar x2 : [Int] = reverseArrayUptoK(input : arg20, k : arg21)\nvar v2 : [Int] = [7, 8, 9, 6, 5]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to reverse an array upto a given position.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/645", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the product of it\u2019s kth index in the given tuples.\n *\n * >>> findKProduct([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n * 665\n * >>> findKProduct([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1)\n * 280\n * >>> findKProduct([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 0)\n * 210\n */\nfunc findKProduct(testList : [[Int]], k : Int) -> Int {\n", "entry_point": "findKProduct", "test": "\n\nvar arg00 : [[Int]] = [[5, 6, 7], [1, 3, 5], [8, 9, 19]]\nvar arg01 : Int = 2\nvar x0 : Int = findKProduct(testList : arg00, k : arg01)\nvar v0 : Int = 665\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[6, 7, 8], [2, 4, 6], [9, 10, 20]]\nvar arg11 : Int = 1\nvar x1 : Int = findKProduct(testList : arg10, k : arg11)\nvar v1 : Int = 280\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[7, 8, 9], [3, 5, 7], [10, 11, 21]]\nvar arg21 : Int = 0\nvar x2 : Int = findKProduct(testList : arg20, k : arg21)\nvar v2 : Int = 210\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the product of it\u2019s kth index in the given tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/646", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count number of cubes of size k in a cube of size n.\n *\n * >>> noOfCubes(2, 1)\n * 8\n * >>> noOfCubes(5, 2)\n * 64\n * >>> noOfCubes(1, 1)\n * 1\n */\nfunc noOfCubes(n : Int, k : Int) -> Int {\n", "entry_point": "noOfCubes", "test": "\n\nvar arg00 : Int = 2\nvar arg01 : Int = 1\nvar x0 : Int = noOfCubes(n : arg00, k : arg01)\nvar v0 : Int = 8\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar arg11 : Int = 2\nvar x1 : Int = noOfCubes(n : arg10, k : arg11)\nvar v1 : Int = 64\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = 1\nvar x2 : Int = noOfCubes(n : arg20, k : arg21)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count number of cubes of size k in a cube of size n.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/647", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to split a string at uppercase letters.\n *\n * >>> splitUpperstring(\"PythonProgramLanguage\")\n * [\"Python\", \"Program\", \"Language\"]\n * >>> splitUpperstring(\"PythonProgram\")\n * [\"Python\", \"Program\"]\n * >>> splitUpperstring(\"ProgrammingLanguage\")\n * [\"Programming\", \"Language\"]\n */\nfunc splitUpperstring(text : String) -> [String] {\n", "entry_point": "splitUpperstring", "test": "\n\nvar arg00 : String = #\"PythonProgramLanguage\"#\nvar x0 : [String] = splitUpperstring(text : arg00)\nvar v0 : [String] = [#\"Python\"#, #\"Program\"#, #\"Language\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"PythonProgram\"#\nvar x1 : [String] = splitUpperstring(text : arg10)\nvar v1 : [String] = [#\"Python\"#, #\"Program\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"ProgrammingLanguage\"#\nvar x2 : [String] = splitUpperstring(text : arg20)\nvar v2 : [String] = [#\"Programming\"#, #\"Language\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to split a string at uppercase letters.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/648", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n *\n * >>> exchangeElements([0, 1, 2, 3, 4, 5])\n * [1, 0, 3, 2, 5, 4]\n * >>> exchangeElements([5, 6, 7, 8, 9, 10])\n * [6, 5, 8, 7, 10, 9]\n * >>> exchangeElements([25, 35, 45, 55, 75, 95])\n * [35, 25, 55, 45, 95, 75]\n */\nfunc exchangeElements(lst : [Int]) -> [Int] {\n", "entry_point": "exchangeElements", "test": "\n\nvar arg00 : [Int] = [0, 1, 2, 3, 4, 5]\nvar x0 : [Int] = exchangeElements(lst : arg00)\nvar v0 : [Int] = [1, 0, 3, 2, 5, 4]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [5, 6, 7, 8, 9, 10]\nvar x1 : [Int] = exchangeElements(lst : arg10)\nvar v1 : [Int] = [6, 5, 8, 7, 10, 9]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [25, 35, 45, 55, 75, 95]\nvar x2 : [Int] = exchangeElements(lst : arg20)\nvar v2 : [Int] = [35, 25, 55, 45, 95, 75]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/649", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to calculate the sum of the numbers in a list between the indices of a specified range.\n *\n * >>> sumRangeList([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n * 29\n * >>> sumRangeList([1, 2, 3, 4, 5], 1, 2)\n * 5\n * >>> sumRangeList([1, 0, 1, 2, 5, 6], 4, 5)\n * 11\n */\nfunc sumRangeList(nums : [Int], m : Int, n : Int) -> Int {\n", "entry_point": "sumRangeList", "test": "\n\nvar arg00 : [Int] = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12]\nvar arg01 : Int = 8\nvar arg02 : Int = 10\nvar x0 : Int = sumRangeList(nums : arg00, m : arg01, n : arg02)\nvar v0 : Int = 29\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5]\nvar arg11 : Int = 1\nvar arg12 : Int = 2\nvar x1 : Int = sumRangeList(nums : arg10, m : arg11, n : arg12)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 0, 1, 2, 5, 6]\nvar arg21 : Int = 4\nvar arg22 : Int = 5\nvar x2 : Int = sumRangeList(nums : arg20, m : arg21, n : arg22)\nvar v2 : Int = 11\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to calculate the sum of the numbers in a list between the indices of a specified range.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/650", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given two arrays are equal or not.\n *\n * >>> areEqual([1, 2, 3], [3, 2, 1], 3, 3)\n * true\n * >>> areEqual([1, 1, 1], [2, 2, 2], 3, 3)\n * false\n * >>> areEqual([8, 9], [4, 5, 6], 2, 3)\n * false\n */\nfunc areEqual(arr1 : [Int], arr2 : [Int], n : Int, m : Int) -> Bool {\n", "entry_point": "areEqual", "test": "\n\nvar arg00 : [Int] = [1, 2, 3]\nvar arg01 : [Int] = [3, 2, 1]\nvar arg02 : Int = 3\nvar arg03 : Int = 3\nvar x0 : Bool = areEqual(arr1 : arg00, arr2 : arg01, n : arg02, m : arg03)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 1, 1]\nvar arg11 : [Int] = [2, 2, 2]\nvar arg12 : Int = 3\nvar arg13 : Int = 3\nvar x1 : Bool = areEqual(arr1 : arg10, arr2 : arg11, n : arg12, m : arg13)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [8, 9]\nvar arg21 : [Int] = [4, 5, 6]\nvar arg22 : Int = 2\nvar arg23 : Int = 3\nvar x2 : Bool = areEqual(arr1 : arg20, arr2 : arg21, n : arg22, m : arg23)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the given two arrays are equal or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/651", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if one tuple is a subset of another tuple.\n *\n * >>> checkSubset([10, 4, 5, 6], [5, 10])\n * true\n * >>> checkSubset([1, 2, 3, 4], [5, 6])\n * false\n * >>> checkSubset([7, 8, 9, 10], [10, 8])\n * true\n */\nfunc checkSubset(testTup1 : [Int], testTup2 : [Int]) -> Bool {\n", "entry_point": "checkSubset", "test": "\n\nvar arg00 : [Int] = [10, 4, 5, 6]\nvar arg01 : [Int] = [5, 10]\nvar x0 : Bool = checkSubset(testTup1 : arg00, testTup2 : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4]\nvar arg11 : [Int] = [5, 6]\nvar x1 : Bool = checkSubset(testTup1 : arg10, testTup2 : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [7, 8, 9, 10]\nvar arg21 : [Int] = [10, 8]\nvar x2 : Bool = checkSubset(testTup1 : arg20, testTup2 : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if one tuple is a subset of another tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/652", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n *\n * >>> matrixToList([[[4, 5], [7, 8]], [[10, 13], [18, 17]], [[0, 4], [10, 1]]])\n * \"[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]\"\n * >>> matrixToList([[[5, 6], [8, 9]], [[11, 14], [19, 18]], [[1, 5], [11, 2]]])\n * \"[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]\"\n * >>> matrixToList([[[6, 7], [9, 10]], [[12, 15], [20, 21]], [[23, 7], [15, 8]]])\n * \"[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]\"\n */\nfunc matrixToList(testList : [[[Int]]]) -> String {\n", "entry_point": "matrixToList", "test": "\n\nvar arg00 : [[[Int]]] = [[[4, 5], [7, 8]], [[10, 13], [18, 17]], [[0, 4], [10, 1]]]\nvar x0 : String = matrixToList(testList : arg00)\nvar v0 : String = #\"[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[[Int]]] = [[[5, 6], [8, 9]], [[11, 14], [19, 18]], [[1, 5], [11, 2]]]\nvar x1 : String = matrixToList(testList : arg10)\nvar v1 : String = #\"[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[[Int]]] = [[[6, 7], [9, 10]], [[12, 15], [20, 21]], [[23, 7], [15, 8]]]\nvar x2 : String = matrixToList(testList : arg20)\nvar v2 : String = #\"[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/653", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n *\n * >>> groupingDictionary([[\"yellow\", 1], [\"blue\", 2], [\"yellow\", 3], [\"blue\", 4], [\"red\", 1]])\n * [\"yellow\" : [1, 3], \"blue\" : [2, 4], \"red\" : [1]]\n * >>> groupingDictionary([[\"yellow\", 10], [\"blue\", 20], [\"yellow\", 30], [\"blue\", 40], [\"red\", 10]])\n * [\"yellow\" : [10, 30], \"blue\" : [20, 40], \"red\" : [10]]\n * >>> groupingDictionary([[\"yellow\", 15], [\"blue\", 25], [\"yellow\", 35], [\"blue\", 45], [\"red\", 15]])\n * [\"yellow\" : [15, 35], \"blue\" : [25, 45], \"red\" : [15]]\n */\nfunc groupingDictionary(l : [[AnyHashable]]) -> [String: [Int]] {\n", "entry_point": "groupingDictionary", "test": "\n\nvar arg00 : [[AnyHashable]] = [[#\"yellow\"#, 1], [#\"blue\"#, 2], [#\"yellow\"#, 3], [#\"blue\"#, 4], [#\"red\"#, 1]]\nvar x0 : [String: [Int]] = groupingDictionary(l : arg00)\nvar v0 : [String: [Int]] = [#\"yellow\"# : [1, 3], #\"blue\"# : [2, 4], #\"red\"# : [1]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[#\"yellow\"#, 10], [#\"blue\"#, 20], [#\"yellow\"#, 30], [#\"blue\"#, 40], [#\"red\"#, 10]]\nvar x1 : [String: [Int]] = groupingDictionary(l : arg10)\nvar v1 : [String: [Int]] = [#\"yellow\"# : [10, 30], #\"blue\"# : [20, 40], #\"red\"# : [10]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[#\"yellow\"#, 15], [#\"blue\"#, 25], [#\"yellow\"#, 35], [#\"blue\"#, 45], [#\"red\"#, 15]]\nvar x2 : [String: [Int]] = groupingDictionary(l : arg20)\nvar v2 : [String: [Int]] = [#\"yellow\"# : [15, 35], #\"blue\"# : [25, 45], #\"red\"# : [15]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/654", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a rectangle.\n *\n * >>> rectanglePerimeter(10, 20)\n * 60\n * >>> rectanglePerimeter(10, 5)\n * 30\n * >>> rectanglePerimeter(4, 2)\n * 12\n */\nfunc rectanglePerimeter(l : Int, b : Int) -> Int {\n", "entry_point": "rectanglePerimeter", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 20\nvar x0 : Int = rectanglePerimeter(l : arg00, b : arg01)\nvar v0 : Int = 60\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar arg11 : Int = 5\nvar x1 : Int = rectanglePerimeter(l : arg10, b : arg11)\nvar v1 : Int = 30\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar arg21 : Int = 2\nvar x2 : Int = rectanglePerimeter(l : arg20, b : arg21)\nvar v2 : Int = 12\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the perimeter of a rectangle.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/655", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of fifth power of n natural numbers.\n *\n * >>> fifthPowerSum(2)\n * 33\n * >>> fifthPowerSum(4)\n * 1300\n * >>> fifthPowerSum(3)\n * 276\n */\nfunc fifthPowerSum(n : Int) -> Int {\n", "entry_point": "fifthPowerSum", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = fifthPowerSum(n : arg00)\nvar v0 : Int = 33\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar x1 : Int = fifthPowerSum(n : arg10)\nvar v1 : Int = 1300\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 3\nvar x2 : Int = fifthPowerSum(n : arg20)\nvar v2 : Int = 276\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of fifth power of n natural numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/656", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum sum of absolute differences of two arrays.\n *\n * >>> findMinSum([3, 2, 1], [2, 1, 3], 3)\n * 0\n * >>> findMinSum([1, 2, 3], [4, 5, 6], 3)\n * 9\n * >>> findMinSum([4, 1, 8, 7], [2, 3, 6, 5], 4)\n * 6\n */\nfunc findMinSum(a : [Int], b : [Int], n : Int) -> Int {\n", "entry_point": "findMinSum", "test": "\n\nvar arg00 : [Int] = [3, 2, 1]\nvar arg01 : [Int] = [2, 1, 3]\nvar arg02 : Int = 3\nvar x0 : Int = findMinSum(a : arg00, b : arg01, n : arg02)\nvar v0 : Int = 0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3]\nvar arg11 : [Int] = [4, 5, 6]\nvar arg12 : Int = 3\nvar x1 : Int = findMinSum(a : arg10, b : arg11, n : arg12)\nvar v1 : Int = 9\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [4, 1, 8, 7]\nvar arg21 : [Int] = [2, 3, 6, 5]\nvar arg22 : Int = 4\nvar x2 : Int = findMinSum(a : arg20, b : arg21, n : arg22)\nvar v2 : Int = 6\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the minimum sum of absolute differences of two arrays.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/657", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first digit in factorial of a given number.\n *\n * >>> firstDigit(5)\n * 1\n * >>> firstDigit(10)\n * 3\n * >>> firstDigit(7)\n * 5\n */\nfunc firstDigit(n : Int) -> Int {\n", "entry_point": "firstDigit", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Int = firstDigit(n : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar x1 : Int = firstDigit(n : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 7\nvar x2 : Int = firstDigit(n : arg20)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the first digit in factorial of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/658", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the item with maximum occurrences in a given list.\n *\n * >>> maxOccurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2])\n * 2\n * >>> maxOccurrences([1, 3, 5, 7, 1, 3, 13, 15, 17, 5, 7, 9, 1, 11])\n * 1\n * >>> maxOccurrences([1, 2, 3, 2, 4, 5, 1, 1, 1])\n * 1\n */\nfunc maxOccurrences(list1 : [Int]) -> Int {\n", "entry_point": "maxOccurrences", "test": "\n\nvar arg00 : [Int] = [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2]\nvar x0 : Int = maxOccurrences(list1 : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 3, 5, 7, 1, 3, 13, 15, 17, 5, 7, 9, 1, 11]\nvar x1 : Int = maxOccurrences(list1 : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 2, 4, 5, 1, 1, 1]\nvar x2 : Int = maxOccurrences(list1 : arg20)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the item with maximum occurrences in a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/659", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to print duplicants from a list of integers.\n *\n * >>> do_repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20])\n * [20, 30, -20, 60]\n * >>> do_repeat([-1, 1, -1, 8])\n * [-1]\n * >>> do_repeat([1, 2, 3, 1, 2])\n * [1, 2]\n */\nfunc do_repeat(x : [Int]) -> [Int] {\n", "entry_point": "do_repeat", "test": "\n\nvar arg00 : [Int] = [10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]\nvar x0 : [Int] = do_repeat(x : arg00)\nvar v0 : [Int] = [20, 30, -20, 60]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [-1, 1, -1, 8]\nvar x1 : [Int] = do_repeat(x : arg10)\nvar v1 : [Int] = [-1]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 1, 2]\nvar x2 : [Int] = do_repeat(x : arg20)\nvar v2 : [Int] = [1, 2]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to print duplicants from a list of integers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/660", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to choose points from two ranges such that no point lies in both the ranges.\n *\n * >>> findPoints(5, 10, 1, 5)\n * [1, 10]\n * >>> findPoints(3, 5, 7, 9)\n * [3, 9]\n * >>> findPoints(1, 5, 2, 8)\n * [1, 8]\n */\nfunc findPoints(l1 : Int, r1 : Int, l2 : Int, r2 : Int) -> [Int] {\n", "entry_point": "findPoints", "test": "\n\nvar arg00 : Int = 5\nvar arg01 : Int = 10\nvar arg02 : Int = 1\nvar arg03 : Int = 5\nvar x0 : [Int] = findPoints(l1 : arg00, r1 : arg01, l2 : arg02, r2 : arg03)\nvar v0 : [Int] = [1, 10]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar arg11 : Int = 5\nvar arg12 : Int = 7\nvar arg13 : Int = 9\nvar x1 : [Int] = findPoints(l1 : arg10, r1 : arg11, l2 : arg12, r2 : arg13)\nvar v1 : [Int] = [3, 9]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = 5\nvar arg22 : Int = 2\nvar arg23 : Int = 8\nvar x2 : [Int] = findPoints(l1 : arg20, r1 : arg21, l2 : arg22, r2 : arg23)\nvar v2 : [Int] = [1, 8]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to choose points from two ranges such that no point lies in both the ranges.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/661", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\n *\n * >>> maxSumOfThreeConsecutive([100, 1000, 100, 1000, 1], 5)\n * 2101\n * >>> maxSumOfThreeConsecutive([3000, 2000, 1000, 3, 10], 5)\n * 5013\n * >>> maxSumOfThreeConsecutive([1, 2, 3, 4, 5, 6, 7, 8], 8)\n * 27\n */\nfunc maxSumOfThreeConsecutive(arr : [Int], n : Int) -> Int {\n", "entry_point": "maxSumOfThreeConsecutive", "test": "\n\nvar arg00 : [Int] = [100, 1000, 100, 1000, 1]\nvar arg01 : Int = 5\nvar x0 : Int = maxSumOfThreeConsecutive(arr : arg00, n : arg01)\nvar v0 : Int = 2101\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [3000, 2000, 1000, 3, 10]\nvar arg11 : Int = 5\nvar x1 : Int = maxSumOfThreeConsecutive(arr : arg10, n : arg11)\nvar v1 : Int = 5013\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8]\nvar arg21 : Int = 8\nvar x2 : Int = maxSumOfThreeConsecutive(arr : arg20, n : arg21)\nvar v2 : Int = 27\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/662", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list in a dictionary.\n *\n * >>> sortedDict([\"n1\" : [2, 3, 1], \"n2\" : [5, 1, 2], \"n3\" : [3, 2, 4]])\n * [\"n1\" : [1, 2, 3], \"n2\" : [1, 2, 5], \"n3\" : [2, 3, 4]]\n * >>> sortedDict([\"n1\" : [25, 37, 41], \"n2\" : [41, 54, 63], \"n3\" : [29, 38, 93]])\n * [\"n1\" : [25, 37, 41], \"n2\" : [41, 54, 63], \"n3\" : [29, 38, 93]]\n * >>> sortedDict([\"n1\" : [58, 44, 56], \"n2\" : [91, 34, 58], \"n3\" : [100, 200, 300]])\n * [\"n1\" : [44, 56, 58], \"n2\" : [34, 58, 91], \"n3\" : [100, 200, 300]]\n */\nfunc sortedDict(dict1 : [String: [Int]]) -> [String: [Int]] {\n", "entry_point": "sortedDict", "test": "\n\nvar arg00 : [String: [Int]] = [#\"n1\"# : [2, 3, 1], #\"n2\"# : [5, 1, 2], #\"n3\"# : [3, 2, 4]]\nvar x0 : [String: [Int]] = sortedDict(dict1 : arg00)\nvar v0 : [String: [Int]] = [#\"n1\"# : [1, 2, 3], #\"n2\"# : [1, 2, 5], #\"n3\"# : [2, 3, 4]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String: [Int]] = [#\"n1\"# : [25, 37, 41], #\"n2\"# : [41, 54, 63], #\"n3\"# : [29, 38, 93]]\nvar x1 : [String: [Int]] = sortedDict(dict1 : arg10)\nvar v1 : [String: [Int]] = [#\"n1\"# : [25, 37, 41], #\"n2\"# : [41, 54, 63], #\"n3\"# : [29, 38, 93]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String: [Int]] = [#\"n1\"# : [58, 44, 56], #\"n2\"# : [91, 34, 58], #\"n3\"# : [100, 200, 300]]\nvar x2 : [String: [Int]] = sortedDict(dict1 : arg20)\nvar v2 : [String: [Int]] = [#\"n1\"# : [44, 56, 58], #\"n2\"# : [34, 58, 91], #\"n3\"# : [100, 200, 300]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort a list in a dictionary.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/663", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the largest possible value of k such that k modulo x is y.\n *\n * >>> findMaxVal(15, 10, 5)\n * 15\n * >>> findMaxVal(187, 10, 5)\n * 185\n * >>> findMaxVal(16, 11, 1)\n * 12\n */\nfunc findMaxVal(n : Int, x : Int, y : Int) -> Int {\n", "entry_point": "findMaxVal", "test": "\n\nvar arg00 : Int = 15\nvar arg01 : Int = 10\nvar arg02 : Int = 5\nvar x0 : Int = findMaxVal(n : arg00, x : arg01, y : arg02)\nvar v0 : Int = 15\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 187\nvar arg11 : Int = 10\nvar arg12 : Int = 5\nvar x1 : Int = findMaxVal(n : arg10, x : arg11, y : arg12)\nvar v1 : Int = 185\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 16\nvar arg21 : Int = 11\nvar arg22 : Int = 1\nvar x2 : Int = findMaxVal(n : arg20, x : arg21, y : arg22)\nvar v2 : Int = 12\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the largest possible value of k such that k modulo x is y.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/664", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the average of even numbers till a given even number.\n *\n * >>> averageEven(2)\n * 2\n * >>> averageEven(4)\n * 3\n * >>> averageEven(100)\n * 51\n */\nfunc averageEven(n : Int) -> Int {\n", "entry_point": "averageEven", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = averageEven(n : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar x1 : Int = averageEven(n : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 100\nvar x2 : Int = averageEven(n : arg20)\nvar v2 : Int = 51\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the average of even numbers till a given even number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/665", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to shift first element to the end of given list.\n *\n * >>> moveLast([1, 2, 3, 4])\n * [2, 3, 4, 1]\n * >>> moveLast([2, 3, 4, 1, 5, 0])\n * [3, 4, 1, 5, 0, 2]\n * >>> moveLast([5, 4, 3, 2, 1])\n * [4, 3, 2, 1, 5]\n */\nfunc moveLast(numList : [Int]) -> [Int] {\n", "entry_point": "moveLast", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4]\nvar x0 : [Int] = moveLast(numList : arg00)\nvar v0 : [Int] = [2, 3, 4, 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 3, 4, 1, 5, 0]\nvar x1 : [Int] = moveLast(numList : arg10)\nvar v1 : [Int] = [3, 4, 1, 5, 0, 2]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [5, 4, 3, 2, 1]\nvar x2 : [Int] = moveLast(numList : arg20)\nvar v2 : [Int] = [4, 3, 2, 1, 5]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to shift first element to the end of given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/666", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count occurrence of a character in a string.\n *\n * >>> countChar(\"Python\", \"o\")\n * 1\n * >>> countChar(\"little\", \"t\")\n * 2\n * >>> countChar(\"assert\", \"s\")\n * 2\n */\nfunc countChar(string : String, ch : String) -> Int {\n", "entry_point": "countChar", "test": "\n\nvar arg00 : String = #\"Python\"#\nvar arg01 : String = #\"o\"#\nvar x0 : Int = countChar(string : arg00, ch : arg01)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"little\"#\nvar arg11 : String = #\"t\"#\nvar x1 : Int = countChar(string : arg10, ch : arg11)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"assert\"#\nvar arg21 : String = #\"s\"#\nvar x2 : Int = countChar(string : arg20, ch : arg21)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count occurrence of a character in a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/667", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count number of vowels in the string.\n *\n * >>> checkVow(\"corner\", \"AaEeIiOoUu\")\n * 2\n * >>> checkVow(\"valid\", \"AaEeIiOoUu\")\n * 2\n * >>> checkVow(\"true\", \"AaEeIiOoUu\")\n * 2\n */\nfunc checkVow(string : String, vowels : String) -> Int {\n", "entry_point": "checkVow", "test": "\n\nvar arg00 : String = #\"corner\"#\nvar arg01 : String = #\"AaEeIiOoUu\"#\nvar x0 : Int = checkVow(string : arg00, vowels : arg01)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"valid\"#\nvar arg11 : String = #\"AaEeIiOoUu\"#\nvar x1 : Int = checkVow(string : arg10, vowels : arg11)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"true\"#\nvar arg21 : String = #\"AaEeIiOoUu\"#\nvar x2 : Int = checkVow(string : arg20, vowels : arg21)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count number of vowels in the string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/668", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to replace multiple occurence of character by single.\n *\n * >>> replace(\"peep\", \"e\")\n * \"pep\"\n * >>> replace(\"Greek\", \"e\")\n * \"Grek\"\n * >>> replace(\"Moon\", \"o\")\n * \"Mon\"\n */\nfunc replace(string : String, ch : String) -> String {\n", "entry_point": "replace", "test": "\n\nvar arg00 : String = #\"peep\"#\nvar arg01 : String = #\"e\"#\nvar x0 : String = replace(string : arg00, ch : arg01)\nvar v0 : String = #\"pep\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Greek\"#\nvar arg11 : String = #\"e\"#\nvar x1 : String = replace(string : arg10, ch : arg11)\nvar v1 : String = #\"Grek\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Moon\"#\nvar arg21 : String = #\"o\"#\nvar x2 : String = replace(string : arg20, ch : arg21)\nvar v2 : String = #\"Mon\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to replace multiple occurence of character by single.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/669", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given ip address is valid or not using regex.\n *\n * >>> checkIp(\"192.168.0.1\")\n * \"Valid IP address\"\n * >>> checkIp(\"110.234.52.124\")\n * \"Valid IP address\"\n * >>> checkIp(\"366.1.2.2\")\n * \"Invalid IP address\"\n */\nfunc checkIp(ip : String) -> String {\n", "entry_point": "checkIp", "test": "\n\nvar arg00 : String = #\"192.168.0.1\"#\nvar x0 : String = checkIp(ip : arg00)\nvar v0 : String = #\"Valid IP address\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"110.234.52.124\"#\nvar x1 : String = checkIp(ip : arg10)\nvar v1 : String = #\"Valid IP address\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"366.1.2.2\"#\nvar x2 : String = checkIp(ip : arg20)\nvar v2 : String = #\"Invalid IP address\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether the given ip address is valid or not using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/670", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether a sequence of numbers has a decreasing trend or not.\n *\n * >>> decreasingTrend([-4, -3, -2, -1])\n * true\n * >>> decreasingTrend([1, 2, 3])\n * true\n * >>> decreasingTrend([3, 2, 1])\n * false\n */\nfunc decreasingTrend(nums : [Int]) -> Bool {\n", "entry_point": "decreasingTrend", "test": "\n\nvar arg00 : [Int] = [-4, -3, -2, -1]\nvar x0 : Bool = decreasingTrend(nums : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3]\nvar x1 : Bool = decreasingTrend(nums : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3, 2, 1]\nvar x2 : Bool = decreasingTrend(nums : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether a sequence of numbers has a decreasing trend or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/671", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to set the right most unset bit.\n *\n * >>> setRightMostUnsetBit(21)\n * 23\n * >>> setRightMostUnsetBit(11)\n * 15\n * >>> setRightMostUnsetBit(15)\n * 15\n */\nfunc setRightMostUnsetBit(n : Int) -> Int {\n", "entry_point": "setRightMostUnsetBit", "test": "\n\nvar arg00 : Int = 21\nvar x0 : Int = setRightMostUnsetBit(n : arg00)\nvar v0 : Int = 23\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 11\nvar x1 : Int = setRightMostUnsetBit(n : arg10)\nvar v1 : Int = 15\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 15\nvar x2 : Int = setRightMostUnsetBit(n : arg20)\nvar v2 : Int = 15\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to set the right most unset bit.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/672", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find maximum of three numbers.\n *\n * >>> maxOfThree(10, 20, 30)\n * 30\n * >>> maxOfThree(55, 47, 39)\n * 55\n * >>> maxOfThree(10, 49, 30)\n * 49\n */\nfunc maxOfThree(num1 : Int, num2 : Int, num3 : Int) -> Int {\n", "entry_point": "maxOfThree", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 20\nvar arg02 : Int = 30\nvar x0 : Int = maxOfThree(num1 : arg00, num2 : arg01, num3 : arg02)\nvar v0 : Int = 30\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 55\nvar arg11 : Int = 47\nvar arg12 : Int = 39\nvar x1 : Int = maxOfThree(num1 : arg10, num2 : arg11, num3 : arg12)\nvar v1 : Int = 55\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 10\nvar arg21 : Int = 49\nvar arg22 : Int = 30\nvar x2 : Int = maxOfThree(num1 : arg20, num2 : arg21, num3 : arg22)\nvar v2 : Int = 49\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find maximum of three numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/673", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert a list of multiple integers into a single integer.\n *\n * >>> convert([1, 2, 3])\n * 123\n * >>> convert([4, 5, 6])\n * 456\n * >>> convert([7, 8, 9])\n * 789\n */\nfunc convert(list : [Int]) -> Int {\n", "entry_point": "convert", "test": "\n\nvar arg00 : [Int] = [1, 2, 3]\nvar x0 : Int = convert(list : arg00)\nvar v0 : Int = 123\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 5, 6]\nvar x1 : Int = convert(list : arg10)\nvar v1 : Int = 456\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [7, 8, 9]\nvar x2 : Int = convert(list : arg20)\nvar v2 : Int = 789\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to convert a list of multiple integers into a single integer.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/674", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove duplicate words from a given string using collections module.\n *\n * >>> removeDuplicate(\"Python Exercises Practice Solution Exercises\")\n * \"Python Exercises Practice Solution\"\n * >>> removeDuplicate(\"Python Exercises Practice Solution Python\")\n * \"Python Exercises Practice Solution\"\n * >>> removeDuplicate(\"Python Exercises Practice Solution Practice\")\n * \"Python Exercises Practice Solution\"\n */\nfunc removeDuplicate(string : String) -> String {\n", "entry_point": "removeDuplicate", "test": "\n\nvar arg00 : String = #\"Python Exercises Practice Solution Exercises\"#\nvar x0 : String = removeDuplicate(string : arg00)\nvar v0 : String = #\"Python Exercises Practice Solution\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Python Exercises Practice Solution Python\"#\nvar x1 : String = removeDuplicate(string : arg10)\nvar v1 : String = #\"Python Exercises Practice Solution\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Python Exercises Practice Solution Practice\"#\nvar x2 : String = removeDuplicate(string : arg20)\nvar v2 : String = #\"Python Exercises Practice Solution\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove duplicate words from a given string using collections module.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/675", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add two integers. however, if the sum is between the given range it will return 20.\n *\n * >>> sumNums(2, 10, 11, 20)\n * 20\n * >>> sumNums(15, 17, 1, 10)\n * 32\n * >>> sumNums(10, 15, 5, 30)\n * 20\n */\nfunc sumNums(x : Int, y : Int, m : Int, n : Int) -> Int {\n", "entry_point": "sumNums", "test": "\n\nvar arg00 : Int = 2\nvar arg01 : Int = 10\nvar arg02 : Int = 11\nvar arg03 : Int = 20\nvar x0 : Int = sumNums(x : arg00, y : arg01, m : arg02, n : arg03)\nvar v0 : Int = 20\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 15\nvar arg11 : Int = 17\nvar arg12 : Int = 1\nvar arg13 : Int = 10\nvar x1 : Int = sumNums(x : arg10, y : arg11, m : arg12, n : arg13)\nvar v1 : Int = 32\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 10\nvar arg21 : Int = 15\nvar arg22 : Int = 5\nvar arg23 : Int = 30\nvar x2 : Int = sumNums(x : arg20, y : arg21, m : arg22, n : arg23)\nvar v2 : Int = 20\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to add two integers. however, if the sum is between the given range it will return 20.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/676", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove everything except alphanumeric characters from the given string by using regex.\n *\n * >>> removeExtraChar(\"**\\\\/\\/Google Android\\/\\/ - 12. \")\n * \"GoogleAndroid12\"\n * >>> removeExtraChar(\"****\\\\/\\/Google Flutter/\\/*** - 36. \")\n * \"GoogleFlutter36\"\n * >>> removeExtraChar(\"**\\\\/\\/Google Firebase\\/\\/ - 478. \")\n * \"GoogleFirebase478\"\n */\nfunc removeExtraChar(text1 : String) -> String {\n", "entry_point": "removeExtraChar", "test": "\n\nvar arg00 : String = #\"**\\\\/\\/Google Android\\/\\/ - 12. \"#\nvar x0 : String = removeExtraChar(text1 : arg00)\nvar v0 : String = #\"GoogleAndroid12\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"****\\\\/\\/Google Flutter/\\/*** - 36. \"#\nvar x1 : String = removeExtraChar(text1 : arg10)\nvar v1 : String = #\"GoogleFlutter36\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"**\\\\/\\/Google Firebase\\/\\/ - 478. \"#\nvar x2 : String = removeExtraChar(text1 : arg20)\nvar v2 : String = #\"GoogleFirebase478\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove everything except alphanumeric characters from the given string by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/677", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the triangle is valid or not.\n *\n * >>> validityTriangle(60, 50, 90)\n * false\n * >>> validityTriangle(45, 75, 60)\n * true\n * >>> validityTriangle(30, 50, 100)\n * true\n */\nfunc validityTriangle(a : Int, b : Int, c : Int) -> Bool {\n", "entry_point": "validityTriangle", "test": "\n\nvar arg00 : Int = 60\nvar arg01 : Int = 50\nvar arg02 : Int = 90\nvar x0 : Bool = validityTriangle(a : arg00, b : arg01, c : arg02)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 45\nvar arg11 : Int = 75\nvar arg12 : Int = 60\nvar x1 : Bool = validityTriangle(a : arg10, b : arg11, c : arg12)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 30\nvar arg21 : Int = 50\nvar arg22 : Int = 100\nvar x2 : Bool = validityTriangle(a : arg20, b : arg21, c : arg22)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if the triangle is valid or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/678", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove spaces from a given string.\n *\n * >>> removeSpaces(\"a b c\")\n * \"abc\"\n * >>> removeSpaces(\"1 2 3\")\n * \"123\"\n * >>> removeSpaces(\" b c\")\n * \"bc\"\n */\nfunc removeSpaces(str1 : String) -> String {\n", "entry_point": "removeSpaces", "test": "\n\nvar arg00 : String = #\"a b c\"#\nvar x0 : String = removeSpaces(str1 : arg00)\nvar v0 : String = #\"abc\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"1 2 3\"#\nvar x1 : String = removeSpaces(str1 : arg10)\nvar v1 : String = #\"123\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\" b c\"#\nvar x2 : String = removeSpaces(str1 : arg20)\nvar v2 : String = #\"bc\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to remove spaces from a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/679", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to access dictionary key\u2019s element by index.\n *\n * >>> accessKey([\"physics\" : 80, \"math\" : 90, \"chemistry\" : 86], 0)\n * \"physics\"\n * >>> accessKey([\"python\" : 10, \"java\" : 20, \"C++\" : 30], 2)\n * \"C++\"\n * >>> accessKey([\"program\" : 15, \"computer\" : 45], 1)\n * \"computer\"\n */\nfunc accessKey(ditionary : [String: Int], key : Int) -> String {\n", "entry_point": "accessKey", "test": "\n\nvar arg00 : [String: Int] = [#\"physics\"# : 80, #\"math\"# : 90, #\"chemistry\"# : 86]\nvar arg01 : Int = 0\nvar x0 : String = accessKey(ditionary : arg00, key : arg01)\nvar v0 : String = #\"physics\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String: Int] = [#\"python\"# : 10, #\"java\"# : 20, #\"C++\"# : 30]\nvar arg11 : Int = 2\nvar x1 : String = accessKey(ditionary : arg10, key : arg11)\nvar v1 : String = #\"C++\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String: Int] = [#\"program\"# : 15, #\"computer\"# : 45]\nvar arg21 : Int = 1\nvar x2 : String = accessKey(ditionary : arg20, key : arg21)\nvar v2 : String = #\"computer\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to access dictionary key\u2019s element by index.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/680", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether a sequence of numbers has an increasing trend or not.\n *\n * >>> increasingTrend([1, 2, 3, 4])\n * true\n * >>> increasingTrend([4, 3, 2, 1])\n * false\n * >>> increasingTrend([0, 1, 4, 9])\n * true\n */\nfunc increasingTrend(nums : [Int]) -> Bool {\n", "entry_point": "increasingTrend", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4]\nvar x0 : Bool = increasingTrend(nums : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 3, 2, 1]\nvar x1 : Bool = increasingTrend(nums : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [0, 1, 4, 9]\nvar x2 : Bool = increasingTrend(nums : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether a sequence of numbers has an increasing trend or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/681", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the smallest prime divisor of a number.\n *\n * >>> smallestDivisor(10)\n * 2\n * >>> smallestDivisor(25)\n * 5\n * >>> smallestDivisor(31)\n * 31\n */\nfunc smallestDivisor(n : Int) -> Int {\n", "entry_point": "smallestDivisor", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = smallestDivisor(n : arg00)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 25\nvar x1 : Int = smallestDivisor(n : arg10)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 31\nvar x2 : Int = smallestDivisor(n : arg20)\nvar v2 : Int = 31\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the smallest prime divisor of a number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/682", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to multiply two lists using map and lambda function.\n *\n * >>> mulList([1, 2, 3], [4, 5, 6])\n * [4, 10, 18]\n * >>> mulList([1, 2], [3, 4])\n * [3, 8]\n * >>> mulList([90, 120], [50, 70])\n * [4500, 8400]\n */\nfunc mulList(nums1 : [Int], nums2 : [Int]) -> [Int] {\n", "entry_point": "mulList", "test": "\n\nvar arg00 : [Int] = [1, 2, 3]\nvar arg01 : [Int] = [4, 5, 6]\nvar x0 : [Int] = mulList(nums1 : arg00, nums2 : arg01)\nvar v0 : [Int] = [4, 10, 18]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2]\nvar arg11 : [Int] = [3, 4]\nvar x1 : [Int] = mulList(nums1 : arg10, nums2 : arg11)\nvar v1 : [Int] = [3, 8]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [90, 120]\nvar arg21 : [Int] = [50, 70]\nvar x2 : [Int] = mulList(nums1 : arg20, nums2 : arg21)\nvar v2 : [Int] = [4500, 8400]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to multiply two lists using map and lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/683", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given number can be represented by sum of two squares or not.\n *\n * >>> sumSquare(25)\n * true\n * >>> sumSquare(24)\n * false\n * >>> sumSquare(17)\n * true\n */\nfunc sumSquare(n : Int) -> Bool {\n", "entry_point": "sumSquare", "test": "\n\nvar arg00 : Int = 25\nvar x0 : Bool = sumSquare(n : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 24\nvar x1 : Bool = sumSquare(n : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 17\nvar x2 : Bool = sumSquare(n : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the given number can be represented by sum of two squares or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/684", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count occurences of a character in a repeated string.\n *\n * >>> countChar(\"abcac\", \"a\")\n * 4\n * >>> countChar(\"abca\", \"c\")\n * 2\n * >>> countChar(\"aba\", \"a\")\n * 7\n */\nfunc countChar(str : String, x : String) -> Int {\n", "entry_point": "countChar", "test": "\n\nvar arg00 : String = #\"abcac\"#\nvar arg01 : String = #\"a\"#\nvar x0 : Int = countChar(str : arg00, x : arg01)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"abca\"#\nvar arg11 : String = #\"c\"#\nvar x1 : Int = countChar(str : arg10, x : arg11)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"aba\"#\nvar arg21 : String = #\"a\"#\nvar x2 : Int = countChar(str : arg20, x : arg21)\nvar v2 : Int = 7\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count occurences of a character in a repeated string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/685", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of prime numbers between 1 to n.\n *\n * >>> sumOfPrimes(10)\n * 17\n * >>> sumOfPrimes(20)\n * 77\n * >>> sumOfPrimes(5)\n * 10\n */\nfunc sumOfPrimes(n : Int) -> Int {\n", "entry_point": "sumOfPrimes", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = sumOfPrimes(n : arg00)\nvar v0 : Int = 17\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 20\nvar x1 : Int = sumOfPrimes(n : arg10)\nvar v1 : Int = 77\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar x2 : Int = sumOfPrimes(n : arg20)\nvar v2 : Int = 10\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find sum of prime numbers between 1 to n.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/686", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the frequency of each element in the given list.\n *\n * >>> freqElement([4, 5, 4, 5, 6, 6, 5, 5, 4])\n * \"{4: 3, 5: 4, 6: 2}\"\n * >>> freqElement([7, 8, 8, 9, 4, 7, 6, 5, 4])\n * \"{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}\"\n * >>> freqElement([1, 4, 3, 1, 4, 5, 2, 6, 2, 7])\n * \"{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}\"\n */\nfunc freqElement(testTup : [Int]) -> String {\n", "entry_point": "freqElement", "test": "\n\nvar arg00 : [Int] = [4, 5, 4, 5, 6, 6, 5, 5, 4]\nvar x0 : String = freqElement(testTup : arg00)\nvar v0 : String = #\"{4: 3, 5: 4, 6: 2}\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [7, 8, 8, 9, 4, 7, 6, 5, 4]\nvar x1 : String = freqElement(testTup : arg10)\nvar v1 : String = #\"{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 4, 3, 1, 4, 5, 2, 6, 2, 7]\nvar x2 : String = freqElement(testTup : arg20)\nvar v2 : String = #\"{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the frequency of each element in the given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/687", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\n *\n * >>> recurGcd(12, 14)\n * 2\n * >>> recurGcd(13, 17)\n * 1\n * >>> recurGcd(9, 3)\n * 3\n */\nfunc recurGcd(a : Int, b : Int) -> Int {\n", "entry_point": "recurGcd", "test": "\n\nvar arg00 : Int = 12\nvar arg01 : Int = 14\nvar x0 : Int = recurGcd(a : arg00, b : arg01)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 13\nvar arg11 : Int = 17\nvar x1 : Int = recurGcd(a : arg10, b : arg11)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 9\nvar arg21 : Int = 3\nvar x2 : Int = recurGcd(a : arg20, b : arg21)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/688", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get the length of a complex number.\n *\n * >>> lenComplex(3, 4)\n * 5.0\n * >>> lenComplex(9, 10)\n * 13.45362404707371\n * >>> lenComplex(7, 9)\n * 11.40175425099138\n */\nfunc lenComplex(a : Int, b : Int) -> Double {\n", "entry_point": "lenComplex", "test": "\n\nvar arg00 : Int = 3\nvar arg01 : Int = 4\nvar x0 : Double = lenComplex(a : arg00, b : arg01)\nvar v0 : Double = 5.0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 9\nvar arg11 : Int = 10\nvar x1 : Double = lenComplex(a : arg10, b : arg11)\nvar v1 : Double = 13.45362404707371\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 7\nvar arg21 : Int = 9\nvar x2 : Double = lenComplex(a : arg20, b : arg21)\nvar v2 : Double = 11.40175425099138\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to get the length of a complex number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/689", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * ## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n *\n * >>> minJumps([1, 3, 6, 1, 0, 9], 6)\n * 3\n * >>> minJumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11)\n * 3\n * >>> minJumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11)\n * 10\n */\nfunc minJumps(arr : [Int], n : Int) -> Int {\n", "entry_point": "minJumps", "test": "\n\nvar arg00 : [Int] = [1, 3, 6, 1, 0, 9]\nvar arg01 : Int = 6\nvar x0 : Int = minJumps(arr : arg00, n : arg01)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9]\nvar arg11 : Int = 11\nvar x1 : Int = minJumps(arr : arg10, n : arg11)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nvar arg21 : Int = 11\nvar x2 : Int = minJumps(arr : arg20, n : arg21)\nvar v2 : Int = 10\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/690", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to multiply consecutive numbers of a given list.\n *\n * >>> mulConsecutiveNums([1, 1, 3, 4, 4, 5, 6, 7])\n * [1, 3, 12, 16, 20, 30, 42]\n * >>> mulConsecutiveNums([4, 5, 8, 9, 6, 10])\n * [20, 40, 72, 54, 60]\n * >>> mulConsecutiveNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [2, 6, 12, 20, 30, 42, 56, 72, 90]\n */\nfunc mulConsecutiveNums(nums : [Int]) -> [Int] {\n", "entry_point": "mulConsecutiveNums", "test": "\n\nvar arg00 : [Int] = [1, 1, 3, 4, 4, 5, 6, 7]\nvar x0 : [Int] = mulConsecutiveNums(nums : arg00)\nvar v0 : [Int] = [1, 3, 12, 16, 20, 30, 42]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 5, 8, 9, 6, 10]\nvar x1 : [Int] = mulConsecutiveNums(nums : arg10)\nvar v1 : [Int] = [20, 40, 72, 54, 60]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar x2 : [Int] = mulConsecutiveNums(nums : arg20)\nvar v2 : [Int] = [2, 6, 12, 20, 30, 42, 56, 72, 90]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to multiply consecutive numbers of a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/691", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n *\n * >>> groupElement([[6, 5], [2, 7], [2, 5], [8, 7], [9, 8], [3, 7]])\n * [5 : [6, 2], 7 : [2, 8, 3], 8 : [9]]\n * >>> groupElement([[7, 6], [3, 8], [3, 6], [9, 8], [10, 9], [4, 8]])\n * [6 : [7, 3], 8 : [3, 9, 4], 9 : [10]]\n * >>> groupElement([[8, 7], [4, 9], [4, 7], [10, 9], [11, 10], [5, 9]])\n * [7 : [8, 4], 9 : [4, 10, 5], 10 : [11]]\n */\nfunc groupElement(testList : [[Int]]) -> [Int: [Int]] {\n", "entry_point": "groupElement", "test": "\n\nvar arg00 : [[Int]] = [[6, 5], [2, 7], [2, 5], [8, 7], [9, 8], [3, 7]]\nvar x0 : [Int: [Int]] = groupElement(testList : arg00)\nvar v0 : [Int: [Int]] = [5 : [6, 2], 7 : [2, 8, 3], 8 : [9]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[7, 6], [3, 8], [3, 6], [9, 8], [10, 9], [4, 8]]\nvar x1 : [Int: [Int]] = groupElement(testList : arg10)\nvar v1 : [Int: [Int]] = [6 : [7, 3], 8 : [3, 9, 4], 9 : [10]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[8, 7], [4, 9], [4, 7], [10, 9], [11, 10], [5, 9]]\nvar x2 : [Int: [Int]] = groupElement(testList : arg20)\nvar v2 : [Int: [Int]] = [7 : [8, 4], 9 : [4, 10, 5], 10 : [11]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/692", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the last two digits in factorial of a given number.\n *\n * >>> lastTwoDigits(7)\n * 40\n * >>> lastTwoDigits(5)\n * 20\n * >>> lastTwoDigits(2)\n * 2\n */\nfunc lastTwoDigits(n : Int) -> Int {\n", "entry_point": "lastTwoDigits", "test": "\n\nvar arg00 : Int = 7\nvar x0 : Int = lastTwoDigits(n : arg00)\nvar v0 : Int = 40\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar x1 : Int = lastTwoDigits(n : arg10)\nvar v1 : Int = 20\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar x2 : Int = lastTwoDigits(n : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the last two digits in factorial of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/693", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove multiple spaces in a string by using regex.\n *\n * >>> removeMultipleSpaces(\"Google      Assistant\")\n * \"Google Assistant\"\n * >>> removeMultipleSpaces(\"Quad      Core\")\n * \"Quad Core\"\n * >>> removeMultipleSpaces(\"ChromeCast      Built-in\")\n * \"ChromeCast Built-in\"\n */\nfunc removeMultipleSpaces(text1 : String) -> String {\n", "entry_point": "removeMultipleSpaces", "test": "\n\nvar arg00 : String = #\"Google      Assistant\"#\nvar x0 : String = removeMultipleSpaces(text1 : arg00)\nvar v0 : String = #\"Google Assistant\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Quad      Core\"#\nvar x1 : String = removeMultipleSpaces(text1 : arg10)\nvar v1 : String = #\"Quad Core\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"ChromeCast      Built-in\"#\nvar x2 : String = removeMultipleSpaces(text1 : arg20)\nvar v2 : String = #\"ChromeCast Built-in\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove multiple spaces in a string by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/694", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract unique values from the given dictionary values.\n *\n * >>> extractUnique([\"msm\" : [5, 6, 7, 8], \"is\" : [10, 11, 7, 5], \"best\" : [6, 12, 10, 8], \"for\" : [1, 2, 5]])\n * [1, 2, 5, 6, 7, 8, 10, 11, 12]\n * >>> extractUnique([\"Built\" : [7, 1, 9, 4], \"for\" : [11, 21, 36, 14, 9], \"ISP\" : [4, 1, 21, 39, 47], \"TV\" : [1, 32, 38]])\n * [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\n * >>> extractUnique([\"F\" : [11, 13, 14, 17], \"A\" : [12, 11, 15, 18], \"N\" : [19, 21, 15, 36], \"G\" : [37, 36, 35]])\n * [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]\n */\nfunc extractUnique(testDict : [String: [Int]]) -> [Int] {\n", "entry_point": "extractUnique", "test": "\n\nvar arg00 : [String: [Int]] = [#\"msm\"# : [5, 6, 7, 8], #\"is\"# : [10, 11, 7, 5], #\"best\"# : [6, 12, 10, 8], #\"for\"# : [1, 2, 5]]\nvar x0 : [Int] = extractUnique(testDict : arg00)\nvar v0 : [Int] = [1, 2, 5, 6, 7, 8, 10, 11, 12]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String: [Int]] = [#\"Built\"# : [7, 1, 9, 4], #\"for\"# : [11, 21, 36, 14, 9], #\"ISP\"# : [4, 1, 21, 39, 47], #\"TV\"# : [1, 32, 38]]\nvar x1 : [Int] = extractUnique(testDict : arg10)\nvar v1 : [Int] = [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String: [Int]] = [#\"F\"# : [11, 13, 14, 17], #\"A\"# : [12, 11, 15, 18], #\"N\"# : [19, 21, 15, 36], #\"G\"# : [37, 36, 35]]\nvar x2 : [Int] = extractUnique(testDict : arg20)\nvar v2 : [Int] = [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract unique values from the given dictionary values.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/695", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n *\n * >>> checkGreater([10, 4, 5], [13, 5, 18])\n * true\n * >>> checkGreater([1, 2, 3], [2, 1, 4])\n * false\n * >>> checkGreater([4, 5, 6], [5, 6, 7])\n * true\n */\nfunc checkGreater(testTup1 : [Int], testTup2 : [Int]) -> Bool {\n", "entry_point": "checkGreater", "test": "\n\nvar arg00 : [Int] = [10, 4, 5]\nvar arg01 : [Int] = [13, 5, 18]\nvar x0 : Bool = checkGreater(testTup1 : arg00, testTup2 : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3]\nvar arg11 : [Int] = [2, 1, 4]\nvar x1 : Bool = checkGreater(testTup1 : arg10, testTup2 : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [4, 5, 6]\nvar arg21 : [Int] = [5, 6, 7]\nvar x2 : Bool = checkGreater(testTup1 : arg20, testTup2 : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/696", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to zip two given lists of lists.\n *\n * >>> zipList([[1, 3], [5, 7], [9, 11]], [[2, 4], [6, 8], [10, 12, 14]])\n * [[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\n * >>> zipList([[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]])\n * [[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\n * >>> zipList([[\"a\", \"b\"], [\"c\", \"d\"]], [[\"e\", \"f\"], [\"g\", \"h\"]])\n * [[\"a\", \"b\", \"e\", \"f\"], [\"c\", \"d\", \"g\", \"h\"]]\n */\nfunc zipList(list1 : [[AnyHashable]], list2 : [[AnyHashable]]) -> [[AnyHashable]] {\n", "entry_point": "zipList", "test": "\n\nvar arg00 : [[AnyHashable]] = [[1, 3], [5, 7], [9, 11]]\nvar arg01 : [[AnyHashable]] = [[2, 4], [6, 8], [10, 12, 14]]\nvar x0 : [[AnyHashable]] = zipList(list1 : arg00, list2 : arg01)\nvar v0 : [[AnyHashable]] = [[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[1, 2], [3, 4], [5, 6]]\nvar arg11 : [[AnyHashable]] = [[7, 8], [9, 10], [11, 12]]\nvar x1 : [[AnyHashable]] = zipList(list1 : arg10, list2 : arg11)\nvar v1 : [[AnyHashable]] = [[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[#\"a\"#, #\"b\"#], [#\"c\"#, #\"d\"#]]\nvar arg21 : [[AnyHashable]] = [[#\"e\"#, #\"f\"#], [#\"g\"#, #\"h\"#]]\nvar x2 : [[AnyHashable]] = zipList(list1 : arg20, list2 : arg21)\nvar v2 : [[AnyHashable]] = [[#\"a\"#, #\"b\"#, #\"e\"#, #\"f\"#], [#\"c\"#, #\"d\"#, #\"g\"#, #\"h\"#]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to zip two given lists of lists.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/697", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find number of even elements in the given list using lambda function.\n *\n * >>> countEven([1, 2, 3, 5, 7, 8, 9, 10])\n * 3\n * >>> countEven([10, 15, 14, 13, -18, 12, -20])\n * 5\n * >>> countEven([1, 2, 4, 8, 9])\n * 3\n */\nfunc countEven(arrayNums : [Int]) -> Int {\n", "entry_point": "countEven", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 5, 7, 8, 9, 10]\nvar x0 : Int = countEven(arrayNums : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [10, 15, 14, 13, -18, 12, -20]\nvar x1 : Int = countEven(arrayNums : arg10)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 4, 8, 9]\nvar x2 : Int = countEven(arrayNums : arg20)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find number of even elements in the given list using lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/698", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n *\n * >>> sortDictItem([[5, 6] : 3, [2, 3] : 9, [8, 4] : 10, [6, 4] : 12])\n * [[2, 3] : 9, [6, 4] : 12, [5, 6] : 3, [8, 4] : 10]\n * >>> sortDictItem([[6, 7] : 4, [3, 4] : 10, [9, 5] : 11, [7, 5] : 13])\n * [[3, 4] : 10, [7, 5] : 13, [6, 7] : 4, [9, 5] : 11]\n * >>> sortDictItem([[7, 8] : 5, [4, 5] : 11, [10, 6] : 12, [8, 6] : 14])\n * [[4, 5] : 11, [8, 6] : 14, [7, 8] : 5, [10, 6] : 12]\n */\nfunc sortDictItem(testDict : [[Int]: Int]) -> [[Int]: Int] {\n", "entry_point": "sortDictItem", "test": "\n\nvar arg00 : [[Int]: Int] = [[5, 6] : 3, [2, 3] : 9, [8, 4] : 10, [6, 4] : 12]\nvar x0 : [[Int]: Int] = sortDictItem(testDict : arg00)\nvar v0 : [[Int]: Int] = [[2, 3] : 9, [6, 4] : 12, [5, 6] : 3, [8, 4] : 10]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]: Int] = [[6, 7] : 4, [3, 4] : 10, [9, 5] : 11, [7, 5] : 13]\nvar x1 : [[Int]: Int] = sortDictItem(testDict : arg10)\nvar v1 : [[Int]: Int] = [[3, 4] : 10, [7, 5] : 13, [6, 7] : 4, [9, 5] : 11]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]: Int] = [[7, 8] : 5, [4, 5] : 11, [10, 6] : 12, [8, 6] : 14]\nvar x2 : [[Int]: Int] = sortDictItem(testDict : arg20)\nvar v2 : [[Int]: Int] = [[4, 5] : 11, [8, 6] : 14, [7, 8] : 5, [10, 6] : 12]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/699", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum number of swaps required to convert one binary string to another.\n *\n * >>> minSwaps(\"1101\", \"1110\")\n * 1\n * >>> minSwaps(\"1111\", \"0100\")\n * \"Not Possible\"\n * >>> minSwaps(\"1110000\", \"0001101\")\n * 3\n */\nfunc minSwaps(str1 : String, str2 : String) -> AnyHashable {\n", "entry_point": "minSwaps", "test": "\n\nvar arg00 : String = #\"1101\"#\nvar arg01 : String = #\"1110\"#\nvar x0 : AnyHashable = minSwaps(str1 : arg00, str2 : arg01)\nvar v0 : AnyHashable = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"1111\"#\nvar arg11 : String = #\"0100\"#\nvar x1 : AnyHashable = minSwaps(str1 : arg10, str2 : arg11)\nvar v1 : AnyHashable = #\"Not Possible\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"1110000\"#\nvar arg21 : String = #\"0001101\"#\nvar x2 : AnyHashable = minSwaps(str1 : arg20, str2 : arg21)\nvar v2 : AnyHashable = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the minimum number of swaps required to convert one binary string to another.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/700", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the number of elements in a list which are within a specific range.\n *\n * >>> countRangeInList([10, 20, 30, 40, 40, 40, 70, 80, 99], 40, 100)\n * 6\n * >>> countRangeInList([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"a\", \"e\")\n * 5\n * >>> countRangeInList([7, 8, 9, 15, 17, 19, 45], 15, 20)\n * 3\n */\nfunc countRangeInList(li : [AnyHashable], min : AnyHashable, max : AnyHashable) -> Int {\n", "entry_point": "countRangeInList", "test": "\n\nvar arg00 : [AnyHashable] = [10, 20, 30, 40, 40, 40, 70, 80, 99]\nvar arg01 : AnyHashable = 40\nvar arg02 : AnyHashable = 100\nvar x0 : Int = countRangeInList(li : arg00, min : arg01, max : arg02)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [#\"a\"#, #\"b\"#, #\"c\"#, #\"d\"#, #\"e\"#, #\"f\"#]\nvar arg11 : AnyHashable = #\"a\"#\nvar arg12 : AnyHashable = #\"e\"#\nvar x1 : Int = countRangeInList(li : arg10, min : arg11, max : arg12)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [7, 8, 9, 15, 17, 19, 45]\nvar arg21 : AnyHashable = 15\nvar arg22 : AnyHashable = 20\nvar x2 : Int = countRangeInList(li : arg20, min : arg21, max : arg22)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count the number of elements in a list which are within a specific range.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/701", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the equilibrium index of the given array.\n *\n * >>> equilibriumIndex([1, 2, 3, 4, 1, 2, 3])\n * 3\n * >>> equilibriumIndex([-7, 1, 5, 2, -4, 3, 0])\n * 3\n * >>> equilibriumIndex([1, 2, 3])\n * -1\n */\nfunc equilibriumIndex(arr : [Int]) -> Int {\n", "entry_point": "equilibriumIndex", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 1, 2, 3]\nvar x0 : Int = equilibriumIndex(arr : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [-7, 1, 5, 2, -4, 3, 0]\nvar x1 : Int = equilibriumIndex(arr : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3]\nvar x2 : Int = equilibriumIndex(arr : arg20)\nvar v2 : Int = -1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the equilibrium index of the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/702", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n *\n * >>> removals([1, 3, 4, 9, 10, 11, 12, 17, 20], 9, 4)\n * 5\n * >>> removals([1, 5, 6, 2, 8], 5, 2)\n * 3\n * >>> removals([1, 2, 3, 4, 5, 6], 6, 3)\n * 2\n */\nfunc removals(arr : [Int], n : Int, k : Int) -> Int {\n", "entry_point": "removals", "test": "\n\nvar arg00 : [Int] = [1, 3, 4, 9, 10, 11, 12, 17, 20]\nvar arg01 : Int = 9\nvar arg02 : Int = 4\nvar x0 : Int = removals(arr : arg00, n : arg01, k : arg02)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 5, 6, 2, 8]\nvar arg11 : Int = 5\nvar arg12 : Int = 2\nvar x1 : Int = removals(arr : arg10, n : arg11, k : arg12)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4, 5, 6]\nvar arg21 : Int = 6\nvar arg22 : Int = 3\nvar x2 : Int = removals(arr : arg20, n : arg21, k : arg22)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/703", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given key is present in the dictionary or not.\n *\n * >>> isKeyPresent([1 : 10, 2 : 20, 3 : 30, 4 : 40, 5 : 50, 6 : 60], 5)\n * true\n * >>> isKeyPresent([1 : 10, 2 : 20, 3 : 30, 4 : 40, 5 : 50, 6 : 60], 6)\n * true\n * >>> isKeyPresent([1 : 10, 2 : 20, 3 : 30, 4 : 40, 5 : 50, 6 : 60], 10)\n * false\n */\nfunc isKeyPresent(d : [Int: Int], x : Int) -> Bool {\n", "entry_point": "isKeyPresent", "test": "\n\nvar arg00 : [Int: Int] = [1 : 10, 2 : 20, 3 : 30, 4 : 40, 5 : 50, 6 : 60]\nvar arg01 : Int = 5\nvar x0 : Bool = isKeyPresent(d : arg00, x : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int: Int] = [1 : 10, 2 : 20, 3 : 30, 4 : 40, 5 : 50, 6 : 60]\nvar arg11 : Int = 6\nvar x1 : Bool = isKeyPresent(d : arg10, x : arg11)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int: Int] = [1 : 10, 2 : 20, 3 : 30, 4 : 40, 5 : 50, 6 : 60]\nvar arg21 : Int = 10\nvar x2 : Bool = isKeyPresent(d : arg20, x : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether the given key is present in the dictionary or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/704", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the harmonic sum of n-1.\n *\n * >>> harmonicSum(10)\n * 2.9289682539682538\n * >>> harmonicSum(4)\n * 2.083333333333333\n * >>> harmonicSum(7)\n * 2.5928571428571425\n */\nfunc harmonicSum(n : Int) -> Double {\n", "entry_point": "harmonicSum", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Double = harmonicSum(n : arg00)\nvar v0 : Double = 2.9289682539682538\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar x1 : Double = harmonicSum(n : arg10)\nvar v1 : Double = 2.083333333333333\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 7\nvar x2 : Double = harmonicSum(n : arg20)\nvar v2 : Double = 2.5928571428571425\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate the harmonic sum of n-1.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/705", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of lists by length and value.\n *\n * >>> sortSublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])\n * [[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\n * >>> sortSublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])\n * [[1], [7], [2, 3], [10, 11], [4, 5, 6]]\n * >>> sortSublists([[\"python\"], [\"java\", \"C\", \"C++\"], [\"DBMS\"], [\"SQL\", \"HTML\"]])\n * [[\"DBMS\"], [\"python\"], [\"SQL\", \"HTML\"], [\"java\", \"C\", \"C++\"]]\n */\nfunc sortSublists(list1 : [[AnyHashable]]) -> [[AnyHashable]] {\n", "entry_point": "sortSublists", "test": "\n\nvar arg00 : [[AnyHashable]] = [[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]]\nvar x0 : [[AnyHashable]] = sortSublists(list1 : arg00)\nvar v0 : [[AnyHashable]] = [[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[1], [2, 3], [4, 5, 6], [7], [10, 11]]\nvar x1 : [[AnyHashable]] = sortSublists(list1 : arg10)\nvar v1 : [[AnyHashable]] = [[1], [7], [2, 3], [10, 11], [4, 5, 6]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[#\"python\"#], [#\"java\"#, #\"C\"#, #\"C++\"#], [#\"DBMS\"#], [#\"SQL\"#, #\"HTML\"#]]\nvar x2 : [[AnyHashable]] = sortSublists(list1 : arg20)\nvar v2 : [[AnyHashable]] = [[#\"DBMS\"#], [#\"python\"#], [#\"SQL\"#, #\"HTML\"#], [#\"java\"#, #\"C\"#, #\"C++\"#]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort a list of lists by length and value.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/706", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find whether an array is subset of another array.\n *\n * >>> isSubset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4)\n * true\n * >>> isSubset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3)\n * true\n * >>> isSubset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3)\n * false\n */\nfunc isSubset(arr1 : [Int], m : Int, arr2 : [Int], n : Int) -> Bool {\n", "entry_point": "isSubset", "test": "\n\nvar arg00 : [Int] = [11, 1, 13, 21, 3, 7]\nvar arg01 : Int = 6\nvar arg02 : [Int] = [11, 3, 7, 1]\nvar arg03 : Int = 4\nvar x0 : Bool = isSubset(arr1 : arg00, m : arg01, arr2 : arg02, n : arg03)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5, 6]\nvar arg11 : Int = 6\nvar arg12 : [Int] = [1, 2, 4]\nvar arg13 : Int = 3\nvar x1 : Bool = isSubset(arr1 : arg10, m : arg11, arr2 : arg12, n : arg13)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [10, 5, 2, 23, 19]\nvar arg21 : Int = 5\nvar arg22 : [Int] = [19, 5, 3]\nvar arg23 : Int = 3\nvar x2 : Bool = isSubset(arr1 : arg20, m : arg21, arr2 : arg22, n : arg23)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find whether an array is subset of another array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/707", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the total set bits from 1 to n.\n *\n * >>> countSetBits(16)\n * 33\n * >>> countSetBits(2)\n * 2\n * >>> countSetBits(14)\n * 28\n */\nfunc countSetBits(n : Int) -> Int {\n", "entry_point": "countSetBits", "test": "\n\nvar arg00 : Int = 16\nvar x0 : Int = countSetBits(n : arg00)\nvar v0 : Int = 33\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar x1 : Int = countSetBits(n : arg10)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 14\nvar x2 : Int = countSetBits(n : arg20)\nvar v2 : Int = 28\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the total set bits from 1 to n.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/708", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert a string to a list.\n *\n * >>> convert(\"python program\")\n * [\"python\", \"program\"]\n * >>> convert(\"Data Analysis\")\n * [\"Data\", \"Analysis\"]\n * >>> convert(\"Hadoop Training\")\n * [\"Hadoop\", \"Training\"]\n */\nfunc convert(string : String) -> [String] {\n", "entry_point": "convert", "test": "\n\nvar arg00 : String = #\"python program\"#\nvar x0 : [String] = convert(string : arg00)\nvar v0 : [String] = [#\"python\"#, #\"program\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Data Analysis\"#\nvar x1 : [String] = convert(string : arg10)\nvar v1 : [String] = [#\"Data\"#, #\"Analysis\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Hadoop Training\"#\nvar x2 : [String] = convert(string : arg20)\nvar v2 : [String] = [#\"Hadoop\"#, #\"Training\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to convert a string to a list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/709", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count unique keys for each value present in the tuple.\n *\n * >>> getUnique([[3, 4], [1, 2], [2, 4], [8, 2], [7, 2], [8, 1], [9, 1], [8, 4], [10, 4]])\n * \"{4: 4, 2: 3, 1: 2}\"\n * >>> getUnique([[4, 5], [2, 3], [3, 5], [9, 3], [8, 3], [9, 2], [10, 2], [9, 5], [11, 5]])\n * \"{5: 4, 3: 3, 2: 2}\"\n * >>> getUnique([[6, 5], [3, 4], [2, 6], [11, 1], [8, 22], [8, 11], [4, 3], [14, 3], [11, 6]])\n * \"{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}\"\n */\nfunc getUnique(testList : [[Int]]) -> String {\n", "entry_point": "getUnique", "test": "\n\nvar arg00 : [[Int]] = [[3, 4], [1, 2], [2, 4], [8, 2], [7, 2], [8, 1], [9, 1], [8, 4], [10, 4]]\nvar x0 : String = getUnique(testList : arg00)\nvar v0 : String = #\"{4: 4, 2: 3, 1: 2}\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[4, 5], [2, 3], [3, 5], [9, 3], [8, 3], [9, 2], [10, 2], [9, 5], [11, 5]]\nvar x1 : String = getUnique(testList : arg10)\nvar v1 : String = #\"{5: 4, 3: 3, 2: 2}\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[6, 5], [3, 4], [2, 6], [11, 1], [8, 22], [8, 11], [4, 3], [14, 3], [11, 6]]\nvar x2 : String = getUnique(testList : arg20)\nvar v2 : String = #\"{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count unique keys for each value present in the tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/710", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to access the initial and last data of the given tuple record.\n *\n * >>> frontAndRear([10, 4, 5, 6, 7])\n * [10, 7]\n * >>> frontAndRear([1, 2, 3, 4, 5])\n * [1, 5]\n * >>> frontAndRear([6, 7, 8, 9, 10])\n * [6, 10]\n */\nfunc frontAndRear(testTup : [Int]) -> [Int] {\n", "entry_point": "frontAndRear", "test": "\n\nvar arg00 : [Int] = [10, 4, 5, 6, 7]\nvar x0 : [Int] = frontAndRear(testTup : arg00)\nvar v0 : [Int] = [10, 7]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5]\nvar x1 : [Int] = frontAndRear(testTup : arg10)\nvar v1 : [Int] = [1, 5]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [6, 7, 8, 9, 10]\nvar x2 : [Int] = frontAndRear(testTup : arg20)\nvar v2 : [Int] = [6, 10]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to access the initial and last data of the given tuple record.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/711", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the product of digits of a number at even and odd places is equal or not.\n *\n * >>> productEqual(2841)\n * true\n * >>> productEqual(1234)\n * false\n * >>> productEqual(1212)\n * false\n */\nfunc productEqual(n : Int) -> Bool {\n", "entry_point": "productEqual", "test": "\n\nvar arg00 : Int = 2841\nvar x0 : Bool = productEqual(n : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1234\nvar x1 : Bool = productEqual(n : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1212\nvar x2 : Bool = productEqual(n : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the product of digits of a number at even and odd places is equal or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/712", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove duplicates from a list of lists.\n *\n * >>> removeDuplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\n * [[10, 20], [30, 56, 25], [33], [40]]\n * >>> removeDuplicate([\"a\", \"b\", \"a\", \"c\", \"c\"])\n * [\"a\", \"b\", \"c\"]\n * >>> removeDuplicate([1, 3, 5, 6, 3, 5, 6, 1])\n * [1, 3, 5, 6]\n */\nfunc removeDuplicate(list1 : [AnyHashable]) -> [AnyHashable] {\n", "entry_point": "removeDuplicate", "test": "\n\nvar arg00 : [AnyHashable] = [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]\nvar x0 : [AnyHashable] = removeDuplicate(list1 : arg00)\nvar v0 : [AnyHashable] = [[10, 20], [30, 56, 25], [33], [40]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [#\"a\"#, #\"b\"#, #\"a\"#, #\"c\"#, #\"c\"#]\nvar x1 : [AnyHashable] = removeDuplicate(list1 : arg10)\nvar v1 : [AnyHashable] = [#\"a\"#, #\"b\"#, #\"c\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [1, 3, 5, 6, 3, 5, 6, 1]\nvar x2 : [AnyHashable] = removeDuplicate(list1 : arg20)\nvar v2 : [AnyHashable] = [1, 3, 5, 6]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove duplicates from a list of lists.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/713", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given tuple contains all valid values or not.\n *\n * >>> checkValid([true, true, true, true])\n * true\n * >>> checkValid([true, false, true, true])\n * false\n * >>> checkValid([true, true, true, true])\n * true\n */\nfunc checkValid(testTup : [Bool]) -> Bool {\n", "entry_point": "checkValid", "test": "\n\nvar arg00 : [Bool] = [true, true, true, true]\nvar x0 : Bool = checkValid(testTup : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Bool] = [true, false, true, true]\nvar x1 : Bool = checkValid(testTup : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Bool] = [true, true, true, true]\nvar x2 : Bool = checkValid(testTup : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if the given tuple contains all valid values or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/714", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of distinct power of prime factor of given number.\n *\n * >>> countFac(24)\n * 3\n * >>> countFac(12)\n * 2\n * >>> countFac(4)\n * 1\n */\nfunc countFac(n : Int) -> Int {\n", "entry_point": "countFac", "test": "\n\nvar arg00 : Int = 24\nvar x0 : Int = countFac(n : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 12\nvar x1 : Int = countFac(n : arg10)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar x2 : Int = countFac(n : arg20)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the number of distinct power of prime factor of given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/715", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given string of integers into a tuple.\n *\n * >>> strToTuple(\"1, -5, 4, 6, 7\")\n * [1, -5, 4, 6, 7]\n * >>> strToTuple(\"1, 2, 3, 4, 5\")\n * [1, 2, 3, 4, 5]\n * >>> strToTuple(\"4, 6, 9, 11, 13, 14\")\n * [4, 6, 9, 11, 13, 14]\n */\nfunc strToTuple(testStr : String) -> [Int] {\n", "entry_point": "strToTuple", "test": "\n\nvar arg00 : String = #\"1, -5, 4, 6, 7\"#\nvar x0 : [Int] = strToTuple(testStr : arg00)\nvar v0 : [Int] = [1, -5, 4, 6, 7]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"1, 2, 3, 4, 5\"#\nvar x1 : [Int] = strToTuple(testStr : arg10)\nvar v1 : [Int] = [1, 2, 3, 4, 5]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"4, 6, 9, 11, 13, 14\"#\nvar x2 : [Int] = strToTuple(testStr : arg20)\nvar v2 : [Int] = [4, 6, 9, 11, 13, 14]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert the given string of integers into a tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/716", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a rombus.\n *\n * >>> rombusPerimeter(10)\n * 40\n * >>> rombusPerimeter(5)\n * 20\n * >>> rombusPerimeter(4)\n * 16\n */\nfunc rombusPerimeter(a : Int) -> Int {\n", "entry_point": "rombusPerimeter", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Int = rombusPerimeter(a : arg00)\nvar v0 : Int = 40\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar x1 : Int = rombusPerimeter(a : arg10)\nvar v1 : Int = 20\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar x2 : Int = rombusPerimeter(a : arg20)\nvar v2 : Int = 16\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the perimeter of a rombus.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/717", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the standard deviation.\n *\n * >>> sdCalc([4, 2, 5, 8, 6])\n * 2.23606797749979\n * >>> sdCalc([1, 2, 3, 4, 5, 6, 7])\n * 2.160246899469287\n * >>> sdCalc([5, 9, 10, 15, 6, 4])\n * 4.070217029430577\n */\nfunc sdCalc(data : [Int]) -> Double {\n", "entry_point": "sdCalc", "test": "\n\nvar arg00 : [Int] = [4, 2, 5, 8, 6]\nvar x0 : Double = sdCalc(data : arg00)\nvar v0 : Double = 2.23606797749979\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5, 6, 7]\nvar x1 : Double = sdCalc(data : arg10)\nvar v1 : Double = 2.160246899469287\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [5, 9, 10, 15, 6, 4]\nvar x2 : Double = sdCalc(data : arg20)\nvar v2 : Double = 4.070217029430577\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate the standard deviation.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/718", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to create a list taking alternate elements from another given list.\n *\n * >>> alternateElements([\"red\", \"black\", \"white\", \"green\", \"orange\"])\n * [\"red\", \"white\", \"orange\"]\n * >>> alternateElements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])\n * [2, 3, 0, 8, 4]\n * >>> alternateElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [1, 3, 5, 7, 9]\n */\nfunc alternateElements(list1 : [AnyHashable]) -> [AnyHashable] {\n", "entry_point": "alternateElements", "test": "\n\nvar arg00 : [AnyHashable] = [#\"red\"#, #\"black\"#, #\"white\"#, #\"green\"#, #\"orange\"#]\nvar x0 : [AnyHashable] = alternateElements(list1 : arg00)\nvar v0 : [AnyHashable] = [#\"red\"#, #\"white\"#, #\"orange\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [2, 0, 3, 4, 0, 2, 8, 3, 4, 2]\nvar x1 : [AnyHashable] = alternateElements(list1 : arg10)\nvar v1 : [AnyHashable] = [2, 3, 0, 8, 4]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar x2 : [AnyHashable] = alternateElements(list1 : arg20)\nvar v2 : [AnyHashable] = [1, 3, 5, 7, 9]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to create a list taking alternate elements from another given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/719", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by zero or more b's.\n *\n * >>> textMatch(\"ac\")\n * \"Found a match!\"\n * >>> textMatch(\"dc\")\n * \"Not matched!\"\n * >>> textMatch(\"abba\")\n * \"Found a match!\"\n */\nfunc textMatch(text : String) -> String {\n", "entry_point": "textMatch", "test": "\n\nvar arg00 : String = #\"ac\"#\nvar x0 : String = textMatch(text : arg00)\nvar v0 : String = #\"Found a match!\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"dc\"#\nvar x1 : String = textMatch(text : arg10)\nvar v1 : String = #\"Not matched!\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"abba\"#\nvar x2 : String = textMatch(text : arg20)\nvar v2 : String = #\"Found a match!\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function that matches a string that has an a followed by zero or more b's.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/720", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add a dictionary to the tuple.\n *\n * >>> addDictToTuple([4, 5, 6], [\"MSAM\" : 1, \"is\" : 2, \"best\" : 3])\n * [4, 5, 6, [\"MSAM\" : 1, \"is\" : 2, \"best\" : 3]]\n * >>> addDictToTuple([1, 2, 3], [\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4])\n * [1, 2, 3, [\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4]]\n * >>> addDictToTuple([8, 9, 10], [\"POS\" : 3, \"is\" : 4, \"Okay\" : 5])\n * [8, 9, 10, [\"POS\" : 3, \"is\" : 4, \"Okay\" : 5]]\n */\nfunc addDictToTuple(testTup : [Int], testDict : [String: Int]) -> [AnyHashable] {\n", "entry_point": "addDictToTuple", "test": "\n\nvar arg00 : [Int] = [4, 5, 6]\nvar arg01 : [String: Int] = [#\"MSAM\"# : 1, #\"is\"# : 2, #\"best\"# : 3]\nvar x0 : [AnyHashable] = addDictToTuple(testTup : arg00, testDict : arg01)\nvar v0 : [AnyHashable] = [4, 5, 6, [#\"MSAM\"# : 1, #\"is\"# : 2, #\"best\"# : 3]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3]\nvar arg11 : [String: Int] = [#\"UTS\"# : 2, #\"is\"# : 3, #\"Worst\"# : 4]\nvar x1 : [AnyHashable] = addDictToTuple(testTup : arg10, testDict : arg11)\nvar v1 : [AnyHashable] = [1, 2, 3, [#\"UTS\"# : 2, #\"is\"# : 3, #\"Worst\"# : 4]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [8, 9, 10]\nvar arg21 : [String: Int] = [#\"POS\"# : 3, #\"is\"# : 4, #\"Okay\"# : 5]\nvar x2 : [AnyHashable] = addDictToTuple(testTup : arg20, testDict : arg21)\nvar v2 : [AnyHashable] = [8, 9, 10, [#\"POS\"# : 3, #\"is\"# : 4, #\"Okay\"# : 5]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to add a dictionary to the tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/721", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n *\n * >>> maxaverageofpath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3)\n * 5.2\n * >>> maxaverageofpath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3)\n * 6.2\n * >>> maxaverageofpath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3)\n * 7.2\n */\nfunc maxaverageofpath(cost : [[Int]], n : Int) -> Double {\n", "entry_point": "maxaverageofpath", "test": "\n\nvar arg00 : [[Int]] = [[1, 2, 3], [6, 5, 4], [7, 3, 9]]\nvar arg01 : Int = 3\nvar x0 : Double = maxaverageofpath(cost : arg00, n : arg01)\nvar v0 : Double = 5.2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[2, 3, 4], [7, 6, 5], [8, 4, 10]]\nvar arg11 : Int = 3\nvar x1 : Double = maxaverageofpath(cost : arg10, n : arg11)\nvar v1 : Double = 6.2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[3, 4, 5], [8, 7, 6], [9, 5, 11]]\nvar arg21 : Int = 3\nvar x2 : Double = maxaverageofpath(cost : arg20, n : arg21)\nvar v2 : Double = 7.2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/722", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to filter the height and width of students which are stored in a dictionary.\n *\n * >>> filterData([\"Cierra Vega\" : [6.2, 70], \"Alden Cantrell\" : [5.9, 65], \"Kierra Gentry\" : [6.0, 68], \"Pierre Cox\" : [5.8, 66]], 6.0, 70)\n * [\"Cierra Vega\" : [6.2, 70]]\n * >>> filterData([\"Cierra Vega\" : [6.2, 70], \"Alden Cantrell\" : [5.9, 65], \"Kierra Gentry\" : [6.0, 68], \"Pierre Cox\" : [5.8, 66]], 5.9, 67)\n * [\"Cierra Vega\" : [6.2, 70], \"Kierra Gentry\" : [6.0, 68]]\n * >>> filterData([\"Cierra Vega\" : [6.2, 70], \"Alden Cantrell\" : [5.9, 65], \"Kierra Gentry\" : [6.0, 68], \"Pierre Cox\" : [5.8, 66]], 5.7, 64)\n * [\"Cierra Vega\" : [6.2, 70], \"Alden Cantrell\" : [5.9, 65], \"Kierra Gentry\" : [6.0, 68], \"Pierre Cox\" : [5.8, 66]]\n */\nfunc filterData(students : [String: [Double]], h : Double, w : Int) -> [String: [Double]] {\n", "entry_point": "filterData", "test": "\n\nvar arg00 : [String: [Double]] = [#\"Cierra Vega\"# : [6.2, 70], #\"Alden Cantrell\"# : [5.9, 65], #\"Kierra Gentry\"# : [6.0, 68], #\"Pierre Cox\"# : [5.8, 66]]\nvar arg01 : Double = 6.0\nvar arg02 : Int = 70\nvar x0 : [String: [Double]] = filterData(students : arg00, h : arg01, w : arg02)\nvar v0 : [String: [Double]] = [#\"Cierra Vega\"# : [6.2, 70]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String: [Double]] = [#\"Cierra Vega\"# : [6.2, 70], #\"Alden Cantrell\"# : [5.9, 65], #\"Kierra Gentry\"# : [6.0, 68], #\"Pierre Cox\"# : [5.8, 66]]\nvar arg11 : Double = 5.9\nvar arg12 : Int = 67\nvar x1 : [String: [Double]] = filterData(students : arg10, h : arg11, w : arg12)\nvar v1 : [String: [Double]] = [#\"Cierra Vega\"# : [6.2, 70], #\"Kierra Gentry\"# : [6.0, 68]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String: [Double]] = [#\"Cierra Vega\"# : [6.2, 70], #\"Alden Cantrell\"# : [5.9, 65], #\"Kierra Gentry\"# : [6.0, 68], #\"Pierre Cox\"# : [5.8, 66]]\nvar arg21 : Double = 5.7\nvar arg22 : Int = 64\nvar x2 : [String: [Double]] = filterData(students : arg20, h : arg21, w : arg22)\nvar v2 : [String: [Double]] = [#\"Cierra Vega\"# : [6.2, 70], #\"Alden Cantrell\"# : [5.9, 65], #\"Kierra Gentry\"# : [6.0, 68], #\"Pierre Cox\"# : [5.8, 66]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to filter the height and width of students which are stored in a dictionary.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/723", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the same pair in two given lists using map function.\n *\n * >>> countSamePair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9])\n * 4\n * >>> countSamePair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n * 11\n * >>> countSamePair([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n * 1\n */\nfunc countSamePair(nums1 : [Int], nums2 : [Int]) -> Int {\n", "entry_point": "countSamePair", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8]\nvar arg01 : [Int] = [2, 2, 3, 1, 2, 6, 7, 9]\nvar x0 : Int = countSamePair(nums1 : arg00, nums2 : arg01)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]\nvar arg11 : [Int] = [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]\nvar x1 : Int = countSamePair(nums1 : arg10, nums2 : arg11)\nvar v1 : Int = 11\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 4, -6, -9, 11, -12, 14, -5, 17]\nvar arg21 : [Int] = [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]\nvar x2 : Int = countSamePair(nums1 : arg20, nums2 : arg21)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count the same pair in two given lists using map function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/724", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of all digits of the base to the specified power.\n *\n * >>> powerBaseSum(2, 100)\n * 115\n * >>> powerBaseSum(8, 10)\n * 37\n * >>> powerBaseSum(8, 15)\n * 62\n */\nfunc powerBaseSum(base : Int, power : Int) -> Int {\n", "entry_point": "powerBaseSum", "test": "\n\nvar arg00 : Int = 2\nvar arg01 : Int = 100\nvar x0 : Int = powerBaseSum(base : arg00, power : arg01)\nvar v0 : Int = 115\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 8\nvar arg11 : Int = 10\nvar x1 : Int = powerBaseSum(base : arg10, power : arg11)\nvar v1 : Int = 37\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 8\nvar arg21 : Int = 15\nvar x2 : Int = powerBaseSum(base : arg20, power : arg21)\nvar v2 : Int = 62\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate the sum of all digits of the base to the specified power.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/725", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract values between quotation marks of the given string by using regex.\n *\n * >>> extractQuotation(\"Cortex \\\"A53\\\" Based \\\"multi\\\" tasking \\\"Processor\\\"\")\n * [\"A53\", \"multi\", \"Processor\"]\n * >>> extractQuotation(\"Cast your \\\"favorite\\\" entertainment \\\"apps\\\"\")\n * [\"favorite\", \"apps\"]\n * >>> extractQuotation(\"Watch content \\\"4k Ultra HD\\\" resolution with \\\"HDR 10\\\" Support\")\n * [\"4k Ultra HD\", \"HDR 10\"]\n */\nfunc extractQuotation(text1 : String) -> [String] {\n", "entry_point": "extractQuotation", "test": "\n\nvar arg00 : String = #\"Cortex \\\"A53\\\" Based \\\"multi\\\" tasking \\\"Processor\\\"\"#\nvar x0 : [String] = extractQuotation(text1 : arg00)\nvar v0 : [String] = [#\"A53\"#, #\"multi\"#, #\"Processor\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Cast your \\\"favorite\\\" entertainment \\\"apps\\\"\"#\nvar x1 : [String] = extractQuotation(text1 : arg10)\nvar v1 : [String] = [#\"favorite\"#, #\"apps\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Watch content \\\"4k Ultra HD\\\" resolution with \\\"HDR 10\\\" Support\"#\nvar x2 : [String] = extractQuotation(text1 : arg20)\nvar v2 : [String] = [#\"4k Ultra HD\"#, #\"HDR 10\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract values between quotation marks of the given string by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/726", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to multiply the adjacent elements of the given tuple.\n *\n * >>> multiplyElements([1, 5, 7, 8, 10])\n * [5, 35, 56, 80]\n * >>> multiplyElements([2, 4, 5, 6, 7])\n * [8, 20, 30, 42]\n * >>> multiplyElements([12, 13, 14, 9, 15])\n * [156, 182, 126, 135]\n */\nfunc multiplyElements(testTup : [Int]) -> [Int] {\n", "entry_point": "multiplyElements", "test": "\n\nvar arg00 : [Int] = [1, 5, 7, 8, 10]\nvar x0 : [Int] = multiplyElements(testTup : arg00)\nvar v0 : [Int] = [5, 35, 56, 80]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 4, 5, 6, 7]\nvar x1 : [Int] = multiplyElements(testTup : arg10)\nvar v1 : [Int] = [8, 20, 30, 42]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [12, 13, 14, 9, 15]\nvar x2 : [Int] = multiplyElements(testTup : arg20)\nvar v2 : [Int] = [156, 182, 126, 135]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to multiply the adjacent elements of the given tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/727", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all characters except letters and numbers using regex\n *\n * >>> removeChar(\"123abcjw:, .@! eiw\")\n * \"123abcjweiw\"\n * >>> removeChar(\"Hello1234:, ! Howare33u\")\n * \"Hello1234Howare33u\"\n * >>> removeChar(\"Cool543Triks@:, Make@987Trips\")\n * \"Cool543TriksMake987Trips\"\n */\nfunc removeChar(s : String) -> String {\n", "entry_point": "removeChar", "test": "\n\nvar arg00 : String = #\"123abcjw:, .@! eiw\"#\nvar x0 : String = removeChar(s : arg00)\nvar v0 : String = #\"123abcjweiw\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Hello1234:, ! Howare33u\"#\nvar x1 : String = removeChar(s : arg10)\nvar v1 : String = #\"Hello1234Howare33u\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Cool543Triks@:, Make@987Trips\"#\nvar x2 : String = removeChar(s : arg20)\nvar v2 : String = #\"Cool543TriksMake987Trips\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove all characters except letters and numbers using regex", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/728", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sum elements in two lists.\n *\n * >>> sumList([10, 20, 30], [15, 25, 35])\n * [25, 45, 65]\n * >>> sumList([1, 2, 3], [5, 6, 7])\n * [6, 8, 10]\n * >>> sumList([15, 20, 30], [15, 45, 75])\n * [30, 65, 105]\n */\nfunc sumList(lst1 : [Int], lst2 : [Int]) -> [Int] {\n", "entry_point": "sumList", "test": "\n\nvar arg00 : [Int] = [10, 20, 30]\nvar arg01 : [Int] = [15, 25, 35]\nvar x0 : [Int] = sumList(lst1 : arg00, lst2 : arg01)\nvar v0 : [Int] = [25, 45, 65]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3]\nvar arg11 : [Int] = [5, 6, 7]\nvar x1 : [Int] = sumList(lst1 : arg10, lst2 : arg11)\nvar v1 : [Int] = [6, 8, 10]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [15, 20, 30]\nvar arg21 : [Int] = [15, 45, 75]\nvar x2 : [Int] = sumList(lst1 : arg20, lst2 : arg21)\nvar v2 : [Int] = [30, 65, 105]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sum elements in two lists.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/729", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add two lists using map and lambda function.\n *\n * >>> addList([1, 2, 3], [4, 5, 6])\n * [5, 7, 9]\n * >>> addList([1, 2], [3, 4])\n * [4, 6]\n * >>> addList([10, 20], [50, 70])\n * [60, 90]\n */\nfunc addList(nums1 : [Int], nums2 : [Int]) -> [Int] {\n", "entry_point": "addList", "test": "\n\nvar arg00 : [Int] = [1, 2, 3]\nvar arg01 : [Int] = [4, 5, 6]\nvar x0 : [Int] = addList(nums1 : arg00, nums2 : arg01)\nvar v0 : [Int] = [5, 7, 9]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2]\nvar arg11 : [Int] = [3, 4]\nvar x1 : [Int] = addList(nums1 : arg10, nums2 : arg11)\nvar v1 : [Int] = [4, 6]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [10, 20]\nvar arg21 : [Int] = [50, 70]\nvar x2 : [Int] = addList(nums1 : arg20, nums2 : arg21)\nvar v2 : [Int] = [60, 90]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to add two lists using map and lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/730", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove consecutive duplicates of a given list.\n *\n * >>> consecutiveDuplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n * [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n * >>> consecutiveDuplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])\n * [10, 15, 19, 18, 17, 26, 17, 18, 10]\n * >>> consecutiveDuplicates([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"])\n * [\"a\", \"b\", \"c\", \"d\"]\n */\nfunc consecutiveDuplicates(nums : [AnyHashable]) -> [AnyHashable] {\n", "entry_point": "consecutiveDuplicates", "test": "\n\nvar arg00 : [AnyHashable] = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nvar x0 : [AnyHashable] = consecutiveDuplicates(nums : arg00)\nvar v0 : [AnyHashable] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]\nvar x1 : [AnyHashable] = consecutiveDuplicates(nums : arg10)\nvar v1 : [AnyHashable] = [10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [#\"a\"#, #\"a\"#, #\"b\"#, #\"c\"#, #\"d\"#, #\"d\"#]\nvar x2 : [AnyHashable] = consecutiveDuplicates(nums : arg20)\nvar v2 : [AnyHashable] = [#\"a\"#, #\"b\"#, #\"c\"#, #\"d\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove consecutive duplicates of a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/731", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lateral surface area of a cone.\n *\n * >>> lateralsurfaceCone(5, 12)\n * 204.20352248333654\n * >>> lateralsurfaceCone(10, 15)\n * 566.3586699569488\n * >>> lateralsurfaceCone(19, 17)\n * 1521.8090132193388\n */\nfunc lateralsurfaceCone(r : Int, h : Int) -> Double {\n", "entry_point": "lateralsurfaceCone", "test": "\n\nvar arg00 : Int = 5\nvar arg01 : Int = 12\nvar x0 : Double = lateralsurfaceCone(r : arg00, h : arg01)\nvar v0 : Double = 204.20352248333654\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar arg11 : Int = 15\nvar x1 : Double = lateralsurfaceCone(r : arg10, h : arg11)\nvar v1 : Double = 566.3586699569488\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 19\nvar arg21 : Int = 17\nvar x2 : Double = lateralsurfaceCone(r : arg20, h : arg21)\nvar v2 : Double = 1521.8090132193388\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the lateral surface area of a cone.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/732", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n *\n * >>> replaceSpecialchar(\"Python language, Programming language.\")\n * \"Python:language::Programming:language:\"\n * >>> replaceSpecialchar(\"a b c,d e f\")\n * \"a:b:c:d:e:f\"\n * >>> replaceSpecialchar(\"ram reshma,ram rahim\")\n * \"ram:reshma:ram:rahim\"\n */\nfunc replaceSpecialchar(text : String) -> String {\n", "entry_point": "replaceSpecialchar", "test": "\n\nvar arg00 : String = #\"Python language, Programming language.\"#\nvar x0 : String = replaceSpecialchar(text : arg00)\nvar v0 : String = #\"Python:language::Programming:language:\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"a b c,d e f\"#\nvar x1 : String = replaceSpecialchar(text : arg10)\nvar v1 : String = #\"a:b:c:d:e:f\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"ram reshma,ram rahim\"#\nvar x2 : String = replaceSpecialchar(text : arg20)\nvar v2 : String = #\"ram:reshma:ram:rahim\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/733", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the index of the first occurrence of a given number in a sorted array.\n *\n * >>> findFirstOccurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n * 1\n * >>> findFirstOccurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n * 2\n * >>> findFirstOccurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6)\n * 4\n */\nfunc findFirstOccurrence(a : [Int], x : Int) -> Int {\n", "entry_point": "findFirstOccurrence", "test": "\n\nvar arg00 : [Int] = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9]\nvar arg01 : Int = 5\nvar x0 : Int = findFirstOccurrence(a : arg00, x : arg01)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 3, 5, 5, 6, 6, 8, 9, 9, 9]\nvar arg11 : Int = 5\nvar x1 : Int = findFirstOccurrence(a : arg10, x : arg11)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 4, 1, 5, 6, 6, 8, 9, 9, 9]\nvar arg21 : Int = 6\nvar x2 : Int = findFirstOccurrence(a : arg20, x : arg21)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/734", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of products of all possible subarrays.\n *\n * >>> sumOfSubarrayProd([1, 2, 3], 3)\n * 20\n * >>> sumOfSubarrayProd([1, 2], 2)\n * 5\n * >>> sumOfSubarrayProd([1, 2, 3, 4], 4)\n * 84\n */\nfunc sumOfSubarrayProd(arr : [Int], n : Int) -> Int {\n", "entry_point": "sumOfSubarrayProd", "test": "\n\nvar arg00 : [Int] = [1, 2, 3]\nvar arg01 : Int = 3\nvar x0 : Int = sumOfSubarrayProd(arr : arg00, n : arg01)\nvar v0 : Int = 20\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2]\nvar arg11 : Int = 2\nvar x1 : Int = sumOfSubarrayProd(arr : arg10, n : arg11)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4]\nvar arg21 : Int = 4\nvar x2 : Int = sumOfSubarrayProd(arr : arg20, n : arg21)\nvar v2 : Int = 84\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find sum of products of all possible subarrays.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/735", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to toggle bits of the number except the first and the last bit.\n *\n * >>> toggleMiddleBits(9)\n * 15\n * >>> toggleMiddleBits(10)\n * 12\n * >>> toggleMiddleBits(11)\n * 13\n */\nfunc toggleMiddleBits(n : Int) -> Int {\n", "entry_point": "toggleMiddleBits", "test": "\n\nvar arg00 : Int = 9\nvar x0 : Int = toggleMiddleBits(n : arg00)\nvar v0 : Int = 15\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar x1 : Int = toggleMiddleBits(n : arg10)\nvar v1 : Int = 12\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 11\nvar x2 : Int = toggleMiddleBits(n : arg20)\nvar v2 : Int = 13\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to toggle bits of the number except the first and the last bit.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/736", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to locate the left insertion point for a specified value in sorted order.\n *\n * >>> leftInsertion([1, 2, 4, 5], 6)\n * 4\n * >>> leftInsertion([1, 2, 4, 5], 3)\n * 2\n * >>> leftInsertion([1, 2, 4, 5], 7)\n * 4\n */\nfunc leftInsertion(a : [Int], x : Int) -> Int {\n", "entry_point": "leftInsertion", "test": "\n\nvar arg00 : [Int] = [1, 2, 4, 5]\nvar arg01 : Int = 6\nvar x0 : Int = leftInsertion(a : arg00, x : arg01)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 4, 5]\nvar arg11 : Int = 3\nvar x1 : Int = leftInsertion(a : arg10, x : arg11)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 4, 5]\nvar arg21 : Int = 7\nvar x2 : Int = leftInsertion(a : arg20, x : arg21)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to locate the left insertion point for a specified value in sorted order.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/737", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given string is starting with a vowel or not using regex.\n *\n * >>> checkStr(\"annie\")\n * \"Valid\"\n * >>> checkStr(\"dawood\")\n * \"Invalid\"\n * >>> checkStr(\"Else\")\n * \"Valid\"\n */\nfunc checkStr(string : String) -> String {\n", "entry_point": "checkStr", "test": "\n\nvar arg00 : String = #\"annie\"#\nvar x0 : String = checkStr(string : arg00)\nvar v0 : String = #\"Valid\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"dawood\"#\nvar x1 : String = checkStr(string : arg10)\nvar v1 : String = #\"Invalid\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Else\"#\nvar x2 : String = checkStr(string : arg20)\nvar v2 : String = #\"Valid\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether the given string is starting with a vowel or not using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/738", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the geometric sum of n-1.\n *\n * >>> geometricSum(7)\n * 1.9921875\n * >>> geometricSum(4)\n * 1.9375\n * >>> geometricSum(8)\n * 1.99609375\n */\nfunc geometricSum(n : Int) -> Double {\n", "entry_point": "geometricSum", "test": "\n\nvar arg00 : Int = 7\nvar x0 : Double = geometricSum(n : arg00)\nvar v0 : Double = 1.9921875\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar x1 : Double = geometricSum(n : arg10)\nvar v1 : Double = 1.9375\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 8\nvar x2 : Double = geometricSum(n : arg20)\nvar v2 : Double = 1.99609375\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate the geometric sum of n-1.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/739", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the index of smallest triangular number with n digits.\n *\n * >>> findIndex(2)\n * 4\n * >>> findIndex(3)\n * 14\n * >>> findIndex(4)\n * 45\n */\nfunc findIndex(n : Int) -> Int {\n", "entry_point": "findIndex", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = findIndex(n : arg00)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar x1 : Int = findIndex(n : arg10)\nvar v1 : Int = 14\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar x2 : Int = findIndex(n : arg20)\nvar v2 : Int = 45\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the index of smallest triangular number with n digits.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/740", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n *\n * >>> tupleToDict([1, 5, 7, 10, 13, 5])\n * [1 : 5, 7 : 10, 13 : 5]\n * >>> tupleToDict([1, 2, 3, 4, 5, 6])\n * [1 : 2, 3 : 4, 5 : 6]\n * >>> tupleToDict([7, 8, 9, 10, 11, 12])\n * [7 : 8, 9 : 10, 11 : 12]\n */\nfunc tupleToDict(testTup : [Int]) -> [Int: Int] {\n", "entry_point": "tupleToDict", "test": "\n\nvar arg00 : [Int] = [1, 5, 7, 10, 13, 5]\nvar x0 : [Int: Int] = tupleToDict(testTup : arg00)\nvar v0 : [Int: Int] = [1 : 5, 7 : 10, 13 : 5]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5, 6]\nvar x1 : [Int: Int] = tupleToDict(testTup : arg10)\nvar v1 : [Int: Int] = [1 : 2, 3 : 4, 5 : 6]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [7, 8, 9, 10, 11, 12]\nvar x2 : [Int: Int] = tupleToDict(testTup : arg20)\nvar v2 : [Int: Int] = [7 : 8, 9 : 10, 11 : 12]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/741", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether all the characters are same or not.\n *\n * >>> allCharactersSame(\"python\")\n * false\n * >>> allCharactersSame(\"aaa\")\n * true\n * >>> allCharactersSame(\"data\")\n * false\n */\nfunc allCharactersSame(s : String) -> Bool {\n", "entry_point": "allCharactersSame", "test": "\n\nvar arg00 : String = #\"python\"#\nvar x0 : Bool = allCharactersSame(s : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"aaa\"#\nvar x1 : Bool = allCharactersSame(s : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"data\"#\nvar x2 : Bool = allCharactersSame(s : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether all the characters are same or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/742", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate the area of a tetrahedron.\n *\n * >>> areaTetrahedron(3)\n * 15.588457268119894\n * >>> areaTetrahedron(20)\n * 692.8203230275509\n * >>> areaTetrahedron(10)\n * 173.20508075688772\n */\nfunc areaTetrahedron(side : Int) -> Double {\n", "entry_point": "areaTetrahedron", "test": "\n\nvar arg00 : Int = 3\nvar x0 : Double = areaTetrahedron(side : arg00)\nvar v0 : Double = 15.588457268119894\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 20\nvar x1 : Double = areaTetrahedron(side : arg10)\nvar v1 : Double = 692.8203230275509\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 10\nvar x2 : Double = areaTetrahedron(side : arg20)\nvar v2 : Double = 173.20508075688772\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to caluclate the area of a tetrahedron.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/743", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to rotate a given list by specified number of items to the right direction.\n *\n * >>> rotateRight([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)\n * [8, 9, 10, 1, 2, 3, 4, 5, 6]\n * >>> rotateRight([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)\n * [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n * >>> rotateRight([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)\n * [6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n */\nfunc rotateRight(list1 : [Int], m : Int, n : Int) -> [Int] {\n", "entry_point": "rotateRight", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar arg01 : Int = 3\nvar arg02 : Int = 4\nvar x0 : [Int] = rotateRight(list1 : arg00, m : arg01, n : arg02)\nvar v0 : [Int] = [8, 9, 10, 1, 2, 3, 4, 5, 6]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar arg11 : Int = 2\nvar arg12 : Int = 2\nvar x1 : [Int] = rotateRight(list1 : arg10, m : arg11, n : arg12)\nvar v1 : [Int] = [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar arg21 : Int = 5\nvar arg22 : Int = 2\nvar x2 : [Int] = rotateRight(list1 : arg20, m : arg21, n : arg22)\nvar v2 : [Int] = [6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to rotate a given list by specified number of items to the right direction.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/744", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given tuple has any none value or not.\n *\n * >>> checkNone([10, 4, 5, 6, \"none\"])\n * true\n * >>> checkNone([7, 8, 9, 11, 14])\n * false\n * >>> checkNone([1, 2, 3, 4, \"none\"])\n * true\n */\nfunc checkNone(testTup : [AnyHashable]) -> Bool {\n", "entry_point": "checkNone", "test": "\n\nvar arg00 : [AnyHashable] = [10, 4, 5, 6, \"none\"]\nvar x0 : Bool = checkNone(testTup : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [7, 8, 9, 11, 14]\nvar x1 : Bool = checkNone(testTup : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [1, 2, 3, 4, \"none\"]\nvar x2 : Bool = checkNone(testTup : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if the given tuple has any none value or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/745", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find numbers within a given range where every number is divisible by every digit it contains.\n *\n * >>> divisibleByDigits(1, 22)\n * [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n * >>> divisibleByDigits(1, 15)\n * [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n * >>> divisibleByDigits(20, 25)\n * [22, 24]\n */\nfunc divisibleByDigits(startnum : Int, endnum : Int) -> [Int] {\n", "entry_point": "divisibleByDigits", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = 22\nvar x0 : [Int] = divisibleByDigits(startnum : arg00, endnum : arg01)\nvar v0 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar arg11 : Int = 15\nvar x1 : [Int] = divisibleByDigits(startnum : arg10, endnum : arg11)\nvar v1 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 20\nvar arg21 : Int = 25\nvar x2 : [Int] = divisibleByDigits(startnum : arg20, endnum : arg21)\nvar v2 : [Int] = [22, 24]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/746", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find area of a sector.\n *\n * >>> sectorArea(4, 45)\n * 6.285714285714286\n * >>> sectorArea(9, 45)\n * 31.82142857142857\n * >>> sectorArea(9, 360)\n * \"none\"\n */\nfunc sectorArea(r : Int, a : Int) -> AnyHashable {\n", "entry_point": "sectorArea", "test": "\n\nvar arg00 : Int = 4\nvar arg01 : Int = 45\nvar x0 : AnyHashable = sectorArea(r : arg00, a : arg01)\nvar v0 : AnyHashable = 6.285714285714286\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 9\nvar arg11 : Int = 45\nvar x1 : AnyHashable = sectorArea(r : arg10, a : arg11)\nvar v1 : AnyHashable = 31.82142857142857\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 9\nvar arg21 : Int = 360\nvar x2 : AnyHashable = sectorArea(r : arg20, a : arg21)\nvar v2 : AnyHashable = \"none\"\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find area of a sector.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/747", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the longest common subsequence for the given three string sequence.\n *\n * >>> lcsOfThree(\"AGGT12\", \"12TXAYB\", \"12XBA\", 6, 7, 5)\n * 2\n * >>> lcsOfThree(\"Reels\", \"Reelsfor\", \"ReelsforReels\", 5, 8, 13)\n * 5\n * >>> lcsOfThree(\"abcd1e2\", \"bc12ea\", \"bd1ea\", 7, 6, 5)\n * 3\n */\nfunc lcsOfThree(x : String, y : String, z : String, m : Int, n : Int, o : Int) -> Int {\n", "entry_point": "lcsOfThree", "test": "\n\nvar arg00 : String = #\"AGGT12\"#\nvar arg01 : String = #\"12TXAYB\"#\nvar arg02 : String = #\"12XBA\"#\nvar arg03 : Int = 6\nvar arg04 : Int = 7\nvar arg05 : Int = 5\nvar x0 : Int = lcsOfThree(x : arg00, y : arg01, z : arg02, m : arg03, n : arg04, o : arg05)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Reels\"#\nvar arg11 : String = #\"Reelsfor\"#\nvar arg12 : String = #\"ReelsforReels\"#\nvar arg13 : Int = 5\nvar arg14 : Int = 8\nvar arg15 : Int = 13\nvar x1 : Int = lcsOfThree(x : arg10, y : arg11, z : arg12, m : arg13, n : arg14, o : arg15)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"abcd1e2\"#\nvar arg21 : String = #\"bc12ea\"#\nvar arg22 : String = #\"bd1ea\"#\nvar arg23 : Int = 7\nvar arg24 : Int = 6\nvar arg25 : Int = 5\nvar x2 : Int = lcsOfThree(x : arg20, y : arg21, z : arg22, m : arg23, n : arg24, o : arg25)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the longest common subsequence for the given three string sequence.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/748", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to put spaces between words starting with capital letters in a given string by using regex.\n *\n * >>> capitalWordsSpaces(\"Python\")\n * \"Python\"\n * >>> capitalWordsSpaces(\"PythonProgrammingExamples\")\n * \"Python Programming Examples\"\n * >>> capitalWordsSpaces(\"GetReadyToBeCodingFreak\")\n * \"Get Ready To Be Coding Freak\"\n */\nfunc capitalWordsSpaces(str1 : String) -> String {\n", "entry_point": "capitalWordsSpaces", "test": "\n\nvar arg00 : String = #\"Python\"#\nvar x0 : String = capitalWordsSpaces(str1 : arg00)\nvar v0 : String = #\"Python\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"PythonProgrammingExamples\"#\nvar x1 : String = capitalWordsSpaces(str1 : arg10)\nvar v1 : String = #\"Python Programming Examples\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"GetReadyToBeCodingFreak\"#\nvar x2 : String = capitalWordsSpaces(str1 : arg20)\nvar v2 : String = #\"Get Ready To Be Coding Freak\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to put spaces between words starting with capital letters in a given string by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/749", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a given list of strings of numbers numerically.\n *\n * >>> sortNumericStrings([\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"])\n * [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n * >>> sortNumericStrings([\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"])\n * [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n * >>> sortNumericStrings([\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"])\n * [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n */\nfunc sortNumericStrings(numsStr : [String]) -> [Int] {\n", "entry_point": "sortNumericStrings", "test": "\n\nvar arg00 : [String] = [#\"4\"#, #\"12\"#, #\"45\"#, #\"7\"#, #\"0\"#, #\"100\"#, #\"200\"#, #\"-12\"#, #\"-500\"#]\nvar x0 : [Int] = sortNumericStrings(numsStr : arg00)\nvar v0 : [Int] = [-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"2\"#, #\"3\"#, #\"8\"#, #\"4\"#, #\"7\"#, #\"9\"#, #\"8\"#, #\"2\"#, #\"6\"#, #\"5\"#, #\"1\"#, #\"6\"#, #\"1\"#, #\"2\"#, #\"3\"#, #\"4\"#, #\"6\"#, #\"9\"#, #\"1\"#, #\"2\"#]\nvar x1 : [Int] = sortNumericStrings(numsStr : arg10)\nvar v1 : [Int] = [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"1\"#, #\"3\"#, #\"5\"#, #\"7\"#, #\"1\"#, #\"3\"#, #\"13\"#, #\"15\"#, #\"17\"#, #\"5\"#, #\"7 \"#, #\"9\"#, #\"1\"#, #\"11\"#]\nvar x2 : [Int] = sortNumericStrings(numsStr : arg20)\nvar v2 : [Int] = [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort a given list of strings of numbers numerically.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/750", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add the given tuple to the given list.\n *\n * >>> addTuple([5, 6, 7], [9, 10])\n * [5, 6, 7, 9, 10]\n * >>> addTuple([6, 7, 8], [10, 11])\n * [6, 7, 8, 10, 11]\n * >>> addTuple([7, 8, 9], [11, 12])\n * [7, 8, 9, 11, 12]\n */\nfunc addTuple(testList : [Int], testTup : [Int]) -> [Int] {\n", "entry_point": "addTuple", "test": "\n\nvar arg00 : [Int] = [5, 6, 7]\nvar arg01 : [Int] = [9, 10]\nvar x0 : [Int] = addTuple(testList : arg00, testTup : arg01)\nvar v0 : [Int] = [5, 6, 7, 9, 10]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [6, 7, 8]\nvar arg11 : [Int] = [10, 11]\nvar x1 : [Int] = addTuple(testList : arg10, testTup : arg11)\nvar v1 : [Int] = [6, 7, 8, 10, 11]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [7, 8, 9]\nvar arg21 : [Int] = [11, 12]\nvar x2 : [Int] = addTuple(testList : arg20, testTup : arg21)\nvar v2 : [Int] = [7, 8, 9, 11, 12]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to add the given tuple to the given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/751", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given array represents min heap or not.\n *\n * >>> checkMinHeap([1, 2, 3, 4, 5, 6], 0)\n * true\n * >>> checkMinHeap([2, 3, 4, 5, 10, 15], 0)\n * true\n * >>> checkMinHeap([2, 10, 4, 5, 3, 15], 0)\n * false\n */\nfunc checkMinHeap(arr : [Int], i : Int) -> Bool {\n", "entry_point": "checkMinHeap", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5, 6]\nvar arg01 : Int = 0\nvar x0 : Bool = checkMinHeap(arr : arg00, i : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 3, 4, 5, 10, 15]\nvar arg11 : Int = 0\nvar x1 : Bool = checkMinHeap(arr : arg10, i : arg11)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 10, 4, 5, 3, 15]\nvar arg21 : Int = 0\nvar x2 : Bool = checkMinHeap(arr : arg20, i : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if the given array represents min heap or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/752", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth jacobsthal number.\n *\n * >>> jacobsthalNum(5)\n * 11\n * >>> jacobsthalNum(2)\n * 1\n * >>> jacobsthalNum(4)\n * 5\n */\nfunc jacobsthalNum(n : Int) -> Int {\n", "entry_point": "jacobsthalNum", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Int = jacobsthalNum(n : arg00)\nvar v0 : Int = 11\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar x1 : Int = jacobsthalNum(n : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar x2 : Int = jacobsthalNum(n : arg20)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the nth jacobsthal number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/753", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find minimum k records from tuple list.\n *\n * >>> minK([[\"Manjeet\", 10], [\"Akshat\", 4], [\"Akash\", 2], [\"Nikhil\", 8]], 2)\n * [[\"Akash\", 2], [\"Akshat\", 4]]\n * >>> minK([[\"Sanjeev\", 11], [\"Angat\", 5], [\"Akash\", 3], [\"Nepin\", 9]], 3)\n * [[\"Akash\", 3], [\"Angat\", 5], [\"Nepin\", 9]]\n * >>> minK([[\"tanmay\", 14], [\"Amer\", 11], [\"Ayesha\", 9], [\"SKD\", 16]], 1)\n * [[\"Ayesha\", 9]]\n */\nfunc minK(testList : [[AnyHashable]], k : Int) -> [[AnyHashable]] {\n", "entry_point": "minK", "test": "\n\nvar arg00 : [[AnyHashable]] = [[#\"Manjeet\"#, 10], [#\"Akshat\"#, 4], [#\"Akash\"#, 2], [#\"Nikhil\"#, 8]]\nvar arg01 : Int = 2\nvar x0 : [[AnyHashable]] = minK(testList : arg00, k : arg01)\nvar v0 : [[AnyHashable]] = [[#\"Akash\"#, 2], [#\"Akshat\"#, 4]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[#\"Sanjeev\"#, 11], [#\"Angat\"#, 5], [#\"Akash\"#, 3], [#\"Nepin\"#, 9]]\nvar arg11 : Int = 3\nvar x1 : [[AnyHashable]] = minK(testList : arg10, k : arg11)\nvar v1 : [[AnyHashable]] = [[#\"Akash\"#, 3], [#\"Angat\"#, 5], [#\"Nepin\"#, 9]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[#\"tanmay\"#, 14], [#\"Amer\"#, 11], [#\"Ayesha\"#, 9], [#\"SKD\"#, 16]]\nvar arg21 : Int = 1\nvar x2 : [[AnyHashable]] = minK(testList : arg20, k : arg21)\nvar v2 : [[AnyHashable]] = [[#\"Ayesha\"#, 9]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find minimum k records from tuple list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/754", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find common index elements from three lists.\n *\n * >>> extractIndexList([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])\n * [1, 7]\n * >>> extractIndexList([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7])\n * [1, 6]\n * >>> extractIndexList([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])\n * [1, 5]\n */\nfunc extractIndexList(l1 : [Int], l2 : [Int], l3 : [Int]) -> [Int] {\n", "entry_point": "extractIndexList", "test": "\n\nvar arg00 : [Int] = [1, 1, 3, 4, 5, 6, 7]\nvar arg01 : [Int] = [0, 1, 2, 3, 4, 5, 7]\nvar arg02 : [Int] = [0, 1, 2, 3, 4, 5, 7]\nvar x0 : [Int] = extractIndexList(l1 : arg00, l2 : arg01, l3 : arg02)\nvar v0 : [Int] = [1, 7]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 1, 3, 4, 5, 6, 7]\nvar arg11 : [Int] = [0, 1, 2, 3, 4, 6, 5]\nvar arg12 : [Int] = [0, 1, 2, 3, 4, 6, 7]\nvar x1 : [Int] = extractIndexList(l1 : arg10, l2 : arg11, l3 : arg12)\nvar v1 : [Int] = [1, 6]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 1, 3, 4, 6, 5, 6]\nvar arg21 : [Int] = [0, 1, 2, 3, 4, 5, 7]\nvar arg22 : [Int] = [0, 1, 2, 3, 4, 5, 7]\nvar x2 : [Int] = extractIndexList(l1 : arg20, l2 : arg21, l3 : arg22)\nvar v2 : [Int] = [1, 5]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find common index elements from three lists.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/755", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the second smallest number in a list.\n *\n * >>> secondSmallest([1, 2, -8, -2, 0, -2])\n * -2\n * >>> secondSmallest([1, 1, -0.5, 0, 2, -2, -2])\n * -0.5\n * >>> secondSmallest([2, 2])\n * \"none\"\n */\nfunc secondSmallest(numbers : [Double]) -> AnyHashable {\n", "entry_point": "secondSmallest", "test": "\n\nvar arg00 : [Double] = [1, 2, -8, -2, 0, -2]\nvar x0 : AnyHashable = secondSmallest(numbers : arg00)\nvar v0 : AnyHashable = -2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Double] = [1, 1, -0.5, 0, 2, -2, -2]\nvar x1 : AnyHashable = secondSmallest(numbers : arg10)\nvar v1 : AnyHashable = -0.5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Double] = [2, 2]\nvar x2 : AnyHashable = secondSmallest(numbers : arg20)\nvar v2 : AnyHashable = \"none\"\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the second smallest number in a list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/756", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by zero or one 'b'.\n *\n * >>> textMatchZeroOne(\"ac\")\n * \"Found a match!\"\n * >>> textMatchZeroOne(\"dc\")\n * \"Not matched!\"\n * >>> textMatchZeroOne(\"abbbba\")\n * \"Found a match!\"\n */\nfunc textMatchZeroOne(text : String) -> String {\n", "entry_point": "textMatchZeroOne", "test": "\n\nvar arg00 : String = #\"ac\"#\nvar x0 : String = textMatchZeroOne(text : arg00)\nvar v0 : String = #\"Found a match!\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"dc\"#\nvar x1 : String = textMatchZeroOne(text : arg10)\nvar v1 : String = #\"Not matched!\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"abbbba\"#\nvar x2 : String = textMatchZeroOne(text : arg20)\nvar v2 : String = #\"Found a match!\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function that matches a string that has an a followed by zero or one 'b'.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/757", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the pairs of reverse strings in the given string list.\n *\n * >>> countReversePairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])\n * \"2\"\n * >>> countReversePairs([\"geeks\", \"best\", \"for\", \"skeeg\"])\n * \"1\"\n * >>> countReversePairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"])\n * \"2\"\n */\nfunc countReversePairs(testList : [String]) -> String {\n", "entry_point": "countReversePairs", "test": "\n\nvar arg00 : [String] = [#\"julia\"#, #\"best\"#, #\"tseb\"#, #\"for\"#, #\"ailuj\"#]\nvar x0 : String = countReversePairs(testList : arg00)\nvar v0 : String = #\"2\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"geeks\"#, #\"best\"#, #\"for\"#, #\"skeeg\"#]\nvar x1 : String = countReversePairs(testList : arg10)\nvar v1 : String = #\"1\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"makes\"#, #\"best\"#, #\"sekam\"#, #\"for\"#, #\"rof\"#]\nvar x2 : String = countReversePairs(testList : arg20)\nvar v2 : String = #\"2\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count the pairs of reverse strings in the given string list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/758", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count number of unique lists within a list.\n *\n * >>> uniqueSublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])\n * [[1, 3] : 2, [5, 7] : 2, [13, 15, 17] : 1, [9, 11] : 1]\n * >>> uniqueSublists([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]])\n * [[\"green\", \"orange\"] : 2, [\"black\"] : 1, [\"white\"] : 1]\n * >>> uniqueSublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])\n * [[10, 20, 30, 40] : 1, [60, 70, 50, 50] : 1, [90, 100, 200] : 1]\n */\nfunc uniqueSublists(list1 : [[AnyHashable]]) -> [[AnyHashable]: Int] {\n", "entry_point": "uniqueSublists", "test": "\n\nvar arg00 : [[AnyHashable]] = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]\nvar x0 : [[AnyHashable]: Int] = uniqueSublists(list1 : arg00)\nvar v0 : [[AnyHashable]: Int] = [[1, 3] : 2, [5, 7] : 2, [13, 15, 17] : 1, [9, 11] : 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[#\"green\"#, #\"orange\"#], [#\"black\"#], [#\"green\"#, #\"orange\"#], [#\"white\"#]]\nvar x1 : [[AnyHashable]: Int] = uniqueSublists(list1 : arg10)\nvar v1 : [[AnyHashable]: Int] = [[#\"green\"#, #\"orange\"#] : 2, [#\"black\"#] : 1, [#\"white\"#] : 1]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]]\nvar x2 : [[AnyHashable]: Int] = uniqueSublists(list1 : arg20)\nvar v2 : [[AnyHashable]: Int] = [[10, 20, 30, 40] : 1, [60, 70, 50, 50] : 1, [90, 100, 200] : 1]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count number of unique lists within a list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/759", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check a decimal with a precision of 2.\n *\n * >>> isDecimal(\"123.11\")\n * true\n * >>> isDecimal(\"e666.86\")\n * false\n * >>> isDecimal(\"3.124587\")\n * false\n */\nfunc isDecimal(num : String) -> Bool {\n", "entry_point": "isDecimal", "test": "\n\nvar arg00 : String = #\"123.11\"#\nvar x0 : Bool = isDecimal(num : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"e666.86\"#\nvar x1 : Bool = isDecimal(num : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"3.124587\"#\nvar x2 : Bool = isDecimal(num : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check a decimal with a precision of 2.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/760", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether an array contains only one distinct element or not.\n *\n * >>> uniqueElement([1, 1, 1], 3)\n * \"YES\"\n * >>> uniqueElement([1, 2, 1, 2], 4)\n * \"NO\"\n * >>> uniqueElement([1, 2, 3, 4, 5], 5)\n * \"NO\"\n */\nfunc uniqueElement(arr : [Int], n : Int) -> String {\n", "entry_point": "uniqueElement", "test": "\n\nvar arg00 : [Int] = [1, 1, 1]\nvar arg01 : Int = 3\nvar x0 : String = uniqueElement(arr : arg00, n : arg01)\nvar v0 : String = #\"YES\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 1, 2]\nvar arg11 : Int = 4\nvar x1 : String = uniqueElement(arr : arg10, n : arg11)\nvar v1 : String = #\"NO\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4, 5]\nvar arg21 : Int = 5\nvar x2 : String = uniqueElement(arr : arg20, n : arg21)\nvar v2 : String = #\"NO\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether an array contains only one distinct element or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/761", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate arc length of an angle.\n *\n * >>> arcLength(9, 45)\n * 3.5357142857142856\n * >>> arcLength(9, 480)\n * \"none\"\n * >>> arcLength(5, 270)\n * 11.785714285714285\n */\nfunc arcLength(d : Int, a : Int) -> AnyHashable {\n", "entry_point": "arcLength", "test": "\n\nvar arg00 : Int = 9\nvar arg01 : Int = 45\nvar x0 : AnyHashable = arcLength(d : arg00, a : arg01)\nvar v0 : AnyHashable = 3.5357142857142856\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 9\nvar arg11 : Int = 480\nvar x1 : AnyHashable = arcLength(d : arg10, a : arg11)\nvar v1 : AnyHashable = \"none\"\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar arg21 : Int = 270\nvar x2 : AnyHashable = arcLength(d : arg20, a : arg21)\nvar v2 : AnyHashable = 11.785714285714285\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to caluclate arc length of an angle.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/762", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month number contains 30 days or not.\n *\n * >>> checkMonthnumberNumber(6)\n * true\n * >>> checkMonthnumberNumber(2)\n * false\n * >>> checkMonthnumberNumber(12)\n * false\n */\nfunc checkMonthnumberNumber(monthnum3 : Int) -> Bool {\n", "entry_point": "checkMonthnumberNumber", "test": "\n\nvar arg00 : Int = 6\nvar x0 : Bool = checkMonthnumberNumber(monthnum3 : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar x1 : Bool = checkMonthnumberNumber(monthnum3 : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 12\nvar x2 : Bool = checkMonthnumberNumber(monthnum3 : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether the given month number contains 30 days or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/763", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum difference between any two elements in a given array.\n *\n * >>> findMinDiff([1, 5, 3, 19, 18, 25], 6)\n * 1\n * >>> findMinDiff([4, 3, 2, 6], 4)\n * 1\n * >>> findMinDiff([30, 5, 20, 9], 4)\n * 4\n */\nfunc findMinDiff(arr : [Int], n : Int) -> Int {\n", "entry_point": "findMinDiff", "test": "\n\nvar arg00 : [Int] = [1, 5, 3, 19, 18, 25]\nvar arg01 : Int = 6\nvar x0 : Int = findMinDiff(arr : arg00, n : arg01)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 3, 2, 6]\nvar arg11 : Int = 4\nvar x1 : Int = findMinDiff(arr : arg10, n : arg11)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [30, 5, 20, 9]\nvar arg21 : Int = 4\nvar x2 : Int = findMinDiff(arr : arg20, n : arg21)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the minimum difference between any two elements in a given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/764", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count numeric values in a given string.\n *\n * >>> numberCtr(\"program2bedone\")\n * 1\n * >>> numberCtr(\"3wonders\")\n * 1\n * >>> numberCtr(\"123\")\n * 3\n */\nfunc numberCtr(str : String) -> Int {\n", "entry_point": "numberCtr", "test": "\n\nvar arg00 : String = #\"program2bedone\"#\nvar x0 : Int = numberCtr(str : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"3wonders\"#\nvar x1 : Int = numberCtr(str : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"123\"#\nvar x2 : Int = numberCtr(str : arg20)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count numeric values in a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/765", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find nth polite number.\n *\n * >>> isPolite(7)\n * 11\n * >>> isPolite(4)\n * 7\n * >>> isPolite(9)\n * 13\n */\nfunc isPolite(n : Int) -> Int {\n", "entry_point": "isPolite", "test": "\n\nvar arg00 : Int = 7\nvar x0 : Int = isPolite(n : arg00)\nvar v0 : Int = 11\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 4\nvar x1 : Int = isPolite(n : arg10)\nvar v1 : Int = 7\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 9\nvar x2 : Int = isPolite(n : arg20)\nvar v2 : Int = 13\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find nth polite number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/766", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to iterate over all pairs of consecutive items in a given list.\n *\n * >>> pairWise([1, 1, 2, 3, 3, 4, 4, 5])\n * [[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]\n * >>> pairWise([1, 5, 7, 9, 10])\n * [[1, 5], [5, 7], [7, 9], [9, 10]]\n * >>> pairWise([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]\n */\nfunc pairWise(l1 : [Int]) -> [[Int]] {\n", "entry_point": "pairWise", "test": "\n\nvar arg00 : [Int] = [1, 1, 2, 3, 3, 4, 4, 5]\nvar x0 : [[Int]] = pairWise(l1 : arg00)\nvar v0 : [[Int]] = [[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 5, 7, 9, 10]\nvar x1 : [[Int]] = pairWise(l1 : arg10)\nvar v1 : [[Int]] = [[1, 5], [5, 7], [7, 9], [9, 10]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar x2 : [[Int]] = pairWise(l1 : arg20)\nvar v2 : [[Int]] = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to iterate over all pairs of consecutive items in a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/767", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n *\n * >>> getPairsCount([1, 1, 1, 1], 4, 2)\n * 6\n * >>> getPairsCount([1, 5, 7, -1, 5], 5, 6)\n * 3\n * >>> getPairsCount([1, -2, 3], 3, 1)\n * 1\n */\nfunc getPairsCount(arr : [Int], n : Int, sum : Int) -> Int {\n", "entry_point": "getPairsCount", "test": "\n\nvar arg00 : [Int] = [1, 1, 1, 1]\nvar arg01 : Int = 4\nvar arg02 : Int = 2\nvar x0 : Int = getPairsCount(arr : arg00, n : arg01, sum : arg02)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 5, 7, -1, 5]\nvar arg11 : Int = 5\nvar arg12 : Int = 6\nvar x1 : Int = getPairsCount(arr : arg10, n : arg11, sum : arg12)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, -2, 3]\nvar arg21 : Int = 3\nvar arg22 : Int = 1\nvar x2 : Int = getPairsCount(arr : arg20, n : arg21, sum : arg22)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the number of pairs whose sum is equal to \u2018sum\u2019.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/768", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check for odd parity of a given number.\n *\n * >>> checkOddParity(13)\n * true\n * >>> checkOddParity(21)\n * true\n * >>> checkOddParity(18)\n * false\n */\nfunc checkOddParity(x : Int) -> Bool {\n", "entry_point": "checkOddParity", "test": "\n\nvar arg00 : Int = 13\nvar x0 : Bool = checkOddParity(x : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 21\nvar x1 : Bool = checkOddParity(x : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 18\nvar x2 : Bool = checkOddParity(x : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check for odd parity of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/769", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to get the difference between two lists.\n *\n * >>> diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])\n * [10, 20, 30, 15]\n * >>> diff([1, 2, 3, 4, 5], [6, 7, 1])\n * [2, 3, 4, 5, 6, 7]\n * >>> diff([1, 2, 3], [6, 7, 1])\n * [2, 3, 6, 7]\n */\nfunc diff(li1 : [Int], li2 : [Int]) -> [Int] {\n", "entry_point": "diff", "test": "\n\nvar arg00 : [Int] = [10, 15, 20, 25, 30, 35, 40]\nvar arg01 : [Int] = [25, 40, 35]\nvar x0 : [Int] = diff(li1 : arg00, li2 : arg01)\nvar v0 : [Int] = [10, 20, 30, 15]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5]\nvar arg11 : [Int] = [6, 7, 1]\nvar x1 : [Int] = diff(li1 : arg10, li2 : arg11)\nvar v1 : [Int] = [2, 3, 4, 5, 6, 7]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3]\nvar arg21 : [Int] = [6, 7, 1]\nvar x2 : [Int] = diff(li1 : arg20, li2 : arg21)\nvar v2 : [Int] = [2, 3, 6, 7]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to get the difference between two lists.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/770", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of fourth power of first n odd natural numbers.\n *\n * >>> oddNumSum(2)\n * 82\n * >>> oddNumSum(3)\n * 707\n * >>> oddNumSum(4)\n * 3108\n */\nfunc oddNumSum(n : Int) -> Int {\n", "entry_point": "oddNumSum", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = oddNumSum(n : arg00)\nvar v0 : Int = 82\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar x1 : Int = oddNumSum(n : arg10)\nvar v1 : Int = 707\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar x2 : Int = oddNumSum(n : arg20)\nvar v2 : Int = 3108\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of fourth power of first n odd natural numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/771", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given expression is balanced or not.\n *\n * >>> checkExpression(\"{()}[{}]\")\n * true\n * >>> checkExpression(\"{()}[{]\")\n * false\n * >>> checkExpression(\"{()}[{}][]({})\")\n * true\n */\nfunc checkExpression(exp : String) -> Bool {\n", "entry_point": "checkExpression", "test": "\n\nvar arg00 : String = #\"{()}[{}]\"#\nvar x0 : Bool = checkExpression(exp : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"{()}[{]\"#\nvar x1 : Bool = checkExpression(exp : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"{()}[{}][]({})\"#\nvar x2 : Bool = checkExpression(exp : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if the given expression is balanced or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/772", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all the words with k length in the given string.\n *\n * >>> removeLength(\"The person is most value tet\", 3)\n * \"person is most value\"\n * >>> removeLength(\"If you told me about this ok\", 4)\n * \"If you me about ok\"\n * >>> removeLength(\"Forces of darkeness is come into the play\", 4)\n * \"Forces of darkeness is the\"\n */\nfunc removeLength(testStr : String, k : Int) -> String {\n", "entry_point": "removeLength", "test": "\n\nvar arg00 : String = #\"The person is most value tet\"#\nvar arg01 : Int = 3\nvar x0 : String = removeLength(testStr : arg00, k : arg01)\nvar v0 : String = #\"person is most value\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"If you told me about this ok\"#\nvar arg11 : Int = 4\nvar x1 : String = removeLength(testStr : arg10, k : arg11)\nvar v1 : String = #\"If you me about ok\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Forces of darkeness is come into the play\"#\nvar arg21 : Int = 4\nvar x2 : String = removeLength(testStr : arg20, k : arg21)\nvar v2 : String = #\"Forces of darkeness is the\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove all the words with k length in the given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/773", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the occurrence and position of the substrings within a string.\n *\n * >>> occuranceSubstring(\"python programming, python language\", \"python\")\n * [\"python\", 0, 6]\n * >>> occuranceSubstring(\"python programming,programming language\", \"programming\")\n * [\"programming\", 7, 18]\n * >>> occuranceSubstring(\"python programming,programming language\", \"language\")\n * [\"language\", 31, 39]\n */\nfunc occuranceSubstring(text : String, pattern : String) -> [AnyHashable] {\n", "entry_point": "occuranceSubstring", "test": "\n\nvar arg00 : String = #\"python programming, python language\"#\nvar arg01 : String = #\"python\"#\nvar x0 : [AnyHashable] = occuranceSubstring(text : arg00, pattern : arg01)\nvar v0 : [AnyHashable] = [#\"python\"#, 0, 6]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"python programming,programming language\"#\nvar arg11 : String = #\"programming\"#\nvar x1 : [AnyHashable] = occuranceSubstring(text : arg10, pattern : arg11)\nvar v1 : [AnyHashable] = [#\"programming\"#, 7, 18]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"python programming,programming language\"#\nvar arg21 : String = #\"language\"#\nvar x2 : [AnyHashable] = occuranceSubstring(text : arg20, pattern : arg21)\nvar v2 : [AnyHashable] = [#\"language\"#, 31, 39]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the occurrence and position of the substrings within a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/774", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the string is a valid email address or not using regex.\n *\n * >>> checkEmail(\"ankitrai326@gmail.com\")\n * \"Valid Email\"\n * >>> checkEmail(\"my.ownsite@ourearth.org\")\n * \"Valid Email\"\n * >>> checkEmail(\"ankitaoie326.com\")\n * \"Invalid Email\"\n */\nfunc checkEmail(email : String) -> String {\n", "entry_point": "checkEmail", "test": "\n\nvar arg00 : String = #\"ankitrai326@gmail.com\"#\nvar x0 : String = checkEmail(email : arg00)\nvar v0 : String = #\"Valid Email\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"my.ownsite@ourearth.org\"#\nvar x1 : String = checkEmail(email : arg10)\nvar v1 : String = #\"Valid Email\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"ankitaoie326.com\"#\nvar x2 : String = checkEmail(email : arg20)\nvar v2 : String = #\"Invalid Email\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if the string is a valid email address or not using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/775", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether every odd index contains odd numbers of a given list.\n *\n * >>> oddPosition([2, 1, 4, 3, 6, 7, 6, 3])\n * true\n * >>> oddPosition([4, 1, 2])\n * true\n * >>> oddPosition([1, 2, 3])\n * false\n */\nfunc oddPosition(nums : [Int]) -> Bool {\n", "entry_point": "oddPosition", "test": "\n\nvar arg00 : [Int] = [2, 1, 4, 3, 6, 7, 6, 3]\nvar x0 : Bool = oddPosition(nums : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 1, 2]\nvar x1 : Bool = oddPosition(nums : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3]\nvar x2 : Bool = oddPosition(nums : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether every odd index contains odd numbers of a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/776", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count those characters which have vowels as their neighbors in the given string.\n *\n * >>> countVowels(\"bestinstareels\")\n * 7\n * >>> countVowels(\"partofthejourneyistheend\")\n * 12\n * >>> countVowels(\"amazonprime\")\n * 5\n */\nfunc countVowels(testStr : String) -> Int {\n", "entry_point": "countVowels", "test": "\n\nvar arg00 : String = #\"bestinstareels\"#\nvar x0 : Int = countVowels(testStr : arg00)\nvar v0 : Int = 7\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"partofthejourneyistheend\"#\nvar x1 : Int = countVowels(testStr : arg10)\nvar v1 : Int = 12\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"amazonprime\"#\nvar x2 : Int = countVowels(testStr : arg20)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count those characters which have vowels as their neighbors in the given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/777", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of non-repeated elements in a given array.\n *\n * >>> findSum([1, 2, 3, 1, 1, 4, 5, 6], 8)\n * 21\n * >>> findSum([1, 10, 9, 4, 2, 10, 10, 45, 4], 9)\n * 71\n * >>> findSum([12, 10, 9, 45, 2, 10, 10, 45, 10], 9)\n * 78\n */\nfunc findSum(arr : [Int], n : Int) -> Int {\n", "entry_point": "findSum", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 1, 1, 4, 5, 6]\nvar arg01 : Int = 8\nvar x0 : Int = findSum(arr : arg00, n : arg01)\nvar v0 : Int = 21\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 10, 9, 4, 2, 10, 10, 45, 4]\nvar arg11 : Int = 9\nvar x1 : Int = findSum(arr : arg10, n : arg11)\nvar v1 : Int = 71\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [12, 10, 9, 45, 2, 10, 10, 45, 10]\nvar arg21 : Int = 9\nvar x2 : Int = findSum(arr : arg20, n : arg21)\nvar v2 : Int = 78\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of non-repeated elements in a given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/778", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to pack consecutive duplicates of a given list elements into sublists.\n *\n * >>> packConsecutiveDuplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n * [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n * >>> packConsecutiveDuplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])\n * [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n * >>> packConsecutiveDuplicates([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"])\n * [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\n */\nfunc packConsecutiveDuplicates(list1 : [AnyHashable]) -> [[AnyHashable]] {\n", "entry_point": "packConsecutiveDuplicates", "test": "\n\nvar arg00 : [AnyHashable] = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nvar x0 : [[AnyHashable]] = packConsecutiveDuplicates(list1 : arg00)\nvar v0 : [[AnyHashable]] = [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]\nvar x1 : [[AnyHashable]] = packConsecutiveDuplicates(list1 : arg10)\nvar v1 : [[AnyHashable]] = [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [#\"a\"#, #\"a\"#, #\"b\"#, #\"c\"#, #\"d\"#, #\"d\"#]\nvar x2 : [[AnyHashable]] = packConsecutiveDuplicates(list1 : arg20)\nvar v2 : [[AnyHashable]] = [[#\"a\"#, #\"a\"#], [#\"b\"#], [#\"c\"#], [#\"d\"#, #\"d\"#]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/779", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the number of unique lists within a list.\n *\n * >>> uniqueSublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])\n * [[1, 3] : 2, [5, 7] : 2, [13, 15, 17] : 1, [9, 11] : 1]\n * >>> uniqueSublists([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]])\n * [[\"green\", \"orange\"] : 2, [\"black\"] : 1, [\"white\"] : 1]\n * >>> uniqueSublists([[1, 2], [3, 4], [4, 5], [6, 7]])\n * [[1, 2] : 1, [3, 4] : 1, [4, 5] : 1, [6, 7] : 1]\n */\nfunc uniqueSublists(list1 : [[AnyHashable]]) -> [[AnyHashable]: Int] {\n", "entry_point": "uniqueSublists", "test": "\n\nvar arg00 : [[AnyHashable]] = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]\nvar x0 : [[AnyHashable]: Int] = uniqueSublists(list1 : arg00)\nvar v0 : [[AnyHashable]: Int] = [[1, 3] : 2, [5, 7] : 2, [13, 15, 17] : 1, [9, 11] : 1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[#\"green\"#, #\"orange\"#], [#\"black\"#], [#\"green\"#, #\"orange\"#], [#\"white\"#]]\nvar x1 : [[AnyHashable]: Int] = uniqueSublists(list1 : arg10)\nvar v1 : [[AnyHashable]: Int] = [[#\"green\"#, #\"orange\"#] : 2, [#\"black\"#] : 1, [#\"white\"#] : 1]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[1, 2], [3, 4], [4, 5], [6, 7]]\nvar x2 : [[AnyHashable]: Int] = uniqueSublists(list1 : arg20)\nvar v2 : [[AnyHashable]: Int] = [[1, 2] : 1, [3, 4] : 1, [4, 5] : 1, [6, 7] : 1]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count the number of unique lists within a list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/780", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the combinations of sums with tuples in the given tuple list.\n *\n * >>> findCombinations([[2, 4], [6, 7], [5, 1], [6, 10]])\n * [[8, 11], [7, 5], [8, 14], [11, 8], [12, 17], [11, 11]]\n * >>> findCombinations([[3, 5], [7, 8], [6, 2], [7, 11]])\n * [[10, 13], [9, 7], [10, 16], [13, 10], [14, 19], [13, 13]]\n * >>> findCombinations([[4, 6], [8, 9], [7, 3], [8, 12]])\n * [[12, 15], [11, 9], [12, 18], [15, 12], [16, 21], [15, 15]]\n */\nfunc findCombinations(testList : [[Int]]) -> [[Int]] {\n", "entry_point": "findCombinations", "test": "\n\nvar arg00 : [[Int]] = [[2, 4], [6, 7], [5, 1], [6, 10]]\nvar x0 : [[Int]] = findCombinations(testList : arg00)\nvar v0 : [[Int]] = [[8, 11], [7, 5], [8, 14], [11, 8], [12, 17], [11, 11]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[3, 5], [7, 8], [6, 2], [7, 11]]\nvar x1 : [[Int]] = findCombinations(testList : arg10)\nvar v1 : [[Int]] = [[10, 13], [9, 7], [10, 16], [13, 10], [14, 19], [13, 13]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[4, 6], [8, 9], [7, 3], [8, 12]]\nvar x2 : [[Int]] = findCombinations(testList : arg20)\nvar v2 : [[Int]] = [[12, 15], [11, 9], [12, 18], [15, 12], [16, 21], [15, 15]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the combinations of sums with tuples in the given tuple list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/781", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the count of divisors is even or odd.\n *\n * >>> countDivisors(10)\n * \"Even\"\n * >>> countDivisors(100)\n * \"Odd\"\n * >>> countDivisors(125)\n * \"Even\"\n */\nfunc countDivisors(n : Int) -> String {\n", "entry_point": "countDivisors", "test": "\n\nvar arg00 : Int = 10\nvar x0 : String = countDivisors(n : arg00)\nvar v0 : String = #\"Even\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 100\nvar x1 : String = countDivisors(n : arg10)\nvar v1 : String = #\"Odd\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 125\nvar x2 : String = countDivisors(n : arg20)\nvar v2 : String = #\"Even\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the count of divisors is even or odd.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/782", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all odd length subarrays.\n *\n * >>> oddLengthSum([1, 2, 4])\n * 14\n * >>> oddLengthSum([1, 2, 1, 2])\n * 15\n * >>> oddLengthSum([1, 7])\n * 8\n */\nfunc oddLengthSum(arr : [Int]) -> Int {\n", "entry_point": "oddLengthSum", "test": "\n\nvar arg00 : [Int] = [1, 2, 4]\nvar x0 : Int = oddLengthSum(arr : arg00)\nvar v0 : Int = 14\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 1, 2]\nvar x1 : Int = oddLengthSum(arr : arg10)\nvar v1 : Int = 15\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 7]\nvar x2 : Int = oddLengthSum(arr : arg20)\nvar v2 : Int = 8\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of all odd length subarrays.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/783", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert rgb color to hsv color.\n *\n * >>> rgbToHsv(255, 255, 255)\n * [0, 0.0, 100.0]\n * >>> rgbToHsv(0, 215, 0)\n * [120.0, 100.0, 84.31372549019608]\n * >>> rgbToHsv(10, 215, 110)\n * [149.26829268292684, 95.34883720930233, 84.31372549019608]\n */\nfunc rgbToHsv(r : Int, g : Int, b : Int) -> [Double] {\n", "entry_point": "rgbToHsv", "test": "\n\nvar arg00 : Int = 255\nvar arg01 : Int = 255\nvar arg02 : Int = 255\nvar x0 : [Double] = rgbToHsv(r : arg00, g : arg01, b : arg02)\nvar v0 : [Double] = [0, 0.0, 100.0]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 0\nvar arg11 : Int = 215\nvar arg12 : Int = 0\nvar x1 : [Double] = rgbToHsv(r : arg10, g : arg11, b : arg12)\nvar v1 : [Double] = [120.0, 100.0, 84.31372549019608]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 10\nvar arg21 : Int = 215\nvar arg22 : Int = 110\nvar x2 : [Double] = rgbToHsv(r : arg20, g : arg21, b : arg22)\nvar v2 : [Double] = [149.26829268292684, 95.34883720930233, 84.31372549019608]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert rgb color to hsv color.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/784", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the product of first even and odd number of a given list.\n *\n * >>> mulEvenOdd([1, 3, 5, 7, 4, 1, 6, 8])\n * 4\n * >>> mulEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * 2\n * >>> mulEvenOdd([1, 5, 7, 9, 10])\n * 10\n */\nfunc mulEvenOdd(list1 : [Int]) -> Int {\n", "entry_point": "mulEvenOdd", "test": "\n\nvar arg00 : [Int] = [1, 3, 5, 7, 4, 1, 6, 8]\nvar x0 : Int = mulEvenOdd(list1 : arg00)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar x1 : Int = mulEvenOdd(list1 : arg10)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 5, 7, 9, 10]\nvar x2 : Int = mulEvenOdd(list1 : arg20)\nvar v2 : Int = 10\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the product of first even and odd number of a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/785", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert tuple string to integer tuple.\n *\n * >>> tupleStrInt(\"(7, 8, 9)\")\n * [7, 8, 9]\n * >>> tupleStrInt(\"(1, 2, 3)\")\n * [1, 2, 3]\n * >>> tupleStrInt(\"(4, 5, 6)\")\n * [4, 5, 6]\n */\nfunc tupleStrInt(testStr : String) -> [Int] {\n", "entry_point": "tupleStrInt", "test": "\n\nvar arg00 : String = #\"(7, 8, 9)\"#\nvar x0 : [Int] = tupleStrInt(testStr : arg00)\nvar v0 : [Int] = [7, 8, 9]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"(1, 2, 3)\"#\nvar x1 : [Int] = tupleStrInt(testStr : arg10)\nvar v1 : [Int] = [1, 2, 3]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"(4, 5, 6)\"#\nvar x2 : [Int] = tupleStrInt(testStr : arg20)\nvar v2 : [Int] = [4, 5, 6]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert tuple string to integer tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/786", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to locate the right insertion point for a specified value in sorted order.\n *\n * >>> rightInsertion([1, 2, 4, 5], 6)\n * 4\n * >>> rightInsertion([1, 2, 4, 5], 3)\n * 2\n * >>> rightInsertion([1, 2, 4, 5], 7)\n * 4\n */\nfunc rightInsertion(a : [Int], x : Int) -> Int {\n", "entry_point": "rightInsertion", "test": "\n\nvar arg00 : [Int] = [1, 2, 4, 5]\nvar arg01 : Int = 6\nvar x0 : Int = rightInsertion(a : arg00, x : arg01)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 4, 5]\nvar arg11 : Int = 3\nvar x1 : Int = rightInsertion(a : arg10, x : arg11)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 4, 5]\nvar arg21 : Int = 7\nvar x2 : Int = rightInsertion(a : arg20, x : arg21)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to locate the right insertion point for a specified value in sorted order.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/787", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by three 'b'.\n *\n * >>> textMatchThree(\"ac\")\n * \"Not matched!\"\n * >>> textMatchThree(\"dc\")\n * \"Not matched!\"\n * >>> textMatchThree(\"abbbba\")\n * \"Found a match!\"\n */\nfunc textMatchThree(text : String) -> String {\n", "entry_point": "textMatchThree", "test": "\n\nvar arg00 : String = #\"ac\"#\nvar x0 : String = textMatchThree(text : arg00)\nvar v0 : String = #\"Not matched!\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"dc\"#\nvar x1 : String = textMatchThree(text : arg10)\nvar v1 : String = #\"Not matched!\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"abbbba\"#\nvar x2 : String = textMatchThree(text : arg20)\nvar v2 : String = #\"Found a match!\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function that matches a string that has an a followed by three 'b'.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/788", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to create a new tuple from the given string and list.\n *\n * >>> newTuple([\"WEB\", \"is\"], \"best\")\n * [\"WEB\", \"is\", \"best\"]\n * >>> newTuple([\"We\", \"are\"], \"Developers\")\n * [\"We\", \"are\", \"Developers\"]\n * >>> newTuple([\"Part\", \"is\"], \"Wrong\")\n * [\"Part\", \"is\", \"Wrong\"]\n */\nfunc newTuple(testList : [String], testStr : String) -> [String] {\n", "entry_point": "newTuple", "test": "\n\nvar arg00 : [String] = [#\"WEB\"#, #\"is\"#]\nvar arg01 : String = #\"best\"#\nvar x0 : [String] = newTuple(testList : arg00, testStr : arg01)\nvar v0 : [String] = [#\"WEB\"#, #\"is\"#, #\"best\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"We\"#, #\"are\"#]\nvar arg11 : String = #\"Developers\"#\nvar x1 : [String] = newTuple(testList : arg10, testStr : arg11)\nvar v1 : [String] = [#\"We\"#, #\"are\"#, #\"Developers\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"Part\"#, #\"is\"#]\nvar arg21 : String = #\"Wrong\"#\nvar x2 : [String] = newTuple(testList : arg20, testStr : arg21)\nvar v2 : [String] = [#\"Part\"#, #\"is\"#, #\"Wrong\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to create a new tuple from the given string and list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/789", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the perimeter of a regular polygon.\n *\n * >>> perimeterPolygon(4, 20)\n * 80\n * >>> perimeterPolygon(10, 15)\n * 150\n * >>> perimeterPolygon(9, 7)\n * 63\n */\nfunc perimeterPolygon(s : Int, l : Int) -> Int {\n", "entry_point": "perimeterPolygon", "test": "\n\nvar arg00 : Int = 4\nvar arg01 : Int = 20\nvar x0 : Int = perimeterPolygon(s : arg00, l : arg01)\nvar v0 : Int = 80\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar arg11 : Int = 15\nvar x1 : Int = perimeterPolygon(s : arg10, l : arg11)\nvar v1 : Int = 150\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 9\nvar arg21 : Int = 7\nvar x2 : Int = perimeterPolygon(s : arg20, l : arg21)\nvar v2 : Int = 63\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate the perimeter of a regular polygon.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/790", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether every even index contains even numbers of a given list.\n *\n * >>> evenPosition([3, 2, 1])\n * false\n * >>> evenPosition([1, 2, 3])\n * false\n * >>> evenPosition([2, 1, 4])\n * true\n */\nfunc evenPosition(nums : [Int]) -> Bool {\n", "entry_point": "evenPosition", "test": "\n\nvar arg00 : [Int] = [3, 2, 1]\nvar x0 : Bool = evenPosition(nums : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3]\nvar x1 : Bool = evenPosition(nums : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 1, 4]\nvar x2 : Bool = evenPosition(nums : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether every even index contains even numbers of a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/791", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove the nested record from the given tuple.\n *\n * >>> removeNested([1, 5, 7, [4, 6], 10])\n * [1, 5, 7, 10]\n * >>> removeNested([2, 6, 8, [5, 7], 11])\n * [2, 6, 8, 11]\n * >>> removeNested([3, 7, 9, [6, 8], 12])\n * [3, 7, 9, 12]\n */\nfunc removeNested(testTup : [AnyHashable]) -> [Int] {\n", "entry_point": "removeNested", "test": "\n\nvar arg00 : [AnyHashable] = [1, 5, 7, [4, 6], 10]\nvar x0 : [Int] = removeNested(testTup : arg00)\nvar v0 : [Int] = [1, 5, 7, 10]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [2, 6, 8, [5, 7], 11]\nvar x1 : [Int] = removeNested(testTup : arg10)\nvar v1 : [Int] = [2, 6, 8, 11]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [3, 7, 9, [6, 8], 12]\nvar x2 : [Int] = removeNested(testTup : arg20)\nvar v2 : [Int] = [3, 7, 9, 12]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove the nested record from the given tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/792", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of lists in a given number of lists.\n *\n * >>> countList([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n * 4\n * >>> countList([[1, 2], [2, 3], [4, 5]])\n * 3\n * >>> countList([[1, 0], [2, 0]])\n * 2\n */\nfunc countList(inputList : [[Int]]) -> Int {\n", "entry_point": "countList", "test": "\n\nvar arg00 : [[Int]] = [[1, 3], [5, 7], [9, 11], [13, 15, 17]]\nvar x0 : Int = countList(inputList : arg00)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1, 2], [2, 3], [4, 5]]\nvar x1 : Int = countList(inputList : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[1, 0], [2, 0]]\nvar x2 : Int = countList(inputList : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the number of lists in a given number of lists.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/793", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the last position of an element in a sorted array.\n *\n * >>> last([1, 2, 3], 1, 3)\n * 0\n * >>> last([1, 1, 1, 2, 3, 4], 1, 6)\n * 2\n * >>> last([2, 3, 2, 3, 6, 8, 9], 3, 8)\n * 3\n */\nfunc last(arr : [Int], x : Int, n : Int) -> Int {\n", "entry_point": "last", "test": "\n\nvar arg00 : [Int] = [1, 2, 3]\nvar arg01 : Int = 1\nvar arg02 : Int = 3\nvar x0 : Int = last(arr : arg00, x : arg01, n : arg02)\nvar v0 : Int = 0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 1, 1, 2, 3, 4]\nvar arg11 : Int = 1\nvar arg12 : Int = 6\nvar x1 : Int = last(arr : arg10, x : arg11, n : arg12)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 3, 2, 3, 6, 8, 9]\nvar arg21 : Int = 3\nvar arg22 : Int = 8\nvar x2 : Int = last(arr : arg20, x : arg21, n : arg22)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the last position of an element in a sorted array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/794", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n *\n * >>> textStartaEndb(\"aabbbb\")\n * \"Found a match!\"\n * >>> textStartaEndb(\"aabAbbbc\")\n * \"Not matched!\"\n * >>> textStartaEndb(\"accddbbjjj\")\n * \"Not matched!\"\n */\nfunc textStartaEndb(text : String) -> String {\n", "entry_point": "textStartaEndb", "test": "\n\nvar arg00 : String = #\"aabbbb\"#\nvar x0 : String = textStartaEndb(text : arg00)\nvar v0 : String = #\"Found a match!\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"aabAbbbc\"#\nvar x1 : String = textStartaEndb(text : arg10)\nvar v1 : String = #\"Not matched!\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"accddbbjjj\"#\nvar x2 : String = textStartaEndb(text : arg20)\nvar v2 : String = #\"Not matched!\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/795", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n *\n * >>> cheapItems([[\"name\" : \"Item-1\", \"price\" : 101.1], [\"name\" : \"Item-2\", \"price\" : 555.22]], 1)\n * [[\"name\" : \"Item-1\", \"price\" : 101.1]]\n * >>> cheapItems([[\"name\" : \"Item-1\", \"price\" : 101.1], [\"name\" : \"Item-2\", \"price\" : 555.22]], 2)\n * [[\"name\" : \"Item-1\", \"price\" : 101.1], [\"name\" : \"Item-2\", \"price\" : 555.22]]\n * >>> cheapItems([[\"name\" : \"Item-1\", \"price\" : 101.1], [\"name\" : \"Item-2\", \"price\" : 555.22], [\"name\" : \"Item-3\", \"price\" : 45.09], [\"name\" : \"Item-4\", \"price\" : 22.75]], 1)\n * [[\"name\" : \"Item-4\", \"price\" : 22.75]]\n */\nfunc cheapItems(items : [[String: AnyHashable]], n : Int) -> [[String: AnyHashable]] {\n", "entry_point": "cheapItems", "test": "\n\nvar arg00 : [[String: AnyHashable]] = [[#\"name\"# : #\"Item-1\"#, #\"price\"# : 101.1], [#\"name\"# : #\"Item-2\"#, #\"price\"# : 555.22]]\nvar arg01 : Int = 1\nvar x0 : [[String: AnyHashable]] = cheapItems(items : arg00, n : arg01)\nvar v0 : [[String: AnyHashable]] = [[#\"name\"# : #\"Item-1\"#, #\"price\"# : 101.1]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[String: AnyHashable]] = [[#\"name\"# : #\"Item-1\"#, #\"price\"# : 101.1], [#\"name\"# : #\"Item-2\"#, #\"price\"# : 555.22]]\nvar arg11 : Int = 2\nvar x1 : [[String: AnyHashable]] = cheapItems(items : arg10, n : arg11)\nvar v1 : [[String: AnyHashable]] = [[#\"name\"# : #\"Item-1\"#, #\"price\"# : 101.1], [#\"name\"# : #\"Item-2\"#, #\"price\"# : 555.22]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[String: AnyHashable]] = [[#\"name\"# : #\"Item-1\"#, #\"price\"# : 101.1], [#\"name\"# : #\"Item-2\"#, #\"price\"# : 555.22], [#\"name\"# : #\"Item-3\"#, #\"price\"# : 45.09], [#\"name\"# : #\"Item-4\"#, #\"price\"# : 22.75]]\nvar arg21 : Int = 1\nvar x2 : [[String: AnyHashable]] = cheapItems(items : arg20, n : arg21)\nvar v2 : [[String: AnyHashable]] = [[#\"name\"# : #\"Item-4\"#, #\"price\"# : 22.75]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/796", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write function to find the sum of all items in the given dictionary.\n *\n * >>> returnSum([\"a\" : 100, \"b\" : 200, \"c\" : 300])\n * 600\n * >>> returnSum([\"a\" : 25, \"b\" : 18, \"c\" : 45])\n * 88\n * >>> returnSum([\"a\" : 36, \"b\" : 39, \"c\" : 49])\n * 124\n */\nfunc returnSum(dict : [String: Int]) -> Int {\n", "entry_point": "returnSum", "test": "\n\nvar arg00 : [String: Int] = [#\"a\"# : 100, #\"b\"# : 200, #\"c\"# : 300]\nvar x0 : Int = returnSum(dict : arg00)\nvar v0 : Int = 600\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String: Int] = [#\"a\"# : 25, #\"b\"# : 18, #\"c\"# : 45]\nvar x1 : Int = returnSum(dict : arg10)\nvar v1 : Int = 88\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String: Int] = [#\"a\"# : 36, #\"b\"# : 39, #\"c\"# : 49]\nvar x2 : Int = returnSum(dict : arg20)\nvar v2 : Int = 124\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write function to find the sum of all items in the given dictionary.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/797", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all odd natural numbers within the range l and r.\n *\n * >>> sumInRange(2, 5)\n * 8\n * >>> sumInRange(5, 7)\n * 12\n * >>> sumInRange(7, 13)\n * 40\n */\nfunc sumInRange(l : Int, r : Int) -> Int {\n", "entry_point": "sumInRange", "test": "\n\nvar arg00 : Int = 2\nvar arg01 : Int = 5\nvar x0 : Int = sumInRange(l : arg00, r : arg01)\nvar v0 : Int = 8\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar arg11 : Int = 7\nvar x1 : Int = sumInRange(l : arg10, r : arg11)\nvar v1 : Int = 12\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 7\nvar arg21 : Int = 13\nvar x2 : Int = sumInRange(l : arg20, r : arg21)\nvar v2 : Int = 40\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of all odd natural numbers within the range l and r.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/798", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of an array.\n *\n * >>> Sum([1, 2, 3])\n * 6\n * >>> Sum([15, 12, 13, 10])\n * 50\n * >>> Sum([0, 1, 2])\n * 3\n */\nfunc Sum(arr : [Int]) -> Int {\n", "entry_point": "Sum", "test": "\n\nvar arg00 : [Int] = [1, 2, 3]\nvar x0 : Int = Sum(arr : arg00)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [15, 12, 13, 10]\nvar x1 : Int = Sum(arr : arg10)\nvar v1 : Int = 50\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [0, 1, 2]\nvar x2 : Int = Sum(arr : arg20)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of an array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/799", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to left rotate the bits of a given number.\n *\n * >>> leftRotate(16, 2)\n * 64\n * >>> leftRotate(10, 2)\n * 40\n * >>> leftRotate(99, 3)\n * 792\n */\nfunc leftRotate(n : Int, d : Int) -> Int {\n", "entry_point": "leftRotate", "test": "\n\nvar arg00 : Int = 16\nvar arg01 : Int = 2\nvar x0 : Int = leftRotate(n : arg00, d : arg01)\nvar v0 : Int = 64\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar arg11 : Int = 2\nvar x1 : Int = leftRotate(n : arg10, d : arg11)\nvar v1 : Int = 40\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 99\nvar arg21 : Int = 3\nvar x2 : Int = leftRotate(n : arg20, d : arg21)\nvar v2 : Int = 792\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to left rotate the bits of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/800", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all whitespaces from a string.\n *\n * >>> removeAllSpaces(\"python  program\")\n * \"pythonprogram\"\n * >>> removeAllSpaces(\"python   programming    language\")\n * \"pythonprogramminglanguage\"\n * >>> removeAllSpaces(\"python                     program\")\n * \"pythonprogram\"\n */\nfunc removeAllSpaces(text : String) -> String {\n", "entry_point": "removeAllSpaces", "test": "\n\nvar arg00 : String = #\"python  program\"#\nvar x0 : String = removeAllSpaces(text : arg00)\nvar v0 : String = #\"pythonprogram\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"python   programming    language\"#\nvar x1 : String = removeAllSpaces(text : arg10)\nvar v1 : String = #\"pythonprogramminglanguage\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"python                     program\"#\nvar x2 : String = removeAllSpaces(text : arg20)\nvar v2 : String = #\"pythonprogram\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove all whitespaces from a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/801", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of equal numbers from three given integers.\n *\n * >>> testThreeEqual(1, 1, 1)\n * 3\n * >>> testThreeEqual(-1, -2, -3)\n * 0\n * >>> testThreeEqual(1, 2, 2)\n * 2\n */\nfunc testThreeEqual(x : Int, y : Int, z : Int) -> Int {\n", "entry_point": "testThreeEqual", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = 1\nvar arg02 : Int = 1\nvar x0 : Int = testThreeEqual(x : arg00, y : arg01, z : arg02)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = -1\nvar arg11 : Int = -2\nvar arg12 : Int = -3\nvar x1 : Int = testThreeEqual(x : arg10, y : arg11, z : arg12)\nvar v1 : Int = 0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = 2\nvar arg22 : Int = 2\nvar x2 : Int = testThreeEqual(x : arg20, y : arg21, z : arg22)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the number of equal numbers from three given integers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/802", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of rotations required to generate a sorted array.\n *\n * >>> countRotation([3, 2, 1], 3)\n * 1\n * >>> countRotation([4, 5, 1, 2, 3], 5)\n * 2\n * >>> countRotation([7, 8, 9, 1, 2, 3], 6)\n * 3\n */\nfunc countRotation(arr : [Int], n : Int) -> Int {\n", "entry_point": "countRotation", "test": "\n\nvar arg00 : [Int] = [3, 2, 1]\nvar arg01 : Int = 3\nvar x0 : Int = countRotation(arr : arg00, n : arg01)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 5, 1, 2, 3]\nvar arg11 : Int = 5\nvar x1 : Int = countRotation(arr : arg10, n : arg11)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [7, 8, 9, 1, 2, 3]\nvar arg21 : Int = 6\nvar x2 : Int = countRotation(arr : arg20, n : arg21)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the number of rotations required to generate a sorted array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/803", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given number is a perfect square or not.\n *\n * >>> isPerfectSquare(10)\n * false\n * >>> isPerfectSquare(36)\n * true\n * >>> isPerfectSquare(14)\n * false\n */\nfunc isPerfectSquare(n : Int) -> Bool {\n", "entry_point": "isPerfectSquare", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Bool = isPerfectSquare(n : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 36\nvar x1 : Bool = isPerfectSquare(n : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 14\nvar x2 : Bool = isPerfectSquare(n : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the given number is a perfect square or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/804", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the product of numbers is even or not.\n *\n * >>> isProductEven([1, 2, 3], 3)\n * true\n * >>> isProductEven([1, 2, 1, 4], 4)\n * true\n * >>> isProductEven([1, 1], 2)\n * false\n */\nfunc isProductEven(arr : [Int], n : Int) -> Bool {\n", "entry_point": "isProductEven", "test": "\n\nvar arg00 : [Int] = [1, 2, 3]\nvar arg01 : Int = 3\nvar x0 : Bool = isProductEven(arr : arg00, n : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 1, 4]\nvar arg11 : Int = 4\nvar x1 : Bool = isProductEven(arr : arg10, n : arg11)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 1]\nvar arg21 : Int = 2\nvar x2 : Bool = isProductEven(arr : arg20, n : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the product of numbers is even or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/805", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the list in a list of lists whose sum of elements is the highest.\n *\n * >>> maxSumList([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n * [10, 11, 12]\n * >>> maxSumList([[3, 2, 1], [6, 5, 4], [12, 11, 10]])\n * [12, 11, 10]\n * >>> maxSumList([[2, 3, 1]])\n * [2, 3, 1]\n */\nfunc maxSumList(lists : [[Int]]) -> [Int] {\n", "entry_point": "maxSumList", "test": "\n\nvar arg00 : [[Int]] = [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]\nvar x0 : [Int] = maxSumList(lists : arg00)\nvar v0 : [Int] = [10, 11, 12]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[3, 2, 1], [6, 5, 4], [12, 11, 10]]\nvar x1 : [Int] = maxSumList(lists : arg10)\nvar v1 : [Int] = [12, 11, 10]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[2, 3, 1]]\nvar x2 : [Int] = maxSumList(lists : arg20)\nvar v2 : [Int] = [2, 3, 1]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the list in a list of lists whose sum of elements is the highest.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/806", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find maximum run of uppercase characters in the given string.\n *\n * >>> maxRunUppercase(\"GeMKSForGERksISBESt\")\n * 5\n * >>> maxRunUppercase(\"PrECIOusMOVemENTSYT\")\n * 6\n * >>> maxRunUppercase(\"GooGLEFluTTER\")\n * 4\n */\nfunc maxRunUppercase(testStr : String) -> Int {\n", "entry_point": "maxRunUppercase", "test": "\n\nvar arg00 : String = #\"GeMKSForGERksISBESt\"#\nvar x0 : Int = maxRunUppercase(testStr : arg00)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"PrECIOusMOVemENTSYT\"#\nvar x1 : Int = maxRunUppercase(testStr : arg10)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"GooGLEFluTTER\"#\nvar x2 : Int = maxRunUppercase(testStr : arg20)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find maximum run of uppercase characters in the given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/807", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first odd number in a given list of numbers.\n *\n * >>> firstOdd([1, 3, 5])\n * 1\n * >>> firstOdd([2, 4, 1, 3])\n * 1\n */\nfunc firstOdd(nums : [Int]) -> Int {\n", "entry_point": "firstOdd", "test": "\n\nvar arg00 : [Int] = [1, 3, 5]\nvar x0 : Int = firstOdd(nums : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 4, 1, 3]\nvar x1 : Int = firstOdd(nums : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\n", "description": "Write a Swift function to find the first odd number in a given list of numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/808", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given tuples contain the k or not.\n *\n * >>> checkK([10, 4, 5, 6, 8], 6)\n * true\n * >>> checkK([1, 2, 3, 4, 5, 6], 7)\n * false\n * >>> checkK([7, 8, 9, 44, 11, 12], 11)\n * true\n */\nfunc checkK(testTup : [Int], k : Int) -> Bool {\n", "entry_point": "checkK", "test": "\n\nvar arg00 : [Int] = [10, 4, 5, 6, 8]\nvar arg01 : Int = 6\nvar x0 : Bool = checkK(testTup : arg00, k : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5, 6]\nvar arg11 : Int = 7\nvar x1 : Bool = checkK(testTup : arg10, k : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [7, 8, 9, 44, 11, 12]\nvar arg21 : Int = 11\nvar x2 : Bool = checkK(testTup : arg20, k : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if the given tuples contain the k or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/809", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n *\n * >>> checkSmaller([1, 2, 3], [2, 3, 4])\n * false\n * >>> checkSmaller([4, 5, 6], [3, 4, 5])\n * true\n * >>> checkSmaller([11, 12, 13], [10, 11, 12])\n * true\n */\nfunc checkSmaller(testTup1 : [Int], testTup2 : [Int]) -> Bool {\n", "entry_point": "checkSmaller", "test": "\n\nvar arg00 : [Int] = [1, 2, 3]\nvar arg01 : [Int] = [2, 3, 4]\nvar x0 : Bool = checkSmaller(testTup1 : arg00, testTup2 : arg01)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 5, 6]\nvar arg11 : [Int] = [3, 4, 5]\nvar x1 : Bool = checkSmaller(testTup1 : arg10, testTup2 : arg11)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [11, 12, 13]\nvar arg21 : [Int] = [10, 11, 12]\nvar x2 : Bool = checkSmaller(testTup1 : arg20, testTup2 : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/810", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to iterate over elements repeating each as many times as its count.\n *\n * >>> countVariable(4, 2, 0, -2)\n * [\"p\", \"p\", \"p\", \"p\", \"q\", \"q\"]\n * >>> countVariable(0, 1, 2, 3)\n * [\"q\", \"r\", \"r\", \"s\", \"s\", \"s\"]\n * >>> countVariable(11, 15, 12, 23)\n * [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\"]\n */\nfunc countVariable(a : Int, b : Int, c : Int, d : Int) -> [String] {\n", "entry_point": "countVariable", "test": "\n\nvar arg00 : Int = 4\nvar arg01 : Int = 2\nvar arg02 : Int = 0\nvar arg03 : Int = -2\nvar x0 : [String] = countVariable(a : arg00, b : arg01, c : arg02, d : arg03)\nvar v0 : [String] = [#\"p\"#, #\"p\"#, #\"p\"#, #\"p\"#, #\"q\"#, #\"q\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 0\nvar arg11 : Int = 1\nvar arg12 : Int = 2\nvar arg13 : Int = 3\nvar x1 : [String] = countVariable(a : arg10, b : arg11, c : arg12, d : arg13)\nvar v1 : [String] = [#\"q\"#, #\"r\"#, #\"r\"#, #\"s\"#, #\"s\"#, #\"s\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 11\nvar arg21 : Int = 15\nvar arg22 : Int = 12\nvar arg23 : Int = 23\nvar x2 : [String] = countVariable(a : arg20, b : arg21, c : arg22, d : arg23)\nvar v2 : [String] = [#\"p\"#, #\"p\"#, #\"p\"#, #\"p\"#, #\"p\"#, #\"p\"#, #\"p\"#, #\"p\"#, #\"p\"#, #\"p\"#, #\"p\"#, #\"q\"#, #\"q\"#, #\"q\"#, #\"q\"#, #\"q\"#, #\"q\"#, #\"q\"#, #\"q\"#, #\"q\"#, #\"q\"#, #\"q\"#, #\"q\"#, #\"q\"#, #\"q\"#, #\"q\"#, #\"r\"#, #\"r\"#, #\"r\"#, #\"r\"#, #\"r\"#, #\"r\"#, #\"r\"#, #\"r\"#, #\"r\"#, #\"r\"#, #\"r\"#, #\"r\"#, #\"s\"#, #\"s\"#, #\"s\"#, #\"s\"#, #\"s\"#, #\"s\"#, #\"s\"#, #\"s\"#, #\"s\"#, #\"s\"#, #\"s\"#, #\"s\"#, #\"s\"#, #\"s\"#, #\"s\"#, #\"s\"#, #\"s\"#, #\"s\"#, #\"s\"#, #\"s\"#, #\"s\"#, #\"s\"#, #\"s\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to iterate over elements repeating each as many times as its count.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/811", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if two lists of tuples are identical or not.\n *\n * >>> checkIdentical([[10, 4], [2, 5]], [[10, 4], [2, 5]])\n * true\n * >>> checkIdentical([[1, 2], [3, 7]], [[12, 14], [12, 45]])\n * false\n * >>> checkIdentical([[2, 14], [12, 25]], [[2, 14], [12, 25]])\n * true\n */\nfunc checkIdentical(testList1 : [[Int]], testList2 : [[Int]]) -> Bool {\n", "entry_point": "checkIdentical", "test": "\n\nvar arg00 : [[Int]] = [[10, 4], [2, 5]]\nvar arg01 : [[Int]] = [[10, 4], [2, 5]]\nvar x0 : Bool = checkIdentical(testList1 : arg00, testList2 : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1, 2], [3, 7]]\nvar arg11 : [[Int]] = [[12, 14], [12, 45]]\nvar x1 : Bool = checkIdentical(testList1 : arg10, testList2 : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[2, 14], [12, 25]]\nvar arg21 : [[Int]] = [[2, 14], [12, 25]]\nvar x2 : Bool = checkIdentical(testList1 : arg20, testList2 : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if two lists of tuples are identical or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/812", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to abbreviate 'road' as 'rd.' in a given string.\n *\n * >>> roadRd(\"ravipadu Road\")\n * \"ravipadu Rd.\"\n * >>> roadRd(\"palnadu Road\")\n * \"palnadu Rd.\"\n * >>> roadRd(\"eshwar enclave Road\")\n * \"eshwar enclave Rd.\"\n */\nfunc roadRd(street : String) -> String {\n", "entry_point": "roadRd", "test": "\n\nvar arg00 : String = #\"ravipadu Road\"#\nvar x0 : String = roadRd(street : arg00)\nvar v0 : String = #\"ravipadu Rd.\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"palnadu Road\"#\nvar x1 : String = roadRd(street : arg10)\nvar v1 : String = #\"palnadu Rd.\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"eshwar enclave Road\"#\nvar x2 : String = roadRd(street : arg20)\nvar v2 : String = #\"eshwar enclave Rd.\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to abbreviate 'road' as 'rd.' in a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/813", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find length of the string.\n *\n * >>> stringLength(\"python\")\n * 6\n * >>> stringLength(\"program\")\n * 7\n * >>> stringLength(\"language\")\n * 8\n */\nfunc stringLength(str1 : String) -> Int {\n", "entry_point": "stringLength", "test": "\n\nvar arg00 : String = #\"python\"#\nvar x0 : Int = stringLength(str1 : arg00)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"program\"#\nvar x1 : Int = stringLength(str1 : arg10)\nvar v1 : Int = 7\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"language\"#\nvar x2 : Int = stringLength(str1 : arg20)\nvar v2 : Int = 8\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find length of the string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/814", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a rombus.\n *\n * >>> rombusArea(10, 20)\n * 100\n * >>> rombusArea(10, 5)\n * 25\n * >>> rombusArea(4, 2)\n * 4\n */\nfunc rombusArea(p : Int, q : Int) -> Int {\n", "entry_point": "rombusArea", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 20\nvar x0 : Int = rombusArea(p : arg00, q : arg01)\nvar v0 : Int = 100\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar arg11 : Int = 5\nvar x1 : Int = rombusArea(p : arg10, q : arg11)\nvar v1 : Int = 25\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar arg21 : Int = 2\nvar x2 : Int = rombusArea(p : arg20, q : arg21)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the area of a rombus.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/815", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n *\n * >>> sortByDnf([1, 2, 0, 1, 0, 1, 2, 1, 1], 9)\n * [0, 0, 1, 1, 1, 1, 1, 2, 2]\n * >>> sortByDnf([1, 0, 0, 1, 2, 1, 2, 2, 1, 0], 10)\n * [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n * >>> sortByDnf([2, 2, 1, 0, 0, 0, 1, 1, 2, 1], 10)\n * [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n */\nfunc sortByDnf(arr : [Int], n : Int) -> [Int] {\n", "entry_point": "sortByDnf", "test": "\n\nvar arg00 : [Int] = [1, 2, 0, 1, 0, 1, 2, 1, 1]\nvar arg01 : Int = 9\nvar x0 : [Int] = sortByDnf(arr : arg00, n : arg01)\nvar v0 : [Int] = [0, 0, 1, 1, 1, 1, 1, 2, 2]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 0, 0, 1, 2, 1, 2, 2, 1, 0]\nvar arg11 : Int = 10\nvar x1 : [Int] = sortByDnf(arr : arg10, n : arg11)\nvar v1 : [Int] = [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 2, 1, 0, 0, 0, 1, 1, 2, 1]\nvar arg21 : Int = 10\nvar x2 : [Int] = sortByDnf(arr : arg20, n : arg21)\nvar v2 : [Int] = [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/816", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to clear the values of the given tuples.\n *\n * >>> clearTuple([1, 5, 3, 6, 8])\n * []\n * >>> clearTuple([2, 1, 4, 5, 6])\n * []\n * >>> clearTuple([3, 2, 5, 6, 8])\n * []\n */\nfunc clearTuple(testTup : [Int]) -> [AnyHashable] {\n", "entry_point": "clearTuple", "test": "\n\nvar arg00 : [Int] = [1, 5, 3, 6, 8]\nvar x0 : [AnyHashable] = clearTuple(testTup : arg00)\nvar v0 : [AnyHashable] = []\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 1, 4, 5, 6]\nvar x1 : [AnyHashable] = clearTuple(testTup : arg10)\nvar v1 : [AnyHashable] = []\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3, 2, 5, 6, 8]\nvar x2 : [AnyHashable] = clearTuple(testTup : arg20)\nvar v2 : [AnyHashable] = []\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to clear the values of the given tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/817", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\n *\n * >>> divOfNums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 19, 13)\n * [19, 65, 57, 39, 152, 190]\n * >>> divOfNums([1, 2, 3, 5, 7, 8, 10], 2, 5)\n * [2, 5, 8, 10]\n * >>> divOfNums([10, 15, 14, 13, 18, 12, 20], 10, 5)\n * [10, 15, 20]\n */\nfunc divOfNums(nums : [Int], m : Int, n : Int) -> [Int] {\n", "entry_point": "divOfNums", "test": "\n\nvar arg00 : [Int] = [19, 65, 57, 39, 152, 639, 121, 44, 90, 190]\nvar arg01 : Int = 19\nvar arg02 : Int = 13\nvar x0 : [Int] = divOfNums(nums : arg00, m : arg01, n : arg02)\nvar v0 : [Int] = [19, 65, 57, 39, 152, 190]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 5, 7, 8, 10]\nvar arg11 : Int = 2\nvar arg12 : Int = 5\nvar x1 : [Int] = divOfNums(nums : arg10, m : arg11, n : arg12)\nvar v1 : [Int] = [2, 5, 8, 10]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [10, 15, 14, 13, 18, 12, 20]\nvar arg21 : Int = 10\nvar arg22 : Int = 5\nvar x2 : [Int] = divOfNums(nums : arg20, m : arg21, n : arg22)\nvar v2 : [Int] = [10, 15, 20]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/818", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count lower case letters in a given string.\n *\n * >>> lowerCtr(\"abc\")\n * 3\n * >>> lowerCtr(\"string\")\n * 6\n * >>> lowerCtr(\"Python\")\n * 5\n */\nfunc lowerCtr(str : String) -> Int {\n", "entry_point": "lowerCtr", "test": "\n\nvar arg00 : String = #\"abc\"#\nvar x0 : Int = lowerCtr(str : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"string\"#\nvar x1 : Int = lowerCtr(str : arg10)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Python\"#\nvar x2 : Int = lowerCtr(str : arg20)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count lower case letters in a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/819", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n *\n * >>> countDuplic([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])\n * [[1, 2, 4, 5], [1, 3, 3, 4]]\n * >>> countDuplic([2, 2, 3, 1, 2, 6, 7, 9])\n * [[2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1]]\n * >>> countDuplic([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])\n * [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]\n */\nfunc countDuplic(lists : [Int]) -> [[Int]] {\n", "entry_point": "countDuplic", "test": "\n\nvar arg00 : [Int] = [1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5]\nvar x0 : [[Int]] = countDuplic(lists : arg00)\nvar v0 : [[Int]] = [[1, 2, 4, 5], [1, 3, 3, 4]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 2, 3, 1, 2, 6, 7, 9]\nvar x1 : [[Int]] = countDuplic(lists : arg10)\nvar v1 : [[Int]] = [[2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12]\nvar x2 : [[Int]] = countDuplic(lists : arg20)\nvar v2 : [[Int]] = [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/820", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month number contains 28 days or not.\n *\n * >>> checkMonthnumNumber(2)\n * true\n * >>> checkMonthnumNumber(1)\n * false\n * >>> checkMonthnumNumber(3)\n * false\n */\nfunc checkMonthnumNumber(monthnum1 : Int) -> Bool {\n", "entry_point": "checkMonthnumNumber", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Bool = checkMonthnumNumber(monthnum1 : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar x1 : Bool = checkMonthnumNumber(monthnum1 : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 3\nvar x2 : Bool = checkMonthnumNumber(monthnum1 : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether the given month number contains 28 days or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/821", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to merge two dictionaries into a single expression.\n *\n * >>> mergeDictionaries([\"R\" : \"Red\", \"B\" : \"Black\", \"P\" : \"Pink\"], [\"G\" : \"Green\", \"W\" : \"White\"])\n * [\"B\" : \"Black\", \"R\" : \"Red\", \"P\" : \"Pink\", \"G\" : \"Green\", \"W\" : \"White\"]\n * >>> mergeDictionaries([\"R\" : \"Red\", \"B\" : \"Black\", \"P\" : \"Pink\"], [\"O\" : \"Orange\", \"W\" : \"White\", \"B\" : \"Black\"])\n * [\"O\" : \"Orange\", \"P\" : \"Pink\", \"B\" : \"Black\", \"W\" : \"White\", \"R\" : \"Red\"]\n * >>> mergeDictionaries([\"G\" : \"Green\", \"W\" : \"White\"], [\"O\" : \"Orange\", \"W\" : \"White\", \"B\" : \"Black\"])\n * [\"W\" : \"White\", \"O\" : \"Orange\", \"G\" : \"Green\", \"B\" : \"Black\"]\n */\nfunc mergeDictionaries(dict1 : [String: String], dict2 : [String: String]) -> [String: String] {\n", "entry_point": "mergeDictionaries", "test": "\n\nvar arg00 : [String: String] = [#\"R\"# : #\"Red\"#, #\"B\"# : #\"Black\"#, #\"P\"# : #\"Pink\"#]\nvar arg01 : [String: String] = [#\"G\"# : #\"Green\"#, #\"W\"# : #\"White\"#]\nvar x0 : [String: String] = mergeDictionaries(dict1 : arg00, dict2 : arg01)\nvar v0 : [String: String] = [#\"B\"# : #\"Black\"#, #\"R\"# : #\"Red\"#, #\"P\"# : #\"Pink\"#, #\"G\"# : #\"Green\"#, #\"W\"# : #\"White\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String: String] = [#\"R\"# : #\"Red\"#, #\"B\"# : #\"Black\"#, #\"P\"# : #\"Pink\"#]\nvar arg11 : [String: String] = [#\"O\"# : #\"Orange\"#, #\"W\"# : #\"White\"#, #\"B\"# : #\"Black\"#]\nvar x1 : [String: String] = mergeDictionaries(dict1 : arg10, dict2 : arg11)\nvar v1 : [String: String] = [#\"O\"# : #\"Orange\"#, #\"P\"# : #\"Pink\"#, #\"B\"# : #\"Black\"#, #\"W\"# : #\"White\"#, #\"R\"# : #\"Red\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String: String] = [#\"G\"# : #\"Green\"#, #\"W\"# : #\"White\"#]\nvar arg21 : [String: String] = [#\"O\"# : #\"Orange\"#, #\"W\"# : #\"White\"#, #\"B\"# : #\"Black\"#]\nvar x2 : [String: String] = mergeDictionaries(dict1 : arg20, dict2 : arg21)\nvar v2 : [String: String] = [#\"W\"# : #\"White\"#, #\"O\"# : #\"Orange\"#, #\"G\"# : #\"Green\"#, #\"B\"# : #\"Black\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to merge two dictionaries into a single expression.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/822", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to return true if the password is valid.\n *\n * >>> passValidity(\"password\")\n * false\n * >>> passValidity(\"Password@10\")\n * true\n * >>> passValidity(\"password@10\")\n * false\n */\nfunc passValidity(p : String) -> Bool {\n", "entry_point": "passValidity", "test": "\n\nvar arg00 : String = #\"password\"#\nvar x0 : Bool = passValidity(p : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Password@10\"#\nvar x1 : Bool = passValidity(p : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"password@10\"#\nvar x2 : Bool = passValidity(p : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to return true if the password is valid.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/823", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given string starts with a substring using regex.\n *\n * >>> checkSubstring(\"dreams for dreams makes life fun\", \"makes\")\n * \"string doesnt start with the given substring\"\n * >>> checkSubstring(\"Hi there how are you Hi alex\", \"Hi\")\n * \"string starts with the given substring\"\n * >>> checkSubstring(\"Its been a long day\", \"been\")\n * \"string doesnt start with the given substring\"\n */\nfunc checkSubstring(string : String, sample : String) -> String {\n", "entry_point": "checkSubstring", "test": "\n\nvar arg00 : String = #\"dreams for dreams makes life fun\"#\nvar arg01 : String = #\"makes\"#\nvar x0 : String = checkSubstring(string : arg00, sample : arg01)\nvar v0 : String = #\"string doesnt start with the given substring\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"Hi there how are you Hi alex\"#\nvar arg11 : String = #\"Hi\"#\nvar x1 : String = checkSubstring(string : arg10, sample : arg11)\nvar v1 : String = #\"string starts with the given substring\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"Its been a long day\"#\nvar arg21 : String = #\"been\"#\nvar x2 : String = checkSubstring(string : arg20, sample : arg21)\nvar v2 : String = #\"string doesnt start with the given substring\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if the given string starts with a substring using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/824", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove even numbers from a given list.\n *\n * >>> removeEven([1, 3, 5, 2])\n * [1, 3, 5]\n * >>> removeEven([5, 6, 7])\n * [5, 7]\n * >>> removeEven([1, 2, 3, 4])\n * [1, 3]\n */\nfunc removeEven(l : [Int]) -> [Int] {\n", "entry_point": "removeEven", "test": "\n\nvar arg00 : [Int] = [1, 3, 5, 2]\nvar x0 : [Int] = removeEven(l : arg00)\nvar v0 : [Int] = [1, 3, 5]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [5, 6, 7]\nvar x1 : [Int] = removeEven(l : arg10)\nvar v1 : [Int] = [5, 7]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4]\nvar x2 : [Int] = removeEven(l : arg20)\nvar v2 : [Int] = [1, 3]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to remove even numbers from a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/825", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to access multiple elements of specified index from a given list.\n *\n * >>> accessElements([2, 3, 8, 4, 7, 9], [0, 3, 5])\n * [2, 4, 9]\n * >>> accessElements([1, 2, 3, 4, 5], [1, 2])\n * [2, 3]\n * >>> accessElements([1, 0, 2, 3], [0, 1])\n * [1, 0]\n */\nfunc accessElements(nums : [Int], listIndex : [Int]) -> [Int] {\n", "entry_point": "accessElements", "test": "\n\nvar arg00 : [Int] = [2, 3, 8, 4, 7, 9]\nvar arg01 : [Int] = [0, 3, 5]\nvar x0 : [Int] = accessElements(nums : arg00, listIndex : arg01)\nvar v0 : [Int] = [2, 4, 9]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5]\nvar arg11 : [Int] = [1, 2]\nvar x1 : [Int] = accessElements(nums : arg10, listIndex : arg11)\nvar v1 : [Int] = [2, 3]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 0, 2, 3]\nvar arg21 : [Int] = [0, 1]\nvar x2 : [Int] = accessElements(nums : arg20, listIndex : arg21)\nvar v2 : [Int] = [1, 0]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to access multiple elements of specified index from a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/826", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the type of triangle from the given sides.\n *\n * >>> checkTypeOfTriangle(1, 2, 3)\n * \"Obtuse-angled Triangle\"\n * >>> checkTypeOfTriangle(2, 2, 2)\n * \"Acute-angled Triangle\"\n * >>> checkTypeOfTriangle(1, 0, 1)\n * \"Right-angled Triangle\"\n */\nfunc checkTypeOfTriangle(a : Int, b : Int, c : Int) -> String {\n", "entry_point": "checkTypeOfTriangle", "test": "\n\nvar arg00 : Int = 1\nvar arg01 : Int = 2\nvar arg02 : Int = 3\nvar x0 : String = checkTypeOfTriangle(a : arg00, b : arg01, c : arg02)\nvar v0 : String = #\"Obtuse-angled Triangle\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar arg11 : Int = 2\nvar arg12 : Int = 2\nvar x1 : String = checkTypeOfTriangle(a : arg10, b : arg11, c : arg12)\nvar v1 : String = #\"Acute-angled Triangle\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = 0\nvar arg22 : Int = 1\nvar x2 : String = checkTypeOfTriangle(a : arg20, b : arg21, c : arg22)\nvar v2 : String = #\"Right-angled Triangle\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the type of triangle from the given sides.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/827", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sum a specific column of a list in a given list of lists.\n *\n * >>> sumColumn([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 0)\n * 12\n * >>> sumColumn([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 1)\n * 15\n * >>> sumColumn([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 3)\n * 9\n */\nfunc sumColumn(list1 : [[Int]], c : Int) -> Int {\n", "entry_point": "sumColumn", "test": "\n\nvar arg00 : [[Int]] = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]\nvar arg01 : Int = 0\nvar x0 : Int = sumColumn(list1 : arg00, c : arg01)\nvar v0 : Int = 12\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]\nvar arg11 : Int = 1\nvar x1 : Int = sumColumn(list1 : arg10, c : arg11)\nvar v1 : Int = 15\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]\nvar arg21 : Int = 3\nvar x2 : Int = sumColumn(list1 : arg20, c : arg21)\nvar v2 : Int = 9\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sum a specific column of a list in a given list of lists.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/828", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count alphabets,digits and special charactes in a given string.\n *\n * >>> countAlphaDigSpl(\"abc!@#123\")\n * [3, 3, 3]\n * >>> countAlphaDigSpl(\"dgsuy@#\\$%&1255\")\n * [5, 4, 5]\n * >>> countAlphaDigSpl(\"fjdsif627348#%\\$^&\")\n * [6, 6, 5]\n */\nfunc countAlphaDigSpl(string : String) -> [Int] {\n", "entry_point": "countAlphaDigSpl", "test": "\n\nvar arg00 : String = #\"abc!@#123\"#\nvar x0 : [Int] = countAlphaDigSpl(string : arg00)\nvar v0 : [Int] = [3, 3, 3]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"dgsuy@#\\$%&1255\"#\nvar x1 : [Int] = countAlphaDigSpl(string : arg10)\nvar v1 : [Int] = [5, 4, 5]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"fjdsif627348#%\\$^&\"#\nvar x2 : [Int] = countAlphaDigSpl(string : arg20)\nvar v2 : [Int] = [6, 6, 5]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count alphabets,digits and special charactes in a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/829", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find out the second most repeated (or frequent) string in the given sequence.\n *\n * >>> secondFrequent([\"aaa\", \"bbb\", \"ccc\", \"bbb\", \"aaa\", \"aaa\"])\n * \"bbb\"\n * >>> secondFrequent([\"abc\", \"bcd\", \"abc\", \"bcd\", \"bcd\", \"bcd\"])\n * \"abc\"\n * >>> secondFrequent([\"cdma\", \"gsm\", \"hspa\", \"gsm\", \"cdma\", \"cdma\"])\n * \"gsm\"\n */\nfunc secondFrequent(input : [String]) -> String {\n", "entry_point": "secondFrequent", "test": "\n\nvar arg00 : [String] = [#\"aaa\"#, #\"bbb\"#, #\"ccc\"#, #\"bbb\"#, #\"aaa\"#, #\"aaa\"#]\nvar x0 : String = secondFrequent(input : arg00)\nvar v0 : String = #\"bbb\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"abc\"#, #\"bcd\"#, #\"abc\"#, #\"bcd\"#, #\"bcd\"#, #\"bcd\"#]\nvar x1 : String = secondFrequent(input : arg10)\nvar v1 : String = #\"abc\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"cdma\"#, #\"gsm\"#, #\"hspa\"#, #\"gsm\"#, #\"cdma\"#, #\"cdma\"#]\nvar x2 : String = secondFrequent(input : arg20)\nvar v2 : String = #\"gsm\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find out the second most repeated (or frequent) string in the given sequence.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/830", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to round up a number to specific digits.\n *\n * >>> roundUp(123.01247, 0)\n * 124\n * >>> roundUp(123.01247, 1)\n * 123.1\n * >>> roundUp(123.01247, 2)\n * 123.02\n */\nfunc roundUp(a : Double, digits : Int) -> Double {\n", "entry_point": "roundUp", "test": "\n\nvar arg00 : Double = 123.01247\nvar arg01 : Int = 0\nvar x0 : Double = roundUp(a : arg00, digits : arg01)\nvar v0 : Double = 124\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Double = 123.01247\nvar arg11 : Int = 1\nvar x1 : Double = roundUp(a : arg10, digits : arg11)\nvar v1 : Double = 123.1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Double = 123.01247\nvar arg21 : Int = 2\nvar x2 : Double = roundUp(a : arg20, digits : arg21)\nvar v2 : Double = 123.02\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to round up a number to specific digits.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/831", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count equal element pairs from the given array.\n *\n * >>> countPairs([1, 1, 1, 1], 4)\n * 6\n * >>> countPairs([1, 5, 1], 3)\n * 1\n * >>> countPairs([3, 2, 1, 7, 8, 9], 6)\n * 0\n */\nfunc countPairs(arr : [Int], n : Int) -> Int {\n", "entry_point": "countPairs", "test": "\n\nvar arg00 : [Int] = [1, 1, 1, 1]\nvar arg01 : Int = 4\nvar x0 : Int = countPairs(arr : arg00, n : arg01)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 5, 1]\nvar arg11 : Int = 3\nvar x1 : Int = countPairs(arr : arg10, n : arg11)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3, 2, 1, 7, 8, 9]\nvar arg21 : Int = 6\nvar x2 : Int = countPairs(arr : arg20, n : arg21)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count equal element pairs from the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/832", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the maximum numeric value from a string by using regex.\n *\n * >>> extractMax(\"100klh564abc365bg\")\n * 564\n * >>> extractMax(\"hello300how546mer231\")\n * 546\n * >>> extractMax(\"its233beenalong343journey234\")\n * 343\n */\nfunc extractMax(input : String) -> Int {\n", "entry_point": "extractMax", "test": "\n\nvar arg00 : String = #\"100klh564abc365bg\"#\nvar x0 : Int = extractMax(input : arg00)\nvar v0 : Int = 564\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"hello300how546mer231\"#\nvar x1 : Int = extractMax(input : arg10)\nvar v1 : Int = 546\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"its233beenalong343journey234\"#\nvar x2 : Int = extractMax(input : arg20)\nvar v2 : Int = 343\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract the maximum numeric value from a string by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/833", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get dictionary keys as a list.\n *\n * >>> getKey([1 : \"python\", 2 : \"java\"])\n * [1, 2]\n * >>> getKey([10 : \"red\", 20 : \"blue\", 30 : \"black\"])\n * [10, 20, 30]\n * >>> getKey([27 : \"language\", 39 : \"java\", 44 : \"little\"])\n * [27, 39, 44]\n */\nfunc getKey(dict : [Int: String]) -> [Int] {\n", "entry_point": "getKey", "test": "\n\nvar arg00 : [Int: String] = [1 : #\"python\"#, 2 : #\"java\"#]\nvar x0 : [Int] = getKey(dict : arg00)\nvar v0 : [Int] = [1, 2]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int: String] = [10 : #\"red\"#, 20 : #\"blue\"#, 30 : #\"black\"#]\nvar x1 : [Int] = getKey(dict : arg10)\nvar v1 : [Int] = [10, 20, 30]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int: String] = [27 : #\"language\"#, 39 : #\"java\"#, 44 : #\"little\"#]\nvar x2 : [Int] = getKey(dict : arg20)\nvar v2 : [Int] = [27, 39, 44]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to get dictionary keys as a list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/834", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n *\n * >>> generateMatrix(3)\n * [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n * >>> generateMatrix(2)\n * [[1, 2], [4, 3]]\n * >>> generateMatrix(7)\n * [[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]\n */\nfunc generateMatrix(n : Int) -> [[Int]] {\n", "entry_point": "generateMatrix", "test": "\n\nvar arg00 : Int = 3\nvar x0 : [[Int]] = generateMatrix(n : arg00)\nvar v0 : [[Int]] = [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar x1 : [[Int]] = generateMatrix(n : arg10)\nvar v1 : [[Int]] = [[1, 2], [4, 3]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 7\nvar x2 : [[Int]] = generateMatrix(n : arg20)\nvar v2 : [[Int]] = [[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/835", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the slope of a line.\n *\n * >>> slope(4, 2, 2, 5)\n * -1.5\n * >>> slope(2, 4, 4, 6)\n * 1\n * >>> slope(1, 2, 4, 2)\n * 0\n */\nfunc slope(x1 : Int, y1 : Int, x2 : Int, y2 : Int) -> Double {\n", "entry_point": "slope", "test": "\n\nvar arg00 : Int = 4\nvar arg01 : Int = 2\nvar arg02 : Int = 2\nvar arg03 : Int = 5\nvar x0 : Double = slope(x1 : arg00, y1 : arg01, x2 : arg02, y2 : arg03)\nvar v0 : Double = -1.5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar arg11 : Int = 4\nvar arg12 : Int = 4\nvar arg13 : Int = 6\nvar x1 : Double = slope(x1 : arg10, y1 : arg11, x2 : arg12, y2 : arg13)\nvar v1 : Double = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = 2\nvar arg22 : Int = 4\nvar arg23 : Int = 2\nvar x2 : Double = slope(x1 : arg20, y1 : arg21, x2 : arg22, y2 : arg23)\nvar v2 : Double = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the slope of a line.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/836", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find length of the subarray having maximum sum.\n *\n * >>> maxSubArraySum([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n * 5\n * >>> maxSubArraySum([1, -2, 1, 1, -2, 1], 6)\n * 2\n * >>> maxSubArraySum([-1, -2, 3, 4, 5], 5)\n * 3\n */\nfunc maxSubArraySum(a : [Int], size : Int) -> Int {\n", "entry_point": "maxSubArraySum", "test": "\n\nvar arg00 : [Int] = [-2, -3, 4, -1, -2, 1, 5, -3]\nvar arg01 : Int = 8\nvar x0 : Int = maxSubArraySum(a : arg00, size : arg01)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, -2, 1, 1, -2, 1]\nvar arg11 : Int = 6\nvar x1 : Int = maxSubArraySum(a : arg10, size : arg11)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [-1, -2, 3, 4, 5]\nvar arg21 : Int = 5\nvar x2 : Int = maxSubArraySum(a : arg20, size : arg21)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find length of the subarray having maximum sum.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/837", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the cube sum of first n odd natural numbers.\n *\n * >>> cubeSum(2)\n * 28\n * >>> cubeSum(3)\n * 153\n * >>> cubeSum(4)\n * 496\n */\nfunc cubeSum(n : Int) -> Int {\n", "entry_point": "cubeSum", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = cubeSum(n : arg00)\nvar v0 : Int = 28\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar x1 : Int = cubeSum(n : arg10)\nvar v1 : Int = 153\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar x2 : Int = cubeSum(n : arg20)\nvar v2 : Int = 496\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the cube sum of first n odd natural numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/838", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find minimum number swaps required to make two binary strings equal.\n *\n * >>> minSwaps(\"0011\", \"1111\")\n * 1\n * >>> minSwaps(\"00011\", \"01001\")\n * 2\n * >>> minSwaps(\"111\", \"111\")\n * 0\n */\nfunc minSwaps(s1 : String, s2 : String) -> Int {\n", "entry_point": "minSwaps", "test": "\n\nvar arg00 : String = #\"0011\"#\nvar arg01 : String = #\"1111\"#\nvar x0 : Int = minSwaps(s1 : arg00, s2 : arg01)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"00011\"#\nvar arg11 : String = #\"01001\"#\nvar x1 : Int = minSwaps(s1 : arg10, s2 : arg11)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"111\"#\nvar arg21 : String = #\"111\"#\nvar x2 : Int = minSwaps(s1 : arg20, s2 : arg21)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find minimum number swaps required to make two binary strings equal.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/839", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the tuples alphabetically by the first item of each tuple.\n *\n * >>> sortTuple([[\"Amana\", 28], [\"Zenat\", 30], [\"Abhishek\", 29], [\"Nikhil\", 21], [\"B\", \"C\"]])\n * [[\"Abhishek\", 29], [\"Amana\", 28], [\"B\", \"C\"], [\"Nikhil\", 21], [\"Zenat\", 30]]\n * >>> sortTuple([[\"aaaa\", 28], [\"aa\", 30], [\"bab\", 29], [\"bb\", 21], [\"csa\", \"C\"]])\n * [[\"aa\", 30], [\"aaaa\", 28], [\"bab\", 29], [\"bb\", 21], [\"csa\", \"C\"]]\n * >>> sortTuple([[\"Sarala\", 28], [\"Ayesha\", 30], [\"Suman\", 29], [\"Sai\", 21], [\"G\", \"H\"]])\n * [[\"Ayesha\", 30], [\"G\", \"H\"], [\"Sai\", 21], [\"Sarala\", 28], [\"Suman\", 29]]\n */\nfunc sortTuple(tup : [[AnyHashable]]) -> [[AnyHashable]] {\n", "entry_point": "sortTuple", "test": "\n\nvar arg00 : [[AnyHashable]] = [[#\"Amana\"#, 28], [#\"Zenat\"#, 30], [#\"Abhishek\"#, 29], [#\"Nikhil\"#, 21], [#\"B\"#, #\"C\"#]]\nvar x0 : [[AnyHashable]] = sortTuple(tup : arg00)\nvar v0 : [[AnyHashable]] = [[#\"Abhishek\"#, 29], [#\"Amana\"#, 28], [#\"B\"#, #\"C\"#], [#\"Nikhil\"#, 21], [#\"Zenat\"#, 30]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[#\"aaaa\"#, 28], [#\"aa\"#, 30], [#\"bab\"#, 29], [#\"bb\"#, 21], [#\"csa\"#, #\"C\"#]]\nvar x1 : [[AnyHashable]] = sortTuple(tup : arg10)\nvar v1 : [[AnyHashable]] = [[#\"aa\"#, 30], [#\"aaaa\"#, 28], [#\"bab\"#, 29], [#\"bb\"#, 21], [#\"csa\"#, #\"C\"#]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[#\"Sarala\"#, 28], [#\"Ayesha\"#, 30], [#\"Suman\"#, 29], [#\"Sai\"#, 21], [#\"G\"#, #\"H\"#]]\nvar x2 : [[AnyHashable]] = sortTuple(tup : arg20)\nvar v2 : [[AnyHashable]] = [[#\"Ayesha\"#, 30], [#\"G\"#, #\"H\"#], [#\"Sai\"#, 21], [#\"Sarala\"#, 28], [#\"Suman\"#, 29]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort the tuples alphabetically by the first item of each tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/840", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n *\n * >>> checkSolution(2, 0, -1)\n * \"Yes\"\n * >>> checkSolution(1, -5, 6)\n * \"No\"\n * >>> checkSolution(2, 0, 2)\n * \"Yes\"\n */\nfunc checkSolution(a : Int, b : Int, c : Int) -> String {\n", "entry_point": "checkSolution", "test": "\n\nvar arg00 : Int = 2\nvar arg01 : Int = 0\nvar arg02 : Int = -1\nvar x0 : String = checkSolution(a : arg00, b : arg01, c : arg02)\nvar v0 : String = #\"Yes\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar arg11 : Int = -5\nvar arg12 : Int = 6\nvar x1 : String = checkSolution(a : arg10, b : arg11, c : arg12)\nvar v1 : String = #\"No\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar arg21 : Int = 0\nvar arg22 : Int = 2\nvar x2 : String = checkSolution(a : arg20, b : arg21, c : arg22)\nvar v2 : String = #\"Yes\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/841", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the number of inversions in the given array.\n *\n * >>> getInvCount([1, 20, 6, 4, 5], 5)\n * 5\n * >>> getInvCount([8, 4, 2, 1], 4)\n * 6\n * >>> getInvCount([3, 1, 2], 3)\n * 2\n */\nfunc getInvCount(arr : [Int], n : Int) -> Int {\n", "entry_point": "getInvCount", "test": "\n\nvar arg00 : [Int] = [1, 20, 6, 4, 5]\nvar arg01 : Int = 5\nvar x0 : Int = getInvCount(arr : arg00, n : arg01)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [8, 4, 2, 1]\nvar arg11 : Int = 4\nvar x1 : Int = getInvCount(arr : arg10, n : arg11)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3, 1, 2]\nvar arg21 : Int = 3\nvar x2 : Int = getInvCount(arr : arg20, n : arg21)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count the number of inversions in the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/842", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the number which occurs for odd number of times in the given array.\n *\n * >>> getOddOccurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)\n * 5\n * >>> getOddOccurence([1, 2, 3, 2, 3, 1, 3], 7)\n * 3\n * >>> getOddOccurence([5, 7, 2, 7, 5, 2, 5], 7)\n * 5\n */\nfunc getOddOccurence(arr : [Int], arrSize : Int) -> Int {\n", "entry_point": "getOddOccurence", "test": "\n\nvar arg00 : [Int] = [2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2]\nvar arg01 : Int = 13\nvar x0 : Int = getOddOccurence(arr : arg00, arrSize : arg01)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 2, 3, 1, 3]\nvar arg11 : Int = 7\nvar x1 : Int = getOddOccurence(arr : arg10, arrSize : arg11)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [5, 7, 2, 7, 5, 2, 5]\nvar arg21 : Int = 7\nvar x2 : Int = getOddOccurence(arr : arg20, arrSize : arg21)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the number which occurs for odd number of times in the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/843", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n *\n * >>> nthSuperUglyNumber(12, [2, 7, 13, 19])\n * 32\n * >>> nthSuperUglyNumber(10, [2, 7, 13, 19])\n * 26\n * >>> nthSuperUglyNumber(100, [2, 7, 13, 19])\n * 5408\n */\nfunc nthSuperUglyNumber(n : Int, primes : [Int]) -> Int {\n", "entry_point": "nthSuperUglyNumber", "test": "\n\nvar arg00 : Int = 12\nvar arg01 : [Int] = [2, 7, 13, 19]\nvar x0 : Int = nthSuperUglyNumber(n : arg00, primes : arg01)\nvar v0 : Int = 32\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar arg11 : [Int] = [2, 7, 13, 19]\nvar x1 : Int = nthSuperUglyNumber(n : arg10, primes : arg11)\nvar v1 : Int = 26\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 100\nvar arg21 : [Int] = [2, 7, 13, 19]\nvar x2 : Int = nthSuperUglyNumber(n : arg20, primes : arg21)\nvar v2 : Int = 5408\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/844", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the kth element in an array containing odd elements first and then even elements.\n *\n * >>> getNumber(8, 5)\n * 2\n * >>> getNumber(7, 2)\n * 3\n * >>> getNumber(5, 2)\n * 3\n */\nfunc getNumber(n : Int, k : Int) -> Int {\n", "entry_point": "getNumber", "test": "\n\nvar arg00 : Int = 8\nvar arg01 : Int = 5\nvar x0 : Int = getNumber(n : arg00, k : arg01)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 7\nvar arg11 : Int = 2\nvar x1 : Int = getNumber(n : arg10, k : arg11)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar arg21 : Int = 2\nvar x2 : Int = getNumber(n : arg20, k : arg21)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the kth element in an array containing odd elements first and then even elements.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/845", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of digits in factorial of a given number.\n *\n * >>> findDigits(7)\n * 4\n * >>> findDigits(5)\n * 3\n * >>> findDigits(4)\n * 2\n */\nfunc findDigits(n : Int) -> Int {\n", "entry_point": "findDigits", "test": "\n\nvar arg00 : Int = 7\nvar x0 : Int = findDigits(n : arg00)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar x1 : Int = findDigits(n : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar x2 : Int = findDigits(n : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the number of digits in factorial of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/846", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the minimum number of platforms required for a railway/bus station.\n *\n * >>> findPlatform([900, 940, 950, 1100, 1500, 1800], [910, 1200, 1120, 1130, 1900, 2000], 6)\n * 3\n * >>> findPlatform([100, 200, 300, 400], [700, 800, 900, 1000], 4)\n * 4\n * >>> findPlatform([5, 6, 7, 8], [4, 3, 2, 1], 4)\n * 1\n */\nfunc findPlatform(arr : [Int], dep : [Int], n : Int) -> Int {\n", "entry_point": "findPlatform", "test": "\n\nvar arg00 : [Int] = [900, 940, 950, 1100, 1500, 1800]\nvar arg01 : [Int] = [910, 1200, 1120, 1130, 1900, 2000]\nvar arg02 : Int = 6\nvar x0 : Int = findPlatform(arr : arg00, dep : arg01, n : arg02)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [100, 200, 300, 400]\nvar arg11 : [Int] = [700, 800, 900, 1000]\nvar arg12 : Int = 4\nvar x1 : Int = findPlatform(arr : arg10, dep : arg11, n : arg12)\nvar v1 : Int = 4\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [5, 6, 7, 8]\nvar arg21 : [Int] = [4, 3, 2, 1]\nvar arg22 : Int = 4\nvar x2 : Int = findPlatform(arr : arg20, dep : arg21, n : arg22)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the minimum number of platforms required for a railway/bus station.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/847", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to copy a list from a singleton tuple.\n *\n * >>> lcopy([1, 2, 3])\n * [1, 2, 3]\n * >>> lcopy([4, 8, 2, 10, 15, 18])\n * [4, 8, 2, 10, 15, 18]\n * >>> lcopy([4, 5, 6])\n * [4, 5, 6]\n */\nfunc lcopy(xs : [Int]) -> [Int] {\n", "entry_point": "lcopy", "test": "\n\nvar arg00 : [Int] = [1, 2, 3]\nvar x0 : [Int] = lcopy(xs : arg00)\nvar v0 : [Int] = [1, 2, 3]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 8, 2, 10, 15, 18]\nvar x1 : [Int] = lcopy(xs : arg10)\nvar v1 : [Int] = [4, 8, 2, 10, 15, 18]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [4, 5, 6]\nvar x2 : [Int] = lcopy(xs : arg20)\nvar v2 : [Int] = [4, 5, 6]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to copy a list from a singleton tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/848", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a trapezium.\n *\n * >>> areaTrapezium(6, 9, 4)\n * 30\n * >>> areaTrapezium(10, 20, 30)\n * 450\n * >>> areaTrapezium(15, 25, 35)\n * 700\n */\nfunc areaTrapezium(base1 : Int, base2 : Int, height : Int) -> Int {\n", "entry_point": "areaTrapezium", "test": "\n\nvar arg00 : Int = 6\nvar arg01 : Int = 9\nvar arg02 : Int = 4\nvar x0 : Int = areaTrapezium(base1 : arg00, base2 : arg01, height : arg02)\nvar v0 : Int = 30\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 10\nvar arg11 : Int = 20\nvar arg12 : Int = 30\nvar x1 : Int = areaTrapezium(base1 : arg10, base2 : arg11, height : arg12)\nvar v1 : Int = 450\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 15\nvar arg21 : Int = 25\nvar arg22 : Int = 35\nvar x2 : Int = areaTrapezium(base1 : arg20, base2 : arg21, height : arg22)\nvar v2 : Int = 700\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the area of a trapezium.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/849", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of all prime divisors of a given number.\n *\n * >>> sum(60)\n * 10\n * >>> sum(39)\n * 16\n * >>> sum(40)\n * 7\n */\nfunc sum(n : Int) -> Int {\n", "entry_point": "sum", "test": "\n\nvar arg00 : Int = 60\nvar x0 : Int = sum(n : arg00)\nvar v0 : Int = 10\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 39\nvar x1 : Int = sum(n : arg10)\nvar v1 : Int = 16\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 40\nvar x2 : Int = sum(n : arg20)\nvar v2 : Int = 7\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find sum of all prime divisors of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/850", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a triangle of positive area is possible with the given angles.\n *\n * >>> isTriangleexists(50, 60, 70)\n * true\n * >>> isTriangleexists(90, 45, 45)\n * true\n * >>> isTriangleexists(150, 30, 70)\n * false\n */\nfunc isTriangleexists(a : Int, b : Int, c : Int) -> Bool {\n", "entry_point": "isTriangleexists", "test": "\n\nvar arg00 : Int = 50\nvar arg01 : Int = 60\nvar arg02 : Int = 70\nvar x0 : Bool = isTriangleexists(a : arg00, b : arg01, c : arg02)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 90\nvar arg11 : Int = 45\nvar arg12 : Int = 45\nvar x1 : Bool = isTriangleexists(a : arg10, b : arg11, c : arg12)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 150\nvar arg21 : Int = 30\nvar arg22 : Int = 70\nvar x2 : Bool = isTriangleexists(a : arg20, b : arg21, c : arg22)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if a triangle of positive area is possible with the given angles.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/851", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of inverse of divisors.\n *\n * >>> sumOfInverseDivisors(6, 12)\n * 2\n * >>> sumOfInverseDivisors(9, 13)\n * 1.44\n * >>> sumOfInverseDivisors(1, 4)\n * 4\n */\nfunc sumOfInverseDivisors(n : Int, sum : Int) -> Double {\n", "entry_point": "sumOfInverseDivisors", "test": "\n\nvar arg00 : Int = 6\nvar arg01 : Int = 12\nvar x0 : Double = sumOfInverseDivisors(n : arg00, sum : arg01)\nvar v0 : Double = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 9\nvar arg11 : Int = 13\nvar x1 : Double = sumOfInverseDivisors(n : arg10, sum : arg11)\nvar v1 : Double = 1.44\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = 4\nvar x2 : Double = sumOfInverseDivisors(n : arg20, sum : arg21)\nvar v2 : Double = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find sum of inverse of divisors.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/852", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove negative numbers from a list.\n *\n * >>> removeNegs([1, -2, 3, -4])\n * [1, 3]\n * >>> removeNegs([1, 2, 3, -4])\n * [1, 2, 3]\n * >>> removeNegs([4, 5, -6, 7, -8])\n * [4, 5, 7]\n */\nfunc removeNegs(numList : [Int]) -> [Int] {\n", "entry_point": "removeNegs", "test": "\n\nvar arg00 : [Int] = [1, -2, 3, -4]\nvar x0 : [Int] = removeNegs(numList : arg00)\nvar v0 : [Int] = [1, 3]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, -4]\nvar x1 : [Int] = removeNegs(numList : arg10)\nvar v1 : [Int] = [1, 2, 3]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [4, 5, -6, 7, -8]\nvar x2 : [Int] = removeNegs(numList : arg20)\nvar v2 : [Int] = [4, 5, 7]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to remove negative numbers from a list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/853", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of odd factors of a number.\n *\n * >>> sumOfOddFactors(30)\n * 24\n * >>> sumOfOddFactors(18)\n * 13\n * >>> sumOfOddFactors(2)\n * 1\n */\nfunc sumOfOddFactors(n : Int) -> Int {\n", "entry_point": "sumOfOddFactors", "test": "\n\nvar arg00 : Int = 30\nvar x0 : Int = sumOfOddFactors(n : arg00)\nvar v0 : Int = 24\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 18\nvar x1 : Int = sumOfOddFactors(n : arg10)\nvar v1 : Int = 13\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar x2 : Int = sumOfOddFactors(n : arg20)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find sum of odd factors of a number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/854", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n *\n * >>> rawHeap([25, 44, 68, 21, 39, 23, 89])\n * [21, 25, 23, 44, 39, 68, 89]\n * >>> rawHeap([25, 35, 22, 85, 14, 65, 75, 25, 58])\n * [14, 25, 22, 25, 35, 65, 75, 85, 58]\n * >>> rawHeap([4, 5, 6, 2])\n * [2, 4, 6, 5]\n */\nfunc rawHeap(rawheap : [Int]) -> [Int] {\n", "entry_point": "rawHeap", "test": "\n\nvar arg00 : [Int] = [25, 44, 68, 21, 39, 23, 89]\nvar x0 : [Int] = rawHeap(rawheap : arg00)\nvar v0 : [Int] = [21, 25, 23, 44, 39, 68, 89]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [25, 35, 22, 85, 14, 65, 75, 25, 58]\nvar x1 : [Int] = rawHeap(rawheap : arg10)\nvar v1 : [Int] = [14, 25, 22, 25, 35, 65, 75, 85, 58]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [4, 5, 6, 2]\nvar x2 : [Int] = rawHeap(rawheap : arg20)\nvar v2 : [Int] = [2, 4, 6, 5]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/855", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check for even parity of a given number.\n *\n * >>> checkEvenParity(10)\n * true\n * >>> checkEvenParity(11)\n * false\n * >>> checkEvenParity(18)\n * true\n */\nfunc checkEvenParity(x : Int) -> Bool {\n", "entry_point": "checkEvenParity", "test": "\n\nvar arg00 : Int = 10\nvar x0 : Bool = checkEvenParity(x : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 11\nvar x1 : Bool = checkEvenParity(x : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 18\nvar x2 : Bool = checkEvenParity(x : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check for even parity of a given number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/856", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find minimum adjacent swaps required to sort binary array.\n *\n * >>> findMinSwaps([1, 0, 1, 0], 4)\n * 3\n * >>> findMinSwaps([0, 1, 0], 3)\n * 1\n * >>> findMinSwaps([0, 0, 1, 1, 0], 5)\n * 2\n */\nfunc findMinSwaps(arr : [Int], n : Int) -> Int {\n", "entry_point": "findMinSwaps", "test": "\n\nvar arg00 : [Int] = [1, 0, 1, 0]\nvar arg01 : Int = 4\nvar x0 : Int = findMinSwaps(arr : arg00, n : arg01)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [0, 1, 0]\nvar arg11 : Int = 3\nvar x1 : Int = findMinSwaps(arr : arg10, n : arg11)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [0, 0, 1, 1, 0]\nvar arg21 : Int = 5\nvar x2 : Int = findMinSwaps(arr : arg20, n : arg21)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find minimum adjacent swaps required to sort binary array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/857", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to list out the list of given strings individually using map function.\n *\n * >>> listifyList([\"Red\", \"Blue\", \"Black\", \"White\", \"Pink\"])\n * [[\"R\", \"e\", \"d\"], [\"B\", \"l\", \"u\", \"e\"], [\"B\", \"l\", \"a\", \"c\", \"k\"], [\"W\", \"h\", \"i\", \"t\", \"e\"], [\"P\", \"i\", \"n\", \"k\"]]\n * >>> listifyList([\"python\"])\n * [[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]]\n * >>> listifyList([\" red \", \"green\", \" black\", \"blue \", \" orange\", \"brown\"])\n * [[\" \", \"r\", \"e\", \"d\", \" \"], [\"g\", \"r\", \"e\", \"e\", \"n\"], [\" \", \"b\", \"l\", \"a\", \"c\", \"k\"], [\"b\", \"l\", \"u\", \"e\", \" \"], [\" \", \"o\", \"r\", \"a\", \"n\", \"g\", \"e\"], [\"b\", \"r\", \"o\", \"w\", \"n\"]]\n */\nfunc listifyList(list1 : [String]) -> [[String]] {\n", "entry_point": "listifyList", "test": "\n\nvar arg00 : [String] = [#\"Red\"#, #\"Blue\"#, #\"Black\"#, #\"White\"#, #\"Pink\"#]\nvar x0 : [[String]] = listifyList(list1 : arg00)\nvar v0 : [[String]] = [[#\"R\"#, #\"e\"#, #\"d\"#], [#\"B\"#, #\"l\"#, #\"u\"#, #\"e\"#], [#\"B\"#, #\"l\"#, #\"a\"#, #\"c\"#, #\"k\"#], [#\"W\"#, #\"h\"#, #\"i\"#, #\"t\"#, #\"e\"#], [#\"P\"#, #\"i\"#, #\"n\"#, #\"k\"#]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"python\"#]\nvar x1 : [[String]] = listifyList(list1 : arg10)\nvar v1 : [[String]] = [[#\"p\"#, #\"y\"#, #\"t\"#, #\"h\"#, #\"o\"#, #\"n\"#]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\" red \"#, #\"green\"#, #\" black\"#, #\"blue \"#, #\" orange\"#, #\"brown\"#]\nvar x2 : [[String]] = listifyList(list1 : arg20)\nvar v2 : [[String]] = [[#\" \"#, #\"r\"#, #\"e\"#, #\"d\"#, #\" \"#], [#\"g\"#, #\"r\"#, #\"e\"#, #\"e\"#, #\"n\"#], [#\" \"#, #\"b\"#, #\"l\"#, #\"a\"#, #\"c\"#, #\"k\"#], [#\"b\"#, #\"l\"#, #\"u\"#, #\"e\"#, #\" \"#], [#\" \"#, #\"o\"#, #\"r\"#, #\"a\"#, #\"n\"#, #\"g\"#, #\"e\"#], [#\"b\"#, #\"r\"#, #\"o\"#, #\"w\"#, #\"n\"#]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to list out the list of given strings individually using map function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/858", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count number of lists in a given list of lists and square the count.\n *\n * >>> countList([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n * 25\n * >>> countList([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n * 16\n * >>> countList([[2, 4], [[6, 8], [4, 5, 8]], [10, 12, 14]])\n * 9\n */\nfunc countList(inputList : [[AnyHashable]]) -> Int {\n", "entry_point": "countList", "test": "\n\nvar arg00 : [[AnyHashable]] = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]\nvar x0 : Int = countList(inputList : arg00)\nvar v0 : Int = 25\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[1, 3], [5, 7], [9, 11], [13, 15, 17]]\nvar x1 : Int = countList(inputList : arg10)\nvar v1 : Int = 16\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[2, 4], [[6, 8], [4, 5, 8]], [10, 12, 14]]\nvar x2 : Int = countList(inputList : arg20)\nvar v2 : Int = 9\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count number of lists in a given list of lists and square the count.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/859", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to generate all sublists of a given list.\n *\n * >>> subLists([10, 20, 30, 40])\n * [[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\n * >>> subLists([\"X\", \"Y\", \"Z\"])\n * [[], [\"X\"], [\"Y\"], [\"Z\"], [\"X\", \"Y\"], [\"X\", \"Z\"], [\"Y\", \"Z\"], [\"X\", \"Y\", \"Z\"]]\n * >>> subLists([1, 2, 3])\n * [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n */\nfunc subLists(myList : [AnyHashable]) -> [[AnyHashable]] {\n", "entry_point": "subLists", "test": "\n\nvar arg00 : [AnyHashable] = [10, 20, 30, 40]\nvar x0 : [[AnyHashable]] = subLists(myList : arg00)\nvar v0 : [[AnyHashable]] = [[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [#\"X\"#, #\"Y\"#, #\"Z\"#]\nvar x1 : [[AnyHashable]] = subLists(myList : arg10)\nvar v1 : [[AnyHashable]] = [[], [#\"X\"#], [#\"Y\"#], [#\"Z\"#], [#\"X\"#, #\"Y\"#], [#\"X\"#, #\"Z\"#], [#\"Y\"#, #\"Z\"#], [#\"X\"#, #\"Y\"#, #\"Z\"#]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [1, 2, 3]\nvar x2 : [[AnyHashable]] = subLists(myList : arg20)\nvar v2 : [[AnyHashable]] = [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to generate all sublists of a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/860", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n *\n * >>> checkAlphanumeric(\"dawood@\")\n * \"Discard\"\n * >>> checkAlphanumeric(\"skdmsam326\")\n * \"Accept\"\n * >>> checkAlphanumeric(\"cooltricks@\")\n * \"Discard\"\n */\nfunc checkAlphanumeric(string : String) -> String {\n", "entry_point": "checkAlphanumeric", "test": "\n\nvar arg00 : String = #\"dawood@\"#\nvar x0 : String = checkAlphanumeric(string : arg00)\nvar v0 : String = #\"Discard\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"skdmsam326\"#\nvar x1 : String = checkAlphanumeric(string : arg10)\nvar v1 : String = #\"Accept\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"cooltricks@\"#\nvar x2 : String = checkAlphanumeric(string : arg20)\nvar v2 : String = #\"Discard\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/861", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all anagrams of a string in a given list of strings using lambda function.\n *\n * >>> anagramLambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"], \"abcd\")\n * [\"bcda\", \"cbda\", \"adcb\"]\n * >>> anagramLambda([\"recitals\", \" python\"], \"articles\")\n * [\"recitals\"]\n * >>> anagramLambda([\" keep\", \" abcdef\", \" xyz\"], \" peek\")\n * [\" keep\"]\n */\nfunc anagramLambda(texts : [String], str : String) -> [String] {\n", "entry_point": "anagramLambda", "test": "\n\nvar arg00 : [String] = [#\"bcda\"#, #\"abce\"#, #\"cbda\"#, #\"cbea\"#, #\"adcb\"#]\nvar arg01 : String = #\"abcd\"#\nvar x0 : [String] = anagramLambda(texts : arg00, str : arg01)\nvar v0 : [String] = [#\"bcda\"#, #\"cbda\"#, #\"adcb\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"recitals\"#, #\" python\"#]\nvar arg11 : String = #\"articles\"#\nvar x1 : [String] = anagramLambda(texts : arg10, str : arg11)\nvar v1 : [String] = [#\"recitals\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\" keep\"#, #\" abcdef\"#, #\" xyz\"#]\nvar arg21 : String = #\" peek\"#\nvar x2 : [String] = anagramLambda(texts : arg20, str : arg21)\nvar v2 : [String] = [#\" keep\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find all anagrams of a string in a given list of strings using lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/862", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the occurrences of n most common words in a given text.\n *\n * >>> nCommonWords(\"python is a programming language\", 1)\n * [[\"python\", 1]]\n * >>> nCommonWords(\"python is a programming language\", 1)\n * [[\"python\", 1]]\n * >>> nCommonWords(\"python is a programming language\", 5)\n * [[\"python\", 1], [\"is\", 1], [\"a\", 1], [\"programming\", 1], [\"language\", 1]]\n */\nfunc nCommonWords(text : String, n : Int) -> [[AnyHashable]] {\n", "entry_point": "nCommonWords", "test": "\n\nvar arg00 : String = #\"python is a programming language\"#\nvar arg01 : Int = 1\nvar x0 : [[AnyHashable]] = nCommonWords(text : arg00, n : arg01)\nvar v0 : [[AnyHashable]] = [[#\"python\"#, 1]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"python is a programming language\"#\nvar arg11 : Int = 1\nvar x1 : [[AnyHashable]] = nCommonWords(text : arg10, n : arg11)\nvar v1 : [[AnyHashable]] = [[#\"python\"#, 1]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"python is a programming language\"#\nvar arg21 : Int = 5\nvar x2 : [[AnyHashable]] = nCommonWords(text : arg20, n : arg21)\nvar v2 : [[AnyHashable]] = [[#\"python\"#, 1], [#\"is\"#, 1], [#\"a\"#, 1], [#\"programming\"#, 1], [#\"language\"#, 1]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the occurrences of n most common words in a given text.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/863", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n *\n * >>> findLongestConseqSubseq([1, 2, 2, 3], 4)\n * 3\n * >>> findLongestConseqSubseq([1, 9, 3, 10, 4, 20, 2], 7)\n * 4\n * >>> findLongestConseqSubseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11)\n * 5\n */\nfunc findLongestConseqSubseq(arr : [Int], n : Int) -> Int {\n", "entry_point": "findLongestConseqSubseq", "test": "\n\nvar arg00 : [Int] = [1, 2, 2, 3]\nvar arg01 : Int = 4\nvar x0 : Int = findLongestConseqSubseq(arr : arg00, n : arg01)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 9, 3, 10, 4, 20, 2]\nvar arg11 : Int = 7\nvar x1 : Int = findLongestConseqSubseq(arr : arg10, n : arg11)\nvar v1 : Int = 4\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42]\nvar arg21 : Int = 11\nvar x2 : Int = findLongestConseqSubseq(arr : arg20, n : arg21)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/864", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find palindromes in a given list of strings using lambda function.\n *\n * >>> palindromeLambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])\n * [\"php\", \"aaa\"]\n * >>> palindromeLambda([\"abcd\", \"Python\", \"abba\", \"aba\"])\n * [\"abba\", \"aba\"]\n * >>> palindromeLambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])\n * [\"abbccbba\", \"abba\", \"aba\"]\n */\nfunc palindromeLambda(texts : [String]) -> [String] {\n", "entry_point": "palindromeLambda", "test": "\n\nvar arg00 : [String] = [#\"php\"#, #\"res\"#, #\"Python\"#, #\"abcd\"#, #\"Java\"#, #\"aaa\"#]\nvar x0 : [String] = palindromeLambda(texts : arg00)\nvar v0 : [String] = [#\"php\"#, #\"aaa\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"abcd\"#, #\"Python\"#, #\"abba\"#, #\"aba\"#]\nvar x1 : [String] = palindromeLambda(texts : arg10)\nvar v1 : [String] = [#\"abba\"#, #\"aba\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"abcd\"#, #\"abbccbba\"#, #\"abba\"#, #\"aba\"#]\nvar x2 : [String] = palindromeLambda(texts : arg20)\nvar v2 : [String] = [#\"abbccbba\"#, #\"abba\"#, #\"aba\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find palindromes in a given list of strings using lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/865", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print n-times a list using map function.\n *\n * >>> ntimesList([1, 2, 3, 4, 5, 6, 7], 3)\n * [3, 6, 9, 12, 15, 18, 21]\n * >>> ntimesList([1, 2, 3, 4, 5, 6, 7], 4)\n * [4, 8, 12, 16, 20, 24, 28]\n * >>> ntimesList([1, 2, 3, 4, 5, 6, 7], 10)\n * [10, 20, 30, 40, 50, 60, 70]\n */\nfunc ntimesList(nums : [Int], n : Int) -> [Int] {\n", "entry_point": "ntimesList", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5, 6, 7]\nvar arg01 : Int = 3\nvar x0 : [Int] = ntimesList(nums : arg00, n : arg01)\nvar v0 : [Int] = [3, 6, 9, 12, 15, 18, 21]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5, 6, 7]\nvar arg11 : Int = 4\nvar x1 : [Int] = ntimesList(nums : arg10, n : arg11)\nvar v1 : [Int] = [4, 8, 12, 16, 20, 24, 28]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4, 5, 6, 7]\nvar arg21 : Int = 10\nvar x2 : [Int] = ntimesList(nums : arg20, n : arg21)\nvar v2 : [Int] = [10, 20, 30, 40, 50, 60, 70]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to print n-times a list using map function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/866", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month name contains 31 days or not.\n *\n * >>> checkMonthnumb(\"February\")\n * false\n * >>> checkMonthnumb(\"January\")\n * true\n * >>> checkMonthnumb(\"March\")\n * true\n */\nfunc checkMonthnumb(monthname2 : String) -> Bool {\n", "entry_point": "checkMonthnumb", "test": "\n\nvar arg00 : String = #\"February\"#\nvar x0 : Bool = checkMonthnumb(monthname2 : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"January\"#\nvar x1 : Bool = checkMonthnumb(monthname2 : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"March\"#\nvar x2 : Bool = checkMonthnumb(monthname2 : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check whether the given month name contains 31 days or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/867", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to add a minimum number such that the sum of array becomes even.\n *\n * >>> minNum([1, 2, 3, 4, 5, 6, 7, 8, 9], 9)\n * 1\n * >>> minNum([1, 2, 3, 4, 5, 6, 7, 8], 8)\n * 2\n * >>> minNum([1, 2, 3], 3)\n * 2\n */\nfunc minNum(arr : [Int], n : Int) -> Int {\n", "entry_point": "minNum", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nvar arg01 : Int = 9\nvar x0 : Int = minNum(arr : arg00, n : arg01)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8]\nvar arg11 : Int = 8\nvar x1 : Int = minNum(arr : arg10, n : arg11)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3]\nvar arg21 : Int = 3\nvar x2 : Int = minNum(arr : arg20, n : arg21)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to add a minimum number such that the sum of array becomes even.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/868", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the length of the last word in a given string.\n *\n * >>> lengthOfLastWord(\"python language\")\n * 8\n * >>> lengthOfLastWord(\"PHP\")\n * 3\n * >>> lengthOfLastWord(\"\")\n * 0\n */\nfunc lengthOfLastWord(a : String) -> Int {\n", "entry_point": "lengthOfLastWord", "test": "\n\nvar arg00 : String = #\"python language\"#\nvar x0 : Int = lengthOfLastWord(a : arg00)\nvar v0 : Int = 8\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"PHP\"#\nvar x1 : Int = lengthOfLastWord(a : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"\"#\nvar x2 : Int = lengthOfLastWord(a : arg20)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the length of the last word in a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/869", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove sublists from a given list of lists, which are outside a given range.\n *\n * >>> removeListRange([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 13, 17)\n * [[13, 14, 15, 17]]\n * >>> removeListRange([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 1, 3)\n * [[2], [1, 2, 3]]\n * >>> removeListRange([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 0, 7)\n * [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]\n */\nfunc removeListRange(list1 : [[Int]], leftrange : Int, rigthrange : Int) -> [[Int]] {\n", "entry_point": "removeListRange", "test": "\n\nvar arg00 : [[Int]] = [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]]\nvar arg01 : Int = 13\nvar arg02 : Int = 17\nvar x0 : [[Int]] = removeListRange(list1 : arg00, leftrange : arg01, rigthrange : arg02)\nvar v0 : [[Int]] = [[13, 14, 15, 17]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]]\nvar arg11 : Int = 1\nvar arg12 : Int = 3\nvar x1 : [[Int]] = removeListRange(list1 : arg10, leftrange : arg11, rigthrange : arg12)\nvar v1 : [[Int]] = [[2], [1, 2, 3]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]]\nvar arg21 : Int = 0\nvar arg22 : Int = 7\nvar x2 : [[Int]] = removeListRange(list1 : arg20, leftrange : arg21, rigthrange : arg22)\nvar v2 : [[Int]] = [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove sublists from a given list of lists, which are outside a given range.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/870", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n *\n * >>> sumPositivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n * 48\n * >>> sumPositivenum([10, 15, -14, 13, -18, 12, -20])\n * 50\n * >>> sumPositivenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190])\n * 522\n */\nfunc sumPositivenum(nums : [Int]) -> Int {\n", "entry_point": "sumPositivenum", "test": "\n\nvar arg00 : [Int] = [2, 4, -6, -9, 11, -12, 14, -5, 17]\nvar x0 : Int = sumPositivenum(nums : arg00)\nvar v0 : Int = 48\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [10, 15, -14, 13, -18, 12, -20]\nvar x1 : Int = sumPositivenum(nums : arg10)\nvar v1 : Int = 50\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [19, -65, 57, 39, 152, -639, 121, 44, 90, -190]\nvar x2 : Int = sumPositivenum(nums : arg20)\nvar v2 : Int = 522\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/871", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given strings are rotations of each other or not.\n *\n * >>> areRotations(\"abc\", \"cba\")\n * false\n * >>> areRotations(\"abcd\", \"cdba\")\n * false\n * >>> areRotations(\"abacd\", \"cdaba\")\n * true\n */\nfunc areRotations(string1 : String, string2 : String) -> Bool {\n", "entry_point": "areRotations", "test": "\n\nvar arg00 : String = #\"abc\"#\nvar arg01 : String = #\"cba\"#\nvar x0 : Bool = areRotations(string1 : arg00, string2 : arg01)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"abcd\"#\nvar arg11 : String = #\"cdba\"#\nvar x1 : Bool = areRotations(string1 : arg10, string2 : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"abacd\"#\nvar arg21 : String = #\"cdaba\"#\nvar x2 : Bool = areRotations(string1 : arg20, string2 : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the given strings are rotations of each other or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/872", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a nested list is a subset of another nested list.\n *\n * >>> checkSubset([[1, 3], [5, 7], [9, 11], [13, 15, 17]], [[1, 3], [13, 15, 17]])\n * true\n * >>> checkSubset([[1, 2], [2, 3], [3, 4], [5, 6]], [[3, 4], [5, 6]])\n * true\n * >>> checkSubset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]], [[[3, 4], [5, 6]]])\n * false\n */\nfunc checkSubset(list1 : [[AnyHashable]], list2 : [[AnyHashable]]) -> Bool {\n", "entry_point": "checkSubset", "test": "\n\nvar arg00 : [[AnyHashable]] = [[1, 3], [5, 7], [9, 11], [13, 15, 17]]\nvar arg01 : [[AnyHashable]] = [[1, 3], [13, 15, 17]]\nvar x0 : Bool = checkSubset(list1 : arg00, list2 : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[1, 2], [2, 3], [3, 4], [5, 6]]\nvar arg11 : [[AnyHashable]] = [[3, 4], [5, 6]]\nvar x1 : Bool = checkSubset(list1 : arg10, list2 : arg11)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[[1, 2], [2, 3]], [[3, 4], [5, 7]]]\nvar arg21 : [[AnyHashable]] = [[[3, 4], [5, 6]]]\nvar x2 : Bool = checkSubset(list1 : arg20, list2 : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if a nested list is a subset of another nested list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/873", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to solve the fibonacci sequence using recursion.\n *\n * >>> fibonacci(7)\n * 13\n * >>> fibonacci(8)\n * 21\n * >>> fibonacci(9)\n * 34\n */\nfunc fibonacci(n : Int) -> Int {\n", "entry_point": "fibonacci", "test": "\n\nvar arg00 : Int = 7\nvar x0 : Int = fibonacci(n : arg00)\nvar v0 : Int = 13\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 8\nvar x1 : Int = fibonacci(n : arg10)\nvar v1 : Int = 21\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 9\nvar x2 : Int = fibonacci(n : arg20)\nvar v2 : Int = 34\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to solve the fibonacci sequence using recursion.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/874", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if the string is a concatenation of another string.\n *\n * >>> checkConcat(\"abcabcabc\", \"abc\")\n * true\n * >>> checkConcat(\"abcab\", \"abc\")\n * false\n * >>> checkConcat(\"aba\", \"ab\")\n * false\n */\nfunc checkConcat(str1 : String, str2 : String) -> Bool {\n", "entry_point": "checkConcat", "test": "\n\nvar arg00 : String = #\"abcabcabc\"#\nvar arg01 : String = #\"abc\"#\nvar x0 : Bool = checkConcat(str1 : arg00, str2 : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"abcab\"#\nvar arg11 : String = #\"abc\"#\nvar x1 : Bool = checkConcat(str1 : arg10, str2 : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"aba\"#\nvar arg21 : String = #\"ab\"#\nvar x2 : Bool = checkConcat(str1 : arg20, str2 : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check if the string is a concatenation of another string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/875", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the minimum difference in the tuple pairs of given tuples.\n *\n * >>> minDifference([[3, 5], [1, 7], [10, 3], [1, 2]])\n * 1\n * >>> minDifference([[4, 6], [12, 8], [11, 4], [2, 13]])\n * 2\n * >>> minDifference([[5, 17], [3, 9], [12, 5], [3, 24]])\n * 6\n */\nfunc minDifference(testList : [[Int]]) -> Int {\n", "entry_point": "minDifference", "test": "\n\nvar arg00 : [[Int]] = [[3, 5], [1, 7], [10, 3], [1, 2]]\nvar x0 : Int = minDifference(testList : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[4, 6], [12, 8], [11, 4], [2, 13]]\nvar x1 : Int = minDifference(testList : arg10)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[5, 17], [3, 9], [12, 5], [3, 24]]\nvar x2 : Int = minDifference(testList : arg20)\nvar v2 : Int = 6\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the minimum difference in the tuple pairs of given tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/876", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find lcm of two positive integers.\n *\n * >>> lcm(4, 6)\n * 12\n * >>> lcm(15, 17)\n * 255\n * >>> lcm(2, 6)\n * 6\n */\nfunc lcm(x : Int, y : Int) -> Int {\n", "entry_point": "lcm", "test": "\n\nvar arg00 : Int = 4\nvar arg01 : Int = 6\nvar x0 : Int = lcm(x : arg00, y : arg01)\nvar v0 : Int = 12\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 15\nvar arg11 : Int = 17\nvar x1 : Int = lcm(x : arg10, y : arg11)\nvar v1 : Int = 255\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar arg21 : Int = 6\nvar x2 : Int = lcm(x : arg20, y : arg21)\nvar v2 : Int = 6\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find lcm of two positive integers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/877", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to sort the given string.\n *\n * >>> sortString(\"cba\")\n * \"abc\"\n * >>> sortString(\"data\")\n * \"aadt\"\n * >>> sortString(\"zxy\")\n * \"xyz\"\n */\nfunc sortString(str : String) -> String {\n", "entry_point": "sortString", "test": "\n\nvar arg00 : String = #\"cba\"#\nvar x0 : String = sortString(str : arg00)\nvar v0 : String = #\"abc\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"data\"#\nvar x1 : String = sortString(str : arg10)\nvar v1 : String = #\"aadt\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"zxy\"#\nvar x2 : String = sortString(str : arg20)\nvar v2 : String = #\"xyz\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to sort the given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/878", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given tuple contains only k elements.\n *\n * >>> checkTuples([3, 5, 6, 5, 3, 6], [3, 6, 5])\n * true\n * >>> checkTuples([4, 5, 6, 4, 6, 5], [4, 5, 6])\n * true\n * >>> checkTuples([9, 8, 7, 6, 8, 9], [9, 8, 1])\n * false\n */\nfunc checkTuples(testTuple : [Int], k : [Int]) -> Bool {\n", "entry_point": "checkTuples", "test": "\n\nvar arg00 : [Int] = [3, 5, 6, 5, 3, 6]\nvar arg01 : [Int] = [3, 6, 5]\nvar x0 : Bool = checkTuples(testTuple : arg00, k : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 5, 6, 4, 6, 5]\nvar arg11 : [Int] = [4, 5, 6]\nvar x1 : Bool = checkTuples(testTuple : arg10, k : arg11)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [9, 8, 7, 6, 8, 9]\nvar arg21 : [Int] = [9, 8, 1]\nvar x2 : Bool = checkTuples(testTuple : arg20, k : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if the given tuple contains only k elements.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/879", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n *\n * >>> textMatch(\"aabbbbd\")\n * \"Not matched!\"\n * >>> textMatch(\"aabAbbbc\")\n * \"Not matched!\"\n * >>> textMatch(\"accddbbjjjb\")\n * \"Found a match!\"\n */\nfunc textMatch(text : String) -> String {\n", "entry_point": "textMatch", "test": "\n\nvar arg00 : String = #\"aabbbbd\"#\nvar x0 : String = textMatch(text : arg00)\nvar v0 : String = #\"Not matched!\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"aabAbbbc\"#\nvar x1 : String = textMatch(text : arg10)\nvar v1 : String = #\"Not matched!\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"accddbbjjjb\"#\nvar x2 : String = textMatch(text : arg20)\nvar v2 : String = #\"Found a match!\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/880", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find number of solutions in quadratic equation.\n *\n * >>> checkSolution(2, 5, 2)\n * \"2 solutions\"\n * >>> checkSolution(1, 1, 1)\n * \"No solutions\"\n * >>> checkSolution(1, 2, 1)\n * \"1 solution\"\n */\nfunc checkSolution(a : Int, b : Int, c : Int) -> String {\n", "entry_point": "checkSolution", "test": "\n\nvar arg00 : Int = 2\nvar arg01 : Int = 5\nvar arg02 : Int = 2\nvar x0 : String = checkSolution(a : arg00, b : arg01, c : arg02)\nvar v0 : String = #\"2 solutions\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1\nvar arg11 : Int = 1\nvar arg12 : Int = 1\nvar x1 : String = checkSolution(a : arg10, b : arg11, c : arg12)\nvar v1 : String = #\"No solutions\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar arg21 : Int = 2\nvar arg22 : Int = 1\nvar x2 : String = checkSolution(a : arg20, b : arg21, c : arg22)\nvar v2 : String = #\"1 solution\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find number of solutions in quadratic equation.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/881", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sum of first even and odd number of a given list.\n *\n * >>> sumEvenOdd([1, 3, 5, 7, 4, 1, 6, 8])\n * 5\n * >>> sumEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * 3\n * >>> sumEvenOdd([1, 5, 7, 9, 10])\n * 11\n */\nfunc sumEvenOdd(list1 : [Int]) -> Int {\n", "entry_point": "sumEvenOdd", "test": "\n\nvar arg00 : [Int] = [1, 3, 5, 7, 4, 1, 6, 8]\nvar x0 : Int = sumEvenOdd(list1 : arg00)\nvar v0 : Int = 5\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar x1 : Int = sumEvenOdd(list1 : arg10)\nvar v1 : Int = 3\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 5, 7, 9, 10]\nvar x2 : Int = sumEvenOdd(list1 : arg20)\nvar v2 : Int = 11\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the sum of first even and odd number of a given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/882", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate perimeter of a parallelogram.\n *\n * >>> parallelogramPerimeter(10, 20)\n * 400\n * >>> parallelogramPerimeter(15, 20)\n * 600\n * >>> parallelogramPerimeter(8, 9)\n * 144\n */\nfunc parallelogramPerimeter(b : Int, h : Int) -> Int {\n", "entry_point": "parallelogramPerimeter", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 20\nvar x0 : Int = parallelogramPerimeter(b : arg00, h : arg01)\nvar v0 : Int = 400\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 15\nvar arg11 : Int = 20\nvar x1 : Int = parallelogramPerimeter(b : arg10, h : arg11)\nvar v1 : Int = 600\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 8\nvar arg21 : Int = 9\nvar x2 : Int = parallelogramPerimeter(b : arg20, h : arg21)\nvar v2 : Int = 144\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to caluclate perimeter of a parallelogram.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/883", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\n *\n * >>> divOfNums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 2, 4)\n * [152, 44]\n * >>> divOfNums([1, 2, 3, 5, 7, 8, 10], 2, 5)\n * [10]\n * >>> divOfNums([10, 15, 14, 13, 18, 12, 20], 10, 5)\n * [10, 20]\n */\nfunc divOfNums(nums : [Int], m : Int, n : Int) -> [Int] {\n", "entry_point": "divOfNums", "test": "\n\nvar arg00 : [Int] = [19, 65, 57, 39, 152, 639, 121, 44, 90, 190]\nvar arg01 : Int = 2\nvar arg02 : Int = 4\nvar x0 : [Int] = divOfNums(nums : arg00, m : arg01, n : arg02)\nvar v0 : [Int] = [152, 44]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 5, 7, 8, 10]\nvar arg11 : Int = 2\nvar arg12 : Int = 5\nvar x1 : [Int] = divOfNums(nums : arg10, m : arg11, n : arg12)\nvar v1 : [Int] = [10]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [10, 15, 14, 13, 18, 12, 20]\nvar arg21 : Int = 10\nvar arg22 : Int = 5\nvar x2 : [Int] = divOfNums(nums : arg20, m : arg21, n : arg22)\nvar v2 : [Int] = [10, 20]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/884", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether all the bits are within a given range or not.\n *\n * >>> allBitsSetInTheGivenRange(10, 2, 1)\n * true\n * >>> allBitsSetInTheGivenRange(5, 2, 4)\n * false\n * >>> allBitsSetInTheGivenRange(22, 2, 3)\n * true\n */\nfunc allBitsSetInTheGivenRange(n : Int, l : Int, r : Int) -> Bool {\n", "entry_point": "allBitsSetInTheGivenRange", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 2\nvar arg02 : Int = 1\nvar x0 : Bool = allBitsSetInTheGivenRange(n : arg00, l : arg01, r : arg02)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar arg11 : Int = 2\nvar arg12 : Int = 4\nvar x1 : Bool = allBitsSetInTheGivenRange(n : arg10, l : arg11, r : arg12)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 22\nvar arg21 : Int = 2\nvar arg22 : Int = 3\nvar x2 : Bool = allBitsSetInTheGivenRange(n : arg20, l : arg21, r : arg22)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether all the bits are within a given range or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/885", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the two given strings are isomorphic to each other or not.\n *\n * >>> isIsomorphic(\"paper\", \"title\")\n * true\n * >>> isIsomorphic(\"ab\", \"ba\")\n * true\n * >>> isIsomorphic(\"ab\", \"aa\")\n * false\n */\nfunc isIsomorphic(str1 : String, str2 : String) -> Bool {\n", "entry_point": "isIsomorphic", "test": "\n\nvar arg00 : String = #\"paper\"#\nvar arg01 : String = #\"title\"#\nvar x0 : Bool = isIsomorphic(str1 : arg00, str2 : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"ab\"#\nvar arg11 : String = #\"ba\"#\nvar x1 : Bool = isIsomorphic(str1 : arg10, str2 : arg11)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"ab\"#\nvar arg21 : String = #\"aa\"#\nvar x2 : Bool = isIsomorphic(str1 : arg20, str2 : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the two given strings are isomorphic to each other or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/886", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add all the numbers in a list and divide it with the length of the list.\n *\n * >>> sumNum([8, 2, 3, 0, 7])\n * 4.0\n * >>> sumNum([-10, -20, -30])\n * -20.0\n * >>> sumNum([19, 15, 18])\n * 17.333333333333332\n */\nfunc sumNum(numbers : [Int]) -> Double {\n", "entry_point": "sumNum", "test": "\n\nvar arg00 : [Int] = [8, 2, 3, 0, 7]\nvar x0 : Double = sumNum(numbers : arg00)\nvar v0 : Double = 4.0\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [-10, -20, -30]\nvar x1 : Double = sumNum(numbers : arg10)\nvar v1 : Double = -20.0\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [19, 15, 18]\nvar x2 : Double = sumNum(numbers : arg20)\nvar v2 : Double = 17.333333333333332\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to add all the numbers in a list and divide it with the length of the list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/887", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given number is odd or not using bitwise operator.\n *\n * >>> isOdd(5)\n * true\n * >>> isOdd(6)\n * false\n * >>> isOdd(7)\n * true\n */\nfunc isOdd(n : Int) -> Bool {\n", "entry_point": "isOdd", "test": "\n\nvar arg00 : Int = 5\nvar x0 : Bool = isOdd(n : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 6\nvar x1 : Bool = isOdd(n : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 7\nvar x2 : Bool = isOdd(n : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the given number is odd or not using bitwise operator.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/888", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to substract the elements of the given nested tuples.\n *\n * >>> substractElements([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n * [[-5, -4], [1, -4], [1, 8], [-6, 7]]\n * >>> substractElements([[13, 4], [14, 6], [13, 10], [12, 11]], [[19, 8], [14, 10], [12, 2], [18, 4]])\n * [[-6, -4], [0, -4], [1, 8], [-6, 7]]\n * >>> substractElements([[19, 5], [18, 7], [19, 11], [17, 12]], [[12, 9], [17, 11], [13, 3], [19, 5]])\n * [[7, -4], [1, -4], [6, 8], [-2, 7]]\n */\nfunc substractElements(testTup1 : [[Int]], testTup2 : [[Int]]) -> [[Int]] {\n", "entry_point": "substractElements", "test": "\n\nvar arg00 : [[Int]] = [[1, 3], [4, 5], [2, 9], [1, 10]]\nvar arg01 : [[Int]] = [[6, 7], [3, 9], [1, 1], [7, 3]]\nvar x0 : [[Int]] = substractElements(testTup1 : arg00, testTup2 : arg01)\nvar v0 : [[Int]] = [[-5, -4], [1, -4], [1, 8], [-6, 7]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[13, 4], [14, 6], [13, 10], [12, 11]]\nvar arg11 : [[Int]] = [[19, 8], [14, 10], [12, 2], [18, 4]]\nvar x1 : [[Int]] = substractElements(testTup1 : arg10, testTup2 : arg11)\nvar v1 : [[Int]] = [[-6, -4], [0, -4], [1, 8], [-6, 7]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[19, 5], [18, 7], [19, 11], [17, 12]]\nvar arg21 : [[Int]] = [[12, 9], [17, 11], [13, 3], [19, 5]]\nvar x2 : [[Int]] = substractElements(testTup1 : arg20, testTup2 : arg21)\nvar v2 : [[Int]] = [[7, -4], [1, -4], [6, 8], [-2, 7]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to substract the elements of the given nested tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/889", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to reverse each list in a given list of lists.\n *\n * >>> reverseListLists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])\n * [[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\n * >>> reverseListLists([[1, 2], [2, 3], [3, 4]])\n * [[2, 1], [3, 2], [4, 3]]\n * >>> reverseListLists([[10, 20], [30, 40]])\n * [[20, 10], [40, 30]]\n */\nfunc reverseListLists(lists : [[Int]]) -> [[Int]] {\n", "entry_point": "reverseListLists", "test": "\n\nvar arg00 : [[Int]] = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\nvar x0 : [[Int]] = reverseListLists(lists : arg00)\nvar v0 : [[Int]] = [[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[1, 2], [2, 3], [3, 4]]\nvar x1 : [[Int]] = reverseListLists(lists : arg10)\nvar v1 : [[Int]] = [[2, 1], [3, 2], [4, 3]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[10, 20], [30, 40]]\nvar x2 : [[Int]] = reverseListLists(lists : arg20)\nvar v2 : [[Int]] = [[20, 10], [40, 30]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to reverse each list in a given list of lists.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/890", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the index of an extra element present in one sorted array.\n *\n * >>> findExtra([1, 2, 3, 4], [1, 2, 3], 3)\n * 3\n * >>> findExtra([2, 4, 6, 8, 10], [2, 4, 6, 8], 4)\n * 4\n * >>> findExtra([1, 3, 5, 7, 9, 11], [1, 3, 5, 7, 9], 5)\n * 5\n */\nfunc findExtra(arr1 : [Int], arr2 : [Int], n : Int) -> Int {\n", "entry_point": "findExtra", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4]\nvar arg01 : [Int] = [1, 2, 3]\nvar arg02 : Int = 3\nvar x0 : Int = findExtra(arr1 : arg00, arr2 : arg01, n : arg02)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 4, 6, 8, 10]\nvar arg11 : [Int] = [2, 4, 6, 8]\nvar arg12 : Int = 4\nvar x1 : Int = findExtra(arr1 : arg10, arr2 : arg11, n : arg12)\nvar v1 : Int = 4\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 3, 5, 7, 9, 11]\nvar arg21 : [Int] = [1, 3, 5, 7, 9]\nvar arg22 : Int = 5\nvar x2 : Int = findExtra(arr1 : arg20, arr2 : arg21, n : arg22)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the index of an extra element present in one sorted array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/891", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given two numbers have same number of digits or not.\n *\n * >>> sameLength(12, 1)\n * false\n * >>> sameLength(2, 2)\n * true\n * >>> sameLength(10, 20)\n * true\n */\nfunc sameLength(a : Int, b : Int) -> Bool {\n", "entry_point": "sameLength", "test": "\n\nvar arg00 : Int = 12\nvar arg01 : Int = 1\nvar x0 : Bool = sameLength(a : arg00, b : arg01)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar arg11 : Int = 2\nvar x1 : Bool = sameLength(a : arg10, b : arg11)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 10\nvar arg21 : Int = 20\nvar x2 : Bool = sameLength(a : arg20, b : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the given two numbers have same number of digits or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/892", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove multiple spaces in a string.\n *\n * >>> removeSpaces(\"python  program\")\n * \"python program\"\n * >>> removeSpaces(\"python   programming    language\")\n * \"python programming language\"\n * >>> removeSpaces(\"python                     program\")\n * \"python program\"\n */\nfunc removeSpaces(text : String) -> String {\n", "entry_point": "removeSpaces", "test": "\n\nvar arg00 : String = #\"python  program\"#\nvar x0 : String = removeSpaces(text : arg00)\nvar v0 : String = #\"python program\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"python   programming    language\"#\nvar x1 : String = removeSpaces(text : arg10)\nvar v1 : String = #\"python programming language\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"python                     program\"#\nvar x2 : String = removeSpaces(text : arg20)\nvar v2 : String = #\"python program\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove multiple spaces in a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/893", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to get the last element of each sublist.\n *\n * >>> extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]])\n * [3, 5, 9]\n * >>> extract([[\"x\", \"y\", \"z\"], [\"m\"], [\"a\", \"b\"], [\"u\", \"v\"]])\n * [\"z\", \"m\", \"b\", \"v\"]\n * >>> extract([[1, 2, 3], [4, 5]])\n * [3, 5]\n */\nfunc extract(lst : [[AnyHashable]]) -> [AnyHashable] {\n", "entry_point": "extract", "test": "\n\nvar arg00 : [[AnyHashable]] = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\nvar x0 : [AnyHashable] = extract(lst : arg00)\nvar v0 : [AnyHashable] = [3, 5, 9]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[#\"x\"#, #\"y\"#, #\"z\"#], [#\"m\"#], [#\"a\"#, #\"b\"#], [#\"u\"#, #\"v\"#]]\nvar x1 : [AnyHashable] = extract(lst : arg10)\nvar v1 : [AnyHashable] = [#\"z\"#, #\"m\"#, #\"b\"#, #\"v\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[1, 2, 3], [4, 5]]\nvar x2 : [AnyHashable] = extract(lst : arg20)\nvar v2 : [AnyHashable] = [3, 5]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to get the last element of each sublist.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/894", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given string of float type into tuple.\n *\n * >>> floatToTuple(\"1.2, 1.3, 2.3, 2.4, 6.5\")\n * [1.2, 1.3, 2.3, 2.4, 6.5]\n * >>> floatToTuple(\"2.3, 2.4, 5.6, 5.4, 8.9\")\n * [2.3, 2.4, 5.6, 5.4, 8.9]\n * >>> floatToTuple(\"0.3, 0.5, 7.8, 9.4\")\n * [0.3, 0.5, 7.8, 9.4]\n */\nfunc floatToTuple(testStr : String) -> [Double] {\n", "entry_point": "floatToTuple", "test": "\n\nvar arg00 : String = #\"1.2, 1.3, 2.3, 2.4, 6.5\"#\nvar x0 : [Double] = floatToTuple(testStr : arg00)\nvar v0 : [Double] = [1.2, 1.3, 2.3, 2.4, 6.5]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"2.3, 2.4, 5.6, 5.4, 8.9\"#\nvar x1 : [Double] = floatToTuple(testStr : arg10)\nvar v1 : [Double] = [2.3, 2.4, 5.6, 5.4, 8.9]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"0.3, 0.5, 7.8, 9.4\"#\nvar x2 : [Double] = floatToTuple(testStr : arg20)\nvar v2 : [Double] = [0.3, 0.5, 7.8, 9.4]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert the given string of float type into tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/895", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\n *\n * >>> maxSumSubseq([1, 2, 9, 4, 5, 0, 4, 11, 6])\n * 26\n * >>> maxSumSubseq([1, 2, 9, 5, 6, 0, 5, 12, 7])\n * 28\n * >>> maxSumSubseq([1, 3, 10, 5, 6, 0, 6, 14, 21])\n * 44\n */\nfunc maxSumSubseq(a : [Int]) -> Int {\n", "entry_point": "maxSumSubseq", "test": "\n\nvar arg00 : [Int] = [1, 2, 9, 4, 5, 0, 4, 11, 6]\nvar x0 : Int = maxSumSubseq(a : arg00)\nvar v0 : Int = 26\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 9, 5, 6, 0, 5, 12, 7]\nvar x1 : Int = maxSumSubseq(a : arg10)\nvar v1 : Int = 28\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 3, 10, 5, 6, 0, 6, 14, 21]\nvar x2 : Int = maxSumSubseq(a : arg20)\nvar v2 : Int = 44\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/896", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n *\n * >>> sortListLast([[2, 5], [1, 2], [4, 4], [2, 3], [2, 1]])\n * [[2, 1], [1, 2], [2, 3], [4, 4], [2, 5]]\n * >>> sortListLast([[9, 8], [4, 7], [3, 5], [7, 9], [1, 2]])\n * [[1, 2], [3, 5], [4, 7], [9, 8], [7, 9]]\n * >>> sortListLast([[20, 50], [10, 20], [40, 40]])\n * [[10, 20], [40, 40], [20, 50]]\n */\nfunc sortListLast(tuples : [[Int]]) -> [[Int]] {\n", "entry_point": "sortListLast", "test": "\n\nvar arg00 : [[Int]] = [[2, 5], [1, 2], [4, 4], [2, 3], [2, 1]]\nvar x0 : [[Int]] = sortListLast(tuples : arg00)\nvar v0 : [[Int]] = [[2, 1], [1, 2], [2, 3], [4, 4], [2, 5]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[9, 8], [4, 7], [3, 5], [7, 9], [1, 2]]\nvar x1 : [[Int]] = sortListLast(tuples : arg10)\nvar v1 : [[Int]] = [[1, 2], [3, 5], [4, 7], [9, 8], [7, 9]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[20, 50], [10, 20], [40, 40]]\nvar x2 : [[Int]] = sortListLast(tuples : arg20)\nvar v2 : [[Int]] = [[10, 20], [40, 40], [20, 50]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/897", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the word is present in a given sentence or not.\n *\n * >>> isWordPresent(\"machine learning\", \"machine\")\n * true\n * >>> isWordPresent(\"easy\", \"fun\")\n * false\n * >>> isWordPresent(\"python language\", \"code\")\n * false\n */\nfunc isWordPresent(sentence : String, word : String) -> Bool {\n", "entry_point": "isWordPresent", "test": "\n\nvar arg00 : String = #\"machine learning\"#\nvar arg01 : String = #\"machine\"#\nvar x0 : Bool = isWordPresent(sentence : arg00, word : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"easy\"#\nvar arg11 : String = #\"fun\"#\nvar x1 : Bool = isWordPresent(sentence : arg10, word : arg11)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"python language\"#\nvar arg21 : String = #\"code\"#\nvar x2 : Bool = isWordPresent(sentence : arg20, word : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the word is present in a given sentence or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/898", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n *\n * >>> extractElements([1, 1, 3, 4, 4, 5, 6, 7], 2)\n * [1, 4]\n * >>> extractElements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7], 4)\n * [4]\n * >>> extractElements([0, 0, 0, 0, 0], 5)\n * [0]\n */\nfunc extractElements(numbers : [Int], n : Int) -> [Int] {\n", "entry_point": "extractElements", "test": "\n\nvar arg00 : [Int] = [1, 1, 3, 4, 4, 5, 6, 7]\nvar arg01 : Int = 2\nvar x0 : [Int] = extractElements(numbers : arg00, n : arg01)\nvar v0 : [Int] = [1, 4]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [0, 1, 2, 3, 4, 4, 4, 4, 5, 7]\nvar arg11 : Int = 4\nvar x1 : [Int] = extractElements(numbers : arg10, n : arg11)\nvar v1 : [Int] = [4]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [0, 0, 0, 0, 0]\nvar arg21 : Int = 5\nvar x2 : [Int] = extractElements(numbers : arg20, n : arg21)\nvar v2 : [Int] = [0]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract specified number of elements from a given list, which follow each other continuously.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/899", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether an array can be sorted or not by picking only the corner elements.\n *\n * >>> check([3, 2, 1, 2, 3, 4], 6)\n * true\n * >>> check([2, 1, 4, 5, 1], 5)\n * true\n * >>> check([1, 2, 2, 1, 2, 3], 6)\n * true\n */\nfunc check(arr : [Int], n : Int) -> Bool {\n", "entry_point": "check", "test": "\n\nvar arg00 : [Int] = [3, 2, 1, 2, 3, 4]\nvar arg01 : Int = 6\nvar x0 : Bool = check(arr : arg00, n : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 1, 4, 5, 1]\nvar arg11 : Int = 5\nvar x1 : Bool = check(arr : arg10, n : arg11)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 2, 1, 2, 3]\nvar arg21 : Int = 6\nvar x2 : Bool = check(arr : arg20, n : arg21)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether an array can be sorted or not by picking only the corner elements.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/900", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function where a string will start with a specific number.\n *\n * >>> matchNum(\"5-2345861\")\n * true\n * >>> matchNum(\"6-2345861\")\n * false\n * >>> matchNum(\"78910\")\n * false\n */\nfunc matchNum(string : String) -> Bool {\n", "entry_point": "matchNum", "test": "\n\nvar arg00 : String = #\"5-2345861\"#\nvar x0 : Bool = matchNum(string : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"6-2345861\"#\nvar x1 : Bool = matchNum(string : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"78910\"#\nvar x2 : Bool = matchNum(string : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function where a string will start with a specific number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/901", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the smallest multiple of the first n numbers.\n *\n * >>> smallestMultiple(13)\n * 360360\n * >>> smallestMultiple(2)\n * 2\n * >>> smallestMultiple(1)\n * 1\n */\nfunc smallestMultiple(n : Int) -> Int {\n", "entry_point": "smallestMultiple", "test": "\n\nvar arg00 : Int = 13\nvar x0 : Int = smallestMultiple(n : arg00)\nvar v0 : Int = 360360\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 2\nvar x1 : Int = smallestMultiple(n : arg10)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1\nvar x2 : Int = smallestMultiple(n : arg20)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the smallest multiple of the first n numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/902", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to combine two dictionaries by adding values for common keys.\n *\n * >>> addDict([\"a\" : 100, \"b\" : 200, \"c\" : 300], [\"a\" : 300, \"b\" : 200, \"d\" : 400])\n * [\"b\" : 400, \"d\" : 400, \"a\" : 400, \"c\" : 300]\n * >>> addDict([\"a\" : 500, \"b\" : 700, \"c\" : 900], [\"a\" : 500, \"b\" : 600, \"d\" : 900])\n * [\"b\" : 1300, \"d\" : 900, \"a\" : 1000, \"c\" : 900]\n * >>> addDict([\"a\" : 900, \"b\" : 900, \"d\" : 900], [\"a\" : 900, \"b\" : 900, \"d\" : 900])\n * [\"b\" : 1800, \"d\" : 1800, \"a\" : 1800]\n */\nfunc addDict(d1 : [String: Int], d2 : [String: Int]) -> [String: Int] {\n", "entry_point": "addDict", "test": "\n\nvar arg00 : [String: Int] = [#\"a\"# : 100, #\"b\"# : 200, #\"c\"# : 300]\nvar arg01 : [String: Int] = [#\"a\"# : 300, #\"b\"# : 200, #\"d\"# : 400]\nvar x0 : [String: Int] = addDict(d1 : arg00, d2 : arg01)\nvar v0 : [String: Int] = [#\"b\"# : 400, #\"d\"# : 400, #\"a\"# : 400, #\"c\"# : 300]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String: Int] = [#\"a\"# : 500, #\"b\"# : 700, #\"c\"# : 900]\nvar arg11 : [String: Int] = [#\"a\"# : 500, #\"b\"# : 600, #\"d\"# : 900]\nvar x1 : [String: Int] = addDict(d1 : arg10, d2 : arg11)\nvar v1 : [String: Int] = [#\"b\"# : 1300, #\"d\"# : 900, #\"a\"# : 1000, #\"c\"# : 900]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String: Int] = [#\"a\"# : 900, #\"b\"# : 900, #\"d\"# : 900]\nvar arg21 : [String: Int] = [#\"a\"# : 900, #\"b\"# : 900, #\"d\"# : 900]\nvar x2 : [String: Int] = addDict(d1 : arg20, d2 : arg21)\nvar v2 : [String: Int] = [#\"b\"# : 1800, #\"d\"# : 1800, #\"a\"# : 1800]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to combine two dictionaries by adding values for common keys.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/903", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the total unset bits from 1 to n.\n *\n * >>> countUnsetBits(2)\n * 1\n * >>> countUnsetBits(5)\n * 4\n * >>> countUnsetBits(14)\n * 17\n */\nfunc countUnsetBits(n : Int) -> Int {\n", "entry_point": "countUnsetBits", "test": "\n\nvar arg00 : Int = 2\nvar x0 : Int = countUnsetBits(n : arg00)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar x1 : Int = countUnsetBits(n : arg10)\nvar v1 : Int = 4\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 14\nvar x2 : Int = countUnsetBits(n : arg20)\nvar v2 : Int = 17\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to count the total unset bits from 1 to n.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/904", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to return true if the given number is even else return false.\n *\n * >>> evenNum(13.5)\n * false\n * >>> evenNum(0)\n * true\n * >>> evenNum(-9)\n * false\n */\nfunc evenNum(x : Double) -> Bool {\n", "entry_point": "evenNum", "test": "\n\nvar arg00 : Double = 13.5\nvar x0 : Bool = evenNum(x : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Double = 0\nvar x1 : Bool = evenNum(x : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Double = -9\nvar x2 : Bool = evenNum(x : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to return true if the given number is even else return false.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/905", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of squares of binomial co-efficients.\n *\n * >>> sumOfSquare(4)\n * 70\n * >>> sumOfSquare(5)\n * 252\n * >>> sumOfSquare(2)\n * 6\n */\nfunc sumOfSquare(n : Int) -> Int {\n", "entry_point": "sumOfSquare", "test": "\n\nvar arg00 : Int = 4\nvar x0 : Int = sumOfSquare(n : arg00)\nvar v0 : Int = 70\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar x1 : Int = sumOfSquare(n : arg10)\nvar v1 : Int = 252\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar x2 : Int = sumOfSquare(n : arg20)\nvar v2 : Int = 6\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of squares of binomial co-efficients.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/906", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract year, month and date from a url by using regex.\n *\n * >>> extractDate(\"https:\\/\\/www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\")\n * [[\"2016\", \"09\", \"02\"]]\n * >>> extractDate(\"https:\\/\\/www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\")\n * [[\"2020\", \"11\", \"03\"]]\n * >>> extractDate(\"https:\\/\\/economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\")\n * [[\"2020\", \"12\", \"29\"]]\n */\nfunc extractDate(url : String) -> [[String]] {\n", "entry_point": "extractDate", "test": "\n\nvar arg00 : String = #\"https:\\/\\/www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\"#\nvar x0 : [[String]] = extractDate(url : arg00)\nvar v0 : [[String]] = [[#\"2016\"#, #\"09\"#, #\"02\"#]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"https:\\/\\/www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\"#\nvar x1 : [[String]] = extractDate(url : arg10)\nvar v1 : [[String]] = [[#\"2020\"#, #\"11\"#, #\"03\"#]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"https:\\/\\/economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\"#\nvar x2 : [[String]] = extractDate(url : arg20)\nvar v2 : [[String]] = [[#\"2020\"#, #\"12\"#, #\"29\"#]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to extract year, month and date from a url by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/907", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print the first n lucky numbers.\n *\n * >>> luckyNum(10)\n * [1, 3, 7, 9, 13, 15, 21, 25, 31, 33]\n * >>> luckyNum(5)\n * [1, 3, 7, 9, 13]\n * >>> luckyNum(8)\n * [1, 3, 7, 9, 13, 15, 21, 25]\n */\nfunc luckyNum(n : Int) -> [Int] {\n", "entry_point": "luckyNum", "test": "\n\nvar arg00 : Int = 10\nvar x0 : [Int] = luckyNum(n : arg00)\nvar v0 : [Int] = [1, 3, 7, 9, 13, 15, 21, 25, 31, 33]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar x1 : [Int] = luckyNum(n : arg10)\nvar v1 : [Int] = [1, 3, 7, 9, 13]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 8\nvar x2 : [Int] = luckyNum(n : arg20)\nvar v2 : [Int] = [1, 3, 7, 9, 13, 15, 21, 25]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to print the first n lucky numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/908", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the fixed point in the given array.\n *\n * >>> findFixedPoint([-10, -1, 0, 3, 10, 11, 30, 50, 100], 9)\n * 3\n * >>> findFixedPoint([1, 2, 3, 4, 5, 6, 7, 8], 8)\n * -1\n * >>> findFixedPoint([0, 2, 5, 8, 17], 5)\n * 0\n */\nfunc findFixedPoint(arr : [Int], n : Int) -> Int {\n", "entry_point": "findFixedPoint", "test": "\n\nvar arg00 : [Int] = [-10, -1, 0, 3, 10, 11, 30, 50, 100]\nvar arg01 : Int = 9\nvar x0 : Int = findFixedPoint(arr : arg00, n : arg01)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8]\nvar arg11 : Int = 8\nvar x1 : Int = findFixedPoint(arr : arg10, n : arg11)\nvar v1 : Int = -1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [0, 2, 5, 8, 17]\nvar arg21 : Int = 5\nvar x2 : Int = findFixedPoint(arr : arg20, n : arg21)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the fixed point in the given array.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/909", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the previous palindrome of a specified number.\n *\n * >>> previousPalindrome(99)\n * 88\n * >>> previousPalindrome(1221)\n * 1111\n * >>> previousPalindrome(120)\n * 111\n */\nfunc previousPalindrome(num : Int) -> Int {\n", "entry_point": "previousPalindrome", "test": "\n\nvar arg00 : Int = 99\nvar x0 : Int = previousPalindrome(num : arg00)\nvar v0 : Int = 88\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1221\nvar x1 : Int = previousPalindrome(num : arg10)\nvar v1 : Int = 1111\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 120\nvar x2 : Int = previousPalindrome(num : arg20)\nvar v2 : Int = 111\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the previous palindrome of a specified number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/910", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to validate a gregorian date.\n *\n * >>> checkDate(11, 11, 2002)\n * true\n * >>> checkDate(13, 11, 2002)\n * false\n * >>> checkDate(\"11\", \"11\", \"2002\")\n * true\n */\nfunc checkDate(m : AnyHashable, d : AnyHashable, y : AnyHashable) -> Bool {\n", "entry_point": "checkDate", "test": "\n\nvar arg00 : AnyHashable = 11\nvar arg01 : AnyHashable = 11\nvar arg02 : AnyHashable = 2002\nvar x0 : Bool = checkDate(m : arg00, d : arg01, y : arg02)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : AnyHashable = 13\nvar arg11 : AnyHashable = 11\nvar arg12 : AnyHashable = 2002\nvar x1 : Bool = checkDate(m : arg10, d : arg11, y : arg12)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : AnyHashable = #\"11\"#\nvar arg21 : AnyHashable = #\"11\"#\nvar arg22 : AnyHashable = #\"2002\"#\nvar x2 : Bool = checkDate(m : arg20, d : arg21, y : arg22)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to validate a gregorian date.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/911", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n *\n * >>> maximumProduct([12, 74, 9, 50, 61, 41])\n * 225700\n * >>> maximumProduct([25, 35, 22, 85, 14, 65, 75, 25, 58])\n * 414375\n * >>> maximumProduct([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])\n * 2520\n */\nfunc maximumProduct(nums : [Int]) -> Int {\n", "entry_point": "maximumProduct", "test": "\n\nvar arg00 : [Int] = [12, 74, 9, 50, 61, 41]\nvar x0 : Int = maximumProduct(nums : arg00)\nvar v0 : Int = 225700\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [25, 35, 22, 85, 14, 65, 75, 25, 58]\nvar x1 : Int = maximumProduct(nums : arg10)\nvar v1 : Int = 414375\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]\nvar x2 : Int = maximumProduct(nums : arg20)\nvar v2 : Int = 2520\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/912", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find ln, m lobb number.\n *\n * >>> lobbNum(5, 3)\n * 35\n * >>> lobbNum(3, 2)\n * 5\n * >>> lobbNum(4, 2)\n * 20\n */\nfunc lobbNum(n : Int, m : Int) -> Int {\n", "entry_point": "lobbNum", "test": "\n\nvar arg00 : Int = 5\nvar arg01 : Int = 3\nvar x0 : Int = lobbNum(n : arg00, m : arg01)\nvar v0 : Int = 35\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar arg11 : Int = 2\nvar x1 : Int = lobbNum(n : arg10, m : arg11)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar arg21 : Int = 2\nvar x2 : Int = lobbNum(n : arg20, m : arg21)\nvar v2 : Int = 20\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find ln, m lobb number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/913", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check for a number at the end of a string.\n *\n * >>> endNum(\"abcdef\")\n * false\n * >>> endNum(\"abcdef7\")\n * true\n * >>> endNum(\"abc\")\n * false\n */\nfunc endNum(string : String) -> Bool {\n", "entry_point": "endNum", "test": "\n\nvar arg00 : String = #\"abcdef\"#\nvar x0 : Bool = endNum(string : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"abcdef7\"#\nvar x1 : Bool = endNum(string : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"abc\"#\nvar x2 : Bool = endNum(string : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check for a number at the end of a string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/914", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given string is made up of two alternating characters or not.\n *\n * >>> isTwoAlter(\"abab\")\n * true\n * >>> isTwoAlter(\"aaaa\")\n * false\n * >>> isTwoAlter(\"xyz\")\n * false\n */\nfunc isTwoAlter(s : String) -> Bool {\n", "entry_point": "isTwoAlter", "test": "\n\nvar arg00 : String = #\"abab\"#\nvar x0 : Bool = isTwoAlter(s : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"aaaa\"#\nvar x1 : Bool = isTwoAlter(s : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"xyz\"#\nvar x2 : Bool = isTwoAlter(s : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the given string is made up of two alternating characters or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/915", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to rearrange positive and negative numbers in a given array using lambda function.\n *\n * >>> rearrangeNumbs([-1, 2, -3, 5, 7, 8, 9, -10])\n * [2, 5, 7, 8, 9, -10, -3, -1]\n * >>> rearrangeNumbs([10, 15, 14, 13, -18, 12, -20])\n * [10, 12, 13, 14, 15, -20, -18]\n * >>> rearrangeNumbs([-20, 20, -10, 10, -30, 30])\n * [10, 20, 30, -30, -20, -10]\n */\nfunc rearrangeNumbs(arrayNums : [Int]) -> [Int] {\n", "entry_point": "rearrangeNumbs", "test": "\n\nvar arg00 : [Int] = [-1, 2, -3, 5, 7, 8, 9, -10]\nvar x0 : [Int] = rearrangeNumbs(arrayNums : arg00)\nvar v0 : [Int] = [2, 5, 7, 8, 9, -10, -3, -1]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [10, 15, 14, 13, -18, 12, -20]\nvar x1 : [Int] = rearrangeNumbs(arrayNums : arg10)\nvar v1 : [Int] = [10, 12, 13, 14, 15, -20, -18]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [-20, 20, -10, 10, -30, 30]\nvar x2 : [Int] = rearrangeNumbs(arrayNums : arg20)\nvar v2 : [Int] = [10, 20, 30, -30, -20, -10]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to rearrange positive and negative numbers in a given array using lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/916", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find if there is a triplet in the array whose sum is equal to a given value.\n *\n * >>> findTripletArray([1, 4, 45, 6, 10, 8], 6, 22)\n * [4, 10, 8]\n * >>> findTripletArray([12, 3, 5, 2, 6, 9], 6, 24)\n * [12, 3, 9]\n * >>> findTripletArray([1, 2, 3, 4, 5], 5, 9)\n * [1, 3, 5]\n */\nfunc findTripletArray(a : [Int], arrSize : Int, sum : Int) -> [Int] {\n", "entry_point": "findTripletArray", "test": "\n\nvar arg00 : [Int] = [1, 4, 45, 6, 10, 8]\nvar arg01 : Int = 6\nvar arg02 : Int = 22\nvar x0 : [Int] = findTripletArray(a : arg00, arrSize : arg01, sum : arg02)\nvar v0 : [Int] = [4, 10, 8]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [12, 3, 5, 2, 6, 9]\nvar arg11 : Int = 6\nvar arg12 : Int = 24\nvar x1 : [Int] = findTripletArray(a : arg10, arrSize : arg11, sum : arg12)\nvar v1 : [Int] = [12, 3, 9]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3, 4, 5]\nvar arg21 : Int = 5\nvar arg22 : Int = 9\nvar x2 : [Int] = findTripletArray(a : arg20, arrSize : arg21, sum : arg22)\nvar v2 : [Int] = [1, 3, 5]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/917", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sequences of one upper case letter followed by lower case letters.\n *\n * >>> textUppercaseLowercase(\"AaBbGg\")\n * \"Found a match!\"\n * >>> textUppercaseLowercase(\"aA\")\n * \"Not matched!\"\n * >>> textUppercaseLowercase(\"PYTHON\")\n * \"Not matched!\"\n */\nfunc textUppercaseLowercase(text : String) -> String {\n", "entry_point": "textUppercaseLowercase", "test": "\n\nvar arg00 : String = #\"AaBbGg\"#\nvar x0 : String = textUppercaseLowercase(text : arg00)\nvar v0 : String = #\"Found a match!\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"aA\"#\nvar x1 : String = textUppercaseLowercase(text : arg10)\nvar v1 : String = #\"Not matched!\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"PYTHON\"#\nvar x2 : String = textUppercaseLowercase(text : arg20)\nvar v2 : String = #\"Not matched!\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the sequences of one upper case letter followed by lower case letters.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/918", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count coin change.\n *\n * >>> coinChange([1, 2, 3], 3, 4)\n * 4\n * >>> coinChange([4, 5, 6, 7, 8, 9], 6, 9)\n * 2\n * >>> coinChange([4, 5, 6, 7, 8, 9], 6, 4)\n * 1\n */\nfunc coinChange(s : [Int], m : Int, n : Int) -> Int {\n", "entry_point": "coinChange", "test": "\n\nvar arg00 : [Int] = [1, 2, 3]\nvar arg01 : Int = 3\nvar arg02 : Int = 4\nvar x0 : Int = coinChange(s : arg00, m : arg01, n : arg02)\nvar v0 : Int = 4\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 5, 6, 7, 8, 9]\nvar arg11 : Int = 6\nvar arg12 : Int = 9\nvar x1 : Int = coinChange(s : arg10, m : arg11, n : arg12)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [4, 5, 6, 7, 8, 9]\nvar arg21 : Int = 6\nvar arg22 : Int = 4\nvar x2 : Int = coinChange(s : arg20, m : arg21, n : arg22)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count coin change.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/919", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to multiply all items in the list.\n *\n * >>> multiplyList([1, -2, 3])\n * -6\n * >>> multiplyList([1, 2, 3, 4])\n * 24\n * >>> multiplyList([3, 1, 2, 3])\n * 18\n */\nfunc multiplyList(items : [Int]) -> Int {\n", "entry_point": "multiplyList", "test": "\n\nvar arg00 : [Int] = [1, -2, 3]\nvar x0 : Int = multiplyList(items : arg00)\nvar v0 : Int = -6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4]\nvar x1 : Int = multiplyList(items : arg10)\nvar v1 : Int = 24\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3, 1, 2, 3]\nvar x2 : Int = multiplyList(items : arg20)\nvar v2 : Int = 18\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to multiply all items in the list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/920", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all tuples with all none values in the given tuple list.\n *\n * >>> removeTuple([[\"none\", 2], [\"none\", \"none\"], [3, 4], [12, 3], [\"none\"]])\n * [[\"none\", 2], [3, 4], [12, 3]]\n * >>> removeTuple([[\"none\", \"none\"], [\"none\", \"none\"], [3, 6], [17, 3], [\"none\", 1]])\n * [[3, 6], [17, 3], [\"none\", 1]]\n * >>> removeTuple([[1, 2], [2, \"none\"], [3, \"none\"], [24, 3], [\"none\", \"none\"]])\n * [[1, 2], [2, \"none\"], [3, \"none\"], [24, 3]]\n */\nfunc removeTuple(testList : [[AnyHashable]]) -> [[AnyHashable]] {\n", "entry_point": "removeTuple", "test": "\n\nvar arg00 : [[AnyHashable]] = [[\"none\", 2], [\"none\", \"none\"], [3, 4], [12, 3], [\"none\"]]\nvar x0 : [[AnyHashable]] = removeTuple(testList : arg00)\nvar v0 : [[AnyHashable]] = [[\"none\", 2], [3, 4], [12, 3]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[AnyHashable]] = [[\"none\", \"none\"], [\"none\", \"none\"], [3, 6], [17, 3], [\"none\", 1]]\nvar x1 : [[AnyHashable]] = removeTuple(testList : arg10)\nvar v1 : [[AnyHashable]] = [[3, 6], [17, 3], [\"none\", 1]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[AnyHashable]] = [[1, 2], [2, \"none\"], [3, \"none\"], [24, 3], [\"none\", \"none\"]]\nvar x2 : [[AnyHashable]] = removeTuple(testList : arg20)\nvar v2 : [[AnyHashable]] = [[1, 2], [2, \"none\"], [3, \"none\"], [24, 3]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove all tuples with all none values in the given tuple list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/921", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform chunking of tuples each of size n.\n *\n * >>> chunkTuples([10, 4, 5, 6, 7, 6, 8, 3, 4], 3)\n * [[10, 4, 5], [6, 7, 6], [8, 3, 4]]\n * >>> chunkTuples([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)\n * [[1, 2], [3, 4], [5, 6], [7, 8], [9]]\n * >>> chunkTuples([11, 14, 16, 17, 19, 21, 22, 25], 4)\n * [[11, 14, 16, 17], [19, 21, 22, 25]]\n */\nfunc chunkTuples(testTup : [Int], n : Int) -> [[Int]] {\n", "entry_point": "chunkTuples", "test": "\n\nvar arg00 : [Int] = [10, 4, 5, 6, 7, 6, 8, 3, 4]\nvar arg01 : Int = 3\nvar x0 : [[Int]] = chunkTuples(testTup : arg00, n : arg01)\nvar v0 : [[Int]] = [[10, 4, 5], [6, 7, 6], [8, 3, 4]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nvar arg11 : Int = 2\nvar x1 : [[Int]] = chunkTuples(testTup : arg10, n : arg11)\nvar v1 : [[Int]] = [[1, 2], [3, 4], [5, 6], [7, 8], [9]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [11, 14, 16, 17, 19, 21, 22, 25]\nvar arg21 : Int = 4\nvar x2 : [[Int]] = chunkTuples(testTup : arg20, n : arg21)\nvar v2 : [[Int]] = [[11, 14, 16, 17], [19, 21, 22, 25]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to perform chunking of tuples each of size n.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/922", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find a pair with the highest product from a given array of integers.\n *\n * >>> maxProduct([1, 2, 3, 4, 7, 0, 8, 4])\n * [7, 8]\n * >>> maxProduct([0, -1, -2, -4, 5, 0, -6])\n * [-4, -6]\n * >>> maxProduct([1, 3, 5, 6, 8, 9])\n * [8, 9]\n */\nfunc maxProduct(arr : [Int]) -> [Int] {\n", "entry_point": "maxProduct", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4, 7, 0, 8, 4]\nvar x0 : [Int] = maxProduct(arr : arg00)\nvar v0 : [Int] = [7, 8]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [0, -1, -2, -4, 5, 0, -6]\nvar x1 : [Int] = maxProduct(arr : arg10)\nvar v1 : [Int] = [-4, -6]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 3, 5, 6, 8, 9]\nvar x2 : [Int] = maxProduct(arr : arg20)\nvar v2 : [Int] = [8, 9]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find a pair with the highest product from a given array of integers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/923", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n *\n * >>> superSeq(\"AGGTAB\", \"GXTXAYB\", 6, 7)\n * 9\n * >>> superSeq(\"feek\", \"eke\", 4, 3)\n * 5\n * >>> superSeq(\"PARRT\", \"RTA\", 5, 3)\n * 6\n */\nfunc superSeq(x : String, y : String, m : Int, n : Int) -> Int {\n", "entry_point": "superSeq", "test": "\n\nvar arg00 : String = #\"AGGTAB\"#\nvar arg01 : String = #\"GXTXAYB\"#\nvar arg02 : Int = 6\nvar arg03 : Int = 7\nvar x0 : Int = superSeq(x : arg00, y : arg01, m : arg02, n : arg03)\nvar v0 : Int = 9\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"feek\"#\nvar arg11 : String = #\"eke\"#\nvar arg12 : Int = 4\nvar arg13 : Int = 3\nvar x1 : Int = superSeq(x : arg10, y : arg11, m : arg12, n : arg13)\nvar v1 : Int = 5\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"PARRT\"#\nvar arg21 : String = #\"RTA\"#\nvar arg22 : Int = 5\nvar arg23 : Int = 3\nvar x2 : Int = superSeq(x : arg20, y : arg21, m : arg22, n : arg23)\nvar v2 : Int = 6\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/924", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find maximum of two numbers.\n *\n * >>> maxOfTwo(10, 20)\n * 20\n * >>> maxOfTwo(19, 15)\n * 19\n * >>> maxOfTwo(-10, -20)\n * -10\n */\nfunc maxOfTwo(x : Int, y : Int) -> Int {\n", "entry_point": "maxOfTwo", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 20\nvar x0 : Int = maxOfTwo(x : arg00, y : arg01)\nvar v0 : Int = 20\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 19\nvar arg11 : Int = 15\nvar x1 : Int = maxOfTwo(x : arg10, y : arg11)\nvar v1 : Int = 19\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = -10\nvar arg21 : Int = -20\nvar x2 : Int = maxOfTwo(x : arg20, y : arg21)\nvar v2 : Int = -10\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find maximum of two numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/925", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to calculate the product of all the numbers of a given tuple.\n *\n * >>> mutipleTuple([4, 3, 2, 2, -1, 18])\n * -864\n * >>> mutipleTuple([1, 2, 3])\n * 6\n * >>> mutipleTuple([-2, -4, -6])\n * -48\n */\nfunc mutipleTuple(nums : [Int]) -> Int {\n", "entry_point": "mutipleTuple", "test": "\n\nvar arg00 : [Int] = [4, 3, 2, 2, -1, 18]\nvar x0 : Int = mutipleTuple(nums : arg00)\nvar v0 : Int = -864\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3]\nvar x1 : Int = mutipleTuple(nums : arg10)\nvar v1 : Int = 6\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [-2, -4, -6]\nvar x2 : Int = mutipleTuple(nums : arg20)\nvar v2 : Int = -48\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to calculate the product of all the numbers of a given tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/926", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find n-th rencontres number.\n *\n * >>> rencontresNumber(7, 2)\n * 924\n * >>> rencontresNumber(3, 0)\n * 2\n * >>> rencontresNumber(3, 1)\n * 3\n */\nfunc rencontresNumber(n : Int, m : Int) -> Int {\n", "entry_point": "rencontresNumber", "test": "\n\nvar arg00 : Int = 7\nvar arg01 : Int = 2\nvar x0 : Int = rencontresNumber(n : arg00, m : arg01)\nvar v0 : Int = 924\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar arg11 : Int = 0\nvar x1 : Int = rencontresNumber(n : arg10, m : arg11)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 3\nvar arg21 : Int = 1\nvar x2 : Int = rencontresNumber(n : arg20, m : arg21)\nvar v2 : Int = 3\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find n-th rencontres number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/928", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n *\n * >>> changeDateFormat(\"2026-01-02\")\n * \"02-01-2026\"\n * >>> changeDateFormat(\"2021-01-04\")\n * \"04-01-2021\"\n * >>> changeDateFormat(\"2030-06-06\")\n * \"06-06-2030\"\n */\nfunc changeDateFormat(dt : String) -> String {\n", "entry_point": "changeDateFormat", "test": "\n\nvar arg00 : String = #\"2026-01-02\"#\nvar x0 : String = changeDateFormat(dt : arg00)\nvar v0 : String = #\"02-01-2026\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"2021-01-04\"#\nvar x1 : String = changeDateFormat(dt : arg10)\nvar v1 : String = #\"04-01-2021\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"2030-06-06\"#\nvar x2 : String = changeDateFormat(dt : arg20)\nvar v2 : String = #\"06-06-2030\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/929", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count repeated items of a tuple.\n *\n * >>> countTuplex([2, 4, 5, 6, 2, 3, 4, 4, 7], 4)\n * 3\n * >>> countTuplex([2, 4, 5, 6, 2, 3, 4, 4, 7], 2)\n * 2\n * >>> countTuplex([2, 4, 7, 7, 7, 3, 4, 4, 7], 7)\n * 4\n */\nfunc countTuplex(tuplex : [Int], value : Int) -> Int {\n", "entry_point": "countTuplex", "test": "\n\nvar arg00 : [Int] = [2, 4, 5, 6, 2, 3, 4, 4, 7]\nvar arg01 : Int = 4\nvar x0 : Int = countTuplex(tuplex : arg00, value : arg01)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [2, 4, 5, 6, 2, 3, 4, 4, 7]\nvar arg11 : Int = 2\nvar x1 : Int = countTuplex(tuplex : arg10, value : arg11)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 4, 7, 7, 7, 3, 4, 4, 7]\nvar arg21 : Int = 7\nvar x2 : Int = countTuplex(tuplex : arg20, value : arg21)\nvar v2 : Int = 4\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count repeated items of a tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/930", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by zero or more b's by using regex.\n *\n * >>> textMatch(\"msb\")\n * \"Not matched!\"\n * >>> textMatch(\"a0c\")\n * \"Found a match!\"\n * >>> textMatch(\"abbc\")\n * \"Found a match!\"\n */\nfunc textMatch(text : String) -> String {\n", "entry_point": "textMatch", "test": "\n\nvar arg00 : String = #\"msb\"#\nvar x0 : String = textMatch(text : arg00)\nvar v0 : String = #\"Not matched!\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"a0c\"#\nvar x1 : String = textMatch(text : arg10)\nvar v1 : String = #\"Found a match!\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"abbc\"#\nvar x2 : String = textMatch(text : arg20)\nvar v2 : String = #\"Found a match!\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function that matches a string that has an a followed by zero or more b's by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/931", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n *\n * >>> sumSeries(7)\n * 784\n * >>> sumSeries(5)\n * 225\n * >>> sumSeries(15)\n * 14400\n */\nfunc sumSeries(number : Int) -> Int {\n", "entry_point": "sumSeries", "test": "\n\nvar arg00 : Int = 7\nvar x0 : Int = sumSeries(number : arg00)\nvar v0 : Int = 784\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar x1 : Int = sumSeries(number : arg10)\nvar v1 : Int = 225\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 15\nvar x2 : Int = sumSeries(number : arg20)\nvar v2 : Int = 14400\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/932", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove duplicate words from a given list of strings.\n *\n * >>> removeDuplicList([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])\n * [\"Python\", \"Exercises\", \"Practice\", \"Solution\"]\n * >>> removeDuplicList([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\", \"Java\"])\n * [\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Java\"]\n * >>> removeDuplicList([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\", \"C++\", \"C\", \"C++\"])\n * [\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"C++\", \"C\"]\n */\nfunc removeDuplicList(l : [String]) -> [String] {\n", "entry_point": "removeDuplicList", "test": "\n\nvar arg00 : [String] = [#\"Python\"#, #\"Exercises\"#, #\"Practice\"#, #\"Solution\"#, #\"Exercises\"#]\nvar x0 : [String] = removeDuplicList(l : arg00)\nvar v0 : [String] = [#\"Python\"#, #\"Exercises\"#, #\"Practice\"#, #\"Solution\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"Python\"#, #\"Exercises\"#, #\"Practice\"#, #\"Solution\"#, #\"Exercises\"#, #\"Java\"#]\nvar x1 : [String] = removeDuplicList(l : arg10)\nvar v1 : [String] = [#\"Python\"#, #\"Exercises\"#, #\"Practice\"#, #\"Solution\"#, #\"Java\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"Python\"#, #\"Exercises\"#, #\"Practice\"#, #\"Solution\"#, #\"Exercises\"#, #\"C++\"#, #\"C\"#, #\"C++\"#]\nvar x2 : [String] = removeDuplicList(l : arg20)\nvar v2 : [String] = [#\"Python\"#, #\"Exercises\"#, #\"Practice\"#, #\"Solution\"#, #\"C++\"#, #\"C\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove duplicate words from a given list of strings.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/933", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert camel case string to snake case string by using regex.\n *\n * >>> camelToSnake(\"GoogleAssistant\")\n * \"google_assistant\"\n * >>> camelToSnake(\"ChromeCast\")\n * \"chrome_cast\"\n * >>> camelToSnake(\"QuadCore\")\n * \"quad_core\"\n */\nfunc camelToSnake(text : String) -> String {\n", "entry_point": "camelToSnake", "test": "\n\nvar arg00 : String = #\"GoogleAssistant\"#\nvar x0 : String = camelToSnake(text : arg00)\nvar v0 : String = #\"google_assistant\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"ChromeCast\"#\nvar x1 : String = camelToSnake(text : arg10)\nvar v1 : String = #\"chrome_cast\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"QuadCore\"#\nvar x2 : String = camelToSnake(text : arg20)\nvar v2 : String = #\"quad_core\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert camel case string to snake case string by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/934", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth delannoy number.\n *\n * >>> dealnnoyNum(3, 4)\n * 129\n * >>> dealnnoyNum(3, 3)\n * 63\n * >>> dealnnoyNum(4, 5)\n * 681\n */\nfunc dealnnoyNum(n : Int, m : Int) -> Int {\n", "entry_point": "dealnnoyNum", "test": "\n\nvar arg00 : Int = 3\nvar arg01 : Int = 4\nvar x0 : Int = dealnnoyNum(n : arg00, m : arg01)\nvar v0 : Int = 129\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar arg11 : Int = 3\nvar x1 : Int = dealnnoyNum(n : arg10, m : arg11)\nvar v1 : Int = 63\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar arg21 : Int = 5\nvar x2 : Int = dealnnoyNum(n : arg20, m : arg21)\nvar v2 : Int = 681\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the nth delannoy number.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/935", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\n *\n * >>> seriesSum(6)\n * 91\n * >>> seriesSum(7)\n * 140\n * >>> seriesSum(12)\n * 650\n */\nfunc seriesSum(number : Int) -> Int {\n", "entry_point": "seriesSum", "test": "\n\nvar arg00 : Int = 6\nvar x0 : Int = seriesSum(number : arg00)\nvar v0 : Int = 91\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 7\nvar x1 : Int = seriesSum(number : arg10)\nvar v1 : Int = 140\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 12\nvar x2 : Int = seriesSum(number : arg20)\nvar v2 : Int = 650\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/936", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to re-arrange the given tuples based on the given ordered list.\n *\n * >>> reArrangeTuples([[4, 3], [1, 9], [2, 10], [3, 2]], [1, 4, 2, 3])\n * [[1, 9], [4, 3], [2, 10], [3, 2]]\n * >>> reArrangeTuples([[5, 4], [2, 10], [3, 11], [4, 3]], [3, 4, 2, 3])\n * [[3, 11], [4, 3], [2, 10], [3, 11]]\n * >>> reArrangeTuples([[6, 3], [3, 8], [5, 7], [2, 4]], [2, 5, 3, 6])\n * [[2, 4], [5, 7], [3, 8], [6, 3]]\n */\nfunc reArrangeTuples(testList : [[Int]], ordList : [Int]) -> [[Int]] {\n", "entry_point": "reArrangeTuples", "test": "\n\nvar arg00 : [[Int]] = [[4, 3], [1, 9], [2, 10], [3, 2]]\nvar arg01 : [Int] = [1, 4, 2, 3]\nvar x0 : [[Int]] = reArrangeTuples(testList : arg00, ordList : arg01)\nvar v0 : [[Int]] = [[1, 9], [4, 3], [2, 10], [3, 2]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[5, 4], [2, 10], [3, 11], [4, 3]]\nvar arg11 : [Int] = [3, 4, 2, 3]\nvar x1 : [[Int]] = reArrangeTuples(testList : arg10, ordList : arg11)\nvar v1 : [[Int]] = [[3, 11], [4, 3], [2, 10], [3, 11]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[6, 3], [3, 8], [5, 7], [2, 4]]\nvar arg21 : [Int] = [2, 5, 3, 6]\nvar x2 : [[Int]] = reArrangeTuples(testList : arg20, ordList : arg21)\nvar v2 : [[Int]] = [[2, 4], [5, 7], [3, 8], [6, 3]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to re-arrange the given tuples based on the given ordered list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/937", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the most common character in a given string.\n *\n * >>> maxChar(\"hello world\")\n * \"l\"\n * >>> maxChar(\"hello \")\n * \"l\"\n * >>> maxChar(\"python pr\")\n * \"p\"\n */\nfunc maxChar(str1 : String) -> String {\n", "entry_point": "maxChar", "test": "\n\nvar arg00 : String = #\"hello world\"#\nvar x0 : String = maxChar(str1 : arg00)\nvar v0 : String = #\"l\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"hello \"#\nvar x1 : String = maxChar(str1 : arg10)\nvar v1 : String = #\"l\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"python pr\"#\nvar x2 : String = maxChar(str1 : arg20)\nvar v2 : String = #\"p\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count the most common character in a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/938", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find three closest elements from three sorted arrays.\n *\n * >>> findCloset([1, 4, 10], [2, 15, 20], [10, 12], 3, 3, 2)\n * [10, 15, 10]\n * >>> findCloset([20, 24, 100], [2, 19, 22, 79, 800], [10, 12, 23, 24, 119], 3, 5, 5)\n * [24, 22, 23]\n * >>> findCloset([2, 5, 11], [3, 16, 21], [11, 13], 3, 3, 2)\n * [11, 16, 11]\n */\nfunc findCloset(a : [Int], b : [Int], c : [Int], p : Int, q : Int, r : Int) -> [Int] {\n", "entry_point": "findCloset", "test": "\n\nvar arg00 : [Int] = [1, 4, 10]\nvar arg01 : [Int] = [2, 15, 20]\nvar arg02 : [Int] = [10, 12]\nvar arg03 : Int = 3\nvar arg04 : Int = 3\nvar arg05 : Int = 2\nvar x0 : [Int] = findCloset(a : arg00, b : arg01, c : arg02, p : arg03, q : arg04, r : arg05)\nvar v0 : [Int] = [10, 15, 10]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [20, 24, 100]\nvar arg11 : [Int] = [2, 19, 22, 79, 800]\nvar arg12 : [Int] = [10, 12, 23, 24, 119]\nvar arg13 : Int = 3\nvar arg14 : Int = 5\nvar arg15 : Int = 5\nvar x1 : [Int] = findCloset(a : arg10, b : arg11, c : arg12, p : arg13, q : arg14, r : arg15)\nvar v1 : [Int] = [24, 22, 23]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [2, 5, 11]\nvar arg21 : [Int] = [3, 16, 21]\nvar arg22 : [Int] = [11, 13]\nvar arg23 : Int = 3\nvar arg24 : Int = 3\nvar arg25 : Int = 2\nvar x2 : [Int] = findCloset(a : arg20, b : arg21, c : arg22, p : arg23, q : arg24, r : arg25)\nvar v2 : [Int] = [11, 16, 11]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find three closest elements from three sorted arrays.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/939", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of dictionaries using lambda function.\n *\n * >>> sortedModels([[\"make\" : \"Nokia\", \"model\" : 216, \"color\" : \"Black\"], [\"make\" : \"Mi Max\", \"model\" : 2, \"color\" : \"Gold\"], [\"make\" : \"Samsung\", \"model\" : 7, \"color\" : \"Blue\"]])\n * [[\"make\" : \"Nokia\", \"model\" : 216, \"color\" : \"Black\"], [\"make\" : \"Samsung\", \"model\" : 7, \"color\" : \"Blue\"], [\"make\" : \"Mi Max\", \"model\" : 2, \"color\" : \"Gold\"]]\n * >>> sortedModels([[\"make\" : \"Vivo\", \"model\" : 20, \"color\" : \"Blue\"], [\"make\" : \"oppo\", \"model\" : 17, \"color\" : \"Gold\"], [\"make\" : \"Apple\", \"model\" : 11, \"color\" : \"red\"]])\n * [[\"make\" : \"Vivo\", \"model\" : 20, \"color\" : \"Blue\"], [\"make\" : \"oppo\", \"model\" : 17, \"color\" : \"Gold\"], [\"make\" : \"Apple\", \"model\" : 11, \"color\" : \"red\"]]\n * >>> sortedModels([[\"make\" : \"micromax\", \"model\" : 40, \"color\" : \"grey\"], [\"make\" : \"poco\", \"model\" : 60, \"color\" : \"blue\"]])\n * [[\"make\" : \"poco\", \"model\" : 60, \"color\" : \"blue\"], [\"make\" : \"micromax\", \"model\" : 40, \"color\" : \"grey\"]]\n */\nfunc sortedModels(models : [[String: AnyHashable]]) -> [[String: AnyHashable]] {\n", "entry_point": "sortedModels", "test": "\n\nvar arg00 : [[String: AnyHashable]] = [[#\"make\"# : #\"Nokia\"#, #\"model\"# : 216, #\"color\"# : #\"Black\"#], [#\"make\"# : #\"Mi Max\"#, #\"model\"# : 2, #\"color\"# : #\"Gold\"#], [#\"make\"# : #\"Samsung\"#, #\"model\"# : 7, #\"color\"# : #\"Blue\"#]]\nvar x0 : [[String: AnyHashable]] = sortedModels(models : arg00)\nvar v0 : [[String: AnyHashable]] = [[#\"make\"# : #\"Nokia\"#, #\"model\"# : 216, #\"color\"# : #\"Black\"#], [#\"make\"# : #\"Samsung\"#, #\"model\"# : 7, #\"color\"# : #\"Blue\"#], [#\"make\"# : #\"Mi Max\"#, #\"model\"# : 2, #\"color\"# : #\"Gold\"#]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[String: AnyHashable]] = [[#\"make\"# : #\"Vivo\"#, #\"model\"# : 20, #\"color\"# : #\"Blue\"#], [#\"make\"# : #\"oppo\"#, #\"model\"# : 17, #\"color\"# : #\"Gold\"#], [#\"make\"# : #\"Apple\"#, #\"model\"# : 11, #\"color\"# : #\"red\"#]]\nvar x1 : [[String: AnyHashable]] = sortedModels(models : arg10)\nvar v1 : [[String: AnyHashable]] = [[#\"make\"# : #\"Vivo\"#, #\"model\"# : 20, #\"color\"# : #\"Blue\"#], [#\"make\"# : #\"oppo\"#, #\"model\"# : 17, #\"color\"# : #\"Gold\"#], [#\"make\"# : #\"Apple\"#, #\"model\"# : 11, #\"color\"# : #\"red\"#]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[String: AnyHashable]] = [[#\"make\"# : #\"micromax\"#, #\"model\"# : 40, #\"color\"# : #\"grey\"#], [#\"make\"# : #\"poco\"#, #\"model\"# : 60, #\"color\"# : #\"blue\"#]]\nvar x2 : [[String: AnyHashable]] = sortedModels(models : arg20)\nvar v2 : [[String: AnyHashable]] = [[#\"make\"# : #\"poco\"#, #\"model\"# : 60, #\"color\"# : #\"blue\"#], [#\"make\"# : #\"micromax\"#, #\"model\"# : 40, #\"color\"# : #\"grey\"#]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort a list of dictionaries using lambda function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/940", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the given array by using heap sort.\n *\n * >>> heapSort([12, 2, 4, 5, 2, 3])\n * [2, 2, 3, 4, 5, 12]\n * >>> heapSort([32, 14, 5, 6, 7, 19])\n * [5, 6, 7, 14, 19, 32]\n * >>> heapSort([21, 15, 29, 78, 65])\n * [15, 21, 29, 65, 78]\n */\nfunc heapSort(arr : [Int]) -> [Int] {\n", "entry_point": "heapSort", "test": "\n\nvar arg00 : [Int] = [12, 2, 4, 5, 2, 3]\nvar x0 : [Int] = heapSort(arr : arg00)\nvar v0 : [Int] = [2, 2, 3, 4, 5, 12]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [32, 14, 5, 6, 7, 19]\nvar x1 : [Int] = heapSort(arr : arg10)\nvar v1 : [Int] = [5, 6, 7, 14, 19, 32]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [21, 15, 29, 78, 65]\nvar x2 : [Int] = heapSort(arr : arg20)\nvar v2 : [Int] = [15, 21, 29, 65, 78]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort the given array by using heap sort.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/941", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the elements in a list until an element is a tuple.\n *\n * >>> countElim([10, 20, 30, [10, 20], 40])\n * 3\n * >>> countElim([10, [20, 30], [10, 20], 40])\n * 1\n * >>> countElim([[10, [20, 30, [10, 20], 40]]])\n * 0\n */\nfunc countElim(num : [AnyHashable]) -> Int {\n", "entry_point": "countElim", "test": "\n\nvar arg00 : [AnyHashable] = [10, 20, 30, [10, 20], 40]\nvar x0 : Int = countElim(num : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [10, [20, 30], [10, 20], 40]\nvar x1 : Int = countElim(num : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [[10, [20, 30, [10, 20], 40]]]\nvar x2 : Int = countElim(num : arg20)\nvar v2 : Int = 0\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to count the elements in a list until an element is a tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/942", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if any list element is present in the given list.\n *\n * >>> checkElement([4, 5, 7, 9, 3], [6, 7, 10, 11])\n * true\n * >>> checkElement([1, 2, 3, 4], [4, 6, 7, 8, 9])\n * true\n * >>> checkElement([3, 2, 1, 4, 5], [9, 8, 7, 6])\n * false\n */\nfunc checkElement(testTup : [Int], checkList : [Int]) -> Bool {\n", "entry_point": "checkElement", "test": "\n\nvar arg00 : [Int] = [4, 5, 7, 9, 3]\nvar arg01 : [Int] = [6, 7, 10, 11]\nvar x0 : Bool = checkElement(testTup : arg00, checkList : arg01)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2, 3, 4]\nvar arg11 : [Int] = [4, 6, 7, 8, 9]\nvar x1 : Bool = checkElement(testTup : arg10, checkList : arg11)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [3, 2, 1, 4, 5]\nvar arg21 : [Int] = [9, 8, 7, 6]\nvar x2 : Bool = checkElement(testTup : arg20, checkList : arg21)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to check if any list element is present in the given list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/943", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to combine two given sorted lists using heapq module.\n *\n * >>> combineLists([1, 3, 5, 7, 9, 11], [0, 2, 4, 6, 8, 10])\n * [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n * >>> combineLists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])\n * [1, 2, 3, 5, 5, 6, 7, 8, 9, 11]\n * >>> combineLists([1, 3, 7], [2, 4, 6])\n * [1, 2, 3, 4, 6, 7]\n */\nfunc combineLists(num1 : [Int], num2 : [Int]) -> [Int] {\n", "entry_point": "combineLists", "test": "\n\nvar arg00 : [Int] = [1, 3, 5, 7, 9, 11]\nvar arg01 : [Int] = [0, 2, 4, 6, 8, 10]\nvar x0 : [Int] = combineLists(num1 : arg00, num2 : arg01)\nvar v0 : [Int] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 3, 5, 6, 8, 9]\nvar arg11 : [Int] = [2, 5, 7, 11]\nvar x1 : [Int] = combineLists(num1 : arg10, num2 : arg11)\nvar v1 : [Int] = [1, 2, 3, 5, 5, 6, 7, 8, 9, 11]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 3, 7]\nvar arg21 : [Int] = [2, 4, 6]\nvar x2 : [Int] = combineLists(num1 : arg20, num2 : arg21)\nvar v2 : [Int] = [1, 2, 3, 4, 6, 7]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to combine two given sorted lists using heapq module.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/944", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to separate and print the numbers and their position of a given string.\n *\n * >>> numPosition(\"there are 70 flats in this apartment\")\n * 10\n * >>> numPosition(\"every adult have 32 teeth\")\n * 17\n * >>> numPosition(\"isha has 79 chocolates in her bag\")\n * 9\n */\nfunc numPosition(text : String) -> Int {\n", "entry_point": "numPosition", "test": "\n\nvar arg00 : String = #\"there are 70 flats in this apartment\"#\nvar x0 : Int = numPosition(text : arg00)\nvar v0 : Int = 10\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"every adult have 32 teeth\"#\nvar x1 : Int = numPosition(text : arg10)\nvar v1 : Int = 17\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"isha has 79 chocolates in her bag\"#\nvar x2 : Int = numPosition(text : arg20)\nvar v2 : Int = 9\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to separate and print the numbers and their position of a given string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/945", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given tuples into set.\n *\n * >>> tupleToSet([\"x\", \"y\", \"z\"])\n * {\"y\", \"x\", \"z\"}\n * >>> tupleToSet([\"a\", \"b\", \"c\"])\n * {\"a\", \"b\", \"c\"}\n * >>> tupleToSet([\"z\", \"d\", \"e\"])\n * {\"z\", \"d\", \"e\"}\n */\nfunc tupleToSet(t : [String]) -> Set<String> {\n", "entry_point": "tupleToSet", "test": "\n\nvar arg00 : [String] = [#\"x\"#, #\"y\"#, #\"z\"#]\nvar x0 : Set<String> = tupleToSet(t : arg00)\nvar v0 : Set<String> = [#\"y\"#, #\"x\"#, #\"z\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"a\"#, #\"b\"#, #\"c\"#]\nvar x1 : Set<String> = tupleToSet(t : arg10)\nvar v1 : Set<String> = [#\"a\"#, #\"b\"#, #\"c\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"z\"#, #\"d\"#, #\"e\"#]\nvar x2 : Set<String> = tupleToSet(t : arg20)\nvar v2 : Set<String> = [#\"z\"#, #\"d\"#, #\"e\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert the given tuples into set.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/946", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the most common elements and their counts of a specified text.\n *\n * >>> mostCommonElem(\"lkseropewdssafsdfafkpwe\", 3)\n * [[\"s\", 4], [\"e\", 3], [\"f\", 3]]\n * >>> mostCommonElem(\"lkseropewdssafsdfafkpwe\", 2)\n * [[\"s\", 4], [\"e\", 3]]\n * >>> mostCommonElem(\"lkseropewdssafsdfafkpwe\", 7)\n * [[\"s\", 4], [\"e\", 3], [\"f\", 3], [\"k\", 2], [\"p\", 2], [\"w\", 2], [\"d\", 2]]\n */\nfunc mostCommonElem(s : String, a : Int) -> [[AnyHashable]] {\n", "entry_point": "mostCommonElem", "test": "\n\nvar arg00 : String = #\"lkseropewdssafsdfafkpwe\"#\nvar arg01 : Int = 3\nvar x0 : [[AnyHashable]] = mostCommonElem(s : arg00, a : arg01)\nvar v0 : [[AnyHashable]] = [[#\"s\"#, 4], [#\"e\"#, 3], [#\"f\"#, 3]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"lkseropewdssafsdfafkpwe\"#\nvar arg11 : Int = 2\nvar x1 : [[AnyHashable]] = mostCommonElem(s : arg10, a : arg11)\nvar v1 : [[AnyHashable]] = [[#\"s\"#, 4], [#\"e\"#, 3]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"lkseropewdssafsdfafkpwe\"#\nvar arg21 : Int = 7\nvar x2 : [[AnyHashable]] = mostCommonElem(s : arg20, a : arg21)\nvar v2 : [[AnyHashable]] = [[#\"s\"#, 4], [#\"e\"#, 3], [#\"f\"#, 3], [#\"k\"#, 2], [#\"p\"#, 2], [#\"w\"#, 2], [#\"d\"#, 2]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the most common elements and their counts of a specified text.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/947", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the length of the shortest word.\n *\n * >>> lenLog([\"win\", \"lose\", \"great\"])\n * 3\n * >>> lenLog([\"a\", \"ab\", \"abc\"])\n * 1\n * >>> lenLog([\"12\", \"12\", \"1234\"])\n * 2\n */\nfunc lenLog(list1 : [String]) -> Int {\n", "entry_point": "lenLog", "test": "\n\nvar arg00 : [String] = [#\"win\"#, #\"lose\"#, #\"great\"#]\nvar x0 : Int = lenLog(list1 : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [String] = [#\"a\"#, #\"ab\"#, #\"abc\"#]\nvar x1 : Int = lenLog(list1 : arg10)\nvar v1 : Int = 1\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [String] = [#\"12\"#, #\"12\"#, #\"1234\"#]\nvar x2 : Int = lenLog(list1 : arg20)\nvar v2 : Int = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the length of the shortest word.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/948", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get an item of a tuple.\n *\n * >>> getItem([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], 3)\n * \"e\"\n * >>> getItem([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], -4)\n * \"u\"\n * >>> getItem([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], -3)\n * \"r\"\n */\nfunc getItem(tup1 : [AnyHashable], index : Int) -> String {\n", "entry_point": "getItem", "test": "\n\nvar arg00 : [AnyHashable] = [#\"w\"#, 3, #\"r\"#, #\"e\"#, #\"s\"#, #\"o\"#, #\"u\"#, #\"r\"#, #\"c\"#, #\"e\"#]\nvar arg01 : Int = 3\nvar x0 : String = getItem(tup1 : arg00, index : arg01)\nvar v0 : String = #\"e\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [#\"w\"#, 3, #\"r\"#, #\"e\"#, #\"s\"#, #\"o\"#, #\"u\"#, #\"r\"#, #\"c\"#, #\"e\"#]\nvar arg11 : Int = -4\nvar x1 : String = getItem(tup1 : arg10, index : arg11)\nvar v1 : String = #\"u\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [#\"w\"#, 3, #\"r\"#, #\"e\"#, #\"s\"#, #\"o\"#, #\"u\"#, #\"r\"#, #\"c\"#, #\"e\"#]\nvar arg21 : Int = -3\nvar x2 : String = getItem(tup1 : arg20, index : arg21)\nvar v2 : String = #\"r\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to get an item of a tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/949", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the given tuple list basis the total digits in tuple.\n *\n * >>> sortList([[3, 4, 6, 723], [1, 2], [12345], [134, 234, 34]])\n * \"[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]\"\n * >>> sortList([[3, 4, 8], [1, 2], [1234335], [1345, 234, 334]])\n * \"[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]\"\n * >>> sortList([[34, 4, 61, 723], [1, 2], [145], [134, 23]])\n * \"[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]\"\n */\nfunc sortList(testList : [[Int]]) -> String {\n", "entry_point": "sortList", "test": "\n\nvar arg00 : [[Int]] = [[3, 4, 6, 723], [1, 2], [12345], [134, 234, 34]]\nvar x0 : String = sortList(testList : arg00)\nvar v0 : String = #\"[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[3, 4, 8], [1, 2], [1234335], [1345, 234, 334]]\nvar x1 : String = sortList(testList : arg10)\nvar v1 : String = #\"[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[34, 4, 61, 723], [1, 2], [145], [134, 23]]\nvar x2 : String = sortList(testList : arg20)\nvar v2 : String = #\"[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to sort the given tuple list basis the total digits in tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/950", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to display sign of the chinese zodiac for given year.\n *\n * >>> chineseZodiac(1997)\n * \"Ox\"\n * >>> chineseZodiac(1998)\n * \"Tiger\"\n * >>> chineseZodiac(1994)\n * \"Dog\"\n */\nfunc chineseZodiac(year : Int) -> String {\n", "entry_point": "chineseZodiac", "test": "\n\nvar arg00 : Int = 1997\nvar x0 : String = chineseZodiac(year : arg00)\nvar v0 : String = #\"Ox\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 1998\nvar x1 : String = chineseZodiac(year : arg10)\nvar v1 : String = #\"Tiger\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 1994\nvar x2 : String = chineseZodiac(year : arg20)\nvar v2 : String = #\"Dog\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to display sign of the chinese zodiac for given year.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/951", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum of similar indices in two lists of tuples.\n *\n * >>> maxSimilarIndices([[2, 4], [6, 7], [5, 1]], [[5, 4], [8, 10], [8, 14]])\n * [[5, 4], [8, 10], [8, 14]]\n * >>> maxSimilarIndices([[3, 5], [7, 8], [6, 2]], [[6, 5], [9, 11], [9, 15]])\n * [[6, 5], [9, 11], [9, 15]]\n * >>> maxSimilarIndices([[4, 6], [8, 9], [7, 3]], [[7, 6], [10, 12], [10, 16]])\n * [[7, 6], [10, 12], [10, 16]]\n */\nfunc maxSimilarIndices(testList1 : [[Int]], testList2 : [[Int]]) -> [[Int]] {\n", "entry_point": "maxSimilarIndices", "test": "\n\nvar arg00 : [[Int]] = [[2, 4], [6, 7], [5, 1]]\nvar arg01 : [[Int]] = [[5, 4], [8, 10], [8, 14]]\nvar x0 : [[Int]] = maxSimilarIndices(testList1 : arg00, testList2 : arg01)\nvar v0 : [[Int]] = [[5, 4], [8, 10], [8, 14]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[3, 5], [7, 8], [6, 2]]\nvar arg11 : [[Int]] = [[6, 5], [9, 11], [9, 15]]\nvar x1 : [[Int]] = maxSimilarIndices(testList1 : arg10, testList2 : arg11)\nvar v1 : [[Int]] = [[6, 5], [9, 11], [9, 15]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[4, 6], [8, 9], [7, 3]]\nvar arg21 : [[Int]] = [[7, 6], [10, 12], [10, 16]]\nvar x2 : [[Int]] = maxSimilarIndices(testList1 : arg20, testList2 : arg21)\nvar v2 : [[Int]] = [[7, 6], [10, 12], [10, 16]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the maximum of similar indices in two lists of tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/952", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to compute the value of ncr mod p.\n *\n * >>> ncrModP(10, 2, 13)\n * 6\n * >>> ncrModP(11, 3, 14)\n * 11\n * >>> ncrModP(18, 14, 19)\n * 1\n */\nfunc ncrModP(n : Int, r : Int, p : Int) -> Int {\n", "entry_point": "ncrModP", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 2\nvar arg02 : Int = 13\nvar x0 : Int = ncrModP(n : arg00, r : arg01, p : arg02)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 11\nvar arg11 : Int = 3\nvar arg12 : Int = 14\nvar x1 : Int = ncrModP(n : arg10, r : arg11, p : arg12)\nvar v1 : Int = 11\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 18\nvar arg21 : Int = 14\nvar arg22 : Int = 19\nvar x2 : Int = ncrModP(n : arg20, r : arg21, p : arg22)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to compute the value of ncr mod p.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/953", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimun number of subsets with distinct elements.\n *\n * >>> subset([1, 2, 3, 4], 4)\n * 1\n * >>> subset([5, 6, 9, 3, 4, 3, 4], 7)\n * 2\n * >>> subset([1, 2, 3], 3)\n * 1\n */\nfunc subset(ar : [Int], n : Int) -> Int {\n", "entry_point": "subset", "test": "\n\nvar arg00 : [Int] = [1, 2, 3, 4]\nvar arg01 : Int = 4\nvar x0 : Int = subset(ar : arg00, n : arg01)\nvar v0 : Int = 1\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [5, 6, 9, 3, 4, 3, 4]\nvar arg11 : Int = 7\nvar x1 : Int = subset(ar : arg10, n : arg11)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3]\nvar arg21 : Int = 3\nvar x2 : Int = subset(ar : arg20, n : arg21)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the minimun number of subsets with distinct elements.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/954", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that gives profit amount if the given amount has profit else return none.\n *\n * >>> profitAmount(1500, 1200)\n * 300\n * >>> profitAmount(100, 200)\n * \"none\"\n * >>> profitAmount(2000, 5000)\n * \"none\"\n */\nfunc profitAmount(actualCost : Int, saleAmount : Int) -> AnyHashable {\n", "entry_point": "profitAmount", "test": "\n\nvar arg00 : Int = 1500\nvar arg01 : Int = 1200\nvar x0 : AnyHashable = profitAmount(actualCost : arg00, saleAmount : arg01)\nvar v0 : AnyHashable = 300\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 100\nvar arg11 : Int = 200\nvar x1 : AnyHashable = profitAmount(actualCost : arg10, saleAmount : arg11)\nvar v1 : AnyHashable = \"none\"\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2000\nvar arg21 : Int = 5000\nvar x2 : AnyHashable = profitAmount(actualCost : arg20, saleAmount : arg21)\nvar v2 : AnyHashable = \"none\"\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function that gives profit amount if the given amount has profit else return none.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/955", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find out, if the given number is abundant.\n *\n * >>> isAbundant(12)\n * true\n * >>> isAbundant(13)\n * false\n * >>> isAbundant(9)\n * false\n */\nfunc isAbundant(n : Int) -> Bool {\n", "entry_point": "isAbundant", "test": "\n\nvar arg00 : Int = 12\nvar x0 : Bool = isAbundant(n : arg00)\nvar v0 : Bool = true\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 13\nvar x1 : Bool = isAbundant(n : arg10)\nvar v1 : Bool = false\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 9\nvar x2 : Bool = isAbundant(n : arg20)\nvar v2 : Bool = false\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find out, if the given number is abundant.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/956", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to split the given string at uppercase letters by using regex.\n *\n * >>> splitList(\"LearnToBuildAnythingWithGoogle\")\n * [\"Learn\", \"To\", \"Build\", \"Anything\", \"With\", \"Google\"]\n * >>> splitList(\"ApmlifyingTheBlack+DeveloperCommunity\")\n * [\"Apmlifying\", \"The\", \"Black+\", \"Developer\", \"Community\"]\n * >>> splitList(\"UpdateInTheGoEcoSystem\")\n * [\"Update\", \"In\", \"The\", \"Go\", \"Eco\", \"System\"]\n */\nfunc splitList(text : String) -> [String] {\n", "entry_point": "splitList", "test": "\n\nvar arg00 : String = #\"LearnToBuildAnythingWithGoogle\"#\nvar x0 : [String] = splitList(text : arg00)\nvar v0 : [String] = [#\"Learn\"#, #\"To\"#, #\"Build\"#, #\"Anything\"#, #\"With\"#, #\"Google\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"ApmlifyingTheBlack+DeveloperCommunity\"#\nvar x1 : [String] = splitList(text : arg10)\nvar v1 : [String] = [#\"Apmlifying\"#, #\"The\"#, #\"Black+\"#, #\"Developer\"#, #\"Community\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"UpdateInTheGoEcoSystem\"#\nvar x2 : [String] = splitList(text : arg20)\nvar v2 : [String] = [#\"Update\"#, #\"In\"#, #\"The\"#, #\"Go\"#, #\"Eco\"#, #\"System\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to split the given string at uppercase letters by using regex.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/957", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to get the position of rightmost set bit.\n *\n * >>> getFirstSetBitPos(12)\n * 3\n * >>> getFirstSetBitPos(18)\n * 2\n * >>> getFirstSetBitPos(16)\n * 5\n */\nfunc getFirstSetBitPos(n : Int) -> Int {\n", "entry_point": "getFirstSetBitPos", "test": "\n\nvar arg00 : Int = 12\nvar x0 : Int = getFirstSetBitPos(n : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 18\nvar x1 : Int = getFirstSetBitPos(n : arg10)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 16\nvar x2 : Int = getFirstSetBitPos(n : arg20)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to get the position of rightmost set bit.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/958", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert an integer into a roman numeral.\n *\n * >>> intToRoman(1)\n * \"I\"\n * >>> intToRoman(50)\n * \"L\"\n * >>> intToRoman(4)\n * \"IV\"\n */\nfunc intToRoman(num : Int) -> String {\n", "entry_point": "intToRoman", "test": "\n\nvar arg00 : Int = 1\nvar x0 : String = intToRoman(num : arg00)\nvar v0 : String = #\"I\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 50\nvar x1 : String = intToRoman(num : arg10)\nvar v1 : String = #\"L\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar x2 : String = intToRoman(num : arg20)\nvar v2 : String = #\"IV\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert an integer into a roman numeral.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/959", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the average of a list.\n *\n * >>> average([15, 9, 55, 41, 35, 20, 62, 49])\n * 35.75\n * >>> average([4, 5, 1, 2, 9, 7, 10, 8])\n * 5.75\n * >>> average([1, 2, 3])\n * 2\n */\nfunc average(lst : [Int]) -> Double {\n", "entry_point": "average", "test": "\n\nvar arg00 : [Int] = [15, 9, 55, 41, 35, 20, 62, 49]\nvar x0 : Double = average(lst : arg00)\nvar v0 : Double = 35.75\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [4, 5, 1, 2, 9, 7, 10, 8]\nvar x1 : Double = average(lst : arg10)\nvar v1 : Double = 5.75\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [1, 2, 3]\nvar x2 : Double = average(lst : arg20)\nvar v2 : Double = 2\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the average of a list.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/960", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to solve tiling problem.\n *\n * >>> getNoofways(4)\n * 3\n * >>> getNoofways(3)\n * 2\n * >>> getNoofways(5)\n * 5\n */\nfunc getNoofways(n : Int) -> Int {\n", "entry_point": "getNoofways", "test": "\n\nvar arg00 : Int = 4\nvar x0 : Int = getNoofways(n : arg00)\nvar v0 : Int = 3\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar x1 : Int = getNoofways(n : arg10)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 5\nvar x2 : Int = getNoofways(n : arg20)\nvar v2 : Int = 5\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to solve tiling problem.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/961", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a roman numeral to an integer.\n *\n * >>> romanToInt(\"MMMCMLXXXVI\")\n * 3986\n * >>> romanToInt(\"MMMM\")\n * 4000\n * >>> romanToInt(\"C\")\n * 100\n */\nfunc romanToInt(s : String) -> Int {\n", "entry_point": "romanToInt", "test": "\n\nvar arg00 : String = #\"MMMCMLXXXVI\"#\nvar x0 : Int = romanToInt(s : arg00)\nvar v0 : Int = 3986\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"MMMM\"#\nvar x1 : Int = romanToInt(s : arg10)\nvar v1 : Int = 4000\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"C\"#\nvar x2 : Int = romanToInt(s : arg20)\nvar v2 : Int = 100\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert a roman numeral to an integer.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/962", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all even natural numbers within the range l and r.\n *\n * >>> sumEven(2, 5)\n * 6\n * >>> sumEven(3, 8)\n * 18\n * >>> sumEven(4, 6)\n * 10\n */\nfunc sumEven(l : Int, r : Int) -> Int {\n", "entry_point": "sumEven", "test": "\n\nvar arg00 : Int = 2\nvar arg01 : Int = 5\nvar x0 : Int = sumEven(l : arg00, r : arg01)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 3\nvar arg11 : Int = 8\nvar x1 : Int = sumEven(l : arg10, r : arg11)\nvar v1 : Int = 18\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 4\nvar arg21 : Int = 6\nvar x2 : Int = sumEven(l : arg20, r : arg21)\nvar v2 : Int = 10\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find the sum of all even natural numbers within the range l and r.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/963", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the discriminant value.\n *\n * >>> discriminantValue(4, 8, 2)\n * [\"Two solutions\", 32]\n * >>> discriminantValue(5, 7, 9)\n * [\"no real solution\", -131]\n * >>> discriminantValue(0, 0, 9)\n * [\"one solution\", 0]\n */\nfunc discriminantValue(x : Int, y : Int, z : Int) -> [AnyHashable] {\n", "entry_point": "discriminantValue", "test": "\n\nvar arg00 : Int = 4\nvar arg01 : Int = 8\nvar arg02 : Int = 2\nvar x0 : [AnyHashable] = discriminantValue(x : arg00, y : arg01, z : arg02)\nvar v0 : [AnyHashable] = [#\"Two solutions\"#, 32]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar arg11 : Int = 7\nvar arg12 : Int = 9\nvar x1 : [AnyHashable] = discriminantValue(x : arg10, y : arg11, z : arg12)\nvar v1 : [AnyHashable] = [#\"no real solution\"#, -131]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 0\nvar arg21 : Int = 0\nvar arg22 : Int = 9\nvar x2 : [AnyHashable] = discriminantValue(x : arg20, y : arg21, z : arg22)\nvar v2 : [AnyHashable] = [#\"one solution\"#, 0]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to calculate the discriminant value.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/964", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the length of the word is even or not.\n *\n * >>> wordLen(\"program\")\n * false\n * >>> wordLen(\"solution\")\n * true\n * >>> wordLen(\"data\")\n * true\n */\nfunc wordLen(s : String) -> Bool {\n", "entry_point": "wordLen", "test": "\n\nvar arg00 : String = #\"program\"#\nvar x0 : Bool = wordLen(s : arg00)\nvar v0 : Bool = false\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"solution\"#\nvar x1 : Bool = wordLen(s : arg10)\nvar v1 : Bool = true\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"data\"#\nvar x2 : Bool = wordLen(s : arg20)\nvar v2 : Bool = true\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to check whether the length of the word is even or not.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/965", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert camel case string to snake case string.\n *\n * >>> camelToSnake(\"PythonProgram\")\n * \"python_program\"\n * >>> camelToSnake(\"pythonLanguage\")\n * \"python_language\"\n * >>> camelToSnake(\"ProgrammingLanguage\")\n * \"programming_language\"\n */\nfunc camelToSnake(text : String) -> String {\n", "entry_point": "camelToSnake", "test": "\n\nvar arg00 : String = #\"PythonProgram\"#\nvar x0 : String = camelToSnake(text : arg00)\nvar v0 : String = #\"python_program\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"pythonLanguage\"#\nvar x1 : String = camelToSnake(text : arg10)\nvar v1 : String = #\"python_language\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"ProgrammingLanguage\"#\nvar x2 : String = camelToSnake(text : arg20)\nvar v2 : String = #\"programming_language\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to convert camel case string to snake case string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/966", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove an empty tuple from a list of tuples.\n *\n * >>> removeEmpty([[], [], [\"\"], [\"a\", \"b\"], [\"a\", \"b\", \"c\"], \"d\"])\n * [[\"\"], [\"a\", \"b\"], [\"a\", \"b\", \"c\"], \"d\"]\n * >>> removeEmpty([[], [], [\"\"], \"python\", \"program\"])\n * [[\"\"], \"python\", \"program\"]\n * >>> removeEmpty([[], [], [\"\"], \"java\"])\n * [[\"\"], \"java\"]\n */\nfunc removeEmpty(tuple1 : [AnyHashable]) -> [AnyHashable] {\n", "entry_point": "removeEmpty", "test": "\n\nvar arg00 : [AnyHashable] = [[], [], [#\"\"#], [#\"a\"#, #\"b\"#], [#\"a\"#, #\"b\"#, #\"c\"#], #\"d\"#]\nvar x0 : [AnyHashable] = removeEmpty(tuple1 : arg00)\nvar v0 : [AnyHashable] = [[#\"\"#], [#\"a\"#, #\"b\"#], [#\"a\"#, #\"b\"#, #\"c\"#], #\"d\"#]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [AnyHashable] = [[], [], [#\"\"#], #\"python\"#, #\"program\"#]\nvar x1 : [AnyHashable] = removeEmpty(tuple1 : arg10)\nvar v1 : [AnyHashable] = [[#\"\"#], #\"python\"#, #\"program\"#]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [AnyHashable] = [[], [], [#\"\"#], #\"java\"#]\nvar x2 : [AnyHashable] = removeEmpty(tuple1 : arg20)\nvar v2 : [AnyHashable] = [[#\"\"#], #\"java\"#]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to remove an empty tuple from a list of tuples.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/967", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to accept the strings which contains all vowels.\n *\n * >>> check(\"SEEquoiaL\")\n * \"accepted\"\n * >>> check(\"program\")\n * \"not accepted\"\n * >>> check(\"fine\")\n * \"not accepted\"\n */\nfunc check(string : String) -> String {\n", "entry_point": "check", "test": "\n\nvar arg00 : String = #\"SEEquoiaL\"#\nvar x0 : String = check(string : arg00)\nvar v0 : String = #\"accepted\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"program\"#\nvar x1 : String = check(string : arg10)\nvar v1 : String = #\"not accepted\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"fine\"#\nvar x2 : String = check(string : arg20)\nvar v2 : String = #\"not accepted\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to accept the strings which contains all vowels.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/968", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find maximum possible value for the given periodic function.\n *\n * >>> floorMax(11, 10, 9)\n * 9\n * >>> floorMax(5, 7, 4)\n * 2\n * >>> floorMax(2, 2, 1)\n * 1\n */\nfunc floorMax(a : Int, b : Int, n : Int) -> Int {\n", "entry_point": "floorMax", "test": "\n\nvar arg00 : Int = 11\nvar arg01 : Int = 10\nvar arg02 : Int = 9\nvar x0 : Int = floorMax(a : arg00, b : arg01, n : arg02)\nvar v0 : Int = 9\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 5\nvar arg11 : Int = 7\nvar arg12 : Int = 4\nvar x1 : Int = floorMax(a : arg10, b : arg11, n : arg12)\nvar v1 : Int = 2\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 2\nvar arg21 : Int = 2\nvar arg22 : Int = 1\nvar x2 : Int = floorMax(a : arg20, b : arg21, n : arg22)\nvar v2 : Int = 1\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to find maximum possible value for the given periodic function.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/969", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to join the tuples if they have similar initial elements.\n *\n * >>> joinTuples([[5, 6], [5, 7], [6, 8], [6, 10], [7, 13]])\n * [[5, 6, 7], [6, 8, 10], [7, 13]]\n * >>> joinTuples([[6, 7], [6, 8], [7, 9], [7, 11], [8, 14]])\n * [[6, 7, 8], [7, 9, 11], [8, 14]]\n * >>> joinTuples([[7, 8], [7, 9], [8, 10], [8, 12], [9, 15]])\n * [[7, 8, 9], [8, 10, 12], [9, 15]]\n */\nfunc joinTuples(testList : [[Int]]) -> [[Int]] {\n", "entry_point": "joinTuples", "test": "\n\nvar arg00 : [[Int]] = [[5, 6], [5, 7], [6, 8], [6, 10], [7, 13]]\nvar x0 : [[Int]] = joinTuples(testList : arg00)\nvar v0 : [[Int]] = [[5, 6, 7], [6, 8, 10], [7, 13]]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[6, 7], [6, 8], [7, 9], [7, 11], [8, 14]]\nvar x1 : [[Int]] = joinTuples(testList : arg10)\nvar v1 : [[Int]] = [[6, 7, 8], [7, 9, 11], [8, 14]]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[7, 8], [7, 9], [8, 10], [8, 12], [9, 15]]\nvar x2 : [[Int]] = joinTuples(testList : arg20)\nvar v2 : [[Int]] = [[7, 8, 9], [8, 10, 12], [9, 15]]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to join the tuples if they have similar initial elements.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/970", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find minimum of two numbers.\n *\n * >>> minOfTwo(10, 20)\n * 10\n * >>> minOfTwo(19, 15)\n * 15\n * >>> minOfTwo(-10, -20)\n * -20\n */\nfunc minOfTwo(x : Int, y : Int) -> Int {\n", "entry_point": "minOfTwo", "test": "\n\nvar arg00 : Int = 10\nvar arg01 : Int = 20\nvar x0 : Int = minOfTwo(x : arg00, y : arg01)\nvar v0 : Int = 10\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 19\nvar arg11 : Int = 15\nvar x1 : Int = minOfTwo(x : arg10, y : arg11)\nvar v1 : Int = 15\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = -10\nvar arg21 : Int = -20\nvar x2 : Int = minOfTwo(x : arg20, y : arg21)\nvar v2 : Int = -20\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find minimum of two numbers.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/971", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n *\n * >>> maximumSegments(7, 5, 2, 5)\n * 2\n * >>> maximumSegments(17, 2, 1, 3)\n * 17\n * >>> maximumSegments(18, 16, 3, 6)\n * 6\n */\nfunc maximumSegments(n : Int, a : Int, b : Int, c : Int) -> Int {\n", "entry_point": "maximumSegments", "test": "\n\nvar arg00 : Int = 7\nvar arg01 : Int = 5\nvar arg02 : Int = 2\nvar arg03 : Int = 5\nvar x0 : Int = maximumSegments(n : arg00, a : arg01, b : arg02, c : arg03)\nvar v0 : Int = 2\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : Int = 17\nvar arg11 : Int = 2\nvar arg12 : Int = 1\nvar arg13 : Int = 3\nvar x1 : Int = maximumSegments(n : arg10, a : arg11, b : arg12, c : arg13)\nvar v1 : Int = 17\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : Int = 18\nvar arg21 : Int = 16\nvar arg22 : Int = 3\nvar arg23 : Int = 6\nvar x2 : Int = maximumSegments(n : arg20, a : arg21, b : arg22, c : arg23)\nvar v2 : Int = 6\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/972", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to concatenate the given two tuples to a nested tuple.\n *\n * >>> concatenateNested([3, 4], [5, 6])\n * [3, 4, 5, 6]\n * >>> concatenateNested([1, 2], [3, 4])\n * [1, 2, 3, 4]\n * >>> concatenateNested([4, 5], [6, 8])\n * [4, 5, 6, 8]\n */\nfunc concatenateNested(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n", "entry_point": "concatenateNested", "test": "\n\nvar arg00 : [Int] = [3, 4]\nvar arg01 : [Int] = [5, 6]\nvar x0 : [Int] = concatenateNested(testTup1 : arg00, testTup2 : arg01)\nvar v0 : [Int] = [3, 4, 5, 6]\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [Int] = [1, 2]\nvar arg11 : [Int] = [3, 4]\nvar x1 : [Int] = concatenateNested(testTup1 : arg10, testTup2 : arg11)\nvar v1 : [Int] = [1, 2, 3, 4]\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [Int] = [4, 5]\nvar arg21 : [Int] = [6, 8]\nvar x2 : [Int] = concatenateNested(testTup1 : arg20, testTup2 : arg21)\nvar v2 : [Int] = [4, 5, 6, 8]\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to concatenate the given two tuples to a nested tuple.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/973", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to left rotate the string.\n *\n * >>> leftRotate(\"python\", 2)\n * \"thonpy\"\n * >>> leftRotate(\"bigdata\", 3)\n * \"databig\"\n * >>> leftRotate(\"hadoop\", 1)\n * \"adooph\"\n */\nfunc leftRotate(s : String, d : Int) -> String {\n", "entry_point": "leftRotate", "test": "\n\nvar arg00 : String = #\"python\"#\nvar arg01 : Int = 2\nvar x0 : String = leftRotate(s : arg00, d : arg01)\nvar v0 : String = #\"thonpy\"#\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : String = #\"bigdata\"#\nvar arg11 : Int = 3\nvar x1 : String = leftRotate(s : arg10, d : arg11)\nvar v1 : String = #\"databig\"#\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : String = #\"hadoop\"#\nvar arg21 : Int = 1\nvar x2 : String = leftRotate(s : arg20, d : arg21)\nvar v2 : String = #\"adooph\"#\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a Swift function to left rotate the string.", "language": "swift", "canonical_solution": null}
{"task_id": "MBSWP/974", "prompt": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the minimum total path sum in the given triangle.\n *\n * >>> minSumPath([[2], [3, 9], [1, 6, 7]])\n * 6\n * >>> minSumPath([[2], [3, 7], [8, 5, 6]])\n * 10\n * >>> minSumPath([[3], [6, 4], [5, 2, 7]])\n * 9\n */\nfunc minSumPath(a : [[Int]]) -> Int {\n", "entry_point": "minSumPath", "test": "\n\nvar arg00 : [[Int]] = [[2], [3, 9], [1, 6, 7]]\nvar x0 : Int = minSumPath(a : arg00)\nvar v0 : Int = 6\nassert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \")\n\nvar arg10 : [[Int]] = [[2], [3, 7], [8, 5, 6]]\nvar x1 : Int = minSumPath(a : arg10)\nvar v1 : Int = 10\nassert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \")\n\nvar arg20 : [[Int]] = [[3], [6, 4], [5, 2, 7]]\nvar x2 : Int = minSumPath(a : arg20)\nvar v2 : Int = 9\nassert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \")\n\n", "description": "Write a function to find the minimum total path sum in the given triangle.", "language": "swift", "canonical_solution": null}
