{"task_id": "MBGP/1", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n// Examples:\n// >>> min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)\n// >>> 8\n// >>> min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)\n// >>> 12\n// >>> min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)\n// >>> 16\nfunc min_cost (cost [][]int, m int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := min_cost([][]int{[]int{1, 2, 3}, []int{4, 8, 2}, []int{1, 5, 3}},2,2)\n\texpected_1 := 8\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := min_cost([][]int{[]int{2, 3, 4}, []int{5, 9, 3}, []int{2, 6, 4}},2,2)\n\texpected_2 := 12\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := min_cost([][]int{[]int{3, 4, 5}, []int{6, 10, 4}, []int{3, 7, 5}},2,2)\n\texpected_3 := 16\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].", "entry_point": "min_cost", "canonical_solution": null}
{"task_id": "MBGP/2", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the similar elements from the given two tuple lists.\n// Examples:\n// >>> similar_elements((3, 4, 5, 6),(5, 7, 4, 10))\n// >>> (4, 5)\n// >>> similar_elements((1, 2, 3, 4),(5, 4, 3, 7))\n// >>> (3, 4)\n// >>> similar_elements((11, 12, 14, 13),(17, 15, 14, 13))\n// >>> (13, 14)\nfunc similar_elements (test_tup1 []int, test_tup2 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := similar_elements([]int{3, 4, 5, 6},[]int{5, 7, 4, 10})\n\texpected_1 := []int{4, 5}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := similar_elements([]int{1, 2, 3, 4},[]int{5, 4, 3, 7})\n\texpected_2 := []int{3, 4}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := similar_elements([]int{11, 12, 14, 13},[]int{17, 15, 14, 13})\n\texpected_3 := []int{13, 14}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the similar elements from the given two tuple lists.", "entry_point": "similar_elements", "canonical_solution": null}
{"task_id": "MBGP/3", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to identify non-prime numbers.\n// Examples:\n// >>> is_not_prime(2)\n// >>> False\n// >>> is_not_prime(10)\n// >>> True\n// >>> is_not_prime(35)\n// >>> True\nfunc is_not_prime (n int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_not_prime(2)\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_not_prime(10)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_not_prime(35)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to identify non-prime numbers.", "entry_point": "is_not_prime", "canonical_solution": null}
{"task_id": "MBGP/5", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n// Examples:\n// >>> count_ways(2)\n// >>> 3\n// >>> count_ways(8)\n// >>> 153\n// >>> count_ways(12)\n// >>> 2131\nfunc count_ways (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_ways(2)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_ways(8)\n\texpected_2 := 153\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_ways(12)\n\texpected_3 := 2131\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.", "entry_point": "count_ways", "canonical_solution": null}
{"task_id": "MBGP/6", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the two numbers differ at one bit position only or not.\n// Examples:\n// >>> differ_At_One_Bit_Pos(13,9)\n// >>> True\n// >>> differ_At_One_Bit_Pos(15,8)\n// >>> False\n// >>> differ_At_One_Bit_Pos(2,4)\n// >>> False\nfunc differ_At_One_Bit_Pos (a int, b int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := differ_At_One_Bit_Pos(13,9)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := differ_At_One_Bit_Pos(15,8)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := differ_At_One_Bit_Pos(2,4)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the two numbers differ at one bit position only or not.", "entry_point": "differ_At_One_Bit_Pos", "canonical_solution": null}
{"task_id": "MBGP/7", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find all words which are at least 4 characters long in a string by using regex.\n// Examples:\n// >>> find_char_long('Please move back to stream')\n// >>> ['Please', 'move', 'back', 'stream']\n// >>> find_char_long('Jing Eco and Tech')\n// >>> ['Jing', 'Tech']\n// >>> find_char_long('Jhingai wulu road Zone 3')\n// >>> ['Jhingai', 'wulu', 'road', 'Zone']\nfunc find_char_long (text string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_char_long(\"Please move back to stream\")\n\texpected_1 := []string{\"Please\", \"move\", \"back\", \"stream\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_char_long(\"Jing Eco and Tech\")\n\texpected_2 := []string{\"Jing\", \"Tech\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_char_long(\"Jhingai wulu road Zone 3\")\n\texpected_3 := []string{\"Jhingai\", \"wulu\", \"road\", \"Zone\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find all words which are at least 4 characters long in a string by using regex.", "entry_point": "find_char_long", "canonical_solution": null}
{"task_id": "MBGP/8", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find squares of individual elements in a list using lambda function.\n// Examples:\n// >>> square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n// >>> [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n// >>> square_nums([10,20,30])\n// >>> ([100,400,900])\n// >>> square_nums([12,15])\n// >>> ([144,225])\nfunc square_nums (nums []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := square_nums([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n\texpected_1 := []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := square_nums([]int{10, 20, 30})\n\texpected_2 := []int{100, 400, 900}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := square_nums([]int{12, 15})\n\texpected_3 := []int{144, 225}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find squares of individual elements in a list using lambda function.", "entry_point": "square_nums", "canonical_solution": null}
{"task_id": "MBGP/9", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the minimum number of rotations required to get the same string.\n// Examples:\n// >>> find_Rotations(\"aaaa\")\n// >>> 1\n// >>> find_Rotations(\"ab\")\n// >>> 2\n// >>> find_Rotations(\"abc\")\n// >>> 3\nfunc find_Rotations (str string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Rotations(\"aaaa\")\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Rotations(\"ab\")\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Rotations(\"abc\")\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the minimum number of rotations required to get the same string.", "entry_point": "find_Rotations", "canonical_solution": null}
{"task_id": "MBGP/11", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to remove first and last occurrence of a given character from the string.\n// Examples:\n// >>> remove_Occ(\"hello\",\"l\")\n// >>> \"heo\"\n// >>> remove_Occ(\"abcda\",\"a\")\n// >>> \"bcd\"\n// >>> remove_Occ(\"PHP\",\"P\")\n// >>> \"H\"\nfunc remove_Occ (s string, ch string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_Occ(\"hello\",\"l\")\n\texpected_1 := \"heo\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_Occ(\"abcda\",\"a\")\n\texpected_2 := \"bcd\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_Occ(\"PHP\",\"P\")\n\texpected_3 := \"H\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to remove first and last occurrence of a given character from the string.", "entry_point": "remove_Occ", "canonical_solution": null}
{"task_id": "MBGP/12", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\n// Examples:\n// >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n// >>> [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n// >>> sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])\n// >>> [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n// >>> sort_matrix([[5,8,9],[6,4,3],[2,1,4]])\n// >>> [[2, 1, 4], [6, 4, 3], [5, 8, 9]]\nfunc sort_matrix (M [][]int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sort_matrix([][]int{[]int{1, 2, 3}, []int{2, 4, 5}, []int{1, 1, 1}})\n\texpected_1 := [][]int{[]int{1, 1, 1}, []int{1, 2, 3}, []int{2, 4, 5}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sort_matrix([][]int{[]int{1, 2, 3}, []int{-2, 4, -5}, []int{1, -1, 1}})\n\texpected_2 := [][]int{[]int{-2, 4, -5}, []int{1, -1, 1}, []int{1, 2, 3}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sort_matrix([][]int{[]int{5, 8, 9}, []int{6, 4, 3}, []int{2, 1, 4}})\n\texpected_3 := [][]int{[]int{2, 1, 4}, []int{6, 4, 3}, []int{5, 8, 9}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "entry_point": "sort_matrix", "canonical_solution": null}
{"task_id": "MBGP/13", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count the most common words in a dictionary.\n// Examples:\n// >>> count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red'])\n// >>> [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n// >>> count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one'])\n// >>> [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\n// >>> count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon'])\n// >>> [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]\nfunc count_common (words []string) [][]interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_common([]string{\"red\", \"green\", \"black\", \"pink\", \"black\", \"white\", \"black\", \"eyes\", \"white\", \"black\", \"orange\", \"pink\", \"pink\", \"red\", \"red\", \"white\", \"orange\", \"white\", \"black\", \"pink\", \"green\", \"green\", \"pink\", \"green\", \"pink\", \"white\", \"orange\", \"orange\", \"red\"})\n\texpected_1 := [][]interface{}{[]interface{}{\"pink\", 6}, []interface{}{\"black\", 5}, []interface{}{\"white\", 5}, []interface{}{\"red\", 4}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_common([]string{\"one\", \"two\", \"three\", \"four\", \"five\", \"one\", \"two\", \"one\", \"three\", \"one\"})\n\texpected_2 := [][]interface{}{[]interface{}{\"one\", 4}, []interface{}{\"two\", 2}, []interface{}{\"three\", 2}, []interface{}{\"four\", 1}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_common([]string{\"Facebook\", \"Apple\", \"Amazon\", \"Netflix\", \"Google\", \"Apple\", \"Netflix\", \"Amazon\"})\n\texpected_3 := [][]interface{}{[]interface{}{\"Apple\", 2}, []interface{}{\"Amazon\", 2}, []interface{}{\"Netflix\", 2}, []interface{}{\"Facebook\", 1}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count the most common words in a dictionary.", "entry_point": "count_common", "canonical_solution": null}
{"task_id": "MBGP/14", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the volume of a triangular prism.\n// Examples:\n// >>> find_Volume(10,8,6)\n// >>> 240\n// >>> find_Volume(3,2,2)\n// >>> 6\n// >>> find_Volume(1,2,1)\n// >>> 1\nfunc find_Volume (l int, b int, h int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Volume(10,8,6)\n\texpected_1 := 240.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Volume(3,2,2)\n\texpected_2 := 6.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Volume(1,2,1)\n\texpected_3 := 1.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the volume of a triangular prism.", "entry_point": "find_Volume", "canonical_solution": null}
{"task_id": "MBGP/15", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to split a string at lowercase letters.\n// Examples:\n// >>> split_lowerstring(\"AbCd\")\n// >>> ['bC','d']\n// >>> split_lowerstring(\"Python\")\n// >>> ['y', 't', 'h', 'o', 'n']\n// >>> split_lowerstring(\"Programming\")\n// >>> ['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']\nfunc split_lowerstring (text string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := split_lowerstring(\"AbCd\")\n\texpected_1 := []string{\"bC\", \"d\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := split_lowerstring(\"Python\")\n\texpected_2 := []string{\"y\", \"t\", \"h\", \"o\", \"n\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := split_lowerstring(\"Programming\")\n\texpected_3 := []string{\"r\", \"o\", \"g\", \"r\", \"a\", \"m\", \"m\", \"i\", \"n\", \"g\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to split a string at lowercase letters.", "entry_point": "split_lowerstring", "canonical_solution": null}
{"task_id": "MBGP/16", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find sequences of lowercase letters joined with an underscore.\n// Examples:\n// >>> text_lowercase_underscore(\"aab_cbbbc\")\n// >>> ('Found a match!')\n// >>> text_lowercase_underscore(\"aab_Abbbc\")\n// >>> ('Not matched!')\n// >>> text_lowercase_underscore(\"Aaab_abbbc\")\n// >>> ('Not matched!')\nfunc text_lowercase_underscore (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := text_lowercase_underscore(\"aab_cbbbc\")\n\texpected_1 := \"Found a match!\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := text_lowercase_underscore(\"aab_Abbbc\")\n\texpected_2 := \"Not matched!\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := text_lowercase_underscore(\"Aaab_abbbc\")\n\texpected_3 := \"Not matched!\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find sequences of lowercase letters joined with an underscore.", "entry_point": "text_lowercase_underscore", "canonical_solution": null}
{"task_id": "MBGP/17", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the perimeter of a square.\n// Examples:\n// >>> square_perimeter(10)\n// >>> 40\n// >>> square_perimeter(5)\n// >>> 20\n// >>> square_perimeter(4)\n// >>> 16\nfunc square_perimeter (a int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := square_perimeter(10)\n\texpected_1 := 40\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := square_perimeter(5)\n\texpected_2 := 20\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := square_perimeter(4)\n\texpected_3 := 16\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the perimeter of a square.", "entry_point": "square_perimeter", "canonical_solution": null}
{"task_id": "MBGP/18", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove characters from the first string which are present in the second string.\n// Examples:\n// >>> remove_dirty_chars(\"probasscurve\", \"pros\")\n// >>> 'bacuve'\n// >>> remove_dirty_chars(\"digitalindia\", \"talent\")\n// >>> 'digiidi'\n// >>> remove_dirty_chars(\"exoticmiles\", \"toxic\")\n// >>> 'emles'\nfunc remove_dirty_chars (string0 string, second_string string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_dirty_chars(\"probasscurve\",\"pros\")\n\texpected_1 := \"bacuve\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_dirty_chars(\"digitalindia\",\"talent\")\n\texpected_2 := \"digiidi\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_dirty_chars(\"exoticmiles\",\"toxic\")\n\texpected_3 := \"emles\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove characters from the first string which are present in the second string.", "entry_point": "remove_dirty_chars", "canonical_solution": null}
{"task_id": "MBGP/19", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find whether a given array of integers contains any duplicate element.\n// Examples:\n// >>> test_duplicate(([1,2,3,4,5]))\n// >>> False\n// >>> test_duplicate(([1,2,3,4, 4]))\n// >>> True\n// >>> test_duplicate([1,1,2,2,3,3,4,4,5])\n// >>> True\nfunc test_duplicate (arraynums []int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := test_duplicate([]int{1, 2, 3, 4, 5})\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := test_duplicate([]int{1, 2, 3, 4, 4})\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := test_duplicate([]int{1, 1, 2, 2, 3, 3, 4, 4, 5})\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find whether a given array of integers contains any duplicate element.", "entry_point": "test_duplicate", "canonical_solution": null}
{"task_id": "MBGP/20", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if the given number is woodball or not.\n// Examples:\n// >>> is_woodall(383)\n// >>> True\n// >>> is_woodall(254)\n// >>> False\n// >>> is_woodall(200)\n// >>> False\nfunc is_woodall (x int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_woodall(383)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_woodall(254)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_woodall(200)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if the given number is woodball or not.", "entry_point": "is_woodall", "canonical_solution": null}
{"task_id": "MBGP/21", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find m number of multiples of n.\n// Examples:\n// >>> multiples_of_num(4,3)\n// >>> [3,6,9,12]\n// >>> multiples_of_num(2,5)\n// >>> [5,10]\n// >>> multiples_of_num(9,2)\n// >>> [2,4,6,8,10,12,14,16,18]\nfunc multiples_of_num (m int, n int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := multiples_of_num(4,3)\n\texpected_1 := []int{3, 6, 9, 12}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := multiples_of_num(2,5)\n\texpected_2 := []int{5, 10}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := multiples_of_num(9,2)\n\texpected_3 := []int{2, 4, 6, 8, 10, 12, 14, 16, 18}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find m number of multiples of n.", "entry_point": "multiples_of_num", "canonical_solution": null}
{"task_id": "MBGP/22", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the first duplicate element in a given array of integers.\n// Examples:\n// >>> find_first_duplicate(([1, 2, 3, 4, 4, 5]))\n// >>> 4\n// >>> find_first_duplicate([1, 2, 3, 4])\n// >>> -1\n// >>> find_first_duplicate([1, 1, 2, 3, 3, 2, 2])\n// >>> 1\nfunc find_first_duplicate (nums []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_first_duplicate([]int{1, 2, 3, 4, 4, 5})\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_first_duplicate([]int{1, 2, 3, 4})\n\texpected_2 := -1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_first_duplicate([]int{1, 1, 2, 3, 3, 2, 2})\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the first duplicate element in a given array of integers.", "entry_point": "find_first_duplicate", "canonical_solution": null}
{"task_id": "MBGP/23", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the maximum sum of elements of list in a list of lists.\n// Examples:\n// >>> maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]])\n// >>> 33\n// >>> maximum_Sum([[0,1,1],[1,1,2],[3,2,1]])\n// >>> 6\n// >>> maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]])\n// >>> 19\nfunc maximum_Sum (list1 [][]int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := maximum_Sum([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{10, 11, 12}, []int{7, 8, 9}})\n\texpected_1 := 33\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := maximum_Sum([][]int{[]int{0, 1, 1}, []int{1, 1, 2}, []int{3, 2, 1}})\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := maximum_Sum([][]int{[]int{0, 1, 3}, []int{1, 2, 1}, []int{9, 8, 2}, []int{0, 1, 0}, []int{6, 4, 8}})\n\texpected_3 := 19\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the maximum sum of elements of list in a list of lists.", "entry_point": "maximum_Sum", "canonical_solution": null}
{"task_id": "MBGP/24", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert the given binary number to its decimal equivalent.\n// Examples:\n// >>> binary_to_decimal(100)\n// >>> 4\n// >>> binary_to_decimal(1011)\n// >>> 11\n// >>> binary_to_decimal(1101101)\n// >>> 109\nfunc binary_to_decimal (binary int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := binary_to_decimal(100)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := binary_to_decimal(1011)\n\texpected_2 := 11\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := binary_to_decimal(1101101)\n\texpected_3 := 109\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert the given binary number to its decimal equivalent.", "entry_point": "binary_to_decimal", "canonical_solution": null}
{"task_id": "MBGP/25", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the product of non-repeated elements in a given array.\n// Examples:\n// >>> find_Product([1,1,2,3],4)\n// >>> 6\n// >>> find_Product([1,2,3,1,1],5)\n// >>> 6\n// >>> find_Product([1,1,4,5,6],5)\n// >>> 120\nfunc find_Product (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Product([]int{1, 1, 2, 3},4)\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Product([]int{1, 2, 3, 1, 1},5)\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Product([]int{1, 1, 4, 5, 6},5)\n\texpected_3 := 120\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the product of non-repeated elements in a given array.", "entry_point": "find_Product", "canonical_solution": null}
{"task_id": "MBGP/26", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if the given tuple list has all k elements.\n// Examples:\n// >>> check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4)\n// >>> True\n// >>> check_k_elements([(7, 7, 7), (7, 7)], 7)\n// >>> True\n// >>> check_k_elements([(9, 9), (9, 9, 9, 9)], 7)\n// >>> False\nfunc check_k_elements (test_list [][]int, K int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_k_elements([][]int{[]int{4, 4}, []int{4, 4, 4}, []int{4, 4}, []int{4, 4, 4, 4}, []int{4}},4)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_k_elements([][]int{[]int{7, 7, 7}, []int{7, 7}},7)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_k_elements([][]int{[]int{9, 9}, []int{9, 9, 9, 9}},7)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if the given tuple list has all k elements.", "entry_point": "check_k_elements", "canonical_solution": null}
{"task_id": "MBGP/27", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to remove all digits from a list of strings.\n// Examples:\n// >>> remove(['4words', '3letters', '4digits'])\n// >>> ['words', 'letters', 'digits']\n// >>> remove(['28Jan','12Jan','11Jan'])\n// >>> ['Jan','Jan','Jan']\n// >>> remove(['wonder1','wonder2','wonder3'])\n// >>> ['wonder','wonder','wonder']\nfunc remove (list []string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove([]string{\"4words\", \"3letters\", \"4digits\"})\n\texpected_1 := []string{\"words\", \"letters\", \"digits\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove([]string{\"28Jan\", \"12Jan\", \"11Jan\"})\n\texpected_2 := []string{\"Jan\", \"Jan\", \"Jan\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove([]string{\"wonder1\", \"wonder2\", \"wonder3\"})\n\texpected_3 := []string{\"wonder\", \"wonder\", \"wonder\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to remove all digits from a list of strings.", "entry_point": "remove", "canonical_solution": null}
{"task_id": "MBGP/28", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find binomial co-efficient.\n// Examples:\n// >>> binomial_Coeff(5,2)\n// >>> 10\n// >>> binomial_Coeff(4,3)\n// >>> 4\n// >>> binomial_Coeff(3,2)\n// >>> 3\nfunc binomial_Coeff (n int, k int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := binomial_Coeff(5,2)\n\texpected_1 := 10\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := binomial_Coeff(4,3)\n\texpected_2 := 4\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := binomial_Coeff(3,2)\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find binomial co-efficient.", "entry_point": "binomial_Coeff", "canonical_solution": null}
{"task_id": "MBGP/29", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the element occurring odd number of times.\n// Examples:\n// >>> get_Odd_Occurrence([1,2,3,1,2,3,1],7)\n// >>> 1\n// >>> get_Odd_Occurrence([1,2,3,2,3,1,3],7)\n// >>> 3\n// >>> get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13)\n// >>> 5\nfunc get_Odd_Occurrence (arr []int, arr_size int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_Odd_Occurrence([]int{1, 2, 3, 1, 2, 3, 1},7)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_Odd_Occurrence([]int{1, 2, 3, 2, 3, 1, 3},7)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_Odd_Occurrence([]int{2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2},13)\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the element occurring odd number of times.", "entry_point": "get_Odd_Occurrence", "canonical_solution": null}
{"task_id": "MBGP/30", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count all the substrings starting and ending with same characters.\n// Examples:\n// >>> count_Substring_With_Equal_Ends(\"abc\")\n// >>> 3\n// >>> count_Substring_With_Equal_Ends(\"abcda\")\n// >>> 6\n// >>> count_Substring_With_Equal_Ends(\"ab\")\n// >>> 2\nfunc count_Substring_With_Equal_Ends (s string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Substring_With_Equal_Ends(\"abc\")\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Substring_With_Equal_Ends(\"abcda\")\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Substring_With_Equal_Ends(\"ab\")\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count all the substrings starting and ending with same characters.", "entry_point": "count_Substring_With_Equal_Ends", "canonical_solution": null}
{"task_id": "MBGP/32", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the largest prime factor of a given number.\n// Examples:\n// >>> max_Prime_Factors(15)\n// >>> 5\n// >>> max_Prime_Factors(6)\n// >>> 3\n// >>> max_Prime_Factors(2)\n// >>> 2\nfunc max_Prime_Factors (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_Prime_Factors(15)\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_Prime_Factors(6)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_Prime_Factors(2)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the largest prime factor of a given number.", "entry_point": "max_Prime_Factors", "canonical_solution": null}
{"task_id": "MBGP/33", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to convert a decimal number to binary number.\n// Examples:\n// >>> decimal_To_Binary(10)\n// >>> 1010\n// >>> decimal_To_Binary(1)\n// >>> 1\n// >>> decimal_To_Binary(20)\n// >>> 10100\nfunc decimal_To_Binary (N int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := decimal_To_Binary(10)\n\texpected_1 := 1010\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := decimal_To_Binary(1)\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := decimal_To_Binary(20)\n\texpected_3 := 10100\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to convert a decimal number to binary number.", "entry_point": "decimal_To_Binary", "canonical_solution": null}
{"task_id": "MBGP/34", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the missing number in a sorted array.\n// Examples:\n// >>> find_missing([1,2,3,5],4)\n// >>> 4\n// >>> find_missing([1,3,4,5],4)\n// >>> 2\n// >>> find_missing([1,2,3,5,6,7],5)\n// >>> 4\nfunc find_missing (ar []int, N int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_missing([]int{1, 2, 3, 5},4)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_missing([]int{1, 3, 4, 5},4)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_missing([]int{1, 2, 3, 5, 6, 7},5)\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the missing number in a sorted array.", "entry_point": "find_missing", "canonical_solution": null}
{"task_id": "MBGP/35", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the n-th rectangular number.\n// Examples:\n// >>> find_rect_num(4)\n// >>> 20\n// >>> find_rect_num(5)\n// >>> 30\n// >>> find_rect_num(6)\n// >>> 42\nfunc find_rect_num (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_rect_num(4)\n\texpected_1 := 20\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_rect_num(5)\n\texpected_2 := 30\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_rect_num(6)\n\texpected_3 := 42\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the n-th rectangular number.", "entry_point": "find_rect_num", "canonical_solution": null}
{"task_id": "MBGP/36", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the nth digit in the proper fraction of two given numbers.\n// Examples:\n// >>> find_Nth_Digit(1,2,1)\n// >>> 5\n// >>> find_Nth_Digit(3,5,1)\n// >>> 6\n// >>> find_Nth_Digit(5,6,5)\n// >>> 3\nfunc find_Nth_Digit (p int, q int, N int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Nth_Digit(1,2,1)\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Nth_Digit(3,5,1)\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Nth_Digit(5,6,5)\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the nth digit in the proper fraction of two given numbers.", "entry_point": "find_Nth_Digit", "canonical_solution": null}
{"task_id": "MBGP/37", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort a given mixed list of integers and strings.\n// Examples:\n// >>> sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])\n// >>> [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n// >>> sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])\n// >>> [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n// >>> sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])\n// >>> [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nfunc sort_mixed_list (mixed_list []interface{}) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sort_mixed_list([]interface{}{19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1})\n\texpected_1 := []interface{}{1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sort_mixed_list([]interface{}{19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1})\n\texpected_2 := []interface{}{1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sort_mixed_list([]interface{}{19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1})\n\texpected_3 := []interface{}{1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort a given mixed list of integers and strings.", "entry_point": "sort_mixed_list", "canonical_solution": null}
{"task_id": "MBGP/38", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the division of first even and odd number of a given list.\n// Examples:\n// >>> div_even_odd([1,3,5,7,4,1,6,8])\n// >>> 4\n// >>> div_even_odd([1,2,3,4,5,6,7,8,9,10])\n// >>> 2\n// >>> div_even_odd([1,5,7,9,10])\n// >>> 10\nfunc div_even_odd (list1 []int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := div_even_odd([]int{1, 3, 5, 7, 4, 1, 6, 8})\n\texpected_1 := 4.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := div_even_odd([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n\texpected_2 := 2.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := div_even_odd([]int{1, 5, 7, 9, 10})\n\texpected_3 := 10.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the division of first even and odd number of a given list.", "entry_point": "div_even_odd", "canonical_solution": null}
{"task_id": "MBGP/40", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find frequency of the elements in a given list of lists using collections module.\n// Examples:\n// >>> freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])\n// >>> ({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n// >>> freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])\n// >>> ({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\n// >>> freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])\n// >>> ({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})\nfunc freq_element (nums [][]int) map[int]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := freq_element([][]int{[]int{1, 2, 3, 2}, []int{4, 5, 6, 2}, []int{7, 1, 9, 5}})\n\texpected_1 := map[int]int{ 1: 2, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 9: 1,  }\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := freq_element([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12}})\n\texpected_2 := map[int]int{ 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1,  }\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := freq_element([][]int{[]int{15, 20, 30, 40}, []int{80, 90, 100, 110}, []int{30, 30, 80, 90}})\n\texpected_3 := map[int]int{ 15: 1, 20: 1, 30: 3, 40: 1, 80: 2, 90: 2, 100: 1, 110: 1,  }\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find frequency of the elements in a given list of lists using collections module.", "entry_point": "freq_element", "canonical_solution": null}
{"task_id": "MBGP/41", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to filter even numbers using lambda function.\n// Examples:\n// >>> filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n// >>> [2, 4, 6, 8, 10]\n// >>> filter_evennumbers([10,20,45,67,84,93])\n// >>> [10,20,84]\n// >>> filter_evennumbers([5,7,9,8,6,4,3])\n// >>> [8,6,4]\nfunc filter_evennumbers (nums []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := filter_evennumbers([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n\texpected_1 := []int{2, 4, 6, 8, 10}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := filter_evennumbers([]int{10, 20, 45, 67, 84, 93})\n\texpected_2 := []int{10, 20, 84}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := filter_evennumbers([]int{5, 7, 9, 8, 6, 4, 3})\n\texpected_3 := []int{8, 6, 4}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to filter even numbers using lambda function.", "entry_point": "filter_evennumbers", "canonical_solution": null}
{"task_id": "MBGP/42", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of repeated elements in a given array.\n// Examples:\n// >>> find_Sum([1,2,3,1,1,4,5,6],8)\n// >>> 3\n// >>> find_Sum([1,2,3,1,1],5)\n// >>> 3\n// >>> find_Sum([1,1,2],3)\n// >>> 2\nfunc find_Sum (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Sum([]int{1, 2, 3, 1, 1, 4, 5, 6},8)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Sum([]int{1, 2, 3, 1, 1},5)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Sum([]int{1, 1, 2},3)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of repeated elements in a given array.", "entry_point": "find_Sum", "canonical_solution": null}
{"task_id": "MBGP/43", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find sequences of lowercase letters joined with an underscore using regex.\n// Examples:\n// >>> text_match(\"aab_cbbbc\")\n// >>> 'Found a match!'\n// >>> text_match(\"aab_Abbbc\")\n// >>> 'Not matched!'\n// >>> text_match(\"Aaab_abbbc\")\n// >>> 'Not matched!'\nfunc text_match (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := text_match(\"aab_cbbbc\")\n\texpected_1 := \"Found a match!\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := text_match(\"aab_Abbbc\")\n\texpected_2 := \"Not matched!\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := text_match(\"Aaab_abbbc\")\n\texpected_3 := \"Not matched!\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find sequences of lowercase letters joined with an underscore using regex.", "entry_point": "text_match", "canonical_solution": null}
{"task_id": "MBGP/44", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function that matches a word at the beginning of a string.\n// Examples:\n// >>> text_match_string(\" python\")\n// >>> ('Not matched!')\n// >>> text_match_string(\"python\")\n// >>> ('Found a match!')\n// >>> text_match_string(\"  lang\")\n// >>> ('Not matched!')\nfunc text_match_string (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := text_match_string(\" python\")\n\texpected_1 := \"Not matched!\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := text_match_string(\"python\")\n\texpected_2 := \"Found a match!\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := text_match_string(\"  lang\")\n\texpected_3 := \"Not matched!\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function that matches a word at the beginning of a string.", "entry_point": "text_match_string", "canonical_solution": null}
{"task_id": "MBGP/45", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the gcd of the given array elements.\n// Examples:\n// >>> get_gcd([2, 4, 6, 8, 16])\n// >>> 2\n// >>> get_gcd([1, 2, 3])\n// >>> 1\n// >>> get_gcd([2, 4, 6, 8])\n// >>> 2\nfunc get_gcd (l []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_gcd([]int{2, 4, 6, 8, 16})\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_gcd([]int{1, 2, 3})\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_gcd([]int{2, 4, 6, 8})\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the gcd of the given array elements.", "entry_point": "get_gcd", "canonical_solution": null}
{"task_id": "MBGP/46", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to determine whether all the numbers are different from each other are not.\n// Examples:\n// >>> test_distinct([1,5,7,9])\n// >>> True\n// >>> test_distinct([2,4,5,5,7,9])\n// >>> False\n// >>> test_distinct([1,2,3])\n// >>> True\nfunc test_distinct (data []int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := test_distinct([]int{1, 5, 7, 9})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := test_distinct([]int{2, 4, 5, 5, 7, 9})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := test_distinct([]int{1, 2, 3})\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to determine whether all the numbers are different from each other are not.", "entry_point": "test_distinct", "canonical_solution": null}
{"task_id": "MBGP/47", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the last digit when factorial of a divides factorial of b.\n// Examples:\n// >>> compute_Last_Digit(2,4)\n// >>> 2\n// >>> compute_Last_Digit(6,8)\n// >>> 6\n// >>> compute_Last_Digit(1,2)\n// >>> 2\nfunc compute_Last_Digit (A int, B int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := compute_Last_Digit(2,4)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := compute_Last_Digit(6,8)\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := compute_Last_Digit(1,2)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the last digit when factorial of a divides factorial of b.", "entry_point": "compute_Last_Digit", "canonical_solution": null}
{"task_id": "MBGP/48", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to set all odd bits of a given number.\n// Examples:\n// >>> odd_bit_set_number(10)\n// >>> 15\n// >>> odd_bit_set_number(20)\n// >>> 21\n// >>> odd_bit_set_number(30)\n// >>> 31\nfunc odd_bit_set_number (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := odd_bit_set_number(10)\n\texpected_1 := 15\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := odd_bit_set_number(20)\n\texpected_2 := 21\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := odd_bit_set_number(30)\n\texpected_3 := 31\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to set all odd bits of a given number.", "entry_point": "odd_bit_set_number", "canonical_solution": null}
{"task_id": "MBGP/49", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to extract every first or specified element from a given two-dimensional list.\n// Examples:\n// >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)\n// >>> [1, 4, 7]\n// >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)\n// >>> [3, 6, 9]\n// >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)\n// >>> [2,5,1]\nfunc specified_element (nums [][]int, N int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := specified_element([][]int{[]int{1, 2, 3, 2}, []int{4, 5, 6, 2}, []int{7, 1, 9, 5}},0)\n\texpected_1 := []int{1, 4, 7}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := specified_element([][]int{[]int{1, 2, 3, 2}, []int{4, 5, 6, 2}, []int{7, 1, 9, 5}},2)\n\texpected_2 := []int{3, 6, 9}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := specified_element([][]int{[]int{1, 2, 3, 2}, []int{4, 5, 6, 2}, []int{7, 1, 9, 5}},1)\n\texpected_3 := []int{2, 5, 1}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to extract every first or specified element from a given two-dimensional list.", "entry_point": "specified_element", "canonical_solution": null}
{"task_id": "MBGP/50", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the list with minimum length using lambda function.\n// Examples:\n// >>> min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n// >>> (1, [0])\n// >>> min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])\n// >>> (1,[1])\n// >>> min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])\n// >>> (2,[1,2])\nfunc min_length_list (input_list [][]int) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := min_length_list([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}})\n\texpected_1 := []interface{}{1, []interface{}{0}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := min_length_list([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}})\n\texpected_2 := []interface{}{1, []interface{}{1}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := min_length_list([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}, []int{1, 2}})\n\texpected_3 := []interface{}{2, []interface{}{1, 2}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the list with minimum length using lambda function.", "entry_point": "min_length_list", "canonical_solution": null}
{"task_id": "MBGP/51", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to print check if the triangle is equilateral or not.\n// Examples:\n// >>> check_equilateral(6,8,12)\n// >>> False\n// >>> check_equilateral(6,6,12)\n// >>> False\n// >>> check_equilateral(6,6,6)\n// >>> True\nfunc check_equilateral (x int, y int, z int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_equilateral(6,8,12)\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_equilateral(6,6,12)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_equilateral(6,6,6)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to print check if the triangle is equilateral or not.", "entry_point": "check_equilateral", "canonical_solution": null}
{"task_id": "MBGP/52", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to caluclate area of a parallelogram.\n// Examples:\n// >>> parallelogram_area(10,20)\n// >>> 200\n// >>> parallelogram_area(15,20)\n// >>> 300\n// >>> parallelogram_area(8,9)\n// >>> 72\nfunc parallelogram_area (b int, h int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := parallelogram_area(10,20)\n\texpected_1 := 200\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := parallelogram_area(15,20)\n\texpected_2 := 300\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := parallelogram_area(8,9)\n\texpected_3 := 72\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to caluclate area of a parallelogram.", "entry_point": "parallelogram_area", "canonical_solution": null}
{"task_id": "MBGP/53", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the first and last characters of a given string are equal or not.\n// Examples:\n// >>> check_Equality(\"abcda\")\n// >>> \"Equal\"\n// >>> check_Equality(\"ab\")\n// >>> \"Not Equal\"\n// >>> check_Equality(\"mad\")\n// >>> \"Not Equal\"\nfunc check_Equality (str string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_Equality(\"abcda\")\n\texpected_1 := \"Equal\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_Equality(\"ab\")\n\texpected_2 := \"Not Equal\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_Equality(\"mad\")\n\texpected_3 := \"Not Equal\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the first and last characters of a given string are equal or not.", "entry_point": "check_Equality", "canonical_solution": null}
{"task_id": "MBGP/54", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort the given array by using counting sort.\n// Examples:\n// >>> counting_sort([1,23,4,5,6,7,8])\n// >>> [1, 4, 5, 6, 7, 8, 23]\n// >>> counting_sort([12, 9, 28, 33, 69, 45])\n// >>> [9, 12, 28, 33, 45, 69]\n// >>> counting_sort([8, 4, 14, 3, 2, 1])\n// >>> [1, 2, 3, 4, 8, 14]\nfunc counting_sort (my_list []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := counting_sort([]int{1, 23, 4, 5, 6, 7, 8})\n\texpected_1 := []int{1, 4, 5, 6, 7, 8, 23}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := counting_sort([]int{12, 9, 28, 33, 69, 45})\n\texpected_2 := []int{9, 12, 28, 33, 45, 69}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := counting_sort([]int{8, 4, 14, 3, 2, 1})\n\texpected_3 := []int{1, 2, 3, 4, 8, 14}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort the given array by using counting sort.", "entry_point": "counting_sort", "canonical_solution": null}
{"task_id": "MBGP/55", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find t-nth term of geometric series.\n// Examples:\n// >>> tn_gp(1,5,2)\n// >>> 16\n// >>> tn_gp(1,5,4)\n// >>> 256\n// >>> tn_gp(2,6,3)\n// >>> 486\nfunc tn_gp (a int, n int, r int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := tn_gp(1,5,2)\n\texpected_1 := 16.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := tn_gp(1,5,4)\n\texpected_2 := 256.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := tn_gp(2,6,3)\n\texpected_3 := 486.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find t-nth term of geometric series.", "entry_point": "tn_gp", "canonical_solution": null}
{"task_id": "MBGP/56", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check if a given number is one less than twice its reverse.\n// Examples:\n// >>> check(70)\n// >>> False\n// >>> check(23)\n// >>> False\n// >>> check(73)\n// >>> True\nfunc check (n int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check(70)\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check(23)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check(73)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check if a given number is one less than twice its reverse.", "entry_point": "check", "canonical_solution": null}
{"task_id": "MBGP/57", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the largest number that can be formed with the given digits.\n// Examples:\n// >>> find_Max_Num([1,2,3],3)\n// >>> 321\n// >>> find_Max_Num([4,5,6,1],4)\n// >>> 6541\n// >>> find_Max_Num([1,2,3,9],4)\n// >>> 9321\nfunc find_Max_Num (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Max_Num([]int{1, 2, 3},3)\n\texpected_1 := 321\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Max_Num([]int{4, 5, 6, 1},4)\n\texpected_2 := 6541\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Max_Num([]int{1, 2, 3, 9},4)\n\texpected_3 := 9321\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the largest number that can be formed with the given digits.", "entry_point": "find_Max_Num", "canonical_solution": null}
{"task_id": "MBGP/58", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the given two integers have opposite sign or not.\n// Examples:\n// >>> opposite_Signs(1,-2)\n// >>> True\n// >>> opposite_Signs(3,2)\n// >>> False\n// >>> opposite_Signs(-10,-10)\n// >>> False\nfunc opposite_Signs (x int, y int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := opposite_Signs(1,-2)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := opposite_Signs(3,2)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := opposite_Signs(-10,-10)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the given two integers have opposite sign or not.", "entry_point": "opposite_Signs", "canonical_solution": null}
{"task_id": "MBGP/59", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the nth octagonal number.\n// Examples:\n// >>> is_octagonal(5)\n// >>> 65\n// >>> is_octagonal(10)\n// >>> 280\n// >>> is_octagonal(15)\n// >>> 645\nfunc is_octagonal (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_octagonal(5)\n\texpected_1 := 65\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_octagonal(10)\n\texpected_2 := 280\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_octagonal(15)\n\texpected_3 := 645\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the nth octagonal number.", "entry_point": "is_octagonal", "canonical_solution": null}
{"task_id": "MBGP/60", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n// Examples:\n// >>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8)\n// >>> 5\n// >>> max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7)\n// >>> 4\n// >>> max_len_sub([9, 11, 13, 15, 18], 5)\n// >>> 1\nfunc max_len_sub (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_len_sub([]int{2, 5, 6, 3, 7, 6, 5, 8},8)\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_len_sub([]int{-2, -1, 5, -1, 4, 0, 3},7)\n\texpected_2 := 4\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_len_sub([]int{9, 11, 13, 15, 18},5)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.", "entry_point": "max_len_sub", "canonical_solution": null}
{"task_id": "MBGP/61", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count number of substrings with the sum of digits equal to their length.\n// Examples:\n// >>> count_Substrings('112112',6)\n// >>> 6\n// >>> count_Substrings('111',3)\n// >>> 6\n// >>> count_Substrings('1101112',7)\n// >>> 12\nfunc count_Substrings (s string, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Substrings(\"112112\",6)\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Substrings(\"111\",3)\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Substrings(\"1101112\",7)\n\texpected_3 := 12\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count number of substrings with the sum of digits equal to their length.", "entry_point": "count_Substrings", "canonical_solution": null}
{"task_id": "MBGP/62", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find smallest number in a list.\n// Examples:\n// >>> smallest_num([10, 20, 1, 45, 99])\n// >>> 1\n// >>> smallest_num([1, 2, 3])\n// >>> 1\n// >>> smallest_num([45, 46, 50, 60])\n// >>> 45\nfunc smallest_num (xs []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := smallest_num([]int{10, 20, 1, 45, 99})\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := smallest_num([]int{1, 2, 3})\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := smallest_num([]int{45, 46, 50, 60})\n\texpected_3 := 45\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find smallest number in a list.", "entry_point": "smallest_num", "canonical_solution": null}
{"task_id": "MBGP/63", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the maximum difference between available pairs in the given tuple list.\n// Examples:\n// >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n// >>> 7\n// >>> max_difference([(4, 6), (2, 17), (9, 13), (11, 12)])\n// >>> 15\n// >>> max_difference([(12, 35), (21, 27), (13, 23), (41, 22)])\n// >>> 23\nfunc max_difference (test_list [][]int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_difference([][]int{[]int{3, 5}, []int{1, 7}, []int{10, 3}, []int{1, 2}})\n\texpected_1 := 7\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_difference([][]int{[]int{4, 6}, []int{2, 17}, []int{9, 13}, []int{11, 12}})\n\texpected_2 := 15\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_difference([][]int{[]int{12, 35}, []int{21, 27}, []int{13, 23}, []int{41, 22}})\n\texpected_3 := 23\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the maximum difference between available pairs in the given tuple list.", "entry_point": "max_difference", "canonical_solution": null}
{"task_id": "MBGP/64", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort a list of tuples using lambda.\n// Examples:\n// >>> subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n// >>> [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n// >>> subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])\n// >>> ([('Social',33),('Telugu',49),('Hindhi',54)])\n// >>> subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])\n// >>> ([('Biology',45),('Physics',96),('Chemistry',97)])\nfunc subject_marks (subjectmarks [][]interface{}) [][]interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := subject_marks([][]interface{}{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}})\n\texpected_1 := [][]interface{}{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := subject_marks([][]interface{}{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}})\n\texpected_2 := [][]interface{}{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := subject_marks([][]interface{}{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}})\n\texpected_3 := [][]interface{}{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort a list of tuples using lambda.", "entry_point": "subject_marks", "canonical_solution": null}
{"task_id": "MBGP/65", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function of recursion list sum.\n// Examples:\n// >>> recursive_list_sum(([1, 2, [3,4],[5,6]]))\n// >>> 21\n// >>> recursive_list_sum(([7, 10, [15,14],[19,41]]))\n// >>> 106\n// >>> recursive_list_sum(([10, 20, [30,40],[50,60]]))\n// >>> 210\nfunc recursive_list_sum (data_list []interface{}) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := recursive_list_sum([]interface{}{1, 2, []interface{}{3, 4}, []interface{}{5, 6}})\n\texpected_1 := 21\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := recursive_list_sum([]interface{}{7, 10, []interface{}{15, 14}, []interface{}{19, 41}})\n\texpected_2 := 106\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := recursive_list_sum([]interface{}{10, 20, []interface{}{30, 40}, []interface{}{50, 60}})\n\texpected_3 := 210\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function of recursion list sum.", "entry_point": "recursive_list_sum", "canonical_solution": null}
{"task_id": "MBGP/66", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count positive numbers in a list.\n// Examples:\n// >>> pos_count([1,-2,3,-4])\n// >>> 2\n// >>> pos_count([3,4,5,-1])\n// >>> 3\n// >>> pos_count([1,2,3,4])\n// >>> 4\nfunc pos_count (list []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := pos_count([]int{1, -2, 3, -4})\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := pos_count([]int{3, 4, 5, -1})\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := pos_count([]int{1, 2, 3, 4})\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count positive numbers in a list.", "entry_point": "pos_count", "canonical_solution": null}
{"task_id": "MBGP/67", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the number of ways to partition a set of bell numbers.\n// Examples:\n// >>> bell_number(2)\n// >>> 2\n// >>> bell_number(10)\n// >>> 115975\n// >>> bell_number(56)\n// >>> 6775685320645824322581483068371419745979053216268760300\nfunc bell_number (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := bell_number(2)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := bell_number(10)\n\texpected_2 := 115975\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := bell_number(56)\n\texpected_3 := 6775685320645824322581483068371419745979053216268760300\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the number of ways to partition a set of bell numbers.", "entry_point": "bell_number", "canonical_solution": null}
{"task_id": "MBGP/68", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the given array is monotonic or not.\n// Examples:\n// >>> is_Monotonic([6, 5, 4, 4])\n// >>> True\n// >>> is_Monotonic([1, 2, 2, 3])\n// >>> True\n// >>> is_Monotonic([1, 3, 2])\n// >>> False\nfunc is_Monotonic (A []int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_Monotonic([]int{6, 5, 4, 4})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_Monotonic([]int{1, 2, 2, 3})\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_Monotonic([]int{1, 3, 2})\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the given array is monotonic or not.", "entry_point": "is_Monotonic", "canonical_solution": null}
{"task_id": "MBGP/69", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check whether a list contains the given sublist or not.\n// Examples:\n// >>> is_sublist([2,4,3,5,7],[3,7])\n// >>> False\n// >>> is_sublist([2,4,3,5,7],[4,3])\n// >>> True\n// >>> is_sublist([2,4,3,5,7],[1,6])\n// >>> False\nfunc is_sublist (l []int, s []int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_sublist([]int{2, 4, 3, 5, 7},[]int{3, 7})\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_sublist([]int{2, 4, 3, 5, 7},[]int{4, 3})\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_sublist([]int{2, 4, 3, 5, 7},[]int{1, 6})\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check whether a list contains the given sublist or not.", "entry_point": "is_sublist", "canonical_solution": null}
{"task_id": "MBGP/70", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find whether all the given tuples have equal length or not.\n// Examples:\n// >>> get_equal([(11, 22, 33), (44, 55, 66)], 3)\n// >>> 'All tuples have same length'\n// >>> get_equal([(1, 2, 3), (4, 5, 6, 7)], 3)\n// >>> 'All tuples do not have same length'\n// >>> get_equal([(1, 2), (3, 4)], 2)\n// >>> 'All tuples have same length'\nfunc get_equal (Input [][]int, k int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_equal([][]int{[]int{11, 22, 33}, []int{44, 55, 66}},3)\n\texpected_1 := \"All tuples have same length\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_equal([][]int{[]int{1, 2, 3}, []int{4, 5, 6, 7}},3)\n\texpected_2 := \"All tuples do not have same length\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_equal([][]int{[]int{1, 2}, []int{3, 4}},2)\n\texpected_3 := \"All tuples have same length\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find whether all the given tuples have equal length or not.", "entry_point": "get_equal", "canonical_solution": null}
{"task_id": "MBGP/71", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort a list of elements using comb sort.\n// Examples:\n// >>> comb_sort([5, 15, 37, 25, 79])\n// >>> [5, 15, 25, 37, 79]\n// >>> comb_sort([41, 32, 15, 19, 22])\n// >>> [15, 19, 22, 32, 41]\n// >>> comb_sort([99, 15, 13, 47])\n// >>> [13, 15, 47, 99]\nfunc comb_sort (nums []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := comb_sort([]int{5, 15, 37, 25, 79})\n\texpected_1 := []int{5, 15, 25, 37, 79}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := comb_sort([]int{41, 32, 15, 19, 22})\n\texpected_2 := []int{15, 19, 22, 32, 41}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := comb_sort([]int{99, 15, 13, 47})\n\texpected_3 := []int{13, 15, 47, 99}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort a list of elements using comb sort.", "entry_point": "comb_sort", "canonical_solution": null}
{"task_id": "MBGP/72", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the given number can be represented as difference of two squares or not.\n// Examples:\n// >>> dif_Square(5)\n// >>> True\n// >>> dif_Square(10)\n// >>> False\n// >>> dif_Square(15)\n// >>> True\nfunc dif_Square (n int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := dif_Square(5)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := dif_Square(10)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := dif_Square(15)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the given number can be represented as difference of two squares or not.", "entry_point": "dif_Square", "canonical_solution": null}
{"task_id": "MBGP/73", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to split the given string with multiple delimiters by using regex.\n// Examples:\n// >>> multiple_split('Forces of the \\ndarkness*are coming into the play.')\n// >>> ['Forces of the ', 'darkness', 'are coming into the play.']\n// >>> multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.')\n// >>> ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\n// >>> multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.')\n// >>> ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']\nfunc multiple_split (text string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := multiple_split(\"Forces of the \\ndarkness*are coming into the play.\")\n\texpected_1 := []string{\"Forces of the \", \"darkness\", \"are coming into the play.\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := multiple_split(\"Mi Box runs on the \\n Latest android*which has google assistance and chromecast.\")\n\texpected_2 := []string{\"Mi Box runs on the \", \" Latest android\", \"which has google assistance and chromecast.\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := multiple_split(\"Certain services\\nare subjected to change*over the seperate subscriptions.\")\n\texpected_3 := []string{\"Certain services\", \"are subjected to change\", \"over the seperate subscriptions.\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to split the given string with multiple delimiters by using regex.", "entry_point": "multiple_split", "canonical_solution": null}
{"task_id": "MBGP/74", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check whether it follows the sequence given in the patterns array.\n// Examples:\n// >>> is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])\n// >>> True\n// >>> is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])\n// >>> False\n// >>> is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])\n// >>> False\nfunc is_samepatterns (colors []string, patterns []string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_samepatterns([]string{\"red\", \"green\", \"green\"},[]string{\"a\", \"b\", \"b\"})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_samepatterns([]string{\"red\", \"green\", \"greenn\"},[]string{\"a\", \"b\", \"b\"})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_samepatterns([]string{\"red\", \"green\", \"greenn\"},[]string{\"a\", \"b\"})\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check whether it follows the sequence given in the patterns array.", "entry_point": "is_samepatterns", "canonical_solution": null}
{"task_id": "MBGP/75", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n// Examples:\n// >>> find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)\n// >>> '[(6, 24, 12)]'\n// >>> find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5)\n// >>> '[(5, 25, 30)]'\n// >>> find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4)\n// >>> '[(8, 16, 4)]'\nfunc find_tuples (test_list [][]int, K int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_tuples([][]int{[]int{6, 24, 12}, []int{7, 9, 6}, []int{12, 18, 21}},6)\n\texpected_1 := \"[(6, 24, 12)]\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_tuples([][]int{[]int{5, 25, 30}, []int{4, 2, 3}, []int{7, 8, 9}},5)\n\texpected_2 := \"[(5, 25, 30)]\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_tuples([][]int{[]int{7, 9, 16}, []int{8, 16, 4}, []int{19, 17, 18}},4)\n\texpected_3 := \"[(8, 16, 4)]\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "entry_point": "find_tuples", "canonical_solution": null}
{"task_id": "MBGP/76", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the number of squares in a rectangle.\n// Examples:\n// >>> count_Squares(4,3)\n// >>> 20\n// >>> count_Squares(2,2)\n// >>> 5\n// >>> count_Squares(1,1)\n// >>> 1\nfunc count_Squares (m int, n int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Squares(4,3)\n\texpected_1 := 20.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Squares(2,2)\n\texpected_2 := 5.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Squares(1,1)\n\texpected_3 := 1.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the number of squares in a rectangle.", "entry_point": "count_Squares", "canonical_solution": null}
{"task_id": "MBGP/77", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the difference between sum of even and odd digits.\n// Examples:\n// >>> is_Diff (12345)\n// >>> False\n// >>> is_Diff(1212112)\n// >>> True\n// >>> is_Diff(1212)\n// >>> False\nfunc is_Diff (n int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_Diff(12345)\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_Diff(1212112)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_Diff(1212)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the difference between sum of even and odd digits.", "entry_point": "is_Diff", "canonical_solution": null}
{"task_id": "MBGP/78", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find number of integers with odd number of set bits.\n// Examples:\n// >>> count_With_Odd_SetBits(5)\n// >>> 3\n// >>> count_With_Odd_SetBits(10)\n// >>> 5\n// >>> count_With_Odd_SetBits(15)\n// >>> 8\nfunc count_With_Odd_SetBits (n int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_With_Odd_SetBits(5)\n\texpected_1 := 3.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_With_Odd_SetBits(10)\n\texpected_2 := 5.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_With_Odd_SetBits(15)\n\texpected_3 := 8.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find number of integers with odd number of set bits.", "entry_point": "count_With_Odd_SetBits", "canonical_solution": null}
{"task_id": "MBGP/79", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the length of the word is odd or not.\n// Examples:\n// >>> word_len(\"Hadoop\")\n// >>> False\n// >>> word_len(\"great\")\n// >>> True\n// >>> word_len(\"structure\")\n// >>> True\nfunc word_len (s string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := word_len(\"Hadoop\")\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := word_len(\"great\")\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := word_len(\"structure\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the length of the word is odd or not.", "entry_point": "word_len", "canonical_solution": null}
{"task_id": "MBGP/80", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the nth tetrahedral number.\n// Examples:\n// >>> tetrahedral_number(5)\n// >>> 35.0\n// >>> tetrahedral_number(6)\n// >>> 56.0\n// >>> tetrahedral_number(7)\n// >>> 84.0\nfunc tetrahedral_number (n int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := tetrahedral_number(5)\n\texpected_1 := 35.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := tetrahedral_number(6)\n\texpected_2 := 56.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := tetrahedral_number(7)\n\texpected_3 := 84.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the nth tetrahedral number.", "entry_point": "tetrahedral_number", "canonical_solution": null}
{"task_id": "MBGP/81", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to zip the two given tuples.\n// Examples:\n// >>> zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) )\n// >>> [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n// >>> zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) )\n// >>> [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\n// >>> zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) )\n// >>> [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]\nfunc zip_tuples (test_tup1 []int, test_tup2 []int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := zip_tuples([]int{7, 8, 4, 5, 9, 10},[]int{1, 5, 6})\n\texpected_1 := [][]int{[]int{7, 1}, []int{8, 5}, []int{4, 6}, []int{5, 1}, []int{9, 5}, []int{10, 6}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := zip_tuples([]int{8, 9, 5, 6, 10, 11},[]int{2, 6, 7})\n\texpected_2 := [][]int{[]int{8, 2}, []int{9, 6}, []int{5, 7}, []int{6, 2}, []int{10, 6}, []int{11, 7}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := zip_tuples([]int{9, 10, 6, 7, 11, 12},[]int{3, 7, 8})\n\texpected_3 := [][]int{[]int{9, 3}, []int{10, 7}, []int{6, 8}, []int{7, 3}, []int{11, 7}, []int{12, 8}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to zip the two given tuples.", "entry_point": "zip_tuples", "canonical_solution": null}
{"task_id": "MBGP/82", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the volume of a sphere.\n// Examples:\n// >>> volume_sphere(10)\n// >>> 4188.790204786391\n// >>> volume_sphere(25)\n// >>> 65449.84694978735\n// >>> volume_sphere(20)\n// >>> 33510.32163829113\nfunc volume_sphere (r int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := volume_sphere(10)\n\texpected_1 := 4188.790204786391\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := volume_sphere(25)\n\texpected_2 := 65449.84694978735\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := volume_sphere(20)\n\texpected_3 := 33510.32163829113\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the volume of a sphere.", "entry_point": "volume_sphere", "canonical_solution": null}
{"task_id": "MBGP/83", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the character made by adding all the characters of the given string.\n// Examples:\n// >>> get_Char(\"abc\")\n// >>> \"f\"\n// >>> get_Char(\"gfg\")\n// >>> \"t\"\n// >>> get_Char(\"ab\")\n// >>> \"c\"\nfunc get_Char (strr string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_Char(\"abc\")\n\texpected_1 := \"f\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_Char(\"gfg\")\n\texpected_2 := \"t\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_Char(\"ab\")\n\texpected_3 := \"c\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the character made by adding all the characters of the given string.", "entry_point": "get_Char", "canonical_solution": null}
{"task_id": "MBGP/84", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the n-th number in newman conway sequence.\n// Examples:\n// >>> sequence(10)\n// >>> 6\n// >>> sequence(2)\n// >>> 1\n// >>> sequence(3)\n// >>> 2\nfunc sequence (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sequence(10)\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sequence(2)\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sequence(3)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the n-th number in newman conway sequence.", "entry_point": "sequence", "canonical_solution": null}
{"task_id": "MBGP/85", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the surface area of a sphere.\n// Examples:\n// >>> surfacearea_sphere(10)\n// >>> 1256.6370614359173\n// >>> surfacearea_sphere(15)\n// >>> 2827.4333882308138\n// >>> surfacearea_sphere(20)\n// >>> 5026.548245743669\nfunc surfacearea_sphere (r int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := surfacearea_sphere(10)\n\texpected_1 := 1256.6370614359173\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := surfacearea_sphere(15)\n\texpected_2 := 2827.4333882308138\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := surfacearea_sphere(20)\n\texpected_3 := 5026.548245743669\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the surface area of a sphere.", "entry_point": "surfacearea_sphere", "canonical_solution": null}
{"task_id": "MBGP/86", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find nth centered hexagonal number.\n// Examples:\n// >>> centered_hexagonal_number(10)\n// >>> 271\n// >>> centered_hexagonal_number(2)\n// >>> 7\n// >>> centered_hexagonal_number(9)\n// >>> 217\nfunc centered_hexagonal_number (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := centered_hexagonal_number(10)\n\texpected_1 := 271\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := centered_hexagonal_number(2)\n\texpected_2 := 7\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := centered_hexagonal_number(9)\n\texpected_3 := 217\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find nth centered hexagonal number.", "entry_point": "centered_hexagonal_number", "canonical_solution": null}
{"task_id": "MBGP/87", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to merge three dictionaries into a single expression.\n// Examples:\n// >>> merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })\n// >>> {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n// >>> merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})\n// >>> {'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\n// >>> merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })\n// >>> {'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\nfunc merge_dictionaries_three (dict1 map[string]string, dict2 map[string]string, dict3 map[string]string) map[string]string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := merge_dictionaries_three(map[string]string{ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\",  },map[string]string{ \"G\": \"Green\", \"W\": \"White\",  },map[string]string{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\",  })\n\texpected_1 := map[string]string{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\", \"G\": \"Green\", \"R\": \"Red\", \"P\": \"Pink\",  }\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := merge_dictionaries_three(map[string]string{ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\",  },map[string]string{ \"G\": \"Green\", \"W\": \"White\",  },map[string]string{ \"L\": \"lavender\", \"B\": \"Blue\",  })\n\texpected_2 := map[string]string{ \"L\": \"lavender\", \"B\": \"Black\", \"G\": \"Green\", \"W\": \"White\", \"R\": \"Red\", \"P\": \"Pink\",  }\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := merge_dictionaries_three(map[string]string{ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\",  },map[string]string{ \"L\": \"lavender\", \"B\": \"Blue\",  },map[string]string{ \"G\": \"Green\", \"W\": \"White\",  })\n\texpected_3 := map[string]string{ \"G\": \"Green\", \"W\": \"White\", \"L\": \"lavender\", \"B\": \"Black\", \"R\": \"Red\", \"P\": \"Pink\",  }\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to merge three dictionaries into a single expression.", "entry_point": "merge_dictionaries_three", "canonical_solution": null}
{"task_id": "MBGP/88", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to get the frequency of the elements in a list.\n// Examples:\n// >>> freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])\n// >>> ({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n// >>> freq_count([1,2,3,4,3,2,4,1,3,1,4])\n// >>> ({1:3, 2:2,3:3,4:3})\n// >>> freq_count([5,6,7,4,9,10,4,5,6,7,9,5])\n// >>> ({10:1,5:3,6:2,7:2,4:2,9:2})\nfunc freq_count (list1 []int) map[int]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := freq_count([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30})\n\texpected_1 := map[int]int{ 10: 4, 20: 4, 40: 2, 50: 2, 30: 1,  }\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := freq_count([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4})\n\texpected_2 := map[int]int{ 1: 3, 2: 2, 3: 3, 4: 3,  }\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := freq_count([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5})\n\texpected_3 := map[int]int{ 5: 3, 6: 2, 7: 2, 4: 2, 9: 2, 10: 1,  }\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to get the frequency of the elements in a list.", "entry_point": "freq_count", "canonical_solution": null}
{"task_id": "MBGP/89", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the closest smaller number than n.\n// Examples:\n// >>> closest_num(11)\n// >>> 10\n// >>> closest_num(7)\n// >>> 6\n// >>> closest_num(12)\n// >>> 11\nfunc closest_num (N int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := closest_num(11)\n\texpected_1 := 10\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := closest_num(7)\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := closest_num(12)\n\texpected_3 := 11\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the closest smaller number than n.", "entry_point": "closest_num", "canonical_solution": null}
{"task_id": "MBGP/90", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the length of the longest word.\n// Examples:\n// >>> len_log([\"python\",\"PHP\",\"bigdata\"])\n// >>> 7\n// >>> len_log([\"a\",\"ab\",\"abc\"])\n// >>> 3\n// >>> len_log([\"small\",\"big\",\"tall\"])\n// >>> 5\nfunc len_log (list1 []string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := len_log([]string{\"python\", \"PHP\", \"bigdata\"})\n\texpected_1 := 7\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := len_log([]string{\"a\", \"ab\", \"abc\"})\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := len_log([]string{\"small\", \"big\", \"tall\"})\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the length of the longest word.", "entry_point": "len_log", "canonical_solution": null}
{"task_id": "MBGP/91", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if a substring is present in a given list of string values.\n// Examples:\n// >>> find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")\n// >>> True\n// >>> find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")\n// >>> False\n// >>> find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")\n// >>> True\nfunc find_substring (str1 []string, sub_str string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_substring([]string{\"red\", \"black\", \"white\", \"green\", \"orange\"},\"ack\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_substring([]string{\"red\", \"black\", \"white\", \"green\", \"orange\"},\"abc\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_substring([]string{\"red\", \"black\", \"white\", \"green\", \"orange\"},\"ange\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if a substring is present in a given list of string values.", "entry_point": "find_substring", "canonical_solution": null}
{"task_id": "MBGP/92", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check whether the given number is undulating or not.\n// Examples:\n// >>> is_undulating(\"1212121\")\n// >>> True\n// >>> is_undulating(\"1991\")\n// >>> False\n// >>> is_undulating(\"121\")\n// >>> True\nfunc is_undulating (n string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_undulating(\"1212121\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_undulating(\"1991\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_undulating(\"121\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check whether the given number is undulating or not.", "entry_point": "is_undulating", "canonical_solution": null}
{"task_id": "MBGP/93", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate the value of 'a' to the power 'b'.\n// Examples:\n// >>> power(3,4)\n// >>> 81\n// >>> power(2,3)\n// >>> 8\n// >>> power(5,5)\n// >>> 3125\nfunc power (a int, b int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := power(3,4)\n\texpected_1 := 81\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := power(2,3)\n\texpected_2 := 8\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := power(5,5)\n\texpected_3 := 3125\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate the value of 'a' to the power 'b'.", "entry_point": "power", "canonical_solution": null}
{"task_id": "MBGP/94", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to extract the index minimum value record from the given tuples.\n// Examples:\n// >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n// >>> 'Varsha'\n// >>> index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)])\n// >>> 'Dawood'\n// >>> index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)])\n// >>> 'Ayesha'\nfunc index_minimum (test_list [][]interface{}) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := index_minimum([][]interface{}{[]interface{}{\"Rash\", 143}, []interface{}{\"Manjeet\", 200}, []interface{}{\"Varsha\", 100}})\n\texpected_1 := \"Varsha\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := index_minimum([][]interface{}{[]interface{}{\"Yash\", 185}, []interface{}{\"Dawood\", 125}, []interface{}{\"Sanya\", 175}})\n\texpected_2 := \"Dawood\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := index_minimum([][]interface{}{[]interface{}{\"Sai\", 345}, []interface{}{\"Salman\", 145}, []interface{}{\"Ayesha\", 96}})\n\texpected_3 := \"Ayesha\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to extract the index minimum value record from the given tuples.", "entry_point": "index_minimum", "canonical_solution": null}
{"task_id": "MBGP/95", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the minimum length of sublist.\n// Examples:\n// >>> Find_Min_Length([[1],[1,2]])\n// >>> 1\n// >>> Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]])\n// >>> 2\n// >>> Find_Min_Length([[3,3,3],[4,4,4,4]])\n// >>> 3\nfunc Find_Min_Length (lst [][]int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Find_Min_Length([][]int{[]int{1}, []int{1, 2}})\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Find_Min_Length([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}})\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Find_Min_Length([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}})\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the minimum length of sublist.", "entry_point": "Find_Min_Length", "canonical_solution": null}
{"task_id": "MBGP/96", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the number of divisors of a given integer.\n// Examples:\n// >>> divisor(15)\n// >>> 4\n// >>> divisor(12)\n// >>> 6\n// >>> divisor(9)\n// >>> 3\nfunc divisor (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := divisor(15)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := divisor(12)\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := divisor(9)\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the number of divisors of a given integer.", "entry_point": "divisor", "canonical_solution": null}
{"task_id": "MBGP/97", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find frequency count of list of lists.\n// Examples:\n// >>> frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n// >>> {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n// >>> frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])\n// >>> {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\n// >>> frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])\n// >>> {20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}\nfunc frequency_lists (list1 [][]int) map[int]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := frequency_lists([][]int{[]int{1, 2, 3, 2}, []int{4, 5, 6, 2}, []int{7, 8, 9, 5}})\n\texpected_1 := map[int]int{ 1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1,  }\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := frequency_lists([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12}})\n\texpected_2 := map[int]int{ 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1,  }\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := frequency_lists([][]int{[]int{20, 30, 40, 17}, []int{18, 16, 14, 13}, []int{10, 20, 30, 40}})\n\texpected_3 := map[int]int{ 20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1,  }\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find frequency count of list of lists.", "entry_point": "frequency_lists", "canonical_solution": null}
{"task_id": "MBGP/98", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to multiply all the numbers in a list and divide with the length of the list.\n// Examples:\n// >>> multiply_num((8, 2, 3, -1, 7))\n// >>> -67.2\n// >>> multiply_num((-10,-20,-30))\n// >>> -2000.0\n// >>> multiply_num((19,15,18))\n// >>> 1710.0\nfunc multiply_num (numbers []int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := multiply_num([]int{8, 2, 3, -1, 7})\n\texpected_1 := -67.2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := multiply_num([]int{-10, -20, -30})\n\texpected_2 := -2000.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := multiply_num([]int{19, 15, 18})\n\texpected_3 := 1710.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "entry_point": "multiply_num", "canonical_solution": null}
{"task_id": "MBGP/99", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert the given decimal number to its binary equivalent.\n// Examples:\n// >>> decimal_to_binary(8)\n// >>> '1000'\n// >>> decimal_to_binary(18)\n// >>> '10010'\n// >>> decimal_to_binary(7)\n// >>> '111'\nfunc decimal_to_binary (n int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := decimal_to_binary(8)\n\texpected_1 := \"1000\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := decimal_to_binary(18)\n\texpected_2 := \"10010\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := decimal_to_binary(7)\n\texpected_3 := \"111\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert the given decimal number to its binary equivalent.", "entry_point": "decimal_to_binary", "canonical_solution": null}
{"task_id": "MBGP/100", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the next smallest palindrome of a specified number.\n// Examples:\n// >>> next_smallest_palindrome(99)\n// >>> 101\n// >>> next_smallest_palindrome(1221)\n// >>> 1331\n// >>> next_smallest_palindrome(120)\n// >>> 121\nfunc next_smallest_palindrome (num int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := next_smallest_palindrome(99)\n\texpected_1 := 101\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := next_smallest_palindrome(1221)\n\texpected_2 := 1331\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := next_smallest_palindrome(120)\n\texpected_3 := 121\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the next smallest palindrome of a specified number.", "entry_point": "next_smallest_palindrome", "canonical_solution": null}
{"task_id": "MBGP/101", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the kth element in the given array.\n// Examples:\n// >>> kth_element([12,3,5,7,19], 5, 2)\n// >>> 3\n// >>> kth_element([17,24,8,23], 4, 3)\n// >>> 8\n// >>> kth_element([16,21,25,36,4], 5, 4)\n// >>> 36\nfunc kth_element (arr []int, n int, k int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := kth_element([]int{12, 3, 5, 7, 19},5,2)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := kth_element([]int{17, 24, 8, 23},4,3)\n\texpected_2 := 8\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := kth_element([]int{16, 21, 25, 36, 4},5,4)\n\texpected_3 := 36\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the kth element in the given array.", "entry_point": "kth_element", "canonical_solution": null}
{"task_id": "MBGP/102", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert snake case string to camel case string.\n// Examples:\n// >>> snake_to_camel('python_program')\n// >>> 'PythonProgram'\n// >>> snake_to_camel('python_language')\n// >>> ('PythonLanguage')\n// >>> snake_to_camel('programming_language')\n// >>> ('ProgrammingLanguage')\nfunc snake_to_camel (word string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := snake_to_camel(\"python_program\")\n\texpected_1 := \"PythonProgram\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := snake_to_camel(\"python_language\")\n\texpected_2 := \"PythonLanguage\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := snake_to_camel(\"programming_language\")\n\texpected_3 := \"ProgrammingLanguage\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert snake case string to camel case string.", "entry_point": "snake_to_camel", "canonical_solution": null}
{"task_id": "MBGP/103", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find eulerian number a(n, m).\n// Examples:\n// >>> eulerian_num(3, 1)\n// >>> 4\n// >>> eulerian_num(4, 1)\n// >>> 11\n// >>> eulerian_num(5, 3)\n// >>> 26\nfunc eulerian_num (n int, m int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := eulerian_num(3,1)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := eulerian_num(4,1)\n\texpected_2 := 11\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := eulerian_num(5,3)\n\texpected_3 := 26\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find eulerian number a(n, m).", "entry_point": "eulerian_num", "canonical_solution": null}
{"task_id": "MBGP/104", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort each sublist of strings in a given list of lists using lambda function.\n// Examples:\n// >>> sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))\n// >>> [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n// >>> sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))\n// >>> [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n// >>> sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))\n// >>> [['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]\nfunc sort_sublists (input_list [][]string) [][]string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sort_sublists([][]string{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}})\n\texpected_1 := [][]string{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sort_sublists([][]string{[]string{\" red \", \"green\"}, []string{\"blue \", \" black\"}, []string{\" orange\", \"brown\"}})\n\texpected_2 := [][]string{[]string{\" red \", \"green\"}, []string{\" black\", \"blue \"}, []string{\" orange\", \"brown\"}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sort_sublists([][]string{[]string{\"zilver\", \"gold\"}, []string{\"magnesium\", \"aluminium\"}, []string{\"steel\", \"bronze\"}})\n\texpected_3 := [][]string{[]string{\"gold\", \"zilver\"}, []string{\"aluminium\", \"magnesium\"}, []string{\"bronze\", \"steel\"}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort each sublist of strings in a given list of lists using lambda function.", "entry_point": "sort_sublists", "canonical_solution": null}
{"task_id": "MBGP/105", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count true booleans in the given list.\n// Examples:\n// >>> count([True,False,True])\n// >>> 2\n// >>> count([False,False])\n// >>> 0\n// >>> count([True,True,True])\n// >>> 3\nfunc count (lst []bool) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count([]bool{true, false, true})\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count([]bool{false, false})\n\texpected_2 := 0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count([]bool{true, true, true})\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count true booleans in the given list.", "entry_point": "count", "canonical_solution": null}
{"task_id": "MBGP/106", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to add the given list to the given tuples.\n// Examples:\n// >>> add_lists([5, 6, 7], (9, 10))\n// >>> (9, 10, 5, 6, 7)\n// >>> add_lists([6, 7, 8], (10, 11))\n// >>> (10, 11, 6, 7, 8)\n// >>> add_lists([7, 8, 9], (11, 12))\n// >>> (11, 12, 7, 8, 9)\nfunc add_lists (test_list []int, test_tup []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := add_lists([]int{5, 6, 7},[]int{9, 10})\n\texpected_1 := []int{9, 10, 5, 6, 7}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := add_lists([]int{6, 7, 8},[]int{10, 11})\n\texpected_2 := []int{10, 11, 6, 7, 8}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := add_lists([]int{7, 8, 9},[]int{11, 12})\n\texpected_3 := []int{11, 12, 7, 8, 9}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to add the given list to the given tuples.", "entry_point": "add_lists", "canonical_solution": null}
{"task_id": "MBGP/107", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count hexadecimal numbers for a given range.\n// Examples:\n// >>> count_Hexadecimal(10,15)\n// >>> 6\n// >>> count_Hexadecimal(2,4)\n// >>> 0\n// >>> count_Hexadecimal(15,16)\n// >>> 1\nfunc count_Hexadecimal (L int, R int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Hexadecimal(10,15)\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Hexadecimal(2,4)\n\texpected_2 := 0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Hexadecimal(15,16)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count hexadecimal numbers for a given range.", "entry_point": "count_Hexadecimal", "canonical_solution": null}
{"task_id": "MBGP/109", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the count of rotations of a binary string with odd value.\n// Examples:\n// >>> odd_Equivalent(\"011001\",6)\n// >>> 3\n// >>> odd_Equivalent(\"11011\",5)\n// >>> 4\n// >>> odd_Equivalent(\"1010\",4)\n// >>> 2\nfunc odd_Equivalent (s string, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := odd_Equivalent(\"011001\",6)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := odd_Equivalent(\"11011\",5)\n\texpected_2 := 4\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := odd_Equivalent(\"1010\",4)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the count of rotations of a binary string with odd value.", "entry_point": "odd_Equivalent", "canonical_solution": null}
{"task_id": "MBGP/110", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n// Examples:\n// >>> extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100)\n// >>> [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n// >>> extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60)\n// >>> [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\n// >>> extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52)\n// >>> [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]\nfunc extract_missing (test_list [][]int, strt_val int, stop_val int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := extract_missing([][]int{[]int{6, 9}, []int{15, 34}, []int{48, 70}},2,100)\n\texpected_1 := [][]int{[]int{2, 6}, []int{9, 100}, []int{9, 15}, []int{34, 100}, []int{34, 48}, []int{70, 100}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := extract_missing([][]int{[]int{7, 2}, []int{15, 19}, []int{38, 50}},5,60)\n\texpected_2 := [][]int{[]int{5, 7}, []int{2, 60}, []int{2, 15}, []int{19, 60}, []int{19, 38}, []int{50, 60}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := extract_missing([][]int{[]int{7, 2}, []int{15, 19}, []int{38, 50}},1,52)\n\texpected_3 := [][]int{[]int{1, 7}, []int{2, 52}, []int{2, 15}, []int{19, 52}, []int{19, 38}, []int{50, 52}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.", "entry_point": "extract_missing", "canonical_solution": null}
{"task_id": "MBGP/111", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n// Examples:\n// >>> common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n// >>> [18, 12]\n// >>> common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])\n// >>> [5,23]\n// >>> common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])\n// >>> [4]\nfunc common_in_nested_lists (nestedlist [][]int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := common_in_nested_lists([][]int{[]int{12, 18, 23, 25, 45}, []int{7, 12, 18, 24, 28}, []int{1, 5, 8, 12, 15, 16, 18}})\n\texpected_1 := []int{18, 12}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := common_in_nested_lists([][]int{[]int{12, 5, 23, 25, 45}, []int{7, 11, 5, 23, 28}, []int{1, 5, 8, 18, 23, 16}})\n\texpected_2 := []int{5, 23}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := common_in_nested_lists([][]int{[]int{2, 3, 4, 1}, []int{4, 5}, []int{6, 4, 8}, []int{4, 5}, []int{6, 8, 4}})\n\texpected_3 := []int{4}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item", "entry_point": "common_in_nested_lists", "canonical_solution": null}
{"task_id": "MBGP/112", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the perimeter of a cylinder.\n// Examples:\n// >>> perimeter(2,4)\n// >>> 12\n// >>> perimeter(1,2)\n// >>> 6\n// >>> perimeter(3,1)\n// >>> 8\nfunc perimeter (diameter int, height int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := perimeter(2,4)\n\texpected_1 := 12\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := perimeter(1,2)\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := perimeter(3,1)\n\texpected_3 := 8\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the perimeter of a cylinder.", "entry_point": "perimeter", "canonical_solution": null}
{"task_id": "MBGP/113", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if a string represents an integer or not.\n// Examples:\n// >>> check_integer(\"python\")\n// >>> False\n// >>> check_integer(\"1\")\n// >>> True\n// >>> check_integer(\"12345\")\n// >>> True\nfunc check_integer (text string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_integer(\"python\")\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_integer(\"1\")\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_integer(\"12345\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if a string represents an integer or not.", "entry_point": "check_integer", "canonical_solution": null}
{"task_id": "MBGP/114", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to assign frequency to each tuple in the given tuple list.\n// Examples:\n// >>> assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] )\n// >>> '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n// >>> assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] )\n// >>> '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\n// >>> assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] )\n// >>> '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'\nfunc assign_freq (test_list [][]int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := assign_freq([][]int{[]int{6, 5, 8}, []int{2, 7}, []int{6, 5, 8}, []int{6, 5, 8}, []int{9}, []int{2, 7}})\n\texpected_1 := \"[(6, 5, 8, 3), (2, 7, 2), (9, 1)]\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := assign_freq([][]int{[]int{4, 2, 4}, []int{7, 1}, []int{4, 8}, []int{4, 2, 4}, []int{9, 2}, []int{7, 1}})\n\texpected_2 := \"[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := assign_freq([][]int{[]int{11, 13, 10}, []int{17, 21}, []int{4, 2, 3}, []int{17, 21}, []int{9, 2}, []int{4, 2, 3}})\n\texpected_3 := \"[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to assign frequency to each tuple in the given tuple list.", "entry_point": "assign_freq", "canonical_solution": null}
{"task_id": "MBGP/116", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert a given tuple of positive integers into an integer.\n// Examples:\n// >>> tuple_to_int((1,2,3))\n// >>> 123\n// >>> tuple_to_int((4,5,6))\n// >>> 456\n// >>> tuple_to_int((5,6,7))\n// >>> 567\nfunc tuple_to_int (nums []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := tuple_to_int([]int{1, 2, 3})\n\texpected_1 := 123\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := tuple_to_int([]int{4, 5, 6})\n\texpected_2 := 456\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := tuple_to_int([]int{5, 6, 7})\n\texpected_3 := 567\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert a given tuple of positive integers into an integer.", "entry_point": "tuple_to_int", "canonical_solution": null}
{"task_id": "MBGP/117", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert all possible convertible elements in the list to float.\n// Examples:\n// >>> list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] )\n// >>> '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n// >>> list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] )\n// >>> '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\n// >>> list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] )\n// >>> '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'\nfunc list_to_float (test_list [][]string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := list_to_float([][]string{[]string{\"3\", \"4\"}, []string{\"1\", \"26.45\"}, []string{\"7.32\", \"8\"}, []string{\"4\", \"8\"}})\n\texpected_1 := \"[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := list_to_float([][]string{[]string{\"4\", \"4\"}, []string{\"2\", \"27\"}, []string{\"4.12\", \"9\"}, []string{\"7\", \"11\"}})\n\texpected_2 := \"[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := list_to_float([][]string{[]string{\"6\", \"78\"}, []string{\"5\", \"26.45\"}, []string{\"1.33\", \"4\"}, []string{\"82\", \"13\"}})\n\texpected_3 := \"[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert all possible convertible elements in the list to float.", "entry_point": "list_to_float", "canonical_solution": null}
{"task_id": "MBGP/118", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// write a function to convert a string to a list.\n// Examples:\n// >>> string_to_list(\"python programming\")\n// >>> ['python','programming']\n// >>> string_to_list(\"lists tuples strings\")\n// >>> ['lists','tuples','strings']\n// >>> string_to_list(\"write a program\")\n// >>> ['write','a','program']\nfunc string_to_list (string0 string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := string_to_list(\"python programming\")\n\texpected_1 := []string{\"python\", \"programming\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := string_to_list(\"lists tuples strings\")\n\texpected_2 := []string{\"lists\", \"tuples\", \"strings\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := string_to_list(\"write a program\")\n\texpected_3 := []string{\"write\", \"a\", \"program\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "write a function to convert a string to a list.", "entry_point": "string_to_list", "canonical_solution": null}
{"task_id": "MBGP/119", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the element that appears only once in a sorted array.\n// Examples:\n// >>> search([1,1,2,2,3],5)\n// >>> 3\n// >>> search([1,1,3,3,4,4,5,5,7,7,8],11)\n// >>> 8\n// >>> search([1,2,2,3,3,4,4],7)\n// >>> 1\nfunc search (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := search([]int{1, 1, 2, 2, 3},5)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := search([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8},11)\n\texpected_2 := 8\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := search([]int{1, 2, 2, 3, 3, 4, 4},7)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the element that appears only once in a sorted array.", "entry_point": "search", "canonical_solution": null}
{"task_id": "MBGP/120", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the maximum product from the pairs of tuples within a given list.\n// Examples:\n// >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )\n// >>> 36\n// >>> max_product_tuple([(10,20), (15,2), (5,10)] )\n// >>> 200\n// >>> max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )\n// >>> 484\nfunc max_product_tuple (list1 [][]int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_product_tuple([][]int{[]int{2, 7}, []int{2, 6}, []int{1, 8}, []int{4, 9}})\n\texpected_1 := 36\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_product_tuple([][]int{[]int{10, 20}, []int{15, 2}, []int{5, 10}})\n\texpected_2 := 200\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_product_tuple([][]int{[]int{11, 44}, []int{10, 15}, []int{20, 5}, []int{12, 9}})\n\texpected_3 := 484\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the maximum product from the pairs of tuples within a given list.", "entry_point": "max_product_tuple", "canonical_solution": null}
{"task_id": "MBGP/121", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the triplet with sum of the given array\n// Examples:\n// >>> check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0)\n// >>> True\n// >>> check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0)\n// >>> False\n// >>> check_triplet([10, 4, 2, 3, 5], 5, 15, 0)\n// >>> True\nfunc check_triplet (A []int, n int, sum int, count int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_triplet([]int{2, 7, 4, 0, 9, 5, 1, 3},8,6,0)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_triplet([]int{1, 4, 5, 6, 7, 8, 5, 9},8,6,0)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_triplet([]int{10, 4, 2, 3, 5},5,15,0)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the triplet with sum of the given array", "entry_point": "check_triplet", "canonical_solution": null}
{"task_id": "MBGP/122", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find n\u2019th smart number.\n// Examples:\n// >>> smartNumber(1)\n// >>> 30\n// >>> smartNumber(50)\n// >>> 273\n// >>> smartNumber(1000)\n// >>> 2664\nfunc smartNumber (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := smartNumber(1)\n\texpected_1 := 30\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := smartNumber(50)\n\texpected_2 := 273\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := smartNumber(1000)\n\texpected_3 := 2664\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find n\u2019th smart number.", "entry_point": "smartNumber", "canonical_solution": null}
{"task_id": "MBGP/123", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sum all amicable numbers from 1 to a specified number.\n// Examples:\n// >>> amicable_numbers_sum(999)\n// >>> 504\n// >>> amicable_numbers_sum(9999)\n// >>> 31626\n// >>> amicable_numbers_sum(99)\n// >>> 0\nfunc amicable_numbers_sum (limit int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := amicable_numbers_sum(999)\n\texpected_1 := 504\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := amicable_numbers_sum(9999)\n\texpected_2 := 31626\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := amicable_numbers_sum(99)\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sum all amicable numbers from 1 to a specified number.", "entry_point": "amicable_numbers_sum", "canonical_solution": null}
{"task_id": "MBGP/125", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n// Examples:\n// >>> find_length(\"11000010001\", 11)\n// >>> 6\n// >>> find_length(\"10111\", 5)\n// >>> 1\n// >>> find_length(\"11011101100101\", 14)\n// >>> 2\nfunc find_length (string0 string, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_length(\"11000010001\",11)\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_length(\"10111\",5)\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_length(\"11011101100101\",14)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "entry_point": "find_length", "canonical_solution": null}
{"task_id": "MBGP/126", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of common divisors of two given numbers.\n// Examples:\n// >>> sum(10,15)\n// >>> 6\n// >>> sum(100,150)\n// >>> 93\n// >>> sum(4,6)\n// >>> 3\nfunc sum (a int, b int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum(10,15)\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum(100,150)\n\texpected_2 := 93\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum(4,6)\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of common divisors of two given numbers.", "entry_point": "sum", "canonical_solution": null}
{"task_id": "MBGP/127", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to multiply two integers without using the * operator in golang.\n// Examples:\n// >>> multiply_int(10,20)\n// >>> 200\n// >>> multiply_int(5,10)\n// >>> 50\n// >>> multiply_int(4,8)\n// >>> 32\nfunc multiply_int (x int, y int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := multiply_int(10,20)\n\texpected_1 := 200\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := multiply_int(5,10)\n\texpected_2 := 50\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := multiply_int(4,8)\n\texpected_3 := 32\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to multiply two integers without using the * operator in golang.", "entry_point": "multiply_int", "canonical_solution": null}
{"task_id": "MBGP/128", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to shortlist words that are longer than n from a given list of words.\n// Examples:\n// >>> long_words(3,\"python is a programming language\")\n// >>> ['python','programming','language']\n// >>> long_words(2,\"writing a program\")\n// >>> ['writing','program']\n// >>> long_words(5,\"sorting list\")\n// >>> ['sorting']\nfunc long_words (n int, str string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := long_words(3,\"python is a programming language\")\n\texpected_1 := []string{\"python\", \"programming\", \"language\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := long_words(2,\"writing a program\")\n\texpected_2 := []string{\"writing\", \"program\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := long_words(5,\"sorting list\")\n\texpected_3 := []string{\"sorting\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to shortlist words that are longer than n from a given list of words.", "entry_point": "long_words", "canonical_solution": null}
{"task_id": "MBGP/129", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate magic square.\n// Examples:\n// >>> magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])\n// >>> True\n// >>> magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])\n// >>> True\n// >>> magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])\n// >>> False\nfunc magic_square_test (my_matrix [][]int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := magic_square_test([][]int{[]int{7, 12, 1, 14}, []int{2, 13, 8, 11}, []int{16, 3, 10, 5}, []int{9, 6, 15, 4}})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := magic_square_test([][]int{[]int{2, 7, 6}, []int{9, 5, 1}, []int{4, 3, 8}})\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := magic_square_test([][]int{[]int{2, 7, 6}, []int{9, 5, 1}, []int{4, 3, 7}})\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate magic square.", "entry_point": "magic_square_test", "canonical_solution": null}
{"task_id": "MBGP/130", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the item with maximum frequency in a given list.\n// Examples:\n// >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n// >>> (2, 5)\n// >>> max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])\n// >>> (8, 2)\n// >>> max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])\n// >>> (20, 3)\nfunc max_occurrences (nums []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_occurrences([]int{2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2})\n\texpected_1 := []int{2, 5}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_occurrences([]int{2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18})\n\texpected_2 := []int{8, 2}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_occurrences([]int{10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10})\n\texpected_3 := []int{20, 3}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the item with maximum frequency in a given list.", "entry_point": "max_occurrences", "canonical_solution": null}
{"task_id": "MBGP/131", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to reverse only the vowels of a given string.\n// Examples:\n// >>> reverse_vowels(\"Python\")\n// >>> \"Python\"\n// >>> reverse_vowels(\"USA\")\n// >>> \"ASU\"\n// >>> reverse_vowels(\"ab\")\n// >>> \"ab\"\nfunc reverse_vowels (str1 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := reverse_vowels(\"Python\")\n\texpected_1 := \"Python\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := reverse_vowels(\"USA\")\n\texpected_2 := \"ASU\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := reverse_vowels(\"ab\")\n\texpected_3 := \"ab\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to reverse only the vowels of a given string.", "entry_point": "reverse_vowels", "canonical_solution": null}
{"task_id": "MBGP/132", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert tuple to a string.\n// Examples:\n// >>> tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))\n// >>> (\"exercises\")\n// >>> tup_string(('p','y','t','h','o','n'))\n// >>> (\"python\")\n// >>> tup_string(('p','r','o','g','r','a','m'))\n// >>> (\"program\")\nfunc tup_string (tup1 []string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := tup_string([]string{\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"})\n\texpected_1 := \"exercises\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := tup_string([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"})\n\texpected_2 := \"python\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := tup_string([]string{\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"})\n\texpected_3 := \"program\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert tuple to a string.", "entry_point": "tup_string", "canonical_solution": null}
{"task_id": "MBGP/133", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n// Examples:\n// >>> sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n// >>> -32\n// >>> sum_negativenum([10,15,-14,13,-18,12,-20])\n// >>> -52\n// >>> sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])\n// >>> -894\nfunc sum_negativenum (nums []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_negativenum([]int{2, 4, -6, -9, 11, -12, 14, -5, 17})\n\texpected_1 := -32\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_negativenum([]int{10, 15, -14, 13, -18, 12, -20})\n\texpected_2 := -52\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_negativenum([]int{19, -65, 57, 39, 152, -639, 121, 44, 90, -190})\n\texpected_3 := -894\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.", "entry_point": "sum_negativenum", "canonical_solution": null}
{"task_id": "MBGP/134", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the last element of given array is even or odd after performing an operation p times.\n// Examples:\n// >>> check_last([5,7,10],3,1)\n// >>> \"ODD\"\n// >>> check_last([2,3],2,3)\n// >>> \"EVEN\"\n// >>> check_last([1,2,3],3,1)\n// >>> \"ODD\"\nfunc check_last (arr []int, n int, p int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_last([]int{5, 7, 10},3,1)\n\texpected_1 := \"ODD\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_last([]int{2, 3},2,3)\n\texpected_2 := \"EVEN\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_last([]int{1, 2, 3},3,1)\n\texpected_3 := \"ODD\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the last element of given array is even or odd after performing an operation p times.", "entry_point": "check_last", "canonical_solution": null}
{"task_id": "MBGP/135", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the nth hexagonal number.\n// Examples:\n// >>> hexagonal_num(10)\n// >>> 190\n// >>> hexagonal_num(5)\n// >>> 45\n// >>> hexagonal_num(7)\n// >>> 91\nfunc hexagonal_num (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := hexagonal_num(10)\n\texpected_1 := 190\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := hexagonal_num(5)\n\texpected_2 := 45\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := hexagonal_num(7)\n\texpected_3 := 91\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the nth hexagonal number.", "entry_point": "hexagonal_num", "canonical_solution": null}
{"task_id": "MBGP/136", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate electricity bill.\n// Examples:\n// >>> cal_electbill(75)\n// >>> 246.25\n// >>> cal_electbill(265)\n// >>> 1442.75\n// >>> cal_electbill(100)\n// >>> 327.5\nfunc cal_electbill (units int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := cal_electbill(75)\n\texpected_1 := 246.25\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := cal_electbill(265)\n\texpected_2 := 1442.75\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := cal_electbill(100)\n\texpected_3 := 327.5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate electricity bill.", "entry_point": "cal_electbill", "canonical_solution": null}
{"task_id": "MBGP/137", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the ration of zeroes in an array of integers.\n// Examples:\n// >>> zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n// >>> 0.15\n// >>> zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n// >>> 0.00\n// >>> zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])\n// >>> 0.00\nfunc zero_count (nums []int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := zero_count([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8})\n\texpected_1 := 0.15\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := zero_count([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8})\n\texpected_2 := 0.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := zero_count([]int{2, 4, -6, -9, 11, -12, 14, -5, 17})\n\texpected_3 := 0.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the ration of zeroes in an array of integers.", "entry_point": "zero_count", "canonical_solution": null}
{"task_id": "MBGP/138", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n// Examples:\n// >>> is_Sum_Of_Powers_Of_Two(10)\n// >>> True\n// >>> is_Sum_Of_Powers_Of_Two(7)\n// >>> False\n// >>> is_Sum_Of_Powers_Of_Two(14)\n// >>> True\nfunc is_Sum_Of_Powers_Of_Two (n int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_Sum_Of_Powers_Of_Two(10)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_Sum_Of_Powers_Of_Two(7)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_Sum_Of_Powers_Of_Two(14)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "entry_point": "is_Sum_Of_Powers_Of_Two", "canonical_solution": null}
{"task_id": "MBGP/139", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the circumference of a circle.\n// Examples:\n// >>> circle_circumference(10)\n// >>> 62.830000000000005\n// >>> circle_circumference(5)\n// >>> 31.415000000000003\n// >>> circle_circumference(4)\n// >>> 25.132\nfunc circle_circumference (r int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := circle_circumference(10)\n\texpected_1 := 62.830000000000005\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := circle_circumference(5)\n\texpected_2 := 31.415000000000003\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := circle_circumference(4)\n\texpected_3 := 25.132\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the circumference of a circle.", "entry_point": "circle_circumference", "canonical_solution": null}
{"task_id": "MBGP/140", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to extract elements that occur singly in the given tuple list.\n// Examples:\n// >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n// >>> [3, 4, 5, 7, 1]\n// >>> extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])\n// >>> [1, 2, 3, 4, 7, 8]\n// >>> extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])\n// >>> [7, 8, 9, 10, 11, 12]\nfunc extract_singly (test_list [][]int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := extract_singly([][]int{[]int{3, 4, 5}, []int{4, 5, 7}, []int{1, 4}})\n\texpected_1 := []int{3, 4, 5, 7, 1}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := extract_singly([][]int{[]int{1, 2, 3}, []int{4, 2, 3}, []int{7, 8}})\n\texpected_2 := []int{1, 2, 3, 4, 7, 8}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := extract_singly([][]int{[]int{7, 8, 9}, []int{10, 11, 12}, []int{10, 11}})\n\texpected_3 := []int{7, 8, 9, 10, 11, 12}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to extract elements that occur singly in the given tuple list.", "entry_point": "extract_singly", "canonical_solution": null}
{"task_id": "MBGP/141", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort a list of elements using pancake sort.\n// Examples:\n// >>> pancake_sort([15, 79, 25, 38, 69])\n// >>> [15, 25, 38, 69, 79]\n// >>> pancake_sort([98, 12, 54, 36, 85])\n// >>> [12, 36, 54, 85, 98]\n// >>> pancake_sort([41, 42, 32, 12, 23])\n// >>> [12, 23, 32, 41, 42]\nfunc pancake_sort (nums []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := pancake_sort([]int{15, 79, 25, 38, 69})\n\texpected_1 := []int{15, 25, 38, 69, 79}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := pancake_sort([]int{98, 12, 54, 36, 85})\n\texpected_2 := []int{12, 36, 54, 85, 98}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := pancake_sort([]int{41, 42, 32, 12, 23})\n\texpected_3 := []int{12, 23, 32, 41, 42}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort a list of elements using pancake sort.", "entry_point": "pancake_sort", "canonical_solution": null}
{"task_id": "MBGP/142", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count the same pair in three given lists.\n// Examples:\n// >>> count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])\n// >>> 3\n// >>> count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])\n// >>> 4\n// >>> count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])\n// >>> 5\nfunc count_samepair (list1 []int, list2 []int, list3 []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_samepair([]int{1, 2, 3, 4, 5, 6, 7, 8},[]int{2, 2, 3, 1, 2, 6, 7, 9},[]int{2, 1, 3, 1, 2, 6, 7, 9})\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_samepair([]int{1, 2, 3, 4, 5, 6, 7, 8},[]int{2, 2, 3, 1, 2, 6, 7, 8},[]int{2, 1, 3, 1, 2, 6, 7, 8})\n\texpected_2 := 4\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_samepair([]int{1, 2, 3, 4, 2, 6, 7, 8},[]int{2, 2, 3, 1, 2, 6, 7, 8},[]int{2, 1, 3, 1, 2, 6, 7, 8})\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count the same pair in three given lists.", "entry_point": "count_samepair", "canonical_solution": null}
{"task_id": "MBGP/143", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find number of lists present in the given tuple.\n// Examples:\n// >>> find_lists(([1, 2, 3, 4], [5, 6, 7, 8]))\n// >>> 2\n// >>> find_lists(([1, 2], [3, 4], [5, 6]))\n// >>> 3\n// >>> find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1]))\n// >>> 1\nfunc find_lists (Input []interface{}) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_lists([]interface{}{[]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}})\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_lists([]interface{}{[]interface{}{1, 2}, []interface{}{3, 4}, []interface{}{5, 6}})\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_lists([]interface{}{9, 8, 7, 6, 5, 4, 3, 2, 1})\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find number of lists present in the given tuple.", "entry_point": "find_lists", "canonical_solution": null}
{"task_id": "MBGP/144", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of absolute differences in all pairs of the given array.\n// Examples:\n// >>> sum_Pairs([1,8,9,15,16],5)\n// >>> 74\n// >>> sum_Pairs([1,2,3,4],4)\n// >>> 10\n// >>> sum_Pairs([1,2,3,4,5,7,9,11,14],9)\n// >>> 188\nfunc sum_Pairs (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_Pairs([]int{1, 8, 9, 15, 16},5)\n\texpected_1 := 74\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_Pairs([]int{1, 2, 3, 4},4)\n\texpected_2 := 10\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_Pairs([]int{1, 2, 3, 4, 5, 7, 9, 11, 14},9)\n\texpected_3 := 188\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of absolute differences in all pairs of the given array.", "entry_point": "sum_Pairs", "canonical_solution": null}
{"task_id": "MBGP/145", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the maximum difference between any two elements in a given array.\n// Examples:\n// >>> max_Abs_Diff((2,1,5,3),4)\n// >>> 4\n// >>> max_Abs_Diff((9,3,2,5,1),5)\n// >>> 8\n// >>> max_Abs_Diff((3,2,1),3)\n// >>> 2\nfunc max_Abs_Diff (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_Abs_Diff([]int{2, 1, 5, 3},4)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_Abs_Diff([]int{9, 3, 2, 5, 1},5)\n\texpected_2 := 8\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_Abs_Diff([]int{3, 2, 1},3)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the maximum difference between any two elements in a given array.", "entry_point": "max_Abs_Diff", "canonical_solution": null}
{"task_id": "MBGP/146", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the ascii value of total characters in a string.\n// Examples:\n// >>> ascii_value_string(\"python\")\n// >>> 112\n// >>> ascii_value_string(\"Program\")\n// >>> 80\n// >>> ascii_value_string(\"Language\")\n// >>> 76\nfunc ascii_value_string (str1 string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := ascii_value_string(\"python\")\n\texpected_1 := 112\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := ascii_value_string(\"Program\")\n\texpected_2 := 80\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := ascii_value_string(\"Language\")\n\texpected_3 := 76\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the ascii value of total characters in a string.", "entry_point": "ascii_value_string", "canonical_solution": null}
{"task_id": "MBGP/147", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the maximum total path sum in the given triangle.\n// Examples:\n// >>> max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2)\n// >>> 14\n// >>> max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2)\n// >>> 24\n// >>> max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2)\n// >>> 53\nfunc max_path_sum (tri [][]int, m int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_path_sum([][]int{[]int{1, 0, 0}, []int{4, 8, 0}, []int{1, 5, 3}},2,2)\n\texpected_1 := 14\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_path_sum([][]int{[]int{13, 0, 0}, []int{7, 4, 0}, []int{2, 4, 6}},2,2)\n\texpected_2 := 24\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_path_sum([][]int{[]int{2, 0, 0}, []int{11, 18, 0}, []int{21, 25, 33}},2,2)\n\texpected_3 := 53\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the maximum total path sum in the given triangle.", "entry_point": "max_path_sum", "canonical_solution": null}
{"task_id": "MBGP/148", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to divide a number into two parts such that the sum of digits is maximum.\n// Examples:\n// >>> sum_digits_twoparts(35)\n// >>> 17\n// >>> sum_digits_twoparts(7)\n// >>> 7\n// >>> sum_digits_twoparts(100)\n// >>> 19\nfunc sum_digits_twoparts (N int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_digits_twoparts(35)\n\texpected_1 := 17\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_digits_twoparts(7)\n\texpected_2 := 7\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_digits_twoparts(100)\n\texpected_3 := 19\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to divide a number into two parts such that the sum of digits is maximum.", "entry_point": "sum_digits_twoparts", "canonical_solution": null}
{"task_id": "MBGP/149", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n// Examples:\n// >>> longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7)\n// >>> 6\n// >>> longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7)\n// >>> 3\n// >>> longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8)\n// >>> 7\nfunc longest_subseq_with_diff_one (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := longest_subseq_with_diff_one([]int{1, 2, 3, 4, 5, 3, 2},7)\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := longest_subseq_with_diff_one([]int{10, 9, 4, 5, 4, 8, 6},7)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := longest_subseq_with_diff_one([]int{1, 2, 3, 2, 3, 7, 2, 1},8)\n\texpected_3 := 7\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.", "entry_point": "longest_subseq_with_diff_one", "canonical_solution": null}
{"task_id": "MBGP/150", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find whether the given number is present in the infinite sequence or not.\n// Examples:\n// >>> does_Contain_B(1,7,3)\n// >>> True\n// >>> does_Contain_B(1,-3,5)\n// >>> False\n// >>> does_Contain_B(3,2,5)\n// >>> False\nfunc does_Contain_B (a int, b int, c int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := does_Contain_B(1,7,3)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := does_Contain_B(1,-3,5)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := does_Contain_B(3,2,5)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find whether the given number is present in the infinite sequence or not.", "entry_point": "does_Contain_B", "canonical_solution": null}
{"task_id": "MBGP/151", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the given number is co-prime or not.\n// Examples:\n// >>> is_coprime(17,13)\n// >>> True\n// >>> is_coprime(15,21)\n// >>> False\n// >>> is_coprime(25,45)\n// >>> False\nfunc is_coprime (x int, y int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_coprime(17,13)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_coprime(15,21)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_coprime(25,45)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the given number is co-prime or not.", "entry_point": "is_coprime", "canonical_solution": null}
{"task_id": "MBGP/152", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort the given array by using merge sort.\n// Examples:\n// >>> merge_sort([3, 4, 2, 6, 5, 7, 1, 9])\n// >>> [1, 2, 3, 4, 5, 6, 7, 9]\n// >>> merge_sort([7, 25, 45, 78, 11, 33, 19])\n// >>> [7, 11, 19, 25, 33, 45, 78]\n// >>> merge_sort([3, 1, 4, 9, 8])\n// >>> [1, 3, 4, 8, 9]\nfunc merge_sort (x []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := merge_sort([]int{3, 4, 2, 6, 5, 7, 1, 9})\n\texpected_1 := []int{1, 2, 3, 4, 5, 6, 7, 9}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := merge_sort([]int{7, 25, 45, 78, 11, 33, 19})\n\texpected_2 := []int{7, 11, 19, 25, 33, 45, 78}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := merge_sort([]int{3, 1, 4, 9, 8})\n\texpected_3 := []int{1, 3, 4, 8, 9}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort the given array by using merge sort.", "entry_point": "merge_sort", "canonical_solution": null}
{"task_id": "MBGP/153", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the vertex of a parabola.\n// Examples:\n// >>> parabola_vertex(5,3,2)\n// >>> (-0.3, 1.55)\n// >>> parabola_vertex(9,8,4)\n// >>> (-0.4444444444444444, 2.2222222222222223)\n// >>> parabola_vertex(2,4,6)\n// >>> (-1.0, 4.0)\nfunc parabola_vertex (a int, b int, c int) []float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := parabola_vertex(5,3,2)\n\texpected_1 := []float64{-0.3, 1.55}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := parabola_vertex(9,8,4)\n\texpected_2 := []float64{-0.4444444444444444, 2.2222222222222223}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := parabola_vertex(2,4,6)\n\texpected_3 := []float64{-1.0, 4.0}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the vertex of a parabola.", "entry_point": "parabola_vertex", "canonical_solution": null}
{"task_id": "MBGP/154", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to extract every specified element from a given two dimensional list.\n// Examples:\n// >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)\n// >>> [1, 4, 7]\n// >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)\n// >>> [3, 6, 9]\n// >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)\n// >>> [2,2,5]\nfunc specified_element (nums [][]int, N int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := specified_element([][]int{[]int{1, 2, 3, 2}, []int{4, 5, 6, 2}, []int{7, 1, 9, 5}},0)\n\texpected_1 := []int{1, 4, 7}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := specified_element([][]int{[]int{1, 2, 3, 2}, []int{4, 5, 6, 2}, []int{7, 1, 9, 5}},2)\n\texpected_2 := []int{3, 6, 9}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := specified_element([][]int{[]int{1, 2, 3, 2}, []int{4, 5, 6, 2}, []int{7, 1, 9, 5}},3)\n\texpected_3 := []int{2, 2, 5}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to extract every specified element from a given two dimensional list.", "entry_point": "specified_element", "canonical_solution": null}
{"task_id": "MBGP/155", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to toggle all even bits of a given number.\n// Examples:\n// >>> even_bit_toggle_number(10)\n// >>> 0\n// >>> even_bit_toggle_number(20)\n// >>> 30\n// >>> even_bit_toggle_number(30)\n// >>> 20\nfunc even_bit_toggle_number (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := even_bit_toggle_number(10)\n\texpected_1 := 0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := even_bit_toggle_number(20)\n\texpected_2 := 30\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := even_bit_toggle_number(30)\n\texpected_3 := 20\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to toggle all even bits of a given number.", "entry_point": "even_bit_toggle_number", "canonical_solution": null}
{"task_id": "MBGP/156", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert a tuple of string values to a tuple of integer values.\n// Examples:\n// >>> tuple_int_str((('333', '33'), ('1416', '55')))\n// >>> ((333, 33), (1416, 55))\n// >>> tuple_int_str((('999', '99'), ('1000', '500')))\n// >>> ((999, 99), (1000, 500))\n// >>> tuple_int_str((('666', '66'), ('1500', '555')))\n// >>> ((666, 66), (1500, 555))\nfunc tuple_int_str (tuple_str [][]string) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := tuple_int_str([][]string{[]string{\"333\", \"33\"}, []string{\"1416\", \"55\"}})\n\texpected_1 := [][]int{[]int{333, 33}, []int{1416, 55}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := tuple_int_str([][]string{[]string{\"999\", \"99\"}, []string{\"1000\", \"500\"}})\n\texpected_2 := [][]int{[]int{999, 99}, []int{1000, 500}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := tuple_int_str([][]string{[]string{\"666\", \"66\"}, []string{\"1500\", \"555\"}})\n\texpected_3 := [][]int{[]int{666, 66}, []int{1500, 555}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert a tuple of string values to a tuple of integer values.", "entry_point": "tuple_int_str", "canonical_solution": null}
{"task_id": "MBGP/157", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to reflect the run-length encoding from a list.\n// Examples:\n// >>> encode_list([1,1,2,3,4,4.3,5,1])\n// >>> [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n// >>> encode_list('automatically')\n// >>> [[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\n// >>> encode_list('python')\n// >>> [[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]\nfunc encode_list (list1 interface{}) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := encode_list([]interface{}{1, 1, 2, 3, 4, 4.3, 5, 1})\n\texpected_1 := []interface{}{[]interface{}{2, 1}, []interface{}{1, 2}, []interface{}{1, 3}, []interface{}{1, 4}, []interface{}{1, 4.3}, []interface{}{1, 5}, []interface{}{1, 1}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := encode_list(\"automatically\")\n\texpected_2 := []interface{}{[]interface{}{1, \"a\"}, []interface{}{1, \"u\"}, []interface{}{1, \"t\"}, []interface{}{1, \"o\"}, []interface{}{1, \"m\"}, []interface{}{1, \"a\"}, []interface{}{1, \"t\"}, []interface{}{1, \"i\"}, []interface{}{1, \"c\"}, []interface{}{1, \"a\"}, []interface{}{2, \"l\"}, []interface{}{1, \"y\"}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := encode_list(\"python\")\n\texpected_3 := []interface{}{[]interface{}{1, \"p\"}, []interface{}{1, \"y\"}, []interface{}{1, \"t\"}, []interface{}{1, \"h\"}, []interface{}{1, \"o\"}, []interface{}{1, \"n\"}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to reflect the run-length encoding from a list.", "entry_point": "encode_list", "canonical_solution": null}
{"task_id": "MBGP/158", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find k number of operations required to make all elements equal.\n// Examples:\n// >>> min_Ops([2,2,2,2],4,3)\n// >>> 0\n// >>> min_Ops([4,2,6,8],4,3)\n// >>> -1\n// >>> min_Ops([21,33,9,45,63],5,6)\n// >>> 24\nfunc min_Ops (arr []int, n int, k int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := min_Ops([]int{2, 2, 2, 2},4,3)\n\texpected_1 := 0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := min_Ops([]int{4, 2, 6, 8},4,3)\n\texpected_2 := -1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := min_Ops([]int{21, 33, 9, 45, 63},5,6)\n\texpected_3 := 24\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find k number of operations required to make all elements equal.", "entry_point": "min_Ops", "canonical_solution": null}
{"task_id": "MBGP/159", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to print the season for the given month and day.\n// Examples:\n// >>> month_season('January',4)\n// >>> ('winter')\n// >>> month_season('October',28)\n// >>> ('autumn')\n// >>> month_season('June',6)\n// >>> ('spring')\nfunc month_season (month string, days int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := month_season(\"January\",4)\n\texpected_1 := \"winter\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := month_season(\"October\",28)\n\texpected_2 := \"autumn\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := month_season(\"June\",6)\n\texpected_3 := \"spring\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to print the season for the given month and day.", "entry_point": "month_season", "canonical_solution": null}
{"task_id": "MBGP/160", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find x and y that satisfies ax + by = n.\n// Examples:\n// >>> solution(2, 3, 7)\n// >>> ('x = ', 2, ', y = ', 1)\n// >>> solution(4, 2, 7)\n// >>> 'No solution'\n// >>> solution(1, 13, 17)\n// >>> ('x = ', 4, ', y = ', 1)\nfunc solution (a int, b int, n int) interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := solution(2,3,7)\n\texpected_1 := []interface{}{\"x = \", 2, \", y = \", 1}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := solution(4,2,7)\n\texpected_2 := \"No solution\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := solution(1,13,17)\n\texpected_3 := []interface{}{\"x = \", 4, \", y = \", 1}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find x and y that satisfies ax + by = n.", "entry_point": "solution", "canonical_solution": null}
{"task_id": "MBGP/161", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove all elements from a given list present in another list.\n// Examples:\n// >>> remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])\n// >>> [1, 3, 5, 7, 9, 10]\n// >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])\n// >>> [2, 4, 6, 8, 9, 10]\n// >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])\n// >>> [1, 2, 3, 4, 6, 8, 9, 10]\nfunc remove_elements (list1 []int, list2 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_elements([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},[]int{2, 4, 6, 8})\n\texpected_1 := []int{1, 3, 5, 7, 9, 10}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_elements([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},[]int{1, 3, 5, 7})\n\texpected_2 := []int{2, 4, 6, 8, 9, 10}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_elements([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},[]int{5, 7})\n\texpected_3 := []int{1, 2, 3, 4, 6, 8, 9, 10}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove all elements from a given list present in another list.", "entry_point": "remove_elements", "canonical_solution": null}
{"task_id": "MBGP/162", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n// Examples:\n// >>> sum_series(6)\n// >>> 12\n// >>> sum_series(10)\n// >>> 30\n// >>> sum_series(9)\n// >>> 25\nfunc sum_series (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_series(6)\n\texpected_1 := 12\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_series(10)\n\texpected_2 := 30\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_series(9)\n\texpected_3 := 25\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).", "entry_point": "sum_series", "canonical_solution": null}
{"task_id": "MBGP/163", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate the area of a regular polygon.\n// Examples:\n// >>> area_polygon(4,20)\n// >>> 400.00000000000006\n// >>> area_polygon(10,15)\n// >>> 1731.1969896610804\n// >>> area_polygon(9,7)\n// >>> 302.90938549487214\nfunc area_polygon (s int, l int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := area_polygon(4,20)\n\texpected_1 := 400.00000000000006\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := area_polygon(10,15)\n\texpected_2 := 1731.1969896610804\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := area_polygon(9,7)\n\texpected_3 := 302.90938549487214\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate the area of a regular polygon.", "entry_point": "area_polygon", "canonical_solution": null}
{"task_id": "MBGP/164", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the sum of divisors are same or not.\n// Examples:\n// >>> areEquivalent(36,57)\n// >>> False\n// >>> areEquivalent(2,4)\n// >>> False\n// >>> areEquivalent(23,47)\n// >>> True\nfunc areEquivalent (num1 int, num2 int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := areEquivalent(36,57)\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := areEquivalent(2,4)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := areEquivalent(23,47)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the sum of divisors are same or not.", "entry_point": "areEquivalent", "canonical_solution": null}
{"task_id": "MBGP/165", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n// Examples:\n// >>> count_char_position(\"xbcefg\")\n// >>> 2\n// >>> count_char_position(\"ABcED\")\n// >>> 3\n// >>> count_char_position(\"AbgdeF\")\n// >>> 5\nfunc count_char_position (str1 string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_char_position(\"xbcefg\")\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_char_position(\"ABcED\")\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_char_position(\"AbgdeF\")\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.", "entry_point": "count_char_position", "canonical_solution": null}
{"task_id": "MBGP/166", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the pairs with xor as an even number.\n// Examples:\n// >>> find_even_Pair([5,4,7,2,1],5)\n// >>> 4\n// >>> find_even_Pair([7,2,8,1,0,5,11],7)\n// >>> 9\n// >>> find_even_Pair([1,2,3],3)\n// >>> 1\nfunc find_even_Pair (A []int, N int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_even_Pair([]int{5, 4, 7, 2, 1},5)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_even_Pair([]int{7, 2, 8, 1, 0, 5, 11},7)\n\texpected_2 := 9\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_even_Pair([]int{1, 2, 3},3)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the pairs with xor as an even number.", "entry_point": "find_even_Pair", "canonical_solution": null}
{"task_id": "MBGP/167", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find smallest power of 2 greater than or equal to n.\n// Examples:\n// >>> next_Power_Of_2(0)\n// >>> 1\n// >>> next_Power_Of_2(5)\n// >>> 8\n// >>> next_Power_Of_2(17)\n// >>> 32\nfunc next_Power_Of_2 (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := next_Power_Of_2(0)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := next_Power_Of_2(5)\n\texpected_2 := 8\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := next_Power_Of_2(17)\n\texpected_3 := 32\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find smallest power of 2 greater than or equal to n.", "entry_point": "next_Power_Of_2", "canonical_solution": null}
{"task_id": "MBGP/168", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the frequency of a number in a given array.\n// Examples:\n// >>> frequency([1,2,3],4)\n// >>> 0\n// >>> frequency([1,2,2,3,3,3,4],3)\n// >>> 3\n// >>> frequency([0,1,2,3,1,2],1)\n// >>> 2\nfunc frequency (a []int, x int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := frequency([]int{1, 2, 3},4)\n\texpected_1 := 0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := frequency([]int{1, 2, 2, 3, 3, 3, 4},3)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := frequency([]int{0, 1, 2, 3, 1, 2},1)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the frequency of a number in a given array.", "entry_point": "frequency", "canonical_solution": null}
{"task_id": "MBGP/169", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate the nth pell number.\n// Examples:\n// >>> get_pell(4)\n// >>> 12\n// >>> get_pell(7)\n// >>> 169\n// >>> get_pell(8)\n// >>> 408\nfunc get_pell (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_pell(4)\n\texpected_1 := 12\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_pell(7)\n\texpected_2 := 169\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_pell(8)\n\texpected_3 := 408\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate the nth pell number.", "entry_point": "get_pell", "canonical_solution": null}
{"task_id": "MBGP/170", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find sum of the numbers in a list between the indices of a specified range.\n// Examples:\n// >>> sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)\n// >>> 29\n// >>> sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)\n// >>> 16\n// >>> sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)\n// >>> 38\nfunc sum_range_list (list1 []int, m int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_range_list([]int{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12},8,10)\n\texpected_1 := 29\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_range_list([]int{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12},5,7)\n\texpected_2 := 16\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_range_list([]int{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12},7,10)\n\texpected_3 := 38\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find sum of the numbers in a list between the indices of a specified range.", "entry_point": "sum_range_list", "canonical_solution": null}
{"task_id": "MBGP/171", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the perimeter of a pentagon.\n// Examples:\n// >>> perimeter_pentagon(5)\n// >>> 25\n// >>> perimeter_pentagon(10)\n// >>> 50\n// >>> perimeter_pentagon(15)\n// >>> 75\nfunc perimeter_pentagon (a int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := perimeter_pentagon(5)\n\texpected_1 := 25\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := perimeter_pentagon(10)\n\texpected_2 := 50\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := perimeter_pentagon(15)\n\texpected_3 := 75\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the perimeter of a pentagon.", "entry_point": "perimeter_pentagon", "canonical_solution": null}
{"task_id": "MBGP/172", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n// Examples:\n// >>> count_occurance(\"letstdlenstdporstd\")\n// >>> 3\n// >>> count_occurance(\"truststdsolensporsd\")\n// >>> 1\n// >>> count_occurance(\"makestdsostdworthit\")\n// >>> 2\nfunc count_occurance (s string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_occurance(\"letstdlenstdporstd\")\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_occurance(\"truststdsolensporsd\")\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_occurance(\"makestdsostdworthit\")\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item", "entry_point": "count_occurance", "canonical_solution": null}
{"task_id": "MBGP/173", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove everything except alphanumeric characters from a string.\n// Examples:\n// >>> remove_splchar('python  @#&^%$*program123')\n// >>> ('pythonprogram123')\n// >>> remove_splchar('python %^$@!^&*()  programming24%$^^()    language')\n// >>> ('pythonprogramming24language')\n// >>> remove_splchar('python   ^%&^()(+_)(_^&67)                  program')\n// >>> ('python67program')\nfunc remove_splchar (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_splchar(\"python  @#&^%$*program123\")\n\texpected_1 := \"pythonprogram123\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_splchar(\"python %^$@!^&*()  programming24%$^^()    language\")\n\texpected_2 := \"pythonprogramming24language\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_splchar(\"python   ^%&^()(+_)(_^&67)                  program\")\n\texpected_3 := \"python67program\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove everything except alphanumeric characters from a string.", "entry_point": "remove_splchar", "canonical_solution": null}
{"task_id": "MBGP/174", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to group a sequence of key-value pairs into a dictionary of lists.\n// Examples:\n// >>> group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])\n// >>> {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n// >>> group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])\n// >>> {'python': [1,2,3,4,5]}\n// >>> group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])\n// >>> {'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}\nfunc group_keyvalue (l [][]interface{}) map[string][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := group_keyvalue([][]interface{}{[]interface{}{\"yellow\", 1}, []interface{}{\"blue\", 2}, []interface{}{\"yellow\", 3}, []interface{}{\"blue\", 4}, []interface{}{\"red\", 1}})\n\texpected_1 := map[string][]int{ \"yellow\": []int{1, 3}, \"blue\": []int{2, 4}, \"red\": []int{1},  }\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := group_keyvalue([][]interface{}{[]interface{}{\"python\", 1}, []interface{}{\"python\", 2}, []interface{}{\"python\", 3}, []interface{}{\"python\", 4}, []interface{}{\"python\", 5}})\n\texpected_2 := map[string][]int{ \"python\": []int{1, 2, 3, 4, 5},  }\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := group_keyvalue([][]interface{}{[]interface{}{\"yellow\", 100}, []interface{}{\"blue\", 200}, []interface{}{\"yellow\", 300}, []interface{}{\"blue\", 400}, []interface{}{\"red\", 100}})\n\texpected_3 := map[string][]int{ \"yellow\": []int{100, 300}, \"blue\": []int{200, 400}, \"red\": []int{100},  }\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to group a sequence of key-value pairs into a dictionary of lists.", "entry_point": "group_keyvalue", "canonical_solution": null}
{"task_id": "MBGP/175", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to verify validity of a string of parentheses.\n// Examples:\n// >>> is_valid_parenthese(\"(){}[]\")\n// >>> True\n// >>> is_valid_parenthese(\"()[{)}\")\n// >>> False\n// >>> is_valid_parenthese(\"()\")\n// >>> True\nfunc is_valid_parenthese (str1 string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_valid_parenthese(\"(){}[]\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_valid_parenthese(\"()[{)}\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_valid_parenthese(\"()\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to verify validity of a string of parentheses.", "entry_point": "is_valid_parenthese", "canonical_solution": null}
{"task_id": "MBGP/176", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the perimeter of a triangle.\n// Examples:\n// >>> perimeter_triangle(10,20,30)\n// >>> 60\n// >>> perimeter_triangle(3,4,5)\n// >>> 12\n// >>> perimeter_triangle(25,35,45)\n// >>> 105\nfunc perimeter_triangle (a int, b int, c int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := perimeter_triangle(10,20,30)\n\texpected_1 := 60\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := perimeter_triangle(3,4,5)\n\texpected_2 := 12\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := perimeter_triangle(25,35,45)\n\texpected_3 := 105\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the perimeter of a triangle.", "entry_point": "perimeter_triangle", "canonical_solution": null}
{"task_id": "MBGP/177", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find two distinct numbers such that their lcm lies within the given range.\n// Examples:\n// >>> answer(3,8)\n// >>> (3,6)\n// >>> answer(2,6)\n// >>> (2,4)\n// >>> answer(1,3)\n// >>> (1,2)\nfunc answer (L int, R int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := answer(3,8)\n\texpected_1 := []int{3, 6}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := answer(2,6)\n\texpected_2 := []int{2, 4}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := answer(1,3)\n\texpected_3 := []int{1, 2}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find two distinct numbers such that their lcm lies within the given range.", "entry_point": "answer", "canonical_solution": null}
{"task_id": "MBGP/178", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to search some literals strings in a string.\n// Examples:\n// >>> string_literals(['language'],'python language')\n// >>> ('Matched!')\n// >>> string_literals(['program'],'python language')\n// >>> ('Not Matched!')\n// >>> string_literals(['python'],'programming language')\n// >>> ('Not Matched!')\nfunc string_literals (patterns []string, text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := string_literals([]string{\"language\"},\"python language\")\n\texpected_1 := \"Matched!\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := string_literals([]string{\"program\"},\"python language\")\n\texpected_2 := \"Not Matched!\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := string_literals([]string{\"python\"},\"programming language\")\n\texpected_3 := \"Not Matched!\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to search some literals strings in a string.", "entry_point": "string_literals", "canonical_solution": null}
{"task_id": "MBGP/179", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find if the given number is a keith number or not.\n// Examples:\n// >>> is_num_keith(14)\n// >>> True\n// >>> is_num_keith(12)\n// >>> False\n// >>> is_num_keith(197)\n// >>> True\nfunc is_num_keith (x int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_num_keith(14)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_num_keith(12)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_num_keith(197)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find if the given number is a keith number or not.", "entry_point": "is_num_keith", "canonical_solution": null}
{"task_id": "MBGP/180", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate distance between two points using latitude and longitude.\n// Examples:\n// >>> distance_lat_long(23.5,67.5,25.5,69.5)\n// >>> 12179.372041317429\n// >>> distance_lat_long(10.5,20.5,30.5,40.5)\n// >>> 6069.397933300514\n// >>> distance_lat_long(10,20,30,40)\n// >>> 6783.751974994595\nfunc distance_lat_long (slat interface{}, slon interface{}, elat interface{}, elon interface{}) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := distance_lat_long(23.5,67.5,25.5,69.5)\n\texpected_1 := 12179.372041317427\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := distance_lat_long(10.5,20.5,30.5,40.5)\n\texpected_2 := 6069.397933300514\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := distance_lat_long(10,20,30,40)\n\texpected_3 := 6783.751974994595\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate distance between two points using latitude and longitude.", "entry_point": "distance_lat_long", "canonical_solution": null}
{"task_id": "MBGP/181", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the longest common prefix in the given set of strings.\n// Examples:\n// >>> common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4)\n// >>> 'ta'\n// >>> common_prefix([\"apples\", \"ape\", \"april\"], 3)\n// >>> 'ap'\n// >>> common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3)\n// >>> 'teen'\nfunc common_prefix (str1 string, str2 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := common_prefix(\"tablets\",\"tables\")\n\texpected_1 := \"table\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := common_prefix(\"apples\",\"ape\")\n\texpected_2 := \"ap\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := common_prefix(\"teens\",\"teenager\")\n\texpected_3 := \"teen\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the longest common prefix in the given set of strings.", "entry_point": "common_prefix", "canonical_solution": null}
{"task_id": "MBGP/182", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find uppercase, lowercase, special character and numeric values using regex.\n// Examples:\n// >>> find_character(\"ThisIsGeeksforGeeks\")\n// >>> (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n// >>> find_character(\"Hithere2\")\n// >>> (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\n// >>> find_character(\"HeyFolks32\")\n// >>> (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])\nfunc find_character (string0 string) [][]string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_character(\"ThisIsGeeksforGeeks\")\n\texpected_1 := [][]string{[]string{\"T\", \"I\", \"G\", \"G\"}, []string{\"h\", \"i\", \"s\", \"s\", \"e\", \"e\", \"k\", \"s\", \"f\", \"o\", \"r\", \"e\", \"e\", \"k\", \"s\"}, []string{}, []string{}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_character(\"Hithere2\")\n\texpected_2 := [][]string{[]string{\"H\"}, []string{\"i\", \"t\", \"h\", \"e\", \"r\", \"e\"}, []string{\"2\"}, []string{}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_character(\"HeyFolks32\")\n\texpected_3 := [][]string{[]string{\"H\", \"F\"}, []string{\"e\", \"y\", \"o\", \"l\", \"k\", \"s\"}, []string{\"3\", \"2\"}, []string{}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find uppercase, lowercase, special character and numeric values using regex.", "entry_point": "find_character", "canonical_solution": null}
{"task_id": "MBGP/183", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count all the distinct pairs having a difference of k in any array.\n// Examples:\n// >>> count_pairs([1, 5, 3, 4, 2], 5, 3)\n// >>> 2\n// >>> count_pairs([8, 12, 16, 4, 0, 20], 6, 4)\n// >>> 5\n// >>> count_pairs([2, 4, 1, 3, 4], 5, 2)\n// >>> 3\nfunc count_pairs (arr []int, n int, k int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_pairs([]int{1, 5, 3, 4, 2},5,3)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_pairs([]int{8, 12, 16, 4, 0, 20},6,4)\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_pairs([]int{2, 4, 1, 3, 4},5,2)\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count all the distinct pairs having a difference of k in any array.", "entry_point": "count_pairs", "canonical_solution": null}
{"task_id": "MBGP/184", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find all the values in a list that are greater than a specified number.\n// Examples:\n// >>> greater_specificnum([220, 330, 500],200)\n// >>> True\n// >>> greater_specificnum([12, 17, 21],20)\n// >>> False\n// >>> greater_specificnum([1,2,3,4],10)\n// >>> False\nfunc greater_specificnum (list []int, num int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := greater_specificnum([]int{220, 330, 500},200)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := greater_specificnum([]int{12, 17, 21},20)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := greater_specificnum([]int{1, 2, 3, 4},10)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find all the values in a list that are greater than a specified number.", "entry_point": "greater_specificnum", "canonical_solution": null}
{"task_id": "MBGP/185", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the focus of a parabola.\n// Examples:\n// >>> parabola_focus(5,3,2)\n// >>> (-0.3, 1.6)\n// >>> parabola_focus(9,8,4)\n// >>> (-0.4444444444444444, 2.25)\n// >>> parabola_focus(2,4,6)\n// >>> (-1.0, 4.125)\nfunc parabola_focus (a int, b int, c int) []float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := parabola_focus(5,3,2)\n\texpected_1 := []float64{-0.3, 1.6}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := parabola_focus(9,8,4)\n\texpected_2 := []float64{-0.4444444444444444, 2.25}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := parabola_focus(2,4,6)\n\texpected_3 := []float64{-1.0, 4.125}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the focus of a parabola.", "entry_point": "parabola_focus", "canonical_solution": null}
{"task_id": "MBGP/186", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to search some literals strings in a string by using regex.\n// Examples:\n// >>> check_literals('The quick brown fox jumps over the lazy dog.',['fox'])\n// >>> 'Matched!'\n// >>> check_literals('The quick brown fox jumps over the lazy dog.',['horse'])\n// >>> 'Not Matched!'\n// >>> check_literals('The quick brown fox jumps over the lazy dog.',['lazy'])\n// >>> 'Matched!'\nfunc check_literals (text string, patterns []string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_literals(\"The quick brown fox jumps over the lazy dog.\",[]string{\"fox\"})\n\texpected_1 := \"Matched!\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_literals(\"The quick brown fox jumps over the lazy dog.\",[]string{\"horse\"})\n\texpected_2 := \"Not Matched!\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_literals(\"The quick brown fox jumps over the lazy dog.\",[]string{\"lazy\"})\n\texpected_3 := \"Matched!\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to search some literals strings in a string by using regex.", "entry_point": "check_literals", "canonical_solution": null}
{"task_id": "MBGP/187", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the longest common subsequence for the given two sequences.\n// Examples:\n// >>> longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7)\n// >>> 4\n// >>> longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6)\n// >>> 3\n// >>> longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4)\n// >>> 2\nfunc longest_common_subsequence (X string, Y string, m int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := longest_common_subsequence(\"AGGTAB\",\"GXTXAYB\",6,7)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := longest_common_subsequence(\"ABCDGH\",\"AEDFHR\",6,6)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := longest_common_subsequence(\"AXYT\",\"AYZX\",4,4)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the longest common subsequence for the given two sequences.", "entry_point": "longest_common_subsequence", "canonical_solution": null}
{"task_id": "MBGP/188", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the given number can be represented by product of two squares or not.\n// Examples:\n// >>> prod_Square(25)\n// >>> False\n// >>> prod_Square(30)\n// >>> False\n// >>> prod_Square(16)\n// >>> True\nfunc prod_Square (n int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := prod_Square(25)\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := prod_Square(30)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := prod_Square(16)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the given number can be represented by product of two squares or not.", "entry_point": "prod_Square", "canonical_solution": null}
{"task_id": "MBGP/189", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the first missing positive number.\n// Examples:\n// >>> first_Missing_Positive([1,2,3,-1,5],5)\n// >>> 4\n// >>> first_Missing_Positive([0,-1,-2,1,5,8],6)\n// >>> 2\n// >>> first_Missing_Positive([0,1,2,5,-8],5)\n// >>> 3\nfunc first_Missing_Positive (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := first_Missing_Positive([]int{1, 2, 3, -1, 5},5)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := first_Missing_Positive([]int{0, -1, -2, 1, 5, 8},6)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := first_Missing_Positive([]int{0, 1, 2, 5, -8},5)\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the first missing positive number.", "entry_point": "first_Missing_Positive", "canonical_solution": null}
{"task_id": "MBGP/190", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the number of integral co-ordinates that lie inside a square.\n// Examples:\n// >>> count_Intgral_Points(1,1,4,4)\n// >>> 4\n// >>> count_Intgral_Points(1,2,1,2)\n// >>> 1\n// >>> count_Intgral_Points(4,2,6,4)\n// >>> 1\nfunc count_Intgral_Points (x1 int, y1 int, x2 int, y2 int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Intgral_Points(1,1,4,4)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Intgral_Points(1,2,1,2)\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Intgral_Points(4,2,6,4)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the number of integral co-ordinates that lie inside a square.", "entry_point": "count_Intgral_Points", "canonical_solution": null}
{"task_id": "MBGP/191", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check whether the given month name contains 30 days or not.\n// Examples:\n// >>> check_monthnumber(\"February\")\n// >>> False\n// >>> check_monthnumber(\"June\")\n// >>> True\n// >>> check_monthnumber(\"April\")\n// >>> True\nfunc check_monthnumber (monthname3 string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_monthnumber(\"February\")\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_monthnumber(\"June\")\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_monthnumber(\"April\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check whether the given month name contains 30 days or not.", "entry_point": "check_monthnumber", "canonical_solution": null}
{"task_id": "MBGP/192", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether a string has atleast one letter and one number.\n// Examples:\n// >>> check_String('thishasboth29')\n// >>> True\n// >>> check_String('python')\n// >>> False\n// >>> check_String ('string')\n// >>> False\nfunc check_String (str string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_String(\"thishasboth29\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_String(\"python\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_String(\"string\")\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether a string has atleast one letter and one number.", "entry_point": "check_String", "canonical_solution": null}
{"task_id": "MBGP/193", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove the duplicates from the given tuple.\n// Examples:\n// >>> remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3))\n// >>> (1, 2, 3, 5)\n// >>> remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8))\n// >>> (2, 3, 4, 5, 6, 7, 8)\n// >>> remove_tuple((11, 12, 13, 11, 11, 12, 14, 13))\n// >>> (11, 12, 13, 14)\nfunc remove_tuple (test_tup []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_tuple([]int{1, 3, 5, 2, 3, 5, 1, 1, 3})\n\texpected_1 := []int{1, 2, 3, 5}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_tuple([]int{2, 3, 4, 4, 5, 6, 6, 7, 8, 8})\n\texpected_2 := []int{2, 3, 4, 5, 6, 7, 8}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_tuple([]int{11, 12, 13, 11, 11, 12, 14, 13})\n\texpected_3 := []int{11, 12, 13, 14}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove the duplicates from the given tuple.", "entry_point": "remove_tuple", "canonical_solution": null}
{"task_id": "MBGP/194", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to convert octal number to decimal number.\n// Examples:\n// >>> octal_To_Decimal(25)\n// >>> 21\n// >>> octal_To_Decimal(30)\n// >>> 24\n// >>> octal_To_Decimal(40)\n// >>> 32\nfunc octal_To_Decimal (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := octal_To_Decimal(25)\n\texpected_1 := 21\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := octal_To_Decimal(30)\n\texpected_2 := 24\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := octal_To_Decimal(40)\n\texpected_3 := 32\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to convert octal number to decimal number.", "entry_point": "octal_To_Decimal", "canonical_solution": null}
{"task_id": "MBGP/195", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the first position of an element in a sorted array.\n// Examples:\n// >>> first([1,2,3,4,5,6,6],6,6)\n// >>> 5\n// >>> first([1,2,2,2,3,2,2,4,2],2,9)\n// >>> 1\n// >>> first([1,2,3],1,3)\n// >>> 0\nfunc first (arr []int, x int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := first([]int{1, 2, 3, 4, 5, 6, 6},6,6)\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := first([]int{1, 2, 2, 2, 3, 2, 2, 4, 2},2,9)\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := first([]int{1, 2, 3},1,3)\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the first position of an element in a sorted array.", "entry_point": "first", "canonical_solution": null}
{"task_id": "MBGP/196", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove all the tuples with length k.\n// Examples:\n// >>> remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1)\n// >>> [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n// >>> remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2)\n// >>> [(1, 2, 3), (3, 4, 6, 7)]\n// >>> remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3)\n// >>> [(4, 3), (1,)]\nfunc remove_tuples (test_list [][]int, K int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_tuples([][]int{[]int{4, 5}, []int{4}, []int{8, 6, 7}, []int{1}, []int{3, 4, 6, 7}},1)\n\texpected_1 := [][]int{[]int{4, 5}, []int{8, 6, 7}, []int{3, 4, 6, 7}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_tuples([][]int{[]int{4, 5}, []int{4, 5}, []int{6, 7}, []int{1, 2, 3}, []int{3, 4, 6, 7}},2)\n\texpected_2 := [][]int{[]int{1, 2, 3}, []int{3, 4, 6, 7}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_tuples([][]int{[]int{1, 4, 4}, []int{4, 3}, []int{8, 6, 7}, []int{1}, []int{3, 6, 7}},3)\n\texpected_3 := [][]int{[]int{4, 3}, []int{1}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove all the tuples with length k.", "entry_point": "remove_tuples", "canonical_solution": null}
{"task_id": "MBGP/197", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to perform the exponentiation of the given two tuples.\n// Examples:\n// >>> find_exponentio((10, 4, 5, 6), (5, 6, 7, 5))\n// >>> (100000, 4096, 78125, 7776)\n// >>> find_exponentio((11, 5, 6, 7), (6, 7, 8, 6))\n// >>> (1771561, 78125, 1679616, 117649)\n// >>> find_exponentio((12, 6, 7, 8), (7, 8, 9, 7))\n// >>> (35831808, 1679616, 40353607, 2097152)\nfunc find_exponentio (test_tup1 []int, test_tup2 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_exponentio([]int{10, 4, 5, 6},[]int{5, 6, 7, 5})\n\texpected_1 := []int{100000, 4096, 78125, 7776}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_exponentio([]int{11, 5, 6, 7},[]int{6, 7, 8, 6})\n\texpected_2 := []int{1771561, 78125, 1679616, 117649}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_exponentio([]int{12, 6, 7, 8},[]int{7, 8, 9, 7})\n\texpected_3 := []int{35831808, 1679616, 40353607, 2097152}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to perform the exponentiation of the given two tuples.", "entry_point": "find_exponentio", "canonical_solution": null}
{"task_id": "MBGP/198", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the largest triangle that can be inscribed in an ellipse.\n// Examples:\n// >>> largest_triangle(4,2)\n// >>> 10.392304845413264\n// >>> largest_triangle(5,7)\n// >>> 4.639421805988064\n// >>> largest_triangle(9,1)\n// >>> 105.2220865598093\nfunc largest_triangle (a int, b int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := largest_triangle(4,2)\n\texpected_1 := 10.392304845413264\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := largest_triangle(5,7)\n\texpected_2 := 4.639421805988064\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := largest_triangle(9,1)\n\texpected_3 := 105.2220865598093\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the largest triangle that can be inscribed in an ellipse.", "entry_point": "largest_triangle", "canonical_solution": null}
{"task_id": "MBGP/199", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find highest power of 2 less than or equal to given number.\n// Examples:\n// >>> highest_Power_of_2(10)\n// >>> 8\n// >>> highest_Power_of_2(19)\n// >>> 16\n// >>> highest_Power_of_2(32)\n// >>> 32\nfunc highest_Power_of_2 (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := highest_Power_of_2(10)\n\texpected_1 := 8\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := highest_Power_of_2(19)\n\texpected_2 := 16\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := highest_Power_of_2(32)\n\texpected_3 := 32\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find highest power of 2 less than or equal to given number.", "entry_point": "highest_Power_of_2", "canonical_solution": null}
{"task_id": "MBGP/200", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find all index positions of the maximum values in a given list.\n// Examples:\n// >>> position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])\n// >>> [7]\n// >>> position_max([1,2,2,2,4,4,4,5,5,5,5])\n// >>> [7,8,9,10]\n// >>> position_max([2,1,5,6,8,3,4,9,10,11,8,12])\n// >>> [11]\nfunc position_max (list1 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := position_max([]int{12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54})\n\texpected_1 := []int{7}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := position_max([]int{1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5})\n\texpected_2 := []int{7, 8, 9, 10}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := position_max([]int{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12})\n\texpected_3 := []int{11}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find all index positions of the maximum values in a given list.", "entry_point": "position_max", "canonical_solution": null}
{"task_id": "MBGP/201", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the elements in a list are same or not.\n// Examples:\n// >>> chkList(['one','one','one'])\n// >>> True\n// >>> chkList(['one','Two','Three'])\n// >>> False\n// >>> chkList(['bigdata','python','Django'])\n// >>> False\nfunc chkList (lst []string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := chkList([]string{\"one\", \"one\", \"one\"})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := chkList([]string{\"one\", \"Two\", \"Three\"})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := chkList([]string{\"bigdata\", \"python\", \"Django\"})\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the elements in a list are same or not.", "entry_point": "chkList", "canonical_solution": null}
{"task_id": "MBGP/202", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove even characters in a string.\n// Examples:\n// >>> remove_even(\"python\")\n// >>> (\"pto\")\n// >>> remove_even(\"program\")\n// >>> (\"porm\")\n// >>> remove_even(\"language\")\n// >>> (\"lnug\")\nfunc remove_even (str1 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_even(\"python\")\n\texpected_1 := \"pto\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_even(\"program\")\n\texpected_2 := \"porm\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_even(\"language\")\n\texpected_3 := \"lnug\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove even characters in a string.", "entry_point": "remove_even", "canonical_solution": null}
{"task_id": "MBGP/203", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the hamming distance between given two integers.\n// Examples:\n// >>> hamming_Distance(4,8)\n// >>> 2\n// >>> hamming_Distance(2,4)\n// >>> 2\n// >>> hamming_Distance(1,2)\n// >>> 2\nfunc hamming_Distance (n1 int, n2 int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := hamming_Distance(4,8)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := hamming_Distance(2,4)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := hamming_Distance(1,2)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the hamming distance between given two integers.", "entry_point": "hamming_Distance", "canonical_solution": null}
{"task_id": "MBGP/204", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the occurrence of a given character in a string.\n// Examples:\n// >>> count(\"abcc\",\"c\")\n// >>> 2\n// >>> count(\"ababca\",\"a\")\n// >>> 3\n// >>> count(\"mnmm0pm\",\"m\")\n// >>> 4\nfunc count (s string, c string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count(\"abcc\",\"c\")\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count(\"ababca\",\"a\")\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count(\"mnmm0pm\",\"m\")\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the occurrence of a given character in a string.", "entry_point": "count", "canonical_solution": null}
{"task_id": "MBGP/205", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the inversions of tuple elements in the given tuple list.\n// Examples:\n// >>> inversion_elements((7, 8, 9, 1, 10, 7))\n// >>> (-8, -9, -10, -2, -11, -8)\n// >>> inversion_elements((2, 4, 5, 6, 1, 7))\n// >>> (-3, -5, -6, -7, -2, -8)\n// >>> inversion_elements((8, 9, 11, 14, 12, 13))\n// >>> (-9, -10, -12, -15, -13, -14)\nfunc inversion_elements (test_tup []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := inversion_elements([]int{7, 8, 9, 1, 10, 7})\n\texpected_1 := []int{-8, -9, -10, -2, -11, -8}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := inversion_elements([]int{2, 4, 5, 6, 1, 7})\n\texpected_2 := []int{-3, -5, -6, -7, -2, -8}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := inversion_elements([]int{8, 9, 11, 14, 12, 13})\n\texpected_3 := []int{-9, -10, -12, -15, -13, -14}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the inversions of tuple elements in the given tuple list.", "entry_point": "inversion_elements", "canonical_solution": null}
{"task_id": "MBGP/206", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to perform the adjacent element concatenation in the given tuples.\n// Examples:\n// >>> concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"))\n// >>> ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n// >>> concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"))\n// >>> ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\n// >>> concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"))\n// >>> ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')\nfunc concatenate_elements (test_tup []string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := concatenate_elements([]string{\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"})\n\texpected_1 := []string{\"DSP IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL UTS\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := concatenate_elements([]string{\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"})\n\texpected_2 := []string{\"RES IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL QESR\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := concatenate_elements([]string{\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"})\n\texpected_3 := []string{\"MSAMIS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL SKD\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to perform the adjacent element concatenation in the given tuples.", "entry_point": "concatenate_elements", "canonical_solution": null}
{"task_id": "MBGP/207", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n// Examples:\n// >>> find_longest_repeating_subseq(\"AABEBCDD\")\n// >>> 3\n// >>> find_longest_repeating_subseq(\"aabb\")\n// >>> 2\n// >>> find_longest_repeating_subseq(\"aab\")\n// >>> 1\nfunc find_longest_repeating_subseq (str string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_longest_repeating_subseq(\"AABEBCDD\")\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_longest_repeating_subseq(\"aabb\")\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_longest_repeating_subseq(\"aab\")\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.", "entry_point": "find_longest_repeating_subseq", "canonical_solution": null}
{"task_id": "MBGP/208", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check the given decimal with a precision of 2 by using regex.\n// Examples:\n// >>> is_decimal('123.11')\n// >>> True\n// >>> is_decimal('0.21')\n// >>> True\n// >>> is_decimal('123.1214')\n// >>> False\nfunc is_decimal (num string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_decimal(\"123.11\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_decimal(\"0.21\")\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_decimal(\"123.1214\")\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check the given decimal with a precision of 2 by using regex.", "entry_point": "is_decimal", "canonical_solution": null}
{"task_id": "MBGP/210", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n// Examples:\n// >>> is_allowed_specific_char(\"ABCDEFabcdef123450\")\n// >>> True\n// >>> is_allowed_specific_char(\"*&%@#!}{\")\n// >>> False\n// >>> is_allowed_specific_char(\"HELLOhowareyou98765\")\n// >>> True\nfunc is_allowed_specific_char (string0 string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_allowed_specific_char(\"ABCDEFabcdef123450\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_allowed_specific_char(\"*&%@#!}{\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_allowed_specific_char(\"HELLOhowareyou98765\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.", "entry_point": "is_allowed_specific_char", "canonical_solution": null}
{"task_id": "MBGP/211", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count numbers whose oth and nth bits are set.\n// Examples:\n// >>> count_Num(2)\n// >>> 1\n// >>> count_Num(3)\n// >>> 2\n// >>> count_Num(1)\n// >>> 1\nfunc count_Num (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Num(2)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Num(3)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Num(1)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count numbers whose oth and nth bits are set.", "entry_point": "count_Num", "canonical_solution": null}
{"task_id": "MBGP/212", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of fourth power of n natural numbers.\n// Examples:\n// >>> fourth_Power_Sum(2)\n// >>> 17\n// >>> fourth_Power_Sum(4)\n// >>> 354\n// >>> fourth_Power_Sum(6)\n// >>> 2275\nfunc fourth_Power_Sum (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := fourth_Power_Sum(2)\n\texpected_1 := 17\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := fourth_Power_Sum(4)\n\texpected_2 := 354\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := fourth_Power_Sum(6)\n\texpected_3 := 2275\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of fourth power of n natural numbers.", "entry_point": "fourth_Power_Sum", "canonical_solution": null}
{"task_id": "MBGP/213", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to perform the concatenation of two string tuples.\n// Examples:\n// >>> concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\"))\n// >>> ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n// >>> concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\"))\n// >>> ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\n// >>> concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\"))\n// >>> ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')\nfunc concatenate_strings (test_tup1 []string, test_tup2 []string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := concatenate_strings([]string{\"Manjeet\", \"Nikhil\", \"Akshat\"},[]string{\" Singh\", \" Meherwal\", \" Garg\"})\n\texpected_1 := []string{\"Manjeet Singh\", \"Nikhil Meherwal\", \"Akshat Garg\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := concatenate_strings([]string{\"Shaik\", \"Ayesha\", \"Sanya\"},[]string{\" Dawood\", \" Begum\", \" Singh\"})\n\texpected_2 := []string{\"Shaik Dawood\", \"Ayesha Begum\", \"Sanya Singh\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := concatenate_strings([]string{\"Harpreet\", \"Priyanka\", \"Muskan\"},[]string{\"Kour\", \" Agarwal\", \"Sethi\"})\n\texpected_3 := []string{\"HarpreetKour\", \"Priyanka Agarwal\", \"MuskanSethi\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to perform the concatenation of two string tuples.", "entry_point": "concatenate_strings", "canonical_solution": null}
{"task_id": "MBGP/214", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert radians to degrees.\n// Examples:\n// >>> degree_radian(90)\n// >>> 5156.620156177409\n// >>> degree_radian(60)\n// >>> 3437.746770784939\n// >>> degree_radian(120)\n// >>> 6875.493541569878\nfunc degree_radian (radian int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := degree_radian(90)\n\texpected_1 := 5156.620156177409\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := degree_radian(60)\n\texpected_2 := 3437.746770784939\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := degree_radian(120)\n\texpected_3 := 6875.493541569878\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert radians to degrees.", "entry_point": "degree_radian", "canonical_solution": null}
{"task_id": "MBGP/215", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to decode a run-length encoded given list.\n// Examples:\n// >>> decode_list([[2, 1], 2, 3, [2, 4], 5,1])\n// >>> [1,1,2,3,4,4,5,1]\n// >>> decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])\n// >>> ['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\n// >>> decode_list(['p', 'y', 't', 'h', 'o', 'n'])\n// >>> ['p', 'y', 't', 'h', 'o', 'n']\nfunc decode_list (alist []interface{}) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := decode_list([]interface{}{[]interface{}{2, 1}, 2, 3, []interface{}{2, 4}, 5, 1})\n\texpected_1 := []interface{}{1, 1, 2, 3, 4, 4, 5, 1}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := decode_list([]interface{}{\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", []interface{}{2, \"l\"}, \"y\"})\n\texpected_2 := []interface{}{\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", \"l\", \"l\", \"y\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := decode_list([]interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"})\n\texpected_3 := []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to decode a run-length encoded given list.", "entry_point": "decode_list", "canonical_solution": null}
{"task_id": "MBGP/216", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if a nested list is a subset of another nested list.\n// Examples:\n// >>> check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])\n// >>> False\n// >>> check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])\n// >>> True\n// >>> check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])\n// >>> False\nfunc check_subset_list (list1 []interface{}, list2 []interface{}) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_subset_list([]interface{}{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14},[]interface{}{[]interface{}{12, 18, 23, 25, 45}, []interface{}{7, 11, 19, 24, 28}, []interface{}{1, 5, 8, 18, 15, 16}})\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_subset_list([]interface{}{[]interface{}{2, 3, 1}, []interface{}{4, 5}, []interface{}{6, 8}},[]interface{}{[]interface{}{4, 5}, []interface{}{6, 8}})\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_subset_list([]interface{}{[]interface{}{\"a\", \"b\"}, []interface{}{\"e\"}, []interface{}{\"c\", \"d\"}},[]interface{}{[]interface{}{\"g\"}})\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if a nested list is a subset of another nested list.", "entry_point": "check_subset_list", "canonical_solution": null}
{"task_id": "MBGP/217", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the first repeated character in a given string.\n// Examples:\n// >>> first_Repeated_Char(\"Google\")\n// >>> \"o\"\n// >>> first_Repeated_Char(\"data\")\n// >>> \"a\"\n// >>> first_Repeated_Char(\"python\")\n// >>> '\\0'\nfunc first_Repeated_Char (str string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := first_Repeated_Char(\"Google\")\n\texpected_1 := \"o\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := first_Repeated_Char(\"data\")\n\texpected_2 := \"a\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := first_Repeated_Char(\"python\")\n\texpected_3 := \"\u0000\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the first repeated character in a given string.", "entry_point": "first_Repeated_Char", "canonical_solution": null}
{"task_id": "MBGP/218", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the minimum operations required to make two numbers equal.\n// Examples:\n// >>> min_Operations(2,4)\n// >>> 1\n// >>> min_Operations(4,10)\n// >>> 4\n// >>> min_Operations(1,4)\n// >>> 3\nfunc min_Operations (A int, B int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := min_Operations(2,4)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := min_Operations(4,10)\n\texpected_2 := 4\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := min_Operations(1,4)\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the minimum operations required to make two numbers equal.", "entry_point": "min_Operations", "canonical_solution": null}
{"task_id": "MBGP/219", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to extract maximum and minimum k elements in the given tuple.\n// Examples:\n// >>> extract_min_max((5, 20, 3, 7, 6, 8), 2)\n// >>> (3, 5, 8, 20)\n// >>> extract_min_max((4, 5, 6, 1, 2, 7), 3)\n// >>> (1, 2, 4, 5, 6, 7)\n// >>> extract_min_max((2, 3, 4, 8, 9, 11, 7), 4)\n// >>> (2, 3, 4, 7, 8, 9, 11)\nfunc extract_min_max (test_tup []int, K int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := extract_min_max([]int{5, 20, 3, 7, 6, 8},2)\n\texpected_1 := []int{3, 5, 8, 20}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := extract_min_max([]int{4, 5, 6, 1, 2, 7},3)\n\texpected_2 := []int{1, 2, 4, 5, 6, 7}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := extract_min_max([]int{2, 3, 4, 8, 9, 11, 7},4)\n\texpected_3 := []int{2, 3, 4, 7, 8, 9, 11}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to extract maximum and minimum k elements in the given tuple.", "entry_point": "extract_min_max", "canonical_solution": null}
{"task_id": "MBGP/220", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n// Examples:\n// >>> replace_max_specialchar('Python language, Programming language.',2)\n// >>> ('Python:language: Programming language.')\n// >>> replace_max_specialchar('a b c,d e f',3)\n// >>> ('a:b:c:d e f')\n// >>> replace_max_specialchar('ram reshma,ram rahim',1)\n// >>> ('ram:reshma,ram rahim')\nfunc replace_max_specialchar (text string, n int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := replace_max_specialchar(\"Python language, Programming language.\",2)\n\texpected_1 := \"Python:language: Programming language.\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := replace_max_specialchar(\"a b c,d e f\",3)\n\texpected_2 := \"a:b:c:d e f\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := replace_max_specialchar(\"ram reshma,ram rahim\",1)\n\texpected_3 := \"ram:reshma,ram rahim\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.", "entry_point": "replace_max_specialchar", "canonical_solution": null}
{"task_id": "MBGP/221", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the first even number in a given list of numbers.\n// Examples:\n// >>> first_even ([1, 3, 5, 7, 4, 1, 6, 8])\n// >>> 4\n// >>> first_even([2, 3, 4])\n// >>> 2\n// >>> first_even([5, 6, 7])\n// >>> 6\nfunc first_even (nums []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := first_even([]int{1, 3, 5, 7, 4, 1, 6, 8})\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := first_even([]int{2, 3, 4})\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := first_even([]int{5, 6, 7})\n\texpected_3 := 6\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the first even number in a given list of numbers.", "entry_point": "first_even", "canonical_solution": null}
{"task_id": "MBGP/222", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if all the elements in tuple have same data type or not.\n// Examples:\n// >>> check_type((5, 6, 7, 3, 5, 6) )\n// >>> True\n// >>> check_type((1, 2, \"4\") )\n// >>> False\n// >>> check_type((3, 2, 1, 4, 5) )\n// >>> True\nfunc check_type (test_tuple []interface{}) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_type([]interface{}{5, 6, 7, 3, 5, 6})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_type([]interface{}{1, 2, \"4\"})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_type([]interface{}{3, 2, 1, 4, 5})\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if all the elements in tuple have same data type or not.", "entry_point": "check_type", "canonical_solution": null}
{"task_id": "MBGP/223", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check for majority element in the given sorted array.\n// Examples:\n// >>> is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3)\n// >>> True\n// >>> is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)\n// >>> False\n// >>> is_majority([1, 1, 1, 2, 2], 5, 1)\n// >>> True\nfunc is_majority (arr []int, n int, x int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_majority([]int{1, 2, 3, 3, 3, 3, 10},7,3)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_majority([]int{1, 1, 2, 4, 4, 4, 6, 6},8,4)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_majority([]int{1, 1, 1, 2, 2},5,1)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check for majority element in the given sorted array.", "entry_point": "is_majority", "canonical_solution": null}
{"task_id": "MBGP/224", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count set bits of a given number.\n// Examples:\n// >>> count_Set_Bits(2)\n// >>> 1\n// >>> count_Set_Bits(4)\n// >>> 1\n// >>> count_Set_Bits(6)\n// >>> 2\nfunc count_Set_Bits (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Set_Bits(2)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Set_Bits(4)\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Set_Bits(6)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count set bits of a given number.", "entry_point": "count_Set_Bits", "canonical_solution": null}
{"task_id": "MBGP/225", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the minimum element in a sorted and rotated array.\n// Examples:\n// >>> find_Min([1,2,3,4,5],0,4)\n// >>> 1\n// >>> find_Min([4,6,8],0,2)\n// >>> 4\n// >>> find_Min([2,3,5,7,9],0,4)\n// >>> 2\nfunc find_Min (arr []int, low int, high int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Min([]int{1, 2, 3, 4, 5},0,4)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Min([]int{4, 6, 8},0,2)\n\texpected_2 := 4\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Min([]int{2, 3, 5, 7, 9},0,4)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the minimum element in a sorted and rotated array.", "entry_point": "find_Min", "canonical_solution": null}
{"task_id": "MBGP/226", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to remove the characters which have odd index values of a given string.\n// Examples:\n// >>> odd_values_string('abcdef')\n// >>> 'ace'\n// >>> odd_values_string('python')\n// >>> 'pto'\n// >>> odd_values_string('data')\n// >>> 'dt'\nfunc odd_values_string (str string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := odd_values_string(\"abcdef\")\n\texpected_1 := \"ace\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := odd_values_string(\"python\")\n\texpected_2 := \"pto\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := odd_values_string(\"data\")\n\texpected_3 := \"dt\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to remove the characters which have odd index values of a given string.", "entry_point": "odd_values_string", "canonical_solution": null}
{"task_id": "MBGP/227", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find minimum of three numbers.\n// Examples:\n// >>> min_of_three(10,20,0)\n// >>> 0\n// >>> min_of_three(19,15,18)\n// >>> 15\n// >>> min_of_three(-10,-20,-30)\n// >>> -30\nfunc min_of_three (a int, b int, c int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := min_of_three(10,20,0)\n\texpected_1 := 0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := min_of_three(19,15,18)\n\texpected_2 := 15\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := min_of_three(-10,-20,-30)\n\texpected_3 := -30\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find minimum of three numbers.", "entry_point": "min_of_three", "canonical_solution": null}
{"task_id": "MBGP/228", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether all the bits are unset in the given range or not.\n// Examples:\n// >>> all_Bits_Set_In_The_Given_Range(4,1,2)\n// >>> True\n// >>> all_Bits_Set_In_The_Given_Range(17,2,4)\n// >>> True\n// >>> all_Bits_Set_In_The_Given_Range(39,4,6)\n// >>> False\nfunc all_Bits_Set_In_The_Given_Range (n int, l int, r int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := all_Bits_Set_In_The_Given_Range(4,1,2)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := all_Bits_Set_In_The_Given_Range(17,2,4)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := all_Bits_Set_In_The_Given_Range(39,4,6)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether all the bits are unset in the given range or not.", "entry_point": "all_Bits_Set_In_The_Given_Range", "canonical_solution": null}
{"task_id": "MBGP/229", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n// Examples:\n// >>> re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)\n// >>> [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n// >>> re_arrange_array([12, -14, -26, 13, 15], 5)\n// >>> [-14, -26, 12, 13, 15]\n// >>> re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7)\n// >>> [-42, -39, -78, 10, 24, 36, 85]\nfunc re_arrange_array (arr []int, n int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := re_arrange_array([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9},9)\n\texpected_1 := []int{-1, -3, -7, 4, 5, 6, 2, 8, 9}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := re_arrange_array([]int{12, -14, -26, 13, 15},5)\n\texpected_2 := []int{-14, -26, 12, 13, 15}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := re_arrange_array([]int{10, 24, 36, -42, -39, -78, 85},7)\n\texpected_3 := []int{-42, -39, -78, 10, 24, 36, 85}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.", "entry_point": "re_arrange_array", "canonical_solution": null}
{"task_id": "MBGP/230", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to replace blank spaces with any character in a string.\n// Examples:\n// >>> replace_blank(\"hello people\",'@')\n// >>> (\"hello@people\")\n// >>> replace_blank(\"python program language\",'$')\n// >>> (\"python$program$language\")\n// >>> replace_blank(\"blank space\",\"-\")\n// >>> (\"blank-space\")\nfunc replace_blank (str1 string, char string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := replace_blank(\"hello people\",\"@\")\n\texpected_1 := \"hello@people\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := replace_blank(\"python program language\",\"$\")\n\texpected_2 := \"python$program$language\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := replace_blank(\"blank space\",\"-\")\n\texpected_3 := \"blank-space\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to replace blank spaces with any character in a string.", "entry_point": "replace_blank", "canonical_solution": null}
{"task_id": "MBGP/231", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the maximum sum in the given right triangle of numbers.\n// Examples:\n// >>> max_sum([[1], [2,1], [3,3,2]], 3)\n// >>> 6\n// >>> max_sum([[1], [1, 2], [4, 1, 12]], 3)\n// >>> 15\n// >>> max_sum([[2], [3,2], [13,23,12]], 3)\n// >>> 28\nfunc max_sum (tri [][]int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_sum([][]int{[]int{1}, []int{2, 1}, []int{3, 3, 2}},3)\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_sum([][]int{[]int{1}, []int{1, 2}, []int{4, 1, 12}},3)\n\texpected_2 := 15\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_sum([][]int{[]int{2}, []int{3, 2}, []int{13, 23, 12}},3)\n\texpected_3 := 28\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the maximum sum in the given right triangle of numbers.", "entry_point": "max_sum", "canonical_solution": null}
{"task_id": "MBGP/233", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the lateral surface area of a cylinder.\n// Examples:\n// >>> lateralsuface_cylinder(10,5)\n// >>> 314.15000000000003\n// >>> lateralsuface_cylinder(4,5)\n// >>> 125.66000000000001\n// >>> lateralsuface_cylinder(4,10)\n// >>> 251.32000000000002\nfunc lateralsuface_cylinder (r int, h int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := lateralsuface_cylinder(10,5)\n\texpected_1 := 314.15000000000003\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := lateralsuface_cylinder(4,5)\n\texpected_2 := 125.66000000000001\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := lateralsuface_cylinder(4,10)\n\texpected_3 := 251.32000000000002\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the lateral surface area of a cylinder.", "entry_point": "lateralsuface_cylinder", "canonical_solution": null}
{"task_id": "MBGP/234", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the volume of a cube.\n// Examples:\n// >>> volume_cube(3)\n// >>> 27\n// >>> volume_cube(2)\n// >>> 8\n// >>> volume_cube(5)\n// >>> 125\nfunc volume_cube (l int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := volume_cube(3)\n\texpected_1 := 27\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := volume_cube(2)\n\texpected_2 := 8\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := volume_cube(5)\n\texpected_3 := 125\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the volume of a cube.", "entry_point": "volume_cube", "canonical_solution": null}
{"task_id": "MBGP/235", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to set all even bits of a given number.\n// Examples:\n// >>> even_bit_set_number(10)\n// >>> 10\n// >>> even_bit_set_number(20)\n// >>> 30\n// >>> even_bit_set_number(30)\n// >>> 30\nfunc even_bit_set_number (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := even_bit_set_number(10)\n\texpected_1 := 10\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := even_bit_set_number(20)\n\texpected_2 := 30\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := even_bit_set_number(30)\n\texpected_3 := 30\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to set all even bits of a given number.", "entry_point": "even_bit_set_number", "canonical_solution": null}
{"task_id": "MBGP/236", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n// Examples:\n// >>> No_of_Triangle(4,2)\n// >>> 7\n// >>> No_of_Triangle(4,3)\n// >>> 3\n// >>> No_of_Triangle(1,3)\n// >>> -1\nfunc No_of_Triangle (N int, K int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := No_of_Triangle(4,2)\n\texpected_1 := 7\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := No_of_Triangle(4,3)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := No_of_Triangle(1,3)\n\texpected_3 := -1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.", "entry_point": "No_of_Triangle", "canonical_solution": null}
{"task_id": "MBGP/238", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count number of non-empty substrings of a given string.\n// Examples:\n// >>> number_of_substrings(\"abc\")\n// >>> 6\n// >>> number_of_substrings(\"abcd\")\n// >>> 10\n// >>> number_of_substrings(\"abcde\")\n// >>> 15\nfunc number_of_substrings (str string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := number_of_substrings(\"abc\")\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := number_of_substrings(\"abcd\")\n\texpected_2 := 10\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := number_of_substrings(\"abcde\")\n\texpected_3 := 15\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count number of non-empty substrings of a given string.", "entry_point": "number_of_substrings", "canonical_solution": null}
{"task_id": "MBGP/239", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n// Examples:\n// >>> get_total_number_of_sequences(10, 4)\n// >>> 4\n// >>> get_total_number_of_sequences(5, 2)\n// >>> 6\n// >>> get_total_number_of_sequences(16, 3)\n// >>> 84\nfunc get_total_number_of_sequences (m int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_total_number_of_sequences(10,4)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_total_number_of_sequences(5,2)\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_total_number_of_sequences(16,3)\n\texpected_3 := 84\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.", "entry_point": "get_total_number_of_sequences", "canonical_solution": null}
{"task_id": "MBGP/240", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to replace the last element of the list with another list.\n// Examples:\n// >>> replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])\n// >>> [1, 3, 5, 7, 9, 2, 4, 6, 8]\n// >>> replace_list([1,2,3,4,5],[5,6,7,8])\n// >>> [1,2,3,4,5,6,7,8]\n// >>> replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])\n// >>> [\"red\",\"blue\",\"yellow\"]\nfunc replace_list (list1 []interface{}, list2 []interface{}) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := replace_list([]interface{}{1, 3, 5, 7, 9, 10},[]interface{}{2, 4, 6, 8})\n\texpected_1 := []interface{}{1, 3, 5, 7, 9, 2, 4, 6, 8}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := replace_list([]interface{}{1, 2, 3, 4, 5},[]interface{}{5, 6, 7, 8})\n\texpected_2 := []interface{}{1, 2, 3, 4, 5, 6, 7, 8}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := replace_list([]interface{}{\"red\", \"blue\", \"green\"},[]interface{}{\"yellow\"})\n\texpected_3 := []interface{}{\"red\", \"blue\", \"yellow\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to replace the last element of the list with another list.", "entry_point": "replace_list", "canonical_solution": null}
{"task_id": "MBGP/241", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to generate a 3d array having each element as '*'.\n// Examples:\n// >>> array_3d(6,4,3)\n// >>> [[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n// >>> array_3d(5,3,4)\n// >>> [[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\n// >>> array_3d(1,2,3)\n// >>> [[['*'],['*']],[['*'],['*']],[['*'],['*']]]\nfunc array_3d (m int, n int, o int) [][][]string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := array_3d(6,4,3)\n\texpected_1 := [][][]string{[][]string{[]string{\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}, []string{\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}, []string{\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}, []string{\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}}, [][]string{[]string{\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}, []string{\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}, []string{\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}, []string{\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}}, [][]string{[]string{\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}, []string{\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}, []string{\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}, []string{\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := array_3d(5,3,4)\n\texpected_2 := [][][]string{[][]string{[]string{\"*\", \"*\", \"*\", \"*\", \"*\"}, []string{\"*\", \"*\", \"*\", \"*\", \"*\"}, []string{\"*\", \"*\", \"*\", \"*\", \"*\"}}, [][]string{[]string{\"*\", \"*\", \"*\", \"*\", \"*\"}, []string{\"*\", \"*\", \"*\", \"*\", \"*\"}, []string{\"*\", \"*\", \"*\", \"*\", \"*\"}}, [][]string{[]string{\"*\", \"*\", \"*\", \"*\", \"*\"}, []string{\"*\", \"*\", \"*\", \"*\", \"*\"}, []string{\"*\", \"*\", \"*\", \"*\", \"*\"}}, [][]string{[]string{\"*\", \"*\", \"*\", \"*\", \"*\"}, []string{\"*\", \"*\", \"*\", \"*\", \"*\"}, []string{\"*\", \"*\", \"*\", \"*\", \"*\"}}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := array_3d(1,2,3)\n\texpected_3 := [][][]string{[][]string{[]string{\"*\"}, []string{\"*\"}}, [][]string{[]string{\"*\"}, []string{\"*\"}}, [][]string{[]string{\"*\"}, []string{\"*\"}}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to generate a 3d array having each element as '*'.", "entry_point": "array_3d", "canonical_solution": null}
{"task_id": "MBGP/242", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count total characters in a string.\n// Examples:\n// >>> count_charac(\"python programming\")\n// >>> 18\n// >>> count_charac(\"language\")\n// >>> 8\n// >>> count_charac(\"words\")\n// >>> 5\nfunc count_charac (str1 string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_charac(\"python programming\")\n\texpected_1 := 18\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_charac(\"language\")\n\texpected_2 := 8\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_charac(\"words\")\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count total characters in a string.", "entry_point": "count_charac", "canonical_solution": null}
{"task_id": "MBGP/243", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort the given list based on the occurrence of first element of tuples.\n// Examples:\n// >>> sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')])\n// >>> [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n// >>> sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')])\n// >>> [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\n// >>> sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')])\n// >>> [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]\nfunc sort_on_occurence (lst []interface{}) [][]interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sort_on_occurence([]interface{}{[]interface{}{1, \"Jake\"}, []interface{}{2, \"Bob\"}, []interface{}{1, \"Cara\"}})\n\texpected_1 := [][]interface{}{[]interface{}{1, \"Jake\", \"Cara\", 2}, []interface{}{2, \"Bob\", 1}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sort_on_occurence([]interface{}{[]interface{}{\"b\", \"ball\"}, []interface{}{\"a\", \"arm\"}, []interface{}{\"b\", \"b\"}, []interface{}{\"a\", \"ant\"}})\n\texpected_2 := [][]interface{}{[]interface{}{\"b\", \"ball\", \"b\", 2}, []interface{}{\"a\", \"arm\", \"ant\", 2}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sort_on_occurence([]interface{}{[]interface{}{2, \"Mark\"}, []interface{}{3, \"Maze\"}, []interface{}{2, \"Sara\"}})\n\texpected_3 := [][]interface{}{[]interface{}{2, \"Mark\", \"Sara\", 2}, []interface{}{3, \"Maze\", 1}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort the given list based on the occurrence of first element of tuples.", "entry_point": "sort_on_occurence", "canonical_solution": null}
{"task_id": "MBGP/244", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the next perfect square greater than a given number.\n// Examples:\n// >>> next_Perfect_Square(35)\n// >>> 36\n// >>> next_Perfect_Square(6)\n// >>> 9\n// >>> next_Perfect_Square(9)\n// >>> 16\nfunc next_Perfect_Square (N int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := next_Perfect_Square(35)\n\texpected_1 := 36\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := next_Perfect_Square(6)\n\texpected_2 := 9\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := next_Perfect_Square(9)\n\texpected_3 := 16\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the next perfect square greater than a given number.", "entry_point": "next_Perfect_Square", "canonical_solution": null}
{"task_id": "MBGP/245", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n// Examples:\n// >>> max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9)\n// >>> 194\n// >>> max_sum([80, 60, 30, 40, 20, 10], 6)\n// >>> 210\n// >>> max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8)\n// >>> 138\nfunc max_sum (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_sum([]int{1, 15, 51, 45, 33, 100, 12, 18, 9},9)\n\texpected_1 := 194\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_sum([]int{80, 60, 30, 40, 20, 10},6)\n\texpected_2 := 210\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_sum([]int{2, 3, 14, 16, 21, 23, 29, 30},8)\n\texpected_3 := 138\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.", "entry_point": "max_sum", "canonical_solution": null}
{"task_id": "MBGP/246", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function for computing square roots using the babylonian method.\n// Examples:\n// >>> babylonian_squareroot(10)\n// >>> 3.162277660168379\n// >>> babylonian_squareroot(2)\n// >>> 1.414213562373095\n// >>> babylonian_squareroot(9)\n// >>> 3.0\nfunc babylonian_squareroot (number int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := babylonian_squareroot(10)\n\texpected_1 := 3.162277660168379\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := babylonian_squareroot(2)\n\texpected_2 := 1.414213562373095\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := babylonian_squareroot(9)\n\texpected_3 := 3.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function for computing square roots using the babylonian method.", "entry_point": "babylonian_squareroot", "canonical_solution": null}
{"task_id": "MBGP/247", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the longest palindromic subsequence in the given string.\n// Examples:\n// >>> lps(\"TENS FOR TENS\")\n// >>> 5\n// >>> lps(\"CARDIO FOR CARDS\")\n// >>> 7\n// >>> lps(\"PART OF THE JOURNEY IS PART\")\n// >>> 9\nfunc lps (str string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := lps(\"TENS FOR TENS\")\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := lps(\"CARDIO FOR CARDS\")\n\texpected_2 := 7\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := lps(\"PART OF THE JOURNEY IS PART\")\n\texpected_3 := 9\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the longest palindromic subsequence in the given string.", "entry_point": "lps", "canonical_solution": null}
{"task_id": "MBGP/248", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate the harmonic sum of n-1.\n// Examples:\n// >>> harmonic_sum(7)\n// >>> 2.5928571428571425\n// >>> harmonic_sum(4)\n// >>> 2.083333333333333\n// >>> harmonic_sum(19)\n// >>> 3.547739657143682\nfunc harmonic_sum (n int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := harmonic_sum(7)\n\texpected_1 := 2.5928571428571425\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := harmonic_sum(4)\n\texpected_2 := 2.083333333333333\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := harmonic_sum(19)\n\texpected_3 := 3.547739657143682\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate the harmonic sum of n-1.", "entry_point": "harmonic_sum", "canonical_solution": null}
{"task_id": "MBGP/249", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the intersection of two arrays using lambda function.\n// Examples:\n// >>> intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])\n// >>> [1, 2, 8, 9]\n// >>> intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])\n// >>> [3,5,7,9]\n// >>> intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])\n// >>> [10]\nfunc intersection_array (array_nums1 []int, array_nums2 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := intersection_array([]int{1, 2, 3, 5, 7, 8, 9, 10},[]int{1, 2, 4, 8, 9})\n\texpected_1 := []int{1, 2, 8, 9}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := intersection_array([]int{1, 2, 3, 5, 7, 8, 9, 10},[]int{3, 5, 7, 9})\n\texpected_2 := []int{3, 5, 7, 9}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := intersection_array([]int{1, 2, 3, 5, 7, 8, 9, 10},[]int{10, 20, 30, 40})\n\texpected_3 := []int{10}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the intersection of two arrays using lambda function.", "entry_point": "intersection_array", "canonical_solution": null}
{"task_id": "MBGP/250", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the occcurences of an element in a tuple.\n// Examples:\n// >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4)\n// >>> 0\n// >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10)\n// >>> 3\n// >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8)\n// >>> 4\nfunc count_X (tup []int, x int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_X([]int{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2},4)\n\texpected_1 := 0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_X([]int{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2},10)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_X([]int{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2},8)\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the occcurences of an element in a tuple.", "entry_point": "count_X", "canonical_solution": null}
{"task_id": "MBGP/251", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to insert an element before each element of a list.\n// Examples:\n// >>> insert_element(['Red', 'Green', 'Black'] ,'c')\n// >>> ['c', 'Red', 'c', 'Green', 'c', 'Black']\n// >>> insert_element(['python', 'java'] ,'program')\n// >>> ['program', 'python', 'program', 'java']\n// >>> insert_element(['happy', 'sad'] ,'laugh')\n// >>> ['laugh', 'happy', 'laugh', 'sad']\nfunc insert_element (list []string, element string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := insert_element([]string{\"Red\", \"Green\", \"Black\"},\"c\")\n\texpected_1 := []string{\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := insert_element([]string{\"python\", \"java\"},\"program\")\n\texpected_2 := []string{\"program\", \"python\", \"program\", \"java\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := insert_element([]string{\"happy\", \"sad\"},\"laugh\")\n\texpected_3 := []string{\"laugh\", \"happy\", \"laugh\", \"sad\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to insert an element before each element of a list.", "entry_point": "insert_element", "canonical_solution": null}
{"task_id": "MBGP/252", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to convert complex numbers to polar coordinates.\n// Examples:\n// >>> convert(1)\n// >>> (1.0, 0.0)\n// >>> convert(4)\n// >>> (4.0,0.0)\n// >>> convert(5)\n// >>> (5.0,0.0)\nfunc convert (numbers int) []float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := convert(1)\n\texpected_1 := []float64{1.0, 0.0}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := convert(4)\n\texpected_2 := []float64{4.0, 0.0}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := convert(5)\n\texpected_3 := []float64{5.0, 0.0}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to convert complex numbers to polar coordinates.", "entry_point": "convert", "canonical_solution": null}
{"task_id": "MBGP/253", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count integers from a given list.\n// Examples:\n// >>> count_integer([1,2,'abc',1.2])\n// >>> 2\n// >>> count_integer([1,2,3])\n// >>> 3\n// >>> count_integer([1,1.2,4,5.1])\n// >>> 2\nfunc count_integer (list1 []interface{}) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_integer([]interface{}{1, 2, \"abc\", 1.2})\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_integer([]interface{}{1, 2, 3})\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_integer([]interface{}{1, 1.2, 4, 5.1})\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count integers from a given list.", "entry_point": "count_integer", "canonical_solution": null}
{"task_id": "MBGP/254", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find all words starting with 'a' or 'e' in a given string.\n// Examples:\n// >>> words_ae(\"python programe\")\n// >>> ['ame']\n// >>> words_ae(\"python programe language\")\n// >>> ['ame','anguage']\n// >>> words_ae(\"assert statement\")\n// >>> ['assert', 'atement']\nfunc words_ae (text string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := words_ae(\"python programe\")\n\texpected_1 := []string{\"ame\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := words_ae(\"python programe language\")\n\texpected_2 := []string{\"ame\", \"anguage\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := words_ae(\"assert statement\")\n\texpected_3 := []string{\"assert\", \"atement\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find all words starting with 'a' or 'e' in a given string.", "entry_point": "words_ae", "canonical_solution": null}
{"task_id": "MBGP/255", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n// Examples:\n// >>> combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)\n// >>> [('Red',), ('Green',), ('Blue',)]\n// >>> combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)\n// >>> [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\n// >>> combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)\n// >>> [('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\nfunc combinations_colors (l []string, n int) [][]string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := combinations_colors([]string{\"Red\", \"Green\", \"Blue\"},1)\n\texpected_1 := [][]string{[]string{\"Red\"}, []string{\"Green\"}, []string{\"Blue\"}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := combinations_colors([]string{\"Red\", \"Green\", \"Blue\"},2)\n\texpected_2 := [][]string{[]string{\"Red\", \"Red\"}, []string{\"Red\", \"Green\"}, []string{\"Red\", \"Blue\"}, []string{\"Green\", \"Green\"}, []string{\"Green\", \"Blue\"}, []string{\"Blue\", \"Blue\"}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := combinations_colors([]string{\"Red\", \"Green\", \"Blue\"},3)\n\texpected_3 := [][]string{[]string{\"Red\", \"Red\", \"Red\"}, []string{\"Red\", \"Red\", \"Green\"}, []string{\"Red\", \"Red\", \"Blue\"}, []string{\"Red\", \"Green\", \"Green\"}, []string{\"Red\", \"Green\", \"Blue\"}, []string{\"Red\", \"Blue\", \"Blue\"}, []string{\"Green\", \"Green\", \"Green\"}, []string{\"Green\", \"Green\", \"Blue\"}, []string{\"Green\", \"Blue\", \"Blue\"}, []string{\"Blue\", \"Blue\", \"Blue\"}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.", "entry_point": "combinations_colors", "canonical_solution": null}
{"task_id": "MBGP/256", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the number of prime numbers less than a given non-negative number.\n// Examples:\n// >>> count_Primes_nums(5)\n// >>> 2\n// >>> count_Primes_nums(10)\n// >>> 4\n// >>> count_Primes_nums(100)\n// >>> 25\nfunc count_Primes_nums (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Primes_nums(5)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Primes_nums(10)\n\texpected_2 := 4\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Primes_nums(100)\n\texpected_3 := 25\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the number of prime numbers less than a given non-negative number.", "entry_point": "count_Primes_nums", "canonical_solution": null}
{"task_id": "MBGP/257", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to swap two numbers.\n// Examples:\n// >>> swap_numbers(10,20)\n// >>> (20,10)\n// >>> swap_numbers(15,17)\n// >>> (17,15)\n// >>> swap_numbers(100,200)\n// >>> (200,100)\nfunc swap_numbers (a int, b int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := swap_numbers(10,20)\n\texpected_1 := []int{20, 10}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := swap_numbers(15,17)\n\texpected_2 := []int{17, 15}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := swap_numbers(100,200)\n\texpected_3 := []int{200, 100}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to swap two numbers.", "entry_point": "swap_numbers", "canonical_solution": null}
{"task_id": "MBGP/258", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find number of odd elements in the given list using lambda function.\n// Examples:\n// >>> count_odd([1, 2, 3, 5, 7, 8, 10])\n// >>> 4\n// >>> count_odd([10,15,14,13,-18,12,-20])\n// >>> 2\n// >>> count_odd([1, 2, 4, 8, 9])\n// >>> 2\nfunc count_odd (array_nums []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_odd([]int{1, 2, 3, 5, 7, 8, 10})\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_odd([]int{10, 15, 14, 13, -18, 12, -20})\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_odd([]int{1, 2, 4, 8, 9})\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find number of odd elements in the given list using lambda function.", "entry_point": "count_odd", "canonical_solution": null}
{"task_id": "MBGP/259", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to maximize the given two tuples.\n// Examples:\n// >>> maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n// >>> ((6, 7), (4, 9), (2, 9), (7, 10))\n// >>> maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))\n// >>> ((7, 8), (5, 10), (3, 10), (8, 11))\n// >>> maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))\n// >>> ((8, 9), (6, 11), (4, 11), (9, 12))\nfunc maximize_elements (test_tup1 [][]int, test_tup2 [][]int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := maximize_elements([][]int{[]int{1, 3}, []int{4, 5}, []int{2, 9}, []int{1, 10}},[][]int{[]int{6, 7}, []int{3, 9}, []int{1, 1}, []int{7, 3}})\n\texpected_1 := [][]int{[]int{6, 7}, []int{4, 9}, []int{2, 9}, []int{7, 10}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := maximize_elements([][]int{[]int{2, 4}, []int{5, 6}, []int{3, 10}, []int{2, 11}},[][]int{[]int{7, 8}, []int{4, 10}, []int{2, 2}, []int{8, 4}})\n\texpected_2 := [][]int{[]int{7, 8}, []int{5, 10}, []int{3, 10}, []int{8, 11}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := maximize_elements([][]int{[]int{3, 5}, []int{6, 7}, []int{4, 11}, []int{3, 12}},[][]int{[]int{8, 9}, []int{5, 11}, []int{3, 3}, []int{9, 5}})\n\texpected_3 := [][]int{[]int{8, 9}, []int{6, 11}, []int{4, 11}, []int{9, 12}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to maximize the given two tuples.", "entry_point": "maximize_elements", "canonical_solution": null}
{"task_id": "MBGP/260", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n// Examples:\n// >>> newman_prime(3)\n// >>> 7\n// >>> newman_prime(4)\n// >>> 17\n// >>> newman_prime(5)\n// >>> 41\nfunc newman_prime (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := newman_prime(3)\n\texpected_1 := 7\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := newman_prime(4)\n\texpected_2 := 17\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := newman_prime(5)\n\texpected_3 := 41\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.", "entry_point": "newman_prime", "canonical_solution": null}
{"task_id": "MBGP/261", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to perform mathematical division operation across the given tuples.\n// Examples:\n// >>> division_elements((10, 4, 6, 9),(5, 2, 3, 3))\n// >>> (2, 2, 2, 3)\n// >>> division_elements((12, 6, 8, 16),(6, 3, 4, 4))\n// >>> (2, 2, 2, 4)\n// >>> division_elements((20, 14, 36, 18),(5, 7, 6, 9))\n// >>> (4, 2, 6, 2)\nfunc division_elements (test_tup1 []int, test_tup2 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := division_elements([]int{10, 4, 6, 9},[]int{5, 2, 3, 3})\n\texpected_1 := []int{2, 2, 2, 3}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := division_elements([]int{12, 6, 8, 16},[]int{6, 3, 4, 4})\n\texpected_2 := []int{2, 2, 2, 4}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := division_elements([]int{20, 14, 36, 18},[]int{5, 7, 6, 9})\n\texpected_3 := []int{4, 2, 6, 2}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to perform mathematical division operation across the given tuples.", "entry_point": "division_elements", "canonical_solution": null}
{"task_id": "MBGP/262", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to split a given list into two parts where the length of the first part of the list is given.\n// Examples:\n// >>> split_two_parts([1,1,2,3,4,4,5,1],3)\n// >>> ([1, 1, 2], [3, 4, 4, 5, 1])\n// >>> split_two_parts(['a', 'b', 'c', 'd'],2)\n// >>> (['a', 'b'], ['c', 'd'])\n// >>> split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)\n// >>> (['p', 'y', 't', 'h'], ['o', 'n'])\nfunc split_two_parts (list1 []interface{}, L int) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := split_two_parts([]interface{}{1, 1, 2, 3, 4, 4, 5, 1},3)\n\texpected_1 := []interface{}{[]interface{}{1, 1, 2}, []interface{}{3, 4, 4, 5, 1}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := split_two_parts([]interface{}{\"a\", \"b\", \"c\", \"d\"},2)\n\texpected_2 := []interface{}{[]interface{}{\"a\", \"b\"}, []interface{}{\"c\", \"d\"}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := split_two_parts([]interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"},4)\n\texpected_3 := []interface{}{[]interface{}{\"p\", \"y\", \"t\", \"h\"}, []interface{}{\"o\", \"n\"}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to split a given list into two parts where the length of the first part of the list is given.", "entry_point": "split_two_parts", "canonical_solution": null}
{"task_id": "MBGP/263", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to merge two dictionaries.\n// Examples:\n// >>> merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})\n// >>> {'x': 300, 'y': 200, 'a': 100, 'b': 200}\n// >>> merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})\n// >>> {'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\n// >>> merge_dict({'a':10,'b':20},{'x':30,'y':40})\n// >>> {'x':30,'y':40,'a':10,'b':20}\nfunc merge_dict (d1 map[string]int, d2 map[string]int) map[string]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := merge_dict(map[string]int{ \"a\": 100, \"b\": 200,  },map[string]int{ \"x\": 300, \"y\": 200,  })\n\texpected_1 := map[string]int{ \"a\": 100, \"b\": 200, \"x\": 300, \"y\": 200,  }\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := merge_dict(map[string]int{ \"a\": 900, \"b\": 900, \"d\": 900,  },map[string]int{ \"a\": 900, \"b\": 900, \"d\": 900,  })\n\texpected_2 := map[string]int{ \"a\": 900, \"b\": 900, \"d\": 900,  }\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := merge_dict(map[string]int{ \"a\": 10, \"b\": 20,  },map[string]int{ \"x\": 30, \"y\": 40,  })\n\texpected_3 := map[string]int{ \"a\": 10, \"b\": 20, \"x\": 30, \"y\": 40,  }\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to merge two dictionaries.", "entry_point": "merge_dict", "canonical_solution": null}
{"task_id": "MBGP/264", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate a dog's age in dog's years.\n// Examples:\n// >>> dog_age(12)\n// >>> 61\n// >>> dog_age(15)\n// >>> 73\n// >>> dog_age(24)\n// >>> 109\nfunc dog_age (h_age int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := dog_age(12)\n\texpected_1 := 61\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := dog_age(15)\n\texpected_2 := 73\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := dog_age(24)\n\texpected_3 := 109\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate a dog's age in dog's years.", "entry_point": "dog_age", "canonical_solution": null}
{"task_id": "MBGP/265", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to split a list for every nth element.\n// Examples:\n// >>> list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)\n// >>> [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n// >>> list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)\n// >>> [[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]\n// >>> list_split(['python','java','C','C++','DBMS','SQL'],2)\n// >>> [['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\nfunc list_split (S []interface{}, step int) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := list_split([]interface{}{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"},3)\n\texpected_1 := []interface{}{[]interface{}{\"a\", \"d\", \"g\", \"j\", \"m\"}, []interface{}{\"b\", \"e\", \"h\", \"k\", \"n\"}, []interface{}{\"c\", \"f\", \"i\", \"l\"}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := list_split([]interface{}{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14},3)\n\texpected_2 := []interface{}{[]interface{}{1, 4, 7, 10, 13}, []interface{}{2, 5, 8, 11, 14}, []interface{}{3, 6, 9, 12}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := list_split([]interface{}{\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"},2)\n\texpected_3 := []interface{}{[]interface{}{\"python\", \"C\", \"DBMS\"}, []interface{}{\"java\", \"C++\", \"SQL\"}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to split a list for every nth element.", "entry_point": "list_split", "canonical_solution": null}
{"task_id": "MBGP/266", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the lateral surface area of a cube.\n// Examples:\n// >>> lateralsurface_cube(5)\n// >>> 100\n// >>> lateralsurface_cube(9)\n// >>> 324\n// >>> lateralsurface_cube(10)\n// >>> 400\nfunc lateralsurface_cube (l int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := lateralsurface_cube(5)\n\texpected_1 := 100\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := lateralsurface_cube(9)\n\texpected_2 := 324\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := lateralsurface_cube(10)\n\texpected_3 := 400\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the lateral surface area of a cube.", "entry_point": "lateralsurface_cube", "canonical_solution": null}
{"task_id": "MBGP/267", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of squares of first n odd natural numbers.\n// Examples:\n// >>> square_Sum(2)\n// >>> 10\n// >>> square_Sum(3)\n// >>> 35\n// >>> square_Sum(4)\n// >>> 84\nfunc square_Sum (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := square_Sum(2)\n\texpected_1 := 10\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := square_Sum(3)\n\texpected_2 := 35\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := square_Sum(4)\n\texpected_3 := 84\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of squares of first n odd natural numbers.", "entry_point": "square_Sum", "canonical_solution": null}
{"task_id": "MBGP/268", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the n'th star number.\n// Examples:\n// >>> find_star_num(3)\n// >>> 37\n// >>> find_star_num(4)\n// >>> 73\n// >>> find_star_num(5)\n// >>> 121\nfunc find_star_num (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_star_num(3)\n\texpected_1 := 37\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_star_num(4)\n\texpected_2 := 73\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_star_num(5)\n\texpected_3 := 121\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the n'th star number.", "entry_point": "find_star_num", "canonical_solution": null}
{"task_id": "MBGP/269", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the ascii value of a character.\n// Examples:\n// >>> ascii_value('A')\n// >>> 65\n// >>> ascii_value('R')\n// >>> 82\n// >>> ascii_value('S')\n// >>> 83\nfunc ascii_value (k string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := ascii_value(\"A\")\n\texpected_1 := 65\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := ascii_value(\"R\")\n\texpected_2 := 82\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := ascii_value(\"S\")\n\texpected_3 := 83\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the ascii value of a character.", "entry_point": "ascii_value", "canonical_solution": null}
{"task_id": "MBGP/270", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of even numbers at even positions.\n// Examples:\n// >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8],6)\n// >>> 30\n// >>> sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10)\n// >>> 26\n// >>> sum_even_and_even_index([5, 6, 12, 1],4)\n// >>> 12\nfunc sum_even_and_even_index (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_even_and_even_index([]int{5, 6, 12, 1, 18, 8},6)\n\texpected_1 := 30\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_even_and_even_index([]int{3, 20, 17, 9, 2, 10, 18, 13, 6, 18},10)\n\texpected_2 := 26\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_even_and_even_index([]int{5, 6, 12, 1},4)\n\texpected_3 := 12\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of even numbers at even positions.", "entry_point": "sum_even_and_even_index", "canonical_solution": null}
{"task_id": "MBGP/271", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of fifth power of first n even natural numbers.\n// Examples:\n// >>> even_Power_Sum(2)\n// >>> 1056\n// >>> even_Power_Sum(3)\n// >>> 8832\n// >>> even_Power_Sum(1)\n// >>> 32\nfunc even_Power_Sum (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := even_Power_Sum(2)\n\texpected_1 := 1056\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := even_Power_Sum(3)\n\texpected_2 := 8832\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := even_Power_Sum(1)\n\texpected_3 := 32\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of fifth power of first n even natural numbers.", "entry_point": "even_Power_Sum", "canonical_solution": null}
{"task_id": "MBGP/272", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to perfom the rear element extraction from list of tuples records.\n// Examples:\n// >>> rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])\n// >>> [21, 20, 19]\n// >>> rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)])\n// >>> [36, 25, 45]\n// >>> rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)])\n// >>> [14, 36, 56]\nfunc rear_extract (test_list [][]interface{}) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := rear_extract([][]interface{}{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}})\n\texpected_1 := []int{21, 20, 19}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := rear_extract([][]interface{}{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}})\n\texpected_2 := []int{36, 25, 45}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := rear_extract([][]interface{}{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}})\n\texpected_3 := []int{14, 36, 56}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to perfom the rear element extraction from list of tuples records.", "entry_point": "rear_extract", "canonical_solution": null}
{"task_id": "MBGP/273", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to substract the contents of one tuple with corresponding index of other tuple.\n// Examples:\n// >>> substract_elements((10, 4, 5), (2, 5, 18))\n// >>> (8, -1, -13)\n// >>> substract_elements((11, 2, 3), (24, 45 ,16))\n// >>> (-13, -43, -13)\n// >>> substract_elements((7, 18, 9), (10, 11, 12))\n// >>> (-3, 7, -3)\nfunc substract_elements (test_tup1 []int, test_tup2 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := substract_elements([]int{10, 4, 5},[]int{2, 5, 18})\n\texpected_1 := []int{8, -1, -13}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := substract_elements([]int{11, 2, 3},[]int{24, 45, 16})\n\texpected_2 := []int{-13, -43, -13}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := substract_elements([]int{7, 18, 9},[]int{10, 11, 12})\n\texpected_3 := []int{-3, 7, -3}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to substract the contents of one tuple with corresponding index of other tuple.", "entry_point": "substract_elements", "canonical_solution": null}
{"task_id": "MBGP/274", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find sum of even index binomial coefficients.\n// Examples:\n// >>> even_binomial_Coeff_Sum(4)\n// >>> 8\n// >>> even_binomial_Coeff_Sum(6)\n// >>> 32\n// >>> even_binomial_Coeff_Sum(2)\n// >>> 2\nfunc even_binomial_Coeff_Sum (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := even_binomial_Coeff_Sum(4)\n\texpected_1 := 8\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := even_binomial_Coeff_Sum(6)\n\texpected_2 := 32\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := even_binomial_Coeff_Sum(2)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find sum of even index binomial coefficients.", "entry_point": "even_binomial_Coeff_Sum", "canonical_solution": null}
{"task_id": "MBGP/275", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the position of the last removed element from the given array.\n// Examples:\n// >>> get_Position([2,5,4],3,2)\n// >>> 2\n// >>> get_Position([4,3],2,2)\n// >>> 2\n// >>> get_Position([1,2,3,4],4,1)\n// >>> 4\nfunc get_Position (a []int, n int, m int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_Position([]int{2, 5, 4},3,2)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_Position([]int{4, 3},2,2)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_Position([]int{1, 2, 3, 4},4,1)\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the position of the last removed element from the given array.", "entry_point": "get_Position", "canonical_solution": null}
{"task_id": "MBGP/276", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the volume of a cylinder.\n// Examples:\n// >>> volume_cylinder(10,5)\n// >>> 1570.7500000000002\n// >>> volume_cylinder(4,5)\n// >>> 251.32000000000002\n// >>> volume_cylinder(4,10)\n// >>> 502.64000000000004\nfunc volume_cylinder (r int, h int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := volume_cylinder(10,5)\n\texpected_1 := 1570.7500000000002\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := volume_cylinder(4,5)\n\texpected_2 := 251.32000000000002\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := volume_cylinder(4,10)\n\texpected_3 := 502.64000000000004\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the volume of a cylinder.", "entry_point": "volume_cylinder", "canonical_solution": null}
{"task_id": "MBGP/277", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to filter a dictionary based on values.\n// Examples:\n// >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)\n// >>> {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n// >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)\n// >>> { 'Alden Cantrell': 180, 'Pierre Cox': 190}\n// >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)\n// >>> { 'Pierre Cox': 190}\nfunc dict_filter (dict map[string]int, n int) map[string]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := dict_filter(map[string]int{ \"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Kierra Gentry\": 165, \"Pierre Cox\": 190,  },170)\n\texpected_1 := map[string]int{ \"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Pierre Cox\": 190,  }\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := dict_filter(map[string]int{ \"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Kierra Gentry\": 165, \"Pierre Cox\": 190,  },180)\n\texpected_2 := map[string]int{ \"Alden Cantrell\": 180, \"Pierre Cox\": 190,  }\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := dict_filter(map[string]int{ \"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Kierra Gentry\": 165, \"Pierre Cox\": 190,  },190)\n\texpected_3 := map[string]int{ \"Pierre Cox\": 190,  }\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to filter a dictionary based on values.", "entry_point": "dict_filter", "canonical_solution": null}
{"task_id": "MBGP/278", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the element count that occurs before the record in the given tuple.\n// Examples:\n// >>> count_first_elements((1, 5, 7, (4, 6), 10) )\n// >>> 3\n// >>> count_first_elements((2, 9, (5, 7), 11) )\n// >>> 2\n// >>> count_first_elements((11, 15, 5, 8, (2, 3), 8) )\n// >>> 4\nfunc count_first_elements (test_tup []interface{}) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_first_elements([]interface{}{1, 5, 7, []interface{}{4, 6}, 10})\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_first_elements([]interface{}{2, 9, []interface{}{5, 7}, 11})\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_first_elements([]interface{}{11, 15, 5, 8, []interface{}{2, 3}, 8})\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the element count that occurs before the record in the given tuple.", "entry_point": "count_first_elements", "canonical_solution": null}
{"task_id": "MBGP/279", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the nth decagonal number.\n// Examples:\n// >>> is_num_decagonal(3)\n// >>> 27\n// >>> is_num_decagonal(7)\n// >>> 175\n// >>> is_num_decagonal(10)\n// >>> 370\nfunc is_num_decagonal (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_num_decagonal(3)\n\texpected_1 := 27\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_num_decagonal(7)\n\texpected_2 := 175\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_num_decagonal(10)\n\texpected_3 := 370\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the nth decagonal number.", "entry_point": "is_num_decagonal", "canonical_solution": null}
{"task_id": "MBGP/280", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to search an element in the given array by using sequential search.\n// Examples:\n// >>> sequential_search([11,23,58,31,56,77,43,12,65,19],31)\n// >>> (True, 3)\n// >>> sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61)\n// >>> (True, 7)\n// >>> sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48)\n// >>> (True, 6)\nfunc sequential_search (dlist []int, item int) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sequential_search([]int{11, 23, 58, 31, 56, 77, 43, 12, 65, 19},31)\n\texpected_1 := []interface{}{true, 3}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sequential_search([]int{12, 32, 45, 62, 35, 47, 44, 61},61)\n\texpected_2 := []interface{}{true, 7}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sequential_search([]int{9, 10, 17, 19, 22, 39, 48, 56},48)\n\texpected_3 := []interface{}{true, 6}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to search an element in the given array by using sequential search.", "entry_point": "sequential_search", "canonical_solution": null}
{"task_id": "MBGP/281", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check if the elements of a given list are unique or not.\n// Examples:\n// >>> all_unique([1,2,3])\n// >>> True\n// >>> all_unique([1,2,1,2])\n// >>> False\n// >>> all_unique([1,2,3,4,5])\n// >>> True\nfunc all_unique (test_list []int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := all_unique([]int{1, 2, 3})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := all_unique([]int{1, 2, 1, 2})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := all_unique([]int{1, 2, 3, 4, 5})\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check if the elements of a given list are unique or not.", "entry_point": "all_unique", "canonical_solution": null}
{"task_id": "MBGP/282", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to substaract two lists using map and lambda function.\n// Examples:\n// >>> sub_list([1, 2, 3],[4,5,6])\n// >>> [-3,-3,-3]\n// >>> sub_list([1,2],[3,4])\n// >>> [-2,-2]\n// >>> sub_list([90,120],[50,70])\n// >>> [40,50]\nfunc sub_list (nums1 []int, nums2 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sub_list([]int{1, 2, 3},[]int{4, 5, 6})\n\texpected_1 := []int{-3, -3, -3}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sub_list([]int{1, 2},[]int{3, 4})\n\texpected_2 := []int{-2, -2}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sub_list([]int{90, 120},[]int{50, 70})\n\texpected_3 := []int{40, 50}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to substaract two lists using map and lambda function.", "entry_point": "sub_list", "canonical_solution": null}
{"task_id": "MBGP/283", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the frequency of each digit is less than or equal to the digit itself.\n// Examples:\n// >>> validate(1234)\n// >>> True\n// >>> validate(51241)\n// >>> False\n// >>> validate(321)\n// >>> True\nfunc validate (n int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := validate(1234)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := validate(51241)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := validate(321)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the frequency of each digit is less than or equal to the digit itself.", "entry_point": "validate", "canonical_solution": null}
{"task_id": "MBGP/284", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check whether all items of a list are equal to a given string.\n// Examples:\n// >>> check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')\n// >>> False\n// >>> check_element([1,2,3,4],7)\n// >>> False\n// >>> check_element([\"green\", \"green\", \"green\", \"green\"],'green')\n// >>> True\nfunc check_element (list []interface{}, element interface{}) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_element([]interface{}{\"green\", \"orange\", \"black\", \"white\"},\"blue\")\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_element([]interface{}{1, 2, 3, 4},7)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_element([]interface{}{\"green\", \"green\", \"green\", \"green\"},\"green\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check whether all items of a list are equal to a given string.", "entry_point": "check_element", "canonical_solution": null}
{"task_id": "MBGP/285", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function that matches a string that has an a followed by two to three 'b'.\n// Examples:\n// >>> text_match_two_three(\"ac\")\n// >>> ('Not matched!')\n// >>> text_match_two_three(\"dc\")\n// >>> ('Not matched!')\n// >>> text_match_two_three(\"abbbba\")\n// >>> ('Found a match!')\nfunc text_match_two_three (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := text_match_two_three(\"ac\")\n\texpected_1 := \"Not matched!\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := text_match_two_three(\"dc\")\n\texpected_2 := \"Not matched!\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := text_match_two_three(\"abbbba\")\n\texpected_3 := \"Found a match!\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function that matches a string that has an a followed by two to three 'b'.", "entry_point": "text_match_two_three", "canonical_solution": null}
{"task_id": "MBGP/286", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n// Examples:\n// >>> max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)\n// >>> 30\n// >>> max_sub_array_sum_repeated([-1, 10, 20], 3, 2)\n// >>> 59\n// >>> max_sub_array_sum_repeated([-1, -2, -3], 3, 3)\n// >>> -1\nfunc max_sub_array_sum_repeated (a []int, n int, k int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_sub_array_sum_repeated([]int{10, 20, -30, -1},4,3)\n\texpected_1 := 30\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_sub_array_sum_repeated([]int{-1, 10, 20},3,2)\n\texpected_2 := 59\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_sub_array_sum_repeated([]int{-1, -2, -3},3,3)\n\texpected_3 := -1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.", "entry_point": "max_sub_array_sum_repeated", "canonical_solution": null}
{"task_id": "MBGP/287", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of squares of first n even natural numbers.\n// Examples:\n// >>> square_Sum(2)\n// >>> 20\n// >>> square_Sum(3)\n// >>> 56\n// >>> square_Sum(4)\n// >>> 120\nfunc square_Sum (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := square_Sum(2)\n\texpected_1 := 20\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := square_Sum(3)\n\texpected_2 := 56\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := square_Sum(4)\n\texpected_3 := 120\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of squares of first n even natural numbers.", "entry_point": "square_Sum", "canonical_solution": null}
{"task_id": "MBGP/288", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count array elements having modular inverse under given prime number p equal to itself.\n// Examples:\n// >>> modular_inverse([ 1, 6, 4, 5 ], 4, 7)\n// >>> 2\n// >>> modular_inverse([1, 3, 8, 12, 12], 5, 13)\n// >>> 3\n// >>> modular_inverse([2, 3, 4, 5], 4, 6)\n// >>> 1\nfunc modular_inverse (arr []int, N int, P int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := modular_inverse([]int{1, 6, 4, 5},4,7)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := modular_inverse([]int{1, 3, 8, 12, 12},5,13)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := modular_inverse([]int{2, 3, 4, 5},4,6)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count array elements having modular inverse under given prime number p equal to itself.", "entry_point": "modular_inverse", "canonical_solution": null}
{"task_id": "MBGP/289", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to calculate the number of odd days in a given year.\n// Examples:\n// >>> odd_Days(100)\n// >>> 5\n// >>> odd_Days(50)\n// >>> 6\n// >>> odd_Days(75)\n// >>> 2\nfunc odd_Days (N int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := odd_Days(100)\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := odd_Days(50)\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := odd_Days(75)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to calculate the number of odd days in a given year.", "entry_point": "odd_Days", "canonical_solution": null}
{"task_id": "MBGP/290", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the list of lists with maximum length.\n// Examples:\n// >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n// >>> (3, [13, 15, 17])\n// >>> max_length([[1], [5, 7], [10, 12, 14,15]])\n// >>> (4, [10, 12, 14,15])\n// >>> max_length([[5], [15,20,25]])\n// >>> (3, [15,20,25])\nfunc max_length (list1 [][]int) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_length([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}})\n\texpected_1 := []interface{}{3, []interface{}{13, 15, 17}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_length([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}})\n\texpected_2 := []interface{}{4, []interface{}{10, 12, 14, 15}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_length([][]int{[]int{5}, []int{15, 20, 25}})\n\texpected_3 := []interface{}{3, []interface{}{15, 20, 25}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the list of lists with maximum length.", "entry_point": "max_length", "canonical_solution": null}
{"task_id": "MBGP/291", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n// Examples:\n// >>> count_no_of_ways(2, 4)\n// >>> 16\n// >>> count_no_of_ways(3, 2)\n// >>> 6\n// >>> count_no_of_ways(4, 4)\n// >>> 228\nfunc count_no_of_ways (n int, k int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_no_of_ways(2,4)\n\texpected_1 := 16\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_no_of_ways(3,2)\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_no_of_ways(4,4)\n\texpected_3 := 228\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "entry_point": "count_no_of_ways", "canonical_solution": null}
{"task_id": "MBGP/292", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find quotient of two numbers.\n// Examples:\n// >>> find(10,3)\n// >>> 3\n// >>> find(4,2)\n// >>> 2\n// >>> find(20,5)\n// >>> 4\nfunc find (n int, m int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find(10,3)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find(4,2)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find(20,5)\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find quotient of two numbers.", "entry_point": "find", "canonical_solution": null}
{"task_id": "MBGP/293", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the third side of a right angled triangle.\n// Examples:\n// >>> otherside_rightangle(7,8)\n// >>> 10.63014581273465\n// >>> otherside_rightangle(3,4)\n// >>> 5\n// >>> otherside_rightangle(7,15)\n// >>> 16.55294535724685\nfunc otherside_rightangle (w int, h int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := otherside_rightangle(7,8)\n\texpected_1 := 10.63014581273465\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := otherside_rightangle(3,4)\n\texpected_2 := 5.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := otherside_rightangle(7,15)\n\texpected_3 := 16.55294535724685\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the third side of a right angled triangle.", "entry_point": "otherside_rightangle", "canonical_solution": null}
{"task_id": "MBGP/294", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the maximum value in a given heterogeneous list.\n// Examples:\n// >>> max_val(['Python', 3, 2, 4, 5, 'version'])\n// >>> 5\n// >>> max_val(['Python', 15, 20, 25])\n// >>> 25\n// >>> max_val(['Python', 30, 20, 40, 50, 'version'])\n// >>> 50\nfunc max_val (listval []interface{}) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_val([]interface{}{\"Python\", 3, 2, 4, 5, \"version\"})\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_val([]interface{}{\"Python\", 15, 20, 25})\n\texpected_2 := 25\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_val([]interface{}{\"Python\", 30, 20, 40, 50, \"version\"})\n\texpected_3 := 50\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the maximum value in a given heterogeneous list.", "entry_point": "max_val", "canonical_solution": null}
{"task_id": "MBGP/295", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to return the sum of all divisors of a number.\n// Examples:\n// >>> sum_div(8)\n// >>> 7\n// >>> sum_div(12)\n// >>> 16\n// >>> sum_div(7)\n// >>> 1\nfunc sum_div (number int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_div(8)\n\texpected_1 := 7\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_div(12)\n\texpected_2 := 16\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_div(7)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to return the sum of all divisors of a number.", "entry_point": "sum_div", "canonical_solution": null}
{"task_id": "MBGP/296", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count inversions in an array.\n// Examples:\n// >>> get_Inv_Count([1,20,6,4,5],5)\n// >>> 5\n// >>> get_Inv_Count([1,2,1],3)\n// >>> 1\n// >>> get_Inv_Count([1,2,5,6,1],5)\n// >>> 3\nfunc get_Inv_Count (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_Inv_Count([]int{1, 20, 6, 4, 5},5)\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_Inv_Count([]int{1, 2, 1},3)\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_Inv_Count([]int{1, 2, 5, 6, 1},5)\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count inversions in an array.", "entry_point": "get_Inv_Count", "canonical_solution": null}
{"task_id": "MBGP/297", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to flatten a given nested list structure.\n// Examples:\n// >>> flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n// >>> [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n// >>> flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\n// >>> [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n// >>> flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])\n// >>> [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\nfunc flatten_list (list1 []interface{}) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := flatten_list([]interface{}{0, 10, []interface{}{20, 30}, 40, 50, []interface{}{60, 70, 80}, []interface{}{90, 100, 110, 120}})\n\texpected_1 := []int{0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := flatten_list([]interface{}{[]interface{}{10, 20}, []interface{}{40}, []interface{}{30, 56, 25}, []interface{}{10, 20}, []interface{}{33}, []interface{}{40}})\n\texpected_2 := []int{10, 20, 40, 30, 56, 25, 10, 20, 33, 40}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := flatten_list([]interface{}{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6}, []interface{}{10, 11, 12}, []interface{}{7, 8, 9}})\n\texpected_3 := []int{1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to flatten a given nested list structure.", "entry_point": "flatten_list", "canonical_solution": null}
{"task_id": "MBGP/298", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the nested list elements which are present in another list.\n// Examples:\n// >>> intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])\n// >>> [[12], [7, 11], [1, 5, 8]]\n// >>> intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])\n// >>> [[], []]\n// >>> intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])\n// >>> [['john'], ['john'], ['john'], []]\nfunc intersection_nested_lists (l1 []interface{}, l2 []interface{}) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := intersection_nested_lists([]interface{}{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14},[]interface{}{[]interface{}{12, 18, 23, 25, 45}, []interface{}{7, 11, 19, 24, 28}, []interface{}{1, 5, 8, 18, 15, 16}})\n\texpected_1 := []interface{}{[]interface{}{12}, []interface{}{7, 11}, []interface{}{1, 5, 8}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := intersection_nested_lists([]interface{}{[]interface{}{2, 3, 1}, []interface{}{4, 5}, []interface{}{6, 8}},[]interface{}{[]interface{}{4, 5}, []interface{}{6, 8}})\n\texpected_2 := []interface{}{[]interface{}{}, []interface{}{}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := intersection_nested_lists([]interface{}{\"john\", \"amal\", \"joel\", \"george\"},[]interface{}{[]interface{}{\"john\"}, []interface{}{\"jack\", \"john\", \"mary\"}, []interface{}{\"howard\", \"john\"}, []interface{}{\"jude\"}})\n\texpected_3 := []interface{}{[]interface{}{\"john\"}, []interface{}{\"john\"}, []interface{}{\"john\"}, []interface{}{}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the nested list elements which are present in another list.", "entry_point": "intersection_nested_lists", "canonical_solution": null}
{"task_id": "MBGP/299", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate the maximum aggregate from the list of tuples.\n// Examples:\n// >>> max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])\n// >>> ('Juan Whelan', 212)\n// >>> max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])\n// >>> ('Juan Whelan', 72)\n// >>> max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])\n// >>> ('Sabah Colley', 70)\nfunc max_aggregate (stdata [][]interface{}) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_aggregate([][]interface{}{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}})\n\texpected_1 := []interface{}{\"Juan Whelan\", 212}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_aggregate([][]interface{}{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}})\n\texpected_2 := []interface{}{\"Juan Whelan\", 72}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_aggregate([][]interface{}{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}})\n\texpected_3 := []interface{}{\"Sabah Colley\", 70}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate the maximum aggregate from the list of tuples.", "entry_point": "max_aggregate", "canonical_solution": null}
{"task_id": "MBGP/300", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n// Examples:\n// >>> count_binary_seq(1)\n// >>> 2.0\n// >>> count_binary_seq(2)\n// >>> 6.0\n// >>> count_binary_seq(3)\n// >>> 20.0\nfunc count_binary_seq (n int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_binary_seq(1)\n\texpected_1 := 2.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_binary_seq(2)\n\texpected_2 := 6.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_binary_seq(3)\n\texpected_3 := 20.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "entry_point": "count_binary_seq", "canonical_solution": null}
{"task_id": "MBGP/302", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the most significant bit number which is also a set bit.\n// Examples:\n// >>> set_Bit_Number(6)\n// >>> 4\n// >>> set_Bit_Number(10)\n// >>> 8\n// >>> set_Bit_Number(18)\n// >>> 16\nfunc set_Bit_Number (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := set_Bit_Number(6)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := set_Bit_Number(10)\n\texpected_2 := 8\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := set_Bit_Number(18)\n\texpected_3 := 16\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the most significant bit number which is also a set bit.", "entry_point": "set_Bit_Number", "canonical_solution": null}
{"task_id": "MBGP/303", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the count of inversion of two types are same or not.\n// Examples:\n// >>> solve([1,0,2],3)\n// >>> True\n// >>> solve([1,2,0],3)\n// >>> False\n// >>> solve([1,2,1],3)\n// >>> True\nfunc solve (a []int, n int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := solve([]int{1, 0, 2},3)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := solve([]int{1, 2, 0},3)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := solve([]int{1, 2, 1},3)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the count of inversion of two types are same or not.", "entry_point": "solve", "canonical_solution": null}
{"task_id": "MBGP/304", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find element at a given index after number of rotations.\n// Examples:\n// >>> find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1)\n// >>> 3\n// >>> find_Element([1,2,3,4],[[0,1],[0,2]],1,2)\n// >>> 3\n// >>> find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1)\n// >>> 1\nfunc find_Element (arr []int, ranges [][]int, rotations int, index int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Element([]int{1, 2, 3, 4, 5},[][]int{[]int{0, 2}, []int{0, 3}},2,1)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Element([]int{1, 2, 3, 4},[][]int{[]int{0, 1}, []int{0, 2}},1,2)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Element([]int{1, 2, 3, 4, 5, 6},[][]int{[]int{0, 1}, []int{0, 2}},1,1)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find element at a given index after number of rotations.", "entry_point": "find_Element", "canonical_solution": null}
{"task_id": "MBGP/305", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to match two words from a list of words starting with letter 'p'.\n// Examples:\n// >>> start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n// >>> ('Python', 'PHP')\n// >>> start_withp([\"Python Programming\",\"Java Programming\"])\n// >>> ('Python','Programming')\n// >>> start_withp([\"Pqrst Pqr\",\"qrstuv\"])\n// >>> ('Pqrst','Pqr')\nfunc start_withp (words []string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := start_withp([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"})\n\texpected_1 := []string{\"Python\", \"PHP\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := start_withp([]string{\"Python Programming\", \"Java Programming\"})\n\texpected_2 := []string{\"Python\", \"Programming\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := start_withp([]string{\"Pqrst Pqr\", \"qrstuv\"})\n\texpected_3 := []string{\"Pqrst\", \"Pqr\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to match two words from a list of words starting with letter 'p'.", "entry_point": "start_withp", "canonical_solution": null}
{"task_id": "MBGP/306", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n// Examples:\n// >>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6)\n// >>> 11\n// >>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5)\n// >>> 7\n// >>> max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4)\n// >>> 71\nfunc max_sum_increasing_subseq (a []int, n int, index int, k int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_sum_increasing_subseq([]int{1, 101, 2, 3, 100, 4, 5},7,4,6)\n\texpected_1 := 11\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_sum_increasing_subseq([]int{1, 101, 2, 3, 100, 4, 5},7,2,5)\n\texpected_2 := 7\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_sum_increasing_subseq([]int{11, 15, 19, 21, 26, 28, 31},7,2,4)\n\texpected_3 := 71\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .", "entry_point": "max_sum_increasing_subseq", "canonical_solution": null}
{"task_id": "MBGP/307", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to get a colon of a tuple.\n// Examples:\n// >>> colon_tuplex((\"HELLO\", 5, [], True) ,2,50)\n// >>> (\"HELLO\", 5, [50], True)\n// >>> colon_tuplex((\"HELLO\", 5, [], True) ,2,100)\n// >>> ((\"HELLO\", 5, [100],True))\n// >>> colon_tuplex((\"HELLO\", 5, [], True) ,2,500)\n// >>> (\"HELLO\", 5, [500], True)\nfunc colon_tuplex (tuplex []interface{}, m int, n int) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := colon_tuplex([]interface{}{\"HELLO\", 5, []interface{}{}, true},2,50)\n\texpected_1 := []interface{}{\"HELLO\", 5, []interface{}{50}, true}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := colon_tuplex([]interface{}{\"HELLO\", 5, []interface{}{}, true},2,100)\n\texpected_2 := []interface{}{\"HELLO\", 5, []interface{}{100}, true}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := colon_tuplex([]interface{}{\"HELLO\", 5, []interface{}{}, true},2,500)\n\texpected_3 := []interface{}{\"HELLO\", 5, []interface{}{500}, true}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to get a colon of a tuple.", "entry_point": "colon_tuplex", "canonical_solution": null}
{"task_id": "MBGP/308", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the specified number of largest products from two given lists.\n// Examples:\n// >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\n// >>> [60, 54, 50]\n// >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)\n// >>> [60, 54, 50, 48]\n// >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)\n// >>> [60, 54, 50, 48, 45]\nfunc large_product (nums1 []int, nums2 []int, N int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := large_product([]int{1, 2, 3, 4, 5, 6},[]int{3, 6, 8, 9, 10, 6},3)\n\texpected_1 := []int{60, 54, 50}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := large_product([]int{1, 2, 3, 4, 5, 6},[]int{3, 6, 8, 9, 10, 6},4)\n\texpected_2 := []int{60, 54, 50, 48}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := large_product([]int{1, 2, 3, 4, 5, 6},[]int{3, 6, 8, 9, 10, 6},5)\n\texpected_3 := []int{60, 54, 50, 48, 45}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the specified number of largest products from two given lists.", "entry_point": "large_product", "canonical_solution": null}
{"task_id": "MBGP/309", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the maximum of two numbers.\n// Examples:\n// >>> maximum(5,10)\n// >>> 10\n// >>> maximum(-1,-2)\n// >>> -1\n// >>> maximum(9,7)\n// >>> 9\nfunc maximum (a int, b int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := maximum(5,10)\n\texpected_1 := 10\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := maximum(-1,-2)\n\texpected_2 := -1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := maximum(9,7)\n\texpected_3 := 9\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the maximum of two numbers.", "entry_point": "maximum", "canonical_solution": null}
{"task_id": "MBGP/310", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert a given string to a tuple.\n// Examples:\n// >>> string_to_tuple(\"python 3.0\")\n// >>> ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n// >>> string_to_tuple(\"item1\")\n// >>> ('i', 't', 'e', 'm', '1')\n// >>> string_to_tuple(\"15.10\")\n// >>> ('1', '5', '.', '1', '0')\nfunc string_to_tuple (str1 string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := string_to_tuple(\"python 3.0\")\n\texpected_1 := []string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := string_to_tuple(\"item1\")\n\texpected_2 := []string{\"i\", \"t\", \"e\", \"m\", \"1\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := string_to_tuple(\"15.10\")\n\texpected_3 := []string{\"1\", \"5\", \".\", \"1\", \"0\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert a given string to a tuple.", "entry_point": "string_to_tuple", "canonical_solution": null}
{"task_id": "MBGP/311", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to set the left most unset bit.\n// Examples:\n// >>> set_left_most_unset_bit(10)\n// >>> 14\n// >>> set_left_most_unset_bit(12)\n// >>> 14\n// >>> set_left_most_unset_bit(15)\n// >>> 15\nfunc set_left_most_unset_bit (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := set_left_most_unset_bit(10)\n\texpected_1 := 14\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := set_left_most_unset_bit(12)\n\texpected_2 := 14\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := set_left_most_unset_bit(15)\n\texpected_3 := 15\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to set the left most unset bit.", "entry_point": "set_left_most_unset_bit", "canonical_solution": null}
{"task_id": "MBGP/312", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the volume of a cone.\n// Examples:\n// >>> volume_cone(5,12)\n// >>> 314.15926535897927\n// >>> volume_cone(10,15)\n// >>> 1570.7963267948965\n// >>> volume_cone(19,17)\n// >>> 6426.651371693521\nfunc volume_cone (r int, h int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := volume_cone(5,12)\n\texpected_1 := 314.15926535897927\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := volume_cone(10,15)\n\texpected_2 := 1570.7963267948965\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := volume_cone(19,17)\n\texpected_3 := 6426.651371693521\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the volume of a cone.", "entry_point": "volume_cone", "canonical_solution": null}
{"task_id": "MBGP/313", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to print positive numbers in a list.\n// Examples:\n// >>> pos_nos([-1,-2,1,2])\n// >>> 1,2\n// >>> pos_nos([3,4,-5])\n// >>> 3,4\n// >>> pos_nos([-2,-3,1])\n// >>> 1\nfunc pos_nos (list1 []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := pos_nos([]int{-1, -2, 1, 2})\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := pos_nos([]int{3, 4, -5})\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := pos_nos([]int{-2, -3, 1})\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to print positive numbers in a list.", "entry_point": "pos_nos", "canonical_solution": null}
{"task_id": "MBGP/314", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n// Examples:\n// >>> max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3)\n// >>> 7\n// >>> max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5)\n// >>> 24\n// >>> max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5)\n// >>> 81\nfunc max_sum_rectangular_grid (grid [][]int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_sum_rectangular_grid([][]int{[]int{1, 4, 5}, []int{2, 0, 0}},3)\n\texpected_1 := 7\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_sum_rectangular_grid([][]int{[]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9, 10}},5)\n\texpected_2 := 24\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_sum_rectangular_grid([][]int{[]int{7, 9, 11, 15, 19}, []int{21, 25, 28, 31, 32}},5)\n\texpected_3 := 81\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.", "entry_point": "max_sum_rectangular_grid", "canonical_solution": null}
{"task_id": "MBGP/315", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the first maximum length of even word.\n// Examples:\n// >>> find_Max_Len_Even(\"python language\")\n// >>> \"language\"\n// >>> find_Max_Len_Even(\"maximum even length\")\n// >>> \"length\"\n// >>> find_Max_Len_Even(\"eve\")\n// >>> \"-1\"\nfunc find_Max_Len_Even (str string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Max_Len_Even(\"python language\")\n\texpected_1 := \"language\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Max_Len_Even(\"maximum even length\")\n\texpected_2 := \"length\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Max_Len_Even(\"eve\")\n\texpected_3 := \"-1\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the first maximum length of even word.", "entry_point": "find_Max_Len_Even", "canonical_solution": null}
{"task_id": "MBGP/316", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the index of the last occurrence of a given number in a sorted array.\n// Examples:\n// >>> find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n// >>> 3\n// >>> find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9)\n// >>> 9\n// >>> find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6)\n// >>> 6\nfunc find_last_occurrence (A []int, x int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_last_occurrence([]int{2, 5, 5, 5, 6, 6, 8, 9, 9, 9},5)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_last_occurrence([]int{2, 3, 5, 8, 6, 6, 8, 9, 9, 9},9)\n\texpected_2 := 9\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_last_occurrence([]int{2, 2, 1, 5, 6, 6, 6, 9, 9, 9},6)\n\texpected_3 := 6\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the index of the last occurrence of a given number in a sorted array.", "entry_point": "find_last_occurrence", "canonical_solution": null}
{"task_id": "MBGP/317", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to reflect the modified run-length encoding from a list.\n// Examples:\n// >>> modified_encode([1,1,2,3,4,4,5,1])\n// >>> [[2, 1], 2, 3, [2, 4], 5, 1]\n// >>> modified_encode('automatically')\n// >>> ['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\n// >>> modified_encode('python')\n// >>> ['p', 'y', 't', 'h', 'o', 'n']\nfunc modified_encode (alist interface{}) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := modified_encode([]interface{}{1, 1, 2, 3, 4, 4, 5, 1})\n\texpected_1 := []interface{}{[]interface{}{2, 1}, 2, 3, []interface{}{2, 4}, 5, 1}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := modified_encode(\"automatically\")\n\texpected_2 := []interface{}{\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", []interface{}{2, \"l\"}, \"y\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := modified_encode(\"python\")\n\texpected_3 := []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to reflect the modified run-length encoding from a list.", "entry_point": "modified_encode", "canonical_solution": null}
{"task_id": "MBGP/318", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the maximum volume of a cuboid with given sum of sides.\n// Examples:\n// >>> max_volume(8)\n// >>> 18\n// >>> max_volume(4)\n// >>> 2\n// >>> max_volume(1)\n// >>> 0\nfunc max_volume (s int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_volume(8)\n\texpected_1 := 18\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_volume(4)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_volume(1)\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the maximum volume of a cuboid with given sum of sides.", "entry_point": "max_volume", "canonical_solution": null}
{"task_id": "MBGP/319", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find all five characters long word in the given string by using regex.\n// Examples:\n// >>> find_long_word('Please move back to strem')\n// >>> ['strem']\n// >>> find_long_word('4K Ultra HD streaming player')\n// >>> ['Ultra']\n// >>> find_long_word('Streaming Media Player')\n// >>> ['Media']\nfunc find_long_word (text string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_long_word(\"Please move back to strem\")\n\texpected_1 := []string{\"strem\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_long_word(\"4K Ultra HD streaming player\")\n\texpected_2 := []string{\"Ultra\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_long_word(\"Streaming Media Player\")\n\texpected_3 := []string{\"Media\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find all five characters long word in the given string by using regex.", "entry_point": "find_long_word", "canonical_solution": null}
{"task_id": "MBGP/320", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n// Examples:\n// >>> sum_difference(12)\n// >>> 5434\n// >>> sum_difference(20)\n// >>> 41230\n// >>> sum_difference(54)\n// >>> 2151270\nfunc sum_difference (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_difference(12)\n\texpected_1 := 5434\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_difference(20)\n\texpected_2 := 41230\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_difference(54)\n\texpected_3 := 2151270\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.", "entry_point": "sum_difference", "canonical_solution": null}
{"task_id": "MBGP/321", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the demlo number for the given number.\n// Examples:\n// >>> find_demlo(\"111111\")\n// >>> '12345654321'\n// >>> find_demlo(\"1111\")\n// >>> '1234321'\n// >>> find_demlo(\"13333122222\")\n// >>> '123456789101110987654321'\nfunc find_demlo (s string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_demlo(\"111111\")\n\texpected_1 := \"12345654321\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_demlo(\"1111\")\n\texpected_2 := \"1234321\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_demlo(\"13333122222\")\n\texpected_3 := \"123456789101110987654321\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the demlo number for the given number.", "entry_point": "find_demlo", "canonical_solution": null}
{"task_id": "MBGP/322", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find all index positions of the minimum values in a given list.\n// Examples:\n// >>> position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])\n// >>> [3,11]\n// >>> position_min([1,2,2,2,4,4,4,5,5,5,5])\n// >>> [0]\n// >>> position_min([2,1,5,6,8,3,4,9,10,11,8,12])\n// >>> [1]\nfunc position_min (list1 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := position_min([]int{12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54})\n\texpected_1 := []int{3, 11}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := position_min([]int{1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5})\n\texpected_2 := []int{0}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := position_min([]int{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12})\n\texpected_3 := []int{1}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find all index positions of the minimum values in a given list.", "entry_point": "position_min", "canonical_solution": null}
{"task_id": "MBGP/323", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to re-arrange the given array in alternating positive and negative items.\n// Examples:\n// >>> re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10)\n// >>> [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n// >>> re_arrange([1, 2, 3, -4, -1, 4], 6)\n// >>> [-4, 1, -1, 2, 3, 4]\n// >>> re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8)\n// >>> [-4, 4, -3, 7, -9, 9, 77, 5]\nfunc re_arrange (arr []int, n int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := re_arrange([]int{-5, -2, 5, 2, 4, 7, 1, 8, 0, -8},10)\n\texpected_1 := []int{-5, 5, -2, 2, -8, 4, 7, 1, 8, 0}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := re_arrange([]int{1, 2, 3, -4, -1, 4},6)\n\texpected_2 := []int{-4, 1, -1, 2, 3, 4}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := re_arrange([]int{4, 7, 9, 77, -4, 5, -3, -9},8)\n\texpected_3 := []int{-4, 4, -3, 7, -9, 9, 77, 5}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to re-arrange the given array in alternating positive and negative items.", "entry_point": "re_arrange", "canonical_solution": null}
{"task_id": "MBGP/324", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to extract the sum of alternate chains of tuples.\n// Examples:\n// >>> sum_of_alternates((5, 6, 3, 6, 10, 34))\n// >>> (46, 18)\n// >>> sum_of_alternates((1, 2, 3, 4, 5))\n// >>> (6, 9)\n// >>> sum_of_alternates((6, 7, 8, 9, 4, 5))\n// >>> (21, 18)\nfunc sum_of_alternates (test_tuple []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_of_alternates([]int{5, 6, 3, 6, 10, 34})\n\texpected_1 := []int{46, 18}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_of_alternates([]int{1, 2, 3, 4, 5})\n\texpected_2 := []int{6, 9}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_of_alternates([]int{6, 7, 8, 9, 4, 5})\n\texpected_3 := []int{21, 18}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to extract the sum of alternate chains of tuples.", "entry_point": "sum_of_alternates", "canonical_solution": null}
{"task_id": "MBGP/325", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the minimum number of squares whose sum is equal to a given number.\n// Examples:\n// >>> get_Min_Squares(6)\n// >>> 3\n// >>> get_Min_Squares(2)\n// >>> 2\n// >>> get_Min_Squares(4)\n// >>> 1\nfunc get_Min_Squares (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_Min_Squares(6)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_Min_Squares(2)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_Min_Squares(4)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the minimum number of squares whose sum is equal to a given number.", "entry_point": "get_Min_Squares", "canonical_solution": null}
{"task_id": "MBGP/326", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to get the word with most number of occurrences in the given strings list.\n// Examples:\n// >>> most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] )\n// >>> 'UTS'\n// >>> most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] )\n// >>> 'year'\n// >>> most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] )\n// >>> 'can'\nfunc most_occurrences (test_list []string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := most_occurrences([]string{\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"})\n\texpected_1 := \"UTS\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := most_occurrences([]string{\"Its been a great year\", \"this year is so worse\", \"this year is okay\"})\n\texpected_2 := \"year\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := most_occurrences([]string{\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"})\n\texpected_3 := \"can\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to get the word with most number of occurrences in the given strings list.", "entry_point": "most_occurrences", "canonical_solution": null}
{"task_id": "MBGP/327", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to print check if the triangle is isosceles or not.\n// Examples:\n// >>> check_isosceles(6,8,12)\n// >>> False\n// >>> check_isosceles(6,6,12)\n// >>> True\n// >>> check_isosceles(6,16,20)\n// >>> False\nfunc check_isosceles (x int, y int, z int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_isosceles(6,8,12)\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_isosceles(6,6,12)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_isosceles(6,16,20)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to print check if the triangle is isosceles or not.", "entry_point": "check_isosceles", "canonical_solution": null}
{"task_id": "MBGP/328", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to rotate a given list by specified number of items to the left direction.\n// Examples:\n// >>> rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)\n// >>> [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n// >>> rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)\n// >>> [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n// >>> rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)\n// >>> [6, 7, 8, 9, 10, 1, 2]\nfunc rotate_left (list1 []int, m int, n int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := rotate_left([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},3,4)\n\texpected_1 := []int{4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := rotate_left([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},2,2)\n\texpected_2 := []int{3, 4, 5, 6, 7, 8, 9, 10, 1, 2}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := rotate_left([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},5,2)\n\texpected_3 := []int{6, 7, 8, 9, 10, 1, 2}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to rotate a given list by specified number of items to the left direction.", "entry_point": "rotate_left", "canonical_solution": null}
{"task_id": "MBGP/329", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count negative numbers in a list.\n// Examples:\n// >>> neg_count([-1,-2,3,-4,-5])\n// >>> 4\n// >>> neg_count([1,2,3])\n// >>> 0\n// >>> neg_count([1,2,-3,-10,20])\n// >>> 2\nfunc neg_count (list []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := neg_count([]int{-1, -2, 3, -4, -5})\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := neg_count([]int{1, 2, 3})\n\texpected_2 := 0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := neg_count([]int{1, 2, -3, -10, 20})\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count negative numbers in a list.", "entry_point": "neg_count", "canonical_solution": null}
{"task_id": "MBGP/330", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find all three, four, five characters long words in the given string by using regex.\n// Examples:\n// >>> find_char('For the four consumer complaints contact manager AKR reddy')\n// >>> ['For', 'the', 'four', 'AKR', 'reddy']\n// >>> find_char('Certain service are subject to change MSR')\n// >>> ['are', 'MSR']\n// >>> find_char('Third party legal desclaimers')\n// >>> ['Third', 'party', 'legal']\nfunc find_char (text string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_char(\"For the four consumer complaints contact manager AKR reddy\")\n\texpected_1 := []string{\"For\", \"the\", \"four\", \"AKR\", \"reddy\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_char(\"Certain service are subject to change MSR\")\n\texpected_2 := []string{\"are\", \"MSR\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_char(\"Third party legal desclaimers\")\n\texpected_3 := []string{\"Third\", \"party\", \"legal\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find all three, four, five characters long words in the given string by using regex.", "entry_point": "find_char", "canonical_solution": null}
{"task_id": "MBGP/331", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count unset bits of a given number.\n// Examples:\n// >>> count_unset_bits(2)\n// >>> 1\n// >>> count_unset_bits(4)\n// >>> 2\n// >>> count_unset_bits(6)\n// >>> 1\nfunc count_unset_bits (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_unset_bits(2)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_unset_bits(4)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_unset_bits(6)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count unset bits of a given number.", "entry_point": "count_unset_bits", "canonical_solution": null}
{"task_id": "MBGP/332", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count character frequency of a given string.\n// Examples:\n// >>> char_frequency('python')\n// >>> {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n// >>> char_frequency('program')\n// >>> {'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\n// >>> char_frequency('language')\n// >>> {'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}\nfunc char_frequency (str1 string) map[string]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := char_frequency(\"python\")\n\texpected_1 := map[string]int{ \"p\": 1, \"y\": 1, \"t\": 1, \"h\": 1, \"o\": 1, \"n\": 1,  }\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := char_frequency(\"program\")\n\texpected_2 := map[string]int{ \"p\": 1, \"r\": 2, \"o\": 1, \"g\": 1, \"a\": 1, \"m\": 1,  }\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := char_frequency(\"language\")\n\texpected_3 := map[string]int{ \"l\": 1, \"a\": 2, \"n\": 1, \"g\": 2, \"u\": 1, \"e\": 1,  }\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count character frequency of a given string.", "entry_point": "char_frequency", "canonical_solution": null}
{"task_id": "MBGP/333", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to sort a list according to the second element in sublist.\n// Examples:\n// >>> Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]])\n// >>> [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n// >>> Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]])\n// >>> [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\n// >>> Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]])\n// >>> [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]\nfunc Sort (sub_li [][]interface{}) [][]interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Sort([][]interface{}{[]interface{}{\"a\", 10}, []interface{}{\"b\", 5}, []interface{}{\"c\", 20}, []interface{}{\"d\", 15}})\n\texpected_1 := [][]interface{}{[]interface{}{\"b\", 5}, []interface{}{\"a\", 10}, []interface{}{\"d\", 15}, []interface{}{\"c\", 20}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Sort([][]interface{}{[]interface{}{\"452\", 10}, []interface{}{\"256\", 5}, []interface{}{\"100\", 20}, []interface{}{\"135\", 15}})\n\texpected_2 := [][]interface{}{[]interface{}{\"256\", 5}, []interface{}{\"452\", 10}, []interface{}{\"135\", 15}, []interface{}{\"100\", 20}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Sort([][]interface{}{[]interface{}{\"rishi\", 10}, []interface{}{\"akhil\", 5}, []interface{}{\"ramya\", 20}, []interface{}{\"gaur\", 15}})\n\texpected_3 := [][]interface{}{[]interface{}{\"akhil\", 5}, []interface{}{\"rishi\", 10}, []interface{}{\"gaur\", 15}, []interface{}{\"ramya\", 20}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to sort a list according to the second element in sublist.", "entry_point": "Sort", "canonical_solution": null}
{"task_id": "MBGP/334", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the triangle is valid or not if sides are given.\n// Examples:\n// >>> check_Validity(1,2,3)\n// >>> False\n// >>> check_Validity(2,3,5)\n// >>> False\n// >>> check_Validity(7,10,5)\n// >>> True\nfunc check_Validity (a int, b int, c int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_Validity(1,2,3)\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_Validity(2,3,5)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_Validity(7,10,5)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the triangle is valid or not if sides are given.", "entry_point": "check_Validity", "canonical_solution": null}
{"task_id": "MBGP/335", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the sum of arithmetic progression.\n// Examples:\n// >>> ap_sum(1,5,2)\n// >>> 25\n// >>> ap_sum(2,6,4)\n// >>> 72\n// >>> ap_sum(1,4,5)\n// >>> 34\nfunc ap_sum (a int, n int, d int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := ap_sum(1,5,2)\n\texpected_1 := 25.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := ap_sum(2,6,4)\n\texpected_2 := 72.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := ap_sum(1,4,5)\n\texpected_3 := 34.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the sum of arithmetic progression.", "entry_point": "ap_sum", "canonical_solution": null}
{"task_id": "MBGP/336", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check whether the given month name contains 28 days or not.\n// Examples:\n// >>> check_monthnum(\"February\")\n// >>> True\n// >>> check_monthnum(\"January\")\n// >>> False\n// >>> check_monthnum(\"March\")\n// >>> False\nfunc check_monthnum (monthname1 string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_monthnum(\"February\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_monthnum(\"January\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_monthnum(\"March\")\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check whether the given month name contains 28 days or not.", "entry_point": "check_monthnum", "canonical_solution": null}
{"task_id": "MBGP/337", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function that matches a word at the end of a string, with optional punctuation.\n// Examples:\n// >>> text_match_word(\"python.\")\n// >>> ('Found a match!')\n// >>> text_match_word(\"python.\")\n// >>> ('Found a match!')\n// >>> text_match_word(\"  lang  .\")\n// >>> ('Not matched!')\nfunc text_match_word (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := text_match_word(\"python.\")\n\texpected_1 := \"Found a match!\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := text_match_word(\"python.\")\n\texpected_2 := \"Found a match!\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := text_match_word(\"  lang  .\")\n\texpected_3 := \"Not matched!\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function that matches a word at the end of a string, with optional punctuation.", "entry_point": "text_match_word", "canonical_solution": null}
{"task_id": "MBGP/338", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the number of substrings with same first and last characters.\n// Examples:\n// >>> count_Substring_With_Equal_Ends('aba')\n// >>> 4\n// >>> count_Substring_With_Equal_Ends('abcab')\n// >>> 7\n// >>> count_Substring_With_Equal_Ends('abc')\n// >>> 3\nfunc count_Substring_With_Equal_Ends (s string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Substring_With_Equal_Ends(\"aba\")\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Substring_With_Equal_Ends(\"abcab\")\n\texpected_2 := 7\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Substring_With_Equal_Ends(\"abc\")\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the number of substrings with same first and last characters.", "entry_point": "count_Substring_With_Equal_Ends", "canonical_solution": null}
{"task_id": "MBGP/339", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the maximum occuring divisor in an interval.\n// Examples:\n// >>> find_Divisor(2,2)\n// >>> 2\n// >>> find_Divisor(2,5)\n// >>> 2\n// >>> find_Divisor(5,10)\n// >>> 2\nfunc find_Divisor (x int, y int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Divisor(2,2)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Divisor(2,5)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Divisor(5,10)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the maximum occuring divisor in an interval.", "entry_point": "find_Divisor", "canonical_solution": null}
{"task_id": "MBGP/340", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of the three lowest positive numbers from a given list of numbers.\n// Examples:\n// >>> sum_three_smallest_nums([10,20,30,40,50,60,7])\n// >>> 37\n// >>> sum_three_smallest_nums([1,2,3,4,5])\n// >>> 6\n// >>> sum_three_smallest_nums([0,1,2,3,4,5])\n// >>> 6\nfunc sum_three_smallest_nums (lst []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_three_smallest_nums([]int{10, 20, 30, 40, 50, 60, 7})\n\texpected_1 := 37\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_three_smallest_nums([]int{1, 2, 3, 4, 5})\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_three_smallest_nums([]int{0, 1, 2, 3, 4, 5})\n\texpected_3 := 6\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of the three lowest positive numbers from a given list of numbers.", "entry_point": "sum_three_smallest_nums", "canonical_solution": null}
{"task_id": "MBGP/343", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate the number of digits and letters in a string.\n// Examples:\n// >>> dig_let(\"python\")\n// >>> (6,0)\n// >>> dig_let(\"program\")\n// >>> (7,0)\n// >>> dig_let(\"python3.0\")\n// >>> (6,2)\nfunc dig_let (s string) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := dig_let(\"python\")\n\texpected_1 := []int{6, 0}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := dig_let(\"program\")\n\texpected_2 := []int{7, 0}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := dig_let(\"python3.0\")\n\texpected_3 := []int{6, 2}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate the number of digits and letters in a string.", "entry_point": "dig_let", "canonical_solution": null}
{"task_id": "MBGP/344", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find number of elements with odd factors in a given range.\n// Examples:\n// >>> count_Odd_Squares(5,100)\n// >>> 8\n// >>> count_Odd_Squares(8,65)\n// >>> 6\n// >>> count_Odd_Squares(2,5)\n// >>> 1\nfunc count_Odd_Squares (n int, m int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Odd_Squares(5,100)\n\texpected_1 := 8\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Odd_Squares(8,65)\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Odd_Squares(2,5)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find number of elements with odd factors in a given range.", "entry_point": "count_Odd_Squares", "canonical_solution": null}
{"task_id": "MBGP/345", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the difference between two consecutive numbers in a given list.\n// Examples:\n// >>> diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])\n// >>> [0, 2, 1, 0, 1, 1, 1]\n// >>> diff_consecutivenums([4, 5, 8, 9, 6, 10])\n// >>> [1, 3, 1, -3, 4]\n// >>> diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])\n// >>> [1, 1, 1, 1, 0, 0, 0, 1, 2]\nfunc diff_consecutivenums (nums []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := diff_consecutivenums([]int{1, 1, 3, 4, 4, 5, 6, 7})\n\texpected_1 := []int{0, 2, 1, 0, 1, 1, 1}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := diff_consecutivenums([]int{4, 5, 8, 9, 6, 10})\n\texpected_2 := []int{1, 3, 1, -3, 4}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := diff_consecutivenums([]int{0, 1, 2, 3, 4, 4, 4, 4, 5, 7})\n\texpected_3 := []int{1, 1, 1, 1, 0, 0, 0, 1, 2}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the difference between two consecutive numbers in a given list.", "entry_point": "diff_consecutivenums", "canonical_solution": null}
{"task_id": "MBGP/346", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find entringer number e(n, k).\n// Examples:\n// >>> zigzag(4, 3)\n// >>> 5\n// >>> zigzag(4, 2)\n// >>> 4\n// >>> zigzag(3, 1)\n// >>> 1\nfunc zigzag (n int, k int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := zigzag(4,3)\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := zigzag(4,2)\n\texpected_2 := 4\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := zigzag(3,1)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find entringer number e(n, k).", "entry_point": "zigzag", "canonical_solution": null}
{"task_id": "MBGP/347", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the number of squares in a rectangle.\n// Examples:\n// >>> count_Squares(4,3)\n// >>> 20\n// >>> count_Squares(1,2)\n// >>> 2\n// >>> count_Squares(2,2)\n// >>> 5\nfunc count_Squares (m int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Squares(4,3)\n\texpected_1 := 20\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Squares(1,2)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Squares(2,2)\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the number of squares in a rectangle.", "entry_point": "count_Squares", "canonical_solution": null}
{"task_id": "MBGP/348", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n// Examples:\n// >>> find_ways(4)\n// >>> 2\n// >>> find_ways(6)\n// >>> 5\n// >>> find_ways(8)\n// >>> 14\nfunc find_ways (M int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_ways(4)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_ways(6)\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_ways(8)\n\texpected_3 := 14\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.", "entry_point": "find_ways", "canonical_solution": null}
{"task_id": "MBGP/349", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the given string is a binary string or not.\n// Examples:\n// >>> check(\"01010101010\")\n// >>> \"Yes\"\n// >>> check(\"name0\")\n// >>> \"No\"\n// >>> check(\"101\")\n// >>> \"Yes\"\nfunc check (string0 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check(\"01010101010\")\n\texpected_1 := \"Yes\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check(\"name0\")\n\texpected_2 := \"No\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check(\"101\")\n\texpected_3 := \"Yes\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the given string is a binary string or not.", "entry_point": "check", "canonical_solution": null}
{"task_id": "MBGP/350", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to minimize the length of the string by removing occurrence of only one character.\n// Examples:\n// >>> minimum_Length(\"mnm\")\n// >>> 1\n// >>> minimum_Length(\"abcda\")\n// >>> 3\n// >>> minimum_Length(\"abcb\")\n// >>> 2\nfunc minimum_Length (s string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := minimum_Length(\"mnm\")\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := minimum_Length(\"abcda\")\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := minimum_Length(\"abcb\")\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to minimize the length of the string by removing occurrence of only one character.", "entry_point": "minimum_Length", "canonical_solution": null}
{"task_id": "MBGP/351", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the first element occurring k times in a given array.\n// Examples:\n// >>> first_Element([0,1,2,3,4,5],6,1)\n// >>> 0\n// >>> first_Element([1,2,1,3,4],5,2)\n// >>> 1\n// >>> first_Element([2,3,4,3,5,7,1,2,3,5],10,2)\n// >>> 2\nfunc first_Element (arr []int, n int, k int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := first_Element([]int{0, 1, 2, 3, 4, 5},6,1)\n\texpected_1 := 0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := first_Element([]int{1, 2, 1, 3, 4},5,2)\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := first_Element([]int{2, 3, 4, 3, 5, 7, 1, 2, 3, 5},10,2)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the first element occurring k times in a given array.", "entry_point": "first_Element", "canonical_solution": null}
{"task_id": "MBGP/352", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether all the characters in a given string are unique.\n// Examples:\n// >>> unique_Characters('aba')\n// >>> False\n// >>> unique_Characters('abc')\n// >>> True\n// >>> unique_Characters('abab')\n// >>> False\nfunc unique_Characters (str string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := unique_Characters(\"aba\")\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := unique_Characters(\"abc\")\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := unique_Characters(\"abab\")\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether all the characters in a given string are unique.", "entry_point": "unique_Characters", "canonical_solution": null}
{"task_id": "MBGP/353", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove a specified column from a given nested list.\n// Examples:\n// >>> remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)\n// >>> [[2, 3], [4, 5], [1, 1]]\n// >>> remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)\n// >>> [[1, 2], [-2, 4], [1, -1]]\n// >>> remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)\n// >>> [[3], [7], [3], [15, 17], [7], [11]]\nfunc remove_column (list1 [][]int, n int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_column([][]int{[]int{1, 2, 3}, []int{2, 4, 5}, []int{1, 1, 1}},0)\n\texpected_1 := [][]int{[]int{2, 3}, []int{4, 5}, []int{1, 1}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_column([][]int{[]int{1, 2, 3}, []int{-2, 4, -5}, []int{1, -1, 1}},2)\n\texpected_2 := [][]int{[]int{1, 2}, []int{-2, 4}, []int{1, -1}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_column([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}},0)\n\texpected_3 := [][]int{[]int{3}, []int{7}, []int{3}, []int{15, 17}, []int{7}, []int{11}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove a specified column from a given nested list.", "entry_point": "remove_column", "canonical_solution": null}
{"task_id": "MBGP/354", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find t-nth term of arithemetic progression.\n// Examples:\n// >>> tn_ap(1,5,2)\n// >>> 9\n// >>> tn_ap(2,6,4)\n// >>> 22\n// >>> tn_ap(1,4,5)\n// >>> 16\nfunc tn_ap (a int, n int, d int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := tn_ap(1,5,2)\n\texpected_1 := 9\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := tn_ap(2,6,4)\n\texpected_2 := 22\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := tn_ap(1,4,5)\n\texpected_3 := 16\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find t-nth term of arithemetic progression.", "entry_point": "tn_ap", "canonical_solution": null}
{"task_id": "MBGP/355", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the number of rectangles in a circle of radius r.\n// Examples:\n// >>> count_Rectangles(2)\n// >>> 8\n// >>> count_Rectangles(1)\n// >>> 1\n// >>> count_Rectangles(0)\n// >>> 0\nfunc count_Rectangles (radius int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Rectangles(2)\n\texpected_1 := 8\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Rectangles(1)\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Rectangles(0)\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the number of rectangles in a circle of radius r.", "entry_point": "count_Rectangles", "canonical_solution": null}
{"task_id": "MBGP/356", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the third angle of a triangle using two angles.\n// Examples:\n// >>> find_angle(47,89)\n// >>> 44\n// >>> find_angle(45,95)\n// >>> 40\n// >>> find_angle(50,40)\n// >>> 90\nfunc find_angle (a int, b int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_angle(47,89)\n\texpected_1 := 44\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_angle(45,95)\n\texpected_2 := 40\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_angle(50,40)\n\texpected_3 := 90\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the third angle of a triangle using two angles.", "entry_point": "find_angle", "canonical_solution": null}
{"task_id": "MBGP/357", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the maximum element of all the given tuple records.\n// Examples:\n// >>> find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)])\n// >>> 10\n// >>> find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)])\n// >>> 11\n// >>> find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)])\n// >>> 12\nfunc find_max (test_list [][]int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_max([][]int{[]int{2, 4}, []int{6, 7}, []int{5, 1}, []int{6, 10}, []int{8, 7}})\n\texpected_1 := 10\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_max([][]int{[]int{3, 5}, []int{7, 8}, []int{6, 2}, []int{7, 11}, []int{9, 8}})\n\texpected_2 := 11\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_max([][]int{[]int{4, 6}, []int{8, 9}, []int{7, 3}, []int{8, 12}, []int{10, 9}})\n\texpected_3 := 12\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the maximum element of all the given tuple records.", "entry_point": "find_max", "canonical_solution": null}
{"task_id": "MBGP/358", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find modulo division of two lists using map and lambda function.\n// Examples:\n// >>> moddiv_list([4,5,6],[1, 2, 3])\n// >>> [0, 1, 0]\n// >>> moddiv_list([3,2],[1,4])\n// >>> [0, 2]\n// >>> moddiv_list([90,120],[50,70])\n// >>> [40, 50]\nfunc moddiv_list (nums1 []int, nums2 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := moddiv_list([]int{4, 5, 6},[]int{1, 2, 3})\n\texpected_1 := []int{0, 1, 0}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := moddiv_list([]int{3, 2},[]int{1, 4})\n\texpected_2 := []int{0, 2}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := moddiv_list([]int{90, 120},[]int{50, 70})\n\texpected_3 := []int{40, 50}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find modulo division of two lists using map and lambda function.", "entry_point": "moddiv_list", "canonical_solution": null}
{"task_id": "MBGP/359", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether one root of the quadratic equation is twice of the other or not.\n// Examples:\n// >>> Check_Solution(1,3,2)\n// >>> \"Yes\"\n// >>> Check_Solution(1,2,3)\n// >>> \"No\"\n// >>> Check_Solution(1,-5,6)\n// >>> \"No\"\nfunc Check_Solution (a int, b int, c int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Check_Solution(1,3,2)\n\texpected_1 := \"Yes\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Check_Solution(1,2,3)\n\texpected_2 := \"No\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Check_Solution(1,-5,6)\n\texpected_3 := \"No\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether one root of the quadratic equation is twice of the other or not.", "entry_point": "Check_Solution", "canonical_solution": null}
{"task_id": "MBGP/360", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the n\u2019th carol number.\n// Examples:\n// >>> get_carol(2)\n// >>> 7\n// >>> get_carol(4)\n// >>> 223\n// >>> get_carol(5)\n// >>> 959\nfunc get_carol (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_carol(2)\n\texpected_1 := 7\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_carol(4)\n\texpected_2 := 223\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_carol(5)\n\texpected_3 := 959\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the n\u2019th carol number.", "entry_point": "get_carol", "canonical_solution": null}
{"task_id": "MBGP/361", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove empty lists from a given list of lists.\n// Examples:\n// >>> remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])\n// >>> ['Red', 'Green', [1, 2], 'Blue']\n// >>> remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])\n// >>> [ 'Green', [1, 2], 'Blue']\n// >>> remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])\n// >>> ['Python', 'programming', 'language']\nfunc remove_empty (list1 []interface{}) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_empty([]interface{}{[]interface{}{}, []interface{}{}, []interface{}{}, \"Red\", \"Green\", []interface{}{1, 2}, \"Blue\", []interface{}{}, []interface{}{}})\n\texpected_1 := []interface{}{\"Red\", \"Green\", []interface{}{1, 2}, \"Blue\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_empty([]interface{}{[]interface{}{}, []interface{}{}, []interface{}{}, []interface{}{}, []interface{}{}, \"Green\", []interface{}{1, 2}, \"Blue\", []interface{}{}, []interface{}{}})\n\texpected_2 := []interface{}{\"Green\", []interface{}{1, 2}, \"Blue\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_empty([]interface{}{[]interface{}{}, []interface{}{}, []interface{}{}, \"Python\", []interface{}{}, []interface{}{}, \"programming\", \"language\", []interface{}{}, []interface{}{}, []interface{}{}, []interface{}{}, []interface{}{}})\n\texpected_3 := []interface{}{\"Python\", \"programming\", \"language\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove empty lists from a given list of lists.", "entry_point": "remove_empty", "canonical_solution": null}
{"task_id": "MBGP/362", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the item with maximum occurrences in a given list.\n// Examples:\n// >>> max_occurrences([1,2,3,1,2,3,12,4,2])\n// >>> 2\n// >>> max_occurrences([1,2,6,7,0,1,0,1,0])\n// >>> 1,0\n// >>> max_occurrences([1,2,3,1,2,4,1])\n// >>> 1\nfunc max_occurrences (nums []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_occurrences([]int{1, 2, 3, 1, 2, 3, 12, 4, 2})\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_occurrences([]int{1, 2, 6, 7, 0, 1, 0, 1, 0})\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_occurrences([]int{1, 2, 3, 1, 2, 4, 1})\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the item with maximum occurrences in a given list.", "entry_point": "max_occurrences", "canonical_solution": null}
{"task_id": "MBGP/363", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to add the k elements to each element in the tuple.\n// Examples:\n// >>> add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4)\n// >>> [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n// >>> add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8)\n// >>> [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\n// >>> add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9)\n// >>> [(20, 21, 22), (23, 24, 25), (26, 27, 28)]\nfunc add_K_element (test_list [][]int, K int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := add_K_element([][]int{[]int{1, 3, 4}, []int{2, 4, 6}, []int{3, 8, 1}},4)\n\texpected_1 := [][]int{[]int{5, 7, 8}, []int{6, 8, 10}, []int{7, 12, 5}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := add_K_element([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},8)\n\texpected_2 := [][]int{[]int{9, 10, 11}, []int{12, 13, 14}, []int{15, 16, 17}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := add_K_element([][]int{[]int{11, 12, 13}, []int{14, 15, 16}, []int{17, 18, 19}},9)\n\texpected_3 := [][]int{[]int{20, 21, 22}, []int{23, 24, 25}, []int{26, 27, 28}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to add the k elements to each element in the tuple.", "entry_point": "add_K_element", "canonical_solution": null}
{"task_id": "MBGP/364", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n// Examples:\n// >>> min_flip_to_make_string_alternate(\"0001010111\")\n// >>> 2\n// >>> min_flip_to_make_string_alternate(\"001\")\n// >>> 1\n// >>> min_flip_to_make_string_alternate(\"010111011\")\n// >>> 2\nfunc min_flip_to_make_string_alternate (str string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := min_flip_to_make_string_alternate(\"0001010111\")\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := min_flip_to_make_string_alternate(\"001\")\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := min_flip_to_make_string_alternate(\"010111011\")\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.", "entry_point": "min_flip_to_make_string_alternate", "canonical_solution": null}
{"task_id": "MBGP/365", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the number of digits of a given number.\n// Examples:\n// >>> count_Digit(12345)\n// >>> 5\n// >>> count_Digit(11223305)\n// >>> 8\n// >>> count_Digit(4123459)\n// >>> 7\nfunc count_Digit (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Digit(12345)\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Digit(11223305)\n\texpected_2 := 8\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Digit(4123459)\n\texpected_3 := 7\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the number of digits of a given number.", "entry_point": "count_Digit", "canonical_solution": null}
{"task_id": "MBGP/366", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the largest product of the pair of adjacent elements from a given list of integers.\n// Examples:\n// >>> adjacent_num_product([1,2,3,4,5,6])\n// >>> 30\n// >>> adjacent_num_product([1,2,3,4,5])\n// >>> 20\n// >>> adjacent_num_product([2,3])\n// >>> 6\nfunc adjacent_num_product (list_nums []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := adjacent_num_product([]int{1, 2, 3, 4, 5, 6})\n\texpected_1 := 30\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := adjacent_num_product([]int{1, 2, 3, 4, 5})\n\texpected_2 := 20\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := adjacent_num_product([]int{2, 3})\n\texpected_3 := 6\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the largest product of the pair of adjacent elements from a given list of integers.", "entry_point": "adjacent_num_product", "canonical_solution": null}
{"task_id": "MBGP/368", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to repeat the given tuple n times.\n// Examples:\n// >>> repeat_tuples((1, 3), 4)\n// >>> ((1, 3), (1, 3), (1, 3), (1, 3))\n// >>> repeat_tuples((1, 2), 3)\n// >>> ((1, 2), (1, 2), (1, 2))\n// >>> repeat_tuples((3, 4), 5)\n// >>> ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))\nfunc repeat_tuples (test_tup []int, N int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := repeat_tuples([]int{1, 3},4)\n\texpected_1 := [][]int{[]int{1, 3}, []int{1, 3}, []int{1, 3}, []int{1, 3}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := repeat_tuples([]int{1, 2},3)\n\texpected_2 := [][]int{[]int{1, 2}, []int{1, 2}, []int{1, 2}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := repeat_tuples([]int{3, 4},5)\n\texpected_3 := [][]int{[]int{3, 4}, []int{3, 4}, []int{3, 4}, []int{3, 4}, []int{3, 4}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to repeat the given tuple n times.", "entry_point": "repeat_tuples", "canonical_solution": null}
{"task_id": "MBGP/369", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the lateral surface area of cuboid\n// Examples:\n// >>> lateralsurface_cuboid(8,5,6)\n// >>> 156\n// >>> lateralsurface_cuboid(7,9,10)\n// >>> 320\n// >>> lateralsurface_cuboid(10,20,30)\n// >>> 1800\nfunc lateralsurface_cuboid (l int, w int, h int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := lateralsurface_cuboid(8,5,6)\n\texpected_1 := 156\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := lateralsurface_cuboid(7,9,10)\n\texpected_2 := 320\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := lateralsurface_cuboid(10,20,30)\n\texpected_3 := 1800\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the lateral surface area of cuboid", "entry_point": "lateralsurface_cuboid", "canonical_solution": null}
{"task_id": "MBGP/370", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort a tuple by its float element.\n// Examples:\n// >>> float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])\n// >>> [('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]\n// >>> float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])\n// >>> [('item3', '20'), ('item1', '15'), ('item2', '10')]\n// >>> float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])\n// >>> [('item3', '14'), ('item2', '10'), ('item1', '5')]\nfunc float_sort (price [][]string) [][]string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := float_sort([][]string{[]string{\"item1\", \"12.20\"}, []string{\"item2\", \"15.10\"}, []string{\"item3\", \"24.5\"}})\n\texpected_1 := [][]string{[]string{\"item3\", \"24.5\"}, []string{\"item2\", \"15.10\"}, []string{\"item1\", \"12.20\"}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := float_sort([][]string{[]string{\"item1\", \"15\"}, []string{\"item2\", \"10\"}, []string{\"item3\", \"20\"}})\n\texpected_2 := [][]string{[]string{\"item3\", \"20\"}, []string{\"item1\", \"15\"}, []string{\"item2\", \"10\"}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := float_sort([][]string{[]string{\"item1\", \"5\"}, []string{\"item2\", \"10\"}, []string{\"item3\", \"14\"}})\n\texpected_3 := [][]string{[]string{\"item3\", \"14\"}, []string{\"item2\", \"10\"}, []string{\"item1\", \"5\"}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort a tuple by its float element.", "entry_point": "float_sort", "canonical_solution": null}
{"task_id": "MBGP/371", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the smallest missing element in a sorted array.\n// Examples:\n// >>> smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6)\n// >>> 7\n// >>> smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6)\n// >>> 3\n// >>> smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7)\n// >>> 0\nfunc smallest_missing (A []int, left_element int, right_element int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := smallest_missing([]int{0, 1, 2, 3, 4, 5, 6},0,6)\n\texpected_1 := 7\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := smallest_missing([]int{0, 1, 2, 6, 9, 11, 15},0,6)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := smallest_missing([]int{1, 2, 3, 4, 6, 9, 11, 15},0,7)\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the smallest missing element in a sorted array.", "entry_point": "smallest_missing", "canonical_solution": null}
{"task_id": "MBGP/373", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the volume of a cuboid.\n// Examples:\n// >>> volume_cuboid(1,2,3)\n// >>> 6\n// >>> volume_cuboid(5,7,9)\n// >>> 315\n// >>> volume_cuboid(10,15,21)\n// >>> 3150\nfunc volume_cuboid (l int, w int, h int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := volume_cuboid(1,2,3)\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := volume_cuboid(5,7,9)\n\texpected_2 := 315\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := volume_cuboid(10,15,21)\n\texpected_3 := 3150\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the volume of a cuboid.", "entry_point": "volume_cuboid", "canonical_solution": null}
{"task_id": "MBGP/374", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to print all permutations of a given string including duplicates.\n// Examples:\n// >>> permute_string('ab')\n// >>> ['ab', 'ba']\n// >>> permute_string('abc')\n// >>> ['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\n// >>> permute_string('abcd')\n// >>> ['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']\nfunc permute_string (str string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := permute_string(\"ab\")\n\texpected_1 := []string{\"ab\", \"ba\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := permute_string(\"abc\")\n\texpected_2 := []string{\"abc\", \"bac\", \"bca\", \"acb\", \"cab\", \"cba\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := permute_string(\"abcd\")\n\texpected_3 := []string{\"abcd\", \"bacd\", \"bcad\", \"bcda\", \"acbd\", \"cabd\", \"cbad\", \"cbda\", \"acdb\", \"cadb\", \"cdab\", \"cdba\", \"abdc\", \"badc\", \"bdac\", \"bdca\", \"adbc\", \"dabc\", \"dbac\", \"dbca\", \"adcb\", \"dacb\", \"dcab\", \"dcba\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to print all permutations of a given string including duplicates.", "entry_point": "permute_string", "canonical_solution": null}
{"task_id": "MBGP/375", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to round the given number to the nearest multiple of a specific number.\n// Examples:\n// >>> round_num(4722,10)\n// >>> 4720\n// >>> round_num(1111,5)\n// >>> 1110\n// >>> round_num(219,2)\n// >>> 218\nfunc round_num (n int, m int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := round_num(4722,10)\n\texpected_1 := 4720\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := round_num(1111,5)\n\texpected_2 := 1110\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := round_num(219,2)\n\texpected_3 := 218\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to round the given number to the nearest multiple of a specific number.", "entry_point": "round_num", "canonical_solution": null}
{"task_id": "MBGP/376", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n// Examples:\n// >>> remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7))\n// >>> (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n// >>> remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9))\n// >>> (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\n// >>> remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7))\n// >>> (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')\nfunc remove_replica (test_tup []int) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_replica([]int{1, 1, 4, 4, 4, 5, 5, 6, 7, 7})\n\texpected_1 := []interface{}{1, \"MSP\", 4, \"MSP\", \"MSP\", 5, \"MSP\", 6, 7, \"MSP\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_replica([]int{2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9})\n\texpected_2 := []interface{}{2, 3, 4, \"MSP\", 5, 6, \"MSP\", 7, 8, 9, \"MSP\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_replica([]int{2, 2, 5, 4, 5, 7, 5, 6, 7, 7})\n\texpected_3 := []interface{}{2, \"MSP\", 5, 4, \"MSP\", 7, \"MSP\", 6, \"MSP\", \"MSP\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.", "entry_point": "remove_replica", "canonical_solution": null}
{"task_id": "MBGP/377", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to remove all occurrences of a character in a given string.\n// Examples:\n// >>> remove_Char(\"aba\",'a')\n// >>> \"b\"\n// >>> remove_Char(\"toggle\",'g')\n// >>> \"tole\"\n// >>> remove_Char(\"aabbc\",'b')\n// >>> \"aac\"\nfunc remove_Char (s string, c string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_Char(\"aba\",\"a\")\n\texpected_1 := \"b\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_Char(\"toggle\",\"g\")\n\texpected_2 := \"tole\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_Char(\"aabbc\",\"b\")\n\texpected_3 := \"aac\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to remove all occurrences of a character in a given string.", "entry_point": "remove_Char", "canonical_solution": null}
{"task_id": "MBGP/378", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to shift last element to first position in the given list.\n// Examples:\n// >>> move_first([1,2,3,4])\n// >>> [4,1,2,3]\n// >>> move_first([0,1,2,3])\n// >>> [3,0,1,2]\n// >>> move_first([9,8,7,1])\n// >>> [1,9,8,7]\nfunc move_first (test_list []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := move_first([]int{1, 2, 3, 4})\n\texpected_1 := []int{4, 1, 2, 3}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := move_first([]int{0, 1, 2, 3})\n\texpected_2 := []int{3, 0, 1, 2}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := move_first([]int{9, 8, 7, 1})\n\texpected_3 := []int{1, 9, 8, 7}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to shift last element to first position in the given list.", "entry_point": "move_first", "canonical_solution": null}
{"task_id": "MBGP/379", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the surface area of a cuboid.\n// Examples:\n// >>> surfacearea_cuboid(1,2,3)\n// >>> 22\n// >>> surfacearea_cuboid(5,7,9)\n// >>> 286\n// >>> surfacearea_cuboid(10,15,21)\n// >>> 1350\nfunc surfacearea_cuboid (l int, w int, h int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := surfacearea_cuboid(1,2,3)\n\texpected_1 := 22\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := surfacearea_cuboid(5,7,9)\n\texpected_2 := 286\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := surfacearea_cuboid(10,15,21)\n\texpected_3 := 1350\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the surface area of a cuboid.", "entry_point": "surfacearea_cuboid", "canonical_solution": null}
{"task_id": "MBGP/380", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to generate a two-dimensional array.\n// Examples:\n// >>> multi_list(3,4)\n// >>> [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n// >>> multi_list(5,7)\n// >>> [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\n// >>> multi_list(10,15)\n// >>> [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]\nfunc multi_list (rownum int, colnum int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := multi_list(3,4)\n\texpected_1 := [][]int{[]int{0, 0, 0, 0}, []int{0, 1, 2, 3}, []int{0, 2, 4, 6}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := multi_list(5,7)\n\texpected_2 := [][]int{[]int{0, 0, 0, 0, 0, 0, 0}, []int{0, 1, 2, 3, 4, 5, 6}, []int{0, 2, 4, 6, 8, 10, 12}, []int{0, 3, 6, 9, 12, 15, 18}, []int{0, 4, 8, 12, 16, 20, 24}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := multi_list(10,15)\n\texpected_3 := [][]int{[]int{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, []int{0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28}, []int{0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42}, []int{0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56}, []int{0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70}, []int{0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84}, []int{0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98}, []int{0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112}, []int{0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to generate a two-dimensional array.", "entry_point": "multi_list", "canonical_solution": null}
{"task_id": "MBGP/381", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort a list of lists by a given index of the inner list.\n// Examples:\n// >>> index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)\n// >>> [('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n// >>> index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)\n// >>> [('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\n// >>> index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)\n// >>> [('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]\nfunc index_on_inner_list (list_data [][]interface{}, index_no int) [][]interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := index_on_inner_list([][]interface{}{[]interface{}{\"Greyson Fulton\", 98, 99}, []interface{}{\"Brady Kent\", 97, 96}, []interface{}{\"Wyatt Knott\", 91, 94}, []interface{}{\"Beau Turnbull\", 94, 98}},0)\n\texpected_1 := [][]interface{}{[]interface{}{\"Beau Turnbull\", 94, 98}, []interface{}{\"Brady Kent\", 97, 96}, []interface{}{\"Greyson Fulton\", 98, 99}, []interface{}{\"Wyatt Knott\", 91, 94}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := index_on_inner_list([][]interface{}{[]interface{}{\"Greyson Fulton\", 98, 99}, []interface{}{\"Brady Kent\", 97, 96}, []interface{}{\"Wyatt Knott\", 91, 94}, []interface{}{\"Beau Turnbull\", 94, 98}},1)\n\texpected_2 := [][]interface{}{[]interface{}{\"Wyatt Knott\", 91, 94}, []interface{}{\"Beau Turnbull\", 94, 98}, []interface{}{\"Brady Kent\", 97, 96}, []interface{}{\"Greyson Fulton\", 98, 99}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := index_on_inner_list([][]interface{}{[]interface{}{\"Greyson Fulton\", 98, 99}, []interface{}{\"Brady Kent\", 97, 96}, []interface{}{\"Wyatt Knott\", 91, 94}, []interface{}{\"Beau Turnbull\", 94, 98}},2)\n\texpected_3 := [][]interface{}{[]interface{}{\"Wyatt Knott\", 91, 94}, []interface{}{\"Brady Kent\", 97, 96}, []interface{}{\"Beau Turnbull\", 94, 98}, []interface{}{\"Greyson Fulton\", 98, 99}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort a list of lists by a given index of the inner list.", "entry_point": "index_on_inner_list", "canonical_solution": null}
{"task_id": "MBGP/382", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the number of rotations in a circularly sorted array.\n// Examples:\n// >>> find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\n// >>> 3\n// >>> find_rotation_count([8, 9, 10,2, 5, 6])\n// >>> 3\n// >>> find_rotation_count([2, 5, 6, 8, 9, 10])\n// >>> 0\nfunc find_rotation_count (A []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_rotation_count([]int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7})\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_rotation_count([]int{8, 9, 10, 2, 5, 6})\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_rotation_count([]int{2, 5, 6, 8, 9, 10})\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the number of rotations in a circularly sorted array.", "entry_point": "find_rotation_count", "canonical_solution": null}
{"task_id": "MBGP/383", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to toggle all odd bits of a given number.\n// Examples:\n// >>> even_bit_toggle_number(10)\n// >>> 15\n// >>> even_bit_toggle_number(20)\n// >>> 1\n// >>> even_bit_toggle_number(30)\n// >>> 11\nfunc even_bit_toggle_number (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := even_bit_toggle_number(10)\n\texpected_1 := 15\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := even_bit_toggle_number(20)\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := even_bit_toggle_number(30)\n\texpected_3 := 11\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to toggle all odd bits of a given number.", "entry_point": "even_bit_toggle_number", "canonical_solution": null}
{"task_id": "MBGP/384", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the frequency of the smallest value in a given array.\n// Examples:\n// >>> frequency_Of_Smallest(5,[1,2,3,4,3])\n// >>> 1\n// >>> frequency_Of_Smallest(7,[3,1,2,5,6,2,3])\n// >>> 1\n// >>> frequency_Of_Smallest(7,[3,3,6,3,7,4,9])\n// >>> 3\nfunc frequency_Of_Smallest (n int, arr []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := frequency_Of_Smallest(5,[]int{1, 2, 3, 4, 3})\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := frequency_Of_Smallest(7,[]int{3, 1, 2, 5, 6, 2, 3})\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := frequency_Of_Smallest(7,[]int{3, 3, 6, 3, 7, 4, 9})\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the frequency of the smallest value in a given array.", "entry_point": "frequency_Of_Smallest", "canonical_solution": null}
{"task_id": "MBGP/385", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the n'th perrin number using recursion.\n// Examples:\n// >>> get_perrin(9)\n// >>> 12\n// >>> get_perrin(4)\n// >>> 2\n// >>> get_perrin(6)\n// >>> 5\nfunc get_perrin (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_perrin(9)\n\texpected_1 := 12\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_perrin(4)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_perrin(6)\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the n'th perrin number using recursion.", "entry_point": "get_perrin", "canonical_solution": null}
{"task_id": "MBGP/386", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n// Examples:\n// >>> swap_count(\"[]][][\")\n// >>> 2\n// >>> swap_count(\"[[][]]\")\n// >>> 0\n// >>> swap_count(\"[[][]]][\")\n// >>> 1\nfunc swap_count (s string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := swap_count(\"[]][][\")\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := swap_count(\"[[][]]\")\n\texpected_2 := 0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := swap_count(\"[[][]]][\")\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.", "entry_point": "swap_count", "canonical_solution": null}
{"task_id": "MBGP/387", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the hexadecimal number is even or odd.\n// Examples:\n// >>> even_or_odd(\"AB3454D\")\n// >>> \"Odd\"\n// >>> even_or_odd(\"ABC\")\n// >>> \"Even\"\n// >>> even_or_odd(\"AAD\")\n// >>> \"Odd\"\nfunc even_or_odd (N string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := even_or_odd(\"AB3454D\")\n\texpected_1 := \"Odd\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := even_or_odd(\"ABC\")\n\texpected_2 := \"Even\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := even_or_odd(\"AAD\")\n\texpected_3 := \"Odd\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the hexadecimal number is even or odd.", "entry_point": "even_or_odd", "canonical_solution": null}
{"task_id": "MBGP/388", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the highest power of 2 that is less than or equal to n.\n// Examples:\n// >>> highest_Power_of_2(10)\n// >>> 8\n// >>> highest_Power_of_2(19)\n// >>> 16\n// >>> highest_Power_of_2(32)\n// >>> 32\nfunc highest_Power_of_2 (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := highest_Power_of_2(10)\n\texpected_1 := 8\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := highest_Power_of_2(19)\n\texpected_2 := 16\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := highest_Power_of_2(32)\n\texpected_3 := 32\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the highest power of 2 that is less than or equal to n.", "entry_point": "highest_Power_of_2", "canonical_solution": null}
{"task_id": "MBGP/389", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the n'th lucas number.\n// Examples:\n// >>> find_lucas(9)\n// >>> 76\n// >>> find_lucas(4)\n// >>> 7\n// >>> find_lucas(3)\n// >>> 4\nfunc find_lucas (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_lucas(9)\n\texpected_1 := 76\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_lucas(4)\n\texpected_2 := 7\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_lucas(3)\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the n'th lucas number.", "entry_point": "find_lucas", "canonical_solution": null}
{"task_id": "MBGP/390", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to insert a given string at the beginning of all items in a list.\n// Examples:\n// >>> add_string([1,2,3,4],'temp{0}')\n// >>> ['temp1', 'temp2', 'temp3', 'temp4']\n// >>> add_string(['a','b','c','d'], 'python{0}')\n// >>> [ 'pythona', 'pythonb', 'pythonc', 'pythond']\n// >>> add_string([5,6,7,8],'string{0}')\n// >>> ['string5', 'string6', 'string7', 'string8']\nfunc add_string (list []interface{}, string0 string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := add_string([]interface{}{1, 2, 3, 4},\"temp{0}\")\n\texpected_1 := []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := add_string([]interface{}{\"a\", \"b\", \"c\", \"d\"},\"python{0}\")\n\texpected_2 := []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := add_string([]interface{}{5, 6, 7, 8},\"string{0}\")\n\texpected_3 := []string{\"string5\", \"string6\", \"string7\", \"string8\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to insert a given string at the beginning of all items in a list.", "entry_point": "add_string", "canonical_solution": null}
{"task_id": "MBGP/391", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert more than one list to nested dictionary.\n// Examples:\n// >>> convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])\n// >>> [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n// >>> convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])\n// >>> [{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\n// >>> convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])\n// >>> [{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\nfunc convert_list_dictionary (l1 []string, l2 []string, l3 []int) []map[string]map[string]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := convert_list_dictionary([]string{\"S001\", \"S002\", \"S003\", \"S004\"},[]string{\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"},[]int{85, 98, 89, 92})\n\texpected_1 := []map[string]map[string]int{map[string]map[string]int{ \"S001\": map[string]int{ \"Adina Park\": 85,  },  }, map[string]map[string]int{ \"S002\": map[string]int{ \"Leyton Marsh\": 98,  },  }, map[string]map[string]int{ \"S003\": map[string]int{ \"Duncan Boyle\": 89,  },  }, map[string]map[string]int{ \"S004\": map[string]int{ \"Saim Richards\": 92,  },  }}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := convert_list_dictionary([]string{\"abc\", \"def\", \"ghi\", \"jkl\"},[]string{\"python\", \"program\", \"language\", \"programs\"},[]int{100, 200, 300, 400})\n\texpected_2 := []map[string]map[string]int{map[string]map[string]int{ \"abc\": map[string]int{ \"python\": 100,  },  }, map[string]map[string]int{ \"def\": map[string]int{ \"program\": 200,  },  }, map[string]map[string]int{ \"ghi\": map[string]int{ \"language\": 300,  },  }, map[string]map[string]int{ \"jkl\": map[string]int{ \"programs\": 400,  },  }}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := convert_list_dictionary([]string{\"A1\", \"A2\", \"A3\", \"A4\"},[]string{\"java\", \"C\", \"C++\", \"DBMS\"},[]int{10, 20, 30, 40})\n\texpected_3 := []map[string]map[string]int{map[string]map[string]int{ \"A1\": map[string]int{ \"java\": 10,  },  }, map[string]map[string]int{ \"A2\": map[string]int{ \"C\": 20,  },  }, map[string]map[string]int{ \"A3\": map[string]int{ \"C++\": 30,  },  }, map[string]map[string]int{ \"A4\": map[string]int{ \"DBMS\": 40,  },  }}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert more than one list to nested dictionary.", "entry_point": "convert_list_dictionary", "canonical_solution": null}
{"task_id": "MBGP/392", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n// Examples:\n// >>> get_max_sum(60)\n// >>> 106\n// >>> get_max_sum(10)\n// >>> 12\n// >>> get_max_sum(2)\n// >>> 2\nfunc get_max_sum (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_max_sum(60)\n\texpected_1 := 106\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_max_sum(10)\n\texpected_2 := 12\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_max_sum(2)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "entry_point": "get_max_sum", "canonical_solution": null}
{"task_id": "MBGP/393", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the list with maximum length using lambda function.\n// Examples:\n// >>> max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n// >>> (3, [13, 15, 17])\n// >>> max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])\n// >>> (5,[1,2,3,4,5])\n// >>> max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])\n// >>> (4,[6,7,8,9])\nfunc max_length_list (input_list [][]int) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_length_list([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}})\n\texpected_1 := []interface{}{3, []interface{}{13, 15, 17}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_length_list([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}})\n\texpected_2 := []interface{}{5, []interface{}{1, 2, 3, 4, 5}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_length_list([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}})\n\texpected_3 := []interface{}{4, []interface{}{6, 7, 8, 9}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the list with maximum length using lambda function.", "entry_point": "max_length_list", "canonical_solution": null}
{"task_id": "MBGP/394", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if given tuple is distinct or not.\n// Examples:\n// >>> check_distinct((1, 4, 5, 6, 1, 4))\n// >>> False\n// >>> check_distinct((1, 4, 5, 6))\n// >>> True\n// >>> check_distinct((2, 3, 4, 5, 6))\n// >>> True\nfunc check_distinct (test_tup []int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_distinct([]int{1, 4, 5, 6, 1, 4})\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_distinct([]int{1, 4, 5, 6})\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_distinct([]int{2, 3, 4, 5, 6})\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if given tuple is distinct or not.", "entry_point": "check_distinct", "canonical_solution": null}
{"task_id": "MBGP/395", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the first non-repeated character in a given string.\n// Examples:\n// >>> first_non_repeating_character(\"abcabc\")\n// >>> None\n// >>> first_non_repeating_character(\"abc\")\n// >>> \"a\"\n// >>> first_non_repeating_character(\"ababc\")\n// >>> \"c\"\nfunc first_non_repeating_character (str1 string) interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := first_non_repeating_character(\"abcabc\")\n\texpected_1 := nil\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := first_non_repeating_character(\"abc\")\n\texpected_2 := \"a\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := first_non_repeating_character(\"ababc\")\n\texpected_3 := \"c\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the first non-repeated character in a given string.", "entry_point": "first_non_repeating_character", "canonical_solution": null}
{"task_id": "MBGP/396", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check whether the given string starts and ends with the same character or not using regex.\n// Examples:\n// >>> check_char(\"abba\")\n// >>> \"Valid\"\n// >>> check_char(\"a\")\n// >>> \"Valid\"\n// >>> check_char(\"abcd\")\n// >>> \"Invalid\"\nfunc check_char (string0 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_char(\"abba\")\n\texpected_1 := \"Valid\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_char(\"a\")\n\texpected_2 := \"Valid\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_char(\"abcd\")\n\texpected_3 := \"Invalid\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check whether the given string starts and ends with the same character or not using regex.", "entry_point": "check_char", "canonical_solution": null}
{"task_id": "MBGP/397", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the median of three specific numbers.\n// Examples:\n// >>> median_numbers(25,55,65)\n// >>> 55.0\n// >>> median_numbers(20,10,30)\n// >>> 20.0\n// >>> median_numbers(15,45,75)\n// >>> 45.0\nfunc median_numbers (a int, b int, c int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := median_numbers(25,55,65)\n\texpected_1 := 55\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := median_numbers(20,10,30)\n\texpected_2 := 20\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := median_numbers(15,45,75)\n\texpected_3 := 45\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the median of three specific numbers.", "entry_point": "median_numbers", "canonical_solution": null}
{"task_id": "MBGP/398", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to compute the sum of digits of each number of a given list.\n// Examples:\n// >>> sum_of_digits([10,2,56])\n// >>> 14\n// >>> sum_of_digits([[10,20,4,5,'b',70,'a']])\n// >>> 19\n// >>> sum_of_digits([10,20,-4,5,-70])\n// >>> 19\nfunc sum_of_digits (nums []interface{}) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_of_digits([]interface{}{10, 2, 56})\n\texpected_1 := 14\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_of_digits([]interface{}{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}})\n\texpected_2 := 19\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_of_digits([]interface{}{10, 20, -4, 5, -70})\n\texpected_3 := 19\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to compute the sum of digits of each number of a given list.", "entry_point": "sum_of_digits", "canonical_solution": null}
{"task_id": "MBGP/399", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to perform the mathematical bitwise xor operation across the given tuples.\n// Examples:\n// >>> bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3))\n// >>> (15, 6, 5, 10)\n// >>> bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4))\n// >>> (13, 6, 3, 14)\n// >>> bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6))\n// >>> (11, 2, 13, 13)\nfunc bitwise_xor (test_tup1 []int, test_tup2 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := bitwise_xor([]int{10, 4, 6, 9},[]int{5, 2, 3, 3})\n\texpected_1 := []int{15, 6, 5, 10}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := bitwise_xor([]int{11, 5, 7, 10},[]int{6, 3, 4, 4})\n\texpected_2 := []int{13, 6, 3, 14}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := bitwise_xor([]int{12, 6, 8, 11},[]int{7, 4, 5, 6})\n\texpected_3 := []int{11, 2, 13, 13}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "entry_point": "bitwise_xor", "canonical_solution": null}
{"task_id": "MBGP/400", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to extract the frequency of unique tuples in the given list order irrespective.\n// Examples:\n// >>> extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] )\n// >>> 3\n// >>> extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] )\n// >>> 4\n// >>> extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] )\n// >>> 4\nfunc extract_freq (test_list [][]int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := extract_freq([][]int{[]int{3, 4}, []int{1, 2}, []int{4, 3}, []int{5, 6}})\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := extract_freq([][]int{[]int{4, 15}, []int{2, 3}, []int{5, 4}, []int{6, 7}})\n\texpected_2 := 4\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := extract_freq([][]int{[]int{5, 16}, []int{2, 3}, []int{6, 5}, []int{6, 9}})\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to extract the frequency of unique tuples in the given list order irrespective.", "entry_point": "extract_freq", "canonical_solution": null}
{"task_id": "MBGP/401", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n// Examples:\n// >>> add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n// >>> ((7, 10), (7, 14), (3, 10), (8, 13))\n// >>> add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))\n// >>> ((9, 12), (9, 16), (5, 12), (10, 15))\n// >>> add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))\n// >>> ((11, 14), (11, 18), (7, 14), (12, 17))\nfunc add_nested_tuples (test_tup1 [][]int, test_tup2 [][]int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := add_nested_tuples([][]int{[]int{1, 3}, []int{4, 5}, []int{2, 9}, []int{1, 10}},[][]int{[]int{6, 7}, []int{3, 9}, []int{1, 1}, []int{7, 3}})\n\texpected_1 := [][]int{[]int{7, 10}, []int{7, 14}, []int{3, 10}, []int{8, 13}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := add_nested_tuples([][]int{[]int{2, 4}, []int{5, 6}, []int{3, 10}, []int{2, 11}},[][]int{[]int{7, 8}, []int{4, 10}, []int{2, 2}, []int{8, 4}})\n\texpected_2 := [][]int{[]int{9, 12}, []int{9, 16}, []int{5, 12}, []int{10, 15}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := add_nested_tuples([][]int{[]int{3, 5}, []int{6, 7}, []int{4, 11}, []int{3, 12}},[][]int{[]int{8, 9}, []int{5, 11}, []int{3, 3}, []int{9, 5}})\n\texpected_3 := [][]int{[]int{11, 14}, []int{11, 18}, []int{7, 14}, []int{12, 17}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "entry_point": "add_nested_tuples", "canonical_solution": null}
{"task_id": "MBGP/402", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to compute the value of ncr%p.\n// Examples:\n// >>> ncr_modp(10,2,13)\n// >>> 6\n// >>> ncr_modp(15,12,43)\n// >>> 25\n// >>> ncr_modp(17,9,18)\n// >>> 10\nfunc ncr_modp (n int, r int, p int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := ncr_modp(10,2,13)\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := ncr_modp(15,12,43)\n\texpected_2 := 25\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := ncr_modp(17,9,18)\n\texpected_3 := 10\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to compute the value of ncr%p.", "entry_point": "ncr_modp", "canonical_solution": null}
{"task_id": "MBGP/403", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if a url is valid or not using regex.\n// Examples:\n// >>> is_valid_URL(\"https://www.google.com\")\n// >>> True\n// >>> is_valid_URL(\"https:/www.gmail.com\")\n// >>> False\n// >>> is_valid_URL(\"https:// www.redit.com\")\n// >>> False\nfunc is_valid_URL (str string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_valid_URL(\"https://www.google.com\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_valid_URL(\"https:/www.gmail.com\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_valid_URL(\"https:// www.redit.com\")\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if a url is valid or not using regex.", "entry_point": "is_valid_URL", "canonical_solution": null}
{"task_id": "MBGP/404", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the minimum of two numbers.\n// Examples:\n// >>> minimum(1,2)\n// >>> 1\n// >>> minimum(-5,-4)\n// >>> -5\n// >>> minimum(0,0)\n// >>> 0\nfunc minimum (a int, b int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := minimum(1,2)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := minimum(-5,-4)\n\texpected_2 := -5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := minimum(0,0)\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the minimum of two numbers.", "entry_point": "minimum", "canonical_solution": null}
{"task_id": "MBGP/405", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check whether an element exists within a tuple.\n// Examples:\n// >>> check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')\n// >>> True\n// >>> check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')\n// >>> False\n// >>> check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)\n// >>> True\nfunc check_tuplex (tuplex []interface{}, tuple1 interface{}) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_tuplex([]interface{}{\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"},\"r\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_tuplex([]interface{}{\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"},\"5\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_tuplex([]interface{}{\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"},3)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check whether an element exists within a tuple.", "entry_point": "check_tuplex", "canonical_solution": null}
{"task_id": "MBGP/406", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the parity of a given number.\n// Examples:\n// >>> find_Parity(12)\n// >>> \"Even Parity\"\n// >>> find_Parity(7)\n// >>> \"Odd Parity\"\n// >>> find_Parity(10)\n// >>> \"Even Parity\"\nfunc find_Parity (x int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Parity(12)\n\texpected_1 := \"Even Parity\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Parity(7)\n\texpected_2 := \"Odd Parity\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Parity(10)\n\texpected_3 := \"Even Parity\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the parity of a given number.", "entry_point": "find_Parity", "canonical_solution": null}
{"task_id": "MBGP/407", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to create the next bigger number by rearranging the digits of a given number.\n// Examples:\n// >>> rearrange_bigger(12)\n// >>> 21\n// >>> rearrange_bigger(10)\n// >>> False\n// >>> rearrange_bigger(102)\n// >>> 120\nfunc rearrange_bigger (n int) interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := rearrange_bigger(12)\n\texpected_1 := 21\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := rearrange_bigger(10)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := rearrange_bigger(102)\n\texpected_3 := 120\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to create the next bigger number by rearranging the digits of a given number.", "entry_point": "rearrange_bigger", "canonical_solution": null}
{"task_id": "MBGP/409", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the minimum product from the pairs of tuples within a given list.\n// Examples:\n// >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )\n// >>> 8\n// >>> min_product_tuple([(10,20), (15,2), (5,10)] )\n// >>> 30\n// >>> min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )\n// >>> 100\nfunc min_product_tuple (list1 [][]int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := min_product_tuple([][]int{[]int{2, 7}, []int{2, 6}, []int{1, 8}, []int{4, 9}})\n\texpected_1 := 8\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := min_product_tuple([][]int{[]int{10, 20}, []int{15, 2}, []int{5, 10}})\n\texpected_2 := 30\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := min_product_tuple([][]int{[]int{11, 44}, []int{10, 15}, []int{20, 5}, []int{12, 9}})\n\texpected_3 := 100\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the minimum product from the pairs of tuples within a given list.", "entry_point": "min_product_tuple", "canonical_solution": null}
{"task_id": "MBGP/410", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the minimum value in a given heterogeneous list.\n// Examples:\n// >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n// >>> 2\n// >>> min_val(['Python', 15, 20, 25])\n// >>> 15\n// >>> min_val(['Python', 30, 20, 40, 50, 'version'])\n// >>> 20\nfunc min_val (listval []interface{}) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := min_val([]interface{}{\"Python\", 3, 2, 4, 5, \"version\"})\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := min_val([]interface{}{\"Python\", 15, 20, 25})\n\texpected_2 := 15\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := min_val([]interface{}{\"Python\", 30, 20, 40, 50, \"version\"})\n\texpected_3 := 20\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the minimum value in a given heterogeneous list.", "entry_point": "min_val", "canonical_solution": null}
{"task_id": "MBGP/411", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert the given snake case string to camel case string by using regex.\n// Examples:\n// >>> snake_to_camel('android_tv')\n// >>> 'AndroidTv'\n// >>> snake_to_camel('google_pixel')\n// >>> 'GooglePixel'\n// >>> snake_to_camel('apple_watch')\n// >>> 'AppleWatch'\nfunc snake_to_camel (word string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := snake_to_camel(\"android_tv\")\n\texpected_1 := \"AndroidTv\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := snake_to_camel(\"google_pixel\")\n\texpected_2 := \"GooglePixel\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := snake_to_camel(\"apple_watch\")\n\texpected_3 := \"AppleWatch\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert the given snake case string to camel case string by using regex.", "entry_point": "snake_to_camel", "canonical_solution": null}
{"task_id": "MBGP/412", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to remove odd numbers from a given list.\n// Examples:\n// >>> remove_odd([1,2,3])\n// >>> [2]\n// >>> remove_odd([2,4,6])\n// >>> [2,4,6]\n// >>> remove_odd([10,20,3])\n// >>> [10,20]\nfunc remove_odd (l []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_odd([]int{1, 2, 3})\n\texpected_1 := []int{2}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_odd([]int{2, 4, 6})\n\texpected_2 := []int{2, 4, 6}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_odd([]int{10, 20, 3})\n\texpected_3 := []int{10, 20}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to remove odd numbers from a given list.", "entry_point": "remove_odd", "canonical_solution": null}
{"task_id": "MBGP/413", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to extract the nth element from a given list of tuples.\n// Examples:\n// >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)\n// >>> ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n// >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)\n// >>> [99, 96, 94, 98]\n// >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)\n// >>> [98, 97, 91, 94]\nfunc extract_nth_element (list1 [][]interface{}, n int) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := extract_nth_element([][]interface{}{[]interface{}{\"Greyson Fulton\", 98, 99}, []interface{}{\"Brady Kent\", 97, 96}, []interface{}{\"Wyatt Knott\", 91, 94}, []interface{}{\"Beau Turnbull\", 94, 98}},0)\n\texpected_1 := []interface{}{\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := extract_nth_element([][]interface{}{[]interface{}{\"Greyson Fulton\", 98, 99}, []interface{}{\"Brady Kent\", 97, 96}, []interface{}{\"Wyatt Knott\", 91, 94}, []interface{}{\"Beau Turnbull\", 94, 98}},2)\n\texpected_2 := []interface{}{99, 96, 94, 98}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := extract_nth_element([][]interface{}{[]interface{}{\"Greyson Fulton\", 98, 99}, []interface{}{\"Brady Kent\", 97, 96}, []interface{}{\"Wyatt Knott\", 91, 94}, []interface{}{\"Beau Turnbull\", 94, 98}},1)\n\texpected_3 := []interface{}{98, 97, 91, 94}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to extract the nth element from a given list of tuples.", "entry_point": "extract_nth_element", "canonical_solution": null}
{"task_id": "MBGP/414", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the value exists in a sequence or not.\n// Examples:\n// >>> overlapping([1,2,3,4,5],[6,7,8,9])\n// >>> False\n// >>> overlapping([1,2,3],[4,5,6])\n// >>> False\n// >>> overlapping([1,4,5],[1,4,5])\n// >>> True\nfunc overlapping (list1 []int, list2 []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := overlapping([]int{1, 2, 3, 4, 5},[]int{6, 7, 8, 9})\n\texpected_1 := 0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := overlapping([]int{1, 2, 3},[]int{4, 5, 6})\n\texpected_2 := 0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := overlapping([]int{1, 4, 5},[]int{1, 4, 5})\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the value exists in a sequence or not.", "entry_point": "overlapping", "canonical_solution": null}
{"task_id": "MBGP/415", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find a pair with highest product from a given array of integers.\n// Examples:\n// >>> max_Product([1,2,3,4,7,0,8,4])\n// >>> (7,8)\n// >>> max_Product([0,-1,-2,-4,5,0,-6])\n// >>> (-4,-6)\n// >>> max_Product([1,2,3])\n// >>> (2,3)\nfunc max_Product (arr []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_Product([]int{1, 2, 3, 4, 7, 0, 8, 4})\n\texpected_1 := []int{7, 8}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_Product([]int{0, -1, -2, -4, 5, 0, -6})\n\texpected_2 := []int{-4, -6}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_Product([]int{1, 2, 3})\n\texpected_3 := []int{2, 3}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find a pair with highest product from a given array of integers.", "entry_point": "max_Product", "canonical_solution": null}
{"task_id": "MBGP/416", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n// Examples:\n// >>> breakSum(12)\n// >>> 13\n// >>> breakSum(24)\n// >>> 27\n// >>> breakSum(23)\n// >>> 23\nfunc breakSum (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := breakSum(12)\n\texpected_1 := 13\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := breakSum(24)\n\texpected_2 := 27\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := breakSum(23)\n\texpected_3 := 23\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.", "entry_point": "breakSum", "canonical_solution": null}
{"task_id": "MBGP/417", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find common first element in given list of tuple.\n// Examples:\n// >>> group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])\n// >>> [('x', 'y', 'z'), ('w', 't')]\n// >>> group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')])\n// >>> [('a', 'b', 'c'), ('d', 'e')]\n// >>> group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')])\n// >>> [('f', 'g', 'g'), ('h', 'i')]\nfunc group_tuples (Input [][]string) [][]string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := group_tuples([][]string{[]string{\"x\", \"y\"}, []string{\"x\", \"z\"}, []string{\"w\", \"t\"}})\n\texpected_1 := [][]string{[]string{\"x\", \"y\", \"z\"}, []string{\"w\", \"t\"}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := group_tuples([][]string{[]string{\"a\", \"b\"}, []string{\"a\", \"c\"}, []string{\"d\", \"e\"}})\n\texpected_2 := [][]string{[]string{\"a\", \"b\", \"c\"}, []string{\"d\", \"e\"}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := group_tuples([][]string{[]string{\"f\", \"g\"}, []string{\"f\", \"g\"}, []string{\"h\", \"i\"}})\n\texpected_3 := [][]string{[]string{\"f\", \"g\", \"g\"}, []string{\"h\", \"i\"}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find common first element in given list of tuple.", "entry_point": "group_tuples", "canonical_solution": null}
{"task_id": "MBGP/418", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sublist having maximum length.\n// Examples:\n// >>> Find_Max([['A'],['A','B'],['A','B','C']])\n// >>> ['A','B','C']\n// >>> Find_Max([[1],[1,2],[1,2,3]])\n// >>> [1,2,3]\n// >>> Find_Max([[1,1],[1,2,3],[1,5,6,1]])\n// >>> [1,5,6,1]\nfunc Find_Max (lst []interface{}) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Find_Max([]interface{}{[]interface{}{\"A\"}, []interface{}{\"A\", \"B\"}, []interface{}{\"A\", \"B\", \"C\"}})\n\texpected_1 := []interface{}{\"A\", \"B\", \"C\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Find_Max([]interface{}{[]interface{}{1}, []interface{}{1, 2}, []interface{}{1, 2, 3}})\n\texpected_2 := []interface{}{1, 2, 3}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Find_Max([]interface{}{[]interface{}{1, 1}, []interface{}{1, 2, 3}, []interface{}{1, 5, 6, 1}})\n\texpected_3 := []interface{}{1, 5, 6, 1}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sublist having maximum length.", "entry_point": "Find_Max", "canonical_solution": null}
{"task_id": "MBGP/419", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n// Examples:\n// >>> round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])\n// >>> 243\n// >>> round_and_sum([5,2,9,24.3,29])\n// >>> 345\n// >>> round_and_sum([25.0,56.7,89.2])\n// >>> 513\nfunc round_and_sum (list1 []interface{}) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := round_and_sum([]interface{}{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5})\n\texpected_1 := 243\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := round_and_sum([]interface{}{5, 2, 9, 24.3, 29})\n\texpected_2 := 345\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := round_and_sum([]interface{}{25.0, 56.7, 89.2})\n\texpected_3 := 513\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "entry_point": "round_and_sum", "canonical_solution": null}
{"task_id": "MBGP/420", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the cube sum of first n even natural numbers.\n// Examples:\n// >>> cube_Sum(2)\n// >>> 72\n// >>> cube_Sum(3)\n// >>> 288\n// >>> cube_Sum(4)\n// >>> 800\nfunc cube_Sum (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := cube_Sum(2)\n\texpected_1 := 72\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := cube_Sum(3)\n\texpected_2 := 288\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := cube_Sum(4)\n\texpected_3 := 800\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the cube sum of first n even natural numbers.", "entry_point": "cube_Sum", "canonical_solution": null}
{"task_id": "MBGP/421", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to concatenate each element of tuple by the delimiter.\n// Examples:\n// >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") )\n// >>> 'ID-is-4-UTS'\n// >>> concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") )\n// >>> 'QWE-is-4-RTY'\n// >>> concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") )\n// >>> 'ZEN-is-4-OP'\nfunc concatenate_tuple (test_tup []interface{}) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := concatenate_tuple([]interface{}{\"ID\", \"is\", 4, \"UTS\"})\n\texpected_1 := \"ID-is-4-UTS\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := concatenate_tuple([]interface{}{\"QWE\", \"is\", 4, \"RTY\"})\n\texpected_2 := \"QWE-is-4-RTY\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := concatenate_tuple([]interface{}{\"ZEN\", \"is\", 4, \"OP\"})\n\texpected_3 := \"ZEN-is-4-OP\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to concatenate each element of tuple by the delimiter.", "entry_point": "concatenate_tuple", "canonical_solution": null}
{"task_id": "MBGP/422", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the average of cubes of first n natural numbers.\n// Examples:\n// >>> find_Average_Of_Cube(2)\n// >>> 4.5\n// >>> find_Average_Of_Cube(3)\n// >>> 12\n// >>> find_Average_Of_Cube(1)\n// >>> 1\nfunc find_Average_Of_Cube (n int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Average_Of_Cube(2)\n\texpected_1 := 4.5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Average_Of_Cube(3)\n\texpected_2 := 12.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Average_Of_Cube(1)\n\texpected_3 := 1.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the average of cubes of first n natural numbers.", "entry_point": "find_Average_Of_Cube", "canonical_solution": null}
{"task_id": "MBGP/423", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to solve gold mine problem.\n// Examples:\n// >>> get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)\n// >>> 16\n// >>> get_maxgold([[10,20],[30,40]],2,2)\n// >>> 70\n// >>> get_maxgold([[4,9],[3,7]],2,2)\n// >>> 13\nfunc get_maxgold (gold [][]int, m int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_maxgold([][]int{[]int{1, 3, 1, 5}, []int{2, 2, 4, 1}, []int{5, 0, 2, 3}, []int{0, 6, 1, 2}},4,4)\n\texpected_1 := 16\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_maxgold([][]int{[]int{10, 20}, []int{30, 40}},2,2)\n\texpected_2 := 70\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_maxgold([][]int{[]int{4, 9}, []int{3, 7}},2,2)\n\texpected_3 := 13\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to solve gold mine problem.", "entry_point": "get_maxgold", "canonical_solution": null}
{"task_id": "MBGP/424", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to extract only the rear index element of each string in the given tuple.\n// Examples:\n// >>> extract_rear(('Mers', 'for', 'Vers') )\n// >>> ['s', 'r', 's']\n// >>> extract_rear(('Avenge', 'for', 'People') )\n// >>> ['e', 'r', 'e']\n// >>> extract_rear(('Gotta', 'get', 'go') )\n// >>> ['a', 't', 'o']\nfunc extract_rear (test_tuple []string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := extract_rear([]string{\"Mers\", \"for\", \"Vers\"})\n\texpected_1 := []string{\"s\", \"r\", \"s\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := extract_rear([]string{\"Avenge\", \"for\", \"People\"})\n\texpected_2 := []string{\"e\", \"r\", \"e\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := extract_rear([]string{\"Gotta\", \"get\", \"go\"})\n\texpected_3 := []string{\"a\", \"t\", \"o\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to extract only the rear index element of each string in the given tuple.", "entry_point": "extract_rear", "canonical_solution": null}
{"task_id": "MBGP/425", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count the number of sublists containing a particular element.\n// Examples:\n// >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)\n// >>> 3\n// >>> count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')\n// >>> 3\n// >>> count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')\n// >>> 1\nfunc count_element_in_list (list1 []interface{}, x interface{}) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_element_in_list([]interface{}{[]interface{}{1, 3}, []interface{}{5, 7}, []interface{}{1, 11}, []interface{}{1, 15, 7}},1)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_element_in_list([]interface{}{[]interface{}{\"A\", \"B\"}, []interface{}{\"A\", \"C\"}, []interface{}{\"A\", \"D\", \"E\"}, []interface{}{\"B\", \"C\", \"D\"}},\"A\")\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_element_in_list([]interface{}{[]interface{}{\"A\", \"B\"}, []interface{}{\"A\", \"C\"}, []interface{}{\"A\", \"D\", \"E\"}, []interface{}{\"B\", \"C\", \"D\"}},\"E\")\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count the number of sublists containing a particular element.", "entry_point": "count_element_in_list", "canonical_solution": null}
{"task_id": "MBGP/426", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to filter odd numbers using lambda function.\n// Examples:\n// >>> filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n// >>> [1,3,5,7,9]\n// >>> filter_oddnumbers([10,20,45,67,84,93])\n// >>> [45,67,93]\n// >>> filter_oddnumbers([5,7,9,8,6,4,3])\n// >>> [5,7,9,3]\nfunc filter_oddnumbers (nums []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := filter_oddnumbers([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n\texpected_1 := []int{1, 3, 5, 7, 9}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := filter_oddnumbers([]int{10, 20, 45, 67, 84, 93})\n\texpected_2 := []int{45, 67, 93}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := filter_oddnumbers([]int{5, 7, 9, 8, 6, 4, 3})\n\texpected_3 := []int{5, 7, 9, 3}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to filter odd numbers using lambda function.", "entry_point": "filter_oddnumbers", "canonical_solution": null}
{"task_id": "MBGP/427", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n// Examples:\n// >>> change_date_format(\"2026-01-02\")\n// >>> '02-01-2026'\n// >>> change_date_format(\"2020-11-13\")\n// >>> '13-11-2020'\n// >>> change_date_format(\"2021-04-26\")\n// >>> '26-04-2021'\nfunc change_date_format (dt string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := change_date_format(\"2026-01-02\")\n\texpected_1 := \"02-01-2026\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := change_date_format(\"2020-11-13\")\n\texpected_2 := \"13-11-2020\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := change_date_format(\"2021-04-26\")\n\texpected_3 := \"26-04-2021\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.", "entry_point": "change_date_format", "canonical_solution": null}
{"task_id": "MBGP/428", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort the given array by using shell sort.\n// Examples:\n// >>> shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])\n// >>> [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n// >>> shell_sort([24, 22, 39, 34, 87, 73, 68])\n// >>> [22, 24, 34, 39, 68, 73, 87]\n// >>> shell_sort([32, 30, 16, 96, 82, 83, 74])\n// >>> [16, 30, 32, 74, 82, 83, 96]\nfunc shell_sort (my_list []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := shell_sort([]int{12, 23, 4, 5, 3, 2, 12, 81, 56, 95})\n\texpected_1 := []int{2, 3, 4, 5, 12, 12, 23, 56, 81, 95}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := shell_sort([]int{24, 22, 39, 34, 87, 73, 68})\n\texpected_2 := []int{22, 24, 34, 39, 68, 73, 87}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := shell_sort([]int{32, 30, 16, 96, 82, 83, 74})\n\texpected_3 := []int{16, 30, 32, 74, 82, 83, 96}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort the given array by using shell sort.", "entry_point": "shell_sort", "canonical_solution": null}
{"task_id": "MBGP/429", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to extract the elementwise and tuples from the given two tuples.\n// Examples:\n// >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n// >>> (0, 0, 2, 1)\n// >>> and_tuples((1, 2, 3, 4), (5, 6, 7, 8))\n// >>> (1, 2, 3, 0)\n// >>> and_tuples((8, 9, 11, 12), (7, 13, 14, 17))\n// >>> (0, 9, 10, 0)\nfunc and_tuples (test_tup1 []int, test_tup2 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := and_tuples([]int{10, 4, 6, 9},[]int{5, 2, 3, 3})\n\texpected_1 := []int{0, 0, 2, 1}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := and_tuples([]int{1, 2, 3, 4},[]int{5, 6, 7, 8})\n\texpected_2 := []int{1, 2, 3, 0}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := and_tuples([]int{8, 9, 11, 12},[]int{7, 13, 14, 17})\n\texpected_3 := []int{0, 9, 10, 0}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to extract the elementwise and tuples from the given two tuples.", "entry_point": "and_tuples", "canonical_solution": null}
{"task_id": "MBGP/430", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the directrix of a parabola.\n// Examples:\n// >>> parabola_directrix(5,3,2)\n// >>> -198\n// >>> parabola_directrix(9,8,4)\n// >>> -2336\n// >>> parabola_directrix(2,4,6)\n// >>> -130\nfunc parabola_directrix (a int, b int, c int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := parabola_directrix(5,3,2)\n\texpected_1 := -198\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := parabola_directrix(9,8,4)\n\texpected_2 := -2336\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := parabola_directrix(2,4,6)\n\texpected_3 := -130\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the directrix of a parabola.", "entry_point": "parabola_directrix", "canonical_solution": null}
{"task_id": "MBGP/431", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function that takes two lists and returns true if they have at least one common element.\n// Examples:\n// >>> common_element([1,2,3,4,5], [5,6,7,8,9])\n// >>> True\n// >>> common_element([1,2,3,4,5], [6,7,8,9])\n// >>> None\n// >>> common_element(['a','b','c'], ['d','b','e'])\n// >>> True\nfunc common_element (list1 []interface{}, list2 []interface{}) interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := common_element([]interface{}{1, 2, 3, 4, 5},[]interface{}{5, 6, 7, 8, 9})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := common_element([]interface{}{1, 2, 3, 4, 5},[]interface{}{6, 7, 8, 9})\n\texpected_2 := nil\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := common_element([]interface{}{\"a\", \"b\", \"c\"},[]interface{}{\"d\", \"b\", \"e\"})\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function that takes two lists and returns true if they have at least one common element.", "entry_point": "common_element", "canonical_solution": null}
{"task_id": "MBGP/432", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the median of a trapezium.\n// Examples:\n// >>> median_trapezium(15,25,35)\n// >>> 20\n// >>> median_trapezium(10,20,30)\n// >>> 15\n// >>> median_trapezium(6,9,4)\n// >>> 7.5\nfunc median_trapezium (base1 int, base2 int, height int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := median_trapezium(15,25,35)\n\texpected_1 := 20.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := median_trapezium(10,20,30)\n\texpected_2 := 15.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := median_trapezium(6,9,4)\n\texpected_3 := 7.5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the median of a trapezium.", "entry_point": "median_trapezium", "canonical_solution": null}
{"task_id": "MBGP/433", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check whether the entered number is greater than the elements of the given array.\n// Examples:\n// >>> check_greater([1, 2, 3, 4, 5], 4)\n// >>> 'No, entered number is less than those in the array'\n// >>> check_greater([2, 3, 4, 5, 6], 8)\n// >>> 'Yes, the entered number is greater than those in the array'\n// >>> check_greater([9, 7, 4, 8, 6, 1], 11)\n// >>> 'Yes, the entered number is greater than those in the array'\nfunc check_greater (arr []int, number int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_greater([]int{1, 2, 3, 4, 5},4)\n\texpected_1 := \"No, entered number is less than those in the array\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_greater([]int{2, 3, 4, 5, 6},8)\n\texpected_2 := \"Yes, the entered number is greater than those in the array\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_greater([]int{9, 7, 4, 8, 6, 1},11)\n\texpected_3 := \"Yes, the entered number is greater than those in the array\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check whether the entered number is greater than the elements of the given array.", "entry_point": "check_greater", "canonical_solution": null}
{"task_id": "MBGP/434", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function that matches a string that has an a followed by one or more b's.\n// Examples:\n// >>> text_match_one(\"ac\")\n// >>> ('Not matched!')\n// >>> text_match_one(\"dc\")\n// >>> ('Not matched!')\n// >>> text_match_one(\"abba\")\n// >>> ('Found a match!')\nfunc text_match_one (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := text_match_one(\"ac\")\n\texpected_1 := \"Not matched!\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := text_match_one(\"dc\")\n\texpected_2 := \"Not matched!\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := text_match_one(\"abba\")\n\texpected_3 := \"Found a match!\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function that matches a string that has an a followed by one or more b's.", "entry_point": "text_match_one", "canonical_solution": null}
{"task_id": "MBGP/435", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the last digit of a given number.\n// Examples:\n// >>> last_Digit(123)\n// >>> 3\n// >>> last_Digit(25)\n// >>> 5\n// >>> last_Digit(30)\n// >>> 0\nfunc last_Digit (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := last_Digit(123)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := last_Digit(25)\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := last_Digit(30)\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the last digit of a given number.", "entry_point": "last_Digit", "canonical_solution": null}
{"task_id": "MBGP/436", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to print negative numbers in a list.\n// Examples:\n// >>> neg_nos([-1,4,5,-6])\n// >>> -1,-6\n// >>> neg_nos([-1,-2,3,4])\n// >>> -1,-2\n// >>> neg_nos([-7,-6,8,9])\n// >>> -7,-6\nfunc neg_nos (list1 []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := neg_nos([]int{-1, 4, 5, -6})\n\texpected_1 := -1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := neg_nos([]int{-1, -2, 3, 4})\n\texpected_2 := -1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := neg_nos([]int{-7, -6, 8, 9})\n\texpected_3 := -7\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to print negative numbers in a list.", "entry_point": "neg_nos", "canonical_solution": null}
{"task_id": "MBGP/437", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove odd characters in a string.\n// Examples:\n// >>> remove_odd(\"python\")\n// >>> (\"yhn\")\n// >>> remove_odd(\"program\")\n// >>> (\"rga\")\n// >>> remove_odd(\"language\")\n// >>> (\"agae\")\nfunc remove_odd (str1 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_odd(\"python\")\n\texpected_1 := \"yhn\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_odd(\"program\")\n\texpected_2 := \"rga\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_odd(\"language\")\n\texpected_3 := \"agae\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove odd characters in a string.", "entry_point": "remove_odd", "canonical_solution": null}
{"task_id": "MBGP/438", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count bidirectional tuple pairs.\n// Examples:\n// >>> count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] )\n// >>> '3'\n// >>> count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] )\n// >>> '2'\n// >>> count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] )\n// >>> '4'\nfunc count_bidirectional (test_list [][]int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_bidirectional([][]int{[]int{5, 6}, []int{1, 2}, []int{6, 5}, []int{9, 1}, []int{6, 5}, []int{2, 1}})\n\texpected_1 := \"3\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_bidirectional([][]int{[]int{5, 6}, []int{1, 3}, []int{6, 5}, []int{9, 1}, []int{6, 5}, []int{2, 1}})\n\texpected_2 := \"2\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_bidirectional([][]int{[]int{5, 6}, []int{1, 2}, []int{6, 5}, []int{9, 2}, []int{6, 5}, []int{2, 1}})\n\texpected_3 := \"4\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count bidirectional tuple pairs.", "entry_point": "count_bidirectional", "canonical_solution": null}
{"task_id": "MBGP/439", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert a list of multiple integers into a single integer.\n// Examples:\n// >>> multiple_to_single([11, 33, 50])\n// >>> 113350\n// >>> multiple_to_single([-1,2,3,4,5,6])\n// >>> -123456\n// >>> multiple_to_single([10,15,20,25])\n// >>> 10152025\nfunc multiple_to_single (L []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := multiple_to_single([]int{11, 33, 50})\n\texpected_1 := 113350\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := multiple_to_single([]int{-1, 2, 3, 4, 5, 6})\n\texpected_2 := -123456\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := multiple_to_single([]int{10, 15, 20, 25})\n\texpected_3 := 10152025\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert a list of multiple integers into a single integer.", "entry_point": "multiple_to_single", "canonical_solution": null}
{"task_id": "MBGP/440", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find all adverbs and their positions in a given sentence.\n// Examples:\n// >>> find_adverb_position(\"clearly!! we can see the sky\")\n// >>> (0, 7, 'clearly')\n// >>> find_adverb_position(\"seriously!! there are many roses\")\n// >>> (0, 9, 'seriously')\n// >>> find_adverb_position(\"unfortunately!! sita is going to home\")\n// >>> (0, 13, 'unfortunately')\nfunc find_adverb_position (text string) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_adverb_position(\"clearly!! we can see the sky\")\n\texpected_1 := []interface{}{0, 7, \"clearly\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_adverb_position(\"seriously!! there are many roses\")\n\texpected_2 := []interface{}{0, 9, \"seriously\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_adverb_position(\"unfortunately!! sita is going to home\")\n\texpected_3 := []interface{}{0, 13, \"unfortunately\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find all adverbs and their positions in a given sentence.", "entry_point": "find_adverb_position", "canonical_solution": null}
{"task_id": "MBGP/441", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the surface area of a cube.\n// Examples:\n// >>> surfacearea_cube(5)\n// >>> 150\n// >>> surfacearea_cube(3)\n// >>> 54\n// >>> surfacearea_cube(10)\n// >>> 600\nfunc surfacearea_cube (l int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := surfacearea_cube(5)\n\texpected_1 := 150\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := surfacearea_cube(3)\n\texpected_2 := 54\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := surfacearea_cube(10)\n\texpected_3 := 600\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the surface area of a cube.", "entry_point": "surfacearea_cube", "canonical_solution": null}
{"task_id": "MBGP/442", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the ration of positive numbers in an array of integers.\n// Examples:\n// >>> positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n// >>> 0.54\n// >>> positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n// >>> 0.69\n// >>> positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])\n// >>> 0.56\nfunc positive_count (nums []int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := positive_count([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8})\n\texpected_1 := 0.54\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := positive_count([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8})\n\texpected_2 := 0.69\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := positive_count([]int{2, 4, -6, -9, 11, -12, 14, -5, 17})\n\texpected_3 := 0.56\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the ration of positive numbers in an array of integers.", "entry_point": "positive_count", "canonical_solution": null}
{"task_id": "MBGP/443", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the largest negative number from the given list.\n// Examples:\n// >>> largest_neg([1,2,3,-4,-6])\n// >>> -6\n// >>> largest_neg([1,2,3,-8,-9])\n// >>> -9\n// >>> largest_neg([1,2,3,4,-1])\n// >>> -1\nfunc largest_neg (list1 []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := largest_neg([]int{1, 2, 3, -4, -6})\n\texpected_1 := -6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := largest_neg([]int{1, 2, 3, -8, -9})\n\texpected_2 := -9\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := largest_neg([]int{1, 2, 3, 4, -1})\n\texpected_3 := -1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the largest negative number from the given list.", "entry_point": "largest_neg", "canonical_solution": null}
{"task_id": "MBGP/444", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to trim each tuple by k in the given tuple list.\n// Examples:\n// >>> trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2)\n// >>> '[(2,), (9,), (2,), (2,)]'\n// >>> trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1)\n// >>> '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\n// >>> trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1)\n// >>> '[(8, 4), (8, 12), (1, 7), (6, 9)]'\nfunc trim_tuple (test_list [][]int, K int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := trim_tuple([][]int{[]int{5, 3, 2, 1, 4}, []int{3, 4, 9, 2, 1}, []int{9, 1, 2, 3, 5}, []int{4, 8, 2, 1, 7}},2)\n\texpected_1 := \"[(2,), (9,), (2,), (2,)]\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := trim_tuple([][]int{[]int{5, 3, 2, 1, 4}, []int{3, 4, 9, 2, 1}, []int{9, 1, 2, 3, 5}, []int{4, 8, 2, 1, 7}},1)\n\texpected_2 := \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := trim_tuple([][]int{[]int{7, 8, 4, 9}, []int{11, 8, 12, 4}, []int{4, 1, 7, 8}, []int{3, 6, 9, 7}},1)\n\texpected_3 := \"[(8, 4), (8, 12), (1, 7), (6, 9)]\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to trim each tuple by k in the given tuple list.", "entry_point": "trim_tuple", "canonical_solution": null}
{"task_id": "MBGP/445", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n// Examples:\n// >>> index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) )\n// >>> ((6, 21), (12, 45), (2, 9), (7, 30))\n// >>> index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) )\n// >>> ((14, 32), (20, 60), (6, 20), (16, 44))\n// >>> index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) )\n// >>> ((24, 45), (30, 77), (12, 33), (27, 60))\nfunc index_multiplication (test_tup1 [][]int, test_tup2 [][]int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := index_multiplication([][]int{[]int{1, 3}, []int{4, 5}, []int{2, 9}, []int{1, 10}},[][]int{[]int{6, 7}, []int{3, 9}, []int{1, 1}, []int{7, 3}})\n\texpected_1 := [][]int{[]int{6, 21}, []int{12, 45}, []int{2, 9}, []int{7, 30}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := index_multiplication([][]int{[]int{2, 4}, []int{5, 6}, []int{3, 10}, []int{2, 11}},[][]int{[]int{7, 8}, []int{4, 10}, []int{2, 2}, []int{8, 4}})\n\texpected_2 := [][]int{[]int{14, 32}, []int{20, 60}, []int{6, 20}, []int{16, 44}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := index_multiplication([][]int{[]int{3, 5}, []int{6, 7}, []int{4, 11}, []int{3, 12}},[][]int{[]int{8, 9}, []int{5, 11}, []int{3, 3}, []int{9, 5}})\n\texpected_3 := [][]int{[]int{24, 45}, []int{30, 77}, []int{12, 33}, []int{27, 60}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "entry_point": "index_multiplication", "canonical_solution": null}
{"task_id": "MBGP/446", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the occurence of all elements of list in a tuple.\n// Examples:\n// >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] )\n// >>> 3\n// >>> count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7])\n// >>> 6\n// >>> count_Occurrence((1,2,3,4,5,6),[1,2])\n// >>> 2\nfunc count_Occurrence (tup []interface{}, lst []interface{}) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Occurrence([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"},[]interface{}{\"a\", \"b\"})\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Occurrence([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4},[]interface{}{1, 4, 7})\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Occurrence([]interface{}{1, 2, 3, 4, 5, 6},[]interface{}{1, 2})\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the occurence of all elements of list in a tuple.", "entry_point": "count_Occurrence", "canonical_solution": null}
{"task_id": "MBGP/447", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find cubes of individual elements in a list using lambda function.\n// Examples:\n// >>> cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n// >>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n// >>> cube_nums([10,20,30])\n// >>> ([1000, 8000, 27000])\n// >>> cube_nums([12,15])\n// >>> ([1728, 3375])\nfunc cube_nums (nums []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := cube_nums([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n\texpected_1 := []int{1, 8, 27, 64, 125, 216, 343, 512, 729, 1000}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := cube_nums([]int{10, 20, 30})\n\texpected_2 := []int{1000, 8000, 27000}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := cube_nums([]int{12, 15})\n\texpected_3 := []int{1728, 3375}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find cubes of individual elements in a list using lambda function.", "entry_point": "cube_nums", "canonical_solution": null}
{"task_id": "MBGP/448", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate the sum of perrin numbers.\n// Examples:\n// >>> cal_sum(9)\n// >>> 49\n// >>> cal_sum(10)\n// >>> 66\n// >>> cal_sum(11)\n// >>> 88\nfunc cal_sum (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := cal_sum(9)\n\texpected_1 := 49\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := cal_sum(10)\n\texpected_2 := 66\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := cal_sum(11)\n\texpected_3 := 88\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate the sum of perrin numbers.", "entry_point": "cal_sum", "canonical_solution": null}
{"task_id": "MBGP/449", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the triangle is valid or not if 3 points are given.\n// Examples:\n// >>> check_Triangle(1,5,2,5,4,6)\n// >>> 'Yes'\n// >>> check_Triangle(1,1,1,4,1,5)\n// >>> 'No'\n// >>> check_Triangle(1,1,1,1,1,1)\n// >>> 'No'\nfunc check_Triangle (x1 int, y1 int, x2 int, y2 int, x3 int, y3 int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_Triangle(1,5,2,5,4,6)\n\texpected_1 := \"Yes\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_Triangle(1,1,1,4,1,5)\n\texpected_2 := \"No\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_Triangle(1,1,1,1,1,1)\n\texpected_3 := \"No\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the triangle is valid or not if 3 points are given.", "entry_point": "check_Triangle", "canonical_solution": null}
{"task_id": "MBGP/450", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to extract specified size of strings from a give list of string values.\n// Examples:\n// >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)\n// >>> ['practice', 'solution']\n// >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)\n// >>> ['Python']\n// >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)\n// >>> ['exercises']\nfunc extract_string (str []string, l int) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := extract_string([]string{\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"},8)\n\texpected_1 := []string{\"practice\", \"solution\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := extract_string([]string{\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"},6)\n\texpected_2 := []string{\"Python\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := extract_string([]string{\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"},9)\n\texpected_3 := []string{\"exercises\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to extract specified size of strings from a give list of string values.", "entry_point": "extract_string", "canonical_solution": null}
{"task_id": "MBGP/451", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove all whitespaces from the given string using regex.\n// Examples:\n// >>> remove_whitespaces(' Google    Flutter ')\n// >>> 'GoogleFlutter'\n// >>> remove_whitespaces(' Google    Dart ')\n// >>> 'GoogleDart'\n// >>> remove_whitespaces(' iOS    Swift ')\n// >>> 'iOSSwift'\nfunc remove_whitespaces (text1 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_whitespaces(\" Google    Flutter \")\n\texpected_1 := \"GoogleFlutter\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_whitespaces(\" Google    Dart \")\n\texpected_2 := \"GoogleDart\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_whitespaces(\" iOS    Swift \")\n\texpected_3 := \"iOSSwift\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove all whitespaces from the given string using regex.", "entry_point": "remove_whitespaces", "canonical_solution": null}
{"task_id": "MBGP/452", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function that gives loss amount if the given amount has loss else return nil.\n// Examples:\n// >>> loss_amount(1500,1200)\n// >>> None\n// >>> loss_amount(100,200)\n// >>> 100\n// >>> loss_amount(2000,5000)\n// >>> 3000\nfunc loss_amount (actual_cost int, sale_amount int) interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := loss_amount(1500,1200)\n\texpected_1 := nil\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := loss_amount(100,200)\n\texpected_2 := 100\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := loss_amount(2000,5000)\n\texpected_3 := 3000\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function that gives loss amount if the given amount has loss else return nil.", "entry_point": "loss_amount", "canonical_solution": null}
{"task_id": "MBGP/453", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of even factors of a number.\n// Examples:\n// >>> sumofFactors(18)\n// >>> 26\n// >>> sumofFactors(30)\n// >>> 48\n// >>> sumofFactors(6)\n// >>> 8\nfunc sumofFactors (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sumofFactors(18)\n\texpected_1 := 26\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sumofFactors(30)\n\texpected_2 := 48\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sumofFactors(6)\n\texpected_3 := 8\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of even factors of a number.", "entry_point": "sumofFactors", "canonical_solution": null}
{"task_id": "MBGP/454", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function that matches a word containing 'z'.\n// Examples:\n// >>> text_match_wordz(\"pythonz.\")\n// >>> ('Found a match!')\n// >>> text_match_wordz(\"xyz.\")\n// >>> ('Found a match!')\n// >>> text_match_wordz(\"  lang  .\")\n// >>> ('Not matched!')\nfunc text_match_wordz (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := text_match_wordz(\"pythonz.\")\n\texpected_1 := \"Found a match!\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := text_match_wordz(\"xyz.\")\n\texpected_2 := \"Found a match!\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := text_match_wordz(\"  lang  .\")\n\texpected_3 := \"Not matched!\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function that matches a word containing 'z'.", "entry_point": "text_match_wordz", "canonical_solution": null}
{"task_id": "MBGP/455", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check whether the given month number contains 31 days or not.\n// Examples:\n// >>> check_monthnumb_number(5)\n// >>> True\n// >>> check_monthnumb_number(2)\n// >>> False\n// >>> check_monthnumb_number(6)\n// >>> False\nfunc check_monthnumb_number (monthnum2 int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_monthnumb_number(5)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_monthnumb_number(2)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_monthnumb_number(6)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check whether the given month number contains 31 days or not.", "entry_point": "check_monthnumb_number", "canonical_solution": null}
{"task_id": "MBGP/456", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to reverse strings in a given list of string values.\n// Examples:\n// >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n// >>> ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n// >>> reverse_string_list(['john','amal','joel','george'])\n// >>> ['nhoj','lama','leoj','egroeg']\n// >>> reverse_string_list(['jack','john','mary'])\n// >>> ['kcaj','nhoj','yram']\nfunc reverse_string_list (stringlist []string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := reverse_string_list([]string{\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"})\n\texpected_1 := []string{\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := reverse_string_list([]string{\"john\", \"amal\", \"joel\", \"george\"})\n\texpected_2 := []string{\"nhoj\", \"lama\", \"leoj\", \"egroeg\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := reverse_string_list([]string{\"jack\", \"john\", \"mary\"})\n\texpected_3 := []string{\"kcaj\", \"nhoj\", \"yram\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to reverse strings in a given list of string values.", "entry_point": "reverse_string_list", "canonical_solution": null}
{"task_id": "MBGP/457", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sublist having minimum length.\n// Examples:\n// >>> Find_Min([[1],[1,2],[1,2,3]])\n// >>> [1]\n// >>> Find_Min([[1,1],[1,1,1],[1,2,7,8]])\n// >>> [1,1]\n// >>> Find_Min([['x'],['x','y'],['x','y','z']])\n// >>> ['x']\nfunc Find_Min (lst []interface{}) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Find_Min([]interface{}{[]interface{}{1}, []interface{}{1, 2}, []interface{}{1, 2, 3}})\n\texpected_1 := []interface{}{1}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Find_Min([]interface{}{[]interface{}{1, 1}, []interface{}{1, 1, 1}, []interface{}{1, 2, 7, 8}})\n\texpected_2 := []interface{}{1, 1}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Find_Min([]interface{}{[]interface{}{\"x\"}, []interface{}{\"x\", \"y\"}, []interface{}{\"x\", \"y\", \"z\"}})\n\texpected_3 := []interface{}{\"x\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sublist having minimum length.", "entry_point": "Find_Min", "canonical_solution": null}
{"task_id": "MBGP/458", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the area of a rectangle.\n// Examples:\n// >>> rectangle_area(10,20)\n// >>> 200\n// >>> rectangle_area(10,5)\n// >>> 50\n// >>> rectangle_area(4,2)\n// >>> 8\nfunc rectangle_area (l int, b int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := rectangle_area(10,20)\n\texpected_1 := 200\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := rectangle_area(10,5)\n\texpected_2 := 50\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := rectangle_area(4,2)\n\texpected_3 := 8\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the area of a rectangle.", "entry_point": "rectangle_area", "canonical_solution": null}
{"task_id": "MBGP/459", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove uppercase substrings from a given string by using regex.\n// Examples:\n// >>> remove_uppercase('cAstyoUrFavoRitETVshoWs')\n// >>> 'cstyoravoitshos'\n// >>> remove_uppercase('wAtchTheinTernEtrAdIo')\n// >>> 'wtchheinerntrdo'\n// >>> remove_uppercase('VoicESeaRchAndreComMendaTionS')\n// >>> 'oiceachndreomendaion'\nfunc remove_uppercase (str1 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_uppercase(\"cAstyoUrFavoRitETVshoWs\")\n\texpected_1 := \"cstyoravoitshos\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_uppercase(\"wAtchTheinTernEtrAdIo\")\n\texpected_2 := \"wtchheinerntrdo\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_uppercase(\"VoicESeaRchAndreComMendaTionS\")\n\texpected_3 := \"oiceachndreomendaion\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove uppercase substrings from a given string by using regex.", "entry_point": "remove_uppercase", "canonical_solution": null}
{"task_id": "MBGP/460", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to get the first element of each sublist.\n// Examples:\n// >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n// >>> [1, 3, 6]\n// >>> Extract([[1,2,3],[4, 5]])\n// >>> [1,4]\n// >>> Extract([[9,8,1],[1,2]])\n// >>> [9,1]\nfunc Extract (lst [][]int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Extract([][]int{[]int{1, 2}, []int{3, 4, 5}, []int{6, 7, 8, 9}})\n\texpected_1 := []int{1, 3, 6}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Extract([][]int{[]int{1, 2, 3}, []int{4, 5}})\n\texpected_2 := []int{1, 4}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Extract([][]int{[]int{9, 8, 1}, []int{1, 2}})\n\texpected_3 := []int{9, 1}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to get the first element of each sublist.", "entry_point": "Extract", "canonical_solution": null}
{"task_id": "MBGP/461", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the upper case characters in a given string.\n// Examples:\n// >>> upper_ctr('PYthon')\n// >>> 1\n// >>> upper_ctr('BigData')\n// >>> 1\n// >>> upper_ctr('program')\n// >>> 0\nfunc upper_ctr (str string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := upper_ctr(\"PYthon\")\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := upper_ctr(\"BigData\")\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := upper_ctr(\"program\")\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the upper case characters in a given string.", "entry_point": "upper_ctr", "canonical_solution": null}
{"task_id": "MBGP/462", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find all possible combinations of the elements of a given list.\n// Examples:\n// >>> combinations_list(['orange', 'red', 'green', 'blue'])\n// >>> [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n// >>> combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])\n// >>> [[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n// >>> combinations_list(['red', 'green', 'black', 'orange'])\n// >>> [[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\nfunc combinations_list (list1 []string) [][]string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := combinations_list([]string{\"orange\", \"red\", \"green\", \"blue\"})\n\texpected_1 := [][]string{[]string{}, []string{\"orange\"}, []string{\"red\"}, []string{\"red\", \"orange\"}, []string{\"green\"}, []string{\"green\", \"orange\"}, []string{\"green\", \"red\"}, []string{\"green\", \"red\", \"orange\"}, []string{\"blue\"}, []string{\"blue\", \"orange\"}, []string{\"blue\", \"red\"}, []string{\"blue\", \"red\", \"orange\"}, []string{\"blue\", \"green\"}, []string{\"blue\", \"green\", \"orange\"}, []string{\"blue\", \"green\", \"red\"}, []string{\"blue\", \"green\", \"red\", \"orange\"}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := combinations_list([]string{\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"})\n\texpected_2 := [][]string{[]string{}, []string{\"red\"}, []string{\"green\"}, []string{\"green\", \"red\"}, []string{\"blue\"}, []string{\"blue\", \"red\"}, []string{\"blue\", \"green\"}, []string{\"blue\", \"green\", \"red\"}, []string{\"white\"}, []string{\"white\", \"red\"}, []string{\"white\", \"green\"}, []string{\"white\", \"green\", \"red\"}, []string{\"white\", \"blue\"}, []string{\"white\", \"blue\", \"red\"}, []string{\"white\", \"blue\", \"green\"}, []string{\"white\", \"blue\", \"green\", \"red\"}, []string{\"black\"}, []string{\"black\", \"red\"}, []string{\"black\", \"green\"}, []string{\"black\", \"green\", \"red\"}, []string{\"black\", \"blue\"}, []string{\"black\", \"blue\", \"red\"}, []string{\"black\", \"blue\", \"green\"}, []string{\"black\", \"blue\", \"green\", \"red\"}, []string{\"black\", \"white\"}, []string{\"black\", \"white\", \"red\"}, []string{\"black\", \"white\", \"green\"}, []string{\"black\", \"white\", \"green\", \"red\"}, []string{\"black\", \"white\", \"blue\"}, []string{\"black\", \"white\", \"blue\", \"red\"}, []string{\"black\", \"white\", \"blue\", \"green\"}, []string{\"black\", \"white\", \"blue\", \"green\", \"red\"}, []string{\"orange\"}, []string{\"orange\", \"red\"}, []string{\"orange\", \"green\"}, []string{\"orange\", \"green\", \"red\"}, []string{\"orange\", \"blue\"}, []string{\"orange\", \"blue\", \"red\"}, []string{\"orange\", \"blue\", \"green\"}, []string{\"orange\", \"blue\", \"green\", \"red\"}, []string{\"orange\", \"white\"}, []string{\"orange\", \"white\", \"red\"}, []string{\"orange\", \"white\", \"green\"}, []string{\"orange\", \"white\", \"green\", \"red\"}, []string{\"orange\", \"white\", \"blue\"}, []string{\"orange\", \"white\", \"blue\", \"red\"}, []string{\"orange\", \"white\", \"blue\", \"green\"}, []string{\"orange\", \"white\", \"blue\", \"green\", \"red\"}, []string{\"orange\", \"black\"}, []string{\"orange\", \"black\", \"red\"}, []string{\"orange\", \"black\", \"green\"}, []string{\"orange\", \"black\", \"green\", \"red\"}, []string{\"orange\", \"black\", \"blue\"}, []string{\"orange\", \"black\", \"blue\", \"red\"}, []string{\"orange\", \"black\", \"blue\", \"green\"}, []string{\"orange\", \"black\", \"blue\", \"green\", \"red\"}, []string{\"orange\", \"black\", \"white\"}, []string{\"orange\", \"black\", \"white\", \"red\"}, []string{\"orange\", \"black\", \"white\", \"green\"}, []string{\"orange\", \"black\", \"white\", \"green\", \"red\"}, []string{\"orange\", \"black\", \"white\", \"blue\"}, []string{\"orange\", \"black\", \"white\", \"blue\", \"red\"}, []string{\"orange\", \"black\", \"white\", \"blue\", \"green\"}, []string{\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := combinations_list([]string{\"red\", \"green\", \"black\", \"orange\"})\n\texpected_3 := [][]string{[]string{}, []string{\"red\"}, []string{\"green\"}, []string{\"green\", \"red\"}, []string{\"black\"}, []string{\"black\", \"red\"}, []string{\"black\", \"green\"}, []string{\"black\", \"green\", \"red\"}, []string{\"orange\"}, []string{\"orange\", \"red\"}, []string{\"orange\", \"green\"}, []string{\"orange\", \"green\", \"red\"}, []string{\"orange\", \"black\"}, []string{\"orange\", \"black\", \"red\"}, []string{\"orange\", \"black\", \"green\"}, []string{\"orange\", \"black\", \"green\", \"red\"}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find all possible combinations of the elements of a given list.", "entry_point": "combinations_list", "canonical_solution": null}
{"task_id": "MBGP/463", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the maximum product subarray of the given array.\n// Examples:\n// >>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n// >>> 112\n// >>> max_subarray_product([6, -3, -10, 0, 2])\n// >>> 180\n// >>> max_subarray_product([-2, -40, 0, -2, -3])\n// >>> 80\nfunc max_subarray_product (arr []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_subarray_product([]int{1, -2, -3, 0, 7, -8, -2})\n\texpected_1 := 112\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_subarray_product([]int{6, -3, -10, 0, 2})\n\texpected_2 := 180\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_subarray_product([]int{-2, -40, 0, -2, -3})\n\texpected_3 := 80\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the maximum product subarray of the given array.", "entry_point": "max_subarray_product", "canonical_solution": null}
{"task_id": "MBGP/464", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if all values are same in a dictionary.\n// Examples:\n// >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)\n// >>> False\n// >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)\n// >>> True\n// >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)\n// >>> False\nfunc check_value (dict map[string]int, n int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_value(map[string]int{ \"Cierra Vega\": 12, \"Alden Cantrell\": 12, \"Kierra Gentry\": 12, \"Pierre Cox\": 12,  },10)\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_value(map[string]int{ \"Cierra Vega\": 12, \"Alden Cantrell\": 12, \"Kierra Gentry\": 12, \"Pierre Cox\": 12,  },12)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_value(map[string]int{ \"Cierra Vega\": 12, \"Alden Cantrell\": 12, \"Kierra Gentry\": 12, \"Pierre Cox\": 12,  },5)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if all values are same in a dictionary.", "entry_point": "check_value", "canonical_solution": null}
{"task_id": "MBGP/465", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to drop empty items from a given dictionary.\n// Examples:\n// >>> drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})\n// >>> {'c1': 'Red', 'c2': 'Green'}\n// >>> drop_empty({'c1': 'Red', 'c2': None, 'c3':None})\n// >>> {'c1': 'Red'}\n// >>> drop_empty({'c1': None, 'c2': 'Green', 'c3':None})\n// >>> { 'c2': 'Green'}\nfunc drop_empty (dict1 map[string]interface{}) map[string]string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := drop_empty(map[string]interface{}{ \"c1\": \"Red\", \"c2\": \"Green\", \"c3\": nil,  })\n\texpected_1 := map[string]string{ \"c1\": \"Red\", \"c2\": \"Green\",  }\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := drop_empty(map[string]interface{}{ \"c1\": \"Red\", \"c2\": nil, \"c3\": nil,  })\n\texpected_2 := map[string]string{ \"c1\": \"Red\",  }\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := drop_empty(map[string]interface{}{ \"c1\": nil, \"c2\": \"Green\", \"c3\": nil,  })\n\texpected_3 := map[string]string{ \"c2\": \"Green\",  }\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to drop empty items from a given dictionary.", "entry_point": "drop_empty", "canonical_solution": null}
{"task_id": "MBGP/466", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the peak element in the given array.\n// Examples:\n// >>> find_peak([1, 3, 20, 4, 1, 0], 6)\n// >>> 2\n// >>> find_peak([2, 3, 4, 5, 6], 5)\n// >>> 4\n// >>> find_peak([8, 9, 11, 12, 14, 15], 6)\n// >>> 5\nfunc find_peak (arr []int, low int, high int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_peak([]int{1, 3, 20, 4, 1, 0},0,5,6)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_peak([]int{2, 3, 4, 5, 6},0,4,5)\n\texpected_2 := 4\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_peak([]int{8, 9, 11, 12, 14, 15},0,5,6)\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the peak element in the given array.", "entry_point": "find_peak", "canonical_solution": null}
{"task_id": "MBGP/467", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to convert decimal number to octal number.\n// Examples:\n// >>> decimal_to_Octal(10)\n// >>> 12\n// >>> decimal_to_Octal(2)\n// >>> 2\n// >>> decimal_to_Octal(33)\n// >>> 41\nfunc decimal_to_Octal (deciNum int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := decimal_to_Octal(10)\n\texpected_1 := 12\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := decimal_to_Octal(2)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := decimal_to_Octal(33)\n\texpected_3 := 41\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to convert decimal number to octal number.", "entry_point": "decimal_to_Octal", "canonical_solution": null}
{"task_id": "MBGP/468", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n// Examples:\n// >>> max_product([3, 100, 4, 5, 150, 6], 6)\n// >>> 45000\n// >>> max_product([4, 42, 55, 68, 80], 5)\n// >>> 50265600\n// >>> max_product([10, 22, 9, 33, 21, 50, 41, 60], 8)\n// >>> 21780000\nfunc max_product (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_product([]int{3, 100, 4, 5, 150, 6},6)\n\texpected_1 := 45000\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_product([]int{4, 42, 55, 68, 80},5)\n\texpected_2 := 50265600\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_product([]int{10, 22, 9, 33, 21, 50, 41, 60},8)\n\texpected_3 := 21780000\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "entry_point": "max_product", "canonical_solution": null}
{"task_id": "MBGP/469", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the maximum profit earned from a maximum of k stock transactions\n// Examples:\n// >>> max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3)\n// >>> 10\n// >>> max_profit([2, 4, 7, 5, 4, 3, 5], 2)\n// >>> 7\n// >>> max_profit([10, 6, 8, 4, 2], 2)\n// >>> 2\nfunc max_profit (price []int, k int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_profit([]int{1, 5, 2, 3, 7, 6, 4, 5},3)\n\texpected_1 := 10\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_profit([]int{2, 4, 7, 5, 4, 3, 5},2)\n\texpected_2 := 7\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_profit([]int{10, 6, 8, 4, 2},2)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the maximum profit earned from a maximum of k stock transactions", "entry_point": "max_profit", "canonical_solution": null}
{"task_id": "MBGP/470", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the pairwise addition of the elements of the given tuples.\n// Examples:\n// >>> add_pairwise((1, 5, 7, 8, 10))\n// >>> (6, 12, 15, 18)\n// >>> add_pairwise((2, 6, 8, 9, 11))\n// >>> (8, 14, 17, 20)\n// >>> add_pairwise((3, 7, 9, 10, 12))\n// >>> (10, 16, 19, 22)\nfunc add_pairwise (test_tup []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := add_pairwise([]int{1, 5, 7, 8, 10})\n\texpected_1 := []int{6, 12, 15, 18}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := add_pairwise([]int{2, 6, 8, 9, 11})\n\texpected_2 := []int{8, 14, 17, 20}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := add_pairwise([]int{3, 7, 9, 10, 12})\n\texpected_3 := []int{10, 16, 19, 22}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the pairwise addition of the elements of the given tuples.", "entry_point": "add_pairwise", "canonical_solution": null}
{"task_id": "MBGP/471", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find remainder of array multiplication divided by n.\n// Examples:\n// >>> find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11)\n// >>> 9\n// >>> find_remainder([1,1,1],3,1)\n// >>> 0\n// >>> find_remainder([1,2,1],3,2)\n// >>> 0\nfunc find_remainder (arr []int, lens int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_remainder([]int{100, 10, 5, 25, 35, 14},6,11)\n\texpected_1 := 9\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_remainder([]int{1, 1, 1},3,1)\n\texpected_2 := 0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_remainder([]int{1, 2, 1},3,2)\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find remainder of array multiplication divided by n.", "entry_point": "find_remainder", "canonical_solution": null}
{"task_id": "MBGP/472", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the given list contains consecutive numbers or not.\n// Examples:\n// >>> check_Consecutive([1,2,3,4,5])\n// >>> True\n// >>> check_Consecutive([1,2,3,5,6])\n// >>> False\n// >>> check_Consecutive([1,2,1])\n// >>> False\nfunc check_Consecutive (l []int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_Consecutive([]int{1, 2, 3, 4, 5})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_Consecutive([]int{1, 2, 3, 5, 6})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_Consecutive([]int{1, 2, 1})\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the given list contains consecutive numbers or not.", "entry_point": "check_Consecutive", "canonical_solution": null}
{"task_id": "MBGP/474", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to replace characters in a string.\n// Examples:\n// >>> replace_char(\"polygon\",'y','l')\n// >>> (\"pollgon\")\n// >>> replace_char(\"character\",'c','a')\n// >>> (\"aharaater\")\n// >>> replace_char(\"python\",'l','a')\n// >>> (\"python\")\nfunc replace_char (str1 string, ch string, newch string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := replace_char(\"polygon\",\"y\",\"l\")\n\texpected_1 := \"pollgon\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := replace_char(\"character\",\"c\",\"a\")\n\texpected_2 := \"aharaater\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := replace_char(\"python\",\"l\",\"a\")\n\texpected_3 := \"python\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to replace characters in a string.", "entry_point": "replace_char", "canonical_solution": null}
{"task_id": "MBGP/475", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort counter by value.\n// Examples:\n// >>> sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})\n// >>> [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n// >>> sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})\n// >>> [('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n// >>> sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})\n// >>> [('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\nfunc sort_counter (dict1 map[string]int) [][]interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sort_counter(map[string]int{ \"Math\": 81, \"Physics\": 83, \"Chemistry\": 87,  })\n\texpected_1 := [][]interface{}{[]interface{}{\"Chemistry\", 87}, []interface{}{\"Physics\", 83}, []interface{}{\"Math\", 81}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sort_counter(map[string]int{ \"Math\": 400, \"Physics\": 300, \"Chemistry\": 250,  })\n\texpected_2 := [][]interface{}{[]interface{}{\"Math\", 400}, []interface{}{\"Physics\", 300}, []interface{}{\"Chemistry\", 250}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sort_counter(map[string]int{ \"Math\": 900, \"Physics\": 1000, \"Chemistry\": 1250,  })\n\texpected_3 := [][]interface{}{[]interface{}{\"Chemistry\", 1250}, []interface{}{\"Physics\", 1000}, []interface{}{\"Math\", 900}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort counter by value.", "entry_point": "sort_counter", "canonical_solution": null}
{"task_id": "MBGP/476", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of the largest and smallest value in a given array.\n// Examples:\n// >>> big_sum([1,2,3])\n// >>> 4\n// >>> big_sum([-1,2,3,4])\n// >>> 3\n// >>> big_sum([2,3,6])\n// >>> 8\nfunc big_sum (nums []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := big_sum([]int{1, 2, 3})\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := big_sum([]int{-1, 2, 3, 4})\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := big_sum([]int{2, 3, 6})\n\texpected_3 := 8\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of the largest and smallest value in a given array.", "entry_point": "big_sum", "canonical_solution": null}
{"task_id": "MBGP/477", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to convert the given string to lower case.\n// Examples:\n// >>> is_lower(\"InValid\")\n// >>> \"invalid\"\n// >>> is_lower(\"TruE\")\n// >>> \"true\"\n// >>> is_lower(\"SenTenCE\")\n// >>> \"sentence\"\nfunc is_lower (string0 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_lower(\"InValid\")\n\texpected_1 := \"invalid\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_lower(\"TruE\")\n\texpected_2 := \"true\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_lower(\"SenTenCE\")\n\texpected_3 := \"sentence\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to convert the given string to lower case.", "entry_point": "is_lower", "canonical_solution": null}
{"task_id": "MBGP/478", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove lowercase substrings from a given string.\n// Examples:\n// >>> remove_lowercase(\"PYTHon\")\n// >>> ('PYTH')\n// >>> remove_lowercase(\"FInD\")\n// >>> ('FID')\n// >>> remove_lowercase(\"STRinG\")\n// >>> ('STRG')\nfunc remove_lowercase (str1 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_lowercase(\"PYTHon\")\n\texpected_1 := \"PYTH\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_lowercase(\"FInD\")\n\texpected_2 := \"FID\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_lowercase(\"STRinG\")\n\texpected_3 := \"STRG\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove lowercase substrings from a given string.", "entry_point": "remove_lowercase", "canonical_solution": null}
{"task_id": "MBGP/479", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the first digit of a given number.\n// Examples:\n// >>> first_Digit(123)\n// >>> 1\n// >>> first_Digit(456)\n// >>> 4\n// >>> first_Digit(12)\n// >>> 1\nfunc first_Digit (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := first_Digit(123)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := first_Digit(456)\n\texpected_2 := 4\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := first_Digit(12)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the first digit of a given number.", "entry_point": "first_Digit", "canonical_solution": null}
{"task_id": "MBGP/480", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the maximum occurring character in a given string.\n// Examples:\n// >>> get_max_occuring_char(\"data\")\n// >>> \"a\"\n// >>> get_max_occuring_char(\"create\")\n// >>> \"e\"\n// >>> get_max_occuring_char(\"brilliant girl\")\n// >>> \"i\"\nfunc get_max_occuring_char (str1 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_max_occuring_char(\"data\")\n\texpected_1 := \"a\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_max_occuring_char(\"create\")\n\texpected_2 := \"e\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_max_occuring_char(\"brilliant girl\")\n\texpected_3 := \"i\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the maximum occurring character in a given string.", "entry_point": "get_max_occuring_char", "canonical_solution": null}
{"task_id": "MBGP/481", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n// Examples:\n// >>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9)\n// >>> True\n// >>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30)\n// >>> False\n// >>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15)\n// >>> True\nfunc is_subset_sum (set []int, n int, sum int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_subset_sum([]int{3, 34, 4, 12, 5, 2},6,9)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_subset_sum([]int{3, 34, 4, 12, 5, 2},6,30)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_subset_sum([]int{3, 34, 4, 12, 5, 2},6,15)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.", "entry_point": "is_subset_sum", "canonical_solution": null}
{"task_id": "MBGP/482", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n// Examples:\n// >>> match(\"Geeks\")\n// >>> 'Yes'\n// >>> match(\"geeksforGeeks\")\n// >>> 'Yes'\n// >>> match(\"geeks\")\n// >>> 'No'\nfunc match (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := match(\"Geeks\")\n\texpected_1 := \"Yes\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := match(\"geeksforGeeks\")\n\texpected_2 := \"Yes\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := match(\"geeks\")\n\texpected_3 := \"No\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.", "entry_point": "match", "canonical_solution": null}
{"task_id": "MBGP/483", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the first natural number whose factorial is divisible by x.\n// Examples:\n// >>> first_Factorial_Divisible_Number(10)\n// >>> 5\n// >>> first_Factorial_Divisible_Number(15)\n// >>> 5\n// >>> first_Factorial_Divisible_Number(5)\n// >>> 4\nfunc first_Factorial_Divisible_Number (x int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := first_Factorial_Divisible_Number(10)\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := first_Factorial_Divisible_Number(15)\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := first_Factorial_Divisible_Number(5)\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the first natural number whose factorial is divisible by x.", "entry_point": "first_Factorial_Divisible_Number", "canonical_solution": null}
{"task_id": "MBGP/484", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove the matching tuples from the given two tuples.\n// Examples:\n// >>> remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')])\n// >>> [('you', '?')]\n// >>> remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')])\n// >>> [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\n// >>> remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')])\n// >>> [('Its', 'been'), ('day', 'without')]\nfunc remove_matching_tuple (test_list1 [][]string, test_list2 [][]string) [][]string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_matching_tuple([][]string{[]string{\"Hello\", \"dude\"}, []string{\"How\", \"are\"}, []string{\"you\", \"?\"}},[][]string{[]string{\"Hello\", \"dude\"}, []string{\"How\", \"are\"}})\n\texpected_1 := [][]string{[]string{\"you\", \"?\"}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_matching_tuple([][]string{[]string{\"Part\", \"of\"}, []string{\"the\", \"journey\"}, []string{\"is \", \"end\"}},[][]string{[]string{\"Journey\", \"the\"}, []string{\"is\", \"end\"}})\n\texpected_2 := [][]string{[]string{\"Part\", \"of\"}, []string{\"the\", \"journey\"}, []string{\"is \", \"end\"}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_matching_tuple([][]string{[]string{\"Its\", \"been\"}, []string{\"a\", \"long\"}, []string{\"day\", \"without\"}},[][]string{[]string{\"a\", \"long\"}, []string{\"my\", \"friend\"}})\n\texpected_3 := [][]string{[]string{\"Its\", \"been\"}, []string{\"day\", \"without\"}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove the matching tuples from the given two tuples.", "entry_point": "remove_matching_tuple", "canonical_solution": null}
{"task_id": "MBGP/485", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the largest palindromic number in the given array.\n// Examples:\n// >>> largest_palindrome([1, 232, 54545, 999991], 4)\n// >>> 54545\n// >>> largest_palindrome([1, 2, 3, 4, 5, 50], 6)\n// >>> 5\n// >>> largest_palindrome([1, 3, 7, 9, 45], 5)\n// >>> 9\nfunc largest_palindrome (A []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := largest_palindrome([]int{1, 232, 54545, 999991},4)\n\texpected_1 := 54545\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := largest_palindrome([]int{1, 2, 3, 4, 5, 50},6)\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := largest_palindrome([]int{1, 3, 7, 9, 45},5)\n\texpected_3 := 9\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the largest palindromic number in the given array.", "entry_point": "largest_palindrome", "canonical_solution": null}
{"task_id": "MBGP/486", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to compute binomial probability for the given number.\n// Examples:\n// >>> binomial_probability(10, 5, 1.0/3)\n// >>> 0.13656454808718185\n// >>> binomial_probability(11, 6, 2.0/4)\n// >>> 0.2255859375\n// >>> binomial_probability(12, 7, 3.0/5)\n// >>> 0.227030335488\nfunc binomial_probability (n int, k int, p float64) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := binomial_probability(10,5,0.3333333333333333)\n\texpected_1 := 0.13656454808718185\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := binomial_probability(11,6,0.5)\n\texpected_2 := 0.2255859375\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := binomial_probability(12,7,0.6)\n\texpected_3 := 0.227030335488\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to compute binomial probability for the given number.", "entry_point": "binomial_probability", "canonical_solution": null}
{"task_id": "MBGP/487", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n// Examples:\n// >>> sort_tuple([(1, 3), (3, 2), (2, 1)] )\n// >>> [(2, 1), (3, 2), (1, 3)]\n// >>> sort_tuple([(2, 4), (3, 3), (1, 1)] )\n// >>> [(1, 1), (3, 3), (2, 4)]\n// >>> sort_tuple([(3, 9), (6, 7), (4, 3)] )\n// >>> [(4, 3), (6, 7), (3, 9)]\nfunc sort_tuple (tup [][]int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sort_tuple([][]int{[]int{1, 3}, []int{3, 2}, []int{2, 1}})\n\texpected_1 := [][]int{[]int{2, 1}, []int{3, 2}, []int{1, 3}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sort_tuple([][]int{[]int{2, 4}, []int{3, 3}, []int{1, 1}})\n\texpected_2 := [][]int{[]int{1, 1}, []int{3, 3}, []int{2, 4}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sort_tuple([][]int{[]int{3, 9}, []int{6, 7}, []int{4, 3}})\n\texpected_3 := [][]int{[]int{4, 3}, []int{6, 7}, []int{3, 9}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.", "entry_point": "sort_tuple", "canonical_solution": null}
{"task_id": "MBGP/488", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the area of a pentagon.\n// Examples:\n// >>> area_pentagon(5)\n// >>> 43.01193501472417\n// >>> area_pentagon(10)\n// >>> 172.0477400588967\n// >>> area_pentagon(15)\n// >>> 387.10741513251753\nfunc area_pentagon (a int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := area_pentagon(5)\n\texpected_1 := 43.01193501472417\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := area_pentagon(10)\n\texpected_2 := 172.0477400588967\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := area_pentagon(15)\n\texpected_3 := 387.10741513251753\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the area of a pentagon.", "entry_point": "area_pentagon", "canonical_solution": null}
{"task_id": "MBGP/489", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the frequency of the largest value in a given array.\n// Examples:\n// >>> frequency_Of_Largest(5,[1,2,3,4,4])\n// >>> 2\n// >>> frequency_Of_Largest(3,[5,6,5])\n// >>> 1\n// >>> frequency_Of_Largest(4,[2,7,7,7])\n// >>> 3\nfunc frequency_Of_Largest (n int, arr []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := frequency_Of_Largest(5,[]int{1, 2, 3, 4, 4})\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := frequency_Of_Largest(3,[]int{5, 6, 5})\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := frequency_Of_Largest(4,[]int{2, 7, 7, 7})\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the frequency of the largest value in a given array.", "entry_point": "frequency_Of_Largest", "canonical_solution": null}
{"task_id": "MBGP/491", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the sum of geometric progression series.\n// Examples:\n// >>> sum_gp(1,5,2)\n// >>> 31\n// >>> sum_gp(1,5,4)\n// >>> 341\n// >>> sum_gp(2,6,3)\n// >>> 728\nfunc sum_gp (a int, n int, r int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_gp(1,5,2)\n\texpected_1 := 31.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_gp(1,5,4)\n\texpected_2 := 341.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_gp(2,6,3)\n\texpected_3 := 728.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the sum of geometric progression series.", "entry_point": "sum_gp", "canonical_solution": null}
{"task_id": "MBGP/492", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to search an element in the given array by using binary search.\n// Examples:\n// >>> binary_search([1,2,3,5,8], 6)\n// >>> False\n// >>> binary_search([7, 8, 9, 10, 13], 10)\n// >>> True\n// >>> binary_search([11, 13, 14, 19, 22, 36], 23)\n// >>> False\nfunc binary_search (item_list []int, item int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := binary_search([]int{1, 2, 3, 5, 8},6)\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := binary_search([]int{7, 8, 9, 10, 13},10)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := binary_search([]int{11, 13, 14, 19, 22, 36},23)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to search an element in the given array by using binary search.", "entry_point": "binary_search", "canonical_solution": null}
{"task_id": "MBGP/493", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n// Examples:\n// >>> calculate_polygons(1,1, 4, 4, 3)\n// >>> [[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n// >>> calculate_polygons(5,4,7,9,8)\n// >>> [[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\n// >>> calculate_polygons(9,6,4,3,2)\n// >>> [[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]\nfunc calculate_polygons (startx int, starty int, endx int, endy int, radius int) [][][]float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := calculate_polygons(1,1,4,4,3)\n\texpected_1 := [][][]float64{[][]float64{[]float64{-4.999999999999998, -4.19615242270663}, []float64{-4.999999999999998, -0.7320508075688767}, []float64{-1.9999999999999991, 1.0}, []float64{1.0, -0.7320508075688767}, []float64{1.0, -4.19615242270663}, []float64{-1.9999999999999991, -5.928203230275507}, []float64{-4.999999999999998, -4.19615242270663}}, [][]float64{[]float64{1.0, -4.19615242270663}, []float64{1.0, -0.7320508075688767}, []float64{3.999999999999999, 1.0}, []float64{6.999999999999998, -0.7320508075688767}, []float64{6.999999999999998, -4.19615242270663}, []float64{3.999999999999999, -5.928203230275507}, []float64{1.0, -4.19615242270663}}, [][]float64{[]float64{6.999999999999998, -4.19615242270663}, []float64{6.999999999999998, -0.7320508075688767}, []float64{9.999999999999996, 1.0}, []float64{12.999999999999996, -0.7320508075688767}, []float64{12.999999999999996, -4.19615242270663}, []float64{9.999999999999996, -5.928203230275507}, []float64{6.999999999999998, -4.19615242270663}}, [][]float64{[]float64{-1.9999999999999991, 1.0}, []float64{-1.9999999999999991, 4.4641016151377535}, []float64{1.0, 6.19615242270663}, []float64{3.999999999999999, 4.4641016151377535}, []float64{3.999999999999999, 1.0}, []float64{1.0, -0.7320508075688767}, []float64{-1.9999999999999991, 1.0}}, [][]float64{[]float64{3.999999999999999, 1.0}, []float64{3.999999999999999, 4.4641016151377535}, []float64{6.999999999999998, 6.19615242270663}, []float64{9.999999999999996, 4.4641016151377535}, []float64{9.999999999999996, 1.0}, []float64{6.999999999999998, -0.7320508075688767}, []float64{3.999999999999999, 1.0}}, [][]float64{[]float64{9.999999999999996, 1.0}, []float64{9.999999999999996, 4.4641016151377535}, []float64{12.999999999999996, 6.19615242270663}, []float64{15.999999999999995, 4.4641016151377535}, []float64{15.999999999999995, 1.0}, []float64{12.999999999999996, -0.7320508075688767}, []float64{9.999999999999996, 1.0}}, [][]float64{[]float64{-4.999999999999998, 6.19615242270663}, []float64{-4.999999999999998, 9.660254037844384}, []float64{-1.9999999999999991, 11.39230484541326}, []float64{1.0, 9.660254037844384}, []float64{1.0, 6.19615242270663}, []float64{-1.9999999999999991, 4.4641016151377535}, []float64{-4.999999999999998, 6.19615242270663}}, [][]float64{[]float64{1.0, 6.19615242270663}, []float64{1.0, 9.660254037844384}, []float64{3.999999999999999, 11.39230484541326}, []float64{6.999999999999998, 9.660254037844384}, []float64{6.999999999999998, 6.19615242270663}, []float64{3.999999999999999, 4.4641016151377535}, []float64{1.0, 6.19615242270663}}, [][]float64{[]float64{6.999999999999998, 6.19615242270663}, []float64{6.999999999999998, 9.660254037844384}, []float64{9.999999999999996, 11.39230484541326}, []float64{12.999999999999996, 9.660254037844384}, []float64{12.999999999999996, 6.19615242270663}, []float64{9.999999999999996, 4.4641016151377535}, []float64{6.999999999999998, 6.19615242270663}}, [][]float64{[]float64{-1.9999999999999991, 11.39230484541326}, []float64{-1.9999999999999991, 14.856406460551014}, []float64{1.0, 16.58845726811989}, []float64{3.999999999999999, 14.856406460551014}, []float64{3.999999999999999, 11.39230484541326}, []float64{1.0, 9.660254037844384}, []float64{-1.9999999999999991, 11.39230484541326}}, [][]float64{[]float64{3.999999999999999, 11.39230484541326}, []float64{3.999999999999999, 14.856406460551014}, []float64{6.999999999999998, 16.58845726811989}, []float64{9.999999999999996, 14.856406460551014}, []float64{9.999999999999996, 11.39230484541326}, []float64{6.999999999999998, 9.660254037844384}, []float64{3.999999999999999, 11.39230484541326}}, [][]float64{[]float64{9.999999999999996, 11.39230484541326}, []float64{9.999999999999996, 14.856406460551014}, []float64{12.999999999999996, 16.58845726811989}, []float64{15.999999999999995, 14.856406460551014}, []float64{15.999999999999995, 11.39230484541326}, []float64{12.999999999999996, 9.660254037844384}, []float64{9.999999999999996, 11.39230484541326}}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := calculate_polygons(5,4,7,9,8)\n\texpected_2 := [][][]float64{[][]float64{[]float64{-10.999999999999996, -9.856406460551014}, []float64{-10.999999999999996, -0.6188021535170058}, []float64{-2.9999999999999982, 4.0}, []float64{5.0, -0.6188021535170058}, []float64{5.0, -9.856406460551014}, []float64{-2.9999999999999982, -14.47520861406802}, []float64{-10.999999999999996, -9.856406460551014}}, [][]float64{[]float64{5.0, -9.856406460551014}, []float64{5.0, -0.6188021535170058}, []float64{12.999999999999998, 4.0}, []float64{20.999999999999996, -0.6188021535170058}, []float64{20.999999999999996, -9.856406460551014}, []float64{12.999999999999998, -14.47520861406802}, []float64{5.0, -9.856406460551014}}, [][]float64{[]float64{20.999999999999996, -9.856406460551014}, []float64{20.999999999999996, -0.6188021535170058}, []float64{28.999999999999993, 4.0}, []float64{36.99999999999999, -0.6188021535170058}, []float64{36.99999999999999, -9.856406460551014}, []float64{28.999999999999993, -14.47520861406802}, []float64{20.999999999999996, -9.856406460551014}}, [][]float64{[]float64{-2.9999999999999982, 3.999999999999999}, []float64{-2.9999999999999982, 13.237604307034008}, []float64{5.0, 17.856406460551014}, []float64{12.999999999999998, 13.237604307034008}, []float64{12.999999999999998, 3.999999999999999}, []float64{5.0, -0.6188021535170058}, []float64{-2.9999999999999982, 3.999999999999999}}, [][]float64{[]float64{12.999999999999998, 3.999999999999999}, []float64{12.999999999999998, 13.237604307034008}, []float64{20.999999999999996, 17.856406460551014}, []float64{28.999999999999993, 13.237604307034008}, []float64{28.999999999999993, 3.999999999999999}, []float64{20.999999999999996, -0.6188021535170058}, []float64{12.999999999999998, 3.999999999999999}}, [][]float64{[]float64{-10.999999999999996, 17.856406460551014}, []float64{-10.999999999999996, 27.094010767585022}, []float64{-2.9999999999999982, 31.712812921102028}, []float64{5.0, 27.094010767585022}, []float64{5.0, 17.856406460551014}, []float64{-2.9999999999999982, 13.237604307034008}, []float64{-10.999999999999996, 17.856406460551014}}, [][]float64{[]float64{5.0, 17.856406460551014}, []float64{5.0, 27.094010767585022}, []float64{12.999999999999998, 31.712812921102028}, []float64{20.999999999999996, 27.094010767585022}, []float64{20.999999999999996, 17.856406460551014}, []float64{12.999999999999998, 13.237604307034008}, []float64{5.0, 17.856406460551014}}, [][]float64{[]float64{20.999999999999996, 17.856406460551014}, []float64{20.999999999999996, 27.094010767585022}, []float64{28.999999999999993, 31.712812921102028}, []float64{36.99999999999999, 27.094010767585022}, []float64{36.99999999999999, 17.856406460551014}, []float64{28.999999999999993, 13.237604307034008}, []float64{20.999999999999996, 17.856406460551014}}, [][]float64{[]float64{-2.9999999999999982, 31.712812921102028}, []float64{-2.9999999999999982, 40.95041722813603}, []float64{5.0, 45.56921938165304}, []float64{12.999999999999998, 40.95041722813603}, []float64{12.999999999999998, 31.712812921102028}, []float64{5.0, 27.094010767585022}, []float64{-2.9999999999999982, 31.712812921102028}}, [][]float64{[]float64{12.999999999999998, 31.712812921102028}, []float64{12.999999999999998, 40.95041722813603}, []float64{20.999999999999996, 45.56921938165304}, []float64{28.999999999999993, 40.95041722813603}, []float64{28.999999999999993, 31.712812921102028}, []float64{20.999999999999996, 27.094010767585022}, []float64{12.999999999999998, 31.712812921102028}}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := calculate_polygons(9,6,4,3,2)\n\texpected_3 := [][][]float64{[][]float64{[]float64{5.000000000000001, 2.5358983848622465}, []float64{5.000000000000001, 4.8452994616207485}, []float64{7.0, 6.0}, []float64{9.0, 4.8452994616207485}, []float64{9.0, 2.5358983848622465}, []float64{7.0, 1.381197846482995}, []float64{5.000000000000001, 2.5358983848622465}}, [][]float64{[]float64{7.0, 6.0}, []float64{7.0, 8.309401076758501}, []float64{9.0, 9.464101615137753}, []float64{11.0, 8.309401076758501}, []float64{11.0, 6.0}, []float64{9.0, 4.8452994616207485}, []float64{7.0, 6.0}}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.", "entry_point": "calculate_polygons", "canonical_solution": null}
{"task_id": "MBGP/494", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert the given binary tuple to integer.\n// Examples:\n// >>> binary_to_integer((1, 1, 0, 1, 0, 0, 1))\n// >>> '105'\n// >>> binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1))\n// >>> '101'\n// >>> binary_to_integer((1, 1, 0, 1, 0, 1))\n// >>> '53'\nfunc binary_to_integer (test_tup []int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := binary_to_integer([]int{1, 1, 0, 1, 0, 0, 1})\n\texpected_1 := \"105\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := binary_to_integer([]int{0, 1, 1, 0, 0, 1, 0, 1})\n\texpected_2 := \"101\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := binary_to_integer([]int{1, 1, 0, 1, 0, 1})\n\texpected_3 := \"53\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert the given binary tuple to integer.", "entry_point": "binary_to_integer", "canonical_solution": null}
{"task_id": "MBGP/495", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove lowercase substrings from a given string by using regex.\n// Examples:\n// >>> remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf')\n// >>> 'KDALOOOHLAJSI'\n// >>> remove_lowercase('ProducTnamEstreAmIngMediAplAYer')\n// >>> 'PTEAIMAAY'\n// >>> remove_lowercase('maNufacTuredbYSheZenTechNolOGIes')\n// >>> 'NTYSZTNOGI'\nfunc remove_lowercase (str1 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_lowercase(\"KDeoALOklOOHserfLoAJSIskdsf\")\n\texpected_1 := \"KDALOOOHLAJSI\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_lowercase(\"ProducTnamEstreAmIngMediAplAYer\")\n\texpected_2 := \"PTEAIMAAY\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_lowercase(\"maNufacTuredbYSheZenTechNolOGIes\")\n\texpected_3 := \"NTYSZTNOGI\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove lowercase substrings from a given string by using regex.", "entry_point": "remove_lowercase", "canonical_solution": null}
{"task_id": "MBGP/497", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the surface area of a cone.\n// Examples:\n// >>> surfacearea_cone(5,12)\n// >>> 282.7433388230814\n// >>> surfacearea_cone(10,15)\n// >>> 880.5179353159282\n// >>> surfacearea_cone(19,17)\n// >>> 2655.923961165254\nfunc surfacearea_cone (r int, h int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := surfacearea_cone(5,12)\n\texpected_1 := 282.7433388230814\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := surfacearea_cone(10,15)\n\texpected_2 := 880.5179353159282\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := surfacearea_cone(19,17)\n\texpected_3 := 2655.923961165254\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the surface area of a cone.", "entry_point": "surfacearea_cone", "canonical_solution": null}
{"task_id": "MBGP/498", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find gcd of two positive integers.\n// Examples:\n// >>> gcd(12, 17)\n// >>> 1\n// >>> gcd(4,6)\n// >>> 2\n// >>> gcd(2,9)\n// >>> 1\nfunc gcd (x int, y int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := gcd(12,17)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := gcd(4,6)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := gcd(2,9)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find gcd of two positive integers.", "entry_point": "gcd", "canonical_solution": null}
{"task_id": "MBGP/499", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the diameter of a circle.\n// Examples:\n// >>> diameter_circle(10)\n// >>> 20\n// >>> diameter_circle(40)\n// >>> 80\n// >>> diameter_circle(15)\n// >>> 30\nfunc diameter_circle (r int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := diameter_circle(10)\n\texpected_1 := 20\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := diameter_circle(40)\n\texpected_2 := 80\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := diameter_circle(15)\n\texpected_3 := 30\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the diameter of a circle.", "entry_point": "diameter_circle", "canonical_solution": null}
{"task_id": "MBGP/500", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to concatenate all elements of the given list into a string.\n// Examples:\n// >>> concatenate_elements(['hello','there','have','a','rocky','day'] )\n// >>> '  hello there have a rocky day'\n// >>> concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] )\n// >>> '  Hi there How are you'\n// >>> concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] )\n// >>> '  Part of the journey is end'\nfunc concatenate_elements (list []string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := concatenate_elements([]string{\"hello\", \"there\", \"have\", \"a\", \"rocky\", \"day\"})\n\texpected_1 := \"  hello there have a rocky day\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := concatenate_elements([]string{\"Hi\", \"there\", \"How\", \"are\", \"you\"})\n\texpected_2 := \"  Hi there How are you\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := concatenate_elements([]string{\"Part\", \"of\", \"the\", \"journey\", \"is\", \"end\"})\n\texpected_3 := \"  Part of the journey is end\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to concatenate all elements of the given list into a string.", "entry_point": "concatenate_elements", "canonical_solution": null}
{"task_id": "MBGP/501", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find common divisor between two numbers in a given pair.\n// Examples:\n// >>> num_comm_div(2,4)\n// >>> 2\n// >>> num_comm_div(2,8)\n// >>> 2\n// >>> num_comm_div(12,24)\n// >>> 6\nfunc num_comm_div (x int, y int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := num_comm_div(2,4)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := num_comm_div(2,8)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := num_comm_div(12,24)\n\texpected_3 := 6\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find common divisor between two numbers in a given pair.", "entry_point": "num_comm_div", "canonical_solution": null}
{"task_id": "MBGP/502", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find remainder of two numbers.\n// Examples:\n// >>> find(3,3)\n// >>> 0\n// >>> find(10,3)\n// >>> 1\n// >>> find(16,5)\n// >>> 1\nfunc find (n int, m int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find(3,3)\n\texpected_1 := 0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find(10,3)\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find(16,5)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find remainder of two numbers.", "entry_point": "find", "canonical_solution": null}
{"task_id": "MBGP/503", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to add consecutive numbers of a given list.\n// Examples:\n// >>> add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])\n// >>> [2, 4, 7, 8, 9, 11, 13]\n// >>> add_consecutive_nums([4, 5, 8, 9, 6, 10])\n// >>> [9, 13, 17, 15, 16]\n// >>> add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n// >>> [3, 5, 7, 9, 11, 13, 15, 17, 19]\nfunc add_consecutive_nums (nums []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := add_consecutive_nums([]int{1, 1, 3, 4, 4, 5, 6, 7})\n\texpected_1 := []int{2, 4, 7, 8, 9, 11, 13}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := add_consecutive_nums([]int{4, 5, 8, 9, 6, 10})\n\texpected_2 := []int{9, 13, 17, 15, 16}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := add_consecutive_nums([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n\texpected_3 := []int{3, 5, 7, 9, 11, 13, 15, 17, 19}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to add consecutive numbers of a given list.", "entry_point": "add_consecutive_nums", "canonical_solution": null}
{"task_id": "MBGP/504", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the cube sum of first n natural numbers.\n// Examples:\n// >>> sum_Of_Series(5)\n// >>> 225\n// >>> sum_Of_Series(2)\n// >>> 9\n// >>> sum_Of_Series(3)\n// >>> 36\nfunc sum_Of_Series (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_Of_Series(5)\n\texpected_1 := 225\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_Of_Series(2)\n\texpected_2 := 9\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_Of_Series(3)\n\texpected_3 := 36\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the cube sum of first n natural numbers.", "entry_point": "sum_Of_Series", "canonical_solution": null}
{"task_id": "MBGP/505", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to move all zeroes to the end of the given array.\n// Examples:\n// >>> re_order([6, 0, 8, 2, 3, 0, 4, 0, 1])\n// >>> [6, 8, 2, 3, 4, 1, 0, 0, 0]\n// >>> re_order([4, 0, 2, 7, 0, 9, 0, 12, 0])\n// >>> [4, 2, 7, 9, 12, 0, 0, 0, 0]\n// >>> re_order([3, 11, 0, 74, 14, 0, 1, 0, 2])\n// >>> [3, 11, 74, 14, 1, 2, 0, 0, 0]\nfunc re_order (A []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := re_order([]int{6, 0, 8, 2, 3, 0, 4, 0, 1})\n\texpected_1 := []int{6, 8, 2, 3, 4, 1, 0, 0, 0}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := re_order([]int{4, 0, 2, 7, 0, 9, 0, 12, 0})\n\texpected_2 := []int{4, 2, 7, 9, 12, 0, 0, 0, 0}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := re_order([]int{3, 11, 0, 74, 14, 0, 1, 0, 2})\n\texpected_3 := []int{3, 11, 74, 14, 1, 2, 0, 0, 0}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to move all zeroes to the end of the given array.", "entry_point": "re_order", "canonical_solution": null}
{"task_id": "MBGP/506", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate the permutation coefficient of given p(n, k).\n// Examples:\n// >>> permutation_coefficient(10, 2)\n// >>> 90\n// >>> permutation_coefficient(10, 3)\n// >>> 720\n// >>> permutation_coefficient(10, 1)\n// >>> 10\nfunc permutation_coefficient (n int, k int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := permutation_coefficient(10,2)\n\texpected_1 := 90\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := permutation_coefficient(10,3)\n\texpected_2 := 720\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := permutation_coefficient(10,1)\n\texpected_3 := 10\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate the permutation coefficient of given p(n, k).", "entry_point": "permutation_coefficient", "canonical_solution": null}
{"task_id": "MBGP/507", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove specific words from a given list.\n// Examples:\n// >>> remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])\n// >>> ['red', 'green', 'blue', 'black']\n// >>> remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])\n// >>> ['red', 'green', 'blue', 'white']\n// >>> remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])\n// >>> ['red', 'green', 'black', 'orange']\nfunc remove_words (list1 []string, removewords []string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_words([]string{\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"},[]string{\"white\", \"orange\"})\n\texpected_1 := []string{\"red\", \"green\", \"blue\", \"black\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_words([]string{\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"},[]string{\"black\", \"orange\"})\n\texpected_2 := []string{\"red\", \"green\", \"blue\", \"white\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_words([]string{\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"},[]string{\"blue\", \"white\"})\n\texpected_3 := []string{\"red\", \"green\", \"black\", \"orange\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove specific words from a given list.", "entry_point": "remove_words", "canonical_solution": null}
{"task_id": "MBGP/508", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if the common elements between two given lists are in the same order or not.\n// Examples:\n// >>> same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])\n// >>> True\n// >>> same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])\n// >>> False\n// >>> same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])\n// >>> True\nfunc same_order (l1 []string, l2 []string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := same_order([]string{\"red\", \"green\", \"black\", \"orange\"},[]string{\"red\", \"pink\", \"green\", \"white\", \"black\"})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := same_order([]string{\"red\", \"pink\", \"green\", \"white\", \"black\"},[]string{\"white\", \"orange\", \"pink\", \"black\"})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := same_order([]string{\"red\", \"green\", \"black\", \"orange\"},[]string{\"red\", \"pink\", \"green\", \"white\", \"black\"})\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if the common elements between two given lists are in the same order or not.", "entry_point": "same_order", "canonical_solution": null}
{"task_id": "MBGP/509", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the average of odd numbers till a given odd number.\n// Examples:\n// >>> average_Odd(9)\n// >>> 5\n// >>> average_Odd(5)\n// >>> 3\n// >>> average_Odd(11)\n// >>> 6\nfunc average_Odd (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := average_Odd(9)\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := average_Odd(5)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := average_Odd(11)\n\texpected_3 := 6\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the average of odd numbers till a given odd number.", "entry_point": "average_Odd", "canonical_solution": null}
{"task_id": "MBGP/510", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n// Examples:\n// >>> no_of_subsequences([1,2,3,4], 10)\n// >>> 11\n// >>> no_of_subsequences([4,8,7,2], 50)\n// >>> 9\n// >>> no_of_subsequences([5,6,7,8], 15)\n// >>> 4\nfunc no_of_subsequences (arr []int, k int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := no_of_subsequences([]int{1, 2, 3, 4},10)\n\texpected_1 := 11\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := no_of_subsequences([]int{4, 8, 7, 2},50)\n\texpected_2 := 9\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := no_of_subsequences([]int{5, 6, 7, 8},15)\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.", "entry_point": "no_of_subsequences", "canonical_solution": null}
{"task_id": "MBGP/511", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find minimum sum of factors of a given number.\n// Examples:\n// >>> find_Min_Sum(12)\n// >>> 7\n// >>> find_Min_Sum(105)\n// >>> 15\n// >>> find_Min_Sum(2)\n// >>> 2\nfunc find_Min_Sum (num int) interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Min_Sum(12)\n\texpected_1 := 7.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Min_Sum(105)\n\texpected_2 := 15.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Min_Sum(2)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find minimum sum of factors of a given number.", "entry_point": "find_Min_Sum", "canonical_solution": null}
{"task_id": "MBGP/512", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count the element frequency in the mixed nested tuple.\n// Examples:\n// >>> count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) )\n// >>> {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\n// >>> count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) )\n// >>> {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\n// >>> count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) )\n// >>> {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}\nfunc count_element_freq (test_tuple []interface{}) map[int]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_element_freq([]interface{}{5, 6, []interface{}{5, 6}, 7, []interface{}{8, 9}, 9})\n\texpected_1 := map[int]int{ 5: 2, 6: 2, 7: 1, 8: 1, 9: 2,  }\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_element_freq([]interface{}{6, 7, []interface{}{6, 7}, 8, []interface{}{9, 10}, 10})\n\texpected_2 := map[int]int{ 6: 2, 7: 2, 8: 1, 9: 1, 10: 2,  }\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_element_freq([]interface{}{7, 8, []interface{}{7, 8}, 9, []interface{}{10, 11}, 11})\n\texpected_3 := map[int]int{ 7: 2, 8: 2, 9: 1, 10: 1, 11: 2,  }\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count the element frequency in the mixed nested tuple.", "entry_point": "count_element_freq", "canonical_solution": null}
{"task_id": "MBGP/513", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert tuple into list by adding the given string after every element.\n// Examples:\n// >>> add_str((5, 6, 7, 4, 9) , \"FDF\")\n// >>> [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\n// >>> add_str((7, 8, 9, 10) , \"PF\")\n// >>> [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\n// >>> add_str((11, 14, 12, 1, 4) , \"JH\")\n// >>> [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']\nfunc add_str (test_tup []int, K string) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := add_str([]int{5, 6, 7, 4, 9},\"FDF\")\n\texpected_1 := []interface{}{5, \"FDF\", 6, \"FDF\", 7, \"FDF\", 4, \"FDF\", 9, \"FDF\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := add_str([]int{7, 8, 9, 10},\"PF\")\n\texpected_2 := []interface{}{7, \"PF\", 8, \"PF\", 9, \"PF\", 10, \"PF\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := add_str([]int{11, 14, 12, 1, 4},\"JH\")\n\texpected_3 := []interface{}{11, \"JH\", 14, \"JH\", 12, \"JH\", 1, \"JH\", 4, \"JH\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert tuple into list by adding the given string after every element.", "entry_point": "add_str", "canonical_solution": null}
{"task_id": "MBGP/514", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the summation of tuple elements in the given tuple list.\n// Examples:\n// >>> sum_elements((7, 8, 9, 1, 10, 7))\n// >>> 42\n// >>> sum_elements((1, 2, 3, 4, 5, 6))\n// >>> 21\n// >>> sum_elements((11, 12 ,13 ,45, 14))\n// >>> 95\nfunc sum_elements (test_tup []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_elements([]int{7, 8, 9, 1, 10, 7})\n\texpected_1 := 42\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_elements([]int{1, 2, 3, 4, 5, 6})\n\texpected_2 := 21\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_elements([]int{11, 12, 13, 45, 14})\n\texpected_3 := 95\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the summation of tuple elements in the given tuple list.", "entry_point": "sum_elements", "canonical_solution": null}
{"task_id": "MBGP/515", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if there is a subset with sum divisible by m.\n// Examples:\n// >>> modular_sum([3, 1, 7, 5], 4, 6)\n// >>> True\n// >>> modular_sum([1, 7], 2, 5)\n// >>> False\n// >>> modular_sum([1, 6], 2, 5)\n// >>> False\nfunc modular_sum (arr []int, n int, m int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := modular_sum([]int{3, 1, 7, 5},4,6)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := modular_sum([]int{1, 7},2,5)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := modular_sum([]int{1, 6},2,5)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if there is a subset with sum divisible by m.", "entry_point": "modular_sum", "canonical_solution": null}
{"task_id": "MBGP/516", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort a list of elements using radix sort.\n// Examples:\n// >>> radix_sort([15, 79, 25, 68, 37])\n// >>> [15, 25, 37, 68, 79]\n// >>> radix_sort([9, 11, 8, 7, 3, 2])\n// >>> [2, 3, 7, 8, 9, 11]\n// >>> radix_sort([36, 12, 24, 26, 29])\n// >>> [12, 24, 26, 29, 36]\nfunc radix_sort (nums []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := radix_sort([]int{15, 79, 25, 68, 37})\n\texpected_1 := []int{15, 25, 37, 68, 79}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := radix_sort([]int{9, 11, 8, 7, 3, 2})\n\texpected_2 := []int{2, 3, 7, 8, 9, 11}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := radix_sort([]int{36, 12, 24, 26, 29})\n\texpected_3 := []int{12, 24, 26, 29, 36}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort a list of elements using radix sort.", "entry_point": "radix_sort", "canonical_solution": null}
{"task_id": "MBGP/517", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the largest postive number from the given list.\n// Examples:\n// >>> largest_pos([1,2,3,4,-1])\n// >>> 4\n// >>> largest_pos([0,1,2,-5,-1,6])\n// >>> 6\n// >>> largest_pos([0,0,1,0])\n// >>> 1\nfunc largest_pos (list1 []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := largest_pos([]int{1, 2, 3, 4, -1})\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := largest_pos([]int{0, 1, 2, -5, -1, 6})\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := largest_pos([]int{0, 0, 1, 0})\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the largest postive number from the given list.", "entry_point": "largest_pos", "canonical_solution": null}
{"task_id": "MBGP/518", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the square root of a perfect number.\n// Examples:\n// >>> sqrt_root(4)\n// >>> 2\n// >>> sqrt_root(16)\n// >>> 4\n// >>> sqrt_root(400)\n// >>> 20\nfunc sqrt_root (num int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sqrt_root(4)\n\texpected_1 := 2.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sqrt_root(16)\n\texpected_2 := 4.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sqrt_root(400)\n\texpected_3 := 20.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the square root of a perfect number.", "entry_point": "sqrt_root", "canonical_solution": null}
{"task_id": "MBGP/519", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate volume of a tetrahedron.\n// Examples:\n// >>> volume_tetrahedron(10)\n// >>> 117.85\n// >>> volume_tetrahedron(15)\n// >>> 397.75\n// >>> volume_tetrahedron(20)\n// >>> 942.81\nfunc volume_tetrahedron (num int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := volume_tetrahedron(10)\n\texpected_1 := 117.85\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := volume_tetrahedron(15)\n\texpected_2 := 397.75\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := volume_tetrahedron(20)\n\texpected_3 := 942.81\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate volume of a tetrahedron.", "entry_point": "volume_tetrahedron", "canonical_solution": null}
{"task_id": "MBGP/520", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the lcm of the given array elements.\n// Examples:\n// >>> get_lcm([2, 7, 3, 9, 4])\n// >>> 252\n// >>> get_lcm([1, 2, 8, 3])\n// >>> 24\n// >>> get_lcm([3, 8, 4, 10, 5])\n// >>> 120\nfunc get_lcm (l []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_lcm([]int{2, 7, 3, 9, 4})\n\texpected_1 := 252\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_lcm([]int{1, 2, 8, 3})\n\texpected_2 := 24\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_lcm([]int{3, 8, 4, 10, 5})\n\texpected_3 := 120\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the lcm of the given array elements.", "entry_point": "get_lcm", "canonical_solution": null}
{"task_id": "MBGP/521", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to print check if the triangle is scalene or not.\n// Examples:\n// >>> check_isosceles(6,8,12)\n// >>> True\n// >>> check_isosceles(6,6,12)\n// >>> False\n// >>> check_isosceles(6,15,20)\n// >>> True\nfunc check_isosceles (x int, y int, z int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_isosceles(6,8,12)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_isosceles(6,6,12)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_isosceles(6,15,20)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to print check if the triangle is scalene or not.", "entry_point": "check_isosceles", "canonical_solution": null}
{"task_id": "MBGP/522", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the longest bitonic subsequence for the given array.\n// Examples:\n// >>> lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15])\n// >>> 7\n// >>> lbs([1, 11, 2, 10, 4, 5, 2, 1])\n// >>> 6\n// >>> lbs([80, 60, 30, 40, 20, 10])\n// >>> 5\nfunc lbs (arr []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := lbs([]int{0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15})\n\texpected_1 := 7\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := lbs([]int{1, 11, 2, 10, 4, 5, 2, 1})\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := lbs([]int{80, 60, 30, 40, 20, 10})\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the longest bitonic subsequence for the given array.", "entry_point": "lbs", "canonical_solution": null}
{"task_id": "MBGP/523", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n// Examples:\n// >>> check_string('python')\n// >>> ['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\n// >>> check_string('123python')\n// >>> ['String must have 1 upper case character.']\n// >>> check_string('123Python')\n// >>> ['Valid string.']\nfunc check_string (str1 string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_string(\"python\")\n\texpected_1 := []string{\"String must have 1 upper case character.\", \"String must have 1 number.\", \"String length should be atleast 8.\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_string(\"123python\")\n\texpected_2 := []string{\"String must have 1 upper case character.\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_string(\"123Python\")\n\texpected_3 := []string{\"Valid string.\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.", "entry_point": "check_string", "canonical_solution": null}
{"task_id": "MBGP/524", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the sum of maximum increasing subsequence of the given array.\n// Examples:\n// >>> max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7)\n// >>> 106\n// >>> max_sum_increasing_subsequence([3, 4, 5, 10], 4)\n// >>> 22\n// >>> max_sum_increasing_subsequence([10, 5, 4, 3], 4)\n// >>> 10\nfunc max_sum_increasing_subsequence (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_sum_increasing_subsequence([]int{1, 101, 2, 3, 100, 4, 5},7)\n\texpected_1 := 106\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_sum_increasing_subsequence([]int{3, 4, 5, 10},4)\n\texpected_2 := 22\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_sum_increasing_subsequence([]int{10, 5, 4, 3},4)\n\texpected_3 := 10\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the sum of maximum increasing subsequence of the given array.", "entry_point": "max_sum_increasing_subsequence", "canonical_solution": null}
{"task_id": "MBGP/525", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether two given lines are parallel or not.\n// Examples:\n// >>> parallel_lines([2,3,4], [2,3,8])\n// >>> True\n// >>> parallel_lines([2,3,4], [4,-3,8])\n// >>> False\n// >>> parallel_lines([3,3],[5,5])\n// >>> True\nfunc parallel_lines (line1 []int, line2 []int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := parallel_lines([]int{2, 3, 4},[]int{2, 3, 8})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := parallel_lines([]int{2, 3, 4},[]int{4, -3, 8})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := parallel_lines([]int{3, 3},[]int{5, 5})\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether two given lines are parallel or not.", "entry_point": "parallel_lines", "canonical_solution": null}
{"task_id": "MBGP/526", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to capitalize first and last letters of each word of a given string.\n// Examples:\n// >>> capitalize_first_last_letters(\"python\")\n// >>> \"PythoN\"\n// >>> capitalize_first_last_letters(\"bigdata\")\n// >>> \"BigdatA\"\n// >>> capitalize_first_last_letters(\"Hadoop\")\n// >>> \"HadooP\"\nfunc capitalize_first_last_letters (str1 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := capitalize_first_last_letters(\"python\")\n\texpected_1 := \"PythoN\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := capitalize_first_last_letters(\"bigdata\")\n\texpected_2 := \"BigdatA\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := capitalize_first_last_letters(\"Hadoop\")\n\texpected_3 := \"HadooP\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to capitalize first and last letters of each word of a given string.", "entry_point": "capitalize_first_last_letters", "canonical_solution": null}
{"task_id": "MBGP/527", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find all pairs in an integer array whose sum is equal to a given number.\n// Examples:\n// >>> get_pairs_count([1, 5, 7, -1, 5], 5, 6)\n// >>> 3\n// >>> get_pairs_count([1, 5, 7, -1], 4, 6)\n// >>> 2\n// >>> get_pairs_count([1, 1, 1, 1], 4, 2)\n// >>> 6\nfunc get_pairs_count (arr []int, n int, sum int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_pairs_count([]int{1, 5, 7, -1, 5},5,6)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_pairs_count([]int{1, 5, 7, -1},4,6)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_pairs_count([]int{1, 1, 1, 1},4,2)\n\texpected_3 := 6\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find all pairs in an integer array whose sum is equal to a given number.", "entry_point": "get_pairs_count", "canonical_solution": null}
{"task_id": "MBGP/528", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the list of lists with minimum length.\n// Examples:\n// >>> min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n// >>> (1, [0])\n// >>> min_length([[1], [5, 7], [10, 12, 14,15]])\n// >>> (1, [1])\n// >>> min_length([[5], [15,20,25]])\n// >>> (1, [5])\nfunc min_length (list1 [][]int) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := min_length([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}})\n\texpected_1 := []interface{}{1, []interface{}{0}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := min_length([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}})\n\texpected_2 := []interface{}{1, []interface{}{1}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := min_length([][]int{[]int{5}, []int{15, 20, 25}})\n\texpected_3 := []interface{}{1, []interface{}{5}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the list of lists with minimum length.", "entry_point": "min_length", "canonical_solution": null}
{"task_id": "MBGP/529", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the nth jacobsthal-lucas number.\n// Examples:\n// >>> jacobsthal_lucas(5)\n// >>> 31\n// >>> jacobsthal_lucas(2)\n// >>> 5\n// >>> jacobsthal_lucas(4)\n// >>> 17\nfunc jacobsthal_lucas (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := jacobsthal_lucas(5)\n\texpected_1 := 31\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := jacobsthal_lucas(2)\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := jacobsthal_lucas(4)\n\texpected_3 := 17\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the nth jacobsthal-lucas number.", "entry_point": "jacobsthal_lucas", "canonical_solution": null}
{"task_id": "MBGP/530", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the ration of negative numbers in an array of integers.\n// Examples:\n// >>> negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n// >>> 0.31\n// >>> negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n// >>> 0.31\n// >>> negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])\n// >>> 0.44\nfunc negative_count (nums []int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := negative_count([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8})\n\texpected_1 := 0.31\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := negative_count([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8})\n\texpected_2 := 0.31\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := negative_count([]int{2, 4, -6, -9, 11, -12, 14, -5, 17})\n\texpected_3 := 0.44\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the ration of negative numbers in an array of integers.", "entry_point": "negative_count", "canonical_solution": null}
{"task_id": "MBGP/531", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find minimum number of coins that make a given value.\n// Examples:\n// >>> min_coins([9, 6, 5, 1] ,4,11)\n// >>> 2\n// >>> min_coins([4,5,6,7,8,9],6,9)\n// >>> 1\n// >>> min_coins([1, 2, 3],3,4)\n// >>> 2\nfunc min_coins (coins []int, m int, V int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := min_coins([]int{9, 6, 5, 1},4,11)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := min_coins([]int{4, 5, 6, 7, 8, 9},6,9)\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := min_coins([]int{1, 2, 3},3,4)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find minimum number of coins that make a given value.", "entry_point": "min_coins", "canonical_solution": null}
{"task_id": "MBGP/532", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if the two given strings are permutations of each other.\n// Examples:\n// >>> check_permutation(\"abc\", \"cba\")\n// >>> True\n// >>> check_permutation(\"test\", \"ttew\")\n// >>> False\n// >>> check_permutation(\"xxyz\", \"yxzx\")\n// >>> True\nfunc check_permutation (str1 string, str2 string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_permutation(\"abc\",\"cba\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_permutation(\"test\",\"ttew\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_permutation(\"xxyz\",\"yxzx\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if the two given strings are permutations of each other.", "entry_point": "check_permutation", "canonical_solution": null}
{"task_id": "MBGP/534", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n// Examples:\n// >>> search_literal('python','python programming language')\n// >>> (0,6)\n// >>> search_literal('programming','python programming language')\n// >>> (7,18)\n// >>> search_literal('language','python programming language')\n// >>> (19,27)\nfunc search_literal (pattern string, text string) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := search_literal(\"python\",\"python programming language\")\n\texpected_1 := []int{0, 6}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := search_literal(\"programming\",\"python programming language\")\n\texpected_2 := []int{7, 18}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := search_literal(\"language\",\"python programming language\")\n\texpected_3 := []int{19, 27}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.", "entry_point": "search_literal", "canonical_solution": null}
{"task_id": "MBGP/535", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the top or bottom surface area of a cylinder.\n// Examples:\n// >>> topbottom_surfacearea(10)\n// >>> 314.15000000000003\n// >>> topbottom_surfacearea(5)\n// >>> 78.53750000000001\n// >>> topbottom_surfacearea(4)\n// >>> 50.264\nfunc topbottom_surfacearea (r int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := topbottom_surfacearea(10)\n\texpected_1 := 314.15000000000003\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := topbottom_surfacearea(5)\n\texpected_2 := 78.53750000000001\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := topbottom_surfacearea(4)\n\texpected_3 := 50.264\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the top or bottom surface area of a cylinder.", "entry_point": "topbottom_surfacearea", "canonical_solution": null}
{"task_id": "MBGP/536", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to select the nth items of a list.\n// Examples:\n// >>> nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)\n// >>> [1, 3, 5, 7, 9]\n// >>> nth_items([10,15,19,17,16,18],3)\n// >>> [10,17]\n// >>> nth_items([14,16,19,15,17],4)\n// >>> [14,17]\nfunc nth_items (list []int, n int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := nth_items([]int{1, 2, 3, 4, 5, 6, 7, 8, 9},2)\n\texpected_1 := []int{1, 3, 5, 7, 9}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := nth_items([]int{10, 15, 19, 17, 16, 18},3)\n\texpected_2 := []int{10, 17}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := nth_items([]int{14, 16, 19, 15, 17},4)\n\texpected_3 := []int{14, 17}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to select the nth items of a list.", "entry_point": "nth_items", "canonical_solution": null}
{"task_id": "MBGP/537", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the first repeated word in a given string.\n// Examples:\n// >>> first_repeated_word(\"ab ca bc ab\")\n// >>> \"ab\"\n// >>> first_repeated_word(\"ab ca bc\")\n// >>> 'None'\n// >>> first_repeated_word(\"ab ca bc ca ab bc\")\n// >>> \"ca\"\nfunc first_repeated_word (str1 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := first_repeated_word(\"ab ca bc ab\")\n\texpected_1 := \"ab\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := first_repeated_word(\"ab ca bc\")\n\texpected_2 := \"None\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := first_repeated_word(\"ab ca bc ca ab bc\")\n\texpected_3 := \"ca\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the first repeated word in a given string.", "entry_point": "first_repeated_word", "canonical_solution": null}
{"task_id": "MBGP/538", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to convert a given string list to a tuple.\n// Examples:\n// >>> string_list_to_tuple((\"python 3.0\"))\n// >>> ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n// >>> string_list_to_tuple((\"bigdata\"))\n// >>> ('b', 'i', 'g', 'd', 'a', 't', 'a')\n// >>> string_list_to_tuple((\"language\"))\n// >>> ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')\nfunc string_list_to_tuple (str1 string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := string_list_to_tuple(\"python 3.0\")\n\texpected_1 := []string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := string_list_to_tuple(\"bigdata\")\n\texpected_2 := []string{\"b\", \"i\", \"g\", \"d\", \"a\", \"t\", \"a\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := string_list_to_tuple(\"language\")\n\texpected_3 := []string{\"l\", \"a\", \"n\", \"g\", \"u\", \"a\", \"g\", \"e\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to convert a given string list to a tuple.", "entry_point": "string_list_to_tuple", "canonical_solution": null}
{"task_id": "MBGP/539", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n// Examples:\n// >>> basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n// >>> [10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\n// >>> basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])\n// >>> [1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\n// >>> basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])\n// >>> [64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]\nfunc basesnum_coresspondingnum (bases_num []int, index []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := basesnum_coresspondingnum([]int{10, 20, 30, 40, 50, 60, 70, 80, 90, 100},[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n\texpected_1 := []int{10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := basesnum_coresspondingnum([]int{1, 2, 3, 4, 5, 6, 7},[]int{10, 20, 30, 40, 50, 60, 70})\n\texpected_2 := []int{1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := basesnum_coresspondingnum([]int{4, 8, 12, 16, 20, 24, 28},[]int{3, 6, 9, 12, 15, 18, 21})\n\texpected_3 := []int{64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.", "entry_point": "basesnum_coresspondingnum", "canonical_solution": null}
{"task_id": "MBGP/540", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the difference between highest and least frequencies in a given array.\n// Examples:\n// >>> find_Diff([1,1,2,2,7,8,4,5,1,4],10)\n// >>> 2\n// >>> find_Diff([1,7,9,2,3,3,1,3,3],9)\n// >>> 3\n// >>> find_Diff([1,2,1,2],4)\n// >>> 0\nfunc find_Diff (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Diff([]int{1, 1, 2, 2, 7, 8, 4, 5, 1, 4},10)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Diff([]int{1, 7, 9, 2, 3, 3, 1, 3, 3},9)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Diff([]int{1, 2, 1, 2},4)\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the difference between highest and least frequencies in a given array.", "entry_point": "find_Diff", "canonical_solution": null}
{"task_id": "MBGP/541", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find if the given number is abundant or not.\n// Examples:\n// >>> check_abundant(12)\n// >>> True\n// >>> check_abundant(15)\n// >>> False\n// >>> check_abundant(18)\n// >>> True\nfunc check_abundant (n int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_abundant(12)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_abundant(15)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_abundant(18)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find if the given number is abundant or not.", "entry_point": "check_abundant", "canonical_solution": null}
{"task_id": "MBGP/542", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n// Examples:\n// >>> fill_spaces('Boult Curve Wireless Neckband')\n// >>> 'Boult:Curve:Wireless:Neckband'\n// >>> fill_spaces('Stereo Sound Sweatproof')\n// >>> 'Stereo:Sound:Sweatproof'\n// >>> fill_spaces('Probass Curve Audio')\n// >>> 'Probass:Curve:Audio'\nfunc fill_spaces (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := fill_spaces(\"Boult Curve Wireless Neckband\")\n\texpected_1 := \"Boult:Curve:Wireless:Neckband\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := fill_spaces(\"Stereo Sound Sweatproof\")\n\texpected_2 := \"Stereo:Sound:Sweatproof\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := fill_spaces(\"Probass Curve Audio\")\n\texpected_3 := \"Probass:Curve:Audio\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.", "entry_point": "fill_spaces", "canonical_solution": null}
{"task_id": "MBGP/543", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to add two numbers and print number of digits of sum.\n// Examples:\n// >>> count_digits(9875,10)\n// >>> (4)\n// >>> count_digits(98759853034,100)\n// >>> (11)\n// >>> count_digits(1234567,500)\n// >>> (7)\nfunc count_digits (num1 int, num2 int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_digits(9875,10)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_digits(98759853034,100)\n\texpected_2 := 11\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_digits(1234567,500)\n\texpected_3 := 7\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to add two numbers and print number of digits of sum.", "entry_point": "count_digits", "canonical_solution": null}
{"task_id": "MBGP/544", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to flatten the tuple list to a string.\n// Examples:\n// >>> flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')])\n// >>> '1 4 6 5 8 2 9 1 10'\n// >>> flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')])\n// >>> '2 3 4 6 9 3 2 2 11'\n// >>> flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')])\n// >>> '14 21 9 24 19 12 29 23 17'\nfunc flatten_tuple (test_list [][]string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := flatten_tuple([][]string{[]string{\"1\", \"4\", \"6\"}, []string{\"5\", \"8\"}, []string{\"2\", \"9\"}, []string{\"1\", \"10\"}})\n\texpected_1 := \"1 4 6 5 8 2 9 1 10\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := flatten_tuple([][]string{[]string{\"2\", \"3\", \"4\"}, []string{\"6\", \"9\"}, []string{\"3\", \"2\"}, []string{\"2\", \"11\"}})\n\texpected_2 := \"2 3 4 6 9 3 2 2 11\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := flatten_tuple([][]string{[]string{\"14\", \"21\", \"9\"}, []string{\"24\", \"19\"}, []string{\"12\", \"29\"}, []string{\"23\", \"17\"}})\n\texpected_3 := \"14 21 9 24 19 12 29 23 17\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to flatten the tuple list to a string.", "entry_point": "flatten_tuple", "canonical_solution": null}
{"task_id": "MBGP/545", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to toggle only first and last bits of a given number.\n// Examples:\n// >>> toggle_F_and_L_bits(10)\n// >>> 3\n// >>> toggle_F_and_L_bits(15)\n// >>> 6\n// >>> toggle_F_and_L_bits(20)\n// >>> 5\nfunc toggle_F_and_L_bits (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := toggle_F_and_L_bits(10)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := toggle_F_and_L_bits(15)\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := toggle_F_and_L_bits(20)\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to toggle only first and last bits of a given number.", "entry_point": "toggle_F_and_L_bits", "canonical_solution": null}
{"task_id": "MBGP/546", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the last occurrence of a character in a string.\n// Examples:\n// >>> last_occurence_char(\"hello world\",'l')\n// >>> 10\n// >>> last_occurence_char(\"language\",'g')\n// >>> 7\n// >>> last_occurence_char(\"little\",'y')\n// >>> None\nfunc last_occurence_char (string0 string, char string) interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := last_occurence_char(\"hello world\",\"l\")\n\texpected_1 := 10\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := last_occurence_char(\"language\",\"g\")\n\texpected_2 := 7\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := last_occurence_char(\"little\",\"y\")\n\texpected_3 := nil\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the last occurrence of a character in a string.", "entry_point": "last_occurence_char", "canonical_solution": null}
{"task_id": "MBGP/547", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of hamming distances of all consecutive numbers from o to n.\n// Examples:\n// >>> Total_Hamming_Distance(4)\n// >>> 7\n// >>> Total_Hamming_Distance(2)\n// >>> 3\n// >>> Total_Hamming_Distance(5)\n// >>> 8\nfunc Total_Hamming_Distance (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Total_Hamming_Distance(4)\n\texpected_1 := 7\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Total_Hamming_Distance(2)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Total_Hamming_Distance(5)\n\texpected_3 := 8\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of hamming distances of all consecutive numbers from o to n.", "entry_point": "Total_Hamming_Distance", "canonical_solution": null}
{"task_id": "MBGP/548", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the length of the longest increasing subsequence of the given sequence.\n// Examples:\n// >>> longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60])\n// >>> 5\n// >>> longest_increasing_subsequence([3, 10, 2, 1, 20])\n// >>> 3\n// >>> longest_increasing_subsequence([50, 3, 10, 7, 40, 80])\n// >>> 4\nfunc longest_increasing_subsequence (arr []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := longest_increasing_subsequence([]int{10, 22, 9, 33, 21, 50, 41, 60})\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := longest_increasing_subsequence([]int{3, 10, 2, 1, 20})\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := longest_increasing_subsequence([]int{50, 3, 10, 7, 40, 80})\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the length of the longest increasing subsequence of the given sequence.", "entry_point": "longest_increasing_subsequence", "canonical_solution": null}
{"task_id": "MBGP/549", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of fifth power of first n odd natural numbers.\n// Examples:\n// >>> odd_Num_Sum(1)\n// >>> 1\n// >>> odd_Num_Sum(2)\n// >>> 244\n// >>> odd_Num_Sum(3)\n// >>> 3369\nfunc odd_Num_Sum (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := odd_Num_Sum(1)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := odd_Num_Sum(2)\n\texpected_2 := 244\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := odd_Num_Sum(3)\n\texpected_3 := 3369\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of fifth power of first n odd natural numbers.", "entry_point": "odd_Num_Sum", "canonical_solution": null}
{"task_id": "MBGP/550", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the maximum element in a sorted and rotated array.\n// Examples:\n// >>> find_Max([2,3,5,6,9],0,4)\n// >>> 9\n// >>> find_Max([3,4,5,2,1],0,4)\n// >>> 5\n// >>> find_Max([1,2,3],0,2)\n// >>> 3\nfunc find_Max (arr []int, low int, high int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Max([]int{2, 3, 5, 6, 9},0,4)\n\texpected_1 := 9\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Max([]int{3, 4, 5, 2, 1},0,4)\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Max([]int{1, 2, 3},0,2)\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the maximum element in a sorted and rotated array.", "entry_point": "find_Max", "canonical_solution": null}
{"task_id": "MBGP/551", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to extract a specified column from a given nested list.\n// Examples:\n// >>> extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)\n// >>> [1, 2, 1]\n// >>> extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)\n// >>> [3, -5, 1]\n// >>> extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)\n// >>> [1, 5, 1, 13, 5, 9]\nfunc extract_column (list1 [][]int, n int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := extract_column([][]int{[]int{1, 2, 3}, []int{2, 4, 5}, []int{1, 1, 1}},0)\n\texpected_1 := []int{1, 2, 1}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := extract_column([][]int{[]int{1, 2, 3}, []int{-2, 4, -5}, []int{1, -1, 1}},2)\n\texpected_2 := []int{3, -5, 1}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := extract_column([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}},0)\n\texpected_3 := []int{1, 5, 1, 13, 5, 9}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to extract a specified column from a given nested list.", "entry_point": "extract_column", "canonical_solution": null}
{"task_id": "MBGP/552", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether a given sequence is linear or not.\n// Examples:\n// >>> Seq_Linear([0,2,4,6,8,10])\n// >>> \"Linear Sequence\"\n// >>> Seq_Linear([1,2,3])\n// >>> \"Linear Sequence\"\n// >>> Seq_Linear([1,5,2])\n// >>> \"Non Linear Sequence\"\nfunc Seq_Linear (seq_nums []int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Seq_Linear([]int{0, 2, 4, 6, 8, 10})\n\texpected_1 := \"Linear Sequence\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Seq_Linear([]int{1, 2, 3})\n\texpected_2 := \"Linear Sequence\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Seq_Linear([]int{1, 5, 2})\n\texpected_3 := \"Non Linear Sequence\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether a given sequence is linear or not.", "entry_point": "Seq_Linear", "canonical_solution": null}
{"task_id": "MBGP/553", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert the given tuple to a floating-point number.\n// Examples:\n// >>> tuple_to_float((4, 56))\n// >>> 4.56\n// >>> tuple_to_float((7, 256))\n// >>> 7.256\n// >>> tuple_to_float((8, 123))\n// >>> 8.123\nfunc tuple_to_float (test_tup []int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := tuple_to_float([]int{4, 56})\n\texpected_1 := 4.56\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := tuple_to_float([]int{7, 256})\n\texpected_2 := 7.256\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := tuple_to_float([]int{8, 123})\n\texpected_3 := 8.123\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert the given tuple to a floating-point number.", "entry_point": "tuple_to_float", "canonical_solution": null}
{"task_id": "MBGP/554", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find odd numbers from a mixed list.\n// Examples:\n// >>> Split([1,2,3,4,5,6])\n// >>> [1,3,5]\n// >>> Split([10,11,12,13])\n// >>> [11,13]\n// >>> Split([7,8,9,1])\n// >>> [7,9,1]\nfunc Split (list []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Split([]int{1, 2, 3, 4, 5, 6})\n\texpected_1 := []int{1, 3, 5}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Split([]int{10, 11, 12, 13})\n\texpected_2 := []int{11, 13}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Split([]int{7, 8, 9, 1})\n\texpected_3 := []int{7, 9, 1}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find odd numbers from a mixed list.", "entry_point": "Split", "canonical_solution": null}
{"task_id": "MBGP/555", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n// Examples:\n// >>> difference(3)\n// >>> 30\n// >>> difference(5)\n// >>> 210\n// >>> difference(2)\n// >>> 6\nfunc difference (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := difference(3)\n\texpected_1 := 30\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := difference(5)\n\texpected_2 := 210\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := difference(2)\n\texpected_3 := 6\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.", "entry_point": "difference", "canonical_solution": null}
{"task_id": "MBGP/556", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the pairs with xor as an odd number.\n// Examples:\n// >>> find_Odd_Pair([5,4,7,2,1],5)\n// >>> 6\n// >>> find_Odd_Pair([7,2,8,1,0,5,11],7)\n// >>> 12\n// >>> find_Odd_Pair([1,2,3],3)\n// >>> 2\nfunc find_Odd_Pair (A []int, N int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Odd_Pair([]int{5, 4, 7, 2, 1},5)\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Odd_Pair([]int{7, 2, 8, 1, 0, 5, 11},7)\n\texpected_2 := 12\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Odd_Pair([]int{1, 2, 3},3)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the pairs with xor as an odd number.", "entry_point": "find_Odd_Pair", "canonical_solution": null}
{"task_id": "MBGP/557", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to toggle characters case in a string.\n// Examples:\n// >>> toggle_string(\"Python\")\n// >>> (\"pYTHON\")\n// >>> toggle_string(\"Pangram\")\n// >>> (\"pANGRAM\")\n// >>> toggle_string(\"LIttLE\")\n// >>> (\"liTTle\")\nfunc toggle_string (string0 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := toggle_string(\"Python\")\n\texpected_1 := \"pYTHON\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := toggle_string(\"Pangram\")\n\texpected_2 := \"pANGRAM\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := toggle_string(\"LIttLE\")\n\texpected_3 := \"liTTle\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to toggle characters case in a string.", "entry_point": "toggle_string", "canonical_solution": null}
{"task_id": "MBGP/558", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the digit distance between two integers.\n// Examples:\n// >>> digit_distance_nums(1,2)\n// >>> 1\n// >>> digit_distance_nums(23,56)\n// >>> 6\n// >>> digit_distance_nums(123,256)\n// >>> 7\nfunc digit_distance_nums (n1 int, n2 int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := digit_distance_nums(1,2)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := digit_distance_nums(23,56)\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := digit_distance_nums(123,256)\n\texpected_3 := 7\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the digit distance between two integers.", "entry_point": "digit_distance_nums", "canonical_solution": null}
{"task_id": "MBGP/559", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the largest sum of contiguous subarray in the given array.\n// Examples:\n// >>> max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n// >>> 7\n// >>> max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8)\n// >>> 8\n// >>> max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8)\n// >>> 10\nfunc max_sub_array_sum (a []int, size int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_sub_array_sum([]int{-2, -3, 4, -1, -2, 1, 5, -3},8)\n\texpected_1 := 7\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_sub_array_sum([]int{-3, -4, 5, -2, -3, 2, 6, -4},8)\n\texpected_2 := 8\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_sub_array_sum([]int{-4, -5, 6, -3, -4, 3, 7, -5},8)\n\texpected_3 := 10\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the largest sum of contiguous subarray in the given array.", "entry_point": "max_sub_array_sum", "canonical_solution": null}
{"task_id": "MBGP/560", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the union of elements of the given tuples.\n// Examples:\n// >>> union_elements((3, 4, 5, 6),(5, 7, 4, 10) )\n// >>> (3, 4, 5, 6, 7, 10)\n// >>> union_elements((1, 2, 3, 4),(3, 4, 5, 6) )\n// >>> (1, 2, 3, 4, 5, 6)\n// >>> union_elements((11, 12, 13, 14),(13, 15, 16, 17) )\n// >>> (11, 12, 13, 14, 15, 16, 17)\nfunc union_elements (test_tup1 []int, test_tup2 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := union_elements([]int{3, 4, 5, 6},[]int{5, 7, 4, 10})\n\texpected_1 := []int{3, 4, 5, 6, 7, 10}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := union_elements([]int{1, 2, 3, 4},[]int{3, 4, 5, 6})\n\texpected_2 := []int{1, 2, 3, 4, 5, 6}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := union_elements([]int{11, 12, 13, 14},[]int{13, 15, 16, 17})\n\texpected_3 := []int{11, 12, 13, 14, 15, 16, 17}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the union of elements of the given tuples.", "entry_point": "union_elements", "canonical_solution": null}
{"task_id": "MBGP/561", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n// Examples:\n// >>> assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] )\n// >>> {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\n// >>> assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] )\n// >>> {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\n// >>> assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] )\n// >>> {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}\nfunc assign_elements (test_list [][]int) map[int][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := assign_elements([][]int{[]int{5, 3}, []int{7, 5}, []int{2, 7}, []int{3, 8}, []int{8, 4}})\n\texpected_1 := map[int][]int{ 3: []int{8}, 5: []int{3}, 7: []int{5}, 2: []int{7}, 8: []int{4}, 4: []int{},  }\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := assign_elements([][]int{[]int{6, 4}, []int{9, 4}, []int{3, 8}, []int{4, 9}, []int{9, 5}})\n\texpected_2 := map[int][]int{ 4: []int{9}, 6: []int{4}, 9: []int{4, 5}, 8: []int{}, 3: []int{8}, 5: []int{},  }\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := assign_elements([][]int{[]int{6, 2}, []int{6, 8}, []int{4, 9}, []int{4, 9}, []int{3, 7}})\n\texpected_3 := map[int][]int{ 2: []int{}, 6: []int{2, 8}, 8: []int{}, 9: []int{}, 4: []int{9, 9}, 7: []int{}, 3: []int{7},  }\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.", "entry_point": "assign_elements", "canonical_solution": null}
{"task_id": "MBGP/562", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the maximum length of sublist.\n// Examples:\n// >>> Find_Max_Length([[1],[1,4],[5,6,7,8]])\n// >>> 4\n// >>> Find_Max_Length([[0,1],[2,2,],[3,2,1]])\n// >>> 3\n// >>> Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]])\n// >>> 5\nfunc Find_Max_Length (lst [][]int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Find_Max_Length([][]int{[]int{1}, []int{1, 4}, []int{5, 6, 7, 8}})\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Find_Max_Length([][]int{[]int{0, 1}, []int{2, 2}, []int{3, 2, 1}})\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Find_Max_Length([][]int{[]int{7}, []int{22, 23}, []int{13, 14, 15}, []int{10, 20, 30, 40, 50}})\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the maximum length of sublist.", "entry_point": "Find_Max_Length", "canonical_solution": null}
{"task_id": "MBGP/563", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to extract values between quotation marks of a string.\n// Examples:\n// >>> extract_values('\"Python\", \"PHP\", \"Java\"')\n// >>> ['Python', 'PHP', 'Java']\n// >>> extract_values('\"python\",\"program\",\"language\"')\n// >>> ['python','program','language']\n// >>> extract_values('\"red\",\"blue\",\"green\",\"yellow\"')\n// >>> ['red','blue','green','yellow']\nfunc extract_values (text string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := extract_values(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\")\n\texpected_1 := []string{\"Python\", \"PHP\", \"Java\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := extract_values(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\")\n\texpected_2 := []string{\"python\", \"program\", \"language\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := extract_values(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\")\n\texpected_3 := []string{\"red\", \"blue\", \"green\", \"yellow\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to extract values between quotation marks of a string.", "entry_point": "extract_values", "canonical_solution": null}
{"task_id": "MBGP/564", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count unequal element pairs from the given array.\n// Examples:\n// >>> count_Pairs([1,2,1],3)\n// >>> 2\n// >>> count_Pairs([1,1,1,1],4)\n// >>> 0\n// >>> count_Pairs([1,2,3,4,5],5)\n// >>> 10\nfunc count_Pairs (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Pairs([]int{1, 2, 1},3)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Pairs([]int{1, 1, 1, 1},4)\n\texpected_2 := 0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Pairs([]int{1, 2, 3, 4, 5},5)\n\texpected_3 := 10\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count unequal element pairs from the given array.", "entry_point": "count_Pairs", "canonical_solution": null}
{"task_id": "MBGP/565", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to split a string into characters.\n// Examples:\n// >>> split('python')\n// >>> ['p','y','t','h','o','n']\n// >>> split('Name')\n// >>> ['N','a','m','e']\n// >>> split('program')\n// >>> ['p','r','o','g','r','a','m']\nfunc split (word string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := split(\"python\")\n\texpected_1 := []string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := split(\"Name\")\n\texpected_2 := []string{\"N\", \"a\", \"m\", \"e\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := split(\"program\")\n\texpected_3 := []string{\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to split a string into characters.", "entry_point": "split", "canonical_solution": null}
{"task_id": "MBGP/566", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to get the sum of a non-negative integer.\n// Examples:\n// >>> sum_digits(345)\n// >>> 12\n// >>> sum_digits(12)\n// >>> 3\n// >>> sum_digits(97)\n// >>> 16\nfunc sum_digits (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_digits(345)\n\texpected_1 := 12\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_digits(12)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_digits(97)\n\texpected_3 := 16\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to get the sum of a non-negative integer.", "entry_point": "sum_digits", "canonical_solution": null}
{"task_id": "MBGP/567", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check whether a specified list is sorted or not.\n// Examples:\n// >>> issort_list([1,2,4,6,8,10,12,14,16,17])\n// >>> True\n// >>> issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])\n// >>> False\n// >>> issort_list([1, 2, 4, 6, 8, 10,15,14,20])\n// >>> False\nfunc issort_list (list1 []int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := issort_list([]int{1, 2, 4, 6, 8, 10, 12, 14, 16, 17})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := issort_list([]int{1, 2, 4, 6, 8, 10, 12, 14, 20, 17})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := issort_list([]int{1, 2, 4, 6, 8, 10, 15, 14, 20})\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check whether a specified list is sorted or not.", "entry_point": "issort_list", "canonical_solution": null}
{"task_id": "MBGP/568", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to create a list of empty dictionaries.\n// Examples:\n// >>> empty_list(5)\n// >>> [{},{},{},{},{}]\n// >>> empty_list(6)\n// >>> [{},{},{},{},{},{}]\n// >>> empty_list(7)\n// >>> [{},{},{},{},{},{},{}]\nfunc empty_list (length int) []map[interface{}]interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := empty_list(5)\n\texpected_1 := []map[interface{}]interface{}{map[interface{}]interface{}{  }, map[interface{}]interface{}{  }, map[interface{}]interface{}{  }, map[interface{}]interface{}{  }, map[interface{}]interface{}{  }}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := empty_list(6)\n\texpected_2 := []map[interface{}]interface{}{map[interface{}]interface{}{  }, map[interface{}]interface{}{  }, map[interface{}]interface{}{  }, map[interface{}]interface{}{  }, map[interface{}]interface{}{  }, map[interface{}]interface{}{  }}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := empty_list(7)\n\texpected_3 := []map[interface{}]interface{}{map[interface{}]interface{}{  }, map[interface{}]interface{}{  }, map[interface{}]interface{}{  }, map[interface{}]interface{}{  }, map[interface{}]interface{}{  }, map[interface{}]interface{}{  }, map[interface{}]interface{}{  }}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to create a list of empty dictionaries.", "entry_point": "empty_list", "canonical_solution": null}
{"task_id": "MBGP/569", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort each sublist of strings in a given list of lists.\n// Examples:\n// >>> sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])\n// >>> [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n// >>> sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])\n// >>> [['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n// >>> sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])\n// >>> [['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\nfunc sort_sublists (list1 [][]string) [][]string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sort_sublists([][]string{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}})\n\texpected_1 := [][]string{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sort_sublists([][]string{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}})\n\texpected_2 := [][]string{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sort_sublists([][]string{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}})\n\texpected_3 := [][]string{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort each sublist of strings in a given list of lists.", "entry_point": "sort_sublists", "canonical_solution": null}
{"task_id": "MBGP/570", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove words from a given list of strings containing a character or string.\n// Examples:\n// >>> remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])\n// >>> ['Red', '', 'Green', 'Orange', 'White']\n// >>> remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])\n// >>> ['Red', '', 'Green', 'Orange', 'White']\n// >>> remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])\n// >>> ['Red &', 'Orange+', 'Green', 'Orange', 'White']\nfunc remove_words (list1 []string, charlist []string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_words([]string{\"Red color\", \"Orange#\", \"Green\", \"Orange @\", \"White\"},[]string{\"#\", \"color\", \"@\"})\n\texpected_1 := []string{\"Red\", \"\", \"Green\", \"Orange\", \"White\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_words([]string{\"Red &\", \"Orange+\", \"Green\", \"Orange @\", \"White\"},[]string{\"&\", \"+\", \"@\"})\n\texpected_2 := []string{\"Red\", \"\", \"Green\", \"Orange\", \"White\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_words([]string{\"Red &\", \"Orange+\", \"Green\", \"Orange @\", \"White\"},[]string{\"@\"})\n\texpected_3 := []string{\"Red &\", \"Orange+\", \"Green\", \"Orange\", \"White\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove words from a given list of strings containing a character or string.", "entry_point": "remove_words", "canonical_solution": null}
{"task_id": "MBGP/571", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n// Examples:\n// >>> max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4)\n// >>> 62\n// >>> max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12)\n// >>> 25\n// >>> max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6)\n// >>> 21\nfunc max_sum_pair_diff_lessthan_K (arr []int, N int, K int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_sum_pair_diff_lessthan_K([]int{3, 5, 10, 15, 17, 12, 9},7,4)\n\texpected_1 := 62\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_sum_pair_diff_lessthan_K([]int{5, 15, 10, 300},4,12)\n\texpected_2 := 25\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_sum_pair_diff_lessthan_K([]int{1, 2, 3, 4, 5, 6},6,6)\n\texpected_3 := 21\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.", "entry_point": "max_sum_pair_diff_lessthan_K", "canonical_solution": null}
{"task_id": "MBGP/572", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to remove two duplicate numbers from a given number of lists.\n// Examples:\n// >>> two_unique_nums([1,2,3,2,3,4,5])\n// >>> [1, 4, 5]\n// >>> two_unique_nums([1,2,3,2,4,5])\n// >>> [1, 3, 4, 5]\n// >>> two_unique_nums([1,2,3,4,5])\n// >>> [1, 2, 3, 4, 5]\nfunc two_unique_nums (nums []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := two_unique_nums([]int{1, 2, 3, 2, 3, 4, 5})\n\texpected_1 := []int{1, 4, 5}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := two_unique_nums([]int{1, 2, 3, 2, 4, 5})\n\texpected_2 := []int{1, 3, 4, 5}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := two_unique_nums([]int{1, 2, 3, 4, 5})\n\texpected_3 := []int{1, 2, 3, 4, 5}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to remove two duplicate numbers from a given number of lists.", "entry_point": "two_unique_nums", "canonical_solution": null}
{"task_id": "MBGP/573", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to calculate the product of the unique numbers of a given list.\n// Examples:\n// >>> unique_product([10, 20, 30, 40, 20, 50, 60, 40])\n// >>> 720000000\n// >>> unique_product([1, 2, 3, 1,])\n// >>> 6\n// >>> unique_product([7, 8, 9, 0, 1, 1])\n// >>> 0\nfunc unique_product (list_data []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := unique_product([]int{10, 20, 30, 40, 20, 50, 60, 40})\n\texpected_1 := 720000000\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := unique_product([]int{1, 2, 3, 1})\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := unique_product([]int{7, 8, 9, 0, 1, 1})\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to calculate the product of the unique numbers of a given list.", "entry_point": "unique_product", "canonical_solution": null}
{"task_id": "MBGP/574", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the surface area of a cylinder.\n// Examples:\n// >>> surfacearea_cylinder(10,5)\n// >>> 942.45\n// >>> surfacearea_cylinder(4,5)\n// >>> 226.18800000000002\n// >>> surfacearea_cylinder(4,10)\n// >>> 351.848\nfunc surfacearea_cylinder (r int, h int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := surfacearea_cylinder(10,5)\n\texpected_1 := 942.45\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := surfacearea_cylinder(4,5)\n\texpected_2 := 226.18800000000002\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := surfacearea_cylinder(4,10)\n\texpected_3 := 351.848\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the surface area of a cylinder.", "entry_point": "surfacearea_cylinder", "canonical_solution": null}
{"task_id": "MBGP/575", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find nth number in a sequence which is not a multiple of a given number.\n// Examples:\n// >>> count_no(2,3,1,10)\n// >>> 5\n// >>> count_no(3,6,4,20)\n// >>> 11\n// >>> count_no(5,10,4,20)\n// >>> 16\nfunc count_no (A int, N int, L int, R int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_no(2,3,1,10)\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_no(3,6,4,20)\n\texpected_2 := 11\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_no(5,10,4,20)\n\texpected_3 := 16\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find nth number in a sequence which is not a multiple of a given number.", "entry_point": "count_no", "canonical_solution": null}
{"task_id": "MBGP/576", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether an array is subarray of another or not.\n// Examples:\n// >>> is_Sub_Array([1,4,3,5],[1,2],4,2)\n// >>> False\n// >>> is_Sub_Array([1,2,1],[1,2,1],3,3)\n// >>> True\n// >>> is_Sub_Array([1,0,2,2],[2,2,0],4,3)\n// >>> False\nfunc is_Sub_Array (A []int, B []int, n int, m int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_Sub_Array([]int{1, 4, 3, 5},[]int{1, 2},4,2)\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_Sub_Array([]int{1, 2, 1},[]int{1, 2, 1},3,3)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_Sub_Array([]int{1, 0, 2, 2},[]int{2, 2, 0},4,3)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether an array is subarray of another or not.", "entry_point": "is_Sub_Array", "canonical_solution": null}
{"task_id": "MBGP/577", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the last digit in factorial of a given number.\n// Examples:\n// >>> last_Digit_Factorial(4)\n// >>> 4\n// >>> last_Digit_Factorial(21)\n// >>> 0\n// >>> last_Digit_Factorial(30)\n// >>> 0\nfunc last_Digit_Factorial (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := last_Digit_Factorial(4)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := last_Digit_Factorial(21)\n\texpected_2 := 0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := last_Digit_Factorial(30)\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the last digit in factorial of a given number.", "entry_point": "last_Digit_Factorial", "canonical_solution": null}
{"task_id": "MBGP/578", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to interleave lists of the same length.\n// Examples:\n// >>> interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])\n// >>> [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n// >>> interleave_lists([10,20],[15,2],[5,10])\n// >>> [10,15,5,20,2,10]\n// >>> interleave_lists([11,44], [10,15], [20,5])\n// >>> [11,10,20,44,15,5]\nfunc interleave_lists (list1 []int, list2 []int, list3 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := interleave_lists([]int{1, 2, 3, 4, 5, 6, 7},[]int{10, 20, 30, 40, 50, 60, 70},[]int{100, 200, 300, 400, 500, 600, 700})\n\texpected_1 := []int{1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := interleave_lists([]int{10, 20},[]int{15, 2},[]int{5, 10})\n\texpected_2 := []int{10, 15, 5, 20, 2, 10}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := interleave_lists([]int{11, 44},[]int{10, 15},[]int{20, 5})\n\texpected_3 := []int{11, 10, 20, 44, 15, 5}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to interleave lists of the same length.", "entry_point": "interleave_lists", "canonical_solution": null}
{"task_id": "MBGP/579", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the dissimilar elements in the given two tuples.\n// Examples:\n// >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n// >>> (3, 6, 7, 10)\n// >>> find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9))\n// >>> (1, 4, 7, 9)\n// >>> find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36))\n// >>> (34, 36, 11, 25)\nfunc find_dissimilar (test_tup1 []int, test_tup2 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_dissimilar([]int{3, 4, 5, 6},[]int{5, 7, 4, 10})\n\texpected_1 := []int{3, 6, 7, 10}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_dissimilar([]int{1, 2, 3, 4},[]int{7, 2, 3, 9})\n\texpected_2 := []int{1, 4, 7, 9}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_dissimilar([]int{21, 11, 25, 26},[]int{26, 34, 21, 36})\n\texpected_3 := []int{34, 36, 11, 25}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the dissimilar elements in the given two tuples.", "entry_point": "find_dissimilar", "canonical_solution": null}
{"task_id": "MBGP/580", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to extract the even elements in the nested mixed tuple.\n// Examples:\n// >>> extract_even((4, 5, (7, 6, (2, 4)), 6, 8))\n// >>> (4, (6, (2, 4)), 6, 8)\n// >>> extract_even((5, 6, (8, 7, (4, 8)), 7, 9))\n// >>> (6, (8, (4, 8)))\n// >>> extract_even((5, 6, (9, 8, (4, 6)), 8, 10))\n// >>> (6, (8, (4, 6)), 8, 10)\nfunc extract_even (test_tuple []interface{}) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := extract_even([]interface{}{4, 5, []interface{}{7, 6, []interface{}{2, 4}}, 6, 8})\n\texpected_1 := []interface{}{4, []interface{}{6, []interface{}{2, 4}}, 6, 8}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := extract_even([]interface{}{5, 6, []interface{}{8, 7, []interface{}{4, 8}}, 7, 9})\n\texpected_2 := []interface{}{6, []interface{}{8, []interface{}{4, 8}}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := extract_even([]interface{}{5, 6, []interface{}{9, 8, []interface{}{4, 6}}, 8, 10})\n\texpected_3 := []interface{}{6, []interface{}{8, []interface{}{4, 6}}, 8, 10}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to extract the even elements in the nested mixed tuple.", "entry_point": "extract_even", "canonical_solution": null}
{"task_id": "MBGP/581", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the surface area of the square pyramid.\n// Examples:\n// >>> surface_Area(3,4)\n// >>> 33\n// >>> surface_Area(4,5)\n// >>> 56\n// >>> surface_Area(1,2)\n// >>> 5\nfunc surface_Area (b int, s int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := surface_Area(3,4)\n\texpected_1 := 33\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := surface_Area(4,5)\n\texpected_2 := 56\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := surface_Area(1,2)\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the surface area of the square pyramid.", "entry_point": "surface_Area", "canonical_solution": null}
{"task_id": "MBGP/583", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function for nth catalan number.\n// Examples:\n// >>> catalan_number(10)\n// >>> 16796\n// >>> catalan_number(9)\n// >>> 4862\n// >>> catalan_number(7)\n// >>> 429\nfunc catalan_number (num int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := catalan_number(10)\n\texpected_1 := 16796\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := catalan_number(9)\n\texpected_2 := 4862\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := catalan_number(7)\n\texpected_3 := 429\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function for nth catalan number.", "entry_point": "catalan_number", "canonical_solution": null}
{"task_id": "MBGP/584", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find all adverbs and their positions in a given sentence by using regex.\n// Examples:\n// >>> find_adverbs(\"Clearly, he has no excuse for such behavior.\")\n// >>> '0-7: Clearly'\n// >>> find_adverbs(\"Please handle the situation carefuly\")\n// >>> '28-36: carefuly'\n// >>> find_adverbs(\"Complete the task quickly\")\n// >>> '18-25: quickly'\nfunc find_adverbs (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_adverbs(\"Clearly, he has no excuse for such behavior.\")\n\texpected_1 := \"0-7: Clearly\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_adverbs(\"Please handle the situation carefuly\")\n\texpected_2 := \"28-36: carefuly\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_adverbs(\"Complete the task quickly\")\n\texpected_3 := \"18-25: quickly\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find all adverbs and their positions in a given sentence by using regex.", "entry_point": "find_adverbs", "canonical_solution": null}
{"task_id": "MBGP/586", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to split the array and add the first part to the end.\n// Examples:\n// >>> split_Arr([12,10,5,6,52,36],6,2)\n// >>> [5,6,52,36,12,10]\n// >>> split_Arr([1,2,3,4],4,1)\n// >>> [2,3,4,1]\n// >>> split_Arr([0,1,2,3,4,5,6,7],8,3)\n// >>> [3,4,5,6,7,0,1,2]\nfunc split_Arr (a []int, n int, k int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := split_Arr([]int{12, 10, 5, 6, 52, 36},6,2)\n\texpected_1 := []int{5, 6, 52, 36, 12, 10}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := split_Arr([]int{1, 2, 3, 4},4,1)\n\texpected_2 := []int{2, 3, 4, 1}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := split_Arr([]int{0, 1, 2, 3, 4, 5, 6, 7},8,3)\n\texpected_3 := []int{3, 4, 5, 6, 7, 0, 1, 2}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to split the array and add the first part to the end.", "entry_point": "split_Arr", "canonical_solution": null}
{"task_id": "MBGP/587", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert a list to a tuple.\n// Examples:\n// >>> list_tuple([5, 10, 7, 4, 15, 3])\n// >>> (5, 10, 7, 4, 15, 3)\n// >>> list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])\n// >>> (2, 4, 5, 6, 2, 3, 4, 4, 7)\n// >>> list_tuple([58,44,56])\n// >>> (58,44,56)\nfunc list_tuple (listx []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := list_tuple([]int{5, 10, 7, 4, 15, 3})\n\texpected_1 := []int{5, 10, 7, 4, 15, 3}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := list_tuple([]int{2, 4, 5, 6, 2, 3, 4, 4, 7})\n\texpected_2 := []int{2, 4, 5, 6, 2, 3, 4, 4, 7}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := list_tuple([]int{58, 44, 56})\n\texpected_3 := []int{58, 44, 56}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert a list to a tuple.", "entry_point": "list_tuple", "canonical_solution": null}
{"task_id": "MBGP/588", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the difference between largest and smallest value in a given array.\n// Examples:\n// >>> big_diff([1,2,3,4])\n// >>> 3\n// >>> big_diff([4,5,12])\n// >>> 8\n// >>> big_diff([9,2,3])\n// >>> 7\nfunc big_diff (nums []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := big_diff([]int{1, 2, 3, 4})\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := big_diff([]int{4, 5, 12})\n\texpected_2 := 8\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := big_diff([]int{9, 2, 3})\n\texpected_3 := 7\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the difference between largest and smallest value in a given array.", "entry_point": "big_diff", "canonical_solution": null}
{"task_id": "MBGP/589", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find perfect squares between two given numbers.\n// Examples:\n// >>> perfect_squares(1,30)\n// >>> [1, 4, 9, 16, 25]\n// >>> perfect_squares(50,100)\n// >>> [64, 81, 100]\n// >>> perfect_squares(100,200)\n// >>> [100, 121, 144, 169, 196]\nfunc perfect_squares (a int, b int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := perfect_squares(1,30)\n\texpected_1 := []int{1, 4, 9, 16, 25}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := perfect_squares(50,100)\n\texpected_2 := []int{64, 81, 100}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := perfect_squares(100,200)\n\texpected_3 := []int{100, 121, 144, 169, 196}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find perfect squares between two given numbers.", "entry_point": "perfect_squares", "canonical_solution": null}
{"task_id": "MBGP/591", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to interchange the first and last elements in a list.\n// Examples:\n// >>> swap_List([12, 35, 9, 56, 24])\n// >>> [24, 35, 9, 56, 12]\n// >>> swap_List([1, 2, 3])\n// >>> [3, 2, 1]\n// >>> swap_List([4, 5, 6])\n// >>> [6, 5, 4]\nfunc swap_List (newList []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := swap_List([]int{12, 35, 9, 56, 24})\n\texpected_1 := []int{24, 35, 9, 56, 12}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := swap_List([]int{1, 2, 3})\n\texpected_2 := []int{3, 2, 1}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := swap_List([]int{4, 5, 6})\n\texpected_3 := []int{6, 5, 4}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to interchange the first and last elements in a list.", "entry_point": "swap_List", "canonical_solution": null}
{"task_id": "MBGP/592", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find sum of product of binomial co-efficients.\n// Examples:\n// >>> sum_Of_product(3)\n// >>> 15\n// >>> sum_Of_product(4)\n// >>> 56\n// >>> sum_Of_product(1)\n// >>> 1\nfunc sum_Of_product (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_Of_product(3)\n\texpected_1 := 15\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_Of_product(4)\n\texpected_2 := 56\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_Of_product(1)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find sum of product of binomial co-efficients.", "entry_point": "sum_Of_product", "canonical_solution": null}
{"task_id": "MBGP/593", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove leading zeroes from an ip address.\n// Examples:\n// >>> removezero_ip(\"216.08.094.196\")\n// >>> ('216.8.94.196')\n// >>> removezero_ip(\"12.01.024\")\n// >>> ('12.1.24')\n// >>> removezero_ip(\"216.08.094.0196\")\n// >>> ('216.8.94.196')\nfunc removezero_ip (ip string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := removezero_ip(\"216.08.094.196\")\n\texpected_1 := \"216.8.94.196\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := removezero_ip(\"12.01.024\")\n\texpected_2 := \"12.1.24\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := removezero_ip(\"216.08.094.0196\")\n\texpected_3 := \"216.8.94.196\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove leading zeroes from an ip address.", "entry_point": "removezero_ip", "canonical_solution": null}
{"task_id": "MBGP/594", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the difference of first even and odd number of a given list.\n// Examples:\n// >>> diff_even_odd([1,3,5,7,4,1,6,8])\n// >>> 3\n// >>> diff_even_odd([1,2,3,4,5,6,7,8,9,10])\n// >>> 1\n// >>> diff_even_odd([1,5,7,9,10])\n// >>> 9\nfunc diff_even_odd (list1 []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := diff_even_odd([]int{1, 3, 5, 7, 4, 1, 6, 8})\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := diff_even_odd([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := diff_even_odd([]int{1, 5, 7, 9, 10})\n\texpected_3 := 9\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the difference of first even and odd number of a given list.", "entry_point": "diff_even_odd", "canonical_solution": null}
{"task_id": "MBGP/595", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count minimum number of swaps required to convert one binary string to another.\n// Examples:\n// >>> min_Swaps(\"1101\",\"1110\")\n// >>> 1\n// >>> min_Swaps(\"111\",\"000\")\n// >>> \"Not Possible\"\n// >>> min_Swaps(\"111\",\"110\")\n// >>> \"Not Possible\"\nfunc min_Swaps (str1 string, str2 string) interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := min_Swaps(\"1101\",\"1110\")\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := min_Swaps(\"111\",\"000\")\n\texpected_2 := \"Not Possible\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := min_Swaps(\"111\",\"110\")\n\texpected_3 := \"Not Possible\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count minimum number of swaps required to convert one binary string to another.", "entry_point": "min_Swaps", "canonical_solution": null}
{"task_id": "MBGP/596", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the size of the given tuple.\n// Examples:\n// >>> tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) )\n// >>> sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n// >>> tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") )\n// >>> sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\n// >>> tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  )\n// >>> sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))\nfunc tuple_size (tuple_list []interface{}) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := tuple_size([]interface{}{\"A\", 1, \"B\", 2, \"C\", 3})\n\texpected_1 := 104\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := tuple_size([]interface{}{1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"})\n\texpected_2 := 104\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := tuple_size([]interface{}{[]interface{}{1, \"Lion\"}, []interface{}{2, \"Tiger\"}, []interface{}{3, \"Fox\"}, []interface{}{4, \"Wolf\"}})\n\texpected_3 := 88\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the size of the given tuple.", "entry_point": "tuple_size", "canonical_solution": null}
{"task_id": "MBGP/597", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find kth element from the given two sorted arrays.\n// Examples:\n// >>> find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5)\n// >>> 6\n// >>> find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7)\n// >>> 256\n// >>> find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6)\n// >>> 8\nfunc find_kth (arr1 []int, arr2 []int, m int, n int, k int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_kth([]int{2, 3, 6, 7, 9},[]int{1, 4, 8, 10},5,4,5)\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_kth([]int{100, 112, 256, 349, 770},[]int{72, 86, 113, 119, 265, 445, 892},5,7,7)\n\texpected_2 := 256\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_kth([]int{3, 4, 7, 8, 10},[]int{2, 5, 9, 11},5,4,6)\n\texpected_3 := 8\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find kth element from the given two sorted arrays.", "entry_point": "find_kth", "canonical_solution": null}
{"task_id": "MBGP/598", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check whether the given number is armstrong or not.\n// Examples:\n// >>> armstrong_number(153)\n// >>> True\n// >>> armstrong_number(259)\n// >>> False\n// >>> armstrong_number(4458)\n// >>> False\nfunc armstrong_number (number int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := armstrong_number(153)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := armstrong_number(259)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := armstrong_number(4458)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check whether the given number is armstrong or not.", "entry_point": "armstrong_number", "canonical_solution": null}
{"task_id": "MBGP/599", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find sum and average of first n natural numbers.\n// Examples:\n// >>> sum_average(10)\n// >>> (55, 5.5)\n// >>> sum_average(15)\n// >>> (120, 8.0)\n// >>> sum_average(20)\n// >>> (210, 10.5)\nfunc sum_average (number int) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_average(10)\n\texpected_1 := []interface{}{55, 5.5}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_average(15)\n\texpected_2 := []interface{}{120, 8.0}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_average(20)\n\texpected_3 := []interface{}{210, 10.5}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find sum and average of first n natural numbers.", "entry_point": "sum_average", "canonical_solution": null}
{"task_id": "MBGP/600", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the given number is even or not using bitwise operator.\n// Examples:\n// >>> is_Even(1)\n// >>> False\n// >>> is_Even(2)\n// >>> True\n// >>> is_Even(3)\n// >>> False\nfunc is_Even (n int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_Even(1)\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_Even(2)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_Even(3)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the given number is even or not using bitwise operator.", "entry_point": "is_Even", "canonical_solution": null}
{"task_id": "MBGP/602", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the first repeated character in a given string.\n// Examples:\n// >>> first_repeated_char(\"abcabc\")\n// >>> \"a\"\n// >>> first_repeated_char(\"abc\")\n// >>> \"None\"\n// >>> first_repeated_char(\"123123\")\n// >>> \"1\"\nfunc first_repeated_char (str1 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := first_repeated_char(\"abcabc\")\n\texpected_1 := \"a\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := first_repeated_char(\"abc\")\n\texpected_2 := \"None\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := first_repeated_char(\"123123\")\n\texpected_3 := \"1\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the first repeated character in a given string.", "entry_point": "first_repeated_char", "canonical_solution": null}
{"task_id": "MBGP/603", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to get a lucid number smaller than or equal to n.\n// Examples:\n// >>> get_ludic(10)\n// >>> [1, 2, 3, 5, 7]\n// >>> get_ludic(25)\n// >>> [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\n// >>> get_ludic(45)\n// >>> [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\nfunc get_ludic (n int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_ludic(10)\n\texpected_1 := []int{1, 2, 3, 5, 7}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_ludic(25)\n\texpected_2 := []int{1, 2, 3, 5, 7, 11, 13, 17, 23, 25}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_ludic(45)\n\texpected_3 := []int{1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to get a lucid number smaller than or equal to n.", "entry_point": "get_ludic", "canonical_solution": null}
{"task_id": "MBGP/604", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to reverse words in a given string.\n// Examples:\n// >>> reverse_words(\"python program\")\n// >>> (\"program python\")\n// >>> reverse_words(\"java language\")\n// >>> (\"language java\")\n// >>> reverse_words(\"indian man\")\n// >>> (\"man indian\")\nfunc reverse_words (s string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := reverse_words(\"python program\")\n\texpected_1 := \"program python\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := reverse_words(\"java language\")\n\texpected_2 := \"language java\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := reverse_words(\"indian man\")\n\texpected_3 := \"man indian\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to reverse words in a given string.", "entry_point": "reverse_words", "canonical_solution": null}
{"task_id": "MBGP/605", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if the given integer is a prime number.\n// Examples:\n// >>> prime_num(13)\n// >>> True\n// >>> prime_num(7)\n// >>> True\n// >>> prime_num(-1010)\n// >>> False\nfunc prime_num (num int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := prime_num(13)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := prime_num(7)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := prime_num(-1010)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if the given integer is a prime number.", "entry_point": "prime_num", "canonical_solution": null}
{"task_id": "MBGP/606", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert degrees to radians.\n// Examples:\n// >>> radian_degree(90)\n// >>> 1.5707963267948966\n// >>> radian_degree(60)\n// >>> 1.0471975511965976\n// >>> radian_degree(120)\n// >>> 2.0943951023931953\nfunc radian_degree (degree int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := radian_degree(90)\n\texpected_1 := 1.5707963267948966\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := radian_degree(60)\n\texpected_2 := 1.0471975511965976\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := radian_degree(120)\n\texpected_3 := 2.0943951023931953\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert degrees to radians.", "entry_point": "radian_degree", "canonical_solution": null}
{"task_id": "MBGP/607", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n// Examples:\n// >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n// >>> ('fox', 16, 19)\n// >>> find_literals('Its been a very crazy procedure right', 'crazy')\n// >>> ('crazy', 16, 21)\n// >>> find_literals('Hardest choices required strongest will', 'will')\n// >>> ('will', 35, 39)\nfunc find_literals (text string, pattern string) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_literals(\"The quick brown fox jumps over the lazy dog.\",\"fox\")\n\texpected_1 := []interface{}{\"fox\", 16, 19}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_literals(\"Its been a very crazy procedure right\",\"crazy\")\n\texpected_2 := []interface{}{\"crazy\", 16, 21}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_literals(\"Hardest choices required strongest will\",\"will\")\n\texpected_3 := []interface{}{\"will\", 35, 39}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.", "entry_point": "find_literals", "canonical_solution": null}
{"task_id": "MBGP/608", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find nth bell number.\n// Examples:\n// >>> bell_Number(2)\n// >>> 2\n// >>> bell_Number(3)\n// >>> 5\n// >>> bell_Number(4)\n// >>> 15\nfunc bell_Number (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := bell_Number(2)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := bell_Number(3)\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := bell_Number(4)\n\texpected_3 := 15\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find nth bell number.", "entry_point": "bell_Number", "canonical_solution": null}
{"task_id": "MBGP/609", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find minimum possible value for the given periodic function.\n// Examples:\n// >>> floor_Min(10,20,30)\n// >>> 15\n// >>> floor_Min(1,2,1)\n// >>> 0\n// >>> floor_Min(11,10,9)\n// >>> 9\nfunc floor_Min (A int, B int, N int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := floor_Min(10,20,30)\n\texpected_1 := 15\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := floor_Min(1,2,1)\n\texpected_2 := 0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := floor_Min(11,10,9)\n\texpected_3 := 9\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find minimum possible value for the given periodic function.", "entry_point": "floor_Min", "canonical_solution": null}
{"task_id": "MBGP/610", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to remove the k'th element from a given list.\n// Examples:\n// >>> remove_kth_element([1,1,2,3,4,4,5,1],3)\n// >>> [1, 1, 3, 4, 4, 5, 1]\n// >>> remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)\n// >>> [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n// >>> remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)\n// >>> [10,10,15,19, 18, 17, 26, 26, 17, 18, 10]\nfunc remove_kth_element (list1 []int, L int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_kth_element([]int{1, 1, 2, 3, 4, 4, 5, 1},3)\n\texpected_1 := []int{1, 1, 3, 4, 4, 5, 1}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_kth_element([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4},4)\n\texpected_2 := []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_kth_element([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10},5)\n\texpected_3 := []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to remove the k'th element from a given list.", "entry_point": "remove_kth_element", "canonical_solution": null}
{"task_id": "MBGP/611", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the maximum of nth column from the given tuple list.\n// Examples:\n// >>> max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)\n// >>> 19\n// >>> max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1)\n// >>> 10\n// >>> max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1)\n// >>> 11\nfunc max_of_nth (test_list [][]int, N int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_of_nth([][]int{[]int{5, 6, 7}, []int{1, 3, 5}, []int{8, 9, 19}},2)\n\texpected_1 := 19\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_of_nth([][]int{[]int{6, 7, 8}, []int{2, 4, 6}, []int{9, 10, 20}},1)\n\texpected_2 := 10\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_of_nth([][]int{[]int{7, 8, 9}, []int{3, 5, 7}, []int{10, 11, 21}},1)\n\texpected_3 := 11\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the maximum of nth column from the given tuple list.", "entry_point": "max_of_nth", "canonical_solution": null}
{"task_id": "MBGP/612", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to merge the first and last elements separately in a list of lists.\n// Examples:\n// >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n']])\n// >>> [['x', 'a', 'm'], ['y', 'b', 'n']]\n// >>> merge([[1, 2], [3, 4], [5, 6], [7, 8]])\n// >>> [[1, 3, 5, 7], [2, 4, 6, 8]]\n// >>> merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']])\n// >>> [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]\nfunc merge (lst []interface{}) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := merge([]interface{}{[]interface{}{\"x\", \"y\"}, []interface{}{\"a\", \"b\"}, []interface{}{\"m\", \"n\"}})\n\texpected_1 := []interface{}{[]interface{}{\"x\", \"a\", \"m\"}, []interface{}{\"y\", \"b\", \"n\"}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := merge([]interface{}{[]interface{}{1, 2}, []interface{}{3, 4}, []interface{}{5, 6}, []interface{}{7, 8}})\n\texpected_2 := []interface{}{[]interface{}{1, 3, 5, 7}, []interface{}{2, 4, 6, 8}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := merge([]interface{}{[]interface{}{\"x\", \"y\", \"z\"}, []interface{}{\"a\", \"b\", \"c\"}, []interface{}{\"m\", \"n\", \"o\"}})\n\texpected_3 := []interface{}{[]interface{}{\"x\", \"a\", \"m\"}, []interface{}{\"y\", \"b\", \"n\"}, []interface{}{\"z\", \"c\", \"o\"}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to merge the first and last elements separately in a list of lists.", "entry_point": "merge", "canonical_solution": null}
{"task_id": "MBGP/613", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\n// Examples:\n// >>> maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])])\n// >>> [('key1', 5), ('key2', 4), ('key3', 9)]\n// >>> maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])])\n// >>> [('key1', 6), ('key2', 5), ('key3', 10)]\n// >>> maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])])\n// >>> [('key1', 7), ('key2', 6), ('key3', 11)]\nfunc maximum_value (test_list [][]interface{}) [][]interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := maximum_value([][]interface{}{[]interface{}{\"key1\", []interface{}{3, 4, 5}}, []interface{}{\"key2\", []interface{}{1, 4, 2}}, []interface{}{\"key3\", []interface{}{9, 3}}})\n\texpected_1 := [][]interface{}{[]interface{}{\"key1\", 5}, []interface{}{\"key2\", 4}, []interface{}{\"key3\", 9}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := maximum_value([][]interface{}{[]interface{}{\"key1\", []interface{}{4, 5, 6}}, []interface{}{\"key2\", []interface{}{2, 5, 3}}, []interface{}{\"key3\", []interface{}{10, 4}}})\n\texpected_2 := [][]interface{}{[]interface{}{\"key1\", 6}, []interface{}{\"key2\", 5}, []interface{}{\"key3\", 10}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := maximum_value([][]interface{}{[]interface{}{\"key1\", []interface{}{5, 6, 7}}, []interface{}{\"key2\", []interface{}{3, 6, 4}}, []interface{}{\"key3\", []interface{}{11, 5}}})\n\texpected_3 := [][]interface{}{[]interface{}{\"key1\", 7}, []interface{}{\"key2\", 6}, []interface{}{\"key3\", 11}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.", "entry_point": "maximum_value", "canonical_solution": null}
{"task_id": "MBGP/614", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n// Examples:\n// >>> cummulative_sum([(1, 3), (5, 6, 7), (2, 6)])\n// >>> 30\n// >>> cummulative_sum([(2, 4), (6, 7, 8), (3, 7)])\n// >>> 37\n// >>> cummulative_sum([(3, 5), (7, 8, 9), (4, 8)])\n// >>> 44\nfunc cummulative_sum (test_list [][]int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := cummulative_sum([][]int{[]int{1, 3}, []int{5, 6, 7}, []int{2, 6}})\n\texpected_1 := 30\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := cummulative_sum([][]int{[]int{2, 4}, []int{6, 7, 8}, []int{3, 7}})\n\texpected_2 := 37\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := cummulative_sum([][]int{[]int{3, 5}, []int{7, 8, 9}, []int{4, 8}})\n\texpected_3 := 44\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "entry_point": "cummulative_sum", "canonical_solution": null}
{"task_id": "MBGP/615", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find average value of the numbers in a given tuple of tuples.\n// Examples:\n// >>> average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))\n// >>> [30.5, 34.25, 27.0, 23.25]\n// >>> average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))\n// >>> [25.5, -18.0, 3.75]\n// >>> average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))\n// >>> [305.0, 342.5, 270.0, 232.5]\nfunc average_tuple (nums [][]int) []float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := average_tuple([][]int{[]int{10, 10, 10, 12}, []int{30, 45, 56, 45}, []int{81, 80, 39, 32}, []int{1, 2, 3, 4}})\n\texpected_1 := []float64{30.5, 34.25, 27.0, 23.25}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := average_tuple([][]int{[]int{1, 1, -5}, []int{30, -15, 56}, []int{81, -60, -39}, []int{-10, 2, 3}})\n\texpected_2 := []float64{25.5, -18.0, 3.75}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := average_tuple([][]int{[]int{100, 100, 100, 120}, []int{300, 450, 560, 450}, []int{810, 800, 390, 320}, []int{10, 20, 30, 40}})\n\texpected_3 := []float64{305.0, 342.5, 270.0, 232.5}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find average value of the numbers in a given tuple of tuples.", "entry_point": "average_tuple", "canonical_solution": null}
{"task_id": "MBGP/616", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to perfom the modulo of tuple elements in the given two tuples.\n// Examples:\n// >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))\n// >>> (0, 4, 5, 1)\n// >>> tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6))\n// >>> (5, 5, 6, 1)\n// >>> tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7))\n// >>> (5, 6, 7, 1)\nfunc tuple_modulo (test_tup1 []int, test_tup2 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := tuple_modulo([]int{10, 4, 5, 6},[]int{5, 6, 7, 5})\n\texpected_1 := []int{0, 4, 5, 1}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := tuple_modulo([]int{11, 5, 6, 7},[]int{6, 7, 8, 6})\n\texpected_2 := []int{5, 5, 6, 1}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := tuple_modulo([]int{12, 6, 7, 8},[]int{7, 8, 9, 7})\n\texpected_3 := []int{5, 6, 7, 1}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to perfom the modulo of tuple elements in the given two tuples.", "entry_point": "tuple_modulo", "canonical_solution": null}
{"task_id": "MBGP/617", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n// Examples:\n// >>> min_Jumps(3,4,11)\n// >>> 3.5\n// >>> min_Jumps(3,4,0)\n// >>> 0\n// >>> min_Jumps(11,14,11)\n// >>> 1\nfunc min_Jumps (a int, b int, d int) interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := min_Jumps(3,4,11)\n\texpected_1 := 3.5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := min_Jumps(3,4,0)\n\texpected_2 := 0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := min_Jumps(11,14,11)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "entry_point": "min_Jumps", "canonical_solution": null}
{"task_id": "MBGP/618", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to divide two lists using map and lambda function.\n// Examples:\n// >>> div_list([4,5,6],[1, 2, 3])\n// >>> [4.0,2.5,2.0]\n// >>> div_list([3,2],[1,4])\n// >>> [3.0, 0.5]\n// >>> div_list([90,120],[50,70])\n// >>> [1.8, 1.7142857142857142]\nfunc div_list (nums1 []int, nums2 []int) []float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := div_list([]int{4, 5, 6},[]int{1, 2, 3})\n\texpected_1 := []float64{4.0, 2.5, 2.0}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := div_list([]int{3, 2},[]int{1, 4})\n\texpected_2 := []float64{3.0, 0.5}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := div_list([]int{90, 120},[]int{50, 70})\n\texpected_3 := []float64{1.8, 1.7142857142857142}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to divide two lists using map and lambda function.", "entry_point": "div_list", "canonical_solution": null}
{"task_id": "MBGP/619", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to move all the numbers in it to the given string.\n// Examples:\n// >>> move_num('I1love143you55three3000thousand')\n// >>> 'Iloveyouthreethousand1143553000'\n// >>> move_num('Avengers124Assemble')\n// >>> 'AvengersAssemble124'\n// >>> move_num('Its11our12path13to14see15things16do17things')\n// >>> 'Itsourpathtoseethingsdothings11121314151617'\nfunc move_num (test_str string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := move_num(\"I1love143you55three3000thousand\")\n\texpected_1 := \"Iloveyouthreethousand1143553000\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := move_num(\"Avengers124Assemble\")\n\texpected_2 := \"AvengersAssemble124\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := move_num(\"Its11our12path13to14see15things16do17things\")\n\texpected_3 := \"Itsourpathtoseethingsdothings11121314151617\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to move all the numbers in it to the given string.", "entry_point": "move_num", "canonical_solution": null}
{"task_id": "MBGP/620", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the largest subset where each pair is divisible.\n// Examples:\n// >>> largest_subset([ 1, 3, 6, 13, 17, 18 ], 6)\n// >>> 4\n// >>> largest_subset([10, 5, 3, 15, 20], 5)\n// >>> 3\n// >>> largest_subset([18, 1, 3, 6, 13, 17], 6)\n// >>> 4\nfunc largest_subset (a []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := largest_subset([]int{1, 3, 6, 13, 17, 18},6)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := largest_subset([]int{10, 5, 3, 15, 20},5)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := largest_subset([]int{18, 1, 3, 6, 13, 17},6)\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the largest subset where each pair is divisible.", "entry_point": "largest_subset", "canonical_solution": null}
{"task_id": "MBGP/621", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to increment the numeric values in the given strings by k.\n// Examples:\n// >>> increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6)\n// >>> ['MSM', '240', 'is', '104', '129', 'best', '10']\n// >>> increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12)\n// >>> ['Dart', '368', 'is', '100', '181', 'Super', '18']\n// >>> increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33)\n// >>> ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']\nfunc increment_numerics (test_list []string, K int) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := increment_numerics([]string{\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"},6)\n\texpected_1 := []string{\"MSM\", \"240\", \"is\", \"104\", \"129\", \"best\", \"10\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := increment_numerics([]string{\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"},12)\n\texpected_2 := []string{\"Dart\", \"368\", \"is\", \"100\", \"181\", \"Super\", \"18\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := increment_numerics([]string{\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"},33)\n\texpected_3 := []string{\"Flutter\", \"484\", \"is\", \"77\", \"129\", \"Magnificent\", \"45\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to increment the numeric values in the given strings by k.", "entry_point": "increment_numerics", "canonical_solution": null}
{"task_id": "MBGP/622", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the median of two sorted arrays of same size.\n// Examples:\n// >>> get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)\n// >>> 16.0\n// >>> get_median([2, 4, 8, 9], [7, 13, 19, 28], 4)\n// >>> 8.5\n// >>> get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6)\n// >>> 25.0\nfunc get_median (arr1 []int, arr2 []int, n int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_median([]int{1, 12, 15, 26, 38},[]int{2, 13, 17, 30, 45},5)\n\texpected_1 := 16.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_median([]int{2, 4, 8, 9},[]int{7, 13, 19, 28},4)\n\texpected_2 := 8.5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_median([]int{3, 6, 14, 23, 36, 42},[]int{2, 18, 27, 39, 49, 55},6)\n\texpected_3 := 25.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the median of two sorted arrays of same size.", "entry_point": "get_median", "canonical_solution": null}
{"task_id": "MBGP/623", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the n-th power of individual elements in a list using lambda function.\n// Examples:\n// >>> nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)\n// >>> [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n// >>> nth_nums([10,20,30],3)\n// >>> ([1000, 8000, 27000])\n// >>> nth_nums([12,15],5)\n// >>> ([248832, 759375])\nfunc nth_nums (nums []int, n int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := nth_nums([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},2)\n\texpected_1 := []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := nth_nums([]int{10, 20, 30},3)\n\texpected_2 := []int{1000, 8000, 27000}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := nth_nums([]int{12, 15},5)\n\texpected_3 := []int{248832, 759375}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the n-th power of individual elements in a list using lambda function.", "entry_point": "nth_nums", "canonical_solution": null}
{"task_id": "MBGP/624", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to convert the given string to upper case.\n// Examples:\n// >>> is_upper(\"person\")\n// >>> \"PERSON\"\n// >>> is_upper(\"final\")\n// >>> \"FINAL\"\n// >>> is_upper(\"Valid\")\n// >>> \"VALID\"\nfunc is_upper (string0 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_upper(\"person\")\n\texpected_1 := \"PERSON\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_upper(\"final\")\n\texpected_2 := \"FINAL\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_upper(\"Valid\")\n\texpected_3 := \"VALID\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to convert the given string to upper case.", "entry_point": "is_upper", "canonical_solution": null}
{"task_id": "MBGP/625", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to interchange first and last elements in a given list.\n// Examples:\n// >>> swap_List([1,2,3])\n// >>> [3,2,1]\n// >>> swap_List([1,2,3,4,4])\n// >>> [4,2,3,4,1]\n// >>> swap_List([4,5,6])\n// >>> [6,5,4]\nfunc swap_List (newList []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := swap_List([]int{1, 2, 3})\n\texpected_1 := []int{3, 2, 1}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := swap_List([]int{1, 2, 3, 4, 4})\n\texpected_2 := []int{4, 2, 3, 4, 1}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := swap_List([]int{4, 5, 6})\n\texpected_3 := []int{6, 5, 4}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to interchange first and last elements in a given list.", "entry_point": "swap_List", "canonical_solution": null}
{"task_id": "MBGP/626", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the largest triangle that can be inscribed in the semicircle.\n// Examples:\n// >>> triangle_area(0)\n// >>> 0\n// >>> triangle_area(-1)\n// >>> -1\n// >>> triangle_area(2)\n// >>> 4\nfunc triangle_area (r int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := triangle_area(0)\n\texpected_1 := 0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := triangle_area(-1)\n\texpected_2 := -1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := triangle_area(2)\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the largest triangle that can be inscribed in the semicircle.", "entry_point": "triangle_area", "canonical_solution": null}
{"task_id": "MBGP/627", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the smallest missing number from the given array.\n// Examples:\n// >>> find_First_Missing([0,1,2,3],0,3)\n// >>> 4\n// >>> find_First_Missing([0,1,2,6,9],0,4)\n// >>> 3\n// >>> find_First_Missing([2,3,5,8,9],0,4)\n// >>> 0\nfunc find_First_Missing (array []int, start int, end int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_First_Missing([]int{0, 1, 2, 3},0,3)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_First_Missing([]int{0, 1, 2, 6, 9},0,4)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_First_Missing([]int{2, 3, 5, 8, 9},0,4)\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the smallest missing number from the given array.", "entry_point": "find_First_Missing", "canonical_solution": null}
{"task_id": "MBGP/628", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n// Examples:\n// >>> replace_spaces(\"My Name is Dawood\")\n// >>> 'My%20Name%20is%20Dawood'\n// >>> replace_spaces(\"I am a Programmer\")\n// >>> 'I%20am%20a%20Programmer'\n// >>> replace_spaces(\"I love Coding\")\n// >>> 'I%20love%20Coding'\nfunc replace_spaces (string0 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := replace_spaces(\"My Name is Dawood\")\n\texpected_1 := \"My%20Name%20is%20Dawood\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := replace_spaces(\"I am a Programmer\")\n\texpected_2 := \"I%20am%20a%20Programmer\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := replace_spaces(\"I love Coding\")\n\texpected_3 := \"I%20love%20Coding\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.", "entry_point": "replace_spaces", "canonical_solution": null}
{"task_id": "MBGP/629", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find even numbers from a mixed list.\n// Examples:\n// >>> Split([1,2,3,4,5])\n// >>> [2,4]\n// >>> Split([4,5,6,7,8,0,1])\n// >>> [4,6,8,0]\n// >>> Split ([8,12,15,19])\n// >>> [8,12]\nfunc Split (list []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Split([]int{1, 2, 3, 4, 5})\n\texpected_1 := []int{2, 4}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Split([]int{4, 5, 6, 7, 8, 0, 1})\n\texpected_2 := []int{4, 6, 8, 0}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Split([]int{8, 12, 15, 19})\n\texpected_3 := []int{8, 12}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find even numbers from a mixed list.", "entry_point": "Split", "canonical_solution": null}
{"task_id": "MBGP/630", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n// Examples:\n// >>> get_coordinates((3, 4))\n// >>> [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n// >>> get_coordinates((4, 5))\n// >>> [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n// >>> get_coordinates((5, 6))\n// >>> [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\nfunc get_coordinates (test_tup []int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_coordinates([]int{3, 4})\n\texpected_1 := [][]int{[]int{2, 3}, []int{2, 4}, []int{2, 5}, []int{3, 3}, []int{3, 4}, []int{3, 5}, []int{4, 3}, []int{4, 4}, []int{4, 5}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_coordinates([]int{4, 5})\n\texpected_2 := [][]int{[]int{3, 4}, []int{3, 5}, []int{3, 6}, []int{4, 4}, []int{4, 5}, []int{4, 6}, []int{5, 4}, []int{5, 5}, []int{5, 6}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_coordinates([]int{5, 6})\n\texpected_3 := [][]int{[]int{4, 5}, []int{4, 6}, []int{4, 7}, []int{5, 5}, []int{5, 6}, []int{5, 7}, []int{6, 5}, []int{6, 6}, []int{6, 7}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "entry_point": "get_coordinates", "canonical_solution": null}
{"task_id": "MBGP/631", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n// Examples:\n// >>> replace_spaces('Jumanji The Jungle')\n// >>> 'Jumanji_The_Jungle'\n// >>> replace_spaces('The Avengers')\n// >>> 'The_Avengers'\n// >>> replace_spaces('Fast and Furious')\n// >>> 'Fast_and_Furious'\nfunc replace_spaces (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := replace_spaces(\"Jumanji The Jungle\")\n\texpected_1 := \"Jumanji_The_Jungle\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := replace_spaces(\"The Avengers\")\n\texpected_2 := \"The_Avengers\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := replace_spaces(\"Fast and Furious\")\n\texpected_3 := \"Fast_and_Furious\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.", "entry_point": "replace_spaces", "canonical_solution": null}
{"task_id": "MBGP/632", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to move all zeroes to the end of the given list.\n// Examples:\n// >>> move_zero([1,0,2,0,3,4])\n// >>> [1,2,3,4,0,0]\n// >>> move_zero([2,3,2,0,0,4,0,5,0])\n// >>> [2,3,2,4,5,0,0,0,0]\n// >>> move_zero([0,1,0,1,1])\n// >>> [1,1,1,0,0]\nfunc move_zero (num_list []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := move_zero([]int{1, 0, 2, 0, 3, 4})\n\texpected_1 := []int{1, 2, 3, 4, 0, 0}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := move_zero([]int{2, 3, 2, 0, 0, 4, 0, 5, 0})\n\texpected_2 := []int{2, 3, 2, 4, 5, 0, 0, 0, 0}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := move_zero([]int{0, 1, 0, 1, 1})\n\texpected_3 := []int{1, 1, 1, 0, 0}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to move all zeroes to the end of the given list.", "entry_point": "move_zero", "canonical_solution": null}
{"task_id": "MBGP/633", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of xor of all pairs of numbers in the given array.\n// Examples:\n// >>> pair_OR_Sum([5,9,7,6],4)\n// >>> 47\n// >>> pair_OR_Sum([7,3,5],3)\n// >>> 12\n// >>> pair_OR_Sum([7,3],2)\n// >>> 4\nfunc pair_OR_Sum (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := pair_OR_Sum([]int{5, 9, 7, 6},4)\n\texpected_1 := 47\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := pair_OR_Sum([]int{7, 3, 5},3)\n\texpected_2 := 12\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := pair_OR_Sum([]int{7, 3},2)\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of xor of all pairs of numbers in the given array.", "entry_point": "pair_OR_Sum", "canonical_solution": null}
{"task_id": "MBGP/634", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of fourth power of first n even natural numbers.\n// Examples:\n// >>> even_Power_Sum(2)\n// >>> 272\n// >>> even_Power_Sum(3)\n// >>> 1568\n// >>> even_Power_Sum(4)\n// >>> 5664\nfunc even_Power_Sum (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := even_Power_Sum(2)\n\texpected_1 := 272\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := even_Power_Sum(3)\n\texpected_2 := 1568\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := even_Power_Sum(4)\n\texpected_3 := 5664\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of fourth power of first n even natural numbers.", "entry_point": "even_Power_Sum", "canonical_solution": null}
{"task_id": "MBGP/636", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check if roots of a quadratic equation are reciprocal of each other or not.\n// Examples:\n// >>> Check_Solution(2,0,2)\n// >>> \"Yes\"\n// >>> Check_Solution(2,-5,2)\n// >>> \"Yes\"\n// >>> Check_Solution(1,2,3)\n// >>> \"No\"\nfunc Check_Solution (a int, b int, c int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Check_Solution(2,0,2)\n\texpected_1 := \"Yes\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Check_Solution(2,-5,2)\n\texpected_2 := \"Yes\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Check_Solution(1,2,3)\n\texpected_3 := \"No\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check if roots of a quadratic equation are reciprocal of each other or not.", "entry_point": "Check_Solution", "canonical_solution": null}
{"task_id": "MBGP/637", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check whether the given amount has no profit and no loss\n// Examples:\n// >>> noprofit_noloss(1500,1200)\n// >>> False\n// >>> noprofit_noloss(100,100)\n// >>> True\n// >>> noprofit_noloss(2000,5000)\n// >>> False\nfunc noprofit_noloss (actual_cost int, sale_amount int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := noprofit_noloss(1500,1200)\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := noprofit_noloss(100,100)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := noprofit_noloss(2000,5000)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check whether the given amount has no profit and no loss", "entry_point": "noprofit_noloss", "canonical_solution": null}
{"task_id": "MBGP/638", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate wind chill index.\n// Examples:\n// >>> wind_chill(120,35)\n// >>> 40\n// >>> wind_chill(40,70)\n// >>> 86\n// >>> wind_chill(10,100)\n// >>> 116\nfunc wind_chill (v int, t int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := wind_chill(120,35)\n\texpected_1 := 40\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := wind_chill(40,70)\n\texpected_2 := 86\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := wind_chill(10,100)\n\texpected_3 := 116\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate wind chill index.", "entry_point": "wind_chill", "canonical_solution": null}
{"task_id": "MBGP/639", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n// Examples:\n// >>> sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])\n// >>> 16\n// >>> sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])\n// >>> 10\n// >>> sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])\n// >>> 6\nfunc sample_nam (sample_names []string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sample_nam([]string{\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"})\n\texpected_1 := 16\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sample_nam([]string{\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"})\n\texpected_2 := 10\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sample_nam([]string{\"abcd\", \"Python\", \"abba\", \"aba\"})\n\texpected_3 := 6\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "entry_point": "sample_nam", "canonical_solution": null}
{"task_id": "MBGP/640", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove the parenthesis area in a string.\n// Examples:\n// >>> remove_parenthesis([\"python (chrome)\"])\n// >>> (\"python\")\n// >>> remove_parenthesis([\"string(.abc)\"])\n// >>> (\"string\")\n// >>> remove_parenthesis([\"alpha(num)\"])\n// >>> (\"alpha\")\nfunc remove_parenthesis (items []string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_parenthesis([]string{\"python (chrome)\"})\n\texpected_1 := \"python\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_parenthesis([]string{\"string(.abc)\"})\n\texpected_2 := \"string\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_parenthesis([]string{\"alpha(num)\"})\n\texpected_3 := \"alpha\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove the parenthesis area in a string.", "entry_point": "remove_parenthesis", "canonical_solution": null}
{"task_id": "MBGP/641", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the nth nonagonal number.\n// Examples:\n// >>> is_nonagonal(10)\n// >>> 325\n// >>> is_nonagonal(15)\n// >>> 750\n// >>> is_nonagonal(18)\n// >>> 1089\nfunc is_nonagonal (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_nonagonal(10)\n\texpected_1 := 325\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_nonagonal(15)\n\texpected_2 := 750\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_nonagonal(18)\n\texpected_3 := 1089\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the nth nonagonal number.", "entry_point": "is_nonagonal", "canonical_solution": null}
{"task_id": "MBGP/643", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function that matches a word containing 'z', not at the start or end of the word.\n// Examples:\n// >>> text_match_wordz_middle(\"pythonzabc.\")\n// >>> ('Found a match!')\n// >>> text_match_wordz_middle(\"xyzabc.\")\n// >>> ('Found a match!')\n// >>> text_match_wordz_middle(\"  lang  .\")\n// >>> ('Not matched!')\nfunc text_match_wordz_middle (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := text_match_wordz_middle(\"pythonzabc.\")\n\texpected_1 := \"Found a match!\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := text_match_wordz_middle(\"xyzabc.\")\n\texpected_2 := \"Found a match!\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := text_match_wordz_middle(\"  lang  .\")\n\texpected_3 := \"Not matched!\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function that matches a word containing 'z', not at the start or end of the word.", "entry_point": "text_match_wordz_middle", "canonical_solution": null}
{"task_id": "MBGP/644", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to reverse an array upto a given position.\n// Examples:\n// >>> reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4)\n// >>> [4, 3, 2, 1, 5, 6]\n// >>> reverse_Array_Upto_K([4, 5, 6, 7], 2)\n// >>> [5, 4, 6, 7]\n// >>> reverse_Array_Upto_K([9, 8, 7, 6, 5],3)\n// >>> [7, 8, 9, 6, 5]\nfunc reverse_Array_Upto_K (input []int, k int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := reverse_Array_Upto_K([]int{1, 2, 3, 4, 5, 6},4)\n\texpected_1 := []int{4, 3, 2, 1, 5, 6}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := reverse_Array_Upto_K([]int{4, 5, 6, 7},2)\n\texpected_2 := []int{5, 4, 6, 7}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := reverse_Array_Upto_K([]int{9, 8, 7, 6, 5},3)\n\texpected_3 := []int{7, 8, 9, 6, 5}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to reverse an array upto a given position.", "entry_point": "reverse_Array_Upto_K", "canonical_solution": null}
{"task_id": "MBGP/645", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the product of it\u2019s kth index in the given tuples.\n// Examples:\n// >>> find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)\n// >>> 665\n// >>> find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1)\n// >>> 280\n// >>> find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0)\n// >>> 210\nfunc find_k_product (test_list [][]int, K int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_k_product([][]int{[]int{5, 6, 7}, []int{1, 3, 5}, []int{8, 9, 19}},2)\n\texpected_1 := 665\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_k_product([][]int{[]int{6, 7, 8}, []int{2, 4, 6}, []int{9, 10, 20}},1)\n\texpected_2 := 280\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_k_product([][]int{[]int{7, 8, 9}, []int{3, 5, 7}, []int{10, 11, 21}},0)\n\texpected_3 := 210\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the product of it\u2019s kth index in the given tuples.", "entry_point": "find_k_product", "canonical_solution": null}
{"task_id": "MBGP/646", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count number of cubes of size k in a cube of size n.\n// Examples:\n// >>> No_of_cubes(2,1)\n// >>> 8\n// >>> No_of_cubes(5,2)\n// >>> 64\n// >>> No_of_cubes(1,1)\n// >>> 1\nfunc No_of_cubes (N int, K int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := No_of_cubes(2,1)\n\texpected_1 := 8\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := No_of_cubes(5,2)\n\texpected_2 := 64\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := No_of_cubes(1,1)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count number of cubes of size k in a cube of size n.", "entry_point": "No_of_cubes", "canonical_solution": null}
{"task_id": "MBGP/647", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to split a string at uppercase letters.\n// Examples:\n// >>> split_upperstring(\"PythonProgramLanguage\")\n// >>> ['Python','Program','Language']\n// >>> split_upperstring(\"PythonProgram\")\n// >>> ['Python','Program']\n// >>> split_upperstring(\"ProgrammingLanguage\")\n// >>> ['Programming','Language']\nfunc split_upperstring (text string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := split_upperstring(\"PythonProgramLanguage\")\n\texpected_1 := []string{\"Python\", \"Program\", \"Language\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := split_upperstring(\"PythonProgram\")\n\texpected_2 := []string{\"Python\", \"Program\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := split_upperstring(\"ProgrammingLanguage\")\n\texpected_3 := []string{\"Programming\", \"Language\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to split a string at uppercase letters.", "entry_point": "split_upperstring", "canonical_solution": null}
{"task_id": "MBGP/648", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n// Examples:\n// >>> exchange_elements([0,1,2,3,4,5])\n// >>> [1, 0, 3, 2, 5, 4]\n// >>> exchange_elements([5,6,7,8,9,10])\n// >>> [6,5,8,7,10,9]\n// >>> exchange_elements([25,35,45,55,75,95])\n// >>> [35,25,55,45,95,75]\nfunc exchange_elements (lst []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := exchange_elements([]int{0, 1, 2, 3, 4, 5})\n\texpected_1 := []int{1, 0, 3, 2, 5, 4}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := exchange_elements([]int{5, 6, 7, 8, 9, 10})\n\texpected_2 := []int{6, 5, 8, 7, 10, 9}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := exchange_elements([]int{25, 35, 45, 55, 75, 95})\n\texpected_3 := []int{35, 25, 55, 45, 95, 75}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.", "entry_point": "exchange_elements", "canonical_solution": null}
{"task_id": "MBGP/649", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to calculate the sum of the numbers in a list between the indices of a specified range.\n// Examples:\n// >>> sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10)\n// >>> 29\n// >>> sum_Range_list([1,2,3,4,5],1,2)\n// >>> 5\n// >>> sum_Range_list([1,0,1,2,5,6],4,5)\n// >>> 11\nfunc sum_Range_list (nums []int, m int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_Range_list([]int{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12},8,10)\n\texpected_1 := 29\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_Range_list([]int{1, 2, 3, 4, 5},1,2)\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_Range_list([]int{1, 0, 1, 2, 5, 6},4,5)\n\texpected_3 := 11\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to calculate the sum of the numbers in a list between the indices of a specified range.", "entry_point": "sum_Range_list", "canonical_solution": null}
{"task_id": "MBGP/650", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the given two arrays are equal or not.\n// Examples:\n// >>> are_Equal([1,2,3],[3,2,1],3,3)\n// >>> True\n// >>> are_Equal([1,1,1],[2,2,2],3,3)\n// >>> False\n// >>> are_Equal([8,9],[4,5,6],2,3)\n// >>> False\nfunc are_Equal (arr1 []int, arr2 []int, n int, m int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := are_Equal([]int{1, 2, 3},[]int{3, 2, 1},3,3)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := are_Equal([]int{1, 1, 1},[]int{2, 2, 2},3,3)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := are_Equal([]int{8, 9},[]int{4, 5, 6},2,3)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the given two arrays are equal or not.", "entry_point": "are_Equal", "canonical_solution": null}
{"task_id": "MBGP/651", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if one tuple is a subset of another tuple.\n// Examples:\n// >>> check_subset((10, 4, 5, 6), (5, 10))\n// >>> True\n// >>> check_subset((1, 2, 3, 4), (5, 6))\n// >>> False\n// >>> check_subset((7, 8, 9, 10), (10, 8))\n// >>> True\nfunc check_subset (test_tup1 []int, test_tup2 []int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_subset([]int{10, 4, 5, 6},[]int{5, 10})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_subset([]int{1, 2, 3, 4},[]int{5, 6})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_subset([]int{7, 8, 9, 10},[]int{10, 8})\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if one tuple is a subset of another tuple.", "entry_point": "check_subset", "canonical_solution": null}
{"task_id": "MBGP/652", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n// Examples:\n// >>> matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]])\n// >>> '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\n// >>> matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]])\n// >>> '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\n// >>> matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]])\n// >>> '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'\nfunc matrix_to_list (test_list [][][]int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := matrix_to_list([][][]int{[][]int{[]int{4, 5}, []int{7, 8}}, [][]int{[]int{10, 13}, []int{18, 17}}, [][]int{[]int{0, 4}, []int{10, 1}}})\n\texpected_1 := \"[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := matrix_to_list([][][]int{[][]int{[]int{5, 6}, []int{8, 9}}, [][]int{[]int{11, 14}, []int{19, 18}}, [][]int{[]int{1, 5}, []int{11, 2}}})\n\texpected_2 := \"[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := matrix_to_list([][][]int{[][]int{[]int{6, 7}, []int{9, 10}}, [][]int{[]int{12, 15}, []int{20, 21}}, [][]int{[]int{23, 7}, []int{15, 8}}})\n\texpected_3 := \"[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.", "entry_point": "matrix_to_list", "canonical_solution": null}
{"task_id": "MBGP/653", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n// Examples:\n// >>> grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])\n// >>> ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\n// >>> grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])\n// >>> ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\n// >>> grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])\n// >>> ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})\nfunc grouping_dictionary (l [][]interface{}) map[string][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := grouping_dictionary([][]interface{}{[]interface{}{\"yellow\", 1}, []interface{}{\"blue\", 2}, []interface{}{\"yellow\", 3}, []interface{}{\"blue\", 4}, []interface{}{\"red\", 1}})\n\texpected_1 := map[string][]int{ \"yellow\": []int{1, 3}, \"blue\": []int{2, 4}, \"red\": []int{1},  }\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := grouping_dictionary([][]interface{}{[]interface{}{\"yellow\", 10}, []interface{}{\"blue\", 20}, []interface{}{\"yellow\", 30}, []interface{}{\"blue\", 40}, []interface{}{\"red\", 10}})\n\texpected_2 := map[string][]int{ \"yellow\": []int{10, 30}, \"blue\": []int{20, 40}, \"red\": []int{10},  }\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := grouping_dictionary([][]interface{}{[]interface{}{\"yellow\", 15}, []interface{}{\"blue\", 25}, []interface{}{\"yellow\", 35}, []interface{}{\"blue\", 45}, []interface{}{\"red\", 15}})\n\texpected_3 := map[string][]int{ \"yellow\": []int{15, 35}, \"blue\": []int{25, 45}, \"red\": []int{15},  }\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.", "entry_point": "grouping_dictionary", "canonical_solution": null}
{"task_id": "MBGP/654", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the perimeter of a rectangle.\n// Examples:\n// >>> rectangle_perimeter(10,20)\n// >>> 60\n// >>> rectangle_perimeter(10,5)\n// >>> 30\n// >>> rectangle_perimeter(4,2)\n// >>> 12\nfunc rectangle_perimeter (l int, b int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := rectangle_perimeter(10,20)\n\texpected_1 := 60\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := rectangle_perimeter(10,5)\n\texpected_2 := 30\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := rectangle_perimeter(4,2)\n\texpected_3 := 12\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the perimeter of a rectangle.", "entry_point": "rectangle_perimeter", "canonical_solution": null}
{"task_id": "MBGP/655", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of fifth power of n natural numbers.\n// Examples:\n// >>> fifth_Power_Sum(2)\n// >>> 33\n// >>> fifth_Power_Sum(4)\n// >>> 1300\n// >>> fifth_Power_Sum(3)\n// >>> 276\nfunc fifth_Power_Sum (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := fifth_Power_Sum(2)\n\texpected_1 := 33\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := fifth_Power_Sum(4)\n\texpected_2 := 1300\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := fifth_Power_Sum(3)\n\texpected_3 := 276\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of fifth power of n natural numbers.", "entry_point": "fifth_Power_Sum", "canonical_solution": null}
{"task_id": "MBGP/656", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the minimum sum of absolute differences of two arrays.\n// Examples:\n// >>> find_Min_Sum([3,2,1],[2,1,3],3)\n// >>> 0\n// >>> find_Min_Sum([1,2,3],[4,5,6],3)\n// >>> 9\n// >>> find_Min_Sum([4,1,8,7],[2,3,6,5],4)\n// >>> 6\nfunc find_Min_Sum (a []int, b []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Min_Sum([]int{3, 2, 1},[]int{2, 1, 3},3)\n\texpected_1 := 0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Min_Sum([]int{1, 2, 3},[]int{4, 5, 6},3)\n\texpected_2 := 9\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Min_Sum([]int{4, 1, 8, 7},[]int{2, 3, 6, 5},4)\n\texpected_3 := 6\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the minimum sum of absolute differences of two arrays.", "entry_point": "find_Min_Sum", "canonical_solution": null}
{"task_id": "MBGP/657", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the first digit in factorial of a given number.\n// Examples:\n// >>> first_Digit(5)\n// >>> 1\n// >>> first_Digit(10)\n// >>> 3\n// >>> first_Digit(7)\n// >>> 5\nfunc first_Digit (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := first_Digit(5)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := first_Digit(10)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := first_Digit(7)\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the first digit in factorial of a given number.", "entry_point": "first_Digit", "canonical_solution": null}
{"task_id": "MBGP/658", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the item with maximum occurrences in a given list.\n// Examples:\n// >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])\n// >>> 2\n// >>> max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])\n// >>> 1\n// >>> max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])\n// >>> 1\nfunc max_occurrences (list1 []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_occurrences([]int{2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2})\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_occurrences([]int{1, 3, 5, 7, 1, 3, 13, 15, 17, 5, 7, 9, 1, 11})\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_occurrences([]int{1, 2, 3, 2, 4, 5, 1, 1, 1})\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the item with maximum occurrences in a given list.", "entry_point": "max_occurrences", "canonical_solution": null}
{"task_id": "MBGP/659", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to print duplicants from a list of integers.\n// Examples:\n// >>> Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20])\n// >>> [20, 30, -20, 60]\n// >>> Repeat([-1, 1, -1, 8])\n// >>> [-1]\n// >>> Repeat([1, 2, 3, 1, 2,])\n// >>> [1, 2]\nfunc Repeat (x []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Repeat([]int{10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20})\n\texpected_1 := []int{20, 30, -20, 60}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Repeat([]int{-1, 1, -1, 8})\n\texpected_2 := []int{-1}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Repeat([]int{1, 2, 3, 1, 2})\n\texpected_3 := []int{1, 2}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to print duplicants from a list of integers.", "entry_point": "Repeat", "canonical_solution": null}
{"task_id": "MBGP/660", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to choose points from two ranges such that no point lies in both the ranges.\n// Examples:\n// >>> find_Points(5,10,1,5)\n// >>> (1,10)\n// >>> find_Points(3,5,7,9)\n// >>> (3,9)\n// >>> find_Points(1,5,2,8)\n// >>> (1,8)\nfunc find_Points (l1 int, r1 int, l2 int, r2 int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Points(5,10,1,5)\n\texpected_1 := []int{1, 10}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Points(3,5,7,9)\n\texpected_2 := []int{3, 9}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Points(1,5,2,8)\n\texpected_3 := []int{1, 8}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to choose points from two ranges such that no point lies in both the ranges.", "entry_point": "find_Points", "canonical_solution": null}
{"task_id": "MBGP/661", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\n// Examples:\n// >>> max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5)\n// >>> 2101\n// >>> max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5)\n// >>> 5013\n// >>> max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8)\n// >>> 27\nfunc max_sum_of_three_consecutive (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_sum_of_three_consecutive([]int{100, 1000, 100, 1000, 1},5)\n\texpected_1 := 2101\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_sum_of_three_consecutive([]int{3000, 2000, 1000, 3, 10},5)\n\texpected_2 := 5013\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_sum_of_three_consecutive([]int{1, 2, 3, 4, 5, 6, 7, 8},8)\n\texpected_3 := 27\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.", "entry_point": "max_sum_of_three_consecutive", "canonical_solution": null}
{"task_id": "MBGP/662", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort a list in a dictionary.\n// Examples:\n// >>> sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})\n// >>> {'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\n// >>> sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})\n// >>> {'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\n// >>> sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})\n// >>> {'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}\nfunc sorted_dict (dict1 map[string][]int) map[string][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sorted_dict(map[string][]int{ \"n1\": []int{2, 3, 1}, \"n2\": []int{5, 1, 2}, \"n3\": []int{3, 2, 4},  })\n\texpected_1 := map[string][]int{ \"n1\": []int{1, 2, 3}, \"n2\": []int{1, 2, 5}, \"n3\": []int{2, 3, 4},  }\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sorted_dict(map[string][]int{ \"n1\": []int{25, 37, 41}, \"n2\": []int{41, 54, 63}, \"n3\": []int{29, 38, 93},  })\n\texpected_2 := map[string][]int{ \"n1\": []int{25, 37, 41}, \"n2\": []int{41, 54, 63}, \"n3\": []int{29, 38, 93},  }\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sorted_dict(map[string][]int{ \"n1\": []int{58, 44, 56}, \"n2\": []int{91, 34, 58}, \"n3\": []int{100, 200, 300},  })\n\texpected_3 := map[string][]int{ \"n1\": []int{44, 56, 58}, \"n2\": []int{34, 58, 91}, \"n3\": []int{100, 200, 300},  }\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort a list in a dictionary.", "entry_point": "sorted_dict", "canonical_solution": null}
{"task_id": "MBGP/663", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the largest possible value of k such that k modulo x is y.\n// Examples:\n// >>> find_max_val(15, 10, 5)\n// >>> 15\n// >>> find_max_val(187, 10, 5)\n// >>> 185\n// >>> find_max_val(16, 11, 1)\n// >>> 12\nfunc find_max_val (n int, x int, y int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_max_val(15,10,5)\n\texpected_1 := 15\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_max_val(187,10,5)\n\texpected_2 := 185\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_max_val(16,11,1)\n\texpected_3 := 12\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the largest possible value of k such that k modulo x is y.", "entry_point": "find_max_val", "canonical_solution": null}
{"task_id": "MBGP/664", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the average of even numbers till a given even number.\n// Examples:\n// >>> average_Even(2)\n// >>> 2\n// >>> average_Even(4)\n// >>> 3\n// >>> average_Even(100)\n// >>> 51\nfunc average_Even (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := average_Even(2)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := average_Even(4)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := average_Even(100)\n\texpected_3 := 51\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the average of even numbers till a given even number.", "entry_point": "average_Even", "canonical_solution": null}
{"task_id": "MBGP/665", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to shift first element to the end of given list.\n// Examples:\n// >>> move_last([1,2,3,4])\n// >>> [2,3,4,1]\n// >>> move_last([2,3,4,1,5,0])\n// >>> [3,4,1,5,0,2]\n// >>> move_last([5,4,3,2,1])\n// >>> [4,3,2,1,5]\nfunc move_last (num_list []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := move_last([]int{1, 2, 3, 4})\n\texpected_1 := []int{2, 3, 4, 1}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := move_last([]int{2, 3, 4, 1, 5, 0})\n\texpected_2 := []int{3, 4, 1, 5, 0, 2}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := move_last([]int{5, 4, 3, 2, 1})\n\texpected_3 := []int{4, 3, 2, 1, 5}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to shift first element to the end of given list.", "entry_point": "move_last", "canonical_solution": null}
{"task_id": "MBGP/666", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count occurrence of a character in a string.\n// Examples:\n// >>> count_char(\"Python\",'o')\n// >>> 1\n// >>> count_char(\"little\",'t')\n// >>> 2\n// >>> count_char(\"assert\",'s')\n// >>> 2\nfunc count_char (string0 string, char string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_char(\"Python\",\"o\")\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_char(\"little\",\"t\")\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_char(\"assert\",\"s\")\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count occurrence of a character in a string.", "entry_point": "count_char", "canonical_solution": null}
{"task_id": "MBGP/667", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count number of vowels in the string.\n// Examples:\n// >>> Check_Vow('corner','AaEeIiOoUu')\n// >>> 2\n// >>> Check_Vow('valid','AaEeIiOoUu')\n// >>> 2\n// >>> Check_Vow('true','AaEeIiOoUu')\n// >>> 2\nfunc Check_Vow (string0 string, vowels string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Check_Vow(\"corner\",\"AaEeIiOoUu\")\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Check_Vow(\"valid\",\"AaEeIiOoUu\")\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Check_Vow(\"true\",\"AaEeIiOoUu\")\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count number of vowels in the string.", "entry_point": "Check_Vow", "canonical_solution": null}
{"task_id": "MBGP/668", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to replace multiple occurence of character by single.\n// Examples:\n// >>> replace('peep','e')\n// >>> 'pep'\n// >>> replace('Greek','e')\n// >>> 'Grek'\n// >>> replace('Moon','o')\n// >>> 'Mon'\nfunc replace (string0 string, char string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := replace(\"peep\",\"e\")\n\texpected_1 := \"pep\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := replace(\"Greek\",\"e\")\n\texpected_2 := \"Grek\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := replace(\"Moon\",\"o\")\n\texpected_3 := \"Mon\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to replace multiple occurence of character by single.", "entry_point": "replace", "canonical_solution": null}
{"task_id": "MBGP/669", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check whether the given ip address is valid or not using regex.\n// Examples:\n// >>> check_IP(\"192.168.0.1\")\n// >>> 'Valid IP address'\n// >>> check_IP(\"110.234.52.124\")\n// >>> 'Valid IP address'\n// >>> check_IP(\"366.1.2.2\")\n// >>> 'Invalid IP address'\nfunc check_IP (Ip string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_IP(\"192.168.0.1\")\n\texpected_1 := \"Valid IP address\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_IP(\"110.234.52.124\")\n\texpected_2 := \"Valid IP address\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_IP(\"366.1.2.2\")\n\texpected_3 := \"Invalid IP address\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check whether the given ip address is valid or not using regex.", "entry_point": "check_IP", "canonical_solution": null}
{"task_id": "MBGP/670", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether a sequence of numbers has a decreasing trend or not.\n// Examples:\n// >>> decreasing_trend([-4,-3,-2,-1])\n// >>> True\n// >>> decreasing_trend([1,2,3])\n// >>> True\n// >>> decreasing_trend([3,2,1])\n// >>> False\nfunc decreasing_trend (nums []int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := decreasing_trend([]int{-4, -3, -2, -1})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := decreasing_trend([]int{1, 2, 3})\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := decreasing_trend([]int{3, 2, 1})\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether a sequence of numbers has a decreasing trend or not.", "entry_point": "decreasing_trend", "canonical_solution": null}
{"task_id": "MBGP/671", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to set the right most unset bit.\n// Examples:\n// >>> set_Right_most_Unset_Bit(21)\n// >>> 23\n// >>> set_Right_most_Unset_Bit(11)\n// >>> 15\n// >>> set_Right_most_Unset_Bit(15)\n// >>> 15\nfunc set_Right_most_Unset_Bit (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := set_Right_most_Unset_Bit(21)\n\texpected_1 := 23\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := set_Right_most_Unset_Bit(11)\n\texpected_2 := 15\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := set_Right_most_Unset_Bit(15)\n\texpected_3 := 15\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to set the right most unset bit.", "entry_point": "set_Right_most_Unset_Bit", "canonical_solution": null}
{"task_id": "MBGP/672", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find maximum of three numbers.\n// Examples:\n// >>> max_of_three(10,20,30)\n// >>> 30\n// >>> max_of_three(55,47,39)\n// >>> 55\n// >>> max_of_three(10,49,30)\n// >>> 49\nfunc max_of_three (num1 int, num2 int, num3 int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_of_three(10,20,30)\n\texpected_1 := 30\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_of_three(55,47,39)\n\texpected_2 := 55\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_of_three(10,49,30)\n\texpected_3 := 49\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find maximum of three numbers.", "entry_point": "max_of_three", "canonical_solution": null}
{"task_id": "MBGP/673", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to convert a list of multiple integers into a single integer.\n// Examples:\n// >>> convert([1,2,3])\n// >>> 123\n// >>> convert([4,5,6])\n// >>> 456\n// >>> convert([7,8,9])\n// >>> 789\nfunc convert (list []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := convert([]int{1, 2, 3})\n\texpected_1 := 123\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := convert([]int{4, 5, 6})\n\texpected_2 := 456\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := convert([]int{7, 8, 9})\n\texpected_3 := 789\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to convert a list of multiple integers into a single integer.", "entry_point": "convert", "canonical_solution": null}
{"task_id": "MBGP/674", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove duplicate words from a given string using collections module.\n// Examples:\n// >>> remove_duplicate(\"Python Exercises Practice Solution Exercises\")\n// >>> (\"Python Exercises Practice Solution\")\n// >>> remove_duplicate(\"Python Exercises Practice Solution Python\")\n// >>> (\"Python Exercises Practice Solution\")\n// >>> remove_duplicate(\"Python Exercises Practice Solution Practice\")\n// >>> (\"Python Exercises Practice Solution\")\nfunc remove_duplicate (string0 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_duplicate(\"Python Exercises Practice Solution Exercises\")\n\texpected_1 := \"Python Exercises Practice Solution\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_duplicate(\"Python Exercises Practice Solution Python\")\n\texpected_2 := \"Python Exercises Practice Solution\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_duplicate(\"Python Exercises Practice Solution Practice\")\n\texpected_3 := \"Python Exercises Practice Solution\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove duplicate words from a given string using collections module.", "entry_point": "remove_duplicate", "canonical_solution": null}
{"task_id": "MBGP/675", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to add two integers. however, if the sum is between the given range it will return 20.\n// Examples:\n// >>> sum_nums(2,10,11,20)\n// >>> 20\n// >>> sum_nums(15,17,1,10)\n// >>> 32\n// >>> sum_nums(10,15,5,30)\n// >>> 20\nfunc sum_nums (x int, y int, m int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_nums(2,10,11,20)\n\texpected_1 := 20\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_nums(15,17,1,10)\n\texpected_2 := 32\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_nums(10,15,5,30)\n\texpected_3 := 20\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to add two integers. however, if the sum is between the given range it will return 20.", "entry_point": "sum_nums", "canonical_solution": null}
{"task_id": "MBGP/676", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove everything except alphanumeric characters from the given string by using regex.\n// Examples:\n// >>> remove_extra_char('**//Google Android// - 12. ')\n// >>> 'GoogleAndroid12'\n// >>> remove_extra_char('****//Google Flutter//*** - 36. ')\n// >>> 'GoogleFlutter36'\n// >>> remove_extra_char('**//Google Firebase// - 478. ')\n// >>> 'GoogleFirebase478'\nfunc remove_extra_char (text1 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_extra_char(\"**//Google Android// - 12. \")\n\texpected_1 := \"GoogleAndroid12\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_extra_char(\"****//Google Flutter//*** - 36. \")\n\texpected_2 := \"GoogleFlutter36\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_extra_char(\"**//Google Firebase// - 478. \")\n\texpected_3 := \"GoogleFirebase478\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove everything except alphanumeric characters from the given string by using regex.", "entry_point": "remove_extra_char", "canonical_solution": null}
{"task_id": "MBGP/677", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if the triangle is valid or not.\n// Examples:\n// >>> validity_triangle(60,50,90)\n// >>> False\n// >>> validity_triangle(45,75,60)\n// >>> True\n// >>> validity_triangle(30,50,100)\n// >>> True\nfunc validity_triangle (a int, b int, c int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := validity_triangle(60,50,90)\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := validity_triangle(45,75,60)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := validity_triangle(30,50,100)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if the triangle is valid or not.", "entry_point": "validity_triangle", "canonical_solution": null}
{"task_id": "MBGP/678", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to remove spaces from a given string.\n// Examples:\n// >>> remove_spaces(\"a b c\")\n// >>> \"abc\"\n// >>> remove_spaces(\"1 2 3\")\n// >>> \"123\"\n// >>> remove_spaces(\" b c\")\n// >>> \"bc\"\nfunc remove_spaces (str1 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_spaces(\"a b c\")\n\texpected_1 := \"abc\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_spaces(\"1 2 3\")\n\texpected_2 := \"123\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_spaces(\" b c\")\n\texpected_3 := \"bc\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to remove spaces from a given string.", "entry_point": "remove_spaces", "canonical_solution": null}
{"task_id": "MBGP/679", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to access dictionary key\u2019s element by index.\n// Examples:\n// >>> access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)\n// >>> 'physics'\n// >>> access_key({'python':10, 'java': 20, 'C++':30},2)\n// >>> 'C++'\n// >>> access_key({'program':15,'computer':45},1)\n// >>> 'computer'\nfunc access_key (ditionary map[string]int, key int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := access_key(map[string]int{ \"physics\": 80, \"math\": 90, \"chemistry\": 86,  },0)\n\texpected_1 := \"physics\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := access_key(map[string]int{ \"python\": 10, \"java\": 20, \"C++\": 30,  },2)\n\texpected_2 := \"C++\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := access_key(map[string]int{ \"program\": 15, \"computer\": 45,  },1)\n\texpected_3 := \"computer\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to access dictionary key\u2019s element by index.", "entry_point": "access_key", "canonical_solution": null}
{"task_id": "MBGP/680", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether a sequence of numbers has an increasing trend or not.\n// Examples:\n// >>> increasing_trend([1,2,3,4])\n// >>> True\n// >>> increasing_trend([4,3,2,1])\n// >>> False\n// >>> increasing_trend([0,1,4,9])\n// >>> True\nfunc increasing_trend (nums []int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := increasing_trend([]int{1, 2, 3, 4})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := increasing_trend([]int{4, 3, 2, 1})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := increasing_trend([]int{0, 1, 4, 9})\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether a sequence of numbers has an increasing trend or not.", "entry_point": "increasing_trend", "canonical_solution": null}
{"task_id": "MBGP/681", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the smallest prime divisor of a number.\n// Examples:\n// >>> smallest_Divisor(10)\n// >>> 2\n// >>> smallest_Divisor(25)\n// >>> 5\n// >>> smallest_Divisor(31)\n// >>> 31\nfunc smallest_Divisor (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := smallest_Divisor(10)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := smallest_Divisor(25)\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := smallest_Divisor(31)\n\texpected_3 := 31\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the smallest prime divisor of a number.", "entry_point": "smallest_Divisor", "canonical_solution": null}
{"task_id": "MBGP/682", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to multiply two lists using map and lambda function.\n// Examples:\n// >>> mul_list([1, 2, 3],[4,5,6])\n// >>> [4,10,18]\n// >>> mul_list([1,2],[3,4])\n// >>> [3,8]\n// >>> mul_list([90,120],[50,70])\n// >>> [4500,8400]\nfunc mul_list (nums1 []int, nums2 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := mul_list([]int{1, 2, 3},[]int{4, 5, 6})\n\texpected_1 := []int{4, 10, 18}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := mul_list([]int{1, 2},[]int{3, 4})\n\texpected_2 := []int{3, 8}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := mul_list([]int{90, 120},[]int{50, 70})\n\texpected_3 := []int{4500, 8400}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to multiply two lists using map and lambda function.", "entry_point": "mul_list", "canonical_solution": null}
{"task_id": "MBGP/683", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the given number can be represented by sum of two squares or not.\n// Examples:\n// >>> sum_Square(25)\n// >>> True\n// >>> sum_Square(24)\n// >>> False\n// >>> sum_Square(17)\n// >>> True\nfunc sum_Square (n int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_Square(25)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_Square(24)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_Square(17)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the given number can be represented by sum of two squares or not.", "entry_point": "sum_Square", "canonical_solution": null}
{"task_id": "MBGP/684", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count occurences of a character in a repeated string.\n// Examples:\n// >>> count_Char(\"abcac\",'a')\n// >>> 4\n// >>> count_Char(\"abca\",'c')\n// >>> 2\n// >>> count_Char(\"aba\",'a')\n// >>> 7\nfunc count_Char (str string, x string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Char(\"abcac\",\"a\")\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Char(\"abca\",\"c\")\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Char(\"aba\",\"a\")\n\texpected_3 := 7\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count occurences of a character in a repeated string.", "entry_point": "count_Char", "canonical_solution": null}
{"task_id": "MBGP/685", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find sum of prime numbers between 1 to n.\n// Examples:\n// >>> sum_Of_Primes(10)\n// >>> 17\n// >>> sum_Of_Primes(20)\n// >>> 77\n// >>> sum_Of_Primes(5)\n// >>> 10\nfunc sum_Of_Primes (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_Of_Primes(10)\n\texpected_1 := 17\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_Of_Primes(20)\n\texpected_2 := 77\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_Of_Primes(5)\n\texpected_3 := 10\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find sum of prime numbers between 1 to n.", "entry_point": "sum_Of_Primes", "canonical_solution": null}
{"task_id": "MBGP/686", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the frequency of each element in the given list.\n// Examples:\n// >>> freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) )\n// >>> '{4: 3, 5: 4, 6: 2}'\n// >>> freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) )\n// >>> '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\n// >>> freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) )\n// >>> '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'\nfunc freq_element (test_tup []int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := freq_element([]int{4, 5, 4, 5, 6, 6, 5, 5, 4})\n\texpected_1 := \"{4: 3, 5: 4, 6: 2}\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := freq_element([]int{7, 8, 8, 9, 4, 7, 6, 5, 4})\n\texpected_2 := \"{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := freq_element([]int{1, 4, 3, 1, 4, 5, 2, 6, 2, 7})\n\texpected_3 := \"{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the frequency of each element in the given list.", "entry_point": "freq_element", "canonical_solution": null}
{"task_id": "MBGP/687", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\n// Examples:\n// >>> recur_gcd(12,14)\n// >>> 2\n// >>> recur_gcd(13,17)\n// >>> 1\n// >>> recur_gcd(9, 3)\n// >>> 3\nfunc recur_gcd (a int, b int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := recur_gcd(12,14)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := recur_gcd(13,17)\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := recur_gcd(9,3)\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.", "entry_point": "recur_gcd", "canonical_solution": null}
{"task_id": "MBGP/688", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to get the length of a complex number.\n// Examples:\n// >>> len_complex(3,4)\n// >>> 5.0\n// >>> len_complex(9,10)\n// >>> 13.45362404707371\n// >>> len_complex(7,9)\n// >>> 11.40175425099138\nfunc len_complex (a int, b int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := len_complex(3,4)\n\texpected_1 := 5.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := len_complex(9,10)\n\texpected_2 := 13.45362404707371\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := len_complex(7,9)\n\texpected_3 := 11.40175425099138\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to get the length of a complex number.", "entry_point": "len_complex", "canonical_solution": null}
{"task_id": "MBGP/689", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n// Examples:\n// >>> min_jumps([1, 3, 6, 1, 0, 9], 6)\n// >>> 3\n// >>> min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11)\n// >>> 3\n// >>> min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11)\n// >>> 10\nfunc min_jumps (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := min_jumps([]int{1, 3, 6, 1, 0, 9},6)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := min_jumps([]int{1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9},11)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := min_jumps([]int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},11)\n\texpected_3 := 10\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block", "entry_point": "min_jumps", "canonical_solution": null}
{"task_id": "MBGP/690", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to multiply consecutive numbers of a given list.\n// Examples:\n// >>> mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])\n// >>> [1, 3, 12, 16, 20, 30, 42]\n// >>> mul_consecutive_nums([4, 5, 8, 9, 6, 10])\n// >>> [20, 40, 72, 54, 60]\n// >>> mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n// >>> [2, 6, 12, 20, 30, 42, 56, 72, 90]\nfunc mul_consecutive_nums (nums []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := mul_consecutive_nums([]int{1, 1, 3, 4, 4, 5, 6, 7})\n\texpected_1 := []int{1, 3, 12, 16, 20, 30, 42}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := mul_consecutive_nums([]int{4, 5, 8, 9, 6, 10})\n\texpected_2 := []int{20, 40, 72, 54, 60}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := mul_consecutive_nums([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n\texpected_3 := []int{2, 6, 12, 20, 30, 42, 56, 72, 90}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to multiply consecutive numbers of a given list.", "entry_point": "mul_consecutive_nums", "canonical_solution": null}
{"task_id": "MBGP/691", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n// Examples:\n// >>> group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)])\n// >>> {5: [6, 2], 7: [2, 8, 3], 8: [9]}\n// >>> group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)])\n// >>> {6: [7, 3], 8: [3, 9, 4], 9: [10]}\n// >>> group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)])\n// >>> {7: [8, 4], 9: [4, 10, 5], 10: [11]}\nfunc group_element (test_list [][]int) map[int][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := group_element([][]int{[]int{6, 5}, []int{2, 7}, []int{2, 5}, []int{8, 7}, []int{9, 8}, []int{3, 7}})\n\texpected_1 := map[int][]int{ 5: []int{6, 2}, 7: []int{2, 8, 3}, 8: []int{9},  }\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := group_element([][]int{[]int{7, 6}, []int{3, 8}, []int{3, 6}, []int{9, 8}, []int{10, 9}, []int{4, 8}})\n\texpected_2 := map[int][]int{ 6: []int{7, 3}, 8: []int{3, 9, 4}, 9: []int{10},  }\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := group_element([][]int{[]int{8, 7}, []int{4, 9}, []int{4, 7}, []int{10, 9}, []int{11, 10}, []int{5, 9}})\n\texpected_3 := map[int][]int{ 7: []int{8, 4}, 9: []int{4, 10, 5}, 10: []int{11},  }\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.", "entry_point": "group_element", "canonical_solution": null}
{"task_id": "MBGP/692", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the last two digits in factorial of a given number.\n// Examples:\n// >>> last_Two_Digits(7)\n// >>> 40\n// >>> last_Two_Digits(5)\n// >>> 20\n// >>> last_Two_Digits(2)\n// >>> 2\nfunc last_Two_Digits (N int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := last_Two_Digits(7)\n\texpected_1 := 40\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := last_Two_Digits(5)\n\texpected_2 := 20\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := last_Two_Digits(2)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the last two digits in factorial of a given number.", "entry_point": "last_Two_Digits", "canonical_solution": null}
{"task_id": "MBGP/693", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove multiple spaces in a string by using regex.\n// Examples:\n// >>> remove_multiple_spaces('Google      Assistant')\n// >>> 'Google Assistant'\n// >>> remove_multiple_spaces('Quad      Core')\n// >>> 'Quad Core'\n// >>> remove_multiple_spaces('ChromeCast      Built-in')\n// >>> 'ChromeCast Built-in'\nfunc remove_multiple_spaces (text1 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_multiple_spaces(\"Google      Assistant\")\n\texpected_1 := \"Google Assistant\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_multiple_spaces(\"Quad      Core\")\n\texpected_2 := \"Quad Core\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_multiple_spaces(\"ChromeCast      Built-in\")\n\texpected_3 := \"ChromeCast Built-in\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove multiple spaces in a string by using regex.", "entry_point": "remove_multiple_spaces", "canonical_solution": null}
{"task_id": "MBGP/694", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to extract unique values from the given dictionary values.\n// Examples:\n// >>> extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} )\n// >>> [1, 2, 5, 6, 7, 8, 10, 11, 12]\n// >>> extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} )\n// >>> [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\n// >>> extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]})\n// >>> [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]\nfunc extract_unique (test_dict map[string][]int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := extract_unique(map[string][]int{ \"msm\": []int{5, 6, 7, 8}, \"is\": []int{10, 11, 7, 5}, \"best\": []int{6, 12, 10, 8}, \"for\": []int{1, 2, 5},  })\n\texpected_1 := []int{1, 2, 5, 6, 7, 8, 10, 11, 12}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := extract_unique(map[string][]int{ \"Built\": []int{7, 1, 9, 4}, \"for\": []int{11, 21, 36, 14, 9}, \"ISP\": []int{4, 1, 21, 39, 47}, \"TV\": []int{1, 32, 38},  })\n\texpected_2 := []int{1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := extract_unique(map[string][]int{ \"F\": []int{11, 13, 14, 17}, \"A\": []int{12, 11, 15, 18}, \"N\": []int{19, 21, 15, 36}, \"G\": []int{37, 36, 35},  })\n\texpected_3 := []int{11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to extract unique values from the given dictionary values.", "entry_point": "extract_unique", "canonical_solution": null}
{"task_id": "MBGP/695", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n// Examples:\n// >>> check_greater((10, 4, 5), (13, 5, 18))\n// >>> True\n// >>> check_greater((1, 2, 3), (2, 1, 4))\n// >>> False\n// >>> check_greater((4, 5, 6), (5, 6, 7))\n// >>> True\nfunc check_greater (test_tup1 []int, test_tup2 []int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_greater([]int{10, 4, 5},[]int{13, 5, 18})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_greater([]int{1, 2, 3},[]int{2, 1, 4})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_greater([]int{4, 5, 6},[]int{5, 6, 7})\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.", "entry_point": "check_greater", "canonical_solution": null}
{"task_id": "MBGP/696", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to zip two given lists of lists.\n// Examples:\n// >>> zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )\n// >>> [[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\n// >>> zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )\n// >>> [[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\n// >>> zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )\n// >>> [['a','b','e','f'],['c','d','g','h']]\nfunc zip_list (list1 []interface{}, list2 []interface{}) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := zip_list([]interface{}{[]interface{}{1, 3}, []interface{}{5, 7}, []interface{}{9, 11}},[]interface{}{[]interface{}{2, 4}, []interface{}{6, 8}, []interface{}{10, 12, 14}})\n\texpected_1 := []interface{}{[]interface{}{1, 3, 2, 4}, []interface{}{5, 7, 6, 8}, []interface{}{9, 11, 10, 12, 14}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := zip_list([]interface{}{[]interface{}{1, 2}, []interface{}{3, 4}, []interface{}{5, 6}},[]interface{}{[]interface{}{7, 8}, []interface{}{9, 10}, []interface{}{11, 12}})\n\texpected_2 := []interface{}{[]interface{}{1, 2, 7, 8}, []interface{}{3, 4, 9, 10}, []interface{}{5, 6, 11, 12}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := zip_list([]interface{}{[]interface{}{\"a\", \"b\"}, []interface{}{\"c\", \"d\"}},[]interface{}{[]interface{}{\"e\", \"f\"}, []interface{}{\"g\", \"h\"}})\n\texpected_3 := []interface{}{[]interface{}{\"a\", \"b\", \"e\", \"f\"}, []interface{}{\"c\", \"d\", \"g\", \"h\"}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to zip two given lists of lists.", "entry_point": "zip_list", "canonical_solution": null}
{"task_id": "MBGP/697", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find number of even elements in the given list using lambda function.\n// Examples:\n// >>> count_even([1, 2, 3, 5, 7, 8, 9, 10])\n// >>> 3\n// >>> count_even([10,15,14,13,-18,12,-20])\n// >>> 5\n// >>> count_even([1, 2, 4, 8, 9])\n// >>> 3\nfunc count_even (array_nums []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_even([]int{1, 2, 3, 5, 7, 8, 9, 10})\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_even([]int{10, 15, 14, 13, -18, 12, -20})\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_even([]int{1, 2, 4, 8, 9})\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find number of even elements in the given list using lambda function.", "entry_point": "count_even", "canonical_solution": null}
{"task_id": "MBGP/699", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the minimum number of swaps required to convert one binary string to another.\n// Examples:\n// >>> min_Swaps(\"1101\",\"1110\")\n// >>> 1\n// >>> min_Swaps(\"1111\",\"0100\")\n// >>> \"Not Possible\"\n// >>> min_Swaps(\"1110000\",\"0001101\")\n// >>> 3\nfunc min_Swaps (str1 string, str2 string) interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := min_Swaps(\"1101\",\"1110\")\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := min_Swaps(\"1111\",\"0100\")\n\texpected_2 := \"Not Possible\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := min_Swaps(\"1110000\",\"0001101\")\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the minimum number of swaps required to convert one binary string to another.", "entry_point": "min_Swaps", "canonical_solution": null}
{"task_id": "MBGP/700", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count the number of elements in a list which are within a specific range.\n// Examples:\n// >>> count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)\n// >>> 6\n// >>> count_range_in_list(['a','b','c','d','e','f'],'a','e')\n// >>> 5\n// >>> count_range_in_list([7,8,9,15,17,19,45],15,20)\n// >>> 3\nfunc count_range_in_list (li []interface{}, min interface{}, max interface{}) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_range_in_list([]interface{}{10, 20, 30, 40, 40, 40, 70, 80, 99},40,100)\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_range_in_list([]interface{}{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"},\"a\",\"e\")\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_range_in_list([]interface{}{7, 8, 9, 15, 17, 19, 45},15,20)\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count the number of elements in a list which are within a specific range.", "entry_point": "count_range_in_list", "canonical_solution": null}
{"task_id": "MBGP/701", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the equilibrium index of the given array.\n// Examples:\n// >>> equilibrium_index([1, 2, 3, 4, 1, 2, 3])\n// >>> 3\n// >>> equilibrium_index([-7, 1, 5, 2, -4, 3, 0])\n// >>> 3\n// >>> equilibrium_index([1, 2, 3])\n// >>> -1\nfunc equilibrium_index (arr []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := equilibrium_index([]int{1, 2, 3, 4, 1, 2, 3})\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := equilibrium_index([]int{-7, 1, 5, 2, -4, 3, 0})\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := equilibrium_index([]int{1, 2, 3})\n\texpected_3 := -1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the equilibrium index of the given array.", "entry_point": "equilibrium_index", "canonical_solution": null}
{"task_id": "MBGP/702", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n// Examples:\n// >>> removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4)\n// >>> 5\n// >>> removals([1, 5, 6, 2, 8], 5, 2)\n// >>> 3\n// >>> removals([1, 2, 3 ,4, 5, 6], 6, 3)\n// >>> 2\nfunc removals (arr []int, n int, k int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := removals([]int{1, 3, 4, 9, 10, 11, 12, 17, 20},9,4)\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := removals([]int{1, 5, 6, 2, 8},5,2)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := removals([]int{1, 2, 3, 4, 5, 6},6,3)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.", "entry_point": "removals", "canonical_solution": null}
{"task_id": "MBGP/703", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check whether the given key is present in the dictionary or not.\n// Examples:\n// >>> is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)\n// >>> True\n// >>> is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)\n// >>> True\n// >>> is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)\n// >>> False\nfunc is_key_present (d map[int]int, x int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_key_present(map[int]int{ 1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60,  },5)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_key_present(map[int]int{ 1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60,  },6)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_key_present(map[int]int{ 1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60,  },10)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check whether the given key is present in the dictionary or not.", "entry_point": "is_key_present", "canonical_solution": null}
{"task_id": "MBGP/704", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate the harmonic sum of n-1.\n// Examples:\n// >>> harmonic_sum(10)\n// >>> 2.9289682539682538\n// >>> harmonic_sum(4)\n// >>> 2.083333333333333\n// >>> harmonic_sum(7)\n// >>> 2.5928571428571425\nfunc harmonic_sum (n int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := harmonic_sum(10)\n\texpected_1 := 2.9289682539682538\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := harmonic_sum(4)\n\texpected_2 := 2.083333333333333\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := harmonic_sum(7)\n\texpected_3 := 2.5928571428571425\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate the harmonic sum of n-1.", "entry_point": "harmonic_sum", "canonical_solution": null}
{"task_id": "MBGP/705", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort a list of lists by length and value.\n// Examples:\n// >>> sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])\n// >>> [[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\n// >>> sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])\n// >>> [[1], [7], [2, 3], [10, 11], [4, 5, 6]]\n// >>> sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])\n// >>> [['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]\nfunc sort_sublists (list1 []interface{}) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sort_sublists([]interface{}{[]interface{}{2}, []interface{}{0}, []interface{}{1, 3}, []interface{}{0, 7}, []interface{}{9, 11}, []interface{}{13, 15, 17}})\n\texpected_1 := []interface{}{[]interface{}{0}, []interface{}{2}, []interface{}{0, 7}, []interface{}{1, 3}, []interface{}{9, 11}, []interface{}{13, 15, 17}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sort_sublists([]interface{}{[]interface{}{1}, []interface{}{2, 3}, []interface{}{4, 5, 6}, []interface{}{7}, []interface{}{10, 11}})\n\texpected_2 := []interface{}{[]interface{}{1}, []interface{}{7}, []interface{}{2, 3}, []interface{}{10, 11}, []interface{}{4, 5, 6}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sort_sublists([]interface{}{[]interface{}{\"python\"}, []interface{}{\"java\", \"C\", \"C++\"}, []interface{}{\"DBMS\"}, []interface{}{\"SQL\", \"HTML\"}})\n\texpected_3 := []interface{}{[]interface{}{\"DBMS\"}, []interface{}{\"python\"}, []interface{}{\"SQL\", \"HTML\"}, []interface{}{\"java\", \"C\", \"C++\"}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort a list of lists by length and value.", "entry_point": "sort_sublists", "canonical_solution": null}
{"task_id": "MBGP/706", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find whether an array is subset of another array.\n// Examples:\n// >>> is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4)\n// >>> True\n// >>> is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3)\n// >>> True\n// >>> is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3)\n// >>> False\nfunc is_subset (arr1 []int, m int, arr2 []int, n int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_subset([]int{11, 1, 13, 21, 3, 7},6,[]int{11, 3, 7, 1},4)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_subset([]int{1, 2, 3, 4, 5, 6},6,[]int{1, 2, 4},3)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_subset([]int{10, 5, 2, 23, 19},5,[]int{19, 5, 3},3)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find whether an array is subset of another array.", "entry_point": "is_subset", "canonical_solution": null}
{"task_id": "MBGP/707", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the total set bits from 1 to n.\n// Examples:\n// >>> count_Set_Bits(16)\n// >>> 33\n// >>> count_Set_Bits(2)\n// >>> 2\n// >>> count_Set_Bits(14)\n// >>> 28\nfunc count_Set_Bits (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Set_Bits(16)\n\texpected_1 := 33\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Set_Bits(2)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Set_Bits(14)\n\texpected_3 := 28\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the total set bits from 1 to n.", "entry_point": "count_Set_Bits", "canonical_solution": null}
{"task_id": "MBGP/708", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to convert a string to a list.\n// Examples:\n// >>> Convert('python program')\n// >>> ['python','program']\n// >>> Convert('Data Analysis')\n// >>> ['Data','Analysis']\n// >>> Convert('Hadoop Training')\n// >>> ['Hadoop','Training']\nfunc Convert (string0 string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Convert(\"python program\")\n\texpected_1 := []string{\"python\", \"program\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Convert(\"Data Analysis\")\n\texpected_2 := []string{\"Data\", \"Analysis\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Convert(\"Hadoop Training\")\n\texpected_3 := []string{\"Hadoop\", \"Training\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to convert a string to a list.", "entry_point": "Convert", "canonical_solution": null}
{"task_id": "MBGP/709", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count unique keys for each value present in the tuple.\n// Examples:\n// >>> get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] )\n// >>> '{4: 4, 2: 3, 1: 2}'\n// >>> get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] )\n// >>> '{5: 4, 3: 3, 2: 2}'\n// >>> get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] )\n// >>> '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'\nfunc get_unique (test_list [][]int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_unique([][]int{[]int{3, 4}, []int{1, 2}, []int{2, 4}, []int{8, 2}, []int{7, 2}, []int{8, 1}, []int{9, 1}, []int{8, 4}, []int{10, 4}})\n\texpected_1 := \"{4: 4, 2: 3, 1: 2}\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_unique([][]int{[]int{4, 5}, []int{2, 3}, []int{3, 5}, []int{9, 3}, []int{8, 3}, []int{9, 2}, []int{10, 2}, []int{9, 5}, []int{11, 5}})\n\texpected_2 := \"{5: 4, 3: 3, 2: 2}\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_unique([][]int{[]int{6, 5}, []int{3, 4}, []int{2, 6}, []int{11, 1}, []int{8, 22}, []int{8, 11}, []int{4, 3}, []int{14, 3}, []int{11, 6}})\n\texpected_3 := \"{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count unique keys for each value present in the tuple.", "entry_point": "get_unique", "canonical_solution": null}
{"task_id": "MBGP/710", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to access the initial and last data of the given tuple record.\n// Examples:\n// >>> front_and_rear((10, 4, 5, 6, 7))\n// >>> (10, 7)\n// >>> front_and_rear((1, 2, 3, 4, 5))\n// >>> (1, 5)\n// >>> front_and_rear((6, 7, 8, 9, 10))\n// >>> (6, 10)\nfunc front_and_rear (test_tup []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := front_and_rear([]int{10, 4, 5, 6, 7})\n\texpected_1 := []int{10, 7}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := front_and_rear([]int{1, 2, 3, 4, 5})\n\texpected_2 := []int{1, 5}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := front_and_rear([]int{6, 7, 8, 9, 10})\n\texpected_3 := []int{6, 10}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to access the initial and last data of the given tuple record.", "entry_point": "front_and_rear", "canonical_solution": null}
{"task_id": "MBGP/711", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the product of digits of a number at even and odd places is equal or not.\n// Examples:\n// >>> product_Equal(2841)\n// >>> True\n// >>> product_Equal(1234)\n// >>> False\n// >>> product_Equal(1212)\n// >>> False\nfunc product_Equal (n int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := product_Equal(2841)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := product_Equal(1234)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := product_Equal(1212)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the product of digits of a number at even and odd places is equal or not.", "entry_point": "product_Equal", "canonical_solution": null}
{"task_id": "MBGP/712", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove duplicates from a list of lists.\n// Examples:\n// >>> remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\n// >>> [[10, 20], [30, 56, 25], [33], [40]]\n// >>> remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )\n// >>> [\"a\", \"b\", \"c\"]\n// >>> remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )\n// >>> [1, 3, 5, 6]\nfunc remove_duplicate (list1 []interface{}) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_duplicate([]interface{}{[]interface{}{10, 20}, []interface{}{40}, []interface{}{30, 56, 25}, []interface{}{10, 20}, []interface{}{33}, []interface{}{40}})\n\texpected_1 := []interface{}{[]interface{}{10, 20}, []interface{}{30, 56, 25}, []interface{}{33}, []interface{}{40}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_duplicate([]interface{}{\"a\", \"b\", \"a\", \"c\", \"c\"})\n\texpected_2 := []interface{}{\"a\", \"b\", \"c\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_duplicate([]interface{}{1, 3, 5, 6, 3, 5, 6, 1})\n\texpected_3 := []interface{}{1, 3, 5, 6}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove duplicates from a list of lists.", "entry_point": "remove_duplicate", "canonical_solution": null}
{"task_id": "MBGP/713", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if the given tuple contains all valid values or not.\n// Examples:\n// >>> check_valid((True, True, True, True) )\n// >>> True\n// >>> check_valid((True, False, True, True) )\n// >>> False\n// >>> check_valid((True, True, True, True) )\n// >>> True\nfunc check_valid (test_tup []bool) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_valid([]bool{true, true, true, true})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_valid([]bool{true, false, true, true})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_valid([]bool{true, true, true, true})\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if the given tuple contains all valid values or not.", "entry_point": "check_valid", "canonical_solution": null}
{"task_id": "MBGP/714", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the number of distinct power of prime factor of given number.\n// Examples:\n// >>> count_Fac(24)\n// >>> 3\n// >>> count_Fac(12)\n// >>> 2\n// >>> count_Fac(4)\n// >>> 1\nfunc count_Fac (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Fac(24)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Fac(12)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Fac(4)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the number of distinct power of prime factor of given number.", "entry_point": "count_Fac", "canonical_solution": null}
{"task_id": "MBGP/715", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert the given string of integers into a tuple.\n// Examples:\n// >>> str_to_tuple(\"1, -5, 4, 6, 7\")\n// >>> (1, -5, 4, 6, 7)\n// >>> str_to_tuple(\"1, 2, 3, 4, 5\")\n// >>> (1, 2, 3, 4, 5)\n// >>> str_to_tuple(\"4, 6, 9, 11, 13, 14\")\n// >>> (4, 6, 9, 11, 13, 14)\nfunc str_to_tuple (test_str string) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := str_to_tuple(\"1, -5, 4, 6, 7\")\n\texpected_1 := []int{1, -5, 4, 6, 7}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := str_to_tuple(\"1, 2, 3, 4, 5\")\n\texpected_2 := []int{1, 2, 3, 4, 5}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := str_to_tuple(\"4, 6, 9, 11, 13, 14\")\n\texpected_3 := []int{4, 6, 9, 11, 13, 14}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert the given string of integers into a tuple.", "entry_point": "str_to_tuple", "canonical_solution": null}
{"task_id": "MBGP/716", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the perimeter of a rombus.\n// Examples:\n// >>> rombus_perimeter(10)\n// >>> 40\n// >>> rombus_perimeter(5)\n// >>> 20\n// >>> rombus_perimeter(4)\n// >>> 16\nfunc rombus_perimeter (a int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := rombus_perimeter(10)\n\texpected_1 := 40\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := rombus_perimeter(5)\n\texpected_2 := 20\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := rombus_perimeter(4)\n\texpected_3 := 16\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the perimeter of a rombus.", "entry_point": "rombus_perimeter", "canonical_solution": null}
{"task_id": "MBGP/717", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate the standard deviation.\n// Examples:\n// >>> sd_calc([4, 2, 5, 8, 6])\n// >>> 2.23606797749979\n// >>> sd_calc([1,2,3,4,5,6,7])\n// >>> 2.160246899469287\n// >>> sd_calc([5,9,10,15,6,4])\n// >>> 4.070217029430577\nfunc sd_calc (data []int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sd_calc([]int{4, 2, 5, 8, 6})\n\texpected_1 := 2.23606797749979\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sd_calc([]int{1, 2, 3, 4, 5, 6, 7})\n\texpected_2 := 2.160246899469287\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sd_calc([]int{5, 9, 10, 15, 6, 4})\n\texpected_3 := 4.070217029430577\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate the standard deviation.", "entry_point": "sd_calc", "canonical_solution": null}
{"task_id": "MBGP/718", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to create a list taking alternate elements from another given list.\n// Examples:\n// >>> alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])\n// >>> ['red', 'white', 'orange']\n// >>> alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])\n// >>> [2, 3, 0, 8, 4]\n// >>> alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n// >>> [1,3,5,7,9]\nfunc alternate_elements (list1 []interface{}) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := alternate_elements([]interface{}{\"red\", \"black\", \"white\", \"green\", \"orange\"})\n\texpected_1 := []interface{}{\"red\", \"white\", \"orange\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := alternate_elements([]interface{}{2, 0, 3, 4, 0, 2, 8, 3, 4, 2})\n\texpected_2 := []interface{}{2, 3, 0, 8, 4}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := alternate_elements([]interface{}{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n\texpected_3 := []interface{}{1, 3, 5, 7, 9}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to create a list taking alternate elements from another given list.", "entry_point": "alternate_elements", "canonical_solution": null}
{"task_id": "MBGP/719", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function that matches a string that has an a followed by zero or more b's.\n// Examples:\n// >>> text_match(\"ac\")\n// >>> ('Found a match!')\n// >>> text_match(\"dc\")\n// >>> ('Not matched!')\n// >>> text_match(\"abba\")\n// >>> ('Found a match!')\nfunc text_match (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := text_match(\"ac\")\n\texpected_1 := \"Found a match!\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := text_match(\"dc\")\n\texpected_2 := \"Not matched!\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := text_match(\"abba\")\n\texpected_3 := \"Found a match!\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function that matches a string that has an a followed by zero or more b's.", "entry_point": "text_match", "canonical_solution": null}
{"task_id": "MBGP/721", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n// Examples:\n// >>> maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3)\n// >>> 5.2\n// >>> maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3)\n// >>> 6.2\n// >>> maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3)\n// >>> 7.2\nfunc maxAverageOfPath (cost [][]int, N int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := maxAverageOfPath([][]int{[]int{1, 2, 3}, []int{6, 5, 4}, []int{7, 3, 9}},3)\n\texpected_1 := 5.2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := maxAverageOfPath([][]int{[]int{2, 3, 4}, []int{7, 6, 5}, []int{8, 4, 10}},3)\n\texpected_2 := 6.2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := maxAverageOfPath([][]int{[]int{3, 4, 5}, []int{8, 7, 6}, []int{9, 5, 11}},3)\n\texpected_3 := 7.2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.", "entry_point": "maxAverageOfPath", "canonical_solution": null}
{"task_id": "MBGP/722", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to filter the height and width of students which are stored in a dictionary.\n// Examples:\n// >>> filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)\n// >>> {'Cierra Vega': (6.2, 70)}\n// >>> filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)\n// >>> {'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\n// >>> filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)\n// >>> {'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}\nfunc filter_data (students map[string][]interface{}, h float64, w int) map[string][]interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := filter_data(map[string][]interface{}{ \"Cierra Vega\": []interface{}{6.2, 70}, \"Alden Cantrell\": []interface{}{5.9, 65}, \"Kierra Gentry\": []interface{}{6.0, 68}, \"Pierre Cox\": []interface{}{5.8, 66},  },6.0,70)\n\texpected_1 := map[string][]interface{}{ \"Cierra Vega\": []interface{}{6.2, 70},  }\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := filter_data(map[string][]interface{}{ \"Cierra Vega\": []interface{}{6.2, 70}, \"Alden Cantrell\": []interface{}{5.9, 65}, \"Kierra Gentry\": []interface{}{6.0, 68}, \"Pierre Cox\": []interface{}{5.8, 66},  },5.9,67)\n\texpected_2 := map[string][]interface{}{ \"Cierra Vega\": []interface{}{6.2, 70}, \"Kierra Gentry\": []interface{}{6.0, 68},  }\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := filter_data(map[string][]interface{}{ \"Cierra Vega\": []interface{}{6.2, 70}, \"Alden Cantrell\": []interface{}{5.9, 65}, \"Kierra Gentry\": []interface{}{6.0, 68}, \"Pierre Cox\": []interface{}{5.8, 66},  },5.7,64)\n\texpected_3 := map[string][]interface{}{ \"Cierra Vega\": []interface{}{6.2, 70}, \"Alden Cantrell\": []interface{}{5.9, 65}, \"Kierra Gentry\": []interface{}{6.0, 68}, \"Pierre Cox\": []interface{}{5.8, 66},  }\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to filter the height and width of students which are stored in a dictionary.", "entry_point": "filter_data", "canonical_solution": null}
{"task_id": "MBGP/723", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count the same pair in two given lists using map function.\n// Examples:\n// >>> count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])\n// >>> 4\n// >>> count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n// >>> 11\n// >>> count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n// >>> 1\nfunc count_same_pair (nums1 []int, nums2 []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_same_pair([]int{1, 2, 3, 4, 5, 6, 7, 8},[]int{2, 2, 3, 1, 2, 6, 7, 9})\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_same_pair([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8},[]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8})\n\texpected_2 := 11\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_same_pair([]int{2, 4, -6, -9, 11, -12, 14, -5, 17},[]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8})\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count the same pair in two given lists using map function.", "entry_point": "count_same_pair", "canonical_solution": null}
{"task_id": "MBGP/724", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate the sum of all digits of the base to the specified power.\n// Examples:\n// >>> power_base_sum(2,100)\n// >>> 115\n// >>> power_base_sum(8,10)\n// >>> 37\n// >>> power_base_sum(8,15)\n// >>> 62\nfunc power_base_sum (base int, power int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := power_base_sum(2,100)\n\texpected_1 := 115\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := power_base_sum(8,10)\n\texpected_2 := 37\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := power_base_sum(8,15)\n\texpected_3 := 62\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate the sum of all digits of the base to the specified power.", "entry_point": "power_base_sum", "canonical_solution": null}
{"task_id": "MBGP/725", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to extract values between quotation marks of the given string by using regex.\n// Examples:\n// >>> extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')\n// >>> ['A53', 'multi', 'Processor']\n// >>> extract_quotation('Cast your \"favorite\" entertainment \"apps\"')\n// >>> ['favorite', 'apps']\n// >>> extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support')\n// >>> ['4k Ultra HD', 'HDR 10']\nfunc extract_quotation (text1 string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := extract_quotation(\"Cortex \\\"A53\\\" Based \\\"multi\\\" tasking \\\"Processor\\\"\")\n\texpected_1 := []string{\"A53\", \"multi\", \"Processor\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := extract_quotation(\"Cast your \\\"favorite\\\" entertainment \\\"apps\\\"\")\n\texpected_2 := []string{\"favorite\", \"apps\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := extract_quotation(\"Watch content \\\"4k Ultra HD\\\" resolution with \\\"HDR 10\\\" Support\")\n\texpected_3 := []string{\"4k Ultra HD\", \"HDR 10\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to extract values between quotation marks of the given string by using regex.", "entry_point": "extract_quotation", "canonical_solution": null}
{"task_id": "MBGP/726", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to multiply the adjacent elements of the given tuple.\n// Examples:\n// >>> multiply_elements((1, 5, 7, 8, 10))\n// >>> (5, 35, 56, 80)\n// >>> multiply_elements((2, 4, 5, 6, 7))\n// >>> (8, 20, 30, 42)\n// >>> multiply_elements((12, 13, 14, 9, 15))\n// >>> (156, 182, 126, 135)\nfunc multiply_elements (test_tup []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := multiply_elements([]int{1, 5, 7, 8, 10})\n\texpected_1 := []int{5, 35, 56, 80}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := multiply_elements([]int{2, 4, 5, 6, 7})\n\texpected_2 := []int{8, 20, 30, 42}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := multiply_elements([]int{12, 13, 14, 9, 15})\n\texpected_3 := []int{156, 182, 126, 135}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to multiply the adjacent elements of the given tuple.", "entry_point": "multiply_elements", "canonical_solution": null}
{"task_id": "MBGP/727", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove all characters except letters and numbers using regex\n// Examples:\n// >>> remove_char(\"123abcjw:, .@! eiw\")\n// >>> '123abcjweiw'\n// >>> remove_char(\"Hello1234:, ! Howare33u\")\n// >>> 'Hello1234Howare33u'\n// >>> remove_char(\"Cool543Triks@:, Make@987Trips\")\n// >>> 'Cool543TriksMake987Trips'\nfunc remove_char (S string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_char(\"123abcjw:, .@! eiw\")\n\texpected_1 := \"123abcjweiw\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_char(\"Hello1234:, ! Howare33u\")\n\texpected_2 := \"Hello1234Howare33u\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_char(\"Cool543Triks@:, Make@987Trips\")\n\texpected_3 := \"Cool543TriksMake987Trips\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove all characters except letters and numbers using regex", "entry_point": "remove_char", "canonical_solution": null}
{"task_id": "MBGP/728", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sum elements in two lists.\n// Examples:\n// >>> sum_list([10,20,30],[15,25,35])\n// >>> [25,45,65]\n// >>> sum_list([1,2,3],[5,6,7])\n// >>> [6,8,10]\n// >>> sum_list([15,20,30],[15,45,75])\n// >>> [30,65,105]\nfunc sum_list (lst1 []int, lst2 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_list([]int{10, 20, 30},[]int{15, 25, 35})\n\texpected_1 := []int{25, 45, 65}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_list([]int{1, 2, 3},[]int{5, 6, 7})\n\texpected_2 := []int{6, 8, 10}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_list([]int{15, 20, 30},[]int{15, 45, 75})\n\texpected_3 := []int{30, 65, 105}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sum elements in two lists.", "entry_point": "sum_list", "canonical_solution": null}
{"task_id": "MBGP/729", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to add two lists using map and lambda function.\n// Examples:\n// >>> add_list([1, 2, 3],[4,5,6])\n// >>> [5, 7, 9]\n// >>> add_list([1,2],[3,4])\n// >>> [4,6]\n// >>> add_list([10,20],[50,70])\n// >>> [60,90]\nfunc add_list (nums1 []int, nums2 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := add_list([]int{1, 2, 3},[]int{4, 5, 6})\n\texpected_1 := []int{5, 7, 9}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := add_list([]int{1, 2},[]int{3, 4})\n\texpected_2 := []int{4, 6}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := add_list([]int{10, 20},[]int{50, 70})\n\texpected_3 := []int{60, 90}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to add two lists using map and lambda function.", "entry_point": "add_list", "canonical_solution": null}
{"task_id": "MBGP/730", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove consecutive duplicates of a given list.\n// Examples:\n// >>> consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])\n// >>> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n// >>> consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])\n// >>> [10, 15, 19, 18, 17, 26, 17, 18, 10]\n// >>> consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])\n// >>> ['a', 'b', 'c', 'd']\nfunc consecutive_duplicates (nums []interface{}) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := consecutive_duplicates([]interface{}{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4})\n\texpected_1 := []interface{}{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := consecutive_duplicates([]interface{}{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10})\n\texpected_2 := []interface{}{10, 15, 19, 18, 17, 26, 17, 18, 10}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := consecutive_duplicates([]interface{}{\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"})\n\texpected_3 := []interface{}{\"a\", \"b\", \"c\", \"d\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove consecutive duplicates of a given list.", "entry_point": "consecutive_duplicates", "canonical_solution": null}
{"task_id": "MBGP/731", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the lateral surface area of a cone.\n// Examples:\n// >>> lateralsurface_cone(5,12)\n// >>> 204.20352248333654\n// >>> lateralsurface_cone(10,15)\n// >>> 566.3586699569488\n// >>> lateralsurface_cone(19,17)\n// >>> 1521.8090132193388\nfunc lateralsurface_cone (r int, h int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := lateralsurface_cone(5,12)\n\texpected_1 := 204.20352248333654\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := lateralsurface_cone(10,15)\n\texpected_2 := 566.3586699569488\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := lateralsurface_cone(19,17)\n\texpected_3 := 1521.8090132193388\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the lateral surface area of a cone.", "entry_point": "lateralsurface_cone", "canonical_solution": null}
{"task_id": "MBGP/732", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n// Examples:\n// >>> replace_specialchar('Python language, Programming language.')\n// >>> ('Python:language::Programming:language:')\n// >>> replace_specialchar('a b c,d e f')\n// >>> ('a:b:c:d:e:f')\n// >>> replace_specialchar('ram reshma,ram rahim')\n// >>> ('ram:reshma:ram:rahim')\nfunc replace_specialchar (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := replace_specialchar(\"Python language, Programming language.\")\n\texpected_1 := \"Python:language::Programming:language:\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := replace_specialchar(\"a b c,d e f\")\n\texpected_2 := \"a:b:c:d:e:f\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := replace_specialchar(\"ram reshma,ram rahim\")\n\texpected_3 := \"ram:reshma:ram:rahim\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "entry_point": "replace_specialchar", "canonical_solution": null}
{"task_id": "MBGP/733", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\n// Examples:\n// >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n// >>> 1\n// >>> find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n// >>> 2\n// >>> find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6)\n// >>> 4\nfunc find_first_occurrence (A []int, x int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_first_occurrence([]int{2, 5, 5, 5, 6, 6, 8, 9, 9, 9},5)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_first_occurrence([]int{2, 3, 5, 5, 6, 6, 8, 9, 9, 9},5)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_first_occurrence([]int{2, 4, 1, 5, 6, 6, 8, 9, 9, 9},6)\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "entry_point": "find_first_occurrence", "canonical_solution": null}
{"task_id": "MBGP/734", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find sum of products of all possible subarrays.\n// Examples:\n// >>> sum_Of_Subarray_Prod([1,2,3],3)\n// >>> 20\n// >>> sum_Of_Subarray_Prod([1,2],2)\n// >>> 5\n// >>> sum_Of_Subarray_Prod([1,2,3,4],4)\n// >>> 84\nfunc sum_Of_Subarray_Prod (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_Of_Subarray_Prod([]int{1, 2, 3},3)\n\texpected_1 := 20\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_Of_Subarray_Prod([]int{1, 2},2)\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_Of_Subarray_Prod([]int{1, 2, 3, 4},4)\n\texpected_3 := 84\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find sum of products of all possible subarrays.", "entry_point": "sum_Of_Subarray_Prod", "canonical_solution": null}
{"task_id": "MBGP/735", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to toggle bits of the number except the first and the last bit.\n// Examples:\n// >>> toggle_middle_bits(9)\n// >>> 15\n// >>> toggle_middle_bits(10)\n// >>> 12\n// >>> toggle_middle_bits(11)\n// >>> 13\nfunc toggle_middle_bits (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := toggle_middle_bits(9)\n\texpected_1 := 15\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := toggle_middle_bits(10)\n\texpected_2 := 12\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := toggle_middle_bits(11)\n\texpected_3 := 13\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to toggle bits of the number except the first and the last bit.", "entry_point": "toggle_middle_bits", "canonical_solution": null}
{"task_id": "MBGP/736", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to locate the left insertion point for a specified value in sorted order.\n// Examples:\n// >>> left_insertion([1,2,4,5],6)\n// >>> 4\n// >>> left_insertion([1,2,4,5],3)\n// >>> 2\n// >>> left_insertion([1,2,4,5],7)\n// >>> 4\nfunc left_insertion (a []int, x int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := left_insertion([]int{1, 2, 4, 5},6)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := left_insertion([]int{1, 2, 4, 5},3)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := left_insertion([]int{1, 2, 4, 5},7)\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to locate the left insertion point for a specified value in sorted order.", "entry_point": "left_insertion", "canonical_solution": null}
{"task_id": "MBGP/737", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check whether the given string is starting with a vowel or not using regex.\n// Examples:\n// >>> check_str(\"annie\")\n// >>> 'Valid'\n// >>> check_str(\"dawood\")\n// >>> 'Invalid'\n// >>> check_str(\"Else\")\n// >>> 'Valid'\nfunc check_str (string0 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_str(\"annie\")\n\texpected_1 := \"Valid\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_str(\"dawood\")\n\texpected_2 := \"Invalid\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_str(\"Else\")\n\texpected_3 := \"Valid\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check whether the given string is starting with a vowel or not using regex.", "entry_point": "check_str", "canonical_solution": null}
{"task_id": "MBGP/738", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate the geometric sum of n-1.\n// Examples:\n// >>> geometric_sum(7)\n// >>> 1.9921875\n// >>> geometric_sum(4)\n// >>> 1.9375\n// >>> geometric_sum(8)\n// >>> 1.99609375\nfunc geometric_sum (n int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := geometric_sum(7)\n\texpected_1 := 1.9921875\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := geometric_sum(4)\n\texpected_2 := 1.9375\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := geometric_sum(8)\n\texpected_3 := 1.99609375\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate the geometric sum of n-1.", "entry_point": "geometric_sum", "canonical_solution": null}
{"task_id": "MBGP/739", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the index of smallest triangular number with n digits.\n// Examples:\n// >>> find_Index(2)\n// >>> 4\n// >>> find_Index(3)\n// >>> 14\n// >>> find_Index(4)\n// >>> 45\nfunc find_Index (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Index(2)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Index(3)\n\texpected_2 := 14\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Index(4)\n\texpected_3 := 45\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the index of smallest triangular number with n digits.", "entry_point": "find_Index", "canonical_solution": null}
{"task_id": "MBGP/740", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n// Examples:\n// >>> tuple_to_dict((1, 5, 7, 10, 13, 5))\n// >>> {1: 5, 7: 10, 13: 5}\n// >>> tuple_to_dict((1, 2, 3, 4, 5, 6))\n// >>> {1: 2, 3: 4, 5: 6}\n// >>> tuple_to_dict((7, 8, 9, 10, 11, 12))\n// >>> {7: 8, 9: 10, 11: 12}\nfunc tuple_to_dict (test_tup []int) map[int]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := tuple_to_dict([]int{1, 5, 7, 10, 13, 5})\n\texpected_1 := map[int]int{ 1: 5, 7: 10, 13: 5,  }\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := tuple_to_dict([]int{1, 2, 3, 4, 5, 6})\n\texpected_2 := map[int]int{ 1: 2, 3: 4, 5: 6,  }\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := tuple_to_dict([]int{7, 8, 9, 10, 11, 12})\n\texpected_3 := map[int]int{ 7: 8, 9: 10, 11: 12,  }\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.", "entry_point": "tuple_to_dict", "canonical_solution": null}
{"task_id": "MBGP/741", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether all the characters are same or not.\n// Examples:\n// >>> all_Characters_Same(\"python\")\n// >>> False\n// >>> all_Characters_Same(\"aaa\")\n// >>> True\n// >>> all_Characters_Same(\"data\")\n// >>> False\nfunc all_Characters_Same (s string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := all_Characters_Same(\"python\")\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := all_Characters_Same(\"aaa\")\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := all_Characters_Same(\"data\")\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether all the characters are same or not.", "entry_point": "all_Characters_Same", "canonical_solution": null}
{"task_id": "MBGP/742", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to caluclate the area of a tetrahedron.\n// Examples:\n// >>> area_tetrahedron(3)\n// >>> 15.588457268119894\n// >>> area_tetrahedron(20)\n// >>> 692.8203230275509\n// >>> area_tetrahedron(10)\n// >>> 173.20508075688772\nfunc area_tetrahedron (side int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := area_tetrahedron(3)\n\texpected_1 := 15.588457268119894\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := area_tetrahedron(20)\n\texpected_2 := 692.8203230275509\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := area_tetrahedron(10)\n\texpected_3 := 173.20508075688772\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to caluclate the area of a tetrahedron.", "entry_point": "area_tetrahedron", "canonical_solution": null}
{"task_id": "MBGP/743", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to rotate a given list by specified number of items to the right direction.\n// Examples:\n// >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)\n// >>> [8, 9, 10, 1, 2, 3, 4, 5, 6]\n// >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)\n// >>> [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n// >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)\n// >>> [6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nfunc rotate_right (list1 []int, m int, n int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := rotate_right([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},3,4)\n\texpected_1 := []int{8, 9, 10, 1, 2, 3, 4, 5, 6}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := rotate_right([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},2,2)\n\texpected_2 := []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := rotate_right([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},5,2)\n\texpected_3 := []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to rotate a given list by specified number of items to the right direction.", "entry_point": "rotate_right", "canonical_solution": null}
{"task_id": "MBGP/744", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if the given tuple has any nil value or not.\n// Examples:\n// >>> check_none((10, 4, 5, 6, None))\n// >>> True\n// >>> check_none((7, 8, 9, 11, 14))\n// >>> False\n// >>> check_none((1, 2, 3, 4, None))\n// >>> True\nfunc check_none (test_tup []interface{}) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_none([]interface{}{10, 4, 5, 6, nil})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_none([]interface{}{7, 8, 9, 11, 14})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_none([]interface{}{1, 2, 3, 4, nil})\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if the given tuple has any nil value or not.", "entry_point": "check_none", "canonical_solution": null}
{"task_id": "MBGP/745", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find numbers within a given range where every number is divisible by every digit it contains.\n// Examples:\n// >>> divisible_by_digits(1,22)\n// >>> [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n// >>> divisible_by_digits(1,15)\n// >>> [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n// >>> divisible_by_digits(20,25)\n// >>> [22, 24]\nfunc divisible_by_digits (startnum int, endnum int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := divisible_by_digits(1,22)\n\texpected_1 := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := divisible_by_digits(1,15)\n\texpected_2 := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := divisible_by_digits(20,25)\n\texpected_3 := []int{22, 24}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.", "entry_point": "divisible_by_digits", "canonical_solution": null}
{"task_id": "MBGP/746", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find area of a sector.\n// Examples:\n// >>> sector_area(4,45)\n// >>> 6.285714285714286\n// >>> sector_area(9,45)\n// >>> 31.82142857142857\n// >>> sector_area(9,360)\n// >>> None\nfunc sector_area (r int, a int) interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sector_area(4,45)\n\texpected_1 := 6.285714285714286\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sector_area(9,45)\n\texpected_2 := 31.82142857142857\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sector_area(9,360)\n\texpected_3 := nil\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find area of a sector.", "entry_point": "sector_area", "canonical_solution": null}
{"task_id": "MBGP/747", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the longest common subsequence for the given three string sequence.\n// Examples:\n// >>> lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5)\n// >>> 2\n// >>> lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13)\n// >>> 5\n// >>> lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5)\n// >>> 3\nfunc lcs_of_three (X string, Y string, Z string, m int, n int, o int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := lcs_of_three(\"AGGT12\",\"12TXAYB\",\"12XBA\",6,7,5)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := lcs_of_three(\"Reels\",\"Reelsfor\",\"ReelsforReels\",5,8,13)\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := lcs_of_three(\"abcd1e2\",\"bc12ea\",\"bd1ea\",7,6,5)\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the longest common subsequence for the given three string sequence.", "entry_point": "lcs_of_three", "canonical_solution": null}
{"task_id": "MBGP/748", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to put spaces between words starting with capital letters in a given string by using regex.\n// Examples:\n// >>> capital_words_spaces(\"Python\")\n// >>> 'Python'\n// >>> capital_words_spaces(\"PythonProgrammingExamples\")\n// >>> 'Python Programming Examples'\n// >>> capital_words_spaces(\"GetReadyToBeCodingFreak\")\n// >>> 'Get Ready To Be Coding Freak'\nfunc capital_words_spaces (str1 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := capital_words_spaces(\"Python\")\n\texpected_1 := \"Python\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := capital_words_spaces(\"PythonProgrammingExamples\")\n\texpected_2 := \"Python Programming Examples\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := capital_words_spaces(\"GetReadyToBeCodingFreak\")\n\texpected_3 := \"Get Ready To Be Coding Freak\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to put spaces between words starting with capital letters in a given string by using regex.", "entry_point": "capital_words_spaces", "canonical_solution": null}
{"task_id": "MBGP/749", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort a given list of strings of numbers numerically.\n// Examples:\n// >>> sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])\n// >>> [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n// >>> sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])\n// >>> [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n// >>> sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])\n// >>> [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\nfunc sort_numeric_strings (nums_str []string) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sort_numeric_strings([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"})\n\texpected_1 := []int{-500, -12, 0, 4, 7, 12, 45, 100, 200}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sort_numeric_strings([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"})\n\texpected_2 := []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sort_numeric_strings([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"})\n\texpected_3 := []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort a given list of strings of numbers numerically.", "entry_point": "sort_numeric_strings", "canonical_solution": null}
{"task_id": "MBGP/750", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to add the given tuple to the given list.\n// Examples:\n// >>> add_tuple([5, 6, 7], (9, 10))\n// >>> [5, 6, 7, 9, 10]\n// >>> add_tuple([6, 7, 8], (10, 11))\n// >>> [6, 7, 8, 10, 11]\n// >>> add_tuple([7, 8, 9], (11, 12))\n// >>> [7, 8, 9, 11, 12]\nfunc add_tuple (test_list []int, test_tup []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := add_tuple([]int{5, 6, 7},[]int{9, 10})\n\texpected_1 := []int{5, 6, 7, 9, 10}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := add_tuple([]int{6, 7, 8},[]int{10, 11})\n\texpected_2 := []int{6, 7, 8, 10, 11}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := add_tuple([]int{7, 8, 9},[]int{11, 12})\n\texpected_3 := []int{7, 8, 9, 11, 12}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to add the given tuple to the given list.", "entry_point": "add_tuple", "canonical_solution": null}
{"task_id": "MBGP/751", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if the given array represents min heap or not.\n// Examples:\n// >>> check_min_heap([1, 2, 3, 4, 5, 6], 0)\n// >>> True\n// >>> check_min_heap([2, 3, 4, 5, 10, 15], 0)\n// >>> True\n// >>> check_min_heap([2, 10, 4, 5, 3, 15], 0)\n// >>> False\nfunc check_min_heap (arr []int, i int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_min_heap([]int{1, 2, 3, 4, 5, 6},0)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_min_heap([]int{2, 3, 4, 5, 10, 15},0)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_min_heap([]int{2, 10, 4, 5, 3, 15},0)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if the given array represents min heap or not.", "entry_point": "check_min_heap", "canonical_solution": null}
{"task_id": "MBGP/752", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the nth jacobsthal number.\n// Examples:\n// >>> jacobsthal_num(5)\n// >>> 11\n// >>> jacobsthal_num(2)\n// >>> 1\n// >>> jacobsthal_num(4)\n// >>> 5\nfunc jacobsthal_num (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := jacobsthal_num(5)\n\texpected_1 := 11\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := jacobsthal_num(2)\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := jacobsthal_num(4)\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the nth jacobsthal number.", "entry_point": "jacobsthal_num", "canonical_solution": null}
{"task_id": "MBGP/753", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find minimum k records from tuple list.\n// Examples:\n// >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)\n// >>> [('Akash', 2), ('Akshat', 4)]\n// >>> min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3)\n// >>> [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\n// >>> min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1)\n// >>> [('Ayesha', 9)]\nfunc min_k (test_list [][]interface{}, K int) [][]interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := min_k([][]interface{}{[]interface{}{\"Manjeet\", 10}, []interface{}{\"Akshat\", 4}, []interface{}{\"Akash\", 2}, []interface{}{\"Nikhil\", 8}},2)\n\texpected_1 := [][]interface{}{[]interface{}{\"Akash\", 2}, []interface{}{\"Akshat\", 4}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := min_k([][]interface{}{[]interface{}{\"Sanjeev\", 11}, []interface{}{\"Angat\", 5}, []interface{}{\"Akash\", 3}, []interface{}{\"Nepin\", 9}},3)\n\texpected_2 := [][]interface{}{[]interface{}{\"Akash\", 3}, []interface{}{\"Angat\", 5}, []interface{}{\"Nepin\", 9}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := min_k([][]interface{}{[]interface{}{\"tanmay\", 14}, []interface{}{\"Amer\", 11}, []interface{}{\"Ayesha\", 9}, []interface{}{\"SKD\", 16}},1)\n\texpected_3 := [][]interface{}{[]interface{}{\"Ayesha\", 9}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find minimum k records from tuple list.", "entry_point": "min_k", "canonical_solution": null}
{"task_id": "MBGP/754", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find common index elements from three lists.\n// Examples:\n// >>> extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])\n// >>> [1, 7]\n// >>> extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])\n// >>> [1, 6]\n// >>> extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])\n// >>> [1, 5]\nfunc extract_index_list (l1 []int, l2 []int, l3 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := extract_index_list([]int{1, 1, 3, 4, 5, 6, 7},[]int{0, 1, 2, 3, 4, 5, 7},[]int{0, 1, 2, 3, 4, 5, 7})\n\texpected_1 := []int{1, 7}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := extract_index_list([]int{1, 1, 3, 4, 5, 6, 7},[]int{0, 1, 2, 3, 4, 6, 5},[]int{0, 1, 2, 3, 4, 6, 7})\n\texpected_2 := []int{1, 6}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := extract_index_list([]int{1, 1, 3, 4, 6, 5, 6},[]int{0, 1, 2, 3, 4, 5, 7},[]int{0, 1, 2, 3, 4, 5, 7})\n\texpected_3 := []int{1, 5}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find common index elements from three lists.", "entry_point": "extract_index_list", "canonical_solution": null}
{"task_id": "MBGP/755", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the second smallest number in a list.\n// Examples:\n// >>> second_smallest([1, 2, -8, -2, 0, -2])\n// >>> -2\n// >>> second_smallest([1, 1, -0.5, 0, 2, -2, -2])\n// >>> -0.5\n// >>> second_smallest([2,2])\n// >>> None\nfunc second_smallest (numbers []interface{}) interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := second_smallest([]interface{}{1, 2, -8, -2, 0, -2})\n\texpected_1 := -2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := second_smallest([]interface{}{1, 1, -0.5, 0, 2, -2, -2})\n\texpected_2 := -0.5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := second_smallest([]interface{}{2, 2})\n\texpected_3 := nil\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the second smallest number in a list.", "entry_point": "second_smallest", "canonical_solution": null}
{"task_id": "MBGP/756", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function that matches a string that has an a followed by zero or one 'b'.\n// Examples:\n// >>> text_match_zero_one(\"ac\")\n// >>> ('Found a match!')\n// >>> text_match_zero_one(\"dc\")\n// >>> ('Not matched!')\n// >>> text_match_zero_one(\"abbbba\")\n// >>> ('Found a match!')\nfunc text_match_zero_one (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := text_match_zero_one(\"ac\")\n\texpected_1 := \"Found a match!\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := text_match_zero_one(\"dc\")\n\texpected_2 := \"Not matched!\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := text_match_zero_one(\"abbbba\")\n\texpected_3 := \"Found a match!\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function that matches a string that has an a followed by zero or one 'b'.", "entry_point": "text_match_zero_one", "canonical_solution": null}
{"task_id": "MBGP/757", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count the pairs of reverse strings in the given string list.\n// Examples:\n// >>> count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])\n// >>> '2'\n// >>> count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"])\n// >>> '1'\n// >>> count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"])\n// >>> '2'\nfunc count_reverse_pairs (test_list []string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_reverse_pairs([]string{\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"})\n\texpected_1 := \"2\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_reverse_pairs([]string{\"geeks\", \"best\", \"for\", \"skeeg\"})\n\texpected_2 := \"1\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_reverse_pairs([]string{\"makes\", \"best\", \"sekam\", \"for\", \"rof\"})\n\texpected_3 := \"2\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count the pairs of reverse strings in the given string list.", "entry_point": "count_reverse_pairs", "canonical_solution": null}
{"task_id": "MBGP/758", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count number of unique lists within a list.\n// Examples:\n// >>> unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )\n// >>> {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n// >>> unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])\n// >>> {('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n// >>> unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])\n// >>> {(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\nfunc unique_sublists (list1 []interface{}) map[interface{}]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := unique_sublists([]interface{}{[]interface{}{1, 3}, []interface{}{5, 7}, []interface{}{1, 3}, []interface{}{13, 15, 17}, []interface{}{5, 7}, []interface{}{9, 11}})\n\texpected_1 := map[interface{}]int{ []interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1,  }\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := unique_sublists([]interface{}{[]interface{}{\"green\", \"orange\"}, []interface{}{\"black\"}, []interface{}{\"green\", \"orange\"}, []interface{}{\"white\"}})\n\texpected_2 := map[interface{}]int{ []interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1,  }\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := unique_sublists([]interface{}{[]interface{}{10, 20, 30, 40}, []interface{}{60, 70, 50, 50}, []interface{}{90, 100, 200}})\n\texpected_3 := map[interface{}]int{ []interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1,  }\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count number of unique lists within a list.", "entry_point": "unique_sublists", "canonical_solution": null}
{"task_id": "MBGP/759", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check a decimal with a precision of 2.\n// Examples:\n// >>> is_decimal('123.11')\n// >>> True\n// >>> is_decimal('e666.86')\n// >>> False\n// >>> is_decimal('3.124587')\n// >>> False\nfunc is_decimal (num string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_decimal(\"123.11\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_decimal(\"e666.86\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_decimal(\"3.124587\")\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check a decimal with a precision of 2.", "entry_point": "is_decimal", "canonical_solution": null}
{"task_id": "MBGP/760", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether an array contains only one distinct element or not.\n// Examples:\n// >>> unique_Element([1,1,1],3)\n// >>> 'YES'\n// >>> unique_Element([1,2,1,2],4)\n// >>> 'NO'\n// >>> unique_Element([1,2,3,4,5],5)\n// >>> 'NO'\nfunc unique_Element (arr []int, n int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := unique_Element([]int{1, 1, 1},3)\n\texpected_1 := \"YES\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := unique_Element([]int{1, 2, 1, 2},4)\n\texpected_2 := \"NO\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := unique_Element([]int{1, 2, 3, 4, 5},5)\n\texpected_3 := \"NO\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether an array contains only one distinct element or not.", "entry_point": "unique_Element", "canonical_solution": null}
{"task_id": "MBGP/761", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to caluclate arc length of an angle.\n// Examples:\n// >>> arc_length(9,45)\n// >>> 3.5357142857142856\n// >>> arc_length(9,480)\n// >>> None\n// >>> arc_length(5,270)\n// >>> 11.785714285714285\nfunc arc_length (d int, a int) interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := arc_length(9,45)\n\texpected_1 := 3.5357142857142856\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := arc_length(9,480)\n\texpected_2 := nil\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := arc_length(5,270)\n\texpected_3 := 11.785714285714285\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to caluclate arc length of an angle.", "entry_point": "arc_length", "canonical_solution": null}
{"task_id": "MBGP/762", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check whether the given month number contains 30 days or not.\n// Examples:\n// >>> check_monthnumber_number(6)\n// >>> True\n// >>> check_monthnumber_number(2)\n// >>> False\n// >>> check_monthnumber_number(12)\n// >>> False\nfunc check_monthnumber_number (monthnum3 int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_monthnumber_number(6)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_monthnumber_number(2)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_monthnumber_number(12)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check whether the given month number contains 30 days or not.", "entry_point": "check_monthnumber_number", "canonical_solution": null}
{"task_id": "MBGP/763", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the minimum difference between any two elements in a given array.\n// Examples:\n// >>> find_Min_Diff((1,5,3,19,18,25),6)\n// >>> 1\n// >>> find_Min_Diff((4,3,2,6),4)\n// >>> 1\n// >>> find_Min_Diff((30,5,20,9),4)\n// >>> 4\nfunc find_Min_Diff (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Min_Diff([]int{1, 5, 3, 19, 18, 25},6)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Min_Diff([]int{4, 3, 2, 6},4)\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Min_Diff([]int{30, 5, 20, 9},4)\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the minimum difference between any two elements in a given array.", "entry_point": "find_Min_Diff", "canonical_solution": null}
{"task_id": "MBGP/764", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count numeric values in a given string.\n// Examples:\n// >>> number_ctr('program2bedone')\n// >>> 1\n// >>> number_ctr('3wonders')\n// >>> 1\n// >>> number_ctr('123')\n// >>> 3\nfunc number_ctr (str string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := number_ctr(\"program2bedone\")\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := number_ctr(\"3wonders\")\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := number_ctr(\"123\")\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count numeric values in a given string.", "entry_point": "number_ctr", "canonical_solution": null}
{"task_id": "MBGP/765", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find nth polite number.\n// Examples:\n// >>> is_polite(7)\n// >>> 11\n// >>> is_polite(4)\n// >>> 7\n// >>> is_polite(9)\n// >>> 13\nfunc is_polite (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_polite(7)\n\texpected_1 := 11\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_polite(4)\n\texpected_2 := 7\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_polite(9)\n\texpected_3 := 13\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find nth polite number.", "entry_point": "is_polite", "canonical_solution": null}
{"task_id": "MBGP/766", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to iterate over all pairs of consecutive items in a given list.\n// Examples:\n// >>> pair_wise([1,1,2,3,3,4,4,5])\n// >>> [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n// >>> pair_wise([1,5,7,9,10])\n// >>> [(1, 5), (5, 7), (7, 9), (9, 10)]\n// >>> pair_wise([1,2,3,4,5,6,7,8,9,10])\n// >>> [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\nfunc pair_wise (l1 []int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := pair_wise([]int{1, 1, 2, 3, 3, 4, 4, 5})\n\texpected_1 := [][]int{[]int{1, 1}, []int{1, 2}, []int{2, 3}, []int{3, 3}, []int{3, 4}, []int{4, 4}, []int{4, 5}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := pair_wise([]int{1, 5, 7, 9, 10})\n\texpected_2 := [][]int{[]int{1, 5}, []int{5, 7}, []int{7, 9}, []int{9, 10}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := pair_wise([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n\texpected_3 := [][]int{[]int{1, 2}, []int{2, 3}, []int{3, 4}, []int{4, 5}, []int{5, 6}, []int{6, 7}, []int{7, 8}, []int{8, 9}, []int{9, 10}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to iterate over all pairs of consecutive items in a given list.", "entry_point": "pair_wise", "canonical_solution": null}
{"task_id": "MBGP/767", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n// Examples:\n// >>> get_Pairs_Count([1,1,1,1],4,2)\n// >>> 6\n// >>> get_Pairs_Count([1,5,7,-1,5],5,6)\n// >>> 3\n// >>> get_Pairs_Count([1,-2,3],3,1)\n// >>> 1\nfunc get_Pairs_Count (arr []int, n int, sum int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_Pairs_Count([]int{1, 1, 1, 1},4,2)\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_Pairs_Count([]int{1, 5, 7, -1, 5},5,6)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_Pairs_Count([]int{1, -2, 3},3,1)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the number of pairs whose sum is equal to \u2018sum\u2019.", "entry_point": "get_Pairs_Count", "canonical_solution": null}
{"task_id": "MBGP/768", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check for odd parity of a given number.\n// Examples:\n// >>> check_Odd_Parity(13)\n// >>> True\n// >>> check_Odd_Parity(21)\n// >>> True\n// >>> check_Odd_Parity(18)\n// >>> False\nfunc check_Odd_Parity (x int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_Odd_Parity(13)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_Odd_Parity(21)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_Odd_Parity(18)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check for odd parity of a given number.", "entry_point": "check_Odd_Parity", "canonical_solution": null}
{"task_id": "MBGP/769", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to get the difference between two lists.\n// Examples:\n// >>> (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]))\n// >>> [10, 20, 30, 15]\n// >>> (Diff([1,2,3,4,5], [6,7,1]))\n// >>> [2,3,4,5,6,7]\n// >>> (Diff([1,2,3], [6,7,1]))\n// >>> [2,3,6,7]\nfunc Diff (li1 []int, li2 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Diff([]int{10, 15, 20, 25, 30, 35, 40},[]int{25, 40, 35})\n\texpected_1 := []int{10, 20, 30, 15}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Diff([]int{1, 2, 3, 4, 5},[]int{6, 7, 1})\n\texpected_2 := []int{2, 3, 4, 5, 6, 7}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Diff([]int{1, 2, 3},[]int{6, 7, 1})\n\texpected_3 := []int{2, 3, 6, 7}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to get the difference between two lists.", "entry_point": "Diff", "canonical_solution": null}
{"task_id": "MBGP/770", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of fourth power of first n odd natural numbers.\n// Examples:\n// >>> odd_Num_Sum(2)\n// >>> 82\n// >>> odd_Num_Sum(3)\n// >>> 707\n// >>> odd_Num_Sum(4)\n// >>> 3108\nfunc odd_Num_Sum (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := odd_Num_Sum(2)\n\texpected_1 := 82\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := odd_Num_Sum(3)\n\texpected_2 := 707\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := odd_Num_Sum(4)\n\texpected_3 := 3108\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of fourth power of first n odd natural numbers.", "entry_point": "odd_Num_Sum", "canonical_solution": null}
{"task_id": "MBGP/771", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if the given expression is balanced or not.\n// Examples:\n// >>> check_expression(\"{()}[{}]\")\n// >>> True\n// >>> check_expression(\"{()}[{]\")\n// >>> False\n// >>> check_expression(\"{()}[{}][]({})\")\n// >>> True\nfunc check_expression (exp string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_expression(\"{()}[{}]\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_expression(\"{()}[{]\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_expression(\"{()}[{}][]({})\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if the given expression is balanced or not.", "entry_point": "check_expression", "canonical_solution": null}
{"task_id": "MBGP/772", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove all the words with k length in the given string.\n// Examples:\n// >>> remove_length('The person is most value tet', 3)\n// >>> 'person is most value'\n// >>> remove_length('If you told me about this ok', 4)\n// >>> 'If you me about ok'\n// >>> remove_length('Forces of darkeness is come into the play', 4)\n// >>> 'Forces of darkeness is the'\nfunc remove_length (test_str string, K int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_length(\"The person is most value tet\",3)\n\texpected_1 := \"person is most value\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_length(\"If you told me about this ok\",4)\n\texpected_2 := \"If you me about ok\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_length(\"Forces of darkeness is come into the play\",4)\n\texpected_3 := \"Forces of darkeness is the\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove all the words with k length in the given string.", "entry_point": "remove_length", "canonical_solution": null}
{"task_id": "MBGP/773", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the occurrence and position of the substrings within a string.\n// Examples:\n// >>> occurance_substring('python programming, python language','python')\n// >>> ('python', 0, 6)\n// >>> occurance_substring('python programming,programming language','programming')\n// >>> ('programming', 7, 18)\n// >>> occurance_substring('python programming,programming language','language')\n// >>> ('language', 31, 39)\nfunc occurance_substring (text string, pattern string) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := occurance_substring(\"python programming, python language\",\"python\")\n\texpected_1 := []interface{}{\"python\", 0, 6}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := occurance_substring(\"python programming,programming language\",\"programming\")\n\texpected_2 := []interface{}{\"programming\", 7, 18}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := occurance_substring(\"python programming,programming language\",\"language\")\n\texpected_3 := []interface{}{\"language\", 31, 39}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the occurrence and position of the substrings within a string.", "entry_point": "occurance_substring", "canonical_solution": null}
{"task_id": "MBGP/774", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if the string is a valid email address or not using regex.\n// Examples:\n// >>> check_email(\"ankitrai326@gmail.com\")\n// >>> 'Valid Email'\n// >>> check_email(\"my.ownsite@ourearth.org\")\n// >>> 'Valid Email'\n// >>> check_email(\"ankitaoie326.com\")\n// >>> 'Invalid Email'\nfunc check_email (email string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_email(\"ankitrai326@gmail.com\")\n\texpected_1 := \"Valid Email\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_email(\"my.ownsite@ourearth.org\")\n\texpected_2 := \"Valid Email\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_email(\"ankitaoie326.com\")\n\texpected_3 := \"Invalid Email\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if the string is a valid email address or not using regex.", "entry_point": "check_email", "canonical_solution": null}
{"task_id": "MBGP/775", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether every odd index contains odd numbers of a given list.\n// Examples:\n// >>> odd_position([2,1,4,3,6,7,6,3])\n// >>> True\n// >>> odd_position([4,1,2])\n// >>> True\n// >>> odd_position([1,2,3])\n// >>> False\nfunc odd_position (nums []int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := odd_position([]int{2, 1, 4, 3, 6, 7, 6, 3})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := odd_position([]int{4, 1, 2})\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := odd_position([]int{1, 2, 3})\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether every odd index contains odd numbers of a given list.", "entry_point": "odd_position", "canonical_solution": null}
{"task_id": "MBGP/776", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count those characters which have vowels as their neighbors in the given string.\n// Examples:\n// >>> count_vowels('bestinstareels')\n// >>> 7\n// >>> count_vowels('partofthejourneyistheend')\n// >>> 12\n// >>> count_vowels('amazonprime')\n// >>> 5\nfunc count_vowels (test_str string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_vowels(\"bestinstareels\")\n\texpected_1 := 7\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_vowels(\"partofthejourneyistheend\")\n\texpected_2 := 12\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_vowels(\"amazonprime\")\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count those characters which have vowels as their neighbors in the given string.", "entry_point": "count_vowels", "canonical_solution": null}
{"task_id": "MBGP/777", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of non-repeated elements in a given array.\n// Examples:\n// >>> find_Sum([1,2,3,1,1,4,5,6],8)\n// >>> 21\n// >>> find_Sum([1,10,9,4,2,10,10,45,4],9)\n// >>> 71\n// >>> find_Sum([12,10,9,45,2,10,10,45,10],9)\n// >>> 78\nfunc find_Sum (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Sum([]int{1, 2, 3, 1, 1, 4, 5, 6},8)\n\texpected_1 := 21\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Sum([]int{1, 10, 9, 4, 2, 10, 10, 45, 4},9)\n\texpected_2 := 71\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Sum([]int{12, 10, 9, 45, 2, 10, 10, 45, 10},9)\n\texpected_3 := 78\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of non-repeated elements in a given array.", "entry_point": "find_Sum", "canonical_solution": null}
{"task_id": "MBGP/778", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\n// Examples:\n// >>> pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n// >>> [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n// >>> pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])\n// >>> [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n// >>> pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])\n// >>> [['a', 'a'], ['b'], ['c'], ['d', 'd']]\nfunc pack_consecutive_duplicates (list1 []interface{}) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := pack_consecutive_duplicates([]interface{}{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4})\n\texpected_1 := []interface{}{[]interface{}{0, 0}, []interface{}{1}, []interface{}{2}, []interface{}{3}, []interface{}{4, 4}, []interface{}{5}, []interface{}{6, 6, 6}, []interface{}{7}, []interface{}{8}, []interface{}{9}, []interface{}{4, 4}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := pack_consecutive_duplicates([]interface{}{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10})\n\texpected_2 := []interface{}{[]interface{}{10, 10}, []interface{}{15}, []interface{}{19}, []interface{}{18, 18}, []interface{}{17}, []interface{}{26, 26}, []interface{}{17}, []interface{}{18}, []interface{}{10}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := pack_consecutive_duplicates([]interface{}{\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"})\n\texpected_3 := []interface{}{[]interface{}{\"a\", \"a\"}, []interface{}{\"b\"}, []interface{}{\"c\"}, []interface{}{\"d\", \"d\"}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "entry_point": "pack_consecutive_duplicates", "canonical_solution": null}
{"task_id": "MBGP/779", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count the number of unique lists within a list.\n// Examples:\n// >>> unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])\n// >>> {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n// >>> unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])\n// >>> {('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n// >>> unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])\n// >>> {(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}\nfunc unique_sublists (list1 []interface{}) map[interface{}]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := unique_sublists([]interface{}{[]interface{}{1, 3}, []interface{}{5, 7}, []interface{}{1, 3}, []interface{}{13, 15, 17}, []interface{}{5, 7}, []interface{}{9, 11}})\n\texpected_1 := map[interface{}]int{ []interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1,  }\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := unique_sublists([]interface{}{[]interface{}{\"green\", \"orange\"}, []interface{}{\"black\"}, []interface{}{\"green\", \"orange\"}, []interface{}{\"white\"}})\n\texpected_2 := map[interface{}]int{ []interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1,  }\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := unique_sublists([]interface{}{[]interface{}{1, 2}, []interface{}{3, 4}, []interface{}{4, 5}, []interface{}{6, 7}})\n\texpected_3 := map[interface{}]int{ []interface{}{1, 2}: 1, []interface{}{3, 4}: 1, []interface{}{4, 5}: 1, []interface{}{6, 7}: 1,  }\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count the number of unique lists within a list.", "entry_point": "unique_sublists", "canonical_solution": null}
{"task_id": "MBGP/780", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the combinations of sums with tuples in the given tuple list.\n// Examples:\n// >>> find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])\n// >>> [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n// >>> find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)])\n// >>> [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\n// >>> find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)])\n// >>> [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\nfunc find_combinations (test_list [][]int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_combinations([][]int{[]int{2, 4}, []int{6, 7}, []int{5, 1}, []int{6, 10}})\n\texpected_1 := [][]int{[]int{8, 11}, []int{7, 5}, []int{8, 14}, []int{11, 8}, []int{12, 17}, []int{11, 11}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_combinations([][]int{[]int{3, 5}, []int{7, 8}, []int{6, 2}, []int{7, 11}})\n\texpected_2 := [][]int{[]int{10, 13}, []int{9, 7}, []int{10, 16}, []int{13, 10}, []int{14, 19}, []int{13, 13}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_combinations([][]int{[]int{4, 6}, []int{8, 9}, []int{7, 3}, []int{8, 12}})\n\texpected_3 := [][]int{[]int{12, 15}, []int{11, 9}, []int{12, 18}, []int{15, 12}, []int{16, 21}, []int{15, 15}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the combinations of sums with tuples in the given tuple list.", "entry_point": "find_combinations", "canonical_solution": null}
{"task_id": "MBGP/781", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the count of divisors is even or odd.\n// Examples:\n// >>> count_Divisors(10)\n// >>> \"Even\"\n// >>> count_Divisors(100)\n// >>> \"Odd\"\n// >>> count_Divisors(125)\n// >>> \"Even\"\nfunc count_Divisors (n int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Divisors(10)\n\texpected_1 := \"Even\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Divisors(100)\n\texpected_2 := \"Odd\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Divisors(125)\n\texpected_3 := \"Even\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the count of divisors is even or odd.", "entry_point": "count_Divisors", "canonical_solution": null}
{"task_id": "MBGP/782", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of all odd length subarrays.\n// Examples:\n// >>> Odd_Length_Sum([1,2,4])\n// >>> 14\n// >>> Odd_Length_Sum([1,2,1,2])\n// >>> 15\n// >>> Odd_Length_Sum([1,7])\n// >>> 8\nfunc Odd_Length_Sum (arr []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Odd_Length_Sum([]int{1, 2, 4})\n\texpected_1 := 14\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Odd_Length_Sum([]int{1, 2, 1, 2})\n\texpected_2 := 15\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Odd_Length_Sum([]int{1, 7})\n\texpected_3 := 8\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of all odd length subarrays.", "entry_point": "Odd_Length_Sum", "canonical_solution": null}
{"task_id": "MBGP/783", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert rgb color to hsv color.\n// Examples:\n// >>> rgb_to_hsv(255, 255, 255)\n// >>> (0, 0.0, 100.0)\n// >>> rgb_to_hsv(0, 215, 0)\n// >>> (120.0, 100.0, 84.31372549019608)\n// >>> rgb_to_hsv(10, 215, 110)\n// >>> (149.26829268292684, 95.34883720930233, 84.31372549019608)\nfunc rgb_to_hsv (r int, g int, b int) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := rgb_to_hsv(255,255,255)\n\texpected_1 := []interface{}{0, 0.0, 100.0}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := rgb_to_hsv(0,215,0)\n\texpected_2 := []interface{}{120.0, 100.0, 84.31372549019608}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := rgb_to_hsv(10,215,110)\n\texpected_3 := []interface{}{149.26829268292684, 95.34883720930233, 84.31372549019608}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert rgb color to hsv color.", "entry_point": "rgb_to_hsv", "canonical_solution": null}
{"task_id": "MBGP/784", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the product of first even and odd number of a given list.\n// Examples:\n// >>> mul_even_odd([1,3,5,7,4,1,6,8])\n// >>> 4\n// >>> mul_even_odd([1,2,3,4,5,6,7,8,9,10])\n// >>> 2\n// >>> mul_even_odd([1,5,7,9,10])\n// >>> 10\nfunc mul_even_odd (list1 []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := mul_even_odd([]int{1, 3, 5, 7, 4, 1, 6, 8})\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := mul_even_odd([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := mul_even_odd([]int{1, 5, 7, 9, 10})\n\texpected_3 := 10\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the product of first even and odd number of a given list.", "entry_point": "mul_even_odd", "canonical_solution": null}
{"task_id": "MBGP/785", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert tuple string to integer tuple.\n// Examples:\n// >>> tuple_str_int(\"(7, 8, 9)\")\n// >>> (7, 8, 9)\n// >>> tuple_str_int(\"(1, 2, 3)\")\n// >>> (1, 2, 3)\n// >>> tuple_str_int(\"(4, 5, 6)\")\n// >>> (4, 5, 6)\nfunc tuple_str_int (test_str string) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := tuple_str_int(\"(7, 8, 9)\")\n\texpected_1 := []int{7, 8, 9}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := tuple_str_int(\"(1, 2, 3)\")\n\texpected_2 := []int{1, 2, 3}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := tuple_str_int(\"(4, 5, 6)\")\n\texpected_3 := []int{4, 5, 6}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert tuple string to integer tuple.", "entry_point": "tuple_str_int", "canonical_solution": null}
{"task_id": "MBGP/786", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to locate the right insertion point for a specified value in sorted order.\n// Examples:\n// >>> right_insertion([1,2,4,5],6)\n// >>> 4\n// >>> right_insertion([1,2,4,5],3)\n// >>> 2\n// >>> right_insertion([1,2,4,5],7)\n// >>> 4\nfunc right_insertion (a []int, x int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := right_insertion([]int{1, 2, 4, 5},6)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := right_insertion([]int{1, 2, 4, 5},3)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := right_insertion([]int{1, 2, 4, 5},7)\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to locate the right insertion point for a specified value in sorted order.", "entry_point": "right_insertion", "canonical_solution": null}
{"task_id": "MBGP/787", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function that matches a string that has an a followed by three 'b'.\n// Examples:\n// >>> text_match_three(\"ac\")\n// >>> ('Not matched!')\n// >>> text_match_three(\"dc\")\n// >>> ('Not matched!')\n// >>> text_match_three(\"abbbba\")\n// >>> ('Found a match!')\nfunc text_match_three (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := text_match_three(\"ac\")\n\texpected_1 := \"Not matched!\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := text_match_three(\"dc\")\n\texpected_2 := \"Not matched!\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := text_match_three(\"abbbba\")\n\texpected_3 := \"Found a match!\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function that matches a string that has an a followed by three 'b'.", "entry_point": "text_match_three", "canonical_solution": null}
{"task_id": "MBGP/788", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to create a new tuple from the given string and list.\n// Examples:\n// >>> new_tuple([\"WEB\", \"is\"], \"best\")\n// >>> ('WEB', 'is', 'best')\n// >>> new_tuple([\"We\", \"are\"], \"Developers\")\n// >>> ('We', 'are', 'Developers')\n// >>> new_tuple([\"Part\", \"is\"], \"Wrong\")\n// >>> ('Part', 'is', 'Wrong')\nfunc new_tuple (test_list []string, test_str string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := new_tuple([]string{\"WEB\", \"is\"},\"best\")\n\texpected_1 := []string{\"WEB\", \"is\", \"best\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := new_tuple([]string{\"We\", \"are\"},\"Developers\")\n\texpected_2 := []string{\"We\", \"are\", \"Developers\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := new_tuple([]string{\"Part\", \"is\"},\"Wrong\")\n\texpected_3 := []string{\"Part\", \"is\", \"Wrong\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to create a new tuple from the given string and list.", "entry_point": "new_tuple", "canonical_solution": null}
{"task_id": "MBGP/789", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate the perimeter of a regular polygon.\n// Examples:\n// >>> perimeter_polygon(4,20)\n// >>> 80\n// >>> perimeter_polygon(10,15)\n// >>> 150\n// >>> perimeter_polygon(9,7)\n// >>> 63\nfunc perimeter_polygon (s int, l int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := perimeter_polygon(4,20)\n\texpected_1 := 80\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := perimeter_polygon(10,15)\n\texpected_2 := 150\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := perimeter_polygon(9,7)\n\texpected_3 := 63\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate the perimeter of a regular polygon.", "entry_point": "perimeter_polygon", "canonical_solution": null}
{"task_id": "MBGP/790", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether every even index contains even numbers of a given list.\n// Examples:\n// >>> even_position([3,2,1])\n// >>> False\n// >>> even_position([1,2,3])\n// >>> False\n// >>> even_position([2,1,4])\n// >>> True\nfunc even_position (nums []int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := even_position([]int{3, 2, 1})\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := even_position([]int{1, 2, 3})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := even_position([]int{2, 1, 4})\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether every even index contains even numbers of a given list.", "entry_point": "even_position", "canonical_solution": null}
{"task_id": "MBGP/791", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove the nested record from the given tuple.\n// Examples:\n// >>> remove_nested((1, 5, 7, (4, 6), 10))\n// >>> (1, 5, 7, 10)\n// >>> remove_nested((2, 6, 8, (5, 7), 11))\n// >>> (2, 6, 8, 11)\n// >>> remove_nested((3, 7, 9, (6, 8), 12))\n// >>> (3, 7, 9, 12)\nfunc remove_nested (test_tup []interface{}) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_nested([]interface{}{1, 5, 7, []interface{}{4, 6}, 10})\n\texpected_1 := []int{1, 5, 7, 10}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_nested([]interface{}{2, 6, 8, []interface{}{5, 7}, 11})\n\texpected_2 := []int{2, 6, 8, 11}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_nested([]interface{}{3, 7, 9, []interface{}{6, 8}, 12})\n\texpected_3 := []int{3, 7, 9, 12}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove the nested record from the given tuple.", "entry_point": "remove_nested", "canonical_solution": null}
{"task_id": "MBGP/792", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the number of lists in a given number of lists.\n// Examples:\n// >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n// >>> 4\n// >>> count_list([[1,2],[2,3],[4,5]])\n// >>> 3\n// >>> count_list([[1,0],[2,0]])\n// >>> 2\nfunc count_list (input_list [][]int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_list([][]int{[]int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}})\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_list([][]int{[]int{1, 2}, []int{2, 3}, []int{4, 5}})\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_list([][]int{[]int{1, 0}, []int{2, 0}})\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the number of lists in a given number of lists.", "entry_point": "count_list", "canonical_solution": null}
{"task_id": "MBGP/793", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the last position of an element in a sorted array.\n// Examples:\n// >>> last([1,2,3],1,3)\n// >>> 0\n// >>> last([1,1,1,2,3,4],1,6)\n// >>> 2\n// >>> last([2,3,2,3,6,8,9],3,8)\n// >>> 3\nfunc last (arr []int, x int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := last([]int{1, 2, 3},1,3)\n\texpected_1 := 0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := last([]int{1, 1, 1, 2, 3, 4},1,6)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := last([]int{2, 3, 2, 3, 6, 8, 9},3,8)\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the last position of an element in a sorted array.", "entry_point": "last", "canonical_solution": null}
{"task_id": "MBGP/794", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n// Examples:\n// >>> text_starta_endb(\"aabbbb\")\n// >>> ('Found a match!')\n// >>> text_starta_endb(\"aabAbbbc\")\n// >>> ('Not matched!')\n// >>> text_starta_endb(\"accddbbjjj\")\n// >>> ('Not matched!')\nfunc text_starta_endb (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := text_starta_endb(\"aabbbb\")\n\texpected_1 := \"Found a match!\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := text_starta_endb(\"aabAbbbc\")\n\texpected_2 := \"Not matched!\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := text_starta_endb(\"accddbbjjj\")\n\texpected_3 := \"Not matched!\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "entry_point": "text_starta_endb", "canonical_solution": null}
{"task_id": "MBGP/796", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write function to find the sum of all items in the given dictionary.\n// Examples:\n// >>> return_sum({'a': 100, 'b':200, 'c':300})\n// >>> 600\n// >>> return_sum({'a': 25, 'b':18, 'c':45})\n// >>> 88\n// >>> return_sum({'a': 36, 'b':39, 'c':49})\n// >>> 124\nfunc return_sum (dict map[string]int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := return_sum(map[string]int{ \"a\": 100, \"b\": 200, \"c\": 300,  })\n\texpected_1 := 600\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := return_sum(map[string]int{ \"a\": 25, \"b\": 18, \"c\": 45,  })\n\texpected_2 := 88\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := return_sum(map[string]int{ \"a\": 36, \"b\": 39, \"c\": 49,  })\n\texpected_3 := 124\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write function to find the sum of all items in the given dictionary.", "entry_point": "return_sum", "canonical_solution": null}
{"task_id": "MBGP/797", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of all odd natural numbers within the range l and r.\n// Examples:\n// >>> sum_in_Range(2,5)\n// >>> 8\n// >>> sum_in_Range(5,7)\n// >>> 12\n// >>> sum_in_Range(7,13)\n// >>> 40\nfunc sum_in_Range (l int, r int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_in_Range(2,5)\n\texpected_1 := 8\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_in_Range(5,7)\n\texpected_2 := 12\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_in_Range(7,13)\n\texpected_3 := 40\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of all odd natural numbers within the range l and r.", "entry_point": "sum_in_Range", "canonical_solution": null}
{"task_id": "MBGP/798", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of an array.\n// Examples:\n// >>> _sum([1, 2, 3])\n// >>> 6\n// >>> _sum([15, 12, 13, 10])\n// >>> 50\n// >>> _sum([0, 1, 2])\n// >>> 3\nfunc _sum (arr []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := _sum([]int{1, 2, 3})\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := _sum([]int{15, 12, 13, 10})\n\texpected_2 := 50\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := _sum([]int{0, 1, 2})\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of an array.", "entry_point": "_sum", "canonical_solution": null}
{"task_id": "MBGP/799", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to left rotate the bits of a given number.\n// Examples:\n// >>> left_Rotate(16,2)\n// >>> 64\n// >>> left_Rotate(10,2)\n// >>> 40\n// >>> left_Rotate(99,3)\n// >>> 792\nfunc left_Rotate (n int, d int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := left_Rotate(16,2)\n\texpected_1 := 64\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := left_Rotate(10,2)\n\texpected_2 := 40\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := left_Rotate(99,3)\n\texpected_3 := 792\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to left rotate the bits of a given number.", "entry_point": "left_Rotate", "canonical_solution": null}
{"task_id": "MBGP/800", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove all whitespaces from a string.\n// Examples:\n// >>> remove_all_spaces('python  program')\n// >>> ('pythonprogram')\n// >>> remove_all_spaces('python   programming    language')\n// >>> ('pythonprogramminglanguage')\n// >>> remove_all_spaces('python                     program')\n// >>> ('pythonprogram')\nfunc remove_all_spaces (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_all_spaces(\"python  program\")\n\texpected_1 := \"pythonprogram\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_all_spaces(\"python   programming    language\")\n\texpected_2 := \"pythonprogramminglanguage\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_all_spaces(\"python                     program\")\n\texpected_3 := \"pythonprogram\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove all whitespaces from a string.", "entry_point": "remove_all_spaces", "canonical_solution": null}
{"task_id": "MBGP/801", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the number of equal numbers from three given integers.\n// Examples:\n// >>> test_three_equal(1,1,1)\n// >>> 3\n// >>> test_three_equal(-1,-2,-3)\n// >>> 0\n// >>> test_three_equal(1,2,2)\n// >>> 2\nfunc test_three_equal (x int, y int, z int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := test_three_equal(1,1,1)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := test_three_equal(-1,-2,-3)\n\texpected_2 := 0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := test_three_equal(1,2,2)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the number of equal numbers from three given integers.", "entry_point": "test_three_equal", "canonical_solution": null}
{"task_id": "MBGP/802", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the number of rotations required to generate a sorted array.\n// Examples:\n// >>> count_Rotation([3,2,1],3)\n// >>> 1\n// >>> count_Rotation([4,5,1,2,3],5)\n// >>> 2\n// >>> count_Rotation([7,8,9,1,2,3],6)\n// >>> 3\nfunc count_Rotation (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Rotation([]int{3, 2, 1},3)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Rotation([]int{4, 5, 1, 2, 3},5)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Rotation([]int{7, 8, 9, 1, 2, 3},6)\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the number of rotations required to generate a sorted array.", "entry_point": "count_Rotation", "canonical_solution": null}
{"task_id": "MBGP/803", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the given number is a perfect square or not.\n// Examples:\n// >>> is_Perfect_Square(10)\n// >>> False\n// >>> is_Perfect_Square(36)\n// >>> True\n// >>> is_Perfect_Square(14)\n// >>> False\nfunc is_Perfect_Square (n int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_Perfect_Square(10)\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_Perfect_Square(36)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_Perfect_Square(14)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the given number is a perfect square or not.", "entry_point": "is_Perfect_Square", "canonical_solution": null}
{"task_id": "MBGP/804", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the product of numbers is even or not.\n// Examples:\n// >>> is_Product_Even([1,2,3],3)\n// >>> True\n// >>> is_Product_Even([1,2,1,4],4)\n// >>> True\n// >>> is_Product_Even([1,1],2)\n// >>> False\nfunc is_Product_Even (arr []int, n int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_Product_Even([]int{1, 2, 3},3)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_Product_Even([]int{1, 2, 1, 4},4)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_Product_Even([]int{1, 1},2)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the product of numbers is even or not.", "entry_point": "is_Product_Even", "canonical_solution": null}
{"task_id": "MBGP/805", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the list in a list of lists whose sum of elements is the highest.\n// Examples:\n// >>> max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])\n// >>> [10, 11, 12]\n// >>> max_sum_list([[3,2,1], [6,5,4], [12,11,10]])\n// >>> [12,11,10]\n// >>> max_sum_list([[2,3,1]])\n// >>> [2,3,1]\nfunc max_sum_list (lists [][]int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_sum_list([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{10, 11, 12}, []int{7, 8, 9}})\n\texpected_1 := []int{10, 11, 12}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_sum_list([][]int{[]int{3, 2, 1}, []int{6, 5, 4}, []int{12, 11, 10}})\n\texpected_2 := []int{12, 11, 10}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_sum_list([][]int{[]int{2, 3, 1}})\n\texpected_3 := []int{2, 3, 1}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the list in a list of lists whose sum of elements is the highest.", "entry_point": "max_sum_list", "canonical_solution": null}
{"task_id": "MBGP/806", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find maximum run of uppercase characters in the given string.\n// Examples:\n// >>> max_run_uppercase('GeMKSForGERksISBESt')\n// >>> 5\n// >>> max_run_uppercase('PrECIOusMOVemENTSYT')\n// >>> 6\n// >>> max_run_uppercase('GooGLEFluTTER')\n// >>> 4\nfunc max_run_uppercase (test_str string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_run_uppercase(\"GeMKSForGERksISBESt\")\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_run_uppercase(\"PrECIOusMOVemENTSYT\")\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_run_uppercase(\"GooGLEFluTTER\")\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find maximum run of uppercase characters in the given string.", "entry_point": "max_run_uppercase", "canonical_solution": null}
{"task_id": "MBGP/807", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the first odd number in a given list of numbers.\n// Examples:\n// >>> first_odd([1,3,5])\n// >>> 1\n// >>> first_odd([2,4,1,3])\n// >>> 1\n// >>> first_odd ([8,9,1])\n// >>> 9\nfunc first_odd (nums []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := first_odd([]int{1, 3, 5})\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := first_odd([]int{2, 4, 1, 3})\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := first_odd([]int{8, 9, 1})\n\texpected_3 := 9\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the first odd number in a given list of numbers.", "entry_point": "first_odd", "canonical_solution": null}
{"task_id": "MBGP/808", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if the given tuples contain the k or not.\n// Examples:\n// >>> check_K((10, 4, 5, 6, 8), 6)\n// >>> True\n// >>> check_K((1, 2, 3, 4, 5, 6), 7)\n// >>> False\n// >>> check_K((7, 8, 9, 44, 11, 12), 11)\n// >>> True\nfunc check_K (test_tup []int, K int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_K([]int{10, 4, 5, 6, 8},6)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_K([]int{1, 2, 3, 4, 5, 6},7)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_K([]int{7, 8, 9, 44, 11, 12},11)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if the given tuples contain the k or not.", "entry_point": "check_K", "canonical_solution": null}
{"task_id": "MBGP/809", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n// Examples:\n// >>> check_smaller((1, 2, 3), (2, 3, 4))\n// >>> False\n// >>> check_smaller((4, 5, 6), (3, 4, 5))\n// >>> True\n// >>> check_smaller((11, 12, 13), (10, 11, 12))\n// >>> True\nfunc check_smaller (test_tup1 []int, test_tup2 []int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_smaller([]int{1, 2, 3},[]int{2, 3, 4})\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_smaller([]int{4, 5, 6},[]int{3, 4, 5})\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_smaller([]int{11, 12, 13},[]int{10, 11, 12})\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.", "entry_point": "check_smaller", "canonical_solution": null}
{"task_id": "MBGP/810", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to iterate over elements repeating each as many times as its count.\n// Examples:\n// >>> count_variable(4,2,0,-2)\n// >>> ['p', 'p', 'p', 'p', 'q', 'q']\n// >>> count_variable(0,1,2,3)\n// >>> ['q', 'r', 'r', 's', 's', 's']\n// >>> count_variable(11,15,12,23)\n// >>> ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']\nfunc count_variable (a int, b int, c int, d int) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_variable(4,2,0,-2)\n\texpected_1 := []string{\"p\", \"p\", \"p\", \"p\", \"q\", \"q\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_variable(0,1,2,3)\n\texpected_2 := []string{\"q\", \"r\", \"r\", \"s\", \"s\", \"s\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_variable(11,15,12,23)\n\texpected_3 := []string{\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to iterate over elements repeating each as many times as its count.", "entry_point": "count_variable", "canonical_solution": null}
{"task_id": "MBGP/811", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if two lists of tuples are identical or not.\n// Examples:\n// >>> check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)])\n// >>> True\n// >>> check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)])\n// >>> False\n// >>> check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)])\n// >>> True\nfunc check_identical (test_list1 [][]int, test_list2 [][]int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_identical([][]int{[]int{10, 4}, []int{2, 5}},[][]int{[]int{10, 4}, []int{2, 5}})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_identical([][]int{[]int{1, 2}, []int{3, 7}},[][]int{[]int{12, 14}, []int{12, 45}})\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_identical([][]int{[]int{2, 14}, []int{12, 25}},[][]int{[]int{2, 14}, []int{12, 25}})\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if two lists of tuples are identical or not.", "entry_point": "check_identical", "canonical_solution": null}
{"task_id": "MBGP/812", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to abbreviate 'road' as 'rd.' in a given string.\n// Examples:\n// >>> road_rd(\"ravipadu Road\")\n// >>> ('ravipadu Rd.')\n// >>> road_rd(\"palnadu Road\")\n// >>> ('palnadu Rd.')\n// >>> road_rd(\"eshwar enclave Road\")\n// >>> ('eshwar enclave Rd.')\nfunc road_rd (street string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := road_rd(\"ravipadu Road\")\n\texpected_1 := \"ravipadu Rd.\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := road_rd(\"palnadu Road\")\n\texpected_2 := \"palnadu Rd.\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := road_rd(\"eshwar enclave Road\")\n\texpected_3 := \"eshwar enclave Rd.\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to abbreviate 'road' as 'rd.' in a given string.", "entry_point": "road_rd", "canonical_solution": null}
{"task_id": "MBGP/813", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find length of the string.\n// Examples:\n// >>> string_length('python')\n// >>> 6\n// >>> string_length('program')\n// >>> 7\n// >>> string_length('language')\n// >>> 8\nfunc string_length (str1 string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := string_length(\"python\")\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := string_length(\"program\")\n\texpected_2 := 7\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := string_length(\"language\")\n\texpected_3 := 8\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find length of the string.", "entry_point": "string_length", "canonical_solution": null}
{"task_id": "MBGP/814", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the area of a rombus.\n// Examples:\n// >>> rombus_area(10,20)\n// >>> 100\n// >>> rombus_area(10,5)\n// >>> 25\n// >>> rombus_area(4,2)\n// >>> 4\nfunc rombus_area (p int, q int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := rombus_area(10,20)\n\texpected_1 := 100.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := rombus_area(10,5)\n\texpected_2 := 25.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := rombus_area(4,2)\n\texpected_3 := 4.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the area of a rombus.", "entry_point": "rombus_area", "canonical_solution": null}
{"task_id": "MBGP/815", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n// Examples:\n// >>> sort_by_dnf([1,2,0,1,0,1,2,1,1], 9)\n// >>> [0, 0, 1, 1, 1, 1, 1, 2, 2]\n// >>> sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10)\n// >>> [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n// >>> sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10)\n// >>> [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nfunc sort_by_dnf (arr []int, n int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sort_by_dnf([]int{1, 2, 0, 1, 0, 1, 2, 1, 1},9)\n\texpected_1 := []int{0, 0, 1, 1, 1, 1, 1, 2, 2}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sort_by_dnf([]int{1, 0, 0, 1, 2, 1, 2, 2, 1, 0},10)\n\texpected_2 := []int{0, 0, 0, 1, 1, 1, 1, 2, 2, 2}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sort_by_dnf([]int{2, 2, 1, 0, 0, 0, 1, 1, 2, 1},10)\n\texpected_3 := []int{0, 0, 0, 1, 1, 1, 1, 2, 2, 2}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.", "entry_point": "sort_by_dnf", "canonical_solution": null}
{"task_id": "MBGP/816", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to clear the values of the given tuples.\n// Examples:\n// >>> clear_tuple((1, 5, 3, 6, 8))\n// >>> ()\n// >>> clear_tuple((2, 1, 4 ,5 ,6))\n// >>> ()\n// >>> clear_tuple((3, 2, 5, 6, 8))\n// >>> ()\nfunc clear_tuple (test_tup []int) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := clear_tuple([]int{1, 5, 3, 6, 8})\n\texpected_1 := []interface{}{}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := clear_tuple([]int{2, 1, 4, 5, 6})\n\texpected_2 := []interface{}{}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := clear_tuple([]int{3, 2, 5, 6, 8})\n\texpected_3 := []interface{}{}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to clear the values of the given tuples.", "entry_point": "clear_tuple", "canonical_solution": null}
{"task_id": "MBGP/817", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\n// Examples:\n// >>> div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)\n// >>> [19, 65, 57, 39, 152, 190]\n// >>> div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)\n// >>> [2, 5, 8, 10]\n// >>> div_of_nums([10,15,14,13,18,12,20],10,5)\n// >>> [10, 15, 20]\nfunc div_of_nums (nums []int, m int, n int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := div_of_nums([]int{19, 65, 57, 39, 152, 639, 121, 44, 90, 190},19,13)\n\texpected_1 := []int{19, 65, 57, 39, 152, 190}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := div_of_nums([]int{1, 2, 3, 5, 7, 8, 10},2,5)\n\texpected_2 := []int{2, 5, 8, 10}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := div_of_nums([]int{10, 15, 14, 13, 18, 12, 20},10,5)\n\texpected_3 := []int{10, 15, 20}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.", "entry_point": "div_of_nums", "canonical_solution": null}
{"task_id": "MBGP/818", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count lower case letters in a given string.\n// Examples:\n// >>> lower_ctr('abc')\n// >>> 3\n// >>> lower_ctr('string')\n// >>> 6\n// >>> lower_ctr('Python')\n// >>> 5\nfunc lower_ctr (str string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := lower_ctr(\"abc\")\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := lower_ctr(\"string\")\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := lower_ctr(\"Python\")\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count lower case letters in a given string.", "entry_point": "lower_ctr", "canonical_solution": null}
{"task_id": "MBGP/819", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n// Examples:\n// >>> count_duplic([1,2,2,2,4,4,4,5,5,5,5])\n// >>> ([1, 2, 4, 5], [1, 3, 3, 4])\n// >>> count_duplic([2,2,3,1,2,6,7,9])\n// >>> ([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\n// >>> count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])\n// >>> ([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\nfunc count_duplic (lists []int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_duplic([]int{1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5})\n\texpected_1 := [][]int{[]int{1, 2, 4, 5}, []int{1, 3, 3, 4}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_duplic([]int{2, 2, 3, 1, 2, 6, 7, 9})\n\texpected_2 := [][]int{[]int{2, 3, 1, 2, 6, 7, 9}, []int{2, 1, 1, 1, 1, 1, 1}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_duplic([]int{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12})\n\texpected_3 := [][]int{[]int{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.", "entry_point": "count_duplic", "canonical_solution": null}
{"task_id": "MBGP/820", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check whether the given month number contains 28 days or not.\n// Examples:\n// >>> check_monthnum_number(2)\n// >>> True\n// >>> check_monthnum_number(1)\n// >>> False\n// >>> check_monthnum_number(3)\n// >>> False\nfunc check_monthnum_number (monthnum1 int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_monthnum_number(2)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_monthnum_number(1)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_monthnum_number(3)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check whether the given month number contains 28 days or not.", "entry_point": "check_monthnum_number", "canonical_solution": null}
{"task_id": "MBGP/821", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to merge two dictionaries into a single expression.\n// Examples:\n// >>> merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })\n// >>> {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\n// >>> merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })\n// >>> {'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\n// >>> merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })\n// >>> {'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}\nfunc merge_dictionaries (dict1 map[string]string, dict2 map[string]string) map[string]string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := merge_dictionaries(map[string]string{ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\",  },map[string]string{ \"G\": \"Green\", \"W\": \"White\",  })\n\texpected_1 := map[string]string{ \"G\": \"Green\", \"W\": \"White\", \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\",  }\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := merge_dictionaries(map[string]string{ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\",  },map[string]string{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\",  })\n\texpected_2 := map[string]string{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\", \"R\": \"Red\", \"P\": \"Pink\",  }\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := merge_dictionaries(map[string]string{ \"G\": \"Green\", \"W\": \"White\",  },map[string]string{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\",  })\n\texpected_3 := map[string]string{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\", \"G\": \"Green\",  }\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to merge two dictionaries into a single expression.", "entry_point": "merge_dictionaries", "canonical_solution": null}
{"task_id": "MBGP/822", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to return true if the password is valid.\n// Examples:\n// >>> pass_validity(\"password\")\n// >>> False\n// >>> pass_validity(\"Password@10\")\n// >>> True\n// >>> pass_validity(\"password@10\")\n// >>> False\nfunc pass_validity (p string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := pass_validity(\"password\")\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := pass_validity(\"Password@10\")\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := pass_validity(\"password@10\")\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to return true if the password is valid.", "entry_point": "pass_validity", "canonical_solution": null}
{"task_id": "MBGP/823", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if the given string starts with a substring using regex.\n// Examples:\n// >>> check_substring(\"dreams for dreams makes life fun\", \"makes\")\n// >>> 'string doesnt start with the given substring'\n// >>> check_substring(\"Hi there how are you Hi alex\", \"Hi\")\n// >>> 'string starts with the given substring'\n// >>> check_substring(\"Its been a long day\", \"been\")\n// >>> 'string doesnt start with the given substring'\nfunc check_substring (string0 string, sample string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_substring(\"dreams for dreams makes life fun\",\"makes\")\n\texpected_1 := \"string doesnt start with the given substring\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_substring(\"Hi there how are you Hi alex\",\"Hi\")\n\texpected_2 := \"string starts with the given substring\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_substring(\"Its been a long day\",\"been\")\n\texpected_3 := \"string doesnt start with the given substring\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if the given string starts with a substring using regex.", "entry_point": "check_substring", "canonical_solution": null}
{"task_id": "MBGP/824", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to remove even numbers from a given list.\n// Examples:\n// >>> remove_even([1,3,5,2])\n// >>> [1,3,5]\n// >>> remove_even([5,6,7])\n// >>> [5,7]\n// >>> remove_even([1,2,3,4])\n// >>> [1,3]\nfunc remove_even (l []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_even([]int{1, 3, 5, 2})\n\texpected_1 := []int{1, 3, 5}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_even([]int{5, 6, 7})\n\texpected_2 := []int{5, 7}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_even([]int{1, 2, 3, 4})\n\texpected_3 := []int{1, 3}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to remove even numbers from a given list.", "entry_point": "remove_even", "canonical_solution": null}
{"task_id": "MBGP/825", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to access multiple elements of specified index from a given list.\n// Examples:\n// >>> access_elements([2,3,8,4,7,9],[0,3,5])\n// >>> [2, 4, 9]\n// >>> access_elements([1, 2, 3, 4, 5],[1,2])\n// >>> [2,3]\n// >>> access_elements([1,0,2,3],[0,1])\n// >>> [1,0]\nfunc access_elements (nums []int, list_index []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := access_elements([]int{2, 3, 8, 4, 7, 9},[]int{0, 3, 5})\n\texpected_1 := []int{2, 4, 9}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := access_elements([]int{1, 2, 3, 4, 5},[]int{1, 2})\n\texpected_2 := []int{2, 3}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := access_elements([]int{1, 0, 2, 3},[]int{0, 1})\n\texpected_3 := []int{1, 0}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to access multiple elements of specified index from a given list.", "entry_point": "access_elements", "canonical_solution": null}
{"task_id": "MBGP/826", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the type of triangle from the given sides.\n// Examples:\n// >>> check_Type_Of_Triangle(1,2,3)\n// >>> \"Obtuse-angled Triangle\"\n// >>> check_Type_Of_Triangle(2,2,2)\n// >>> \"Acute-angled Triangle\"\n// >>> check_Type_Of_Triangle(1,0,1)\n// >>> \"Right-angled Triangle\"\nfunc check_Type_Of_Triangle (a int, b int, c int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_Type_Of_Triangle(1,2,3)\n\texpected_1 := \"Obtuse-angled Triangle\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_Type_Of_Triangle(2,2,2)\n\texpected_2 := \"Acute-angled Triangle\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_Type_Of_Triangle(1,0,1)\n\texpected_3 := \"Right-angled Triangle\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the type of triangle from the given sides.", "entry_point": "check_Type_Of_Triangle", "canonical_solution": null}
{"task_id": "MBGP/827", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sum a specific column of a list in a given list of lists.\n// Examples:\n// >>> sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)\n// >>> 12\n// >>> sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)\n// >>> 15\n// >>> sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)\n// >>> 9\nfunc sum_column (list1 [][]int, C int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_column([][]int{[]int{1, 2, 3, 2}, []int{4, 5, 6, 2}, []int{7, 8, 9, 5}},0)\n\texpected_1 := 12\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_column([][]int{[]int{1, 2, 3, 2}, []int{4, 5, 6, 2}, []int{7, 8, 9, 5}},1)\n\texpected_2 := 15\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_column([][]int{[]int{1, 2, 3, 2}, []int{4, 5, 6, 2}, []int{7, 8, 9, 5}},3)\n\texpected_3 := 9\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sum a specific column of a list in a given list of lists.", "entry_point": "sum_column", "canonical_solution": null}
{"task_id": "MBGP/828", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count alphabets,digits and special charactes in a given string.\n// Examples:\n// >>> count_alpha_dig_spl(\"abc!@#123\")\n// >>> (3,3,3)\n// >>> count_alpha_dig_spl(\"dgsuy@#$%&1255\")\n// >>> (5,4,5)\n// >>> count_alpha_dig_spl(\"fjdsif627348#%$^&\")\n// >>> (6,6,5)\nfunc count_alpha_dig_spl (string0 string) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_alpha_dig_spl(\"abc!@#123\")\n\texpected_1 := []int{3, 3, 3}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_alpha_dig_spl(\"dgsuy@#$%&1255\")\n\texpected_2 := []int{5, 4, 5}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_alpha_dig_spl(\"fjdsif627348#%$^&\")\n\texpected_3 := []int{6, 6, 5}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count alphabets,digits and special charactes in a given string.", "entry_point": "count_alpha_dig_spl", "canonical_solution": null}
{"task_id": "MBGP/829", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find out the second most repeated (or frequent) string in the given sequence.\n// Examples:\n// >>> second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa'])\n// >>> 'bbb'\n// >>> second_frequent(['abc','bcd','abc','bcd','bcd','bcd'])\n// >>> 'abc'\n// >>> second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma'])\n// >>> 'gsm'\nfunc second_frequent (input []string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := second_frequent([]string{\"aaa\", \"bbb\", \"ccc\", \"bbb\", \"aaa\", \"aaa\"})\n\texpected_1 := \"bbb\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := second_frequent([]string{\"abc\", \"bcd\", \"abc\", \"bcd\", \"bcd\", \"bcd\"})\n\texpected_2 := \"abc\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := second_frequent([]string{\"cdma\", \"gsm\", \"hspa\", \"gsm\", \"cdma\", \"cdma\"})\n\texpected_3 := \"gsm\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find out the second most repeated (or frequent) string in the given sequence.", "entry_point": "second_frequent", "canonical_solution": null}
{"task_id": "MBGP/830", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to round up a number to specific digits.\n// Examples:\n// >>> round_up(123.01247,0)\n// >>> 124\n// >>> round_up(123.01247,1)\n// >>> 123.1\n// >>> round_up(123.01247,2)\n// >>> 123.02\nfunc round_up (a float64, digits int) interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := round_up(123.01247,0)\n\texpected_1 := 124\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := round_up(123.01247,1)\n\texpected_2 := 123.1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := round_up(123.01247,2)\n\texpected_3 := 123.02\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to round up a number to specific digits.", "entry_point": "round_up", "canonical_solution": null}
{"task_id": "MBGP/831", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count equal element pairs from the given array.\n// Examples:\n// >>> count_Pairs([1,1,1,1],4)\n// >>> 6\n// >>> count_Pairs([1,5,1],3)\n// >>> 1\n// >>> count_Pairs([3,2,1,7,8,9],6)\n// >>> 0\nfunc count_Pairs (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Pairs([]int{1, 1, 1, 1},4)\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Pairs([]int{1, 5, 1},3)\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Pairs([]int{3, 2, 1, 7, 8, 9},6)\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count equal element pairs from the given array.", "entry_point": "count_Pairs", "canonical_solution": null}
{"task_id": "MBGP/832", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to extract the maximum numeric value from a string by using regex.\n// Examples:\n// >>> extract_max('100klh564abc365bg')\n// >>> 564\n// >>> extract_max('hello300how546mer231')\n// >>> 546\n// >>> extract_max('its233beenalong343journey234')\n// >>> 343\nfunc extract_max (input string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := extract_max(\"100klh564abc365bg\")\n\texpected_1 := 564\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := extract_max(\"hello300how546mer231\")\n\texpected_2 := 546\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := extract_max(\"its233beenalong343journey234\")\n\texpected_3 := 343\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to extract the maximum numeric value from a string by using regex.", "entry_point": "extract_max", "canonical_solution": null}
{"task_id": "MBGP/833", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to get dictionary keys as a list.\n// Examples:\n// >>> get_key({1:'python',2:'java'})\n// >>> [1,2]\n// >>> get_key({10:'red',20:'blue',30:'black'})\n// >>> [10,20,30]\n// >>> get_key({27:'language',39:'java',44:'little'})\n// >>> [27,39,44]\nfunc get_key (dict map[int]string) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_key(map[int]string{ 1: \"python\", 2: \"java\",  })\n\texpected_1 := []int{1, 2}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_key(map[int]string{ 10: \"red\", 20: \"blue\", 30: \"black\",  })\n\texpected_2 := []int{10, 20, 30}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_key(map[int]string{ 27: \"language\", 39: \"java\", 44: \"little\",  })\n\texpected_3 := []int{27, 39, 44}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to get dictionary keys as a list.", "entry_point": "get_key", "canonical_solution": null}
{"task_id": "MBGP/834", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n// Examples:\n// >>> generate_matrix(3)\n// >>> [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n// >>> generate_matrix(2)\n// >>> [[1,2],[4,3]]\n// >>> generate_matrix(7)\n// >>> [[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]\nfunc generate_matrix (n int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := generate_matrix(3)\n\texpected_1 := [][]int{[]int{1, 2, 3}, []int{8, 9, 4}, []int{7, 6, 5}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := generate_matrix(2)\n\texpected_2 := [][]int{[]int{1, 2}, []int{4, 3}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := generate_matrix(7)\n\texpected_3 := [][]int{[]int{1, 2, 3, 4, 5, 6, 7}, []int{24, 25, 26, 27, 28, 29, 8}, []int{23, 40, 41, 42, 43, 30, 9}, []int{22, 39, 48, 49, 44, 31, 10}, []int{21, 38, 47, 46, 45, 32, 11}, []int{20, 37, 36, 35, 34, 33, 12}, []int{19, 18, 17, 16, 15, 14, 13}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.", "entry_point": "generate_matrix", "canonical_solution": null}
{"task_id": "MBGP/835", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the slope of a line.\n// Examples:\n// >>> slope(4,2,2,5)\n// >>> -1.5\n// >>> slope(2,4,4,6)\n// >>> 1\n// >>> slope(1,2,4,2)\n// >>> 0\nfunc slope (x1 int, y1 int, x2 int, y2 int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := slope(4,2,2,5)\n\texpected_1 := -1.5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := slope(2,4,4,6)\n\texpected_2 := 1.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := slope(1,2,4,2)\n\texpected_3 := 0.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the slope of a line.", "entry_point": "slope", "canonical_solution": null}
{"task_id": "MBGP/836", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find length of the subarray having maximum sum.\n// Examples:\n// >>> max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8)\n// >>> 5\n// >>> max_sub_array_sum([1, -2, 1, 1, -2, 1],6)\n// >>> 2\n// >>> max_sub_array_sum([-1, -2, 3, 4, 5],5)\n// >>> 3\nfunc max_sub_array_sum (a []int, size int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_sub_array_sum([]int{-2, -3, 4, -1, -2, 1, 5, -3},8)\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_sub_array_sum([]int{1, -2, 1, 1, -2, 1},6)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_sub_array_sum([]int{-1, -2, 3, 4, 5},5)\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find length of the subarray having maximum sum.", "entry_point": "max_sub_array_sum", "canonical_solution": null}
{"task_id": "MBGP/837", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the cube sum of first n odd natural numbers.\n// Examples:\n// >>> cube_Sum(2)\n// >>> 28\n// >>> cube_Sum(3)\n// >>> 153\n// >>> cube_Sum(4)\n// >>> 496\nfunc cube_Sum (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := cube_Sum(2)\n\texpected_1 := 28\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := cube_Sum(3)\n\texpected_2 := 153\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := cube_Sum(4)\n\texpected_3 := 496\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the cube sum of first n odd natural numbers.", "entry_point": "cube_Sum", "canonical_solution": null}
{"task_id": "MBGP/838", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find minimum number swaps required to make two binary strings equal.\n// Examples:\n// >>> min_Swaps(\"0011\",\"1111\")\n// >>> 1\n// >>> min_Swaps(\"00011\",\"01001\")\n// >>> 2\n// >>> min_Swaps(\"111\",\"111\")\n// >>> 0\nfunc min_Swaps (s1 string, s2 string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := min_Swaps(\"0011\",\"1111\")\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := min_Swaps(\"00011\",\"01001\")\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := min_Swaps(\"111\",\"111\")\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find minimum number swaps required to make two binary strings equal.", "entry_point": "min_Swaps", "canonical_solution": null}
{"task_id": "MBGP/839", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort the tuples alphabetically by the first item of each tuple.\n// Examples:\n// >>> sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")])\n// >>> [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\n// >>> sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")])\n// >>> [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\n// >>> sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")])\n// >>> [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]\nfunc sort_tuple (tup [][]interface{}) [][]interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sort_tuple([][]interface{}{[]interface{}{\"Amana\", 28}, []interface{}{\"Zenat\", 30}, []interface{}{\"Abhishek\", 29}, []interface{}{\"Nikhil\", 21}, []interface{}{\"B\", \"C\"}})\n\texpected_1 := [][]interface{}{[]interface{}{\"Abhishek\", 29}, []interface{}{\"Amana\", 28}, []interface{}{\"B\", \"C\"}, []interface{}{\"Nikhil\", 21}, []interface{}{\"Zenat\", 30}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sort_tuple([][]interface{}{[]interface{}{\"aaaa\", 28}, []interface{}{\"aa\", 30}, []interface{}{\"bab\", 29}, []interface{}{\"bb\", 21}, []interface{}{\"csa\", \"C\"}})\n\texpected_2 := [][]interface{}{[]interface{}{\"aa\", 30}, []interface{}{\"aaaa\", 28}, []interface{}{\"bab\", 29}, []interface{}{\"bb\", 21}, []interface{}{\"csa\", \"C\"}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sort_tuple([][]interface{}{[]interface{}{\"Sarala\", 28}, []interface{}{\"Ayesha\", 30}, []interface{}{\"Suman\", 29}, []interface{}{\"Sai\", 21}, []interface{}{\"G\", \"H\"}})\n\texpected_3 := [][]interface{}{[]interface{}{\"Ayesha\", 30}, []interface{}{\"G\", \"H\"}, []interface{}{\"Sai\", 21}, []interface{}{\"Sarala\", 28}, []interface{}{\"Suman\", 29}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort the tuples alphabetically by the first item of each tuple.", "entry_point": "sort_tuple", "canonical_solution": null}
{"task_id": "MBGP/840", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n// Examples:\n// >>> Check_Solution(2,0,-1)\n// >>> \"Yes\"\n// >>> Check_Solution(1,-5,6)\n// >>> \"No\"\n// >>> Check_Solution(2,0,2)\n// >>> \"Yes\"\nfunc Check_Solution (a int, b int, c int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Check_Solution(2,0,-1)\n\texpected_1 := \"Yes\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Check_Solution(1,-5,6)\n\texpected_2 := \"No\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Check_Solution(2,0,2)\n\texpected_3 := \"Yes\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.", "entry_point": "Check_Solution", "canonical_solution": null}
{"task_id": "MBGP/841", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count the number of inversions in the given array.\n// Examples:\n// >>> get_inv_count([1, 20, 6, 4, 5], 5)\n// >>> 5\n// >>> get_inv_count([8, 4, 2, 1], 4)\n// >>> 6\n// >>> get_inv_count([3, 1, 2], 3)\n// >>> 2\nfunc get_inv_count (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_inv_count([]int{1, 20, 6, 4, 5},5)\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_inv_count([]int{8, 4, 2, 1},4)\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_inv_count([]int{3, 1, 2},3)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count the number of inversions in the given array.", "entry_point": "get_inv_count", "canonical_solution": null}
{"task_id": "MBGP/842", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the number which occurs for odd number of times in the given array.\n// Examples:\n// >>> get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)\n// >>> 5\n// >>> get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7)\n// >>> 3\n// >>> get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7)\n// >>> 5\nfunc get_odd_occurence (arr []int, arr_size int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_odd_occurence([]int{2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2},13)\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_odd_occurence([]int{1, 2, 3, 2, 3, 1, 3},7)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_odd_occurence([]int{5, 7, 2, 7, 5, 2, 5},7)\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the number which occurs for odd number of times in the given array.", "entry_point": "get_odd_occurence", "canonical_solution": null}
{"task_id": "MBGP/844", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the kth element in an array containing odd elements first and then even elements.\n// Examples:\n// >>> get_Number(8,5)\n// >>> 2\n// >>> get_Number(7,2)\n// >>> 3\n// >>> get_Number(5,2)\n// >>> 3\nfunc get_Number (n int, k int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_Number(8,5)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_Number(7,2)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_Number(5,2)\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the kth element in an array containing odd elements first and then even elements.", "entry_point": "get_Number", "canonical_solution": null}
{"task_id": "MBGP/845", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the number of digits in factorial of a given number.\n// Examples:\n// >>> find_Digits(7)\n// >>> 4\n// >>> find_Digits(5)\n// >>> 3\n// >>> find_Digits(4)\n// >>> 2\nfunc find_Digits (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Digits(7)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Digits(5)\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Digits(4)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the number of digits in factorial of a given number.", "entry_point": "find_Digits", "canonical_solution": null}
{"task_id": "MBGP/846", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the minimum number of platforms required for a railway/bus station.\n// Examples:\n// >>> find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)\n// >>> 3\n// >>> find_platform([100,200,300,400],[700,800,900,1000],4)\n// >>> 4\n// >>> find_platform([5,6,7,8],[4,3,2,1],4)\n// >>> 1\nfunc find_platform (arr []int, dep []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_platform([]int{900, 940, 950, 1100, 1500, 1800},[]int{910, 1200, 1120, 1130, 1900, 2000},6)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_platform([]int{100, 200, 300, 400},[]int{700, 800, 900, 1000},4)\n\texpected_2 := 4\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_platform([]int{5, 6, 7, 8},[]int{4, 3, 2, 1},4)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the minimum number of platforms required for a railway/bus station.", "entry_point": "find_platform", "canonical_solution": null}
{"task_id": "MBGP/847", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to copy a list from a singleton tuple.\n// Examples:\n// >>> lcopy([1, 2, 3])\n// >>> [1, 2, 3]\n// >>> lcopy([4, 8, 2, 10, 15, 18])\n// >>> [4, 8, 2, 10, 15, 18]\n// >>> lcopy([4, 5, 6])\n// >>> [4, 5, 6]\nfunc lcopy (xs []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := lcopy([]int{1, 2, 3})\n\texpected_1 := []int{1, 2, 3}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := lcopy([]int{4, 8, 2, 10, 15, 18})\n\texpected_2 := []int{4, 8, 2, 10, 15, 18}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := lcopy([]int{4, 5, 6})\n\texpected_3 := []int{4, 5, 6}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to copy a list from a singleton tuple.", "entry_point": "lcopy", "canonical_solution": null}
{"task_id": "MBGP/848", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the area of a trapezium.\n// Examples:\n// >>> area_trapezium(6,9,4)\n// >>> 30\n// >>> area_trapezium(10,20,30)\n// >>> 450\n// >>> area_trapezium(15,25,35)\n// >>> 700\nfunc area_trapezium (base1 int, base2 int, height int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := area_trapezium(6,9,4)\n\texpected_1 := 30.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := area_trapezium(10,20,30)\n\texpected_2 := 450.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := area_trapezium(15,25,35)\n\texpected_3 := 700.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the area of a trapezium.", "entry_point": "area_trapezium", "canonical_solution": null}
{"task_id": "MBGP/849", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find sum of all prime divisors of a given number.\n// Examples:\n// >>> Sum(60)\n// >>> 10\n// >>> Sum(39)\n// >>> 16\n// >>> Sum(40)\n// >>> 7\nfunc Sum (N int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Sum(60)\n\texpected_1 := 10\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Sum(39)\n\texpected_2 := 16\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Sum(40)\n\texpected_3 := 7\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find sum of all prime divisors of a given number.", "entry_point": "Sum", "canonical_solution": null}
{"task_id": "MBGP/850", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if a triangle of positive area is possible with the given angles.\n// Examples:\n// >>> is_triangleexists(50,60,70)\n// >>> True\n// >>> is_triangleexists(90,45,45)\n// >>> True\n// >>> is_triangleexists(150,30,70)\n// >>> False\nfunc is_triangleexists (a int, b int, c int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_triangleexists(50,60,70)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_triangleexists(90,45,45)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_triangleexists(150,30,70)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if a triangle of positive area is possible with the given angles.", "entry_point": "is_triangleexists", "canonical_solution": null}
{"task_id": "MBGP/851", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find sum of inverse of divisors.\n// Examples:\n// >>> Sum_of_Inverse_Divisors(6,12)\n// >>> 2\n// >>> Sum_of_Inverse_Divisors(9,13)\n// >>> 1.44\n// >>> Sum_of_Inverse_Divisors(1,4)\n// >>> 4\nfunc Sum_of_Inverse_Divisors (N int, Sum int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Sum_of_Inverse_Divisors(6,12)\n\texpected_1 := 2.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Sum_of_Inverse_Divisors(9,13)\n\texpected_2 := 1.44\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Sum_of_Inverse_Divisors(1,4)\n\texpected_3 := 4.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find sum of inverse of divisors.", "entry_point": "Sum_of_Inverse_Divisors", "canonical_solution": null}
{"task_id": "MBGP/852", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to remove negative numbers from a list.\n// Examples:\n// >>> remove_negs([1,-2,3,-4])\n// >>> [1,3]\n// >>> remove_negs([1,2,3,-4])\n// >>> [1,2,3]\n// >>> remove_negs([4,5,-6,7,-8])\n// >>> [4,5,7]\nfunc remove_negs (num_list []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_negs([]int{1, -2, 3, -4})\n\texpected_1 := []int{1, 3}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_negs([]int{1, 2, 3, -4})\n\texpected_2 := []int{1, 2, 3}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_negs([]int{4, 5, -6, 7, -8})\n\texpected_3 := []int{4, 5, 7}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to remove negative numbers from a list.", "entry_point": "remove_negs", "canonical_solution": null}
{"task_id": "MBGP/853", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find sum of odd factors of a number.\n// Examples:\n// >>> sum_of_odd_Factors(30)\n// >>> 24\n// >>> sum_of_odd_Factors(18)\n// >>> 13\n// >>> sum_of_odd_Factors(2)\n// >>> 1\nfunc sum_of_odd_Factors (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_of_odd_Factors(30)\n\texpected_1 := 24\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_of_odd_Factors(18)\n\texpected_2 := 13\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_of_odd_Factors(2)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find sum of odd factors of a number.", "entry_point": "sum_of_odd_Factors", "canonical_solution": null}
{"task_id": "MBGP/855", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check for even parity of a given number.\n// Examples:\n// >>> check_Even_Parity(10)\n// >>> True\n// >>> check_Even_Parity(11)\n// >>> False\n// >>> check_Even_Parity(18)\n// >>> True\nfunc check_Even_Parity (x int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_Even_Parity(10)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_Even_Parity(11)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_Even_Parity(18)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check for even parity of a given number.", "entry_point": "check_Even_Parity", "canonical_solution": null}
{"task_id": "MBGP/856", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find minimum adjacent swaps required to sort binary array.\n// Examples:\n// >>> find_Min_Swaps([1,0,1,0],4)\n// >>> 3\n// >>> find_Min_Swaps([0,1,0],3)\n// >>> 1\n// >>> find_Min_Swaps([0,0,1,1,0],5)\n// >>> 2\nfunc find_Min_Swaps (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Min_Swaps([]int{1, 0, 1, 0},4)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Min_Swaps([]int{0, 1, 0},3)\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Min_Swaps([]int{0, 0, 1, 1, 0},5)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find minimum adjacent swaps required to sort binary array.", "entry_point": "find_Min_Swaps", "canonical_solution": null}
{"task_id": "MBGP/857", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to list out the list of given strings individually using map function.\n// Examples:\n// >>> listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])\n// >>> [['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\n// >>> listify_list(['python'])\n// >>> [['p', 'y', 't', 'h', 'o', 'n']]\n// >>> listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])\n// >>> [[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]\nfunc listify_list (list1 []string) [][]string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := listify_list([]string{\"Red\", \"Blue\", \"Black\", \"White\", \"Pink\"})\n\texpected_1 := [][]string{[]string{\"R\", \"e\", \"d\"}, []string{\"B\", \"l\", \"u\", \"e\"}, []string{\"B\", \"l\", \"a\", \"c\", \"k\"}, []string{\"W\", \"h\", \"i\", \"t\", \"e\"}, []string{\"P\", \"i\", \"n\", \"k\"}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := listify_list([]string{\"python\"})\n\texpected_2 := [][]string{[]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := listify_list([]string{\" red \", \"green\", \" black\", \"blue \", \" orange\", \"brown\"})\n\texpected_3 := [][]string{[]string{\" \", \"r\", \"e\", \"d\", \" \"}, []string{\"g\", \"r\", \"e\", \"e\", \"n\"}, []string{\" \", \"b\", \"l\", \"a\", \"c\", \"k\"}, []string{\"b\", \"l\", \"u\", \"e\", \" \"}, []string{\" \", \"o\", \"r\", \"a\", \"n\", \"g\", \"e\"}, []string{\"b\", \"r\", \"o\", \"w\", \"n\"}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to list out the list of given strings individually using map function.", "entry_point": "listify_list", "canonical_solution": null}
{"task_id": "MBGP/858", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count number of lists in a given list of lists and square the count.\n// Examples:\n// >>> count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n// >>> 25\n// >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )\n// >>> 16\n// >>> count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])\n// >>> 9\nfunc count_list (input_list []interface{}) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_list([]interface{}{[]interface{}{0}, []interface{}{1, 3}, []interface{}{5, 7}, []interface{}{9, 11}, []interface{}{13, 15, 17}})\n\texpected_1 := 25\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_list([]interface{}{[]interface{}{1, 3}, []interface{}{5, 7}, []interface{}{9, 11}, []interface{}{13, 15, 17}})\n\texpected_2 := 16\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_list([]interface{}{[]interface{}{2, 4}, []interface{}{[]interface{}{6, 8}, []interface{}{4, 5, 8}}, []interface{}{10, 12, 14}})\n\texpected_3 := 9\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count number of lists in a given list of lists and square the count.", "entry_point": "count_list", "canonical_solution": null}
{"task_id": "MBGP/859", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to generate all sublists of a given list.\n// Examples:\n// >>> sub_lists([10, 20, 30, 40])\n// >>> [[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\n// >>> sub_lists(['X', 'Y', 'Z'])\n// >>> [[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\n// >>> sub_lists([1,2,3])\n// >>> [[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]\nfunc sub_lists (my_list []interface{}) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sub_lists([]interface{}{10, 20, 30, 40})\n\texpected_1 := []interface{}{[]interface{}{}, []interface{}{10}, []interface{}{20}, []interface{}{30}, []interface{}{40}, []interface{}{10, 20}, []interface{}{10, 30}, []interface{}{10, 40}, []interface{}{20, 30}, []interface{}{20, 40}, []interface{}{30, 40}, []interface{}{10, 20, 30}, []interface{}{10, 20, 40}, []interface{}{10, 30, 40}, []interface{}{20, 30, 40}, []interface{}{10, 20, 30, 40}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sub_lists([]interface{}{\"X\", \"Y\", \"Z\"})\n\texpected_2 := []interface{}{[]interface{}{}, []interface{}{\"X\"}, []interface{}{\"Y\"}, []interface{}{\"Z\"}, []interface{}{\"X\", \"Y\"}, []interface{}{\"X\", \"Z\"}, []interface{}{\"Y\", \"Z\"}, []interface{}{\"X\", \"Y\", \"Z\"}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sub_lists([]interface{}{1, 2, 3})\n\texpected_3 := []interface{}{[]interface{}{}, []interface{}{1}, []interface{}{2}, []interface{}{3}, []interface{}{1, 2}, []interface{}{1, 3}, []interface{}{2, 3}, []interface{}{1, 2, 3}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to generate all sublists of a given list.", "entry_point": "sub_lists", "canonical_solution": null}
{"task_id": "MBGP/860", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n// Examples:\n// >>> check_alphanumeric(\"dawood@\")\n// >>> 'Discard'\n// >>> check_alphanumeric(\"skdmsam326\")\n// >>> 'Accept'\n// >>> check_alphanumeric(\"cooltricks@\")\n// >>> 'Discard'\nfunc check_alphanumeric (string0 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_alphanumeric(\"dawood@\")\n\texpected_1 := \"Discard\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_alphanumeric(\"skdmsam326\")\n\texpected_2 := \"Accept\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_alphanumeric(\"cooltricks@\")\n\texpected_3 := \"Discard\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.", "entry_point": "check_alphanumeric", "canonical_solution": null}
{"task_id": "MBGP/861", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find all anagrams of a string in a given list of strings using lambda function.\n// Examples:\n// >>> anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")\n// >>> ['bcda', 'cbda', 'adcb']\n// >>> anagram_lambda([\"recitals\",\" python\"], \"articles\" )\n// >>> [\"recitals\"]\n// >>> anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")\n// >>> [\" keep\"]\nfunc anagram_lambda (texts []string, str string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := anagram_lambda([]string{\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"},\"abcd\")\n\texpected_1 := []string{\"bcda\", \"cbda\", \"adcb\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := anagram_lambda([]string{\"recitals\", \" python\"},\"articles\")\n\texpected_2 := []string{\"recitals\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := anagram_lambda([]string{\" keep\", \" abcdef\", \" xyz\"},\" peek\")\n\texpected_3 := []string{\" keep\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find all anagrams of a string in a given list of strings using lambda function.", "entry_point": "anagram_lambda", "canonical_solution": null}
{"task_id": "MBGP/862", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the occurrences of n most common words in a given text.\n// Examples:\n// >>> n_common_words(\"python is a programming language\",1)\n// >>> [('python', 1)]\n// >>> n_common_words(\"python is a programming language\",1)\n// >>> [('python', 1)]\n// >>> n_common_words(\"python is a programming language\",5)\n// >>> [('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]\nfunc n_common_words (text string, n int) [][]interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := n_common_words(\"python is a programming language\",1)\n\texpected_1 := [][]interface{}{[]interface{}{\"python\", 1}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := n_common_words(\"python is a programming language\",1)\n\texpected_2 := [][]interface{}{[]interface{}{\"python\", 1}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := n_common_words(\"python is a programming language\",5)\n\texpected_3 := [][]interface{}{[]interface{}{\"python\", 1}, []interface{}{\"is\", 1}, []interface{}{\"a\", 1}, []interface{}{\"programming\", 1}, []interface{}{\"language\", 1}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the occurrences of n most common words in a given text.", "entry_point": "n_common_words", "canonical_solution": null}
{"task_id": "MBGP/863", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n// Examples:\n// >>> find_longest_conseq_subseq([1, 2, 2, 3], 4)\n// >>> 3\n// >>> find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7)\n// >>> 4\n// >>> find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11)\n// >>> 5\nfunc find_longest_conseq_subseq (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_longest_conseq_subseq([]int{1, 2, 2, 3},4)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_longest_conseq_subseq([]int{1, 9, 3, 10, 4, 20, 2},7)\n\texpected_2 := 4\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_longest_conseq_subseq([]int{36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42},11)\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.", "entry_point": "find_longest_conseq_subseq", "canonical_solution": null}
{"task_id": "MBGP/864", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find palindromes in a given list of strings using lambda function.\n// Examples:\n// >>> palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])\n// >>> ['php', 'aaa']\n// >>> palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])\n// >>> ['abba', 'aba']\n// >>> palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])\n// >>> ['abbccbba', 'abba', 'aba']\nfunc palindrome_lambda (texts []string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := palindrome_lambda([]string{\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"})\n\texpected_1 := []string{\"php\", \"aaa\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := palindrome_lambda([]string{\"abcd\", \"Python\", \"abba\", \"aba\"})\n\texpected_2 := []string{\"abba\", \"aba\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := palindrome_lambda([]string{\"abcd\", \"abbccbba\", \"abba\", \"aba\"})\n\texpected_3 := []string{\"abbccbba\", \"abba\", \"aba\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find palindromes in a given list of strings using lambda function.", "entry_point": "palindrome_lambda", "canonical_solution": null}
{"task_id": "MBGP/865", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to print n-times a list using map function.\n// Examples:\n// >>> ntimes_list([1, 2, 3, 4, 5, 6, 7],3)\n// >>> [3, 6, 9, 12, 15, 18, 21]\n// >>> ntimes_list([1, 2, 3, 4, 5, 6, 7],4)\n// >>> [4, 8, 12, 16, 20, 24, 28]\n// >>> ntimes_list([1, 2, 3, 4, 5, 6, 7],10)\n// >>> [10, 20, 30, 40, 50, 60, 70]\nfunc ntimes_list (nums []int, n int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := ntimes_list([]int{1, 2, 3, 4, 5, 6, 7},3)\n\texpected_1 := []int{3, 6, 9, 12, 15, 18, 21}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := ntimes_list([]int{1, 2, 3, 4, 5, 6, 7},4)\n\texpected_2 := []int{4, 8, 12, 16, 20, 24, 28}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := ntimes_list([]int{1, 2, 3, 4, 5, 6, 7},10)\n\texpected_3 := []int{10, 20, 30, 40, 50, 60, 70}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to print n-times a list using map function.", "entry_point": "ntimes_list", "canonical_solution": null}
{"task_id": "MBGP/866", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check whether the given month name contains 31 days or not.\n// Examples:\n// >>> check_monthnumb(\"February\")\n// >>> False\n// >>> check_monthnumb(\"January\")\n// >>> True\n// >>> check_monthnumb(\"March\")\n// >>> True\nfunc check_monthnumb (monthname2 string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_monthnumb(\"February\")\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_monthnumb(\"January\")\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_monthnumb(\"March\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check whether the given month name contains 31 days or not.", "entry_point": "check_monthnumb", "canonical_solution": null}
{"task_id": "MBGP/867", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to add a minimum number such that the sum of array becomes even.\n// Examples:\n// >>> min_Num([1,2,3,4,5,6,7,8,9],9)\n// >>> 1\n// >>> min_Num([1,2,3,4,5,6,7,8],8)\n// >>> 2\n// >>> min_Num([1,2,3],3)\n// >>> 2\nfunc min_Num (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := min_Num([]int{1, 2, 3, 4, 5, 6, 7, 8, 9},9)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := min_Num([]int{1, 2, 3, 4, 5, 6, 7, 8},8)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := min_Num([]int{1, 2, 3},3)\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to add a minimum number such that the sum of array becomes even.", "entry_point": "min_Num", "canonical_solution": null}
{"task_id": "MBGP/868", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the length of the last word in a given string.\n// Examples:\n// >>> length_Of_Last_Word(\"python language\")\n// >>> 8\n// >>> length_Of_Last_Word(\"PHP\")\n// >>> 3\n// >>> length_Of_Last_Word(\"\")\n// >>> 0\nfunc length_Of_Last_Word (a string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := length_Of_Last_Word(\"python language\")\n\texpected_1 := 8\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := length_Of_Last_Word(\"PHP\")\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := length_Of_Last_Word(\"\")\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the length of the last word in a given string.", "entry_point": "length_Of_Last_Word", "canonical_solution": null}
{"task_id": "MBGP/869", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove sublists from a given list of lists, which are outside a given range.\n// Examples:\n// >>> remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)\n// >>> [[13, 14, 15, 17]]\n// >>> remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)\n// >>> [[2], [1, 2, 3]]\n// >>> remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)\n// >>> [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]\nfunc remove_list_range (list1 [][]int, leftrange int, rigthrange int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_list_range([][]int{[]int{2}, []int{0}, []int{1, 2, 3}, []int{0, 1, 2, 3, 6, 7}, []int{9, 11}, []int{13, 14, 15, 17}},13,17)\n\texpected_1 := [][]int{[]int{13, 14, 15, 17}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_list_range([][]int{[]int{2}, []int{0}, []int{1, 2, 3}, []int{0, 1, 2, 3, 6, 7}, []int{9, 11}, []int{13, 14, 15, 17}},1,3)\n\texpected_2 := [][]int{[]int{2}, []int{1, 2, 3}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_list_range([][]int{[]int{2}, []int{0}, []int{1, 2, 3}, []int{0, 1, 2, 3, 6, 7}, []int{9, 11}, []int{13, 14, 15, 17}},0,7)\n\texpected_3 := [][]int{[]int{2}, []int{0}, []int{1, 2, 3}, []int{0, 1, 2, 3, 6, 7}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove sublists from a given list of lists, which are outside a given range.", "entry_point": "remove_list_range", "canonical_solution": null}
{"task_id": "MBGP/870", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n// Examples:\n// >>> sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n// >>> 48\n// >>> sum_positivenum([10,15,-14,13,-18,12,-20])\n// >>> 50\n// >>> sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])\n// >>> 522\nfunc sum_positivenum (nums []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_positivenum([]int{2, 4, -6, -9, 11, -12, 14, -5, 17})\n\texpected_1 := 48\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_positivenum([]int{10, 15, -14, 13, -18, 12, -20})\n\texpected_2 := 50\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_positivenum([]int{19, -65, 57, 39, 152, -639, 121, 44, 90, -190})\n\texpected_3 := 522\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.", "entry_point": "sum_positivenum", "canonical_solution": null}
{"task_id": "MBGP/871", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the given strings are rotations of each other or not.\n// Examples:\n// >>> are_Rotations(\"abc\",\"cba\")\n// >>> False\n// >>> are_Rotations(\"abcd\",\"cdba\")\n// >>> False\n// >>> are_Rotations(\"abacd\",\"cdaba\")\n// >>> True\nfunc are_Rotations (string1 string, string2 string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := are_Rotations(\"abc\",\"cba\")\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := are_Rotations(\"abcd\",\"cdba\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := are_Rotations(\"abacd\",\"cdaba\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the given strings are rotations of each other or not.", "entry_point": "are_Rotations", "canonical_solution": null}
{"task_id": "MBGP/872", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if a nested list is a subset of another nested list.\n// Examples:\n// >>> check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])\n// >>> True\n// >>> check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])\n// >>> True\n// >>> check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])\n// >>> False\nfunc check_subset (list1 []interface{}, list2 []interface{}) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_subset([]interface{}{[]interface{}{1, 3}, []interface{}{5, 7}, []interface{}{9, 11}, []interface{}{13, 15, 17}},[]interface{}{[]interface{}{1, 3}, []interface{}{13, 15, 17}})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_subset([]interface{}{[]interface{}{1, 2}, []interface{}{2, 3}, []interface{}{3, 4}, []interface{}{5, 6}},[]interface{}{[]interface{}{3, 4}, []interface{}{5, 6}})\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_subset([]interface{}{[]interface{}{[]interface{}{1, 2}, []interface{}{2, 3}}, []interface{}{[]interface{}{3, 4}, []interface{}{5, 7}}},[]interface{}{[]interface{}{[]interface{}{3, 4}, []interface{}{5, 6}}})\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if a nested list is a subset of another nested list.", "entry_point": "check_subset", "canonical_solution": null}
{"task_id": "MBGP/873", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to solve the fibonacci sequence using recursion.\n// Examples:\n// >>> fibonacci(7)\n// >>> 13\n// >>> fibonacci(8)\n// >>> 21\n// >>> fibonacci(9)\n// >>> 34\nfunc fibonacci (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := fibonacci(7)\n\texpected_1 := 13\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := fibonacci(8)\n\texpected_2 := 21\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := fibonacci(9)\n\texpected_3 := 34\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to solve the fibonacci sequence using recursion.", "entry_point": "fibonacci", "canonical_solution": null}
{"task_id": "MBGP/874", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check if the string is a concatenation of another string.\n// Examples:\n// >>> check_Concat(\"abcabcabc\",\"abc\")\n// >>> True\n// >>> check_Concat(\"abcab\",\"abc\")\n// >>> False\n// >>> check_Concat(\"aba\",\"ab\")\n// >>> False\nfunc check_Concat (str1 string, str2 string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_Concat(\"abcabcabc\",\"abc\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_Concat(\"abcab\",\"abc\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_Concat(\"aba\",\"ab\")\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check if the string is a concatenation of another string.", "entry_point": "check_Concat", "canonical_solution": null}
{"task_id": "MBGP/875", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the minimum difference in the tuple pairs of given tuples.\n// Examples:\n// >>> min_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n// >>> 1\n// >>> min_difference([(4, 6), (12, 8), (11, 4), (2, 13)])\n// >>> 2\n// >>> min_difference([(5, 17), (3, 9), (12, 5), (3, 24)])\n// >>> 6\nfunc min_difference (test_list [][]int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := min_difference([][]int{[]int{3, 5}, []int{1, 7}, []int{10, 3}, []int{1, 2}})\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := min_difference([][]int{[]int{4, 6}, []int{12, 8}, []int{11, 4}, []int{2, 13}})\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := min_difference([][]int{[]int{5, 17}, []int{3, 9}, []int{12, 5}, []int{3, 24}})\n\texpected_3 := 6\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the minimum difference in the tuple pairs of given tuples.", "entry_point": "min_difference", "canonical_solution": null}
{"task_id": "MBGP/876", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find lcm of two positive integers.\n// Examples:\n// >>> lcm(4,6)\n// >>> 12\n// >>> lcm(15,17)\n// >>> 255\n// >>> lcm(2,6)\n// >>> 6\nfunc lcm (x int, y int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := lcm(4,6)\n\texpected_1 := 12\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := lcm(15,17)\n\texpected_2 := 255\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := lcm(2,6)\n\texpected_3 := 6\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find lcm of two positive integers.", "entry_point": "lcm", "canonical_solution": null}
{"task_id": "MBGP/877", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to sort the given string.\n// Examples:\n// >>> sort_String(\"cba\")\n// >>> \"abc\"\n// >>> sort_String(\"data\")\n// >>> \"aadt\"\n// >>> sort_String(\"zxy\")\n// >>> \"xyz\"\nfunc sort_String (str string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sort_String(\"cba\")\n\texpected_1 := \"abc\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sort_String(\"data\")\n\texpected_2 := \"aadt\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sort_String(\"zxy\")\n\texpected_3 := \"xyz\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to sort the given string.", "entry_point": "sort_String", "canonical_solution": null}
{"task_id": "MBGP/878", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if the given tuple contains only k elements.\n// Examples:\n// >>> check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5])\n// >>> True\n// >>> check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6])\n// >>> True\n// >>> check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1])\n// >>> False\nfunc check_tuples (test_tuple []int, K []int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_tuples([]int{3, 5, 6, 5, 3, 6},[]int{3, 6, 5})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_tuples([]int{4, 5, 6, 4, 6, 5},[]int{4, 5, 6})\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_tuples([]int{9, 8, 7, 6, 8, 9},[]int{9, 8, 1})\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if the given tuple contains only k elements.", "entry_point": "check_tuples", "canonical_solution": null}
{"task_id": "MBGP/879", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n// Examples:\n// >>> text_match(\"aabbbbd\")\n// >>> 'Not matched!'\n// >>> text_match(\"aabAbbbc\")\n// >>> 'Not matched!'\n// >>> text_match(\"accddbbjjjb\")\n// >>> 'Found a match!'\nfunc text_match (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := text_match(\"aabbbbd\")\n\texpected_1 := \"Not matched!\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := text_match(\"aabAbbbc\")\n\texpected_2 := \"Not matched!\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := text_match(\"accddbbjjjb\")\n\texpected_3 := \"Found a match!\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.", "entry_point": "text_match", "canonical_solution": null}
{"task_id": "MBGP/880", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find number of solutions in quadratic equation.\n// Examples:\n// >>> Check_Solution(2,5,2)\n// >>> \"2 solutions\"\n// >>> Check_Solution(1,1,1)\n// >>> \"No solutions\"\n// >>> Check_Solution(1,2,1)\n// >>> \"1 solution\"\nfunc Check_Solution (a int, b int, c int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Check_Solution(2,5,2)\n\texpected_1 := \"2 solutions\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Check_Solution(1,1,1)\n\texpected_2 := \"No solutions\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Check_Solution(1,2,1)\n\texpected_3 := \"1 solution\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find number of solutions in quadratic equation.", "entry_point": "Check_Solution", "canonical_solution": null}
{"task_id": "MBGP/881", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the sum of first even and odd number of a given list.\n// Examples:\n// >>> sum_even_odd([1,3,5,7,4,1,6,8])\n// >>> 5\n// >>> sum_even_odd([1,2,3,4,5,6,7,8,9,10])\n// >>> 3\n// >>> sum_even_odd([1,5,7,9,10])\n// >>> 11\nfunc sum_even_odd (list1 []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_even_odd([]int{1, 3, 5, 7, 4, 1, 6, 8})\n\texpected_1 := 5\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_even_odd([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n\texpected_2 := 3\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_even_odd([]int{1, 5, 7, 9, 10})\n\texpected_3 := 11\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the sum of first even and odd number of a given list.", "entry_point": "sum_even_odd", "canonical_solution": null}
{"task_id": "MBGP/882", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to caluclate perimeter of a parallelogram.\n// Examples:\n// >>> parallelogram_perimeter(10,20)\n// >>> 400\n// >>> parallelogram_perimeter(15,20)\n// >>> 600\n// >>> parallelogram_perimeter(8,9)\n// >>> 144\nfunc parallelogram_perimeter (b int, h int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := parallelogram_perimeter(10,20)\n\texpected_1 := 400\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := parallelogram_perimeter(15,20)\n\texpected_2 := 600\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := parallelogram_perimeter(8,9)\n\texpected_3 := 144\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to caluclate perimeter of a parallelogram.", "entry_point": "parallelogram_perimeter", "canonical_solution": null}
{"task_id": "MBGP/883", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\n// Examples:\n// >>> div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)\n// >>> [ 152,44]\n// >>> div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)\n// >>> [10]\n// >>> div_of_nums([10,15,14,13,18,12,20],10,5)\n// >>> [10,20]\nfunc div_of_nums (nums []int, m int, n int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := div_of_nums([]int{19, 65, 57, 39, 152, 639, 121, 44, 90, 190},2,4)\n\texpected_1 := []int{152, 44}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := div_of_nums([]int{1, 2, 3, 5, 7, 8, 10},2,5)\n\texpected_2 := []int{10}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := div_of_nums([]int{10, 15, 14, 13, 18, 12, 20},10,5)\n\texpected_3 := []int{10, 20}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.", "entry_point": "div_of_nums", "canonical_solution": null}
{"task_id": "MBGP/884", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether all the bits are within a given range or not.\n// Examples:\n// >>> all_Bits_Set_In_The_Given_Range(10,2,1)\n// >>> True\n// >>> all_Bits_Set_In_The_Given_Range(5,2,4)\n// >>> False\n// >>> all_Bits_Set_In_The_Given_Range(22,2,3)\n// >>> True\nfunc all_Bits_Set_In_The_Given_Range (n int, l int, r int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := all_Bits_Set_In_The_Given_Range(10,2,1)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := all_Bits_Set_In_The_Given_Range(5,2,4)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := all_Bits_Set_In_The_Given_Range(22,2,3)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether all the bits are within a given range or not.", "entry_point": "all_Bits_Set_In_The_Given_Range", "canonical_solution": null}
{"task_id": "MBGP/885", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the two given strings are isomorphic to each other or not.\n// Examples:\n// >>> is_Isomorphic(\"paper\",\"title\")\n// >>> True\n// >>> is_Isomorphic(\"ab\",\"ba\")\n// >>> True\n// >>> is_Isomorphic(\"ab\",\"aa\")\n// >>> False\nfunc is_Isomorphic (str1 string, str2 string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_Isomorphic(\"paper\",\"title\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_Isomorphic(\"ab\",\"ba\")\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_Isomorphic(\"ab\",\"aa\")\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the two given strings are isomorphic to each other or not.", "entry_point": "is_Isomorphic", "canonical_solution": null}
{"task_id": "MBGP/886", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to add all the numbers in a list and divide it with the length of the list.\n// Examples:\n// >>> sum_num((8, 2, 3, 0, 7))\n// >>> 4.0\n// >>> sum_num((-10,-20,-30))\n// >>> -20.0\n// >>> sum_num((19,15,18))\n// >>> 17.333333333333332\nfunc sum_num (numbers []int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_num([]int{8, 2, 3, 0, 7})\n\texpected_1 := 4.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_num([]int{-10, -20, -30})\n\texpected_2 := -20.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_num([]int{19, 15, 18})\n\texpected_3 := 17.333333333333332\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to add all the numbers in a list and divide it with the length of the list.", "entry_point": "sum_num", "canonical_solution": null}
{"task_id": "MBGP/887", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the given number is odd or not using bitwise operator.\n// Examples:\n// >>> is_odd(5)\n// >>> True\n// >>> is_odd(6)\n// >>> False\n// >>> is_odd(7)\n// >>> True\nfunc is_odd (n int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_odd(5)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_odd(6)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_odd(7)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the given number is odd or not using bitwise operator.", "entry_point": "is_odd", "canonical_solution": null}
{"task_id": "MBGP/888", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to substract the elements of the given nested tuples.\n// Examples:\n// >>> substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n// >>> ((-5, -4), (1, -4), (1, 8), (-6, 7))\n// >>> substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4)))\n// >>> ((-6, -4), (0, -4), (1, 8), (-6, 7))\n// >>> substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5)))\n// >>> ((7, -4), (1, -4), (6, 8), (-2, 7))\nfunc substract_elements (test_tup1 [][]int, test_tup2 [][]int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := substract_elements([][]int{[]int{1, 3}, []int{4, 5}, []int{2, 9}, []int{1, 10}},[][]int{[]int{6, 7}, []int{3, 9}, []int{1, 1}, []int{7, 3}})\n\texpected_1 := [][]int{[]int{-5, -4}, []int{1, -4}, []int{1, 8}, []int{-6, 7}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := substract_elements([][]int{[]int{13, 4}, []int{14, 6}, []int{13, 10}, []int{12, 11}},[][]int{[]int{19, 8}, []int{14, 10}, []int{12, 2}, []int{18, 4}})\n\texpected_2 := [][]int{[]int{-6, -4}, []int{0, -4}, []int{1, 8}, []int{-6, 7}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := substract_elements([][]int{[]int{19, 5}, []int{18, 7}, []int{19, 11}, []int{17, 12}},[][]int{[]int{12, 9}, []int{17, 11}, []int{13, 3}, []int{19, 5}})\n\texpected_3 := [][]int{[]int{7, -4}, []int{1, -4}, []int{6, 8}, []int{-2, 7}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to substract the elements of the given nested tuples.", "entry_point": "substract_elements", "canonical_solution": null}
{"task_id": "MBGP/889", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to reverse each list in a given list of lists.\n// Examples:\n// >>> reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])\n// >>> [[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\n// >>> reverse_list_lists([[1,2],[2,3],[3,4]])\n// >>> [[2,1],[3,2],[4,3]]\n// >>> reverse_list_lists([[10,20],[30,40]])\n// >>> [[20,10],[40,30]]\nfunc reverse_list_lists (lists [][]int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := reverse_list_lists([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}})\n\texpected_1 := [][]int{[]int{4, 3, 2, 1}, []int{8, 7, 6, 5}, []int{12, 11, 10, 9}, []int{16, 15, 14, 13}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := reverse_list_lists([][]int{[]int{1, 2}, []int{2, 3}, []int{3, 4}})\n\texpected_2 := [][]int{[]int{2, 1}, []int{3, 2}, []int{4, 3}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := reverse_list_lists([][]int{[]int{10, 20}, []int{30, 40}})\n\texpected_3 := [][]int{[]int{20, 10}, []int{40, 30}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to reverse each list in a given list of lists.", "entry_point": "reverse_list_lists", "canonical_solution": null}
{"task_id": "MBGP/890", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the index of an extra element present in one sorted array.\n// Examples:\n// >>> find_Extra([1,2,3,4],[1,2,3],3)\n// >>> 3\n// >>> find_Extra([2,4,6,8,10],[2,4,6,8],4)\n// >>> 4\n// >>> find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5)\n// >>> 5\nfunc find_Extra (arr1 []int, arr2 []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_Extra([]int{1, 2, 3, 4},[]int{1, 2, 3},3)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_Extra([]int{2, 4, 6, 8, 10},[]int{2, 4, 6, 8},4)\n\texpected_2 := 4\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_Extra([]int{1, 3, 5, 7, 9, 11},[]int{1, 3, 5, 7, 9},5)\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the index of an extra element present in one sorted array.", "entry_point": "find_Extra", "canonical_solution": null}
{"task_id": "MBGP/891", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the given two numbers have same number of digits or not.\n// Examples:\n// >>> same_Length(12,1)\n// >>> False\n// >>> same_Length(2,2)\n// >>> True\n// >>> same_Length(10,20)\n// >>> True\nfunc same_Length (A int, B int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := same_Length(12,1)\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := same_Length(2,2)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := same_Length(10,20)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the given two numbers have same number of digits or not.", "entry_point": "same_Length", "canonical_solution": null}
{"task_id": "MBGP/892", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove multiple spaces in a string.\n// Examples:\n// >>> remove_spaces('python  program')\n// >>> ('python program')\n// >>> remove_spaces('python   programming    language')\n// >>> ('python programming language')\n// >>> remove_spaces('python                     program')\n// >>> ('python program')\nfunc remove_spaces (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_spaces(\"python  program\")\n\texpected_1 := \"python program\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_spaces(\"python   programming    language\")\n\texpected_2 := \"python programming language\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_spaces(\"python                     program\")\n\texpected_3 := \"python program\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove multiple spaces in a string.", "entry_point": "remove_spaces", "canonical_solution": null}
{"task_id": "MBGP/893", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to get the last element of each sublist.\n// Examples:\n// >>> Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]])\n// >>> [3, 5, 9]\n// >>> Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']])\n// >>> ['z', 'm', 'b', 'v']\n// >>> Extract([[1, 2, 3], [4, 5]])\n// >>> [3, 5]\nfunc Extract (lst []interface{}) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Extract([]interface{}{[]interface{}{1, 2, 3}, []interface{}{4, 5}, []interface{}{6, 7, 8, 9}})\n\texpected_1 := []interface{}{3, 5, 9}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Extract([]interface{}{[]interface{}{\"x\", \"y\", \"z\"}, []interface{}{\"m\"}, []interface{}{\"a\", \"b\"}, []interface{}{\"u\", \"v\"}})\n\texpected_2 := []interface{}{\"z\", \"m\", \"b\", \"v\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Extract([]interface{}{[]interface{}{1, 2, 3}, []interface{}{4, 5}})\n\texpected_3 := []interface{}{3, 5}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to get the last element of each sublist.", "entry_point": "Extract", "canonical_solution": null}
{"task_id": "MBGP/894", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert the given string of float type into tuple.\n// Examples:\n// >>> float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\")\n// >>> (1.2, 1.3, 2.3, 2.4, 6.5)\n// >>> float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\")\n// >>> (2.3, 2.4, 5.6, 5.4, 8.9)\n// >>> float_to_tuple(\"0.3, 0.5, 7.8, 9.4\")\n// >>> (0.3, 0.5, 7.8, 9.4)\nfunc float_to_tuple (test_str string) []float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\")\n\texpected_1 := []float64{1.2, 1.3, 2.3, 2.4, 6.5}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\")\n\texpected_2 := []float64{2.3, 2.4, 5.6, 5.4, 8.9}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := float_to_tuple(\"0.3, 0.5, 7.8, 9.4\")\n\texpected_3 := []float64{0.3, 0.5, 7.8, 9.4}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert the given string of float type into tuple.", "entry_point": "float_to_tuple", "canonical_solution": null}
{"task_id": "MBGP/895", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\n// Examples:\n// >>> max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6])\n// >>> 26\n// >>> max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7])\n// >>> 28\n// >>> max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21])\n// >>> 44\nfunc max_sum_subseq (A []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_sum_subseq([]int{1, 2, 9, 4, 5, 0, 4, 11, 6})\n\texpected_1 := 26\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_sum_subseq([]int{1, 2, 9, 5, 6, 0, 5, 12, 7})\n\texpected_2 := 28\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_sum_subseq([]int{1, 3, 10, 5, 6, 0, 6, 14, 21})\n\texpected_3 := 44\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.", "entry_point": "max_sum_subseq", "canonical_solution": null}
{"task_id": "MBGP/896", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n// Examples:\n// >>> sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])\n// >>> [(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)]\n// >>> sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])\n// >>> [(1,2), (3,5), (4,7), (9,8), (7,9)]\n// >>> sort_list_last([(20,50), (10,20), (40,40)])\n// >>> [(10,20),(40,40),(20,50)]\nfunc sort_list_last (tuples [][]int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sort_list_last([][]int{[]int{2, 5}, []int{1, 2}, []int{4, 4}, []int{2, 3}, []int{2, 1}})\n\texpected_1 := [][]int{[]int{2, 1}, []int{1, 2}, []int{2, 3}, []int{4, 4}, []int{2, 5}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sort_list_last([][]int{[]int{9, 8}, []int{4, 7}, []int{3, 5}, []int{7, 9}, []int{1, 2}})\n\texpected_2 := [][]int{[]int{1, 2}, []int{3, 5}, []int{4, 7}, []int{9, 8}, []int{7, 9}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sort_list_last([][]int{[]int{20, 50}, []int{10, 20}, []int{40, 40}})\n\texpected_3 := [][]int{[]int{10, 20}, []int{40, 40}, []int{20, 50}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.", "entry_point": "sort_list_last", "canonical_solution": null}
{"task_id": "MBGP/897", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the word is present in a given sentence or not.\n// Examples:\n// >>> is_Word_Present(\"machine learning\",\"machine\")\n// >>> True\n// >>> is_Word_Present(\"easy\",\"fun\")\n// >>> False\n// >>> is_Word_Present(\"python language\",\"code\")\n// >>> False\nfunc is_Word_Present (sentence string, word string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_Word_Present(\"machine learning\",\"machine\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_Word_Present(\"easy\",\"fun\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_Word_Present(\"python language\",\"code\")\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the word is present in a given sentence or not.", "entry_point": "is_Word_Present", "canonical_solution": null}
{"task_id": "MBGP/898", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to extract specified number of elements from a given list, which follow each other continuously.\n// Examples:\n// >>> extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)\n// >>> [1, 4]\n// >>> extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)\n// >>> [4]\n// >>> extract_elements([0,0,0,0,0],5)\n// >>> [0]\nfunc extract_elements (numbers []int, n int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := extract_elements([]int{1, 1, 3, 4, 4, 5, 6, 7},2)\n\texpected_1 := []int{1, 4}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := extract_elements([]int{0, 1, 2, 3, 4, 4, 4, 4, 5, 7},4)\n\texpected_2 := []int{4}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := extract_elements([]int{0, 0, 0, 0, 0},5)\n\texpected_3 := []int{0}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to extract specified number of elements from a given list, which follow each other continuously.", "entry_point": "extract_elements", "canonical_solution": null}
{"task_id": "MBGP/899", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether an array can be sorted or not by picking only the corner elements.\n// Examples:\n// >>> check([3,2,1,2,3,4],6)\n// >>> True\n// >>> check([2,1,4,5,1],5)\n// >>> True\n// >>> check([1,2,2,1,2,3],6)\n// >>> True\nfunc check (arr []int, n int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check([]int{3, 2, 1, 2, 3, 4},6)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check([]int{2, 1, 4, 5, 1},5)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check([]int{1, 2, 2, 1, 2, 3},6)\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether an array can be sorted or not by picking only the corner elements.", "entry_point": "check", "canonical_solution": null}
{"task_id": "MBGP/900", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function where a string will start with a specific number.\n// Examples:\n// >>> match_num('5-2345861')\n// >>> True\n// >>> match_num('6-2345861')\n// >>> False\n// >>> match_num('78910')\n// >>> False\nfunc match_num (string0 string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := match_num(\"5-2345861\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := match_num(\"6-2345861\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := match_num(\"78910\")\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function where a string will start with a specific number.", "entry_point": "match_num", "canonical_solution": null}
{"task_id": "MBGP/901", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the smallest multiple of the first n numbers.\n// Examples:\n// >>> smallest_multiple(13)\n// >>> 360360\n// >>> smallest_multiple(2)\n// >>> 2\n// >>> smallest_multiple(1)\n// >>> 1\nfunc smallest_multiple (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := smallest_multiple(13)\n\texpected_1 := 360360\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := smallest_multiple(2)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := smallest_multiple(1)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the smallest multiple of the first n numbers.", "entry_point": "smallest_multiple", "canonical_solution": null}
{"task_id": "MBGP/902", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to combine two dictionaries by adding values for common keys.\n// Examples:\n// >>> add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})\n// >>> ({'b': 400, 'd': 400, 'a': 400, 'c': 300})\n// >>> add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})\n// >>> ({'b': 1300, 'd': 900, 'a': 1000, 'c': 900})\n// >>> add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})\n// >>> ({'b': 1800, 'd': 1800, 'a': 1800})\nfunc add_dict (d1 map[string]int, d2 map[string]int) map[string]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := add_dict(map[string]int{ \"a\": 100, \"b\": 200, \"c\": 300,  },map[string]int{ \"a\": 300, \"b\": 200, \"d\": 400,  })\n\texpected_1 := map[string]int{ \"a\": 400, \"b\": 400, \"c\": 300, \"d\": 400,  }\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := add_dict(map[string]int{ \"a\": 500, \"b\": 700, \"c\": 900,  },map[string]int{ \"a\": 500, \"b\": 600, \"d\": 900,  })\n\texpected_2 := map[string]int{ \"a\": 1000, \"b\": 1300, \"c\": 900, \"d\": 900,  }\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := add_dict(map[string]int{ \"a\": 900, \"b\": 900, \"d\": 900,  },map[string]int{ \"a\": 900, \"b\": 900, \"d\": 900,  })\n\texpected_3 := map[string]int{ \"a\": 1800, \"b\": 1800, \"d\": 1800,  }\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to combine two dictionaries by adding values for common keys.", "entry_point": "add_dict", "canonical_solution": null}
{"task_id": "MBGP/903", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to count the total unset bits from 1 to n.\n// Examples:\n// >>> count_Unset_Bits(2)\n// >>> 1\n// >>> count_Unset_Bits(5)\n// >>> 4\n// >>> count_Unset_Bits(14)\n// >>> 17\nfunc count_Unset_Bits (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_Unset_Bits(2)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_Unset_Bits(5)\n\texpected_2 := 4\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_Unset_Bits(14)\n\texpected_3 := 17\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to count the total unset bits from 1 to n.", "entry_point": "count_Unset_Bits", "canonical_solution": null}
{"task_id": "MBGP/904", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to return true if the given number is even else return false.\n// Examples:\n// >>> even_num(13.5)\n// >>> False\n// >>> even_num(0)\n// >>> True\n// >>> even_num(-9)\n// >>> False\nfunc even_num (x interface{}) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := even_num(13.5)\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := even_num(0)\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := even_num(-9)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to return true if the given number is even else return false.", "entry_point": "even_num", "canonical_solution": null}
{"task_id": "MBGP/905", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of squares of binomial co-efficients.\n// Examples:\n// >>> sum_of_square(4)\n// >>> 70\n// >>> sum_of_square(5)\n// >>> 252\n// >>> sum_of_square(2)\n// >>> 6\nfunc sum_of_square (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_of_square(4)\n\texpected_1 := 70\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_of_square(5)\n\texpected_2 := 252\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_of_square(2)\n\texpected_3 := 6\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of squares of binomial co-efficients.", "entry_point": "sum_of_square", "canonical_solution": null}
{"task_id": "MBGP/906", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to extract year, month and date from a url by using regex.\n// Examples:\n// >>> extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\")\n// >>> [('2016', '09', '02')]\n// >>> extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\")\n// >>> [('2020', '11', '03')]\n// >>> extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\")\n// >>> [('2020', '12', '29')]\nfunc extract_date (url string) [][]string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\")\n\texpected_1 := [][]string{[]string{\"2016\", \"09\", \"02\"}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\")\n\texpected_2 := [][]string{[]string{\"2020\", \"11\", \"03\"}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\")\n\texpected_3 := [][]string{[]string{\"2020\", \"12\", \"29\"}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to extract year, month and date from a url by using regex.", "entry_point": "extract_date", "canonical_solution": null}
{"task_id": "MBGP/907", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to print the first n lucky numbers.\n// Examples:\n// >>> lucky_num(10)\n// >>> [1, 3, 7, 9, 13, 15, 21, 25, 31, 33]\n// >>> lucky_num(5)\n// >>> [1, 3, 7, 9, 13]\n// >>> lucky_num(8)\n// >>> [1, 3, 7, 9, 13, 15, 21, 25]\nfunc lucky_num (n int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := lucky_num(10)\n\texpected_1 := []int{1, 3, 7, 9, 13, 15, 21, 25, 31, 33}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := lucky_num(5)\n\texpected_2 := []int{1, 3, 7, 9, 13}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := lucky_num(8)\n\texpected_3 := []int{1, 3, 7, 9, 13, 15, 21, 25}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to print the first n lucky numbers.", "entry_point": "lucky_num", "canonical_solution": null}
{"task_id": "MBGP/908", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the fixed point in the given array.\n// Examples:\n// >>> find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9)\n// >>> 3\n// >>> find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8)\n// >>> -1\n// >>> find_fixed_point([0, 2, 5, 8, 17],5)\n// >>> 0\nfunc find_fixed_point (arr []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_fixed_point([]int{-10, -1, 0, 3, 10, 11, 30, 50, 100},9)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_fixed_point([]int{1, 2, 3, 4, 5, 6, 7, 8},8)\n\texpected_2 := -1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_fixed_point([]int{0, 2, 5, 8, 17},5)\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the fixed point in the given array.", "entry_point": "find_fixed_point", "canonical_solution": null}
{"task_id": "MBGP/909", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the previous palindrome of a specified number.\n// Examples:\n// >>> previous_palindrome(99)\n// >>> 88\n// >>> previous_palindrome(1221)\n// >>> 1111\n// >>> previous_palindrome(120)\n// >>> 111\nfunc previous_palindrome (num int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := previous_palindrome(99)\n\texpected_1 := 88\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := previous_palindrome(1221)\n\texpected_2 := 1111\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := previous_palindrome(120)\n\texpected_3 := 111\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the previous palindrome of a specified number.", "entry_point": "previous_palindrome", "canonical_solution": null}
{"task_id": "MBGP/910", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to validate a gregorian date.\n// Examples:\n// >>> check_date(11,11,2002)\n// >>> True\n// >>> check_date(13,11,2002)\n// >>> False\n// >>> check_date('11','11','2002')\n// >>> True\nfunc check_date (m interface{}, d interface{}, y interface{}) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_date(11,11,2002)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_date(13,11,2002)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_date(\"11\",\"11\",\"2002\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to validate a gregorian date.", "entry_point": "check_date", "canonical_solution": null}
{"task_id": "MBGP/912", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find ln, m lobb number.\n// Examples:\n// >>> int(lobb_num(5, 3))\n// >>> 35\n// >>> int(lobb_num(3, 2))\n// >>> 5\n// >>> int(lobb_num(4, 2))\n// >>> 20\nfunc lobb_num (n int, m int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := lobb_num(5,3)\n\texpected_1 := 35.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := lobb_num(3,2)\n\texpected_2 := 5.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := lobb_num(4,2)\n\texpected_3 := 20.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find ln, m lobb number.", "entry_point": "lobb_num", "canonical_solution": null}
{"task_id": "MBGP/913", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check for a number at the end of a string.\n// Examples:\n// >>> end_num('abcdef')\n// >>> False\n// >>> end_num('abcdef7')\n// >>> True\n// >>> end_num('abc')\n// >>> False\nfunc end_num (string0 string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := end_num(\"abcdef\")\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := end_num(\"abcdef7\")\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := end_num(\"abc\")\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check for a number at the end of a string.", "entry_point": "end_num", "canonical_solution": null}
{"task_id": "MBGP/914", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the given string is made up of two alternating characters or not.\n// Examples:\n// >>> is_Two_Alter(\"abab\")\n// >>> True\n// >>> is_Two_Alter(\"aaaa\")\n// >>> False\n// >>> is_Two_Alter(\"xyz\")\n// >>> False\nfunc is_Two_Alter (s string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_Two_Alter(\"abab\")\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_Two_Alter(\"aaaa\")\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_Two_Alter(\"xyz\")\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the given string is made up of two alternating characters or not.", "entry_point": "is_Two_Alter", "canonical_solution": null}
{"task_id": "MBGP/915", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to rearrange positive and negative numbers in a given array using lambda function.\n// Examples:\n// >>> rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])\n// >>> [2, 5, 7, 8, 9, -10, -3, -1]\n// >>> rearrange_numbs([10,15,14,13,-18,12,-20])\n// >>> [10, 12, 13, 14, 15, -20, -18]\n// >>> rearrange_numbs([-20,20,-10,10,-30,30])\n// >>> [10, 20, 30, -30, -20, -10]\nfunc rearrange_numbs (array_nums []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := rearrange_numbs([]int{-1, 2, -3, 5, 7, 8, 9, -10})\n\texpected_1 := []int{2, 5, 7, 8, 9, -10, -3, -1}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := rearrange_numbs([]int{10, 15, 14, 13, -18, 12, -20})\n\texpected_2 := []int{10, 12, 13, 14, 15, -20, -18}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := rearrange_numbs([]int{-20, 20, -10, 10, -30, 30})\n\texpected_3 := []int{10, 20, 30, -30, -20, -10}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to rearrange positive and negative numbers in a given array using lambda function.", "entry_point": "rearrange_numbs", "canonical_solution": null}
{"task_id": "MBGP/916", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find if there is a triplet in the array whose sum is equal to a given value.\n// Examples:\n// >>> find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22)\n// >>> (4, 10, 8)\n// >>> find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24)\n// >>> (12, 3, 9)\n// >>> find_triplet_array([1, 2, 3, 4, 5], 5, 9)\n// >>> (1, 3, 5)\nfunc find_triplet_array (A []int, arr_size int, sum int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_triplet_array([]int{1, 4, 45, 6, 10, 8},6,22)\n\texpected_1 := []int{4, 10, 8}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_triplet_array([]int{12, 3, 5, 2, 6, 9},6,24)\n\texpected_2 := []int{12, 3, 9}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_triplet_array([]int{1, 2, 3, 4, 5},5,9)\n\texpected_3 := []int{1, 3, 5}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.", "entry_point": "find_triplet_array", "canonical_solution": null}
{"task_id": "MBGP/917", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the sequences of one upper case letter followed by lower case letters.\n// Examples:\n// >>> text_uppercase_lowercase(\"AaBbGg\")\n// >>> ('Found a match!')\n// >>> text_uppercase_lowercase(\"aA\")\n// >>> ('Not matched!')\n// >>> text_uppercase_lowercase(\"PYTHON\")\n// >>> ('Not matched!')\nfunc text_uppercase_lowercase (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := text_uppercase_lowercase(\"AaBbGg\")\n\texpected_1 := \"Found a match!\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := text_uppercase_lowercase(\"aA\")\n\texpected_2 := \"Not matched!\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := text_uppercase_lowercase(\"PYTHON\")\n\texpected_3 := \"Not matched!\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the sequences of one upper case letter followed by lower case letters.", "entry_point": "text_uppercase_lowercase", "canonical_solution": null}
{"task_id": "MBGP/918", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count coin change.\n// Examples:\n// >>> coin_change([1, 2, 3],3,4)\n// >>> 4\n// >>> coin_change([4,5,6,7,8,9],6,9)\n// >>> 2\n// >>> coin_change([4,5,6,7,8,9],6,4)\n// >>> 1\nfunc coin_change (S []int, m int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := coin_change([]int{1, 2, 3},3,4)\n\texpected_1 := 4\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := coin_change([]int{4, 5, 6, 7, 8, 9},6,9)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := coin_change([]int{4, 5, 6, 7, 8, 9},6,4)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count coin change.", "entry_point": "coin_change", "canonical_solution": null}
{"task_id": "MBGP/919", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to multiply all items in the list.\n// Examples:\n// >>> multiply_list([1,-2,3])\n// >>> -6\n// >>> multiply_list([1,2,3,4])\n// >>> 24\n// >>> multiply_list([3,1,2,3])\n// >>> 18\nfunc multiply_list (items []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := multiply_list([]int{1, -2, 3})\n\texpected_1 := -6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := multiply_list([]int{1, 2, 3, 4})\n\texpected_2 := 24\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := multiply_list([]int{3, 1, 2, 3})\n\texpected_3 := 18\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to multiply all items in the list.", "entry_point": "multiply_list", "canonical_solution": null}
{"task_id": "MBGP/920", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove all tuples with all nil values in the given tuple list.\n// Examples:\n// >>> remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] )\n// >>> '[(None, 2), (3, 4), (12, 3)]'\n// >>> remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] )\n// >>> '[(3, 6), (17, 3), (None, 1)]'\n// >>> remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] )\n// >>> '[(1, 2), (2, None), (3, None), (24, 3)]'\nfunc remove_tuple (test_list [][]interface{}) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_tuple([][]interface{}{[]interface{}{nil, 2}, []interface{}{nil, nil}, []interface{}{3, 4}, []interface{}{12, 3}, []interface{}{nil}})\n\texpected_1 := \"[(None, 2), (3, 4), (12, 3)]\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_tuple([][]interface{}{[]interface{}{nil, nil}, []interface{}{nil, nil}, []interface{}{3, 6}, []interface{}{17, 3}, []interface{}{nil, 1}})\n\texpected_2 := \"[(3, 6), (17, 3), (None, 1)]\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_tuple([][]interface{}{[]interface{}{1, 2}, []interface{}{2, nil}, []interface{}{3, nil}, []interface{}{24, 3}, []interface{}{nil, nil}})\n\texpected_3 := \"[(1, 2), (2, None), (3, None), (24, 3)]\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove all tuples with all nil values in the given tuple list.", "entry_point": "remove_tuple", "canonical_solution": null}
{"task_id": "MBGP/921", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to perform chunking of tuples each of size n.\n// Examples:\n// >>> chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3)\n// >>> [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\n// >>> chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2)\n// >>> [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\n// >>> chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4)\n// >>> [(11, 14, 16, 17), (19, 21, 22, 25)]\nfunc chunk_tuples (test_tup []int, N int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := chunk_tuples([]int{10, 4, 5, 6, 7, 6, 8, 3, 4},3)\n\texpected_1 := [][]int{[]int{10, 4, 5}, []int{6, 7, 6}, []int{8, 3, 4}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := chunk_tuples([]int{1, 2, 3, 4, 5, 6, 7, 8, 9},2)\n\texpected_2 := [][]int{[]int{1, 2}, []int{3, 4}, []int{5, 6}, []int{7, 8}, []int{9}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := chunk_tuples([]int{11, 14, 16, 17, 19, 21, 22, 25},4)\n\texpected_3 := [][]int{[]int{11, 14, 16, 17}, []int{19, 21, 22, 25}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to perform chunking of tuples each of size n.", "entry_point": "chunk_tuples", "canonical_solution": null}
{"task_id": "MBGP/922", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find a pair with the highest product from a given array of integers.\n// Examples:\n// >>> max_product([1, 2, 3, 4, 7, 0, 8, 4])\n// >>> (7, 8)\n// >>> max_product([0, -1, -2, -4, 5, 0, -6])\n// >>> (-4, -6)\n// >>> max_product([1, 3, 5, 6, 8, 9])\n// >>> (8,9)\nfunc max_product (arr []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_product([]int{1, 2, 3, 4, 7, 0, 8, 4})\n\texpected_1 := []int{7, 8}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_product([]int{0, -1, -2, -4, 5, 0, -6})\n\texpected_2 := []int{-4, -6}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_product([]int{1, 3, 5, 6, 8, 9})\n\texpected_3 := []int{8, 9}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find a pair with the highest product from a given array of integers.", "entry_point": "max_product", "canonical_solution": null}
{"task_id": "MBGP/923", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n// Examples:\n// >>> super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7)\n// >>> 9\n// >>> super_seq(\"feek\", \"eke\", 4, 3)\n// >>> 5\n// >>> super_seq(\"PARRT\", \"RTA\", 5, 3)\n// >>> 6\nfunc super_seq (X string, Y string, m int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := super_seq(\"AGGTAB\",\"GXTXAYB\",6,7)\n\texpected_1 := 9\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := super_seq(\"feek\",\"eke\",4,3)\n\texpected_2 := 5\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := super_seq(\"PARRT\",\"RTA\",5,3)\n\texpected_3 := 6\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.", "entry_point": "super_seq", "canonical_solution": null}
{"task_id": "MBGP/924", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find maximum of two numbers.\n// Examples:\n// >>> max_of_two(10,20)\n// >>> 20\n// >>> max_of_two(19,15)\n// >>> 19\n// >>> max_of_two(-10,-20)\n// >>> -10\nfunc max_of_two (x int, y int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_of_two(10,20)\n\texpected_1 := 20\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_of_two(19,15)\n\texpected_2 := 19\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_of_two(-10,-20)\n\texpected_3 := -10\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find maximum of two numbers.", "entry_point": "max_of_two", "canonical_solution": null}
{"task_id": "MBGP/925", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to calculate the product of all the numbers of a given tuple.\n// Examples:\n// >>> mutiple_tuple((4, 3, 2, 2, -1, 18))\n// >>> -864\n// >>> mutiple_tuple((1,2,3))\n// >>> 6\n// >>> mutiple_tuple((-2,-4,-6))\n// >>> -48\nfunc mutiple_tuple (nums []int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := mutiple_tuple([]int{4, 3, 2, 2, -1, 18})\n\texpected_1 := -864\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := mutiple_tuple([]int{1, 2, 3})\n\texpected_2 := 6\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := mutiple_tuple([]int{-2, -4, -6})\n\texpected_3 := -48\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to calculate the product of all the numbers of a given tuple.", "entry_point": "mutiple_tuple", "canonical_solution": null}
{"task_id": "MBGP/926", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find n-th rencontres number.\n// Examples:\n// >>> rencontres_number(7, 2)\n// >>> 924\n// >>> rencontres_number(3, 0)\n// >>> 2\n// >>> rencontres_number(3, 1)\n// >>> 3\nfunc rencontres_number (n int, m int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := rencontres_number(7,2)\n\texpected_1 := 924\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := rencontres_number(3,0)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := rencontres_number(3,1)\n\texpected_3 := 3\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find n-th rencontres number.", "entry_point": "rencontres_number", "canonical_solution": null}
{"task_id": "MBGP/928", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n// Examples:\n// >>> change_date_format('2026-01-02')\n// >>> '02-01-2026'\n// >>> change_date_format('2021-01-04')\n// >>> '04-01-2021'\n// >>> change_date_format('2030-06-06')\n// >>> '06-06-2030'\nfunc change_date_format (dt string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := change_date_format(\"2026-01-02\")\n\texpected_1 := \"02-01-2026\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := change_date_format(\"2021-01-04\")\n\texpected_2 := \"04-01-2021\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := change_date_format(\"2030-06-06\")\n\texpected_3 := \"06-06-2030\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "entry_point": "change_date_format", "canonical_solution": null}
{"task_id": "MBGP/929", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count repeated items of a tuple.\n// Examples:\n// >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)\n// >>> 3\n// >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)\n// >>> 2\n// >>> count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)\n// >>> 4\nfunc count_tuplex (tuplex []int, value int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_tuplex([]int{2, 4, 5, 6, 2, 3, 4, 4, 7},4)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_tuplex([]int{2, 4, 5, 6, 2, 3, 4, 4, 7},2)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_tuplex([]int{2, 4, 7, 7, 7, 3, 4, 4, 7},7)\n\texpected_3 := 4\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count repeated items of a tuple.", "entry_point": "count_tuplex", "canonical_solution": null}
{"task_id": "MBGP/930", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function that matches a string that has an a followed by zero or more b's by using regex.\n// Examples:\n// >>> text_match(\"msb\")\n// >>> 'Not matched!'\n// >>> text_match(\"a0c\")\n// >>> 'Found a match!'\n// >>> text_match(\"abbc\")\n// >>> 'Found a match!'\nfunc text_match (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := text_match(\"msb\")\n\texpected_1 := \"Not matched!\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := text_match(\"a0c\")\n\texpected_2 := \"Found a match!\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := text_match(\"abbc\")\n\texpected_3 := \"Found a match!\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function that matches a string that has an a followed by zero or more b's by using regex.", "entry_point": "text_match", "canonical_solution": null}
{"task_id": "MBGP/931", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n// Examples:\n// >>> sum_series(7)\n// >>> 784\n// >>> sum_series(5)\n// >>> 225\n// >>> sum_series(15)\n// >>> 14400\nfunc sum_series (number int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_series(7)\n\texpected_1 := 784.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_series(5)\n\texpected_2 := 225.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_series(15)\n\texpected_3 := 14400.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.", "entry_point": "sum_series", "canonical_solution": null}
{"task_id": "MBGP/932", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove duplicate words from a given list of strings.\n// Examples:\n// >>> remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])\n// >>> ['Python', 'Exercises', 'Practice', 'Solution']\n// >>> remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])\n// >>> ['Python', 'Exercises', 'Practice', 'Solution', 'Java']\n// >>> remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])\n// >>> ['Python', 'Exercises', 'Practice', 'Solution','C++','C']\nfunc remove_duplic_list (l []string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_duplic_list([]string{\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"})\n\texpected_1 := []string{\"Python\", \"Exercises\", \"Practice\", \"Solution\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_duplic_list([]string{\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\", \"Java\"})\n\texpected_2 := []string{\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Java\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_duplic_list([]string{\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\", \"C++\", \"C\", \"C++\"})\n\texpected_3 := []string{\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"C++\", \"C\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove duplicate words from a given list of strings.", "entry_point": "remove_duplic_list", "canonical_solution": null}
{"task_id": "MBGP/933", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert camel case string to snake case string by using regex.\n// Examples:\n// >>> camel_to_snake('GoogleAssistant')\n// >>> 'google_assistant'\n// >>> camel_to_snake('ChromeCast')\n// >>> 'chrome_cast'\n// >>> camel_to_snake('QuadCore')\n// >>> 'quad_core'\nfunc camel_to_snake (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := camel_to_snake(\"GoogleAssistant\")\n\texpected_1 := \"google_assistant\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := camel_to_snake(\"ChromeCast\")\n\texpected_2 := \"chrome_cast\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := camel_to_snake(\"QuadCore\")\n\texpected_3 := \"quad_core\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert camel case string to snake case string by using regex.", "entry_point": "camel_to_snake", "canonical_solution": null}
{"task_id": "MBGP/934", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the nth delannoy number.\n// Examples:\n// >>> dealnnoy_num(3, 4)\n// >>> 129\n// >>> dealnnoy_num(3, 3)\n// >>> 63\n// >>> dealnnoy_num(4, 5)\n// >>> 681\nfunc dealnnoy_num (n int, m int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := dealnnoy_num(3,4)\n\texpected_1 := 129\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := dealnnoy_num(3,3)\n\texpected_2 := 63\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := dealnnoy_num(4,5)\n\texpected_3 := 681\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the nth delannoy number.", "entry_point": "dealnnoy_num", "canonical_solution": null}
{"task_id": "MBGP/935", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\n// Examples:\n// >>> series_sum(6)\n// >>> 91\n// >>> series_sum(7)\n// >>> 140\n// >>> series_sum(12)\n// >>> 650\nfunc series_sum (number int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := series_sum(6)\n\texpected_1 := 91.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := series_sum(7)\n\texpected_2 := 140.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := series_sum(12)\n\texpected_3 := 650.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.", "entry_point": "series_sum", "canonical_solution": null}
{"task_id": "MBGP/936", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to re-arrange the given tuples based on the given ordered list.\n// Examples:\n// >>> re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3])\n// >>> [(1, 9), (4, 3), (2, 10), (3, 2)]\n// >>> re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3])\n// >>> [(3, 11), (4, 3), (2, 10), (3, 11)]\n// >>> re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6])\n// >>> [(2, 4), (5, 7), (3, 8), (6, 3)]\nfunc re_arrange_tuples (test_list [][]int, ord_list []int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := re_arrange_tuples([][]int{[]int{4, 3}, []int{1, 9}, []int{2, 10}, []int{3, 2}},[]int{1, 4, 2, 3})\n\texpected_1 := [][]int{[]int{1, 9}, []int{4, 3}, []int{2, 10}, []int{3, 2}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := re_arrange_tuples([][]int{[]int{5, 4}, []int{2, 10}, []int{3, 11}, []int{4, 3}},[]int{3, 4, 2, 3})\n\texpected_2 := [][]int{[]int{3, 11}, []int{4, 3}, []int{2, 10}, []int{3, 11}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := re_arrange_tuples([][]int{[]int{6, 3}, []int{3, 8}, []int{5, 7}, []int{2, 4}},[]int{2, 5, 3, 6})\n\texpected_3 := [][]int{[]int{2, 4}, []int{5, 7}, []int{3, 8}, []int{6, 3}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to re-arrange the given tuples based on the given ordered list.", "entry_point": "re_arrange_tuples", "canonical_solution": null}
{"task_id": "MBGP/937", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count the most common character in a given string.\n// Examples:\n// >>> max_char(\"hello world\")\n// >>> ('l')\n// >>> max_char(\"hello \")\n// >>> ('l')\n// >>> max_char(\"python pr\")\n// >>> ('p')\nfunc max_char (str1 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_char(\"hello world\")\n\texpected_1 := \"l\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_char(\"hello \")\n\texpected_2 := \"l\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_char(\"python pr\")\n\texpected_3 := \"p\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count the most common character in a given string.", "entry_point": "max_char", "canonical_solution": null}
{"task_id": "MBGP/938", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find three closest elements from three sorted arrays.\n// Examples:\n// >>> find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2)\n// >>> (10, 15, 10)\n// >>> find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5)\n// >>> (24, 22, 23)\n// >>> find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2)\n// >>> (11, 16, 11)\nfunc find_closet (A []int, B []int, C []int, p int, q int, r int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := find_closet([]int{1, 4, 10},[]int{2, 15, 20},[]int{10, 12},3,3,2)\n\texpected_1 := []int{10, 15, 10}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := find_closet([]int{20, 24, 100},[]int{2, 19, 22, 79, 800},[]int{10, 12, 23, 24, 119},3,5,5)\n\texpected_2 := []int{24, 22, 23}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := find_closet([]int{2, 5, 11},[]int{3, 16, 21},[]int{11, 13},3,3,2)\n\texpected_3 := []int{11, 16, 11}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find three closest elements from three sorted arrays.", "entry_point": "find_closet", "canonical_solution": null}
{"task_id": "MBGP/939", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort a list of dictionaries using lambda function.\n// Examples:\n// >>> sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])\n// >>> [{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\n// >>> sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\n// >>> ([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\n// >>> sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])\n// >>> ([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])\nfunc sorted_models (models []map[string]interface{}) []map[string]interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sorted_models([]map[string]interface{}{map[string]interface{}{ \"make\": \"Nokia\", \"model\": 216, \"color\": \"Black\",  }, map[string]interface{}{ \"make\": \"Mi Max\", \"model\": 2, \"color\": \"Gold\",  }, map[string]interface{}{ \"make\": \"Samsung\", \"model\": 7, \"color\": \"Blue\",  }})\n\texpected_1 := []map[string]interface{}{map[string]interface{}{ \"make\": \"Nokia\", \"model\": 216, \"color\": \"Black\",  }, map[string]interface{}{ \"make\": \"Samsung\", \"model\": 7, \"color\": \"Blue\",  }, map[string]interface{}{ \"make\": \"Mi Max\", \"model\": 2, \"color\": \"Gold\",  }}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sorted_models([]map[string]interface{}{map[string]interface{}{ \"make\": \"Vivo\", \"model\": 20, \"color\": \"Blue\",  }, map[string]interface{}{ \"make\": \"oppo\", \"model\": 17, \"color\": \"Gold\",  }, map[string]interface{}{ \"make\": \"Apple\", \"model\": 11, \"color\": \"red\",  }})\n\texpected_2 := []map[string]interface{}{map[string]interface{}{ \"make\": \"Vivo\", \"model\": 20, \"color\": \"Blue\",  }, map[string]interface{}{ \"make\": \"oppo\", \"model\": 17, \"color\": \"Gold\",  }, map[string]interface{}{ \"make\": \"Apple\", \"model\": 11, \"color\": \"red\",  }}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sorted_models([]map[string]interface{}{map[string]interface{}{ \"make\": \"micromax\", \"model\": 40, \"color\": \"grey\",  }, map[string]interface{}{ \"make\": \"poco\", \"model\": 60, \"color\": \"blue\",  }})\n\texpected_3 := []map[string]interface{}{map[string]interface{}{ \"make\": \"poco\", \"model\": 60, \"color\": \"blue\",  }, map[string]interface{}{ \"make\": \"micromax\", \"model\": 40, \"color\": \"grey\",  }}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort a list of dictionaries using lambda function.", "entry_point": "sorted_models", "canonical_solution": null}
{"task_id": "MBGP/940", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort the given array by using heap sort.\n// Examples:\n// >>> heap_sort([12, 2, 4, 5, 2, 3])\n// >>> [2, 2, 3, 4, 5, 12]\n// >>> heap_sort([32, 14, 5, 6, 7, 19])\n// >>> [5, 6, 7, 14, 19, 32]\n// >>> heap_sort([21, 15, 29, 78, 65])\n// >>> [15, 21, 29, 65, 78]\nfunc heap_sort (arr []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := heap_sort([]int{12, 2, 4, 5, 2, 3})\n\texpected_1 := []int{2, 2, 3, 4, 5, 12}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := heap_sort([]int{32, 14, 5, 6, 7, 19})\n\texpected_2 := []int{5, 6, 7, 14, 19, 32}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := heap_sort([]int{21, 15, 29, 78, 65})\n\texpected_3 := []int{15, 21, 29, 65, 78}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort the given array by using heap sort.", "entry_point": "heap_sort", "canonical_solution": null}
{"task_id": "MBGP/941", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to count the elements in a list until an element is a tuple.\n// Examples:\n// >>> count_elim([10,20,30,(10,20),40])\n// >>> 3\n// >>> count_elim([10,(20,30),(10,20),40])\n// >>> 1\n// >>> count_elim([(10,(20,30,(10,20),40))])\n// >>> 0\nfunc count_elim (num []interface{}) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := count_elim([]interface{}{10, 20, 30, []interface{}{10, 20}, 40})\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := count_elim([]interface{}{10, []interface{}{20, 30}, []interface{}{10, 20}, 40})\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := count_elim([]interface{}{[]interface{}{10, []interface{}{20, 30, []interface{}{10, 20}, 40}}})\n\texpected_3 := 0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to count the elements in a list until an element is a tuple.", "entry_point": "count_elim", "canonical_solution": null}
{"task_id": "MBGP/942", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to check if any list element is present in the given list.\n// Examples:\n// >>> check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11])\n// >>> True\n// >>> check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9])\n// >>> True\n// >>> check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6])\n// >>> False\nfunc check_element (test_tup []int, check_list []int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check_element([]int{4, 5, 7, 9, 3},[]int{6, 7, 10, 11})\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check_element([]int{1, 2, 3, 4},[]int{4, 6, 7, 8, 9})\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check_element([]int{3, 2, 1, 4, 5},[]int{9, 8, 7, 6})\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to check if any list element is present in the given list.", "entry_point": "check_element", "canonical_solution": null}
{"task_id": "MBGP/944", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to separate and print the numbers and their position of a given string.\n// Examples:\n// >>> num_position(\"there are 70 flats in this apartment\")\n// >>> 10\n// >>> num_position(\"every adult have 32 teeth\")\n// >>> 17\n// >>> num_position(\"isha has 79 chocolates in her bag\")\n// >>> 9\nfunc num_position (text string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := num_position(\"there are 70 flats in this apartment\")\n\texpected_1 := 10\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := num_position(\"every adult have 32 teeth\")\n\texpected_2 := 17\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := num_position(\"isha has 79 chocolates in her bag\")\n\texpected_3 := 9\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to separate and print the numbers and their position of a given string.", "entry_point": "num_position", "canonical_solution": null}
{"task_id": "MBGP/946", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the most common elements and their counts of a specified text.\n// Examples:\n// >>> most_common_elem('lkseropewdssafsdfafkpwe',3)\n// >>> [('s', 4), ('e', 3), ('f', 3)]\n// >>> most_common_elem('lkseropewdssafsdfafkpwe',2)\n// >>> [('s', 4), ('e', 3)]\n// >>> most_common_elem('lkseropewdssafsdfafkpwe',7)\n// >>> [('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]\nfunc most_common_elem (s string, a int) [][]interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := most_common_elem(\"lkseropewdssafsdfafkpwe\",3)\n\texpected_1 := [][]interface{}{[]interface{}{\"s\", 4}, []interface{}{\"e\", 3}, []interface{}{\"f\", 3}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := most_common_elem(\"lkseropewdssafsdfafkpwe\",2)\n\texpected_2 := [][]interface{}{[]interface{}{\"s\", 4}, []interface{}{\"e\", 3}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := most_common_elem(\"lkseropewdssafsdfafkpwe\",7)\n\texpected_3 := [][]interface{}{[]interface{}{\"s\", 4}, []interface{}{\"e\", 3}, []interface{}{\"f\", 3}, []interface{}{\"k\", 2}, []interface{}{\"p\", 2}, []interface{}{\"w\", 2}, []interface{}{\"d\", 2}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the most common elements and their counts of a specified text.", "entry_point": "most_common_elem", "canonical_solution": null}
{"task_id": "MBGP/947", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the length of the shortest word.\n// Examples:\n// >>> len_log([\"win\",\"lose\",\"great\"])\n// >>> 3\n// >>> len_log([\"a\",\"ab\",\"abc\"])\n// >>> 1\n// >>> len_log([\"12\",\"12\",\"1234\"])\n// >>> 2\nfunc len_log (list1 []string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := len_log([]string{\"win\", \"lose\", \"great\"})\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := len_log([]string{\"a\", \"ab\", \"abc\"})\n\texpected_2 := 1\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := len_log([]string{\"12\", \"12\", \"1234\"})\n\texpected_3 := 2\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the length of the shortest word.", "entry_point": "len_log", "canonical_solution": null}
{"task_id": "MBGP/948", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to get an item of a tuple.\n// Examples:\n// >>> get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)\n// >>> ('e')\n// >>> get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)\n// >>> ('u')\n// >>> get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)\n// >>> ('r')\nfunc get_item (tup1 []interface{}, index int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_item([]interface{}{\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"},3)\n\texpected_1 := \"e\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_item([]interface{}{\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"},-4)\n\texpected_2 := \"u\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_item([]interface{}{\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"},-3)\n\texpected_3 := \"r\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to get an item of a tuple.", "entry_point": "get_item", "canonical_solution": null}
{"task_id": "MBGP/949", "prompt": "package main\n\nimport (\n\t\"sort\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to sort the given tuple list basis the total digits in tuple.\n// Examples:\n// >>> sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] )\n// >>> '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\n// >>> sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] )\n// >>> '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\n// >>> sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] )\n// >>> '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'\nfunc sort_list (test_list [][]int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sort_list([][]int{[]int{3, 4, 6, 723}, []int{1, 2}, []int{12345}, []int{134, 234, 34}})\n\texpected_1 := \"[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sort_list([][]int{[]int{3, 4, 8}, []int{1, 2}, []int{1234335}, []int{1345, 234, 334}})\n\texpected_2 := \"[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sort_list([][]int{[]int{34, 4, 61, 723}, []int{1, 2}, []int{145}, []int{134, 23}})\n\texpected_3 := \"[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to sort the given tuple list basis the total digits in tuple.", "entry_point": "sort_list", "canonical_solution": null}
{"task_id": "MBGP/950", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to display sign of the chinese zodiac for given year.\n// Examples:\n// >>> chinese_zodiac(1997)\n// >>> ('Ox')\n// >>> chinese_zodiac(1998)\n// >>> ('Tiger')\n// >>> chinese_zodiac(1994)\n// >>> ('Dog')\nfunc chinese_zodiac (year int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := chinese_zodiac(1997)\n\texpected_1 := \"Ox\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := chinese_zodiac(1998)\n\texpected_2 := \"Tiger\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := chinese_zodiac(1994)\n\texpected_3 := \"Dog\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to display sign of the chinese zodiac for given year.", "entry_point": "chinese_zodiac", "canonical_solution": null}
{"task_id": "MBGP/951", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the maximum of similar indices in two lists of tuples.\n// Examples:\n// >>> max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)])\n// >>> [(5, 4), (8, 10), (8, 14)]\n// >>> max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)])\n// >>> [(6, 5), (9, 11), (9, 15)]\n// >>> max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)])\n// >>> [(7, 6), (10, 12), (10, 16)]\nfunc max_similar_indices (test_list1 [][]int, test_list2 [][]int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := max_similar_indices([][]int{[]int{2, 4}, []int{6, 7}, []int{5, 1}},[][]int{[]int{5, 4}, []int{8, 10}, []int{8, 14}})\n\texpected_1 := [][]int{[]int{5, 4}, []int{8, 10}, []int{8, 14}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := max_similar_indices([][]int{[]int{3, 5}, []int{7, 8}, []int{6, 2}},[][]int{[]int{6, 5}, []int{9, 11}, []int{9, 15}})\n\texpected_2 := [][]int{[]int{6, 5}, []int{9, 11}, []int{9, 15}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := max_similar_indices([][]int{[]int{4, 6}, []int{8, 9}, []int{7, 3}},[][]int{[]int{7, 6}, []int{10, 12}, []int{10, 16}})\n\texpected_3 := [][]int{[]int{7, 6}, []int{10, 12}, []int{10, 16}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the maximum of similar indices in two lists of tuples.", "entry_point": "max_similar_indices", "canonical_solution": null}
{"task_id": "MBGP/952", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to compute the value of ncr mod p.\n// Examples:\n// >>> nCr_mod_p(10, 2, 13)\n// >>> 6\n// >>> nCr_mod_p(11, 3, 14)\n// >>> 11\n// >>> nCr_mod_p(18, 14, 19)\n// >>> 1\nfunc nCr_mod_p (n int, r int, p int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := nCr_mod_p(10,2,13)\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := nCr_mod_p(11,3,14)\n\texpected_2 := 11\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := nCr_mod_p(18,14,19)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to compute the value of ncr mod p.", "entry_point": "nCr_mod_p", "canonical_solution": null}
{"task_id": "MBGP/953", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the minimun number of subsets with distinct elements.\n// Examples:\n// >>> subset([1, 2, 3, 4],4)\n// >>> 1\n// >>> subset([5, 6, 9, 3, 4, 3, 4],7)\n// >>> 2\n// >>> subset([1, 2, 3 ],3)\n// >>> 1\nfunc subset (ar []int, n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := subset([]int{1, 2, 3, 4},4)\n\texpected_1 := 1\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := subset([]int{5, 6, 9, 3, 4, 3, 4},7)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := subset([]int{1, 2, 3},3)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the minimun number of subsets with distinct elements.", "entry_point": "subset", "canonical_solution": null}
{"task_id": "MBGP/954", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function that gives profit amount if the given amount has profit else return nil.\n// Examples:\n// >>> profit_amount(1500,1200)\n// >>> 300\n// >>> profit_amount(100,200)\n// >>> None\n// >>> profit_amount(2000,5000)\n// >>> None\nfunc profit_amount (actual_cost int, sale_amount int) interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := profit_amount(1500,1200)\n\texpected_1 := 300\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := profit_amount(100,200)\n\texpected_2 := nil\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := profit_amount(2000,5000)\n\texpected_3 := nil\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function that gives profit amount if the given amount has profit else return nil.", "entry_point": "profit_amount", "canonical_solution": null}
{"task_id": "MBGP/955", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find out, if the given number is abundant.\n// Examples:\n// >>> is_abundant(12)\n// >>> True\n// >>> is_abundant(13)\n// >>> False\n// >>> is_abundant(9)\n// >>> False\nfunc is_abundant (n int) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := is_abundant(12)\n\texpected_1 := true\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := is_abundant(13)\n\texpected_2 := false\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := is_abundant(9)\n\texpected_3 := false\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find out, if the given number is abundant.", "entry_point": "is_abundant", "canonical_solution": null}
{"task_id": "MBGP/956", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to split the given string at uppercase letters by using regex.\n// Examples:\n// >>> split_list(\"LearnToBuildAnythingWithGoogle\")\n// >>> ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\n// >>> split_list(\"ApmlifyingTheBlack+DeveloperCommunity\")\n// >>> ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\n// >>> split_list(\"UpdateInTheGoEcoSystem\")\n// >>> ['Update', 'In', 'The', 'Go', 'Eco', 'System']\nfunc split_list (text string) []string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := split_list(\"LearnToBuildAnythingWithGoogle\")\n\texpected_1 := []string{\"Learn\", \"To\", \"Build\", \"Anything\", \"With\", \"Google\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := split_list(\"ApmlifyingTheBlack+DeveloperCommunity\")\n\texpected_2 := []string{\"Apmlifying\", \"The\", \"Black+\", \"Developer\", \"Community\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := split_list(\"UpdateInTheGoEcoSystem\")\n\texpected_3 := []string{\"Update\", \"In\", \"The\", \"Go\", \"Eco\", \"System\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to split the given string at uppercase letters by using regex.", "entry_point": "split_list", "canonical_solution": null}
{"task_id": "MBGP/957", "prompt": "package main\n\nimport (\n\t\"math\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to get the position of rightmost set bit.\n// Examples:\n// >>> get_First_Set_Bit_Pos(12)\n// >>> 3\n// >>> get_First_Set_Bit_Pos(18)\n// >>> 2\n// >>> get_First_Set_Bit_Pos(16)\n// >>> 5\nfunc get_First_Set_Bit_Pos (n int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_First_Set_Bit_Pos(12)\n\texpected_1 := 3.0\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_First_Set_Bit_Pos(18)\n\texpected_2 := 2.0\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_First_Set_Bit_Pos(16)\n\texpected_3 := 5.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to get the position of rightmost set bit.", "entry_point": "get_First_Set_Bit_Pos", "canonical_solution": null}
{"task_id": "MBGP/958", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert an integer into a roman numeral.\n// Examples:\n// >>> int_to_roman(1)\n// >>> (\"I\")\n// >>> int_to_roman(50)\n// >>> (\"L\")\n// >>> int_to_roman(4)\n// >>> (\"IV\")\nfunc int_to_roman (num int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := int_to_roman(1)\n\texpected_1 := \"I\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := int_to_roman(50)\n\texpected_2 := \"L\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := int_to_roman(4)\n\texpected_3 := \"IV\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert an integer into a roman numeral.", "entry_point": "int_to_roman", "canonical_solution": null}
{"task_id": "MBGP/959", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the average of a list.\n// Examples:\n// >>> Average([15, 9, 55, 41, 35, 20, 62, 49])\n// >>> 35.75\n// >>> Average([4, 5, 1, 2, 9, 7, 10, 8])\n// >>> 5.75\n// >>> Average([1,2,3])\n// >>> 2\nfunc Average (lst []int) float64 {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := Average([]int{15, 9, 55, 41, 35, 20, 62, 49})\n\texpected_1 := 35.75\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := Average([]int{4, 5, 1, 2, 9, 7, 10, 8})\n\texpected_2 := 5.75\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := Average([]int{1, 2, 3})\n\texpected_3 := 2.0\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the average of a list.", "entry_point": "Average", "canonical_solution": null}
{"task_id": "MBGP/960", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to solve tiling problem.\n// Examples:\n// >>> get_noOfways(4)\n// >>> 3\n// >>> get_noOfways(3)\n// >>> 2\n// >>> get_noOfways(5)\n// >>> 5\nfunc get_noOfways (n int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := get_noOfways(4)\n\texpected_1 := 3\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := get_noOfways(3)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := get_noOfways(5)\n\texpected_3 := 5\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to solve tiling problem.", "entry_point": "get_noOfways", "canonical_solution": null}
{"task_id": "MBGP/961", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert a roman numeral to an integer.\n// Examples:\n// >>> roman_to_int('MMMCMLXXXVI')\n// >>> 3986\n// >>> roman_to_int('MMMM')\n// >>> 4000\n// >>> roman_to_int('C')\n// >>> 100\nfunc roman_to_int (s string) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := roman_to_int(\"MMMCMLXXXVI\")\n\texpected_1 := 3986\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := roman_to_int(\"MMMM\")\n\texpected_2 := 4000\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := roman_to_int(\"C\")\n\texpected_3 := 100\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert a roman numeral to an integer.", "entry_point": "roman_to_int", "canonical_solution": null}
{"task_id": "MBGP/962", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find the sum of all even natural numbers within the range l and r.\n// Examples:\n// >>> sum_Even(2,5)\n// >>> 6\n// >>> sum_Even(3,8)\n// >>> 18\n// >>> sum_Even(4,6)\n// >>> 10\nfunc sum_Even (l int, r int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := sum_Even(2,5)\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := sum_Even(3,8)\n\texpected_2 := 18\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := sum_Even(4,6)\n\texpected_3 := 10\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find the sum of all even natural numbers within the range l and r.", "entry_point": "sum_Even", "canonical_solution": null}
{"task_id": "MBGP/963", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to calculate the discriminant value.\n// Examples:\n// >>> discriminant_value(4,8,2)\n// >>> (\"Two solutions\",32)\n// >>> discriminant_value(5,7,9)\n// >>> (\"no real solution\",-131)\n// >>> discriminant_value(0,0,9)\n// >>> (\"one solution\",0)\nfunc discriminant_value (x int, y int, z int) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := discriminant_value(4,8,2)\n\texpected_1 := []interface{}{\"Two solutions\", 32}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := discriminant_value(5,7,9)\n\texpected_2 := []interface{}{\"no real solution\", -131}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := discriminant_value(0,0,9)\n\texpected_3 := []interface{}{\"one solution\", 0}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to calculate the discriminant value.", "entry_point": "discriminant_value", "canonical_solution": null}
{"task_id": "MBGP/964", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to check whether the length of the word is even or not.\n// Examples:\n// >>> word_len(\"program\")\n// >>> False\n// >>> word_len(\"solution\")\n// >>> True\n// >>> word_len(\"data\")\n// >>> True\nfunc word_len (s string) bool {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := word_len(\"program\")\n\texpected_1 := false\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := word_len(\"solution\")\n\texpected_2 := true\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := word_len(\"data\")\n\texpected_3 := true\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to check whether the length of the word is even or not.", "entry_point": "word_len", "canonical_solution": null}
{"task_id": "MBGP/965", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to convert camel case string to snake case string.\n// Examples:\n// >>> camel_to_snake('PythonProgram')\n// >>> ('python_program')\n// >>> camel_to_snake('pythonLanguage')\n// >>> ('python_language')\n// >>> camel_to_snake('ProgrammingLanguage')\n// >>> ('programming_language')\nfunc camel_to_snake (text string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := camel_to_snake(\"PythonProgram\")\n\texpected_1 := \"python_program\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := camel_to_snake(\"pythonLanguage\")\n\texpected_2 := \"python_language\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := camel_to_snake(\"ProgrammingLanguage\")\n\texpected_3 := \"programming_language\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to convert camel case string to snake case string.", "entry_point": "camel_to_snake", "canonical_solution": null}
{"task_id": "MBGP/966", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to remove an empty tuple from a list of tuples.\n// Examples:\n// >>> remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])\n// >>> [('',), ('a', 'b'), ('a', 'b', 'c'), 'd']\n// >>> remove_empty([(), (), ('',), (\"python\"), (\"program\")])\n// >>> [('',), (\"python\"), (\"program\")]\n// >>> remove_empty([(), (), ('',), (\"java\")])\n// >>> [('',),(\"java\") ]\nfunc remove_empty (tuple1 []interface{}) []interface{} {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := remove_empty([]interface{}{[]interface{}{}, []interface{}{}, []interface{}{\"\"}, []interface{}{\"a\", \"b\"}, []interface{}{\"a\", \"b\", \"c\"}, \"d\"})\n\texpected_1 := []interface{}{[]interface{}{\"\"}, []interface{}{\"a\", \"b\"}, []interface{}{\"a\", \"b\", \"c\"}, \"d\"}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := remove_empty([]interface{}{[]interface{}{}, []interface{}{}, []interface{}{\"\"}, \"python\", \"program\"})\n\texpected_2 := []interface{}{[]interface{}{\"\"}, \"python\", \"program\"}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := remove_empty([]interface{}{[]interface{}{}, []interface{}{}, []interface{}{\"\"}, \"java\"})\n\texpected_3 := []interface{}{[]interface{}{\"\"}, \"java\"}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to remove an empty tuple from a list of tuples.", "entry_point": "remove_empty", "canonical_solution": null}
{"task_id": "MBGP/967", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to accept the strings which contains all vowels.\n// Examples:\n// >>> check(\"SEEquoiaL\")\n// >>> 'accepted'\n// >>> check('program')\n// >>> \"not accepted\"\n// >>> check('fine')\n// >>> \"not accepted\"\nfunc check (string0 string) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := check(\"SEEquoiaL\")\n\texpected_1 := \"accepted\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := check(\"program\")\n\texpected_2 := \"not accepted\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := check(\"fine\")\n\texpected_3 := \"not accepted\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to accept the strings which contains all vowels.", "entry_point": "check", "canonical_solution": null}
{"task_id": "MBGP/968", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to find maximum possible value for the given periodic function.\n// Examples:\n// >>> floor_Max(11,10,9)\n// >>> 9\n// >>> floor_Max(5,7,4)\n// >>> 2\n// >>> floor_Max(2,2,1)\n// >>> 1\nfunc floor_Max (A int, B int, N int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := floor_Max(11,10,9)\n\texpected_1 := 9\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := floor_Max(5,7,4)\n\texpected_2 := 2\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := floor_Max(2,2,1)\n\texpected_3 := 1\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to find maximum possible value for the given periodic function.", "entry_point": "floor_Max", "canonical_solution": null}
{"task_id": "MBGP/969", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to join the tuples if they have similar initial elements.\n// Examples:\n// >>> join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] )\n// >>> [(5, 6, 7), (6, 8, 10), (7, 13)]\n// >>> join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] )\n// >>> [(6, 7, 8), (7, 9, 11), (8, 14)]\n// >>> join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] )\n// >>> [(7, 8, 9), (8, 10, 12), (9, 15)]\nfunc join_tuples (test_list [][]int) [][]int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := join_tuples([][]int{[]int{5, 6}, []int{5, 7}, []int{6, 8}, []int{6, 10}, []int{7, 13}})\n\texpected_1 := [][]int{[]int{5, 6, 7}, []int{6, 8, 10}, []int{7, 13}}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := join_tuples([][]int{[]int{6, 7}, []int{6, 8}, []int{7, 9}, []int{7, 11}, []int{8, 14}})\n\texpected_2 := [][]int{[]int{6, 7, 8}, []int{7, 9, 11}, []int{8, 14}}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := join_tuples([][]int{[]int{7, 8}, []int{7, 9}, []int{8, 10}, []int{8, 12}, []int{9, 15}})\n\texpected_3 := [][]int{[]int{7, 8, 9}, []int{8, 10, 12}, []int{9, 15}}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to join the tuples if they have similar initial elements.", "entry_point": "join_tuples", "canonical_solution": null}
{"task_id": "MBGP/970", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find minimum of two numbers.\n// Examples:\n// >>> min_of_two(10,20)\n// >>> 10\n// >>> min_of_two(19,15)\n// >>> 15\n// >>> min_of_two(-10,-20)\n// >>> -20\nfunc min_of_two (x int, y int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := min_of_two(10,20)\n\texpected_1 := 10\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := min_of_two(19,15)\n\texpected_2 := 15\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := min_of_two(-10,-20)\n\texpected_3 := -20\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find minimum of two numbers.", "entry_point": "min_of_two", "canonical_solution": null}
{"task_id": "MBGP/971", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n// Examples:\n// >>> maximum_segments(7, 5, 2, 5)\n// >>> 2\n// >>> maximum_segments(17, 2, 1, 3)\n// >>> 17\n// >>> maximum_segments(18, 16, 3, 6)\n// >>> 6\nfunc maximum_segments (n int, a int, b int, c int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := maximum_segments(7,5,2,5)\n\texpected_1 := 2\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := maximum_segments(17,2,1,3)\n\texpected_2 := 17\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := maximum_segments(18,16,3,6)\n\texpected_3 := 6\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.", "entry_point": "maximum_segments", "canonical_solution": null}
{"task_id": "MBGP/972", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to concatenate the given two tuples to a nested tuple.\n// Examples:\n// >>> concatenate_nested((3, 4), (5, 6))\n// >>> (3, 4, 5, 6)\n// >>> concatenate_nested((1, 2), (3, 4))\n// >>> (1, 2, 3, 4)\n// >>> concatenate_nested((4, 5), (6, 8))\n// >>> (4, 5, 6, 8)\nfunc concatenate_nested (test_tup1 []int, test_tup2 []int) []int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := concatenate_nested([]int{3, 4},[]int{5, 6})\n\texpected_1 := []int{3, 4, 5, 6}\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := concatenate_nested([]int{1, 2},[]int{3, 4})\n\texpected_2 := []int{1, 2, 3, 4}\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := concatenate_nested([]int{4, 5},[]int{6, 8})\n\texpected_3 := []int{4, 5, 6, 8}\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to concatenate the given two tuples to a nested tuple.", "entry_point": "concatenate_nested", "canonical_solution": null}
{"task_id": "MBGP/973", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a golang function to left rotate the string.\n// Examples:\n// >>> left_rotate(\"python\",2)\n// >>> \"thonpy\"\n// >>> left_rotate(\"bigdata\",3 )\n// >>> \"databig\"\n// >>> left_rotate(\"hadoop\",1 )\n// >>> \"adooph\"\nfunc left_rotate (s string, d int) string {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := left_rotate(\"python\",2)\n\texpected_1 := \"thonpy\"\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := left_rotate(\"bigdata\",3)\n\texpected_2 := \"databig\"\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := left_rotate(\"hadoop\",1)\n\texpected_3 := \"adooph\"\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a golang function to left rotate the string.", "entry_point": "left_rotate", "canonical_solution": null}
{"task_id": "MBGP/974", "prompt": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n)\n// Code should be written in Go/Golang\n// Write a function to find the minimum total path sum in the given triangle.\n// Examples:\n// >>> min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]])\n// >>> 6\n// >>> min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]])\n// >>> 10\n// >>> min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]])\n// >>> 9\nfunc min_sum_path (A [][]int) int {\n", "test": "\n\nfunc deepCompare(a interface{}, b interface{}, msg string) bool {\n\taJSON, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tbJSON, err := json.Marshal(b)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tvar a2 interface{}\n\tvar b2 interface{}\n\terr = json.Unmarshal(aJSON, &a2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\terr = json.Unmarshal(bJSON, &b2)\n\tif err != nil {\n\t\tpanic(msg)\n\t}\n\tresult := reflect.DeepEqual(a2, b2)\n\tif result {\n\t\treturn true\n\t} else {\n\t\tpanic(msg)\n\t}\n}\n\nfunc main() {\n\tactual_1 := min_sum_path([][]int{[]int{2}, []int{3, 9}, []int{1, 6, 7}})\n\texpected_1 := 6\n\tdeepCompare(actual_1, expected_1, \"Exception --- test case 0 failed to pass\")\n\n\tactual_2 := min_sum_path([][]int{[]int{2}, []int{3, 7}, []int{8, 5, 6}})\n\texpected_2 := 10\n\tdeepCompare(actual_2, expected_2, \"Exception --- test case 1 failed to pass\")\n\n\tactual_3 := min_sum_path([][]int{[]int{3}, []int{6, 4}, []int{5, 2, 7}})\n\texpected_3 := 9\n\tdeepCompare(actual_3, expected_3, \"Exception --- test case 2 failed to pass\")\n\n}", "language": "go", "description": "Write a function to find the minimum total path sum in the given triangle.", "entry_point": "min_sum_path", "canonical_solution": null}
